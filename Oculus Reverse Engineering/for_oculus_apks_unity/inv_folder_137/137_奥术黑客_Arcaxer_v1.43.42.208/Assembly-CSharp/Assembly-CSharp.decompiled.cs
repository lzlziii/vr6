using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Net.Http;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using ARRoomMapper;
using AssetIcons;
using Bhaptics.Tact;
using Bhaptics.Tact.Unity;
using DungeonArchitect;
using DungeonArchitect.Builders.FloorPlan;
using DungeonArchitect.Builders.Grid;
using DungeonArchitect.Builders.GridFlow.Graphs.Abstract;
using DungeonArchitect.Builders.GridFlow.Graphs.Exec;
using DungeonArchitect.Builders.GridFlow.Graphs.Exec.NodeHandlers;
using DungeonArchitect.Builders.GridFlow.Tilemap;
using DungeonArchitect.Builders.SimpleCity;
using DungeonArchitect.Builders.Snap.Impl;
using DungeonArchitect.Grammar;
using DungeonArchitect.Graphs;
using DungeonArchitect.Graphs.SpatialConstraints;
using DungeonArchitect.Landscape;
using DungeonArchitect.MiniMaps;
using DungeonArchitect.Navigation;
using DungeonArchitect.RoadNetworks;
using DungeonArchitect.RuntimeGraphs;
using DungeonArchitect.Samples.ShooterGame;
using DungeonArchitect.SpatialConstraints;
using DungeonArchitect.Triangulator.Geometry;
using DungeonArchitect.UI;
using DungeonArchitect.UI.Widgets;
using DungeonArchitect.UI.Widgets.GraphEditors;
using DungeonArchitect.Utils;
using DungeonArchitect.Utils.Noise;
using Eppy;
using Il2CppDummyDll;
using Oculus.Platform;
using Oculus.Platform.Models;
using Qiyi.UI.InputField;
using SharpNav;
using SharpNav.Collections;
using SharpNav.Collections.Generic;
using SharpNav.Crowds;
using SharpNav.Geometry;
using SharpNav.Pathfinding;
using Sigtrap.VrTunnellingPro;
using TMPro;
using Unity.XR.Qiyu;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Networking;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using UnityEngine.XR.Interaction.Toolkit;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class Camera_control : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speedH;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speedV;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float yaw;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float pitch;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0xC690CC", Offset = "0xC690CC", VA = "0xC690CC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0xC690D0", Offset = "0xC690D0", VA = "0xC690D0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0xC691AC", Offset = "0xC691AC", VA = "0xC691AC")]
	public Camera_control()
	{
	}
}
[Token(Token = "0x2000003")]
public class Skybox_rotator : MonoBehaviour
{
	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text skyboxNameText;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Material> skyboxes;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int currentSkybox;

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xC691BC", Offset = "0xC691BC", VA = "0xC691BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xC6925C", Offset = "0xC6925C", VA = "0xC6925C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xC691C0", Offset = "0xC691C0", VA = "0xC691C0")]
	private void SetSkybox()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xC692DC", Offset = "0xC692DC", VA = "0xC692DC")]
	public Skybox_rotator()
	{
	}
}
[Token(Token = "0x2000004")]
public class CameraMotion : MonoBehaviour
{
	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material[] maskObject;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ARSurfaceCreator aRSurfaceCreator;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform _cacheTrans;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject portal;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool _isChanged;

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xC692E4", Offset = "0xC692E4", VA = "0xC692E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xC6930C", Offset = "0xC6930C", VA = "0xC6930C")]
	private void Update()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xC69478", Offset = "0xC69478", VA = "0xC69478")]
	public CameraMotion()
	{
	}
}
[Token(Token = "0x2000005")]
public class FloorPlanRoomMarkers : DungeonMarkerEmitter
{
	[Token(Token = "0x600000B")]
	[Address(RVA = "0xC69488", Offset = "0xC69488", VA = "0xC69488", Slot = "4")]
	public override void EmitMarkers(DungeonBuilder builder)
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xC69778", Offset = "0xC69778", VA = "0xC69778")]
	private void DecorateRoom(DungeonBuilder builder, FloorChunk roomChunk, UnityEngine.Vector3 gridSize)
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xC69948", Offset = "0xC69948", VA = "0xC69948")]
	private void EmitChunkMarker(DungeonBuilder builder, string markerName, UnityEngine.Vector3 gridPositionF, float angle, UnityEngine.Vector3 gridSize, int cellId)
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xC69AD4", Offset = "0xC69AD4", VA = "0xC69AD4")]
	public FloorPlanRoomMarkers()
	{
	}
}
[Serializable]
[Token(Token = "0x2000006")]
public class SkyscraperRange
{
	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float startDistance;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float endDistance;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string markerName;

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xC69ADC", Offset = "0xC69ADC", VA = "0xC69ADC")]
	public SkyscraperRange()
	{
	}
}
[Token(Token = "0x2000007")]
public class CitySkyscraperInserter : DungeonEventListener
{
	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SkyscraperRange[] skyscraperRanges;

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xC69AE4", Offset = "0xC69AE4", VA = "0xC69AE4", Slot = "5")]
	public override void OnDungeonMarkersEmitted(Dungeon dungeon, DungeonModel model, LevelMarkerList markers)
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xC69F68", Offset = "0xC69F68", VA = "0xC69F68")]
	public CitySkyscraperInserter()
	{
	}
}
[Token(Token = "0x2000008")]
public class SnapDemo_ProceduralLevelLayout : MonoBehaviour, IGrammarGraphBuildScript
{
	[Token(Token = "0x6000012")]
	[Address(RVA = "0xC69F70", Offset = "0xC69F70", VA = "0xC69F70", Slot = "4")]
	public void Generate(IGrammarGraphBuilder grammarBuilder)
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xC6A444", Offset = "0xC6A444", VA = "0xC6A444")]
	public SnapDemo_ProceduralLevelLayout()
	{
	}
}
[Token(Token = "0x2000009")]
public class CliffTileRandomTransformer : TransformationRule
{
	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tileWidth;

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xC6A44C", Offset = "0xC6A44C", VA = "0xC6A44C", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xC6A550", Offset = "0xC6A550", VA = "0xC6A550")]
	public CliffTileRandomTransformer()
	{
	}
}
[Token(Token = "0x200000A")]
public class Pickup : MonoBehaviour
{
	[Token(Token = "0x6000016")]
	[Address(RVA = "0xC6A560", Offset = "0xC6A560", VA = "0xC6A560")]
	private void Start()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xC6A564", Offset = "0xC6A564", VA = "0xC6A564")]
	private void OnTriggerEnter2D(Collider2D other)
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xC6A650", Offset = "0xC6A650", VA = "0xC6A650")]
	public Pickup()
	{
	}
}
[Token(Token = "0x200000B")]
public class PickupWobbler : MonoBehaviour
{
	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector2 wobbleDirection;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float speed;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float randomStartAngle;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector3 originalPosition;

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xC6A658", Offset = "0xC6A658", VA = "0xC6A658")]
	private void Start()
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xC6A6A0", Offset = "0xC6A6A0", VA = "0xC6A6A0")]
	private void Update()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xC6A730", Offset = "0xC6A730", VA = "0xC6A730")]
	public PickupWobbler()
	{
	}
}
[Token(Token = "0x200000C")]
public class PlayerCameraZoom : MonoBehaviour
{
	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float sensitivity;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float zoomMultiplier;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxSpeed;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody2D rigidBody2D;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float startingZoom;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float targetZoom;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera cam;

	[Token(Token = "0x600001C")]
	[Address(RVA = "0xC6A790", Offset = "0xC6A790", VA = "0xC6A790")]
	private void Awake()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0xC6A7F4", Offset = "0xC6A7F4", VA = "0xC6A7F4")]
	private void Update()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0xC6A90C", Offset = "0xC6A90C", VA = "0xC6A90C")]
	public PlayerCameraZoom()
	{
	}
}
[Token(Token = "0x200000D")]
public class RotatorZ : MonoBehaviour
{
	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float frequency;

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xC6A928", Offset = "0xC6A928", VA = "0xC6A928")]
	private void Update()
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0xC6A980", Offset = "0xC6A980", VA = "0xC6A980")]
	public RotatorZ()
	{
	}
}
[Token(Token = "0x200000E")]
public class BillboardGizmo : MonoBehaviour
{
	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string iconName;

	[Token(Token = "0x6000021")]
	[Address(RVA = "0xC6A990", Offset = "0xC6A990", VA = "0xC6A990")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0xC6A9F8", Offset = "0xC6A9F8", VA = "0xC6A9F8")]
	public BillboardGizmo()
	{
	}
}
[Token(Token = "0x200000F")]
public class AdjacentCorridorTracker : MonoBehaviour
{
	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Dungeon dungeon;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GridDungeonModel gridModel;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material materialCursor;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material materialCorridors;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material materialRooms;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<int> ConnectedCorridors;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<int> ConnectedRooms;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int cursorCellId;

	[Token(Token = "0x6000023")]
	[Address(RVA = "0xC6AA48", Offset = "0xC6AA48", VA = "0xC6AA48")]
	private void Start()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0xC6AB48", Offset = "0xC6AB48", VA = "0xC6AB48")]
	private Material CreateMaterial(Color color)
	{
		return null;
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0xC6ACBC", Offset = "0xC6ACBC", VA = "0xC6ACBC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0xC6B2E0", Offset = "0xC6B2E0", VA = "0xC6B2E0")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xC6B3E8", Offset = "0xC6B3E8", VA = "0xC6B3E8")]
	private void DrawCells(List<int> cellIds, Material mat)
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xC6B6D4", Offset = "0xC6B6D4", VA = "0xC6B6D4")]
	private void DrawQuad(UnityEngine.Vector3 start, UnityEngine.Vector3 size)
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xC6ADB0", Offset = "0xC6ADB0", VA = "0xC6ADB0")]
	private DungeonArchitect.Builders.Grid.Cell FindCellAtMousePosition(Camera cam)
	{
		return null;
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xC6B74C", Offset = "0xC6B74C", VA = "0xC6B74C")]
	public AdjacentCorridorTracker()
	{
	}
}
[Token(Token = "0x2000010")]
public class RemoveDuplicateMarkersWithinCell : DungeonEventListener
{
	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string markerName;

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xC6B7EC", Offset = "0xC6B7EC", VA = "0xC6B7EC", Slot = "5")]
	public override void OnDungeonMarkersEmitted(Dungeon dungeon, DungeonModel model, LevelMarkerList markers)
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0xC6BE70", Offset = "0xC6BE70", VA = "0xC6BE70")]
	public RemoveDuplicateMarkersWithinCell()
	{
	}
}
[Token(Token = "0x2000011")]
public class VolumeSpawnExampleListener : DungeonEventListener
{
	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Graph bossRoomTheme;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Graph spawnRoomTheme;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Graph[] roomThemes;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private List<GameObject> managedVolumes;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Volume themeVolumeTemplate;

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xC6BE78", Offset = "0xC6BE78", VA = "0xC6BE78", Slot = "4")]
	public override void OnPostDungeonLayoutBuild(Dungeon dungeon, DungeonModel model)
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0xC6C608", Offset = "0xC6C608", VA = "0xC6C608", Slot = "9")]
	public override void OnDungeonDestroyed(Dungeon dungeon)
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0xC6C330", Offset = "0xC6C330", VA = "0xC6C330")]
	private void DecorateRoom(Dungeon dungeon, GridDungeonModel gridModel, DungeonArchitect.Builders.Grid.Cell cell, Graph theme)
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0xC6C5BC", Offset = "0xC6C5BC", VA = "0xC6C5BC")]
	private Graph GetRandomTheme()
	{
		return null;
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xC6C2CC", Offset = "0xC6C2CC", VA = "0xC6C2CC")]
	private void FindStartEndRooms(GridDungeonModel gridModel, out DungeonArchitect.Builders.Grid.Cell spawnCell, out DungeonArchitect.Builders.Grid.Cell finalBossCell)
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xC6C0F0", Offset = "0xC6C0F0", VA = "0xC6C0F0")]
	private void DestroyManagedVolumes()
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xC6C60C", Offset = "0xC6C60C", VA = "0xC6C60C")]
	public VolumeSpawnExampleListener()
	{
	}
}
[Token(Token = "0x2000012")]
public class DemoHUD : MonoBehaviour
{
	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GUIStyle guiStyle;

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xC6C688", Offset = "0xC6C688", VA = "0xC6C688")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xC6C738", Offset = "0xC6C738", VA = "0xC6C738")]
	public DemoHUD()
	{
	}
}
[Token(Token = "0x2000013")]
public class RegenerateDungeonLayout : MonoBehaviour
{
	[Token(Token = "0x2000014")]
	[CompilerGenerated]
	private sealed class <RebuildDungeon>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RegenerateDungeonLayout <>4__this;

		[Token(Token = "0x17000001")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600003D")]
			[Address(RVA = "0xC6C9AC", Offset = "0xC6C9AC", VA = "0xC6C9AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000002")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600003F")]
			[Address(RVA = "0xC6C9F4", Offset = "0xC6C9F4", VA = "0xC6C9F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600003A")]
		[Address(RVA = "0xC6C804", Offset = "0xC6C804", VA = "0xC6C804")]
		[DebuggerHidden]
		public <RebuildDungeon>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x600003B")]
		[Address(RVA = "0xC6C83C", Offset = "0xC6C83C", VA = "0xC6C83C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600003C")]
		[Address(RVA = "0xC6C840", Offset = "0xC6C840", VA = "0xC6C840", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600003E")]
		[Address(RVA = "0xC6C9B4", Offset = "0xC6C9B4", VA = "0xC6C9B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Dungeon dungeon;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool performCleanRebuild;

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xC6C740", Offset = "0xC6C740", VA = "0xC6C740")]
	private void Start()
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xC6C7C8", Offset = "0xC6C7C8", VA = "0xC6C7C8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xC6C760", Offset = "0xC6C760", VA = "0xC6C760")]
	[IteratorStateMachine(typeof(<RebuildDungeon>d__4))]
	private IEnumerator RebuildDungeon()
	{
		return null;
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xC6C82C", Offset = "0xC6C82C", VA = "0xC6C82C")]
	public RegenerateDungeonLayout()
	{
	}
}
[Token(Token = "0x2000015")]
internal class CellSpatialConfig3D
{
	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string MarkerName;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int[] NeighborConfig;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float RotationOffsetZ;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool StopOnFound;

	[Token(Token = "0x6000040")]
	[Address(RVA = "0xC6C9FC", Offset = "0xC6C9FC", VA = "0xC6C9FC")]
	public CellSpatialConfig3D()
	{
	}
}
[Token(Token = "0x2000016")]
public class CornerEmitter3D : DungeonMarkerEmitter
{
	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<CellSpatialConfig3D> CornerConfigs;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool mergeRoomCorridor;

	[Token(Token = "0x6000041")]
	[Address(RVA = "0xC6CA0C", Offset = "0xC6CA0C", VA = "0xC6CA0C")]
	private void RegisterConfig(string MarkerName, int[] NeighborConfig)
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xC6CA14", Offset = "0xC6CA14", VA = "0xC6CA14")]
	private void RegisterConfig(string MarkerName, int[] NeighborConfig, bool StopOnFound)
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xC6CBC8", Offset = "0xC6CBC8", VA = "0xC6CBC8")]
	private int[] Rotate90(int[] NeighborConfig)
	{
		return null;
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xC6CCF4", Offset = "0xC6CCF4", VA = "0xC6CCF4", Slot = "4")]
	public override void EmitMarkers(DungeonBuilder builder)
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xC6D544", Offset = "0xC6D544", VA = "0xC6D544")]
	private void EmitForPoint(DungeonBuilder builder, GridDungeonModel model, IntVector point)
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xC6D6FC", Offset = "0xC6D6FC", VA = "0xC6D6FC")]
	private bool ConfigMatches(GridDungeonModel Model, IntVector Point, CellSpatialConfig3D Config)
	{
		return default(bool);
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xC6DB04", Offset = "0xC6DB04", VA = "0xC6DB04")]
	private bool IsRoomCorridor(CellType type0, CellType type1)
	{
		return default(bool);
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xC6D91C", Offset = "0xC6D91C", VA = "0xC6D91C")]
	private void EmitCornerMarker(DungeonBuilder builder, GridDungeonModel model, IntVector point, float angleY, string markerName)
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xC6D0B4", Offset = "0xC6D0B4", VA = "0xC6D0B4")]
	private void Initialize()
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xC6DB60", Offset = "0xC6DB60", VA = "0xC6DB60")]
	public CornerEmitter3D()
	{
	}
}
[Token(Token = "0x2000017")]
public class GaiaLandscapeModifier : DungeonEventListener
{
	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Terrain terrain;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int corridorTextureIndex;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int roadBlurDistance;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float corridorBlurThreshold;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool modifyTextures;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool modifyDetails;

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xC6DBDC", Offset = "0xC6DBDC", VA = "0xC6DBDC", Slot = "4")]
	public override void OnPostDungeonLayoutBuild(Dungeon dungeon, DungeonModel model)
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xC6DDC0", Offset = "0xC6DDC0", VA = "0xC6DDC0")]
	private void UpdateTerrainDetails(GridDungeonModel model)
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xC6DC88", Offset = "0xC6DC88", VA = "0xC6DC88")]
	private void UpdateTerrainTextures(GridDungeonModel model)
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xC6DF24", Offset = "0xC6DF24", VA = "0xC6DF24")]
	private void UpdateDetailTexture(GridDungeonModel model, int[,] map)
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xC6E21C", Offset = "0xC6E21C", VA = "0xC6E21C")]
	private void UpdateBaseTexture(GridDungeonModel model, float[,,] map)
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xC6E700", Offset = "0xC6E700", VA = "0xC6E700")]
	public GaiaLandscapeModifier()
	{
	}
}
[Token(Token = "0x2000018")]
public class IsaacMarkerEmitter_RoomCenter : DungeonMarkerEmitter
{
	[Token(Token = "0x6000051")]
	[Address(RVA = "0xC6E71C", Offset = "0xC6E71C", VA = "0xC6E71C", Slot = "4")]
	public override void EmitMarkers(DungeonBuilder builder)
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xC6ED7C", Offset = "0xC6ED7C", VA = "0xC6ED7C")]
	public IsaacMarkerEmitter_RoomCenter()
	{
	}
}
[Token(Token = "0x2000019")]
public class MarkerTerrainClampListener : DungeonEventListener
{
	[Token(Token = "0x6000053")]
	[Address(RVA = "0xC6ED84", Offset = "0xC6ED84", VA = "0xC6ED84", Slot = "5")]
	public override void OnDungeonMarkersEmitted(Dungeon dungeon, DungeonModel model, LevelMarkerList markers)
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xC6F090", Offset = "0xC6F090", VA = "0xC6F090")]
	private UnityEngine.Vector3 GetClampedPosition(ref Matrix4x4 mat, Terrain terrain)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xC6F0D8", Offset = "0xC6F0D8", VA = "0xC6F0D8")]
	public MarkerTerrainClampListener()
	{
	}
}
[Token(Token = "0x200001A")]
public class RoomMidEmitter : DungeonMarkerEmitter
{
	[Token(Token = "0x6000056")]
	[Address(RVA = "0xC6F0E0", Offset = "0xC6F0E0", VA = "0xC6F0E0", Slot = "4")]
	public override void EmitMarkers(DungeonBuilder builder)
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xC6F528", Offset = "0xC6F528", VA = "0xC6F528")]
	public RoomMidEmitter()
	{
	}
}
[Token(Token = "0x200001B")]
public class AlternateSelectionRule : SelectorRule
{
	[Token(Token = "0x6000058")]
	[Address(RVA = "0xC6F530", Offset = "0xC6F530", VA = "0xC6F530", Slot = "4")]
	public override bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
	{
		return default(bool);
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xC6F558", Offset = "0xC6F558", VA = "0xC6F558")]
	public AlternateSelectionRule()
	{
	}
}
[Token(Token = "0x200001C")]
public class BrokenTilesTransformRule : TransformationRule
{
	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maxAngle;

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xC6F560", Offset = "0xC6F560", VA = "0xC6F560", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xC6F618", Offset = "0xC6F618", VA = "0xC6F618")]
	public BrokenTilesTransformRule()
	{
	}
}
[Token(Token = "0x200001D")]
public class ClampToGroundTransformRule : TransformationRule
{
	[Token(Token = "0x600005C")]
	[Address(RVA = "0xC6F628", Offset = "0xC6F628", VA = "0xC6F628", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xC6F7FC", Offset = "0xC6F7FC", VA = "0xC6F7FC")]
	public ClampToGroundTransformRule()
	{
	}
}
[Token(Token = "0x200001E")]
public class ClampToTerrainTransformRule : TransformationRule
{
	[Token(Token = "0x600005E")]
	[Address(RVA = "0xC6F804", Offset = "0xC6F804", VA = "0xC6F804", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xC6F924", Offset = "0xC6F924", VA = "0xC6F924")]
	public ClampToTerrainTransformRule()
	{
	}
}
[Token(Token = "0x200001F")]
public class NonDoorTileSelectionRule : SelectorRule
{
	[Token(Token = "0x6000060")]
	[Address(RVA = "0xC6F92C", Offset = "0xC6F92C", VA = "0xC6F92C", Slot = "4")]
	public override bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
	{
		return default(bool);
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xC6FA64", Offset = "0xC6FA64", VA = "0xC6FA64")]
	public NonDoorTileSelectionRule()
	{
	}
}
[Token(Token = "0x2000020")]
public class NonStairRoomTileSelectorRule : NonViewBlockingSelectionRule
{
	[Token(Token = "0x6000062")]
	[Address(RVA = "0xC6FA6C", Offset = "0xC6FA6C", VA = "0xC6FA6C", Slot = "4")]
	public override bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
	{
		return default(bool);
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xC6FD40", Offset = "0xC6FD40", VA = "0xC6FD40")]
	public NonStairRoomTileSelectorRule()
	{
	}
}
[Token(Token = "0x2000021")]
public class NonStairTileSelectorRule : NonViewBlockingSelectionRule
{
	[Token(Token = "0x6000064")]
	[Address(RVA = "0xC6FDA0", Offset = "0xC6FDA0", VA = "0xC6FDA0", Slot = "4")]
	public override bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
	{
		return default(bool);
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xC6FF64", Offset = "0xC6FF64", VA = "0xC6FF64")]
	public NonStairTileSelectorRule()
	{
	}
}
[Token(Token = "0x2000022")]
public class NonViewBlockingPillarSelectorRule : NonViewBlockingSelectionRule
{
	[Token(Token = "0x6000066")]
	[Address(RVA = "0xC6FFBC", Offset = "0xC6FFBC", VA = "0xC6FFBC", Slot = "4")]
	public override bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
	{
		return default(bool);
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xC700CC", Offset = "0xC700CC", VA = "0xC700CC")]
	public NonViewBlockingPillarSelectorRule()
	{
	}
}
[Token(Token = "0x2000023")]
public class NonViewBlockingSelectionRule : SelectorRule
{
	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static UnityEngine.Vector3[] validDirections;

	[Token(Token = "0x6000068")]
	[Address(RVA = "0xC6FC2C", Offset = "0xC6FC2C", VA = "0xC6FC2C", Slot = "4")]
	public override bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
	{
		return default(bool);
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0xC6FD98", Offset = "0xC6FD98", VA = "0xC6FD98")]
	public NonViewBlockingSelectionRule()
	{
	}
}
[Token(Token = "0x2000024")]
public class RandomCliffTransformRule : TransformationRule
{
	[Token(Token = "0x600006B")]
	[Address(RVA = "0xC701C4", Offset = "0xC701C4", VA = "0xC701C4", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xC70268", Offset = "0xC70268", VA = "0xC70268")]
	public RandomCliffTransformRule()
	{
	}
}
[Token(Token = "0x2000025")]
public class RandomRotY90TransformRule : TransformationRule
{
	[Token(Token = "0x600006D")]
	[Address(RVA = "0xC70270", Offset = "0xC70270", VA = "0xC70270", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xC702F4", Offset = "0xC702F4", VA = "0xC702F4")]
	public RandomRotY90TransformRule()
	{
	}
}
[Token(Token = "0x2000026")]
public class RandomRotYTransformRule : TransformationRule
{
	[Token(Token = "0x600006F")]
	[Address(RVA = "0xC702FC", Offset = "0xC702FC", VA = "0xC702FC", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xC70378", Offset = "0xC70378", VA = "0xC70378")]
	public RandomRotYTransformRule()
	{
	}
}
[Token(Token = "0x2000027")]
public class RoomSelectionRule : SelectorRule
{
	[Token(Token = "0x6000071")]
	[Address(RVA = "0xC70380", Offset = "0xC70380", VA = "0xC70380", Slot = "4")]
	public override bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
	{
		return default(bool);
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xC70424", Offset = "0xC70424", VA = "0xC70424")]
	public RoomSelectionRule()
	{
	}
}
[Token(Token = "0x2000028")]
public class SmallYTransformRule : TransformationRule
{
	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float angleVariation;

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xC7042C", Offset = "0xC7042C", VA = "0xC7042C", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xC704B4", Offset = "0xC704B4", VA = "0xC704B4")]
	public SmallYTransformRule()
	{
	}
}
[Token(Token = "0x2000029")]
public class ZFightingFixTransformRule : TransformationRule
{
	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float movementDistance;

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xC704C4", Offset = "0xC704C4", VA = "0xC704C4", Slot = "4")]
	public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xC7052C", Offset = "0xC7052C", VA = "0xC7052C")]
	public ZFightingFixTransformRule()
	{
	}
}
[Token(Token = "0x200002A")]
public class CameraMovement : MonoBehaviour
{
	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float movementSpeed;

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xC70540", Offset = "0xC70540", VA = "0xC70540")]
	private void Start()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xC70544", Offset = "0xC70544", VA = "0xC70544")]
	private void Update()
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0xC706EC", Offset = "0xC706EC", VA = "0xC706EC")]
	public CameraMovement()
	{
	}
}
[Token(Token = "0x200002B")]
public class DestroyOnStart : MonoBehaviour
{
	[Token(Token = "0x600007A")]
	[Address(RVA = "0xC706FC", Offset = "0xC706FC", VA = "0xC706FC")]
	private void Start()
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xC70768", Offset = "0xC70768", VA = "0xC70768")]
	private void Update()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xC7076C", Offset = "0xC7076C", VA = "0xC7076C")]
	public DestroyOnStart()
	{
	}
}
[Token(Token = "0x200002C")]
[AddComponentMenu("Camera/Simple Smooth Mouse Look ")]
public class SimpleSmoothMouseLook : MonoBehaviour
{
	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.Vector2 _mouseAbsolute;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.Vector2 _smoothMouse;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.Vector2 clampInDegrees;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool lockCursor;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public UnityEngine.Vector2 sensitivity;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public UnityEngine.Vector2 smoothing;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public UnityEngine.Vector2 targetDirection;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public UnityEngine.Vector2 targetCharacterDirection;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject characterBody;

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xC70774", Offset = "0xC70774", VA = "0xC70774")]
	private void Start()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xC70860", Offset = "0xC70860", VA = "0xC70860")]
	private void Update()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xC70DF8", Offset = "0xC70DF8", VA = "0xC70DF8")]
	public SimpleSmoothMouseLook()
	{
	}
}
[Token(Token = "0x200002D")]
public class Car : MonoBehaviour
{
	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float turnspeed;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float destination;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float direction;

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xC70E18", Offset = "0xC70E18", VA = "0xC70E18")]
	private void Update()
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xC71110", Offset = "0xC71110", VA = "0xC71110")]
	private void FindDestination(UnityEngine.Vector3 tPos)
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xC71180", Offset = "0xC71180", VA = "0xC71180")]
	private float mod(float a)
	{
		return default(float);
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xC71190", Offset = "0xC71190", VA = "0xC71190")]
	public Car()
	{
	}
}
[Token(Token = "0x200002E")]
public class Move : MonoBehaviour
{
	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private UnityEngine.Vector3 forward;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<GameObject> Tiles;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float zPos;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int starTiles;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int prevRand;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int num;

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xC711A4", Offset = "0xC711A4", VA = "0xC711A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xC716B4", Offset = "0xC716B4", VA = "0xC716B4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xC718A8", Offset = "0xC718A8", VA = "0xC718A8")]
	public Move()
	{
	}
}
[Token(Token = "0x200002F")]
public class PoolManager : MonoBehaviour
{
	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<int, Queue<GameObject>> pool;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Camera cam;

	[Token(Token = "0x17000003")]
	public static PoolManager Instance
	{
		[Token(Token = "0x6000087")]
		[Address(RVA = "0xC7196C", Offset = "0xC7196C", VA = "0xC7196C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000088")]
		[Address(RVA = "0xC719B4", Offset = "0xC719B4", VA = "0xC719B4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xC71A00", Offset = "0xC71A00", VA = "0xC71A00")]
	public void Awake()
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xC71A4C", Offset = "0xC71A4C", VA = "0xC71A4C")]
	private void Start()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xC713A8", Offset = "0xC713A8", VA = "0xC713A8")]
	public void CreatePool(GameObject gameObj, int numberOfObj)
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xC71560", Offset = "0xC71560", VA = "0xC71560")]
	public void Reuse(int gameObjKey, UnityEngine.Vector3 position, Quaternion orientation)
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xC71AC0", Offset = "0xC71AC0", VA = "0xC71AC0")]
	public void Reuse(int gameObjKey)
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xC71B8C", Offset = "0xC71B8C", VA = "0xC71B8C")]
	private void Update()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xC71EBC", Offset = "0xC71EBC", VA = "0xC71EBC")]
	public PoolManager()
	{
	}
}
[Token(Token = "0x2000030")]
[ExecuteInEditMode]
public class FastBloom : MonoBehaviour
{
	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool SetBloomIterations;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(2f, 9f)]
	public int BloomIterations;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0f, 1f)]
	public float BloomDiffusion;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Color BloomColor;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float BloomAmount;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float BloomThreshold;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Range(0f, 1f)]
	public float BloomSoftness;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material material;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int blurAmountString;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int bloomColorString;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int blDataString;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int bloomTexString;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly string rgbmKeyword;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float knee;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private RenderTextureFormat format;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool rgbm;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector4 bloomData;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private RenderTextureDescriptor opaqueDesc;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private UnityEngine.Vector3 lm;

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xC71F38", Offset = "0xC71F38", VA = "0xC71F38")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xC7280C", Offset = "0xC7280C", VA = "0xC7280C")]
	public FastBloom()
	{
	}
}
[Token(Token = "0x2000031")]
[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
public class FastSSAO : MonoBehaviour
{
	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0f, 3f)]
	public float Intensity;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 3f)]
	public float BlurAmount;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0f, 1f)]
	public float Radius;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 4f)]
	public float Area;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool FastMode;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material material;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera cam;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int blurTexString;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly int instensityString;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int blurAmountString;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly int radiusString;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly int areaString;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly string fastKeyword;

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xC72964", Offset = "0xC72964", VA = "0xC72964")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xC729C4", Offset = "0xC729C4", VA = "0xC729C4")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xC72CDC", Offset = "0xC72CDC", VA = "0xC72CDC")]
	public FastSSAO()
	{
	}
}
[Token(Token = "0x2000032")]
[ExecuteInEditMode]
public class GlitchCameraShader : MonoBehaviour
{
	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material material;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GlitchInterval;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 1f)]
	public float GlitchRate;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float HorizontalResolution;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float VerticalResolution;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(0f, 1f)]
	public float WhiteNoiseIntensity;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0f, 1f)]
	public float WaveNoiseIntensity;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(0f, 1f)]
	public float RGBShiftIntensity;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Color GlitchTint;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Space]
	[Tooltip("Toggle the horizontal line glitch that moves vertically on the screen.")]
	[Header("Component Settings")]
	public bool EnableScanlineGlitch;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	[Tooltip("Toggle the rectangle shifting glitch component")]
	public bool EnableBlockGlitch;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	[Tooltip("Toggle the screen shaking glitch controlled by Glitch Interval and Glitch Rate.")]
	public bool EnableShakeGlitch;

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xC72E38", Offset = "0xC72E38", VA = "0xC72E38")]
	private void Start()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xC72F18", Offset = "0xC72F18", VA = "0xC72F18")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xC72FF8", Offset = "0xC72FF8", VA = "0xC72FF8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xC73088", Offset = "0xC73088", VA = "0xC73088")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xC73380", Offset = "0xC73380", VA = "0xC73380")]
	public GlitchCameraShader()
	{
	}
}
[Token(Token = "0x2000033")]
[ExecuteInEditMode]
public class MobileGlitchCameraShader : MonoBehaviour
{
	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Material material;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GlitchInterval;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 1f)]
	public float GlitchRate;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float HorizontalResolution;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float VerticalResolution;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(0f, 1f)]
	public float WhiteNoiseIntensity;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0f, 1f)]
	public float WaveNoiseIntensity;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(0f, 1f)]
	public float RGBShiftIntensity;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Tooltip("Toggle the horizontal line glitch that moves vertically on the screen.")]
	[Header("Component Settings")]
	[Space]
	public bool EnableScanlineGlitch;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	[Tooltip("Toggle the rectangle shifting glitch component")]
	public bool EnableBlockGlitch;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	[Tooltip("Toggle the screen shaking glitch controlled by Glitch Interval and Glitch Rate.")]
	public bool EnableShakeGlitch;

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xC733B8", Offset = "0xC733B8", VA = "0xC733B8")]
	private void Start()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xC73498", Offset = "0xC73498", VA = "0xC73498")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xC73578", Offset = "0xC73578", VA = "0xC73578")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xC73840", Offset = "0xC73840", VA = "0xC73840")]
	public void OnEnableBlockGlitchChanged(bool enable)
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xC7384C", Offset = "0xC7384C", VA = "0xC7384C")]
	public void OnEnableShakeGlitchChanged(bool enable)
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xC73858", Offset = "0xC73858", VA = "0xC73858")]
	public void OnEnableScanlineGlitchChanged(bool enable)
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xC73864", Offset = "0xC73864", VA = "0xC73864")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xC738F4", Offset = "0xC738F4", VA = "0xC738F4")]
	public MobileGlitchCameraShader()
	{
	}
}
[Token(Token = "0x2000034")]
public class SimpleRotator : MonoBehaviour
{
	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Speed;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UnityEngine.Vector3 RotateAbout;

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xC73928", Offset = "0xC73928", VA = "0xC73928")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xC73A38", Offset = "0xC73A38", VA = "0xC73A38")]
	public SimpleRotator()
	{
	}
}
[Token(Token = "0x2000035")]
public class DisplayIfAttribute : PropertyAttribute
{
	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private string field;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private object[] values;

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xC73AA0", Offset = "0xC73AA0", VA = "0xC73AA0")]
	public DisplayIfAttribute(string field, params object[] values)
	{
	}
}
[Token(Token = "0x2000036")]
[AddComponentMenu("UI/ToJ Effects/Better Outline", 0)]
[RequireComponent(typeof(Text))]
public class BetterOutline : Shadow
{
	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<UIVertex> m_Verts;

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xC73ACC", Offset = "0xC73ACC", VA = "0xC73ACC")]
	protected BetterOutline()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xC73B48", Offset = "0xC73B48", VA = "0xC73B48", Slot = "20")]
	public override void ModifyMesh(VertexHelper vh)
	{
	}
}
[Token(Token = "0x2000037")]
[RequireComponent(typeof(Text))]
[AddComponentMenu("UI/ToJ Effects/Outer Bevel", 4)]
public class Bevel : BaseMeshEffect
{
	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Color m_HighlightColor;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Color m_ShadowColor;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private UnityEngine.Vector2 m_BevelDirectionAndDepth;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private bool m_UseGraphicAlpha;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<UIVertex> m_Verts;

	[Token(Token = "0x17000004")]
	public Color highlightColor
	{
		[Token(Token = "0x60000AA")]
		[Address(RVA = "0xC74CE0", Offset = "0xC74CE0", VA = "0xC74CE0")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x60000AB")]
		[Address(RVA = "0xC74CEC", Offset = "0xC74CEC", VA = "0xC74CEC")]
		set
		{
		}
	}

	[Token(Token = "0x17000005")]
	public Color shadowColor
	{
		[Token(Token = "0x60000AC")]
		[Address(RVA = "0xC74DC0", Offset = "0xC74DC0", VA = "0xC74DC0")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x60000AD")]
		[Address(RVA = "0xC74DCC", Offset = "0xC74DCC", VA = "0xC74DCC")]
		set
		{
		}
	}

	[Token(Token = "0x17000006")]
	public UnityEngine.Vector2 bevelDirectionAndDepth
	{
		[Token(Token = "0x60000AE")]
		[Address(RVA = "0xC74EA0", Offset = "0xC74EA0", VA = "0xC74EA0")]
		get
		{
			return default(UnityEngine.Vector2);
		}
		[Token(Token = "0x60000AF")]
		[Address(RVA = "0xC74EA8", Offset = "0xC74EA8", VA = "0xC74EA8")]
		set
		{
		}
	}

	[Token(Token = "0x17000007")]
	public bool useGraphicAlpha
	{
		[Token(Token = "0x60000B0")]
		[Address(RVA = "0xC74F8C", Offset = "0xC74F8C", VA = "0xC74F8C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000B1")]
		[Address(RVA = "0xC74F94", Offset = "0xC74F94", VA = "0xC74F94")]
		set
		{
		}
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xC74C44", Offset = "0xC74C44", VA = "0xC74C44")]
	protected Bevel()
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xC7504C", Offset = "0xC7504C", VA = "0xC7504C")]
	protected void ApplyShadowZeroAlloc(List<UIVertex> verts, Color32 color, int start, int end, float x, float y)
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xC752F4", Offset = "0xC752F4", VA = "0xC752F4", Slot = "20")]
	public override void ModifyMesh(VertexHelper vh)
	{
	}
}
[Token(Token = "0x2000038")]
[AddComponentMenu("UI/ToJ Effects/Character Spacing", 7)]
[RequireComponent(typeof(Text))]
public class CharacterSpacing : BaseMeshEffect
{
	[Token(Token = "0x400009B")]
	private const string REGEX_TAGS = "<b>|</b>|<i>|</i>|<size=.*?>|</size>|<color=.*?>|</color>|<material=.*?>|</material>";

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float m_Offset;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<UIVertex> m_Verts;

	[Token(Token = "0x17000008")]
	public float offset
	{
		[Token(Token = "0x60000B5")]
		[Address(RVA = "0xC76394", Offset = "0xC76394", VA = "0xC76394")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000B6")]
		[Address(RVA = "0xC7639C", Offset = "0xC7639C", VA = "0xC7639C")]
		set
		{
		}
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xC76318", Offset = "0xC76318", VA = "0xC76318")]
	protected CharacterSpacing()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xC76460", Offset = "0xC76460", VA = "0xC76460", Slot = "20")]
	public override void ModifyMesh(VertexHelper vh)
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xC76F2C", Offset = "0xC76F2C", VA = "0xC76F2C")]
	private MatchCollection GetRegexMatchedTags(string text, out int lengthWithoutTags)
	{
		return null;
	}
}
[Token(Token = "0x2000039")]
[AddComponentMenu("UI/ToJ Effects/Curve Effect", 6)]
[RequireComponent(typeof(Text))]
public class CurveEffect : BaseMeshEffect
{
	[Token(Token = "0x200003A")]
	public enum CurveMode
	{
		[Token(Token = "0x40000A3")]
		TextArea,
		[Token(Token = "0x40000A4")]
		FullRect
	}

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private CurveMode m_CurveMode;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AnimationCurve m_Curve;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float m_Strength;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<UIVertex> m_Verts;

	[Token(Token = "0x17000009")]
	public AnimationCurve curve
	{
		[Token(Token = "0x60000BA")]
		[Address(RVA = "0xC77410", Offset = "0xC77410", VA = "0xC77410")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000BB")]
		[Address(RVA = "0xC77418", Offset = "0xC77418", VA = "0xC77418")]
		set
		{
		}
	}

	[Token(Token = "0x1700000A")]
	public float strength
	{
		[Token(Token = "0x60000BC")]
		[Address(RVA = "0xC774D0", Offset = "0xC774D0", VA = "0xC774D0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000BD")]
		[Address(RVA = "0xC774D8", Offset = "0xC774D8", VA = "0xC774D8")]
		set
		{
		}
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xC77274", Offset = "0xC77274", VA = "0xC77274")]
	protected CurveEffect()
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xC7759C", Offset = "0xC7759C", VA = "0xC7759C", Slot = "20")]
	public override void ModifyMesh(VertexHelper vh)
	{
	}
}
[Token(Token = "0x200003B")]
[AddComponentMenu("UI/ToJ Effects/Depth Effect", 2)]
[RequireComponent(typeof(Text))]
public class DepthEffect : BaseMeshEffect
{
	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Color m_EffectColor;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEngine.Vector2 m_EffectDirectionAndDepth;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private UnityEngine.Vector2 m_DepthPerspectiveStrength;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool m_OnlyInitialCharactersGenerateDepth;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	[SerializeField]
	private bool m_UseGraphicAlpha;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private UnityEngine.Vector2 m_OverallTextSize;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private UnityEngine.Vector2 m_TopLeftPos;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private UnityEngine.Vector2 m_BottomRightPos;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<UIVertex> m_Verts;

	[Token(Token = "0x1700000B")]
	public Color effectColor
	{
		[Token(Token = "0x60000C0")]
		[Address(RVA = "0xC77A78", Offset = "0xC77A78", VA = "0xC77A78")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x60000C1")]
		[Address(RVA = "0xC77A84", Offset = "0xC77A84", VA = "0xC77A84")]
		set
		{
		}
	}

	[Token(Token = "0x1700000C")]
	public UnityEngine.Vector2 effectDirectionAndDepth
	{
		[Token(Token = "0x60000C2")]
		[Address(RVA = "0xC77B58", Offset = "0xC77B58", VA = "0xC77B58")]
		get
		{
			return default(UnityEngine.Vector2);
		}
		[Token(Token = "0x60000C3")]
		[Address(RVA = "0xC77B60", Offset = "0xC77B60", VA = "0xC77B60")]
		set
		{
		}
	}

	[Token(Token = "0x1700000D")]
	public UnityEngine.Vector2 depthPerspectiveStrength
	{
		[Token(Token = "0x60000C4")]
		[Address(RVA = "0xC77C44", Offset = "0xC77C44", VA = "0xC77C44")]
		get
		{
			return default(UnityEngine.Vector2);
		}
		[Token(Token = "0x60000C5")]
		[Address(RVA = "0xC77C4C", Offset = "0xC77C4C", VA = "0xC77C4C")]
		set
		{
		}
	}

	[Token(Token = "0x1700000E")]
	public bool onlyInitialCharactersGenerateDepth
	{
		[Token(Token = "0x60000C6")]
		[Address(RVA = "0xC77D30", Offset = "0xC77D30", VA = "0xC77D30")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000C7")]
		[Address(RVA = "0xC77D38", Offset = "0xC77D38", VA = "0xC77D38")]
		set
		{
		}
	}

	[Token(Token = "0x1700000F")]
	public bool useGraphicAlpha
	{
		[Token(Token = "0x60000C8")]
		[Address(RVA = "0xC77DF0", Offset = "0xC77DF0", VA = "0xC77DF0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000C9")]
		[Address(RVA = "0xC77DF8", Offset = "0xC77DF8", VA = "0xC77DF8")]
		set
		{
		}
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xC77990", Offset = "0xC77990", VA = "0xC77990")]
	protected DepthEffect()
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xC77EB0", Offset = "0xC77EB0", VA = "0xC77EB0")]
	protected void ApplyShadowZeroAlloc(List<UIVertex> verts, Color32 color, int start, int end, float x, float y, float factor)
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xC781C4", Offset = "0xC781C4", VA = "0xC781C4", Slot = "20")]
	public override void ModifyMesh(VertexHelper vh)
	{
	}
}
[Token(Token = "0x200003C")]
[AddComponentMenu("UI/ToJ Effects/Inner Bevel", 19)]
[RequireComponent(typeof(Text))]
[DisallowMultipleComponent]
public class InnerBevel : BaseMeshEffect, IMaterialModifier
{
	[Token(Token = "0x200003D")]
	public enum ColorMode
	{
		[Token(Token = "0x40000B7")]
		Override,
		[Token(Token = "0x40000B8")]
		Additive,
		[Token(Token = "0x40000B9")]
		Multiply
	}

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ColorMode m_HighlightColorMode;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	public Color m_HighlightColor;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private ColorMode m_ShadowColorMode;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	public Color m_ShadowColor;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private UnityEngine.Vector2 m_BevelDirectionAndDepth;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_NeedsToSetMaterialDirty;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material m_ModifiedMaterial;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<UIVertex> m_Verts;

	[Token(Token = "0x17000010")]
	public ColorMode highlightColorMode
	{
		[Token(Token = "0x60000CE")]
		[Address(RVA = "0xC79348", Offset = "0xC79348", VA = "0xC79348")]
		get
		{
			return default(ColorMode);
		}
		[Token(Token = "0x60000CF")]
		[Address(RVA = "0xC79350", Offset = "0xC79350", VA = "0xC79350")]
		set
		{
		}
	}

	[Token(Token = "0x17000011")]
	public Color highlightColor
	{
		[Token(Token = "0x60000D0")]
		[Address(RVA = "0xC79408", Offset = "0xC79408", VA = "0xC79408")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x60000D1")]
		[Address(RVA = "0xC79414", Offset = "0xC79414", VA = "0xC79414")]
		set
		{
		}
	}

	[Token(Token = "0x17000012")]
	public ColorMode shadowColorMode
	{
		[Token(Token = "0x60000D2")]
		[Address(RVA = "0xC794E8", Offset = "0xC794E8", VA = "0xC794E8")]
		get
		{
			return default(ColorMode);
		}
		[Token(Token = "0x60000D3")]
		[Address(RVA = "0xC794F0", Offset = "0xC794F0", VA = "0xC794F0")]
		set
		{
		}
	}

	[Token(Token = "0x17000013")]
	public Color shadowColor
	{
		[Token(Token = "0x60000D4")]
		[Address(RVA = "0xC795A8", Offset = "0xC795A8", VA = "0xC795A8")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x60000D5")]
		[Address(RVA = "0xC795B4", Offset = "0xC795B4", VA = "0xC795B4")]
		set
		{
		}
	}

	[Token(Token = "0x17000014")]
	public UnityEngine.Vector2 bevelDirectionAndDepth
	{
		[Token(Token = "0x60000D6")]
		[Address(RVA = "0xC79688", Offset = "0xC79688", VA = "0xC79688")]
		get
		{
			return default(UnityEngine.Vector2);
		}
		[Token(Token = "0x60000D7")]
		[Address(RVA = "0xC79690", Offset = "0xC79690", VA = "0xC79690")]
		set
		{
		}
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xC7920C", Offset = "0xC7920C", VA = "0xC7920C")]
	protected InnerBevel()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xC792A4", Offset = "0xC792A4", VA = "0xC792A4", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xC79774", Offset = "0xC79774", VA = "0xC79774", Slot = "20")]
	public override void ModifyMesh(VertexHelper vh)
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xC79DA0", Offset = "0xC79DA0", VA = "0xC79DA0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xC79E4C", Offset = "0xC79E4C", VA = "0xC79E4C", Slot = "22")]
	public virtual Material GetModifiedMaterial(Material baseMaterial)
	{
		return null;
	}
}
[Token(Token = "0x200003E")]
[AddComponentMenu("UI/ToJ Effects/Inner Outline", 20)]
[DisallowMultipleComponent]
[RequireComponent(typeof(Text))]
public class InnerOutline : BaseMeshEffect, IMaterialModifier
{
	[Token(Token = "0x200003F")]
	public enum ColorMode
	{
		[Token(Token = "0x40000C1")]
		Override,
		[Token(Token = "0x40000C2")]
		Additive,
		[Token(Token = "0x40000C3")]
		Multiply
	}

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ColorMode m_ColorMode;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	public Color m_OutlineColor;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float m_OutlineThickness;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_NeedsToSetMaterialDirty;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material m_ModifiedMaterial;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<UIVertex> m_Verts;

	[Token(Token = "0x17000015")]
	public ColorMode colorMode
	{
		[Token(Token = "0x60000DD")]
		[Address(RVA = "0xC7A31C", Offset = "0xC7A31C", VA = "0xC7A31C")]
		get
		{
			return default(ColorMode);
		}
		[Token(Token = "0x60000DE")]
		[Address(RVA = "0xC7A324", Offset = "0xC7A324", VA = "0xC7A324")]
		set
		{
		}
	}

	[Token(Token = "0x17000016")]
	public Color outlineColor
	{
		[Token(Token = "0x60000DF")]
		[Address(RVA = "0xC7A3DC", Offset = "0xC7A3DC", VA = "0xC7A3DC")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x60000E0")]
		[Address(RVA = "0xC7A3E8", Offset = "0xC7A3E8", VA = "0xC7A3E8")]
		set
		{
		}
	}

	[Token(Token = "0x17000017")]
	public float outlineThickness
	{
		[Token(Token = "0x60000E1")]
		[Address(RVA = "0xC7A4BC", Offset = "0xC7A4BC", VA = "0xC7A4BC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60000E2")]
		[Address(RVA = "0xC7A4C4", Offset = "0xC7A4C4", VA = "0xC7A4C4")]
		set
		{
		}
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xC7A1E8", Offset = "0xC7A1E8", VA = "0xC7A1E8")]
	protected InnerOutline()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xC7A278", Offset = "0xC7A278", VA = "0xC7A278", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xC7A57C", Offset = "0xC7A57C", VA = "0xC7A57C", Slot = "20")]
	public override void ModifyMesh(VertexHelper vh)
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xC7A7E0", Offset = "0xC7A7E0", VA = "0xC7A7E0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xC7A88C", Offset = "0xC7A88C", VA = "0xC7A88C", Slot = "22")]
	public virtual Material GetModifiedMaterial(Material baseMaterial)
	{
		return null;
	}
}
[Token(Token = "0x2000040")]
[AddComponentMenu("UI/ToJ Effects/Overlay Texture", 18)]
[DisallowMultipleComponent]
[RequireComponent(typeof(Text))]
public class OverlayTexture : BaseMeshEffect, IMaterialModifier
{
	[Token(Token = "0x2000041")]
	public enum TextureMode
	{
		[Token(Token = "0x40000CB")]
		Local,
		[Token(Token = "0x40000CC")]
		GlobalTextArea,
		[Token(Token = "0x40000CD")]
		GlobalFullRect
	}

	[Token(Token = "0x2000042")]
	public enum ColorMode
	{
		[Token(Token = "0x40000CF")]
		Override,
		[Token(Token = "0x40000D0")]
		Additive,
		[Token(Token = "0x40000D1")]
		Multiply
	}

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextureMode m_TextureMode;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private ColorMode m_ColorMode;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public Texture2D m_OverlayTexture;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_NeedsToSetMaterialDirty;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material m_ModifiedMaterial;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<UIVertex> m_Verts;

	[Token(Token = "0x17000018")]
	public TextureMode textureMode
	{
		[Token(Token = "0x60000E8")]
		[Address(RVA = "0xC7ACE0", Offset = "0xC7ACE0", VA = "0xC7ACE0")]
		get
		{
			return default(TextureMode);
		}
		[Token(Token = "0x60000E9")]
		[Address(RVA = "0xC7ACE8", Offset = "0xC7ACE8", VA = "0xC7ACE8")]
		set
		{
		}
	}

	[Token(Token = "0x17000019")]
	public ColorMode colorMode
	{
		[Token(Token = "0x60000EA")]
		[Address(RVA = "0xC7ADA0", Offset = "0xC7ADA0", VA = "0xC7ADA0")]
		get
		{
			return default(ColorMode);
		}
		[Token(Token = "0x60000EB")]
		[Address(RVA = "0xC7ADA8", Offset = "0xC7ADA8", VA = "0xC7ADA8")]
		set
		{
		}
	}

	[Token(Token = "0x1700001A")]
	public Texture2D overlayTexture
	{
		[Token(Token = "0x60000EC")]
		[Address(RVA = "0xC7AE60", Offset = "0xC7AE60", VA = "0xC7AE60")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000ED")]
		[Address(RVA = "0xC7AE68", Offset = "0xC7AE68", VA = "0xC7AE68")]
		set
		{
		}
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xC7ABC0", Offset = "0xC7ABC0", VA = "0xC7ABC0")]
	protected OverlayTexture()
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xC7AC3C", Offset = "0xC7AC3C", VA = "0xC7AC3C", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xC7AF20", Offset = "0xC7AF20", VA = "0xC7AF20", Slot = "20")]
	public override void ModifyMesh(VertexHelper vh)
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xC7B42C", Offset = "0xC7B42C", VA = "0xC7B42C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xC7B4D8", Offset = "0xC7B4D8", VA = "0xC7B4D8", Slot = "22")]
	public virtual Material GetModifiedMaterial(Material baseMaterial)
	{
		return null;
	}
}
[Token(Token = "0x2000043")]
[AddComponentMenu("UI/ToJ Effects/Gradient Color", 1)]
[RequireComponent(typeof(Text))]
public class GradientColor : BaseMeshEffect
{
	[Token(Token = "0x2000044")]
	public enum GradientMode
	{
		[Token(Token = "0x40000DA")]
		Local,
		[Token(Token = "0x40000DB")]
		GlobalTextArea,
		[Token(Token = "0x40000DC")]
		GlobalFullRect
	}

	[Token(Token = "0x2000045")]
	public enum GradientDirection
	{
		[Token(Token = "0x40000DE")]
		Vertical,
		[Token(Token = "0x40000DF")]
		Horizontal
	}

	[Token(Token = "0x2000046")]
	public enum ColorMode
	{
		[Token(Token = "0x40000E1")]
		Override,
		[Token(Token = "0x40000E2")]
		Additive,
		[Token(Token = "0x40000E3")]
		Multiply
	}

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GradientMode m_GradientMode;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private GradientDirection m_GradientDirection;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ColorMode m_ColorMode;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	public Color m_FirstColor;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	public Color m_SecondColor;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private bool m_UseGraphicAlpha;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<UIVertex> m_Verts;

	[Token(Token = "0x1700001B")]
	public GradientMode gradientMode
	{
		[Token(Token = "0x60000F2")]
		[Address(RVA = "0xC7B868", Offset = "0xC7B868", VA = "0xC7B868")]
		get
		{
			return default(GradientMode);
		}
		[Token(Token = "0x60000F3")]
		[Address(RVA = "0xC7B870", Offset = "0xC7B870", VA = "0xC7B870")]
		set
		{
		}
	}

	[Token(Token = "0x1700001C")]
	public GradientDirection gradientDirection
	{
		[Token(Token = "0x60000F4")]
		[Address(RVA = "0xC7B928", Offset = "0xC7B928", VA = "0xC7B928")]
		get
		{
			return default(GradientDirection);
		}
		[Token(Token = "0x60000F5")]
		[Address(RVA = "0xC7B930", Offset = "0xC7B930", VA = "0xC7B930")]
		set
		{
		}
	}

	[Token(Token = "0x1700001D")]
	public ColorMode colorMode
	{
		[Token(Token = "0x60000F6")]
		[Address(RVA = "0xC7B9E8", Offset = "0xC7B9E8", VA = "0xC7B9E8")]
		get
		{
			return default(ColorMode);
		}
		[Token(Token = "0x60000F7")]
		[Address(RVA = "0xC7B9F0", Offset = "0xC7B9F0", VA = "0xC7B9F0")]
		set
		{
		}
	}

	[Token(Token = "0x1700001E")]
	public Color firstColor
	{
		[Token(Token = "0x60000F8")]
		[Address(RVA = "0xC7BAA8", Offset = "0xC7BAA8", VA = "0xC7BAA8")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x60000F9")]
		[Address(RVA = "0xC7BAB4", Offset = "0xC7BAB4", VA = "0xC7BAB4")]
		set
		{
		}
	}

	[Token(Token = "0x1700001F")]
	public Color secondColor
	{
		[Token(Token = "0x60000FA")]
		[Address(RVA = "0xC7BB88", Offset = "0xC7BB88", VA = "0xC7BB88")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x60000FB")]
		[Address(RVA = "0xC7BB94", Offset = "0xC7BB94", VA = "0xC7BB94")]
		set
		{
		}
	}

	[Token(Token = "0x17000020")]
	public bool useGraphicAlpha
	{
		[Token(Token = "0x60000FC")]
		[Address(RVA = "0xC7BC68", Offset = "0xC7BC68", VA = "0xC7BC68")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000FD")]
		[Address(RVA = "0xC7BC70", Offset = "0xC7BC70", VA = "0xC7BC70")]
		set
		{
		}
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xC7B7D0", Offset = "0xC7B7D0", VA = "0xC7B7D0")]
	protected GradientColor()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xC7BD28", Offset = "0xC7BD28", VA = "0xC7BD28", Slot = "20")]
	public override void ModifyMesh(VertexHelper vh)
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xC7C990", Offset = "0xC7C990", VA = "0xC7C990")]
	private Color CalculateColor(Color initialColor, Color newColor, ColorMode colorMode)
	{
		return default(Color);
	}
}
[Token(Token = "0x2000047")]
[RequireComponent(typeof(Text))]
[AddComponentMenu("UI/ToJ Effects/Limit Visible Characters", 8)]
public class LimitVisibleCharacters : BaseMeshEffect
{
	[Token(Token = "0x40000E4")]
	private const string REGEX_TAGS = "<b>|</b>|<i>|</i>|<size=.*?>|</size>|<color=.*?>|</color>|<material=.*?>|</material>";

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int m_VisibleCharacterCount;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<UIVertex> m_Verts;

	[Token(Token = "0x17000021")]
	public int visibleCharacterCount
	{
		[Token(Token = "0x6000101")]
		[Address(RVA = "0xC7CA54", Offset = "0xC7CA54", VA = "0xC7CA54")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000102")]
		[Address(RVA = "0xC7CA5C", Offset = "0xC7CA5C", VA = "0xC7CA5C")]
		set
		{
		}
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xC7C9D8", Offset = "0xC7C9D8", VA = "0xC7C9D8")]
	protected LimitVisibleCharacters()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xC7CB14", Offset = "0xC7CB14", VA = "0xC7CB14", Slot = "20")]
	public override void ModifyMesh(VertexHelper vh)
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xC7D0AC", Offset = "0xC7D0AC", VA = "0xC7D0AC")]
	private MatchCollection GetRegexMatchedTags(string text, out int lengthWithoutTags)
	{
		return null;
	}
}
[Token(Token = "0x2000048")]
[RequireComponent(typeof(LimitVisibleCharacters))]
[RequireComponent(typeof(Text))]
public class Typewriter : MonoBehaviour
{
	[Token(Token = "0x2000049")]
	[CompilerGenerated]
	private sealed class <PlayTypewriter>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Typewriter <>4__this;

		[Token(Token = "0x17000022")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600010E")]
			[Address(RVA = "0xC7D818", Offset = "0xC7D818", VA = "0xC7D818", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000023")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000110")]
			[Address(RVA = "0xC7D860", Offset = "0xC7D860", VA = "0xC7D860", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600010B")]
		[Address(RVA = "0xC7D5B8", Offset = "0xC7D5B8", VA = "0xC7D5B8")]
		[DebuggerHidden]
		public <PlayTypewriter>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x600010C")]
		[Address(RVA = "0xC7D5F4", Offset = "0xC7D5F4", VA = "0xC7D5F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600010D")]
		[Address(RVA = "0xC7D5F8", Offset = "0xC7D5F8", VA = "0xC7D5F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600010F")]
		[Address(RVA = "0xC7D820", Offset = "0xC7D820", VA = "0xC7D820", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float delayBetweenSymbols;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip[] typeSoundEffects;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource audioSourceForTypeEffect;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float _timer;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LimitVisibleCharacters _limitVisibleCharactersComponent;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Text _textComponent;

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xC7D3F4", Offset = "0xC7D3F4", VA = "0xC7D3F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xC7D3F8", Offset = "0xC7D3F8", VA = "0xC7D3F8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xC7D3FC", Offset = "0xC7D3FC", VA = "0xC7D3FC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xC7D504", Offset = "0xC7D504", VA = "0xC7D504")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xC7D550", Offset = "0xC7D550", VA = "0xC7D550")]
	[IteratorStateMachine(typeof(<PlayTypewriter>d__10))]
	private IEnumerator PlayTypewriter()
	{
		return null;
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xC7D5E0", Offset = "0xC7D5E0", VA = "0xC7D5E0")]
	public Typewriter()
	{
	}
}
[Token(Token = "0x200004A")]
[RequireComponent(typeof(Text))]
[AddComponentMenu("UI/ToJ Effects/Skew Effect", 5)]
public class SkewEffect : BaseMeshEffect
{
	[Token(Token = "0x200004B")]
	public enum SkewMode
	{
		[Token(Token = "0x40000F7")]
		TextArea,
		[Token(Token = "0x40000F8")]
		FullRect
	}

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private SkewMode m_SkewMode;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private UnityEngine.Vector2 m_UpperLeftOffset;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private UnityEngine.Vector2 m_UpperRightOffset;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private UnityEngine.Vector2 m_LowerLeftOffset;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private UnityEngine.Vector2 m_LowerRightOffset;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<UIVertex> m_Verts;

	[Token(Token = "0x17000024")]
	public UnityEngine.Vector2 upperLeftOffset
	{
		[Token(Token = "0x6000112")]
		[Address(RVA = "0xC7D940", Offset = "0xC7D940", VA = "0xC7D940")]
		get
		{
			return default(UnityEngine.Vector2);
		}
		[Token(Token = "0x6000113")]
		[Address(RVA = "0xC7D948", Offset = "0xC7D948", VA = "0xC7D948")]
		set
		{
		}
	}

	[Token(Token = "0x17000025")]
	public UnityEngine.Vector2 upperRightOffset
	{
		[Token(Token = "0x6000114")]
		[Address(RVA = "0xC7DA04", Offset = "0xC7DA04", VA = "0xC7DA04")]
		get
		{
			return default(UnityEngine.Vector2);
		}
		[Token(Token = "0x6000115")]
		[Address(RVA = "0xC7DA0C", Offset = "0xC7DA0C", VA = "0xC7DA0C")]
		set
		{
		}
	}

	[Token(Token = "0x17000026")]
	public UnityEngine.Vector2 lowerLeftOffset
	{
		[Token(Token = "0x6000116")]
		[Address(RVA = "0xC7DAC8", Offset = "0xC7DAC8", VA = "0xC7DAC8")]
		get
		{
			return default(UnityEngine.Vector2);
		}
		[Token(Token = "0x6000117")]
		[Address(RVA = "0xC7DAD0", Offset = "0xC7DAD0", VA = "0xC7DAD0")]
		set
		{
		}
	}

	[Token(Token = "0x17000027")]
	public UnityEngine.Vector2 lowerRightOffset
	{
		[Token(Token = "0x6000118")]
		[Address(RVA = "0xC7DB8C", Offset = "0xC7DB8C", VA = "0xC7DB8C")]
		get
		{
			return default(UnityEngine.Vector2);
		}
		[Token(Token = "0x6000119")]
		[Address(RVA = "0xC7DB94", Offset = "0xC7DB94", VA = "0xC7DB94")]
		set
		{
		}
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xC7D868", Offset = "0xC7D868", VA = "0xC7D868")]
	protected SkewEffect()
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xC7DC50", Offset = "0xC7DC50", VA = "0xC7DC50", Slot = "20")]
	public override void ModifyMesh(VertexHelper vh)
	{
	}
}
[Token(Token = "0x200004C")]
[RequireComponent(typeof(Text))]
[AddComponentMenu("UI/ToJ Effects/Soft Shadow", 3)]
public class SoftShadow : Shadow
{
	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float m_BlurSpread;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool m_OnlyInitialCharactersDropShadow;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<UIVertex> m_Verts;

	[Token(Token = "0x17000028")]
	public float blurSpread
	{
		[Token(Token = "0x600011C")]
		[Address(RVA = "0xC7E1A0", Offset = "0xC7E1A0", VA = "0xC7E1A0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600011D")]
		[Address(RVA = "0xC7E1A8", Offset = "0xC7E1A8", VA = "0xC7E1A8")]
		set
		{
		}
	}

	[Token(Token = "0x17000029")]
	public bool onlyInitialCharactersDropShadow
	{
		[Token(Token = "0x600011E")]
		[Address(RVA = "0xC7E260", Offset = "0xC7E260", VA = "0xC7E260")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600011F")]
		[Address(RVA = "0xC7E268", Offset = "0xC7E268", VA = "0xC7E268")]
		set
		{
		}
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xC7E114", Offset = "0xC7E114", VA = "0xC7E114")]
	protected SoftShadow()
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xC7E320", Offset = "0xC7E320", VA = "0xC7E320", Slot = "20")]
	public override void ModifyMesh(VertexHelper vh)
	{
	}
}
[Token(Token = "0x200004D")]
[AddComponentMenu("UI/ToJ Effects/ToJ Outline", 15)]
public class ToJOutline : Shadow
{
	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<UIVertex> m_Verts;

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xC7EC54", Offset = "0xC7EC54", VA = "0xC7EC54")]
	protected ToJOutline()
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xC7ECD0", Offset = "0xC7ECD0", VA = "0xC7ECD0", Slot = "20")]
	public override void ModifyMesh(VertexHelper vh)
	{
	}
}
[Token(Token = "0x200004E")]
[AddComponentMenu("UI/ToJ Effects/ToJ Shadow", 14)]
public class ToJShadow : BaseMeshEffect
{
	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Color m_EffectColor;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEngine.Vector2 m_EffectDistance;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool m_UseGraphicAlpha;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<UIVertex> m_Verts;

	[Token(Token = "0x1700002A")]
	public Color effectColor
	{
		[Token(Token = "0x6000124")]
		[Address(RVA = "0xC7FB54", Offset = "0xC7FB54", VA = "0xC7FB54")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x6000125")]
		[Address(RVA = "0xC7FB60", Offset = "0xC7FB60", VA = "0xC7FB60")]
		set
		{
		}
	}

	[Token(Token = "0x1700002B")]
	public UnityEngine.Vector2 effectDistance
	{
		[Token(Token = "0x6000126")]
		[Address(RVA = "0xC7FC34", Offset = "0xC7FC34", VA = "0xC7FC34")]
		get
		{
			return default(UnityEngine.Vector2);
		}
		[Token(Token = "0x6000127")]
		[Address(RVA = "0xC7FC3C", Offset = "0xC7FC3C", VA = "0xC7FC3C")]
		set
		{
		}
	}

	[Token(Token = "0x1700002C")]
	public bool useGraphicAlpha
	{
		[Token(Token = "0x6000128")]
		[Address(RVA = "0xC7FD40", Offset = "0xC7FD40", VA = "0xC7FD40")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000129")]
		[Address(RVA = "0xC7FD48", Offset = "0xC7FD48", VA = "0xC7FD48")]
		set
		{
		}
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xC7FAB8", Offset = "0xC7FAB8", VA = "0xC7FAB8")]
	protected ToJShadow()
	{
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xC7FE00", Offset = "0xC7FE00", VA = "0xC7FE00")]
	protected void ApplyShadowZeroAlloc(List<UIVertex> verts, Color32 color, int start, int end, float x, float y)
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xC80104", Offset = "0xC80104", VA = "0xC80104")]
	protected void ApplyShadow(List<UIVertex> verts, Color32 color, int start, int end, float x, float y)
	{
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xC801E0", Offset = "0xC801E0", VA = "0xC801E0", Slot = "20")]
	public override void ModifyMesh(VertexHelper vh)
	{
	}
}
[Token(Token = "0x200004F")]
public class ResetPosition : MonoBehaviour
{
	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float distanceToReset;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private UnityEngine.Vector3 startPosition;

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xC80740", Offset = "0xC80740", VA = "0xC80740")]
	private void Start()
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xC80770", Offset = "0xC80770", VA = "0xC80770")]
	private void Update()
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xC80868", Offset = "0xC80868", VA = "0xC80868")]
	public ResetPosition()
	{
	}
}
[Token(Token = "0x2000050")]
[ExecuteInEditMode]
public class TurnOnDepthBuffer : MonoBehaviour
{
	[Token(Token = "0x6000130")]
	[Address(RVA = "0xC80878", Offset = "0xC80878", VA = "0xC80878")]
	private void Start()
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xC808D4", Offset = "0xC808D4", VA = "0xC808D4")]
	public TurnOnDepthBuffer()
	{
	}
}
[Token(Token = "0x2000051")]
public class CameraScroll : MonoBehaviour
{
	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Slider speedSlider;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float moveSpeed;

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xC808DC", Offset = "0xC808DC", VA = "0xC808DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xC80984", Offset = "0xC80984", VA = "0xC80984")]
	private void Update()
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xC80AB4", Offset = "0xC80AB4", VA = "0xC80AB4")]
	private void ChangeSpeed()
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xC80AE4", Offset = "0xC80AE4", VA = "0xC80AE4")]
	public CameraScroll()
	{
	}
}
[Token(Token = "0x2000052")]
public class BhapticsAndroidBasicExample : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000053")]
	public struct BhapticsAndroidExampleButtons
	{
		[Token(Token = "0x400010A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Button ping;

		[Token(Token = "0x400010B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Button toggle;
	}

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BhapticsAndroidExampleButtons talButtons;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BhapticsAndroidExampleButtons suitButtons;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public BhapticsAndroidExampleButtons armsLeftButtons;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public BhapticsAndroidExampleButtons armsRightButtons;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text pairedDevicesCount;

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xC80B24", Offset = "0xC80B24", VA = "0xC80B24")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xC80BC8", Offset = "0xC80BC8", VA = "0xC80BC8")]
	private void Refresh()
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xC80E24", Offset = "0xC80E24", VA = "0xC80E24")]
	public void PingTactal()
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xC80E9C", Offset = "0xC80E9C", VA = "0xC80E9C")]
	public void PingTactSuit()
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xC80EBC", Offset = "0xC80EBC", VA = "0xC80EBC")]
	public void PingTactosyArms(bool isLeft)
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xC80EDC", Offset = "0xC80EDC", VA = "0xC80EDC")]
	public void ToggleTactosyArms(bool isLeft)
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xC80E44", Offset = "0xC80E44", VA = "0xC80E44")]
	private void PingPairedDevice(PositionType deviceType)
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xC80FDC", Offset = "0xC80FDC", VA = "0xC80FDC")]
	public BhapticsAndroidBasicExample()
	{
	}
}
[Token(Token = "0x2000054")]
public class BhapticsAndroidScanExample : MonoBehaviour
{
	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AndroidWidget_ControlButton[] controlButtons;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool open;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Button activeButton;

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xC80FE4", Offset = "0xC80FE4", VA = "0xC80FE4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xC811D0", Offset = "0xC811D0", VA = "0xC811D0")]
	private void Refresh()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xC8141C", Offset = "0xC8141C", VA = "0xC8141C")]
	public void Toggle()
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xC81434", Offset = "0xC81434", VA = "0xC81434")]
	private void Open()
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xC810F4", Offset = "0xC810F4", VA = "0xC810F4")]
	private void Close()
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xC81510", Offset = "0xC81510", VA = "0xC81510")]
	public BhapticsAndroidScanExample()
	{
	}
}
[Token(Token = "0x2000055")]
public class BhapticsCharacterController : MonoBehaviour
{
	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float jumpSpeed;

	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float gravity;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float rotationSpeedH;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float rotationSpeedV;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool isEnableControl;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private UnityEngine.Vector3 moveDirection;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private HapticSender tactSender;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Shooting with raycasting or with Physical bullet")]
	public bool IsRaycastingShooting;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform shootingPoint;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Physical bullet setting")]
	[SerializeField]
	private GameObject bulletPrefab;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private CharacterController characterController;

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xC81518", Offset = "0xC81518", VA = "0xC81518")]
	private void Start()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xC81654", Offset = "0xC81654", VA = "0xC81654")]
	private void Update()
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xC81674", Offset = "0xC81674", VA = "0xC81674")]
	private void ShootPlayer()
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xC81CD0", Offset = "0xC81CD0", VA = "0xC81CD0")]
	private void RotatePlayer()
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xC81B78", Offset = "0xC81B78", VA = "0xC81B78")]
	private void MovePlayer()
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xC81F10", Offset = "0xC81F10", VA = "0xC81F10")]
	public BhapticsCharacterController()
	{
	}
}
[Token(Token = "0x2000056")]
public class BhapticsCustomHapticReceiver : MonoBehaviour
{
	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsActive;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public PositionTag PositionTag;

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xC81F8C", Offset = "0xC81F8C", VA = "0xC81F8C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xC821A4", Offset = "0xC821A4", VA = "0xC821A4")]
	private void OnTriggerEnter(Collider bullet)
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xC82348", Offset = "0xC82348", VA = "0xC82348")]
	private void OnCollisionEnter(Collision bullet)
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xC82260", Offset = "0xC82260", VA = "0xC82260")]
	private void Handle(UnityEngine.Vector3 contactPoint, HapticSender tactSender)
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xC81E00", Offset = "0xC81E00", VA = "0xC81E00")]
	public void ReflectHandle(UnityEngine.Vector3 contactPoint, HapticSender tactSender)
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xC82420", Offset = "0xC82420", VA = "0xC82420")]
	public BhapticsCustomHapticReceiver()
	{
	}
}
[Token(Token = "0x2000057")]
public class BhapticsDotPointControllerExample : MonoBehaviour
{
	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HapticClipPositionType clipPositionType;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public List<DotPoint> dotPointList;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string key;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int duration;

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xC82430", Offset = "0xC82430", VA = "0xC82430")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xC824A4", Offset = "0xC824A4", VA = "0xC824A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xC824A8", Offset = "0xC824A8", VA = "0xC824A8")]
	public void Toggle(DotPoint dot)
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xC825B8", Offset = "0xC825B8", VA = "0xC825B8")]
	private bool AddToList(DotPoint dot)
	{
		return default(bool);
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xC82524", Offset = "0xC82524", VA = "0xC82524")]
	private bool RemoveAtList(DotPoint dot)
	{
		return default(bool);
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xC82694", Offset = "0xC82694", VA = "0xC82694")]
	public BhapticsDotPointControllerExample()
	{
	}
}
[Token(Token = "0x2000058")]
public class BhapticsDotPointExample : MonoBehaviour
{
	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int motorIndex;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int motorIntensity;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private BhapticsDotPointControllerExample controller;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private DotPoint dotPoint;

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xC826DC", Offset = "0xC826DC", VA = "0xC826DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xC82774", Offset = "0xC82774", VA = "0xC82774")]
	public void Toggle()
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xC827F8", Offset = "0xC827F8", VA = "0xC827F8")]
	public BhapticsDotPointExample()
	{
	}
}
[Token(Token = "0x2000059")]
public class BhapticsFpsView : MonoBehaviour
{
	[Token(Token = "0x200005A")]
	[CompilerGenerated]
	private sealed class <FPS>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BhapticsFpsView <>4__this;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float[] <buffer>5__2;

		[Token(Token = "0x400012B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <index>5__3;

		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <frequency>5__4;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool <initial>5__5;

		[Token(Token = "0x400012E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int <lastFrameCount>5__6;

		[Token(Token = "0x400012F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <lastTime>5__7;

		[Token(Token = "0x1700002D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000163")]
			[Address(RVA = "0xC83114", Offset = "0xC83114", VA = "0xC83114", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000165")]
			[Address(RVA = "0xC8315C", Offset = "0xC8315C", VA = "0xC8315C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000160")]
		[Address(RVA = "0xC828E0", Offset = "0xC828E0", VA = "0xC828E0")]
		[DebuggerHidden]
		public <FPS>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000161")]
		[Address(RVA = "0xC82ACC", Offset = "0xC82ACC", VA = "0xC82ACC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000162")]
		[Address(RVA = "0xC82AD0", Offset = "0xC82AD0", VA = "0xC82AD0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000164")]
		[Address(RVA = "0xC8311C", Offset = "0xC8311C", VA = "0xC8311C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text fpsText;

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xC82808", Offset = "0xC82808", VA = "0xC82808")]
	private void Awake()
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xC82858", Offset = "0xC82858", VA = "0xC82858")]
	private void Start()
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xC82878", Offset = "0xC82878", VA = "0xC82878")]
	[IteratorStateMachine(typeof(<FPS>d__3))]
	private IEnumerator FPS()
	{
		return null;
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xC82908", Offset = "0xC82908", VA = "0xC82908")]
	private float Average(float[] floats)
	{
		return default(float);
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xC82970", Offset = "0xC82970", VA = "0xC82970")]
	public float Percentile(float[] sequence, float excelPercentile)
	{
		return default(float);
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xC82AC4", Offset = "0xC82AC4", VA = "0xC82AC4")]
	public BhapticsFpsView()
	{
	}
}
[Token(Token = "0x200005B")]
public class BhapticsHapticBullet : MonoBehaviour
{
	[Token(Token = "0x6000166")]
	[Address(RVA = "0xC83164", Offset = "0xC83164", VA = "0xC83164")]
	private void Start()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xC831D4", Offset = "0xC831D4", VA = "0xC831D4")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xC83240", Offset = "0xC83240", VA = "0xC83240")]
	public BhapticsHapticBullet()
	{
	}
}
[Token(Token = "0x200005C")]
public class BhapticsHapticClipExample : MonoBehaviour
{
	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HapticClip hapticClip;

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xC83248", Offset = "0xC83248", VA = "0xC83248")]
	public void Play()
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xC832D0", Offset = "0xC832D0", VA = "0xC832D0")]
	public void Stop()
	{
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xC8335C", Offset = "0xC8335C", VA = "0xC8335C")]
	public BhapticsHapticClipExample()
	{
	}
}
[Token(Token = "0x200005D")]
public class BhapticsIdentifierPlayExample : MonoBehaviour
{
	[Token(Token = "0x200005E")]
	[CompilerGenerated]
	private sealed class <PlayCor>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BhapticsIdentifierPlayExample <>4__this;

		[Token(Token = "0x4000138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <bufferSize>5__2;

		[Token(Token = "0x4000139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <index>5__3;

		[Token(Token = "0x400013A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string <identifier>5__4;

		[Token(Token = "0x1700002F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000175")]
			[Address(RVA = "0xC83778", Offset = "0xC83778", VA = "0xC83778", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000030")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000177")]
			[Address(RVA = "0xC837C0", Offset = "0xC837C0", VA = "0xC837C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000172")]
		[Address(RVA = "0xC83538", Offset = "0xC83538", VA = "0xC83538")]
		[DebuggerHidden]
		public <PlayCor>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000173")]
		[Address(RVA = "0xC83568", Offset = "0xC83568", VA = "0xC83568", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000174")]
		[Address(RVA = "0xC8356C", Offset = "0xC8356C", VA = "0xC8356C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000176")]
		[Address(RVA = "0xC83780", Offset = "0xC83780", VA = "0xC83780", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FileHapticClip clip;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text identifierText;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Coroutine currentCoroutine;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool applyIdentifier;

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xC83364", Offset = "0xC83364", VA = "0xC83364")]
	private void Start()
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xC833C4", Offset = "0xC833C4", VA = "0xC833C4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xC833E8", Offset = "0xC833E8", VA = "0xC833E8")]
	private void Update()
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xC83368", Offset = "0xC83368", VA = "0xC83368")]
	private void Play()
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xC834D0", Offset = "0xC834D0", VA = "0xC834D0")]
	[IteratorStateMachine(typeof(<PlayCor>d__8))]
	private IEnumerator PlayCor()
	{
		return null;
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xC83560", Offset = "0xC83560", VA = "0xC83560")]
	public BhapticsIdentifierPlayExample()
	{
	}
}
[Token(Token = "0x200005F")]
public class BhapticsIsConnectIsPlayingExample : MonoBehaviour
{
	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FileHapticClip[] clips;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text isConnectText;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text clipText;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text isPlayingText;

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xC837C8", Offset = "0xC837C8", VA = "0xC837C8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xC83998", Offset = "0xC83998", VA = "0xC83998")]
	private void Update()
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xC84510", Offset = "0xC84510", VA = "0xC84510")]
	private void PlayClips()
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xC84574", Offset = "0xC84574", VA = "0xC84574")]
	public BhapticsIsConnectIsPlayingExample()
	{
	}
}
[Token(Token = "0x2000060")]
public class BhapticsLongTest : MonoBehaviour
{
	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private HapticClip[] tactClips;

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xC8457C", Offset = "0xC8457C", VA = "0xC8457C")]
	private void Start()
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xC84600", Offset = "0xC84600", VA = "0xC84600")]
	private void TriggerPlay()
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xC84664", Offset = "0xC84664", VA = "0xC84664")]
	private void ReloadScene()
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xC84788", Offset = "0xC84788", VA = "0xC84788")]
	public BhapticsLongTest()
	{
	}
}
[Token(Token = "0x2000061")]
public class BhapticsPathPointControllerExample : MonoBehaviour
{
	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HapticClipPositionType clipPositionType;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int motorIntensity;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<PathPoint> pathPointList;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private BoxCollider targetCollider;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string key;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int duration;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool isClickedArea;

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xC84790", Offset = "0xC84790", VA = "0xC84790")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xC848E4", Offset = "0xC848E4", VA = "0xC848E4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xC84AC4", Offset = "0xC84AC4", VA = "0xC84AC4")]
	private UnityEngine.Vector2? GetPathPointOffset()
	{
		return null;
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xC84C2C", Offset = "0xC84C2C", VA = "0xC84C2C")]
	private UnityEngine.Vector2 ConvertPositionToPathOffset(UnityEngine.Vector3 currentPos, BoxCollider currentHitCollider)
	{
		return default(UnityEngine.Vector2);
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xC84D68", Offset = "0xC84D68", VA = "0xC84D68")]
	public BhapticsPathPointControllerExample()
	{
	}
}
[Token(Token = "0x2000062")]
public class BhapticsProfiler : MonoBehaviour
{
	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int numOfTactClips;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HapticClip[] tactClips;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool hapticEnable;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int targetFrameRate;

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xC84DBC", Offset = "0xC84DBC", VA = "0xC84DBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xC84E1C", Offset = "0xC84E1C", VA = "0xC84E1C")]
	private void TriggerPlay()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xC84FBC", Offset = "0xC84FBC", VA = "0xC84FBC")]
	public BhapticsProfiler()
	{
	}
}
[Token(Token = "0x2000063")]
public class BhapticsReflectExample : MonoBehaviour
{
	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ArmsHapticClip armsHapticClip;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isReflect;

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xC84FD4", Offset = "0xC84FD4", VA = "0xC84FD4")]
	public void Play()
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xC8505C", Offset = "0xC8505C", VA = "0xC8505C")]
	public void Stop()
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xC850E8", Offset = "0xC850E8", VA = "0xC850E8")]
	public void OnClickToggle(Toggle toggle)
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xC851A0", Offset = "0xC851A0", VA = "0xC851A0")]
	public BhapticsReflectExample()
	{
	}
}
[Token(Token = "0x2000064")]
public class BhapticsRotate : MonoBehaviour
{
	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool isRandom;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float rotationSpeed;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private UnityEngine.Vector3 axis;

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xC851A8", Offset = "0xC851A8", VA = "0xC851A8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xC851FC", Offset = "0xC851FC", VA = "0xC851FC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xC85248", Offset = "0xC85248", VA = "0xC85248")]
	private void Update()
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xC85274", Offset = "0xC85274", VA = "0xC85274")]
	private void RandomAxis()
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xC852E0", Offset = "0xC852E0", VA = "0xC852E0")]
	public BhapticsRotate()
	{
	}
}
[Token(Token = "0x2000065")]
public class BhapticsRotateExample : MonoBehaviour
{
	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VestHapticClip vestHapticClip;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Space]
	public Text angleXText;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text offsetYText;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float angleX;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float offsetY;

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xC852F8", Offset = "0xC852F8", VA = "0xC852F8")]
	public void PlayWithRotate()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xC853A0", Offset = "0xC853A0", VA = "0xC853A0")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xC8542C", Offset = "0xC8542C", VA = "0xC8542C")]
	public void OnAngleXChanged(Slider slider)
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xC855C8", Offset = "0xC855C8", VA = "0xC855C8")]
	public void OnOffsetYChanged(Slider slider)
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xC85780", Offset = "0xC85780", VA = "0xC85780")]
	public BhapticsRotateExample()
	{
	}
}
[Token(Token = "0x2000066")]
public class BhapticsShootingCharacter : MonoBehaviour
{
	[Token(Token = "0x2000067")]
	[CompilerGenerated]
	private sealed class <RepeatShoot>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400015E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BhapticsShootingCharacter <>4__this;

		[Token(Token = "0x17000031")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001A1")]
			[Address(RVA = "0xC85E6C", Offset = "0xC85E6C", VA = "0xC85E6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000032")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001A3")]
			[Address(RVA = "0xC85EB4", Offset = "0xC85EB4", VA = "0xC85EB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600019E")]
		[Address(RVA = "0xC859EC", Offset = "0xC859EC", VA = "0xC859EC")]
		[DebuggerHidden]
		public <RepeatShoot>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x600019F")]
		[Address(RVA = "0xC85D7C", Offset = "0xC85D7C", VA = "0xC85D7C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001A0")]
		[Address(RVA = "0xC85D80", Offset = "0xC85D80", VA = "0xC85D80", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001A2")]
		[Address(RVA = "0xC85E74", Offset = "0xC85E74", VA = "0xC85E74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform target;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform shootPointLeft;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform shootPointRight;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject bulletPrefab;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Space]
	private Transform[] lookingTransforms;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Animator animator;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int shootCount;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float shootDelay;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float bulletSpeed;

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xC85788", Offset = "0xC85788", VA = "0xC85788")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xC857D8", Offset = "0xC857D8", VA = "0xC857D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xC8595C", Offset = "0xC8595C", VA = "0xC8595C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xC859E4", Offset = "0xC859E4", VA = "0xC859E4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xC8597C", Offset = "0xC8597C", VA = "0xC8597C")]
	[IteratorStateMachine(typeof(<RepeatShoot>d__13))]
	private IEnumerator RepeatShoot()
	{
		return null;
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xC85A14", Offset = "0xC85A14", VA = "0xC85A14")]
	private void ShootTarget(int hand)
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xC857DC", Offset = "0xC857DC", VA = "0xC857DC")]
	private void Looking()
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xC85D60", Offset = "0xC85D60", VA = "0xC85D60")]
	public BhapticsShootingCharacter()
	{
	}
}
[Token(Token = "0x2000068")]
public class BhapticsStreamingTest : MonoBehaviour
{
	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Button button;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text text;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private HapticClip clip;

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xC85EBC", Offset = "0xC85EBC", VA = "0xC85EBC")]
	private void Start()
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xC85F10", Offset = "0xC85F10", VA = "0xC85F10")]
	private void Update()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xC85F14", Offset = "0xC85F14", VA = "0xC85F14")]
	private void Check()
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xC8645C", Offset = "0xC8645C", VA = "0xC8645C")]
	public void Toggle()
	{
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xC864AC", Offset = "0xC864AC", VA = "0xC864AC")]
	public BhapticsStreamingTest()
	{
	}
}
[Token(Token = "0x2000069")]
public class BhapticsTeleportPoint : MonoBehaviour
{
	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xC864B4", Offset = "0xC864B4", VA = "0xC864B4")]
	public BhapticsTeleportPoint()
	{
	}
}
[Token(Token = "0x200006A")]
public class BhapticsTestScript : MonoBehaviour
{
	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private HapticClip[] tactClips;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Slider intensitySlider;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Slider durationSlider;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Slider offsetXSlider;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Slider offsetYSlider;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Toggle reflectToggle;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Button openBluetoothSettingButton;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Button playButton;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Button toggleEnableAllButton;

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xC864BC", Offset = "0xC864BC", VA = "0xC864BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xC8669C", Offset = "0xC8669C", VA = "0xC8669C")]
	private void ToggleEnable()
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xC8680C", Offset = "0xC8680C", VA = "0xC8680C")]
	private void Open()
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xC8685C", Offset = "0xC8685C", VA = "0xC8685C")]
	private void Play()
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xC86A30", Offset = "0xC86A30", VA = "0xC86A30")]
	public BhapticsTestScript()
	{
	}
}
[Token(Token = "0x200006B")]
public class BhapticsVisualFeedbackOnMotors : MonoBehaviour
{
	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public PositionType tactPositionType;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject visualMotorsObject;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Gradient hapticColor;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject[] visualMotors;

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xC86A38", Offset = "0xC86A38", VA = "0xC86A38")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xC86CD8", Offset = "0xC86CD8", VA = "0xC86CD8")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xC86D9C", Offset = "0xC86D9C", VA = "0xC86D9C")]
	private void ShowFeedbackEffect(int[] feedback)
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xC86EE8", Offset = "0xC86EE8", VA = "0xC86EE8")]
	public BhapticsVisualFeedbackOnMotors()
	{
	}
}
[Token(Token = "0x200006C")]
public class BhapticsVRBody : MonoBehaviour
{
	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform camera;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float distance;

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xC86EF0", Offset = "0xC86EF0", VA = "0xC86EF0")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xC86EF4", Offset = "0xC86EF4", VA = "0xC86EF4")]
	private void FollowCamera()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xC86FE0", Offset = "0xC86FE0", VA = "0xC86FE0")]
	public BhapticsVRBody()
	{
	}
}
[Token(Token = "0x200006D")]
public class BhapticsWidgetInstiate : MonoBehaviour
{
	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AndroidWidget_UI widgetPrefab;

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xC86FE8", Offset = "0xC86FE8", VA = "0xC86FE8")]
	private void Start()
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xC87038", Offset = "0xC87038", VA = "0xC87038")]
	private void CreateWidget()
	{
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xC870A8", Offset = "0xC870A8", VA = "0xC870A8")]
	public BhapticsWidgetInstiate()
	{
	}
}
[Token(Token = "0x200006E")]
[CreateAssetMenu(fileName = "Data", menuName = "Bhaptics/Create Config", order = 1)]
public class BhapticsConfig : ScriptableObject
{
	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Windows Settings")]
	public bool launchPlayerIfNotRunning;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Android Settings")]
	public BhapticsAndroidManager AndroidManagerPrefab;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("If you set it true, you don't need to define permissions and external bHaptics VR Player(beta) on SideQuest will be required.")]
	public bool UseOnlyBackgroundMode;

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xC870B0", Offset = "0xC870B0", VA = "0xC870B0")]
	public BhapticsConfig()
	{
	}
}
[Token(Token = "0x200006F")]
public class BhapticsLogger
{
	[Token(Token = "0x2000070")]
	public enum LogLevel
	{
		[Token(Token = "0x4000179")]
		Debug,
		[Token(Token = "0x400017A")]
		Info,
		[Token(Token = "0x400017B")]
		Error
	}

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LogLevel level;

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xC81344", Offset = "0xC81344", VA = "0xC81344")]
	public static void LogDebug(string format, params object[] args)
	{
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xC820C8", Offset = "0xC820C8", VA = "0xC820C8")]
	public static void LogInfo(string format, params object[] args)
	{
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xC86C44", Offset = "0xC86C44", VA = "0xC86C44")]
	public static void LogError(string format, params object[] args)
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xC870C0", Offset = "0xC870C0", VA = "0xC870C0")]
	public BhapticsLogger()
	{
	}
}
[Token(Token = "0x2000071")]
public class BhapticsManager
{
	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IHaptic Haptic;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool Init;

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xC84284", Offset = "0xC84284", VA = "0xC84284")]
	public static IHaptic GetHaptic()
	{
		return null;
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xC87114", Offset = "0xC87114", VA = "0xC87114")]
	public static void Initialize()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xC87118", Offset = "0xC87118", VA = "0xC87118")]
	public static void Dispose()
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xC872F8", Offset = "0xC872F8", VA = "0xC872F8")]
	public BhapticsManager()
	{
	}
}
[Token(Token = "0x2000072")]
public class BhapticsVisualizer : MonoBehaviour
{
	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private VisualFeedback[] visualFeedback;

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xC87300", Offset = "0xC87300", VA = "0xC87300")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xC87350", Offset = "0xC87350", VA = "0xC87350")]
	private void Update()
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xC87470", Offset = "0xC87470", VA = "0xC87470")]
	public BhapticsVisualizer()
	{
	}
}
[Token(Token = "0x2000073")]
public class Bhaptics_Setup : MonoBehaviour
{
	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Bhaptics_Setup instance;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BhapticsConfig Config;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("It is a haptic used as a notification when executed.")]
	public HapticClip[] hapticClipsOnAwake;

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xC87478", Offset = "0xC87478", VA = "0xC87478")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xC87834", Offset = "0xC87834", VA = "0xC87834")]
	private void Start()
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xC87904", Offset = "0xC87904", VA = "0xC87904")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xC8756C", Offset = "0xC8756C", VA = "0xC8756C")]
	private void Initialize()
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xC87908", Offset = "0xC87908", VA = "0xC87908")]
	public Bhaptics_Setup()
	{
	}
}
[Token(Token = "0x2000074")]
public class BonsaiEvent
{
	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string userId;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string name;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string session;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string timestamp;

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xC87910", Offset = "0xC87910", VA = "0xC87910")]
	public BonsaiEvent()
	{
	}
}
[Token(Token = "0x2000075")]
public class SnapConnection : MonoBehaviour
{
	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject doorObject;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject wallObject;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string category;

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xC87918", Offset = "0xC87918", VA = "0xC87918")]
	public void UpdateDoorState(bool isDoor)
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xC879F0", Offset = "0xC879F0", VA = "0xC879F0")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xC87B30", Offset = "0xC87B30", VA = "0xC87B30")]
	public SnapConnection()
	{
	}
}
[Token(Token = "0x2000076")]
public class SnapPaintTool : DungeonPaintMode
{
	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material cursorMaterial;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material cursorDoorMaterial;

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xC87B38", Offset = "0xC87B38", VA = "0xC87B38")]
	public SnapPaintTool()
	{
	}
}
[Token(Token = "0x2000077")]
public class GridFlowItemMetadataResolver : DungeonEventListener
{
	[Token(Token = "0x60001D0")]
	private T[] GetDungeonOwnedComponents<T>(Dungeon dungeon) where T : Component
	{
		return null;
	}

	[Token(Token = "0x60001D1")]
	private T FindOrAddComponent<T>(GameObject gameObject) where T : Component
	{
		return null;
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xC87B40", Offset = "0xC87B40", VA = "0xC87B40", Slot = "7")]
	public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xC88230", Offset = "0xC88230", VA = "0xC88230")]
	public GridFlowItemMetadataResolver()
	{
	}
}
[Token(Token = "0x2000078")]
public class DungeonItemGroup : DungeonEventListener
{
	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xC88238", Offset = "0xC88238", VA = "0xC88238", Slot = "7")]
	public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xC8959C", Offset = "0xC8959C", VA = "0xC8959C", Slot = "9")]
	public override void OnDungeonDestroyed(Dungeon dungeon)
	{
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xC88960", Offset = "0xC88960", VA = "0xC88960")]
	private DungeonItemGroupInfo GroupItems(GameObject[] items, string groupName, Dungeon dungeon, int groupId)
	{
		return null;
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xC88BF8", Offset = "0xC88BF8", VA = "0xC88BF8")]
	private void DestroyOldGroupObjects(Dungeon dungeon)
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xC895A0", Offset = "0xC895A0", VA = "0xC895A0")]
	private void EditorDestroyObject(UnityEngine.Object obj)
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xC88D14", Offset = "0xC88D14", VA = "0xC88D14")]
	private void PostInitializeForGridBuilder(Dungeon dungeon, GridDungeonModel gridModel)
	{
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xC89618", Offset = "0xC89618", VA = "0xC89618")]
	public DungeonItemGroup()
	{
	}
}
[Token(Token = "0x2000079")]
public class MeshMerger : DungeonEventListener
{
	[Token(Token = "0x200007A")]
	private class MergeMeshItem
	{
		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh mesh;

		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Matrix4x4 transform;

		[Token(Token = "0x60001E1")]
		[Address(RVA = "0xC8A2A8", Offset = "0xC8A2A8", VA = "0xC8A2A8")]
		public MergeMeshItem()
		{
		}
	}

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool mergeMeshes;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float mergePatchSize;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform mergedMeshParent;

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xC89620", Offset = "0xC89620", VA = "0xC89620")]
	private int GetMaterialHash(Material[] materials)
	{
		return default(int);
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xC89744", Offset = "0xC89744", VA = "0xC89744", Slot = "7")]
	public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xC8A69C", Offset = "0xC8A69C", VA = "0xC8A69C")]
	private List<MergeMeshItem[]> SplitPerVertexLimit(List<MergeMeshItem> patchItems, int vertexLimit)
	{
		return null;
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xC8A2B0", Offset = "0xC8A2B0", VA = "0xC8A2B0")]
	private Dictionary<IntVector2, List<MergeMeshItem>> SpatialPartitionByPatchSize(List<MergeMeshItem> items)
	{
		return null;
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xC8AB14", Offset = "0xC8AB14", VA = "0xC8AB14")]
	private static Mesh CreateMergedMesh(MergeMeshItem[] items)
	{
		return null;
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xC8AEEC", Offset = "0xC8AEEC", VA = "0xC8AEEC")]
	public MeshMerger()
	{
	}
}
[Token(Token = "0x200007B")]
public class DungeonUtils
{
	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xC887B4", Offset = "0xC887B4", VA = "0xC887B4")]
	public static List<GameObject> GetDungeonObjects(Dungeon dungeon)
	{
		return null;
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xC8AF04", Offset = "0xC8AF04", VA = "0xC8AF04")]
	public static void DestroyObject(GameObject go)
	{
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xC8AF7C", Offset = "0xC8AF7C", VA = "0xC8AF7C")]
	public static Bounds GetDungeonBounds(Dungeon dungeon)
	{
		return default(Bounds);
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xC8B1FC", Offset = "0xC8B1FC", VA = "0xC8B1FC")]
	public DungeonUtils()
	{
	}
}
[Token(Token = "0x200007C")]
public static class RandomExtensions
{
	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xC8B204", Offset = "0xC8B204", VA = "0xC8B204")]
	public static float NextFloat(this System.Random random)
	{
		return default(float);
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xC8B228", Offset = "0xC8B228", VA = "0xC8B228")]
	public static UnityEngine.Vector3 OnUnitSphere(this System.Random random)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xC8B2BC", Offset = "0xC8B2BC", VA = "0xC8B2BC")]
	public static float Range(this System.Random random, float a, float b)
	{
		return default(float);
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xC8B2FC", Offset = "0xC8B2FC", VA = "0xC8B2FC")]
	public static int Range(this System.Random random, int a, int b)
	{
		return default(int);
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xC8B410", Offset = "0xC8B410", VA = "0xC8B410")]
	public static float value(this System.Random random)
	{
		return default(float);
	}
}
[Token(Token = "0x200007D")]
public class Input_Test : MonoBehaviour
{
	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xC8B434", Offset = "0xC8B434", VA = "0xC8B434")]
	private void Update()
	{
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xC8C674", Offset = "0xC8C674", VA = "0xC8C674")]
	public Input_Test()
	{
	}
}
[Token(Token = "0x200007E")]
[RequireComponent(typeof(Canvas))]
public class NoloVR_GraphicRaycaster : GraphicRaycaster
{
	[Token(Token = "0x200007F")]
	private struct VRGraphic
	{
		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Graphic graphic;

		[Token(Token = "0x4000197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float distance;

		[Token(Token = "0x4000198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public UnityEngine.Vector3 position;

		[Token(Token = "0x4000199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector2 pointerPosition;
	}

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject raycastSource;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Canvas canvas;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector2 lastKnownPosition;

	[Token(Token = "0x4000193")]
	private const float UI_CONTROL_OFFSET = 1E-05f;

	[NonSerialized]
	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<VRGraphic> m_RaycastResults;

	[NonSerialized]
	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly List<VRGraphic> s_SortedGraphics;

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xC8C67C", Offset = "0xC8C67C", VA = "0xC8C67C", Slot = "5")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0xC8C934", Offset = "0xC8C934", VA = "0xC8C934", Slot = "17")]
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
	{
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xC8D09C", Offset = "0xC8D09C", VA = "0xC8D09C")]
	private void SetNearestRaycast(ref PointerEventData eventData, List<RaycastResult> resultAppendList)
	{
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xC8D510", Offset = "0xC8D510", VA = "0xC8D510")]
	private float GetHitDistance(Ray ray)
	{
		return default(float);
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xC8CA68", Offset = "0xC8CA68", VA = "0xC8CA68")]
	private void Raycast(Canvas canvas, Camera eventCamera, Ray ray, List<VRGraphic> results)
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xC8D7CC", Offset = "0xC8D7CC", VA = "0xC8D7CC")]
	public NoloVR_GraphicRaycaster()
	{
	}
}
[Token(Token = "0x2000081")]
public class NoloVR_InputModule : PointerInputModule
{
	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<NoloVR_SimplePointer> pointers;

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0xC8D9B8", Offset = "0xC8D9B8", VA = "0xC8D9B8", Slot = "5")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xC8D9C0", Offset = "0xC8D9C0", VA = "0xC8D9C0", Slot = "17")]
	public override void Process()
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xC8DC40", Offset = "0xC8DC40", VA = "0xC8DC40")]
	private List<RaycastResult> CheckRaycasts(NoloVR_SimplePointer pointer)
	{
		return null;
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0xC8EB9C", Offset = "0xC8EB9C", VA = "0xC8EB9C")]
	private bool CheckTransformTree(Transform target, Transform source)
	{
		return default(bool);
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0xC8EC54", Offset = "0xC8EC54", VA = "0xC8EC54")]
	private bool NoValidCollision(NoloVR_SimplePointer pointer, List<RaycastResult> results)
	{
		return default(bool);
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0xC8ED2C", Offset = "0xC8ED2C", VA = "0xC8ED2C")]
	private bool IsHovering(NoloVR_SimplePointer pointer)
	{
		return default(bool);
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xC8DDB8", Offset = "0xC8DDB8", VA = "0xC8DDB8")]
	private void Hover(NoloVR_SimplePointer pointer, List<RaycastResult> results)
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0xC8E3F8", Offset = "0xC8E3F8", VA = "0xC8E3F8")]
	private void Click(NoloVR_SimplePointer pointer, List<RaycastResult> results)
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0xC8E8A4", Offset = "0xC8E8A4", VA = "0xC8E8A4")]
	private void Scroll(NoloVR_SimplePointer pointer, List<RaycastResult> results)
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0xC8EFB8", Offset = "0xC8EFB8", VA = "0xC8EFB8", Slot = "7")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0xC8F07C", Offset = "0xC8F07C", VA = "0xC8F07C")]
	public NoloVR_InputModule()
	{
	}
}
[Token(Token = "0x2000082")]
[RequireComponent(typeof(NoloVR_TrackedDevice))]
public class NoloVR_SimplePointer : MonoBehaviour
{
	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color pointerHitColor;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color pointerMissColor;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material pointerMaterial;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LayerMask layersToIgnore;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject customPointerCursor;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float pointerLength;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float pointerThickness;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject pointerHolder;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject pointer;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameObject pointerTip;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private UnityEngine.Vector3 pointerTipScale;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[HideInInspector]
	public NoloDeviceType deviceType;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	public GameObject hoveringElement;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float pointerContactDistance;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private RaycastHit pointerContactRaycastHit;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Transform pointerContactTarget;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private UnityEngine.Vector3 destinationPosition;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[HideInInspector]
	public PointerEventData pointerEventData;

	[Token(Token = "0x14000001")]
	public event UIPointerEventHandler UIPointerElementEnter
	{
		[Token(Token = "0x600020B")]
		[Address(RVA = "0xC8FCB8", Offset = "0xC8FCB8", VA = "0xC8FCB8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600020C")]
		[Address(RVA = "0xC8FD54", Offset = "0xC8FD54", VA = "0xC8FD54")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event UIPointerEventHandler UIPointerElementExit
	{
		[Token(Token = "0x600020D")]
		[Address(RVA = "0xC8FDF0", Offset = "0xC8FDF0", VA = "0xC8FDF0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600020E")]
		[Address(RVA = "0xC8FE8C", Offset = "0xC8FE8C", VA = "0xC8FE8C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0xC8F0F8", Offset = "0xC8F0F8", VA = "0xC8F0F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0xC8F6E8", Offset = "0xC8F6E8", VA = "0xC8F6E8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0xC8F15C", Offset = "0xC8F15C", VA = "0xC8F15C")]
	private void InitPointer()
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0xC8F84C", Offset = "0xC8F84C", VA = "0xC8F84C")]
	private void PointerActivate(bool state)
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0xC8FAAC", Offset = "0xC8FAAC", VA = "0xC8FAAC")]
	private void SetPointerTransform(float setLength, float setThicknes)
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xC8F890", Offset = "0xC8F890", VA = "0xC8F890")]
	private float GetPointerBeamLength(bool hasRayHit, RaycastHit collidedWith)
	{
		return default(float);
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xC8FBE4", Offset = "0xC8FBE4", VA = "0xC8FBE4")]
	private void UpdatePointerMaterial(Color color)
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xC8FBE0", Offset = "0xC8FBE0", VA = "0xC8FBE0")]
	public void PointerOut()
	{
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0xC8FCB4", Offset = "0xC8FCB4", VA = "0xC8FCB4")]
	public void PointerIn()
	{
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0xC8DBFC", Offset = "0xC8DBFC", VA = "0xC8DBFC")]
	public bool PointerActive()
	{
		return default(bool);
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0xC8FF28", Offset = "0xC8FF28", VA = "0xC8FF28")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0xC90088", Offset = "0xC90088", VA = "0xC90088", Slot = "4")]
	public virtual void OnUIPointerElementEnter(UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xC900D8", Offset = "0xC900D8", VA = "0xC900D8", Slot = "5")]
	public virtual void OnUIPointerElementExit(UIPointerEventArgs e)
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0xC8EF80", Offset = "0xC8EF80", VA = "0xC8EF80")]
	public UIPointerEventArgs SetUIPointerEvent(GameObject currentTarget, [Optional] GameObject lastTarget)
	{
		return default(UIPointerEventArgs);
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0xC901A0", Offset = "0xC901A0", VA = "0xC901A0")]
	public NoloVR_SimplePointer()
	{
	}
}
[Token(Token = "0x2000083")]
public struct UIPointerEventArgs
{
	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public bool isActive;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public GameObject currentTarget;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject previousTarget;
}
[Token(Token = "0x2000084")]
public delegate void UIPointerEventHandler(object sender, UIPointerEventArgs e);
[Token(Token = "0x2000085")]
public class UI_Test : MonoBehaviour
{
	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text UIText;

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xC903E0", Offset = "0xC903E0", VA = "0xC903E0")]
	private void Start()
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xC90430", Offset = "0xC90430", VA = "0xC90430")]
	private void Update()
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xC92218", Offset = "0xC92218", VA = "0xC92218")]
	public UI_Test()
	{
	}
}
[Token(Token = "0x2000086")]
public class NoloVR_RotateScene : MonoBehaviour
{
	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform objectParents;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isChangeScale;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool isChangeRotation;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform leftController;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform rightController;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject controllerCenter;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float originDistance;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float distance;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float scaling;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float preScaling;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3 preVetor;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private UnityEngine.Vector3 vetor;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private UnityEngine.Vector3 prerotation;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float maxAngel;

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xC92220", Offset = "0xC92220", VA = "0xC92220")]
	private void Start()
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xC923B4", Offset = "0xC923B4", VA = "0xC923B4")]
	private void Update()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xC92A48", Offset = "0xC92A48", VA = "0xC92A48")]
	public NoloVR_RotateScene()
	{
	}
}
[Token(Token = "0x2000087")]
public static class Bezier
{
	[Token(Token = "0x600021F")]
	[Address(RVA = "0xC92AE4", Offset = "0xC92AE4", VA = "0xC92AE4")]
	public static UnityEngine.Vector3 GetPoint(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, float t)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xC92B58", Offset = "0xC92B58", VA = "0xC92B58")]
	public static UnityEngine.Vector3 GetFirstDerivative(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, float t)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xC92BB4", Offset = "0xC92BB4", VA = "0xC92BB4")]
	public static UnityEngine.Vector3 GetPoint(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3, float t)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xC92C60", Offset = "0xC92C60", VA = "0xC92C60")]
	public static UnityEngine.Vector3 GetFirstDerivative(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3, float t)
	{
		return default(UnityEngine.Vector3);
	}
}
[Token(Token = "0x2000088")]
public class CurveGenerator : MonoBehaviour
{
	[Token(Token = "0x2000089")]
	private enum BezierControlPointMode
	{
		[Token(Token = "0x40001CB")]
		Free,
		[Token(Token = "0x40001CC")]
		Aligned,
		[Token(Token = "0x40001CD")]
		Mirrored
	}

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.Vector3[] points;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] items;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private BezierControlPointMode[] modes;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool loop;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int frequency;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool customTracer;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool rescalePointerTracer;

	[Token(Token = "0x17000033")]
	private bool Loop
	{
		[Token(Token = "0x6000227")]
		[Address(RVA = "0xC934B4", Offset = "0xC934B4", VA = "0xC934B4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000228")]
		[Address(RVA = "0xC934BC", Offset = "0xC934BC", VA = "0xC934BC")]
		set
		{
		}
	}

	[Token(Token = "0x17000034")]
	private int ControlPointCount
	{
		[Token(Token = "0x6000229")]
		[Address(RVA = "0xC93764", Offset = "0xC93764", VA = "0xC93764")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000035")]
	private int CurveCount
	{
		[Token(Token = "0x600022D")]
		[Address(RVA = "0xC93A90", Offset = "0xC93A90", VA = "0xC93A90")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xC92D10", Offset = "0xC92D10", VA = "0xC92D10")]
	public void Create(int setFrequency, float radius, GameObject tracer, bool rescaleTracer = false)
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xC93048", Offset = "0xC93048", VA = "0xC93048")]
	public void SetPoints(UnityEngine.Vector3[] controlPoints, Material material, Color color)
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xC9348C", Offset = "0xC9348C", VA = "0xC9348C")]
	public void TogglePoints(bool state)
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xC92F5C", Offset = "0xC92F5C", VA = "0xC92F5C")]
	private GameObject CreateSphere()
	{
		return null;
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0xC93780", Offset = "0xC93780", VA = "0xC93780")]
	private UnityEngine.Vector3 GetControlPoint(int index)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0xC93524", Offset = "0xC93524", VA = "0xC93524")]
	private void SetControlPoint(int index, UnityEngine.Vector3 point)
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xC937BC", Offset = "0xC937BC", VA = "0xC937BC")]
	private void EnforceMode(int index)
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xC93AC8", Offset = "0xC93AC8", VA = "0xC93AC8")]
	private UnityEngine.Vector3 GetPoint(float t)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xC930E4", Offset = "0xC930E4", VA = "0xC930E4")]
	private void SetObjects(Material material, Color color)
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xC93C38", Offset = "0xC93C38", VA = "0xC93C38")]
	private void setMaterial(GameObject item, Material material, Color color)
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xC93E80", Offset = "0xC93E80", VA = "0xC93E80")]
	public CurveGenerator()
	{
	}
}
[Token(Token = "0x200008A")]
[RequireComponent(typeof(NoloVR_TrackedDevice))]
public class NoloVR_Teleport : MonoBehaviour
{
	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool enableTeleport;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color pointerHitColor;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Color pointerMissColor;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material pointerMaterial;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LayerMask layersToIgnore;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int pointerDensity;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float pointerLength;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float beamCurveOffset;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Range(1f, 100f)]
	public float beamHeightLimitAngle;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float pointerCursorRadius;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject customPointerTracer;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject customPointerCursor;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool rescalePointerTracer;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GameObject pointerCursor;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameObject curvedBeamContainer;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private CurveGenerator curvedBeam;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private NoloDeviceType deviceType;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private UnityEngine.Vector3 destinationPosition;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform pointerContactTarget;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private UnityEngine.Vector3 contactNormal;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float pointerContactDistance;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private RaycastHit pointerContactRaycastHit;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private UnityEngine.Vector3 fixedForwardBeamForward;

	[Token(Token = "0x40001E5")]
	private const float BEAM_ADJUST_OFFSET = 1E-05f;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Color currentPointerColor;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private UnityEngine.Vector3 downPosition;

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xC93E88", Offset = "0xC93E88", VA = "0xC93E88")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0xC940E4", Offset = "0xC940E4", VA = "0xC940E4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xC94204", Offset = "0xC94204", VA = "0xC94204")]
	private void Update()
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0xC93EEC", Offset = "0xC93EEC", VA = "0xC93EEC")]
	private void InitPointer()
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0xC94448", Offset = "0xC94448", VA = "0xC94448")]
	private void PointerActivate(bool state)
	{
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xC94F48", Offset = "0xC94F48", VA = "0xC94F48")]
	private void UpdatePointerMaterial(Color color)
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0xC94DF4", Offset = "0xC94DF4", VA = "0xC94DF4")]
	private GameObject CreateCursor()
	{
		return null;
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0xC9448C", Offset = "0xC9448C", VA = "0xC9448C")]
	private UnityEngine.Vector3 ProjectForwardBeam()
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0xC94890", Offset = "0xC94890", VA = "0xC94890")]
	private UnityEngine.Vector3 ProjectDownBeam(UnityEngine.Vector3 jointPosition)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xC94B48", Offset = "0xC94B48", VA = "0xC94B48")]
	private void DisplayCurvedBeam(UnityEngine.Vector3 jointPosition, UnityEngine.Vector3 downPosition)
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xC94C94", Offset = "0xC94C94", VA = "0xC94C94")]
	private void SetPointerCursor(UnityEngine.Vector3 downPosition)
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xC9505C", Offset = "0xC9505C", VA = "0xC9505C")]
	private void PointerOut()
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xC95060", Offset = "0xC95060", VA = "0xC95060")]
	private void PointerIn()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xC95064", Offset = "0xC95064", VA = "0xC95064")]
	public NoloVR_Teleport()
	{
	}
}
[Token(Token = "0x200008B")]
public class NOLO_TestThrow : MonoBehaviour
{
	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefab;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody attachPoint;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private NoloVR_Controller.NoloDevice device;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private NoloVR_TrackedDevice trackedObj;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private FixedJoint joint;

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xC950BC", Offset = "0xC950BC", VA = "0xC950BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xC95148", Offset = "0xC95148", VA = "0xC95148")]
	private void Update()
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xC954B8", Offset = "0xC954B8", VA = "0xC954B8")]
	public NOLO_TestThrow()
	{
	}
}
[Token(Token = "0x200008C")]
public class NoloVR_AndroidPlayform : NoloVR_Playform
{
	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private AndroidJavaClass unityPlayer;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AndroidJavaObject currentActivity;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AndroidJavaObject jc;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AndroidJavaObject jo;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ConnectedStatusCallBackFunc func;

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xC954C0", Offset = "0xC954C0", VA = "0xC954C0", Slot = "4")]
	public override bool InitDevice()
	{
		return default(bool);
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xC95A68", Offset = "0xC95A68", VA = "0xC95A68")]
	public void ConnectedStatusCallBack(int status)
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xC95A90", Offset = "0xC95A90", VA = "0xC95A90", Slot = "5")]
	public override void DisconnectDevice()
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xC95B7C", Offset = "0xC95B7C", VA = "0xC95B7C", Slot = "6")]
	public override void ReconnectDeviceCallBack()
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0xC95C18", Offset = "0xC95C18", VA = "0xC95C18", Slot = "7")]
	public override void DisConnectedCallBack()
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0xC95CB8", Offset = "0xC95CB8", VA = "0xC95CB8", Slot = "8")]
	public override void TriggerHapticPulse(int deviceIndex, int intensity)
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0xC95D50", Offset = "0xC95D50", VA = "0xC95D50", Slot = "9")]
	public override void SetHmdTrackingCenter(int type)
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0xC95DD4", Offset = "0xC95DD4", VA = "0xC95DD4", Slot = "10")]
	public override void Authentication(string appKey)
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0xC95FE8", Offset = "0xC95FE8", VA = "0xC95FE8", Slot = "11")]
	public override void ReportError(string msg)
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xC960AC", Offset = "0xC960AC", VA = "0xC960AC")]
	public NoloVR_AndroidPlayform()
	{
	}
}
[Token(Token = "0x200008D")]
public class NoloVR_OtherPlayform : NoloVR_Playform
{
	[Token(Token = "0x600024D")]
	[Address(RVA = "0xC96188", Offset = "0xC96188", VA = "0xC96188", Slot = "10")]
	public override void Authentication(string appKey)
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xC961F0", Offset = "0xC961F0", VA = "0xC961F0", Slot = "5")]
	public override void DisconnectDevice()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xC96258", Offset = "0xC96258", VA = "0xC96258", Slot = "7")]
	public override void DisConnectedCallBack()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xC962C0", Offset = "0xC962C0", VA = "0xC962C0", Slot = "4")]
	public override bool InitDevice()
	{
		return default(bool);
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xC96330", Offset = "0xC96330", VA = "0xC96330", Slot = "6")]
	public override void ReconnectDeviceCallBack()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xC96398", Offset = "0xC96398", VA = "0xC96398", Slot = "9")]
	public override void SetHmdTrackingCenter(int type)
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xC96400", Offset = "0xC96400", VA = "0xC96400", Slot = "8")]
	public override void TriggerHapticPulse(int deviceIndex, int intensity)
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xC96468", Offset = "0xC96468", VA = "0xC96468", Slot = "11")]
	public override void ReportError(string msg)
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xC9646C", Offset = "0xC9646C", VA = "0xC9646C")]
	public NoloVR_OtherPlayform()
	{
	}
}
[Token(Token = "0x200008E")]
public abstract class NoloVR_Playform
{
	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static NoloError playformError;

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	protected static bool isAuthentication;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static NoloVR_Playform instance;

	[Token(Token = "0x6000256")]
	public abstract bool InitDevice();

	[Token(Token = "0x6000257")]
	public abstract void DisconnectDevice();

	[Token(Token = "0x6000258")]
	public abstract void ReconnectDeviceCallBack();

	[Token(Token = "0x6000259")]
	public abstract void DisConnectedCallBack();

	[Token(Token = "0x600025A")]
	public abstract void TriggerHapticPulse(int deviceIndex, int intensity);

	[Token(Token = "0x600025B")]
	public abstract void SetHmdTrackingCenter(int type);

	[Token(Token = "0x600025C")]
	public abstract void Authentication(string appKey);

	[Token(Token = "0x600025D")]
	public abstract void ReportError(string msg);

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xC96100", Offset = "0xC96100", VA = "0xC96100")]
	protected NoloVR_Playform()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0xC964C0", Offset = "0xC964C0", VA = "0xC964C0")]
	public static NoloVR_Playform GetInstance()
	{
		return null;
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xC9657C", Offset = "0xC9657C", VA = "0xC9657C")]
	public NoloError GetPlayformError()
	{
		return default(NoloError);
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xC965D4", Offset = "0xC965D4", VA = "0xC965D4")]
	public bool GetAuthentication()
	{
		return default(bool);
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xC9662C", Offset = "0xC9662C", VA = "0xC9662C", Slot = "1")]
	~NoloVR_Playform()
	{
	}
}
[Token(Token = "0x200008F")]
public enum TurnAroundButtonType
{
	[Token(Token = "0x40001F6")]
	Null = -1,
	[Token(Token = "0x40001F7")]
	Touchpad = 0,
	[Token(Token = "0x40001F8")]
	Menu = 2,
	[Token(Token = "0x40001F9")]
	Grip = 4
}
[Token(Token = "0x2000090")]
public enum NoloAndroidVRPlayform
{
	[Token(Token = "0x40001FB")]
	GearVR,
	[Token(Token = "0x40001FC")]
	CardBoard,
	[Token(Token = "0x40001FD")]
	DayDream,
	[Token(Token = "0x40001FE")]
	Other
}
[Token(Token = "0x2000091")]
public enum NoloDeviceType
{
	[Token(Token = "0x4000200")]
	Hmd,
	[Token(Token = "0x4000201")]
	LeftController,
	[Token(Token = "0x4000202")]
	RightController,
	[Token(Token = "0x4000203")]
	BaseStation
}
[Token(Token = "0x2000092")]
public enum NoloButtonID
{
	[Token(Token = "0x4000205")]
	TouchPad = 0,
	[Token(Token = "0x4000206")]
	Trigger = 1,
	[Token(Token = "0x4000207")]
	Menu = 2,
	[Token(Token = "0x4000208")]
	System = 3,
	[Token(Token = "0x4000209")]
	Grip = 4,
	[Token(Token = "0x400020A")]
	TouchPadUp = 8,
	[Token(Token = "0x400020B")]
	TouchPadDown = 9,
	[Token(Token = "0x400020C")]
	TouchPadLeft = 10,
	[Token(Token = "0x400020D")]
	TouchPadRight = 11
}
[Token(Token = "0x2000093")]
public enum NoloTouchID
{
	[Token(Token = "0x400020F")]
	TouchPad,
	[Token(Token = "0x4000210")]
	Trigger
}
[Token(Token = "0x2000094")]
public enum NoloError
{
	[Token(Token = "0x4000212")]
	None,
	[Token(Token = "0x4000213")]
	ConnectFail,
	[Token(Token = "0x4000214")]
	NoConnect,
	[Token(Token = "0x4000215")]
	DisConnect,
	[Token(Token = "0x4000216")]
	UnKnow
}
[Token(Token = "0x2000095")]
public enum NoloTrackingStatus
{
	[Token(Token = "0x4000218")]
	NotConnect,
	[Token(Token = "0x4000219")]
	Normal,
	[Token(Token = "0x400021A")]
	OutofRange
}
[Token(Token = "0x2000096")]
[UnmanagedFunctionPointer(CallingConvention.StdCall)]
public delegate void DisConnectedCallBack();
[Token(Token = "0x2000097")]
[UnmanagedFunctionPointer(CallingConvention.StdCall)]
public delegate void ConnectedCallBack();
[Token(Token = "0x2000098")]
[UnmanagedFunctionPointer(CallingConvention.StdCall)]
public delegate void ConnectedStatusCallBackFunc(int status);
[Token(Token = "0x2000099")]
public class NoloVR_Plugins
{
	[Token(Token = "0x200009A")]
	public struct Nolo_Vector2
	{
		[Token(Token = "0x400021C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;
	}

	[Token(Token = "0x200009B")]
	public struct Nolo_Vector3
	{
		[Token(Token = "0x400021E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;
	}

	[Token(Token = "0x200009C")]
	public struct Nolo_Quaternion
	{
		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float w;
	}

	[Token(Token = "0x200009D")]
	public struct Nolo_Pose
	{
		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Nolo_Vector3 pos;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Nolo_Quaternion rot;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Nolo_Vector3 vecVelocity;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Nolo_Vector3 vecAngularVelocity;

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int status;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool bDeviceIsConnected;
	}

	[Token(Token = "0x200009E")]
	public struct Nolo_ControllerStates
	{
		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint buttons;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint touches;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Nolo_Vector2 touchpadAxis;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Nolo_Vector2 rAxis1;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Nolo_Vector2 rAxis2;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Nolo_Vector2 rAxis3;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Nolo_Vector2 rAxis4;
	}

	[Token(Token = "0x200009F")]
	public class API
	{
		[Token(Token = "0x4000232")]
		public const string dllName = "libNoloVR";

		[PreserveSig]
		[Token(Token = "0x6000274")]
		[Address(RVA = "0xC96BA0", Offset = "0xC96BA0", VA = "0xC96BA0")]
		public static extern int GetElectricityByDeviceType(int type);

		[PreserveSig]
		[Token(Token = "0x6000275")]
		[Address(RVA = "0xC96A14", Offset = "0xC96A14", VA = "0xC96A14")]
		public static extern Nolo_Pose GetPoseByDeviceType(int type);

		[PreserveSig]
		[Token(Token = "0x6000276")]
		[Address(RVA = "0xC96B1C", Offset = "0xC96B1C", VA = "0xC96B1C")]
		public static extern Nolo_ControllerStates GetControllerStatesByDeviceType(int type);

		[PreserveSig]
		[Token(Token = "0x6000277")]
		[Address(RVA = "0xC95CC4", Offset = "0xC95CC4", VA = "0xC95CC4")]
		public static extern bool Nolovr_TriggerHapticPulse(int type, int intensity);

		[PreserveSig]
		[Token(Token = "0x6000278")]
		[Address(RVA = "0xC95D58", Offset = "0xC95D58", VA = "0xC95D58")]
		public static extern void SetHmdType(int hmdType);

		[PreserveSig]
		[Token(Token = "0x6000279")]
		[Address(RVA = "0xC959E8", Offset = "0xC959E8", VA = "0xC959E8")]
		public static extern int SetConnectedStatus(ConnectedStatusCallBackFunc nfun);

		[Token(Token = "0x600027A")]
		[Address(RVA = "0xC96C24", Offset = "0xC96C24", VA = "0xC96C24")]
		public API()
		{
		}
	}

	[Token(Token = "0x400021B")]
	public const int trackedDeviceNumber = 4;

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xC969D4", Offset = "0xC969D4", VA = "0xC969D4")]
	public static Nolo_Transform GetPose(int deviceIndex)
	{
		return default(Nolo_Transform);
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xC96AEC", Offset = "0xC96AEC", VA = "0xC96AEC")]
	public static Nolo_ControllerStates GetControllerStates(int deviceIndex)
	{
		return default(Nolo_ControllerStates);
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xC92214", Offset = "0xC92214", VA = "0xC92214")]
	public static int GetElectricity(int deviceIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xC96C1C", Offset = "0xC96C1C", VA = "0xC96C1C")]
	public NoloVR_Plugins()
	{
	}
}
[Token(Token = "0x20000A0")]
public class NoloVR_System
{
	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static NoloVR_System instance;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public NoloVR_TrackedDevice[] objects;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject VRCamera;

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xC96C2C", Offset = "0xC96C2C", VA = "0xC96C2C")]
	private NoloVR_System()
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xC92338", Offset = "0xC92338", VA = "0xC92338")]
	public static NoloVR_System GetInstance()
	{
		return null;
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xC96D2C", Offset = "0xC96D2C", VA = "0xC96D2C", Slot = "1")]
	~NoloVR_System()
	{
	}
}
[Token(Token = "0x20000A1")]
public class BoundaryRegion_Manager : MonoBehaviour
{
	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject baseStation;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isOutOfRange;

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xC96E9C", Offset = "0xC96E9C", VA = "0xC96E9C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xC96F90", Offset = "0xC96F90", VA = "0xC96F90")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xC97084", Offset = "0xC97084", VA = "0xC97084")]
	private void OutOfRange(params object[] args)
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xC970F4", Offset = "0xC970F4", VA = "0xC970F4")]
	private void InRange(params object[] args)
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xC97160", Offset = "0xC97160", VA = "0xC97160")]
	public BoundaryRegion_Manager()
	{
	}
}
[Token(Token = "0x20000A2")]
public class NoloVR_AppInfo : MonoBehaviour
{
	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string appKey;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public NoloAndroidVRPlayform VRPlayform;

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xC97168", Offset = "0xC97168", VA = "0xC97168")]
	private void Start()
	{
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xC971E8", Offset = "0xC971E8", VA = "0xC971E8")]
	public NoloVR_AppInfo()
	{
	}
}
[Token(Token = "0x20000A3")]
public class NoloVR_BaseStation : MonoBehaviour
{
	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool showTrackingBoundary;

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xC971F0", Offset = "0xC971F0", VA = "0xC971F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0xC971FC", Offset = "0xC971FC", VA = "0xC971FC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0xC97608", Offset = "0xC97608", VA = "0xC97608")]
	public NoloVR_BaseStation()
	{
	}
}
[Token(Token = "0x20000A4")]
public class NoloVR_Controller
{
	[Token(Token = "0x20000A5")]
	public class ButtonMask
	{
		[Token(Token = "0x400023E")]
		public const uint TouchPad = 1u;

		[Token(Token = "0x400023F")]
		public const uint Trigger = 2u;

		[Token(Token = "0x4000240")]
		public const uint Menu = 4u;

		[Token(Token = "0x4000241")]
		public const uint System = 8u;

		[Token(Token = "0x4000242")]
		public const uint Grip = 16u;

		[Token(Token = "0x4000243")]
		public const uint TouchPadUp = 256u;

		[Token(Token = "0x4000244")]
		public const uint TouchPadDown = 512u;

		[Token(Token = "0x4000245")]
		public const uint TouchPadLeft = 1024u;

		[Token(Token = "0x4000246")]
		public const uint TouchPadRight = 2048u;

		[Token(Token = "0x600028F")]
		[Address(RVA = "0xC97798", Offset = "0xC97798", VA = "0xC97798")]
		public ButtonMask()
		{
		}
	}

	[Token(Token = "0x20000A6")]
	public class TouchMask
	{
		[Token(Token = "0x4000247")]
		public const uint TouchPad = 1u;

		[Token(Token = "0x6000290")]
		[Address(RVA = "0xC977A0", Offset = "0xC977A0", VA = "0xC977A0")]
		public TouchMask()
		{
		}
	}

	[Token(Token = "0x20000A7")]
	public class NoloDevice
	{
		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private NoloVR_Plugins.Nolo_ControllerStates controllerStates;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private NoloVR_Plugins.Nolo_ControllerStates preControllerStates;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Nolo_Transform pose;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int preFrame;

		[Token(Token = "0x17000036")]
		public int index
		{
			[Token(Token = "0x6000292")]
			[Address(RVA = "0xC977A8", Offset = "0xC977A8", VA = "0xC977A8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000293")]
			[Address(RVA = "0xC977B0", Offset = "0xC977B0", VA = "0xC977B0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000291")]
		[Address(RVA = "0xC97610", Offset = "0xC97610", VA = "0xC97610")]
		public NoloDevice(int num)
		{
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0xC921D8", Offset = "0xC921D8", VA = "0xC921D8")]
		public Nolo_Transform GetPose()
		{
			return default(Nolo_Transform);
		}

		[Token(Token = "0x6000295")]
		[Address(RVA = "0xC97C18", Offset = "0xC97C18", VA = "0xC97C18")]
		public bool GetNoloButtonPressed(uint buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x6000296")]
		[Address(RVA = "0xC95438", Offset = "0xC95438", VA = "0xC95438")]
		public bool GetNoloButtonDown(uint buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x6000297")]
		[Address(RVA = "0xC95478", Offset = "0xC95478", VA = "0xC95478")]
		public bool GetNoloButtonUp(uint buttonMask)
		{
			return default(bool);
		}

		[Token(Token = "0x6000298")]
		[Address(RVA = "0xC8C474", Offset = "0xC8C474", VA = "0xC8C474")]
		public bool GetNoloButtonPressed(NoloButtonID button)
		{
			return default(bool);
		}

		[Token(Token = "0x6000299")]
		[Address(RVA = "0xC8C430", Offset = "0xC8C430", VA = "0xC8C430")]
		public bool GetNoloButtonDown(NoloButtonID button)
		{
			return default(bool);
		}

		[Token(Token = "0x600029A")]
		[Address(RVA = "0xC8C4A4", Offset = "0xC8C4A4", VA = "0xC8C4A4")]
		public bool GetNoloButtonUp(NoloButtonID button)
		{
			return default(bool);
		}

		[Token(Token = "0x600029B")]
		[Address(RVA = "0xC97C44", Offset = "0xC97C44", VA = "0xC97C44")]
		public bool GetNoloTouchPressed(uint touchMask)
		{
			return default(bool);
		}

		[Token(Token = "0x600029C")]
		[Address(RVA = "0xC97C70", Offset = "0xC97C70", VA = "0xC97C70")]
		public bool GetNoloTouchDown(uint touchMask)
		{
			return default(bool);
		}

		[Token(Token = "0x600029D")]
		[Address(RVA = "0xC97CB0", Offset = "0xC97CB0", VA = "0xC97CB0")]
		public bool GetNoloTouchUp(uint touchMask)
		{
			return default(bool);
		}

		[Token(Token = "0x600029E")]
		[Address(RVA = "0xC8C5C4", Offset = "0xC8C5C4", VA = "0xC8C5C4")]
		public bool GetNoloTouchPressed(NoloTouchID touch)
		{
			return default(bool);
		}

		[Token(Token = "0x600029F")]
		[Address(RVA = "0xC97CF0", Offset = "0xC97CF0", VA = "0xC97CF0")]
		public bool GetNoloTouchDown(NoloTouchID touch)
		{
			return default(bool);
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0xC97D34", Offset = "0xC97D34", VA = "0xC97D34")]
		public bool GetNoloTouchUp(NoloTouchID touch)
		{
			return default(bool);
		}

		[Token(Token = "0x60002A1")]
		[Address(RVA = "0xC8C5F4", Offset = "0xC8C5F4", VA = "0xC8C5F4")]
		public UnityEngine.Vector2 GetAxis(NoloTouchID axisIndex = NoloTouchID.TouchPad)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0xC977B8", Offset = "0xC977B8", VA = "0xC977B8")]
		public void Update()
		{
		}

		[Token(Token = "0x60002A3")]
		[Address(RVA = "0xC8C4E8", Offset = "0xC8C4E8", VA = "0xC8C4E8")]
		public void TriggerHapticPulse(int intensity)
		{
		}
	}

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool isTurnAround;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static UnityEngine.Vector3 recPosition;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static NoloDevice[] devices;

	[Token(Token = "0x6000288")]
	[Address(RVA = "0xC8C274", Offset = "0xC8C274", VA = "0xC8C274")]
	public static NoloDevice GetDevice(NoloDeviceType deviceIndex)
	{
		return null;
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0xC97640", Offset = "0xC97640", VA = "0xC97640")]
	public static NoloDevice GetDevice(NoloVR_TrackedDevice trackedObject)
	{
		return null;
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xC976A0", Offset = "0xC976A0", VA = "0xC976A0")]
	private static void TurnAroundEvents(params object[] args)
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0xC96C88", Offset = "0xC96C88", VA = "0xC96C88")]
	public static void Listen()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0xC96DF8", Offset = "0xC96DF8", VA = "0xC96DF8")]
	public static void Remove()
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xC97700", Offset = "0xC97700", VA = "0xC97700")]
	public NoloVR_Controller()
	{
	}
}
[Token(Token = "0x20000A8")]
public class NoloVR_Manager : MonoBehaviour
{
	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Camera's rotation should be changed when the app running")]
	public GameObject VRCamera;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Double click turnaround button")]
	public TurnAroundButtonType turnAroundButtonType;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public NoloVR_TrackedDevice[] objects;

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AndroidJavaClass unityPlayer;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AndroidJavaObject currentActivity;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AndroidJavaObject context;

	[Token(Token = "0x4000253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AndroidJavaObject jc;

	[Token(Token = "0x4000254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private AndroidJavaObject jo;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int leftcontrollerTurn_PreFrame;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int rightcontrollerTurn_PreFrame;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int turnAroundSpacingFrame;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int leftcontrollerRecenter_PreFrame;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int rightcontrollerRecenter_PreFrame;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int recenterSpacingFrame;

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0xD6CD68", Offset = "0xD6CD68", VA = "0xD6CD68")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0xD6CE04", Offset = "0xD6CE04", VA = "0xD6CE04")]
	private void Update()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xD6CE2C", Offset = "0xD6CE2C", VA = "0xD6CE2C")]
	private void TurnAroundEventsMonitor()
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xD6D02C", Offset = "0xD6D02C", VA = "0xD6D02C")]
	private void Recenter()
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xD6D22C", Offset = "0xD6D22C", VA = "0xD6D22C")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xD6D2D4", Offset = "0xD6D2D4", VA = "0xD6D2D4")]
	public NoloVR_Manager()
	{
	}
}
[Token(Token = "0x20000A9")]
public class NoloVR_Model : MonoBehaviour
{
	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private NoloVR_TrackedDevice trackedDevice;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform touchpad;

	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform menu;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform system;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform grip_left;

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform grip_right;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform trigger;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform led1;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform led2;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform led3;

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xD6D2F4", Offset = "0xD6D2F4", VA = "0xD6D2F4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xD6D51C", Offset = "0xD6D51C", VA = "0xD6D51C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xD6D6C8", Offset = "0xD6D6C8", VA = "0xD6D6C8")]
	private void TouchPad_Down()
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xD6D6FC", Offset = "0xD6D6FC", VA = "0xD6D6FC")]
	private void TouchPad_Up()
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0xD6D76C", Offset = "0xD6D76C", VA = "0xD6D76C")]
	private void Menu_Down()
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0xD6D7A0", Offset = "0xD6D7A0", VA = "0xD6D7A0")]
	private void Menu_Up()
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0xD6D810", Offset = "0xD6D810", VA = "0xD6D810")]
	private void System_Down()
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0xD6D844", Offset = "0xD6D844", VA = "0xD6D844")]
	private void System_Up()
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xD6D9E0", Offset = "0xD6D9E0", VA = "0xD6D9E0")]
	private void Trigger_Down()
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0xD6DA54", Offset = "0xD6DA54", VA = "0xD6DA54")]
	private void Trigger_Up()
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0xD6D8B4", Offset = "0xD6D8B4", VA = "0xD6D8B4")]
	private void Grip_Down()
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xD6D914", Offset = "0xD6D914", VA = "0xD6D914")]
	private void Grip_Up()
	{
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xD6DB24", Offset = "0xD6DB24", VA = "0xD6DB24")]
	private void Update_LED(int level)
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xD6DC74", Offset = "0xD6DC74", VA = "0xD6DC74")]
	public NoloVR_Model()
	{
	}
}
[Token(Token = "0x20000AA")]
public class NoloVR_TrackedDevice : MonoBehaviour
{
	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public NoloDeviceType deviceType;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject vrCamera;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float camerayaw;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float noloyaw;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float resetyaw;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float presetyaw;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float resultyaw;

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xD6DC7C", Offset = "0xD6DC7C", VA = "0xD6DC7C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xD6DCA4", Offset = "0xD6DCA4", VA = "0xD6DCA4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xD6DD54", Offset = "0xD6DD54", VA = "0xD6DD54")]
	private void UpdatePose()
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xD6E34C", Offset = "0xD6E34C", VA = "0xD6E34C")]
	public NoloVR_TrackedDevice()
	{
	}
}
[Token(Token = "0x20000AB")]
public enum NoloLogType
{
	[Token(Token = "0x400026D")]
	Console,
	[Token(Token = "0x400026E")]
	Screen
}
[Token(Token = "0x20000AC")]
public class NoloVR_Logs : MonoBehaviour
{
	[Token(Token = "0x20000AD")]
	private struct NoloLog
	{
		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string logMessage;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string stackTrace;

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LogType type;
	}

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool drawScreen;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private NoloLogType logType;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly List<NoloLog> logs;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector2 screenPosition;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool collapse;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Dictionary<LogType, Color> logTypeColors;

	[Token(Token = "0x4000275")]
	private const int margin = 20;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly GUIContent clearLabel;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly GUIContent collapseLabel;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Rect windowRect;

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xD6E354", Offset = "0xD6E354", VA = "0xD6E354")]
	public void SetLogType(NoloLogType type)
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xD6E35C", Offset = "0xD6E35C", VA = "0xD6E35C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xD6E370", Offset = "0xD6E370", VA = "0xD6E370")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xD6E49C", Offset = "0xD6E49C", VA = "0xD6E49C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xD6E51C", Offset = "0xD6E51C", VA = "0xD6E51C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xD6E59C", Offset = "0xD6E59C", VA = "0xD6E59C")]
	private void HandleLog(string message, string stackTrace, LogType type)
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xD6E66C", Offset = "0xD6E66C", VA = "0xD6E66C")]
	private void DrawConsoleWindow(int windowID)
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xD6E684", Offset = "0xD6E684", VA = "0xD6E684")]
	private void DrawLogsList()
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xD6E900", Offset = "0xD6E900", VA = "0xD6E900")]
	private void DrawToolbar()
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xD6EB00", Offset = "0xD6EB00", VA = "0xD6EB00")]
	public NoloVR_Logs()
	{
	}
}
[Token(Token = "0x20000AE")]
[ExecuteInEditMode]
public class NoloVR_PlayArea : MonoBehaviour
{
	[Token(Token = "0x20000AF")]
	public enum PlaySize
	{
		[Token(Token = "0x4000281")]
		_300x500,
		[Token(Token = "0x4000282")]
		_250x400,
		[Token(Token = "0x4000283")]
		_200x350
	}

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float height;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public PlaySize size;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public UnityEngine.Vector3[] vertices;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Hashtable values;

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xD6EDC0", Offset = "0xD6EDC0", VA = "0xD6EDC0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xD6EDC4", Offset = "0xD6EDC4", VA = "0xD6EDC4")]
	private void GetVectors()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xD6F1FC", Offset = "0xD6F1FC", VA = "0xD6F1FC")]
	private void Update()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xD6F3D4", Offset = "0xD6F3D4", VA = "0xD6F3D4")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xD6F5F0", Offset = "0xD6F5F0", VA = "0xD6F5F0")]
	public NoloVR_PlayArea()
	{
	}
}
[Token(Token = "0x20000B0")]
public struct Nolo_Transform
{
	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public UnityEngine.Vector3 pos;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Quaternion rot;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public UnityEngine.Vector3 vecVelocity;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.Vector3 vecAngularVelocity;

	[Token(Token = "0x17000037")]
	public static Nolo_Transform identity
	{
		[Token(Token = "0x60002CE")]
		[Address(RVA = "0xD6F6A4", Offset = "0xD6F6A4", VA = "0xD6F6A4")]
		get
		{
			return default(Nolo_Transform);
		}
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xD6F600", Offset = "0xD6F600", VA = "0xD6F600")]
	public Nolo_Transform(NoloVR_Plugins.Nolo_Pose pose)
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xD6F670", Offset = "0xD6F670", VA = "0xD6F670")]
	public Nolo_Transform(UnityEngine.Vector3 pos, Quaternion rot, UnityEngine.Vector3 vecVelocity, UnityEngine.Vector3 vecAngularVelocity)
	{
	}
}
[Token(Token = "0x20000B1")]
public class NOLO_Events
{
	[Token(Token = "0x20000B2")]
	public enum EventsType
	{
		[Token(Token = "0x400028A")]
		TrackingOutofRange,
		[Token(Token = "0x400028B")]
		TrackingInRange,
		[Token(Token = "0x400028C")]
		TurnAround
	}

	[Token(Token = "0x20000B3")]
	public delegate void Handler(params object[] args);

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Hashtable listeners;

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xD6F79C", Offset = "0xD6F79C", VA = "0xD6F79C")]
	public static void Listen(EventsType eventMessage, Handler action)
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xD6F930", Offset = "0xD6F930", VA = "0xD6F930")]
	public static void Remove(EventsType eventMessage, Handler action)
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xD6D13C", Offset = "0xD6D13C", VA = "0xD6D13C")]
	public static void Send(EventsType eventMessage, params object[] args)
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xD6FA8C", Offset = "0xD6FA8C", VA = "0xD6FA8C")]
	public NOLO_Events()
	{
	}
}
[Token(Token = "0x20000B4")]
public class NoloVR_Utils
{
	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float angleAdjustmentRate;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool needRecenter;

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xD6E0D4", Offset = "0xD6E0D4", VA = "0xD6E0D4")]
	public static Quaternion GetRecenterRot(Quaternion rot, float presetyaw, float setyaw)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xD6FC4C", Offset = "0xD6FC4C", VA = "0xD6FC4C")]
	public NoloVR_Utils()
	{
	}
}
[Token(Token = "0x20000B5")]
public class DebugUIBuilder : MonoBehaviour
{
	[Token(Token = "0x20000B6")]
	public delegate void OnClick();

	[Token(Token = "0x20000B7")]
	public delegate void OnToggleValueChange(Toggle t);

	[Token(Token = "0x20000B8")]
	public delegate void OnSlider(float f);

	[Token(Token = "0x20000B9")]
	public delegate bool ActiveUpdate();

	[Token(Token = "0x400028F")]
	public const int DEBUG_PANE_CENTER = 0;

	[Token(Token = "0x4000290")]
	public const int DEBUG_PANE_RIGHT = 1;

	[Token(Token = "0x4000291")]
	public const int DEBUG_PANE_LEFT = 2;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform buttonPrefab;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform[] additionalButtonPrefab;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RectTransform labelPrefab;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private RectTransform sliderPrefab;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private RectTransform dividerPrefab;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private RectTransform togglePrefab;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RectTransform radioPrefab;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject uiHelpersToInstantiate;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform[] targetContentPanels;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool[] reEnable;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private List<GameObject> toEnable;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private List<GameObject> toDisable;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugUIBuilder instance;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float elementSpacing;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float marginH;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float marginV;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private UnityEngine.Vector2[] insertPositions;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<RectTransform>[] insertedElements;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private UnityEngine.Vector3 menuOffset;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private OVRCameraRig rig;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Dictionary<string, ToggleGroup> radioGroups;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private LaserPointer lp;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private LineRenderer lr;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public LaserPointer.LaserBeamBehavior laserBeamBehavior;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public bool isHorizontal;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
	public bool usePanelCentricRelayout;

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0xD6FCA8", Offset = "0xD6FCA8", VA = "0xD6FCA8")]
	public void Awake()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xD7019C", Offset = "0xD7019C", VA = "0xD7019C")]
	public void Show()
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0xD70504", Offset = "0xD70504", VA = "0xD70504")]
	public void Hide()
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xD70680", Offset = "0xD70680", VA = "0xD70680")]
	private void StackedRelayout()
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0xD70898", Offset = "0xD70898", VA = "0xD70898")]
	private void PanelCentricRelayout()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xD704F4", Offset = "0xD704F4", VA = "0xD704F4")]
	private void Relayout()
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xD70B8C", Offset = "0xD70B8C", VA = "0xD70B8C")]
	private void AddRect(RectTransform r, int targetCanvas)
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xD70E90", Offset = "0xD70E90", VA = "0xD70E90")]
	public RectTransform AddButton(string label, [Optional] OnClick handler, int buttonIndex = -1, int targetCanvas = 0, bool highResolutionText = false)
	{
		return null;
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xD71228", Offset = "0xD71228", VA = "0xD71228")]
	public RectTransform AddLabel(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0xD71320", Offset = "0xD71320", VA = "0xD71320")]
	public RectTransform AddSlider(string label, float min, float max, OnSlider onValueChanged, bool wholeNumbersOnly = false, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0xD714E4", Offset = "0xD714E4", VA = "0xD714E4")]
	public RectTransform AddDivider(int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xD7157C", Offset = "0xD7157C", VA = "0xD7157C")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xD71738", Offset = "0xD71738", VA = "0xD71738")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, bool defaultValue, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0xD71914", Offset = "0xD71914", VA = "0xD71914")]
	public RectTransform AddRadio(string label, string group, OnToggleValueChange handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0xD71BF0", Offset = "0xD71BF0", VA = "0xD71BF0")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0xD71CE0", Offset = "0xD71CE0", VA = "0xD71CE0")]
	public void ToggleLaserPointer(bool isOn)
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0xD71D74", Offset = "0xD71D74", VA = "0xD71D74")]
	public DebugUIBuilder()
	{
	}
}
[Token(Token = "0x20000BF")]
public class HandedInputSelector : MonoBehaviour
{
	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRCameraRig m_CameraRig;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRInputModule m_InputModule;

	[Token(Token = "0x6000306")]
	[Address(RVA = "0xD72310", Offset = "0xD72310", VA = "0xD72310")]
	private void Start()
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0xD723A0", Offset = "0xD723A0", VA = "0xD723A0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0xD7243C", Offset = "0xD7243C", VA = "0xD7243C")]
	private void SetActiveController(OVRInput.Controller c)
	{
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0xD72474", Offset = "0xD72474", VA = "0xD72474")]
	public HandedInputSelector()
	{
	}
}
[Token(Token = "0x20000C0")]
public class LaserPointer : OVRCursor
{
	[Token(Token = "0x20000C1")]
	public enum LaserBeamBehavior
	{
		[Token(Token = "0x40002C1")]
		On,
		[Token(Token = "0x40002C2")]
		Off,
		[Token(Token = "0x40002C3")]
		OnWhenHitTarget
	}

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cursorVisual;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxLength;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private LaserBeamBehavior _laserBeamBehavior;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_restoreOnInputAcquired;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private UnityEngine.Vector3 _startPoint;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.Vector3 _forward;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private UnityEngine.Vector3 _endPoint;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _hitTarget;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x17000038")]
	public LaserBeamBehavior laserBeamBehavior
	{
		[Token(Token = "0x600030B")]
		[Address(RVA = "0xD7247C", Offset = "0xD7247C", VA = "0xD7247C")]
		get
		{
			return default(LaserBeamBehavior);
		}
		[Token(Token = "0x600030A")]
		[Address(RVA = "0xD7015C", Offset = "0xD7015C", VA = "0xD7015C")]
		set
		{
		}
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0xD72484", Offset = "0xD72484", VA = "0xD72484")]
	private void Awake()
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0xD724D4", Offset = "0xD724D4", VA = "0xD724D4")]
	private void Start()
	{
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0xD7260C", Offset = "0xD7260C", VA = "0xD7260C", Slot = "5")]
	public override void SetCursorStartDest(UnityEngine.Vector3 start, UnityEngine.Vector3 dest, UnityEngine.Vector3 normal)
	{
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xD72628", Offset = "0xD72628", VA = "0xD72628", Slot = "4")]
	public override void SetCursorRay(Transform t)
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xD72678", Offset = "0xD72678", VA = "0xD72678")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xD72818", Offset = "0xD72818", VA = "0xD72818")]
	private void UpdateLaserBeam(UnityEngine.Vector3 start, UnityEngine.Vector3 end)
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xD72928", Offset = "0xD72928", VA = "0xD72928")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xD729AC", Offset = "0xD729AC", VA = "0xD729AC")]
	public void OnInputFocusLost()
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xD72A6C", Offset = "0xD72A6C", VA = "0xD72A6C")]
	public void OnInputFocusAcquired()
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xD72B14", Offset = "0xD72B14", VA = "0xD72B14")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0xD72C00", Offset = "0xD72C00", VA = "0xD72C00")]
	public LaserPointer()
	{
	}
}
[Token(Token = "0x20000C2")]
public class CharacterCameraConstraint : MonoBehaviour
{
	[Token(Token = "0x40002C4")]
	private const float FADE_RAY_LENGTH = 0.25f;

	[Token(Token = "0x40002C5")]
	private const float FADE_OVERLAP_MAXIMUM = 0.1f;

	[Token(Token = "0x40002C6")]
	private const float FADE_AMOUNT_MAXIMUM = 1f;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("This should be a reference to the OVRCameraRig that is usually a child of the PlayerController.")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Collision layers to be used for the purposes of fading out the screen when the HMD is inside world geometry and adjusting the capsule height.")]
	public LayerMask CollideLayers;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Offset is added to camera's real world height, effectively treating it as though the player was taller/standing higher.")]
	public float HeightOffset;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Minimum height that the character capsule can shrink to.  To disable, set to capsule's height.")]
	public float MinimumHeight;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("Maximum height that the character capsule can grow to.  To disable, set to capsule's height.")]
	public float MaximumHeight;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CapsuleCollider _character;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SimpleCapsuleWithStickMovement _simplePlayerController;

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xD72C10", Offset = "0xD72C10", VA = "0xD72C10")]
	private CharacterCameraConstraint()
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0xD72C18", Offset = "0xD72C18", VA = "0xD72C18")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0xD72C94", Offset = "0xD72C94", VA = "0xD72C94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0xD72DB8", Offset = "0xD72DB8", VA = "0xD72DB8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0xD72EDC", Offset = "0xD72EDC", VA = "0xD72EDC")]
	private void CameraUpdate()
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0xD731FC", Offset = "0xD731FC", VA = "0xD731FC")]
	private bool CheckCameraOverlapped()
	{
		return default(bool);
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0xD7345C", Offset = "0xD7345C", VA = "0xD7345C")]
	private bool CheckCameraNearClipping(out float result)
	{
		return default(bool);
	}
}
[Token(Token = "0x20000C3")]
public class LocomotionController : MonoBehaviour
{
	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CapsuleCollider CharacterController;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimpleCapsuleWithStickMovement PlayerController;

	[Token(Token = "0x600031E")]
	[Address(RVA = "0xD73BB4", Offset = "0xD73BB4", VA = "0xD73BB4")]
	private void Start()
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0xD73C4C", Offset = "0xD73C4C", VA = "0xD73C4C")]
	public LocomotionController()
	{
	}
}
[Token(Token = "0x20000C4")]
public class LocomotionTeleport : MonoBehaviour
{
	[Token(Token = "0x20000C5")]
	public enum States
	{
		[Token(Token = "0x40002F4")]
		Ready,
		[Token(Token = "0x40002F5")]
		Aim,
		[Token(Token = "0x40002F6")]
		CancelAim,
		[Token(Token = "0x40002F7")]
		PreTeleport,
		[Token(Token = "0x40002F8")]
		CancelTeleport,
		[Token(Token = "0x40002F9")]
		Teleporting,
		[Token(Token = "0x40002FA")]
		PostTeleport
	}

	[Token(Token = "0x20000C6")]
	public enum TeleportIntentions
	{
		[Token(Token = "0x40002FC")]
		None,
		[Token(Token = "0x40002FD")]
		Aim,
		[Token(Token = "0x40002FE")]
		PreTeleport,
		[Token(Token = "0x40002FF")]
		Teleport
	}

	[Token(Token = "0x20000C7")]
	public enum AimCollisionTypes
	{
		[Token(Token = "0x4000301")]
		Point,
		[Token(Token = "0x4000302")]
		Sphere,
		[Token(Token = "0x4000303")]
		Capsule
	}

	[Token(Token = "0x20000C8")]
	public class AimData
	{
		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit TargetHitInfo;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool TargetValid;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEngine.Vector3? Destination;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float Radius;

		[Token(Token = "0x1700003C")]
		public List<UnityEngine.Vector3> Points
		{
			[Token(Token = "0x6000355")]
			[Address(RVA = "0xD758FC", Offset = "0xD758FC", VA = "0xD758FC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000356")]
			[Address(RVA = "0xD75904", Offset = "0xD75904", VA = "0xD75904")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000354")]
		[Address(RVA = "0xD7587C", Offset = "0xD7587C", VA = "0xD7587C")]
		public AimData()
		{
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0xD7590C", Offset = "0xD7590C", VA = "0xD7590C")]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x20000C9")]
	[CompilerGenerated]
	private sealed class <ReadyStateCoroutine>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700003D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600035B")]
			[Address(RVA = "0xD75A54", Offset = "0xD75A54", VA = "0xD75A54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600035D")]
			[Address(RVA = "0xD75A9C", Offset = "0xD75A9C", VA = "0xD75A9C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000358")]
		[Address(RVA = "0xD74618", Offset = "0xD74618", VA = "0xD74618")]
		[DebuggerHidden]
		public <ReadyStateCoroutine>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0xD75964", Offset = "0xD75964", VA = "0xD75964", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600035A")]
		[Address(RVA = "0xD75968", Offset = "0xD75968", VA = "0xD75968", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600035C")]
		[Address(RVA = "0xD75A5C", Offset = "0xD75A5C", VA = "0xD75A5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CA")]
	[CompilerGenerated]
	private sealed class <AimStateCoroutine>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700003F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000361")]
			[Address(RVA = "0xD75BE8", Offset = "0xD75BE8", VA = "0xD75BE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000040")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000363")]
			[Address(RVA = "0xD75C30", Offset = "0xD75C30", VA = "0xD75C30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0xD74A94", Offset = "0xD74A94", VA = "0xD74A94")]
		[DebuggerHidden]
		public <AimStateCoroutine>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0xD75AA4", Offset = "0xD75AA4", VA = "0xD75AA4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000360")]
		[Address(RVA = "0xD75AA8", Offset = "0xD75AA8", VA = "0xD75AA8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0xD75BF0", Offset = "0xD75BF0", VA = "0xD75BF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CB")]
	[CompilerGenerated]
	private sealed class <CancelAimStateCoroutine>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000041")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000367")]
			[Address(RVA = "0xD75CDC", Offset = "0xD75CDC", VA = "0xD75CDC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000042")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000369")]
			[Address(RVA = "0xD75D24", Offset = "0xD75D24", VA = "0xD75D24", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000364")]
		[Address(RVA = "0xD74C5C", Offset = "0xD74C5C", VA = "0xD74C5C")]
		[DebuggerHidden]
		public <CancelAimStateCoroutine>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x6000365")]
		[Address(RVA = "0xD75C38", Offset = "0xD75C38", VA = "0xD75C38", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000366")]
		[Address(RVA = "0xD75C3C", Offset = "0xD75C3C", VA = "0xD75C3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000368")]
		[Address(RVA = "0xD75CE4", Offset = "0xD75CE4", VA = "0xD75CE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CC")]
	[CompilerGenerated]
	private sealed class <PreTeleportStateCoroutine>d__72 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000043")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600036D")]
			[Address(RVA = "0xD75E08", Offset = "0xD75E08", VA = "0xD75E08", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000044")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600036F")]
			[Address(RVA = "0xD75E50", Offset = "0xD75E50", VA = "0xD75E50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600036A")]
		[Address(RVA = "0xD74E24", Offset = "0xD74E24", VA = "0xD74E24")]
		[DebuggerHidden]
		public <PreTeleportStateCoroutine>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x600036B")]
		[Address(RVA = "0xD75D2C", Offset = "0xD75D2C", VA = "0xD75D2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600036C")]
		[Address(RVA = "0xD75D30", Offset = "0xD75D30", VA = "0xD75D30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0xD75E10", Offset = "0xD75E10", VA = "0xD75E10", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CD")]
	[CompilerGenerated]
	private sealed class <CancelTeleportStateCoroutine>d__76 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000045")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000373")]
			[Address(RVA = "0xD75EFC", Offset = "0xD75EFC", VA = "0xD75EFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000046")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000375")]
			[Address(RVA = "0xD75F44", Offset = "0xD75F44", VA = "0xD75F44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0xD74FEC", Offset = "0xD74FEC", VA = "0xD74FEC")]
		[DebuggerHidden]
		public <CancelTeleportStateCoroutine>d__76(int <>1__state)
		{
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0xD75E58", Offset = "0xD75E58", VA = "0xD75E58", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0xD75E5C", Offset = "0xD75E5C", VA = "0xD75E5C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0xD75F04", Offset = "0xD75F04", VA = "0xD75F04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CE")]
	[CompilerGenerated]
	private sealed class <TeleportingStateCoroutine>d__80 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000047")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000379")]
			[Address(RVA = "0xD76024", Offset = "0xD76024", VA = "0xD76024", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000048")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600037B")]
			[Address(RVA = "0xD7606C", Offset = "0xD7606C", VA = "0xD7606C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0xD751B4", Offset = "0xD751B4", VA = "0xD751B4")]
		[DebuggerHidden]
		public <TeleportingStateCoroutine>d__80(int <>1__state)
		{
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0xD75F4C", Offset = "0xD75F4C", VA = "0xD75F4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0xD75F50", Offset = "0xD75F50", VA = "0xD75F50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0xD7602C", Offset = "0xD7602C", VA = "0xD7602C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CF")]
	[CompilerGenerated]
	private sealed class <PostTeleportStateCoroutine>d__84 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000049")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600037F")]
			[Address(RVA = "0xD7615C", Offset = "0xD7615C", VA = "0xD7615C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000381")]
			[Address(RVA = "0xD761A4", Offset = "0xD761A4", VA = "0xD761A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600037C")]
		[Address(RVA = "0xD7537C", Offset = "0xD7537C", VA = "0xD7537C")]
		[DebuggerHidden]
		public <PostTeleportStateCoroutine>d__84(int <>1__state)
		{
		}

		[Token(Token = "0x600037D")]
		[Address(RVA = "0xD76074", Offset = "0xD76074", VA = "0xD76074", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600037E")]
		[Address(RVA = "0xD76078", Offset = "0xD76078", VA = "0xD76078", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000380")]
		[Address(RVA = "0xD76164", Offset = "0xD76164", VA = "0xD76164", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Allow linear movement prior to the teleport system being activated.")]
	public bool EnableMovementDuringReady;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[Tooltip("Allow linear movement while the teleport system is in the process of aiming for a teleport target.")]
	public bool EnableMovementDuringAim;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[Tooltip("Allow linear movement while the teleport system is in the process of configuring the landing orientation.")]
	public bool EnableMovementDuringPreTeleport;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[Tooltip("Allow linear movement after the teleport has occurred but before the system has returned to the ready state.")]
	public bool EnableMovementDuringPostTeleport;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Allow rotation prior to the teleport system being activated.")]
	public bool EnableRotationDuringReady;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[Tooltip("Allow rotation while the teleport system is in the process of aiming for a teleport target.")]
	public bool EnableRotationDuringAim;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[Tooltip("Allow rotation while the teleport system is in the process of configuring the landing orientation.")]
	public bool EnableRotationDuringPreTeleport;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[Tooltip("Allow rotation after the teleport has occurred but before the system has returned to the ready state.")]
	public bool EnableRotationDuringPostTeleport;

	[NonSerialized]
	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TeleportAimHandler AimHandler;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("This prefab will be instantiated as needed and updated to match the current aim target.")]
	public TeleportDestination TeleportDestinationPrefab;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("TeleportDestinationPrefab will be instantiated into this layer.")]
	public int TeleportDestinationLayer;

	[NonSerialized]
	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TeleportInputHandler InputHandler;

	[NonSerialized]
	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TeleportIntentions CurrentIntention;

	[NonSerialized]
	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool IsPreTeleportRequested;

	[NonSerialized]
	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool IsTransitioning;

	[NonSerialized]
	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	public bool IsPostTeleportRequested;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TeleportDestination _teleportDestination;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("When aiming at possible destinations, the aim collision type determines which shape to use for collision tests.")]
	public AimCollisionTypes AimCollisionType;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Tooltip("Use the character collision radius/height/skinwidth for sphere/capsule collision tests.")]
	public bool UseCharacterCollisionData;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("Radius of the sphere or capsule used for collision testing when aiming to possible teleport destinations. Ignored if UseCharacterCollisionData is true.")]
	public float AimCollisionRadius;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[Tooltip("Height of the capsule used for collision testing when aiming to possible teleport destinations. Ignored if UseCharacterCollisionData is true.")]
	public float AimCollisionHeight;

	[Token(Token = "0x17000039")]
	public States CurrentState
	{
		[Token(Token = "0x6000322")]
		[Address(RVA = "0xD73C9C", Offset = "0xD73C9C", VA = "0xD73C9C")]
		[CompilerGenerated]
		get
		{
			return default(States);
		}
		[Token(Token = "0x6000323")]
		[Address(RVA = "0xD73CA4", Offset = "0xD73CA4", VA = "0xD73CA4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700003A")]
	public Quaternion DestinationRotation
	{
		[Token(Token = "0x6000327")]
		[Address(RVA = "0xD73E74", Offset = "0xD73E74", VA = "0xD73E74")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x1700003B")]
	public LocomotionController LocomotionController
	{
		[Token(Token = "0x6000328")]
		[Address(RVA = "0xD73E98", Offset = "0xD73E98", VA = "0xD73E98")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000329")]
		[Address(RVA = "0xD73EA0", Offset = "0xD73EA0", VA = "0xD73EA0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event Action<bool, UnityEngine.Vector3?, Quaternion?, Quaternion?> UpdateTeleportDestination
	{
		[Token(Token = "0x6000324")]
		[Address(RVA = "0xD73CAC", Offset = "0xD73CAC", VA = "0xD73CAC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000325")]
		[Address(RVA = "0xD73D5C", Offset = "0xD73D5C", VA = "0xD73D5C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event Action EnterStateReady
	{
		[Token(Token = "0x6000333")]
		[Address(RVA = "0xD744E0", Offset = "0xD744E0", VA = "0xD744E0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000334")]
		[Address(RVA = "0xD7457C", Offset = "0xD7457C", VA = "0xD7457C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action EnterStateAim
	{
		[Token(Token = "0x6000336")]
		[Address(RVA = "0xD74640", Offset = "0xD74640", VA = "0xD74640")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000337")]
		[Address(RVA = "0xD746DC", Offset = "0xD746DC", VA = "0xD746DC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event Action<AimData> UpdateAimData
	{
		[Token(Token = "0x6000338")]
		[Address(RVA = "0xD74778", Offset = "0xD74778", VA = "0xD74778")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000339")]
		[Address(RVA = "0xD74828", Offset = "0xD74828", VA = "0xD74828")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event Action ExitStateAim
	{
		[Token(Token = "0x600033B")]
		[Address(RVA = "0xD748F4", Offset = "0xD748F4", VA = "0xD748F4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600033C")]
		[Address(RVA = "0xD74990", Offset = "0xD74990", VA = "0xD74990")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event Action EnterStateCancelAim
	{
		[Token(Token = "0x600033E")]
		[Address(RVA = "0xD74ABC", Offset = "0xD74ABC", VA = "0xD74ABC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600033F")]
		[Address(RVA = "0xD74B58", Offset = "0xD74B58", VA = "0xD74B58")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event Action EnterStatePreTeleport
	{
		[Token(Token = "0x6000341")]
		[Address(RVA = "0xD74C84", Offset = "0xD74C84", VA = "0xD74C84")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000342")]
		[Address(RVA = "0xD74D20", Offset = "0xD74D20", VA = "0xD74D20")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public event Action EnterStateCancelTeleport
	{
		[Token(Token = "0x6000344")]
		[Address(RVA = "0xD74E4C", Offset = "0xD74E4C", VA = "0xD74E4C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000345")]
		[Address(RVA = "0xD74EE8", Offset = "0xD74EE8", VA = "0xD74EE8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event Action EnterStateTeleporting
	{
		[Token(Token = "0x6000347")]
		[Address(RVA = "0xD75014", Offset = "0xD75014", VA = "0xD75014")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000348")]
		[Address(RVA = "0xD750B0", Offset = "0xD750B0", VA = "0xD750B0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000C")]
	public event Action EnterStatePostTeleport
	{
		[Token(Token = "0x600034A")]
		[Address(RVA = "0xD751DC", Offset = "0xD751DC", VA = "0xD751DC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600034B")]
		[Address(RVA = "0xD75278", Offset = "0xD75278", VA = "0xD75278")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public event Action<Transform, UnityEngine.Vector3, Quaternion> Teleported
	{
		[Token(Token = "0x600034D")]
		[Address(RVA = "0xD753A4", Offset = "0xD753A4", VA = "0xD753A4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600034E")]
		[Address(RVA = "0xD75454", Offset = "0xD75454", VA = "0xD75454")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xD73C54", Offset = "0xD73C54", VA = "0xD73C54")]
	public void EnableMovement(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xD73C78", Offset = "0xD73C78", VA = "0xD73C78")]
	public void EnableRotation(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0xD73E0C", Offset = "0xD73E0C", VA = "0xD73E0C")]
	public void OnUpdateTeleportDestination(bool isValidDestination, UnityEngine.Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0xD73EA8", Offset = "0xD73EA8", VA = "0xD73EA8")]
	public bool AimCollisionTest(UnityEngine.Vector3 start, UnityEngine.Vector3 end, LayerMask aimCollisionLayerMask, out RaycastHit hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0xD74170", Offset = "0xD74170", VA = "0xD74170")]
	[Conditional("DEBUG_TELEPORT_STATES")]
	protected void LogState(string msg)
	{
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0xD74218", Offset = "0xD74218", VA = "0xD74218")]
	protected void CreateNewTeleportDestination()
	{
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0xD742DC", Offset = "0xD742DC", VA = "0xD742DC")]
	private void DeactivateDestination()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0xD74318", Offset = "0xD74318", VA = "0xD74318")]
	public void RecycleTeleportDestination(TeleportDestination oldDestination)
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0xD743C8", Offset = "0xD743C8", VA = "0xD743C8")]
	private void EnableMotion(bool enableLinear, bool enableRotation)
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0xD743F8", Offset = "0xD743F8", VA = "0xD743F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0xD7444C", Offset = "0xD7444C", VA = "0xD7444C", Slot = "4")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0xD744D8", Offset = "0xD744D8", VA = "0xD744D8", Slot = "5")]
	public virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0xD74470", Offset = "0xD74470", VA = "0xD74470")]
	[IteratorStateMachine(typeof(<ReadyStateCoroutine>d__52))]
	protected IEnumerator ReadyStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0xD748D8", Offset = "0xD748D8", VA = "0xD748D8")]
	public void OnUpdateAimData(AimData aimData)
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0xD74A2C", Offset = "0xD74A2C", VA = "0xD74A2C")]
	[IteratorStateMachine(typeof(<AimStateCoroutine>d__64))]
	protected IEnumerator AimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0xD74BF4", Offset = "0xD74BF4", VA = "0xD74BF4")]
	[IteratorStateMachine(typeof(<CancelAimStateCoroutine>d__68))]
	protected IEnumerator CancelAimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0xD74DBC", Offset = "0xD74DBC", VA = "0xD74DBC")]
	[IteratorStateMachine(typeof(<PreTeleportStateCoroutine>d__72))]
	protected IEnumerator PreTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0xD74F84", Offset = "0xD74F84", VA = "0xD74F84")]
	[IteratorStateMachine(typeof(<CancelTeleportStateCoroutine>d__76))]
	protected IEnumerator CancelTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0xD7514C", Offset = "0xD7514C", VA = "0xD7514C")]
	[IteratorStateMachine(typeof(<TeleportingStateCoroutine>d__80))]
	protected IEnumerator TeleportingStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0xD75314", Offset = "0xD75314", VA = "0xD75314")]
	[IteratorStateMachine(typeof(<PostTeleportStateCoroutine>d__84))]
	protected IEnumerator PostTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0xD75504", Offset = "0xD75504", VA = "0xD75504")]
	public void DoTeleport()
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0xD75618", Offset = "0xD75618", VA = "0xD75618")]
	public UnityEngine.Vector3 GetCharacterPosition()
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0xD75648", Offset = "0xD75648", VA = "0xD75648")]
	public Quaternion GetHeadRotationY()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0xD75784", Offset = "0xD75784", VA = "0xD75784")]
	public void DoWarp(UnityEngine.Vector3 startPos, float positionPercent)
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0xD7586C", Offset = "0xD7586C", VA = "0xD7586C")]
	public LocomotionTeleport()
	{
	}
}
[Token(Token = "0x20000D0")]
public class SimpleCapsuleWithStickMovement : MonoBehaviour
{
	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool EnableLinearMovement;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool EnableRotation;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool HMDRotatesPlayer;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool RotationEitherThumbstick;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RotationAngle;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Speed;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool ReadyToSnapTurn;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody _rigidbody;

	[Token(Token = "0x1400000E")]
	public event Action CameraUpdated
	{
		[Token(Token = "0x6000382")]
		[Address(RVA = "0xD72D1C", Offset = "0xD72D1C", VA = "0xD72D1C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000383")]
		[Address(RVA = "0xD72E40", Offset = "0xD72E40", VA = "0xD72E40")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000F")]
	public event Action PreCharacterMove
	{
		[Token(Token = "0x6000384")]
		[Address(RVA = "0xD761AC", Offset = "0xD761AC", VA = "0xD761AC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000385")]
		[Address(RVA = "0xD76248", Offset = "0xD76248", VA = "0xD76248")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0xD762E4", Offset = "0xD762E4", VA = "0xD762E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0xD7639C", Offset = "0xD7639C", VA = "0xD7639C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0xD763A0", Offset = "0xD763A0", VA = "0xD763A0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0xD76414", Offset = "0xD76414", VA = "0xD76414")]
	private void RotatePlayerToHMD()
	{
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0xD76538", Offset = "0xD76538", VA = "0xD76538")]
	private void StickMovement()
	{
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xD767B0", Offset = "0xD767B0", VA = "0xD767B0")]
	private void SnapTurn()
	{
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0xD769D0", Offset = "0xD769D0", VA = "0xD769D0")]
	public SimpleCapsuleWithStickMovement()
	{
	}
}
[Token(Token = "0x20000D1")]
public abstract class TeleportAimHandler : TeleportSupport
{
	[Token(Token = "0x600038D")]
	[Address(RVA = "0xD769F0", Offset = "0xD769F0", VA = "0xD769F0", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0xD76A70", Offset = "0xD76A70", VA = "0xD76A70", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x600038F")]
	public abstract void GetPoints(List<UnityEngine.Vector3> points);

	[Token(Token = "0x6000390")]
	[Address(RVA = "0xD76B24", Offset = "0xD76B24", VA = "0xD76B24")]
	protected TeleportAimHandler()
	{
	}
}
[Token(Token = "0x20000D2")]
public class TeleportAimHandlerLaser : TeleportAimHandler
{
	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Maximum range for aiming.")]
	public float Range;

	[Token(Token = "0x6000391")]
	[Address(RVA = "0xD76B34", Offset = "0xD76B34", VA = "0xD76B34", Slot = "8")]
	public override void GetPoints(List<UnityEngine.Vector3> points)
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0xD76CC4", Offset = "0xD76CC4", VA = "0xD76CC4")]
	public TeleportAimHandlerLaser()
	{
	}
}
[Token(Token = "0x20000D3")]
public class TeleportAimHandlerParabolic : TeleportAimHandler
{
	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Maximum range for aiming.")]
	public float Range;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The MinimumElevation is relative to the AimPosition.")]
	public float MinimumElevation;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The Gravity is used in conjunction with AimVelocity and the aim direction to simulate a projectile.")]
	public float Gravity;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The AimVelocity is the initial speed of the faked projectile.")]
	[Range(0.001f, 50f)]
	public float AimVelocity;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0.001f, 1f)]
	[Tooltip("The AimStep is the how much to subdivide the iteration.")]
	public float AimStep;

	[Token(Token = "0x6000393")]
	[Address(RVA = "0xD76CD4", Offset = "0xD76CD4", VA = "0xD76CD4", Slot = "8")]
	public override void GetPoints(List<UnityEngine.Vector3> points)
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xD76EA8", Offset = "0xD76EA8", VA = "0xD76EA8")]
	public TeleportAimHandlerParabolic()
	{
	}
}
[Token(Token = "0x20000D4")]
public class TeleportAimVisualLaser : TeleportSupport
{
	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("This prefab will be instantiated when the aim visual is awakened, and will be set active when the user is aiming, and deactivated when they are done aiming.")]
	public LineRenderer LaserPrefab;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _enterAimStateAction;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Action _exitAimStateAction;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LineRenderer _lineRenderer;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3[] _linePoints;

	[Token(Token = "0x6000395")]
	[Address(RVA = "0xD76EBC", Offset = "0xD76EBC", VA = "0xD76EBC")]
	public TeleportAimVisualLaser()
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0xD76FC8", Offset = "0xD76FC8", VA = "0xD76FC8")]
	private void EnterAimState()
	{
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0xD76FF4", Offset = "0xD76FF4", VA = "0xD76FF4")]
	private void ExitAimState()
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0xD77020", Offset = "0xD77020", VA = "0xD77020")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0xD770BC", Offset = "0xD770BC", VA = "0xD770BC", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xD77110", Offset = "0xD77110", VA = "0xD77110", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0xD77160", Offset = "0xD77160", VA = "0xD77160")]
	private void UpdateAimData(LocomotionTeleport.AimData obj)
	{
	}
}
[Token(Token = "0x20000D5")]
public class TeleportDestination : MonoBehaviour
{
	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("If the target handler provides a target position, this transform will be moved to that position and it's game object enabled. A target position being provided does not mean the position is valid, only that the aim handler found something to test as a destination.")]
	public Transform PositionIndicator;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("This transform will be rotated to match the rotation of the aiming target. Simple teleport destinations should assign this to the object containing this component. More complex teleport destinations might assign this to a sub-object that is used to indicate the landing orientation independently from the rest of the destination indicator, such as when world space effects are required. This will typically be a child of the PositionIndicator.")]
	public Transform OrientationIndicator;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("After the player teleports, the character controller will have it's rotation set to this value. It is different from the OrientationIndicator transform.rotation in order to support both head-relative and forward-facing teleport modes (See TeleportOrientationHandlerThumbstick.cs).")]
	public Quaternion LandingRotation;

	[NonSerialized]
	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LocomotionTeleport LocomotionTeleport;

	[NonSerialized]
	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LocomotionTeleport.States TeleportState;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly Action<bool, UnityEngine.Vector3?, Quaternion?, Quaternion?> _updateTeleportDestinationAction;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _eventsActive;

	[Token(Token = "0x1700004B")]
	public bool IsValidDestination
	{
		[Token(Token = "0x600039C")]
		[Address(RVA = "0xD7725C", Offset = "0xD7725C", VA = "0xD7725C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600039D")]
		[Address(RVA = "0xD77264", Offset = "0xD77264", VA = "0xD77264")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000010")]
	public event Action<TeleportDestination> Deactivated
	{
		[Token(Token = "0x60003A2")]
		[Address(RVA = "0xD773E4", Offset = "0xD773E4", VA = "0xD773E4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003A3")]
		[Address(RVA = "0xD77494", Offset = "0xD77494", VA = "0xD77494")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0xD77270", Offset = "0xD77270", VA = "0xD77270")]
	private TeleportDestination()
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0xD772EC", Offset = "0xD772EC", VA = "0xD772EC")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0xD773B0", Offset = "0xD773B0", VA = "0xD773B0")]
	private void TryDisableEventHandlers()
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0xD773E0", Offset = "0xD773E0", VA = "0xD773E0")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0xD742F4", Offset = "0xD742F4", VA = "0xD742F4")]
	public void OnDeactivated()
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xD77544", Offset = "0xD77544", VA = "0xD77544")]
	public void Recycle()
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xD77560", Offset = "0xD77560", VA = "0xD77560", Slot = "4")]
	public virtual void UpdateTeleportDestination(bool isValidDestination, UnityEngine.Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}
}
[Token(Token = "0x20000D6")]
public abstract class TeleportInputHandler : TeleportSupport
{
	[Token(Token = "0x20000D7")]
	[CompilerGenerated]
	private sealed class <TeleportReadyCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x1700004C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003B3")]
			[Address(RVA = "0xD77ADC", Offset = "0xD77ADC", VA = "0xD77ADC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003B5")]
			[Address(RVA = "0xD77B24", Offset = "0xD77B24", VA = "0xD77B24", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0xD77960", Offset = "0xD77960", VA = "0xD77960")]
		[DebuggerHidden]
		public <TeleportReadyCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0xD77A58", Offset = "0xD77A58", VA = "0xD77A58", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0xD77A5C", Offset = "0xD77A5C", VA = "0xD77A5C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0xD77AE4", Offset = "0xD77AE4", VA = "0xD77AE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000D8")]
	[CompilerGenerated]
	private sealed class <TeleportAimCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x1700004E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003B9")]
			[Address(RVA = "0xD77BBC", Offset = "0xD77BBC", VA = "0xD77BBC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003BB")]
			[Address(RVA = "0xD77C04", Offset = "0xD77C04", VA = "0xD77C04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0xD779F0", Offset = "0xD779F0", VA = "0xD779F0")]
		[DebuggerHidden]
		public <TeleportAimCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60003B7")]
		[Address(RVA = "0xD77B2C", Offset = "0xD77B2C", VA = "0xD77B2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003B8")]
		[Address(RVA = "0xD77B30", Offset = "0xD77B30", VA = "0xD77B30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003BA")]
		[Address(RVA = "0xD77BC4", Offset = "0xD77BC4", VA = "0xD77BC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _startReadyAction;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xD77754", Offset = "0xD77754", VA = "0xD77754")]
	protected TeleportInputHandler()
	{
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0xD77814", Offset = "0xD77814", VA = "0xD77814", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0xD77850", Offset = "0xD77850", VA = "0xD77850", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0xD778F8", Offset = "0xD778F8", VA = "0xD778F8")]
	[IteratorStateMachine(typeof(<TeleportReadyCoroutine>d__5))]
	private IEnumerator TeleportReadyCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0xD77988", Offset = "0xD77988", VA = "0xD77988")]
	[IteratorStateMachine(typeof(<TeleportAimCoroutine>d__6))]
	private IEnumerator TeleportAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60003AC")]
	public abstract LocomotionTeleport.TeleportIntentions GetIntention();

	[Token(Token = "0x60003AD")]
	public abstract void GetAimData(out Ray aimRay);
}
[Token(Token = "0x20000D9")]
public class TeleportInputHandlerHMD : TeleportInputHandler
{
	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The button used to begin aiming for a teleport.")]
	public OVRInput.RawButton AimButton;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("The button used to trigger the teleport after aiming. It can be the same button as the AimButton, however you cannot abort a teleport if it is.")]
	public OVRInput.RawButton TeleportButton;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("When true, the system will not use the PreTeleport intention which will allow a teleport to occur on a button downpress. When false, the button downpress will trigger the PreTeleport intention and the Teleport intention when the button is released.")]
	public bool FastTeleport;

	[Token(Token = "0x17000050")]
	public Transform Pointer
	{
		[Token(Token = "0x60003BC")]
		[Address(RVA = "0xD77C0C", Offset = "0xD77C0C", VA = "0xD77C0C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60003BD")]
		[Address(RVA = "0xD77C14", Offset = "0xD77C14", VA = "0xD77C14")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xD77C1C", Offset = "0xD77C1C", VA = "0xD77C1C", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xD77D48", Offset = "0xD77D48", VA = "0xD77D48", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xD77DFC", Offset = "0xD77DFC", VA = "0xD77DFC")]
	public TeleportInputHandlerHMD()
	{
	}
}
[Token(Token = "0x20000DA")]
public class TeleportInputHandlerTouch : TeleportInputHandlerHMD
{
	[Token(Token = "0x20000DB")]
	public enum InputModes
	{
		[Token(Token = "0x4000354")]
		CapacitiveButtonForAimAndTeleport,
		[Token(Token = "0x4000355")]
		SeparateButtonsForAimAndTeleport,
		[Token(Token = "0x4000356")]
		ThumbstickTeleport,
		[Token(Token = "0x4000357")]
		ThumbstickTeleportForwardBackOnly
	}

	[Token(Token = "0x20000DC")]
	public enum AimCapTouchButtons
	{
		[Token(Token = "0x4000359")]
		A,
		[Token(Token = "0x400035A")]
		B,
		[Token(Token = "0x400035B")]
		LeftTrigger,
		[Token(Token = "0x400035C")]
		LeftThumbstick,
		[Token(Token = "0x400035D")]
		RightTrigger,
		[Token(Token = "0x400035E")]
		RightThumbstick,
		[Token(Token = "0x400035F")]
		X,
		[Token(Token = "0x4000360")]
		Y
	}

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform LeftHand;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform RightHand;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("CapacitiveButtonForAimAndTeleport=Activate aiming via cap touch detection, press the same button to teleport.\nSeparateButtonsForAimAndTeleport=Use one button to begin aiming, and another to trigger the teleport.\nThumbstickTeleport=Push a thumbstick to begin aiming, release to teleport.")]
	public InputModes InputMode;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly OVRInput.RawButton[] _rawButtons;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly OVRInput.RawTouch[] _rawTouch;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("Select the controller to be used for aiming. Supports LTouch, RTouch, or Touch for either.")]
	public OVRInput.Controller AimingController;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private OVRInput.Controller InitiatingController;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("Select the button to use for triggering aim and teleport when InputMode==CapacitiveButtonForAimAndTeleport")]
	public AimCapTouchButtons CapacitiveAimAndTeleportButton;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[Tooltip("The thumbstick magnitude required to trigger aiming and teleports when InputMode==InputModes.ThumbstickTeleport")]
	public float ThumbstickTeleportThreshold;

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xD77E00", Offset = "0xD77E00", VA = "0xD77E00")]
	private void Start()
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xD77E04", Offset = "0xD77E04", VA = "0xD77E04", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xD78238", Offset = "0xD78238", VA = "0xD78238", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xD782F4", Offset = "0xD782F4", VA = "0xD782F4")]
	public TeleportInputHandlerTouch()
	{
	}
}
[Token(Token = "0x20000DD")]
public abstract class TeleportOrientationHandler : TeleportSupport
{
	[Token(Token = "0x20000DE")]
	public enum OrientationModes
	{
		[Token(Token = "0x4000365")]
		HeadRelative,
		[Token(Token = "0x4000366")]
		ForwardFacing
	}

	[Token(Token = "0x20000DF")]
	[CompilerGenerated]
	private sealed class <UpdateOrientationCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportOrientationHandler <>4__this;

		[Token(Token = "0x17000051")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003D1")]
			[Address(RVA = "0xD78760", Offset = "0xD78760", VA = "0xD78760", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000052")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003D3")]
			[Address(RVA = "0xD787A8", Offset = "0xD787A8", VA = "0xD787A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0xD7857C", Offset = "0xD7857C", VA = "0xD7857C")]
		[DebuggerHidden]
		public <UpdateOrientationCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0xD786BC", Offset = "0xD786BC", VA = "0xD786BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0xD786C0", Offset = "0xD786C0", VA = "0xD786C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0xD78768", Offset = "0xD78768", VA = "0xD78768", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _updateOrientationAction;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected LocomotionTeleport.AimData AimData;

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xD783CC", Offset = "0xD783CC", VA = "0xD783CC")]
	protected TeleportOrientationHandler()
	{
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xD784A0", Offset = "0xD784A0", VA = "0xD784A0")]
	private void UpdateAimData(LocomotionTeleport.AimData aimData)
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xD784A8", Offset = "0xD784A8", VA = "0xD784A8", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xD784E0", Offset = "0xD784E0", VA = "0xD784E0", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xD78514", Offset = "0xD78514", VA = "0xD78514")]
	[IteratorStateMachine(typeof(<UpdateOrientationCoroutine>d__7))]
	private IEnumerator UpdateOrientationCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60003CA")]
	protected abstract void InitializeTeleportDestination();

	[Token(Token = "0x60003CB")]
	protected abstract void UpdateTeleportDestination();

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xD785A4", Offset = "0xD785A4", VA = "0xD785A4")]
	protected Quaternion GetLandingOrientation(OrientationModes mode, Quaternion rotation)
	{
		return default(Quaternion);
	}
}
[Token(Token = "0x20000E0")]
public class TeleportOrientationHandler360 : TeleportOrientationHandler
{
	[Token(Token = "0x60003D4")]
	[Address(RVA = "0xD787B0", Offset = "0xD787B0", VA = "0xD787B0", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0xD787B4", Offset = "0xD787B4", VA = "0xD787B4", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0xD7885C", Offset = "0xD7885C", VA = "0xD7885C")]
	public TeleportOrientationHandler360()
	{
	}
}
[Token(Token = "0x20000E1")]
public class TeleportOrientationHandlerHMD : TeleportOrientationHandler
{
	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("HeadRelative=Character will orient to match the arrow. ForwardFacing=When user orients to match the arrow, they will be facing the sensors.")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Should the destination orientation be updated during the aim state in addition to the PreTeleport state?")]
	public bool UpdateOrientationDuringAim;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("How far from the destination must the HMD be pointing before using it for orientation")]
	public float AimDistanceThreshold;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Tooltip("How far from the destination must the HMD be pointing before rejecting the teleport")]
	public float AimDistanceMaxRange;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion _initialRotation;

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xD78860", Offset = "0xD78860", VA = "0xD78860", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0xD788B0", Offset = "0xD788B0", VA = "0xD788B0", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xD78D74", Offset = "0xD78D74", VA = "0xD78D74")]
	public TeleportOrientationHandlerHMD()
	{
	}
}
[Token(Token = "0x20000E2")]
public class TeleportOrientationHandlerThumbstick : TeleportOrientationHandler
{
	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("HeadRelative=Character will orient to match the arrow. ForwardFacing=When user orients to match the arrow, they will be facing the sensors.")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Which thumbstick is to be used for adjusting the teleport orientation. Supports LTouch, RTouch, or Touch for either.")]
	public OVRInput.Controller Thumbstick;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The orientation will only change if the thumbstick magnitude is above this value. This will usually be larger than the TeleportInputHandlerTouch.ThumbstickTeleportThreshold.")]
	public float RotateStickThreshold;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion _initialRotation;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion _currentRotation;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private UnityEngine.Vector2 _lastValidDirection;

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xD78D78", Offset = "0xD78D78", VA = "0xD78D78", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xD78DAC", Offset = "0xD78DAC", VA = "0xD78DAC", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xD792A8", Offset = "0xD792A8", VA = "0xD792A8")]
	public TeleportOrientationHandlerThumbstick()
	{
	}
}
[Token(Token = "0x20000E3")]
public class TeleportPoint : MonoBehaviour
{
	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float dimmingSpeed;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fullIntensity;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lowIntensity;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform destTransform;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastLookAtTime;

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xD792B8", Offset = "0xD792B8", VA = "0xD792B8")]
	private void Start()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xD792BC", Offset = "0xD792BC", VA = "0xD792BC")]
	public Transform GetDestTransform()
	{
		return null;
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xD792C4", Offset = "0xD792C4", VA = "0xD792C4")]
	private void Update()
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xD793B0", Offset = "0xD793B0", VA = "0xD793B0")]
	public void OnLookAt()
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xD793CC", Offset = "0xD793CC", VA = "0xD793CC")]
	public TeleportPoint()
	{
	}
}
[Token(Token = "0x20000E4")]
public abstract class TeleportSupport : MonoBehaviour
{
	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _eventsActive;

	[Token(Token = "0x17000053")]
	protected LocomotionTeleport LocomotionTeleport
	{
		[Token(Token = "0x60003E2")]
		[Address(RVA = "0xD793E4", Offset = "0xD793E4", VA = "0xD793E4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60003E3")]
		[Address(RVA = "0xD793EC", Offset = "0xD793EC", VA = "0xD793EC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0xD76A14", Offset = "0xD76A14", VA = "0xD76A14", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xD76B04", Offset = "0xD76B04", VA = "0xD76B04", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xD793F4", Offset = "0xD793F4", VA = "0xD793F4")]
	[Conditional("DEBUG_TELEPORT_EVENT_HANDLERS")]
	private void LogEventHandler(string msg)
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xD77104", Offset = "0xD77104", VA = "0xD77104", Slot = "6")]
	protected virtual void AddEventHandlers()
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xD77158", Offset = "0xD77158", VA = "0xD77158", Slot = "7")]
	protected virtual void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xD76B2C", Offset = "0xD76B2C", VA = "0xD76B2C")]
	protected TeleportSupport()
	{
	}
}
[Token(Token = "0x20000E5")]
public abstract class TeleportTargetHandler : TeleportSupport
{
	[Token(Token = "0x20000E6")]
	[CompilerGenerated]
	private sealed class <TargetAimCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTargetHandler <>4__this;

		[Token(Token = "0x17000054")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003F5")]
			[Address(RVA = "0xD79AAC", Offset = "0xD79AAC", VA = "0xD79AAC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000055")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003F7")]
			[Address(RVA = "0xD79AF4", Offset = "0xD79AF4", VA = "0xD79AF4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003F2")]
		[Address(RVA = "0xD79670", Offset = "0xD79670", VA = "0xD79670")]
		[DebuggerHidden]
		public <TargetAimCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60003F3")]
		[Address(RVA = "0xD797EC", Offset = "0xD797EC", VA = "0xD797EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003F4")]
		[Address(RVA = "0xD797F0", Offset = "0xD797F0", VA = "0xD797F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003F6")]
		[Address(RVA = "0xD79AB4", Offset = "0xD79AB4", VA = "0xD79AB4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("This bitmask controls which game object layers will be included in the targeting collision tests.")]
	public LayerMask AimCollisionLayerMask;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected readonly LocomotionTeleport.AimData AimData;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly List<UnityEngine.Vector3> _aimPoints;

	[Token(Token = "0x4000380")]
	private const float ERROR_MARGIN = 0.1f;

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xD794C4", Offset = "0xD794C4", VA = "0xD794C4")]
	protected TeleportTargetHandler()
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xD795BC", Offset = "0xD795BC", VA = "0xD795BC", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0xD795E4", Offset = "0xD795E4", VA = "0xD795E4", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0xD79608", Offset = "0xD79608", VA = "0xD79608")]
	[IteratorStateMachine(typeof(<TargetAimCoroutine>d__7))]
	private IEnumerator TargetAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0xD79698", Offset = "0xD79698", VA = "0xD79698", Slot = "8")]
	protected virtual void ResetAimData()
	{
	}

	[Token(Token = "0x60003EF")]
	protected abstract bool ConsiderTeleport(UnityEngine.Vector3 start, ref UnityEngine.Vector3 end);

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xD796B0", Offset = "0xD796B0", VA = "0xD796B0", Slot = "10")]
	public virtual UnityEngine.Vector3? ConsiderDestination(UnityEngine.Vector3 location)
	{
		return null;
	}
}
[Token(Token = "0x20000E7")]
public class TeleportTargetHandlerNavMesh : TeleportTargetHandler
{
	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int NavMeshAreaMask;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NavMeshPath _path;

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0xD79AFC", Offset = "0xD79AFC", VA = "0xD79AFC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xD79B5C", Offset = "0xD79B5C", VA = "0xD79B5C", Slot = "9")]
	protected override bool ConsiderTeleport(UnityEngine.Vector3 start, ref UnityEngine.Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0xD79CC4", Offset = "0xD79CC4", VA = "0xD79CC4", Slot = "10")]
	public override UnityEngine.Vector3? ConsiderDestination(UnityEngine.Vector3 location)
	{
		return null;
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0xD79DB0", Offset = "0xD79DB0", VA = "0xD79DB0")]
	[Conditional("SHOW_PATH_RESULT")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0xD79DB4", Offset = "0xD79DB4", VA = "0xD79DB4")]
	public TeleportTargetHandlerNavMesh()
	{
	}
}
[Token(Token = "0x20000E8")]
public class TeleportTargetHandlerNode : TeleportTargetHandler
{
	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("When checking line of sight to the destination, add this value to the vertical offset for targeting collision checks.")]
	public float LOSOffset;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Teleport logic will only work with TeleportPoint components that exist in the layers specified by this mask.")]
	public LayerMask TeleportLayerMask;

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0xD79DC0", Offset = "0xD79DC0", VA = "0xD79DC0", Slot = "9")]
	protected override bool ConsiderTeleport(UnityEngine.Vector3 start, ref UnityEngine.Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0xD79FB8", Offset = "0xD79FB8", VA = "0xD79FB8")]
	public TeleportTargetHandlerNode()
	{
	}
}
[Token(Token = "0x20000E9")]
public class TeleportTargetHandlerPhysical : TeleportTargetHandler
{
	[Token(Token = "0x60003FF")]
	[Address(RVA = "0xD79FC4", Offset = "0xD79FC4", VA = "0xD79FC4", Slot = "9")]
	protected override bool ConsiderTeleport(UnityEngine.Vector3 start, ref UnityEngine.Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0xD7A12C", Offset = "0xD7A12C", VA = "0xD7A12C")]
	public TeleportTargetHandlerPhysical()
	{
	}
}
[Token(Token = "0x20000EA")]
public abstract class TeleportTransition : TeleportSupport
{
	[Token(Token = "0x6000401")]
	[Address(RVA = "0xD7A130", Offset = "0xD7A130", VA = "0xD7A130", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0xD7A1B4", Offset = "0xD7A1B4", VA = "0xD7A1B4", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000403")]
	protected abstract void LocomotionTeleportOnEnterStateTeleporting();

	[Token(Token = "0x6000404")]
	[Address(RVA = "0xD7A234", Offset = "0xD7A234", VA = "0xD7A234")]
	protected TeleportTransition()
	{
	}
}
[Token(Token = "0x20000EB")]
public class TeleportTransitionBlink : TeleportTransition
{
	[Token(Token = "0x20000EC")]
	[CompilerGenerated]
	private sealed class <BlinkCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionBlink <>4__this;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <teleportTime>5__3;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <teleported>5__4;

		[Token(Token = "0x17000056")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600040B")]
			[Address(RVA = "0xD7A574", Offset = "0xD7A574", VA = "0xD7A574", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000057")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600040D")]
			[Address(RVA = "0xD7A5BC", Offset = "0xD7A5BC", VA = "0xD7A5BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000408")]
		[Address(RVA = "0xD7A2C4", Offset = "0xD7A2C4", VA = "0xD7A2C4")]
		[DebuggerHidden]
		public <BlinkCoroutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0xD7A47C", Offset = "0xD7A47C", VA = "0xD7A47C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600040A")]
		[Address(RVA = "0xD7A480", Offset = "0xD7A480", VA = "0xD7A480", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0xD7A57C", Offset = "0xD7A57C", VA = "0xD7A57C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0.01f, 2f)]
	[Tooltip("How long the transition takes. Usually this is greater than Teleport Delay.")]
	public float TransitionDuration;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("At what percentage of the elapsed transition time does the teleport occur?")]
	[Range(0f, 1f)]
	public float TeleportDelay;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Fade to black over the duration of the transition")]
	public AnimationCurve FadeLevels;

	[Token(Token = "0x6000405")]
	[Address(RVA = "0xD7A23C", Offset = "0xD7A23C", VA = "0xD7A23C", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0xD7A25C", Offset = "0xD7A25C", VA = "0xD7A25C")]
	[IteratorStateMachine(typeof(<BlinkCoroutine>d__4))]
	protected IEnumerator BlinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xD7A2EC", Offset = "0xD7A2EC", VA = "0xD7A2EC")]
	public TeleportTransitionBlink()
	{
	}
}
[Token(Token = "0x20000ED")]
public class TeleportTransitionInstant : TeleportTransition
{
	[Token(Token = "0x600040E")]
	[Address(RVA = "0xD7A5C4", Offset = "0xD7A5C4", VA = "0xD7A5C4", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0xD7A5DC", Offset = "0xD7A5DC", VA = "0xD7A5DC")]
	public TeleportTransitionInstant()
	{
	}
}
[Token(Token = "0x20000EE")]
public class TeleportTransitionWarp : TeleportTransition
{
	[Token(Token = "0x20000EF")]
	[CompilerGenerated]
	private sealed class <DoWarp>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionWarp <>4__this;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 <startPosition>5__2;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <elapsedTime>5__3;

		[Token(Token = "0x17000058")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000416")]
			[Address(RVA = "0xD7A7DC", Offset = "0xD7A7DC", VA = "0xD7A7DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000059")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000418")]
			[Address(RVA = "0xD7A824", Offset = "0xD7A824", VA = "0xD7A824", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000413")]
		[Address(RVA = "0xD7A66C", Offset = "0xD7A66C", VA = "0xD7A66C")]
		[DebuggerHidden]
		public <DoWarp>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000414")]
		[Address(RVA = "0xD7A6D0", Offset = "0xD7A6D0", VA = "0xD7A6D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0xD7A6D4", Offset = "0xD7A6D4", VA = "0xD7A6D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0xD7A7E4", Offset = "0xD7A7E4", VA = "0xD7A7E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("How much time the warp transition takes to complete.")]
	[Range(0.01f, 1f)]
	public float TransitionDuration;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public AnimationCurve PositionLerp;

	[Token(Token = "0x6000410")]
	[Address(RVA = "0xD7A5E4", Offset = "0xD7A5E4", VA = "0xD7A5E4", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0xD7A604", Offset = "0xD7A604", VA = "0xD7A604")]
	[IteratorStateMachine(typeof(<DoWarp>d__3))]
	private IEnumerator DoWarp()
	{
		return null;
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0xD7A694", Offset = "0xD7A694", VA = "0xD7A694")]
	public TeleportTransitionWarp()
	{
	}
}
[Token(Token = "0x20000F0")]
public static class NativeVideoPlayer
{
	[Token(Token = "0x20000F1")]
	public enum PlabackState
	{
		[Token(Token = "0x40003B0")]
		Idle = 1,
		[Token(Token = "0x40003B1")]
		Preparing,
		[Token(Token = "0x40003B2")]
		Buffering,
		[Token(Token = "0x40003B3")]
		Ready,
		[Token(Token = "0x40003B4")]
		Ended
	}

	[Token(Token = "0x20000F2")]
	public enum StereoMode
	{
		[Token(Token = "0x40003B6")]
		Unknown = -1,
		[Token(Token = "0x40003B7")]
		Mono,
		[Token(Token = "0x40003B8")]
		TopBottom,
		[Token(Token = "0x40003B9")]
		LeftRight,
		[Token(Token = "0x40003BA")]
		Mesh
	}

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IntPtr? _Activity;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static IntPtr? _VideoPlayerClass;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly jvalue[] EmptyParams;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static IntPtr getIsPlayingMethodId;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static IntPtr getCurrentPlaybackStateMethodId;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static IntPtr getDurationMethodId;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static IntPtr getStereoModeMethodId;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static IntPtr getWidthMethodId;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static IntPtr getHeightMethodId;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static IntPtr getPlaybackPositionMethodId;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static IntPtr setPlaybackPositionMethodId;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static jvalue[] setPlaybackPositionParams;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static IntPtr playVideoMethodId;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static jvalue[] playVideoParams;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static IntPtr stopMethodId;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static IntPtr resumeMethodId;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static IntPtr pauseMethodId;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static IntPtr setPlaybackSpeedMethodId;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static jvalue[] setPlaybackSpeedParams;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static IntPtr setLoopingMethodId;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private static jvalue[] setLoopingParams;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static IntPtr setListenerRotationQuaternionMethodId;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private static jvalue[] setListenerRotationQuaternionParams;

	[Token(Token = "0x1700005A")]
	private static IntPtr VideoPlayerClass
	{
		[Token(Token = "0x6000419")]
		[Address(RVA = "0xD7A82C", Offset = "0xD7A82C", VA = "0xD7A82C")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700005B")]
	private static IntPtr Activity
	{
		[Token(Token = "0x600041A")]
		[Address(RVA = "0xD7AAE8", Offset = "0xD7AAE8", VA = "0xD7AAE8")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700005C")]
	public static bool IsAvailable
	{
		[Token(Token = "0x600041B")]
		[Address(RVA = "0xD7AD54", Offset = "0xD7AD54", VA = "0xD7AD54")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700005D")]
	public static bool IsPlaying
	{
		[Token(Token = "0x600041C")]
		[Address(RVA = "0xD7ADB8", Offset = "0xD7ADB8", VA = "0xD7ADB8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700005E")]
	public static PlabackState CurrentPlaybackState
	{
		[Token(Token = "0x600041D")]
		[Address(RVA = "0xD7AEAC", Offset = "0xD7AEAC", VA = "0xD7AEAC")]
		get
		{
			return default(PlabackState);
		}
	}

	[Token(Token = "0x1700005F")]
	public static long Duration
	{
		[Token(Token = "0x600041E")]
		[Address(RVA = "0xD7AFA4", Offset = "0xD7AFA4", VA = "0xD7AFA4")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x17000060")]
	public static StereoMode VideoStereoMode
	{
		[Token(Token = "0x600041F")]
		[Address(RVA = "0xD7B09C", Offset = "0xD7B09C", VA = "0xD7B09C")]
		get
		{
			return default(StereoMode);
		}
	}

	[Token(Token = "0x17000061")]
	public static int VideoWidth
	{
		[Token(Token = "0x6000420")]
		[Address(RVA = "0xD7B194", Offset = "0xD7B194", VA = "0xD7B194")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000062")]
	public static int VideoHeight
	{
		[Token(Token = "0x6000421")]
		[Address(RVA = "0xD7B28C", Offset = "0xD7B28C", VA = "0xD7B28C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000063")]
	public static long PlaybackPosition
	{
		[Token(Token = "0x6000422")]
		[Address(RVA = "0xD7B384", Offset = "0xD7B384", VA = "0xD7B384")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x6000423")]
		[Address(RVA = "0xD7B47C", Offset = "0xD7B47C", VA = "0xD7B47C")]
		set
		{
		}
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0xD7B5CC", Offset = "0xD7B5CC", VA = "0xD7B5CC")]
	public static void PlayVideo(string path, string drmLicenseUrl, IntPtr surfaceObj)
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0xD7B7C8", Offset = "0xD7B7C8", VA = "0xD7B7C8")]
	public static void Stop()
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0xD7B8C0", Offset = "0xD7B8C0", VA = "0xD7B8C0")]
	public static void Play()
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0xD7B9B8", Offset = "0xD7B9B8", VA = "0xD7B9B8")]
	public static void Pause()
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xD7BAB0", Offset = "0xD7BAB0", VA = "0xD7BAB0")]
	public static void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xD7BC08", Offset = "0xD7BC08", VA = "0xD7BC08")]
	public static void SetLooping(bool looping)
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0xD7BD5C", Offset = "0xD7BD5C", VA = "0xD7BD5C")]
	public static void SetListenerRotation(Quaternion rotation)
	{
	}
}
[Token(Token = "0x20000F3")]
public class ButtonDownListener : MonoBehaviour, IPointerDownHandler, IEventSystemHandler
{
	[Token(Token = "0x14000011")]
	public event Action onButtonDown
	{
		[Token(Token = "0x600042C")]
		[Address(RVA = "0xD7BF90", Offset = "0xD7BF90", VA = "0xD7BF90")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600042D")]
		[Address(RVA = "0xD7C02C", Offset = "0xD7C02C", VA = "0xD7C02C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0xD7C0C8", Offset = "0xD7C0C8", VA = "0xD7C0C8", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0xD7C0E4", Offset = "0xD7C0E4", VA = "0xD7C0E4")]
	public ButtonDownListener()
	{
	}
}
[Token(Token = "0x20000F4")]
public class MediaPlayerImage : Image
{
	[Token(Token = "0x20000F5")]
	public enum ButtonType
	{
		[Token(Token = "0x40003BE")]
		Play,
		[Token(Token = "0x40003BF")]
		Pause,
		[Token(Token = "0x40003C0")]
		FastForward,
		[Token(Token = "0x40003C1")]
		Rewind,
		[Token(Token = "0x40003C2")]
		SkipForward,
		[Token(Token = "0x40003C3")]
		SkipBack,
		[Token(Token = "0x40003C4")]
		Stop
	}

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private ButtonType m_ButtonType;

	[Token(Token = "0x17000064")]
	public ButtonType buttonType
	{
		[Token(Token = "0x6000430")]
		[Address(RVA = "0xD7C0EC", Offset = "0xD7C0EC", VA = "0xD7C0EC")]
		get
		{
			return default(ButtonType);
		}
		[Token(Token = "0x6000431")]
		[Address(RVA = "0xD7C0F4", Offset = "0xD7C0F4", VA = "0xD7C0F4")]
		set
		{
		}
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0xD7C118", Offset = "0xD7C118", VA = "0xD7C118", Slot = "44")]
	protected override void OnPopulateMesh(VertexHelper toFill)
	{
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0xD7CF6C", Offset = "0xD7CF6C", VA = "0xD7CF6C")]
	public MediaPlayerImage()
	{
	}
}
[Token(Token = "0x20000F6")]
public class MoviePlayerSample : MonoBehaviour
{
	[Token(Token = "0x20000F7")]
	public enum VideoShape
	{
		[Token(Token = "0x40003D9")]
		_360,
		[Token(Token = "0x40003DA")]
		_180,
		[Token(Token = "0x40003DB")]
		Quad
	}

	[Token(Token = "0x20000F8")]
	public enum VideoStereo
	{
		[Token(Token = "0x40003DD")]
		Mono,
		[Token(Token = "0x40003DE")]
		TopBottom,
		[Token(Token = "0x40003DF")]
		LeftRight,
		[Token(Token = "0x40003E0")]
		BottomTop
	}

	[Token(Token = "0x20000F9")]
	[CompilerGenerated]
	private sealed class <Start>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		[Token(Token = "0x17000068")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600044A")]
			[Address(RVA = "0xD7E37C", Offset = "0xD7E37C", VA = "0xD7E37C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000069")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600044C")]
			[Address(RVA = "0xD7E3C4", Offset = "0xD7E3C4", VA = "0xD7E3C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0xD7D610", Offset = "0xD7D610", VA = "0xD7D610")]
		[DebuggerHidden]
		public <Start>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0xD7E1DC", Offset = "0xD7E1DC", VA = "0xD7E1DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000449")]
		[Address(RVA = "0xD7E1E0", Offset = "0xD7E1E0", VA = "0xD7E1E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0xD7E384", Offset = "0xD7E384", VA = "0xD7E384", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool videoPausedBeforeAppPause;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VideoPlayer videoPlayer;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVROverlay overlay;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer mediaRenderer;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RenderTexture copyTexture;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material externalTex2DMaterial;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string MovieName;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string DrmLicenseUrl;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool LoopVideo;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public VideoShape Shape;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public VideoStereo Stereo;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool AutoDetectStereoLayout;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool DisplayMono;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private VideoShape _LastShape;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private VideoStereo _LastStereo;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _LastDisplayMono;

	[Token(Token = "0x17000065")]
	public bool IsPlaying
	{
		[Token(Token = "0x6000434")]
		[Address(RVA = "0xD7CFC4", Offset = "0xD7CFC4", VA = "0xD7CFC4")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000435")]
		[Address(RVA = "0xD7CFCC", Offset = "0xD7CFCC", VA = "0xD7CFCC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000066")]
	public long Duration
	{
		[Token(Token = "0x6000436")]
		[Address(RVA = "0xD7CFD8", Offset = "0xD7CFD8", VA = "0xD7CFD8")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x6000437")]
		[Address(RVA = "0xD7CFE0", Offset = "0xD7CFE0", VA = "0xD7CFE0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000067")]
	public long PlaybackPosition
	{
		[Token(Token = "0x6000438")]
		[Address(RVA = "0xD7CFE8", Offset = "0xD7CFE8", VA = "0xD7CFE8")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x6000439")]
		[Address(RVA = "0xD7CFF0", Offset = "0xD7CFF0", VA = "0xD7CFF0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0xD7CFF8", Offset = "0xD7CFF8", VA = "0xD7CFF8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0xD7D248", Offset = "0xD7D248", VA = "0xD7D248")]
	private bool IsLocalVideo(string movieName)
	{
		return default(bool);
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0xD7D2A8", Offset = "0xD7D2A8", VA = "0xD7D2A8")]
	private void UpdateShapeAndStereo()
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0xD7D5A8", Offset = "0xD7D5A8", VA = "0xD7D5A8")]
	[IteratorStateMachine(typeof(<Start>d__33))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xD7D638", Offset = "0xD7D638", VA = "0xD7D638")]
	public void Play(string moviePath, string drmLicencesUrl)
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0xD7D8C0", Offset = "0xD7D8C0", VA = "0xD7D8C0")]
	public void Play()
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xD7D944", Offset = "0xD7D944", VA = "0xD7D944")]
	public void Pause()
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xD7D9C4", Offset = "0xD7D9C4", VA = "0xD7D9C4")]
	public void SeekTo(long position)
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0xD7DAB0", Offset = "0xD7DAB0", VA = "0xD7DAB0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0xD7DFD0", Offset = "0xD7DFD0", VA = "0xD7DFD0")]
	public void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0xD7E06C", Offset = "0xD7E06C", VA = "0xD7E06C")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0xD7E0EC", Offset = "0xD7E0EC", VA = "0xD7E0EC")]
	private void OnApplicationPause(bool appWasPaused)
	{
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0xD7E1CC", Offset = "0xD7E1CC", VA = "0xD7E1CC")]
	public MoviePlayerSample()
	{
	}
}
[Token(Token = "0x20000FB")]
public class MoviePlayerSampleControls : MonoBehaviour
{
	[Token(Token = "0x20000FC")]
	private enum PlaybackState
	{
		[Token(Token = "0x40003FD")]
		Playing,
		[Token(Token = "0x40003FE")]
		Paused,
		[Token(Token = "0x40003FF")]
		Rewinding,
		[Token(Token = "0x4000400")]
		FastForwarding
	}

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MoviePlayerSample Player;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRInputModule InputModule;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRGazePointer GazePointer;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject LeftHand;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject RightHand;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Canvas Canvas;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ButtonDownListener PlayPause;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MediaPlayerImage PlayPauseImage;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Slider ProgressBar;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ButtonDownListener FastForward;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MediaPlayerImage FastForwardImage;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ButtonDownListener Rewind;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public MediaPlayerImage RewindImage;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float TimeoutTime;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool _isVisible;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _lastButtonTime;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool _didSeek;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private long _seekPreviousPosition;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private long _rewindStartPosition;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float _rewindStartTime;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private PlaybackState _state;

	[Token(Token = "0x600044F")]
	[Address(RVA = "0xE464C0", Offset = "0xE464C0", VA = "0xE464C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0xE467B0", Offset = "0xE467B0", VA = "0xE467B0")]
	private void OnPlayPauseClicked()
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0xE468E0", Offset = "0xE468E0", VA = "0xE468E0")]
	private void OnFastForwardClicked()
	{
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0xE469F0", Offset = "0xE469F0", VA = "0xE469F0")]
	private void OnRewindClicked()
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0xE46AD0", Offset = "0xE46AD0", VA = "0xE46AD0")]
	private void OnSeekBarMoved(float value)
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0xE469C0", Offset = "0xE469C0", VA = "0xE469C0")]
	private void Seek(long pos)
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0xE46B30", Offset = "0xE46B30", VA = "0xE46B30")]
	private void Update()
	{
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0xE466B0", Offset = "0xE466B0", VA = "0xE466B0")]
	private void SetVisible(bool visible)
	{
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0xE46E3C", Offset = "0xE46E3C", VA = "0xE46E3C")]
	public MoviePlayerSampleControls()
	{
	}
}
[Token(Token = "0x20000FD")]
public static class VectorUtil
{
	[Token(Token = "0x6000458")]
	[Address(RVA = "0xE46E4C", Offset = "0xE46E4C", VA = "0xE46E4C")]
	public static Vector4 ToVector(this Rect rect)
	{
		return default(Vector4);
	}
}
[Token(Token = "0x20000FE")]
public class AppDeeplinkUI : MonoBehaviour
{
	[Token(Token = "0x4000401")]
	private const ulong UNITY_COMPANION_APP_ID = 3535750239844224uL;

	[Token(Token = "0x4000402")]
	private const ulong UNREAL_COMPANION_APP_ID = 4055411724486843uL;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform deeplinkAppId;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform deeplinkMessage;

	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform uiLaunchType;

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RectTransform uiLaunchSource;

	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RectTransform uiDeepLinkMessage;

	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool inMenu;

	[Token(Token = "0x6000459")]
	[Address(RVA = "0xE46EC4", Offset = "0xE46EC4", VA = "0xE46EC4")]
	private void Start()
	{
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0xE474B4", Offset = "0xE474B4", VA = "0xE474B4")]
	private void Update()
	{
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0xE47710", Offset = "0xE47710", VA = "0xE47710")]
	private void LaunchUnrealDeeplinkSample()
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0xE47874", Offset = "0xE47874", VA = "0xE47874")]
	private void LaunchSelf()
	{
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0xE479DC", Offset = "0xE479DC", VA = "0xE479DC")]
	private void LaunchOtherApp()
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0xE47B60", Offset = "0xE47B60", VA = "0xE47B60")]
	public AppDeeplinkUI()
	{
	}
}
[Token(Token = "0x20000FF")]
public class CustomDebugUI : MonoBehaviour
{
	[Token(Token = "0x4000409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x400040A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CustomDebugUI instance;

	[Token(Token = "0x400040B")]
	private const BindingFlags privateFlags = BindingFlags.Instance | BindingFlags.NonPublic;

	[Token(Token = "0x600045F")]
	[Address(RVA = "0xE47B70", Offset = "0xE47B70", VA = "0xE47B70")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0xE47BBC", Offset = "0xE47BBC", VA = "0xE47BBC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0xE47BC0", Offset = "0xE47BC0", VA = "0xE47BC0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0xE47274", Offset = "0xE47274", VA = "0xE47274")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0xE47BC4", Offset = "0xE47BC4", VA = "0xE47BC4")]
	public void RemoveFromCanvas(RectTransform element, int targetCanvas = 0)
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0xE47DE0", Offset = "0xE47DE0", VA = "0xE47DE0")]
	public CustomDebugUI()
	{
	}
}
[Token(Token = "0x2000100")]
public class DebugUISample : MonoBehaviour
{
	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool inMenu;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text sliderText;

	[Token(Token = "0x6000465")]
	[Address(RVA = "0xE47DE8", Offset = "0xE47DE8", VA = "0xE47DE8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0xE48338", Offset = "0xE48338", VA = "0xE48338")]
	public void TogglePressed(Toggle t)
	{
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0xE483E4", Offset = "0xE483E4", VA = "0xE483E4")]
	public void RadioPressed(string radioLabel, string group, Toggle t)
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xE485FC", Offset = "0xE485FC", VA = "0xE485FC")]
	public void SliderPressed(float f)
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xE486D0", Offset = "0xE486D0", VA = "0xE486D0")]
	private void Update()
	{
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xE487A8", Offset = "0xE487A8", VA = "0xE487A8")]
	private void LogButtonPressed()
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0xE48810", Offset = "0xE48810", VA = "0xE48810")]
	public DebugUISample()
	{
	}
}
[Token(Token = "0x2000101")]
public class AnalyticsUI : MonoBehaviour
{
	[Token(Token = "0x6000470")]
	[Address(RVA = "0xE489B8", Offset = "0xE489B8", VA = "0xE489B8")]
	public AnalyticsUI()
	{
	}
}
[Token(Token = "0x2000102")]
public class SampleUI : MonoBehaviour
{
	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform collectionButton;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform inputText;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform valueText;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool inMenu;

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xE489C0", Offset = "0xE489C0", VA = "0xE489C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xE48A58", Offset = "0xE48A58", VA = "0xE48A58")]
	private void Update()
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xE48B30", Offset = "0xE48B30", VA = "0xE48B30")]
	private string GetText()
	{
		return null;
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xE48B8C", Offset = "0xE48B8C", VA = "0xE48B8C")]
	public SampleUI()
	{
	}
}
[Token(Token = "0x2000103")]
public class StartCrashlytics : MonoBehaviour
{
	[Token(Token = "0x6000475")]
	[Address(RVA = "0xE48B94", Offset = "0xE48B94", VA = "0xE48B94")]
	public StartCrashlytics()
	{
	}
}
[Token(Token = "0x2000104")]
public class HandsActiveChecker : MonoBehaviour
{
	[Token(Token = "0x2000105")]
	[CompilerGenerated]
	private sealed class <GetCenterEye>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandsActiveChecker <>4__this;

		[Token(Token = "0x1700006A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600047D")]
			[Address(RVA = "0xE48F60", Offset = "0xE48F60", VA = "0xE48F60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600047F")]
			[Address(RVA = "0xE48FA8", Offset = "0xE48FA8", VA = "0xE48FA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0xE48E28", Offset = "0xE48E28", VA = "0xE48E28")]
		[DebuggerHidden]
		public <GetCenterEye>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0xE48E58", Offset = "0xE48E58", VA = "0xE48E58", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0xE48E5C", Offset = "0xE48E5C", VA = "0xE48E5C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0xE48F68", Offset = "0xE48F68", VA = "0xE48F68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _notificationPrefab;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _notification;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRCameraRig _cameraRig;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _centerEye;

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xE48B9C", Offset = "0xE48B9C", VA = "0xE48B9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xE48C90", Offset = "0xE48C90", VA = "0xE48C90")]
	private void Update()
	{
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0xE48C28", Offset = "0xE48C28", VA = "0xE48C28")]
	[IteratorStateMachine(typeof(<GetCenterEye>d__6))]
	private IEnumerator GetCenterEye()
	{
		return null;
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0xE48E50", Offset = "0xE48E50", VA = "0xE48E50")]
	public HandsActiveChecker()
	{
	}
}
[Token(Token = "0x2000106")]
[ExecuteInEditMode]
public class CharacterCapsule : MonoBehaviour
{
	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CharacterController _character;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter _meshFilter;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _height;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _radius;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(4f, 32f)]
	public int SubdivisionsU;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(4f, 32f)]
	public int SubdivisionsV;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _subdivisionU;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int _subdivisionV;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityEngine.Vector3[] _vertices;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int[] _triangles;

	[Token(Token = "0x6000480")]
	[Address(RVA = "0xE48FB0", Offset = "0xE48FB0", VA = "0xE48FB0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0xE4A91C", Offset = "0xE4A91C", VA = "0xE4A91C")]
	public CharacterCapsule()
	{
	}
}
[Token(Token = "0x2000107")]
public class LocomotionSampleSupport : MonoBehaviour
{
	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LocomotionController lc;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool inMenu;

	[Token(Token = "0x1700006C")]
	private LocomotionTeleport TeleportController
	{
		[Token(Token = "0x6000482")]
		[Address(RVA = "0xE4A924", Offset = "0xE4A924", VA = "0xE4A924")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0xE4A974", Offset = "0xE4A974", VA = "0xE4A974")]
	public void Start()
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0xE4ADA0", Offset = "0xE4ADA0", VA = "0xE4ADA0")]
	public void Update()
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0xE4AE78", Offset = "0xE4AE78", VA = "0xE4AE78")]
	[Conditional("DEBUG_LOCOMOTION_PANEL")]
	private static void Log(string msg)
	{
	}

	[Token(Token = "0x6000486")]
	public static TActivate ActivateCategory<TCategory, TActivate>(GameObject target) where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x6000487")]
	protected void ActivateHandlers<TInput, TAim, TTarget, TOrientation, TTransition>() where TInput : TeleportInputHandler where TAim : TeleportAimHandler where TTarget : TeleportTargetHandler where TOrientation : TeleportOrientationHandler where TTransition : TeleportTransition
	{
	}

	[Token(Token = "0x6000488")]
	protected void ActivateInput<TActivate>() where TActivate : TeleportInputHandler
	{
	}

	[Token(Token = "0x6000489")]
	protected void ActivateAim<TActivate>() where TActivate : TeleportAimHandler
	{
	}

	[Token(Token = "0x600048A")]
	protected void ActivateTarget<TActivate>() where TActivate : TeleportTargetHandler
	{
	}

	[Token(Token = "0x600048B")]
	protected void ActivateOrientation<TActivate>() where TActivate : TeleportOrientationHandler
	{
	}

	[Token(Token = "0x600048C")]
	protected void ActivateTransition<TActivate>() where TActivate : TeleportTransition
	{
	}

	[Token(Token = "0x600048D")]
	protected TActivate ActivateCategory<TCategory, TActivate>() where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0xE4AED0", Offset = "0xE4AED0", VA = "0xE4AED0")]
	protected void UpdateToggle(Toggle toggle, bool enabled)
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0xE4AF10", Offset = "0xE4AF10", VA = "0xE4AF10")]
	private void SetupNonCap()
	{
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0xE4AF7C", Offset = "0xE4AF7C", VA = "0xE4AF7C")]
	private void SetupTeleportDefaults()
	{
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0xE4B0C8", Offset = "0xE4B0C8", VA = "0xE4B0C8")]
	protected GameObject AddInstance(GameObject template, string label)
	{
		return null;
	}

	[Token(Token = "0x6000492")]
	[Address(RVA = "0xE4B198", Offset = "0xE4B198", VA = "0xE4B198")]
	private void SetupNodeTeleport()
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0xE4AC7C", Offset = "0xE4AC7C", VA = "0xE4AC7C")]
	private void SetupTwoStickTeleport()
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0xE4B268", Offset = "0xE4B268", VA = "0xE4B268")]
	private void SetupWalkOnly()
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0xE4B2B4", Offset = "0xE4B2B4", VA = "0xE4B2B4")]
	private void SetupLeftStrafeRightTeleport()
	{
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0xE4B3C4", Offset = "0xE4B3C4", VA = "0xE4B3C4")]
	public LocomotionSampleSupport()
	{
	}
}
[Token(Token = "0x2000108")]
[RequireComponent(typeof(Canvas))]
public class OVROverlayCanvas : MonoBehaviour
{
	[Token(Token = "0x2000109")]
	public enum DrawMode
	{
		[Token(Token = "0x400043A")]
		Opaque,
		[Token(Token = "0x400043B")]
		OpaqueWithClip,
		[Token(Token = "0x400043C")]
		TransparentDefaultAlpha,
		[Token(Token = "0x400043D")]
		TransparentCorrectAlpha
	}

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private Shader _transparentShader;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	[SerializeField]
	private Shader _opaqueShader;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform _rectTransform;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Canvas _canvas;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera _camera;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OVROverlay _overlay;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture _renderTexture;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshRenderer _meshRenderer;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Mesh _quad;

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material _defaultMat;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int MaxTextureSize;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int MinTextureSize;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float PixelsPerUnit;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int DrawRate;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int DrawFrameOffset;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool Expensive;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int Layer;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public DrawMode Opacity;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool ScaleViewport;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Plane[] _FrustumPlanes;

	[Token(Token = "0x1700006D")]
	public bool overlayEnabled
	{
		[Token(Token = "0x600049D")]
		[Address(RVA = "0xE4C920", Offset = "0xE4C920", VA = "0xE4C920")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600049E")]
		[Address(RVA = "0xE4C9A4", Offset = "0xE4C9A4", VA = "0xE4C9A4")]
		set
		{
		}
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0xE4B3CC", Offset = "0xE4B3CC", VA = "0xE4B3CC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0xE4BFA8", Offset = "0xE4BFA8", VA = "0xE4BFA8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0xE4C01C", Offset = "0xE4C01C", VA = "0xE4C01C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0xE4C0EC", Offset = "0xE4C0EC", VA = "0xE4C0EC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600049B")]
	[Address(RVA = "0xE4C1BC", Offset = "0xE4C1BC", VA = "0xE4C1BC", Slot = "4")]
	protected virtual bool ShouldRender()
	{
		return default(bool);
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0xE4C3C0", Offset = "0xE4C3C0", VA = "0xE4C3C0")]
	private void Update()
	{
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0xE4CA60", Offset = "0xE4CA60", VA = "0xE4CA60")]
	public OVROverlayCanvas()
	{
	}
}
[Token(Token = "0x200010A")]
public class AugmentedObject : MonoBehaviour
{
	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform shadow;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool groundShadow;

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0xE4CB10", Offset = "0xE4CB10", VA = "0xE4CB10")]
	private void Start()
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0xE4CE14", Offset = "0xE4CE14", VA = "0xE4CE14")]
	private void Update()
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0xE4CFA8", Offset = "0xE4CFA8", VA = "0xE4CFA8")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0xE4CFB0", Offset = "0xE4CFB0", VA = "0xE4CFB0")]
	public void Release()
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0xE4CF98", Offset = "0xE4CF98", VA = "0xE4CF98")]
	private void ToggleShadowType()
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0xE4CFB8", Offset = "0xE4CFB8", VA = "0xE4CFB8")]
	public AugmentedObject()
	{
	}
}
[Token(Token = "0x200010B")]
public class BrushController : MonoBehaviour
{
	[Token(Token = "0x200010C")]
	[CompilerGenerated]
	private sealed class <FadeCameraClearColor>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fadeTime;

		[Token(Token = "0x4000448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color newColor;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <timer>5__2;

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color <currentColor>5__3;

		[Token(Token = "0x1700006E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004B1")]
			[Address(RVA = "0xE4D66C", Offset = "0xE4D66C", VA = "0xE4D66C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004B3")]
			[Address(RVA = "0xE4D6B4", Offset = "0xE4D6B4", VA = "0xE4D6B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0xE4D528", Offset = "0xE4D528", VA = "0xE4D528")]
		[DebuggerHidden]
		public <FadeCameraClearColor>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0xE4D580", Offset = "0xE4D580", VA = "0xE4D580", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0xE4D584", Offset = "0xE4D584", VA = "0xE4D584", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004B2")]
		[Address(RVA = "0xE4D674", Offset = "0xE4D674", VA = "0xE4D674", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200010D")]
	[CompilerGenerated]
	private sealed class <FadeSphere>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BrushController <>4__this;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool disableOnFinish;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x17000070")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004B7")]
			[Address(RVA = "0xE4D82C", Offset = "0xE4D82C", VA = "0xE4D82C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000071")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004B9")]
			[Address(RVA = "0xE4D874", Offset = "0xE4D874", VA = "0xE4D874", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0xE4D550", Offset = "0xE4D550", VA = "0xE4D550")]
		[DebuggerHidden]
		public <FadeSphere>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0xE4D6BC", Offset = "0xE4D6BC", VA = "0xE4D6BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0xE4D6C0", Offset = "0xE4D6C0", VA = "0xE4D6C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0xE4D834", Offset = "0xE4D834", VA = "0xE4D834", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PassthroughBrush brush;

	[Token(Token = "0x4000442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer backgroundSphere;

	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator grabRoutine;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator releaseRoutine;

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0xE4CFC0", Offset = "0xE4CFC0", VA = "0xE4CFC0")]
	private void Start()
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0xE4D260", Offset = "0xE4D260", VA = "0xE4D260")]
	private void Update()
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0xE4D2B0", Offset = "0xE4D2B0", VA = "0xE4D2B0")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xE4D404", Offset = "0xE4D404", VA = "0xE4D404")]
	public void Release()
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xE4D490", Offset = "0xE4D490", VA = "0xE4D490")]
	[IteratorStateMachine(typeof(<FadeCameraClearColor>d__8))]
	private IEnumerator FadeCameraClearColor(Color newColor, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xE4D350", Offset = "0xE4D350", VA = "0xE4D350")]
	[IteratorStateMachine(typeof(<FadeSphere>d__9))]
	private IEnumerator FadeSphere(Color newColor, float fadeTime, bool disableOnFinish = false)
	{
		return null;
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xE4D578", Offset = "0xE4D578", VA = "0xE4D578")]
	public BrushController()
	{
	}
}
[Token(Token = "0x200010E")]
public class EnableUnpremultipliedAlpha : MonoBehaviour
{
	[Token(Token = "0x60004BA")]
	[Address(RVA = "0xE4D87C", Offset = "0xE4D87C", VA = "0xE4D87C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0xE4D8D0", Offset = "0xE4D8D0", VA = "0xE4D8D0")]
	public EnableUnpremultipliedAlpha()
	{
	}
}
[Token(Token = "0x200010F")]
public class Flashlight : MonoBehaviour
{
	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject lightVolume;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light spotlight;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject bulbGlow;

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0xE4D8D8", Offset = "0xE4D8D8", VA = "0xE4D8D8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xE4DAAC", Offset = "0xE4DAAC", VA = "0xE4DAAC")]
	public void ToggleFlashlight()
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xE4DB3C", Offset = "0xE4DB3C", VA = "0xE4DB3C")]
	public void EnableFlashlight(bool doEnable)
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xE4DB98", Offset = "0xE4DB98", VA = "0xE4DB98")]
	public Flashlight()
	{
	}
}
[Token(Token = "0x2000110")]
public class FlashlightController : MonoBehaviour
{
	[Token(Token = "0x2000111")]
	[CompilerGenerated]
	private sealed class <FadeLighting>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FlashlightController <>4__this;

		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sceneLightIntensity;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <currentLight>5__4;

		[Token(Token = "0x17000072")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004CC")]
			[Address(RVA = "0xE4ECDC", Offset = "0xE4ECDC", VA = "0xE4ECDC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000073")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004CE")]
			[Address(RVA = "0xE4ED24", Offset = "0xE4ED24", VA = "0xE4ED24", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0xE4EA50", Offset = "0xE4EA50", VA = "0xE4EA50")]
		[DebuggerHidden]
		public <FadeLighting>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0xE4EB18", Offset = "0xE4EB18", VA = "0xE4EB18", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0xE4EB1C", Offset = "0xE4EB1C", VA = "0xE4EB1C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0xE4ECE4", Offset = "0xE4ECE4", VA = "0xE4ECE4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light sceneLight;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform flashlightRoot;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector3 localPosition;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Quaternion localRotation;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMesh infoText;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GrabObject externalController;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private OVRSkeleton[] skeletons;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private OVRHand[] hands;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int handIndex;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool pinching;

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xE4DBA0", Offset = "0xE4DBA0", VA = "0xE4DBA0")]
	private void Start()
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xE4DE3C", Offset = "0xE4DE3C", VA = "0xE4DE3C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xE4E128", Offset = "0xE4E128", VA = "0xE4E128")]
	private void FindHands()
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xE4E420", Offset = "0xE4E420", VA = "0xE4E420")]
	private void AlignWithHand(OVRHand hand, OVRSkeleton skeleton)
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xE4E6F8", Offset = "0xE4E6F8", VA = "0xE4E6F8")]
	private void AlignWithController(OVRInput.Controller controller)
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xE4E7E0", Offset = "0xE4E7E0", VA = "0xE4E7E0")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0xE4E96C", Offset = "0xE4E96C", VA = "0xE4E96C")]
	public void Release()
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xE4E8C8", Offset = "0xE4E8C8", VA = "0xE4E8C8")]
	[IteratorStateMachine(typeof(<FadeLighting>d__17))]
	private IEnumerator FadeLighting(Color newColor, float sceneLightIntensity, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0xE4EA78", Offset = "0xE4EA78", VA = "0xE4EA78")]
	public FlashlightController()
	{
	}
}
[Token(Token = "0x2000112")]
public class GrabObject : MonoBehaviour
{
	[Token(Token = "0x2000113")]
	public enum ManipulationType
	{
		[Token(Token = "0x4000472")]
		Default,
		[Token(Token = "0x4000473")]
		ForcedHand,
		[Token(Token = "0x4000474")]
		DollyHand,
		[Token(Token = "0x4000475")]
		DollyAttached,
		[Token(Token = "0x4000476")]
		HorizontalScaled,
		[Token(Token = "0x4000477")]
		VerticalScaled,
		[Token(Token = "0x4000478")]
		Menu
	}

	[Token(Token = "0x2000114")]
	public delegate void GrabbedObject(OVRInput.Controller grabHand);

	[Token(Token = "0x2000115")]
	public delegate void ReleasedObject();

	[Token(Token = "0x2000116")]
	public delegate void SetCursorPosition(UnityEngine.Vector3 cursorPosition);

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string ObjectName;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[TextArea]
	public string ObjectInstructions;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ManipulationType objectManipulationType;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool showLaserWhileGrabbed;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Quaternion grabbedRotation;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GrabbedObject GrabbedObjectDelegate;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ReleasedObject ReleasedObjectDelegate;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SetCursorPosition CursorPositionDelegate;

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xE4ED2C", Offset = "0xE4ED2C", VA = "0xE4ED2C")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xE4ED8C", Offset = "0xE4ED8C", VA = "0xE4ED8C")]
	public void Release()
	{
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0xE4EDA8", Offset = "0xE4EDA8", VA = "0xE4EDA8")]
	public void CursorPos(UnityEngine.Vector3 cursorPos)
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0xE4EDC4", Offset = "0xE4EDC4", VA = "0xE4EDC4")]
	public GrabObject()
	{
	}
}
[Token(Token = "0x2000117")]
public class HandMeshMask : MonoBehaviour
{
	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRSkeleton referenceHand;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material maskMaterial;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The segments around the tip of a finger")]
	public int radialDivisions;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The fade range (finger width is 2x this)")]
	public float borderSize;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Along the fingers, each knuckle scales down by this amount.  Default is zero for uniform width along entire finger.")]
	public float fingerTaper;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("Shorten the last bone of each finger; need this to account for bone structure (end bone is at finger tip instead of center). Default is 1.")]
	public float fingerTipLength;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Move the base of the 4 main fingers towards the tips, to avoid a visible mesh crack between finger webbing. Default is 0.")]
	public float webOffset;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float handScale;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject maskMeshObject;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Mesh maskMesh;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3[] handVertices;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private UnityEngine.Vector2[] handUVs;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color32[] handColors;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int[] handTriangles;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int vertCounter;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int triCounter;

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0xE4F048", Offset = "0xE4F048", VA = "0xE4F048")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0xE4F27C", Offset = "0xE4F27C", VA = "0xE4F27C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0xE4F444", Offset = "0xE4F444", VA = "0xE4F444")]
	private void CreateHandMesh()
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0xE4FA4C", Offset = "0xE4FA4C", VA = "0xE4FA4C")]
	private void AddKnuckleMesh(int knuckleVerts, float point1scale, float point2scale, UnityEngine.Vector3 point1, UnityEngine.Vector3 point2)
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0xE4FFE4", Offset = "0xE4FFE4", VA = "0xE4FFE4")]
	private void AddPalmMesh(int knuckleVerts)
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0xE522EC", Offset = "0xE522EC", VA = "0xE522EC")]
	private void AddVertex(UnityEngine.Vector3 position, UnityEngine.Vector2 uv, Color color)
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xE52660", Offset = "0xE52660", VA = "0xE52660")]
	public HandMeshMask()
	{
	}
}
[Token(Token = "0x2000118")]
public class HandMeshUI : MonoBehaviour
{
	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SphereCollider[] knobs;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh[] readouts;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int rightHeldKnob;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int leftHeldKnob;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public OVRSkeleton leftHand;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public OVRSkeleton rightHand;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HandMeshMask leftMask;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public HandMeshMask rightMask;

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xE52684", Offset = "0xE52684", VA = "0xE52684")]
	private void Start()
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xE529EC", Offset = "0xE529EC", VA = "0xE529EC")]
	private void Update()
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xE52720", Offset = "0xE52720", VA = "0xE52720")]
	private void SetSliderValue(int sliderID, float value, bool isNormalized)
	{
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xE52E54", Offset = "0xE52E54", VA = "0xE52E54")]
	private void CheckForHands()
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0xE533C4", Offset = "0xE533C4", VA = "0xE533C4")]
	public HandMeshUI()
	{
	}
}
[Token(Token = "0x2000119")]
public class ObjectManipulator : MonoBehaviour
{
	[Token(Token = "0x200011A")]
	[CompilerGenerated]
	private sealed class <StartDemo>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectManipulator <>4__this;

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timer>5__2;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <fadeTime>5__3;

		[Token(Token = "0x17000074")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004FA")]
			[Address(RVA = "0xE55BB0", Offset = "0xE55BB0", VA = "0xE55BB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004FC")]
			[Address(RVA = "0xE55BF8", Offset = "0xE55BF8", VA = "0xE55BF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0xE554FC", Offset = "0xE554FC", VA = "0xE554FC")]
		[DebuggerHidden]
		public <StartDemo>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0xE558E4", Offset = "0xE558E4", VA = "0xE558E4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0xE558E8", Offset = "0xE558E8", VA = "0xE558E8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0xE55BB8", Offset = "0xE55BB8", VA = "0xE55BB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRInput.Controller controller;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject hoverObject;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject grabObject;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float grabTime;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private UnityEngine.Vector3 localGrabOffset;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Quaternion localGrabRotation;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3 camGrabPosition;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion camGrabRotation;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private UnityEngine.Vector3 handGrabPosition;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion handGrabRotation;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private UnityEngine.Vector3 cursorPosition;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float rotationOffset;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public LineRenderer laser;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform objectInfo;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public TextMesh objectNameLabel;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public TextMesh objectInstructionsLabel;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Image objectInfoBG;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject demoObjects;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public OVRPassthroughLayer passthrough;

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0xE533D4", Offset = "0xE533D4", VA = "0xE533D4")]
	private void Start()
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0xE535C4", Offset = "0xE535C4", VA = "0xE535C4")]
	private void Update()
	{
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0xE54470", Offset = "0xE54470", VA = "0xE54470")]
	private void GrabHoverObject(GameObject grbObj, UnityEngine.Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0xE55204", Offset = "0xE55204", VA = "0xE55204")]
	private void ReleaseObject()
	{
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0xE5355C", Offset = "0xE5355C", VA = "0xE5355C")]
	[IteratorStateMachine(typeof(<StartDemo>d__23))]
	private IEnumerator StartDemo()
	{
		return null;
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0xE5380C", Offset = "0xE5380C", VA = "0xE5380C")]
	private void FindHoverObject(UnityEngine.Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0xE54764", Offset = "0xE54764", VA = "0xE54764")]
	private void ManipulateObject(GameObject obj, UnityEngine.Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0xE55524", Offset = "0xE55524", VA = "0xE55524")]
	private void ClampGrabOffset(ref UnityEngine.Vector3 localOffset, float thumbY)
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0xE555D8", Offset = "0xE555D8", VA = "0xE555D8")]
	private UnityEngine.Vector3 ClampScale(UnityEngine.Vector3 localScale, UnityEngine.Vector2 thumb)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0xE55608", Offset = "0xE55608", VA = "0xE55608")]
	private void CheckForDominantHand()
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xE553E0", Offset = "0xE553E0", VA = "0xE553E0")]
	private void AssignInstructions(GrabObject targetObject)
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0xE556F8", Offset = "0xE556F8", VA = "0xE556F8")]
	public ObjectManipulator()
	{
	}
}
[Token(Token = "0x200011B")]
public class OverlayPassthrough : MonoBehaviour
{
	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xE55C00", Offset = "0xE55C00", VA = "0xE55C00")]
	private void Start()
	{
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xE55D60", Offset = "0xE55D60", VA = "0xE55D60")]
	private void Update()
	{
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0xE55E14", Offset = "0xE55E14", VA = "0xE55E14")]
	public OverlayPassthrough()
	{
	}
}
[Token(Token = "0x200011C")]
public class PassthroughBrush : MonoBehaviour
{
	[Token(Token = "0x200011D")]
	public enum BrushState
	{
		[Token(Token = "0x40004B5")]
		Idle,
		[Token(Token = "0x40004B6")]
		Inking
	}

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject lineSegmentPrefab;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject lineContainer;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool forceActive;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LineRenderer currentLineSegment;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<UnityEngine.Vector3> inkPositions;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float minInkDist;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float strokeWidth;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float strokeLength;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private BrushState brushStatus;

	[Token(Token = "0x6000500")]
	[Address(RVA = "0xE55E1C", Offset = "0xE55E1C", VA = "0xE55E1C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0xE55E24", Offset = "0xE55E24", VA = "0xE55E24")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0xE560D4", Offset = "0xE560D4", VA = "0xE560D4")]
	private void StartLine(UnityEngine.Vector3 inkPos)
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0xE562F4", Offset = "0xE562F4", VA = "0xE562F4")]
	private void UpdateLine(UnityEngine.Vector3 inkPos)
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0xE56534", Offset = "0xE56534", VA = "0xE56534")]
	public void ClearLines()
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0xE55FEC", Offset = "0xE55FEC", VA = "0xE55FEC")]
	public void UndoInkLine()
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xE56604", Offset = "0xE56604", VA = "0xE56604")]
	public PassthroughBrush()
	{
	}
}
[Token(Token = "0x200011E")]
public class PassthroughController : MonoBehaviour
{
	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xE56694", Offset = "0xE56694", VA = "0xE56694")]
	private void Start()
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0xE567F4", Offset = "0xE567F4", VA = "0xE567F4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0xE569DC", Offset = "0xE569DC", VA = "0xE569DC")]
	public PassthroughController()
	{
	}
}
[Token(Token = "0x200011F")]
public class PassthroughProjectionSurface : MonoBehaviour
{
	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshRenderer quadOutline;

	[Token(Token = "0x600050A")]
	[Address(RVA = "0xE569E4", Offset = "0xE569E4", VA = "0xE569E4")]
	private void Start()
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0xE56BAC", Offset = "0xE56BAC", VA = "0xE56BAC")]
	private void Update()
	{
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0xE56D4C", Offset = "0xE56D4C", VA = "0xE56D4C")]
	public PassthroughProjectionSurface()
	{
	}
}
[Token(Token = "0x2000120")]
public class PassthroughStyler : MonoBehaviour
{
	[Token(Token = "0x2000121")]
	[CompilerGenerated]
	private sealed class <FadeToCurrentStyle>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x40004CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <brightness>5__3;

		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <contrast>5__4;

		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <posterize>5__5;

		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Color <edgeCol>5__6;

		[Token(Token = "0x17000076")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600051F")]
			[Address(RVA = "0xE57958", Offset = "0xE57958", VA = "0xE57958", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000077")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000521")]
			[Address(RVA = "0xE579A0", Offset = "0xE579A0", VA = "0xE579A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600051C")]
		[Address(RVA = "0xE5768C", Offset = "0xE5768C", VA = "0xE5768C")]
		[DebuggerHidden]
		public <FadeToCurrentStyle>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x600051D")]
		[Address(RVA = "0xE577F0", Offset = "0xE577F0", VA = "0xE577F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0xE577F4", Offset = "0xE577F4", VA = "0xE577F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000520")]
		[Address(RVA = "0xE57960", Offset = "0xE57960", VA = "0xE57960", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000122")]
	[CompilerGenerated]
	private sealed class <FadeToDefaultPassthrough>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <brightness>5__3;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <contrast>5__4;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <posterize>5__5;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Color <edgeCol>5__6;

		[Token(Token = "0x17000078")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000525")]
			[Address(RVA = "0xE57B24", Offset = "0xE57B24", VA = "0xE57B24", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000079")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000527")]
			[Address(RVA = "0xE57B6C", Offset = "0xE57B6C", VA = "0xE57B6C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0xE576B4", Offset = "0xE576B4", VA = "0xE576B4")]
		[DebuggerHidden]
		public <FadeToDefaultPassthrough>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0xE579A8", Offset = "0xE579A8", VA = "0xE579A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0xE579AC", Offset = "0xE579AC", VA = "0xE579AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0xE57B2C", Offset = "0xE57B2C", VA = "0xE57B2C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator fadeIn;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator fadeOut;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RectTransform[] menuOptions;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RectTransform colorWheel;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture2D colorTexture;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3 cursorPosition;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool settingColor;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color savedColor;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float savedBrightness;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float savedContrast;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float savedPosterize;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public CanvasGroup mainCanvas;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject[] compactObjects;

	[Token(Token = "0x600050D")]
	[Address(RVA = "0xE56D54", Offset = "0xE56D54", VA = "0xE56D54")]
	private void Start()
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xE57048", Offset = "0xE57048", VA = "0xE57048")]
	private void Update()
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xE573E8", Offset = "0xE573E8", VA = "0xE573E8")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xE57540", Offset = "0xE57540", VA = "0xE57540")]
	public void Release()
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xE574C8", Offset = "0xE574C8", VA = "0xE574C8")]
	[IteratorStateMachine(typeof(<FadeToCurrentStyle>d__19))]
	private IEnumerator FadeToCurrentStyle(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xE57614", Offset = "0xE57614", VA = "0xE57614")]
	[IteratorStateMachine(typeof(<FadeToDefaultPassthrough>d__20))]
	private IEnumerator FadeToDefaultPassthrough(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0xE576DC", Offset = "0xE576DC", VA = "0xE576DC")]
	public void OnBrightnessChanged(float newValue)
	{
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0xE576FC", Offset = "0xE576FC", VA = "0xE576FC")]
	public void OnContrastChanged(float newValue)
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0xE5771C", Offset = "0xE5771C", VA = "0xE5771C")]
	public void OnPosterizeChanged(float newValue)
	{
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0xE5773C", Offset = "0xE5773C", VA = "0xE5773C")]
	public void OnAlphaChanged(float newValue)
	{
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0xE56FE0", Offset = "0xE56FE0", VA = "0xE56FE0")]
	private void ShowFullMenu(bool doShow)
	{
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0xE57770", Offset = "0xE57770", VA = "0xE57770")]
	public void Cursor(UnityEngine.Vector3 cP)
	{
	}

	[Token(Token = "0x6000519")]
	[Address(RVA = "0xE5777C", Offset = "0xE5777C", VA = "0xE5777C")]
	public void DoColorDrag(bool doDrag)
	{
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xE57060", Offset = "0xE57060", VA = "0xE57060")]
	public void GetColorFromWheel()
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0xE57788", Offset = "0xE57788", VA = "0xE57788")]
	public PassthroughStyler()
	{
	}
}
[Token(Token = "0x2000123")]
public class PassthroughSurface : MonoBehaviour
{
	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xE57B74", Offset = "0xE57B74", VA = "0xE57B74")]
	private void Start()
	{
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0xE57C28", Offset = "0xE57C28", VA = "0xE57C28")]
	public PassthroughSurface()
	{
	}
}
[Token(Token = "0x2000124")]
public class SceneSampler : MonoBehaviour
{
	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int currentSceneIndex;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject displayText;

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xE57C30", Offset = "0xE57C30", VA = "0xE57C30")]
	private void Awake()
	{
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xE57C9C", Offset = "0xE57C9C", VA = "0xE57C9C")]
	private void Update()
	{
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xE57F90", Offset = "0xE57F90", VA = "0xE57F90")]
	public SceneSampler()
	{
	}
}
[Token(Token = "0x2000125")]
public class SelectivePassthroughExperience : MonoBehaviour
{
	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject leftMaskObject;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject rightMaskObject;

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xE57F98", Offset = "0xE57F98", VA = "0xE57F98")]
	private void Update()
	{
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xE583EC", Offset = "0xE583EC", VA = "0xE583EC")]
	public SelectivePassthroughExperience()
	{
	}
}
[Token(Token = "0x2000126")]
public class SPPquad : MonoBehaviour
{
	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRInput.Controller controllerHand;

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xE583F4", Offset = "0xE583F4", VA = "0xE583F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xE58614", Offset = "0xE58614", VA = "0xE58614")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0xE58660", Offset = "0xE58660", VA = "0xE58660")]
	public void Release()
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0xE586A0", Offset = "0xE586A0", VA = "0xE586A0")]
	public SPPquad()
	{
	}
}
[Token(Token = "0x2000127")]
public class Anchor : MonoBehaviour
{
	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ulong anchorHandle_;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Canvas canvas_;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform pivot_;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject anchorMenu_;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isSelected_;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool isHovered_;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TextMeshProUGUI anchorName_;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject saveIcon_;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Image labelImage_;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Color labelBaseColor_;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Color labelHighlightColor_;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Color labelSelectedColor_;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private AnchorUIManager uiManager_;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private MeshRenderer[] renderers_;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int menuIndex_;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private List<Button> buttonList_;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Button selectedButton_;

	[Token(Token = "0x1700007A")]
	public ulong anchorHandle
	{
		[Token(Token = "0x6000533")]
		[Address(RVA = "0xE586A8", Offset = "0xE586A8", VA = "0xE586A8")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0xE586B0", Offset = "0xE586B0", VA = "0xE586B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0xE58778", Offset = "0xE58778", VA = "0xE58778")]
	private void Update()
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0xE589D8", Offset = "0xE589D8", VA = "0xE589D8")]
	public void OnSaveLocalButtonPressed()
	{
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0xE58A3C", Offset = "0xE58A3C", VA = "0xE58A3C")]
	public void OnHideButtonPressed()
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0xE58A9C", Offset = "0xE58A9C", VA = "0xE58A9C")]
	public void OnEraseButtonPressed()
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0xE58AFC", Offset = "0xE58AFC", VA = "0xE58AFC")]
	public void OnHoverStart()
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0xE58C18", Offset = "0xE58C18", VA = "0xE58C18")]
	public void OnHoverEnd()
	{
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xE58D20", Offset = "0xE58D20", VA = "0xE58D20")]
	public void OnSelect()
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xE58E24", Offset = "0xE58E24", VA = "0xE58E24")]
	public void SetAnchorHandle(ulong handle)
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xE58EB4", Offset = "0xE58EB4", VA = "0xE58EB4")]
	public void ShowSaveIcon()
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xE587B0", Offset = "0xE587B0", VA = "0xE587B0")]
	private void BillboardPanel(Transform panel)
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xE588E4", Offset = "0xE588E4", VA = "0xE588E4")]
	private void HandleMenuNavigation()
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xE58ED4", Offset = "0xE58ED4", VA = "0xE58ED4")]
	private void NavigateToIndexInMenu(bool moveNext)
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xE58FC0", Offset = "0xE58FC0", VA = "0xE58FC0")]
	public Anchor()
	{
	}
}
[Token(Token = "0x2000128")]
public class AnchorHelpers
{
	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Camera camera;

	[Token(Token = "0x1700007B")]
	private static Camera MainCamera
	{
		[Token(Token = "0x6000542")]
		[Address(RVA = "0xE916D0", Offset = "0xE916D0", VA = "0xE916D0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0xE91770", Offset = "0xE91770", VA = "0xE91770")]
	public static OVRPose getTransformUnityWorldFromDevice()
	{
		return default(OVRPose);
	}

	[Token(Token = "0x6000544")]
	public static T ByteArrayToStruct<T>(byte[] bytes) where T : struct
	{
		return (T)null;
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0xE917BC", Offset = "0xE917BC", VA = "0xE917BC")]
	public static string UuidToString(byte[] encodedMessage)
	{
		return null;
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0xE91A3C", Offset = "0xE91A3C", VA = "0xE91A3C")]
	public static byte[] StringToUuid(string str)
	{
		return null;
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0xE91BA0", Offset = "0xE91BA0", VA = "0xE91BA0")]
	private static int GetHexVal(char hex)
	{
		return default(int);
	}

	[Token(Token = "0x6000548")]
	[Address(RVA = "0xE91C58", Offset = "0xE91C58", VA = "0xE91C58")]
	public AnchorHelpers()
	{
	}
}
[Token(Token = "0x2000129")]
public abstract class AnchorSession : MonoBehaviour
{
	[Token(Token = "0x200012A")]
	public enum StorageLocation
	{
		[Token(Token = "0x40004FE")]
		LOCAL
	}

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AnchorSession Instance;

	[Token(Token = "0x40004F8")]
	public const ulong kInvalidHandle = ulong.MaxValue;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Dictionary<ulong, Anchor> handleToAnchor;

	[Token(Token = "0x40004FA")]
	protected const int maxEvents = 5;

	[Token(Token = "0x40004FB")]
	protected const float eventPollingRate = 0.1f;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected GameObject anchorPrefab_;

	[Token(Token = "0x6000549")]
	[Address(RVA = "0xE91C60", Offset = "0xE91C60", VA = "0xE91C60", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0xE919B0", Offset = "0xE919B0", VA = "0xE919B0")]
	public static void Log(string message)
	{
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0xE91D48", Offset = "0xE91D48", VA = "0xE91D48")]
	protected static bool isFlagSet(uint bitset, uint flag)
	{
		return default(bool);
	}

	[Token(Token = "0x600054C")]
	public abstract ulong CreateSpatialAnchor(Transform T_UnityWorld_Anchor);

	[Token(Token = "0x600054D")]
	public abstract void DestroyAnchor(ulong anchorHandle);

	[Token(Token = "0x600054E")]
	public abstract void SaveAnchor(ulong anchorHandle, StorageLocation location);

	[Token(Token = "0x600054F")]
	public abstract void EraseAnchor(ulong anchorHandle);

	[Token(Token = "0x6000550")]
	public abstract void QueryAllLocalAnchors();

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xE91D54", Offset = "0xE91D54", VA = "0xE91D54")]
	protected AnchorSession()
	{
	}
}
[Token(Token = "0x200012B")]
public class AnchorSpawner : MonoBehaviour
{
	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AnchorSpawner Instance;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject anchorPrefab_;

	[Token(Token = "0x1700007C")]
	public GameObject AnchorPrefab
	{
		[Token(Token = "0x6000552")]
		[Address(RVA = "0xE91DD0", Offset = "0xE91DD0", VA = "0xE91DD0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xE91DD8", Offset = "0xE91DD8", VA = "0xE91DD8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xE91EBC", Offset = "0xE91EBC", VA = "0xE91EBC")]
	public void PlaceAnchorAtTransform(Transform transform)
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xE920E8", Offset = "0xE920E8", VA = "0xE920E8")]
	public AnchorSpawner()
	{
	}
}
[Token(Token = "0x200012C")]
public class AnchorUIManager : MonoBehaviour
{
	[Token(Token = "0x200012D")]
	public enum AnchorMode
	{
		[Token(Token = "0x4000513")]
		Create,
		[Token(Token = "0x4000514")]
		Select
	}

	[Token(Token = "0x200012E")]
	private delegate void PrimaryPressDelegate();

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AnchorUIManager Instance;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject createModeButton_;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject selectModeButton_;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform trackedDevice_;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform raycastOrigin_;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool drawRaycast_;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private LineRenderer lineRenderer_;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Anchor hoveredAnchor_;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Anchor selectedAnchor_;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AnchorMode mode_;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private List<Button> buttonList_;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int menuIndex_;

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Button selectedButton_;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private GameObject placementPreview_;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Transform anchorPlacementTransform_;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private PrimaryPressDelegate primaryPressDelegate_;

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool isFocused_;

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xE920F0", Offset = "0xE920F0", VA = "0xE920F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xE921B0", Offset = "0xE921B0", VA = "0xE921B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xE922D0", Offset = "0xE922D0", VA = "0xE922D0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xE92748", Offset = "0xE92748", VA = "0xE92748")]
	public void OnCreateModeButtonPressed()
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0xE927B4", Offset = "0xE927B4", VA = "0xE927B4")]
	public void OnLoadAnchorsButtonPressed()
	{
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0xE92280", Offset = "0xE92280", VA = "0xE92280")]
	private void ToggleCreateMode()
	{
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0xE92824", Offset = "0xE92824", VA = "0xE92824")]
	private void StartPlacementMode()
	{
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0xE928A4", Offset = "0xE928A4", VA = "0xE928A4")]
	private void EndPlacementMode()
	{
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0xE928BC", Offset = "0xE928BC", VA = "0xE928BC")]
	private void StartSelectMode()
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0xE9280C", Offset = "0xE9280C", VA = "0xE9280C")]
	private void EndSelectMode()
	{
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0xE92654", Offset = "0xE92654", VA = "0xE92654")]
	private void HandleMenuNavigation()
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0xE92A80", Offset = "0xE92A80", VA = "0xE92A80")]
	private void NavigateToIndexInMenu(bool moveNext)
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0xE9293C", Offset = "0xE9293C", VA = "0xE9293C")]
	private void ShowAnchorPreview()
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0xE929F4", Offset = "0xE929F4", VA = "0xE929F4")]
	private void HideAnchorPreview()
	{
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0xE92B6C", Offset = "0xE92B6C", VA = "0xE92B6C")]
	private void PlaceAnchor()
	{
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0xE92A14", Offset = "0xE92A14", VA = "0xE92A14")]
	private void ShowRaycastLine()
	{
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0xE92A4C", Offset = "0xE92A4C", VA = "0xE92A4C")]
	private void HideRaycastLine()
	{
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0xE923D0", Offset = "0xE923D0", VA = "0xE923D0")]
	private void ControllerRaycast()
	{
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0xE92BC4", Offset = "0xE92BC4", VA = "0xE92BC4")]
	private void HoverAnchor(Anchor anchor)
	{
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0xE92BE4", Offset = "0xE92BE4", VA = "0xE92BE4")]
	private void UnhoverAnchor()
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0xE92C64", Offset = "0xE92C64", VA = "0xE92C64")]
	private void SelectAnchor()
	{
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0xE92D88", Offset = "0xE92D88", VA = "0xE92D88")]
	public AnchorUIManager()
	{
	}
}
[Token(Token = "0x200012F")]
public class SpatialAnchorSession : AnchorSession
{
	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Dictionary<ulong, ulong> locateAnchorRequest;

	[Token(Token = "0x4000516")]
	private const string numUuids = "numUuids";

	[Token(Token = "0x6000570")]
	[Address(RVA = "0xE92DD8", Offset = "0xE92DD8", VA = "0xE92DD8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0xE92FD4", Offset = "0xE92FD4", VA = "0xE92FD4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0xE931D0", Offset = "0xE931D0", VA = "0xE931D0")]
	private void SpatialEntitySetComponentEnabled(ulong requestId, bool result, OVRPlugin.SpatialEntityComponentType componentType, ulong space)
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0xE933D0", Offset = "0xE933D0", VA = "0xE933D0")]
	private void SpatialAnchorSaved(ulong requestId, ulong space, bool result, OVRPlugin.SpatialEntityUuid uuid)
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0xE93830", Offset = "0xE93830", VA = "0xE93830")]
	private void SpatialEntityStorageErase(ulong requestId, bool result, OVRPlugin.SpatialEntityUuid uuid, OVRPlugin.SpatialEntityStorageLocation location)
	{
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0xE93AD0", Offset = "0xE93AD0", VA = "0xE93AD0")]
	private void SpatialEntityQueryResults(ulong requestId, int numResults, OVRPlugin.SpatialEntityQueryResult[] results)
	{
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0xE940E4", Offset = "0xE940E4", VA = "0xE940E4")]
	private void SpatialEntityQueryComplete(ulong requestId, bool result, int numFound)
	{
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0xE93764", Offset = "0xE93764", VA = "0xE93764")]
	private string GetUuidString(OVRPlugin.SpatialEntityUuid uuid)
	{
		return null;
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0xE93D5C", Offset = "0xE93D5C", VA = "0xE93D5C")]
	private void tryEnableComponent(ulong anchorHandle, OVRPlugin.SpatialEntityComponentType type)
	{
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0xE932BC", Offset = "0xE932BC", VA = "0xE932BC")]
	private void CreateAnchorGameobject(ulong anchorHandle)
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0xE942D4", Offset = "0xE942D4", VA = "0xE942D4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0xE94594", Offset = "0xE94594", VA = "0xE94594", Slot = "5")]
	public override ulong CreateSpatialAnchor(Transform T_UnityWorld_Anchor)
	{
		return default(ulong);
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0xE94724", Offset = "0xE94724", VA = "0xE94724", Slot = "6")]
	public override void DestroyAnchor(ulong anchorHandle)
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0xE948C4", Offset = "0xE948C4", VA = "0xE948C4", Slot = "8")]
	public override void EraseAnchor(ulong anchorHandle)
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0xE94A74", Offset = "0xE94A74", VA = "0xE94A74")]
	public void QueryAnchorByUuid()
	{
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0xE94CD4", Offset = "0xE94CD4", VA = "0xE94CD4", Slot = "9")]
	public override void QueryAllLocalAnchors()
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0xE94DD8", Offset = "0xE94DD8", VA = "0xE94DD8", Slot = "7")]
	public override void SaveAnchor(ulong anchorHandle, StorageLocation location)
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0xE94F1C", Offset = "0xE94F1C", VA = "0xE94F1C")]
	public SpatialAnchorSession()
	{
	}
}
[Token(Token = "0x2000130")]
public class StartMenu : MonoBehaviour
{
	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVROverlay overlay;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVROverlay text;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig vrRig;

	[Token(Token = "0x6000582")]
	[Address(RVA = "0xE94F94", Offset = "0xE94F94", VA = "0xE94F94")]
	private void Start()
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0xE95198", Offset = "0xE95198", VA = "0xE95198")]
	private void LoadScene(int idx)
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0xE9529C", Offset = "0xE9529C", VA = "0xE9529C")]
	public StartMenu()
	{
	}
}
[Token(Token = "0x2000132")]
public class GE_Elementals_Demo : MonoBehaviour
{
	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color m_ColorFire;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color m_ColorWater;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Color m_ColorWind;

	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Color m_ColorEarth;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Color m_ColorThunder;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Color m_ColorIce;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Color m_ColorLight;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Color m_ColorDarkness;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject[] m_PrefabListFire;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject[] m_PrefabListWater;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject[] m_PrefabListWind;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject[] m_PrefabListEarth;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject[] m_PrefabListThunder;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject[] m_PrefabListIce;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject[] m_PrefabListLight;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject[] m_PrefabListDarkness;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private int m_CurrentCategoryIndex;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private int m_CurrentParticleIndex;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private string m_CategoryName;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private string m_ParticleName;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private GameObject[] m_CurrentCategory;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private GameObject m_CurrentParticle;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Text m_Category;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Text m_Particle;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private UnityEngine.Vector3 m_PreviousMousePosition;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private bool m_ShowParticleWhenTouchEnded;

	[Token(Token = "0x6000587")]
	[Address(RVA = "0xE952C0", Offset = "0xE952C0", VA = "0xE952C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0xE95A84", Offset = "0xE95A84", VA = "0xE95A84")]
	private void Update()
	{
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0xE95CB4", Offset = "0xE95CB4", VA = "0xE95CB4")]
	public void PreviousCategory()
	{
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0xE95CC4", Offset = "0xE95CC4", VA = "0xE95CC4")]
	public void NextCategory()
	{
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0xE95CD4", Offset = "0xE95CD4", VA = "0xE95CD4")]
	public void PreviousParticle()
	{
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0xE95CE4", Offset = "0xE95CE4", VA = "0xE95CE4")]
	public void NextParticle()
	{
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0xE9535C", Offset = "0xE9535C", VA = "0xE9535C")]
	public void ShowParticle()
	{
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0xE95CF4", Offset = "0xE95CF4", VA = "0xE95CF4")]
	public GE_Elementals_Demo()
	{
	}
}
[Token(Token = "0x2000133")]
public class CameraHolder : MonoBehaviour
{
	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform Holder;

	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float currDistance;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float xRotate;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float yRotate;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float yMinLimit;

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float yMaxLimit;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float prevDistance;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float x;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float y;

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float windowDpi;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GUIStyle screenGUI;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject[] Prefabs;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int Prefab;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject Instance;

	[Token(Token = "0x600058F")]
	[Address(RVA = "0xE95D70", Offset = "0xE95D70", VA = "0xE95D70")]
	private void Start()
	{
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0xE95F74", Offset = "0xE95F74", VA = "0xE95F74")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0xE95E58", Offset = "0xE95E58", VA = "0xE95E58")]
	private void Counter(int count)
	{
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0xE960BC", Offset = "0xE960BC", VA = "0xE960BC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0xE964DC", Offset = "0xE964DC", VA = "0xE964DC")]
	private static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0xE96518", Offset = "0xE96518", VA = "0xE96518")]
	public CameraHolder()
	{
	}
}
[Token(Token = "0x2000134")]
public class CameraShakeSimpleScript : MonoBehaviour
{
	[Token(Token = "0x2000135")]
	[CompilerGenerated]
	private sealed class <Shake>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CameraShakeSimpleScript <>4__this;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float amount;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float duration;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Vector3 <originalPos>5__2;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int <counter>5__3;

		[Token(Token = "0x1700007D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600059D")]
			[Address(RVA = "0xE96990", Offset = "0xE96990", VA = "0xE96990", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600059F")]
			[Address(RVA = "0xE969D8", Offset = "0xE969D8", VA = "0xE969D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0xE96744", Offset = "0xE96744", VA = "0xE96744")]
		[DebuggerHidden]
		public <Shake>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0xE96774", Offset = "0xE96774", VA = "0xE96774", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0xE96778", Offset = "0xE96778", VA = "0xE96778", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0xE96998", Offset = "0xE96998", VA = "0xE96998", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isRunning;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animation anim;

	[Token(Token = "0x6000595")]
	[Address(RVA = "0xE96594", Offset = "0xE96594", VA = "0xE96594")]
	private void Start()
	{
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0xE965E4", Offset = "0xE965E4", VA = "0xE965E4")]
	public void ShakeCamera()
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0xE966A8", Offset = "0xE966A8", VA = "0xE966A8")]
	public void ShakeCaller(float amount, float duration)
	{
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0xE966C8", Offset = "0xE966C8", VA = "0xE966C8")]
	[IteratorStateMachine(typeof(<Shake>d__5))]
	private IEnumerator Shake(float amount, float duration)
	{
		return null;
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0xE9676C", Offset = "0xE9676C", VA = "0xE9676C")]
	public CameraShakeSimpleScript()
	{
	}
}
[Token(Token = "0x2000136")]
public class ProjectileMoveScript : MonoBehaviour
{
	[Token(Token = "0x2000137")]
	[CompilerGenerated]
	private sealed class <DestroyParticle>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ProjectileMoveScript <>4__this;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float waitTime;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Transform> <tList>5__2;

		[Token(Token = "0x1700007F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005A9")]
			[Address(RVA = "0xE97CCC", Offset = "0xE97CCC", VA = "0xE97CCC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000080")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005AB")]
			[Address(RVA = "0xE97D14", Offset = "0xE97D14", VA = "0xE97D14", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0xE9767C", Offset = "0xE9767C", VA = "0xE9767C")]
		[DebuggerHidden]
		public <DestroyParticle>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0xE976C4", Offset = "0xE976C4", VA = "0xE976C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0xE976C8", Offset = "0xE976C8", VA = "0xE976C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0xE97CD4", Offset = "0xE97CD4", VA = "0xE97CD4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool rotate;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float rotateAmount;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool bounce;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float bounceForce;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speed;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("From 0% to 100%")]
	public float accuracy;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float fireRate;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject muzzlePrefab;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject hitPrefab;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<GameObject> trails;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3 startPos;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float speedRandomness;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private UnityEngine.Vector3 offset;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool collided;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Rigidbody rb;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private RotateToMouseScript rotateToMouse;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameObject target;

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0xE969E0", Offset = "0xE969E0", VA = "0xE969E0")]
	private void Start()
	{
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0xE96D14", Offset = "0xE96D14", VA = "0xE96D14")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0xE96FBC", Offset = "0xE96FBC", VA = "0xE96FBC")]
	private void OnCollisionEnter(Collision co)
	{
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0xE97604", Offset = "0xE97604", VA = "0xE97604")]
	[IteratorStateMachine(typeof(<DestroyParticle>d__20))]
	public IEnumerator DestroyParticle(float waitTime)
	{
		return null;
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0xE976A4", Offset = "0xE976A4", VA = "0xE976A4")]
	public void SetTarget(GameObject trg, RotateToMouseScript rotateTo)
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0xE976AC", Offset = "0xE976AC", VA = "0xE976AC")]
	public ProjectileMoveScript()
	{
	}
}
[Token(Token = "0x2000138")]
public class RotateToMouseScript : MonoBehaviour
{
	[Token(Token = "0x2000139")]
	[CompilerGenerated]
	private sealed class <UpdateRay>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RotateToMouseScript <>4__this;

		[Token(Token = "0x17000081")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005B7")]
			[Address(RVA = "0xE98160", Offset = "0xE98160", VA = "0xE98160", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000082")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005B9")]
			[Address(RVA = "0xE981A8", Offset = "0xE981A8", VA = "0xE981A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0xE97DA4", Offset = "0xE97DA4", VA = "0xE97DA4")]
		[DebuggerHidden]
		public <UpdateRay>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0xE97E68", Offset = "0xE97E68", VA = "0xE97E68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0xE97E6C", Offset = "0xE97E6C", VA = "0xE97E6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0xE98168", Offset = "0xE98168", VA = "0xE98168", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maximumLenght;

	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool use2D;

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Ray rayMouse;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.Vector3 pos;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private UnityEngine.Vector3 direction;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion rotation;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Camera cam;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private WaitForSeconds updateTime;

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0xE97D1C", Offset = "0xE97D1C", VA = "0xE97D1C")]
	public void StartUpdateRay()
	{
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0xE97D3C", Offset = "0xE97D3C", VA = "0xE97D3C")]
	[IteratorStateMachine(typeof(<UpdateRay>d__9))]
	private IEnumerator UpdateRay()
	{
		return null;
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0xE96EEC", Offset = "0xE96EEC", VA = "0xE96EEC")]
	public void RotateToMouse(GameObject obj, UnityEngine.Vector3 destination)
	{
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0xE97DCC", Offset = "0xE97DCC", VA = "0xE97DCC")]
	public void Set2D(bool state)
	{
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0xE97DD8", Offset = "0xE97DD8", VA = "0xE97DD8")]
	public void SetCamera(Camera camera)
	{
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0xE97DE0", Offset = "0xE97DE0", VA = "0xE97DE0")]
	public UnityEngine.Vector3 GetDirection()
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0xE97DEC", Offset = "0xE97DEC", VA = "0xE97DEC")]
	public Quaternion GetRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0xE97DF8", Offset = "0xE97DF8", VA = "0xE97DF8")]
	public RotateToMouseScript()
	{
	}
}
[Token(Token = "0x200013A")]
public class SpawnProjectilesScript : MonoBehaviour
{
	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool useTarget;

	[Token(Token = "0x400056F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool use2D;

	[Token(Token = "0x4000570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool cameraShake;

	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text effectName;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RotateToMouseScript rotateToMouse;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject firePoint;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject cameras;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject target;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<GameObject> VFXs;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int count;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float timeToFire;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject effectToSpawn;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<Camera> camerasList;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Camera singleCamera;

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0xE981B0", Offset = "0xE981B0", VA = "0xE981B0")]
	private void Start()
	{
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0xE98640", Offset = "0xE98640", VA = "0xE98640")]
	private void Update()
	{
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0xE987B0", Offset = "0xE987B0", VA = "0xE987B0")]
	public void SpawnVFX()
	{
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0xE98B40", Offset = "0xE98B40", VA = "0xE98B40")]
	public void Next()
	{
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0xE98C68", Offset = "0xE98C68", VA = "0xE98C68")]
	public void Previous()
	{
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0xE98F10", Offset = "0xE98F10", VA = "0xE98F10")]
	public void CameraShake()
	{
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0xE98F20", Offset = "0xE98F20", VA = "0xE98F20")]
	public void ZoomIn()
	{
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0xE990A4", Offset = "0xE990A4", VA = "0xE990A4")]
	public void ZoomOut()
	{
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0xE98D8C", Offset = "0xE98D8C", VA = "0xE98D8C")]
	public void SwitchCamera()
	{
	}

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0xE99224", Offset = "0xE99224", VA = "0xE99224")]
	public SpawnProjectilesScript()
	{
	}
}
[Token(Token = "0x200013B")]
public class DemoShooting : MonoBehaviour
{
	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject FirePoint;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Camera Cam;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float MaxLength;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] Prefabs;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Ray RayMouse;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3 direction;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion rotation;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Header("GUI")]
	private float windowDpi;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int Prefab;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GameObject Instance;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float hSliderValue;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float fireCountdown;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float buttonSaver;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Animation camAnim;

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0xE992E4", Offset = "0xE992E4", VA = "0xE992E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0xE99394", Offset = "0xE99394", VA = "0xE99394")]
	private void Update()
	{
	}

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0xE998A4", Offset = "0xE998A4", VA = "0xE998A4")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0xE99350", Offset = "0xE99350", VA = "0xE99350")]
	private void Counter(int count)
	{
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0xE997D4", Offset = "0xE997D4", VA = "0xE997D4")]
	private void RotateToMouseDirection(GameObject obj, UnityEngine.Vector3 destination)
	{
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0xE99AD8", Offset = "0xE99AD8", VA = "0xE99AD8")]
	public DemoShooting()
	{
	}
}
[Token(Token = "0x200013C")]
public class AutoDestroyPS : MonoBehaviour
{
	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float timeLeft;

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0xE99AEC", Offset = "0xE99AEC", VA = "0xE99AEC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0xE99BC8", Offset = "0xE99BC8", VA = "0xE99BC8")]
	public AutoDestroyPS()
	{
	}
}
[Token(Token = "0x200013D")]
public class ProjectileMover : MonoBehaviour
{
	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float hitOffset;

	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool UseFirePointRotation;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public UnityEngine.Vector3 rotationOffset;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject hit;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject flash;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Rigidbody rb;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] Detached;

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0xE99BD0", Offset = "0xE99BD0", VA = "0xE99BD0")]
	private void Start()
	{
	}

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0xE99E70", Offset = "0xE99E70", VA = "0xE99E70")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0xE99ED8", Offset = "0xE99ED8", VA = "0xE99ED8")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0xE9A438", Offset = "0xE9A438", VA = "0xE9A438")]
	public ProjectileMover()
	{
	}
}
[Token(Token = "0x200013E")]
public class MagicLoadSceneOnClick : MonoBehaviour
{
	[Token(Token = "0x60005D0")]
	[Address(RVA = "0xE9A450", Offset = "0xE9A450", VA = "0xE9A450")]
	public void LoadSceneProjectiles()
	{
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0xE9A4B8", Offset = "0xE9A4B8", VA = "0xE9A4B8")]
	public void LoadSceneSprays()
	{
	}

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0xE9A520", Offset = "0xE9A520", VA = "0xE9A520")]
	public void LoadSceneAura()
	{
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0xE9A588", Offset = "0xE9A588", VA = "0xE9A588")]
	public void LoadSceneModular()
	{
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0xE9A5F0", Offset = "0xE9A5F0", VA = "0xE9A5F0")]
	public void LoadSceneShields2()
	{
	}

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0xE9A658", Offset = "0xE9A658", VA = "0xE9A658")]
	public void LoadSceneShields()
	{
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0xE9A6C0", Offset = "0xE9A6C0", VA = "0xE9A6C0")]
	public void LoadSceneSphereBlast()
	{
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0xE9A728", Offset = "0xE9A728", VA = "0xE9A728")]
	public void LoadSceneEnchant()
	{
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0xE9A790", Offset = "0xE9A790", VA = "0xE9A790")]
	public void LoadSceneSlash()
	{
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0xE9A7F8", Offset = "0xE9A7F8", VA = "0xE9A7F8")]
	public void LoadSceneCharge()
	{
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0xE9A860", Offset = "0xE9A860", VA = "0xE9A860")]
	public void LoadSceneCleave()
	{
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0xE9A8C8", Offset = "0xE9A8C8", VA = "0xE9A8C8")]
	public void LoadSceneAura2()
	{
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0xE9A930", Offset = "0xE9A930", VA = "0xE9A930")]
	public void LoadSceneWalls()
	{
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0xE9A998", Offset = "0xE9A998", VA = "0xE9A998")]
	public void LoadSceneBeams()
	{
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0xE9AA00", Offset = "0xE9AA00", VA = "0xE9AA00")]
	public void LoadSceneMeshGlow()
	{
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0xE9AA68", Offset = "0xE9AA68", VA = "0xE9AA68")]
	public void LoadScenePillarBlast()
	{
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0xE9AAD0", Offset = "0xE9AAD0", VA = "0xE9AAD0")]
	public MagicLoadSceneOnClick()
	{
	}
}
[Token(Token = "0x200013F")]
public class MagicProjectileScript : MonoBehaviour
{
	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject impactParticle;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject projectileParticle;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject muzzleParticle;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] trailParticles;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public UnityEngine.Vector3 impactNormal;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool hasCollided;

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0xE9AAD8", Offset = "0xE9AAD8", VA = "0xE9AAD8")]
	private void Start()
	{
	}

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0xE9ACD8", Offset = "0xE9ACD8", VA = "0xE9ACD8")]
	private void OnCollisionEnter(Collision hit)
	{
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0xE9B0E0", Offset = "0xE9B0E0", VA = "0xE9B0E0")]
	public MagicProjectileScript()
	{
	}
}
[Token(Token = "0x2000140")]
public class MagicBeamScript : MonoBehaviour
{
	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Prefabs")]
	public GameObject[] beamLineRendererPrefab;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] beamStartPrefab;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] beamEndPrefab;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int currentBeam;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject beamStart;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject beamEnd;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject beam;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private LineRenderer line;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Adjustable Variables")]
	public float beamEndOffset;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float textureScrollSpeed;

	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float textureLengthScale;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Put Sliders here (Optional)")]
	public Slider endOffSetSlider;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Slider scrollSpeedSlider;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Put UI Text object here to show beam name")]
	public Text textBeamName;

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0xE9B0E8", Offset = "0xE9B0E8", VA = "0xE9B0E8")]
	private void Start()
	{
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0xE9B228", Offset = "0xE9B228", VA = "0xE9B228")]
	private void Update()
	{
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0xE9BA44", Offset = "0xE9BA44", VA = "0xE9BA44")]
	public void nextBeam()
	{
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0xE9BB24", Offset = "0xE9BB24", VA = "0xE9BB24")]
	public void previousBeam()
	{
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0xE9BC04", Offset = "0xE9BC04", VA = "0xE9BC04")]
	public void UpdateEndOffset()
	{
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0xE9BC34", Offset = "0xE9BC34", VA = "0xE9BC34")]
	public void UpdateScrollSpeed()
	{
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0xE9B620", Offset = "0xE9B620", VA = "0xE9B620")]
	private void ShootBeamInDir(UnityEngine.Vector3 start, UnityEngine.Vector3 dir)
	{
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0xE9BC64", Offset = "0xE9BC64", VA = "0xE9BC64")]
	public MagicBeamScript()
	{
	}
}
[Token(Token = "0x2000141")]
public class MagicLightFlicker : MonoBehaviour
{
	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string waveFunction;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float startValue;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float amplitude;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float phase;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float frequency;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Color originalColor;

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0xE9BC80", Offset = "0xE9BC80", VA = "0xE9BC80")]
	private void Start()
	{
	}

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0xE9BCE4", Offset = "0xE9BCE4", VA = "0xE9BCE4")]
	private void Update()
	{
	}

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0xE9BD78", Offset = "0xE9BD78", VA = "0xE9BD78")]
	private float EvalWave()
	{
		return default(float);
	}

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0xE9BF44", Offset = "0xE9BF44", VA = "0xE9BF44")]
	public MagicLightFlicker()
	{
	}
}
[Token(Token = "0x2000142")]
public class RainbowCameraOrbit : MonoBehaviour
{
	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float xSpeed;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float ySpeed;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float yMinLimit;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float yMaxLimit;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float distanceMin;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float distanceMax;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float smoothTime;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float rotationYAxis;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float rotationXAxis;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float velocityX;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float velocityY;

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0xE9BFA4", Offset = "0xE9BFA4", VA = "0xE9BFA4")]
	private void Start()
	{
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0xE9C070", Offset = "0xE9C070", VA = "0xE9C070")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0xE9C3EC", Offset = "0xE9C3EC", VA = "0xE9C3EC")]
	public static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0xE9C428", Offset = "0xE9C428", VA = "0xE9C428")]
	public RainbowCameraOrbit()
	{
	}
}
[Token(Token = "0x2000143")]
public class ButtonTest : MonoBehaviour
{
	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private InputDevice contrllerR;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private InputDevice headController;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private InputDevice contrllerL;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_AxisToPressThreshold;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject dbugGameObj;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Dictionary<string, DebugText> DebugText_Dic;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform headInfoRoot;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform leftControllerInfoRoot;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform rightControllerInfoRoot;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float delte;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int flag;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int[] amplit;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int time;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool lastState_trigger;

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0xE9C444", Offset = "0xE9C444", VA = "0xE9C444")]
	public void Start()
	{
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0xE9C890", Offset = "0xE9C890", VA = "0xE9C890")]
	public void AddDebugText(string name, string info, Transform root)
	{
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0xE9CBAC", Offset = "0xE9CBAC", VA = "0xE9CBAC")]
	private void Update()
	{
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0xE9E240", Offset = "0xE9E240", VA = "0xE9E240")]
	public ButtonTest()
	{
	}
}
[Token(Token = "0x2000144")]
public class DebugText : MonoBehaviour
{
	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text text;

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0xE9E314", Offset = "0xE9E314", VA = "0xE9E314")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0xE9E398", Offset = "0xE9E398", VA = "0xE9E398")]
	private void Start()
	{
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0xE9CB24", Offset = "0xE9CB24", VA = "0xE9CB24")]
	public void SetText(string info)
	{
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0xE9E39C", Offset = "0xE9E39C", VA = "0xE9E39C")]
	private void Update()
	{
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0xE9E3A0", Offset = "0xE9E3A0", VA = "0xE9E3A0")]
	public DebugText()
	{
	}
}
[Token(Token = "0x2000145")]
internal interface ImeBase
{
	[Token(Token = "0x60005FD")]
	bool Create(ImeDelegateBase pDelegate);

	[Token(Token = "0x60005FE")]
	void GetSize(ref UnityEngine.Vector2 size);

	[Token(Token = "0x60005FF")]
	void Draw(Texture2D tex);

	[Token(Token = "0x6000600")]
	void OnTouch(float x, float y, SGImeMotionEventType type);

	[Token(Token = "0x6000601")]
	void UpdateData();

	[Token(Token = "0x6000602")]
	void Show(SGImeInputType typeInput, SGImeTextType typeText);

	[Token(Token = "0x6000603")]
	void Hide();

	[Token(Token = "0x6000604")]
	bool IsShow();
}
[Token(Token = "0x2000146")]
public enum SGImeError
{
	[Token(Token = "0x40005CA")]
	UNKNOWN,
	[Token(Token = "0x40005CB")]
	SERVICE_NOT_CONNECTED
}
[Token(Token = "0x2000147")]
public enum SGImeKey
{
	[Token(Token = "0x40005CD")]
	KEYCODE_COMMIT = -1,
	[Token(Token = "0x40005CE")]
	KEYCODE_UNKNOWN = 0,
	[Token(Token = "0x40005CF")]
	KEYCODE_ENTER = 66,
	[Token(Token = "0x40005D0")]
	KEYCODE_DEL = 67,
	[Token(Token = "0x40005D1")]
	KEYCODE_VOICE_START = 1000,
	[Token(Token = "0x40005D2")]
	KEYCODE_VOICE_END = 1001
}
[Token(Token = "0x2000148")]
public enum SGImeInputType
{
	[Token(Token = "0x40005D4")]
	TYPE_CLASS_TEXT = 1,
	[Token(Token = "0x40005D5")]
	TYPE_CLASS_NUMBER,
	[Token(Token = "0x40005D6")]
	TYPE_CLASS_PHONE,
	[Token(Token = "0x40005D7")]
	TYPE_CLASS_DATETIME,
	[Token(Token = "0x40005D8")]
	TYPE_CLASS_MUTE_TEXT
}
[Token(Token = "0x2000149")]
public enum SGImeTextType
{
	[Token(Token = "0x40005DA")]
	TYPE_TEXT_VARIATION_NORMAL = 0,
	[Token(Token = "0x40005DB")]
	TYPE_TEXT_VARIATION_URI = 16,
	[Token(Token = "0x40005DC")]
	TYPE_TEXT_VARIATION_EMAIL_ADDRESS = 32,
	[Token(Token = "0x40005DD")]
	TYPE_TEXT_VARIATION_EMAIL_SUBJECT = 48,
	[Token(Token = "0x40005DE")]
	TYPE_TEXT_VARIATION_SHORT_MESSAGE = 64,
	[Token(Token = "0x40005DF")]
	TYPE_TEXT_VARIATION_LONG_MESSAGE = 80,
	[Token(Token = "0x40005E0")]
	TYPE_TEXT_VARIATION_PERSON_NAME = 96,
	[Token(Token = "0x40005E1")]
	TYPE_TEXT_VARIATION_POSTAL_ADDRESS = 112,
	[Token(Token = "0x40005E2")]
	TYPE_TEXT_VARIATION_PASSWORD = 128,
	[Token(Token = "0x40005E3")]
	TYPE_TEXT_VARIATION_VISIBLE_PASSWORD = 144,
	[Token(Token = "0x40005E4")]
	TYPE_TEXT_VARIATION_WEB_EDIT_TEXT = 160,
	[Token(Token = "0x40005E5")]
	TYPE_TEXT_VARIATION_FILTER = 176,
	[Token(Token = "0x40005E6")]
	TYPE_TEXT_VARIATION_PHONETIC = 192,
	[Token(Token = "0x40005E7")]
	TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS = 208,
	[Token(Token = "0x40005E8")]
	TYPE_TEXT_VARIATION_WEB_PASSWORD = 224
}
[Token(Token = "0x200014A")]
public enum SGImeMotionEventType
{
	[Token(Token = "0x40005EA")]
	ACTION_DOWN = 0,
	[Token(Token = "0x40005EB")]
	ACTION_UP = 1,
	[Token(Token = "0x40005EC")]
	ACTION_MOVE = 2,
	[Token(Token = "0x40005ED")]
	ACTION_CANCEL = 3,
	[Token(Token = "0x40005EE")]
	ACTION_OUTSIDE = 4,
	[Token(Token = "0x40005EF")]
	ACTION_POINTER_DOWN = 5,
	[Token(Token = "0x40005F0")]
	ACTION_POINTER_UP = 6,
	[Token(Token = "0x40005F1")]
	ACTION_HOVER_MOVE = 7,
	[Token(Token = "0x40005F2")]
	ACTION_SCROLL = 8,
	[Token(Token = "0x40005F3")]
	ACTION_HOVER_ENTER = 9,
	[Token(Token = "0x40005F4")]
	ACTION_HOVER_EXIT = 10,
	[Token(Token = "0x40005F5")]
	ACTION_BUTTON_PRESS = 11,
	[Token(Token = "0x40005F6")]
	ACTION_BUTTON_RELEASE = 12,
	[Token(Token = "0x40005F7")]
	ACTION_LONGPRESS = 100
}
[Token(Token = "0x200014B")]
public abstract class ImeDelegateBase : MonoBehaviour
{
	[Token(Token = "0x6000605")]
	public abstract void OnIMEShow(UnityEngine.Vector2 vSize);

	[Token(Token = "0x6000606")]
	public abstract void OnIMEHide();

	[Token(Token = "0x6000607")]
	public abstract void OnIMECommit(string strCommit);

	[Token(Token = "0x6000608")]
	public abstract void OnIMEKey(SGImeKey key);

	[Token(Token = "0x6000609")]
	public abstract void OnIMEError(SGImeError nType, string strErr);

	[Token(Token = "0x600060A")]
	public abstract void SetPose(Action<Transform> fun);

	[Token(Token = "0x600060B")]
	public abstract Transform GetTransform();

	[Token(Token = "0x600060C")]
	[Address(RVA = "0xE9E3A8", Offset = "0xE9E3A8", VA = "0xE9E3A8")]
	protected ImeDelegateBase()
	{
	}
}
[Token(Token = "0x200014C")]
public class DummyIme : ImeBase
{
	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private ImeDelegateBase mDelegate;

	[Token(Token = "0x600060D")]
	[Address(RVA = "0xE9E3B0", Offset = "0xE9E3B0", VA = "0xE9E3B0", Slot = "4")]
	public bool Create(ImeDelegateBase pDelegate)
	{
		return default(bool);
	}

	[Token(Token = "0x600060E")]
	[Address(RVA = "0xE9E434", Offset = "0xE9E434", VA = "0xE9E434", Slot = "5")]
	public void GetSize(ref UnityEngine.Vector2 size)
	{
	}

	[Token(Token = "0x600060F")]
	[Address(RVA = "0xE9E4B0", Offset = "0xE9E4B0", VA = "0xE9E4B0", Slot = "6")]
	public void Draw(Texture2D tex)
	{
	}

	[Token(Token = "0x6000610")]
	[Address(RVA = "0xE9E4B4", Offset = "0xE9E4B4", VA = "0xE9E4B4", Slot = "7")]
	public void OnTouch(float x, float y, SGImeMotionEventType type)
	{
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0xE9E4B8", Offset = "0xE9E4B8", VA = "0xE9E4B8", Slot = "8")]
	public void UpdateData()
	{
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0xE9E4BC", Offset = "0xE9E4BC", VA = "0xE9E4BC", Slot = "9")]
	public void Show(SGImeInputType typeInput, SGImeTextType typeText)
	{
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0xE9E60C", Offset = "0xE9E60C", VA = "0xE9E60C", Slot = "10")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0xE9E690", Offset = "0xE9E690", VA = "0xE9E690", Slot = "11")]
	public bool IsShow()
	{
		return default(bool);
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0xE9E698", Offset = "0xE9E698", VA = "0xE9E698")]
	public DummyIme()
	{
	}
}
[Token(Token = "0x200014D")]
public class SGIme : ImeBase
{
	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool mUseAndroid;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AndroidJavaObject javaIme;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ImeDelegateBase mDelegate;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.Vector2 mTextureSize;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string mStrCommit;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool mShow;

	[Token(Token = "0x6000616")]
	[Address(RVA = "0xE9E6A0", Offset = "0xE9E6A0", VA = "0xE9E6A0", Slot = "4")]
	public bool Create(ImeDelegateBase pDelegate)
	{
		return default(bool);
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0xE9EB74", Offset = "0xE9EB74", VA = "0xE9EB74", Slot = "5")]
	public void GetSize(ref UnityEngine.Vector2 size)
	{
	}

	[Token(Token = "0x6000618")]
	[Address(RVA = "0xE9EC60", Offset = "0xE9EC60", VA = "0xE9EC60", Slot = "6")]
	public void Draw(Texture2D tex)
	{
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0xE9EF2C", Offset = "0xE9EF2C", VA = "0xE9EF2C", Slot = "9")]
	public void Show(SGImeInputType typeInput, SGImeTextType typeText)
	{
	}

	[Token(Token = "0x600061A")]
	[Address(RVA = "0xE9EA10", Offset = "0xE9EA10", VA = "0xE9EA10", Slot = "10")]
	public void Hide()
	{
	}

	[Token(Token = "0x600061B")]
	[Address(RVA = "0xE9F1C0", Offset = "0xE9F1C0", VA = "0xE9F1C0", Slot = "7")]
	public void OnTouch(float x, float y, SGImeMotionEventType type)
	{
	}

	[Token(Token = "0x600061C")]
	[Address(RVA = "0xE9F3AC", Offset = "0xE9F3AC", VA = "0xE9F3AC", Slot = "8")]
	public void UpdateData()
	{
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0xE9E734", Offset = "0xE9E734", VA = "0xE9E734")]
	private void JavaInit()
	{
	}

	[Token(Token = "0x600061E")]
	[Address(RVA = "0xE9EDF0", Offset = "0xE9EDF0", VA = "0xE9EDF0")]
	private bool IsInited()
	{
		return default(bool);
	}

	[Token(Token = "0x600061F")]
	[Address(RVA = "0xE9EE54", Offset = "0xE9EE54", VA = "0xE9EE54")]
	private bool IsNeedUpdate()
	{
		return default(bool);
	}

	[Token(Token = "0x6000620")]
	[Address(RVA = "0xE9F694", Offset = "0xE9F694", VA = "0xE9F694")]
	private int GetCommitCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000621")]
	[Address(RVA = "0xE9F76C", Offset = "0xE9F76C", VA = "0xE9F76C")]
	private string GetCommitString()
	{
		return null;
	}

	[Token(Token = "0x6000622")]
	[Address(RVA = "0xE9F844", Offset = "0xE9F844", VA = "0xE9F844", Slot = "11")]
	public bool IsShow()
	{
		return default(bool);
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0xE9F91C", Offset = "0xE9F91C", VA = "0xE9F91C")]
	public SGIme()
	{
	}
}
[Token(Token = "0x200014E")]
public class ImeManager : MonoBehaviour
{
	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ImeManager Instance;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ImeDelegateBase mDelegate;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ImeBase mIme;

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector2 mSize;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool mIsPaused;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool mIsFocus;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public InputDevice RightHand;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public InputDevice Head;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public InputDevice LeftHand;

	[Token(Token = "0x6000624")]
	[Address(RVA = "0xE9F92C", Offset = "0xE9F92C", VA = "0xE9F92C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0xE9F97C", Offset = "0xE9F97C", VA = "0xE9F97C")]
	private void InitInputDevices()
	{
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0xE9FC78", Offset = "0xE9FC78", VA = "0xE9FC78")]
	private void Start()
	{
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0xE9FD98", Offset = "0xE9FD98", VA = "0xE9FD98")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0xE9FE54", Offset = "0xE9FE54", VA = "0xE9FE54")]
	private void Update()
	{
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0xE9FF00", Offset = "0xE9FF00", VA = "0xE9FF00")]
	public void Show(SGImeInputType typeInput, SGImeTextType typeText)
	{
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0xE9FD9C", Offset = "0xE9FD9C", VA = "0xE9FD9C")]
	public void Hide()
	{
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0xEA0028", Offset = "0xEA0028", VA = "0xEA0028")]
	public bool IsShow()
	{
		return default(bool);
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0xEA00CC", Offset = "0xEA00CC", VA = "0xEA00CC")]
	public void SetPose(Action<Transform> fun)
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0xEA00EC", Offset = "0xEA00EC", VA = "0xEA00EC")]
	public Transform GetTransform()
	{
		return null;
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0xEA010C", Offset = "0xEA010C", VA = "0xEA010C")]
	public void Draw(Texture2D tex)
	{
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0xEA01B8", Offset = "0xEA01B8", VA = "0xEA01B8")]
	public void OnTouch(float x, float y, SGImeMotionEventType type)
	{
	}

	[Token(Token = "0x6000630")]
	[Address(RVA = "0xEA027C", Offset = "0xEA027C", VA = "0xEA027C")]
	private void OnApplicationFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0xEA0288", Offset = "0xEA0288", VA = "0xEA0288")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0xEA02B4", Offset = "0xEA02B4", VA = "0xEA02B4")]
	public ImeManager()
	{
	}
}
[Token(Token = "0x200014F")]
public class ImeDelegateImpl : ImeDelegateBase, IDragHandler, IEventSystemHandler, IPointerDownHandler, IPointerUpHandler
{
	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text mText;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject mPanel;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ImeManager mManager;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Texture2D mTexture;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.Vector2 mTextureSize;

	[Token(Token = "0x6000633")]
	[Address(RVA = "0xEA02BC", Offset = "0xEA02BC", VA = "0xEA02BC", Slot = "4")]
	public override void OnIMEShow(UnityEngine.Vector2 vSize)
	{
	}

	[Token(Token = "0x6000634")]
	[Address(RVA = "0xEA0364", Offset = "0xEA0364", VA = "0xEA0364", Slot = "5")]
	public override void OnIMEHide()
	{
	}

	[Token(Token = "0x6000635")]
	[Address(RVA = "0xEA03E8", Offset = "0xEA03E8", VA = "0xEA03E8", Slot = "6")]
	public override void OnIMECommit(string strCommit)
	{
	}

	[Token(Token = "0x6000636")]
	[Address(RVA = "0xEA0440", Offset = "0xEA0440", VA = "0xEA0440", Slot = "7")]
	public override void OnIMEKey(SGImeKey key)
	{
	}

	[Token(Token = "0x6000637")]
	[Address(RVA = "0xEA0504", Offset = "0xEA0504", VA = "0xEA0504", Slot = "8")]
	public override void OnIMEError(SGImeError nType, string strErr)
	{
	}

	[Token(Token = "0x6000638")]
	[Address(RVA = "0xEA0508", Offset = "0xEA0508", VA = "0xEA0508")]
	private void Start()
	{
	}

	[Token(Token = "0x6000639")]
	[Address(RVA = "0xEA06AC", Offset = "0xEA06AC", VA = "0xEA06AC")]
	private void Update()
	{
	}

	[Token(Token = "0x600063A")]
	[Address(RVA = "0xEA050C", Offset = "0xEA050C", VA = "0xEA050C")]
	private void CreateTexture()
	{
	}

	[Token(Token = "0x600063B")]
	[Address(RVA = "0xEA072C", Offset = "0xEA072C", VA = "0xEA072C")]
	private void CorrectPos(ref float x, ref float y)
	{
	}

	[Token(Token = "0x600063C")]
	[Address(RVA = "0xEA07A0", Offset = "0xEA07A0", VA = "0xEA07A0")]
	private void DispatchMessageToAndroid(SGImeMotionEventType type, PointerEventData eventData)
	{
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0xEA0884", Offset = "0xEA0884", VA = "0xEA0884")]
	private void LogEvent(string prefix, PointerEventData eventData)
	{
	}

	[Token(Token = "0x600063E")]
	[Address(RVA = "0xEA0AF0", Offset = "0xEA0AF0", VA = "0xEA0AF0")]
	public void OnBeginDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0xEA0B38", Offset = "0xEA0B38", VA = "0xEA0B38", Slot = "11")]
	public void OnDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0xEA0B9C", Offset = "0xEA0B9C", VA = "0xEA0B9C")]
	public void OnEndDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000641")]
	[Address(RVA = "0xEA0BE4", Offset = "0xEA0BE4", VA = "0xEA0BE4")]
	public void OnPointerClick(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0xEA0C2C", Offset = "0xEA0C2C", VA = "0xEA0C2C", Slot = "12")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0xEA0C90", Offset = "0xEA0C90", VA = "0xEA0C90")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0xEA0CD8", Offset = "0xEA0CD8", VA = "0xEA0CD8")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0xEA0D40", Offset = "0xEA0D40", VA = "0xEA0D40", Slot = "13")]
	public void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0xEA0DA4", Offset = "0xEA0DA4", VA = "0xEA0DA4", Slot = "9")]
	public override void SetPose(Action<Transform> fun)
	{
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0xEA0DA8", Offset = "0xEA0DA8", VA = "0xEA0DA8", Slot = "10")]
	public override Transform GetTransform()
	{
		return null;
	}

	[Token(Token = "0x6000648")]
	[Address(RVA = "0xEA0DB0", Offset = "0xEA0DB0", VA = "0xEA0DB0")]
	public ImeDelegateImpl()
	{
	}
}
[Token(Token = "0x2000150")]
public class SGViewGather
{
	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject[] mViews;

	[Token(Token = "0x6000649")]
	[Address(RVA = "0xEA0DC4", Offset = "0xEA0DC4", VA = "0xEA0DC4")]
	public SGViewGather(GameObject[] param)
	{
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0xEA0DEC", Offset = "0xEA0DEC", VA = "0xEA0DEC")]
	public void SetActive(bool bActive)
	{
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0xEA0EC0", Offset = "0xEA0EC0", VA = "0xEA0EC0")]
	public bool FindName(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x600064C")]
	[Address(RVA = "0xEA0F40", Offset = "0xEA0F40", VA = "0xEA0F40")]
	public void SetTexture(Texture2D tex)
	{
	}
}
[Token(Token = "0x2000151")]
public class SGMouseTracker
{
	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool mDownOld;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private UnityEngine.Vector2 mPtOld;

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private SGImeMotionEventType mEvent;

	[Token(Token = "0x4000611")]
	private const float mTrackRadius = 10f;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private long mTimeDown;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool mLongPressed;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private long mIntervelLongPress;

	[Token(Token = "0x600064D")]
	[Address(RVA = "0xEA0FF4", Offset = "0xEA0FF4", VA = "0xEA0FF4")]
	public bool Track(UnityEngine.Vector2 pt, bool bDown)
	{
		return default(bool);
	}

	[Token(Token = "0x600064E")]
	[Address(RVA = "0xEA11DC", Offset = "0xEA11DC", VA = "0xEA11DC")]
	public bool TrackOuter()
	{
		return default(bool);
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0xEA11F8", Offset = "0xEA11F8", VA = "0xEA11F8")]
	public UnityEngine.Vector2 GetPoint()
	{
		return default(UnityEngine.Vector2);
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0xEA1200", Offset = "0xEA1200", VA = "0xEA1200")]
	public SGImeMotionEventType GetEvent()
	{
		return default(SGImeMotionEventType);
	}

	[Token(Token = "0x6000651")]
	[Address(RVA = "0xEA1164", Offset = "0xEA1164", VA = "0xEA1164")]
	private float PointDist(UnityEngine.Vector2 ptNew, UnityEngine.Vector2 ptOld)
	{
		return default(float);
	}

	[Token(Token = "0x6000652")]
	[Address(RVA = "0xEA1208", Offset = "0xEA1208", VA = "0xEA1208")]
	public SGMouseTracker()
	{
	}
}
[Token(Token = "0x2000152")]
public class ImeDelegateImpl_kbd : ImeDelegateBase
{
	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static IVrInputField _inputField;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] mKbdViews;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SGViewGather mKbdView;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ImeManager mManager;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Texture2D mTexture;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.Vector2 mTextureSize;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private UnityEngine.Vector2 mPtKbd;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SGMouseTracker mTracker;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float fixDistance;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private UnityEngine.Vector3 posOffSet;

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform tr;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Action<Transform> setPoseAction;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public XRRayInteractor leftXRRayInteractor;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public XRRayInteractor rightXRRayInteractor;

	[Token(Token = "0x6000653")]
	[Address(RVA = "0xEA1218", Offset = "0xEA1218", VA = "0xEA1218")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000654")]
	[Address(RVA = "0xEA127C", Offset = "0xEA127C", VA = "0xEA127C")]
	public void SetPos()
	{
	}

	[Token(Token = "0x6000655")]
	[Address(RVA = "0xEA1394", Offset = "0xEA1394", VA = "0xEA1394", Slot = "9")]
	public override void SetPose(Action<Transform> fun)
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0xEA139C", Offset = "0xEA139C", VA = "0xEA139C", Slot = "10")]
	public override Transform GetTransform()
	{
		return null;
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0xEA13B8", Offset = "0xEA13B8", VA = "0xEA13B8", Slot = "4")]
	public override void OnIMEShow(UnityEngine.Vector2 vSize)
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0xEA164C", Offset = "0xEA164C", VA = "0xEA164C", Slot = "5")]
	public override void OnIMEHide()
	{
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0xEA1804", Offset = "0xEA1804", VA = "0xEA1804", Slot = "6")]
	public override void OnIMECommit(string strCommit)
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0xEA19D8", Offset = "0xEA19D8", VA = "0xEA19D8", Slot = "7")]
	public override void OnIMEKey(SGImeKey key)
	{
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0xEA16CC", Offset = "0xEA16CC", VA = "0xEA16CC")]
	public void FinishInput()
	{
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0xEA1A00", Offset = "0xEA1A00", VA = "0xEA1A00", Slot = "8")]
	public override void OnIMEError(SGImeError nType, string strErr)
	{
	}

	[Token(Token = "0x600065D")]
	[Address(RVA = "0xEA1878", Offset = "0xEA1878", VA = "0xEA1878")]
	public void KeyPressEvent(KeyCode code, char c, EventModifiers modifiers)
	{
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0xEA1A04", Offset = "0xEA1A04", VA = "0xEA1A04")]
	private void Start()
	{
	}

	[Token(Token = "0x600065F")]
	[Address(RVA = "0xEA1A74", Offset = "0xEA1A74", VA = "0xEA1A74")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0xEA1A78", Offset = "0xEA1A78", VA = "0xEA1A78")]
	private void Update()
	{
	}

	[Token(Token = "0x6000661")]
	[Address(RVA = "0xEA1AF0", Offset = "0xEA1AF0", VA = "0xEA1AF0")]
	private void RaycastHitCheck(XRRayInteractor xRRayInteractor, InputDevice inputDevice)
	{
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0xEA14F8", Offset = "0xEA14F8", VA = "0xEA14F8")]
	private void CreateTexture(UnityEngine.Vector2 vSize)
	{
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0xEA1DFC", Offset = "0xEA1DFC", VA = "0xEA1DFC")]
	private void DispatchMessageToAndroid(SGImeMotionEventType type, UnityEngine.Vector2 pt)
	{
	}

	[Token(Token = "0x6000664")]
	[Address(RVA = "0xEA1EAC", Offset = "0xEA1EAC", VA = "0xEA1EAC")]
	private void LogEvent(string prefix, PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0xEA1D5C", Offset = "0xEA1D5C", VA = "0xEA1D5C")]
	private void CheckMouseEvent(RaycastHit hit, bool isDown, bool isValid)
	{
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0xEA2118", Offset = "0xEA2118", VA = "0xEA2118")]
	private bool Point2UV(RaycastHit hitInfo, ref UnityEngine.Vector2 ptUV)
	{
		return default(bool);
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0xEA2250", Offset = "0xEA2250", VA = "0xEA2250")]
	public ImeDelegateImpl_kbd()
	{
	}
}
[Token(Token = "0x2000153")]
internal class UnderlineProperty
{
	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color _color;

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEngine.Vector3 _position;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float _width;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float _height;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public UnityEngine.Vector2 _privot;

	[Token(Token = "0x6000668")]
	[Address(RVA = "0xEA22D8", Offset = "0xEA22D8", VA = "0xEA22D8")]
	public UnderlineProperty()
	{
	}
}
[Token(Token = "0x2000154")]
public class MultipleLinkButton : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
{
	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text _text;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int _curCharacterCount;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Image> _lines;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Action _clickEvent;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool _isInitUnderline;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool m_bNeedPaint;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string m_strLastText;

	[Token(Token = "0x17000083")]
	public Action ClickEvent
	{
		[Token(Token = "0x6000669")]
		[Address(RVA = "0xEA22E0", Offset = "0xEA22E0", VA = "0xEA22E0")]
		get
		{
			return null;
		}
		[Token(Token = "0x600066A")]
		[Address(RVA = "0xEA22E8", Offset = "0xEA22E8", VA = "0xEA22E8")]
		set
		{
		}
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0xEA22F0", Offset = "0xEA22F0", VA = "0xEA22F0")]
	private void Start()
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0xEA23DC", Offset = "0xEA23DC", VA = "0xEA23DC")]
	private void Update()
	{
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0xEA25C4", Offset = "0xEA25C4", VA = "0xEA25C4")]
	private List<UnderlineProperty> GetUnderlinePropertys()
	{
		return null;
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0xEA3190", Offset = "0xEA3190", VA = "0xEA3190")]
	private float GetWidth(int idx, IList<UICharInfo> info)
	{
		return default(float);
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0xEA34C8", Offset = "0xEA34C8", VA = "0xEA34C8")]
	private UnityEngine.Vector2 GetTextAnchorPivot(TextAnchor anchor)
	{
		return default(UnityEngine.Vector2);
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0xEA2ACC", Offset = "0xEA2ACC", VA = "0xEA2ACC")]
	private void CreateUnderLines(List<UnderlineProperty> list)
	{
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0xEA3534", Offset = "0xEA3534", VA = "0xEA3534")]
	public void CleanUnderLines()
	{
	}

	[Token(Token = "0x6000672")]
	[Address(RVA = "0xEA3654", Offset = "0xEA3654", VA = "0xEA3654", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0xEA37C0", Offset = "0xEA37C0", VA = "0xEA37C0", Slot = "5")]
	public void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0xEA392C", Offset = "0xEA392C", VA = "0xEA392C")]
	public void SetPaintUnderLine(bool p_bNeedPaint)
	{
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0xEA39DC", Offset = "0xEA39DC", VA = "0xEA39DC")]
	public void SetUnderLineText(string p_strPaintText, string p_strLastText)
	{
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0xEA3B78", Offset = "0xEA3B78", VA = "0xEA3B78")]
	public MultipleLinkButton()
	{
	}
}
[Token(Token = "0x2000155")]
public class testClick : MonoBehaviour
{
	[Token(Token = "0x6000678")]
	[Address(RVA = "0xEA3C10", Offset = "0xEA3C10", VA = "0xEA3C10")]
	private void Start()
	{
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0xEA3C14", Offset = "0xEA3C14", VA = "0xEA3C14")]
	private void Update()
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0xEA4188", Offset = "0xEA4188", VA = "0xEA4188")]
	public void Click()
	{
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0xEA41F0", Offset = "0xEA41F0", VA = "0xEA41F0")]
	private void LogEvent(string prefix, PointerEventData eventData)
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0xEA445C", Offset = "0xEA445C", VA = "0xEA445C")]
	public testClick()
	{
	}
}
[Token(Token = "0x2000156")]
public class TextHandler : MonoBehaviour, IPointerUpHandler, IEventSystemHandler, IPointerDownHandler
{
	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ImeManager mManager;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SGImeInputType mInputType;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public SGImeTextType mTextType;

	[Token(Token = "0x600067D")]
	[Address(RVA = "0xEA4464", Offset = "0xEA4464", VA = "0xEA4464")]
	private void Start()
	{
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0xEA4468", Offset = "0xEA4468", VA = "0xEA4468")]
	private void Update()
	{
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0xEA446C", Offset = "0xEA446C", VA = "0xEA446C", Slot = "5")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0xEA4470", Offset = "0xEA4470", VA = "0xEA4470", Slot = "4")]
	public void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0xEA451C", Offset = "0xEA451C", VA = "0xEA451C")]
	private void LogEvent(string prefix, PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0xEA4788", Offset = "0xEA4788", VA = "0xEA4788")]
	public TextHandler()
	{
	}
}
[Token(Token = "0x2000157")]
public class ChangeFoveation : MonoBehaviour
{
	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Button btn;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text btnText;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int foveationLevel;

	[Token(Token = "0x6000683")]
	[Address(RVA = "0xEA4790", Offset = "0xEA4790", VA = "0xEA4790")]
	private void Start()
	{
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0xEA490C", Offset = "0xEA490C", VA = "0xEA490C")]
	private void ShowTest()
	{
	}

	[Token(Token = "0x6000685")]
	[Address(RVA = "0xEA4A08", Offset = "0xEA4A08", VA = "0xEA4A08")]
	public ChangeFoveation()
	{
	}
}
[Token(Token = "0x2000158")]
public class ChangeQXRManager : MonoBehaviour
{
	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text trackingPosition;

	[Token(Token = "0x6000687")]
	[Address(RVA = "0xEA4AF4", Offset = "0xEA4AF4", VA = "0xEA4AF4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0xEA4AF8", Offset = "0xEA4AF8", VA = "0xEA4AF8")]
	public void OnClickButton(GameObject btn)
	{
	}

	[Token(Token = "0x6000689")]
	[Address(RVA = "0xEA4B54", Offset = "0xEA4B54", VA = "0xEA4B54")]
	public ChangeQXRManager()
	{
	}
}
[Token(Token = "0x2000159")]
public class ChangeScene : MonoBehaviour
{
	[Token(Token = "0x600068A")]
	[Address(RVA = "0xEA4B5C", Offset = "0xEA4B5C", VA = "0xEA4B5C")]
	public void GoScene(string sceneName)
	{
	}

	[Token(Token = "0x600068B")]
	[Address(RVA = "0xEA4C10", Offset = "0xEA4C10", VA = "0xEA4C10")]
	public ChangeScene()
	{
	}
}
[Token(Token = "0x200015A")]
public class DebugShow : MonoBehaviour
{
	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugShow Instance;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text _showText;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<string> _showList;

	[Token(Token = "0x600068C")]
	[Address(RVA = "0xEA4C18", Offset = "0xEA4C18", VA = "0xEA4C18")]
	private void Awake()
	{
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0xEA4C98", Offset = "0xEA4C98", VA = "0xEA4C98")]
	private void Start()
	{
	}

	[Token(Token = "0x600068E")]
	[Address(RVA = "0xEA4C9C", Offset = "0xEA4C9C", VA = "0xEA4C9C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600068F")]
	[Address(RVA = "0xEA4CA0", Offset = "0xEA4CA0", VA = "0xEA4CA0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000690")]
	[Address(RVA = "0xEA4CA4", Offset = "0xEA4CA4", VA = "0xEA4CA4")]
	private void Add(string info)
	{
	}

	[Token(Token = "0x6000691")]
	[Address(RVA = "0xEA4E64", Offset = "0xEA4E64", VA = "0xEA4E64")]
	public DebugShow()
	{
	}
}
[Token(Token = "0x200015B")]
public class FPS : MonoBehaviour
{
	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text textField;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_LastUpdateShowTime;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_UpdateShowDeltaTime;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_FrameUpdate;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_FPS;

	[Token(Token = "0x6000692")]
	[Address(RVA = "0xEA4EE0", Offset = "0xEA4EE0", VA = "0xEA4EE0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000693")]
	[Address(RVA = "0xEA4FB8", Offset = "0xEA4FB8", VA = "0xEA4FB8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000694")]
	[Address(RVA = "0xEA4FD4", Offset = "0xEA4FD4", VA = "0xEA4FD4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000695")]
	[Address(RVA = "0xEA51DC", Offset = "0xEA51DC", VA = "0xEA51DC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000696")]
	[Address(RVA = "0xEA55E8", Offset = "0xEA55E8", VA = "0xEA55E8")]
	public FPS()
	{
	}
}
[Token(Token = "0x200015C")]
public class QiyuScreenFade : MonoBehaviour
{
	[Token(Token = "0x200015D")]
	[CompilerGenerated]
	private sealed class <FadeIn>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public QiyuScreenFade <>4__this;

		[Token(Token = "0x17000085")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006A5")]
			[Address(RVA = "0xEA5F78", Offset = "0xEA5F78", VA = "0xEA5F78", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000086")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006A7")]
			[Address(RVA = "0xEA5FC0", Offset = "0xEA5FC0", VA = "0xEA5FC0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006A2")]
		[Address(RVA = "0xEA5B30", Offset = "0xEA5B30", VA = "0xEA5B30")]
		[DebuggerHidden]
		public <FadeIn>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0xEA5ECC", Offset = "0xEA5ECC", VA = "0xEA5ECC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0xEA5ED0", Offset = "0xEA5ED0", VA = "0xEA5ED0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0xEA5F80", Offset = "0xEA5F80", VA = "0xEA5F80", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200015E")]
	[CompilerGenerated]
	private sealed class <Fade>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public QiyuScreenFade <>4__this;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float startAlpha;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float endAlpha;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float _fadeTime;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x17000087")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006AB")]
			[Address(RVA = "0xEA60E8", Offset = "0xEA60E8", VA = "0xEA60E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000088")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006AD")]
			[Address(RVA = "0xEA6130", Offset = "0xEA6130", VA = "0xEA6130", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0xEA5D48", Offset = "0xEA5D48", VA = "0xEA5D48")]
		[DebuggerHidden]
		public <Fade>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0xEA5FC8", Offset = "0xEA5FC8", VA = "0xEA5FC8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0xEA5FCC", Offset = "0xEA5FCC", VA = "0xEA5FCC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0xEA60F0", Offset = "0xEA60F0", VA = "0xEA60F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Fade duration")]
	public float fadeTime;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Screen color at maximum fade")]
	public Color fadeColor;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool fadeOnStart;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int renderQueue;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float explicitFadeAlpha;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float animatedFadeAlpha;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float uiFadeAlpha;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MeshRenderer fadeRenderer;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private MeshFilter fadeMesh;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material fadeMaterial;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isFading;

	[Token(Token = "0x17000084")]
	public float currentAlpha
	{
		[Token(Token = "0x6000697")]
		[Address(RVA = "0xEA55FC", Offset = "0xEA55FC", VA = "0xEA55FC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x6000698")]
	[Address(RVA = "0xEA56B8", Offset = "0xEA56B8", VA = "0xEA56B8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000699")]
	[Address(RVA = "0xEA5AA8", Offset = "0xEA5AA8", VA = "0xEA5AA8")]
	public void ScreenFadeIn()
	{
	}

	[Token(Token = "0x600069A")]
	[Address(RVA = "0xEA5AC8", Offset = "0xEA5AC8", VA = "0xEA5AC8")]
	[IteratorStateMachine(typeof(<FadeIn>d__15))]
	private IEnumerator FadeIn()
	{
		return null;
	}

	[Token(Token = "0x600069B")]
	[Address(RVA = "0xEA5B58", Offset = "0xEA5B58", VA = "0xEA5B58")]
	public void ScreenFadeOut()
	{
	}

	[Token(Token = "0x600069C")]
	[Address(RVA = "0xEA5C10", Offset = "0xEA5C10", VA = "0xEA5C10")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600069D")]
	[Address(RVA = "0xEA5C28", Offset = "0xEA5C28", VA = "0xEA5C28")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600069E")]
	[Address(RVA = "0xEA5B84", Offset = "0xEA5B84", VA = "0xEA5B84")]
	[IteratorStateMachine(typeof(<Fade>d__19))]
	private IEnumerator Fade(float startAlpha, float endAlpha, float _fadeTime)
	{
		return null;
	}

	[Token(Token = "0x600069F")]
	[Address(RVA = "0xEA5D70", Offset = "0xEA5D70", VA = "0xEA5D70")]
	private void SetMaterialAlpha()
	{
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0xEA5E78", Offset = "0xEA5E78", VA = "0xEA5E78")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x60006A1")]
	[Address(RVA = "0xEA5EA0", Offset = "0xEA5EA0", VA = "0xEA5EA0")]
	public QiyuScreenFade()
	{
	}
}
[Token(Token = "0x200015F")]
public class QVRDemo : MonoBehaviour
{
	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text uid;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public new Text name;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text pic;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public VrInputField targetAppID;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform btnListGO;

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0xEA6138", Offset = "0xEA6138", VA = "0xEA6138")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0xEA6350", Offset = "0xEA6350", VA = "0xEA6350")]
	private void Start()
	{
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0xEA6648", Offset = "0xEA6648", VA = "0xEA6648")]
	public void GetDeeplinkCallBack(QiyuPlugin.MessageResult<QiyuPlugin.DeepLinkParam> ret)
	{
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0xEA66DC", Offset = "0xEA66DC", VA = "0xEA66DC")]
	public void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0xEA678C", Offset = "0xEA678C", VA = "0xEA678C")]
	public void GoHomeLogin()
	{
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0xEA67E8", Offset = "0xEA67E8", VA = "0xEA67E8")]
	public void GetIQIYIAccountInfo()
	{
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0xEA68D0", Offset = "0xEA68D0", VA = "0xEA68D0")]
	public void OpenApp()
	{
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0xEA6978", Offset = "0xEA6978", VA = "0xEA6978")]
	private void TestQiyuPrefs()
	{
	}

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0xEA6C88", Offset = "0xEA6C88", VA = "0xEA6C88")]
	public QVRDemo()
	{
	}
}
[Token(Token = "0x2000161")]
public class UIDepth : MonoBehaviour
{
	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int order;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isUI;

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0xEA707C", Offset = "0xEA707C", VA = "0xEA707C")]
	private void Start()
	{
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0xEA71DC", Offset = "0xEA71DC", VA = "0xEA71DC")]
	public UIDepth()
	{
	}
}
[Token(Token = "0x2000162")]
public class AllyBryce : BattleAlly
{
	[Token(Token = "0x2000163")]
	[CompilerGenerated]
	private sealed class <waterAttack>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AllyBryce <>4__this;

		[Token(Token = "0x17000089")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006C8")]
			[Address(RVA = "0xEA7D54", Offset = "0xEA7D54", VA = "0xEA7D54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006CA")]
			[Address(RVA = "0xEA7D9C", Offset = "0xEA7D9C", VA = "0xEA7D9C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0xEA75E8", Offset = "0xEA75E8", VA = "0xEA75E8")]
		[DebuggerHidden]
		public <waterAttack>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0xEA7714", Offset = "0xEA7714", VA = "0xEA7714", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0xEA7718", Offset = "0xEA7718", VA = "0xEA7718", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0xEA7D5C", Offset = "0xEA7D5C", VA = "0xEA7D5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000164")]
	[CompilerGenerated]
	private sealed class <endTurnAfterTime>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AllyBryce <>4__this;

		[Token(Token = "0x1700008B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006CE")]
			[Address(RVA = "0xEA8104", Offset = "0xEA8104", VA = "0xEA8104", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006D0")]
			[Address(RVA = "0xEA814C", Offset = "0xEA814C", VA = "0xEA814C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0xEA7688", Offset = "0xEA7688", VA = "0xEA7688")]
		[DebuggerHidden]
		public <endTurnAfterTime>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0xEA7DA4", Offset = "0xEA7DA4", VA = "0xEA7DA4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0xEA7DA8", Offset = "0xEA7DA8", VA = "0xEA7DA8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0xEA810C", Offset = "0xEA810C", VA = "0xEA810C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AllyProjectile waterProj;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public BattleDialogueBox dialogueBox;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject castParticle;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool storyVersion;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AudioClip[] voiceClips;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AudioClip[] victoryLines;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AudioClip[] attackCLips;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AudioSource audioSource;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public string[] dialogueLines;

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0xEA71EC", Offset = "0xEA71EC", VA = "0xEA71EC", Slot = "5")]
	public override void doVictory()
	{
	}

	[Token(Token = "0x60006C0")]
	[Address(RVA = "0xEA7298", Offset = "0xEA7298", VA = "0xEA7298")]
	public void playDialogue(string dialogue)
	{
	}

	[Token(Token = "0x60006C1")]
	[Address(RVA = "0xEA7544", Offset = "0xEA7544", VA = "0xEA7544", Slot = "4")]
	public override void allyAttack()
	{
	}

	[Token(Token = "0x60006C2")]
	[Address(RVA = "0xEA7580", Offset = "0xEA7580", VA = "0xEA7580")]
	[IteratorStateMachine(typeof(<waterAttack>d__12))]
	private IEnumerator waterAttack()
	{
		return null;
	}

	[Token(Token = "0x60006C3")]
	[Address(RVA = "0xEA7610", Offset = "0xEA7610", VA = "0xEA7610")]
	[IteratorStateMachine(typeof(<endTurnAfterTime>d__13))]
	private IEnumerator endTurnAfterTime(float time)
	{
		return null;
	}

	[Token(Token = "0x60006C4")]
	[Address(RVA = "0xEA76B0", Offset = "0xEA76B0", VA = "0xEA76B0")]
	public AllyBryce()
	{
	}
}
[Token(Token = "0x2000165")]
public class AllyBryceBarbarian : BattleAlly
{
	[Token(Token = "0x2000166")]
	[CompilerGenerated]
	private sealed class <anchorShot>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AllyBryceBarbarian <>4__this;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x1700008D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006D9")]
			[Address(RVA = "0xEA8A60", Offset = "0xEA8A60", VA = "0xEA8A60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006DB")]
			[Address(RVA = "0xEA8AA8", Offset = "0xEA8AA8", VA = "0xEA8AA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0xEA8544", Offset = "0xEA8544", VA = "0xEA8544")]
		[DebuggerHidden]
		public <anchorShot>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0xEA8570", Offset = "0xEA8570", VA = "0xEA8570", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0xEA8574", Offset = "0xEA8574", VA = "0xEA8574", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0xEA8A68", Offset = "0xEA8A68", VA = "0xEA8A68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform homePoint;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject teleportParticle;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AllyProjectile anchorProj;

	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AudioSource audioSource;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AudioClip[] attackClips;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject castParticle;

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0xEA8154", Offset = "0xEA8154", VA = "0xEA8154")]
	public void returnHome()
	{
	}

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0xEA83D8", Offset = "0xEA83D8", VA = "0xEA83D8")]
	public void resetAnimation()
	{
	}

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0xEA84B0", Offset = "0xEA84B0", VA = "0xEA84B0", Slot = "4")]
	public override void allyAttack()
	{
	}

	[Token(Token = "0x60006D4")]
	[Address(RVA = "0xEA84DC", Offset = "0xEA84DC", VA = "0xEA84DC")]
	[IteratorStateMachine(typeof(<anchorShot>d__9))]
	private IEnumerator anchorShot()
	{
		return null;
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0xEA856C", Offset = "0xEA856C", VA = "0xEA856C")]
	public AllyBryceBarbarian()
	{
	}
}
[Token(Token = "0x2000167")]
public class AllyCaster : BattleAlly
{
	[Token(Token = "0x2000168")]
	[CompilerGenerated]
	private sealed class <castShotgunBlast>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AllyCaster <>4__this;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private EnemyParent <randEnemy>5__4;

		[Token(Token = "0x1700008F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006E7")]
			[Address(RVA = "0xEA90E0", Offset = "0xEA90E0", VA = "0xEA90E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000090")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006E9")]
			[Address(RVA = "0xEA9128", Offset = "0xEA9128", VA = "0xEA9128", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0xEA8B50", Offset = "0xEA8B50", VA = "0xEA8B50")]
		[DebuggerHidden]
		public <castShotgunBlast>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0xEA8CFC", Offset = "0xEA8CFC", VA = "0xEA8CFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0xEA8D00", Offset = "0xEA8D00", VA = "0xEA8D00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0xEA90E8", Offset = "0xEA90E8", VA = "0xEA90E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AllyProjectile proj;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject launchParticle;

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0xEA8AB0", Offset = "0xEA8AB0", VA = "0xEA8AB0", Slot = "4")]
	public override void allyAttack()
	{
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0xEA8B44", Offset = "0xEA8B44", VA = "0xEA8B44", Slot = "5")]
	public override void doVictory()
	{
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0xEA8B48", Offset = "0xEA8B48", VA = "0xEA8B48", Slot = "6")]
	public override void onSpellCast(PlayerSpell spell, HandCaster hand)
	{
	}

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0xEA8ADC", Offset = "0xEA8ADC", VA = "0xEA8ADC")]
	[IteratorStateMachine(typeof(<castShotgunBlast>d__5))]
	protected IEnumerator castShotgunBlast()
	{
		return null;
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0xEA8B78", Offset = "0xEA8B78", VA = "0xEA8B78")]
	private void shootProjectile()
	{
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0xEA8CF0", Offset = "0xEA8CF0", VA = "0xEA8CF0")]
	private void Start()
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0xEA8CF4", Offset = "0xEA8CF4", VA = "0xEA8CF4")]
	private void Update()
	{
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0xEA8CF8", Offset = "0xEA8CF8", VA = "0xEA8CF8")]
	public AllyCaster()
	{
	}
}
[Token(Token = "0x2000169")]
public class AllyDragon : BattleAlly
{
	[Token(Token = "0x200016A")]
	[CompilerGenerated]
	private sealed class <fireAttack>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AllyDragon <>4__this;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform <target>5__2;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <maxTime>5__3;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <timer>5__4;

		[Token(Token = "0x17000091")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006F5")]
			[Address(RVA = "0xEA9E10", Offset = "0xEA9E10", VA = "0xEA9E10", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000092")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006F7")]
			[Address(RVA = "0xEA9E58", Offset = "0xEA9E58", VA = "0xEA9E58", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0xEA9518", Offset = "0xEA9518", VA = "0xEA9518")]
		[DebuggerHidden]
		public <fireAttack>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0xEA9814", Offset = "0xEA9814", VA = "0xEA9814", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0xEA9818", Offset = "0xEA9818", VA = "0xEA9818", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0xEA9E18", Offset = "0xEA9E18", VA = "0xEA9E18", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject fireBreath;

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float flySpeed;

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private UnityEngine.Vector3 spawnPos;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float breathTickMax;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float breathTimer;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool usingFire;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool lookAtTarget;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<EnemyParent> BreathEnemies;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform lookTarget;

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0xEA9130", Offset = "0xEA9130", VA = "0xEA9130")]
	private void Start()
	{
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0xEA91A4", Offset = "0xEA91A4", VA = "0xEA91A4")]
	private void Update()
	{
	}

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0xEA93FC", Offset = "0xEA93FC", VA = "0xEA93FC", Slot = "4")]
	public override void allyAttack()
	{
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0xEA94A8", Offset = "0xEA94A8", VA = "0xEA94A8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0xEA9440", Offset = "0xEA9440", VA = "0xEA9440")]
	[IteratorStateMachine(typeof(<fireAttack>d__13))]
	private IEnumerator fireAttack()
	{
		return null;
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0xEA9540", Offset = "0xEA9540", VA = "0xEA9540")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0xEA96A0", Offset = "0xEA96A0", VA = "0xEA96A0")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0xEA9780", Offset = "0xEA9780", VA = "0xEA9780")]
	public AllyDragon()
	{
	}
}
[Token(Token = "0x200016B")]
public class AllyElemental : BattleAlly
{
	[Token(Token = "0x200016C")]
	[CompilerGenerated]
	private sealed class <punchAttack>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AllyElemental <>4__this;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private EnemyParent <randEnemy>5__2;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <i>5__3;

		[Token(Token = "0x17000093")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000700")]
			[Address(RVA = "0xEAA710", Offset = "0xEAA710", VA = "0xEAA710", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000094")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000702")]
			[Address(RVA = "0xEAA758", Offset = "0xEAA758", VA = "0xEAA758", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0xEA9F24", Offset = "0xEA9F24", VA = "0xEA9F24")]
		[DebuggerHidden]
		public <punchAttack>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0xEA9FE8", Offset = "0xEA9FE8", VA = "0xEA9FE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0xEA9FEC", Offset = "0xEA9FEC", VA = "0xEA9FEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0xEAA718", Offset = "0xEAA718", VA = "0xEAA718", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200016D")]
	[CompilerGenerated]
	private sealed class <endTurnAfterTime>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x17000095")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000706")]
			[Address(RVA = "0xEAA804", Offset = "0xEAA804", VA = "0xEAA804", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000096")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000708")]
			[Address(RVA = "0xEAA84C", Offset = "0xEAA84C", VA = "0xEAA84C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0xEA9FBC", Offset = "0xEA9FBC", VA = "0xEA9FBC")]
		[DebuggerHidden]
		public <endTurnAfterTime>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0xEAA760", Offset = "0xEAA760", VA = "0xEAA760", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0xEAA764", Offset = "0xEAA764", VA = "0xEAA764", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0xEAA80C", Offset = "0xEAA80C", VA = "0xEAA80C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioSource audioSource;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject punchParticle;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject teleportParticle;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private UnityEngine.Vector3 startPos;

	[Token(Token = "0x60006F8")]
	[Address(RVA = "0xEA9E60", Offset = "0xEA9E60", VA = "0xEA9E60")]
	protected void Start()
	{
	}

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0xEA9E90", Offset = "0xEA9E90", VA = "0xEA9E90", Slot = "4")]
	public override void allyAttack()
	{
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0xEA9EBC", Offset = "0xEA9EBC", VA = "0xEA9EBC")]
	[IteratorStateMachine(typeof(<punchAttack>d__6))]
	private IEnumerator punchAttack()
	{
		return null;
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0xEA9F4C", Offset = "0xEA9F4C", VA = "0xEA9F4C")]
	[IteratorStateMachine(typeof(<endTurnAfterTime>d__7))]
	private IEnumerator endTurnAfterTime(float time)
	{
		return null;
	}

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0xEA9FE4", Offset = "0xEA9FE4", VA = "0xEA9FE4")]
	public AllyElemental()
	{
	}
}
[Token(Token = "0x200016E")]
public class AllyLlorona : BattleAlly
{
	[Token(Token = "0x200016F")]
	[CompilerGenerated]
	private sealed class <bounceAttack>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AllyLlorona <>4__this;

		[Token(Token = "0x17000097")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000714")]
			[Address(RVA = "0xEAAF50", Offset = "0xEAAF50", VA = "0xEAAF50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000098")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000716")]
			[Address(RVA = "0xEAAF98", Offset = "0xEAAF98", VA = "0xEAAF98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0xEAA9F8", Offset = "0xEAA9F8", VA = "0xEAA9F8")]
		[DebuggerHidden]
		public <bounceAttack>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0xEAAAEC", Offset = "0xEAAAEC", VA = "0xEAAAEC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0xEAAAF0", Offset = "0xEAAAF0", VA = "0xEAAAF0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0xEAAF58", Offset = "0xEAAF58", VA = "0xEAAF58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000170")]
	[CompilerGenerated]
	private sealed class <castHeal>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AllyLlorona <>4__this;

		[Token(Token = "0x17000099")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600071A")]
			[Address(RVA = "0xEAB2A0", Offset = "0xEAB2A0", VA = "0xEAB2A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600071C")]
			[Address(RVA = "0xEAB2E8", Offset = "0xEAB2E8", VA = "0xEAB2E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0xEAAA20", Offset = "0xEAAA20", VA = "0xEAAA20")]
		[DebuggerHidden]
		public <castHeal>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0xEAAFA0", Offset = "0xEAAFA0", VA = "0xEAAFA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0xEAAFA4", Offset = "0xEAAFA4", VA = "0xEAAFA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0xEAB2A8", Offset = "0xEAB2A8", VA = "0xEAB2A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000171")]
	[CompilerGenerated]
	private sealed class <endTurnAfterTime>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x40006AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AllyLlorona <>4__this;

		[Token(Token = "0x1700009B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000720")]
			[Address(RVA = "0xEAB3C0", Offset = "0xEAB3C0", VA = "0xEAB3C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000722")]
			[Address(RVA = "0xEAB408", Offset = "0xEAB408", VA = "0xEAB408", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0xEAAAC0", Offset = "0xEAAAC0", VA = "0xEAAAC0")]
		[DebuggerHidden]
		public <endTurnAfterTime>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0xEAB2F0", Offset = "0xEAB2F0", VA = "0xEAB2F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0xEAB2F4", Offset = "0xEAB2F4", VA = "0xEAB2F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0xEAB3C8", Offset = "0xEAB3C8", VA = "0xEAB3C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Abilities")]
	public AllyProjectile projectile;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject healparticle;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject castParticle;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Audio")]
	public AudioSource audioSource;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AudioClip[] attackClips;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AudioClip[] attackClipsHeal;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AudioClip[] victoryClips;

	[Token(Token = "0x6000709")]
	[Address(RVA = "0xEAA854", Offset = "0xEAA854", VA = "0xEAA854")]
	private void Start()
	{
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0xEAA858", Offset = "0xEAA858", VA = "0xEAA858")]
	private void Update()
	{
	}

	[Token(Token = "0x600070B")]
	[Address(RVA = "0xEAA85C", Offset = "0xEAA85C", VA = "0xEAA85C", Slot = "5")]
	public override void doVictory()
	{
	}

	[Token(Token = "0x600070C")]
	[Address(RVA = "0xEAA8C8", Offset = "0xEAA8C8", VA = "0xEAA8C8", Slot = "4")]
	public override void allyAttack()
	{
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0xEAA990", Offset = "0xEAA990", VA = "0xEAA990")]
	[IteratorStateMachine(typeof(<bounceAttack>d__11))]
	private IEnumerator bounceAttack()
	{
		return null;
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0xEAA928", Offset = "0xEAA928", VA = "0xEAA928")]
	[IteratorStateMachine(typeof(<castHeal>d__12))]
	private IEnumerator castHeal()
	{
		return null;
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0xEAAA48", Offset = "0xEAAA48", VA = "0xEAAA48")]
	[IteratorStateMachine(typeof(<endTurnAfterTime>d__13))]
	private IEnumerator endTurnAfterTime(float time)
	{
		return null;
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0xEAAAE8", Offset = "0xEAAAE8", VA = "0xEAAAE8")]
	public AllyLlorona()
	{
	}
}
[Token(Token = "0x2000172")]
public class AllyMechaBoat : BattleAlly
{
	[Token(Token = "0x2000173")]
	[CompilerGenerated]
	private sealed class <waterAttack>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AllyMechaBoat <>4__this;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x1700009D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600072E")]
			[Address(RVA = "0xEABF6C", Offset = "0xEABF6C", VA = "0xEABF6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000730")]
			[Address(RVA = "0xEABFB4", Offset = "0xEABFB4", VA = "0xEABFB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0xEAB4F4", Offset = "0xEAB4F4", VA = "0xEAB4F4")]
		[DebuggerHidden]
		public <waterAttack>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0xEAB890", Offset = "0xEAB890", VA = "0xEAB890", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0xEAB894", Offset = "0xEAB894", VA = "0xEAB894", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0xEABF74", Offset = "0xEABF74", VA = "0xEABF74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000174")]
	[CompilerGenerated]
	private sealed class <endTurnAfterTime>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AllyMechaBoat <>4__this;

		[Token(Token = "0x1700009F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000734")]
			[Address(RVA = "0xEAC08C", Offset = "0xEAC08C", VA = "0xEAC08C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000736")]
			[Address(RVA = "0xEAC0D4", Offset = "0xEAC0D4", VA = "0xEAC0D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0xEAB594", Offset = "0xEAB594", VA = "0xEAB594")]
		[DebuggerHidden]
		public <endTurnAfterTime>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0xEABFBC", Offset = "0xEABFBC", VA = "0xEABFBC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0xEABFC0", Offset = "0xEABFC0", VA = "0xEABFC0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0xEAC094", Offset = "0xEAC094", VA = "0xEAC094", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Animator boatAnim;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AllyProjectile fireProj;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public BattleDialogueBox dialogueBox;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject castParticle;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool storyVersion;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string[] dialogueLines;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject healParticlePrefab;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AudioSource voiceSource;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AudioClip[] voiceCLips;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public bool inBoatForm;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	private bool firstHeal;

	[Token(Token = "0x6000723")]
	[Address(RVA = "0xEAB410", Offset = "0xEAB410", VA = "0xEAB410")]
	private void Start()
	{
	}

	[Token(Token = "0x6000724")]
	[Address(RVA = "0xEAB464", Offset = "0xEAB464", VA = "0xEAB464")]
	private void Update()
	{
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0xEAB468", Offset = "0xEAB468", VA = "0xEAB468", Slot = "4")]
	public override void allyAttack()
	{
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0xEAB4F0", Offset = "0xEAB4F0", VA = "0xEAB4F0", Slot = "5")]
	public override void doVictory()
	{
	}

	[Token(Token = "0x6000727")]
	[Address(RVA = "0xEAB488", Offset = "0xEAB488", VA = "0xEAB488")]
	[IteratorStateMachine(typeof(<waterAttack>d__15))]
	private IEnumerator waterAttack()
	{
		return null;
	}

	[Token(Token = "0x6000728")]
	[Address(RVA = "0xEAB51C", Offset = "0xEAB51C", VA = "0xEAB51C")]
	[IteratorStateMachine(typeof(<endTurnAfterTime>d__16))]
	private IEnumerator endTurnAfterTime(float time)
	{
		return null;
	}

	[Token(Token = "0x6000729")]
	[Address(RVA = "0xEAB5BC", Offset = "0xEAB5BC", VA = "0xEAB5BC")]
	public void playDialogue(string dialogue)
	{
	}

	[Token(Token = "0x600072A")]
	[Address(RVA = "0xEAB880", Offset = "0xEAB880", VA = "0xEAB880")]
	public AllyMechaBoat()
	{
	}
}
[Token(Token = "0x2000175")]
public class AllyMirrorImage : BattleAlly
{
	[Token(Token = "0x2000176")]
	[CompilerGenerated]
	private sealed class <endTurnAfterTime>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AllyMirrorImage <>4__this;

		[Token(Token = "0x170000A1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000740")]
			[Address(RVA = "0xEAC640", Offset = "0xEAC640", VA = "0xEAC640", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000742")]
			[Address(RVA = "0xEAC688", Offset = "0xEAC688", VA = "0xEAC688", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0xEAC544", Offset = "0xEAC544", VA = "0xEAC544")]
		[DebuggerHidden]
		public <endTurnAfterTime>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0xEAC570", Offset = "0xEAC570", VA = "0xEAC570", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0xEAC574", Offset = "0xEAC574", VA = "0xEAC574", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000741")]
		[Address(RVA = "0xEAC648", Offset = "0xEAC648", VA = "0xEAC648", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6000737")]
	[Address(RVA = "0xEAC0DC", Offset = "0xEAC0DC", VA = "0xEAC0DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000738")]
	[Address(RVA = "0xEAC0E0", Offset = "0xEAC0E0", VA = "0xEAC0E0", Slot = "4")]
	public override void allyAttack()
	{
	}

	[Token(Token = "0x6000739")]
	[Address(RVA = "0xEAC188", Offset = "0xEAC188", VA = "0xEAC188", Slot = "6")]
	public override void onSpellCast(PlayerSpell spell, HandCaster hand)
	{
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0xEAC1B4", Offset = "0xEAC1B4", VA = "0xEAC1B4")]
	public void copySpell(PlayerSpell spell, HandCaster hand)
	{
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0xEAC110", Offset = "0xEAC110", VA = "0xEAC110")]
	[IteratorStateMachine(typeof(<endTurnAfterTime>d__4))]
	private IEnumerator endTurnAfterTime(float time)
	{
		return null;
	}

	[Token(Token = "0x600073C")]
	[Address(RVA = "0xEAC56C", Offset = "0xEAC56C", VA = "0xEAC56C")]
	public AllyMirrorImage()
	{
	}
}
[Token(Token = "0x2000177")]
public class AllyProjectile : MonoBehaviour
{
	[Token(Token = "0x2000178")]
	[CompilerGenerated]
	private sealed class <launchDelay>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AllyProjectile <>4__this;

		[Token(Token = "0x170000A3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600074F")]
			[Address(RVA = "0xEAD4F8", Offset = "0xEAD4F8", VA = "0xEAD4F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000751")]
			[Address(RVA = "0xEAD540", Offset = "0xEAD540", VA = "0xEAD540", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0xEAC874", Offset = "0xEAC874", VA = "0xEAC874")]
		[DebuggerHidden]
		public <launchDelay>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0xEAD3F8", Offset = "0xEAD3F8", VA = "0xEAD3F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0xEAD3FC", Offset = "0xEAD3FC", VA = "0xEAD3FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0xEAD500", Offset = "0xEAD500", VA = "0xEAD500", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000179")]
	[CompilerGenerated]
	private sealed class <disolveMaterial>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Renderer rend;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <disolve>5__2;

		[Token(Token = "0x170000A5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000755")]
			[Address(RVA = "0xEAD648", Offset = "0xEAD648", VA = "0xEAD648", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000757")]
			[Address(RVA = "0xEAD690", Offset = "0xEAD690", VA = "0xEAD690", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0xEAD1BC", Offset = "0xEAD1BC", VA = "0xEAD1BC")]
		[DebuggerHidden]
		public <disolveMaterial>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0xEAD548", Offset = "0xEAD548", VA = "0xEAD548", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0xEAD54C", Offset = "0xEAD54C", VA = "0xEAD54C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0xEAD650", Offset = "0xEAD650", VA = "0xEAD650", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int power;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool destroyOnCollisionWithEnemy;

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool destroyOnCollision;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool canUnLink;

	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject explosionGameobject;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float chanceToInflict;

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GlitchEffects glitchEffect;

	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float timeToDestruct;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float destructTimer;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected float minTimeHitEnemy;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected float timeSinceHit;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float launchPower;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool delayLaunch;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	public bool disolveMat;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Renderer disolveRend;

	[Token(Token = "0x6000743")]
	[Address(RVA = "0xEAC690", Offset = "0xEAC690", VA = "0xEAC690")]
	private void Start()
	{
	}

	[Token(Token = "0x6000744")]
	[Address(RVA = "0xEAC7A4", Offset = "0xEAC7A4", VA = "0xEAC7A4")]
	[IteratorStateMachine(typeof(<launchDelay>d__16))]
	private IEnumerator launchDelay()
	{
		return null;
	}

	[Token(Token = "0x6000745")]
	[Address(RVA = "0xEAC89C", Offset = "0xEAC89C", VA = "0xEAC89C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000746")]
	[Address(RVA = "0xEAC96C", Offset = "0xEAC96C", VA = "0xEAC96C")]
	private void spawnImpact(UnityEngine.Vector3 position)
	{
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0xEACA68", Offset = "0xEACA68", VA = "0xEACA68")]
	private void collideWithEnemy(EnemyParent ep)
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0xEAD000", Offset = "0xEAD000", VA = "0xEAD000")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0xEAC80C", Offset = "0xEAC80C", VA = "0xEAC80C")]
	[IteratorStateMachine(typeof(<disolveMaterial>d__21))]
	protected IEnumerator disolveMaterial(Renderer rend)
	{
		return null;
	}

	[Token(Token = "0x600074A")]
	[Address(RVA = "0xEAD1E4", Offset = "0xEAD1E4", VA = "0xEAD1E4")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0xEAD3CC", Offset = "0xEAD3CC", VA = "0xEAD3CC")]
	public AllyProjectile()
	{
	}
}
[Token(Token = "0x200017A")]
public class AllyTaskMaster : BattleAlly
{
	[Token(Token = "0x200017B")]
	[CompilerGenerated]
	private sealed class <waterAttack>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AllyTaskMaster <>4__this;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x170000A7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000762")]
			[Address(RVA = "0xEADC60", Offset = "0xEADC60", VA = "0xEADC60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000764")]
			[Address(RVA = "0xEADCA8", Offset = "0xEADCA8", VA = "0xEADCA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0xEAD72C", Offset = "0xEAD72C", VA = "0xEAD72C")]
		[DebuggerHidden]
		public <waterAttack>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0xEAD7F8", Offset = "0xEAD7F8", VA = "0xEAD7F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0xEAD7FC", Offset = "0xEAD7FC", VA = "0xEAD7FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0xEADC68", Offset = "0xEADC68", VA = "0xEADC68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200017C")]
	[CompilerGenerated]
	private sealed class <endTurnAfterTime>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AllyTaskMaster <>4__this;

		[Token(Token = "0x170000A9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000768")]
			[Address(RVA = "0xEADD80", Offset = "0xEADD80", VA = "0xEADD80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600076A")]
			[Address(RVA = "0xEADDC8", Offset = "0xEADDC8", VA = "0xEADDC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0xEAD7CC", Offset = "0xEAD7CC", VA = "0xEAD7CC")]
		[DebuggerHidden]
		public <endTurnAfterTime>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0xEADCB0", Offset = "0xEADCB0", VA = "0xEADCB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0xEADCB4", Offset = "0xEADCB4", VA = "0xEADCB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000769")]
		[Address(RVA = "0xEADD88", Offset = "0xEADD88", VA = "0xEADD88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AllyProjectile projectile;

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject castParticle;

	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioClip[] attackClips;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AudioSource voiceSource;

	[Token(Token = "0x6000758")]
	[Address(RVA = "0xEAD698", Offset = "0xEAD698", VA = "0xEAD698")]
	private void Start()
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0xEAD69C", Offset = "0xEAD69C", VA = "0xEAD69C")]
	private void Update()
	{
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0xEAD6A0", Offset = "0xEAD6A0", VA = "0xEAD6A0", Slot = "4")]
	public override void allyAttack()
	{
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0xEAD728", Offset = "0xEAD728", VA = "0xEAD728", Slot = "5")]
	public override void doVictory()
	{
	}

	[Token(Token = "0x600075C")]
	[Address(RVA = "0xEAD6C0", Offset = "0xEAD6C0", VA = "0xEAD6C0")]
	[IteratorStateMachine(typeof(<waterAttack>d__8))]
	private IEnumerator waterAttack()
	{
		return null;
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0xEAD754", Offset = "0xEAD754", VA = "0xEAD754")]
	[IteratorStateMachine(typeof(<endTurnAfterTime>d__9))]
	private IEnumerator endTurnAfterTime(float time)
	{
		return null;
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0xEAD7F4", Offset = "0xEAD7F4", VA = "0xEAD7F4")]
	public AllyTaskMaster()
	{
	}
}
[Token(Token = "0x200017D")]
[CreateAssetMenu(menuName = "Battle V2/Element", order = 1)]
public class BattleElementType : ScriptableObject
{
	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AssetIcon("100%", "100%", "0", "0", 64, IconAnchor.Center, IconAspect.Fit, "true", "#ffffff", 0, FontStyle.Normal, IconAnchor.Center, IconProjection.Perspective, -1, null)]
	public Sprite sprite;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string elementName;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BattleElementType weakness;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public BattleElementType strong;

	[Token(Token = "0x600076B")]
	[Address(RVA = "0xEADDD0", Offset = "0xEADDD0", VA = "0xEADDD0")]
	public BattleElementType()
	{
	}
}
[Token(Token = "0x200017E")]
public class HandCasterV2 : HandCaster
{
	[Token(Token = "0x170000AB")]
	protected override bool canCastSpell
	{
		[Token(Token = "0x600076C")]
		[Address(RVA = "0xEADDD8", Offset = "0xEADDD8", VA = "0xEADDD8", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600076D")]
	[Address(RVA = "0xEADF40", Offset = "0xEADF40", VA = "0xEADF40", Slot = "6")]
	public override void updateSpellInfo()
	{
	}

	[Token(Token = "0x600076E")]
	[Address(RVA = "0xEAE664", Offset = "0xEAE664", VA = "0xEAE664")]
	public HandCasterV2()
	{
	}
}
[Token(Token = "0x200017F")]
public class DarkaxerBattleHazzard : MonoBehaviour
{
	[Token(Token = "0x2000180")]
	[CompilerGenerated]
	private sealed class <disolveMaterial>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DarkaxerBattleHazzard <>4__this;

		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Renderer[] <rends>5__2;

		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <disolve>5__3;

		[Token(Token = "0x170000AC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600077A")]
			[Address(RVA = "0xEAEDB0", Offset = "0xEAEDB0", VA = "0xEAEDB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600077C")]
			[Address(RVA = "0xEAEDF8", Offset = "0xEAEDF8", VA = "0xEAEDF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0xEAEA84", Offset = "0xEAEA84", VA = "0xEAEA84")]
		[DebuggerHidden]
		public <disolveMaterial>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0xEAEB84", Offset = "0xEAEB84", VA = "0xEAEB84", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0xEAEB88", Offset = "0xEAEB88", VA = "0xEAEB88", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0xEAEDB8", Offset = "0xEAEDB8", VA = "0xEAEDB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000181")]
	[CompilerGenerated]
	private sealed class <castShotgunBlast>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DarkaxerBattleHazzard <>4__this;

		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x170000AE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000780")]
			[Address(RVA = "0xEAF0B0", Offset = "0xEAF0B0", VA = "0xEAF0B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000782")]
			[Address(RVA = "0xEAF0F8", Offset = "0xEAF0F8", VA = "0xEAF0F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0xEAEAAC", Offset = "0xEAEAAC", VA = "0xEAEAAC")]
		[DebuggerHidden]
		public <castShotgunBlast>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0xEAEE00", Offset = "0xEAEE00", VA = "0xEAEE00", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0xEAEE04", Offset = "0xEAEE04", VA = "0xEAEE04", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0xEAF0B8", Offset = "0xEAF0B8", VA = "0xEAF0B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000182")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DarkaxerBattleHazzard <>4__this;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x170000B0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000786")]
			[Address(RVA = "0xEAF350", Offset = "0xEAF350", VA = "0xEAF350", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000788")]
			[Address(RVA = "0xEAF398", Offset = "0xEAF398", VA = "0xEAF398", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0xEAEB3C", Offset = "0xEAEB3C", VA = "0xEAEB3C")]
		[DebuggerHidden]
		public <shootProjectile>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0xEAF100", Offset = "0xEAF100", VA = "0xEAF100", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0xEAF104", Offset = "0xEAF104", VA = "0xEAF104", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0xEAF358", Offset = "0xEAF358", VA = "0xEAF358", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] telePoints;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject projectile;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform projectileLaunchTrans;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Animator anim;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float actionTimer;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float maxActionTime;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float numOfShots;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int damage;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float projSpeed;

	[Token(Token = "0x600076F")]
	[Address(RVA = "0xEAE66C", Offset = "0xEAE66C", VA = "0xEAE66C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0xEAE71C", Offset = "0xEAE71C", VA = "0xEAE71C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0xEAE9FC", Offset = "0xEAE9FC", VA = "0xEAE9FC")]
	public void disolveMat()
	{
	}

	[Token(Token = "0x6000772")]
	[Address(RVA = "0xEAE974", Offset = "0xEAE974", VA = "0xEAE974")]
	private void teleport()
	{
	}

	[Token(Token = "0x6000773")]
	[Address(RVA = "0xEAEA1C", Offset = "0xEAEA1C", VA = "0xEAEA1C")]
	[IteratorStateMachine(typeof(<disolveMaterial>d__13))]
	private IEnumerator disolveMaterial()
	{
		return null;
	}

	[Token(Token = "0x6000774")]
	[Address(RVA = "0xEAE90C", Offset = "0xEAE90C", VA = "0xEAE90C")]
	[IteratorStateMachine(typeof(<castShotgunBlast>d__14))]
	protected IEnumerator castShotgunBlast()
	{
		return null;
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0xEAEAD4", Offset = "0xEAEAD4", VA = "0xEAEAD4")]
	[IteratorStateMachine(typeof(<shootProjectile>d__15))]
	protected IEnumerator shootProjectile()
	{
		return null;
	}

	[Token(Token = "0x6000776")]
	[Address(RVA = "0xEAEB64", Offset = "0xEAEB64", VA = "0xEAEB64")]
	public DarkaxerBattleHazzard()
	{
	}
}
[Token(Token = "0x2000183")]
public class BattleAbility : MonoBehaviour
{
	[Token(Token = "0x2000184")]
	public enum AbilityType
	{
		[Token(Token = "0x400070D")]
		attack,
		[Token(Token = "0x400070E")]
		defense
	}

	[Token(Token = "0x2000185")]
	public enum AbilityRange
	{
		[Token(Token = "0x4000710")]
		ranged,
		[Token(Token = "0x4000711")]
		melee,
		[Token(Token = "0x4000712")]
		global
	}

	[Token(Token = "0x2000186")]
	public enum StatusEffect
	{
		[Token(Token = "0x4000714")]
		poison,
		[Token(Token = "0x4000715")]
		stun,
		[Token(Token = "0x4000716")]
		slow,
		[Token(Token = "0x4000717")]
		root,
		[Token(Token = "0x4000718")]
		weaken,
		[Token(Token = "0x4000719")]
		broken,
		[Token(Token = "0x400071A")]
		vamp
	}

	[Token(Token = "0x2000187")]
	public enum Buff
	{
		[Token(Token = "0x400071C")]
		apBoost,
		[Token(Token = "0x400071D")]
		defenseBoost,
		[Token(Token = "0x400071E")]
		powerBoost,
		[Token(Token = "0x400071F")]
		precisionBoost
	}

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject projectilePrefab;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject particleEffect;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AbilityType abilityType;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public AbilityRange abilityRange;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public StatusEffect statusEffect;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int baseDamage;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int heal;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int statusInflictChance;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int effectPotency;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int buffPotency;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int adrenalineGain;

	[Token(Token = "0x6000789")]
	[Address(RVA = "0xEAF3A0", Offset = "0xEAF3A0", VA = "0xEAF3A0")]
	public BattleAbility()
	{
	}
}
[Token(Token = "0x2000188")]
public class BattleAlly : MonoBehaviour
{
	[Token(Token = "0x4000720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxTurnsActive;

	[Token(Token = "0x4000721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int turnsActive;

	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int power;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int level;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator allyAnim;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform projTrans;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Sprite allyPortrait;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string summonName;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int summonSlot;

	[Token(Token = "0x600078A")]
	[Address(RVA = "0xEA7570", Offset = "0xEA7570", VA = "0xEA7570", Slot = "4")]
	public virtual void allyAttack()
	{
	}

	[Token(Token = "0x600078B")]
	[Address(RVA = "0xEA7294", Offset = "0xEA7294", VA = "0xEA7294", Slot = "5")]
	public virtual void doVictory()
	{
	}

	[Token(Token = "0x600078C")]
	[Address(RVA = "0xEA8B4C", Offset = "0xEA8B4C", VA = "0xEA8B4C", Slot = "6")]
	public virtual void onSpellCast(PlayerSpell spell, HandCaster hand)
	{
	}

	[Token(Token = "0x600078D")]
	[Address(RVA = "0xEA76BC", Offset = "0xEA76BC", VA = "0xEA76BC")]
	public BattleAlly()
	{
	}
}
[Token(Token = "0x2000189")]
public class BattleManager : MonoBehaviour
{
	[Token(Token = "0x200018A")]
	public enum BattleState
	{
		[Token(Token = "0x400074F")]
		PreBattle,
		[Token(Token = "0x4000750")]
		Starting,
		[Token(Token = "0x4000751")]
		PlayerTurn,
		[Token(Token = "0x4000752")]
		EnemyTurn,
		[Token(Token = "0x4000753")]
		Finished,
		[Token(Token = "0x4000754")]
		PlayerDead,
		[Token(Token = "0x4000755")]
		RealTimeCombat,
		[Token(Token = "0x4000756")]
		AllyTurn
	}

	[Token(Token = "0x200018B")]
	public delegate void BattleVictoryEventHandler(bool closeCall, bool allyActive);

	[Token(Token = "0x200018C")]
	private class SpeedSort : IComparer<GameObject>
	{
		[Token(Token = "0x60007A4")]
		[Address(RVA = "0xEB0FD0", Offset = "0xEB0FD0", VA = "0xEB0FD0", Slot = "4")]
		private int System.Collections.Generic.IComparer<UnityEngine.GameObject>.Compare(GameObject _objA, GameObject _objB)
		{
			return default(int);
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0xEB08F0", Offset = "0xEB08F0", VA = "0xEB08F0")]
		public SpeedSort()
		{
		}
	}

	[Token(Token = "0x200018D")]
	private class PreBattleState : State<BattleManager>
	{
		[Token(Token = "0x60007A6")]
		[Address(RVA = "0xEB1064", Offset = "0xEB1064", VA = "0xEB1064", Slot = "4")]
		public override void activate(BattleManager parent)
		{
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xEB10CC", Offset = "0xEB10CC", VA = "0xEB10CC", Slot = "5")]
		public override void update(BattleManager parent)
		{
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0xEAF8F0", Offset = "0xEAF8F0", VA = "0xEAF8F0")]
		public PreBattleState()
		{
		}
	}

	[Token(Token = "0x200018E")]
	private class StartingState : State<BattleManager>
	{
		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float startupTime;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float startupWait;

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xEB1138", Offset = "0xEB1138", VA = "0xEB1138", Slot = "4")]
		public override void activate(BattleManager parent)
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xEB1660", Offset = "0xEB1660", VA = "0xEB1660", Slot = "5")]
		public override void update(BattleManager parent)
		{
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xEAF938", Offset = "0xEAF938", VA = "0xEAF938")]
		public StartingState()
		{
		}
	}

	[Token(Token = "0x200018F")]
	private class PlayerTurnState : State<BattleManager>
	{
		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float endTimer;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float endTimeRequired;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool changingState;

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0xEB17C8", Offset = "0xEB17C8", VA = "0xEB17C8", Slot = "4")]
		public override void activate(BattleManager parent)
		{
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0xEB1B34", Offset = "0xEB1B34", VA = "0xEB1B34", Slot = "5")]
		public override void update(BattleManager parent)
		{
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0xEAF988", Offset = "0xEAF988", VA = "0xEAF988")]
		public PlayerTurnState()
		{
		}
	}

	[Token(Token = "0x2000191")]
	private class AllyTurnState : State<BattleManager>
	{
		[Token(Token = "0x60007B2")]
		[Address(RVA = "0xEB1D6C", Offset = "0xEB1D6C", VA = "0xEB1D6C", Slot = "4")]
		public override void activate(BattleManager parent)
		{
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0xEB1F60", Offset = "0xEB1F60", VA = "0xEB1F60", Slot = "5")]
		public override void update(BattleManager parent)
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0xEAFB20", Offset = "0xEAFB20", VA = "0xEAFB20")]
		public AllyTurnState()
		{
		}
	}

	[Token(Token = "0x2000193")]
	private class EnemyTurnState : State<BattleManager>
	{
		[Token(Token = "0x2000194")]
		[CompilerGenerated]
		private sealed class <changeStateTimer>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000761")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000762")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000763")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EnemyTurnState <>4__this;

			[Token(Token = "0x170000B2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60007BF")]
				[Address(RVA = "0xEB2790", Offset = "0xEB2790", VA = "0xEB2790", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60007C1")]
				[Address(RVA = "0xEB27D8", Offset = "0xEB27D8", VA = "0xEB27D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60007BC")]
			[Address(RVA = "0xEB21B0", Offset = "0xEB21B0", VA = "0xEB21B0")]
			[DebuggerHidden]
			public <changeStateTimer>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x60007BD")]
			[Address(RVA = "0xEB26E4", Offset = "0xEB26E4", VA = "0xEB26E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60007BE")]
			[Address(RVA = "0xEB26E8", Offset = "0xEB26E8", VA = "0xEB26E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60007C0")]
			[Address(RVA = "0xEB2798", Offset = "0xEB2798", VA = "0xEB2798", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool changingState;

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0xEB2148", Offset = "0xEB2148", VA = "0xEB2148")]
		[IteratorStateMachine(typeof(<changeStateTimer>d__1))]
		private IEnumerator changeStateTimer()
		{
			return null;
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0xEB21D8", Offset = "0xEB21D8", VA = "0xEB21D8", Slot = "4")]
		public override void activate(BattleManager parent)
		{
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xEB25A4", Offset = "0xEB25A4", VA = "0xEB25A4", Slot = "5")]
		public override void update(BattleManager parent)
		{
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0xEAF9DC", Offset = "0xEAF9DC", VA = "0xEAF9DC")]
		public EnemyTurnState()
		{
		}
	}

	[Token(Token = "0x2000196")]
	private class RealTimeCombatState : State<BattleManager>
	{
		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float spawnTimer;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int waveNum;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float timeToSpawn;

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xEB28A8", Offset = "0xEB28A8", VA = "0xEB28A8")]
		private void spawnEnemies(BattleManager parent)
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xEB2978", Offset = "0xEB2978", VA = "0xEB2978", Slot = "4")]
		public override void activate(BattleManager parent)
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xEB2AE0", Offset = "0xEB2AE0", VA = "0xEB2AE0", Slot = "5")]
		public override void update(BattleManager parent)
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0xEAFACC", Offset = "0xEAFACC", VA = "0xEAFACC")]
		public RealTimeCombatState()
		{
		}
	}

	[Token(Token = "0x2000197")]
	private class FinishedState : State<BattleManager>
	{
		[Token(Token = "0x2000198")]
		[CompilerGenerated]
		private sealed class <waitAfterResults>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000770")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000771")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000772")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FinishedState <>4__this;

			[Token(Token = "0x170000B4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60007D1")]
				[Address(RVA = "0xEB4618", Offset = "0xEB4618", VA = "0xEB4618", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60007D3")]
				[Address(RVA = "0xEB4660", Offset = "0xEB4660", VA = "0xEB4660", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60007CE")]
			[Address(RVA = "0xEB3090", Offset = "0xEB3090", VA = "0xEB3090")]
			[DebuggerHidden]
			public <waitAfterResults>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60007CF")]
			[Address(RVA = "0xEB4568", Offset = "0xEB4568", VA = "0xEB4568", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60007D0")]
			[Address(RVA = "0xEB456C", Offset = "0xEB456C", VA = "0xEB456C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60007D2")]
			[Address(RVA = "0xEB4620", Offset = "0xEB4620", VA = "0xEB4620", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool canGoToNextScene;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool playerLeveled;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool levelScreenSeen;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		private bool loadingScene;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float finishedTime;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float maxFinishTime;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool updatedStats;

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xEB2BB4", Offset = "0xEB2BB4", VA = "0xEB2BB4", Slot = "4")]
		public override void activate(BattleManager parent)
		{
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0xEB3028", Offset = "0xEB3028", VA = "0xEB3028")]
		[IteratorStateMachine(typeof(<waitAfterResults>d__7))]
		private IEnumerator waitAfterResults()
		{
			return null;
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0xEB30B8", Offset = "0xEB30B8", VA = "0xEB30B8", Slot = "5")]
		public override void update(BattleManager parent)
		{
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0xEB35E8", Offset = "0xEB35E8", VA = "0xEB35E8")]
		private void updatePlayerStats(BattleManager parent)
		{
		}

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0xEAFA2C", Offset = "0xEAFA2C", VA = "0xEAFA2C")]
		public FinishedState()
		{
		}
	}

	[Token(Token = "0x2000199")]
	private class PlayerDeadState : State<BattleManager>
	{
		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float finishedTime;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float maxFinishTime;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool startedSceneLoad;

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0xEB4668", Offset = "0xEB4668", VA = "0xEB4668", Slot = "4")]
		public override void activate(BattleManager parent)
		{
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0xEB4730", Offset = "0xEB4730", VA = "0xEB4730", Slot = "5")]
		public override void update(BattleManager parent)
		{
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0xEAFA7C", Offset = "0xEAFA7C", VA = "0xEAFA7C")]
		public PlayerDeadState()
		{
		}
	}

	[Token(Token = "0x200019B")]
	[CompilerGenerated]
	private sealed class <delayEnemySpawn>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemySpawner spawner;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BattleManager <>4__this;

		[Token(Token = "0x170000B6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007DF")]
			[Address(RVA = "0xEB4B60", Offset = "0xEB4B60", VA = "0xEB4B60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007E1")]
			[Address(RVA = "0xEB4BA8", Offset = "0xEB4BA8", VA = "0xEB4BA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0xEAFF7C", Offset = "0xEAFF7C", VA = "0xEAFF7C")]
		[DebuggerHidden]
		public <delayEnemySpawn>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0xEB4898", Offset = "0xEB4898", VA = "0xEB4898", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0xEB489C", Offset = "0xEB489C", VA = "0xEB489C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0xEB4B68", Offset = "0xEB4B68", VA = "0xEB4B68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200019C")]
	[CompilerGenerated]
	private sealed class <delaySpawnParticle>d__47 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BattleManager <>4__this;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyParent ep;

		[Token(Token = "0x170000B8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007E5")]
			[Address(RVA = "0xEB4C5C", Offset = "0xEB4C5C", VA = "0xEB4C5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007E7")]
			[Address(RVA = "0xEB4CA4", Offset = "0xEB4CA4", VA = "0xEB4CA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0xEB08F8", Offset = "0xEB08F8", VA = "0xEB08F8")]
		[DebuggerHidden]
		public <delaySpawnParticle>d__47(int <>1__state)
		{
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0xEB4BB0", Offset = "0xEB4BB0", VA = "0xEB4BB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xEB4BB4", Offset = "0xEB4BB4", VA = "0xEB4BB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xEB4C64", Offset = "0xEB4C64", VA = "0xEB4C64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200019D")]
	[CompilerGenerated]
	private sealed class <delayStateChangeToEnemy>d__56 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BattleManager <>4__this;

		[Token(Token = "0x170000BA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007EB")]
			[Address(RVA = "0xEB4E04", Offset = "0xEB4E04", VA = "0xEB4E04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007ED")]
			[Address(RVA = "0xEB4E4C", Offset = "0xEB4E4C", VA = "0xEB4E4C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0xEB0B74", Offset = "0xEB0B74", VA = "0xEB0B74")]
		[DebuggerHidden]
		public <delayStateChangeToEnemy>d__56(int <>1__state)
		{
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0xEB4CAC", Offset = "0xEB4CAC", VA = "0xEB4CAC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0xEB4CB0", Offset = "0xEB4CB0", VA = "0xEB4CB0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0xEB4E0C", Offset = "0xEB4E0C", VA = "0xEB4E0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200019E")]
	[CompilerGenerated]
	private sealed class <nextAttackTimer>d__59 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BattleManager <>4__this;

		[Token(Token = "0x170000BC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007F1")]
			[Address(RVA = "0xEB52D0", Offset = "0xEB52D0", VA = "0xEB52D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000BD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007F3")]
			[Address(RVA = "0xEB5318", Offset = "0xEB5318", VA = "0xEB5318", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xEB0C04", Offset = "0xEB0C04", VA = "0xEB0C04")]
		[DebuggerHidden]
		public <nextAttackTimer>d__59(int <>1__state)
		{
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0xEB4E54", Offset = "0xEB4E54", VA = "0xEB4E54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0xEB4E58", Offset = "0xEB4E58", VA = "0xEB4E58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0xEB52D8", Offset = "0xEB52D8", VA = "0xEB52D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BattleManager instance;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int combatSystemVersion;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private StateMachine<BattleManager, BattleState> stateMachine;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<GameObject> enemyList;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<EnemyParent> queuedEnemies;

	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<EnemyParent> startingEnemies;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public EnemySpawner[] enemySpawners;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<EnemySpawner> queuedSpawners;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public EnemyParent[] testEnemys;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioSource audioSource;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject alertPrefab;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int turnNum;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool spawnersFull;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	public bool testMode;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
	public bool forceTestMode;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
	public bool restrictVoiceAssistant;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool showDifficultyInEnemyName;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool realTimeCOmbatMode;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	public bool freezeCurrentPhase;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
	public bool bossPresentinBattle;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public bool reloadCurrentSceneOnEnd;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	public bool passthroughEnabled;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int expPool;

	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public int moneyPool;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float battleSizeExpMultiplier;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public List<Item> itemPool;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public UnityEvent onPlayerTurnStart;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public UnityEvent onEnemyTurnStart;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public UnityEvent onBattleStart;

	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public UnityEvent OnBattleOver;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public UnityEvent OnSpawnEnemy;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public List<BattleAlly> activeAllies;

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[Header("Arena Settings")]
	public float enemyLinkChance;

	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public MeshRenderer[] arenaRenderers;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected bool currentEnemyWaveAttacking;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public int currentEnemy;

	[Token(Token = "0x14000012")]
	public event BattleVictoryEventHandler OnBattleWon
	{
		[Token(Token = "0x600078E")]
		[Address(RVA = "0xEAF3A8", Offset = "0xEAF3A8", VA = "0xEAF3A8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600078F")]
		[Address(RVA = "0xEAF444", Offset = "0xEAF444", VA = "0xEAF444")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000790")]
	[Address(RVA = "0xEAF4E0", Offset = "0xEAF4E0", VA = "0xEAF4E0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000791")]
	[Address(RVA = "0xEAF538", Offset = "0xEAF538", VA = "0xEAF538")]
	private void Start()
	{
	}

	[Token(Token = "0x6000792")]
	[Address(RVA = "0xEAFB68", Offset = "0xEAFB68", VA = "0xEAFB68")]
	private void Update()
	{
	}

	[Token(Token = "0x6000793")]
	[Address(RVA = "0xEAFBB8", Offset = "0xEAFBB8", VA = "0xEAFBB8")]
	public EnemySpawner getEmptySpawner()
	{
		return null;
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0xEAFC04", Offset = "0xEAFC04", VA = "0xEAFC04")]
	public void tryToSpawnNewEnemy(EnemySpawner spawner)
	{
	}

	[Token(Token = "0x6000795")]
	[Address(RVA = "0xEAFE1C", Offset = "0xEAFE1C", VA = "0xEAFE1C")]
	private void spawnAppearParticle(EnemyParent enemy)
	{
	}

	[Token(Token = "0x6000796")]
	[Address(RVA = "0xEAFDA8", Offset = "0xEAFDA8", VA = "0xEAFDA8")]
	[IteratorStateMachine(typeof(<delayEnemySpawn>d__45))]
	private IEnumerator delayEnemySpawn(EnemySpawner spawner)
	{
		return null;
	}

	[Token(Token = "0x6000797")]
	[Address(RVA = "0xEAFFA4", Offset = "0xEAFFA4", VA = "0xEAFFA4")]
	protected void spawnEnemies()
	{
	}

	[Token(Token = "0x6000798")]
	[Address(RVA = "0xEB087C", Offset = "0xEB087C", VA = "0xEB087C")]
	[IteratorStateMachine(typeof(<delaySpawnParticle>d__47))]
	private IEnumerator delaySpawnParticle(EnemyParent ep)
	{
		return null;
	}

	[Token(Token = "0x6000799")]
	[Address(RVA = "0xEB0920", Offset = "0xEB0920", VA = "0xEB0920")]
	public void spawnNewWave()
	{
	}

	[Token(Token = "0x600079A")]
	[Address(RVA = "0xEB0B0C", Offset = "0xEB0B0C", VA = "0xEB0B0C")]
	[IteratorStateMachine(typeof(<delayStateChangeToEnemy>d__56))]
	private IEnumerator delayStateChangeToEnemy()
	{
		return null;
	}

	[Token(Token = "0x600079B")]
	[Address(RVA = "0xEB0B9C", Offset = "0xEB0B9C", VA = "0xEB0B9C")]
	[IteratorStateMachine(typeof(<nextAttackTimer>d__59))]
	private IEnumerator nextAttackTimer(bool enemyDied = false)
	{
		return null;
	}

	[Token(Token = "0x600079C")]
	[Address(RVA = "0xEB0C2C", Offset = "0xEB0C2C", VA = "0xEB0C2C")]
	public void nextAttack(bool enemyDied = false)
	{
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0xEA7E74", Offset = "0xEA7E74", VA = "0xEA7E74")]
	public void endAllyTurn(BattleAlly ally)
	{
	}

	[Token(Token = "0x600079E")]
	[Address(RVA = "0xEAE8C4", Offset = "0xEAE8C4", VA = "0xEAE8C4")]
	public BattleState getState()
	{
		return default(BattleState);
	}

	[Token(Token = "0x600079F")]
	[Address(RVA = "0xEB0C50", Offset = "0xEB0C50", VA = "0xEB0C50")]
	public BattleManager()
	{
	}
}
[Token(Token = "0x200019F")]
public class BattleSoundManager : MonoBehaviour
{
	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource source1;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip[] hurtSounds;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] hurtSoundsFem;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip changeSpell;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip selectSpell;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioClip castError;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BattleSoundManager instance;

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0xEB5320", Offset = "0xEB5320", VA = "0xEB5320")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007F5")]
	[Address(RVA = "0xEB536C", Offset = "0xEB536C", VA = "0xEB536C")]
	public void playHurtSound()
	{
	}

	[Token(Token = "0x60007F6")]
	[Address(RVA = "0xEB5438", Offset = "0xEB5438", VA = "0xEB5438")]
	public void playChangeSpellSound()
	{
	}

	[Token(Token = "0x60007F7")]
	[Address(RVA = "0xEB546C", Offset = "0xEB546C", VA = "0xEB546C")]
	public void playSelectSpellSOund()
	{
	}

	[Token(Token = "0x60007F8")]
	[Address(RVA = "0xEB54A0", Offset = "0xEB54A0", VA = "0xEB54A0")]
	public void playCastErrorSound()
	{
	}

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0xEB54D4", Offset = "0xEB54D4", VA = "0xEB54D4")]
	public BattleSoundManager()
	{
	}
}
[Token(Token = "0x20001A0")]
public class BattleVoiceAssistant : MonoBehaviour
{
	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource voiceSource;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip[] critClips;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] damagedClips;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip[] victoryClips;

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip[] victoryClipsClose;

	[Token(Token = "0x4000794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioClip[] lowHealthClips;

	[Token(Token = "0x4000795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioClip[] adrenalineMaxed;

	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioClip[] lotsOfEnemiesClips;

	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioClip[] newSpawnClips;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioClip[] enemyLowClips;

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AudioClip[] enemyDefeatedClips;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BattleVoiceAssistant instance;

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0xEB54DC", Offset = "0xEB54DC", VA = "0xEB54DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0xEB5528", Offset = "0xEB5528", VA = "0xEB5528")]
	private void Start()
	{
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0xEB58C0", Offset = "0xEB58C0", VA = "0xEB58C0")]
	public void playCritVoice(int amount)
	{
	}

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0xEB596C", Offset = "0xEB596C", VA = "0xEB596C")]
	public void playDamagedVoice()
	{
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0xEB5A18", Offset = "0xEB5A18", VA = "0xEB5A18")]
	public void playLowHealth()
	{
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0xEB5ACC", Offset = "0xEB5ACC", VA = "0xEB5ACC")]
	public void playEnemyDefeated()
	{
	}

	[Token(Token = "0x6000800")]
	[Address(RVA = "0xEB5B74", Offset = "0xEB5B74", VA = "0xEB5B74")]
	public void playEnemyLow()
	{
	}

	[Token(Token = "0x6000801")]
	[Address(RVA = "0xEB5C20", Offset = "0xEB5C20", VA = "0xEB5C20")]
	public void playAdrenalineMaxed()
	{
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0xEB5D14", Offset = "0xEB5D14", VA = "0xEB5D14")]
	public void playNewSpawn()
	{
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0xEB5DBC", Offset = "0xEB5DBC", VA = "0xEB5DBC")]
	public void playLotsOfEnemies()
	{
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0xEB5E64", Offset = "0xEB5E64", VA = "0xEB5E64")]
	public void playVictoryVoice(bool closeCall, bool allyActive)
	{
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0xEB5F44", Offset = "0xEB5F44", VA = "0xEB5F44")]
	public BattleVoiceAssistant()
	{
	}
}
[Token(Token = "0x20001A1")]
public class CasinoOddsScreen : MonoBehaviour
{
	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TMP_Text text;

	[Token(Token = "0x6000806")]
	[Address(RVA = "0xEB5F4C", Offset = "0xEB5F4C", VA = "0xEB5F4C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0xEB6320", Offset = "0xEB6320", VA = "0xEB6320")]
	public CasinoOddsScreen()
	{
	}
}
[Token(Token = "0x20001A2")]
public class EnemyLinkEffect : MonoBehaviour
{
	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject link1;

	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject link2;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LineRenderer lineRend;

	[Token(Token = "0x6000808")]
	[Address(RVA = "0xEB6328", Offset = "0xEB6328", VA = "0xEB6328")]
	private void Update()
	{
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0xEB643C", Offset = "0xEB643C", VA = "0xEB643C")]
	public EnemyLinkEffect()
	{
	}
}
[Token(Token = "0x20001A3")]
public class EnemySpawner : MonoBehaviour
{
	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool groundSpawner;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool spawnerOccupied;

	[Token(Token = "0x600080A")]
	[Address(RVA = "0xEB6444", Offset = "0xEB6444", VA = "0xEB6444")]
	public EnemySpawner()
	{
	}
}
[Token(Token = "0x20001A4")]
public class GameManager : MonoBehaviour
{
	[Token(Token = "0x600080B")]
	[Address(RVA = "0xEB6454", Offset = "0xEB6454", VA = "0xEB6454")]
	private void Start()
	{
	}

	[Token(Token = "0x600080C")]
	[Address(RVA = "0xEB6458", Offset = "0xEB6458", VA = "0xEB6458")]
	private void Update()
	{
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0xEB645C", Offset = "0xEB645C", VA = "0xEB645C")]
	public GameManager()
	{
	}
}
[Token(Token = "0x20001A5")]
public class AISummon : MonoBehaviour
{
	[Token(Token = "0x40007A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayerSpell spell;

	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator anim;

	[Token(Token = "0x600080E")]
	[Address(RVA = "0xEB6464", Offset = "0xEB6464", VA = "0xEB6464")]
	private void Start()
	{
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0xEB6570", Offset = "0xEB6570", VA = "0xEB6570")]
	private void castSpell()
	{
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0xEB6610", Offset = "0xEB6610", VA = "0xEB6610")]
	public AISummon()
	{
	}
}
[Token(Token = "0x20001A6")]
public class ItemStats
{
	[Token(Token = "0x20001A7")]
	public enum ItemType
	{
		[Token(Token = "0x40007AC")]
		weapon,
		[Token(Token = "0x40007AD")]
		helm,
		[Token(Token = "0x40007AE")]
		chest,
		[Token(Token = "0x40007AF")]
		glove
	}

	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ItemType itemType;

	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int health;

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int defense;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int ap;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int regen;

	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int precision;

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int speed;

	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int power;

	[Token(Token = "0x6000811")]
	[Address(RVA = "0xEB6618", Offset = "0xEB6618", VA = "0xEB6618")]
	public ItemStats(ItemType setType)
	{
	}
}
[Token(Token = "0x20001A8")]
public class PassiveAbility : MonoBehaviour
{
	[Token(Token = "0x20001A9")]
	public enum PassiveType
	{
		[Token(Token = "0x40007B8")]
		onceATurn,
		[Token(Token = "0x40007B9")]
		abilityMod,
		[Token(Token = "0x40007BA")]
		comboMod,
		[Token(Token = "0x40007BB")]
		flatStat,
		[Token(Token = "0x40007BC")]
		firstTurn,
		[Token(Token = "0x40007BD")]
		onCast,
		[Token(Token = "0x40007BE")]
		onAttack,
		[Token(Token = "0x40007BF")]
		special,
		[Token(Token = "0x40007C0")]
		onHurt,
		[Token(Token = "0x40007C1")]
		onSpellHit
	}

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string abilityName;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string description;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int pointCost;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Sprite icon;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool stackable;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int maxStacks;

	[Token(Token = "0x40007B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PassiveType passiveType;

	[Token(Token = "0x170000BE")]
	public string toolTip
	{
		[Token(Token = "0x6000812")]
		[Address(RVA = "0xEB6640", Offset = "0xEB6640", VA = "0xEB6640")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000BF")]
	public string translatedName
	{
		[Token(Token = "0x6000813")]
		[Address(RVA = "0xEB6798", Offset = "0xEB6798", VA = "0xEB6798")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C0")]
	public string translatedDescription
	{
		[Token(Token = "0x6000814")]
		[Address(RVA = "0xEB6720", Offset = "0xEB6720", VA = "0xEB6720")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0xEB6854", Offset = "0xEB6854", VA = "0xEB6854", Slot = "4")]
	public virtual void onceATurnFunction()
	{
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0xEB6858", Offset = "0xEB6858", VA = "0xEB6858", Slot = "5")]
	public virtual void onCastFunction(GameObject hand)
	{
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0xEB685C", Offset = "0xEB685C", VA = "0xEB685C", Slot = "6")]
	public virtual void onAttackFunction(Weapon weapon, EnemyParent enemy)
	{
	}

	[Token(Token = "0x6000818")]
	[Address(RVA = "0xEB6860", Offset = "0xEB6860", VA = "0xEB6860", Slot = "7")]
	public virtual void onBattleStartFunction()
	{
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0xEB6864", Offset = "0xEB6864", VA = "0xEB6864", Slot = "8")]
	public virtual void onHurtFunction()
	{
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0xEB6868", Offset = "0xEB6868", VA = "0xEB6868", Slot = "9")]
	public virtual void onSpellHitFunction(int damage, bool crit)
	{
	}

	[Token(Token = "0x600081B")]
	[Address(RVA = "0xEB686C", Offset = "0xEB686C", VA = "0xEB686C")]
	public PassiveAbility()
	{
	}
}
[Serializable]
[Token(Token = "0x20001AA")]
public class PassiveAbilityData
{
	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string abilityName;

	[Token(Token = "0x600081C")]
	[Address(RVA = "0xEB68C4", Offset = "0xEB68C4", VA = "0xEB68C4")]
	public PassiveAbilityData(string newName)
	{
	}
}
[Token(Token = "0x20001AB")]
public class PersistentData : MonoBehaviour
{
	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string playerStatsString;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string playerProgressString;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string playerSettingsString;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioMixer mixer;

	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int languageVer;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<EnemyParent> enemyEncounterList;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PlayerStats currentPlayerStats;

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameProgress gameProgress;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ArcaxerPlayerSettings playerSettings;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public ItemEquip equippedTop;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ItemEquip equippedBottom;

	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ItemEquip equippedHead;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ItemEquip equippedWeaponRight;

	[Token(Token = "0x40007D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ItemEquip equippedWeaponLeft;

	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ItemEquip equippedAccessory;

	[Token(Token = "0x40007D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public List<Item> liveInventory;

	[Token(Token = "0x40007D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public List<PlayerSpell> currentSpells;

	[Token(Token = "0x40007D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public List<PassiveAbility> equippedPassives;

	[Token(Token = "0x40007D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public List<PassiveAbility> unlockedPassives;

	[Token(Token = "0x40007D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public PlayerSpell[] leftHandSpells;

	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public PlayerSpell[] rightHandSpells;

	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public PlayerSpell equippedDefensiveSpellRight;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public PlayerSpell equippedDefensiveSpellLeft;

	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public OverworldPet activePet;

	[Token(Token = "0x40007DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public bool lastBossDefeated;

	[Token(Token = "0x40007DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
	public bool quest1;

	[Token(Token = "0x40007DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
	public bool debugMode;

	[Token(Token = "0x40007DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD3")]
	public bool loadingFromBattle;

	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public bool playerInitiatedBattle;

	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public string lastOverworldSceneName;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float lastCameraAngle;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float difficultyLevel;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public int lastDungeonFloor;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public List<EnemyModifier> activeEnemyModifiers;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Item[] allItems;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public int currentSaveFileNum;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private float oldTimeScale;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private bool headSetOff;

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
	private bool headSetUnFocus;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public string battleStoryString;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public int battleStoryNum;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static PersistentData _instance;

	[Token(Token = "0x170000C1")]
	public bool oldSaveData
	{
		[Token(Token = "0x600081D")]
		[Address(RVA = "0xEB6928", Offset = "0xEB6928", VA = "0xEB6928")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000C2")]
	public string hubSceneString
	{
		[Token(Token = "0x600081E")]
		[Address(RVA = "0xEB6ADC", Offset = "0xEB6ADC", VA = "0xEB6ADC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C3")]
	public static PersistentData instance
	{
		[Token(Token = "0x6000826")]
		[Address(RVA = "0xEA7BEC", Offset = "0xEA7BEC", VA = "0xEA7BEC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600081F")]
	[Address(RVA = "0xEACE84", Offset = "0xEACE84", VA = "0xEACE84")]
	public string translateString(string s, string table)
	{
		return null;
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0xEB6B98", Offset = "0xEB6B98", VA = "0xEB6B98")]
	private void HandleHMDMounted()
	{
	}

	[Token(Token = "0x6000821")]
	[Address(RVA = "0xEB6BC4", Offset = "0xEB6BC4", VA = "0xEB6BC4")]
	private void HandleHMDUnmounted()
	{
	}

	[Token(Token = "0x6000822")]
	[Address(RVA = "0xEB6C08", Offset = "0xEB6C08", VA = "0xEB6C08")]
	private void HandleHMDFocus()
	{
	}

	[Token(Token = "0x6000823")]
	[Address(RVA = "0xEB6C34", Offset = "0xEB6C34", VA = "0xEB6C34")]
	private void HandleHMDLostFocus()
	{
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0xEB6C88", Offset = "0xEB6C88", VA = "0xEB6C88")]
	public bool canEquipPassive(PassiveAbility passive)
	{
		return default(bool);
	}

	[Token(Token = "0x6000825")]
	[Address(RVA = "0xEB6E38", Offset = "0xEB6E38", VA = "0xEB6E38")]
	public bool canlearnPassive(PassiveAbility passive)
	{
		return default(bool);
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0xEB70A0", Offset = "0xEB70A0", VA = "0xEB70A0")]
	private void init()
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0xEB9A54", Offset = "0xEB9A54", VA = "0xEB9A54")]
	public void convertOldSaveData()
	{
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0xEB75D0", Offset = "0xEB75D0", VA = "0xEB75D0")]
	public void createNewSave()
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0xEAE494", Offset = "0xEAE494", VA = "0xEAE494")]
	public PlayerSpellData getDataForSpell(PlayerSpell spell)
	{
		return null;
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0xEB3950", Offset = "0xEB3950", VA = "0xEB3950")]
	public void saveGame()
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0xEB9CDC", Offset = "0xEB9CDC", VA = "0xEB9CDC")]
	private static string readFile(string path)
	{
		return null;
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0xEBA100", Offset = "0xEBA100", VA = "0xEBA100")]
	public PlayerStats loadStats(string path)
	{
		return null;
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0xEBA170", Offset = "0xEBA170", VA = "0xEBA170")]
	public GameProgress loadGameProgress(string path)
	{
		return null;
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0xEBA1E0", Offset = "0xEBA1E0", VA = "0xEBA1E0")]
	public ArcaxerPlayerSettings loadGameSettings(string path)
	{
		return null;
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0xEBA250", Offset = "0xEBA250", VA = "0xEBA250")]
	public static void clearJsonData(string path)
	{
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0xEB7DF4", Offset = "0xEB7DF4", VA = "0xEB7DF4")]
	public void loadGame()
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0xEB4344", Offset = "0xEB4344", VA = "0xEB4344")]
	public void addItemToInventory(Item item)
	{
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0xEBA27C", Offset = "0xEBA27C", VA = "0xEBA27C")]
	public void removeItemFromInventory(int itemIndex)
	{
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0xEBA368", Offset = "0xEBA368", VA = "0xEBA368")]
	public PersistentData()
	{
	}
}
[Serializable]
[Token(Token = "0x20001AC")]
public class PlayerStats
{
	[Token(Token = "0x20001AD")]
	public enum GameDifficulty
	{
		[Token(Token = "0x4000821")]
		easy,
		[Token(Token = "0x4000822")]
		normal,
		[Token(Token = "0x4000823")]
		hard,
		[Token(Token = "0x4000824")]
		veryHard
	}

	[Token(Token = "0x20001AE")]
	public enum DeathType
	{
		[Token(Token = "0x4000826")]
		normal,
		[Token(Token = "0x4000827")]
		hardcore
	}

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string darkaxerName;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool nameSet;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int skinNum;

	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public ArcaxerClass playerClass;

	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public string classFileName;

	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int newGamePlusLevel;

	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	public GameDifficulty gameDifficulty;

	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	public DeathType deathType;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private int _dropBonus;

	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private int _currentHealth;

	[Token(Token = "0x40007F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private int _maxHealth;

	[Token(Token = "0x40007F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private int _power;

	[Token(Token = "0x40007FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private int _defense;

	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private int _speed;

	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int buffCrit;

	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private int _crit;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int buffCritDamage;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private int _critDamage;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private int _expBoost;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private int _glitchChance;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private int _spellVamp;

	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private int _runSpeed;

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int _maxAP;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int precision;

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public int maxAdrenaline;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public int maxPP;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float _spellPowerMod;

	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int _summonPower;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public float buffDefense;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float buffPower;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public List<ItemData> savedItemInventory;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public int credits;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public int casinoTokens;

	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public List<PlayerSpellData> learnedSpells;

	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public List<PlayerSpellData> leftHandSpells;

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public List<PlayerSpellData> rightHandSpells;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public PlayerSpellData leftHandDefensiveSpell;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public PlayerSpellData rightHandDefensiveSpell;

	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public ItemData equippedTop;

	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public ItemData equippedBottom;

	[Token(Token = "0x4000816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public ItemData equippedHead;

	[Token(Token = "0x4000817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public ItemData equippedWeaponRight;

	[Token(Token = "0x4000818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public ItemData equippedWeaponLeft;

	[Token(Token = "0x4000819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public ItemData equippedAccessory;

	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public List<PassiveAbilityData> unlockedPassives;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public List<PassiveAbilityData> equippedPassives;

	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private int _exp;

	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private int oldExp;

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public int level;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public UnityEngine.Vector3 lastOverworldPos;

	[Token(Token = "0x170000C4")]
	public int combatPower
	{
		[Token(Token = "0x6000836")]
		[Address(RVA = "0xEBB624", Offset = "0xEBB624", VA = "0xEBB624")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000C5")]
	public int dropBonus
	{
		[Token(Token = "0x6000837")]
		[Address(RVA = "0xEBC30C", Offset = "0xEBC30C", VA = "0xEBC30C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000C6")]
	public int currentHealth
	{
		[Token(Token = "0x6000838")]
		[Address(RVA = "0xEBC514", Offset = "0xEBC514", VA = "0xEBC514")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000839")]
		[Address(RVA = "0xEBC51C", Offset = "0xEBC51C", VA = "0xEBC51C")]
		set
		{
		}
	}

	[Token(Token = "0x170000C7")]
	public int maxHealth
	{
		[Token(Token = "0x600083A")]
		[Address(RVA = "0xEBBC88", Offset = "0xEBBC88", VA = "0xEBBC88")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600083B")]
		[Address(RVA = "0xEBC560", Offset = "0xEBC560", VA = "0xEBC560")]
		private set
		{
		}
	}

	[Token(Token = "0x170000C8")]
	public int power
	{
		[Token(Token = "0x600083E")]
		[Address(RVA = "0xEBB6B8", Offset = "0xEBB6B8", VA = "0xEBB6B8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600083F")]
		[Address(RVA = "0xEBC588", Offset = "0xEBC588", VA = "0xEBC588")]
		private set
		{
		}
	}

	[Token(Token = "0x170000C9")]
	public int defense
	{
		[Token(Token = "0x6000840")]
		[Address(RVA = "0xEBB98C", Offset = "0xEBB98C", VA = "0xEBB98C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000841")]
		[Address(RVA = "0xEBC604", Offset = "0xEBC604", VA = "0xEBC604")]
		private set
		{
		}
	}

	[Token(Token = "0x170000CA")]
	public int speed
	{
		[Token(Token = "0x6000842")]
		[Address(RVA = "0xEBBF34", Offset = "0xEBBF34", VA = "0xEBBF34")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000843")]
		[Address(RVA = "0xEBC60C", Offset = "0xEBC60C", VA = "0xEBC60C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000CB")]
	public int crit
	{
		[Token(Token = "0x6000844")]
		[Address(RVA = "0xEBC614", Offset = "0xEBC614", VA = "0xEBC614")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000845")]
		[Address(RVA = "0xEBC8EC", Offset = "0xEBC8EC", VA = "0xEBC8EC")]
		private set
		{
		}
	}

	[Token(Token = "0x170000CC")]
	public int critDamage
	{
		[Token(Token = "0x6000846")]
		[Address(RVA = "0xEBC8F4", Offset = "0xEBC8F4", VA = "0xEBC8F4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000847")]
		[Address(RVA = "0xEBCBE8", Offset = "0xEBCBE8", VA = "0xEBCBE8")]
		private set
		{
		}
	}

	[Token(Token = "0x170000CD")]
	public int expBoost
	{
		[Token(Token = "0x6000848")]
		[Address(RVA = "0xEBCBF0", Offset = "0xEBCBF0", VA = "0xEBCBF0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000849")]
		[Address(RVA = "0xEBCEB8", Offset = "0xEBCEB8", VA = "0xEBCEB8")]
		private set
		{
		}
	}

	[Token(Token = "0x170000CE")]
	public int glitchChance
	{
		[Token(Token = "0x600084A")]
		[Address(RVA = "0xEBCEC0", Offset = "0xEBCEC0", VA = "0xEBCEC0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600084B")]
		[Address(RVA = "0xEBD188", Offset = "0xEBD188", VA = "0xEBD188")]
		private set
		{
		}
	}

	[Token(Token = "0x170000CF")]
	public int spellVamp
	{
		[Token(Token = "0x600084C")]
		[Address(RVA = "0xEBD190", Offset = "0xEBD190", VA = "0xEBD190")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600084D")]
		[Address(RVA = "0xEBD458", Offset = "0xEBD458", VA = "0xEBD458")]
		private set
		{
		}
	}

	[Token(Token = "0x170000D0")]
	public int runSpeed
	{
		[Token(Token = "0x600084E")]
		[Address(RVA = "0xEBD460", Offset = "0xEBD460", VA = "0xEBD460")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600084F")]
		[Address(RVA = "0xEBD728", Offset = "0xEBD728", VA = "0xEBD728")]
		private set
		{
		}
	}

	[Token(Token = "0x170000D1")]
	public int maxAP
	{
		[Token(Token = "0x6000850")]
		[Address(RVA = "0xEBC044", Offset = "0xEBC044", VA = "0xEBC044")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000D2")]
	public int haxDamage
	{
		[Token(Token = "0x6000851")]
		[Address(RVA = "0xEBD730", Offset = "0xEBD730", VA = "0xEBD730")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000D3")]
	public float spellPowerMod
	{
		[Token(Token = "0x6000852")]
		[Address(RVA = "0xEBD778", Offset = "0xEBD778", VA = "0xEBD778")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000D4")]
	public int summonPower
	{
		[Token(Token = "0x6000853")]
		[Address(RVA = "0xEBD990", Offset = "0xEBD990", VA = "0xEBD990")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000854")]
		[Address(RVA = "0xEBDC58", Offset = "0xEBDC58", VA = "0xEBDC58")]
		private set
		{
		}
	}

	[Token(Token = "0x170000D5")]
	public int exp
	{
		[Token(Token = "0x6000855")]
		[Address(RVA = "0xEBDC60", Offset = "0xEBDC60", VA = "0xEBDC60")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000856")]
		[Address(RVA = "0xEBDC68", Offset = "0xEBDC68", VA = "0xEBDC68")]
		set
		{
		}
	}

	[Token(Token = "0x170000D6")]
	public int expRequired
	{
		[Token(Token = "0x6000858")]
		[Address(RVA = "0xEBDE18", Offset = "0xEBDE18", VA = "0xEBDE18")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600083C")]
	[Address(RVA = "0xEBC568", Offset = "0xEBC568", VA = "0xEBC568")]
	public void increaseMaxHPStat(int amt)
	{
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0xEBC578", Offset = "0xEBC578", VA = "0xEBC578")]
	public void increaseMaxPowerStat(int amt)
	{
	}

	[Token(Token = "0x6000857")]
	[Address(RVA = "0xEBFE68", Offset = "0xEBFE68", VA = "0xEBFE68")]
	public void resetBuffValues()
	{
	}

	[Token(Token = "0x6000859")]
	[Address(RVA = "0xEBFE78", Offset = "0xEBFE78", VA = "0xEBFE78")]
	public void levelUpSpells(int exp)
	{
	}

	[Token(Token = "0x600085A")]
	[Address(RVA = "0xEC04A0", Offset = "0xEC04A0", VA = "0xEC04A0")]
	public bool spellAlreadyLearned(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0xEC0650", Offset = "0xEC0650", VA = "0xEC0650")]
	public bool passiveAlreadyLearned(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x600085C")]
	[Address(RVA = "0xEBDE64", Offset = "0xEBDE64", VA = "0xEBDE64")]
	private void levelUp()
	{
	}

	[Token(Token = "0x600085D")]
	[Address(RVA = "0xEC0800", Offset = "0xEC0800", VA = "0xEC0800")]
	public PlayerStats()
	{
	}
}
[Token(Token = "0x20001AF")]
public class DebugConsole : MonoBehaviour
{
	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Dropdown commandDropdown;

	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InputField inputField;

	[Token(Token = "0x400082A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public InputField inputField2;

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text historyText;

	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugCommand give_item;

	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static DebugCommand level_up;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static DebugCommand set_story;

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static DebugCommand learn_hack;

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static DebugCommand learn_passive;

	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static DebugCommand change_class;

	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static DebugCommand full_heal;

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static DebugCommand load_scene;

	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<object> commandList;

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private DebugCommand selectedCommand;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Keyboard keyboard;

	[Token(Token = "0x600085E")]
	[Address(RVA = "0xEC09FC", Offset = "0xEC09FC", VA = "0xEC09FC")]
	private void Start()
	{
	}

	[Token(Token = "0x600085F")]
	[Address(RVA = "0xEC140C", Offset = "0xEC140C", VA = "0xEC140C")]
	public void runCommand()
	{
	}

	[Token(Token = "0x6000860")]
	[Address(RVA = "0xEC1514", Offset = "0xEC1514", VA = "0xEC1514")]
	public void selectCommand()
	{
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0xEC15E8", Offset = "0xEC15E8", VA = "0xEC15E8")]
	public void input1Focused()
	{
	}

	[Token(Token = "0x6000862")]
	[Address(RVA = "0xEC162C", Offset = "0xEC162C", VA = "0xEC162C")]
	public void input2Focused()
	{
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0xEC1670", Offset = "0xEC1670", VA = "0xEC1670")]
	public DebugConsole()
	{
	}
}
[Token(Token = "0x20001B0")]
public class DebugCommand
{
	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string commandId;

	[Token(Token = "0x4000838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string parameter;

	[Token(Token = "0x4000839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Action command;

	[Token(Token = "0x600086C")]
	[Address(RVA = "0xEC13DC", Offset = "0xEC13DC", VA = "0xEC13DC")]
	public DebugCommand(string id, Action command)
	{
	}

	[Token(Token = "0x600086D")]
	[Address(RVA = "0xEC14F0", Offset = "0xEC14F0", VA = "0xEC14F0")]
	public void Invoke()
	{
	}
}
[Token(Token = "0x20001B1")]
public class InputSelectDebug : MonoBehaviour, ISelectHandler, IEventSystemHandler
{
	[Token(Token = "0x400083A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onSelectEvent;

	[Token(Token = "0x600086E")]
	[Address(RVA = "0xEC2650", Offset = "0xEC2650", VA = "0xEC2650", Slot = "4")]
	public void OnSelect(BaseEventData eventData)
	{
	}

	[Token(Token = "0x600086F")]
	[Address(RVA = "0xEC266C", Offset = "0xEC266C", VA = "0xEC266C")]
	public InputSelectDebug()
	{
	}
}
[Token(Token = "0x20001B2")]
public class ChangeSaveLocation : MonoBehaviour
{
	[Token(Token = "0x400083B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string saveSceneName;

	[Token(Token = "0x6000870")]
	[Address(RVA = "0xEC26D4", Offset = "0xEC26D4", VA = "0xEC26D4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000871")]
	[Address(RVA = "0xEC27B4", Offset = "0xEC27B4", VA = "0xEC27B4")]
	public ChangeSaveLocation()
	{
	}
}
[Token(Token = "0x20001B3")]
public class EnemyOverworld : MonoBehaviour
{
	[Token(Token = "0x20001B4")]
	public enum enemyOverworldState
	{
		[Token(Token = "0x4000856")]
		patroling,
		[Token(Token = "0x4000857")]
		chasing,
		[Token(Token = "0x4000858")]
		startingFight,
		[Token(Token = "0x4000859")]
		returning,
		[Token(Token = "0x400085A")]
		disabled
	}

	[Token(Token = "0x20001B5")]
	[CompilerGenerated]
	private sealed class <encounterTimer>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyOverworld <>4__this;

		[Token(Token = "0x170000D7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000882")]
			[Address(RVA = "0xEC4AA4", Offset = "0xEC4AA4", VA = "0xEC4AA4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000884")]
			[Address(RVA = "0xEC4AEC", Offset = "0xEC4AEC", VA = "0xEC4AEC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0xEC38F4", Offset = "0xEC38F4", VA = "0xEC38F4")]
		[DebuggerHidden]
		public <encounterTimer>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0xEC4918", Offset = "0xEC4918", VA = "0xEC4918", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0xEC491C", Offset = "0xEC491C", VA = "0xEC491C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0xEC4AAC", Offset = "0xEC4AAC", VA = "0xEC4AAC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001B6")]
	[CompilerGenerated]
	private sealed class <disabledTimer>d__37 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyOverworld <>4__this;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <maxDisabledTime>5__2;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <time>5__3;

		[Token(Token = "0x170000D9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000888")]
			[Address(RVA = "0xEC4C3C", Offset = "0xEC4C3C", VA = "0xEC4C3C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600088A")]
			[Address(RVA = "0xEC4C84", Offset = "0xEC4C84", VA = "0xEC4C84", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0xEC480C", Offset = "0xEC480C", VA = "0xEC480C")]
		[DebuggerHidden]
		public <disabledTimer>d__37(int <>1__state)
		{
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0xEC4AF4", Offset = "0xEC4AF4", VA = "0xEC4AF4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0xEC4AF8", Offset = "0xEC4AF8", VA = "0xEC4AF8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0xEC4C44", Offset = "0xEC4C44", VA = "0xEC4C44", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400083C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private NavMeshAgent navMeshAgent;

	[Token(Token = "0x400083D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.Vector3 playerPos;

	[Token(Token = "0x400083E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Animator enemyAnimator;

	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LayerMask layerMask;

	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject encounterStartParticle;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject enemyPoolOrb;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float walkRadius;

	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool isDungeonEnemy;

	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool isTutorialEnemy;

	[Token(Token = "0x4000845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float patrolSpeed;

	[Token(Token = "0x4000846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float chaseSpeed;

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEngine.Vector3 spawnPosition;

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public List<EnemyParent> enemyEncounterList;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public string battleSceneName;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool startingEncounter;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float chaseTime;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float maxChaseTime;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float idleTime;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float maxIdleTime;

	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float maxChaseDistance;

	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float onMeshThreshold;

	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public int spawnedOnFloor;

	[Token(Token = "0x4000852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool disabled;

	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
	public bool testEnemy;

	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public enemyOverworldState enemyState;

	[Token(Token = "0x6000872")]
	[Address(RVA = "0xEC2804", Offset = "0xEC2804", VA = "0xEC2804")]
	private void Start()
	{
	}

	[Token(Token = "0x6000873")]
	[Address(RVA = "0xEC2904", Offset = "0xEC2904", VA = "0xEC2904")]
	public void UpdateEnemyDungeonState()
	{
	}

	[Token(Token = "0x6000874")]
	[Address(RVA = "0xEC3038", Offset = "0xEC3038", VA = "0xEC3038")]
	private void Update()
	{
	}

	[Token(Token = "0x6000875")]
	[Address(RVA = "0xEC36A4", Offset = "0xEC36A4", VA = "0xEC36A4")]
	public void destroyEnemy()
	{
	}

	[Token(Token = "0x6000876")]
	[Address(RVA = "0xEC35F4", Offset = "0xEC35F4", VA = "0xEC35F4")]
	private void pickPointOnNavMesh()
	{
	}

	[Token(Token = "0x6000877")]
	[Address(RVA = "0xEC33A0", Offset = "0xEC33A0", VA = "0xEC33A0")]
	private void checkIfPlayerIsSpotted()
	{
	}

	[Token(Token = "0x6000878")]
	[Address(RVA = "0xEC3710", Offset = "0xEC3710", VA = "0xEC3710")]
	public bool IsAgentOnNavMesh()
	{
		return default(bool);
	}

	[Token(Token = "0x6000879")]
	[Address(RVA = "0xEC388C", Offset = "0xEC388C", VA = "0xEC388C")]
	[IteratorStateMachine(typeof(<encounterTimer>d__33))]
	private IEnumerator encounterTimer()
	{
		return null;
	}

	[Token(Token = "0x600087A")]
	[Address(RVA = "0xEC391C", Offset = "0xEC391C", VA = "0xEC391C")]
	public void forceEncounterWithPlayer()
	{
	}

	[Token(Token = "0x600087B")]
	[Address(RVA = "0xEC3984", Offset = "0xEC3984", VA = "0xEC3984")]
	public void startEnemyEncounter(GameObject other, bool wasAttacked)
	{
	}

	[Token(Token = "0x600087C")]
	[Address(RVA = "0xEC45E8", Offset = "0xEC45E8", VA = "0xEC45E8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600087D")]
	[Address(RVA = "0xEC47A4", Offset = "0xEC47A4", VA = "0xEC47A4")]
	[IteratorStateMachine(typeof(<disabledTimer>d__37))]
	private IEnumerator disabledTimer()
	{
		return null;
	}

	[Token(Token = "0x600087E")]
	[Address(RVA = "0xEC4834", Offset = "0xEC4834", VA = "0xEC4834")]
	public EnemyOverworld()
	{
	}
}
[Token(Token = "0x20001B7")]
public class EnemyPoolOrb : MonoBehaviour
{
	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform moveTotrans;

	[Token(Token = "0x600088B")]
	[Address(RVA = "0xEC4C8C", Offset = "0xEC4C8C", VA = "0xEC4C8C")]
	private void Update()
	{
	}

	[Token(Token = "0x600088C")]
	[Address(RVA = "0xEC4E74", Offset = "0xEC4E74", VA = "0xEC4E74")]
	public EnemyPoolOrb()
	{
	}
}
[Token(Token = "0x20001B8")]
public class HideMeshByDistance : MonoBehaviour
{
	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SkinnedMeshRenderer[] renderers;

	[Token(Token = "0x4000865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer[] meshRenderers;

	[Token(Token = "0x4000866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float timeToCheck;

	[Token(Token = "0x4000867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float time;

	[Token(Token = "0x4000868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float distanceRequired;

	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool isStatic;

	[Token(Token = "0x600088D")]
	[Address(RVA = "0xEC4E7C", Offset = "0xEC4E7C", VA = "0xEC4E7C")]
	private void Start()
	{
	}

	[Token(Token = "0x600088E")]
	[Address(RVA = "0xEC4F4C", Offset = "0xEC4F4C", VA = "0xEC4F4C")]
	private void Update()
	{
	}

	[Token(Token = "0x600088F")]
	[Address(RVA = "0xEC5318", Offset = "0xEC5318", VA = "0xEC5318")]
	public HideMeshByDistance()
	{
	}
}
[Token(Token = "0x20001B9")]
public class AberrationLineRender : MonoBehaviour
{
	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform firstPoint;

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform secondPoint;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform thirdPoint;

	[Token(Token = "0x6000890")]
	[Address(RVA = "0xEC5330", Offset = "0xEC5330", VA = "0xEC5330")]
	private void Start()
	{
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0xEC5380", Offset = "0xEC5380", VA = "0xEC5380")]
	private void Update()
	{
	}

	[Token(Token = "0x6000892")]
	[Address(RVA = "0xEC5410", Offset = "0xEC5410", VA = "0xEC5410")]
	public AberrationLineRender()
	{
	}
}
[Token(Token = "0x20001BA")]
public class EnemySpinWall : MonoBehaviour
{
	[Token(Token = "0x400086E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] removeableProjectiles;

	[Token(Token = "0x400086F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int power;

	[Token(Token = "0x4000870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float spinSpeed;

	[Token(Token = "0x4000871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float projSpeed;

	[Token(Token = "0x4000872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float stallTimer;

	[Token(Token = "0x4000873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float maxStallTime;

	[Token(Token = "0x6000893")]
	[Address(RVA = "0xEC5418", Offset = "0xEC5418", VA = "0xEC5418")]
	private void Start()
	{
	}

	[Token(Token = "0x6000894")]
	[Address(RVA = "0xEC5500", Offset = "0xEC5500", VA = "0xEC5500")]
	private void Update()
	{
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0xEC5628", Offset = "0xEC5628", VA = "0xEC5628")]
	public EnemySpinWall()
	{
	}
}
[Token(Token = "0x20001BB")]
public class BigDeepsGun : MonoBehaviour
{
	[Token(Token = "0x4000874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] gunPoints;

	[Token(Token = "0x6000896")]
	[Address(RVA = "0xEC564C", Offset = "0xEC564C", VA = "0xEC564C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000897")]
	[Address(RVA = "0xEC568C", Offset = "0xEC568C", VA = "0xEC568C")]
	public BigDeepsGun()
	{
	}
}
[Token(Token = "0x20001BC")]
public class BigDeepsHitScan : MonoBehaviour
{
	[Token(Token = "0x20001BD")]
	[CompilerGenerated]
	private sealed class <damageTimer>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BigDeepsHitScan <>4__this;

		[Token(Token = "0x170000DB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600089E")]
			[Address(RVA = "0xEC5D6C", Offset = "0xEC5D6C", VA = "0xEC5D6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008A0")]
			[Address(RVA = "0xEC5DB4", Offset = "0xEC5DB4", VA = "0xEC5DB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0xEC593C", Offset = "0xEC593C", VA = "0xEC593C")]
		[DebuggerHidden]
		public <damageTimer>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0xEC5974", Offset = "0xEC5974", VA = "0xEC5974", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0xEC5978", Offset = "0xEC5978", VA = "0xEC5978", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0xEC5D74", Offset = "0xEC5D74", VA = "0xEC5D74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int damage;

	[Token(Token = "0x4000876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float waitTime;

	[Token(Token = "0x4000877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LineRenderer lineRend;

	[Token(Token = "0x4000878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public EnemyParent enemy;

	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject muzzleFlashPrefab;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool randomAim;

	[Token(Token = "0x6000898")]
	[Address(RVA = "0xEC5694", Offset = "0xEC5694", VA = "0xEC5694")]
	private void Start()
	{
	}

	[Token(Token = "0x6000899")]
	[Address(RVA = "0xEC58D4", Offset = "0xEC58D4", VA = "0xEC58D4")]
	[IteratorStateMachine(typeof(<damageTimer>d__7))]
	private IEnumerator damageTimer()
	{
		return null;
	}

	[Token(Token = "0x600089A")]
	[Address(RVA = "0xEC5964", Offset = "0xEC5964", VA = "0xEC5964")]
	public BigDeepsHitScan()
	{
	}
}
[Token(Token = "0x20001BE")]
public class EnemyBigDeeps : EnemyParent
{
	[Token(Token = "0x20001BF")]
	[CompilerGenerated]
	private sealed class <rayCastBlast>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyBigDeeps <>4__this;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <shots>5__2;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <shotsPerShot>5__3;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <i>5__4;

		[Token(Token = "0x170000DD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008AF")]
			[Address(RVA = "0xEC6950", Offset = "0xEC6950", VA = "0xEC6950", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008B1")]
			[Address(RVA = "0xEC6998", Offset = "0xEC6998", VA = "0xEC6998", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0xEC60D0", Offset = "0xEC60D0", VA = "0xEC60D0")]
		[DebuggerHidden]
		public <rayCastBlast>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0xEC6674", Offset = "0xEC6674", VA = "0xEC6674", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0xEC6678", Offset = "0xEC6678", VA = "0xEC6678", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0xEC6958", Offset = "0xEC6958", VA = "0xEC6958", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C0")]
	[CompilerGenerated]
	private sealed class <crossBlasts>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyBigDeeps <>4__this;

		[Token(Token = "0x170000DF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008B5")]
			[Address(RVA = "0xEC6ED8", Offset = "0xEC6ED8", VA = "0xEC6ED8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008B7")]
			[Address(RVA = "0xEC6F20", Offset = "0xEC6F20", VA = "0xEC6F20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0xEC60F8", Offset = "0xEC60F8", VA = "0xEC60F8")]
		[DebuggerHidden]
		public <crossBlasts>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0xEC69A0", Offset = "0xEC69A0", VA = "0xEC69A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0xEC69A4", Offset = "0xEC69A4", VA = "0xEC69A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0xEC6EE0", Offset = "0xEC6EE0", VA = "0xEC6EE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C1")]
	[CompilerGenerated]
	private sealed class <gravityFireShot>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyBigDeeps <>4__this;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <aimAccuracy>5__2;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <launchPower>5__3;

		[Token(Token = "0x170000E1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008BB")]
			[Address(RVA = "0xEC73A4", Offset = "0xEC73A4", VA = "0xEC73A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008BD")]
			[Address(RVA = "0xEC73EC", Offset = "0xEC73EC", VA = "0xEC73EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0xEC6120", Offset = "0xEC6120", VA = "0xEC6120")]
		[DebuggerHidden]
		public <gravityFireShot>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0xEC6F28", Offset = "0xEC6F28", VA = "0xEC6F28", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0xEC6F2C", Offset = "0xEC6F2C", VA = "0xEC6F2C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0xEC73AC", Offset = "0xEC73AC", VA = "0xEC73AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C2")]
	[CompilerGenerated]
	private sealed class <circleAttack>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyBigDeeps <>4__this;

		[Token(Token = "0x170000E3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008C1")]
			[Address(RVA = "0xEC7640", Offset = "0xEC7640", VA = "0xEC7640", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008C3")]
			[Address(RVA = "0xEC7688", Offset = "0xEC7688", VA = "0xEC7688", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0xEC61B0", Offset = "0xEC61B0", VA = "0xEC61B0")]
		[DebuggerHidden]
		public <circleAttack>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0xEC73F4", Offset = "0xEC73F4", VA = "0xEC73F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0xEC73F8", Offset = "0xEC73F8", VA = "0xEC73F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0xEC7648", Offset = "0xEC7648", VA = "0xEC7648", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C3")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject proj;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyBigDeeps <>4__this;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float speedMod;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody <projRB>5__2;

		[Token(Token = "0x170000E5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008C7")]
			[Address(RVA = "0xEC78AC", Offset = "0xEC78AC", VA = "0xEC78AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008C9")]
			[Address(RVA = "0xEC78F4", Offset = "0xEC78F4", VA = "0xEC78F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0xEC6630", Offset = "0xEC6630", VA = "0xEC6630")]
		[DebuggerHidden]
		public <shootProjectile>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0xEC7690", Offset = "0xEC7690", VA = "0xEC7690", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0xEC7694", Offset = "0xEC7694", VA = "0xEC7694", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xEC78B4", Offset = "0xEC78B4", VA = "0xEC78B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400087E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject projectileGrav;

	[Token(Token = "0x400087F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject enemyProjectile;

	[Token(Token = "0x4000880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject enemyProjectileSineX;

	[Token(Token = "0x4000881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public BigDeepsHitScan hitScanPrefab;

	[Token(Token = "0x4000882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject enemyProjectileSineY;

	[Token(Token = "0x4000883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject enemyProjectileCrossSineX;

	[Token(Token = "0x4000884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GameObject enemyProjectileCrossSineY;

	[Token(Token = "0x4000885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public GameObject launchParticle;

	[Token(Token = "0x4000886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public GameObject healParticle;

	[Token(Token = "0x4000887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public float projSpeed;

	[Token(Token = "0x4000888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	public int shotgunProjectiles;

	[Token(Token = "0x4000889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public GlitchEffects buffGlitch;

	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public int healValue;

	[Token(Token = "0x400088B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public AudioClip breakSound;

	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public BattleElementType[] elements;

	[Token(Token = "0x60008A1")]
	[Address(RVA = "0xEC5DBC", Offset = "0xEC5DBC", VA = "0xEC5DBC")]
	private new void Start()
	{
	}

	[Token(Token = "0x60008A2")]
	[Address(RVA = "0xEC5E14", Offset = "0xEC5E14", VA = "0xEC5E14", Slot = "5")]
	public override void breakDefenses()
	{
	}

	[Token(Token = "0x60008A3")]
	[Address(RVA = "0xEC5E90", Offset = "0xEC5E90", VA = "0xEC5E90", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x60008A4")]
	[Address(RVA = "0xEC6000", Offset = "0xEC6000", VA = "0xEC6000")]
	[IteratorStateMachine(typeof(<rayCastBlast>d__18))]
	private IEnumerator rayCastBlast()
	{
		return null;
	}

	[Token(Token = "0x60008A5")]
	[Address(RVA = "0xEC6068", Offset = "0xEC6068", VA = "0xEC6068")]
	[IteratorStateMachine(typeof(<crossBlasts>d__19))]
	private IEnumerator crossBlasts()
	{
		return null;
	}

	[Token(Token = "0x60008A6")]
	[Address(RVA = "0xEC5F98", Offset = "0xEC5F98", VA = "0xEC5F98")]
	[IteratorStateMachine(typeof(<gravityFireShot>d__20))]
	private IEnumerator gravityFireShot()
	{
		return null;
	}

	[Token(Token = "0x60008A7")]
	[Address(RVA = "0xEC6148", Offset = "0xEC6148", VA = "0xEC6148")]
	[IteratorStateMachine(typeof(<circleAttack>d__21))]
	private IEnumerator circleAttack()
	{
		return null;
	}

	[Token(Token = "0x60008A8")]
	[Address(RVA = "0xEC61D8", Offset = "0xEC61D8", VA = "0xEC61D8")]
	public void instantiateInCircle(GameObject obj, UnityEngine.Vector3 location, int howMany)
	{
	}

	[Token(Token = "0x60008A9")]
	[Address(RVA = "0xEC6550", Offset = "0xEC6550", VA = "0xEC6550", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x60008AA")]
	[Address(RVA = "0xEC64CC", Offset = "0xEC64CC", VA = "0xEC64CC")]
	[IteratorStateMachine(typeof(<shootProjectile>d__24))]
	protected IEnumerator shootProjectile(GameObject proj, Transform launchTrans, float speedMod = 1f)
	{
		return null;
	}

	[Token(Token = "0x60008AB")]
	[Address(RVA = "0xEC6658", Offset = "0xEC6658", VA = "0xEC6658")]
	public EnemyBigDeeps()
	{
	}
}
[Token(Token = "0x20001C4")]
public class EnemyBoneProjectile : MonoBehaviour
{
	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float spinSpeed;

	[Token(Token = "0x40008A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float flightSpeed;

	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int power;

	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public EnemyParent parentFired;

	[Token(Token = "0x60008CA")]
	[Address(RVA = "0xEC78FC", Offset = "0xEC78FC", VA = "0xEC78FC")]
	private void Start()
	{
	}

	[Token(Token = "0x60008CB")]
	[Address(RVA = "0xEC796C", Offset = "0xEC796C", VA = "0xEC796C")]
	private void Update()
	{
	}

	[Token(Token = "0x60008CC")]
	[Address(RVA = "0xEC79B8", Offset = "0xEC79B8", VA = "0xEC79B8")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x60008CD")]
	[Address(RVA = "0xEC7AE4", Offset = "0xEC7AE4", VA = "0xEC7AE4")]
	public EnemyBoneProjectile()
	{
	}
}
[Token(Token = "0x20001C5")]
public class EnemySummoner : EnemyParent
{
	[Token(Token = "0x20001C6")]
	[CompilerGenerated]
	private sealed class <castBoneStorm>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemySummoner <>4__this;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private EnemyBoneProjectile <proj>5__3;

		[Token(Token = "0x170000E7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008DC")]
			[Address(RVA = "0xEC85C8", Offset = "0xEC85C8", VA = "0xEC85C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008DE")]
			[Address(RVA = "0xEC8610", Offset = "0xEC8610", VA = "0xEC8610", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0xEC7FD4", Offset = "0xEC7FD4", VA = "0xEC7FD4")]
		[DebuggerHidden]
		public <castBoneStorm>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0xEC8220", Offset = "0xEC8220", VA = "0xEC8220", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0xEC8224", Offset = "0xEC8224", VA = "0xEC8224", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0xEC85D0", Offset = "0xEC85D0", VA = "0xEC85D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C7")]
	[CompilerGenerated]
	private sealed class <moveBone>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject bone;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemySummoner <>4__this;

		[Token(Token = "0x170000E9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008E2")]
			[Address(RVA = "0xEC8778", Offset = "0xEC8778", VA = "0xEC8778", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008E4")]
			[Address(RVA = "0xEC87C0", Offset = "0xEC87C0", VA = "0xEC87C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0xEC8070", Offset = "0xEC8070", VA = "0xEC8070")]
		[DebuggerHidden]
		public <moveBone>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0xEC8618", Offset = "0xEC8618", VA = "0xEC8618", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0xEC861C", Offset = "0xEC861C", VA = "0xEC861C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0xEC8780", Offset = "0xEC8780", VA = "0xEC8780", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C8")]
	[CompilerGenerated]
	private sealed class <summonEnemy>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemySummoner <>4__this;

		[Token(Token = "0x170000EB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008E8")]
			[Address(RVA = "0xEC8BD4", Offset = "0xEC8BD4", VA = "0xEC8BD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008EA")]
			[Address(RVA = "0xEC8C1C", Offset = "0xEC8C1C", VA = "0xEC8C1C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0xEC8098", Offset = "0xEC8098", VA = "0xEC8098")]
		[DebuggerHidden]
		public <summonEnemy>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0xEC87C8", Offset = "0xEC87C8", VA = "0xEC87C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0xEC87CC", Offset = "0xEC87CC", VA = "0xEC87CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0xEC8BDC", Offset = "0xEC8BDC", VA = "0xEC8BDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008A8")]
	public const int maxSummonCD = 3;

	[Token(Token = "0x40008A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private int turnCD;

	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public int numOfBones;

	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private float boneSpawnMaxDistance;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float ocSpeedMod;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public EnemyParent summonedEnemy;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject summonParticle;

	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public EnemyBoneProjectile boneProjectile;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject shields;

	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public bool overClocked;

	[Token(Token = "0x60008CE")]
	[Address(RVA = "0xEC7AF8", Offset = "0xEC7AF8", VA = "0xEC7AF8")]
	public void toggleShieldsOn()
	{
	}

	[Token(Token = "0x60008CF")]
	[Address(RVA = "0xEC7B7C", Offset = "0xEC7B7C", VA = "0xEC7B7C")]
	public void toggleShieldsOff()
	{
	}

	[Token(Token = "0x60008D0")]
	[Address(RVA = "0xEC7C00", Offset = "0xEC7C00", VA = "0xEC7C00", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60008D1")]
	[Address(RVA = "0xEC7E00", Offset = "0xEC7E00", VA = "0xEC7E00", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60008D2")]
	[Address(RVA = "0xEC7E8C", Offset = "0xEC7E8C", VA = "0xEC7E8C", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x60008D3")]
	[Address(RVA = "0xEC7FC4", Offset = "0xEC7FC4", VA = "0xEC7FC4")]
	public void tickDOwnCD()
	{
	}

	[Token(Token = "0x60008D4")]
	[Address(RVA = "0xEC7F5C", Offset = "0xEC7F5C", VA = "0xEC7F5C")]
	[IteratorStateMachine(typeof(<castBoneStorm>d__16))]
	private IEnumerator castBoneStorm()
	{
		return null;
	}

	[Token(Token = "0x60008D5")]
	[Address(RVA = "0xEC7FFC", Offset = "0xEC7FFC", VA = "0xEC7FFC")]
	[IteratorStateMachine(typeof(<moveBone>d__17))]
	private IEnumerator moveBone(GameObject bone)
	{
		return null;
	}

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0xEC7EF4", Offset = "0xEC7EF4", VA = "0xEC7EF4")]
	[IteratorStateMachine(typeof(<summonEnemy>d__18))]
	private IEnumerator summonEnemy()
	{
		return null;
	}

	[Token(Token = "0x60008D7")]
	[Address(RVA = "0xEC80C0", Offset = "0xEC80C0", VA = "0xEC80C0", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x60008D8")]
	[Address(RVA = "0xEC8204", Offset = "0xEC8204", VA = "0xEC8204")]
	public EnemySummoner()
	{
	}
}
[Token(Token = "0x20001C9")]
public class BossCircleLaserAttack : MonoBehaviour
{
	[Token(Token = "0x20001CA")]
	[CompilerGenerated]
	private sealed class <spawnLasers>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BossCircleLaserAttack <>4__this;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x170000ED")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008F1")]
			[Address(RVA = "0xEC9380", Offset = "0xEC9380", VA = "0xEC9380", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008F3")]
			[Address(RVA = "0xEC93C8", Offset = "0xEC93C8", VA = "0xEC93C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0xEC8CD0", Offset = "0xEC8CD0", VA = "0xEC8CD0")]
		[DebuggerHidden]
		public <spawnLasers>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0xEC8D90", Offset = "0xEC8D90", VA = "0xEC8D90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0xEC8D94", Offset = "0xEC8D94", VA = "0xEC8D94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xEC9388", Offset = "0xEC9388", VA = "0xEC9388", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] laserSources;

	[Token(Token = "0x40008BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject laserPrefab;

	[Token(Token = "0x40008C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject chargeEffect;

	[Token(Token = "0x40008C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int numToSpawn;

	[Token(Token = "0x40008C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float delayBetweenLasers;

	[Token(Token = "0x40008C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float difficultyMod;

	[Token(Token = "0x40008C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int power;

	[Token(Token = "0x40008C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<EnemyLaserAttack> enemyLaserAttacks;

	[Token(Token = "0x60008EB")]
	[Address(RVA = "0xEC8C24", Offset = "0xEC8C24", VA = "0xEC8C24")]
	private void Start()
	{
	}

	[Token(Token = "0x60008EC")]
	[Address(RVA = "0xEC8C68", Offset = "0xEC8C68", VA = "0xEC8C68")]
	[IteratorStateMachine(typeof(<spawnLasers>d__9))]
	private IEnumerator spawnLasers()
	{
		return null;
	}

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0xEC8CF8", Offset = "0xEC8CF8", VA = "0xEC8CF8")]
	public BossCircleLaserAttack()
	{
	}
}
[Token(Token = "0x20001CB")]
public class EnemyAnchorProj : MonoBehaviour
{
	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator anim;

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0xEC93D0", Offset = "0xEC93D0", VA = "0xEC93D0")]
	private void Start()
	{
	}

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0xEC943C", Offset = "0xEC943C", VA = "0xEC943C")]
	public EnemyAnchorProj()
	{
	}
}
[Token(Token = "0x20001CC")]
public class EnemyCaptainBryce : EnemyParent
{
	[Token(Token = "0x20001CD")]
	[CompilerGenerated]
	private sealed class <multiBlast>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCaptainBryce <>4__this;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x170000EF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000908")]
			[Address(RVA = "0xECA0B4", Offset = "0xECA0B4", VA = "0xECA0B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600090A")]
			[Address(RVA = "0xECA0FC", Offset = "0xECA0FC", VA = "0xECA0FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0xEC9C24", Offset = "0xEC9C24", VA = "0xEC9C24")]
		[DebuggerHidden]
		public <multiBlast>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0xEC9F6C", Offset = "0xEC9F6C", VA = "0xEC9F6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0xEC9F70", Offset = "0xEC9F70", VA = "0xEC9F70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0xECA0BC", Offset = "0xECA0BC", VA = "0xECA0BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001CE")]
	[CompilerGenerated]
	private sealed class <raiseWaterLevel>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCaptainBryce <>4__this;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 <tarWaterLevel>5__2;

		[Token(Token = "0x170000F1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600090E")]
			[Address(RVA = "0xECA2E0", Offset = "0xECA2E0", VA = "0xECA2E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000910")]
			[Address(RVA = "0xECA328", Offset = "0xECA328", VA = "0xECA328", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0xEC9C4C", Offset = "0xEC9C4C", VA = "0xEC9C4C")]
		[DebuggerHidden]
		public <raiseWaterLevel>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x600090C")]
		[Address(RVA = "0xECA104", Offset = "0xECA104", VA = "0xECA104", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0xECA108", Offset = "0xECA108", VA = "0xECA108", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0xECA2E8", Offset = "0xECA2E8", VA = "0xECA2E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001CF")]
	[CompilerGenerated]
	private sealed class <waitForNextAttack>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCaptainBryce <>4__this;

		[Token(Token = "0x170000F3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000914")]
			[Address(RVA = "0xECA3E4", Offset = "0xECA3E4", VA = "0xECA3E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000916")]
			[Address(RVA = "0xECA42C", Offset = "0xECA42C", VA = "0xECA42C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0xEC9C74", Offset = "0xEC9C74", VA = "0xEC9C74")]
		[DebuggerHidden]
		public <waitForNextAttack>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0xECA330", Offset = "0xECA330", VA = "0xECA330", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0xECA334", Offset = "0xECA334", VA = "0xECA334", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0xECA3EC", Offset = "0xECA3EC", VA = "0xECA3EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001D0")]
	[CompilerGenerated]
	private sealed class <tripleAnchor>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCaptainBryce <>4__this;

		[Token(Token = "0x170000F5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600091A")]
			[Address(RVA = "0xECA868", Offset = "0xECA868", VA = "0xECA868", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600091C")]
			[Address(RVA = "0xECA8B0", Offset = "0xECA8B0", VA = "0xECA8B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0xEC9C9C", Offset = "0xEC9C9C", VA = "0xEC9C9C")]
		[DebuggerHidden]
		public <tripleAnchor>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0xECA434", Offset = "0xECA434", VA = "0xECA434", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0xECA438", Offset = "0xECA438", VA = "0xECA438", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0xECA870", Offset = "0xECA870", VA = "0xECA870", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001D1")]
	[CompilerGenerated]
	private sealed class <castShotgunBlast>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCaptainBryce <>4__this;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x170000F7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000920")]
			[Address(RVA = "0xECAB9C", Offset = "0xECAB9C", VA = "0xECAB9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000922")]
			[Address(RVA = "0xECABE4", Offset = "0xECABE4", VA = "0xECABE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0xEC9D2C", Offset = "0xEC9D2C", VA = "0xEC9D2C")]
		[DebuggerHidden]
		public <castShotgunBlast>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0xECA8B8", Offset = "0xECA8B8", VA = "0xECA8B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0xECA8BC", Offset = "0xECA8BC", VA = "0xECA8BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0xECABA4", Offset = "0xECABA4", VA = "0xECABA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001D2")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCaptainBryce <>4__this;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool goUp;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject enemyProjectile;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject <proj>5__2;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x170000F9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000926")]
			[Address(RVA = "0xECAF04", Offset = "0xECAF04", VA = "0xECAF04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000928")]
			[Address(RVA = "0xECAF4C", Offset = "0xECAF4C", VA = "0xECAF4C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0xEC9D54", Offset = "0xEC9D54", VA = "0xEC9D54")]
		[DebuggerHidden]
		public <shootProjectile>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0xECABEC", Offset = "0xECABEC", VA = "0xECABEC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0xECABF0", Offset = "0xECABF0", VA = "0xECABF0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0xECAF0C", Offset = "0xECAF0C", VA = "0xECAF0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001D3")]
	[CompilerGenerated]
	private sealed class <deathDelay>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCaptainBryce <>4__this;

		[Token(Token = "0x170000FB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600092C")]
			[Address(RVA = "0xECB390", Offset = "0xECB390", VA = "0xECB390", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600092E")]
			[Address(RVA = "0xECB3D8", Offset = "0xECB3D8", VA = "0xECB3D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0xEC9F2C", Offset = "0xEC9F2C", VA = "0xEC9F2C")]
		[DebuggerHidden]
		public <deathDelay>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0xECAF54", Offset = "0xECAF54", VA = "0xECAF54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0xECAF58", Offset = "0xECAF58", VA = "0xECAF58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0xECB398", Offset = "0xECB398", VA = "0xECB398", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public BattleDialogueBox dialogueBox;

	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public Transform dialoguePos;

	[Token(Token = "0x40008CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private EnemyGasCloud risingWater;

	[Token(Token = "0x40008CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public EnemyProjectile swingingAnchor;

	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public EnemyProjectile waterProjectile;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject spawnParticle;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Quaternion originProjRot;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private int turnsPassed;

	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	public float projSpeed;

	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	[Header("Audio")]
	public AudioClip[] castClips;

	[Token(Token = "0x40008D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public AudioClip[] dialogueClips;

	[Token(Token = "0x40008D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public string[] dialogueLines;

	[Token(Token = "0x40008D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private bool playingDeathAnim;

	[Token(Token = "0x60008F6")]
	[Address(RVA = "0xEC9444", Offset = "0xEC9444", VA = "0xEC9444", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0xEC95F4", Offset = "0xEC95F4", VA = "0xEC95F4", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0xEC96B4", Offset = "0xEC96B4", VA = "0xEC96B4", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x60008F9")]
	[Address(RVA = "0xEC9BBC", Offset = "0xEC9BBC", VA = "0xEC9BBC")]
	[IteratorStateMachine(typeof(<multiBlast>d__15))]
	private IEnumerator multiBlast()
	{
		return null;
	}

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0xEC98D0", Offset = "0xEC98D0", VA = "0xEC98D0")]
	[IteratorStateMachine(typeof(<raiseWaterLevel>d__16))]
	private IEnumerator raiseWaterLevel()
	{
		return null;
	}

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0xEC9938", Offset = "0xEC9938", VA = "0xEC9938")]
	public void playDialogue(string dialogue)
	{
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0xEC9B54", Offset = "0xEC9B54", VA = "0xEC9B54")]
	[IteratorStateMachine(typeof(<waitForNextAttack>d__18))]
	private IEnumerator waitForNextAttack()
	{
		return null;
	}

	[Token(Token = "0x60008FD")]
	[Address(RVA = "0xEC9A68", Offset = "0xEC9A68", VA = "0xEC9A68")]
	[IteratorStateMachine(typeof(<tripleAnchor>d__19))]
	private IEnumerator tripleAnchor()
	{
		return null;
	}

	[Token(Token = "0x60008FE")]
	[Address(RVA = "0xEC9CC4", Offset = "0xEC9CC4", VA = "0xEC9CC4")]
	[IteratorStateMachine(typeof(<castShotgunBlast>d__20))]
	protected IEnumerator castShotgunBlast()
	{
		return null;
	}

	[Token(Token = "0x60008FF")]
	[Address(RVA = "0xEC9AD0", Offset = "0xEC9AD0", VA = "0xEC9AD0")]
	[IteratorStateMachine(typeof(<shootProjectile>d__21))]
	protected IEnumerator shootProjectile(GameObject enemyProjectile, bool goUp = false)
	{
		return null;
	}

	[Token(Token = "0x6000900")]
	[Address(RVA = "0xEC9D7C", Offset = "0xEC9D7C", VA = "0xEC9D7C", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000901")]
	[Address(RVA = "0xEC9E44", Offset = "0xEC9E44", VA = "0xEC9E44", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000902")]
	[Address(RVA = "0xEC9EC4", Offset = "0xEC9EC4", VA = "0xEC9EC4")]
	[IteratorStateMachine(typeof(<deathDelay>d__25))]
	private IEnumerator deathDelay()
	{
		return null;
	}

	[Token(Token = "0x6000903")]
	[Address(RVA = "0xEC9F54", Offset = "0xEC9F54", VA = "0xEC9F54")]
	public EnemyCaptainBryce()
	{
	}
}
[Token(Token = "0x20001D4")]
public class EnemyBodyGuard : MonoBehaviour
{
	[Token(Token = "0x600092F")]
	[Address(RVA = "0xECB3E0", Offset = "0xECB3E0", VA = "0xECB3E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000930")]
	[Address(RVA = "0xECB3E4", Offset = "0xECB3E4", VA = "0xECB3E4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000931")]
	[Address(RVA = "0xECB3E8", Offset = "0xECB3E8", VA = "0xECB3E8")]
	public EnemyBodyGuard()
	{
	}
}
[Token(Token = "0x20001D5")]
public class RandomDirProjectile : MonoBehaviour
{
	[Token(Token = "0x20001D6")]
	[CompilerGenerated]
	private sealed class <startTimer>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RandomDirProjectile <>4__this;

		[Token(Token = "0x170000FD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000938")]
			[Address(RVA = "0xECB6F4", Offset = "0xECB6F4", VA = "0xECB6F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600093A")]
			[Address(RVA = "0xECB73C", Offset = "0xECB73C", VA = "0xECB73C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0xECB600", Offset = "0xECB600", VA = "0xECB600")]
		[DebuggerHidden]
		public <startTimer>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0xECB630", Offset = "0xECB630", VA = "0xECB630", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xECB634", Offset = "0xECB634", VA = "0xECB634", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0xECB6FC", Offset = "0xECB6FC", VA = "0xECB6FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LineRenderer lineRend;

	[Token(Token = "0x40008F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float waitTime;

	[Token(Token = "0x40008F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public EnemyProjectile proj;

	[Token(Token = "0x6000932")]
	[Address(RVA = "0xECB3F0", Offset = "0xECB3F0", VA = "0xECB3F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0xECB598", Offset = "0xECB598", VA = "0xECB598")]
	[IteratorStateMachine(typeof(<startTimer>d__4))]
	private IEnumerator startTimer()
	{
		return null;
	}

	[Token(Token = "0x6000934")]
	[Address(RVA = "0xECB628", Offset = "0xECB628", VA = "0xECB628")]
	public RandomDirProjectile()
	{
	}
}
[Token(Token = "0x20001D7")]
public class CasterSydMech : EnemyParent
{
	[Token(Token = "0x20001D8")]
	[CompilerGenerated]
	private sealed class <turn1dialogue>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CasterSydMech <>4__this;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x170000FF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000949")]
			[Address(RVA = "0xECBEE8", Offset = "0xECBEE8", VA = "0xECBEE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000100")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600094B")]
			[Address(RVA = "0xECBF30", Offset = "0xECBF30", VA = "0xECBF30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0xECB93C", Offset = "0xECB93C", VA = "0xECB93C")]
		[DebuggerHidden]
		public <turn1dialogue>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xECBDF0", Offset = "0xECBDF0", VA = "0xECBDF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xECBDF4", Offset = "0xECBDF4", VA = "0xECBDF4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0xECBEF0", Offset = "0xECBEF0", VA = "0xECBEF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001D9")]
	[CompilerGenerated]
	private sealed class <deathTimer>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CasterSydMech <>4__this;

		[Token(Token = "0x17000101")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600094F")]
			[Address(RVA = "0xECC10C", Offset = "0xECC10C", VA = "0xECC10C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000102")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000951")]
			[Address(RVA = "0xECC154", Offset = "0xECC154", VA = "0xECC154", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0xECBCEC", Offset = "0xECBCEC", VA = "0xECBCEC")]
		[DebuggerHidden]
		public <deathTimer>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0xECBF38", Offset = "0xECBF38", VA = "0xECBF38", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0xECBF3C", Offset = "0xECBF3C", VA = "0xECBF3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xECC114", Offset = "0xECC114", VA = "0xECC114", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001DA")]
	[CompilerGenerated]
	private sealed class <castShotgunBlast>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CasterSydMech <>4__this;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <projPhase>5__2;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <phases>5__3;

		[Token(Token = "0x400090F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <i>5__4;

		[Token(Token = "0x4000910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <numOfProjectiles>5__5;

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <aimAccuracy>5__6;

		[Token(Token = "0x17000103")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000955")]
			[Address(RVA = "0xECC514", Offset = "0xECC514", VA = "0xECC514", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000104")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000957")]
			[Address(RVA = "0xECC55C", Offset = "0xECC55C", VA = "0xECC55C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0xECBD1C", Offset = "0xECBD1C", VA = "0xECBD1C")]
		[DebuggerHidden]
		public <castShotgunBlast>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xECC15C", Offset = "0xECC15C", VA = "0xECC15C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xECC160", Offset = "0xECC160", VA = "0xECC160", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0xECC51C", Offset = "0xECC51C", VA = "0xECC51C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001DB")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemyProjectile;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CasterSydMech <>4__this;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x17000105")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600095B")]
			[Address(RVA = "0xECC830", Offset = "0xECC830", VA = "0xECC830", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000106")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600095D")]
			[Address(RVA = "0xECC878", Offset = "0xECC878", VA = "0xECC878", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0xECBDB8", Offset = "0xECBDB8", VA = "0xECBDB8")]
		[DebuggerHidden]
		public <shootProjectile>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xECC564", Offset = "0xECC564", VA = "0xECC564", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0xECC568", Offset = "0xECC568", VA = "0xECC568", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0xECC838", Offset = "0xECC838", VA = "0xECC838", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public string[] dialogue;

	[Token(Token = "0x40008FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public BattleDialogueBox dialogueBox;

	[Token(Token = "0x40008FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	protected int attackNum;

	[Token(Token = "0x40008FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject crossBeamProj;

	[Token(Token = "0x40008FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject redProjectile;

	[Token(Token = "0x4000900")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000901")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public AudioSource fireSound;

	[Token(Token = "0x4000902")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public float projSpeed;

	[Token(Token = "0x600093B")]
	[Address(RVA = "0xECB744", Offset = "0xECB744", VA = "0xECB744", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600093C")]
	[Address(RVA = "0xECB810", Offset = "0xECB810", VA = "0xECB810", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x600093D")]
	[Address(RVA = "0xECB86C", Offset = "0xECB86C", VA = "0xECB86C")]
	[IteratorStateMachine(typeof(<turn1dialogue>d__10))]
	private IEnumerator turn1dialogue()
	{
		return null;
	}

	[Token(Token = "0x600093E")]
	[Address(RVA = "0xECB964", Offset = "0xECB964", VA = "0xECB964")]
	public void playDialogue(string dialogue)
	{
	}

	[Token(Token = "0x600093F")]
	[Address(RVA = "0xECBC10", Offset = "0xECBC10", VA = "0xECBC10", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000940")]
	[Address(RVA = "0xECBC98", Offset = "0xECBC98", VA = "0xECBC98", Slot = "19")]
	protected virtual void attackAnim()
	{
	}

	[Token(Token = "0x6000941")]
	[Address(RVA = "0xECBC30", Offset = "0xECBC30", VA = "0xECBC30")]
	[IteratorStateMachine(typeof(<deathTimer>d__14))]
	private IEnumerator deathTimer()
	{
		return null;
	}

	[Token(Token = "0x6000942")]
	[Address(RVA = "0xECBD14", Offset = "0xECBD14", VA = "0xECBD14", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000943")]
	[Address(RVA = "0xECB8D4", Offset = "0xECB8D4", VA = "0xECB8D4")]
	[IteratorStateMachine(typeof(<castShotgunBlast>d__16))]
	protected IEnumerator castShotgunBlast()
	{
		return null;
	}

	[Token(Token = "0x6000944")]
	[Address(RVA = "0xECBD44", Offset = "0xECBD44", VA = "0xECBD44")]
	[IteratorStateMachine(typeof(<shootProjectile>d__17))]
	protected IEnumerator shootProjectile(GameObject enemyProjectile, float delay)
	{
		return null;
	}

	[Token(Token = "0x6000945")]
	[Address(RVA = "0xECBDE0", Offset = "0xECBDE0", VA = "0xECBDE0")]
	public CasterSydMech()
	{
	}
}
[Token(Token = "0x20001DC")]
public class ChildEnemyTrigger : MonoBehaviour
{
	[Token(Token = "0x4000918")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int power;

	[Token(Token = "0x4000919")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool canDamage;

	[Token(Token = "0x600095E")]
	[Address(RVA = "0xECC880", Offset = "0xECC880", VA = "0xECC880")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x600095F")]
	[Address(RVA = "0xECC930", Offset = "0xECC930", VA = "0xECC930")]
	public ChildEnemyTrigger()
	{
	}
}
[Token(Token = "0x20001DD")]
public class EnemyCredits : EnemyParent
{
	[Token(Token = "0x20001DE")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemyProjectile;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyCredits <>4__this;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string s;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float delay;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private EnemyProjectile <enemyProj>5__4;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject <text>5__5;

		[Token(Token = "0x17000107")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600096B")]
			[Address(RVA = "0xECDF20", Offset = "0xECDF20", VA = "0xECDF20", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000108")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600096D")]
			[Address(RVA = "0xECDF68", Offset = "0xECDF68", VA = "0xECDF68", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0xECCB20", Offset = "0xECCB20", VA = "0xECCB20")]
		[DebuggerHidden]
		public <shootProjectile>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0xECDB04", Offset = "0xECDB04", VA = "0xECDB04", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xECDB08", Offset = "0xECDB08", VA = "0xECDB08", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0xECDF28", Offset = "0xECDF28", VA = "0xECDF28", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001DF")]
	[CompilerGenerated]
	private sealed class <playCredits>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCredits <>4__this;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string[] <>7__wrap1;

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <>7__wrap2;

		[Token(Token = "0x17000109")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000971")]
			[Address(RVA = "0xECE1E4", Offset = "0xECE1E4", VA = "0xECE1E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000973")]
			[Address(RVA = "0xECE22C", Offset = "0xECE22C", VA = "0xECE22C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0xECCC08", Offset = "0xECCC08", VA = "0xECCC08")]
		[DebuggerHidden]
		public <playCredits>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0xECDF70", Offset = "0xECDF70", VA = "0xECDF70", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0xECDF74", Offset = "0xECDF74", VA = "0xECDF74", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0xECE1EC", Offset = "0xECE1EC", VA = "0xECE1EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400091A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject creditsProjectile;

	[Token(Token = "0x400091B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public float baseProjectileSpeed;

	[Token(Token = "0x400091C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private bool creditsOver;

	[Token(Token = "0x400091D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public int hits;

	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private string[] credits;

	[Token(Token = "0x6000960")]
	[Address(RVA = "0xECC948", Offset = "0xECC948", VA = "0xECC948", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000961")]
	[Address(RVA = "0xECCA14", Offset = "0xECCA14", VA = "0xECCA14", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000962")]
	[Address(RVA = "0xECCA94", Offset = "0xECCA94", VA = "0xECCA94")]
	[IteratorStateMachine(typeof(<shootProjectile>d__7))]
	protected IEnumerator shootProjectile(GameObject enemyProjectile, float delay, string s)
	{
		return null;
	}

	[Token(Token = "0x6000963")]
	[Address(RVA = "0xECCB48", Offset = "0xECCB48", VA = "0xECCB48", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000964")]
	[Address(RVA = "0xECCBF8", Offset = "0xECCBF8", VA = "0xECCBF8")]
	public void increaseHits()
	{
	}

	[Token(Token = "0x6000965")]
	[Address(RVA = "0xECCB90", Offset = "0xECCB90", VA = "0xECCB90")]
	[IteratorStateMachine(typeof(<playCredits>d__10))]
	private IEnumerator playCredits()
	{
		return null;
	}

	[Token(Token = "0x6000966")]
	[Address(RVA = "0xECCC30", Offset = "0xECCC30", VA = "0xECCC30", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000967")]
	[Address(RVA = "0xECCD40", Offset = "0xECCD40", VA = "0xECCD40")]
	public EnemyCredits()
	{
	}
}
[Token(Token = "0x20001E0")]
public class DarkaxerHand : EnemyParent
{
	[Token(Token = "0x20001E1")]
	public enum HandState
	{
		[Token(Token = "0x400093E")]
		idle,
		[Token(Token = "0x400093F")]
		attack1,
		[Token(Token = "0x4000940")]
		attack2
	}

	[Token(Token = "0x20001E2")]
	[CompilerGenerated]
	private sealed class <shotgunBarrage>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DarkaxerHand <>4__this;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <barrageCount>5__2;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <i>5__3;

		[Token(Token = "0x1700010B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000980")]
			[Address(RVA = "0xECEBF4", Offset = "0xECEBF4", VA = "0xECEBF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000982")]
			[Address(RVA = "0xECEC3C", Offset = "0xECEC3C", VA = "0xECEC3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0xECE6C0", Offset = "0xECE6C0", VA = "0xECE6C0")]
		[DebuggerHidden]
		public <shotgunBarrage>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0xECEA8C", Offset = "0xECEA8C", VA = "0xECEA8C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0xECEA90", Offset = "0xECEA90", VA = "0xECEA90", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xECEBFC", Offset = "0xECEBFC", VA = "0xECEBFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001E3")]
	[CompilerGenerated]
	private sealed class <castShotgunBlast>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DarkaxerHand <>4__this;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x1700010D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000986")]
			[Address(RVA = "0xECEF50", Offset = "0xECEF50", VA = "0xECEF50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000988")]
			[Address(RVA = "0xECEF98", Offset = "0xECEF98", VA = "0xECEF98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xECE750", Offset = "0xECE750", VA = "0xECE750")]
		[DebuggerHidden]
		public <castShotgunBlast>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xECEC44", Offset = "0xECEC44", VA = "0xECEC44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0xECEC48", Offset = "0xECEC48", VA = "0xECEC48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xECEF58", Offset = "0xECEF58", VA = "0xECEF58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001E4")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DarkaxerHand <>4__this;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <proj>5__2;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x1700010F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600098C")]
			[Address(RVA = "0xECF248", Offset = "0xECF248", VA = "0xECF248", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000110")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600098E")]
			[Address(RVA = "0xECF290", Offset = "0xECF290", VA = "0xECF290", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0xECEA30", Offset = "0xECEA30", VA = "0xECEA30")]
		[DebuggerHidden]
		public <shootProjectile>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0xECEFA0", Offset = "0xECEFA0", VA = "0xECEFA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0xECEFA4", Offset = "0xECEFA4", VA = "0xECEFA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xECF250", Offset = "0xECF250", VA = "0xECF250", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400092E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject[] enemyProjectiles;

	[Token(Token = "0x400092F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public float projSpeed;

	[Token(Token = "0x4000930")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private float flexPose;

	[Token(Token = "0x4000931")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private float floatPos;

	[Token(Token = "0x4000932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private bool floatUp;

	[Token(Token = "0x4000933")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14D")]
	private bool flexOpen;

	[Token(Token = "0x4000934")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private float sineFrequency;

	[Token(Token = "0x4000935")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private float sineAngularFrequency;

	[Token(Token = "0x4000936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public float sinePeriod;

	[Token(Token = "0x4000937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	public float sinePhase;

	[Token(Token = "0x4000938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private float elapsedTime;

	[Token(Token = "0x4000939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	public float sineAmplitude;

	[Token(Token = "0x400093A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private UnityEngine.Vector3 spawnPos;

	[Token(Token = "0x400093B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	public bool isRight;

	[Token(Token = "0x400093C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private HandState handState;

	[Token(Token = "0x6000974")]
	[Address(RVA = "0xECE234", Offset = "0xECE234", VA = "0xECE234")]
	private void SmoothSineWaveY()
	{
	}

	[Token(Token = "0x6000975")]
	[Address(RVA = "0xECE320", Offset = "0xECE320", VA = "0xECE320", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000976")]
	[Address(RVA = "0xECE4D0", Offset = "0xECE4D0", VA = "0xECE4D0", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000977")]
	[Address(RVA = "0xECE5B4", Offset = "0xECE5B4", VA = "0xECE5B4", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000978")]
	[Address(RVA = "0xECE658", Offset = "0xECE658", VA = "0xECE658")]
	[IteratorStateMachine(typeof(<shotgunBarrage>d__20))]
	private IEnumerator shotgunBarrage()
	{
		return null;
	}

	[Token(Token = "0x6000979")]
	[Address(RVA = "0xECE6E8", Offset = "0xECE6E8", VA = "0xECE6E8")]
	[IteratorStateMachine(typeof(<castShotgunBlast>d__21))]
	protected IEnumerator castShotgunBlast()
	{
		return null;
	}

	[Token(Token = "0x600097A")]
	[Address(RVA = "0xECE778", Offset = "0xECE778", VA = "0xECE778", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x600097B")]
	[Address(RVA = "0xECE9C8", Offset = "0xECE9C8", VA = "0xECE9C8")]
	[IteratorStateMachine(typeof(<shootProjectile>d__23))]
	protected IEnumerator shootProjectile()
	{
		return null;
	}

	[Token(Token = "0x600097C")]
	[Address(RVA = "0xECEA58", Offset = "0xECEA58", VA = "0xECEA58")]
	public DarkaxerHand()
	{
	}
}
[Token(Token = "0x20001E5")]
public class EnemyDarkaxerBoss : EnemyParent
{
	[Token(Token = "0x20001E6")]
	public enum DarkaxerPhase
	{
		[Token(Token = "0x400096A")]
		clones,
		[Token(Token = "0x400096B")]
		hands
	}

	[Token(Token = "0x20001E7")]
	[CompilerGenerated]
	private sealed class <disolveMaterial1>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDarkaxerBoss <>4__this;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Renderer[] <rends>5__2;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <disolve>5__3;

		[Token(Token = "0x17000111")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009AC")]
			[Address(RVA = "0xED07A4", Offset = "0xED07A4", VA = "0xED07A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000112")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009AE")]
			[Address(RVA = "0xED07EC", Offset = "0xED07EC", VA = "0xED07EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0xED0550", Offset = "0xED0550", VA = "0xED0550")]
		[DebuggerHidden]
		public <disolveMaterial1>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0xED0578", Offset = "0xED0578", VA = "0xED0578", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0xED057C", Offset = "0xED057C", VA = "0xED057C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0xED07AC", Offset = "0xED07AC", VA = "0xED07AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001E8")]
	[CompilerGenerated]
	private sealed class <flyBack>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDarkaxerBoss <>4__this;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <floatSpeed>5__2;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private UnityEngine.Vector3 <hoverPos>5__3;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <prog>5__4;

		[Token(Token = "0x17000113")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009B2")]
			[Address(RVA = "0xED0A9C", Offset = "0xED0A9C", VA = "0xED0A9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000114")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009B4")]
			[Address(RVA = "0xED0AE4", Offset = "0xED0AE4", VA = "0xED0AE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xED07F4", Offset = "0xED07F4", VA = "0xED07F4")]
		[DebuggerHidden]
		public <flyBack>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xED081C", Offset = "0xED081C", VA = "0xED081C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xED0820", Offset = "0xED0820", VA = "0xED0820", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0xED0AA4", Offset = "0xED0AA4", VA = "0xED0AA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001E9")]
	[CompilerGenerated]
	private sealed class <castMultiSpike>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDarkaxerBoss <>4__this;

		[Token(Token = "0x17000115")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009B8")]
			[Address(RVA = "0xED0D98", Offset = "0xED0D98", VA = "0xED0D98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000116")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009BA")]
			[Address(RVA = "0xED0DE0", Offset = "0xED0DE0", VA = "0xED0DE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xED0AEC", Offset = "0xED0AEC", VA = "0xED0AEC")]
		[DebuggerHidden]
		public <castMultiSpike>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xED0B14", Offset = "0xED0B14", VA = "0xED0B14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xED0B18", Offset = "0xED0B18", VA = "0xED0B18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xED0DA0", Offset = "0xED0DA0", VA = "0xED0DA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001EA")]
	[CompilerGenerated]
	private sealed class <spikyTimer>d__37 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDarkaxerBoss <>4__this;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <ball>5__2;

		[Token(Token = "0x17000117")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009BE")]
			[Address(RVA = "0xED11C0", Offset = "0xED11C0", VA = "0xED11C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000118")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009C0")]
			[Address(RVA = "0xED1208", Offset = "0xED1208", VA = "0xED1208", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xED0DE8", Offset = "0xED0DE8", VA = "0xED0DE8")]
		[DebuggerHidden]
		public <spikyTimer>d__37(int <>1__state)
		{
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xED0E10", Offset = "0xED0E10", VA = "0xED0E10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0xED0E14", Offset = "0xED0E14", VA = "0xED0E14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0xED11C8", Offset = "0xED11C8", VA = "0xED11C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001EB")]
	[CompilerGenerated]
	private sealed class <spawnClones>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDarkaxerBoss <>4__this;

		[Token(Token = "0x17000119")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009C4")]
			[Address(RVA = "0xED1C6C", Offset = "0xED1C6C", VA = "0xED1C6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009C6")]
			[Address(RVA = "0xED1CB4", Offset = "0xED1CB4", VA = "0xED1CB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0xED1210", Offset = "0xED1210", VA = "0xED1210")]
		[DebuggerHidden]
		public <spawnClones>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0xED1238", Offset = "0xED1238", VA = "0xED1238", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0xED123C", Offset = "0xED123C", VA = "0xED123C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0xED1C74", Offset = "0xED1C74", VA = "0xED1C74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001EC")]
	[CompilerGenerated]
	private sealed class <switchWithClone>d__39 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDarkaxerBoss <>4__this;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfSwaps>5__2;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <i>5__3;

		[Token(Token = "0x1700011B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009CA")]
			[Address(RVA = "0xED22BC", Offset = "0xED22BC", VA = "0xED22BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009CC")]
			[Address(RVA = "0xED2304", Offset = "0xED2304", VA = "0xED2304", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xED1CBC", Offset = "0xED1CBC", VA = "0xED1CBC")]
		[DebuggerHidden]
		public <switchWithClone>d__39(int <>1__state)
		{
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0xED1CE4", Offset = "0xED1CE4", VA = "0xED1CE4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0xED1CE8", Offset = "0xED1CE8", VA = "0xED1CE8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0xED22C4", Offset = "0xED22C4", VA = "0xED22C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001ED")]
	[CompilerGenerated]
	private sealed class <switchPhase>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDarkaxerBoss <>4__this;

		[Token(Token = "0x1700011D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009D0")]
			[Address(RVA = "0xED2A7C", Offset = "0xED2A7C", VA = "0xED2A7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009D2")]
			[Address(RVA = "0xED2AC4", Offset = "0xED2AC4", VA = "0xED2AC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0xED230C", Offset = "0xED230C", VA = "0xED230C")]
		[DebuggerHidden]
		public <switchPhase>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0xED2334", Offset = "0xED2334", VA = "0xED2334", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xED2338", Offset = "0xED2338", VA = "0xED2338", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0xED2A84", Offset = "0xED2A84", VA = "0xED2A84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001EE")]
	[CompilerGenerated]
	private sealed class <castBulletHell>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDarkaxerBoss <>4__this;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x1700011F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009D6")]
			[Address(RVA = "0xED2DC4", Offset = "0xED2DC4", VA = "0xED2DC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000120")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009D8")]
			[Address(RVA = "0xED2E0C", Offset = "0xED2E0C", VA = "0xED2E0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xED2ACC", Offset = "0xED2ACC", VA = "0xED2ACC")]
		[DebuggerHidden]
		public <castBulletHell>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0xED2AF4", Offset = "0xED2AF4", VA = "0xED2AF4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0xED2AF8", Offset = "0xED2AF8", VA = "0xED2AF8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xED2DCC", Offset = "0xED2DCC", VA = "0xED2DCC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001EF")]
	[CompilerGenerated]
	private sealed class <spinAttack>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDarkaxerBoss <>4__this;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion <lastRot>5__2;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <timer>5__3;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <maxTime>5__4;

		[Token(Token = "0x17000121")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009DC")]
			[Address(RVA = "0xED3350", Offset = "0xED3350", VA = "0xED3350", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000122")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009DE")]
			[Address(RVA = "0xED3398", Offset = "0xED3398", VA = "0xED3398", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xED2E14", Offset = "0xED2E14", VA = "0xED2E14")]
		[DebuggerHidden]
		public <spinAttack>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0xED2E3C", Offset = "0xED2E3C", VA = "0xED2E3C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xED2E40", Offset = "0xED2E40", VA = "0xED2E40", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xED3358", Offset = "0xED3358", VA = "0xED3358", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001F0")]
	[CompilerGenerated]
	private sealed class <deleteAfterFrame>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDarkaxerBoss <>4__this;

		[Token(Token = "0x17000123")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009E2")]
			[Address(RVA = "0xED3504", Offset = "0xED3504", VA = "0xED3504", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000124")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009E4")]
			[Address(RVA = "0xED354C", Offset = "0xED354C", VA = "0xED354C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xED33A0", Offset = "0xED33A0", VA = "0xED33A0")]
		[DebuggerHidden]
		public <deleteAfterFrame>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0xED33C8", Offset = "0xED33C8", VA = "0xED33C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xED33CC", Offset = "0xED33CC", VA = "0xED33CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xED350C", Offset = "0xED350C", VA = "0xED350C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001F1")]
	[CompilerGenerated]
	private sealed class <deathTimer>d__47 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDarkaxerBoss <>4__this;

		[Token(Token = "0x17000125")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009E8")]
			[Address(RVA = "0xED36E8", Offset = "0xED36E8", VA = "0xED36E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000126")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009EA")]
			[Address(RVA = "0xED3730", Offset = "0xED3730", VA = "0xED3730", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xED3554", Offset = "0xED3554", VA = "0xED3554")]
		[DebuggerHidden]
		public <deathTimer>d__47(int <>1__state)
		{
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xED357C", Offset = "0xED357C", VA = "0xED357C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xED3580", Offset = "0xED3580", VA = "0xED3580", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xED36F0", Offset = "0xED36F0", VA = "0xED36F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001F2")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__48 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemyProjectile;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyDarkaxerBoss <>4__this;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float delay;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject <proj>5__2;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x17000127")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009EE")]
			[Address(RVA = "0xED3A74", Offset = "0xED3A74", VA = "0xED3A74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000128")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009F0")]
			[Address(RVA = "0xED3ABC", Offset = "0xED3ABC", VA = "0xED3ABC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xED3738", Offset = "0xED3738", VA = "0xED3738")]
		[DebuggerHidden]
		public <shootProjectile>d__48(int <>1__state)
		{
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xED3760", Offset = "0xED3760", VA = "0xED3760", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xED3764", Offset = "0xED3764", VA = "0xED3764", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xED3A7C", Offset = "0xED3A7C", VA = "0xED3A7C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	public bool isClone;

	[Token(Token = "0x4000951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private TMP_Text countdownText;

	[Token(Token = "0x4000952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private int numOfFastProjectiles;

	[Token(Token = "0x4000953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject regularProjectile;

	[Token(Token = "0x4000954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject crossProj;

	[Token(Token = "0x4000955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public BattleDialogueBox dialogueBox;

	[Token(Token = "0x4000957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GameObject spikeBall;

	[Token(Token = "0x4000958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public string[] dialogue1;

	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public EnemyParent handRight;

	[Token(Token = "0x400095A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public EnemyParent handLeft;

	[Token(Token = "0x400095B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public GameObject teleportParticle;

	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public float baseProjectileSpeed;

	[Token(Token = "0x400095D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public EnemyParent cloneObject;

	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private bool gameOver;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A1")]
	private bool isDefeated;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	private int turnNum;

	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private int turnsSinceClone;

	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	private UnityEngine.Vector3 lastPos;

	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private DarkaxerPhase darkaxerPhase;

	[Token(Token = "0x4000964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
	private int cloneHealthStart;

	[Token(Token = "0x4000965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private float matchTimer;

	[Token(Token = "0x4000966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public AudioClip[] dialogueClips;

	[Token(Token = "0x4000967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public AudioClip[] attackClips;

	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public AudioSource teleportSource;

	[Token(Token = "0x600098F")]
	[Address(RVA = "0xECF298", Offset = "0xECF298", VA = "0xECF298", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000990")]
	[Address(RVA = "0xECF418", Offset = "0xECF418", VA = "0xECF418")]
	public void disolveMat()
	{
	}

	[Token(Token = "0x6000991")]
	[Address(RVA = "0xECF438", Offset = "0xECF438", VA = "0xECF438")]
	[IteratorStateMachine(typeof(<disolveMaterial1>d__28))]
	private IEnumerator disolveMaterial1()
	{
		return null;
	}

	[Token(Token = "0x6000992")]
	[Address(RVA = "0xECF4A0", Offset = "0xECF4A0", VA = "0xECF4A0", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000993")]
	[Address(RVA = "0xECF640", Offset = "0xECF640", VA = "0xECF640")]
	public void playDialogue(string dialogue)
	{
	}

	[Token(Token = "0x6000994")]
	[Address(RVA = "0xECF8B0", Offset = "0xECF8B0", VA = "0xECF8B0", Slot = "15")]
	public override void addGlitch(GlitchEffects currentGlitch)
	{
	}

	[Token(Token = "0x6000995")]
	[Address(RVA = "0xECF948", Offset = "0xECF948", VA = "0xECF948", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000996")]
	[Address(RVA = "0xECFD38", Offset = "0xECFD38", VA = "0xECFD38", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000997")]
	[Address(RVA = "0xECFAC8", Offset = "0xECFAC8", VA = "0xECFAC8")]
	[IteratorStateMachine(typeof(<flyBack>d__34))]
	private IEnumerator flyBack()
	{
		return null;
	}

	[Token(Token = "0x6000998")]
	[Address(RVA = "0xECFC68", Offset = "0xECFC68", VA = "0xECFC68")]
	[IteratorStateMachine(typeof(<castMultiSpike>d__35))]
	private IEnumerator castMultiSpike()
	{
		return null;
	}

	[Token(Token = "0x6000999")]
	[Address(RVA = "0xECFE0C", Offset = "0xECFE0C", VA = "0xECFE0C")]
	public void fireSpikeBall()
	{
	}

	[Token(Token = "0x600099A")]
	[Address(RVA = "0xECFE2C", Offset = "0xECFE2C", VA = "0xECFE2C")]
	[IteratorStateMachine(typeof(<spikyTimer>d__37))]
	private IEnumerator spikyTimer()
	{
		return null;
	}

	[Token(Token = "0x600099B")]
	[Address(RVA = "0xECFCD0", Offset = "0xECFCD0", VA = "0xECFCD0")]
	[IteratorStateMachine(typeof(<spawnClones>d__38))]
	private IEnumerator spawnClones()
	{
		return null;
	}

	[Token(Token = "0x600099C")]
	[Address(RVA = "0xECFE94", Offset = "0xECFE94", VA = "0xECFE94")]
	[IteratorStateMachine(typeof(<switchWithClone>d__39))]
	private IEnumerator switchWithClone()
	{
		return null;
	}

	[Token(Token = "0x600099D")]
	[Address(RVA = "0xECFEFC", Offset = "0xECFEFC", VA = "0xECFEFC", Slot = "14")]
	public override void damageEnemy(int amount, bool crit, int combo, BattleElementType element, bool isPhysical = false)
	{
	}

	[Token(Token = "0x600099E")]
	[Address(RVA = "0xECFB30", Offset = "0xECFB30", VA = "0xECFB30")]
	[IteratorStateMachine(typeof(<switchPhase>d__41))]
	private IEnumerator switchPhase()
	{
		return null;
	}

	[Token(Token = "0x600099F")]
	[Address(RVA = "0xECFB98", Offset = "0xECFB98", VA = "0xECFB98")]
	[IteratorStateMachine(typeof(<castBulletHell>d__42))]
	protected IEnumerator castBulletHell()
	{
		return null;
	}

	[Token(Token = "0x60009A0")]
	[Address(RVA = "0xED004C", Offset = "0xED004C", VA = "0xED004C")]
	private void playRandomAttackSound()
	{
	}

	[Token(Token = "0x60009A1")]
	[Address(RVA = "0xECFC00", Offset = "0xECFC00", VA = "0xECFC00")]
	[IteratorStateMachine(typeof(<spinAttack>d__44))]
	private IEnumerator spinAttack()
	{
		return null;
	}

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0xED0160", Offset = "0xED0160", VA = "0xED0160")]
	[IteratorStateMachine(typeof(<deleteAfterFrame>d__45))]
	private IEnumerator deleteAfterFrame()
	{
		return null;
	}

	[Token(Token = "0x60009A3")]
	[Address(RVA = "0xED01C8", Offset = "0xED01C8", VA = "0xED01C8", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x60009A4")]
	[Address(RVA = "0xED02F8", Offset = "0xED02F8", VA = "0xED02F8")]
	[IteratorStateMachine(typeof(<deathTimer>d__47))]
	private IEnumerator deathTimer()
	{
		return null;
	}

	[Token(Token = "0x60009A5")]
	[Address(RVA = "0xED0360", Offset = "0xED0360", VA = "0xED0360")]
	[IteratorStateMachine(typeof(<shootProjectile>d__48))]
	protected IEnumerator shootProjectile(GameObject enemyProjectile, float delay)
	{
		return null;
	}

	[Token(Token = "0x60009A6")]
	[Address(RVA = "0xED03E4", Offset = "0xED03E4", VA = "0xED03E4", Slot = "18")]
	public override void endTurn(bool enemyDied = false)
	{
	}

	[Token(Token = "0x60009A7")]
	[Address(RVA = "0xED0520", Offset = "0xED0520", VA = "0xED0520")]
	public EnemyDarkaxerBoss()
	{
	}
}
[Token(Token = "0x20001F3")]
public class EnemyDarkaxer : EnemyParent
{
	[Token(Token = "0x20001F4")]
	[CompilerGenerated]
	private sealed class <castFinalAttack>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDarkaxer <>4__this;

		[Token(Token = "0x17000129")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009FC")]
			[Address(RVA = "0xED43E8", Offset = "0xED43E8", VA = "0xED43E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009FE")]
			[Address(RVA = "0xED4430", Offset = "0xED4430", VA = "0xED4430", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xED3EF4", Offset = "0xED3EF4", VA = "0xED3EF4")]
		[DebuggerHidden]
		public <castFinalAttack>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xED41A0", Offset = "0xED41A0", VA = "0xED41A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xED41A4", Offset = "0xED41A4", VA = "0xED41A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xED43F0", Offset = "0xED43F0", VA = "0xED43F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001F5")]
	[CompilerGenerated]
	private sealed class <castBulletHell>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform firePoint;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyDarkaxer <>4__this;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x1700012B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A02")]
			[Address(RVA = "0xED466C", Offset = "0xED466C", VA = "0xED466C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A04")]
			[Address(RVA = "0xED46B4", Offset = "0xED46B4", VA = "0xED46B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xED3F90", Offset = "0xED3F90", VA = "0xED3F90")]
		[DebuggerHidden]
		public <castBulletHell>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xED4438", Offset = "0xED4438", VA = "0xED4438", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xED443C", Offset = "0xED443C", VA = "0xED443C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xED4674", Offset = "0xED4674", VA = "0xED4674", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001F6")]
	[CompilerGenerated]
	private sealed class <shootProjectileFromPoint>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDarkaxer <>4__this;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform point;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject <proj>5__2;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x1700012D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A08")]
			[Address(RVA = "0xED491C", Offset = "0xED491C", VA = "0xED491C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A0A")]
			[Address(RVA = "0xED4964", Offset = "0xED4964", VA = "0xED4964", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xED402C", Offset = "0xED402C", VA = "0xED402C")]
		[DebuggerHidden]
		public <shootProjectileFromPoint>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xED46BC", Offset = "0xED46BC", VA = "0xED46BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xED46C0", Offset = "0xED46C0", VA = "0xED46C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xED4924", Offset = "0xED4924", VA = "0xED4924", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Animator taskMasterAnim;

	[Token(Token = "0x40009A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject killPillarPrefab;

	[Token(Token = "0x40009A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private bool firstAttack;

	[Token(Token = "0x40009A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public Transform[] finalAttackPoints;

	[Token(Token = "0x40009A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public float projSpeed;

	[Token(Token = "0x40009A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject enemyProjectile;

	[Token(Token = "0x40009A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GameObject teleParticle;

	[Token(Token = "0x40009A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public GameObject arcaxerModel;

	[Token(Token = "0x40009A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public AudioClip music;

	[Token(Token = "0x60009F1")]
	[Address(RVA = "0xED3AC4", Offset = "0xED3AC4", VA = "0xED3AC4", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60009F2")]
	[Address(RVA = "0xED3CB4", Offset = "0xED3CB4", VA = "0xED3CB4", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60009F3")]
	[Address(RVA = "0xED3CB8", Offset = "0xED3CB8", VA = "0xED3CB8", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x60009F4")]
	[Address(RVA = "0xED3E8C", Offset = "0xED3E8C", VA = "0xED3E8C")]
	[IteratorStateMachine(typeof(<castFinalAttack>d__12))]
	protected IEnumerator castFinalAttack()
	{
		return null;
	}

	[Token(Token = "0x60009F5")]
	[Address(RVA = "0xED3F1C", Offset = "0xED3F1C", VA = "0xED3F1C")]
	[IteratorStateMachine(typeof(<castBulletHell>d__13))]
	protected IEnumerator castBulletHell(Transform firePoint)
	{
		return null;
	}

	[Token(Token = "0x60009F6")]
	[Address(RVA = "0xED3FB8", Offset = "0xED3FB8", VA = "0xED3FB8")]
	[IteratorStateMachine(typeof(<shootProjectileFromPoint>d__14))]
	protected IEnumerator shootProjectileFromPoint(Transform point)
	{
		return null;
	}

	[Token(Token = "0x60009F7")]
	[Address(RVA = "0xED4054", Offset = "0xED4054", VA = "0xED4054", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x60009F8")]
	[Address(RVA = "0xED4188", Offset = "0xED4188", VA = "0xED4188")]
	public EnemyDarkaxer()
	{
	}
}
[Token(Token = "0x20001F7")]
public class EnemyDrJonkal : EnemyParent
{
	[Token(Token = "0x20001F8")]
	public enum EnemyForm
	{
		[Token(Token = "0x40009CA")]
		jonkal,
		[Token(Token = "0x40009CB")]
		hugh
	}

	[Token(Token = "0x20001F9")]
	[CompilerGenerated]
	private sealed class <transformEnemy>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDrJonkal <>4__this;

		[Token(Token = "0x1700012F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A1C")]
			[Address(RVA = "0xED595C", Offset = "0xED595C", VA = "0xED595C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000130")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A1E")]
			[Address(RVA = "0xED59A4", Offset = "0xED59A4", VA = "0xED59A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xED4B1C", Offset = "0xED4B1C", VA = "0xED4B1C")]
		[DebuggerHidden]
		public <transformEnemy>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xED53B0", Offset = "0xED53B0", VA = "0xED53B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xED53B4", Offset = "0xED53B4", VA = "0xED53B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xED5964", Offset = "0xED5964", VA = "0xED5964", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001FA")]
	[CompilerGenerated]
	private sealed class <poisonWall>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDrJonkal <>4__this;

		[Token(Token = "0x17000131")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A22")]
			[Address(RVA = "0xED5CFC", Offset = "0xED5CFC", VA = "0xED5CFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000132")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A24")]
			[Address(RVA = "0xED5D44", Offset = "0xED5D44", VA = "0xED5D44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0xED4DC4", Offset = "0xED4DC4", VA = "0xED4DC4")]
		[DebuggerHidden]
		public <poisonWall>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xED59AC", Offset = "0xED59AC", VA = "0xED59AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0xED59B0", Offset = "0xED59B0", VA = "0xED59B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0xED5D04", Offset = "0xED5D04", VA = "0xED5D04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001FB")]
	[CompilerGenerated]
	private sealed class <poisonCross>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDrJonkal <>4__this;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfBeams>5__2;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <i>5__3;

		[Token(Token = "0x17000133")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A28")]
			[Address(RVA = "0xED5EC0", Offset = "0xED5EC0", VA = "0xED5EC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000134")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A2A")]
			[Address(RVA = "0xED5F08", Offset = "0xED5F08", VA = "0xED5F08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xED5054", Offset = "0xED5054", VA = "0xED5054")]
		[DebuggerHidden]
		public <poisonCross>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xED5D4C", Offset = "0xED5D4C", VA = "0xED5D4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xED5D50", Offset = "0xED5D50", VA = "0xED5D50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xED5EC8", Offset = "0xED5EC8", VA = "0xED5EC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001FC")]
	[CompilerGenerated]
	private sealed class <poisonBeamBarrage>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDrJonkal <>4__this;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfBeams>5__2;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <i>5__3;

		[Token(Token = "0x17000135")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A2E")]
			[Address(RVA = "0xED60DC", Offset = "0xED60DC", VA = "0xED60DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000136")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A30")]
			[Address(RVA = "0xED6124", Offset = "0xED6124", VA = "0xED6124", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xED507C", Offset = "0xED507C", VA = "0xED507C")]
		[DebuggerHidden]
		public <poisonBeamBarrage>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xED5F10", Offset = "0xED5F10", VA = "0xED5F10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0xED5F14", Offset = "0xED5F14", VA = "0xED5F14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xED60E4", Offset = "0xED60E4", VA = "0xED60E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001FD")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemyProjectile;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyDrJonkal <>4__this;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float projSpeed;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject <proj>5__2;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x17000137")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A34")]
			[Address(RVA = "0xED6390", Offset = "0xED6390", VA = "0xED6390", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000138")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A36")]
			[Address(RVA = "0xED63D8", Offset = "0xED63D8", VA = "0xED63D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xED5378", Offset = "0xED5378", VA = "0xED5378")]
		[DebuggerHidden]
		public <shootProjectile>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xED612C", Offset = "0xED612C", VA = "0xED612C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xED6130", Offset = "0xED6130", VA = "0xED6130", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xED6398", Offset = "0xED6398", VA = "0xED6398", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject poisonBeamSineX;

	[Token(Token = "0x40009BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject poisonOrbX;

	[Token(Token = "0x40009BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject poisonCrossXY;

	[Token(Token = "0x40009BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject[] enemyRigs;

	[Token(Token = "0x40009BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject[] aimAssists;

	[Token(Token = "0x40009BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public Animator[] anims;

	[Token(Token = "0x40009BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GameObject transformParticle;

	[Token(Token = "0x40009C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public EnemyParent transformationCatalyst;

	[Token(Token = "0x40009C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public BattleDialogueBox dialogueBox;

	[Token(Token = "0x40009C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public Transform dialoguePos;

	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public string[] dialogue1;

	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private bool firstTransform;

	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private int turnsTaken;

	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private UnityEngine.Vector3 originalProjPos;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public AudioClip[] dialogueClips;

	[Token(Token = "0x40009C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private EnemyForm enemyForm;

	[Token(Token = "0x6000A0B")]
	[Address(RVA = "0xED496C", Offset = "0xED496C", VA = "0xED496C", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000A0C")]
	[Address(RVA = "0xED49B0", Offset = "0xED49B0", VA = "0xED49B0", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000A0D")]
	[Address(RVA = "0xED4A84", Offset = "0xED4A84", VA = "0xED4A84", Slot = "14")]
	public override void damageEnemy(int amount, bool crit, int combo, BattleElementType element, bool isPhysical = false)
	{
	}

	[Token(Token = "0x6000A0E")]
	[Address(RVA = "0xED4AB4", Offset = "0xED4AB4", VA = "0xED4AB4")]
	[IteratorStateMachine(typeof(<transformEnemy>d__20))]
	private IEnumerator transformEnemy()
	{
		return null;
	}

	[Token(Token = "0x6000A0F")]
	[Address(RVA = "0xED4B44", Offset = "0xED4B44", VA = "0xED4B44", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000A10")]
	[Address(RVA = "0xED4CF4", Offset = "0xED4CF4", VA = "0xED4CF4")]
	[IteratorStateMachine(typeof(<poisonWall>d__22))]
	private IEnumerator poisonWall()
	{
		return null;
	}

	[Token(Token = "0x6000A11")]
	[Address(RVA = "0xED4DEC", Offset = "0xED4DEC", VA = "0xED4DEC")]
	private void spawnEnemy()
	{
	}

	[Token(Token = "0x6000A12")]
	[Address(RVA = "0xED4ED8", Offset = "0xED4ED8", VA = "0xED4ED8")]
	public void playDialogue(string dialogue)
	{
	}

	[Token(Token = "0x6000A13")]
	[Address(RVA = "0xED4D5C", Offset = "0xED4D5C", VA = "0xED4D5C")]
	[IteratorStateMachine(typeof(<poisonCross>d__25))]
	private IEnumerator poisonCross()
	{
		return null;
	}

	[Token(Token = "0x6000A14")]
	[Address(RVA = "0xED4C8C", Offset = "0xED4C8C", VA = "0xED4C8C")]
	[IteratorStateMachine(typeof(<poisonBeamBarrage>d__26))]
	private IEnumerator poisonBeamBarrage()
	{
		return null;
	}

	[Token(Token = "0x6000A15")]
	[Address(RVA = "0xED50A4", Offset = "0xED50A4", VA = "0xED50A4", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000A16")]
	[Address(RVA = "0xED52A0", Offset = "0xED52A0", VA = "0xED52A0", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000A17")]
	[Address(RVA = "0xED52F4", Offset = "0xED52F4", VA = "0xED52F4")]
	[IteratorStateMachine(typeof(<shootProjectile>d__29))]
	protected IEnumerator shootProjectile(GameObject enemyProjectile, float projSpeed)
	{
		return null;
	}

	[Token(Token = "0x6000A18")]
	[Address(RVA = "0xED53A0", Offset = "0xED53A0", VA = "0xED53A0")]
	public EnemyDrJonkal()
	{
	}
}
[Token(Token = "0x20001FE")]
public class EnemyDragonBoss : EnemyParent
{
	[Token(Token = "0x20001FF")]
	public enum DragonPhase
	{
		[Token(Token = "0x4000A01")]
		grounded,
		[Token(Token = "0x4000A02")]
		flying,
		[Token(Token = "0x4000A03")]
		human
	}

	[Token(Token = "0x2000200")]
	[CompilerGenerated]
	private sealed class <firstAttack>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDragonBoss <>4__this;

		[Token(Token = "0x17000139")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A4E")]
			[Address(RVA = "0xED73F0", Offset = "0xED73F0", VA = "0xED73F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A50")]
			[Address(RVA = "0xED7438", Offset = "0xED7438", VA = "0xED7438", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xED6C64", Offset = "0xED6C64", VA = "0xED6C64")]
		[DebuggerHidden]
		public <firstAttack>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xED7244", Offset = "0xED7244", VA = "0xED7244", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xED7248", Offset = "0xED7248", VA = "0xED7248", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xED73F8", Offset = "0xED73F8", VA = "0xED73F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000201")]
	[CompilerGenerated]
	private sealed class <endBattleTransform>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDragonBoss <>4__this;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MusicPlayer <player>5__2;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <numOfProjectiles>5__3;

		[Token(Token = "0x1700013B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A54")]
			[Address(RVA = "0xED7B54", Offset = "0xED7B54", VA = "0xED7B54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A56")]
			[Address(RVA = "0xED7B9C", Offset = "0xED7B9C", VA = "0xED7B9C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xED6C8C", Offset = "0xED6C8C", VA = "0xED6C8C")]
		[DebuggerHidden]
		public <endBattleTransform>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xED7440", Offset = "0xED7440", VA = "0xED7440", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xED7444", Offset = "0xED7444", VA = "0xED7444", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xED7B5C", Offset = "0xED7B5C", VA = "0xED7B5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000202")]
	[CompilerGenerated]
	private sealed class <secondAttack>d__36 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDragonBoss <>4__this;

		[Token(Token = "0x1700013D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A5A")]
			[Address(RVA = "0xED7D58", Offset = "0xED7D58", VA = "0xED7D58", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A5C")]
			[Address(RVA = "0xED7DA0", Offset = "0xED7DA0", VA = "0xED7DA0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xED6CB4", Offset = "0xED6CB4", VA = "0xED6CB4")]
		[DebuggerHidden]
		public <secondAttack>d__36(int <>1__state)
		{
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xED7BA4", Offset = "0xED7BA4", VA = "0xED7BA4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xED7BA8", Offset = "0xED7BA8", VA = "0xED7BA8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xED7D60", Offset = "0xED7D60", VA = "0xED7D60", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000203")]
	[CompilerGenerated]
	private sealed class <spawnCatalystEnemy>d__37 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDragonBoss <>4__this;

		[Token(Token = "0x1700013F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A60")]
			[Address(RVA = "0xED7F6C", Offset = "0xED7F6C", VA = "0xED7F6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000140")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A62")]
			[Address(RVA = "0xED7FB4", Offset = "0xED7FB4", VA = "0xED7FB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xED6CDC", Offset = "0xED6CDC", VA = "0xED6CDC")]
		[DebuggerHidden]
		public <spawnCatalystEnemy>d__37(int <>1__state)
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xED7DA8", Offset = "0xED7DA8", VA = "0xED7DA8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xED7DAC", Offset = "0xED7DAC", VA = "0xED7DAC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xED7F74", Offset = "0xED7F74", VA = "0xED7F74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000204")]
	[CompilerGenerated]
	private sealed class <healSelf>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDragonBoss <>4__this;

		[Token(Token = "0x17000141")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A66")]
			[Address(RVA = "0xED835C", Offset = "0xED835C", VA = "0xED835C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000142")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A68")]
			[Address(RVA = "0xED83A4", Offset = "0xED83A4", VA = "0xED83A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0xED70B4", Offset = "0xED70B4", VA = "0xED70B4")]
		[DebuggerHidden]
		public <healSelf>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xED7FBC", Offset = "0xED7FBC", VA = "0xED7FBC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xED7FC0", Offset = "0xED7FC0", VA = "0xED7FC0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xED8364", Offset = "0xED8364", VA = "0xED8364", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000205")]
	[CompilerGenerated]
	private sealed class <destroyStageAttack>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDragonBoss <>4__this;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <stage>5__2;

		[Token(Token = "0x17000143")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A6C")]
			[Address(RVA = "0xED8868", Offset = "0xED8868", VA = "0xED8868", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000144")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A6E")]
			[Address(RVA = "0xED88B0", Offset = "0xED88B0", VA = "0xED88B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xED70DC", Offset = "0xED70DC", VA = "0xED70DC")]
		[DebuggerHidden]
		public <destroyStageAttack>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xED83AC", Offset = "0xED83AC", VA = "0xED83AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xED83B0", Offset = "0xED83B0", VA = "0xED83B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xED8870", Offset = "0xED8870", VA = "0xED8870", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000206")]
	[CompilerGenerated]
	private sealed class <fireBreath>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDragonBoss <>4__this;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <maxTime>5__2;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__3;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Vector3 <currentPoint>5__4;

		[Token(Token = "0x17000145")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A72")]
			[Address(RVA = "0xED9048", Offset = "0xED9048", VA = "0xED9048", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000146")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A74")]
			[Address(RVA = "0xED9090", Offset = "0xED9090", VA = "0xED9090", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0xED7104", Offset = "0xED7104", VA = "0xED7104")]
		[DebuggerHidden]
		public <fireBreath>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xED88B8", Offset = "0xED88B8", VA = "0xED88B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xED88BC", Offset = "0xED88BC", VA = "0xED88BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xED9050", Offset = "0xED9050", VA = "0xED9050", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000207")]
	[CompilerGenerated]
	private sealed class <castBulletHell>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDragonBoss <>4__this;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x17000147")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A78")]
			[Address(RVA = "0xED947C", Offset = "0xED947C", VA = "0xED947C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000148")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A7A")]
			[Address(RVA = "0xED94C4", Offset = "0xED94C4", VA = "0xED94C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xED712C", Offset = "0xED712C", VA = "0xED712C")]
		[DebuggerHidden]
		public <castBulletHell>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xED9098", Offset = "0xED9098", VA = "0xED9098", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xED909C", Offset = "0xED909C", VA = "0xED909C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xED9484", Offset = "0xED9484", VA = "0xED9484", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000208")]
	[CompilerGenerated]
	private sealed class <castWalls>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDragonBoss <>4__this;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x17000149")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A7E")]
			[Address(RVA = "0xED9780", Offset = "0xED9780", VA = "0xED9780", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A80")]
			[Address(RVA = "0xED97C8", Offset = "0xED97C8", VA = "0xED97C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xED7154", Offset = "0xED7154", VA = "0xED7154")]
		[DebuggerHidden]
		public <castWalls>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xED94CC", Offset = "0xED94CC", VA = "0xED94CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xED94D0", Offset = "0xED94D0", VA = "0xED94D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xED9788", Offset = "0xED9788", VA = "0xED9788", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000209")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__47 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemyProjectile;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyDragonBoss <>4__this;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float delay;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x1700014B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A84")]
			[Address(RVA = "0xED9AE4", Offset = "0xED9AE4", VA = "0xED9AE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A86")]
			[Address(RVA = "0xED9B2C", Offset = "0xED9B2C", VA = "0xED9B2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xED7204", Offset = "0xED7204", VA = "0xED7204")]
		[DebuggerHidden]
		public <shootProjectile>d__47(int <>1__state)
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xED97D0", Offset = "0xED97D0", VA = "0xED97D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xED97D4", Offset = "0xED97D4", VA = "0xED97D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xED9AEC", Offset = "0xED9AEC", VA = "0xED9AEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Transform[] projectilePoints;

	[Token(Token = "0x40009E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject spinprojectile;

	[Token(Token = "0x40009E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject wallProjectile;

	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject wallProjectile2;

	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public float projSpeed;

	[Token(Token = "0x40009E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject spawnParticle;

	[Token(Token = "0x40009E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GameObject healParticlePrefab;

	[Token(Token = "0x40009EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public Animator movementAnimator;

	[Token(Token = "0x40009EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public GameObject dragonLaser;

	[Token(Token = "0x40009EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public GameObject fireBreathAttack;

	[Token(Token = "0x40009ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public GameObject fireShield;

	[Token(Token = "0x40009EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public GameObject transformParticle;

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public Transform[] shieldPoints;

	[Token(Token = "0x40009F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public EnemyParent catalystSpawn;

	[Token(Token = "0x40009F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public string[] dialogueLines;

	[Token(Token = "0x40009F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public BattleDialogueBox dialogueBox;

	[Token(Token = "0x40009F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public GlitchEffects ghostBuff;

	[Token(Token = "0x40009F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public GameObject humanModel;

	[Token(Token = "0x40009F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public SkinnedMeshRenderer dragonModel;

	[Token(Token = "0x40009F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public AudioClip finalSong;

	[Token(Token = "0x40009F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public AudioSource audioSource1;

	[Token(Token = "0x40009F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public int turnCount;

	[Token(Token = "0x40009F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	public int turnsSinceHeal;

	[Token(Token = "0x40009FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private bool enemySummoned;

	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	public AudioClip[] dialogueClips;

	[Token(Token = "0x40009FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	public AudioClip[] attackClips;

	[Token(Token = "0x40009FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	private AudioClip roarClip;

	[Token(Token = "0x40009FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	public DragonPhase dragonPhase;

	[Token(Token = "0x40009FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
	private UnityEngine.Vector3 originalLaunchPos;

	[Token(Token = "0x6000A37")]
	[Address(RVA = "0xED63E0", Offset = "0xED63E0", VA = "0xED63E0", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000A38")]
	[Address(RVA = "0xED6430", Offset = "0xED6430", VA = "0xED6430", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000A39")]
	[Address(RVA = "0xED6548", Offset = "0xED6548", VA = "0xED6548")]
	private void spawnEnemy()
	{
	}

	[Token(Token = "0x6000A3A")]
	[Address(RVA = "0xED6634", Offset = "0xED6634", VA = "0xED6634", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000A3B")]
	[Address(RVA = "0xED6924", Offset = "0xED6924", VA = "0xED6924")]
	[IteratorStateMachine(typeof(<firstAttack>d__34))]
	protected IEnumerator firstAttack()
	{
		return null;
	}

	[Token(Token = "0x6000A3C")]
	[Address(RVA = "0xED64E0", Offset = "0xED64E0", VA = "0xED64E0")]
	[IteratorStateMachine(typeof(<endBattleTransform>d__35))]
	protected IEnumerator endBattleTransform()
	{
		return null;
	}

	[Token(Token = "0x6000A3D")]
	[Address(RVA = "0xED698C", Offset = "0xED698C", VA = "0xED698C")]
	[IteratorStateMachine(typeof(<secondAttack>d__36))]
	protected IEnumerator secondAttack()
	{
		return null;
	}

	[Token(Token = "0x6000A3E")]
	[Address(RVA = "0xED6A5C", Offset = "0xED6A5C", VA = "0xED6A5C")]
	[IteratorStateMachine(typeof(<spawnCatalystEnemy>d__37))]
	protected IEnumerator spawnCatalystEnemy()
	{
		return null;
	}

	[Token(Token = "0x6000A3F")]
	[Address(RVA = "0xED6D04", Offset = "0xED6D04", VA = "0xED6D04", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000A40")]
	[Address(RVA = "0xED6DCC", Offset = "0xED6DCC", VA = "0xED6DCC", Slot = "14")]
	public override void damageEnemy(int amount, bool crit, int combo, BattleElementType element, bool isPhysical = false)
	{
	}

	[Token(Token = "0x6000A41")]
	[Address(RVA = "0xED6DFC", Offset = "0xED6DFC", VA = "0xED6DFC")]
	public void playDialogue(string dialogue)
	{
	}

	[Token(Token = "0x6000A42")]
	[Address(RVA = "0xED69F4", Offset = "0xED69F4", VA = "0xED69F4")]
	[IteratorStateMachine(typeof(<healSelf>d__41))]
	protected IEnumerator healSelf()
	{
		return null;
	}

	[Token(Token = "0x6000A43")]
	[Address(RVA = "0xED6AC4", Offset = "0xED6AC4", VA = "0xED6AC4")]
	[IteratorStateMachine(typeof(<destroyStageAttack>d__42))]
	protected IEnumerator destroyStageAttack()
	{
		return null;
	}

	[Token(Token = "0x6000A44")]
	[Address(RVA = "0xED6B2C", Offset = "0xED6B2C", VA = "0xED6B2C")]
	[IteratorStateMachine(typeof(<fireBreath>d__43))]
	protected IEnumerator fireBreath()
	{
		return null;
	}

	[Token(Token = "0x6000A45")]
	[Address(RVA = "0xED6B94", Offset = "0xED6B94", VA = "0xED6B94")]
	[IteratorStateMachine(typeof(<castBulletHell>d__44))]
	protected IEnumerator castBulletHell()
	{
		return null;
	}

	[Token(Token = "0x6000A46")]
	[Address(RVA = "0xED6BFC", Offset = "0xED6BFC", VA = "0xED6BFC")]
	[IteratorStateMachine(typeof(<castWalls>d__45))]
	protected IEnumerator castWalls()
	{
		return null;
	}

	[Token(Token = "0x6000A47")]
	[Address(RVA = "0xED717C", Offset = "0xED717C", VA = "0xED717C", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000A48")]
	[Address(RVA = "0xED7180", Offset = "0xED7180", VA = "0xED7180")]
	[IteratorStateMachine(typeof(<shootProjectile>d__47))]
	protected IEnumerator shootProjectile(GameObject enemyProjectile, float delay)
	{
		return null;
	}

	[Token(Token = "0x6000A49")]
	[Address(RVA = "0xED722C", Offset = "0xED722C", VA = "0xED722C")]
	public EnemyDragonBoss()
	{
	}
}
[Token(Token = "0x200020A")]
public class TrailRendHelper : MonoBehaviour
{
	[Token(Token = "0x4000A2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] points;

	[Token(Token = "0x4000A30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LineRenderer lineRend;

	[Token(Token = "0x6000A87")]
	[Address(RVA = "0xED9B34", Offset = "0xED9B34", VA = "0xED9B34")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A88")]
	[Address(RVA = "0xED9BC4", Offset = "0xED9BC4", VA = "0xED9BC4")]
	public TrailRendHelper()
	{
	}
}
[Token(Token = "0x200020B")]
public class EnemyModifier : MonoBehaviour
{
	[Token(Token = "0x4000A31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string namePrefix;

	[Token(Token = "0x4000A32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float projSpeed;

	[Token(Token = "0x4000A33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float moveSpeed;

	[Token(Token = "0x4000A34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float scale;

	[Token(Token = "0x4000A35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float damage;

	[Token(Token = "0x4000A36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float health;

	[Token(Token = "0x4000A37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float wealth;

	[Token(Token = "0x4000A38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float exp;

	[Token(Token = "0x4000A39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material material;

	[Token(Token = "0x4000A3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GlitchEffects startGlitch;

	[Token(Token = "0x4000A3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioClip[] voiceClip;

	[Token(Token = "0x6000A89")]
	[Address(RVA = "0xED9BCC", Offset = "0xED9BCC", VA = "0xED9BCC")]
	public void applyModifier(EnemyParent enemy)
	{
	}

	[Token(Token = "0x6000A8A")]
	[Address(RVA = "0xED9EF8", Offset = "0xED9EF8", VA = "0xED9EF8")]
	private void playVoice()
	{
	}

	[Token(Token = "0x6000A8B")]
	[Address(RVA = "0xEDA034", Offset = "0xEDA034", VA = "0xEDA034")]
	public EnemyModifier()
	{
	}
}
[Token(Token = "0x200020C")]
public class EnemyTurret : EnemyParent
{
	[Token(Token = "0x200020D")]
	public enum TurretMode
	{
		[Token(Token = "0x4000A47")]
		circleFire,
		[Token(Token = "0x4000A48")]
		shotgun
	}

	[Token(Token = "0x200020E")]
	[CompilerGenerated]
	private sealed class <circleAttack>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyTurret <>4__this;

		[Token(Token = "0x1700014D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A9A")]
			[Address(RVA = "0xEDA9D0", Offset = "0xEDA9D0", VA = "0xEDA9D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A9C")]
			[Address(RVA = "0xEDAA18", Offset = "0xEDAA18", VA = "0xEDAA18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xEDA268", Offset = "0xEDA268", VA = "0xEDA268")]
		[DebuggerHidden]
		public <circleAttack>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xEDA768", Offset = "0xEDA768", VA = "0xEDA768", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xEDA76C", Offset = "0xEDA76C", VA = "0xEDA76C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xEDA9D8", Offset = "0xEDA9D8", VA = "0xEDA9D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200020F")]
	[CompilerGenerated]
	private sealed class <healAllies>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyTurret <>4__this;

		[Token(Token = "0x1700014F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AA0")]
			[Address(RVA = "0xEDAE84", Offset = "0xEDAE84", VA = "0xEDAE84", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000150")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AA2")]
			[Address(RVA = "0xEDAECC", Offset = "0xEDAECC", VA = "0xEDAECC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xEDA290", Offset = "0xEDA290", VA = "0xEDA290")]
		[DebuggerHidden]
		public <healAllies>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xEDAA20", Offset = "0xEDAA20", VA = "0xEDAA20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xEDAA24", Offset = "0xEDAA24", VA = "0xEDAA24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xEDAE8C", Offset = "0xEDAE8C", VA = "0xEDAE8C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000210")]
	[CompilerGenerated]
	private sealed class <shotgunAttack>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyTurret <>4__this;

		[Token(Token = "0x17000151")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AA6")]
			[Address(RVA = "0xEDB234", Offset = "0xEDB234", VA = "0xEDB234", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000152")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AA8")]
			[Address(RVA = "0xEDB27C", Offset = "0xEDB27C", VA = "0xEDB27C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xEDA2B8", Offset = "0xEDA2B8", VA = "0xEDA2B8")]
		[DebuggerHidden]
		public <shotgunAttack>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xEDAED4", Offset = "0xEDAED4", VA = "0xEDAED4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xEDAED8", Offset = "0xEDAED8", VA = "0xEDAED8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0xEDB23C", Offset = "0xEDB23C", VA = "0xEDB23C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000211")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject proj;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyTurret <>4__this;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody <projRB>5__2;

		[Token(Token = "0x17000153")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AAC")]
			[Address(RVA = "0xEDB490", Offset = "0xEDB490", VA = "0xEDB490", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000154")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AAE")]
			[Address(RVA = "0xEDB4D8", Offset = "0xEDB4D8", VA = "0xEDB4D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0xEDA724", Offset = "0xEDA724", VA = "0xEDA724")]
		[DebuggerHidden]
		public <shootProjectile>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0xEDB284", Offset = "0xEDB284", VA = "0xEDB284", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0xEDB288", Offset = "0xEDB288", VA = "0xEDB288", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0xEDB498", Offset = "0xEDB498", VA = "0xEDB498", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject enemyProjectile;

	[Token(Token = "0x4000A3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject enemyProjectileSineX;

	[Token(Token = "0x4000A3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject enemyProjectileSineY;

	[Token(Token = "0x4000A3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject launchParticle;

	[Token(Token = "0x4000A40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject healParticle;

	[Token(Token = "0x4000A41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public float projSpeed;

	[Token(Token = "0x4000A42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	public int shotgunProjectiles;

	[Token(Token = "0x4000A43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GlitchEffects buffGlitch;

	[Token(Token = "0x4000A44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public int healValue;

	[Token(Token = "0x4000A45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	public TurretMode turretMode;

	[Token(Token = "0x6000A8C")]
	[Address(RVA = "0xEDA09C", Offset = "0xEDA09C", VA = "0xEDA09C", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000A8D")]
	[Address(RVA = "0xEDA130", Offset = "0xEDA130", VA = "0xEDA130")]
	[IteratorStateMachine(typeof(<circleAttack>d__12))]
	private IEnumerator circleAttack()
	{
		return null;
	}

	[Token(Token = "0x6000A8E")]
	[Address(RVA = "0xEDA198", Offset = "0xEDA198", VA = "0xEDA198")]
	[IteratorStateMachine(typeof(<healAllies>d__13))]
	private IEnumerator healAllies()
	{
		return null;
	}

	[Token(Token = "0x6000A8F")]
	[Address(RVA = "0xEDA200", Offset = "0xEDA200", VA = "0xEDA200")]
	[IteratorStateMachine(typeof(<shotgunAttack>d__14))]
	private IEnumerator shotgunAttack()
	{
		return null;
	}

	[Token(Token = "0x6000A90")]
	[Address(RVA = "0xEDA2E0", Offset = "0xEDA2E0", VA = "0xEDA2E0", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000A91")]
	[Address(RVA = "0xEDA2E8", Offset = "0xEDA2E8", VA = "0xEDA2E8", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000A92")]
	[Address(RVA = "0xEDA2F0", Offset = "0xEDA2F0", VA = "0xEDA2F0", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000A93")]
	[Address(RVA = "0xEDA374", Offset = "0xEDA374", VA = "0xEDA374", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000A94")]
	[Address(RVA = "0xEDA3C8", Offset = "0xEDA3C8", VA = "0xEDA3C8")]
	public void instantiateInCircle(GameObject obj, UnityEngine.Vector3 location, int howMany)
	{
	}

	[Token(Token = "0x6000A95")]
	[Address(RVA = "0xEDA6B0", Offset = "0xEDA6B0", VA = "0xEDA6B0")]
	[IteratorStateMachine(typeof(<shootProjectile>d__20))]
	protected IEnumerator shootProjectile(GameObject proj, Transform launchTrans)
	{
		return null;
	}

	[Token(Token = "0x6000A96")]
	[Address(RVA = "0xEDA74C", Offset = "0xEDA74C", VA = "0xEDA74C")]
	public EnemyTurret()
	{
	}
}
[Token(Token = "0x2000212")]
public class EnemyAberration1 : EnemyParent
{
	[Token(Token = "0x2000213")]
	[CompilerGenerated]
	private sealed class <castSpinWall>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyAberration1 <>4__this;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timeBetweenWalls>5__2;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <i>5__3;

		[Token(Token = "0x17000155")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000ABD")]
			[Address(RVA = "0xEDC140", Offset = "0xEDC140", VA = "0xEDC140", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000156")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000ABF")]
			[Address(RVA = "0xEDC188", Offset = "0xEDC188", VA = "0xEDC188", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xEDBD94", Offset = "0xEDBD94", VA = "0xEDBD94")]
		[DebuggerHidden]
		public <castSpinWall>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xEDBE04", Offset = "0xEDBE04", VA = "0xEDBE04", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xEDBE08", Offset = "0xEDBE08", VA = "0xEDBE08", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0xEDC148", Offset = "0xEDC148", VA = "0xEDC148", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000214")]
	[CompilerGenerated]
	private sealed class <CastSpinLaser>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyAberration1 <>4__this;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<GameObject> <allLasers>5__2;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <maxTurnTime>5__3;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <time>5__4;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <randX>5__5;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float <randY>5__6;

		[Token(Token = "0x17000157")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AC3")]
			[Address(RVA = "0xEDCF60", Offset = "0xEDCF60", VA = "0xEDCF60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000158")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AC5")]
			[Address(RVA = "0xEDCFA8", Offset = "0xEDCFA8", VA = "0xEDCFA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xEDBDBC", Offset = "0xEDBDBC", VA = "0xEDBDBC")]
		[DebuggerHidden]
		public <CastSpinLaser>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xEDC190", Offset = "0xEDC190", VA = "0xEDC190", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0xEDC194", Offset = "0xEDC194", VA = "0xEDC194", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0xEDCF68", Offset = "0xEDCF68", VA = "0xEDCF68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject laserParent;

	[Token(Token = "0x4000A58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject laserPrefab;

	[Token(Token = "0x4000A59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject shields;

	[Token(Token = "0x4000A5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public EnemySpinWall spinWallprefab;

	[Token(Token = "0x4000A5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	private float sineAmplitude;

	[Token(Token = "0x4000A5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	public float sinePeriod;

	[Token(Token = "0x4000A5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public float projSpeed;

	[Token(Token = "0x4000A5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	public int numOfSpinWalls;

	[Token(Token = "0x4000A5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private UnityEngine.Vector3 spawnPos;

	[Token(Token = "0x4000A60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	public bool sineX;

	[Token(Token = "0x4000A61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private float elapsedTime;

	[Token(Token = "0x4000A62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private bool startedAttack;

	[Token(Token = "0x6000AAF")]
	[Address(RVA = "0xEDB4E0", Offset = "0xEDB4E0", VA = "0xEDB4E0", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000AB0")]
	[Address(RVA = "0xEDB6D4", Offset = "0xEDB6D4", VA = "0xEDB6D4", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000AB1")]
	[Address(RVA = "0xEDB7C8", Offset = "0xEDB7C8", VA = "0xEDB7C8")]
	public void toggleShieldsOn()
	{
	}

	[Token(Token = "0x6000AB2")]
	[Address(RVA = "0xEDB84C", Offset = "0xEDB84C", VA = "0xEDB84C")]
	public void toggleShieldsOff()
	{
	}

	[Token(Token = "0x6000AB3")]
	[Address(RVA = "0xEDB8D0", Offset = "0xEDB8D0", VA = "0xEDB8D0", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000AB4")]
	[Address(RVA = "0xEDBAF0", Offset = "0xEDBAF0", VA = "0xEDBAF0", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000AB5")]
	[Address(RVA = "0xEDBD34", Offset = "0xEDBD34", VA = "0xEDBD34", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000AB6")]
	[Address(RVA = "0xEDBA88", Offset = "0xEDBA88", VA = "0xEDBA88")]
	[IteratorStateMachine(typeof(<castSpinWall>d__19))]
	private IEnumerator castSpinWall()
	{
		return null;
	}

	[Token(Token = "0x6000AB7")]
	[Address(RVA = "0xEDB700", Offset = "0xEDB700", VA = "0xEDB700")]
	private void SmoothSineWave()
	{
	}

	[Token(Token = "0x6000AB8")]
	[Address(RVA = "0xEDBA20", Offset = "0xEDBA20", VA = "0xEDBA20")]
	[IteratorStateMachine(typeof(<CastSpinLaser>d__21))]
	private IEnumerator CastSpinLaser()
	{
		return null;
	}

	[Token(Token = "0x6000AB9")]
	[Address(RVA = "0xEDBDE4", Offset = "0xEDBDE4", VA = "0xEDBDE4")]
	public EnemyAberration1()
	{
	}
}
[Token(Token = "0x2000215")]
public class EnemyCaster : EnemyParent
{
	[Token(Token = "0x2000216")]
	public enum ShieldType
	{
		[Token(Token = "0x4000A7F")]
		rotate,
		[Token(Token = "0x4000A80")]
		rotateAndScale
	}

	[Token(Token = "0x2000217")]
	[CompilerGenerated]
	private sealed class <castPunchWall>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCaster <>4__this;

		[Token(Token = "0x17000159")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000ADB")]
			[Address(RVA = "0xEDDEA0", Offset = "0xEDDEA0", VA = "0xEDDEA0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000ADD")]
			[Address(RVA = "0xEDDEE8", Offset = "0xEDDEE8", VA = "0xEDDEE8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0xEDD7C4", Offset = "0xEDD7C4", VA = "0xEDD7C4")]
		[DebuggerHidden]
		public <castPunchWall>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0xEDDC9C", Offset = "0xEDDC9C", VA = "0xEDDC9C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0xEDDCA0", Offset = "0xEDDCA0", VA = "0xEDDCA0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0xEDDEA8", Offset = "0xEDDEA8", VA = "0xEDDEA8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000218")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCaster <>4__this;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x1700015B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AE1")]
			[Address(RVA = "0xEDE1BC", Offset = "0xEDE1BC", VA = "0xEDE1BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AE3")]
			[Address(RVA = "0xEDE204", Offset = "0xEDE204", VA = "0xEDE204", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0xEDD854", Offset = "0xEDD854", VA = "0xEDD854")]
		[DebuggerHidden]
		public <shootProjectile>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0xEDDEF0", Offset = "0xEDDEF0", VA = "0xEDDEF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0xEDDEF4", Offset = "0xEDDEF4", VA = "0xEDDEF4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xEDE1C4", Offset = "0xEDE1C4", VA = "0xEDE1C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000219")]
	[CompilerGenerated]
	private sealed class <castRapidFire>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCaster <>4__this;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x1700015D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AE7")]
			[Address(RVA = "0xEDE49C", Offset = "0xEDE49C", VA = "0xEDE49C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AE9")]
			[Address(RVA = "0xEDE4E4", Offset = "0xEDE4E4", VA = "0xEDE4E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xEDD87C", Offset = "0xEDD87C", VA = "0xEDD87C")]
		[DebuggerHidden]
		public <castRapidFire>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xEDE20C", Offset = "0xEDE20C", VA = "0xEDE20C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0xEDE210", Offset = "0xEDE210", VA = "0xEDE210", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0xEDE4A4", Offset = "0xEDE4A4", VA = "0xEDE4A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200021A")]
	[CompilerGenerated]
	private sealed class <castBulletHell>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCaster <>4__this;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <ignoreStraights>5__4;

		[Token(Token = "0x1700015F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AED")]
			[Address(RVA = "0xEDE7D4", Offset = "0xEDE7D4", VA = "0xEDE7D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000160")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AEF")]
			[Address(RVA = "0xEDE81C", Offset = "0xEDE81C", VA = "0xEDE81C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0xEDD8A4", Offset = "0xEDD8A4", VA = "0xEDD8A4")]
		[DebuggerHidden]
		public <castBulletHell>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xEDE4EC", Offset = "0xEDE4EC", VA = "0xEDE4EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0xEDE4F0", Offset = "0xEDE4F0", VA = "0xEDE4F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xEDE7DC", Offset = "0xEDE7DC", VA = "0xEDE7DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200021B")]
	[CompilerGenerated]
	private sealed class <castShadowWall>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCaster <>4__this;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool randomDir;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject <shadowWallInst>5__2;

		[Token(Token = "0x17000161")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AF3")]
			[Address(RVA = "0xEDED64", Offset = "0xEDED64", VA = "0xEDED64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000162")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AF5")]
			[Address(RVA = "0xEDEDAC", Offset = "0xEDEDAC", VA = "0xEDEDAC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xEDD8CC", Offset = "0xEDD8CC", VA = "0xEDD8CC")]
		[DebuggerHidden]
		public <castShadowWall>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0xEDE824", Offset = "0xEDE824", VA = "0xEDE824", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xEDE828", Offset = "0xEDE828", VA = "0xEDE828", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0xEDED6C", Offset = "0xEDED6C", VA = "0xEDED6C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200021C")]
	[CompilerGenerated]
	private sealed class <castOrbWall>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCaster <>4__this;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x17000163")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AF9")]
			[Address(RVA = "0xEDF1D8", Offset = "0xEDF1D8", VA = "0xEDF1D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000164")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AFB")]
			[Address(RVA = "0xEDF220", Offset = "0xEDF220", VA = "0xEDF220", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0xEDD8F4", Offset = "0xEDD8F4", VA = "0xEDD8F4")]
		[DebuggerHidden]
		public <castOrbWall>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0xEDEDB4", Offset = "0xEDEDB4", VA = "0xEDEDB4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0xEDEDB8", Offset = "0xEDEDB8", VA = "0xEDEDB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0xEDF1E0", Offset = "0xEDF1E0", VA = "0xEDF1E0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200021D")]
	[CompilerGenerated]
	private sealed class <castVBeam>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCaster <>4__this;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <proj>5__2;

		[Token(Token = "0x17000165")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AFF")]
			[Address(RVA = "0xEDF618", Offset = "0xEDF618", VA = "0xEDF618", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000166")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B01")]
			[Address(RVA = "0xEDF660", Offset = "0xEDF660", VA = "0xEDF660", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0xEDD91C", Offset = "0xEDD91C", VA = "0xEDD91C")]
		[DebuggerHidden]
		public <castVBeam>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0xEDF228", Offset = "0xEDF228", VA = "0xEDF228", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0xEDF22C", Offset = "0xEDF22C", VA = "0xEDF22C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xEDF620", Offset = "0xEDF620", VA = "0xEDF620", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200021E")]
	[CompilerGenerated]
	private sealed class <waitForNextAttack>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCaster <>4__this;

		[Token(Token = "0x17000167")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B05")]
			[Address(RVA = "0xEDF71C", Offset = "0xEDF71C", VA = "0xEDF71C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000168")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B07")]
			[Address(RVA = "0xEDF764", Offset = "0xEDF764", VA = "0xEDF764", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xEDD9AC", Offset = "0xEDD9AC", VA = "0xEDD9AC")]
		[DebuggerHidden]
		public <waitForNextAttack>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0xEDF668", Offset = "0xEDF668", VA = "0xEDF668", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xEDF66C", Offset = "0xEDF66C", VA = "0xEDF66C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0xEDF724", Offset = "0xEDF724", VA = "0xEDF724", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[Header("Caster Enemy Assign")]
	public GameObject enemyProjectile;

	[Token(Token = "0x4000A71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject enemyOrbWall;

	[Token(Token = "0x4000A72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000A73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject shadowWall;

	[Token(Token = "0x4000A74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject shields;

	[Token(Token = "0x4000A75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject verticalBeam;

	[Token(Token = "0x4000A76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GameObject punchWall;

	[Token(Token = "0x4000A77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public float projSpeed;

	[Token(Token = "0x4000A78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	public int numOfFastProjectiles;

	[Token(Token = "0x4000A79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public int attackRangeLimiter;

	[Token(Token = "0x4000A7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private bool projectileAimOn;

	[Token(Token = "0x4000A7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private float RTMattackTimer;

	[Token(Token = "0x4000A7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private float RTMattackTimeMax;

	[Token(Token = "0x4000A7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public ShieldType shieldType;

	[Token(Token = "0x6000AC6")]
	[Address(RVA = "0xEDCFB0", Offset = "0xEDCFB0", VA = "0xEDCFB0", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000AC7")]
	[Address(RVA = "0xEDD364", Offset = "0xEDD364", VA = "0xEDD364", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000AC8")]
	[Address(RVA = "0xEDD474", Offset = "0xEDD474", VA = "0xEDD474")]
	public void toggleShieldsOn()
	{
	}

	[Token(Token = "0x6000AC9")]
	[Address(RVA = "0xEDD4F8", Offset = "0xEDD4F8", VA = "0xEDD4F8")]
	public void toggleShieldsOff()
	{
	}

	[Token(Token = "0x6000ACA")]
	[Address(RVA = "0xEDD57C", Offset = "0xEDD57C", VA = "0xEDD57C", Slot = "5")]
	public override void breakDefenses()
	{
	}

	[Token(Token = "0x6000ACB")]
	[Address(RVA = "0xEDD5F8", Offset = "0xEDD5F8", VA = "0xEDD5F8", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000ACC")]
	[Address(RVA = "0xEDD254", Offset = "0xEDD254", VA = "0xEDD254")]
	[IteratorStateMachine(typeof(<castPunchWall>d__21))]
	protected IEnumerator castPunchWall()
	{
		return null;
	}

	[Token(Token = "0x6000ACD")]
	[Address(RVA = "0xEDD7EC", Offset = "0xEDD7EC", VA = "0xEDD7EC")]
	[IteratorStateMachine(typeof(<shootProjectile>d__22))]
	protected IEnumerator shootProjectile()
	{
		return null;
	}

	[Token(Token = "0x6000ACE")]
	[Address(RVA = "0xEDD0A0", Offset = "0xEDD0A0", VA = "0xEDD0A0")]
	[IteratorStateMachine(typeof(<castRapidFire>d__23))]
	protected IEnumerator castRapidFire()
	{
		return null;
	}

	[Token(Token = "0x6000ACF")]
	[Address(RVA = "0xEDD2BC", Offset = "0xEDD2BC", VA = "0xEDD2BC")]
	[IteratorStateMachine(typeof(<castBulletHell>d__24))]
	protected IEnumerator castBulletHell()
	{
		return null;
	}

	[Token(Token = "0x6000AD0")]
	[Address(RVA = "0xEDD170", Offset = "0xEDD170", VA = "0xEDD170")]
	[IteratorStateMachine(typeof(<castShadowWall>d__25))]
	private IEnumerator castShadowWall(bool randomDir = false)
	{
		return null;
	}

	[Token(Token = "0x6000AD1")]
	[Address(RVA = "0xEDD324", Offset = "0xEDD324", VA = "0xEDD324")]
	private void doubleShadowWall()
	{
	}

	[Token(Token = "0x6000AD2")]
	[Address(RVA = "0xEDD108", Offset = "0xEDD108", VA = "0xEDD108")]
	[IteratorStateMachine(typeof(<castOrbWall>d__27))]
	private IEnumerator castOrbWall()
	{
		return null;
	}

	[Token(Token = "0x6000AD3")]
	[Address(RVA = "0xEDD1EC", Offset = "0xEDD1EC", VA = "0xEDD1EC")]
	[IteratorStateMachine(typeof(<castVBeam>d__28))]
	private IEnumerator castVBeam()
	{
		return null;
	}

	[Token(Token = "0x6000AD4")]
	[Address(RVA = "0xEDD944", Offset = "0xEDD944", VA = "0xEDD944")]
	[IteratorStateMachine(typeof(<waitForNextAttack>d__29))]
	private IEnumerator waitForNextAttack()
	{
		return null;
	}

	[Token(Token = "0x6000AD5")]
	[Address(RVA = "0xEDD9D4", Offset = "0xEDD9D4", VA = "0xEDD9D4", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000AD6")]
	[Address(RVA = "0xEDDC04", Offset = "0xEDDC04", VA = "0xEDDC04", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000AD7")]
	[Address(RVA = "0xEDDC6C", Offset = "0xEDDC6C", VA = "0xEDDC6C")]
	public EnemyCaster()
	{
	}
}
[Token(Token = "0x200021F")]
public class EnemyCasterTutorial : EnemyCaster
{
	[Token(Token = "0x2000220")]
	[CompilerGenerated]
	private sealed class <tutAttackTimed>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCasterTutorial <>4__this;

		[Token(Token = "0x17000169")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B14")]
			[Address(RVA = "0xEE00F4", Offset = "0xEE00F4", VA = "0xEE00F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B16")]
			[Address(RVA = "0xEE013C", Offset = "0xEE013C", VA = "0xEE013C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0xEDFCB0", Offset = "0xEDFCB0", VA = "0xEDFCB0")]
		[DebuggerHidden]
		public <tutAttackTimed>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0xEE003C", Offset = "0xEE003C", VA = "0xEE003C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0xEE0040", Offset = "0xEE0040", VA = "0xEE0040", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0xEE00FC", Offset = "0xEE00FC", VA = "0xEE00FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000221")]
	[CompilerGenerated]
	private sealed class <timedPowerGrant>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCasterTutorial <>4__this;

		[Token(Token = "0x1700016B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B1A")]
			[Address(RVA = "0xEE0490", Offset = "0xEE0490", VA = "0xEE0490", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B1C")]
			[Address(RVA = "0xEE04D8", Offset = "0xEE04D8", VA = "0xEE04D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0xEDFEA8", Offset = "0xEDFEA8", VA = "0xEDFEA8")]
		[DebuggerHidden]
		public <timedPowerGrant>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0xEE0144", Offset = "0xEE0144", VA = "0xEE0144", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xEE0148", Offset = "0xEE0148", VA = "0xEE0148", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xEE0498", Offset = "0xEE0498", VA = "0xEE0498", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private bool weaponLockTurn;

	[Token(Token = "0x4000AA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private int turnNum;

	[Token(Token = "0x4000AA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public GameObject arcaxerModuleEffect;

	[Token(Token = "0x4000AA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public BattleTutorialPrompts tutorialPromptprefab;

	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public AudioClip awakenTrack;

	[Token(Token = "0x6000B08")]
	[Address(RVA = "0xEDF76C", Offset = "0xEDF76C", VA = "0xEDF76C", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000B09")]
	[Address(RVA = "0xEDF97C", Offset = "0xEDF97C", VA = "0xEDF97C", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000B0A")]
	[Address(RVA = "0xEDFBC4", Offset = "0xEDFBC4", VA = "0xEDFBC4")]
	public void nextAttack()
	{
	}

	[Token(Token = "0x6000B0B")]
	[Address(RVA = "0xEDFC48", Offset = "0xEDFC48", VA = "0xEDFC48")]
	[IteratorStateMachine(typeof(<tutAttackTimed>d__8))]
	private IEnumerator tutAttackTimed()
	{
		return null;
	}

	[Token(Token = "0x6000B0C")]
	[Address(RVA = "0xEDFCD8", Offset = "0xEDFCD8", VA = "0xEDFCD8", Slot = "9")]
	public override void damageEnemy(int amount)
	{
	}

	[Token(Token = "0x6000B0D")]
	[Address(RVA = "0xEDFCF0", Offset = "0xEDFCF0", VA = "0xEDFCF0", Slot = "11")]
	public override void damageEnemy(int amount, bool crit, int combo, bool isPhysical)
	{
	}

	[Token(Token = "0x6000B0E")]
	[Address(RVA = "0xEDFE40", Offset = "0xEDFE40", VA = "0xEDFE40")]
	[IteratorStateMachine(typeof(<timedPowerGrant>d__11))]
	private IEnumerator timedPowerGrant()
	{
		return null;
	}

	[Token(Token = "0x6000B0F")]
	[Address(RVA = "0xEDFED0", Offset = "0xEDFED0", VA = "0xEDFED0", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000B10")]
	[Address(RVA = "0xEE0008", Offset = "0xEE0008", VA = "0xEE0008")]
	public EnemyCasterTutorial()
	{
	}
}
[Token(Token = "0x2000222")]
public class EnemyClawProjectile : MonoBehaviour
{
	[Token(Token = "0x4000AB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int power;

	[Token(Token = "0x4000AB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool destroyOnHitOther;

	[Token(Token = "0x6000B1D")]
	[Address(RVA = "0xEE04E0", Offset = "0xEE04E0", VA = "0xEE04E0")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x6000B1E")]
	[Address(RVA = "0xEE07D4", Offset = "0xEE07D4", VA = "0xEE07D4")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000B1F")]
	[Address(RVA = "0xEE0984", Offset = "0xEE0984", VA = "0xEE0984")]
	public EnemyClawProjectile()
	{
	}
}
[Token(Token = "0x2000223")]
public class EnemyDeathDealer : EnemyParent
{
	[Token(Token = "0x2000224")]
	public enum DealerType
	{
		[Token(Token = "0x4000AB8")]
		regular,
		[Token(Token = "0x4000AB9")]
		super
	}

	[Token(Token = "0x2000225")]
	[CompilerGenerated]
	private sealed class <spikyTimer>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDeathDealer <>4__this;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <ball>5__2;

		[Token(Token = "0x1700016D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B2D")]
			[Address(RVA = "0xEE1160", Offset = "0xEE1160", VA = "0xEE1160", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B2F")]
			[Address(RVA = "0xEE11A8", Offset = "0xEE11A8", VA = "0xEE11A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0xEE0BDC", Offset = "0xEE0BDC", VA = "0xEE0BDC")]
		[DebuggerHidden]
		public <spikyTimer>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xEE0DE0", Offset = "0xEE0DE0", VA = "0xEE0DE0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xEE0DE4", Offset = "0xEE0DE4", VA = "0xEE0DE4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0xEE1168", Offset = "0xEE1168", VA = "0xEE1168", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000226")]
	[CompilerGenerated]
	private sealed class <spikyBarrage>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyDeathDealer <>4__this;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <attackTimeMax>5__2;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <i>5__3;

		[Token(Token = "0x1700016F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B33")]
			[Address(RVA = "0xEE15C4", Offset = "0xEE15C4", VA = "0xEE15C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000170")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B35")]
			[Address(RVA = "0xEE160C", Offset = "0xEE160C", VA = "0xEE160C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0xEE0C04", Offset = "0xEE0C04", VA = "0xEE0C04")]
		[DebuggerHidden]
		public <spikyBarrage>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0xEE11B0", Offset = "0xEE11B0", VA = "0xEE11B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0xEE11B4", Offset = "0xEE11B4", VA = "0xEE11B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0xEE15CC", Offset = "0xEE15CC", VA = "0xEE15CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private float flipTimer;

	[Token(Token = "0x4000AB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public int numOfBallBarrage;

	[Token(Token = "0x4000AB4")]
	private const float flipCD = 1.75f;

	[Token(Token = "0x4000AB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject spikyBall;

	[Token(Token = "0x4000AB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public DealerType dealerType;

	[Token(Token = "0x6000B20")]
	[Address(RVA = "0xEE0994", Offset = "0xEE0994", VA = "0xEE0994", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000B21")]
	[Address(RVA = "0xEE099C", Offset = "0xEE099C", VA = "0xEE099C", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000B22")]
	[Address(RVA = "0xEE09FC", Offset = "0xEE09FC", VA = "0xEE09FC", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000B23")]
	[Address(RVA = "0xEE0AB8", Offset = "0xEE0AB8", VA = "0xEE0AB8", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000B24")]
	[Address(RVA = "0xEE0B0C", Offset = "0xEE0B0C", VA = "0xEE0B0C")]
	[IteratorStateMachine(typeof(<spikyTimer>d__10))]
	private IEnumerator spikyTimer()
	{
		return null;
	}

	[Token(Token = "0x6000B25")]
	[Address(RVA = "0xEE0B74", Offset = "0xEE0B74", VA = "0xEE0B74")]
	[IteratorStateMachine(typeof(<spikyBarrage>d__11))]
	private IEnumerator spikyBarrage()
	{
		return null;
	}

	[Token(Token = "0x6000B26")]
	[Address(RVA = "0xEE0C2C", Offset = "0xEE0C2C", VA = "0xEE0C2C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000B27")]
	[Address(RVA = "0xEE0CB4", Offset = "0xEE0CB4", VA = "0xEE0CB4")]
	private void dodgeAttack()
	{
	}

	[Token(Token = "0x6000B28")]
	[Address(RVA = "0xEE0D4C", Offset = "0xEE0D4C", VA = "0xEE0D4C", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000B29")]
	[Address(RVA = "0xEE0DD0", Offset = "0xEE0DD0", VA = "0xEE0DD0")]
	public EnemyDeathDealer()
	{
	}
}
[Token(Token = "0x2000227")]
public class EnemyDiscoLaser : MonoBehaviour
{
	[Token(Token = "0x4000AC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float damage;

	[Token(Token = "0x4000AC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float sphereCastWidth;

	[Token(Token = "0x6000B36")]
	[Address(RVA = "0xEE1614", Offset = "0xEE1614", VA = "0xEE1614")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B37")]
	[Address(RVA = "0xEE1788", Offset = "0xEE1788", VA = "0xEE1788")]
	public EnemyDiscoLaser()
	{
	}
}
[Token(Token = "0x2000228")]
public class EnemyEyeLaser : MonoBehaviour
{
	[Token(Token = "0x2000229")]
	public enum LaserMode
	{
		[Token(Token = "0x4000AD0")]
		straight,
		[Token(Token = "0x4000AD1")]
		zigZag
	}

	[Token(Token = "0x200022A")]
	[CompilerGenerated]
	private sealed class <laserZigZag>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyEyeLaser <>4__this;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timer>5__2;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timerMax>5__3;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <sinTime>5__4;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <height>5__5;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <timeSinceStart>5__6;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private UnityEngine.Vector3 <pivot>5__7;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityEngine.Vector3 <moveVector>5__8;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private UnityEngine.Vector3 <moveVector2>5__9;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float <speedMod>5__10;

		[Token(Token = "0x17000171")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B40")]
			[Address(RVA = "0xEE21BC", Offset = "0xEE21BC", VA = "0xEE21BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000172")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B42")]
			[Address(RVA = "0xEE2204", Offset = "0xEE2204", VA = "0xEE2204", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0xEE1AF0", Offset = "0xEE1AF0", VA = "0xEE1AF0")]
		[DebuggerHidden]
		public <laserZigZag>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0xEE1BDC", Offset = "0xEE1BDC", VA = "0xEE1BDC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xEE1BE0", Offset = "0xEE1BE0", VA = "0xEE1BE0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xEE21C4", Offset = "0xEE21C4", VA = "0xEE21C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000AC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject spawnObject;

	[Token(Token = "0x4000AC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject endObject;

	[Token(Token = "0x4000AC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public EnemyParent enemyParent;

	[Token(Token = "0x4000AC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public LineRenderer lineRenderer;

	[Token(Token = "0x4000AC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int power;

	[Token(Token = "0x4000ACA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CapsuleCollider colliderObject;

	[Token(Token = "0x4000ACB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool endTurnOnComplete;

	[Token(Token = "0x4000ACC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool oppositeDirection;

	[Token(Token = "0x4000ACD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float destroyTime;

	[Token(Token = "0x4000ACE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public LaserMode mode;

	[Token(Token = "0x6000B38")]
	[Address(RVA = "0xEE179C", Offset = "0xEE179C", VA = "0xEE179C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B39")]
	[Address(RVA = "0xEE19F4", Offset = "0xEE19F4", VA = "0xEE19F4")]
	public void startLaser()
	{
	}

	[Token(Token = "0x6000B3A")]
	[Address(RVA = "0xEE1A88", Offset = "0xEE1A88", VA = "0xEE1A88")]
	[IteratorStateMachine(typeof(<laserZigZag>d__13))]
	private IEnumerator laserZigZag()
	{
		return null;
	}

	[Token(Token = "0x6000B3B")]
	[Address(RVA = "0xEE1B18", Offset = "0xEE1B18", VA = "0xEE1B18")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000B3C")]
	[Address(RVA = "0xEE1BB8", Offset = "0xEE1BB8", VA = "0xEE1BB8")]
	public EnemyEyeLaser()
	{
	}
}
[Token(Token = "0x200022B")]
public class EnemyFlyingSphere : EnemyParent
{
	[Token(Token = "0x200022C")]
	public enum Flymode
	{
		[Token(Token = "0x4000AFA")]
		circle,
		[Token(Token = "0x4000AFB")]
		pickPoint,
		[Token(Token = "0x4000AFC")]
		teleport
	}

	[Token(Token = "0x200022D")]
	public enum FlyerType
	{
		[Token(Token = "0x4000AFE")]
		buggle,
		[Token(Token = "0x4000AFF")]
		thopter
	}

	[Token(Token = "0x200022E")]
	[CompilerGenerated]
	private sealed class <attackTimer>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyFlyingSphere <>4__this;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <attackTimer>5__2;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <attackTimerMax>5__3;

		[Token(Token = "0x17000173")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0xEE4948", Offset = "0xEE4948", VA = "0xEE4948", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000174")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B56")]
			[Address(RVA = "0xEE4990", Offset = "0xEE4990", VA = "0xEE4990", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0xEE2F00", Offset = "0xEE2F00", VA = "0xEE2F00")]
		[DebuggerHidden]
		public <attackTimer>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0xEE470C", Offset = "0xEE470C", VA = "0xEE470C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0xEE4710", Offset = "0xEE4710", VA = "0xEE4710", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0xEE4950", Offset = "0xEE4950", VA = "0xEE4950", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200022F")]
	[CompilerGenerated]
	private sealed class <castShotgunBlast>d__37 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyFlyingSphere <>4__this;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <aimAccuracy>5__2;

		[Token(Token = "0x17000175")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B5A")]
			[Address(RVA = "0xEE4F04", Offset = "0xEE4F04", VA = "0xEE4F04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000176")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B5C")]
			[Address(RVA = "0xEE4F4C", Offset = "0xEE4F4C", VA = "0xEE4F4C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0xEE41B0", Offset = "0xEE41B0", VA = "0xEE41B0")]
		[DebuggerHidden]
		public <castShotgunBlast>d__37(int <>1__state)
		{
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0xEE4998", Offset = "0xEE4998", VA = "0xEE4998", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0xEE499C", Offset = "0xEE499C", VA = "0xEE499C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0xEE4F0C", Offset = "0xEE4F0C", VA = "0xEE4F0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000230")]
	[CompilerGenerated]
	private sealed class <laserWall>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyFlyingSphere <>4__this;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 <originalPos>5__2;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion <originalRot>5__3;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int <numOfShots>5__4;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int <i>5__5;

		[Token(Token = "0x17000177")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B60")]
			[Address(RVA = "0xEE5568", Offset = "0xEE5568", VA = "0xEE5568", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000178")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B62")]
			[Address(RVA = "0xEE55B0", Offset = "0xEE55B0", VA = "0xEE55B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0xEE41D8", Offset = "0xEE41D8", VA = "0xEE41D8")]
		[DebuggerHidden]
		public <laserWall>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0xEE4F54", Offset = "0xEE4F54", VA = "0xEE4F54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0xEE4F58", Offset = "0xEE4F58", VA = "0xEE4F58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xEE5570", Offset = "0xEE5570", VA = "0xEE5570", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000231")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__39 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyFlyingSphere <>4__this;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform launchTrans;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool randomRot;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x17000179")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B66")]
			[Address(RVA = "0xEE58DC", Offset = "0xEE58DC", VA = "0xEE58DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B68")]
			[Address(RVA = "0xEE5924", Offset = "0xEE5924", VA = "0xEE5924", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xEE4280", Offset = "0xEE4280", VA = "0xEE4280")]
		[DebuggerHidden]
		public <shootProjectile>d__39(int <>1__state)
		{
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xEE55B8", Offset = "0xEE55B8", VA = "0xEE55B8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xEE55BC", Offset = "0xEE55BC", VA = "0xEE55BC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xEE58E4", Offset = "0xEE58E4", VA = "0xEE58E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private float centerx;

	[Token(Token = "0x4000ADF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private float centery;

	[Token(Token = "0x4000AE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private float centerz;

	[Token(Token = "0x4000AE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float rad;

	[Token(Token = "0x4000AE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	[Header("Flying Enemy Properties")]
	public float attackAnimationSpeed;

	[Token(Token = "0x4000AE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public float dodgeSpeed;

	[Token(Token = "0x4000AE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	public Flymode flymode;

	[Token(Token = "0x4000AE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private bool isCentering;

	[Token(Token = "0x4000AE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x151")]
	private bool projectileAimOn;

	[Token(Token = "0x4000AE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public Transform[] flyPoints;

	[Token(Token = "0x4000AE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Transform currentFlyPoint;

	[Token(Token = "0x4000AE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GameObject enemyProjectile;

	[Token(Token = "0x4000AEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public float projSpeed;

	[Token(Token = "0x4000AEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000AEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public GameObject teleportParticle;

	[Token(Token = "0x4000AED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public GlitchEffects startGlitch;

	[Token(Token = "0x4000AEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private float dodgeTimer;

	[Token(Token = "0x4000AEF")]
	private const float dodgeCD = 1.75f;

	[Token(Token = "0x4000AF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private bool hitPlayer;

	[Token(Token = "0x4000AF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x195")]
	public bool multiAttackOn;

	[Token(Token = "0x4000AF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public FlyerType flyerType;

	[Token(Token = "0x4000AF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public GameObject laserAttack;

	[Token(Token = "0x4000AF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public ChildEnemyTrigger childTrigger;

	[Token(Token = "0x4000AF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public Transform bodyRoot;

	[Token(Token = "0x4000AF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public float timeBetweenMoves;

	[Token(Token = "0x4000AF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
	private float timer;

	[Token(Token = "0x4000AF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private float angle;

	[Token(Token = "0x6000B43")]
	[Address(RVA = "0xEE220C", Offset = "0xEE220C", VA = "0xEE220C", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000B44")]
	[Address(RVA = "0xEE272C", Offset = "0xEE272C", VA = "0xEE272C", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000B45")]
	[Address(RVA = "0xEE2D14", Offset = "0xEE2D14", VA = "0xEE2D14")]
	public void spawnLaserAttack()
	{
	}

	[Token(Token = "0x6000B46")]
	[Address(RVA = "0xEE2E98", Offset = "0xEE2E98", VA = "0xEE2E98")]
	[IteratorStateMachine(typeof(<attackTimer>d__32))]
	private IEnumerator attackTimer()
	{
		return null;
	}

	[Token(Token = "0x6000B47")]
	[Address(RVA = "0xEE2F28", Offset = "0xEE2F28", VA = "0xEE2F28", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000B48")]
	[Address(RVA = "0xEE35B8", Offset = "0xEE35B8", VA = "0xEE35B8")]
	public void EnemyHit()
	{
	}

	[Token(Token = "0x6000B49")]
	[Address(RVA = "0xEE37F4", Offset = "0xEE37F4", VA = "0xEE37F4", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000B4A")]
	[Address(RVA = "0xEE3864", Offset = "0xEE3864", VA = "0xEE3864", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000B4B")]
	[Address(RVA = "0xEE34E8", Offset = "0xEE34E8", VA = "0xEE34E8")]
	[IteratorStateMachine(typeof(<castShotgunBlast>d__37))]
	protected IEnumerator castShotgunBlast()
	{
		return null;
	}

	[Token(Token = "0x6000B4C")]
	[Address(RVA = "0xEE3550", Offset = "0xEE3550", VA = "0xEE3550")]
	[IteratorStateMachine(typeof(<laserWall>d__38))]
	private IEnumerator laserWall()
	{
		return null;
	}

	[Token(Token = "0x6000B4D")]
	[Address(RVA = "0xEE4200", Offset = "0xEE4200", VA = "0xEE4200")]
	[IteratorStateMachine(typeof(<shootProjectile>d__39))]
	protected IEnumerator shootProjectile(Transform launchTrans, bool randomRot = false)
	{
		return null;
	}

	[Token(Token = "0x6000B4E")]
	[Address(RVA = "0xEE42A8", Offset = "0xEE42A8", VA = "0xEE42A8")]
	private void dodgeAttack()
	{
	}

	[Token(Token = "0x6000B4F")]
	[Address(RVA = "0xEE44D8", Offset = "0xEE44D8", VA = "0xEE44D8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000B50")]
	[Address(RVA = "0xEE4560", Offset = "0xEE4560", VA = "0xEE4560")]
	public EnemyFlyingSphere()
	{
	}
}
[Token(Token = "0x2000232")]
public class EnemyHomuncBoss : EnemyParent
{
	[Token(Token = "0x2000233")]
	[CompilerGenerated]
	private sealed class <castDesperationAttack>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyHomuncBoss <>4__this;

		[Token(Token = "0x1700017B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B7F")]
			[Address(RVA = "0xEE6BD8", Offset = "0xEE6BD8", VA = "0xEE6BD8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B81")]
			[Address(RVA = "0xEE6C20", Offset = "0xEE6C20", VA = "0xEE6C20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0xEE5C9C", Offset = "0xEE5C9C", VA = "0xEE5C9C")]
		[DebuggerHidden]
		public <castDesperationAttack>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0xEE676C", Offset = "0xEE676C", VA = "0xEE676C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0xEE6770", Offset = "0xEE6770", VA = "0xEE6770", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0xEE6BE0", Offset = "0xEE6BE0", VA = "0xEE6BE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000234")]
	[CompilerGenerated]
	private sealed class <castDoubleLaser>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyHomuncBoss <>4__this;

		[Token(Token = "0x1700017D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B85")]
			[Address(RVA = "0xEE6EBC", Offset = "0xEE6EBC", VA = "0xEE6EBC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B87")]
			[Address(RVA = "0xEE6F04", Offset = "0xEE6F04", VA = "0xEE6F04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xEE5CC4", Offset = "0xEE5CC4", VA = "0xEE5CC4")]
		[DebuggerHidden]
		public <castDoubleLaser>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xEE6C28", Offset = "0xEE6C28", VA = "0xEE6C28", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xEE6C2C", Offset = "0xEE6C2C", VA = "0xEE6C2C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xEE6EC4", Offset = "0xEE6EC4", VA = "0xEE6EC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000235")]
	[CompilerGenerated]
	private sealed class <firstAttack>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyHomuncBoss <>4__this;

		[Token(Token = "0x1700017F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B8B")]
			[Address(RVA = "0xEE6FC0", Offset = "0xEE6FC0", VA = "0xEE6FC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000180")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B8D")]
			[Address(RVA = "0xEE7008", Offset = "0xEE7008", VA = "0xEE7008", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0xEE5CEC", Offset = "0xEE5CEC", VA = "0xEE5CEC")]
		[DebuggerHidden]
		public <firstAttack>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xEE6F0C", Offset = "0xEE6F0C", VA = "0xEE6F0C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xEE6F10", Offset = "0xEE6F10", VA = "0xEE6F10", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xEE6FC8", Offset = "0xEE6FC8", VA = "0xEE6FC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000236")]
	[CompilerGenerated]
	private sealed class <laserCircleAttack>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyHomuncBoss <>4__this;

		[Token(Token = "0x17000181")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B91")]
			[Address(RVA = "0xEE7218", Offset = "0xEE7218", VA = "0xEE7218", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000182")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B93")]
			[Address(RVA = "0xEE7260", Offset = "0xEE7260", VA = "0xEE7260", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xEE5D14", Offset = "0xEE5D14", VA = "0xEE5D14")]
		[DebuggerHidden]
		public <laserCircleAttack>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xEE7010", Offset = "0xEE7010", VA = "0xEE7010", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0xEE7014", Offset = "0xEE7014", VA = "0xEE7014", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xEE7220", Offset = "0xEE7220", VA = "0xEE7220", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000237")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyHomuncBoss <>4__this;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x17000183")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B97")]
			[Address(RVA = "0xEE7580", Offset = "0xEE7580", VA = "0xEE7580", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000184")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B99")]
			[Address(RVA = "0xEE75C8", Offset = "0xEE75C8", VA = "0xEE75C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0xEE6224", Offset = "0xEE6224", VA = "0xEE6224")]
		[DebuggerHidden]
		public <shootProjectile>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xEE7268", Offset = "0xEE7268", VA = "0xEE7268", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xEE726C", Offset = "0xEE726C", VA = "0xEE726C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xEE7588", Offset = "0xEE7588", VA = "0xEE7588", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000238")]
	[CompilerGenerated]
	private sealed class <castRapidFire>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyHomuncBoss <>4__this;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x17000185")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B9D")]
			[Address(RVA = "0xEE7820", Offset = "0xEE7820", VA = "0xEE7820", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000186")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B9F")]
			[Address(RVA = "0xEE7868", Offset = "0xEE7868", VA = "0xEE7868", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xEE624C", Offset = "0xEE624C", VA = "0xEE624C")]
		[DebuggerHidden]
		public <castRapidFire>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0xEE75D0", Offset = "0xEE75D0", VA = "0xEE75D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0xEE75D4", Offset = "0xEE75D4", VA = "0xEE75D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0xEE7828", Offset = "0xEE7828", VA = "0xEE7828", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000239")]
	[CompilerGenerated]
	private sealed class <castShadowWall>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyHomuncBoss <>4__this;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <shadowWallInst>5__2;

		[Token(Token = "0x17000187")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BA3")]
			[Address(RVA = "0xEE7C74", Offset = "0xEE7C74", VA = "0xEE7C74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000188")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BA5")]
			[Address(RVA = "0xEE7CBC", Offset = "0xEE7CBC", VA = "0xEE7CBC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0xEE62DC", Offset = "0xEE62DC", VA = "0xEE62DC")]
		[DebuggerHidden]
		public <castShadowWall>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0xEE7870", Offset = "0xEE7870", VA = "0xEE7870", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0xEE7874", Offset = "0xEE7874", VA = "0xEE7874", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0xEE7C7C", Offset = "0xEE7C7C", VA = "0xEE7C7C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200023A")]
	[CompilerGenerated]
	private sealed class <castOrbWall>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyHomuncBoss <>4__this;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x17000189")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BA9")]
			[Address(RVA = "0xEE8014", Offset = "0xEE8014", VA = "0xEE8014", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BAB")]
			[Address(RVA = "0xEE805C", Offset = "0xEE805C", VA = "0xEE805C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0xEE636C", Offset = "0xEE636C", VA = "0xEE636C")]
		[DebuggerHidden]
		public <castOrbWall>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0xEE7CC4", Offset = "0xEE7CC4", VA = "0xEE7CC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0xEE7CC8", Offset = "0xEE7CC8", VA = "0xEE7CC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0xEE801C", Offset = "0xEE801C", VA = "0xEE801C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200023B")]
	[CompilerGenerated]
	private sealed class <waitForNextAttack>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyHomuncBoss <>4__this;

		[Token(Token = "0x1700018B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BAF")]
			[Address(RVA = "0xEE8118", Offset = "0xEE8118", VA = "0xEE8118", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BB1")]
			[Address(RVA = "0xEE8160", Offset = "0xEE8160", VA = "0xEE8160", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xEE63FC", Offset = "0xEE63FC", VA = "0xEE63FC")]
		[DebuggerHidden]
		public <waitForNextAttack>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xEE8064", Offset = "0xEE8064", VA = "0xEE8064", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xEE8068", Offset = "0xEE8068", VA = "0xEE8068", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0xEE8120", Offset = "0xEE8120", VA = "0xEE8120", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200023C")]
	[CompilerGenerated]
	private sealed class <deathTimer>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyHomuncBoss <>4__this;

		[Token(Token = "0x1700018D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BB5")]
			[Address(RVA = "0xEE82AC", Offset = "0xEE82AC", VA = "0xEE82AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BB7")]
			[Address(RVA = "0xEE82F4", Offset = "0xEE82F4", VA = "0xEE82F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xEE6664", Offset = "0xEE6664", VA = "0xEE6664")]
		[DebuggerHidden]
		public <deathTimer>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0xEE8168", Offset = "0xEE8168", VA = "0xEE8168", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0xEE816C", Offset = "0xEE816C", VA = "0xEE816C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0xEE82B4", Offset = "0xEE82B4", VA = "0xEE82B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[Header("Caster Enemy Assign")]
	public GameObject enemyProjectile;

	[Token(Token = "0x4000B18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject enemyOrbWall;

	[Token(Token = "0x4000B19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000B1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject shadowWall;

	[Token(Token = "0x4000B1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject shields;

	[Token(Token = "0x4000B1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject eyeLaser;

	[Token(Token = "0x4000B1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GameObject laserCirclePrefab;

	[Token(Token = "0x4000B1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public BattleDialogueBox dialogueBox;

	[Token(Token = "0x4000B1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public Transform bossDialoguePos;

	[Token(Token = "0x4000B20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public Transform laserTransLeft;

	[Token(Token = "0x4000B21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public Transform laserTransRight;

	[Token(Token = "0x4000B22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public float projSpeed;

	[Token(Token = "0x4000B23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	public int numOfFastProjectiles;

	[Token(Token = "0x4000B24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private bool projectileAimOn;

	[Token(Token = "0x4000B25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x199")]
	private bool firstTurn;

	[Token(Token = "0x4000B26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19A")]
	private bool castingDesperationAttack;

	[Token(Token = "0x4000B27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[Header("Audio")]
	public AudioClip finalAttackTrack;

	[Token(Token = "0x4000B28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public AudioClip[] dialogueClips;

	[Token(Token = "0x4000B29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public string[] battledialogue;

	[Token(Token = "0x6000B69")]
	[Address(RVA = "0xEE592C", Offset = "0xEE592C", VA = "0xEE592C", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000B6A")]
	[Address(RVA = "0xEE5AFC", Offset = "0xEE5AFC", VA = "0xEE5AFC")]
	[IteratorStateMachine(typeof(<castDesperationAttack>d__20))]
	private IEnumerator castDesperationAttack()
	{
		return null;
	}

	[Token(Token = "0x6000B6B")]
	[Address(RVA = "0xEE5BCC", Offset = "0xEE5BCC", VA = "0xEE5BCC")]
	[IteratorStateMachine(typeof(<castDoubleLaser>d__21))]
	private IEnumerator castDoubleLaser()
	{
		return null;
	}

	[Token(Token = "0x6000B6C")]
	[Address(RVA = "0xEE5A94", Offset = "0xEE5A94", VA = "0xEE5A94")]
	[IteratorStateMachine(typeof(<firstAttack>d__22))]
	private IEnumerator firstAttack()
	{
		return null;
	}

	[Token(Token = "0x6000B6D")]
	[Address(RVA = "0xEE5C34", Offset = "0xEE5C34", VA = "0xEE5C34")]
	[IteratorStateMachine(typeof(<laserCircleAttack>d__23))]
	private IEnumerator laserCircleAttack()
	{
		return null;
	}

	[Token(Token = "0x6000B6E")]
	[Address(RVA = "0xEE5D3C", Offset = "0xEE5D3C", VA = "0xEE5D3C", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000B6F")]
	[Address(RVA = "0xEE5DD0", Offset = "0xEE5DD0", VA = "0xEE5DD0")]
	public void toggleShieldsOn()
	{
	}

	[Token(Token = "0x6000B70")]
	[Address(RVA = "0xEE5E54", Offset = "0xEE5E54", VA = "0xEE5E54")]
	public void toggleShieldsOff()
	{
	}

	[Token(Token = "0x6000B71")]
	[Address(RVA = "0xEE5ED8", Offset = "0xEE5ED8", VA = "0xEE5ED8", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000B72")]
	[Address(RVA = "0xEE61BC", Offset = "0xEE61BC", VA = "0xEE61BC")]
	[IteratorStateMachine(typeof(<shootProjectile>d__28))]
	private IEnumerator shootProjectile()
	{
		return null;
	}

	[Token(Token = "0x6000B73")]
	[Address(RVA = "0xEE5B64", Offset = "0xEE5B64", VA = "0xEE5B64")]
	[IteratorStateMachine(typeof(<castRapidFire>d__29))]
	private IEnumerator castRapidFire()
	{
		return null;
	}

	[Token(Token = "0x6000B74")]
	[Address(RVA = "0xEE6274", Offset = "0xEE6274", VA = "0xEE6274")]
	[IteratorStateMachine(typeof(<castShadowWall>d__30))]
	private IEnumerator castShadowWall()
	{
		return null;
	}

	[Token(Token = "0x6000B75")]
	[Address(RVA = "0xEE6304", Offset = "0xEE6304", VA = "0xEE6304")]
	[IteratorStateMachine(typeof(<castOrbWall>d__31))]
	private IEnumerator castOrbWall()
	{
		return null;
	}

	[Token(Token = "0x6000B76")]
	[Address(RVA = "0xEE6394", Offset = "0xEE6394", VA = "0xEE6394")]
	[IteratorStateMachine(typeof(<waitForNextAttack>d__32))]
	private IEnumerator waitForNextAttack()
	{
		return null;
	}

	[Token(Token = "0x6000B77")]
	[Address(RVA = "0xEE6424", Offset = "0xEE6424", VA = "0xEE6424", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000B78")]
	[Address(RVA = "0xEE6560", Offset = "0xEE6560", VA = "0xEE6560")]
	[IteratorStateMachine(typeof(<deathTimer>d__34))]
	private IEnumerator deathTimer()
	{
		return null;
	}

	[Token(Token = "0x6000B79")]
	[Address(RVA = "0xEE668C", Offset = "0xEE668C", VA = "0xEE668C", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000B7A")]
	[Address(RVA = "0xEE60B8", Offset = "0xEE60B8", VA = "0xEE60B8")]
	public void playDialogue(string dialogue)
	{
	}

	[Token(Token = "0x6000B7B")]
	[Address(RVA = "0xEE6754", Offset = "0xEE6754", VA = "0xEE6754")]
	public EnemyHomuncBoss()
	{
	}
}
[Token(Token = "0x200023D")]
public class EnemyHorror : EnemyParent
{
	[Token(Token = "0x200023E")]
	[CompilerGenerated]
	private sealed class <attackTimer>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyHorror <>4__this;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <time>5__2;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <maxTime>5__3;

		[Token(Token = "0x1700018F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BC1")]
			[Address(RVA = "0xEE86F4", Offset = "0xEE86F4", VA = "0xEE86F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000190")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BC3")]
			[Address(RVA = "0xEE873C", Offset = "0xEE873C", VA = "0xEE873C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0xEE83A0", Offset = "0xEE83A0", VA = "0xEE83A0")]
		[DebuggerHidden]
		public <attackTimer>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xEE84D4", Offset = "0xEE84D4", VA = "0xEE84D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xEE84D8", Offset = "0xEE84D8", VA = "0xEE84D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xEE86FC", Offset = "0xEE86FC", VA = "0xEE86FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200023F")]
	[CompilerGenerated]
	private sealed class <infDamage>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000191")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BC7")]
			[Address(RVA = "0xEE8810", Offset = "0xEE8810", VA = "0xEE8810", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000192")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BC9")]
			[Address(RVA = "0xEE8858", Offset = "0xEE8858", VA = "0xEE8858", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xEE8428", Offset = "0xEE8428", VA = "0xEE8428")]
		[DebuggerHidden]
		public <infDamage>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xEE8744", Offset = "0xEE8744", VA = "0xEE8744", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xEE8748", Offset = "0xEE8748", VA = "0xEE8748", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xEE8818", Offset = "0xEE8818", VA = "0xEE8818", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public AudioSource scareSource;

	[Token(Token = "0x6000BB8")]
	[Address(RVA = "0xEE82FC", Offset = "0xEE82FC", VA = "0xEE82FC", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000BB9")]
	[Address(RVA = "0xEE8338", Offset = "0xEE8338", VA = "0xEE8338")]
	[IteratorStateMachine(typeof(<attackTimer>d__2))]
	private IEnumerator attackTimer()
	{
		return null;
	}

	[Token(Token = "0x6000BBA")]
	[Address(RVA = "0xEE83C8", Offset = "0xEE83C8", VA = "0xEE83C8")]
	[IteratorStateMachine(typeof(<infDamage>d__3))]
	private IEnumerator infDamage()
	{
		return null;
	}

	[Token(Token = "0x6000BBB")]
	[Address(RVA = "0xEE8450", Offset = "0xEE8450", VA = "0xEE8450", Slot = "9")]
	public override void damageEnemy(int amount)
	{
	}

	[Token(Token = "0x6000BBC")]
	[Address(RVA = "0xEE8494", Offset = "0xEE8494", VA = "0xEE8494", Slot = "11")]
	public override void damageEnemy(int amount, bool crit, int combo, bool isPhysical)
	{
	}

	[Token(Token = "0x6000BBD")]
	[Address(RVA = "0xEE84D0", Offset = "0xEE84D0", VA = "0xEE84D0")]
	public EnemyHorror()
	{
	}
}
[Token(Token = "0x2000240")]
public class EnemyImp : EnemyParent
{
	[Token(Token = "0x2000241")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyImp <>4__this;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x17000193")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BDB")]
			[Address(RVA = "0xEE96E8", Offset = "0xEE96E8", VA = "0xEE96E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000194")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BDD")]
			[Address(RVA = "0xEE9730", Offset = "0xEE9730", VA = "0xEE9730", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0xEE90CC", Offset = "0xEE90CC", VA = "0xEE90CC")]
		[DebuggerHidden]
		public <shootProjectile>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xEE9420", Offset = "0xEE9420", VA = "0xEE9420", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0xEE9424", Offset = "0xEE9424", VA = "0xEE9424", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0xEE96F0", Offset = "0xEE96F0", VA = "0xEE96F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000242")]
	[CompilerGenerated]
	private sealed class <shootProjectileGravity>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyImp <>4__this;

		[Token(Token = "0x17000195")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BE1")]
			[Address(RVA = "0xEE99E0", Offset = "0xEE99E0", VA = "0xEE99E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000196")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BE3")]
			[Address(RVA = "0xEE9A28", Offset = "0xEE9A28", VA = "0xEE9A28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0xEE915C", Offset = "0xEE915C", VA = "0xEE915C")]
		[DebuggerHidden]
		public <shootProjectileGravity>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0xEE9738", Offset = "0xEE9738", VA = "0xEE9738", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0xEE973C", Offset = "0xEE973C", VA = "0xEE973C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0xEE99E8", Offset = "0xEE99E8", VA = "0xEE99E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000243")]
	[CompilerGenerated]
	private sealed class <castRapidFire>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyImp <>4__this;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool gravShot;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <maxTimer>5__2;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <timer>5__3;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <aimAccuracy>5__4;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <numOfProjectiles>5__5;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion <rotation>5__6;

		[Token(Token = "0x17000197")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BE7")]
			[Address(RVA = "0xEE9F9C", Offset = "0xEE9F9C", VA = "0xEE9F9C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000198")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BE9")]
			[Address(RVA = "0xEE9FE4", Offset = "0xEE9FE4", VA = "0xEE9FE4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0xEE9184", Offset = "0xEE9184", VA = "0xEE9184")]
		[DebuggerHidden]
		public <castRapidFire>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0xEE9A30", Offset = "0xEE9A30", VA = "0xEE9A30", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0xEE9A34", Offset = "0xEE9A34", VA = "0xEE9A34", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0xEE9FA4", Offset = "0xEE9FA4", VA = "0xEE9FA4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000244")]
	[CompilerGenerated]
	private sealed class <castShadowWall>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyImp <>4__this;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <shadowWallInst>5__2;

		[Token(Token = "0x17000199")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BED")]
			[Address(RVA = "0xEEA348", Offset = "0xEEA348", VA = "0xEEA348", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BEF")]
			[Address(RVA = "0xEEA390", Offset = "0xEEA390", VA = "0xEEA390", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0xEE91AC", Offset = "0xEE91AC", VA = "0xEE91AC")]
		[DebuggerHidden]
		public <castShadowWall>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0xEE9FEC", Offset = "0xEE9FEC", VA = "0xEE9FEC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0xEE9FF0", Offset = "0xEE9FF0", VA = "0xEE9FF0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0xEEA350", Offset = "0xEEA350", VA = "0xEEA350", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000245")]
	[CompilerGenerated]
	private sealed class <castOrbWall>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyImp <>4__this;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x1700019B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BF3")]
			[Address(RVA = "0xEEA680", Offset = "0xEEA680", VA = "0xEEA680", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BF5")]
			[Address(RVA = "0xEEA6C8", Offset = "0xEEA6C8", VA = "0xEEA6C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0xEE91D4", Offset = "0xEE91D4", VA = "0xEE91D4")]
		[DebuggerHidden]
		public <castOrbWall>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0xEEA398", Offset = "0xEEA398", VA = "0xEEA398", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0xEEA39C", Offset = "0xEEA39C", VA = "0xEEA39C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0xEEA688", Offset = "0xEEA688", VA = "0xEEA688", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000246")]
	[CompilerGenerated]
	private sealed class <waitForNextAttack>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyImp <>4__this;

		[Token(Token = "0x1700019D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000BF9")]
			[Address(RVA = "0xEEA784", Offset = "0xEEA784", VA = "0xEEA784", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000BFB")]
			[Address(RVA = "0xEEA7CC", Offset = "0xEEA7CC", VA = "0xEEA7CC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0xEE9264", Offset = "0xEE9264", VA = "0xEE9264")]
		[DebuggerHidden]
		public <waitForNextAttack>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0xEEA6D0", Offset = "0xEEA6D0", VA = "0xEEA6D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0xEEA6D4", Offset = "0xEEA6D4", VA = "0xEEA6D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0xEEA78C", Offset = "0xEEA78C", VA = "0xEEA78C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[Header("Imp Enemy Assign")]
	public GameObject enemyProjectile;

	[Token(Token = "0x4000B58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000B59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject enemyOrbWall;

	[Token(Token = "0x4000B5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject shadowWall;

	[Token(Token = "0x4000B5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public NavMeshAgent agent;

	[Token(Token = "0x4000B5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public float walkRadius;

	[Token(Token = "0x4000B5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	public float timeBetweenMoves;

	[Token(Token = "0x4000B5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	protected bool isCentering;

	[Token(Token = "0x4000B5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	protected UnityEngine.Vector3 originPoint;

	[Token(Token = "0x4000B60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	protected Quaternion originRot;

	[Token(Token = "0x4000B61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public float projSpeed;

	[Token(Token = "0x4000B62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	public int numOfProjectilesMax;

	[Token(Token = "0x4000B63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	protected bool projectileAimOn;

	[Token(Token = "0x4000B64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private float initialMoveSpeed;

	[Token(Token = "0x4000B65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	protected float timer;

	[Token(Token = "0x6000BCA")]
	[Address(RVA = "0xEE8860", Offset = "0xEE8860", VA = "0xEE8860", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000BCB")]
	[Address(RVA = "0xEE8A74", Offset = "0xEE8A74", VA = "0xEE8A74", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000BCC")]
	[Address(RVA = "0xEE8B8C", Offset = "0xEE8B8C", VA = "0xEE8B8C", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000BCD")]
	[Address(RVA = "0xEE8EFC", Offset = "0xEE8EFC", VA = "0xEE8EFC")]
	protected void pickPointOnNavMesh()
	{
	}

	[Token(Token = "0x6000BCE")]
	[Address(RVA = "0xEE8FDC", Offset = "0xEE8FDC", VA = "0xEE8FDC")]
	protected void returnToOrigin()
	{
	}

	[Token(Token = "0x6000BCF")]
	[Address(RVA = "0xEE9064", Offset = "0xEE9064", VA = "0xEE9064")]
	[IteratorStateMachine(typeof(<shootProjectile>d__20))]
	protected IEnumerator shootProjectile()
	{
		return null;
	}

	[Token(Token = "0x6000BD0")]
	[Address(RVA = "0xEE90F4", Offset = "0xEE90F4", VA = "0xEE90F4")]
	[IteratorStateMachine(typeof(<shootProjectileGravity>d__21))]
	protected IEnumerator shootProjectileGravity()
	{
		return null;
	}

	[Token(Token = "0x6000BD1")]
	[Address(RVA = "0xEE8928", Offset = "0xEE8928", VA = "0xEE8928")]
	[IteratorStateMachine(typeof(<castRapidFire>d__22))]
	protected IEnumerator castRapidFire(bool gravShot = false)
	{
		return null;
	}

	[Token(Token = "0x6000BD2")]
	[Address(RVA = "0xEE8A0C", Offset = "0xEE8A0C", VA = "0xEE8A0C")]
	[IteratorStateMachine(typeof(<castShadowWall>d__23))]
	protected IEnumerator castShadowWall()
	{
		return null;
	}

	[Token(Token = "0x6000BD3")]
	[Address(RVA = "0xEE89A4", Offset = "0xEE89A4", VA = "0xEE89A4")]
	[IteratorStateMachine(typeof(<castOrbWall>d__24))]
	protected IEnumerator castOrbWall()
	{
		return null;
	}

	[Token(Token = "0x6000BD4")]
	[Address(RVA = "0xEE91FC", Offset = "0xEE91FC", VA = "0xEE91FC")]
	[IteratorStateMachine(typeof(<waitForNextAttack>d__25))]
	protected IEnumerator waitForNextAttack()
	{
		return null;
	}

	[Token(Token = "0x6000BD5")]
	[Address(RVA = "0xEE928C", Offset = "0xEE928C", VA = "0xEE928C", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000BD6")]
	[Address(RVA = "0xEE9388", Offset = "0xEE9388", VA = "0xEE9388", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000BD7")]
	[Address(RVA = "0xEE93F8", Offset = "0xEE93F8", VA = "0xEE93F8")]
	public EnemyImp()
	{
	}
}
[Token(Token = "0x2000247")]
public class EnemyImpTutorial1 : EnemyImp
{
	[Token(Token = "0x4000B83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public GameObject tutorialPromptprefab;

	[Token(Token = "0x4000B84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public bool MRTutorialVer;

	[Token(Token = "0x4000B85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A9")]
	public bool endTurnOnDeath;

	[Token(Token = "0x6000BFC")]
	[Address(RVA = "0xEEA7D4", Offset = "0xEEA7D4", VA = "0xEEA7D4", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000BFD")]
	[Address(RVA = "0xEEA928", Offset = "0xEEA928", VA = "0xEEA928", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000BFE")]
	[Address(RVA = "0xEEA9BC", Offset = "0xEEA9BC", VA = "0xEEA9BC", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000BFF")]
	[Address(RVA = "0xEEABA0", Offset = "0xEEABA0", VA = "0xEEABA0")]
	public void nextAttack()
	{
	}

	[Token(Token = "0x6000C00")]
	[Address(RVA = "0xEEABB4", Offset = "0xEEABB4", VA = "0xEEABB4", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000C01")]
	[Address(RVA = "0xEEABB8", Offset = "0xEEABB8", VA = "0xEEABB8")]
	public EnemyImpTutorial1()
	{
	}
}
[Token(Token = "0x2000248")]
public class EnemyImpTutorial2 : EnemyImp
{
	[Token(Token = "0x2000249")]
	[CompilerGenerated]
	private sealed class <tutAttackTimed>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyImpTutorial2 <>4__this;

		[Token(Token = "0x1700019F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C0C")]
			[Address(RVA = "0xEEB158", Offset = "0xEEB158", VA = "0xEEB158", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C0E")]
			[Address(RVA = "0xEEB1A0", Offset = "0xEEB1A0", VA = "0xEEB1A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0xEEB04C", Offset = "0xEEB04C", VA = "0xEEB04C")]
		[DebuggerHidden]
		public <tutAttackTimed>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0xEEB09C", Offset = "0xEEB09C", VA = "0xEEB09C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0xEEB0A0", Offset = "0xEEB0A0", VA = "0xEEB0A0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0xEEB160", Offset = "0xEEB160", VA = "0xEEB160", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public GameObject tutorialPromptprefab;

	[Token(Token = "0x4000B87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public int tutorialStep;

	[Token(Token = "0x4000B88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	public bool endTurnOnDeath;

	[Token(Token = "0x4000B89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AD")]
	public bool MRTutorialVer;

	[Token(Token = "0x6000C02")]
	[Address(RVA = "0xEEABE0", Offset = "0xEEABE0", VA = "0xEEABE0", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000C03")]
	[Address(RVA = "0xEEABE4", Offset = "0xEEABE4", VA = "0xEEABE4", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000C04")]
	[Address(RVA = "0xEEAD38", Offset = "0xEEAD38", VA = "0xEEAD38", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000C05")]
	[Address(RVA = "0xEEADCC", Offset = "0xEEADCC", VA = "0xEEADCC", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000C06")]
	[Address(RVA = "0xEEAFC4", Offset = "0xEEAFC4", VA = "0xEEAFC4")]
	public void nextAttack()
	{
	}

	[Token(Token = "0x6000C07")]
	[Address(RVA = "0xEEAFE4", Offset = "0xEEAFE4", VA = "0xEEAFE4")]
	[IteratorStateMachine(typeof(<tutAttackTimed>d__9))]
	private IEnumerator tutAttackTimed()
	{
		return null;
	}

	[Token(Token = "0x6000C08")]
	[Address(RVA = "0xEEB074", Offset = "0xEEB074", VA = "0xEEB074")]
	public EnemyImpTutorial2()
	{
	}
}
[Token(Token = "0x200024A")]
public class EnemyLaserAttack : MonoBehaviour
{
	[Token(Token = "0x200024B")]
	[CompilerGenerated]
	private sealed class <laserAttack>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyLaserAttack <>4__this;

		[Token(Token = "0x170001A1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C16")]
			[Address(RVA = "0xEEB42C", Offset = "0xEEB42C", VA = "0xEEB42C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C18")]
			[Address(RVA = "0xEEB474", Offset = "0xEEB474", VA = "0xEEB474", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0xEEB230", Offset = "0xEEB230", VA = "0xEEB230")]
		[DebuggerHidden]
		public <laserAttack>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0xEEB320", Offset = "0xEEB320", VA = "0xEEB320", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0xEEB324", Offset = "0xEEB324", VA = "0xEEB324", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0xEEB434", Offset = "0xEEB434", VA = "0xEEB434", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject warningZone;

	[Token(Token = "0x4000B8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject laserObj;

	[Token(Token = "0x4000B8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Collider laserCol;

	[Token(Token = "0x4000B90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float timeDelay;

	[Token(Token = "0x4000B91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int power;

	[Token(Token = "0x6000C0F")]
	[Address(RVA = "0xEEB1A8", Offset = "0xEEB1A8", VA = "0xEEB1A8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C10")]
	[Address(RVA = "0xEEB1C8", Offset = "0xEEB1C8", VA = "0xEEB1C8")]
	[IteratorStateMachine(typeof(<laserAttack>d__6))]
	private IEnumerator laserAttack()
	{
		return null;
	}

	[Token(Token = "0x6000C11")]
	[Address(RVA = "0xEEB258", Offset = "0xEEB258", VA = "0xEEB258")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x6000C12")]
	[Address(RVA = "0xEEB30C", Offset = "0xEEB30C", VA = "0xEEB30C")]
	public EnemyLaserAttack()
	{
	}
}
[Token(Token = "0x200024C")]
public class EnemyOrbWall : MonoBehaviour
{
	[Token(Token = "0x4000B95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] orbs;

	[Token(Token = "0x4000B96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int power;

	[Token(Token = "0x6000C19")]
	[Address(RVA = "0xEEB47C", Offset = "0xEEB47C", VA = "0xEEB47C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C1A")]
	[Address(RVA = "0xEEB554", Offset = "0xEEB554", VA = "0xEEB554")]
	public EnemyOrbWall()
	{
	}
}
[Token(Token = "0x200024D")]
public abstract class EnemyParent : MonoBehaviour, ITargetable
{
	[Token(Token = "0x200024E")]
	public enum EnemyTribe
	{
		[Token(Token = "0x4000BCC")]
		normal,
		[Token(Token = "0x4000BCD")]
		mechanical,
		[Token(Token = "0x4000BCE")]
		ghost,
		[Token(Token = "0x4000BCF")]
		aberration
	}

	[Token(Token = "0x200024F")]
	public enum BreakState
	{
		[Token(Token = "0x4000BD1")]
		standing,
		[Token(Token = "0x4000BD2")]
		down,
		[Token(Token = "0x4000BD3")]
		recovering
	}

	[Token(Token = "0x2000250")]
	private enum EnemyState
	{
		[Token(Token = "0x4000BD5")]
		Starting,
		[Token(Token = "0x4000BD6")]
		Attacking,
		[Token(Token = "0x4000BD7")]
		Defending,
		[Token(Token = "0x4000BD8")]
		Dead
	}

	[Token(Token = "0x2000251")]
	private class StartingState : State<EnemyParent>
	{
		[Token(Token = "0x6000C47")]
		[Address(RVA = "0xEEE6DC", Offset = "0xEEE6DC", VA = "0xEEE6DC", Slot = "4")]
		public override void activate(EnemyParent parent)
		{
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0xEEE6E0", Offset = "0xEEE6E0", VA = "0xEEE6E0", Slot = "5")]
		public override void update(EnemyParent parent)
		{
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0xEEE6E4", Offset = "0xEEE6E4", VA = "0xEEE6E4")]
		public StartingState()
		{
		}
	}

	[Token(Token = "0x2000252")]
	private class AttackingState : State<EnemyParent>
	{
		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0xEEE72C", Offset = "0xEEE72C", VA = "0xEEE72C", Slot = "4")]
		public override void activate(EnemyParent parent)
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0xEEE730", Offset = "0xEEE730", VA = "0xEEE730", Slot = "5")]
		public override void update(EnemyParent parent)
		{
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0xEEE734", Offset = "0xEEE734", VA = "0xEEE734")]
		public AttackingState()
		{
		}
	}

	[Token(Token = "0x2000253")]
	private class DefendingState : State<EnemyParent>
	{
		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0xEEE77C", Offset = "0xEEE77C", VA = "0xEEE77C", Slot = "4")]
		public override void activate(EnemyParent parent)
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0xEEE780", Offset = "0xEEE780", VA = "0xEEE780", Slot = "5")]
		public override void update(EnemyParent parent)
		{
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0xEEE784", Offset = "0xEEE784", VA = "0xEEE784")]
		public DefendingState()
		{
		}
	}

	[Token(Token = "0x2000254")]
	private class DeadState : State<EnemyParent>
	{
		[Token(Token = "0x6000C50")]
		[Address(RVA = "0xEEE7CC", Offset = "0xEEE7CC", VA = "0xEEE7CC", Slot = "4")]
		public override void activate(EnemyParent parent)
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0xEEE7D0", Offset = "0xEEE7D0", VA = "0xEEE7D0", Slot = "5")]
		public override void update(EnemyParent parent)
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0xEEE7D4", Offset = "0xEEE7D4", VA = "0xEEE7D4")]
		public DeadState()
		{
		}
	}

	[Token(Token = "0x2000255")]
	[CompilerGenerated]
	private sealed class <destroyGameObject>d__67 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool requireEnemyTurn;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyParent <>4__this;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float time;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <waitTime>5__2;

		[Token(Token = "0x170001A7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C56")]
			[Address(RVA = "0xEEEA18", Offset = "0xEEEA18", VA = "0xEEEA18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C58")]
			[Address(RVA = "0xEEEA60", Offset = "0xEEEA60", VA = "0xEEEA60", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0xEEC47C", Offset = "0xEEC47C", VA = "0xEEC47C")]
		[DebuggerHidden]
		public <destroyGameObject>d__67(int <>1__state)
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xEEE81C", Offset = "0xEEE81C", VA = "0xEEE81C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xEEE820", Offset = "0xEEE820", VA = "0xEEE820", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0xEEEA20", Offset = "0xEEEA20", VA = "0xEEEA20", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000256")]
	[CompilerGenerated]
	private sealed class <disolveMaterial>d__82 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyParent <>4__this;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Renderer[] <rends>5__2;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <disolve>5__3;

		[Token(Token = "0x170001A9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C5C")]
			[Address(RVA = "0xEEEDA4", Offset = "0xEEEDA4", VA = "0xEEEDA4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C5E")]
			[Address(RVA = "0xEEEDEC", Offset = "0xEEEDEC", VA = "0xEEEDEC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0xEECDBC", Offset = "0xEECDBC", VA = "0xEECDBC")]
		[DebuggerHidden]
		public <disolveMaterial>d__82(int <>1__state)
		{
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0xEEEA68", Offset = "0xEEEA68", VA = "0xEEEA68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0xEEEA6C", Offset = "0xEEEA6C", VA = "0xEEEA6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0xEEEDAC", Offset = "0xEEEDAC", VA = "0xEEEDAC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000257")]
	[CompilerGenerated]
	private sealed class <delayText>d__96 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyParent <>4__this;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color color;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string info;

		[Token(Token = "0x170001AB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C62")]
			[Address(RVA = "0xEEF0BC", Offset = "0xEEF0BC", VA = "0xEEF0BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C64")]
			[Address(RVA = "0xEEF104", Offset = "0xEEF104", VA = "0xEEF104", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0xEEDC68", Offset = "0xEEDC68", VA = "0xEEDC68")]
		[DebuggerHidden]
		public <delayText>d__96(int <>1__state)
		{
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0xEEEDF4", Offset = "0xEEEDF4", VA = "0xEEEDF4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0xEEEDF8", Offset = "0xEEEDF8", VA = "0xEEEDF8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0xEEF0C4", Offset = "0xEEF0C4", VA = "0xEEF0C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Assign in Inspector")]
	[SerializeField]
	protected GameObject aimAssistTarget;

	[Token(Token = "0x4000B98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform projectileLaunchTrans;

	[Token(Token = "0x4000B99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator enemyAnim;

	[Token(Token = "0x4000B9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public EnemyInfoCanvas infoCanvasPrefab;

	[Token(Token = "0x4000B9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public EnemyInfoCanvas infoCanvas;

	[Token(Token = "0x4000B9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform infoCanvasTrans;

	[Token(Token = "0x4000B9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform teleportPos;

	[Token(Token = "0x4000B9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected AudioSource audioSource;

	[Token(Token = "0x4000B9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public BossText bossText;

	[Token(Token = "0x4000BA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Sprite enemyPortrait;

	[Token(Token = "0x4000BA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public List<EnemyModifier> enemyModifiers;

	[Token(Token = "0x4000BA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("Audio Assign")]
	public AudioClip[] hurtClips;

	[Token(Token = "0x4000BA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AudioClip battleMusic;

	[Token(Token = "0x4000BA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Header("Stats")]
	public int speed;

	[Token(Token = "0x4000BA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	protected int _health;

	[Token(Token = "0x4000BA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected int maxHealth;

	[Token(Token = "0x4000BA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	protected int _breakPoints;

	[Token(Token = "0x4000BA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected int maxBreakPoints;

	[Token(Token = "0x4000BA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public int setHealth;

	[Token(Token = "0x4000BAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public int power;

	[Token(Token = "0x4000BAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float damageTakenModifier;

	[Token(Token = "0x4000BAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float physicalDamageTakenMod;

	[Token(Token = "0x4000BAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float projectileSpeedMod;

	[Token(Token = "0x4000BAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float moveSpeedMod;

	[Token(Token = "0x4000BAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public int expValue;

	[Token(Token = "0x4000BB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public bool isGroundUnit;

	[Token(Token = "0x4000BB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	public bool isBoss;

	[Token(Token = "0x4000BB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
	public bool playDeathFade;

	[Token(Token = "0x4000BB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB3")]
	public bool allowBossModifiers;

	[Token(Token = "0x4000BB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public bool allowModifiers;

	[Token(Token = "0x4000BB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
	public bool ignoreDifficultyMod;

	[Token(Token = "0x4000BB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public string enemyName;

	[Token(Token = "0x4000BB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public int[] availableAttacks;

	[Token(Token = "0x4000BB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool enteredCriticalHealth;

	[Token(Token = "0x4000BB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public float difficultyMultiplier;

	[Token(Token = "0x4000BBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public bool canLink;

	[Token(Token = "0x4000BBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
	protected bool turnStarted;

	[Token(Token = "0x4000BBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
	public bool grantAdrenalineRush;

	[Token(Token = "0x4000BBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[HideInInspector]
	public string[] notificationMessages;

	[Token(Token = "0x4000BBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public BattleElementType elementType;

	[Token(Token = "0x4000BBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public BreakState breakState;

	[Token(Token = "0x4000BC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public EnemyTribe enemyTribe;

	[Token(Token = "0x4000BC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[Header("Loot")]
	public LootTable lootTable;

	[Token(Token = "0x4000BC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public PlayerSpell blueMageSpell;

	[Token(Token = "0x4000BC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public PassiveAbility blueMagePassive;

	[Token(Token = "0x4000BC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public List<EnemyParent> linkedEnemies;

	[Token(Token = "0x4000BC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[Header("Active Status Effects")]
	public List<GlitchEffects> glitchEffects;

	[Token(Token = "0x4000BC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[HideInInspector]
	public EnemySpawner spawner;

	[Token(Token = "0x4000BC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	protected bool isDead;

	[Token(Token = "0x4000BC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x121")]
	protected bool isBroken;

	[Token(Token = "0x4000BC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private StateMachine<EnemyParent, EnemyState> stateMachine;

	[Token(Token = "0x4000BCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private int effectsTextsActive;

	[Token(Token = "0x170001A3")]
	public bool isEnemyMainTurn
	{
		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0xEEB564", Offset = "0xEEB564", VA = "0xEEB564")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001A4")]
	public float getMaxHealth
	{
		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0xEEB628", Offset = "0xEEB628", VA = "0xEEB628")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001A5")]
	public int health
	{
		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0xEEB634", Offset = "0xEEB634", VA = "0xEEB634")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0xEE65C8", Offset = "0xEE65C8", VA = "0xEE65C8")]
		set
		{
		}
	}

	[Token(Token = "0x170001A6")]
	public int breakPoints
	{
		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0xEEB678", Offset = "0xEEB678", VA = "0xEEB678")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000C20")]
		[Address(RVA = "0xEEB680", Offset = "0xEEB680", VA = "0xEEB680")]
		set
		{
		}
	}

	[Token(Token = "0x6000C21")]
	[Address(RVA = "0xEEB6F8", Offset = "0xEEB6F8", VA = "0xEEB6F8")]
	protected void Awake()
	{
	}

	[Token(Token = "0x6000C22")]
	[Address(RVA = "0xEEC2D0", Offset = "0xEEC2D0", VA = "0xEEC2D0", Slot = "5")]
	public virtual void breakDefenses()
	{
	}

	[Token(Token = "0x6000C23")]
	[Address(RVA = "0xEE3070", Offset = "0xEE3070", VA = "0xEE3070")]
	protected void turnStart(bool mainTurn)
	{
	}

	[Token(Token = "0x6000C24")]
	[Address(RVA = "0xEE4124", Offset = "0xEE4124", VA = "0xEE4124")]
	[IteratorStateMachine(typeof(<destroyGameObject>d__67))]
	protected IEnumerator destroyGameObject(float time, bool requireEnemyTurn = true)
	{
		return null;
	}

	[Token(Token = "0x6000C25")]
	[Address(RVA = "0xEE23D4", Offset = "0xEE23D4", VA = "0xEE23D4", Slot = "6")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000C26")]
	[Address(RVA = "0xEEC4A4", Offset = "0xEEC4A4", VA = "0xEEC4A4")]
	public void tryToLinkEnemy()
	{
	}

	[Token(Token = "0x6000C27")]
	[Address(RVA = "0xEE2D10", Offset = "0xEE2D10", VA = "0xEE2D10", Slot = "7")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000C28")]
	[Address(RVA = "0xEEB63C", Offset = "0xEEB63C", VA = "0xEEB63C")]
	private void updateHpBar()
	{
	}

	[Token(Token = "0x6000C29")]
	[Address(RVA = "0xEEB6BC", Offset = "0xEEB6BC", VA = "0xEEB6BC")]
	private void updateBreakBar()
	{
	}

	[Token(Token = "0x6000C2A")]
	[Address(RVA = "0xEEC9E8", Offset = "0xEEC9E8", VA = "0xEEC9E8")]
	public void killAllLinks()
	{
	}

	[Token(Token = "0x6000C2B")]
	[Address(RVA = "0xEECCAC", Offset = "0xEECCAC", VA = "0xEECCAC", Slot = "4")]
	public GameObject getAimAssistTarget()
	{
		return null;
	}

	[Token(Token = "0x6000C2C")]
	[Address(RVA = "0xEE3A9C", Offset = "0xEE3A9C", VA = "0xEE3A9C", Slot = "8")]
	public virtual void killSelf()
	{
	}

	[Token(Token = "0x6000C2D")]
	[Address(RVA = "0xEECCF8", Offset = "0xEECCF8", VA = "0xEECCF8")]
	private void stopCoroutines()
	{
	}

	[Token(Token = "0x6000C2E")]
	[Address(RVA = "0xEECD9C", Offset = "0xEECD9C", VA = "0xEECD9C")]
	public void forceDisolveMaterials()
	{
	}

	[Token(Token = "0x6000C2F")]
	[Address(RVA = "0xEECD34", Offset = "0xEECD34", VA = "0xEECD34")]
	[IteratorStateMachine(typeof(<disolveMaterial>d__82))]
	protected IEnumerator disolveMaterial()
	{
		return null;
	}

	[Token(Token = "0x6000C30")]
	[Address(RVA = "0xEE8474", Offset = "0xEE8474", VA = "0xEE8474", Slot = "9")]
	public virtual void damageEnemy(int amount)
	{
	}

	[Token(Token = "0x6000C31")]
	[Address(RVA = "0xEECDE4", Offset = "0xEECDE4", VA = "0xEECDE4", Slot = "10")]
	public virtual void damageEnemy(int amount, bool crit, bool isPhysical = false)
	{
	}

	[Token(Token = "0x6000C32")]
	[Address(RVA = "0xEE84B4", Offset = "0xEE84B4", VA = "0xEE84B4", Slot = "11")]
	public virtual void damageEnemy(int amount, bool crit, int combo, bool isPhysical = false)
	{
	}

	[Token(Token = "0x6000C33")]
	[Address(RVA = "0xEECE04", Offset = "0xEECE04", VA = "0xEECE04", Slot = "12")]
	public virtual void damageEnemy(int amount, bool crit, BattleElementType element, bool isPhysical = false)
	{
	}

	[Token(Token = "0x6000C34")]
	[Address(RVA = "0xEECE28", Offset = "0xEECE28", VA = "0xEECE28", Slot = "13")]
	public virtual void damageEnemy(int amount, BattleElementType element, bool isPhysical = false)
	{
	}

	[Token(Token = "0x6000C35")]
	[Address(RVA = "0xEECE48", Offset = "0xEECE48", VA = "0xEECE48", Slot = "14")]
	public virtual void damageEnemy(int amount, bool crit, int combo, BattleElementType element, bool isPhysical = false)
	{
	}

	[Token(Token = "0x6000C36")]
	[Address(RVA = "0xEED68C", Offset = "0xEED68C", VA = "0xEED68C")]
	public void damageEnemyStatus(float percent)
	{
	}

	[Token(Token = "0x6000C37")]
	[Address(RVA = "0xEED300", Offset = "0xEED300", VA = "0xEED300")]
	private void displayDamageText(string amount, bool crit, bool weak = false)
	{
	}

	[Token(Token = "0x6000C38")]
	[Address(RVA = "0xEED7B0", Offset = "0xEED7B0", VA = "0xEED7B0")]
	public void healEnemy(int value)
	{
	}

	[Token(Token = "0x6000C39")]
	[Address(RVA = "0xEED998", Offset = "0xEED998", VA = "0xEED998")]
	private void displayHealText(string amount)
	{
	}

	[Token(Token = "0x6000C3A")]
	[Address(RVA = "0xEEC468", Offset = "0xEEC468", VA = "0xEEC468")]
	public void displayEffectText(string info)
	{
	}

	[Token(Token = "0x6000C3B")]
	[Address(RVA = "0xEECCB4", Offset = "0xEECCB4", VA = "0xEECCB4")]
	public void displayEffectText(string info, Color color)
	{
	}

	[Token(Token = "0x6000C3C")]
	[Address(RVA = "0xEEDBB8", Offset = "0xEEDBB8", VA = "0xEEDBB8")]
	[IteratorStateMachine(typeof(<delayText>d__96))]
	private IEnumerator delayText(string info, Color color, float time)
	{
		return null;
	}

	[Token(Token = "0x6000C3D")]
	[Address(RVA = "0xEEDC90", Offset = "0xEEDC90", VA = "0xEEDC90", Slot = "15")]
	public virtual void addGlitch(GlitchEffects currentGlitch)
	{
	}

	[Token(Token = "0x6000C3E")]
	[Address(RVA = "0xEEE004", Offset = "0xEEE004", VA = "0xEEE004")]
	public void tickDownEffects()
	{
	}

	[Token(Token = "0x6000C3F")]
	public abstract void enemyAttack(bool endTurnAfter = true);

	[Token(Token = "0x6000C40")]
	[Address(RVA = "0xEE3860", Offset = "0xEE3860", VA = "0xEE3860", Slot = "17")]
	public virtual void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000C41")]
	[Address(RVA = "0xEEE41C", Offset = "0xEEE41C", VA = "0xEEE41C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000C42")]
	[Address(RVA = "0xEED238", Offset = "0xEED238", VA = "0xEED238")]
	public void playHurtSound()
	{
	}

	[Token(Token = "0x6000C43")]
	[Address(RVA = "0xEE3638", Offset = "0xEE3638", VA = "0xEE3638")]
	public void preApplyDamage()
	{
	}

	[Token(Token = "0x6000C44")]
	[Address(RVA = "0xEEE4D8", Offset = "0xEEE4D8", VA = "0xEEE4D8", Slot = "18")]
	public virtual void endTurn(bool enemyDied = false)
	{
	}

	[Token(Token = "0x6000C45")]
	[Address(RVA = "0xEE4594", Offset = "0xEE4594", VA = "0xEE4594")]
	protected EnemyParent()
	{
	}
}
[Token(Token = "0x2000258")]
public class EnemyProjectile : MonoBehaviour
{
	[Token(Token = "0x4000BEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int power;

	[Token(Token = "0x4000BEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Header("Base Properties")]
	public bool destroyOnHitOther;

	[Token(Token = "0x4000BEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool destroyOnHitPlayer;

	[Token(Token = "0x4000BED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool deflectable;

	[Token(Token = "0x4000BEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	public bool deflectedProj;

	[Token(Token = "0x4000BEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool destroyOnTimer;

	[Token(Token = "0x4000BF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool autoSeek;

	[Token(Token = "0x4000BF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public BattleBuff debuff;

	[Token(Token = "0x4000BF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int inflictChance;

	[Token(Token = "0x4000BF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject impactEffect;

	[Token(Token = "0x4000BF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Sine Wave Motion")]
	public bool useSineWaveY;

	[Token(Token = "0x4000BF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool useSineWaveX;

	[Token(Token = "0x4000BF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float sineFrequency;

	[Token(Token = "0x4000BF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float sineAngularFrequency;

	[Token(Token = "0x4000BF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float sinePeriod;

	[Token(Token = "0x4000BF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float sinePhase;

	[Token(Token = "0x4000BFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float maxAliveTime;

	[Token(Token = "0x4000BFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float aliveTime;

	[Token(Token = "0x4000BFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Header("Rotations")]
	public bool rotateProjectile;

	[Token(Token = "0x4000BFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float rotateSpeed;

	[Token(Token = "0x4000BFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float rotateX;

	[Token(Token = "0x4000BFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float rotateY;

	[Token(Token = "0x4000C00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float rotateZ;

	[Token(Token = "0x4000C01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool rotateWithVelocity;

	[Token(Token = "0x4000C02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	public bool addRandomRotation;

	[Token(Token = "0x4000C03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	public bool hasParent;

	[Token(Token = "0x4000C04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private UnityEngine.Vector3 spawnPos;

	[Token(Token = "0x4000C05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public EnemyParent firedParent;

	[Token(Token = "0x4000C06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Rigidbody rigidbody;

	[Token(Token = "0x4000C07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject childRotateObject;

	[Token(Token = "0x4000C08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool reverseSine;

	[Token(Token = "0x4000C09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	private bool reverseRotation;

	[Token(Token = "0x4000C0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public UnityEvent onHitPlayer;

	[Token(Token = "0x4000C0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float elapsedTime;

	[Token(Token = "0x4000C0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float sineAmplitude;

	[Token(Token = "0x6000C65")]
	[Address(RVA = "0xEEF10C", Offset = "0xEEF10C", VA = "0xEEF10C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C66")]
	[Address(RVA = "0xEEF280", Offset = "0xEEF280", VA = "0xEEF280")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C67")]
	[Address(RVA = "0xEEFA04", Offset = "0xEEFA04", VA = "0xEEFA04")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x6000C68")]
	[Address(RVA = "0xEEFFF8", Offset = "0xEEFFF8", VA = "0xEEFFF8")]
	public void deflectProjectile()
	{
	}

	[Token(Token = "0x6000C69")]
	[Address(RVA = "0xEF03F0", Offset = "0xEF03F0", VA = "0xEF03F0")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000C6A")]
	[Address(RVA = "0xEEF844", Offset = "0xEEF844", VA = "0xEEF844")]
	private void SmoothSineWaveY()
	{
	}

	[Token(Token = "0x6000C6B")]
	[Address(RVA = "0xEEF924", Offset = "0xEEF924", VA = "0xEEF924")]
	private void SmoothSineWaveX()
	{
	}

	[Token(Token = "0x6000C6C")]
	[Address(RVA = "0xEF099C", Offset = "0xEF099C", VA = "0xEF099C")]
	public EnemyProjectile()
	{
	}
}
[Token(Token = "0x2000259")]
public class EnemyPunchOrb : MonoBehaviour
{
	[Token(Token = "0x4000C0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float explodeTime;

	[Token(Token = "0x4000C0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int damage;

	[Token(Token = "0x4000C0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject explodeParticle;

	[Token(Token = "0x4000C10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject successParticle;

	[Token(Token = "0x4000C11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float explodeTimer;

	[Token(Token = "0x6000C6D")]
	[Address(RVA = "0xEF0A34", Offset = "0xEF0A34", VA = "0xEF0A34")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C6E")]
	[Address(RVA = "0xEF0BE0", Offset = "0xEF0BE0", VA = "0xEF0BE0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000C6F")]
	[Address(RVA = "0xEF0D64", Offset = "0xEF0D64", VA = "0xEF0D64")]
	public EnemyPunchOrb()
	{
	}
}
[Token(Token = "0x200025A")]
public class EnemyPunchOrbAttack : MonoBehaviour
{
	[Token(Token = "0x4000C12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] orbsSPawns;

	[Token(Token = "0x4000C13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int numOfReds;

	[Token(Token = "0x4000C14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float explodeTime;

	[Token(Token = "0x4000C15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject badOrb;

	[Token(Token = "0x4000C16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject punchOrb;

	[Token(Token = "0x4000C17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public EnemyParent enemyParent;

	[Token(Token = "0x4000C18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int power;

	[Token(Token = "0x4000C19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float timer;

	[Token(Token = "0x6000C70")]
	[Address(RVA = "0xEF0D74", Offset = "0xEF0D74", VA = "0xEF0D74")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C71")]
	[Address(RVA = "0xEF0F54", Offset = "0xEF0F54", VA = "0xEF0F54")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C72")]
	[Address(RVA = "0xEF1020", Offset = "0xEF1020", VA = "0xEF1020")]
	public EnemyPunchOrbAttack()
	{
	}
}
[Token(Token = "0x200025B")]
public class EnemySydBotBoss : CasterSydMech
{
	[Token(Token = "0x200025C")]
	public enum MechState
	{
		[Token(Token = "0x4000C21")]
		standard,
		[Token(Token = "0x4000C22")]
		armored,
		[Token(Token = "0x4000C23")]
		flight
	}

	[Token(Token = "0x200025D")]
	[CompilerGenerated]
	private sealed class <turn1dialogue>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemySydBotBoss <>4__this;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x170001AD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C82")]
			[Address(RVA = "0xEF17E4", Offset = "0xEF17E4", VA = "0xEF17E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C84")]
			[Address(RVA = "0xEF182C", Offset = "0xEF182C", VA = "0xEF182C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0xEF1194", Offset = "0xEF1194", VA = "0xEF1194")]
		[DebuggerHidden]
		public <turn1dialogue>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0xEF1674", Offset = "0xEF1674", VA = "0xEF1674", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0xEF1678", Offset = "0xEF1678", VA = "0xEF1678", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xEF17EC", Offset = "0xEF17EC", VA = "0xEF17EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200025E")]
	[CompilerGenerated]
	private sealed class <turn2dialogue>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemySydBotBoss <>4__this;

		[Token(Token = "0x170001AF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C88")]
			[Address(RVA = "0xEF1A10", Offset = "0xEF1A10", VA = "0xEF1A10", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C8A")]
			[Address(RVA = "0xEF1A58", Offset = "0xEF1A58", VA = "0xEF1A58", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xEF1224", Offset = "0xEF1224", VA = "0xEF1224")]
		[DebuggerHidden]
		public <turn2dialogue>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xEF1834", Offset = "0xEF1834", VA = "0xEF1834", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xEF1838", Offset = "0xEF1838", VA = "0xEF1838", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0xEF1A18", Offset = "0xEF1A18", VA = "0xEF1A18", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200025F")]
	[CompilerGenerated]
	private sealed class <disolveArmorMaterial>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemySydBotBoss <>4__this;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Renderer[] <rends>5__2;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <disolve>5__3;

		[Token(Token = "0x170001B1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C8E")]
			[Address(RVA = "0xEF1C34", Offset = "0xEF1C34", VA = "0xEF1C34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C90")]
			[Address(RVA = "0xEF1C7C", Offset = "0xEF1C7C", VA = "0xEF1C7C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xEF1438", Offset = "0xEF1438", VA = "0xEF1438")]
		[DebuggerHidden]
		public <disolveArmorMaterial>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xEF1A60", Offset = "0xEF1A60", VA = "0xEF1A60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xEF1A64", Offset = "0xEF1A64", VA = "0xEF1A64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0xEF1C3C", Offset = "0xEF1C3C", VA = "0xEF1C3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000260")]
	[CompilerGenerated]
	private sealed class <castIceStorm>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemySydBotBoss <>4__this;

		[Token(Token = "0x170001B3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C94")]
			[Address(RVA = "0xEF1F50", Offset = "0xEF1F50", VA = "0xEF1F50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C96")]
			[Address(RVA = "0xEF1F98", Offset = "0xEF1F98", VA = "0xEF1F98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xEF14D0", Offset = "0xEF14D0", VA = "0xEF14D0")]
		[DebuggerHidden]
		public <castIceStorm>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0xEF1C84", Offset = "0xEF1C84", VA = "0xEF1C84", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0xEF1C88", Offset = "0xEF1C88", VA = "0xEF1C88", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xEF1F58", Offset = "0xEF1F58", VA = "0xEF1F58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000261")]
	[CompilerGenerated]
	private sealed class <propellBeam>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject proj;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemySydBotBoss <>4__this;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody <projRB>5__2;

		[Token(Token = "0x170001B5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C9A")]
			[Address(RVA = "0xEF2204", Offset = "0xEF2204", VA = "0xEF2204", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C9C")]
			[Address(RVA = "0xEF224C", Offset = "0xEF224C", VA = "0xEF224C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0xEF156C", Offset = "0xEF156C", VA = "0xEF156C")]
		[DebuggerHidden]
		public <propellBeam>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0xEF1FA0", Offset = "0xEF1FA0", VA = "0xEF1FA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xEF1FA4", Offset = "0xEF1FA4", VA = "0xEF1FA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xEF220C", Offset = "0xEF220C", VA = "0xEF220C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000262")]
	[CompilerGenerated]
	private sealed class <deathTimer>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemySydBotBoss <>4__this;

		[Token(Token = "0x170001B7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CA0")]
			[Address(RVA = "0xEF248C", Offset = "0xEF248C", VA = "0xEF248C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CA2")]
			[Address(RVA = "0xEF24D4", Offset = "0xEF24D4", VA = "0xEF24D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xEF161C", Offset = "0xEF161C", VA = "0xEF161C")]
		[DebuggerHidden]
		public <deathTimer>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0xEF2254", Offset = "0xEF2254", VA = "0xEF2254", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0xEF2258", Offset = "0xEF2258", VA = "0xEF2258", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xEF2494", Offset = "0xEF2494", VA = "0xEF2494", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000263")]
	[CompilerGenerated]
	private sealed class <castBulletHell>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemySydBotBoss <>4__this;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <ignoreStraights>5__4;

		[Token(Token = "0x170001B9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CA6")]
			[Address(RVA = "0xEF27D0", Offset = "0xEF27D0", VA = "0xEF27D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0xEF2818", Offset = "0xEF2818", VA = "0xEF2818", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xEF1644", Offset = "0xEF1644", VA = "0xEF1644")]
		[DebuggerHidden]
		public <castBulletHell>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xEF24DC", Offset = "0xEF24DC", VA = "0xEF24DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0xEF24E0", Offset = "0xEF24E0", VA = "0xEF24E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0xEF27D8", Offset = "0xEF27D8", VA = "0xEF27D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public GameObject armorRig;

	[Token(Token = "0x4000C1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public Animator armorAnimator;

	[Token(Token = "0x4000C1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public GameObject weaponObject;

	[Token(Token = "0x4000C1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public GameObject homingProj;

	[Token(Token = "0x4000C1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public GameObject iceBeam;

	[Token(Token = "0x4000C1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public MechState mechState;

	[Token(Token = "0x6000C73")]
	[Address(RVA = "0xEF103C", Offset = "0xEF103C", VA = "0xEF103C", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000C74")]
	[Address(RVA = "0xEF112C", Offset = "0xEF112C", VA = "0xEF112C")]
	[IteratorStateMachine(typeof(<turn1dialogue>d__8))]
	private IEnumerator turn1dialogue()
	{
		return null;
	}

	[Token(Token = "0x6000C75")]
	[Address(RVA = "0xEF11BC", Offset = "0xEF11BC", VA = "0xEF11BC")]
	[IteratorStateMachine(typeof(<turn2dialogue>d__9))]
	private IEnumerator turn2dialogue()
	{
		return null;
	}

	[Token(Token = "0x6000C76")]
	[Address(RVA = "0xEF124C", Offset = "0xEF124C", VA = "0xEF124C", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000C77")]
	[Address(RVA = "0xEF13D0", Offset = "0xEF13D0", VA = "0xEF13D0")]
	[IteratorStateMachine(typeof(<disolveArmorMaterial>d__11))]
	protected IEnumerator disolveArmorMaterial()
	{
		return null;
	}

	[Token(Token = "0x6000C78")]
	[Address(RVA = "0xEF1460", Offset = "0xEF1460", VA = "0xEF1460", Slot = "19")]
	protected override void attackAnim()
	{
	}

	[Token(Token = "0x6000C79")]
	[Address(RVA = "0xEF1368", Offset = "0xEF1368", VA = "0xEF1368")]
	[IteratorStateMachine(typeof(<castIceStorm>d__13))]
	private IEnumerator castIceStorm()
	{
		return null;
	}

	[Token(Token = "0x6000C7A")]
	[Address(RVA = "0xEF14F8", Offset = "0xEF14F8", VA = "0xEF14F8")]
	[IteratorStateMachine(typeof(<propellBeam>d__14))]
	private IEnumerator propellBeam(GameObject proj)
	{
		return null;
	}

	[Token(Token = "0x6000C7B")]
	[Address(RVA = "0xEF1594", Offset = "0xEF1594", VA = "0xEF1594", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000C7C")]
	[Address(RVA = "0xEF15B4", Offset = "0xEF15B4", VA = "0xEF15B4")]
	[IteratorStateMachine(typeof(<deathTimer>d__16))]
	private IEnumerator deathTimer()
	{
		return null;
	}

	[Token(Token = "0x6000C7D")]
	[Address(RVA = "0xEF1300", Offset = "0xEF1300", VA = "0xEF1300")]
	[IteratorStateMachine(typeof(<castBulletHell>d__17))]
	protected IEnumerator castBulletHell()
	{
		return null;
	}

	[Token(Token = "0x6000C7E")]
	[Address(RVA = "0xEF166C", Offset = "0xEF166C", VA = "0xEF166C")]
	public EnemySydBotBoss()
	{
	}
}
[Token(Token = "0x2000264")]
public class EnemySydneyTutorial1 : EnemyParent
{
	[Token(Token = "0x2000265")]
	[CompilerGenerated]
	private sealed class <endBattleTimer>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemySydneyTutorial1 <>4__this;

		[Token(Token = "0x170001BB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0xEF3128", Offset = "0xEF3128", VA = "0xEF3128", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0xEF3170", Offset = "0xEF3170", VA = "0xEF3170", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0xEF2FD4", Offset = "0xEF2FD4", VA = "0xEF2FD4")]
		[DebuggerHidden]
		public <endBattleTimer>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0xEF3030", Offset = "0xEF3030", VA = "0xEF3030", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0xEF3034", Offset = "0xEF3034", VA = "0xEF3034", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0xEF3130", Offset = "0xEF3130", VA = "0xEF3130", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000266")]
	[CompilerGenerated]
	private sealed class <failDialogueTimer>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemySydneyTutorial1 <>4__this;

		[Token(Token = "0x170001BD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CBE")]
			[Address(RVA = "0xEF3258", Offset = "0xEF3258", VA = "0xEF3258", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CC0")]
			[Address(RVA = "0xEF32A0", Offset = "0xEF32A0", VA = "0xEF32A0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0xEF2FFC", Offset = "0xEF2FFC", VA = "0xEF2FFC")]
		[DebuggerHidden]
		public <failDialogueTimer>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0xEF3178", Offset = "0xEF3178", VA = "0xEF3178", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0xEF317C", Offset = "0xEF317C", VA = "0xEF317C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0xEF3260", Offset = "0xEF3260", VA = "0xEF3260", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject tutorialPromptprefab;

	[Token(Token = "0x4000C42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public BattleDialogueBox dialogueBox;

	[Token(Token = "0x4000C43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Transform bossDialoguePos;

	[Token(Token = "0x4000C44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public string[] battledialogue;

	[Token(Token = "0x4000C45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject target;

	[Token(Token = "0x4000C46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[Header("Audio")]
	public AudioClip[] dialogueClips;

	[Token(Token = "0x4000C47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private bool firstAttack;

	[Token(Token = "0x6000CA9")]
	[Address(RVA = "0xEF2820", Offset = "0xEF2820", VA = "0xEF2820", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000CAA")]
	[Address(RVA = "0xEF28E8", Offset = "0xEF28E8", VA = "0xEF28E8", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000CAB")]
	[Address(RVA = "0xEF2BDC", Offset = "0xEF2BDC", VA = "0xEF2BDC")]
	public void playDialogue(string dialogue, bool volumeOn = false)
	{
	}

	[Token(Token = "0x6000CAC")]
	[Address(RVA = "0xEF2D18", Offset = "0xEF2D18", VA = "0xEF2D18")]
	public void nextAttack()
	{
	}

	[Token(Token = "0x6000CAD")]
	[Address(RVA = "0xEF2D94", Offset = "0xEF2D94", VA = "0xEF2D94", Slot = "9")]
	public override void damageEnemy(int amount)
	{
	}

	[Token(Token = "0x6000CAE")]
	[Address(RVA = "0xEF2DB8", Offset = "0xEF2DB8", VA = "0xEF2DB8", Slot = "11")]
	public override void damageEnemy(int amount, bool crit, int combo, bool isPhysical)
	{
	}

	[Token(Token = "0x6000CAF")]
	[Address(RVA = "0xEF2DD8", Offset = "0xEF2DD8", VA = "0xEF2DD8", Slot = "13")]
	public override void damageEnemy(int amount, BattleElementType element, bool isPhysical = false)
	{
	}

	[Token(Token = "0x6000CB0")]
	[Address(RVA = "0xEF2DF0", Offset = "0xEF2DF0", VA = "0xEF2DF0", Slot = "14")]
	public override void damageEnemy(int amount, bool crit, int combo, BattleElementType element, bool isPhysical = false)
	{
	}

	[Token(Token = "0x6000CB1")]
	[Address(RVA = "0xEF2E04", Offset = "0xEF2E04", VA = "0xEF2E04", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000CB2")]
	[Address(RVA = "0xEF2F6C", Offset = "0xEF2F6C", VA = "0xEF2F6C")]
	[IteratorStateMachine(typeof(<endBattleTimer>d__16))]
	private IEnumerator endBattleTimer()
	{
		return null;
	}

	[Token(Token = "0x6000CB3")]
	[Address(RVA = "0xEF2B74", Offset = "0xEF2B74", VA = "0xEF2B74")]
	[IteratorStateMachine(typeof(<failDialogueTimer>d__17))]
	private IEnumerator failDialogueTimer()
	{
		return null;
	}

	[Token(Token = "0x6000CB4")]
	[Address(RVA = "0xEF3024", Offset = "0xEF3024", VA = "0xEF3024")]
	public EnemySydneyTutorial1()
	{
	}
}
[Token(Token = "0x2000267")]
public class EnemyVerticalBeam : MonoBehaviour
{
	[Token(Token = "0x4000C4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int power;

	[Token(Token = "0x4000C4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int speed;

	[Token(Token = "0x6000CC1")]
	[Address(RVA = "0xEF32A8", Offset = "0xEF32A8", VA = "0xEF32A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CC2")]
	[Address(RVA = "0xEF32AC", Offset = "0xEF32AC", VA = "0xEF32AC")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x6000CC3")]
	[Address(RVA = "0xEF3360", Offset = "0xEF3360", VA = "0xEF3360")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000CC4")]
	[Address(RVA = "0xEF3414", Offset = "0xEF3414", VA = "0xEF3414")]
	public EnemyVerticalBeam()
	{
	}
}
[Token(Token = "0x2000268")]
public class EnemyWallSpell : MonoBehaviour
{
	[Token(Token = "0x4000C50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject warningIndicator;

	[Token(Token = "0x4000C51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject attackEffect;

	[Token(Token = "0x4000C52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource source;

	[Token(Token = "0x4000C53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int power;

	[Token(Token = "0x4000C54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Collider damageCollider;

	[Token(Token = "0x6000CC5")]
	[Address(RVA = "0xEF3424", Offset = "0xEF3424", VA = "0xEF3424")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CC6")]
	[Address(RVA = "0xEF3494", Offset = "0xEF3494", VA = "0xEF3494")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CC7")]
	[Address(RVA = "0xEF3498", Offset = "0xEF3498", VA = "0xEF3498")]
	public void damagePlayer()
	{
	}

	[Token(Token = "0x6000CC8")]
	[Address(RVA = "0xEF3530", Offset = "0xEF3530", VA = "0xEF3530")]
	public EnemyWallSpell()
	{
	}
}
[Token(Token = "0x2000269")]
public class EnemyWallTriggers : MonoBehaviour
{
	[Token(Token = "0x4000C55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EnemyWallSpell parentWall;

	[Token(Token = "0x6000CC9")]
	[Address(RVA = "0xEF3540", Offset = "0xEF3540", VA = "0xEF3540")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000CCA")]
	[Address(RVA = "0xEF35C8", Offset = "0xEF35C8", VA = "0xEF35C8")]
	public EnemyWallTriggers()
	{
	}
}
[Token(Token = "0x200026A")]
public class EnemyWreckingBall : EnemyParent
{
	[Token(Token = "0x200026B")]
	[CompilerGenerated]
	private sealed class <swingAttack>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyWreckingBall <>4__this;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 <target>5__2;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private UnityEngine.Vector3 <startPos>5__3;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__4;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <timerMax>5__5;

		[Token(Token = "0x170001BF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CD6")]
			[Address(RVA = "0xEF403C", Offset = "0xEF403C", VA = "0xEF403C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CD8")]
			[Address(RVA = "0xEF4084", Offset = "0xEF4084", VA = "0xEF4084", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xEF387C", Offset = "0xEF387C", VA = "0xEF387C")]
		[DebuggerHidden]
		public <swingAttack>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xEF3C24", Offset = "0xEF3C24", VA = "0xEF3C24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xEF3C28", Offset = "0xEF3C28", VA = "0xEF3C28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xEF4044", Offset = "0xEF4044", VA = "0xEF4044", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200026C")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemyProjectile;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform launchTrans;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool randomRot;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public EnemyWreckingBall <>4__this;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x170001C1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CDC")]
			[Address(RVA = "0xEF43B0", Offset = "0xEF43B0", VA = "0xEF43B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CDE")]
			[Address(RVA = "0xEF43F8", Offset = "0xEF43F8", VA = "0xEF43F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xEF3934", Offset = "0xEF3934", VA = "0xEF3934")]
		[DebuggerHidden]
		public <shootProjectile>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xEF408C", Offset = "0xEF408C", VA = "0xEF408C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xEF4090", Offset = "0xEF4090", VA = "0xEF4090", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xEF43B8", Offset = "0xEF43B8", VA = "0xEF43B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200026D")]
	[CompilerGenerated]
	private sealed class <castShotgunBlast>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyWreckingBall <>4__this;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <aimAccuracy>5__2;

		[Token(Token = "0x170001C3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CE2")]
			[Address(RVA = "0xEF4634", Offset = "0xEF4634", VA = "0xEF4634", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CE4")]
			[Address(RVA = "0xEF467C", Offset = "0xEF467C", VA = "0xEF467C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xEF3BF0", Offset = "0xEF3BF0", VA = "0xEF3BF0")]
		[DebuggerHidden]
		public <castShotgunBlast>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xEF4400", Offset = "0xEF4400", VA = "0xEF4400", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xEF4404", Offset = "0xEF4404", VA = "0xEF4404", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xEF463C", Offset = "0xEF463C", VA = "0xEF463C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private UnityEngine.Vector3 startPos;

	[Token(Token = "0x4000C57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public WreckingBallCollider ball;

	[Token(Token = "0x4000C58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject enemyProjectile1;

	[Token(Token = "0x4000C59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject enemyProjectile2;

	[Token(Token = "0x4000C5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public float projSpeed;

	[Token(Token = "0x4000C5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000C5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GameObject bodyRoot;

	[Token(Token = "0x6000CCB")]
	[Address(RVA = "0xEF35D0", Offset = "0xEF35D0", VA = "0xEF35D0", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000CCC")]
	[Address(RVA = "0xEF3748", Offset = "0xEF3748", VA = "0xEF3748", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000CCD")]
	[Address(RVA = "0xEF37D8", Offset = "0xEF37D8", VA = "0xEF37D8", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000CCE")]
	[Address(RVA = "0xEF3814", Offset = "0xEF3814", VA = "0xEF3814")]
	[IteratorStateMachine(typeof(<swingAttack>d__10))]
	private IEnumerator swingAttack()
	{
		return null;
	}

	[Token(Token = "0x6000CCF")]
	[Address(RVA = "0xEF38A4", Offset = "0xEF38A4", VA = "0xEF38A4")]
	[IteratorStateMachine(typeof(<shootProjectile>d__11))]
	protected IEnumerator shootProjectile(GameObject enemyProjectile, Transform launchTrans, bool randomRot = false)
	{
		return null;
	}

	[Token(Token = "0x6000CD0")]
	[Address(RVA = "0xEF395C", Offset = "0xEF395C", VA = "0xEF395C", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000CD1")]
	[Address(RVA = "0xEF3B88", Offset = "0xEF3B88", VA = "0xEF3B88")]
	[IteratorStateMachine(typeof(<castShotgunBlast>d__13))]
	protected IEnumerator castShotgunBlast()
	{
		return null;
	}

	[Token(Token = "0x6000CD2")]
	[Address(RVA = "0xEF3C18", Offset = "0xEF3C18", VA = "0xEF3C18")]
	public EnemyWreckingBall()
	{
	}
}
[Token(Token = "0x200026E")]
public class EnemyGasCloud : MonoBehaviour
{
	[Token(Token = "0x4000C70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int damage;

	[Token(Token = "0x4000C71")]
	public const int maxTurns = 3;

	[Token(Token = "0x4000C72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int turnsRemaining;

	[Token(Token = "0x4000C73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool inGas;

	[Token(Token = "0x4000C74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float damageTickMax;

	[Token(Token = "0x4000C75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float damageTickTimer;

	[Token(Token = "0x4000C76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float canDamageTimer;

	[Token(Token = "0x4000C77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float reqTimeToDamage;

	[Token(Token = "0x4000C78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool applyScreenColor;

	[Token(Token = "0x4000C79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Color screenColor;

	[Token(Token = "0x6000CE5")]
	[Address(RVA = "0xEF4684", Offset = "0xEF4684", VA = "0xEF4684")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CE6")]
	[Address(RVA = "0xEF4734", Offset = "0xEF4734", VA = "0xEF4734")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CE7")]
	[Address(RVA = "0xEF482C", Offset = "0xEF482C", VA = "0xEF482C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000CE8")]
	[Address(RVA = "0xEF4918", Offset = "0xEF4918", VA = "0xEF4918")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000CE9")]
	[Address(RVA = "0xEF49D0", Offset = "0xEF49D0", VA = "0xEF49D0")]
	public void tickDownRemainingTurns()
	{
	}

	[Token(Token = "0x6000CEA")]
	[Address(RVA = "0xEF4A5C", Offset = "0xEF4A5C", VA = "0xEF4A5C")]
	public EnemyGasCloud()
	{
	}
}
[Token(Token = "0x200026F")]
public class EnemyGasMan : EnemyParent
{
	[Token(Token = "0x2000270")]
	[CompilerGenerated]
	private sealed class <poisonGasAttack>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyGasMan <>4__this;

		[Token(Token = "0x170001C5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CF6")]
			[Address(RVA = "0xEF50A0", Offset = "0xEF50A0", VA = "0xEF50A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CF8")]
			[Address(RVA = "0xEF50E8", Offset = "0xEF50E8", VA = "0xEF50E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xEF4DEC", Offset = "0xEF4DEC", VA = "0xEF4DEC")]
		[DebuggerHidden]
		public <poisonGasAttack>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0xEF4E14", Offset = "0xEF4E14", VA = "0xEF4E14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0xEF4E18", Offset = "0xEF4E18", VA = "0xEF4E18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xEF50A8", Offset = "0xEF50A8", VA = "0xEF50A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000271")]
	[CompilerGenerated]
	private sealed class <castShotgunBlast>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyGasMan <>4__this;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x170001C7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CFC")]
			[Address(RVA = "0xEF53C4", Offset = "0xEF53C4", VA = "0xEF53C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CFE")]
			[Address(RVA = "0xEF540C", Offset = "0xEF540C", VA = "0xEF540C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xEF50F0", Offset = "0xEF50F0", VA = "0xEF50F0")]
		[DebuggerHidden]
		public <castShotgunBlast>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0xEF5118", Offset = "0xEF5118", VA = "0xEF5118", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xEF511C", Offset = "0xEF511C", VA = "0xEF511C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0xEF53CC", Offset = "0xEF53CC", VA = "0xEF53CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000272")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyGasMan <>4__this;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x170001C9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D02")]
			[Address(RVA = "0xEF56B4", Offset = "0xEF56B4", VA = "0xEF56B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D04")]
			[Address(RVA = "0xEF56FC", Offset = "0xEF56FC", VA = "0xEF56FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0xEF5414", Offset = "0xEF5414", VA = "0xEF5414")]
		[DebuggerHidden]
		public <shootProjectile>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0xEF543C", Offset = "0xEF543C", VA = "0xEF543C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0xEF5440", Offset = "0xEF5440", VA = "0xEF5440", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0xEF56BC", Offset = "0xEF56BC", VA = "0xEF56BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public EnemyGasCloud cloudPrefab;

	[Token(Token = "0x4000C7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject enemyProjectile;

	[Token(Token = "0x4000C7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000C7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public float projSpeed;

	[Token(Token = "0x4000C7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	public bool projectileAimOn;

	[Token(Token = "0x6000CEB")]
	[Address(RVA = "0xEF4A80", Offset = "0xEF4A80", VA = "0xEF4A80", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000CEC")]
	[Address(RVA = "0xEF4C0C", Offset = "0xEF4C0C", VA = "0xEF4C0C")]
	private new void Update()
	{
	}

	[Token(Token = "0x6000CED")]
	[Address(RVA = "0xEF4CA0", Offset = "0xEF4CA0", VA = "0xEF4CA0", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000CEE")]
	[Address(RVA = "0xEF4D1C", Offset = "0xEF4D1C", VA = "0xEF4D1C", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000CEF")]
	[Address(RVA = "0xEF4B3C", Offset = "0xEF4B3C", VA = "0xEF4B3C")]
	[IteratorStateMachine(typeof(<poisonGasAttack>d__9))]
	private IEnumerator poisonGasAttack()
	{
		return null;
	}

	[Token(Token = "0x6000CF0")]
	[Address(RVA = "0xEF4BA4", Offset = "0xEF4BA4", VA = "0xEF4BA4")]
	[IteratorStateMachine(typeof(<castShotgunBlast>d__10))]
	protected IEnumerator castShotgunBlast()
	{
		return null;
	}

	[Token(Token = "0x6000CF1")]
	[Address(RVA = "0xEF4D70", Offset = "0xEF4D70", VA = "0xEF4D70")]
	[IteratorStateMachine(typeof(<shootProjectile>d__11))]
	protected IEnumerator shootProjectile()
	{
		return null;
	}

	[Token(Token = "0x6000CF2")]
	[Address(RVA = "0xEF4DD8", Offset = "0xEF4DD8", VA = "0xEF4DD8")]
	public EnemyGasMan()
	{
	}
}
[Token(Token = "0x2000273")]
public class EnemyGhost : EnemyParent
{
	[Token(Token = "0x2000274")]
	[CompilerGenerated]
	private sealed class <spinBeam>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyGhost <>4__this;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x170001CB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D10")]
			[Address(RVA = "0xEF5E44", Offset = "0xEF5E44", VA = "0xEF5E44", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D12")]
			[Address(RVA = "0xEF5E8C", Offset = "0xEF5E8C", VA = "0xEF5E8C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0xEF59DC", Offset = "0xEF59DC", VA = "0xEF59DC")]
		[DebuggerHidden]
		public <spinBeam>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0xEF5C44", Offset = "0xEF5C44", VA = "0xEF5C44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0xEF5C48", Offset = "0xEF5C48", VA = "0xEF5C48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xEF5E4C", Offset = "0xEF5E4C", VA = "0xEF5E4C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000275")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemyProjectile;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyGhost <>4__this;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x170001CD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D16")]
			[Address(RVA = "0xEF6160", Offset = "0xEF6160", VA = "0xEF6160", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D18")]
			[Address(RVA = "0xEF61A8", Offset = "0xEF61A8", VA = "0xEF61A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0xEF5A78", Offset = "0xEF5A78", VA = "0xEF5A78")]
		[DebuggerHidden]
		public <shootProjectile>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0xEF5E94", Offset = "0xEF5E94", VA = "0xEF5E94", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0xEF5E98", Offset = "0xEF5E98", VA = "0xEF5E98", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0xEF6168", Offset = "0xEF6168", VA = "0xEF6168", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000C8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public float projSpeed;

	[Token(Token = "0x4000C8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject ghostLaserProj;

	[Token(Token = "0x4000C8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public int laserCount;

	[Token(Token = "0x4000C90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject deathParticle;

	[Token(Token = "0x4000C91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject bodyRoot;

	[Token(Token = "0x4000C92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GlitchEffects startGlitch;

	[Token(Token = "0x6000D05")]
	[Address(RVA = "0xEF5704", Offset = "0xEF5704", VA = "0xEF5704", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000D06")]
	[Address(RVA = "0xEF57AC", Offset = "0xEF57AC", VA = "0xEF57AC", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000D07")]
	[Address(RVA = "0xEF58F0", Offset = "0xEF58F0", VA = "0xEF58F0", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000D08")]
	[Address(RVA = "0xEF5988", Offset = "0xEF5988", VA = "0xEF5988", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000D09")]
	[Address(RVA = "0xEF5744", Offset = "0xEF5744", VA = "0xEF5744")]
	[IteratorStateMachine(typeof(<spinBeam>d__11))]
	protected IEnumerator spinBeam()
	{
		return null;
	}

	[Token(Token = "0x6000D0A")]
	[Address(RVA = "0xEF5A04", Offset = "0xEF5A04", VA = "0xEF5A04")]
	[IteratorStateMachine(typeof(<shootProjectile>d__12))]
	protected IEnumerator shootProjectile(GameObject enemyProjectile)
	{
		return null;
	}

	[Token(Token = "0x6000D0B")]
	[Address(RVA = "0xEF5AA0", Offset = "0xEF5AA0", VA = "0xEF5AA0", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000D0C")]
	[Address(RVA = "0xEF5C34", Offset = "0xEF5C34", VA = "0xEF5C34")]
	public EnemyGhost()
	{
	}
}
[Token(Token = "0x2000276")]
public class EnemyGnome : EnemyParent
{
	[Token(Token = "0x2000277")]
	[CompilerGenerated]
	private sealed class <castRapidFire>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyGnome <>4__this;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject <projectile>5__4;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion <rotation>5__5;

		[Token(Token = "0x170001CF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D29")]
			[Address(RVA = "0xEF70C0", Offset = "0xEF70C0", VA = "0xEF70C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D2B")]
			[Address(RVA = "0xEF7108", Offset = "0xEF7108", VA = "0xEF7108", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0xEF6630", Offset = "0xEF6630", VA = "0xEF6630")]
		[DebuggerHidden]
		public <castRapidFire>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0xEF6D64", Offset = "0xEF6D64", VA = "0xEF6D64", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0xEF6D68", Offset = "0xEF6D68", VA = "0xEF6D68", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xEF70C8", Offset = "0xEF70C8", VA = "0xEF70C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000278")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemyProjectile;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyGnome <>4__this;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x170001D1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D2F")]
			[Address(RVA = "0xEF73DC", Offset = "0xEF73DC", VA = "0xEF73DC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D31")]
			[Address(RVA = "0xEF7424", Offset = "0xEF7424", VA = "0xEF7424", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0xEF66CC", Offset = "0xEF66CC", VA = "0xEF66CC")]
		[DebuggerHidden]
		public <shootProjectile>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xEF7110", Offset = "0xEF7110", VA = "0xEF7110", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xEF7114", Offset = "0xEF7114", VA = "0xEF7114", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xEF73E4", Offset = "0xEF73E4", VA = "0xEF73E4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000C9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Rigidbody rb;

	[Token(Token = "0x4000C9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public NavMeshAgent agent;

	[Token(Token = "0x4000C9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private UnityEngine.Vector3 startPos;

	[Token(Token = "0x4000CA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private Quaternion startRot;

	[Token(Token = "0x4000CA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	public int numOfFastProjectiles;

	[Token(Token = "0x4000CA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000CA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public float projSpeed;

	[Token(Token = "0x4000CA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public GameObject projectile1;

	[Token(Token = "0x4000CA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public GameObject projectile2;

	[Token(Token = "0x4000CA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private float launchTimer;

	[Token(Token = "0x4000CA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private float launchCD;

	[Token(Token = "0x6000D19")]
	[Address(RVA = "0xEF61B0", Offset = "0xEF61B0", VA = "0xEF61B0", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000D1A")]
	[Address(RVA = "0xEF6320", Offset = "0xEF6320", VA = "0xEF6320", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000D1B")]
	[Address(RVA = "0xEF6588", Offset = "0xEF6588", VA = "0xEF6588", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000D1C")]
	[Address(RVA = "0xEF65C8", Offset = "0xEF65C8", VA = "0xEF65C8")]
	[IteratorStateMachine(typeof(<castRapidFire>d__14))]
	protected IEnumerator castRapidFire()
	{
		return null;
	}

	[Token(Token = "0x6000D1D")]
	[Address(RVA = "0xEF6658", Offset = "0xEF6658", VA = "0xEF6658")]
	[IteratorStateMachine(typeof(<shootProjectile>d__15))]
	protected IEnumerator shootProjectile(GameObject enemyProjectile)
	{
		return null;
	}

	[Token(Token = "0x6000D1E")]
	[Address(RVA = "0xEF66F4", Offset = "0xEF66F4", VA = "0xEF66F4", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000D1F")]
	[Address(RVA = "0xEF67DC", Offset = "0xEF67DC", VA = "0xEF67DC")]
	public void resetGnome()
	{
	}

	[Token(Token = "0x6000D20")]
	[Address(RVA = "0xEF6880", Offset = "0xEF6880", VA = "0xEF6880")]
	public void ragdollGnome()
	{
	}

	[Token(Token = "0x6000D21")]
	[Address(RVA = "0xEF68CC", Offset = "0xEF68CC", VA = "0xEF68CC", Slot = "14")]
	public override void damageEnemy(int amount, bool crit, int combo, BattleElementType element, bool isPhysical = false)
	{
	}

	[Token(Token = "0x6000D22")]
	[Address(RVA = "0xEF6988", Offset = "0xEF6988", VA = "0xEF6988")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000D23")]
	[Address(RVA = "0xEF6B90", Offset = "0xEF6B90", VA = "0xEF6B90")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x6000D24")]
	[Address(RVA = "0xEF6CA4", Offset = "0xEF6CA4", VA = "0xEF6CA4")]
	public void addForce(UnityEngine.Vector3 pos)
	{
	}

	[Token(Token = "0x6000D25")]
	[Address(RVA = "0xEF6D40", Offset = "0xEF6D40", VA = "0xEF6D40")]
	public EnemyGnome()
	{
	}
}
[Token(Token = "0x2000279")]
public class EnemyHomonuculous : EnemyParent
{
	[Token(Token = "0x200027A")]
	[CompilerGenerated]
	private sealed class <tonberryAttack>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyHomonuculous <>4__this;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <runTime>5__2;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <maxRunTime>5__3;

		[Token(Token = "0x170001D3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D3C")]
			[Address(RVA = "0xEF7A5C", Offset = "0xEF7A5C", VA = "0xEF7A5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D3E")]
			[Address(RVA = "0xEF7AA4", Offset = "0xEF7AA4", VA = "0xEF7AA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xEF76B4", Offset = "0xEF76B4", VA = "0xEF76B4")]
		[DebuggerHidden]
		public <tonberryAttack>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xEF76EC", Offset = "0xEF76EC", VA = "0xEF76EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xEF76F0", Offset = "0xEF76F0", VA = "0xEF76F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xEF7A64", Offset = "0xEF7A64", VA = "0xEF7A64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000CB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	public float runSpeed;

	[Token(Token = "0x6000D32")]
	[Address(RVA = "0xEF742C", Offset = "0xEF742C", VA = "0xEF742C", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000D33")]
	[Address(RVA = "0xEF7434", Offset = "0xEF7434", VA = "0xEF7434", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000D34")]
	[Address(RVA = "0xEF7528", Offset = "0xEF7528", VA = "0xEF7528", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000D35")]
	[Address(RVA = "0xEF75D0", Offset = "0xEF75D0", VA = "0xEF75D0", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000D36")]
	[Address(RVA = "0xEF7630", Offset = "0xEF7630", VA = "0xEF7630", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000D37")]
	[Address(RVA = "0xEF7568", Offset = "0xEF7568", VA = "0xEF7568")]
	[IteratorStateMachine(typeof(<tonberryAttack>d__6))]
	private IEnumerator tonberryAttack()
	{
		return null;
	}

	[Token(Token = "0x6000D38")]
	[Address(RVA = "0xEF76DC", Offset = "0xEF76DC", VA = "0xEF76DC")]
	public EnemyHomonuculous()
	{
	}
}
[Token(Token = "0x200027B")]
public class EnemyIcicle : EnemyParent
{
	[Token(Token = "0x200027C")]
	[CompilerGenerated]
	private sealed class <iceBeams>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyIcicle <>4__this;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3[] <launchPoints>5__2;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <numOfShots>5__3;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <i>5__4;

		[Token(Token = "0x170001D5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D49")]
			[Address(RVA = "0xEF8740", Offset = "0xEF8740", VA = "0xEF8740", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D4B")]
			[Address(RVA = "0xEF8788", Offset = "0xEF8788", VA = "0xEF8788", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0xEF7FF4", Offset = "0xEF7FF4", VA = "0xEF7FF4")]
		[DebuggerHidden]
		public <iceBeams>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xEF8330", Offset = "0xEF8330", VA = "0xEF8330", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xEF8334", Offset = "0xEF8334", VA = "0xEF8334", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xEF8748", Offset = "0xEF8748", VA = "0xEF8748", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200027D")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemyProjectile;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyIcicle <>4__this;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float speed;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x170001D7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D4F")]
			[Address(RVA = "0xEF89F4", Offset = "0xEF89F4", VA = "0xEF89F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D51")]
			[Address(RVA = "0xEF8A3C", Offset = "0xEF8A3C", VA = "0xEF8A3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xEF80A0", Offset = "0xEF80A0", VA = "0xEF80A0")]
		[DebuggerHidden]
		public <shootProjectile>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xEF8790", Offset = "0xEF8790", VA = "0xEF8790", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xEF8794", Offset = "0xEF8794", VA = "0xEF8794", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xEF89FC", Offset = "0xEF89FC", VA = "0xEF89FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000CBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject iceBeamPrefab;

	[Token(Token = "0x4000CBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private UnityEngine.Vector3 startPos;

	[Token(Token = "0x4000CBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	public float f8speed;

	[Token(Token = "0x4000CBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public float xScale;

	[Token(Token = "0x4000CBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	public float yScale;

	[Token(Token = "0x4000CC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private bool isCentering;

	[Token(Token = "0x4000CC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public Transform bodyRoot;

	[Token(Token = "0x4000CC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private UnityEngine.Vector3 projTransOrigin;

	[Token(Token = "0x6000D3F")]
	[Address(RVA = "0xEF7AAC", Offset = "0xEF7AAC", VA = "0xEF7AAC", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000D40")]
	[Address(RVA = "0xEF7B90", Offset = "0xEF7B90", VA = "0xEF7B90")]
	private new void Update()
	{
	}

	[Token(Token = "0x6000D41")]
	[Address(RVA = "0xEF7F5C", Offset = "0xEF7F5C", VA = "0xEF7F5C", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000D42")]
	[Address(RVA = "0xEF7F8C", Offset = "0xEF7F8C", VA = "0xEF7F8C")]
	[IteratorStateMachine(typeof(<iceBeams>d__11))]
	private IEnumerator iceBeams()
	{
		return null;
	}

	[Token(Token = "0x6000D43")]
	[Address(RVA = "0xEF801C", Offset = "0xEF801C", VA = "0xEF801C")]
	[IteratorStateMachine(typeof(<shootProjectile>d__12))]
	protected IEnumerator shootProjectile(GameObject enemyProjectile, float speed)
	{
		return null;
	}

	[Token(Token = "0x6000D44")]
	[Address(RVA = "0xEF80C8", Offset = "0xEF80C8", VA = "0xEF80C8", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000D45")]
	[Address(RVA = "0xEF8308", Offset = "0xEF8308", VA = "0xEF8308")]
	public EnemyIcicle()
	{
	}
}
[Token(Token = "0x200027E")]
public class BurstBeam : MonoBehaviour
{
	[Token(Token = "0x4000CD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LineRenderer lineRend;

	[Token(Token = "0x4000CD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject particleStart;

	[Token(Token = "0x4000CD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject particleEnd;

	[Token(Token = "0x4000CD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform burstBeamEnd;

	[Token(Token = "0x4000CD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform handTrans;

	[Token(Token = "0x6000D52")]
	[Address(RVA = "0xEF8A44", Offset = "0xEF8A44", VA = "0xEF8A44")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D53")]
	[Address(RVA = "0xEF8AD0", Offset = "0xEF8AD0", VA = "0xEF8AD0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D54")]
	[Address(RVA = "0xEF8BAC", Offset = "0xEF8BAC", VA = "0xEF8BAC")]
	public BurstBeam()
	{
	}
}
[Token(Token = "0x200027F")]
public class EnemyJohnnyMech : EnemyParent
{
	[Token(Token = "0x2000280")]
	[CompilerGenerated]
	private sealed class <handSmack>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyJohnnyMech <>4__this;

		[Token(Token = "0x170001D9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D69")]
			[Address(RVA = "0xEF9740", Offset = "0xEF9740", VA = "0xEF9740", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D6B")]
			[Address(RVA = "0xEF9788", Offset = "0xEF9788", VA = "0xEF9788", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0xEF8E7C", Offset = "0xEF8E7C", VA = "0xEF8E7C")]
		[DebuggerHidden]
		public <handSmack>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xEF95A4", Offset = "0xEF95A4", VA = "0xEF95A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xEF95A8", Offset = "0xEF95A8", VA = "0xEF95A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0xEF9748", Offset = "0xEF9748", VA = "0xEF9748", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000281")]
	[CompilerGenerated]
	private sealed class <introAttack>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyJohnnyMech <>4__this;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BurstBeam <beam>5__2;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject <bryce>5__3;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AllyBryceBarbarian <bryceAlly>5__4;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Sprite <portrait>5__5;

		[Token(Token = "0x170001DB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D6F")]
			[Address(RVA = "0xEFA350", Offset = "0xEFA350", VA = "0xEFA350", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D71")]
			[Address(RVA = "0xEFA398", Offset = "0xEFA398", VA = "0xEFA398", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0xEF8EA4", Offset = "0xEF8EA4", VA = "0xEF8EA4")]
		[DebuggerHidden]
		public <introAttack>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0xEF9790", Offset = "0xEF9790", VA = "0xEF9790", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xEF9794", Offset = "0xEF9794", VA = "0xEF9794", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xEFA358", Offset = "0xEFA358", VA = "0xEFA358", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000282")]
	[CompilerGenerated]
	private sealed class <deathTimer>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyJohnnyMech <>4__this;

		[Token(Token = "0x170001DD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0xEFA4A8", Offset = "0xEFA4A8", VA = "0xEFA4A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D77")]
			[Address(RVA = "0xEFA4F0", Offset = "0xEFA4F0", VA = "0xEFA4F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xEF9254", Offset = "0xEF9254", VA = "0xEF9254")]
		[DebuggerHidden]
		public <deathTimer>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0xEFA3A0", Offset = "0xEFA3A0", VA = "0xEFA3A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0xEFA3A4", Offset = "0xEFA3A4", VA = "0xEFA3A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0xEFA4B0", Offset = "0xEFA4B0", VA = "0xEFA4B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000283")]
	[CompilerGenerated]
	private sealed class <disolveMaterial>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int rendNum;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyJohnnyMech <>4__this;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <disolve>5__2;

		[Token(Token = "0x170001DF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0xEFA6C0", Offset = "0xEFA6C0", VA = "0xEFA6C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D7D")]
			[Address(RVA = "0xEFA708", Offset = "0xEFA708", VA = "0xEFA708", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0xEF927C", Offset = "0xEF927C", VA = "0xEF927C")]
		[DebuggerHidden]
		public <disolveMaterial>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0xEFA4F8", Offset = "0xEFA4F8", VA = "0xEFA4F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0xEFA4FC", Offset = "0xEFA4FC", VA = "0xEFA4FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0xEFA6C8", Offset = "0xEFA6C8", VA = "0xEFA6C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000284")]
	[CompilerGenerated]
	private sealed class <tripleFire>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyJohnnyMech <>4__this;

		[Token(Token = "0x170001E1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0xEFA99C", Offset = "0xEFA99C", VA = "0xEFA99C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D83")]
			[Address(RVA = "0xEFA9E4", Offset = "0xEFA9E4", VA = "0xEFA9E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0xEF92A4", Offset = "0xEF92A4", VA = "0xEF92A4")]
		[DebuggerHidden]
		public <tripleFire>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0xEFA710", Offset = "0xEFA710", VA = "0xEFA710", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0xEFA714", Offset = "0xEFA714", VA = "0xEFA714", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0xEFA9A4", Offset = "0xEFA9A4", VA = "0xEFA9A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000285")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemyProjectile;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform launchTrans;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EnemyJohnnyMech <>4__this;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float speedMult;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x170001E3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D87")]
			[Address(RVA = "0xEFACC8", Offset = "0xEFACC8", VA = "0xEFACC8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D89")]
			[Address(RVA = "0xEFAD10", Offset = "0xEFAD10", VA = "0xEFAD10", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0xEF9358", Offset = "0xEF9358", VA = "0xEF9358")]
		[DebuggerHidden]
		public <shootProjectile>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0xEFA9EC", Offset = "0xEFA9EC", VA = "0xEFA9EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0xEFA9F0", Offset = "0xEFA9F0", VA = "0xEFA9F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xEFACD0", Offset = "0xEFACD0", VA = "0xEFACD0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000286")]
	[CompilerGenerated]
	private sealed class <castBulletHell>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyJohnnyMech <>4__this;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject projectile;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform launchTrans;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool endturn;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool <ignoreStraights>5__4;

		[Token(Token = "0x170001E5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D8D")]
			[Address(RVA = "0xEFB030", Offset = "0xEFB030", VA = "0xEFB030", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D8F")]
			[Address(RVA = "0xEFB078", Offset = "0xEFB078", VA = "0xEFB078", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xEF9410", Offset = "0xEF9410", VA = "0xEF9410")]
		[DebuggerHidden]
		public <castBulletHell>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xEFAD18", Offset = "0xEFAD18", VA = "0xEFAD18", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0xEFAD1C", Offset = "0xEFAD1C", VA = "0xEFAD1C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xEFB038", Offset = "0xEFB038", VA = "0xEFB038", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000CD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public EnemyJohnnyMechArm[] arms;

	[Token(Token = "0x4000CD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public BattleDialogueBox dialogueBox;

	[Token(Token = "0x4000CD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Transform dialoguePos;

	[Token(Token = "0x4000CD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public string[] dialogue1;

	[Token(Token = "0x4000CD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject basicProjectile;

	[Token(Token = "0x4000CDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject homingProjectile;

	[Token(Token = "0x4000CDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GameObject crossProjectile;

	[Token(Token = "0x4000CDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public GameObject squareProjectile;

	[Token(Token = "0x4000CDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public GameObject SineXProjectile;

	[Token(Token = "0x4000CDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public Renderer mainRenderer;

	[Token(Token = "0x4000CDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private float projSpeed;

	[Token(Token = "0x4000CE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	public bool rightArmDead;

	[Token(Token = "0x4000CE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18D")]
	public bool leftArmDead;

	[Token(Token = "0x4000CE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public AudioClip[] soundEffects;

	[Token(Token = "0x4000CE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000CE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public GameObject deathParticle;

	[Token(Token = "0x4000CE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private int turnNum;

	[Token(Token = "0x4000CE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	public bool godMode;

	[Token(Token = "0x6000D55")]
	[Address(RVA = "0xEF8BB4", Offset = "0xEF8BB4", VA = "0xEF8BB4", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000D56")]
	[Address(RVA = "0xEF8D4C", Offset = "0xEF8D4C", VA = "0xEF8D4C")]
	public void playDialogue(string dialogue)
	{
	}

	[Token(Token = "0x6000D57")]
	[Address(RVA = "0xEF8CE4", Offset = "0xEF8CE4", VA = "0xEF8CE4")]
	[IteratorStateMachine(typeof(<handSmack>d__20))]
	private IEnumerator handSmack()
	{
		return null;
	}

	[Token(Token = "0x6000D58")]
	[Address(RVA = "0xEF8C14", Offset = "0xEF8C14", VA = "0xEF8C14")]
	[IteratorStateMachine(typeof(<introAttack>d__21))]
	private IEnumerator introAttack()
	{
		return null;
	}

	[Token(Token = "0x6000D59")]
	[Address(RVA = "0xEF8ECC", Offset = "0xEF8ECC", VA = "0xEF8ECC", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000D5A")]
	[Address(RVA = "0xEF8F60", Offset = "0xEF8F60", VA = "0xEF8F60", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000D5B")]
	[Address(RVA = "0xEF8F68", Offset = "0xEF8F68", VA = "0xEF8F68", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000D5C")]
	[Address(RVA = "0xEF91EC", Offset = "0xEF91EC", VA = "0xEF91EC")]
	[IteratorStateMachine(typeof(<deathTimer>d__25))]
	private IEnumerator deathTimer()
	{
		return null;
	}

	[Token(Token = "0x6000D5D")]
	[Address(RVA = "0xEF9174", Offset = "0xEF9174", VA = "0xEF9174")]
	[IteratorStateMachine(typeof(<disolveMaterial>d__26))]
	protected IEnumerator disolveMaterial(int rendNum)
	{
		return null;
	}

	[Token(Token = "0x6000D5E")]
	[Address(RVA = "0xEF8C7C", Offset = "0xEF8C7C", VA = "0xEF8C7C")]
	[IteratorStateMachine(typeof(<tripleFire>d__27))]
	private IEnumerator tripleFire()
	{
		return null;
	}

	[Token(Token = "0x6000D5F")]
	[Address(RVA = "0xEF92CC", Offset = "0xEF92CC", VA = "0xEF92CC")]
	[IteratorStateMachine(typeof(<shootProjectile>d__28))]
	protected IEnumerator shootProjectile(GameObject enemyProjectile, Transform launchTrans, float speedMult = 1f)
	{
		return null;
	}

	[Token(Token = "0x6000D60")]
	[Address(RVA = "0xEF9380", Offset = "0xEF9380", VA = "0xEF9380")]
	[IteratorStateMachine(typeof(<castBulletHell>d__29))]
	protected IEnumerator castBulletHell(GameObject projectile, Transform launchTrans, bool endturn = false)
	{
		return null;
	}

	[Token(Token = "0x6000D61")]
	[Address(RVA = "0xEF9438", Offset = "0xEF9438", VA = "0xEF9438", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000D62")]
	[Address(RVA = "0xEF94E8", Offset = "0xEF94E8", VA = "0xEF94E8", Slot = "9")]
	public override void damageEnemy(int amount)
	{
	}

	[Token(Token = "0x6000D63")]
	[Address(RVA = "0xEF9530", Offset = "0xEF9530", VA = "0xEF9530", Slot = "14")]
	public override void damageEnemy(int amount, bool crit, int combo, BattleElementType element, bool isPhysical = false)
	{
	}

	[Token(Token = "0x6000D64")]
	[Address(RVA = "0xEF9584", Offset = "0xEF9584", VA = "0xEF9584")]
	public EnemyJohnnyMech()
	{
	}
}
[Token(Token = "0x2000287")]
public class EnemyJohnnyMechArm : EnemyParent
{
	[Token(Token = "0x2000288")]
	[CompilerGenerated]
	private sealed class <disolveMaterial>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyJohnnyMechArm <>4__this;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int rendNum;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <disolve>5__2;

		[Token(Token = "0x170001E7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0xEFB554", Offset = "0xEFB554", VA = "0xEFB554", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0xEFB59C", Offset = "0xEFB59C", VA = "0xEFB59C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0xEFB290", Offset = "0xEFB290", VA = "0xEFB290")]
		[DebuggerHidden]
		public <disolveMaterial>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0xEFB3C8", Offset = "0xEFB3C8", VA = "0xEFB3C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0xEFB3CC", Offset = "0xEFB3CC", VA = "0xEFB3CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0xEFB55C", Offset = "0xEFB55C", VA = "0xEFB55C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public EnemyJohnnyMech boss;

	[Token(Token = "0x4000D0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public bool rightArm;

	[Token(Token = "0x4000D0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public AudioSource source;

	[Token(Token = "0x6000D90")]
	[Address(RVA = "0xEFB080", Offset = "0xEFB080", VA = "0xEFB080", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000D91")]
	[Address(RVA = "0xEFB094", Offset = "0xEFB094", VA = "0xEFB094", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000D92")]
	[Address(RVA = "0xEFB0D8", Offset = "0xEFB0D8", VA = "0xEFB0D8", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000D93")]
	[Address(RVA = "0xEFB0E0", Offset = "0xEFB0E0", VA = "0xEFB0E0", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000D94")]
	[Address(RVA = "0xEFB164", Offset = "0xEFB164", VA = "0xEFB164", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000D95")]
	[Address(RVA = "0xEFB218", Offset = "0xEFB218", VA = "0xEFB218")]
	[IteratorStateMachine(typeof(<disolveMaterial>d__8))]
	protected IEnumerator disolveMaterial(int rendNum)
	{
		return null;
	}

	[Token(Token = "0x6000D96")]
	[Address(RVA = "0xEFB2B8", Offset = "0xEFB2B8", VA = "0xEFB2B8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000D97")]
	[Address(RVA = "0xEFB364", Offset = "0xEFB364", VA = "0xEFB364", Slot = "9")]
	public override void damageEnemy(int amount)
	{
	}

	[Token(Token = "0x6000D98")]
	[Address(RVA = "0xEFB38C", Offset = "0xEFB38C", VA = "0xEFB38C", Slot = "14")]
	public override void damageEnemy(int amount, bool crit, int combo, BattleElementType element, bool isPhysical = false)
	{
	}

	[Token(Token = "0x6000D99")]
	[Address(RVA = "0xEFB3C0", Offset = "0xEFB3C0", VA = "0xEFB3C0")]
	public EnemyJohnnyMechArm()
	{
	}
}
[Token(Token = "0x2000289")]
public class EnemyJohnnyBoss : EnemyParent
{
	[Token(Token = "0x200028A")]
	public enum JohnnyState
	{
		[Token(Token = "0x4000D24")]
		start,
		[Token(Token = "0x4000D25")]
		mid,
		[Token(Token = "0x4000D26")]
		nearDeath,
		[Token(Token = "0x4000D27")]
		nearDeath2,
		[Token(Token = "0x4000D28")]
		death
	}

	[Token(Token = "0x200028B")]
	[CompilerGenerated]
	private sealed class <turn1Attack>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyJohnnyBoss <>4__this;

		[Token(Token = "0x170001E9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DB6")]
			[Address(RVA = "0xEFC57C", Offset = "0xEFC57C", VA = "0xEFC57C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DB8")]
			[Address(RVA = "0xEFC5C4", Offset = "0xEFC5C4", VA = "0xEFC5C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0xEFBA38", Offset = "0xEFBA38", VA = "0xEFBA38")]
		[DebuggerHidden]
		public <turn1Attack>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0xEFC43C", Offset = "0xEFC43C", VA = "0xEFC43C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0xEFC440", Offset = "0xEFC440", VA = "0xEFC440", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0xEFC584", Offset = "0xEFC584", VA = "0xEFC584", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200028C")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemyProjectile;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform launchTrans;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EnemyJohnnyBoss <>4__this;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool delay;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float speedMult;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x170001EB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0xEFC88C", Offset = "0xEFC88C", VA = "0xEFC88C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DBE")]
			[Address(RVA = "0xEFC8D4", Offset = "0xEFC8D4", VA = "0xEFC8D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0xEFBB00", Offset = "0xEFBB00", VA = "0xEFBB00")]
		[DebuggerHidden]
		public <shootProjectile>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0xEFC5CC", Offset = "0xEFC5CC", VA = "0xEFC5CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0xEFC5D0", Offset = "0xEFC5D0", VA = "0xEFC5D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0xEFC894", Offset = "0xEFC894", VA = "0xEFC894", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200028D")]
	[CompilerGenerated]
	private sealed class <nearDeathAttack>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyJohnnyBoss <>4__this;

		[Token(Token = "0x170001ED")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DC2")]
			[Address(RVA = "0xEFCB88", Offset = "0xEFCB88", VA = "0xEFCB88", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DC4")]
			[Address(RVA = "0xEFCBD0", Offset = "0xEFCBD0", VA = "0xEFCBD0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0xEFBB28", Offset = "0xEFBB28", VA = "0xEFBB28")]
		[DebuggerHidden]
		public <nearDeathAttack>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0xEFC8DC", Offset = "0xEFC8DC", VA = "0xEFC8DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0xEFC8E0", Offset = "0xEFC8E0", VA = "0xEFC8E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0xEFCB90", Offset = "0xEFCB90", VA = "0xEFCB90", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200028E")]
	[CompilerGenerated]
	private sealed class <castBulletHell>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyJohnnyBoss <>4__this;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <ignoreStraights>5__4;

		[Token(Token = "0x170001EF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DC8")]
			[Address(RVA = "0xEFCE74", Offset = "0xEFCE74", VA = "0xEFCE74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DCA")]
			[Address(RVA = "0xEFCEBC", Offset = "0xEFCEBC", VA = "0xEFCEBC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0xEFBBB8", Offset = "0xEFBBB8", VA = "0xEFBBB8")]
		[DebuggerHidden]
		public <castBulletHell>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0xEFCBD8", Offset = "0xEFCBD8", VA = "0xEFCBD8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0xEFCBDC", Offset = "0xEFCBDC", VA = "0xEFCBDC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0xEFCE7C", Offset = "0xEFCE7C", VA = "0xEFCE7C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200028F")]
	[CompilerGenerated]
	private sealed class <angledBeamAttacks>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyJohnnyBoss <>4__this;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 <originalPos>5__2;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion <originalRot>5__3;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int <i>5__4;

		[Token(Token = "0x170001F1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DCE")]
			[Address(RVA = "0xEFD250", Offset = "0xEFD250", VA = "0xEFD250", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0xEFD298", Offset = "0xEFD298", VA = "0xEFD298", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0xEFBBE0", Offset = "0xEFBBE0", VA = "0xEFBBE0")]
		[DebuggerHidden]
		public <angledBeamAttacks>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0xEFCEC4", Offset = "0xEFCEC4", VA = "0xEFCEC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0xEFCEC8", Offset = "0xEFCEC8", VA = "0xEFCEC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0xEFD258", Offset = "0xEFD258", VA = "0xEFD258", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000290")]
	[CompilerGenerated]
	private sealed class <castShotgunBlast>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyJohnnyBoss <>4__this;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x170001F3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DD4")]
			[Address(RVA = "0xEFD4C8", Offset = "0xEFD4C8", VA = "0xEFD4C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DD6")]
			[Address(RVA = "0xEFD510", Offset = "0xEFD510", VA = "0xEFD510", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0xEFBC70", Offset = "0xEFBC70", VA = "0xEFBC70")]
		[DebuggerHidden]
		public <castShotgunBlast>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0xEFD2A0", Offset = "0xEFD2A0", VA = "0xEFD2A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0xEFD2A4", Offset = "0xEFD2A4", VA = "0xEFD2A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0xEFD4D0", Offset = "0xEFD4D0", VA = "0xEFD4D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000291")]
	[CompilerGenerated]
	private sealed class <sideBeamAttack>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyJohnnyBoss <>4__this;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 <originalPos>5__2;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion <originalRot>5__3;

		[Token(Token = "0x170001F5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DDA")]
			[Address(RVA = "0xEFDA00", Offset = "0xEFDA00", VA = "0xEFDA00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DDC")]
			[Address(RVA = "0xEFDA48", Offset = "0xEFDA48", VA = "0xEFDA48", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0xEFBC98", Offset = "0xEFBC98", VA = "0xEFBC98")]
		[DebuggerHidden]
		public <sideBeamAttack>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0xEFD518", Offset = "0xEFD518", VA = "0xEFD518", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0xEFD51C", Offset = "0xEFD51C", VA = "0xEFD51C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0xEFDA08", Offset = "0xEFDA08", VA = "0xEFDA08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000292")]
	[CompilerGenerated]
	private sealed class <animateOddsText>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyJohnnyBoss <>4__this;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float target;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <jOdds>5__2;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <aOdds>5__3;

		[Token(Token = "0x170001F7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DE0")]
			[Address(RVA = "0xEFDCAC", Offset = "0xEFDCAC", VA = "0xEFDCAC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DE2")]
			[Address(RVA = "0xEFDCF4", Offset = "0xEFDCF4", VA = "0xEFDCF4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0xEFBCC0", Offset = "0xEFBCC0", VA = "0xEFBCC0")]
		[DebuggerHidden]
		public <animateOddsText>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0xEFDA50", Offset = "0xEFDA50", VA = "0xEFDA50", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0xEFDA54", Offset = "0xEFDA54", VA = "0xEFDA54", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0xEFDCB4", Offset = "0xEFDCB4", VA = "0xEFDCB4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000293")]
	[CompilerGenerated]
	private sealed class <spawnCards>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyJohnnyBoss <>4__this;

		[Token(Token = "0x170001F9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DE6")]
			[Address(RVA = "0xEFE32C", Offset = "0xEFE32C", VA = "0xEFE32C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DE8")]
			[Address(RVA = "0xEFE374", Offset = "0xEFE374", VA = "0xEFE374", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0xEFBCE8", Offset = "0xEFBCE8", VA = "0xEFBCE8")]
		[DebuggerHidden]
		public <spawnCards>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0xEFDCFC", Offset = "0xEFDCFC", VA = "0xEFDCFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0xEFDD00", Offset = "0xEFDD00", VA = "0xEFDD00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xEFE334", Offset = "0xEFE334", VA = "0xEFE334", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000294")]
	[CompilerGenerated]
	private sealed class <deathDelay>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyJohnnyBoss <>4__this;

		[Token(Token = "0x170001FB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DEC")]
			[Address(RVA = "0xEFE480", Offset = "0xEFE480", VA = "0xEFE480", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DEE")]
			[Address(RVA = "0xEFE4C8", Offset = "0xEFE4C8", VA = "0xEFE4C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xEFC120", Offset = "0xEFC120", VA = "0xEFC120")]
		[DebuggerHidden]
		public <deathDelay>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xEFE37C", Offset = "0xEFE37C", VA = "0xEFE37C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xEFE380", Offset = "0xEFE380", VA = "0xEFE380", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xEFE488", Offset = "0xEFE488", VA = "0xEFE488", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public BattleDialogueBox dialogueBox;

	[Token(Token = "0x4000D16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public Transform dialoguePos;

	[Token(Token = "0x4000D17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public string[] dialogue1;

	[Token(Token = "0x4000D18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public EnemyParent enemyAceCard;

	[Token(Token = "0x4000D19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public EnemyParent enemy8Card;

	[Token(Token = "0x4000D1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private int turnNum;

	[Token(Token = "0x4000D1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private int turnsSicneCards;

	[Token(Token = "0x4000D1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public float projSpeed;

	[Token(Token = "0x4000D1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public GameObject beamProjectile;

	[Token(Token = "0x4000D1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public GameObject cardProjectile;

	[Token(Token = "0x4000D1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public Transform launchTrans2;

	[Token(Token = "0x4000D20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public TMP_Text jText;

	[Token(Token = "0x4000D21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public TMP_Text aText;

	[Token(Token = "0x4000D22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public JohnnyState johnnyState;

	[Token(Token = "0x6000DA0")]
	[Address(RVA = "0xEFB5A4", Offset = "0xEFB5A4", VA = "0xEFB5A4")]
	private new void Start()
	{
	}

	[Token(Token = "0x6000DA1")]
	[Address(RVA = "0xEFB6CC", Offset = "0xEFB6CC", VA = "0xEFB6CC", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000DA2")]
	[Address(RVA = "0xEFB7B8", Offset = "0xEFB7B8", VA = "0xEFB7B8")]
	[IteratorStateMachine(typeof(<turn1Attack>d__17))]
	private IEnumerator turn1Attack()
	{
		return null;
	}

	[Token(Token = "0x6000DA3")]
	[Address(RVA = "0xEFBA60", Offset = "0xEFBA60", VA = "0xEFBA60")]
	[IteratorStateMachine(typeof(<shootProjectile>d__18))]
	protected IEnumerator shootProjectile(GameObject enemyProjectile, Transform launchTrans, float speedMult = 1f, bool delay = false)
	{
		return null;
	}

	[Token(Token = "0x6000DA4")]
	[Address(RVA = "0xEFB900", Offset = "0xEFB900", VA = "0xEFB900")]
	[IteratorStateMachine(typeof(<nearDeathAttack>d__19))]
	private IEnumerator nearDeathAttack()
	{
		return null;
	}

	[Token(Token = "0x6000DA5")]
	[Address(RVA = "0xEFBB50", Offset = "0xEFBB50", VA = "0xEFBB50")]
	[IteratorStateMachine(typeof(<castBulletHell>d__20))]
	protected IEnumerator castBulletHell()
	{
		return null;
	}

	[Token(Token = "0x6000DA6")]
	[Address(RVA = "0xEFB9D0", Offset = "0xEFB9D0", VA = "0xEFB9D0")]
	[IteratorStateMachine(typeof(<angledBeamAttacks>d__21))]
	private IEnumerator angledBeamAttacks()
	{
		return null;
	}

	[Token(Token = "0x6000DA7")]
	[Address(RVA = "0xEFBC08", Offset = "0xEFBC08", VA = "0xEFBC08")]
	[IteratorStateMachine(typeof(<castShotgunBlast>d__22))]
	protected IEnumerator castShotgunBlast()
	{
		return null;
	}

	[Token(Token = "0x6000DA8")]
	[Address(RVA = "0xEFB968", Offset = "0xEFB968", VA = "0xEFB968")]
	[IteratorStateMachine(typeof(<sideBeamAttack>d__23))]
	private IEnumerator sideBeamAttack()
	{
		return null;
	}

	[Token(Token = "0x6000DA9")]
	[Address(RVA = "0xEFB820", Offset = "0xEFB820", VA = "0xEFB820")]
	[IteratorStateMachine(typeof(<animateOddsText>d__24))]
	private IEnumerator animateOddsText(float target)
	{
		return null;
	}

	[Token(Token = "0x6000DAA")]
	[Address(RVA = "0xEFB898", Offset = "0xEFB898", VA = "0xEFB898")]
	[IteratorStateMachine(typeof(<spawnCards>d__25))]
	private IEnumerator spawnCards()
	{
		return null;
	}

	[Token(Token = "0x6000DAB")]
	[Address(RVA = "0xEFBD10", Offset = "0xEFBD10", VA = "0xEFBD10")]
	public void reEnableJohnny()
	{
	}

	[Token(Token = "0x6000DAC")]
	[Address(RVA = "0xEFBDF8", Offset = "0xEFBDF8", VA = "0xEFBDF8", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000DAD")]
	[Address(RVA = "0xEFBEA0", Offset = "0xEFBEA0", VA = "0xEFBEA0")]
	public void disableJohnny()
	{
	}

	[Token(Token = "0x6000DAE")]
	[Address(RVA = "0xEFBF88", Offset = "0xEFBF88", VA = "0xEFBF88")]
	public void playDialogue(string dialogue)
	{
	}

	[Token(Token = "0x6000DAF")]
	[Address(RVA = "0xEFC0B8", Offset = "0xEFC0B8", VA = "0xEFC0B8")]
	[IteratorStateMachine(typeof(<deathDelay>d__30))]
	private IEnumerator deathDelay()
	{
		return null;
	}

	[Token(Token = "0x6000DB0")]
	[Address(RVA = "0xEFC148", Offset = "0xEFC148", VA = "0xEFC148", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000DB1")]
	[Address(RVA = "0xEFC42C", Offset = "0xEFC42C", VA = "0xEFC42C")]
	public EnemyJohnnyBoss()
	{
	}
}
[Token(Token = "0x2000295")]
public class EnemyJohnnyStory : EnemyParent
{
	[Token(Token = "0x2000296")]
	[CompilerGenerated]
	private sealed class <deathTimer>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyJohnnyStory <>4__this;

		[Token(Token = "0x170001FD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000DF8")]
			[Address(RVA = "0xEFE798", Offset = "0xEFE798", VA = "0xEFE798", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0xEFE7E0", Offset = "0xEFE7E0", VA = "0xEFE7E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xEFE578", Offset = "0xEFE578", VA = "0xEFE578")]
		[DebuggerHidden]
		public <deathTimer>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xEFE5A8", Offset = "0xEFE5A8", VA = "0xEFE5A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xEFE5AC", Offset = "0xEFE5AC", VA = "0xEFE5AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xEFE7A0", Offset = "0xEFE7A0", VA = "0xEFE7A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6000DEF")]
	[Address(RVA = "0xEFE4D0", Offset = "0xEFE4D0", VA = "0xEFE4D0", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000DF0")]
	[Address(RVA = "0xEFE4E4", Offset = "0xEFE4E4", VA = "0xEFE4E4", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000DF1")]
	[Address(RVA = "0xEFE4EC", Offset = "0xEFE4EC", VA = "0xEFE4EC")]
	private new void Update()
	{
	}

	[Token(Token = "0x6000DF2")]
	[Address(RVA = "0xEFE4F0", Offset = "0xEFE4F0", VA = "0xEFE4F0", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000DF3")]
	[Address(RVA = "0xEFE510", Offset = "0xEFE510", VA = "0xEFE510")]
	[IteratorStateMachine(typeof(<deathTimer>d__4))]
	private IEnumerator deathTimer()
	{
		return null;
	}

	[Token(Token = "0x6000DF4")]
	[Address(RVA = "0xEFE5A0", Offset = "0xEFE5A0", VA = "0xEFE5A0")]
	public EnemyJohnnyStory()
	{
	}
}
[Token(Token = "0x2000297")]
public class EnemyPlayingCard : EnemyParent
{
	[Token(Token = "0x2000298")]
	[CompilerGenerated]
	private sealed class <castBulletHell>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyPlayingCard <>4__this;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <ignoreStraights>5__4;

		[Token(Token = "0x170001FF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E04")]
			[Address(RVA = "0xEFEF8C", Offset = "0xEFEF8C", VA = "0xEFEF8C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000200")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E06")]
			[Address(RVA = "0xEFEFD4", Offset = "0xEFEFD4", VA = "0xEFEFD4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xEFE880", Offset = "0xEFE880", VA = "0xEFE880")]
		[DebuggerHidden]
		public <castBulletHell>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xEFECB0", Offset = "0xEFECB0", VA = "0xEFECB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xEFECB4", Offset = "0xEFECB4", VA = "0xEFECB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xEFEF94", Offset = "0xEFEF94", VA = "0xEFEF94", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000299")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyPlayingCard <>4__this;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x17000201")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E0A")]
			[Address(RVA = "0xEFF2A8", Offset = "0xEFF2A8", VA = "0xEFF2A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000202")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E0C")]
			[Address(RVA = "0xEFF2F0", Offset = "0xEFF2F0", VA = "0xEFF2F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xEFE910", Offset = "0xEFE910", VA = "0xEFE910")]
		[DebuggerHidden]
		public <shootProjectile>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xEFEFDC", Offset = "0xEFEFDC", VA = "0xEFEFDC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xEFEFE0", Offset = "0xEFEFE0", VA = "0xEFEFE0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xEFF2B0", Offset = "0xEFF2B0", VA = "0xEFF2B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject enemyProjectile;

	[Token(Token = "0x4000D5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public float projSpeed;

	[Token(Token = "0x4000D5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	public int numOfFastProjectiles;

	[Token(Token = "0x4000D60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000D61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public bool isAceCard;

	[Token(Token = "0x6000DFB")]
	[Address(RVA = "0xEFE7E8", Offset = "0xEFE7E8", VA = "0xEFE7E8", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000DFC")]
	[Address(RVA = "0xEFE818", Offset = "0xEFE818", VA = "0xEFE818")]
	[IteratorStateMachine(typeof(<castBulletHell>d__6))]
	protected IEnumerator castBulletHell()
	{
		return null;
	}

	[Token(Token = "0x6000DFD")]
	[Address(RVA = "0xEFE8A8", Offset = "0xEFE8A8", VA = "0xEFE8A8")]
	[IteratorStateMachine(typeof(<shootProjectile>d__7))]
	private IEnumerator shootProjectile()
	{
		return null;
	}

	[Token(Token = "0x6000DFE")]
	[Address(RVA = "0xEFE938", Offset = "0xEFE938", VA = "0xEFE938", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000DFF")]
	[Address(RVA = "0xEFE98C", Offset = "0xEFE98C", VA = "0xEFE98C", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000E00")]
	[Address(RVA = "0xEFEC9C", Offset = "0xEFEC9C", VA = "0xEFEC9C")]
	public EnemyPlayingCard()
	{
	}
}
[Token(Token = "0x200029A")]
public class EnemyMechaBoat : EnemyParent
{
	[Token(Token = "0x200029B")]
	public enum BattlePhase
	{
		[Token(Token = "0x4000D82")]
		boatForm,
		[Token(Token = "0x4000D83")]
		mechForm
	}

	[Token(Token = "0x200029C")]
	[CompilerGenerated]
	private sealed class <firstAttack>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyMechaBoat <>4__this;

		[Token(Token = "0x17000203")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E1F")]
			[Address(RVA = "0xF000F8", Offset = "0xF000F8", VA = "0xF000F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000204")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E21")]
			[Address(RVA = "0xF00140", Offset = "0xF00140", VA = "0xF00140", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xEFF69C", Offset = "0xEFF69C", VA = "0xEFF69C")]
		[DebuggerHidden]
		public <firstAttack>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0xEFFFE8", Offset = "0xEFFFE8", VA = "0xEFFFE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xEFFFEC", Offset = "0xEFFFEC", VA = "0xEFFFEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0xF00100", Offset = "0xF00100", VA = "0xF00100", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200029D")]
	[CompilerGenerated]
	private sealed class <cannonAirRaid>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyMechaBoat <>4__this;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfShots>5__2;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <activeCannons>5__3;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <i>5__4;

		[Token(Token = "0x17000205")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E25")]
			[Address(RVA = "0xF00C40", Offset = "0xF00C40", VA = "0xF00C40", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000206")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E27")]
			[Address(RVA = "0xF00C88", Offset = "0xF00C88", VA = "0xF00C88", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0xEFF72C", Offset = "0xEFF72C", VA = "0xEFF72C")]
		[DebuggerHidden]
		public <cannonAirRaid>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0xF00148", Offset = "0xF00148", VA = "0xF00148", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0xF0014C", Offset = "0xF0014C", VA = "0xF0014C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0xF00C48", Offset = "0xF00C48", VA = "0xF00C48", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200029E")]
	[CompilerGenerated]
	private sealed class <spawnEnemy>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyMechaBoat <>4__this;

		[Token(Token = "0x17000207")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E2B")]
			[Address(RVA = "0xF00EAC", Offset = "0xF00EAC", VA = "0xF00EAC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000208")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E2D")]
			[Address(RVA = "0xF00EF4", Offset = "0xF00EF4", VA = "0xF00EF4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xEFF7BC", Offset = "0xEFF7BC", VA = "0xEFF7BC")]
		[DebuggerHidden]
		public <spawnEnemy>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xF00C90", Offset = "0xF00C90", VA = "0xF00C90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xF00C94", Offset = "0xF00C94", VA = "0xF00C94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xF00EB4", Offset = "0xF00EB4", VA = "0xF00EB4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200029F")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemyProjectile;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyMechaBoat <>4__this;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float speed;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x17000209")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E31")]
			[Address(RVA = "0xF01160", Offset = "0xF01160", VA = "0xF01160", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E33")]
			[Address(RVA = "0xF011A8", Offset = "0xF011A8", VA = "0xF011A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xEFF868", Offset = "0xEFF868", VA = "0xEFF868")]
		[DebuggerHidden]
		public <shootProjectile>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xF00EFC", Offset = "0xF00EFC", VA = "0xF00EFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xF00F00", Offset = "0xF00F00", VA = "0xF00F00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xF01168", Offset = "0xF01168", VA = "0xF01168", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002A0")]
	[CompilerGenerated]
	private sealed class <finalAttack>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyMechaBoat <>4__this;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MusicPlayer <player>5__2;

		[Token(Token = "0x1700020B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E37")]
			[Address(RVA = "0xF0149C", Offset = "0xF0149C", VA = "0xF0149C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E39")]
			[Address(RVA = "0xF014E4", Offset = "0xF014E4", VA = "0xF014E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0xEFF8F8", Offset = "0xEFF8F8", VA = "0xEFF8F8")]
		[DebuggerHidden]
		public <finalAttack>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0xF011B0", Offset = "0xF011B0", VA = "0xF011B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0xF011B4", Offset = "0xF011B4", VA = "0xF011B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0xF014A4", Offset = "0xF014A4", VA = "0xF014A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002A1")]
	[CompilerGenerated]
	private sealed class <moveBryceToShip>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyMechaBoat <>4__this;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MusicPlayer <music>5__2;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <originY>5__3;

		[Token(Token = "0x1700020D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E3D")]
			[Address(RVA = "0xF01BF4", Offset = "0xF01BF4", VA = "0xF01BF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E3F")]
			[Address(RVA = "0xF01C3C", Offset = "0xF01C3C", VA = "0xF01C3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0xEFF988", Offset = "0xEFF988", VA = "0xEFF988")]
		[DebuggerHidden]
		public <moveBryceToShip>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0xF014EC", Offset = "0xF014EC", VA = "0xF014EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0xF014F0", Offset = "0xF014F0", VA = "0xF014F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0xF01BFC", Offset = "0xF01BFC", VA = "0xF01BFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002A2")]
	[CompilerGenerated]
	private sealed class <sharkTimer>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyMechaBoat <>4__this;

		[Token(Token = "0x1700020F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E43")]
			[Address(RVA = "0xF01DD8", Offset = "0xF01DD8", VA = "0xF01DD8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000210")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E45")]
			[Address(RVA = "0xF01E20", Offset = "0xF01E20", VA = "0xF01E20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0xEFFF88", Offset = "0xEFFF88", VA = "0xEFFF88")]
		[DebuggerHidden]
		public <sharkTimer>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0xF01C44", Offset = "0xF01C44", VA = "0xF01C44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xF01C48", Offset = "0xF01C48", VA = "0xF01C48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0xF01DE0", Offset = "0xF01DE0", VA = "0xF01DE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002A3")]
	[CompilerGenerated]
	private sealed class <delayDeath>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyMechaBoat <>4__this;

		[Token(Token = "0x17000211")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E49")]
			[Address(RVA = "0xF01FA8", Offset = "0xF01FA8", VA = "0xF01FA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000212")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E4B")]
			[Address(RVA = "0xF01FF0", Offset = "0xF01FF0", VA = "0xF01FF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xEFFFB0", Offset = "0xEFFFB0", VA = "0xEFFFB0")]
		[DebuggerHidden]
		public <delayDeath>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xF01E28", Offset = "0xF01E28", VA = "0xF01E28", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xF01E2C", Offset = "0xF01E2C", VA = "0xF01E2C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xF01FB0", Offset = "0xF01FB0", VA = "0xF01FB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Animator bryceAnim;

	[Token(Token = "0x4000D6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public float projSpeed;

	[Token(Token = "0x4000D6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Transform[] cannonTransforms;

	[Token(Token = "0x4000D70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject cannonBall;

	[Token(Token = "0x4000D71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject cannonFireParticlePrefab;

	[Token(Token = "0x4000D72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject xIndicator;

	[Token(Token = "0x4000D73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public Transform mechaAAT;

	[Token(Token = "0x4000D74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public AudioClip bossTrack2;

	[Token(Token = "0x4000D75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public AudioClip finalSong;

	[Token(Token = "0x4000D76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public AudioSource cannonSound;

	[Token(Token = "0x4000D77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public GameObject boatCollider;

	[Token(Token = "0x4000D78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public EnemyParent[] enemiesToSpawn;

	[Token(Token = "0x4000D79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public BattleDialogueBox dialogueBox;

	[Token(Token = "0x4000D7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public string[] dialogueLines;

	[Token(Token = "0x4000D7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private bool finalAttackStarted;

	[Token(Token = "0x4000D7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	private UnityEngine.Vector3 originalProjPos;

	[Token(Token = "0x4000D7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[Header("Audio")]
	public AudioClip[] voiceClips;

	[Token(Token = "0x4000D7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public AudioClip[] attackClips;

	[Token(Token = "0x4000D7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private BattlePhase battlePhase;

	[Token(Token = "0x4000D80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	private int turnsTaken;

	[Token(Token = "0x6000E0D")]
	[Address(RVA = "0xEFF2F8", Offset = "0xEFF2F8", VA = "0xEFF2F8", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000E0E")]
	[Address(RVA = "0xEFF3C0", Offset = "0xEFF3C0", VA = "0xEFF3C0", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000E0F")]
	[Address(RVA = "0xEFF3C8", Offset = "0xEFF3C8", VA = "0xEFF3C8")]
	public void playDialogue(string dialogue)
	{
	}

	[Token(Token = "0x6000E10")]
	[Address(RVA = "0xEFF634", Offset = "0xEFF634", VA = "0xEFF634")]
	[IteratorStateMachine(typeof(<firstAttack>d__24))]
	private IEnumerator firstAttack()
	{
		return null;
	}

	[Token(Token = "0x6000E11")]
	[Address(RVA = "0xEFF6C4", Offset = "0xEFF6C4", VA = "0xEFF6C4")]
	[IteratorStateMachine(typeof(<cannonAirRaid>d__25))]
	private IEnumerator cannonAirRaid()
	{
		return null;
	}

	[Token(Token = "0x6000E12")]
	[Address(RVA = "0xEFF754", Offset = "0xEFF754", VA = "0xEFF754")]
	[IteratorStateMachine(typeof(<spawnEnemy>d__26))]
	private IEnumerator spawnEnemy()
	{
		return null;
	}

	[Token(Token = "0x6000E13")]
	[Address(RVA = "0xEFF7E4", Offset = "0xEFF7E4", VA = "0xEFF7E4")]
	[IteratorStateMachine(typeof(<shootProjectile>d__27))]
	protected IEnumerator shootProjectile(GameObject enemyProjectile, float speed)
	{
		return null;
	}

	[Token(Token = "0x6000E14")]
	[Address(RVA = "0xEFF890", Offset = "0xEFF890", VA = "0xEFF890")]
	[IteratorStateMachine(typeof(<finalAttack>d__28))]
	private IEnumerator finalAttack()
	{
		return null;
	}

	[Token(Token = "0x6000E15")]
	[Address(RVA = "0xEFF920", Offset = "0xEFF920", VA = "0xEFF920")]
	[IteratorStateMachine(typeof(<moveBryceToShip>d__29))]
	protected IEnumerator moveBryceToShip()
	{
		return null;
	}

	[Token(Token = "0x6000E16")]
	[Address(RVA = "0xEFF9B0", Offset = "0xEFF9B0", VA = "0xEFF9B0", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000E17")]
	[Address(RVA = "0xEFFC28", Offset = "0xEFFC28", VA = "0xEFFC28", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000E18")]
	[Address(RVA = "0xEFFD1C", Offset = "0xEFFD1C", VA = "0xEFFD1C", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000E19")]
	[Address(RVA = "0xEFFBC0", Offset = "0xEFFBC0", VA = "0xEFFBC0")]
	[IteratorStateMachine(typeof(<sharkTimer>d__33))]
	private IEnumerator sharkTimer()
	{
		return null;
	}

	[Token(Token = "0x6000E1A")]
	[Address(RVA = "0xEFFF20", Offset = "0xEFFF20", VA = "0xEFFF20")]
	[IteratorStateMachine(typeof(<delayDeath>d__34))]
	private IEnumerator delayDeath()
	{
		return null;
	}

	[Token(Token = "0x6000E1B")]
	[Address(RVA = "0xEFFFD8", Offset = "0xEFFFD8", VA = "0xEFFFD8")]
	public EnemyMechaBoat()
	{
	}
}
[Token(Token = "0x20002A4")]
public class EnemySharkAttack : MonoBehaviour
{
	[Token(Token = "0x20002A5")]
	[CompilerGenerated]
	private sealed class <jumpAttackTimer>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemySharkAttack <>4__this;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MusicPlayer <player>5__2;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <vol>5__3;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <randomJump>5__4;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.Vector3 <nextPos>5__5;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private UnityEngine.Vector3 <currentHeadPos>5__6;

		[Token(Token = "0x17000213")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E54")]
			[Address(RVA = "0xF0300C", Offset = "0xF0300C", VA = "0xF0300C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000214")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E56")]
			[Address(RVA = "0xF03054", Offset = "0xF03054", VA = "0xF03054", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0xF02064", Offset = "0xF02064", VA = "0xF02064")]
		[DebuggerHidden]
		public <jumpAttackTimer>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0xF02150", Offset = "0xF02150", VA = "0xF02150", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0xF02154", Offset = "0xF02154", VA = "0xF02154", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0xF03014", Offset = "0xF03014", VA = "0xF03014", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000DA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] spawnPoints;

	[Token(Token = "0x4000DA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] jumpPoints;

	[Token(Token = "0x4000DA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject splashParticle;

	[Token(Token = "0x4000DA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource splashSound;

	[Token(Token = "0x4000DAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource chompSound;

	[Token(Token = "0x4000DAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource warningSound;

	[Token(Token = "0x4000DAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float swimSpeed;

	[Token(Token = "0x4000DAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int damage;

	[Token(Token = "0x6000E4C")]
	[Address(RVA = "0xF01FF8", Offset = "0xF01FF8", VA = "0xF01FF8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E4D")]
	[Address(RVA = "0xF01DB8", Offset = "0xF01DB8", VA = "0xF01DB8")]
	public void useJumpAttack()
	{
	}

	[Token(Token = "0x6000E4E")]
	[Address(RVA = "0xF01FFC", Offset = "0xF01FFC", VA = "0xF01FFC")]
	[IteratorStateMachine(typeof(<jumpAttackTimer>d__10))]
	private IEnumerator jumpAttackTimer()
	{
		return null;
	}

	[Token(Token = "0x6000E4F")]
	[Address(RVA = "0xF0208C", Offset = "0xF0208C", VA = "0xF0208C")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x6000E50")]
	[Address(RVA = "0xF02140", Offset = "0xF02140", VA = "0xF02140")]
	public EnemySharkAttack()
	{
	}
}
[Token(Token = "0x20002A6")]
public class EnemyCowboy : EnemyParent
{
	[Token(Token = "0x20002A7")]
	[CompilerGenerated]
	private sealed class <fireTimer>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyCowboy <>4__this;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <shots>5__2;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <i>5__3;

		[Token(Token = "0x17000215")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E60")]
			[Address(RVA = "0xF03590", Offset = "0xF03590", VA = "0xF03590", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000216")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E62")]
			[Address(RVA = "0xF035D8", Offset = "0xF035D8", VA = "0xF035D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0xF032F8", Offset = "0xF032F8", VA = "0xF032F8")]
		[DebuggerHidden]
		public <fireTimer>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0xF03328", Offset = "0xF03328", VA = "0xF03328", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0xF0332C", Offset = "0xF0332C", VA = "0xF0332C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0xF03598", Offset = "0xF03598", VA = "0xF03598", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000DB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public BigDeepsHitScan hitScanPrefab;

	[Token(Token = "0x6000E57")]
	[Address(RVA = "0xF0305C", Offset = "0xF0305C", VA = "0xF0305C")]
	private new void Start()
	{
	}

	[Token(Token = "0x6000E58")]
	[Address(RVA = "0xF03060", Offset = "0xF03060", VA = "0xF03060", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000E59")]
	[Address(RVA = "0xF03160", Offset = "0xF03160", VA = "0xF03160", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000E5A")]
	[Address(RVA = "0xF03208", Offset = "0xF03208", VA = "0xF03208", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000E5B")]
	[Address(RVA = "0xF031A0", Offset = "0xF031A0", VA = "0xF031A0")]
	[IteratorStateMachine(typeof(<fireTimer>d__5))]
	private IEnumerator fireTimer()
	{
		return null;
	}

	[Token(Token = "0x6000E5C")]
	[Address(RVA = "0xF03320", Offset = "0xF03320", VA = "0xF03320")]
	public EnemyCowboy()
	{
	}
}
[Token(Token = "0x20002A8")]
public class OrbRotate : MonoBehaviour
{
	[Token(Token = "0x4000DBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float RotationSpeed;

	[Token(Token = "0x6000E63")]
	[Address(RVA = "0xF035E0", Offset = "0xF035E0", VA = "0xF035E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E64")]
	[Address(RVA = "0xF035E4", Offset = "0xF035E4", VA = "0xF035E4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E65")]
	[Address(RVA = "0xF036F8", Offset = "0xF036F8", VA = "0xF036F8")]
	public OrbRotate()
	{
	}
}
[Token(Token = "0x20002A9")]
public class EnemyPirateImp : EnemyParent
{
	[Token(Token = "0x20002AA")]
	public enum MovementType
	{
		[Token(Token = "0x4000DCC")]
		flip,
		[Token(Token = "0x4000DCD")]
		teleport
	}

	[Token(Token = "0x20002AB")]
	[CompilerGenerated]
	private sealed class <delayAttackEnd>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyPirateImp <>4__this;

		[Token(Token = "0x17000218")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E75")]
			[Address(RVA = "0xF0430C", Offset = "0xF0430C", VA = "0xF0430C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000219")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E77")]
			[Address(RVA = "0xF04354", Offset = "0xF04354", VA = "0xF04354", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0xF03F98", Offset = "0xF03F98", VA = "0xF03F98")]
		[DebuggerHidden]
		public <delayAttackEnd>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0xF0424C", Offset = "0xF0424C", VA = "0xF0424C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0xF04250", Offset = "0xF04250", VA = "0xF04250", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0xF04314", Offset = "0xF04314", VA = "0xF04314", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002AC")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject projectile;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyPirateImp <>4__this;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x1700021A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E7B")]
			[Address(RVA = "0xF04640", Offset = "0xF04640", VA = "0xF04640", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E7D")]
			[Address(RVA = "0xF04688", Offset = "0xF04688", VA = "0xF04688", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0xF03FC0", Offset = "0xF03FC0", VA = "0xF03FC0")]
		[DebuggerHidden]
		public <shootProjectile>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0xF0435C", Offset = "0xF0435C", VA = "0xF0435C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0xF04360", Offset = "0xF04360", VA = "0xF04360", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0xF04648", Offset = "0xF04648", VA = "0xF04648", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000DBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject enemyProjectile;

	[Token(Token = "0x4000DBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject enemyProjectile2;

	[Token(Token = "0x4000DBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject enemyProjectile3;

	[Token(Token = "0x4000DC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000DC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public NavMeshAgent agent;

	[Token(Token = "0x4000DC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private UnityEngine.Vector3 originPoint;

	[Token(Token = "0x4000DC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	public float walkRadius;

	[Token(Token = "0x4000DC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public float projSpeed;

	[Token(Token = "0x4000DC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private float initialMoveSpeed;

	[Token(Token = "0x4000DC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private float timer;

	[Token(Token = "0x4000DC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private float timeBetweenMoves;

	[Token(Token = "0x4000DC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private bool animStart;

	[Token(Token = "0x4000DC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public GameObject teleportParticle;

	[Token(Token = "0x4000DCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public MovementType movementType;

	[Token(Token = "0x17000217")]
	private bool atCenter
	{
		[Token(Token = "0x6000E66")]
		[Address(RVA = "0xF03708", Offset = "0xF03708", VA = "0xF03708")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000E67")]
	[Address(RVA = "0xF037D0", Offset = "0xF037D0", VA = "0xF037D0", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000E68")]
	[Address(RVA = "0xF03824", Offset = "0xF03824", VA = "0xF03824", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000E69")]
	[Address(RVA = "0xF03B50", Offset = "0xF03B50", VA = "0xF03B50")]
	private void makeTeleportPartcile()
	{
	}

	[Token(Token = "0x6000E6A")]
	[Address(RVA = "0xF03D28", Offset = "0xF03D28", VA = "0xF03D28", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000E6B")]
	[Address(RVA = "0xF03F20", Offset = "0xF03F20", VA = "0xF03F20")]
	[IteratorStateMachine(typeof(<delayAttackEnd>d__21))]
	private IEnumerator delayAttackEnd(float time)
	{
		return null;
	}

	[Token(Token = "0x6000E6C")]
	[Address(RVA = "0xF03EAC", Offset = "0xF03EAC", VA = "0xF03EAC")]
	[IteratorStateMachine(typeof(<shootProjectile>d__22))]
	protected IEnumerator shootProjectile(GameObject projectile)
	{
		return null;
	}

	[Token(Token = "0x6000E6D")]
	[Address(RVA = "0xF03AA4", Offset = "0xF03AA4", VA = "0xF03AA4")]
	protected void pickPointOnNavMesh()
	{
	}

	[Token(Token = "0x6000E6E")]
	[Address(RVA = "0xF03C6C", Offset = "0xF03C6C", VA = "0xF03C6C")]
	protected void teleportTonavMeshPoint()
	{
	}

	[Token(Token = "0x6000E6F")]
	[Address(RVA = "0xF03FE8", Offset = "0xF03FE8", VA = "0xF03FE8", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000E70")]
	[Address(RVA = "0xF040BC", Offset = "0xF040BC", VA = "0xF040BC", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000E71")]
	[Address(RVA = "0xF04224", Offset = "0xF04224", VA = "0xF04224")]
	public EnemyPirateImp()
	{
	}
}
[Token(Token = "0x20002AD")]
public class EnemyPirateTroll : EnemyParent
{
	[Token(Token = "0x20002AE")]
	public enum TrollType
	{
		[Token(Token = "0x4000DDF")]
		pirate,
		[Token(Token = "0x4000DE0")]
		bouncer
	}

	[Token(Token = "0x20002AF")]
	[CompilerGenerated]
	private sealed class <cleaveAttack>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyPirateTroll <>4__this;

		[Token(Token = "0x1700021C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E8B")]
			[Address(RVA = "0xF04D5C", Offset = "0xF04D5C", VA = "0xF04D5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E8D")]
			[Address(RVA = "0xF04DA4", Offset = "0xF04DA4", VA = "0xF04DA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0xF04818", Offset = "0xF04818", VA = "0xF04818")]
		[DebuggerHidden]
		public <cleaveAttack>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0xF04B54", Offset = "0xF04B54", VA = "0xF04B54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0xF04B58", Offset = "0xF04B58", VA = "0xF04B58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0xF04D64", Offset = "0xF04D64", VA = "0xF04D64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002B0")]
	[CompilerGenerated]
	private sealed class <shootProjectileBlock>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyPirateTroll <>4__this;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x1700021E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E91")]
			[Address(RVA = "0xF05010", Offset = "0xF05010", VA = "0xF05010", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E93")]
			[Address(RVA = "0xF05058", Offset = "0xF05058", VA = "0xF05058", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0xF048A8", Offset = "0xF048A8", VA = "0xF048A8")]
		[DebuggerHidden]
		public <shootProjectileBlock>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xF04DAC", Offset = "0xF04DAC", VA = "0xF04DAC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xF04DB0", Offset = "0xF04DB0", VA = "0xF04DB0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0xF05018", Offset = "0xF05018", VA = "0xF05018", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002B1")]
	[CompilerGenerated]
	private sealed class <chargeTackle>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyPirateTroll <>4__this;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <failSafeTimer>5__2;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <failSafeMax>5__3;

		[Token(Token = "0x17000220")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E97")]
			[Address(RVA = "0xF05480", Offset = "0xF05480", VA = "0xF05480", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000221")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E99")]
			[Address(RVA = "0xF054C8", Offset = "0xF054C8", VA = "0xF054C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0xF0498C", Offset = "0xF0498C", VA = "0xF0498C")]
		[DebuggerHidden]
		public <chargeTackle>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0xF05060", Offset = "0xF05060", VA = "0xF05060", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0xF05064", Offset = "0xF05064", VA = "0xF05064", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0xF05488", Offset = "0xF05488", VA = "0xF05488", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000DD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject cleaveParticle;

	[Token(Token = "0x4000DD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000DDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject cleaveProj;

	[Token(Token = "0x4000DDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public NavMeshAgent agent;

	[Token(Token = "0x4000DDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public float projSpeed;

	[Token(Token = "0x4000DDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	public TrollType trollType;

	[Token(Token = "0x6000E7E")]
	[Address(RVA = "0xF04690", Offset = "0xF04690", VA = "0xF04690", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000E7F")]
	[Address(RVA = "0xF046DC", Offset = "0xF046DC", VA = "0xF046DC", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000E80")]
	[Address(RVA = "0xF047B0", Offset = "0xF047B0", VA = "0xF047B0")]
	[IteratorStateMachine(typeof(<cleaveAttack>d__9))]
	private IEnumerator cleaveAttack()
	{
		return null;
	}

	[Token(Token = "0x6000E81")]
	[Address(RVA = "0xF04840", Offset = "0xF04840", VA = "0xF04840")]
	[IteratorStateMachine(typeof(<shootProjectileBlock>d__10))]
	protected IEnumerator shootProjectileBlock()
	{
		return null;
	}

	[Token(Token = "0x6000E82")]
	[Address(RVA = "0xF048D0", Offset = "0xF048D0", VA = "0xF048D0", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000E83")]
	[Address(RVA = "0xF04924", Offset = "0xF04924", VA = "0xF04924")]
	[IteratorStateMachine(typeof(<chargeTackle>d__12))]
	private IEnumerator chargeTackle()
	{
		return null;
	}

	[Token(Token = "0x6000E84")]
	[Address(RVA = "0xF049B4", Offset = "0xF049B4", VA = "0xF049B4", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000E85")]
	[Address(RVA = "0xF04A08", Offset = "0xF04A08", VA = "0xF04A08", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000E86")]
	[Address(RVA = "0xF04A8C", Offset = "0xF04A8C", VA = "0xF04A8C")]
	private void OnTriggerEnter(Collider col)
	{
	}

	[Token(Token = "0x6000E87")]
	[Address(RVA = "0xF04B44", Offset = "0xF04B44", VA = "0xF04B44")]
	public EnemyPirateTroll()
	{
	}
}
[Token(Token = "0x20002B2")]
public class EnemyRoller : EnemyParent
{
	[Token(Token = "0x20002B3")]
	[CompilerGenerated]
	private sealed class <castShotgunBlast>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyRoller <>4__this;

		[Token(Token = "0x17000222")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EA6")]
			[Address(RVA = "0xF05BE4", Offset = "0xF05BE4", VA = "0xF05BE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000223")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EA8")]
			[Address(RVA = "0xF05C2C", Offset = "0xF05C2C", VA = "0xF05C2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xF0577C", Offset = "0xF0577C", VA = "0xF0577C")]
		[DebuggerHidden]
		public <castShotgunBlast>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0xF05940", Offset = "0xF05940", VA = "0xF05940", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0xF05944", Offset = "0xF05944", VA = "0xF05944", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0xF05BEC", Offset = "0xF05BEC", VA = "0xF05BEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002B4")]
	[CompilerGenerated]
	private sealed class <makeEnemyRapidFire>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyRoller <>4__this;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject enemy;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <aimAccuracy>5__2;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <numOfProjectiles>5__3;

		[Token(Token = "0x17000224")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EAC")]
			[Address(RVA = "0xC98FE0", Offset = "0xC98FE0", VA = "0xC98FE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000225")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EAE")]
			[Address(RVA = "0xC99028", Offset = "0xC99028", VA = "0xC99028", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0xC98D78", Offset = "0xC98D78", VA = "0xC98D78")]
		[DebuggerHidden]
		public <makeEnemyRapidFire>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0xC98DA0", Offset = "0xC98DA0", VA = "0xC98DA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0xC98DA4", Offset = "0xC98DA4", VA = "0xC98DA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0xC98FE8", Offset = "0xC98FE8", VA = "0xC98FE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002B5")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyRoller <>4__this;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform launchTrans;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x17000226")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EB2")]
			[Address(RVA = "0xC99338", Offset = "0xC99338", VA = "0xC99338", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000227")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EB4")]
			[Address(RVA = "0xC99380", Offset = "0xC99380", VA = "0xC99380", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0xC99030", Offset = "0xC99030", VA = "0xC99030")]
		[DebuggerHidden]
		public <shootProjectile>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0xC99058", Offset = "0xC99058", VA = "0xC99058", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0xC9905C", Offset = "0xC9905C", VA = "0xC9905C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0xC99340", Offset = "0xC99340", VA = "0xC99340", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000DEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private UnityEngine.Vector3 spawnPos;

	[Token(Token = "0x4000DEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject body;

	[Token(Token = "0x4000DF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject enemyProjectile;

	[Token(Token = "0x4000DF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public float projSpeed;

	[Token(Token = "0x4000DF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	public int numOfProjectilesMax;

	[Token(Token = "0x4000DF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public float timeBetweenShots;

	[Token(Token = "0x4000DF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000DF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private bool projectileAimOn;

	[Token(Token = "0x4000DF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	private float elapsedTime;

	[Token(Token = "0x4000DF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private float sineAmplitude;

	[Token(Token = "0x4000DF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private bool goingRight;

	[Token(Token = "0x6000E9A")]
	[Address(RVA = "0xF054D0", Offset = "0xF054D0", VA = "0xF054D0", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000E9B")]
	[Address(RVA = "0xF05510", Offset = "0xF05510", VA = "0xF05510", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000E9C")]
	[Address(RVA = "0xF056D4", Offset = "0xF056D4", VA = "0xF056D4", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000E9D")]
	[Address(RVA = "0xF055C0", Offset = "0xF055C0", VA = "0xF055C0")]
	private void SmoothSineWave()
	{
	}

	[Token(Token = "0x6000E9E")]
	[Address(RVA = "0xF05714", Offset = "0xF05714", VA = "0xF05714")]
	[IteratorStateMachine(typeof(<castShotgunBlast>d__15))]
	protected IEnumerator castShotgunBlast()
	{
		return null;
	}

	[Token(Token = "0x6000E9F")]
	[Address(RVA = "0xF057A4", Offset = "0xF057A4", VA = "0xF057A4")]
	[IteratorStateMachine(typeof(<makeEnemyRapidFire>d__16))]
	private IEnumerator makeEnemyRapidFire(GameObject enemy)
	{
		return null;
	}

	[Token(Token = "0x6000EA0")]
	[Address(RVA = "0xF05818", Offset = "0xF05818", VA = "0xF05818", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000EA1")]
	[Address(RVA = "0xF0589C", Offset = "0xF0589C", VA = "0xF0589C")]
	[IteratorStateMachine(typeof(<shootProjectile>d__18))]
	protected IEnumerator shootProjectile(Transform launchTrans)
	{
		return null;
	}

	[Token(Token = "0x6000EA2")]
	[Address(RVA = "0xF05910", Offset = "0xF05910", VA = "0xF05910")]
	public EnemyRoller()
	{
	}
}
[Token(Token = "0x20002B6")]
public class EnemyShark : EnemyParent
{
	[Token(Token = "0x20002B7")]
	[CompilerGenerated]
	private sealed class <sharkLunge>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyShark <>4__this;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <lungeTime>5__3;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <maxLungeTIme>5__4;

		[Token(Token = "0x17000228")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EBF")]
			[Address(RVA = "0xC99F88", Offset = "0xC99F88", VA = "0xC99F88", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000229")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EC1")]
			[Address(RVA = "0xC99FD0", Offset = "0xC99FD0", VA = "0xC99FD0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0xC9951C", Offset = "0xC9951C", VA = "0xC9951C")]
		[DebuggerHidden]
		public <sharkLunge>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xC998D8", Offset = "0xC998D8", VA = "0xC998D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xC998DC", Offset = "0xC998DC", VA = "0xC998DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0xC99F90", Offset = "0xC99F90", VA = "0xC99F90", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject splashEffect;

	[Token(Token = "0x4000E09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private UnityEngine.Vector3 startPos;

	[Token(Token = "0x4000E0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private float lungeSpeed;

	[Token(Token = "0x4000E0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private int lungesPerTurn;

	[Token(Token = "0x4000E0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Rigidbody rb;

	[Token(Token = "0x4000E0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public BattleBuff debuff;

	[Token(Token = "0x6000EB5")]
	[Address(RVA = "0xC99388", Offset = "0xC99388", VA = "0xC99388", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000EB6")]
	[Address(RVA = "0xC99474", Offset = "0xC99474", VA = "0xC99474", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000EB7")]
	[Address(RVA = "0xC994B4", Offset = "0xC994B4", VA = "0xC994B4")]
	[IteratorStateMachine(typeof(<sharkLunge>d__8))]
	private IEnumerator sharkLunge()
	{
		return null;
	}

	[Token(Token = "0x6000EB8")]
	[Address(RVA = "0xC99544", Offset = "0xC99544", VA = "0xC99544", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000EB9")]
	[Address(RVA = "0xC99598", Offset = "0xC99598", VA = "0xC99598", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000EBA")]
	[Address(RVA = "0xC997B4", Offset = "0xC997B4", VA = "0xC997B4")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x6000EBB")]
	[Address(RVA = "0xC998C0", Offset = "0xC998C0", VA = "0xC998C0")]
	public EnemyShark()
	{
	}
}
[Token(Token = "0x20002B8")]
public class EnemySkeleton : EnemyParent
{
	[Token(Token = "0x20002B9")]
	[CompilerGenerated]
	private sealed class <boneStorm>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemySkeleton <>4__this;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x1700022A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000ED1")]
			[Address(RVA = "0xC9A870", Offset = "0xC9A870", VA = "0xC9A870", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000ED3")]
			[Address(RVA = "0xC9A8B8", Offset = "0xC9A8B8", VA = "0xC9A8B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0xC9A590", Offset = "0xC9A590", VA = "0xC9A590")]
		[DebuggerHidden]
		public <boneStorm>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0xC9A73C", Offset = "0xC9A73C", VA = "0xC9A73C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0xC9A740", Offset = "0xC9A740", VA = "0xC9A740", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0xC9A878", Offset = "0xC9A878", VA = "0xC9A878", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002BA")]
	[CompilerGenerated]
	private sealed class <boneMaze>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemySkeleton <>4__this;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x1700022C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000ED7")]
			[Address(RVA = "0xC9A9D4", Offset = "0xC9A9D4", VA = "0xC9A9D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000ED9")]
			[Address(RVA = "0xC9AA1C", Offset = "0xC9AA1C", VA = "0xC9AA1C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0xC9A5B8", Offset = "0xC9A5B8", VA = "0xC9A5B8")]
		[DebuggerHidden]
		public <boneMaze>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0xC9A8C0", Offset = "0xC9A8C0", VA = "0xC9A8C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0xC9A8C4", Offset = "0xC9A8C4", VA = "0xC9A8C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0xC9A9DC", Offset = "0xC9A9DC", VA = "0xC9A9DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002BB")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemyProjectile;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemySkeleton <>4__this;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x1700022E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EDD")]
			[Address(RVA = "0xC9AD08", Offset = "0xC9AD08", VA = "0xC9AD08", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700022F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EDF")]
			[Address(RVA = "0xC9AD50", Offset = "0xC9AD50", VA = "0xC9AD50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0xC9A654", Offset = "0xC9A654", VA = "0xC9A654")]
		[DebuggerHidden]
		public <shootProjectile>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0xC9AA24", Offset = "0xC9AA24", VA = "0xC9AA24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xC9AA28", Offset = "0xC9AA28", VA = "0xC9AA28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xC9AD10", Offset = "0xC9AD10", VA = "0xC9AD10", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002BC")]
	[CompilerGenerated]
	private sealed class <shootProjectileRandomize>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemyProjectile;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemySkeleton <>4__this;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool randPos;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x17000230")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EE3")]
			[Address(RVA = "0xC9B110", Offset = "0xC9B110", VA = "0xC9B110", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000231")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EE5")]
			[Address(RVA = "0xC9B158", Offset = "0xC9B158", VA = "0xC9B158", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0xC9A6FC", Offset = "0xC9A6FC", VA = "0xC9A6FC")]
		[DebuggerHidden]
		public <shootProjectileRandomize>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0xC9AD58", Offset = "0xC9AD58", VA = "0xC9AD58", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0xC9AD5C", Offset = "0xC9AD5C", VA = "0xC9AD5C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0xC9B118", Offset = "0xC9B118", VA = "0xC9B118", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject boneProjSineX;

	[Token(Token = "0x4000E15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject boneProjSineY;

	[Token(Token = "0x4000E16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject boneProjstatic;

	[Token(Token = "0x4000E17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public float projSpeed;

	[Token(Token = "0x4000E18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000E19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public int numOfBones;

	[Token(Token = "0x4000E1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GameObject shields;

	[Token(Token = "0x6000EC2")]
	[Address(RVA = "0xC99FD8", Offset = "0xC99FD8", VA = "0xC99FD8", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000EC3")]
	[Address(RVA = "0xC99FE0", Offset = "0xC99FE0", VA = "0xC99FE0", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000EC4")]
	[Address(RVA = "0xC9A070", Offset = "0xC9A070", VA = "0xC9A070", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000EC5")]
	[Address(RVA = "0xC9A1A0", Offset = "0xC9A1A0", VA = "0xC9A1A0")]
	public void toggleShieldsOn()
	{
	}

	[Token(Token = "0x6000EC6")]
	[Address(RVA = "0xC9A224", Offset = "0xC9A224", VA = "0xC9A224")]
	public void toggleShieldsOff()
	{
	}

	[Token(Token = "0x6000EC7")]
	[Address(RVA = "0xC9A2A8", Offset = "0xC9A2A8", VA = "0xC9A2A8", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000EC8")]
	[Address(RVA = "0xC9A53C", Offset = "0xC9A53C", VA = "0xC9A53C", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000EC9")]
	[Address(RVA = "0xC9A138", Offset = "0xC9A138", VA = "0xC9A138")]
	[IteratorStateMachine(typeof(<boneStorm>d__14))]
	protected IEnumerator boneStorm()
	{
		return null;
	}

	[Token(Token = "0x6000ECA")]
	[Address(RVA = "0xC9A0D0", Offset = "0xC9A0D0", VA = "0xC9A0D0")]
	[IteratorStateMachine(typeof(<boneMaze>d__15))]
	protected IEnumerator boneMaze()
	{
		return null;
	}

	[Token(Token = "0x6000ECB")]
	[Address(RVA = "0xC9A5E0", Offset = "0xC9A5E0", VA = "0xC9A5E0")]
	[IteratorStateMachine(typeof(<shootProjectile>d__16))]
	protected IEnumerator shootProjectile(GameObject enemyProjectile)
	{
		return null;
	}

	[Token(Token = "0x6000ECC")]
	[Address(RVA = "0xC9A67C", Offset = "0xC9A67C", VA = "0xC9A67C")]
	[IteratorStateMachine(typeof(<shootProjectileRandomize>d__17))]
	protected IEnumerator shootProjectileRandomize(GameObject enemyProjectile, bool randPos)
	{
		return null;
	}

	[Token(Token = "0x6000ECD")]
	[Address(RVA = "0xC9A724", Offset = "0xC9A724", VA = "0xC9A724")]
	public EnemySkeleton()
	{
	}
}
[Token(Token = "0x20002BD")]
public class EnemyGridStrike : MonoBehaviour
{
	[Token(Token = "0x20002BE")]
	[CompilerGenerated]
	private sealed class <attack>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyGridStrike <>4__this;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x17000232")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000EEC")]
			[Address(RVA = "0xC9B5F0", Offset = "0xC9B5F0", VA = "0xC9B5F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000233")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000EEE")]
			[Address(RVA = "0xC9B638", Offset = "0xC9B638", VA = "0xC9B638", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0xC9B1E8", Offset = "0xC9B1E8", VA = "0xC9B1E8")]
		[DebuggerHidden]
		public <attack>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xC9B22C", Offset = "0xC9B22C", VA = "0xC9B22C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0xC9B230", Offset = "0xC9B230", VA = "0xC9B230", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0xC9B5F8", Offset = "0xC9B5F8", VA = "0xC9B5F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] warningZones;

	[Token(Token = "0x4000E31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] disableWarningZones;

	[Token(Token = "0x4000E32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public EnemyParent enemyParent;

	[Token(Token = "0x4000E33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public EnemyPillarBlast hurtPillar;

	[Token(Token = "0x4000E34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float timeToAttack;

	[Token(Token = "0x4000E35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int numOfStrikes;

	[Token(Token = "0x4000E36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int power;

	[Token(Token = "0x4000E37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioSource audioSource;

	[Token(Token = "0x4000E38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioClip[] clips;

	[Token(Token = "0x6000EE6")]
	[Address(RVA = "0xC9B160", Offset = "0xC9B160", VA = "0xC9B160")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EE7")]
	[Address(RVA = "0xC9B180", Offset = "0xC9B180", VA = "0xC9B180")]
	[IteratorStateMachine(typeof(<attack>d__10))]
	private IEnumerator attack()
	{
		return null;
	}

	[Token(Token = "0x6000EE8")]
	[Address(RVA = "0xC9B210", Offset = "0xC9B210", VA = "0xC9B210")]
	public EnemyGridStrike()
	{
	}
}
[Token(Token = "0x20002BF")]
public class EnemyPillarBlast : MonoBehaviour
{
	[Token(Token = "0x4000E3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int damage;

	[Token(Token = "0x6000EEF")]
	[Address(RVA = "0xC9B640", Offset = "0xC9B640", VA = "0xC9B640")]
	private void Start()
	{
	}

	[Token(Token = "0x6000EF0")]
	[Address(RVA = "0xC9B6B0", Offset = "0xC9B6B0", VA = "0xC9B6B0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000EF1")]
	[Address(RVA = "0xC9B750", Offset = "0xC9B750", VA = "0xC9B750")]
	public EnemyPillarBlast()
	{
	}
}
[Token(Token = "0x20002C0")]
public class EnemyTaskMaster : EnemyParent
{
	[Token(Token = "0x20002C1")]
	[CompilerGenerated]
	private sealed class <spawnEnemy>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyTaskMaster <>4__this;

		[Token(Token = "0x17000234")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F09")]
			[Address(RVA = "0xC9C984", Offset = "0xC9C984", VA = "0xC9C984", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000235")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F0B")]
			[Address(RVA = "0xC9C9CC", Offset = "0xC9C9CC", VA = "0xC9C9CC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xC9BE30", Offset = "0xC9BE30", VA = "0xC9BE30")]
		[DebuggerHidden]
		public <spawnEnemy>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0xC9C6F0", Offset = "0xC9C6F0", VA = "0xC9C6F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xC9C6F4", Offset = "0xC9C6F4", VA = "0xC9C6F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xC9C98C", Offset = "0xC9C98C", VA = "0xC9C98C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C2")]
	[CompilerGenerated]
	private sealed class <spawnSpikos>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyTaskMaster <>4__this;

		[Token(Token = "0x17000236")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F0F")]
			[Address(RVA = "0xC9CE60", Offset = "0xC9CE60", VA = "0xC9CE60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000237")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F11")]
			[Address(RVA = "0xC9CEA8", Offset = "0xC9CEA8", VA = "0xC9CEA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xC9BE58", Offset = "0xC9BE58", VA = "0xC9BE58")]
		[DebuggerHidden]
		public <spawnSpikos>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xC9C9D4", Offset = "0xC9C9D4", VA = "0xC9C9D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xC9C9D8", Offset = "0xC9C9D8", VA = "0xC9C9D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xC9CE68", Offset = "0xC9CE68", VA = "0xC9CE68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C3")]
	[CompilerGenerated]
	private sealed class <summonStando>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyTaskMaster <>4__this;

		[Token(Token = "0x17000238")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F15")]
			[Address(RVA = "0xC9D06C", Offset = "0xC9D06C", VA = "0xC9D06C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000239")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F17")]
			[Address(RVA = "0xC9D0B4", Offset = "0xC9D0B4", VA = "0xC9D0B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xC9BFA4", Offset = "0xC9BFA4", VA = "0xC9BFA4")]
		[DebuggerHidden]
		public <summonStando>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0xC9CEB0", Offset = "0xC9CEB0", VA = "0xC9CEB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xC9CEB4", Offset = "0xC9CEB4", VA = "0xC9CEB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0xC9D074", Offset = "0xC9D074", VA = "0xC9D074", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C4")]
	[CompilerGenerated]
	private sealed class <castShotgunBlast>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyTaskMaster <>4__this;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x1700023A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F1B")]
			[Address(RVA = "0xC9D328", Offset = "0xC9D328", VA = "0xC9D328", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F1D")]
			[Address(RVA = "0xC9D370", Offset = "0xC9D370", VA = "0xC9D370", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0xC9C034", Offset = "0xC9C034", VA = "0xC9C034")]
		[DebuggerHidden]
		public <castShotgunBlast>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0xC9D0BC", Offset = "0xC9D0BC", VA = "0xC9D0BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0xC9D0C0", Offset = "0xC9D0C0", VA = "0xC9D0C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0xC9D330", Offset = "0xC9D330", VA = "0xC9D330", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C5")]
	[CompilerGenerated]
	private sealed class <castFinalAttack>d__36 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyTaskMaster <>4__this;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MusicPlayer <player>5__2;

		[Token(Token = "0x1700023C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F21")]
			[Address(RVA = "0xC9D7C8", Offset = "0xC9D7C8", VA = "0xC9D7C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F23")]
			[Address(RVA = "0xC9D810", Offset = "0xC9D810", VA = "0xC9D810", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0xC9C05C", Offset = "0xC9C05C", VA = "0xC9C05C")]
		[DebuggerHidden]
		public <castFinalAttack>d__36(int <>1__state)
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0xC9D378", Offset = "0xC9D378", VA = "0xC9D378", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xC9D37C", Offset = "0xC9D37C", VA = "0xC9D37C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0xC9D7D0", Offset = "0xC9D7D0", VA = "0xC9D7D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C6")]
	[CompilerGenerated]
	private sealed class <castBulletHell>d__37 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform firePoint;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyTaskMaster <>4__this;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x1700023E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F27")]
			[Address(RVA = "0xC9DA4C", Offset = "0xC9DA4C", VA = "0xC9DA4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F29")]
			[Address(RVA = "0xC9DA94", Offset = "0xC9DA94", VA = "0xC9DA94", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0xC9C0F8", Offset = "0xC9C0F8", VA = "0xC9C0F8")]
		[DebuggerHidden]
		public <castBulletHell>d__37(int <>1__state)
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0xC9D818", Offset = "0xC9D818", VA = "0xC9D818", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0xC9D81C", Offset = "0xC9D81C", VA = "0xC9D81C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0xC9DA54", Offset = "0xC9DA54", VA = "0xC9DA54", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C7")]
	[CompilerGenerated]
	private sealed class <deathTimer>d__39 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyTaskMaster <>4__this;

		[Token(Token = "0x17000240")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F2D")]
			[Address(RVA = "0xC9DC1C", Offset = "0xC9DC1C", VA = "0xC9DC1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000241")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F2F")]
			[Address(RVA = "0xC9DC64", Offset = "0xC9DC64", VA = "0xC9DC64", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0xC9C464", Offset = "0xC9C464", VA = "0xC9C464")]
		[DebuggerHidden]
		public <deathTimer>d__39(int <>1__state)
		{
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0xC9DA9C", Offset = "0xC9DA9C", VA = "0xC9DA9C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0xC9DAA0", Offset = "0xC9DAA0", VA = "0xC9DAA0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xC9DC24", Offset = "0xC9DC24", VA = "0xC9DC24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C8")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyTaskMaster <>4__this;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x17000242")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F33")]
			[Address(RVA = "0xC9DEE4", Offset = "0xC9DEE4", VA = "0xC9DEE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000243")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F35")]
			[Address(RVA = "0xC9DF2C", Offset = "0xC9DF2C", VA = "0xC9DF2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0xC9C5BC", Offset = "0xC9C5BC", VA = "0xC9C5BC")]
		[DebuggerHidden]
		public <shootProjectile>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0xC9DC6C", Offset = "0xC9DC6C", VA = "0xC9DC6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0xC9DC70", Offset = "0xC9DC70", VA = "0xC9DC70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0xC9DEEC", Offset = "0xC9DEEC", VA = "0xC9DEEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002C9")]
	[CompilerGenerated]
	private sealed class <shootProjectileFromPoint>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyTaskMaster <>4__this;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform point;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x17000244")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F39")]
			[Address(RVA = "0xC9E1AC", Offset = "0xC9E1AC", VA = "0xC9E1AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000245")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F3B")]
			[Address(RVA = "0xC9E1F4", Offset = "0xC9E1F4", VA = "0xC9E1F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0xC9C658", Offset = "0xC9C658", VA = "0xC9C658")]
		[DebuggerHidden]
		public <shootProjectileFromPoint>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0xC9DF34", Offset = "0xC9DF34", VA = "0xC9DF34", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0xC9DF38", Offset = "0xC9DF38", VA = "0xC9DF38", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0xC9E1B4", Offset = "0xC9E1B4", VA = "0xC9E1B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002CA")]
	[CompilerGenerated]
	private sealed class <castTeleShot>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyTaskMaster <>4__this;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x17000246")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F3F")]
			[Address(RVA = "0xC9E670", Offset = "0xC9E670", VA = "0xC9E670", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000247")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F41")]
			[Address(RVA = "0xC9E6B8", Offset = "0xC9E6B8", VA = "0xC9E6B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0xC9C680", Offset = "0xC9C680", VA = "0xC9C680")]
		[DebuggerHidden]
		public <castTeleShot>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0xC9E1FC", Offset = "0xC9E1FC", VA = "0xC9E1FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0xC9E200", Offset = "0xC9E200", VA = "0xC9E200", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0xC9E678", Offset = "0xC9E678", VA = "0xC9E678", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002CB")]
	[CompilerGenerated]
	private sealed class <castGridStrike>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnemyTaskMaster <>4__this;

		[Token(Token = "0x17000248")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F45")]
			[Address(RVA = "0xC9E904", Offset = "0xC9E904", VA = "0xC9E904", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000249")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F47")]
			[Address(RVA = "0xC9E94C", Offset = "0xC9E94C", VA = "0xC9E94C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0xC9C6A8", Offset = "0xC9C6A8", VA = "0xC9C6A8")]
		[DebuggerHidden]
		public <castGridStrike>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0xC9E6C0", Offset = "0xC9E6C0", VA = "0xC9E6C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0xC9E6C4", Offset = "0xC9E6C4", VA = "0xC9E6C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0xC9E90C", Offset = "0xC9E90C", VA = "0xC9E90C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject spikeBallPrefab;

	[Token(Token = "0x4000E3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject spawnparticle;

	[Token(Token = "0x4000E40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Transform spikeBallParent;

	[Token(Token = "0x4000E41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public BattleDialogueBox dialogueBox;

	[Token(Token = "0x4000E42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public Transform dialoguePos;

	[Token(Token = "0x4000E43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public string[] dialogue1;

	[Token(Token = "0x4000E44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public EnemyParent[] enemiesToSpawn;

	[Token(Token = "0x4000E45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private bool rotateSpikes;

	[Token(Token = "0x4000E46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private UnityEngine.Vector3 originalSPikeParentPos;

	[Token(Token = "0x4000E47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private int turnNum;

	[Token(Token = "0x4000E48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private float spinSpeed;

	[Token(Token = "0x4000E49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private int turnsToSpawn;

	[Token(Token = "0x4000E4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private int spawnCD;

	[Token(Token = "0x4000E4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public float projSpeed;

	[Token(Token = "0x4000E4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public GameObject enemyProjectile;

	[Token(Token = "0x4000E4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public EnemyGridStrike gridStrikePrefab;

	[Token(Token = "0x4000E4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public Transform[] telepoints;

	[Token(Token = "0x4000E4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public GameObject teleportParticle;

	[Token(Token = "0x4000E50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public GameObject tmStandModel;

	[Token(Token = "0x4000E51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public Transform standPos;

	[Token(Token = "0x4000E52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public Transform[] finalAttackPoints;

	[Token(Token = "0x4000E53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private bool castingFinalAttack;

	[Token(Token = "0x4000E54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D1")]
	private bool finalAttackOver;

	[Token(Token = "0x4000E55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	[Header("Audio")]
	public AudioClip finalSong;

	[Token(Token = "0x4000E56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public AudioClip[] attackClips;

	[Token(Token = "0x4000E57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	public AudioClip[] dialogueClips;

	[Token(Token = "0x4000E58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	public AudioClip deathClip;

	[Token(Token = "0x6000EF2")]
	[Address(RVA = "0xC9B760", Offset = "0xC9B760", VA = "0xC9B760", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000EF3")]
	[Address(RVA = "0xC9B7E0", Offset = "0xC9B7E0", VA = "0xC9B7E0", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000EF4")]
	[Address(RVA = "0xC9B9B0", Offset = "0xC9B9B0", VA = "0xC9B9B0", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000EF5")]
	[Address(RVA = "0xC9B920", Offset = "0xC9B920", VA = "0xC9B920")]
	private void movePikeParentWithPlayerPos()
	{
	}

	[Token(Token = "0x6000EF6")]
	[Address(RVA = "0xC9BCF8", Offset = "0xC9BCF8", VA = "0xC9BCF8")]
	[IteratorStateMachine(typeof(<spawnEnemy>d__31))]
	private IEnumerator spawnEnemy()
	{
		return null;
	}

	[Token(Token = "0x6000EF7")]
	[Address(RVA = "0xC9BC90", Offset = "0xC9BC90", VA = "0xC9BC90")]
	[IteratorStateMachine(typeof(<spawnSpikos>d__32))]
	private IEnumerator spawnSpikos()
	{
		return null;
	}

	[Token(Token = "0x6000EF8")]
	[Address(RVA = "0xC9BE80", Offset = "0xC9BE80", VA = "0xC9BE80")]
	public void shuffleTelepoints()
	{
	}

	[Token(Token = "0x6000EF9")]
	[Address(RVA = "0xC9BBC0", Offset = "0xC9BBC0", VA = "0xC9BBC0")]
	[IteratorStateMachine(typeof(<summonStando>d__34))]
	private IEnumerator summonStando()
	{
		return null;
	}

	[Token(Token = "0x6000EFA")]
	[Address(RVA = "0xC9BFCC", Offset = "0xC9BFCC", VA = "0xC9BFCC")]
	[IteratorStateMachine(typeof(<castShotgunBlast>d__35))]
	protected IEnumerator castShotgunBlast()
	{
		return null;
	}

	[Token(Token = "0x6000EFB")]
	[Address(RVA = "0xC9BC28", Offset = "0xC9BC28", VA = "0xC9BC28")]
	[IteratorStateMachine(typeof(<castFinalAttack>d__36))]
	protected IEnumerator castFinalAttack()
	{
		return null;
	}

	[Token(Token = "0x6000EFC")]
	[Address(RVA = "0xC9C084", Offset = "0xC9C084", VA = "0xC9C084")]
	[IteratorStateMachine(typeof(<castBulletHell>d__37))]
	protected IEnumerator castBulletHell(Transform firePoint)
	{
		return null;
	}

	[Token(Token = "0x6000EFD")]
	[Address(RVA = "0xC9C120", Offset = "0xC9C120", VA = "0xC9C120", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000EFE")]
	[Address(RVA = "0xC9C3FC", Offset = "0xC9C3FC", VA = "0xC9C3FC")]
	[IteratorStateMachine(typeof(<deathTimer>d__39))]
	private IEnumerator deathTimer()
	{
		return null;
	}

	[Token(Token = "0x6000EFF")]
	[Address(RVA = "0xC9C48C", Offset = "0xC9C48C", VA = "0xC9C48C", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000F00")]
	[Address(RVA = "0xC9C554", Offset = "0xC9C554", VA = "0xC9C554")]
	[IteratorStateMachine(typeof(<shootProjectile>d__41))]
	protected IEnumerator shootProjectile()
	{
		return null;
	}

	[Token(Token = "0x6000F01")]
	[Address(RVA = "0xC9C5E4", Offset = "0xC9C5E4", VA = "0xC9C5E4")]
	[IteratorStateMachine(typeof(<shootProjectileFromPoint>d__42))]
	protected IEnumerator shootProjectileFromPoint(Transform point)
	{
		return null;
	}

	[Token(Token = "0x6000F02")]
	[Address(RVA = "0xC9BDC8", Offset = "0xC9BDC8", VA = "0xC9BDC8")]
	[IteratorStateMachine(typeof(<castTeleShot>d__43))]
	private IEnumerator castTeleShot()
	{
		return null;
	}

	[Token(Token = "0x6000F03")]
	[Address(RVA = "0xC9BD60", Offset = "0xC9BD60", VA = "0xC9BD60")]
	[IteratorStateMachine(typeof(<castGridStrike>d__44))]
	private IEnumerator castGridStrike()
	{
		return null;
	}

	[Token(Token = "0x6000F04")]
	[Address(RVA = "0xC9C2CC", Offset = "0xC9C2CC", VA = "0xC9C2CC")]
	public void playDialogue(string dialogue)
	{
	}

	[Token(Token = "0x6000F05")]
	[Address(RVA = "0xC9C6D0", Offset = "0xC9C6D0", VA = "0xC9C6D0")]
	public EnemyTaskMaster()
	{
	}
}
[Token(Token = "0x20002CC")]
public class TaskMasterHead : MonoBehaviour
{
	[Token(Token = "0x4000E86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EnemyTaskMaster taskMaster;

	[Token(Token = "0x6000F48")]
	[Address(RVA = "0xC9E954", Offset = "0xC9E954", VA = "0xC9E954")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6000F49")]
	[Address(RVA = "0xC9EA18", Offset = "0xC9EA18", VA = "0xC9EA18")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000F4A")]
	[Address(RVA = "0xC9EADC", Offset = "0xC9EADC", VA = "0xC9EADC")]
	public TaskMasterHead()
	{
	}
}
[Token(Token = "0x20002CD")]
public class ToxicMass : EnemyParent
{
	[Token(Token = "0x20002CE")]
	public enum ToxicMassPhase
	{
		[Token(Token = "0x4000E9D")]
		giant,
		[Token(Token = "0x4000E9E")]
		chase
	}

	[Token(Token = "0x20002CF")]
	[CompilerGenerated]
	private sealed class <startChase>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ToxicMass <>4__this;

		[Token(Token = "0x1700024A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F5F")]
			[Address(RVA = "0xC9F9B0", Offset = "0xC9F9B0", VA = "0xC9F9B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700024B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F61")]
			[Address(RVA = "0xC9F9F8", Offset = "0xC9F9F8", VA = "0xC9F9F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0xC9EE98", Offset = "0xC9EE98", VA = "0xC9EE98")]
		[DebuggerHidden]
		public <startChase>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0xC9F7DC", Offset = "0xC9F7DC", VA = "0xC9F7DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0xC9F7E0", Offset = "0xC9F7E0", VA = "0xC9F7E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0xC9F9B8", Offset = "0xC9F9B8", VA = "0xC9F9B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002D0")]
	[CompilerGenerated]
	private sealed class <moveHealthBar>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ToxicMass <>4__this;

		[Token(Token = "0x1700024C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F65")]
			[Address(RVA = "0xC9FDFC", Offset = "0xC9FDFC", VA = "0xC9FDFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700024D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F67")]
			[Address(RVA = "0xC9FE44", Offset = "0xC9FE44", VA = "0xC9FE44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0xC9EF28", Offset = "0xC9EF28", VA = "0xC9EF28")]
		[DebuggerHidden]
		public <moveHealthBar>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0xC9FA00", Offset = "0xC9FA00", VA = "0xC9FA00", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0xC9FA04", Offset = "0xC9FA04", VA = "0xC9FA04", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0xC9FE04", Offset = "0xC9FE04", VA = "0xC9FE04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002D1")]
	[CompilerGenerated]
	private sealed class <castShotgunBlast>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ToxicMass <>4__this;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x1700024E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F6B")]
			[Address(RVA = "0xCA0110", Offset = "0xCA0110", VA = "0xCA0110", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700024F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F6D")]
			[Address(RVA = "0xCA0158", Offset = "0xCA0158", VA = "0xCA0158", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0xC9EF50", Offset = "0xC9EF50", VA = "0xC9EF50")]
		[DebuggerHidden]
		public <castShotgunBlast>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0xC9FE4C", Offset = "0xC9FE4C", VA = "0xC9FE4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0xC9FE50", Offset = "0xC9FE50", VA = "0xC9FE50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xCA0118", Offset = "0xCA0118", VA = "0xCA0118", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002D2")]
	[CompilerGenerated]
	private sealed class <moveDarkaxerBack>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ToxicMass <>4__this;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 <newPos>5__2;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <flySpeed>5__3;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MusicPlayer <player>5__4;

		[Token(Token = "0x17000250")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F71")]
			[Address(RVA = "0xCA057C", Offset = "0xCA057C", VA = "0xCA057C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000251")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F73")]
			[Address(RVA = "0xCA05C4", Offset = "0xCA05C4", VA = "0xCA05C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0xC9EFE0", Offset = "0xC9EFE0", VA = "0xC9EFE0")]
		[DebuggerHidden]
		public <moveDarkaxerBack>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0xCA0160", Offset = "0xCA0160", VA = "0xCA0160", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0xCA0164", Offset = "0xCA0164", VA = "0xCA0164", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0xCA0584", Offset = "0xCA0584", VA = "0xCA0584", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002D3")]
	[CompilerGenerated]
	private sealed class <moveDragon>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ToxicMass <>4__this;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AllyDragon <dragon>5__2;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <flySpeed>5__3;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private UnityEngine.Vector3 <pos1>5__4;

		[Token(Token = "0x17000252")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F77")]
			[Address(RVA = "0xCA1244", Offset = "0xCA1244", VA = "0xCA1244", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000253")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F79")]
			[Address(RVA = "0xCA128C", Offset = "0xCA128C", VA = "0xCA128C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0xC9F070", Offset = "0xC9F070", VA = "0xC9F070")]
		[DebuggerHidden]
		public <moveDragon>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0xCA05CC", Offset = "0xCA05CC", VA = "0xCA05CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0xCA05D0", Offset = "0xCA05D0", VA = "0xCA05D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0xCA124C", Offset = "0xCA124C", VA = "0xCA124C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002D4")]
	[CompilerGenerated]
	private sealed class <firstAttack>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ToxicMass <>4__this;

		[Token(Token = "0x17000254")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F7D")]
			[Address(RVA = "0xCA173C", Offset = "0xCA173C", VA = "0xCA173C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000255")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F7F")]
			[Address(RVA = "0xCA1784", Offset = "0xCA1784", VA = "0xCA1784", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0xC9F098", Offset = "0xC9F098", VA = "0xC9F098")]
		[DebuggerHidden]
		public <firstAttack>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0xCA1294", Offset = "0xCA1294", VA = "0xCA1294", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0xCA1298", Offset = "0xCA1298", VA = "0xCA1298", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0xCA1744", Offset = "0xCA1744", VA = "0xCA1744", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002D5")]
	[CompilerGenerated]
	private sealed class <shootProjectile>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemyProjectile;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ToxicMass <>4__this;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool makeBig;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float delay;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject <proj>5__2;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody <projRB>5__3;

		[Token(Token = "0x17000256")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F83")]
			[Address(RVA = "0xCA1B98", Offset = "0xCA1B98", VA = "0xCA1B98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000257")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F85")]
			[Address(RVA = "0xCA1BE0", Offset = "0xCA1BE0", VA = "0xCA1BE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0xC9F3D4", Offset = "0xC9F3D4", VA = "0xC9F3D4")]
		[DebuggerHidden]
		public <shootProjectile>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0xCA178C", Offset = "0xCA178C", VA = "0xCA178C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0xCA1790", Offset = "0xCA1790", VA = "0xCA1790", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0xCA1BA0", Offset = "0xCA1BA0", VA = "0xCA1BA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002D6")]
	[CompilerGenerated]
	private sealed class <castRapidFire>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ToxicMass <>4__this;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool darkaxerAttack;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <numOfProjectiles>5__2;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <aimAccuracy>5__3;

		[Token(Token = "0x17000258")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F89")]
			[Address(RVA = "0xCA1FFC", Offset = "0xCA1FFC", VA = "0xCA1FFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000259")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F8B")]
			[Address(RVA = "0xCA2044", Offset = "0xCA2044", VA = "0xCA2044", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0xC9F68C", Offset = "0xC9F68C", VA = "0xC9F68C")]
		[DebuggerHidden]
		public <castRapidFire>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0xCA1BE8", Offset = "0xCA1BE8", VA = "0xCA1BE8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xCA1BEC", Offset = "0xCA1BEC", VA = "0xCA1BEC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xCA2004", Offset = "0xCA2004", VA = "0xCA2004", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002D7")]
	[CompilerGenerated]
	private sealed class <darkaxerDeathTimer>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ToxicMass <>4__this;

		[Token(Token = "0x1700025A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F8F")]
			[Address(RVA = "0xCA2264", Offset = "0xCA2264", VA = "0xCA2264", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F91")]
			[Address(RVA = "0xCA22AC", Offset = "0xCA22AC", VA = "0xCA22AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0xC9F6B4", Offset = "0xC9F6B4", VA = "0xC9F6B4")]
		[DebuggerHidden]
		public <darkaxerDeathTimer>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0xCA204C", Offset = "0xCA204C", VA = "0xCA204C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xCA2050", Offset = "0xCA2050", VA = "0xCA2050", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0xCA226C", Offset = "0xCA226C", VA = "0xCA226C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002D8")]
	[CompilerGenerated]
	private sealed class <delayFade>d__36 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ToxicMass <>4__this;

		[Token(Token = "0x1700025C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000F95")]
			[Address(RVA = "0xCA2380", Offset = "0xCA2380", VA = "0xCA2380", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000F97")]
			[Address(RVA = "0xCA23C8", Offset = "0xCA23C8", VA = "0xCA23C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0xC9F6DC", Offset = "0xC9F6DC", VA = "0xC9F6DC")]
		[DebuggerHidden]
		public <delayFade>d__36(int <>1__state)
		{
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0xCA22B4", Offset = "0xCA22B4", VA = "0xCA22B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0xCA22B8", Offset = "0xCA22B8", VA = "0xCA22B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0xCA2388", Offset = "0xCA2388", VA = "0xCA2388", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000E87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000E88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject projectile1;

	[Token(Token = "0x4000E89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject projectile2;

	[Token(Token = "0x4000E8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public BattleDialogueBox dialogueBox;

	[Token(Token = "0x4000E8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public Sprite sydneyPortrait;

	[Token(Token = "0x4000E8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject darkaxerObject;

	[Token(Token = "0x4000E8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public Transform darkaxerProjTrans;

	[Token(Token = "0x4000E8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public Weapon fistWeapon;

	[Token(Token = "0x4000E8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public AudioClip finalAttackTrack;

	[Token(Token = "0x4000E90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public AudioSource deathSound;

	[Token(Token = "0x4000E91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public string[] battleDialogue;

	[Token(Token = "0x4000E92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private bool chaseStarted;

	[Token(Token = "0x4000E93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x191")]
	private bool skipDialogue;

	[Token(Token = "0x4000E94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x192")]
	private bool fightEnded;

	[Token(Token = "0x4000E95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private UnityEngine.Vector3 originalHpScale;

	[Token(Token = "0x4000E96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public Transform darkaxerInfoCanvasTrans;

	[Token(Token = "0x4000E97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private bool canDie;

	[Token(Token = "0x4000E98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	public ToxicMassPhase phase;

	[Token(Token = "0x4000E99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private int turnNum;

	[Token(Token = "0x4000E9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	public float baseProjectileSpeed;

	[Token(Token = "0x4000E9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[Header("Audio")]
	public AudioClip[] dialogueClips;

	[Token(Token = "0x6000F4B")]
	[Address(RVA = "0xC9EAE4", Offset = "0xC9EAE4", VA = "0xC9EAE4", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000F4C")]
	[Address(RVA = "0xC9EC50", Offset = "0xC9EC50", VA = "0xC9EC50", Slot = "7")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000F4D")]
	[Address(RVA = "0xC9EC58", Offset = "0xC9EC58", VA = "0xC9EC58", Slot = "16")]
	public override void enemyAttack(bool endTurnAfter = true)
	{
	}

	[Token(Token = "0x6000F4E")]
	[Address(RVA = "0xC9ECE4", Offset = "0xC9ECE4", VA = "0xC9ECE4")]
	[IteratorStateMachine(typeof(<startChase>d__25))]
	private IEnumerator startChase()
	{
		return null;
	}

	[Token(Token = "0x6000F4F")]
	[Address(RVA = "0xC9EEC0", Offset = "0xC9EEC0", VA = "0xC9EEC0")]
	[IteratorStateMachine(typeof(<moveHealthBar>d__26))]
	private IEnumerator moveHealthBar()
	{
		return null;
	}

	[Token(Token = "0x6000F50")]
	[Address(RVA = "0xC9EE30", Offset = "0xC9EE30", VA = "0xC9EE30")]
	[IteratorStateMachine(typeof(<castShotgunBlast>d__27))]
	protected IEnumerator castShotgunBlast()
	{
		return null;
	}

	[Token(Token = "0x6000F51")]
	[Address(RVA = "0xC9EF78", Offset = "0xC9EF78", VA = "0xC9EF78")]
	[IteratorStateMachine(typeof(<moveDarkaxerBack>d__28))]
	private IEnumerator moveDarkaxerBack()
	{
		return null;
	}

	[Token(Token = "0x6000F52")]
	[Address(RVA = "0xC9F008", Offset = "0xC9F008", VA = "0xC9F008")]
	[IteratorStateMachine(typeof(<moveDragon>d__29))]
	private IEnumerator moveDragon()
	{
		return null;
	}

	[Token(Token = "0x6000F53")]
	[Address(RVA = "0xC9ED4C", Offset = "0xC9ED4C", VA = "0xC9ED4C")]
	[IteratorStateMachine(typeof(<firstAttack>d__30))]
	private IEnumerator firstAttack()
	{
		return null;
	}

	[Token(Token = "0x6000F54")]
	[Address(RVA = "0xC9F0C0", Offset = "0xC9F0C0", VA = "0xC9F0C0")]
	public void playDialogue(string dialogue, Sprite portrait)
	{
	}

	[Token(Token = "0x6000F55")]
	[Address(RVA = "0xC9F344", Offset = "0xC9F344", VA = "0xC9F344")]
	[IteratorStateMachine(typeof(<shootProjectile>d__32))]
	protected IEnumerator shootProjectile(GameObject enemyProjectile, float delay, bool makeBig = true)
	{
		return null;
	}

	[Token(Token = "0x6000F56")]
	[Address(RVA = "0xC9F3FC", Offset = "0xC9F3FC", VA = "0xC9F3FC", Slot = "8")]
	public override void killSelf()
	{
	}

	[Token(Token = "0x6000F57")]
	[Address(RVA = "0xC9EDB4", Offset = "0xC9EDB4", VA = "0xC9EDB4")]
	[IteratorStateMachine(typeof(<castRapidFire>d__34))]
	protected IEnumerator castRapidFire(bool darkaxerAttack = false)
	{
		return null;
	}

	[Token(Token = "0x6000F58")]
	[Address(RVA = "0xC9F624", Offset = "0xC9F624", VA = "0xC9F624")]
	[IteratorStateMachine(typeof(<darkaxerDeathTimer>d__35))]
	private IEnumerator darkaxerDeathTimer()
	{
		return null;
	}

	[Token(Token = "0x6000F59")]
	[Address(RVA = "0xC9F5BC", Offset = "0xC9F5BC", VA = "0xC9F5BC")]
	[IteratorStateMachine(typeof(<delayFade>d__36))]
	private IEnumerator delayFade()
	{
		return null;
	}

	[Token(Token = "0x6000F5A")]
	[Address(RVA = "0xC9F704", Offset = "0xC9F704", VA = "0xC9F704", Slot = "17")]
	public override void playHurtAnimation()
	{
	}

	[Token(Token = "0x6000F5B")]
	[Address(RVA = "0xC9F7CC", Offset = "0xC9F7CC", VA = "0xC9F7CC")]
	public ToxicMass()
	{
	}
}
[Token(Token = "0x20002D9")]
public class WreckingBallCollider : MonoBehaviour
{
	[Token(Token = "0x4000ECD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody rb;

	[Token(Token = "0x4000ECE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public EnemyWreckingBall ball;

	[Token(Token = "0x6000F98")]
	[Address(RVA = "0xCA23D0", Offset = "0xCA23D0", VA = "0xCA23D0")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000F99")]
	[Address(RVA = "0xCA26A4", Offset = "0xCA26A4", VA = "0xCA26A4")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x6000F9A")]
	[Address(RVA = "0xCA28F0", Offset = "0xCA28F0", VA = "0xCA28F0")]
	public void addForce(UnityEngine.Vector3 pos)
	{
	}

	[Token(Token = "0x6000F9B")]
	[Address(RVA = "0xCA2964", Offset = "0xCA2964", VA = "0xCA2964")]
	public WreckingBallCollider()
	{
	}
}
[Token(Token = "0x20002DA")]
[CreateAssetMenu(menuName = "Items/Potions/Exp Potion", order = 999)]
public class ItemExpPotion : Item
{
	[Token(Token = "0x4000ECF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int expValue;

	[Token(Token = "0x4000ED0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject particleEffect;

	[Token(Token = "0x6000F9C")]
	[Address(RVA = "0xCA296C", Offset = "0xCA296C", VA = "0xCA296C", Slot = "4")]
	public override void useItem(int inventoryIndex)
	{
	}

	[Token(Token = "0x6000F9D")]
	[Address(RVA = "0xCA2B9C", Offset = "0xCA2B9C", VA = "0xCA2B9C")]
	public ItemExpPotion()
	{
	}
}
[Token(Token = "0x20002DB")]
[CreateAssetMenu(menuName = "Items/Keys/ReturnToHub", order = 999)]
public class ItemHubReturn : Item
{
	[Token(Token = "0x4000ED1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string sceneName;

	[Token(Token = "0x4000ED2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool useOtherScene;

	[Token(Token = "0x6000F9E")]
	[Address(RVA = "0xCA2BA4", Offset = "0xCA2BA4", VA = "0xCA2BA4", Slot = "4")]
	public override void useItem(int inventoryIndex)
	{
	}

	[Token(Token = "0x6000F9F")]
	[Address(RVA = "0xCA2C5C", Offset = "0xCA2C5C", VA = "0xCA2C5C")]
	public ItemHubReturn()
	{
	}
}
[Token(Token = "0x20002DC")]
[CreateAssetMenu(menuName = "Items/Potions/Memory Core", order = 999)]
public class ItemMemoryCore : Item
{
	[Token(Token = "0x4000ED3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int expValue;

	[Token(Token = "0x4000ED4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject particleEffect;

	[Token(Token = "0x6000FA0")]
	[Address(RVA = "0xCA2C64", Offset = "0xCA2C64", VA = "0xCA2C64", Slot = "4")]
	public override void useItem(int inventoryIndex)
	{
	}

	[Token(Token = "0x6000FA1")]
	[Address(RVA = "0xCA2DFC", Offset = "0xCA2DFC", VA = "0xCA2DFC")]
	public ItemMemoryCore()
	{
	}
}
[Token(Token = "0x20002DD")]
[CreateAssetMenu(menuName = "Items/Placeable", order = 999)]
public class ItemPlaceable : Item
{
	[Token(Token = "0x4000ED5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject placeableObject;

	[Token(Token = "0x4000ED6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject spawnParticle;

	[Token(Token = "0x4000ED7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool dungeonOnly;

	[Token(Token = "0x6000FA2")]
	[Address(RVA = "0xCA2E04", Offset = "0xCA2E04", VA = "0xCA2E04")]
	private void placeItem(int inventoryIndex)
	{
	}

	[Token(Token = "0x6000FA3")]
	[Address(RVA = "0xCA316C", Offset = "0xCA316C", VA = "0xCA316C", Slot = "4")]
	public override void useItem(int inventoryIndex)
	{
	}

	[Token(Token = "0x6000FA4")]
	[Address(RVA = "0xCA3314", Offset = "0xCA3314", VA = "0xCA3314")]
	public ItemPlaceable()
	{
	}
}
[Token(Token = "0x20002DE")]
[CreateAssetMenu(menuName = "Items/PP Up", order = 999)]
public class ItemPPUp : Item
{
	[Token(Token = "0x4000ED8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject useParticle;

	[Token(Token = "0x6000FA5")]
	[Address(RVA = "0xCA3324", Offset = "0xCA3324", VA = "0xCA3324", Slot = "4")]
	public override void useItem(int inventoryIndex)
	{
	}

	[Token(Token = "0x6000FA6")]
	[Address(RVA = "0xCA34BC", Offset = "0xCA34BC", VA = "0xCA34BC")]
	public ItemPPUp()
	{
	}
}
[Token(Token = "0x20002DF")]
[CreateAssetMenu(menuName = "Items/Encounter Starter", order = 999)]
public class ItemStartFight : Item
{
	[Token(Token = "0x4000ED9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<EnemyParent> enemies;

	[Token(Token = "0x4000EDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string battleScene;

	[Token(Token = "0x6000FA7")]
	[Address(RVA = "0xCA34C4", Offset = "0xCA34C4", VA = "0xCA34C4", Slot = "4")]
	public override void useItem(int inventoryIndex)
	{
	}

	[Token(Token = "0x6000FA8")]
	[Address(RVA = "0xCA3990", Offset = "0xCA3990", VA = "0xCA3990")]
	public ItemStartFight()
	{
	}
}
[Token(Token = "0x20002E0")]
[CreateAssetMenu(menuName = "Items/Pet", order = 999)]
public class ItemSummonPet : Item
{
	[Token(Token = "0x4000EDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public OverworldPet pet;

	[Token(Token = "0x4000EDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public PlayerSpell learnSpell;

	[Token(Token = "0x6000FA9")]
	[Address(RVA = "0xCA3998", Offset = "0xCA3998", VA = "0xCA3998", Slot = "4")]
	public override void useItem(int inventoryIndex)
	{
	}

	[Token(Token = "0x6000FAA")]
	[Address(RVA = "0xCA3EAC", Offset = "0xCA3EAC", VA = "0xCA3EAC")]
	public ItemSummonPet()
	{
	}
}
[Token(Token = "0x20002E1")]
[CreateAssetMenu(menuName = "Items/Token", order = 999)]
public class ItemTokens : Item
{
	[Token(Token = "0x4000EDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int tokenValue;

	[Token(Token = "0x6000FAB")]
	[Address(RVA = "0xCA3EB4", Offset = "0xCA3EB4", VA = "0xCA3EB4", Slot = "4")]
	public override void useItem(int inventoryIndex)
	{
	}

	[Token(Token = "0x6000FAC")]
	[Address(RVA = "0xCA40A0", Offset = "0xCA40A0", VA = "0xCA40A0")]
	public ItemTokens()
	{
	}
}
[Token(Token = "0x20002E2")]
[CreateAssetMenu(menuName = "Items/Consumable/Trap Disabler", order = 999)]
public class ItemTrapDisable : Item
{
	[Token(Token = "0x4000EDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject useParticle;

	[Token(Token = "0x6000FAD")]
	[Address(RVA = "0xCA40A8", Offset = "0xCA40A8", VA = "0xCA40A8", Slot = "4")]
	public override void useItem(int inventoryIndex)
	{
	}

	[Token(Token = "0x6000FAE")]
	[Address(RVA = "0xCA42F8", Offset = "0xCA42F8", VA = "0xCA42F8")]
	public ItemTrapDisable()
	{
	}
}
[Token(Token = "0x20002E3")]
public class BallPuzzleGoal : MonoBehaviour
{
	[Token(Token = "0x4000EDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject chest;

	[Token(Token = "0x4000EE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource source;

	[Token(Token = "0x4000EE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool triggered;

	[Token(Token = "0x6000FAF")]
	[Address(RVA = "0xCA4300", Offset = "0xCA4300", VA = "0xCA4300")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000FB0")]
	[Address(RVA = "0xCA43A8", Offset = "0xCA43A8", VA = "0xCA43A8")]
	public BallPuzzleGoal()
	{
	}
}
[Token(Token = "0x20002E4")]
public class PuzzleCube : MonoBehaviour
{
	[Token(Token = "0x4000EE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.Vector3 startPos;

	[Token(Token = "0x4000EE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Rigidbody rb;

	[Token(Token = "0x6000FB1")]
	[Address(RVA = "0xCA43B0", Offset = "0xCA43B0", VA = "0xCA43B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000FB2")]
	[Address(RVA = "0xCA43E0", Offset = "0xCA43E0", VA = "0xCA43E0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000FB3")]
	[Address(RVA = "0xCA44DC", Offset = "0xCA44DC", VA = "0xCA44DC")]
	public PuzzleCube()
	{
	}
}
[Token(Token = "0x20002E5")]
public class EnableHoverBoard : MonoBehaviour
{
	[Token(Token = "0x6000FB4")]
	[Address(RVA = "0xCA44E4", Offset = "0xCA44E4", VA = "0xCA44E4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000FB5")]
	[Address(RVA = "0xCA4538", Offset = "0xCA4538", VA = "0xCA4538")]
	public EnableHoverBoard()
	{
	}
}
[Token(Token = "0x20002E6")]
public class HoverboardController : MonoBehaviour
{
	[Token(Token = "0x4000EE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody rigidbody;

	[Token(Token = "0x4000EE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float hoverSpeed;

	[Token(Token = "0x4000EE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float turnSpeed;

	[Token(Token = "0x4000EE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxSpeed;

	[Token(Token = "0x4000EE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float boostPower;

	[Token(Token = "0x4000EE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float boostCD;

	[Token(Token = "0x4000EEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float boostTimer;

	[Token(Token = "0x4000EEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform playerPos;

	[Token(Token = "0x4000EEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ParticleSystem boostParticle;

	[Token(Token = "0x4000EED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isBraking;

	[Token(Token = "0x4000EEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool hasZoomModule;

	[Token(Token = "0x4000EEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioSource boostSource;

	[Token(Token = "0x6000FB6")]
	[Address(RVA = "0xCA4540", Offset = "0xCA4540", VA = "0xCA4540")]
	private void Start()
	{
	}

	[Token(Token = "0x6000FB7")]
	[Address(RVA = "0xCA46EC", Offset = "0xCA46EC", VA = "0xCA46EC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000FB8")]
	[Address(RVA = "0xCA4888", Offset = "0xCA4888", VA = "0xCA4888")]
	private void Update()
	{
	}

	[Token(Token = "0x6000FB9")]
	[Address(RVA = "0xCA4A7C", Offset = "0xCA4A7C", VA = "0xCA4A7C")]
	public void moveBoard(UnityEngine.Vector3 direction)
	{
	}

	[Token(Token = "0x6000FBA")]
	[Address(RVA = "0xCA4AAC", Offset = "0xCA4AAC", VA = "0xCA4AAC")]
	public void boostBoard()
	{
	}

	[Token(Token = "0x6000FBB")]
	[Address(RVA = "0xCA4C0C", Offset = "0xCA4C0C", VA = "0xCA4C0C")]
	public HoverboardController()
	{
	}
}
[Token(Token = "0x20002E7")]
public class HoverboardTriggerZone : MonoBehaviour
{
	[Token(Token = "0x6000FBC")]
	[Address(RVA = "0xCA4C24", Offset = "0xCA4C24", VA = "0xCA4C24")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6000FBD")]
	[Address(RVA = "0xCA4D20", Offset = "0xCA4D20", VA = "0xCA4D20")]
	public HoverboardTriggerZone()
	{
	}
}
[Token(Token = "0x20002E8")]
public class MiningOre : MonoBehaviour
{
	[Token(Token = "0x4000EF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Item rewardItem;

	[Token(Token = "0x4000EF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject mineParticle;

	[Token(Token = "0x4000EF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int mineDifficulty;

	[Token(Token = "0x6000FBE")]
	[Address(RVA = "0xCA4D28", Offset = "0xCA4D28", VA = "0xCA4D28")]
	public void attemptMine(int minePower)
	{
	}

	[Token(Token = "0x6000FBF")]
	[Address(RVA = "0xCA4DFC", Offset = "0xCA4DFC", VA = "0xCA4DFC")]
	public MiningOre()
	{
	}
}
[Token(Token = "0x20002E9")]
public class MiningPick : MonoBehaviour
{
	[Token(Token = "0x4000EF3")]
	private const float reqVelToSwing = 1f;

	[Token(Token = "0x4000EF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int minePower;

	[Token(Token = "0x4000EF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PhysicsHead head;

	[Token(Token = "0x4000EF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool grabbed;

	[Token(Token = "0x6000FC0")]
	[Address(RVA = "0xCA4E04", Offset = "0xCA4E04", VA = "0xCA4E04")]
	public void pickUp()
	{
	}

	[Token(Token = "0x6000FC1")]
	[Address(RVA = "0xCA4E10", Offset = "0xCA4E10", VA = "0xCA4E10")]
	public void drop()
	{
	}

	[Token(Token = "0x6000FC2")]
	[Address(RVA = "0xCA4E18", Offset = "0xCA4E18", VA = "0xCA4E18")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000FC3")]
	[Address(RVA = "0xCA5080", Offset = "0xCA5080", VA = "0xCA5080")]
	public MiningPick()
	{
	}
}
[Token(Token = "0x20002EA")]
public class PhysicsFollower : MonoBehaviour
{
	[Token(Token = "0x4000EF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PhysicsHead _physicsHead;

	[Token(Token = "0x4000EF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody rb;

	[Token(Token = "0x4000EF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private UnityEngine.Vector3 _velocity;

	[Token(Token = "0x4000EFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float _sensitivity;

	[Token(Token = "0x6000FC4")]
	[Address(RVA = "0xCA5090", Offset = "0xCA5090", VA = "0xCA5090")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FC5")]
	[Address(RVA = "0xCA50E0", Offset = "0xCA50E0", VA = "0xCA50E0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000FC6")]
	[Address(RVA = "0xCA51FC", Offset = "0xCA51FC", VA = "0xCA51FC")]
	public void SetFollowTarget(PhysicsHead head)
	{
	}

	[Token(Token = "0x6000FC7")]
	[Address(RVA = "0xCA5204", Offset = "0xCA5204", VA = "0xCA5204")]
	public PhysicsFollower()
	{
	}
}
[Token(Token = "0x20002EB")]
public class PhysicsHead : MonoBehaviour
{
	[Token(Token = "0x4000EFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PhysicsFollower _followerPrefab;

	[Token(Token = "0x4000EFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PhysicsFollower spawnedFollower;

	[Token(Token = "0x6000FC8")]
	[Address(RVA = "0xCA5214", Offset = "0xCA5214", VA = "0xCA5214")]
	private void SpawnBatCapsuleFollower()
	{
	}

	[Token(Token = "0x6000FC9")]
	[Address(RVA = "0xCA52D0", Offset = "0xCA52D0", VA = "0xCA52D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000FCA")]
	[Address(RVA = "0xCA52D4", Offset = "0xCA52D4", VA = "0xCA52D4")]
	public PhysicsHead()
	{
	}
}
[Token(Token = "0x20002EC")]
public class BagZone : MonoBehaviour
{
	[Token(Token = "0x4000EFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool thisZoneTouched;

	[Token(Token = "0x6000FCB")]
	[Address(RVA = "0xCA52DC", Offset = "0xCA52DC", VA = "0xCA52DC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000FCC")]
	[Address(RVA = "0xCA5394", Offset = "0xCA5394", VA = "0xCA5394")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000FCD")]
	[Address(RVA = "0xCA5448", Offset = "0xCA5448", VA = "0xCA5448")]
	public BagZone()
	{
	}
}
[Token(Token = "0x20002ED")]
public class PunchingBag : MonoBehaviour
{
	[Token(Token = "0x20002EE")]
	[CompilerGenerated]
	private sealed class <delayMenuClose>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x1700025E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000FDB")]
			[Address(RVA = "0xCA6824", Offset = "0xCA6824", VA = "0xCA6824", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700025F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000FDD")]
			[Address(RVA = "0xCA686C", Offset = "0xCA686C", VA = "0xCA686C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0xCA5BF4", Offset = "0xCA5BF4", VA = "0xCA5BF4")]
		[DebuggerHidden]
		public <delayMenuClose>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0xCA6720", Offset = "0xCA6720", VA = "0xCA6720", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0xCA6724", Offset = "0xCA6724", VA = "0xCA6724", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0xCA682C", Offset = "0xCA682C", VA = "0xCA682C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002EF")]
	[CompilerGenerated]
	private sealed class <CycleZones>d__36 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PunchingBag <>4__this;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float cycleDelay;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <maxTime>5__3;

		[Token(Token = "0x17000260")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000FE1")]
			[Address(RVA = "0xCA6BD4", Offset = "0xCA6BD4", VA = "0xCA6BD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000261")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000FE3")]
			[Address(RVA = "0xCA6C1C", Offset = "0xCA6C1C", VA = "0xCA6C1C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0xCA63A0", Offset = "0xCA63A0", VA = "0xCA63A0")]
		[DebuggerHidden]
		public <CycleZones>d__36(int <>1__state)
		{
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0xCA6874", Offset = "0xCA6874", VA = "0xCA6874", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0xCA6878", Offset = "0xCA6878", VA = "0xCA6878", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0xCA6BDC", Offset = "0xCA6BDC", VA = "0xCA6BDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002F0")]
	[CompilerGenerated]
	private sealed class <PunchTimer>d__37 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float punchDelay;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PunchingBag <>4__this;

		[Token(Token = "0x17000262")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000FE7")]
			[Address(RVA = "0xCA6CE0", Offset = "0xCA6CE0", VA = "0xCA6CE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000263")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000FE9")]
			[Address(RVA = "0xCA6D28", Offset = "0xCA6D28", VA = "0xCA6D28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0xCA63C8", Offset = "0xCA63C8", VA = "0xCA63C8")]
		[DebuggerHidden]
		public <PunchTimer>d__37(int <>1__state)
		{
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0xCA6C24", Offset = "0xCA6C24", VA = "0xCA6C24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0xCA6C28", Offset = "0xCA6C28", VA = "0xCA6C28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xCA6CE8", Offset = "0xCA6CE8", VA = "0xCA6CE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000EFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool canBeHit;

	[Token(Token = "0x4000EFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float punchDelay;

	[Token(Token = "0x4000F00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float requiredSpeedToHit;

	[Token(Token = "0x4000F01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int punchNumberToGainz;

	[Token(Token = "0x4000F02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int currentPunches;

	[Token(Token = "0x4000F03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int comboCount;

	[Token(Token = "0x4000F04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float oldLineWidth;

	[Token(Token = "0x4000F05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool cycleOn;

	[Token(Token = "0x4000F06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool touchingZoneOne;

	[Token(Token = "0x4000F07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool touchingZoneTwo;

	[Token(Token = "0x4000F08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	public bool touchingZoneThree;

	[Token(Token = "0x4000F09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool punchingStarted;

	[Token(Token = "0x4000F0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject ZoneOne;

	[Token(Token = "0x4000F0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject ZoneTwo;

	[Token(Token = "0x4000F0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject ZoneThree;

	[Token(Token = "0x4000F0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject ZoneOneRing;

	[Token(Token = "0x4000F0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject ZoneTwoRing;

	[Token(Token = "0x4000F0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject ZoneThreeRing;

	[Token(Token = "0x4000F10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject ExpThrower;

	[Token(Token = "0x4000F11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject expText;

	[Token(Token = "0x4000F12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject punchParticle;

	[Token(Token = "0x4000F13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public TMP_Text ComboCountText;

	[Token(Token = "0x4000F14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Transform telePoint;

	[Token(Token = "0x4000F15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private UnityEngine.Vector3 smallPointerScale;

	[Token(Token = "0x4000F16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private UnityEngine.Vector3 oldPointerScale;

	[Token(Token = "0x4000F17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject textParent;

	[Token(Token = "0x4000F18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public AudioSource audioSource;

	[Token(Token = "0x4000F19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public AudioClip[] clips;

	[Token(Token = "0x4000F1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject currentBonusZone;

	[Token(Token = "0x4000F1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private UnityEngine.Vector3 punchForce;

	[Token(Token = "0x4000F1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Rigidbody punchingBagRigidbody;

	[Token(Token = "0x6000FCE")]
	[Address(RVA = "0xCA5450", Offset = "0xCA5450", VA = "0xCA5450")]
	private void Update()
	{
	}

	[Token(Token = "0x6000FCF")]
	[Address(RVA = "0xCA589C", Offset = "0xCA589C", VA = "0xCA589C")]
	public void StartPunching()
	{
	}

	[Token(Token = "0x6000FD0")]
	[Address(RVA = "0xCA5650", Offset = "0xCA5650", VA = "0xCA5650")]
	public void stopPunching()
	{
	}

	[Token(Token = "0x6000FD1")]
	[Address(RVA = "0xCA5B94", Offset = "0xCA5B94", VA = "0xCA5B94")]
	[IteratorStateMachine(typeof(<delayMenuClose>d__34))]
	private IEnumerator delayMenuClose()
	{
		return null;
	}

	[Token(Token = "0x6000FD2")]
	[Address(RVA = "0xCA5C1C", Offset = "0xCA5C1C", VA = "0xCA5C1C")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x6000FD3")]
	[Address(RVA = "0xCA5B1C", Offset = "0xCA5B1C", VA = "0xCA5B1C")]
	[IteratorStateMachine(typeof(<CycleZones>d__36))]
	private IEnumerator CycleZones(float cycleDelay)
	{
		return null;
	}

	[Token(Token = "0x6000FD4")]
	[Address(RVA = "0xCA6328", Offset = "0xCA6328", VA = "0xCA6328")]
	[IteratorStateMachine(typeof(<PunchTimer>d__37))]
	private IEnumerator PunchTimer(float punchDelay)
	{
		return null;
	}

	[Token(Token = "0x6000FD5")]
	[Address(RVA = "0xCA61BC", Offset = "0xCA61BC", VA = "0xCA61BC")]
	private void checkZone()
	{
	}

	[Token(Token = "0x6000FD6")]
	[Address(RVA = "0xCA63F0", Offset = "0xCA63F0", VA = "0xCA63F0")]
	private void GiveGainz()
	{
	}

	[Token(Token = "0x6000FD7")]
	[Address(RVA = "0xCA66FC", Offset = "0xCA66FC", VA = "0xCA66FC")]
	public PunchingBag()
	{
	}
}
[Token(Token = "0x20002F1")]
public class PusherButton : MonoBehaviour
{
	[Token(Token = "0x4000F29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PusherMan pusherMan;

	[Token(Token = "0x6000FEA")]
	[Address(RVA = "0xCA6D30", Offset = "0xCA6D30", VA = "0xCA6D30")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000FEB")]
	[Address(RVA = "0xCA71A8", Offset = "0xCA71A8", VA = "0xCA71A8")]
	public PusherButton()
	{
	}
}
[Token(Token = "0x20002F2")]
public class PusherJoystick : MonoBehaviour
{
	[Token(Token = "0x4000F2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.Vector3 startPos;

	[Token(Token = "0x4000F2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Quaternion startRot;

	[Token(Token = "0x4000F2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PusherMan pusherMan;

	[Token(Token = "0x4000F2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject stickMesh;

	[Token(Token = "0x4000F2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform originalParent;

	[Token(Token = "0x4000F2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioSource audioSource;

	[Token(Token = "0x4000F30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isGrabbed;

	[Token(Token = "0x6000FEC")]
	[Address(RVA = "0xCA71B0", Offset = "0xCA71B0", VA = "0xCA71B0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000FED")]
	[Address(RVA = "0xCA721C", Offset = "0xCA721C", VA = "0xCA721C")]
	public void resetTrans()
	{
	}

	[Token(Token = "0x6000FEE")]
	[Address(RVA = "0xCA7310", Offset = "0xCA7310", VA = "0xCA7310")]
	public void Grab()
	{
	}

	[Token(Token = "0x6000FEF")]
	[Address(RVA = "0xCA731C", Offset = "0xCA731C", VA = "0xCA731C")]
	public void Drop()
	{
	}

	[Token(Token = "0x6000FF0")]
	[Address(RVA = "0xCA7324", Offset = "0xCA7324", VA = "0xCA7324")]
	private void Update()
	{
	}

	[Token(Token = "0x6000FF1")]
	[Address(RVA = "0xCA7758", Offset = "0xCA7758", VA = "0xCA7758")]
	public PusherJoystick()
	{
	}
}
[Token(Token = "0x20002F3")]
public class PusherMan : MonoBehaviour
{
	[Token(Token = "0x20002F4")]
	[CompilerGenerated]
	private sealed class <delayMenuClose>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000264")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001003")]
			[Address(RVA = "0xCA895C", Offset = "0xCA895C", VA = "0xCA895C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000265")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001005")]
			[Address(RVA = "0xCA89A4", Offset = "0xCA89A4", VA = "0xCA89A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0xCA8424", Offset = "0xCA8424", VA = "0xCA8424")]
		[DebuggerHidden]
		public <delayMenuClose>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0xCA8858", Offset = "0xCA8858", VA = "0xCA8858", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0xCA885C", Offset = "0xCA885C", VA = "0xCA885C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0xCA8964", Offset = "0xCA8964", VA = "0xCA8964", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public NPCOverworld pusherNPC;

	[Token(Token = "0x4000F32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform telePoint;

	[Token(Token = "0x4000F33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform coinLaunchTrans;

	[Token(Token = "0x4000F34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform[] coinSpawnTranforms;

	[Token(Token = "0x4000F35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject chipPrefab;

	[Token(Token = "0x4000F36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject coinPrefab;

	[Token(Token = "0x4000F37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] rareItems;

	[Token(Token = "0x4000F38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject[] commonItems;

	[Token(Token = "0x4000F39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Rigidbody pusher;

	[Token(Token = "0x4000F3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform pusherParent;

	[Token(Token = "0x4000F3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private UnityEngine.Vector3 originalPusherPos;

	[Token(Token = "0x4000F3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AudioClip[] soundEffects;

	[Token(Token = "0x4000F3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AudioSource audioSource;

	[Token(Token = "0x4000F3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject buttons;

	[Token(Token = "0x4000F3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Animator textAnim;

	[Token(Token = "0x4000F40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Text tokenText;

	[Token(Token = "0x4000F41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private UnityEngine.Vector3 smallPointerScale;

	[Token(Token = "0x4000F42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private UnityEngine.Vector3 oldPointerScale;

	[Token(Token = "0x4000F43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float oldLineWidth;

	[Token(Token = "0x4000F44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private int tokensLaunched;

	[Token(Token = "0x4000F45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int reqTokensToBonus;

	[Token(Token = "0x4000F46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private int bonusTokens;

	[Token(Token = "0x4000F47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool gameStarted;

	[Token(Token = "0x4000F48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	private bool isPlaying;

	[Token(Token = "0x6000FF2")]
	[Address(RVA = "0xCA7760", Offset = "0xCA7760", VA = "0xCA7760")]
	public void startPlaying()
	{
	}

	[Token(Token = "0x6000FF3")]
	[Address(RVA = "0xCA7A44", Offset = "0xCA7A44", VA = "0xCA7A44")]
	public void startGame()
	{
	}

	[Token(Token = "0x6000FF4")]
	[Address(RVA = "0xCA7C88", Offset = "0xCA7C88", VA = "0xCA7C88")]
	public void addTokens(int num)
	{
	}

	[Token(Token = "0x6000FF5")]
	[Address(RVA = "0xCA8024", Offset = "0xCA8024", VA = "0xCA8024")]
	public void addRandomForce()
	{
	}

	[Token(Token = "0x6000FF6")]
	[Address(RVA = "0xCA6E5C", Offset = "0xCA6E5C", VA = "0xCA6E5C")]
	public void launchCoin()
	{
	}

	[Token(Token = "0x6000FF7")]
	[Address(RVA = "0xCA8128", Offset = "0xCA8128", VA = "0xCA8128")]
	public void stopPlaying()
	{
	}

	[Token(Token = "0x6000FF8")]
	[Address(RVA = "0xCA83C4", Offset = "0xCA83C4", VA = "0xCA83C4")]
	[IteratorStateMachine(typeof(<delayMenuClose>d__30))]
	private IEnumerator delayMenuClose()
	{
		return null;
	}

	[Token(Token = "0x6000FF9")]
	[Address(RVA = "0xCA844C", Offset = "0xCA844C", VA = "0xCA844C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000FFA")]
	[Address(RVA = "0xCA8484", Offset = "0xCA8484", VA = "0xCA8484")]
	private void Update()
	{
	}

	[Token(Token = "0x6000FFB")]
	[Address(RVA = "0xCA8680", Offset = "0xCA8680", VA = "0xCA8680")]
	public void turnInToken(int value)
	{
	}

	[Token(Token = "0x6000FFC")]
	[Address(RVA = "0xCA879C", Offset = "0xCA879C", VA = "0xCA879C")]
	public void turnInToken(Item item)
	{
	}

	[Token(Token = "0x6000FFD")]
	[Address(RVA = "0xCA7638", Offset = "0xCA7638", VA = "0xCA7638")]
	public void rotateRight()
	{
	}

	[Token(Token = "0x6000FFE")]
	[Address(RVA = "0xCA751C", Offset = "0xCA751C", VA = "0xCA751C")]
	public void rotateLeft()
	{
	}

	[Token(Token = "0x6000FFF")]
	[Address(RVA = "0xCA8848", Offset = "0xCA8848", VA = "0xCA8848")]
	public PusherMan()
	{
	}
}
[Token(Token = "0x20002F5")]
public static class ShuffleListExtensions
{
	[Token(Token = "0x6001006")]
	public static T RandomItem<T>(this IList<T> list)
	{
		return (T)null;
	}

	[Token(Token = "0x6001007")]
	public static void Shuffle<T>(this IList<T> list)
	{
	}
}
[Token(Token = "0x20002F6")]
public class PusherToken : MonoBehaviour
{
	[Token(Token = "0x4000F4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int tokenValue;

	[Token(Token = "0x4000F4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Item spellItem;

	[Token(Token = "0x6001008")]
	[Address(RVA = "0xCA89AC", Offset = "0xCA89AC", VA = "0xCA89AC")]
	public PusherToken()
	{
	}
}
[Token(Token = "0x20002F7")]
public class PusherTokenZone : MonoBehaviour
{
	[Token(Token = "0x4000F4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PusherMan pusherMan;

	[Token(Token = "0x4000F4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject particle;

	[Token(Token = "0x6001009")]
	[Address(RVA = "0xCA89BC", Offset = "0xCA89BC", VA = "0xCA89BC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600100A")]
	[Address(RVA = "0xCA8BC0", Offset = "0xCA8BC0", VA = "0xCA8BC0")]
	public PusherTokenZone()
	{
	}
}
[Token(Token = "0x20002F8")]
public class RunInPlace : MonoBehaviour
{
	[Token(Token = "0x20002F9")]
	[CompilerGenerated]
	private sealed class <delayStart>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RunInPlace <>4__this;

		[Token(Token = "0x17000267")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600101A")]
			[Address(RVA = "0xCA9EF4", Offset = "0xCA9EF4", VA = "0xCA9EF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000268")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600101C")]
			[Address(RVA = "0xCA9F3C", Offset = "0xCA9F3C", VA = "0xCA9F3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0xCA9D5C", Offset = "0xCA9D5C", VA = "0xCA9D5C")]
		[DebuggerHidden]
		public <delayStart>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xCA9E44", Offset = "0xCA9E44", VA = "0xCA9E44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0xCA9E48", Offset = "0xCA9E48", VA = "0xCA9E48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xCA9EFC", Offset = "0xCA9EFC", VA = "0xCA9EFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002FA")]
	[CompilerGenerated]
	private sealed class <delayMenuClose>d__45 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000269")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001020")]
			[Address(RVA = "0xCAA048", Offset = "0xCAA048", VA = "0xCAA048", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001022")]
			[Address(RVA = "0xCAA090", Offset = "0xCAA090", VA = "0xCAA090", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0xCA9DE4", Offset = "0xCA9DE4", VA = "0xCA9DE4")]
		[DebuggerHidden]
		public <delayMenuClose>d__45(int <>1__state)
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0xCA9F44", Offset = "0xCA9F44", VA = "0xCA9F44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0xCA9F48", Offset = "0xCA9F48", VA = "0xCA9F48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0xCAA050", Offset = "0xCAA050", VA = "0xCAA050", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float runSpeed;

	[Token(Token = "0x4000F50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool _isRunning;

	[Token(Token = "0x4000F51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject head;

	[Token(Token = "0x4000F52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ScrollUV treadMillScroll;

	[Token(Token = "0x4000F53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public NPCOverworld runnerNPC;

	[Token(Token = "0x4000F54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool runningStarted;

	[Token(Token = "0x4000F55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool isHeadBobbing;

	[Token(Token = "0x4000F56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	private bool isArmMoving;

	[Token(Token = "0x4000F57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float headCheckInterval;

	[Token(Token = "0x4000F58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float headCheckTimer;

	[Token(Token = "0x4000F59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float requiredHeadVelocity;

	[Token(Token = "0x4000F5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool headMovedLastInterval;

	[Token(Token = "0x4000F5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float headsetVelocity;

	[Token(Token = "0x4000F5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private UnityEngine.Vector3 lastHeadsetPosition;

	[Token(Token = "0x4000F5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float armCheckInterval;

	[Token(Token = "0x4000F5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float armCheckTimer;

	[Token(Token = "0x4000F5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float requiredArmVelocity;

	[Token(Token = "0x4000F60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float lastArmHighestSpeed;

	[Token(Token = "0x4000F61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool armsMovedLastInterval;

	[Token(Token = "0x4000F62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int hpGain;

	[Token(Token = "0x4000F63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float distRequiredForGain;

	[Token(Token = "0x4000F64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float distSinceLastGain;

	[Token(Token = "0x4000F65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int totalGains;

	[Token(Token = "0x4000F66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float distanceRun;

	[Token(Token = "0x4000F67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject UICanvas;

	[Token(Token = "0x4000F68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Text speedText;

	[Token(Token = "0x4000F69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Text distText;

	[Token(Token = "0x4000F6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Text gainsText;

	[Token(Token = "0x4000F6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float oldLineWidth;

	[Token(Token = "0x4000F6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public bool testMode;

	[Token(Token = "0x4000F6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Transform gainedStatTextSpawn;

	[Token(Token = "0x4000F6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject gainedStatText;

	[Token(Token = "0x4000F6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject heartsParticle;

	[Token(Token = "0x4000F70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Transform telePoint;

	[Token(Token = "0x4000F71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private UnityEngine.Vector3 smallPointerScale;

	[Token(Token = "0x4000F72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private UnityEngine.Vector3 oldPointerScale;

	[Token(Token = "0x17000266")]
	public bool isRunning
	{
		[Token(Token = "0x600100B")]
		[Address(RVA = "0xCA8BC8", Offset = "0xCA8BC8", VA = "0xCA8BC8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600100C")]
	[Address(RVA = "0xCA8BD0", Offset = "0xCA8BD0", VA = "0xCA8BD0")]
	private void Start()
	{
	}

	[Token(Token = "0x600100D")]
	[Address(RVA = "0xCA8BE8", Offset = "0xCA8BE8", VA = "0xCA8BE8")]
	private void Update()
	{
	}

	[Token(Token = "0x600100E")]
	[Address(RVA = "0xCA9280", Offset = "0xCA9280", VA = "0xCA9280")]
	private void increaseGains()
	{
	}

	[Token(Token = "0x600100F")]
	[Address(RVA = "0xCA91DC", Offset = "0xCA91DC", VA = "0xCA91DC")]
	public static float Round(float value, int digits)
	{
		return default(float);
	}

	[Token(Token = "0x6001010")]
	[Address(RVA = "0xCA99A4", Offset = "0xCA99A4", VA = "0xCA99A4")]
	public void startRunning()
	{
	}

	[Token(Token = "0x6001011")]
	[Address(RVA = "0xCA9CF4", Offset = "0xCA9CF4", VA = "0xCA9CF4")]
	[IteratorStateMachine(typeof(<delayStart>d__43))]
	private IEnumerator delayStart()
	{
		return null;
	}

	[Token(Token = "0x6001012")]
	[Address(RVA = "0xCA971C", Offset = "0xCA971C", VA = "0xCA971C")]
	public void stopRunning()
	{
	}

	[Token(Token = "0x6001013")]
	[Address(RVA = "0xCA9D84", Offset = "0xCA9D84", VA = "0xCA9D84")]
	[IteratorStateMachine(typeof(<delayMenuClose>d__45))]
	private IEnumerator delayMenuClose()
	{
		return null;
	}

	[Token(Token = "0x6001014")]
	[Address(RVA = "0xCA8F00", Offset = "0xCA8F00", VA = "0xCA8F00")]
	private void checkForHeadBob()
	{
	}

	[Token(Token = "0x6001015")]
	[Address(RVA = "0xCA9034", Offset = "0xCA9034", VA = "0xCA9034")]
	private void checkForArmMovement()
	{
	}

	[Token(Token = "0x6001016")]
	[Address(RVA = "0xCA9E0C", Offset = "0xCA9E0C", VA = "0xCA9E0C")]
	public RunInPlace()
	{
	}
}
[Token(Token = "0x20002FB")]
public class SlotHandle : MonoBehaviour
{
	[Token(Token = "0x4000F78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.Vector3 startPos;

	[Token(Token = "0x4000F79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Quaternion startRot;

	[Token(Token = "0x4000F7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public SlotMachine slotMachine;

	[Token(Token = "0x4000F7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject stickMesh;

	[Token(Token = "0x4000F7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform originalParent;

	[Token(Token = "0x4000F7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioSource audioSource;

	[Token(Token = "0x4000F7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioClip[] clips;

	[Token(Token = "0x4000F7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool reset;

	[Token(Token = "0x4000F80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool isGrabbed;

	[Token(Token = "0x6001023")]
	[Address(RVA = "0xCAA098", Offset = "0xCAA098", VA = "0xCAA098")]
	private void Start()
	{
	}

	[Token(Token = "0x6001024")]
	[Address(RVA = "0xCAA104", Offset = "0xCAA104", VA = "0xCAA104")]
	public void playVibrate()
	{
	}

	[Token(Token = "0x6001025")]
	[Address(RVA = "0xCAA30C", Offset = "0xCAA30C", VA = "0xCAA30C")]
	public void resetTrans()
	{
	}

	[Token(Token = "0x6001026")]
	[Address(RVA = "0xCAA400", Offset = "0xCAA400", VA = "0xCAA400")]
	public void Grab()
	{
	}

	[Token(Token = "0x6001027")]
	[Address(RVA = "0xCAA40C", Offset = "0xCAA40C", VA = "0xCAA40C")]
	public void Drop()
	{
	}

	[Token(Token = "0x6001028")]
	[Address(RVA = "0xCAA414", Offset = "0xCAA414", VA = "0xCAA414")]
	private void Update()
	{
	}

	[Token(Token = "0x6001029")]
	[Address(RVA = "0xCAA87C", Offset = "0xCAA87C", VA = "0xCAA87C")]
	public SlotHandle()
	{
	}
}
[Token(Token = "0x20002FC")]
public class SlotMachine : MonoBehaviour
{
	[Token(Token = "0x20002FD")]
	[CompilerGenerated]
	private sealed class <spinTimer>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SlotMachine <>4__this;

		[Token(Token = "0x1700026B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001035")]
			[Address(RVA = "0xCAB88C", Offset = "0xCAB88C", VA = "0xCAB88C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001037")]
			[Address(RVA = "0xCAB8D4", Offset = "0xCAB8D4", VA = "0xCAB8D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0xCAAE60", Offset = "0xCAAE60", VA = "0xCAAE60")]
		[DebuggerHidden]
		public <spinTimer>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0xCAAEF0", Offset = "0xCAAEF0", VA = "0xCAAEF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0xCAAEF4", Offset = "0xCAAEF4", VA = "0xCAAEF4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0xCAB894", Offset = "0xCAB894", VA = "0xCAB894", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20002FE")]
	[CompilerGenerated]
	private sealed class <delayMenuClose>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x1700026D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600103B")]
			[Address(RVA = "0xCABA08", Offset = "0xCABA08", VA = "0xCABA08", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600103D")]
			[Address(RVA = "0xCABA50", Offset = "0xCABA50", VA = "0xCABA50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xCAB8DC", Offset = "0xCAB8DC", VA = "0xCAB8DC")]
		[DebuggerHidden]
		public <delayMenuClose>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xCAB904", Offset = "0xCAB904", VA = "0xCAB904", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xCAB908", Offset = "0xCAB908", VA = "0xCAB908", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xCABA10", Offset = "0xCABA10", VA = "0xCABA10", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public NPCOverworld pusherNPC;

	[Token(Token = "0x4000F82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform telePoint;

	[Token(Token = "0x4000F83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator slotsAnimator;

	[Token(Token = "0x4000F84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool slotsRunning;

	[Token(Token = "0x4000F85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int tokensBet;

	[Token(Token = "0x4000F86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.Vector3 smallPointerScale;

	[Token(Token = "0x4000F87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private UnityEngine.Vector3 oldPointerScale;

	[Token(Token = "0x4000F88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float oldLineWidth;

	[Token(Token = "0x4000F89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioSource audioSource;

	[Token(Token = "0x4000F8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioClip[] clips;

	[Token(Token = "0x4000F8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text TokenText;

	[Token(Token = "0x4000F8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text winText;

	[Token(Token = "0x4000F8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool isPlaying;

	[Token(Token = "0x600102A")]
	[Address(RVA = "0xCAA88C", Offset = "0xCAA88C", VA = "0xCAA88C")]
	public void startPlaying()
	{
	}

	[Token(Token = "0x600102B")]
	[Address(RVA = "0xCAAB0C", Offset = "0xCAAB0C", VA = "0xCAAB0C")]
	public void startGame()
	{
	}

	[Token(Token = "0x600102C")]
	[Address(RVA = "0xCAAB10", Offset = "0xCAAB10", VA = "0xCAAB10")]
	private void Update()
	{
	}

	[Token(Token = "0x600102D")]
	[Address(RVA = "0xCAA770", Offset = "0xCAA770", VA = "0xCAA770")]
	public void SpinReels()
	{
	}

	[Token(Token = "0x600102E")]
	[Address(RVA = "0xCAADF8", Offset = "0xCAADF8", VA = "0xCAADF8")]
	[IteratorStateMachine(typeof(<spinTimer>d__17))]
	private IEnumerator spinTimer()
	{
		return null;
	}

	[Token(Token = "0x600102F")]
	[Address(RVA = "0xCAABB4", Offset = "0xCAABB4", VA = "0xCAABB4")]
	public void stopPlaying()
	{
	}

	[Token(Token = "0x6001030")]
	[Address(RVA = "0xCAAE88", Offset = "0xCAAE88", VA = "0xCAAE88")]
	[IteratorStateMachine(typeof(<delayMenuClose>d__19))]
	private IEnumerator delayMenuClose()
	{
		return null;
	}

	[Token(Token = "0x6001031")]
	[Address(RVA = "0xCAAEE8", Offset = "0xCAAEE8", VA = "0xCAAEE8")]
	public SlotMachine()
	{
	}
}
[Token(Token = "0x20002FF")]
public class TilePuzzleGame : MonoBehaviour
{
	[Token(Token = "0x4000F93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TilePuzzleTrigger[] triggers;

	[Token(Token = "0x4000F94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<TilePuzzleTile> tiles;

	[Token(Token = "0x4000F95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEvent onGameComplete;

	[Token(Token = "0x4000F96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource source;

	[Token(Token = "0x4000F97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool firstComplete;

	[Token(Token = "0x4000F98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform respawnPos;

	[Token(Token = "0x600103E")]
	[Address(RVA = "0xCABA58", Offset = "0xCABA58", VA = "0xCABA58")]
	private void Start()
	{
	}

	[Token(Token = "0x600103F")]
	[Address(RVA = "0xCABD74", Offset = "0xCABD74", VA = "0xCABD74")]
	public void checkForCompleteGame()
	{
	}

	[Token(Token = "0x6001040")]
	[Address(RVA = "0xCAC18C", Offset = "0xCAC18C", VA = "0xCAC18C")]
	public TilePuzzleGame()
	{
	}
}
[Token(Token = "0x2000301")]
public class TilePuzzleTile : MonoBehaviour
{
	[Token(Token = "0x4000F9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int tileID;

	[Token(Token = "0x1700026F")]
	public bool isTileStraight
	{
		[Token(Token = "0x6001044")]
		[Address(RVA = "0xCABEF0", Offset = "0xCABEF0", VA = "0xCABEF0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001045")]
	[Address(RVA = "0xCAC2AC", Offset = "0xCAC2AC", VA = "0xCAC2AC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001046")]
	[Address(RVA = "0xCAC37C", Offset = "0xCAC37C", VA = "0xCAC37C")]
	public TilePuzzleTile()
	{
	}
}
[Token(Token = "0x2000302")]
public class TilePuzzleTrigger : MonoBehaviour
{
	[Token(Token = "0x4000F9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int tileID;

	[Token(Token = "0x4000F9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TilePuzzleTile currentlyPlacedTile;

	[Token(Token = "0x6001047")]
	[Address(RVA = "0xCAC38C", Offset = "0xCAC38C", VA = "0xCAC38C")]
	private void checkGameComplete()
	{
	}

	[Token(Token = "0x6001048")]
	[Address(RVA = "0xCAC390", Offset = "0xCAC390", VA = "0xCAC390")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001049")]
	[Address(RVA = "0xCAC47C", Offset = "0xCAC47C", VA = "0xCAC47C")]
	private void onTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600104A")]
	[Address(RVA = "0xCAC514", Offset = "0xCAC514", VA = "0xCAC514")]
	public TilePuzzleTrigger()
	{
	}
}
[Token(Token = "0x2000303")]
public class ArcaxerInfiniteDungeon : MonoBehaviour
{
	[Token(Token = "0x2000304")]
	[CompilerGenerated]
	private sealed class <waitBuild>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ArcaxerInfiniteDungeon <>4__this;

		[Token(Token = "0x17000270")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001052")]
			[Address(RVA = "0xCAC8B4", Offset = "0xCAC8B4", VA = "0xCAC8B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000271")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001054")]
			[Address(RVA = "0xCAC8FC", Offset = "0xCAC8FC", VA = "0xCAC8FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0xCAC6D4", Offset = "0xCAC6D4", VA = "0xCAC6D4")]
		[DebuggerHidden]
		public <waitBuild>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xCAC704", Offset = "0xCAC704", VA = "0xCAC704", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0xCAC708", Offset = "0xCAC708", VA = "0xCAC708", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0xCAC8BC", Offset = "0xCAC8BC", VA = "0xCAC8BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public NavMeshSurface surface;

	[Token(Token = "0x4000F9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject chunkLoader;

	[Token(Token = "0x4000FA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ArcaxerInfiniteDungeon instance;

	[Token(Token = "0x600104B")]
	[Address(RVA = "0xCAC51C", Offset = "0xCAC51C", VA = "0xCAC51C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600104C")]
	[Address(RVA = "0xCAC568", Offset = "0xCAC568", VA = "0xCAC568")]
	public void onDungeonBuilt()
	{
	}

	[Token(Token = "0x600104D")]
	[Address(RVA = "0xCAC66C", Offset = "0xCAC66C", VA = "0xCAC66C")]
	[IteratorStateMachine(typeof(<waitBuild>d__5))]
	private IEnumerator waitBuild()
	{
		return null;
	}

	[Token(Token = "0x600104E")]
	[Address(RVA = "0xCAC6FC", Offset = "0xCAC6FC", VA = "0xCAC6FC")]
	public ArcaxerInfiniteDungeon()
	{
	}
}
[Token(Token = "0x2000305")]
public class CasinoEvents : MonoBehaviour
{
	[Token(Token = "0x6001055")]
	[Address(RVA = "0xCAC904", Offset = "0xCAC904", VA = "0xCAC904")]
	public void updateDungeon()
	{
	}

	[Token(Token = "0x6001056")]
	[Address(RVA = "0xCACE18", Offset = "0xCACE18", VA = "0xCACE18")]
	public CasinoEvents()
	{
	}
}
[Token(Token = "0x2000306")]
public class DesertDungeon : MonoBehaviour
{
	[Token(Token = "0x4000FA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip encounterSound;

	[Token(Token = "0x4000FA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource musicPlayer;

	[Token(Token = "0x4000FA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Item board;

	[Token(Token = "0x6001057")]
	[Address(RVA = "0xCACE20", Offset = "0xCACE20", VA = "0xCACE20")]
	public void playEncounterSound()
	{
	}

	[Token(Token = "0x6001058")]
	[Address(RVA = "0xCACE54", Offset = "0xCACE54", VA = "0xCACE54")]
	private void Start()
	{
	}

	[Token(Token = "0x6001059")]
	[Address(RVA = "0xCACE58", Offset = "0xCACE58", VA = "0xCACE58")]
	public void checkForBoard()
	{
	}

	[Token(Token = "0x600105A")]
	[Address(RVA = "0xCAD034", Offset = "0xCAD034", VA = "0xCAD034")]
	public DesertDungeon()
	{
	}
}
[Token(Token = "0x2000307")]
[CreateAssetMenu(menuName = "Overworld Events/Dialogue", order = 999)]
public class Dialogue : ScriptableObject
{
	[Token(Token = "0x4000FA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public DialogueLine[] dialogueTextEnglish;

	[Token(Token = "0x4000FA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Dialogue nextDialogue;

	[Token(Token = "0x600105B")]
	[Address(RVA = "0xCAD03C", Offset = "0xCAD03C", VA = "0xCAD03C")]
	public Dialogue()
	{
	}
}
[Token(Token = "0x2000308")]
[CreateAssetMenu(menuName = "Overworld Events/Dialogue Answer", order = 999)]
public class DialogueAnswer : ScriptableObject
{
	[Token(Token = "0x4000FA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string answerString;

	[Token(Token = "0x4000FAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string associatedQuest;

	[Token(Token = "0x4000FAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int associatedQuestValue;

	[Token(Token = "0x4000FAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Dialogue nextDialogue;

	[Token(Token = "0x600105C")]
	[Address(RVA = "0xCAD044", Offset = "0xCAD044", VA = "0xCAD044")]
	public DialogueAnswer()
	{
	}
}
[Token(Token = "0x2000309")]
[CreateAssetMenu(menuName = "Overworld Events/Dialogue Line", order = 999)]
public class DialogueLine : ScriptableObject
{
	[Token(Token = "0x4000FAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string dialogueString;

	[Token(Token = "0x4000FAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool test;

	[Token(Token = "0x4000FAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool waitForInteraction;

	[Token(Token = "0x4000FB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string animationName;

	[Token(Token = "0x4000FB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string changeNPCName;

	[Token(Token = "0x4000FB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool stopMusic;

	[Token(Token = "0x4000FB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int changeMusicNum;

	[Token(Token = "0x4000FB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool nameChange;

	[Token(Token = "0x4000FB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool rotateToPlayer;

	[Token(Token = "0x4000FB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioClip audioClip;

	[Token(Token = "0x4000FB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public DialogueAnswer[] interactionAnswers;

	[Token(Token = "0x600105D")]
	[Address(RVA = "0xCAD04C", Offset = "0xCAD04C", VA = "0xCAD04C")]
	public DialogueLine()
	{
	}
}
[Token(Token = "0x200030A")]
public class BombPlateExplosion : MonoBehaviour
{
	[Token(Token = "0x4000FB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int damage;

	[Token(Token = "0x4000FB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float timeBeforeDisable;

	[Token(Token = "0x4000FBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float timeBeforeDestroy;

	[Token(Token = "0x4000FBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float timeAlive;

	[Token(Token = "0x600105E")]
	[Address(RVA = "0xCAD064", Offset = "0xCAD064", VA = "0xCAD064")]
	private void Update()
	{
	}

	[Token(Token = "0x600105F")]
	[Address(RVA = "0xCAD14C", Offset = "0xCAD14C", VA = "0xCAD14C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001060")]
	[Address(RVA = "0xCAD288", Offset = "0xCAD288", VA = "0xCAD288")]
	public BombPlateExplosion()
	{
	}
}
[Token(Token = "0x200030B")]
public class Dungeon1Overworld : MonoBehaviour
{
	[Token(Token = "0x6001061")]
	[Address(RVA = "0xCAD2A4", Offset = "0xCAD2A4", VA = "0xCAD2A4")]
	private void Start()
	{
	}

	[Token(Token = "0x6001062")]
	[Address(RVA = "0xCAD534", Offset = "0xCAD534", VA = "0xCAD534")]
	public Dungeon1Overworld()
	{
	}
}
[Token(Token = "0x200030C")]
public class DungeonBombPlate : MonoBehaviour
{
	[Token(Token = "0x4000FBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer areaRenderer;

	[Token(Token = "0x4000FBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject explosion;

	[Token(Token = "0x4000FBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool pingPong;

	[Token(Token = "0x4000FBF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float distToPlayerCheck;

	[Token(Token = "0x6001063")]
	[Address(RVA = "0xCAD53C", Offset = "0xCAD53C", VA = "0xCAD53C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001064")]
	[Address(RVA = "0xCAD6D0", Offset = "0xCAD6D0", VA = "0xCAD6D0")]
	private void Update()
	{
	}

	[Token(Token = "0x6001065")]
	[Address(RVA = "0xCAD7B8", Offset = "0xCAD7B8", VA = "0xCAD7B8")]
	public void checkForDestroy()
	{
	}

	[Token(Token = "0x6001066")]
	[Address(RVA = "0xCAD8A4", Offset = "0xCAD8A4", VA = "0xCAD8A4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001067")]
	[Address(RVA = "0xCADAD0", Offset = "0xCADAD0", VA = "0xCADAD0")]
	public DungeonBombPlate()
	{
	}
}
[Token(Token = "0x200030D")]
public class OverworldLaserHazard : MonoBehaviour
{
	[Token(Token = "0x4000FC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject laserEnd;

	[Token(Token = "0x4000FC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LineRenderer lineRend;

	[Token(Token = "0x4000FC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float power;

	[Token(Token = "0x4000FC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public LayerMask mask;

	[Token(Token = "0x6001068")]
	[Address(RVA = "0xCADAE8", Offset = "0xCADAE8", VA = "0xCADAE8")]
	private void Start()
	{
	}

	[Token(Token = "0x6001069")]
	[Address(RVA = "0xCADAEC", Offset = "0xCADAEC", VA = "0xCADAEC")]
	private void Update()
	{
	}

	[Token(Token = "0x600106A")]
	[Address(RVA = "0xCADDAC", Offset = "0xCADDAC", VA = "0xCADDAC")]
	public OverworldLaserHazard()
	{
	}
}
[Token(Token = "0x200030E")]
public class HoverboardRestrictedFloor : MonoBehaviour
{
	[Token(Token = "0x4000FC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string storyString;

	[Token(Token = "0x4000FC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform returnSpot;

	[Token(Token = "0x4000FC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int insideCols;

	[Token(Token = "0x600106B")]
	[Address(RVA = "0xCADDBC", Offset = "0xCADDBC", VA = "0xCADDBC")]
	private void Start()
	{
	}

	[Token(Token = "0x600106C")]
	[Address(RVA = "0xCADEDC", Offset = "0xCADEDC", VA = "0xCADEDC")]
	public void resetPosition()
	{
	}

	[Token(Token = "0x600106D")]
	[Address(RVA = "0xCADF5C", Offset = "0xCADF5C", VA = "0xCADF5C")]
	public void enteredSafeArea()
	{
	}

	[Token(Token = "0x600106E")]
	[Address(RVA = "0xCADF6C", Offset = "0xCADF6C", VA = "0xCADF6C")]
	public void exitedSafeArea()
	{
	}

	[Token(Token = "0x600106F")]
	[Address(RVA = "0xCAE028", Offset = "0xCAE028", VA = "0xCAE028")]
	public void leftHoverboard()
	{
	}

	[Token(Token = "0x6001070")]
	[Address(RVA = "0xCAE0C0", Offset = "0xCAE0C0", VA = "0xCAE0C0")]
	public HoverboardRestrictedFloor()
	{
	}
}
[Token(Token = "0x200030F")]
public class HoverboardSafeZone : MonoBehaviour
{
	[Token(Token = "0x4000FC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool occupied;

	[Token(Token = "0x6001071")]
	[Address(RVA = "0xCAE0C8", Offset = "0xCAE0C8", VA = "0xCAE0C8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001072")]
	[Address(RVA = "0xCAE19C", Offset = "0xCAE19C", VA = "0xCAE19C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6001073")]
	[Address(RVA = "0xCAE264", Offset = "0xCAE264", VA = "0xCAE264")]
	public HoverboardSafeZone()
	{
	}
}
[Token(Token = "0x2000310")]
public class MakeSunnyFloor : MonoBehaviour
{
	[Token(Token = "0x4000FC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool bakeNavMesh;

	[Token(Token = "0x6001074")]
	[Address(RVA = "0xCAE26C", Offset = "0xCAE26C", VA = "0xCAE26C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001075")]
	[Address(RVA = "0xCAE338", Offset = "0xCAE338", VA = "0xCAE338")]
	public MakeSunnyFloor()
	{
	}
}
[Token(Token = "0x2000311")]
public class OverworldShark : MonoBehaviour
{
	[Token(Token = "0x2000312")]
	public enum SharkState
	{
		[Token(Token = "0x4000FD3")]
		stalking,
		[Token(Token = "0x4000FD4")]
		jumping,
		[Token(Token = "0x4000FD5")]
		attacking,
		[Token(Token = "0x4000FD6")]
		startingBattle
	}

	[Token(Token = "0x4000FC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody rb;

	[Token(Token = "0x4000FCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float startY;

	[Token(Token = "0x4000FCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float stalkSpeed;

	[Token(Token = "0x4000FCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float jumpPower;

	[Token(Token = "0x4000FCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public LayerMask layerMask;

	[Token(Token = "0x4000FCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource splashFX;

	[Token(Token = "0x4000FCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public EnemyOverworld enemyOverworld;

	[Token(Token = "0x4000FD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject splashEffect;

	[Token(Token = "0x4000FD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public SharkState sharkState;

	[Token(Token = "0x6001076")]
	[Address(RVA = "0xCAE348", Offset = "0xCAE348", VA = "0xCAE348")]
	private void Start()
	{
	}

	[Token(Token = "0x6001077")]
	[Address(RVA = "0xCAE374", Offset = "0xCAE374", VA = "0xCAE374")]
	private void Update()
	{
	}

	[Token(Token = "0x6001078")]
	[Address(RVA = "0xCAEDCC", Offset = "0xCAEDCC", VA = "0xCAEDCC")]
	private void attackPlayer()
	{
	}

	[Token(Token = "0x6001079")]
	[Address(RVA = "0xCAEA7C", Offset = "0xCAEA7C", VA = "0xCAEA7C")]
	private void lookForPlayer()
	{
	}

	[Token(Token = "0x600107A")]
	[Address(RVA = "0xCAE58C", Offset = "0xCAE58C", VA = "0xCAE58C")]
	private void checkForGround()
	{
	}

	[Token(Token = "0x600107B")]
	[Address(RVA = "0xCAEED4", Offset = "0xCAEED4", VA = "0xCAEED4")]
	private void sharkJump()
	{
	}

	[Token(Token = "0x600107C")]
	[Address(RVA = "0xCAE7E4", Offset = "0xCAE7E4", VA = "0xCAE7E4")]
	private void moveTowardsPlayer()
	{
	}

	[Token(Token = "0x600107D")]
	[Address(RVA = "0xCAEF4C", Offset = "0xCAEF4C", VA = "0xCAEF4C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600107E")]
	[Address(RVA = "0xCAF008", Offset = "0xCAF008", VA = "0xCAF008")]
	public OverworldShark()
	{
	}
}
[Token(Token = "0x2000313")]
public class FireTurretDamage : MonoBehaviour
{
	[Token(Token = "0x4000FD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float damage;

	[Token(Token = "0x600107F")]
	[Address(RVA = "0xCAF01C", Offset = "0xCAF01C", VA = "0xCAF01C")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6001080")]
	[Address(RVA = "0xCAF144", Offset = "0xCAF144", VA = "0xCAF144")]
	public FireTurretDamage()
	{
	}
}
[Token(Token = "0x2000314")]
public class DarkaxerChaseHazzard : MonoBehaviour
{
	[Token(Token = "0x2000315")]
	[CompilerGenerated]
	private sealed class <fireProjectiles>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DarkaxerChaseHazzard <>4__this;

		[Token(Token = "0x17000272")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600108C")]
			[Address(RVA = "0xCAFBC0", Offset = "0xCAFBC0", VA = "0xCAFBC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000273")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600108E")]
			[Address(RVA = "0xCAFC08", Offset = "0xCAFC08", VA = "0xCAFC08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xCAF78C", Offset = "0xCAF78C", VA = "0xCAF78C")]
		[DebuggerHidden]
		public <fireProjectiles>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xCAFA0C", Offset = "0xCAFA0C", VA = "0xCAFA0C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xCAFA10", Offset = "0xCAFA10", VA = "0xCAFA10", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0xCAFBC8", Offset = "0xCAFBC8", VA = "0xCAFBC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000316")]
	[CompilerGenerated]
	private sealed class <disolveMaterial>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DarkaxerChaseHazzard <>4__this;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Renderer[] <rends>5__2;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <disolve>5__3;

		[Token(Token = "0x17000274")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001092")]
			[Address(RVA = "0xCAFE3C", Offset = "0xCAFE3C", VA = "0xCAFE3C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000275")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001094")]
			[Address(RVA = "0xCAFE84", Offset = "0xCAFE84", VA = "0xCAFE84", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0xCAF9BC", Offset = "0xCAF9BC", VA = "0xCAF9BC")]
		[DebuggerHidden]
		public <disolveMaterial>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xCAFC10", Offset = "0xCAFC10", VA = "0xCAFC10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0xCAFC14", Offset = "0xCAFC14", VA = "0xCAFC14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0xCAFE44", Offset = "0xCAFE44", VA = "0xCAFE44", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000FD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject projectile;

	[Token(Token = "0x4000FD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float actionTimer;

	[Token(Token = "0x4000FDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float maxActionTime;

	[Token(Token = "0x4000FDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float numOfShots;

	[Token(Token = "0x4000FDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int damage;

	[Token(Token = "0x4000FDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float followYOffset;

	[Token(Token = "0x4000FDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float followSpeed;

	[Token(Token = "0x4000FDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float targetDist;

	[Token(Token = "0x4000FE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float fireRange;

	[Token(Token = "0x4000FE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform projLaunchTrans;

	[Token(Token = "0x4000FE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Animator animator;

	[Token(Token = "0x6001081")]
	[Address(RVA = "0xCAF14C", Offset = "0xCAF14C", VA = "0xCAF14C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001082")]
	[Address(RVA = "0xCAF1FC", Offset = "0xCAF1FC", VA = "0xCAF1FC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001083")]
	[Address(RVA = "0xCAF530", Offset = "0xCAF530", VA = "0xCAF530")]
	[IteratorStateMachine(typeof(<fireProjectiles>d__13))]
	private IEnumerator fireProjectiles()
	{
		return null;
	}

	[Token(Token = "0x6001084")]
	[Address(RVA = "0xCAF7B4", Offset = "0xCAF7B4", VA = "0xCAF7B4")]
	private void fireBullet()
	{
	}

	[Token(Token = "0x6001085")]
	[Address(RVA = "0xCAF598", Offset = "0xCAF598", VA = "0xCAF598")]
	private void teleportNearby()
	{
	}

	[Token(Token = "0x6001086")]
	[Address(RVA = "0xCAF934", Offset = "0xCAF934", VA = "0xCAF934")]
	public void disolveMat()
	{
	}

	[Token(Token = "0x6001087")]
	[Address(RVA = "0xCAF954", Offset = "0xCAF954", VA = "0xCAF954")]
	[IteratorStateMachine(typeof(<disolveMaterial>d__17))]
	private IEnumerator disolveMaterial()
	{
		return null;
	}

	[Token(Token = "0x6001088")]
	[Address(RVA = "0xCAF9E4", Offset = "0xCAF9E4", VA = "0xCAF9E4")]
	public DarkaxerChaseHazzard()
	{
	}
}
[Token(Token = "0x2000317")]
public class DungeonBuiltEvent : DungeonEventListener
{
	[Token(Token = "0x6001095")]
	[Address(RVA = "0xCAFE8C", Offset = "0xCAFE8C", VA = "0xCAFE8C", Slot = "7")]
	public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
	{
	}

	[Token(Token = "0x6001096")]
	[Address(RVA = "0xCAFF38", Offset = "0xCAFF38", VA = "0xCAFF38")]
	public DungeonBuiltEvent()
	{
	}
}
[Serializable]
[Token(Token = "0x2000318")]
public class DungeonFloor
{
	[Token(Token = "0x4000FEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<OverworldChestData> floorChests;

	[Token(Token = "0x4000FEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<OverworldEnemyData> floorEnemies;

	[Token(Token = "0x4000FED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public uint floorSeed;

	[Token(Token = "0x4000FEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool isPrefab;

	[Token(Token = "0x4000FEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool trapsDestroyed;

	[Token(Token = "0x6001097")]
	[Address(RVA = "0xCAFF40", Offset = "0xCAFF40", VA = "0xCAFF40")]
	public DungeonFloor()
	{
	}
}
[Serializable]
[Token(Token = "0x2000319")]
public class OverworldChestData
{
	[Token(Token = "0x4000FF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool opened;

	[Token(Token = "0x4000FF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool doNotRespawn;

	[Token(Token = "0x4000FF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public UnityEngine.Vector3 position;

	[Token(Token = "0x4000FF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public uint id;

	[Token(Token = "0x6001098")]
	[Address(RVA = "0xCB0000", Offset = "0xCB0000", VA = "0xCB0000")]
	public OverworldChestData(UnityEngine.Vector3 newPosition)
	{
	}
}
[Serializable]
[Token(Token = "0x200031A")]
public class OverworldEnemyData
{
	[Token(Token = "0x4000FF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool defeated;

	[Token(Token = "0x4000FF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public uint enemyID;

	[Token(Token = "0x4000FF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector3 position;

	[Token(Token = "0x6001099")]
	[Address(RVA = "0xCB0064", Offset = "0xCB0064", VA = "0xCB0064")]
	public OverworldEnemyData(UnityEngine.Vector3 newPosition)
	{
	}
}
[Serializable]
[Token(Token = "0x200031B")]
public class DungeonInfo : MonoBehaviour
{
	[Token(Token = "0x200031C")]
	public enum DungeonDifficulty
	{
		[Token(Token = "0x400101C")]
		easy,
		[Token(Token = "0x400101D")]
		medium,
		[Token(Token = "0x400101E")]
		hard,
		[Token(Token = "0x400101F")]
		infinite
	}

	[Token(Token = "0x200031D")]
	[CompilerGenerated]
	private sealed class <loadPrefabFloorEnum>d__51 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DungeonInfo <>4__this;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int prefabNum;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <maxWait>5__2;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <waitTime>5__3;

		[Token(Token = "0x1700027B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010B6")]
			[Address(RVA = "0xCB2B1C", Offset = "0xCB2B1C", VA = "0xCB2B1C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010B8")]
			[Address(RVA = "0xCB2B64", Offset = "0xCB2B64", VA = "0xCB2B64", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xCB18D8", Offset = "0xCB18D8", VA = "0xCB18D8")]
		[DebuggerHidden]
		public <loadPrefabFloorEnum>d__51(int <>1__state)
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xCB2604", Offset = "0xCB2604", VA = "0xCB2604", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0xCB2608", Offset = "0xCB2608", VA = "0xCB2608", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xCB2B24", Offset = "0xCB2B24", VA = "0xCB2B24", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200031E")]
	[CompilerGenerated]
	private sealed class <textDelay>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x1700027D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010BC")]
			[Address(RVA = "0xCB2C34", Offset = "0xCB2C34", VA = "0xCB2C34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010BE")]
			[Address(RVA = "0xCB2C7C", Offset = "0xCB2C7C", VA = "0xCB2C7C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0xCB1960", Offset = "0xCB1960", VA = "0xCB1960")]
		[DebuggerHidden]
		public <textDelay>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0xCB2B6C", Offset = "0xCB2B6C", VA = "0xCB2B6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0xCB2B70", Offset = "0xCB2B70", VA = "0xCB2B70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xCB2C3C", Offset = "0xCB2C3C", VA = "0xCB2C3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200031F")]
	[CompilerGenerated]
	private sealed class <loadDiscoveredFloor>d__57 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DungeonInfo <>4__this;

		[Token(Token = "0x1700027F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010C2")]
			[Address(RVA = "0xCB2D80", Offset = "0xCB2D80", VA = "0xCB2D80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000280")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010C4")]
			[Address(RVA = "0xCB2DC8", Offset = "0xCB2DC8", VA = "0xCB2DC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0xCB2278", Offset = "0xCB2278", VA = "0xCB2278")]
		[DebuggerHidden]
		public <loadDiscoveredFloor>d__57(int <>1__state)
		{
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0xCB2C84", Offset = "0xCB2C84", VA = "0xCB2C84", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xCB2C88", Offset = "0xCB2C88", VA = "0xCB2C88", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xCB2D88", Offset = "0xCB2D88", VA = "0xCB2D88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000320")]
	[CompilerGenerated]
	private sealed class <onDungeonBuiltTimer>d__59 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DungeonInfo <>4__this;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <maxWait>5__2;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <waitTime>5__3;

		[Token(Token = "0x17000281")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010C8")]
			[Address(RVA = "0xCB2FA4", Offset = "0xCB2FA4", VA = "0xCB2FA4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000282")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010CA")]
			[Address(RVA = "0xCB2FEC", Offset = "0xCB2FEC", VA = "0xCB2FEC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0xCB2308", Offset = "0xCB2308", VA = "0xCB2308")]
		[DebuggerHidden]
		public <onDungeonBuiltTimer>d__59(int <>1__state)
		{
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xCB2DD0", Offset = "0xCB2DD0", VA = "0xCB2DD0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xCB2DD4", Offset = "0xCB2DD4", VA = "0xCB2DD4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xCB2FAC", Offset = "0xCB2FAC", VA = "0xCB2FAC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000321")]
	[CompilerGenerated]
	private sealed class <generateNewFloor>d__60 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DungeonInfo <>4__this;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DungeonFloor <newFloor>5__2;

		[Token(Token = "0x17000283")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010CE")]
			[Address(RVA = "0xCB3228", Offset = "0xCB3228", VA = "0xCB3228", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000284")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010D0")]
			[Address(RVA = "0xCB3270", Offset = "0xCB3270", VA = "0xCB3270", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xCB2330", Offset = "0xCB2330", VA = "0xCB2330")]
		[DebuggerHidden]
		public <generateNewFloor>d__60(int <>1__state)
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xCB2FF4", Offset = "0xCB2FF4", VA = "0xCB2FF4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xCB2FF8", Offset = "0xCB2FF8", VA = "0xCB2FF8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0xCB3230", Offset = "0xCB3230", VA = "0xCB3230", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000322")]
	[CompilerGenerated]
	private sealed class <generateNewFloorWithSameData>d__61 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DungeonInfo <>4__this;

		[Token(Token = "0x17000285")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010D4")]
			[Address(RVA = "0xCB33E0", Offset = "0xCB33E0", VA = "0xCB33E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000286")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010D6")]
			[Address(RVA = "0xCB3428", Offset = "0xCB3428", VA = "0xCB3428", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xCB2358", Offset = "0xCB2358", VA = "0xCB2358")]
		[DebuggerHidden]
		public <generateNewFloorWithSameData>d__61(int <>1__state)
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xCB3278", Offset = "0xCB3278", VA = "0xCB3278", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xCB327C", Offset = "0xCB327C", VA = "0xCB327C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xCB33E8", Offset = "0xCB33E8", VA = "0xCB33E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000FF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DungeonInfo instance;

	[Token(Token = "0x4000FF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string dungeonName;

	[Token(Token = "0x4000FF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int numOfFloors;

	[Token(Token = "0x4000FFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int difficultyFloorChangeNum;

	[Token(Token = "0x4000FFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int playerCurrentFloor;

	[Token(Token = "0x4000FFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<DungeonFloor> discoveredFloors;

	[Token(Token = "0x4000FFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string battleSceneName;

	[Token(Token = "0x4000FFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GridDungeonConfig gridConfig;

	[Token(Token = "0x4000FFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Dungeon dungeon;

	[Token(Token = "0x4001000")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public NavMeshSurface navMeshSurface;

	[Token(Token = "0x4001001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public DungeonCollFixer dungeonColliderFixer;

	[Token(Token = "0x4001002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool generateDungeon;

	[Token(Token = "0x4001003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool sendToStart;

	[Token(Token = "0x4001004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool respawnEnemies;

	[Token(Token = "0x4001005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
	public bool hoverBoardLocked;

	[Token(Token = "0x4001006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool climbingStairs;

	[Token(Token = "0x4001007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool dontShowStackTitle;

	[Token(Token = "0x4001008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
	public bool limitEnemyCountOnEarlyFloors;

	[Token(Token = "0x4001009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
	public bool allowPassthrough;

	[Token(Token = "0x400100A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Pre-made floors")]
	public GameObject[] prefabFloors;

	[Token(Token = "0x400100B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public int[] prefabFloorNums;

	[Token(Token = "0x400100C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Dungeon Enemies")]
	public EnemyParent[] dungeonEnemiesEasy;

	[Token(Token = "0x400100D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public EnemyParent[] dungeonEnemiesMedium;

	[Token(Token = "0x400100E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public EnemyParent[] dungeonEnemiesHard;

	[Token(Token = "0x400100F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public EnemyParent[] dungeonEnemiesInfinite;

	[Token(Token = "0x4001010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject rareMobSpawn;

	[Token(Token = "0x4001011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float rareMobSpawnChance;

	[Token(Token = "0x4001012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public List<EnemyModifier> dungeonEnemyModifiers;

	[Token(Token = "0x4001013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public ScriptableEnemyList[] enemyLists;

	[Token(Token = "0x4001014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public int enemyListTiers;

	[Token(Token = "0x4001015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[Header("Story Comms")]
	public NPCOverworld[] storyCommsNPCs;

	[Token(Token = "0x4001016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public int[] storyCommFloorNums;

	[Token(Token = "0x4001017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public string storyCommProgressString;

	[Token(Token = "0x4001018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public bool useDungeonLight;

	[Token(Token = "0x4001019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public UnityEvent onChangeFloor;

	[Token(Token = "0x400101A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public bool alwaysTeleportToRespawn;

	[Token(Token = "0x17000276")]
	public int currentDungeonTier
	{
		[Token(Token = "0x600109A")]
		[Address(RVA = "0xCB00C8", Offset = "0xCB00C8", VA = "0xCB00C8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000277")]
	public int infiniteDungeonDifficulty
	{
		[Token(Token = "0x600109B")]
		[Address(RVA = "0xCB01C4", Offset = "0xCB01C4", VA = "0xCB01C4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000278")]
	public bool isOnPrefabFloor
	{
		[Token(Token = "0x600109C")]
		[Address(RVA = "0xCB02E8", Offset = "0xCB02E8", VA = "0xCB02E8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000279")]
	public DungeonDifficulty difficulty
	{
		[Token(Token = "0x600109D")]
		[Address(RVA = "0xCB0360", Offset = "0xCB0360", VA = "0xCB0360")]
		get
		{
			return default(DungeonDifficulty);
		}
	}

	[Token(Token = "0x1700027A")]
	public int infiniteDungeonTier
	{
		[Token(Token = "0x600109E")]
		[Address(RVA = "0xCB03C0", Offset = "0xCB03C0", VA = "0xCB03C0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600109F")]
	[Address(RVA = "0xCB0440", Offset = "0xCB0440", VA = "0xCB0440")]
	public void setDungeonTier()
	{
	}

	[Token(Token = "0x60010A0")]
	[Address(RVA = "0xCB069C", Offset = "0xCB069C", VA = "0xCB069C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010A1")]
	[Address(RVA = "0xCB1048", Offset = "0xCB1048", VA = "0xCB1048")]
	private void spawnStoryComm()
	{
	}

	[Token(Token = "0x60010A2")]
	[Address(RVA = "0xCB1334", Offset = "0xCB1334", VA = "0xCB1334")]
	public void progressToNewFloor(bool goingUp)
	{
	}

	[Token(Token = "0x60010A3")]
	[Address(RVA = "0xCB0FD0", Offset = "0xCB0FD0", VA = "0xCB0FD0")]
	[IteratorStateMachine(typeof(<loadPrefabFloorEnum>d__51))]
	public IEnumerator loadPrefabFloorEnum(bool goingUp, int prefabNum)
	{
		return null;
	}

	[Token(Token = "0x60010A4")]
	[Address(RVA = "0xCB1900", Offset = "0xCB1900", VA = "0xCB1900")]
	[IteratorStateMachine(typeof(<textDelay>d__52))]
	private IEnumerator textDelay()
	{
		return null;
	}

	[Token(Token = "0x60010A5")]
	[Address(RVA = "0xCB1988", Offset = "0xCB1988", VA = "0xCB1988")]
	private void endOfFloorLoadThings()
	{
	}

	[Token(Token = "0x60010A6")]
	[Address(RVA = "0xCB1EFC", Offset = "0xCB1EFC", VA = "0xCB1EFC")]
	private void fadeBackFromBlack()
	{
	}

	[Token(Token = "0x60010A7")]
	[Address(RVA = "0xCB1FEC", Offset = "0xCB1FEC", VA = "0xCB1FEC")]
	private void disableLoadingText()
	{
	}

	[Token(Token = "0x60010A8")]
	[Address(RVA = "0xCB2058", Offset = "0xCB2058", VA = "0xCB2058")]
	private void movePlayerBackToPlace()
	{
	}

	[Token(Token = "0x60010A9")]
	[Address(RVA = "0xCB1808", Offset = "0xCB1808", VA = "0xCB1808")]
	[IteratorStateMachine(typeof(<loadDiscoveredFloor>d__57))]
	public IEnumerator loadDiscoveredFloor(bool goingUp)
	{
		return null;
	}

	[Token(Token = "0x60010AA")]
	[Address(RVA = "0xCAFF18", Offset = "0xCAFF18", VA = "0xCAFF18")]
	public void onDungeonBuilt()
	{
	}

	[Token(Token = "0x60010AB")]
	[Address(RVA = "0xCB22A0", Offset = "0xCB22A0", VA = "0xCB22A0")]
	[IteratorStateMachine(typeof(<onDungeonBuiltTimer>d__59))]
	public IEnumerator onDungeonBuiltTimer()
	{
		return null;
	}

	[Token(Token = "0x60010AC")]
	[Address(RVA = "0xCB1870", Offset = "0xCB1870", VA = "0xCB1870")]
	[IteratorStateMachine(typeof(<generateNewFloor>d__60))]
	public IEnumerator generateNewFloor()
	{
		return null;
	}

	[Token(Token = "0x60010AD")]
	[Address(RVA = "0xCB1C4C", Offset = "0xCB1C4C", VA = "0xCB1C4C")]
	[IteratorStateMachine(typeof(<generateNewFloorWithSameData>d__61))]
	public IEnumerator generateNewFloorWithSameData()
	{
		return null;
	}

	[Token(Token = "0x60010AE")]
	[Address(RVA = "0xCB1D64", Offset = "0xCB1D64", VA = "0xCB1D64")]
	public void updateEnemies()
	{
	}

	[Token(Token = "0x60010AF")]
	[Address(RVA = "0xCB1CB4", Offset = "0xCB1CB4", VA = "0xCB1CB4")]
	public void updateTraps()
	{
	}

	[Token(Token = "0x60010B0")]
	[Address(RVA = "0xCB0B34", Offset = "0xCB0B34", VA = "0xCB0B34")]
	public void loadPlayerProgress()
	{
	}

	[Token(Token = "0x60010B1")]
	[Address(RVA = "0xCB2380", Offset = "0xCB2380", VA = "0xCB2380")]
	public void saveDungeonProgress()
	{
	}

	[Token(Token = "0x60010B2")]
	[Address(RVA = "0xCB2530", Offset = "0xCB2530", VA = "0xCB2530")]
	public DungeonInfo()
	{
	}
}
[Token(Token = "0x2000323")]
public class DungeonStairs : MonoBehaviour
{
	[Token(Token = "0x2000324")]
	[CompilerGenerated]
	private sealed class <timer>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DungeonStairs <>4__this;

		[Token(Token = "0x17000287")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010DE")]
			[Address(RVA = "0xCB3A58", Offset = "0xCB3A58", VA = "0xCB3A58", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000288")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60010E0")]
			[Address(RVA = "0xCB3AA0", Offset = "0xCB3AA0", VA = "0xCB3AA0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0xCB38B0", Offset = "0xCB38B0", VA = "0xCB38B0")]
		[DebuggerHidden]
		public <timer>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0xCB38EC", Offset = "0xCB38EC", VA = "0xCB38EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0xCB38F0", Offset = "0xCB38F0", VA = "0xCB38F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0xCB3A60", Offset = "0xCB3A60", VA = "0xCB3A60", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool upStairs;

	[Token(Token = "0x4001038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool disabled;

	[Token(Token = "0x4001039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool forceRotationOnCollide;

	[Token(Token = "0x400103A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	private bool rotationForced;

	[Token(Token = "0x400103B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool isLoading;

	[Token(Token = "0x400103C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject blockCage;

	[Token(Token = "0x400103D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool storyDungeonStairs;

	[Token(Token = "0x60010D7")]
	[Address(RVA = "0xCB3430", Offset = "0xCB3430", VA = "0xCB3430")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010D8")]
	[Address(RVA = "0xCB3554", Offset = "0xCB3554", VA = "0xCB3554")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60010D9")]
	[Address(RVA = "0xCB3848", Offset = "0xCB3848", VA = "0xCB3848")]
	[IteratorStateMachine(typeof(<timer>d__9))]
	private IEnumerator timer()
	{
		return null;
	}

	[Token(Token = "0x60010DA")]
	[Address(RVA = "0xCB38D8", Offset = "0xCB38D8", VA = "0xCB38D8")]
	public DungeonStairs()
	{
	}
}
[Serializable]
[Token(Token = "0x2000325")]
public class GameProgress
{
	[Token(Token = "0x4001041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<SavedDungeonInfo> dungeonProgress;

	[Token(Token = "0x4001042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<StoryData> storyData;

	[Token(Token = "0x4001043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<QuestData> questData;

	[Token(Token = "0x4001044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string savedSceneName;

	[Token(Token = "0x4001045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<string> savedSpecialChestsCollected;

	[Token(Token = "0x4001046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEngine.Vector3 saveLocation;

	[Token(Token = "0x60010E1")]
	[Address(RVA = "0xCAD320", Offset = "0xCAD320", VA = "0xCAD320")]
	public void addNewStoryProgress(string eventName)
	{
	}

	[Token(Token = "0x60010E2")]
	[Address(RVA = "0xCABF80", Offset = "0xCABF80", VA = "0xCABF80")]
	public void setStoryProgress(string eventName, int progressVal)
	{
	}

	[Token(Token = "0x60010E3")]
	[Address(RVA = "0xCB3AE4", Offset = "0xCB3AE4", VA = "0xCB3AE4")]
	public void setQuestProgress(string eventName, int progressVal)
	{
	}

	[Token(Token = "0x60010E4")]
	[Address(RVA = "0xCB3CF4", Offset = "0xCB3CF4", VA = "0xCB3CF4")]
	public void increaseStoryProgress(string eventName)
	{
	}

	[Token(Token = "0x60010E5")]
	[Address(RVA = "0xCACCC4", Offset = "0xCACCC4", VA = "0xCACCC4")]
	public int getStoryProgress(string eventName)
	{
		return default(int);
	}

	[Token(Token = "0x60010E6")]
	[Address(RVA = "0xCB3F8C", Offset = "0xCB3F8C", VA = "0xCB3F8C")]
	public int getQuestProgress(string eventName)
	{
		return default(int);
	}

	[Token(Token = "0x60010E7")]
	[Address(RVA = "0xCB40E8", Offset = "0xCB40E8", VA = "0xCB40E8")]
	public GameProgress()
	{
	}
}
[Serializable]
[Token(Token = "0x200032C")]
public class StoryData
{
	[Token(Token = "0x400104D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string eventName;

	[Token(Token = "0x400104E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int progressVal;

	[Token(Token = "0x60010F9")]
	[Address(RVA = "0xCB3AB0", Offset = "0xCB3AB0", VA = "0xCB3AB0")]
	public StoryData(string name)
	{
	}
}
[Token(Token = "0x200032D")]
public class SydLabSwitch : MonoBehaviour
{
	[Token(Token = "0x400104F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject chest;

	[Token(Token = "0x4001050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool danceParty;

	[Token(Token = "0x4001051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material skybox;

	[Token(Token = "0x4001052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Light sunLight;

	[Token(Token = "0x4001053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Color color;

	[Token(Token = "0x4001054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float nightIntensity;

	[Token(Token = "0x4001055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioClip danceAudio;

	[Token(Token = "0x4001056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public MusicPlayer player;

	[Token(Token = "0x4001057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Quaternion Orot;

	[Token(Token = "0x60010FA")]
	[Address(RVA = "0xCB43DC", Offset = "0xCB43DC", VA = "0xCB43DC")]
	private void Start()
	{
	}

	[Token(Token = "0x60010FB")]
	[Address(RVA = "0xCB440C", Offset = "0xCB440C", VA = "0xCB440C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60010FC")]
	[Address(RVA = "0xCB46C4", Offset = "0xCB46C4", VA = "0xCB46C4")]
	public SydLabSwitch()
	{
	}
}
[Token(Token = "0x200032E")]
public class HubWarp : MonoBehaviour
{
	[Token(Token = "0x200032F")]
	[CompilerGenerated]
	private sealed class <warpTImer>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HubWarp <>4__this;

		[Token(Token = "0x17000289")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001104")]
			[Address(RVA = "0xCB4BEC", Offset = "0xCB4BEC", VA = "0xCB4BEC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001106")]
			[Address(RVA = "0xCB4C34", Offset = "0xCB4C34", VA = "0xCB4C34", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0xCB4868", Offset = "0xCB4868", VA = "0xCB4868")]
		[DebuggerHidden]
		public <warpTImer>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0xCB4898", Offset = "0xCB4898", VA = "0xCB4898", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0xCB489C", Offset = "0xCB489C", VA = "0xCB489C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0xCB4BF4", Offset = "0xCB4BF4", VA = "0xCB4BF4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string sceneName;

	[Token(Token = "0x4001059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string dungeonName;

	[Token(Token = "0x400105A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool hasWarped;

	[Token(Token = "0x400105B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool skinActivated;

	[Token(Token = "0x400105C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int skinActivateNum;

	[Token(Token = "0x60010FD")]
	[Address(RVA = "0xCB46D4", Offset = "0xCB46D4", VA = "0xCB46D4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60010FE")]
	[Address(RVA = "0xCB47C4", Offset = "0xCB47C4", VA = "0xCB47C4")]
	private void Start()
	{
	}

	[Token(Token = "0x60010FF")]
	[Address(RVA = "0xCB475C", Offset = "0xCB475C", VA = "0xCB475C")]
	[IteratorStateMachine(typeof(<warpTImer>d__7))]
	public IEnumerator warpTImer()
	{
		return null;
	}

	[Token(Token = "0x6001100")]
	[Address(RVA = "0xCB4890", Offset = "0xCB4890", VA = "0xCB4890")]
	public HubWarp()
	{
	}
}
[Token(Token = "0x2000330")]
public class HubWorldMaster : MonoBehaviour
{
	[Token(Token = "0x4001060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Item beetItem;

	[Token(Token = "0x4001061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Item sydneySpellModule;

	[Token(Token = "0x4001062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject moneyBoye;

	[Token(Token = "0x4001063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TMP_Text simSimText;

	[Token(Token = "0x4001064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject openMenuHelpText;

	[Token(Token = "0x4001065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Terrain hubTerrain;

	[Token(Token = "0x4001066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform[] hubSpawnPoints;

	[Token(Token = "0x4001067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject[] terrains;

	[Token(Token = "0x4001068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject[] storyevents;

	[Token(Token = "0x6001107")]
	[Address(RVA = "0xCB4C3C", Offset = "0xCB4C3C", VA = "0xCB4C3C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001108")]
	[Address(RVA = "0xCB4DCC", Offset = "0xCB4DCC", VA = "0xCB4DCC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001109")]
	[Address(RVA = "0xCB55B4", Offset = "0xCB55B4", VA = "0xCB55B4")]
	public void updateDungeon()
	{
	}

	[Token(Token = "0x600110A")]
	[Address(RVA = "0xCB5A54", Offset = "0xCB5A54", VA = "0xCB5A54")]
	public void startEquipTutorial()
	{
	}

	[Token(Token = "0x600110B")]
	[Address(RVA = "0xCB5B14", Offset = "0xCB5B14", VA = "0xCB5B14")]
	public void travelToSimSim()
	{
	}

	[Token(Token = "0x600110C")]
	[Address(RVA = "0xCB5DF0", Offset = "0xCB5DF0", VA = "0xCB5DF0")]
	public void giveBeet()
	{
	}

	[Token(Token = "0x600110D")]
	[Address(RVA = "0xCB6338", Offset = "0xCB6338", VA = "0xCB6338")]
	public void setStoryProgressTo1(string name)
	{
	}

	[Token(Token = "0x600110E")]
	[Address(RVA = "0xCB63A8", Offset = "0xCB63A8", VA = "0xCB63A8")]
	public void reEnableMovement()
	{
	}

	[Token(Token = "0x600110F")]
	[Address(RVA = "0xCB550C", Offset = "0xCB550C", VA = "0xCB550C")]
	private void loadTerrainForDevice()
	{
	}

	[Token(Token = "0x6001110")]
	[Address(RVA = "0xCB63FC", Offset = "0xCB63FC", VA = "0xCB63FC")]
	public void sydneyTutorialEventEnd1()
	{
	}

	[Token(Token = "0x6001111")]
	[Address(RVA = "0xCB647C", Offset = "0xCB647C", VA = "0xCB647C")]
	public void sydneyFireballEquipComplete()
	{
	}

	[Token(Token = "0x6001112")]
	[Address(RVA = "0xCB6514", Offset = "0xCB6514", VA = "0xCB6514")]
	public void sydneyTutorialEventEnd2()
	{
	}

	[Token(Token = "0x6001113")]
	[Address(RVA = "0xCB69D0", Offset = "0xCB69D0", VA = "0xCB69D0")]
	public void sydneyTutorialEventEnd3()
	{
	}

	[Token(Token = "0x6001114")]
	[Address(RVA = "0xCB6CC4", Offset = "0xCB6CC4", VA = "0xCB6CC4")]
	public HubWorldMaster()
	{
	}
}
[Token(Token = "0x2000331")]
public class InfiniteDungeonBuiltEvent : DungeonEventListener
{
	[Token(Token = "0x6001115")]
	[Address(RVA = "0xCB6CCC", Offset = "0xCB6CCC", VA = "0xCB6CCC", Slot = "7")]
	public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
	{
	}

	[Token(Token = "0x6001116")]
	[Address(RVA = "0xCB6D44", Offset = "0xCB6D44", VA = "0xCB6D44")]
	public InfiniteDungeonBuiltEvent()
	{
	}
}
[Token(Token = "0x2000332")]
[CreateAssetMenu(menuName = "Items/General", order = 999)]
public class Item : ScriptableObject
{
	[Token(Token = "0x2000333")]
	public enum ItemType
	{
		[Token(Token = "0x4001074")]
		equip,
		[Token(Token = "0x4001075")]
		consumable,
		[Token(Token = "0x4001076")]
		key
	}

	[Token(Token = "0x2000334")]
	public enum ItemRarity
	{
		[Token(Token = "0x4001078")]
		trash,
		[Token(Token = "0x4001079")]
		common,
		[Token(Token = "0x400107A")]
		uncommon,
		[Token(Token = "0x400107B")]
		rare,
		[Token(Token = "0x400107C")]
		epic,
		[Token(Token = "0x400107D")]
		forbidden
	}

	[Token(Token = "0x4001069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AssetIcon("100%", "100%", "0", "0", 64, IconAnchor.Center, IconAspect.Fit, "true", "#ffffff", 0, FontStyle.Normal, IconAnchor.Center, IconProjection.Perspective, -1, null)]
	public Sprite icon;

	[Token(Token = "0x400106A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ItemType itemType;

	[Token(Token = "0x400106B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public ItemRarity rarity;

	[Token(Token = "0x400106C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int itemValue;

	[Token(Token = "0x400106D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string itemName;

	[Token(Token = "0x400106E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string itemDescription;

	[Token(Token = "0x400106F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool stackable;

	[Token(Token = "0x4001070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool usable;

	[Token(Token = "0x4001071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	public bool unSellable;

	[Token(Token = "0x4001072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int numberHeld;

	[Token(Token = "0x1700028B")]
	public int itemSellValue
	{
		[Token(Token = "0x6001117")]
		[Address(RVA = "0xCB6D4C", Offset = "0xCB6D4C", VA = "0xCB6D4C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700028C")]
	[HideInInspector]
	public string translatedName
	{
		[Token(Token = "0x6001118")]
		[Address(RVA = "0xCB61A8", Offset = "0xCB61A8", VA = "0xCB61A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700028D")]
	[HideInInspector]
	public string translatedDescription
	{
		[Token(Token = "0x6001119")]
		[Address(RVA = "0xCB6D6C", Offset = "0xCB6D6C", VA = "0xCB6D6C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700028E")]
	public Color rarityColor
	{
		[Token(Token = "0x600111A")]
		[Address(RVA = "0xCB6F38", Offset = "0xCB6F38", VA = "0xCB6F38")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x600111B")]
	[Address(RVA = "0xCB6F80", Offset = "0xCB6F80", VA = "0xCB6F80", Slot = "4")]
	public virtual void useItem(int inventoryIndex)
	{
	}

	[Token(Token = "0x600111C")]
	[Address(RVA = "0xCB7004", Offset = "0xCB7004", VA = "0xCB7004")]
	public Item()
	{
	}
}
[Token(Token = "0x2000335")]
[CreateAssetMenu(menuName = "Items/Ability Scroll", order = 999)]
public class ItemAbilityScroll : Item
{
	[Token(Token = "0x400107E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PlayerSpell spell;

	[Token(Token = "0x400107F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject particle;

	[Token(Token = "0x4001080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int requiredLevel;

	[Token(Token = "0x600111D")]
	[Address(RVA = "0xCB7090", Offset = "0xCB7090", VA = "0xCB7090", Slot = "4")]
	public override void useItem(int inventoryIndex)
	{
	}

	[Token(Token = "0x600111E")]
	[Address(RVA = "0xCB75C4", Offset = "0xCB75C4", VA = "0xCB75C4")]
	public ItemAbilityScroll()
	{
	}
}
[Serializable]
[Token(Token = "0x2000336")]
public class ItemData
{
	[Token(Token = "0x4001081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string itemName;

	[Token(Token = "0x4001082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int amount;

	[Token(Token = "0x600111F")]
	[Address(RVA = "0xCB75C8", Offset = "0xCB75C8", VA = "0xCB75C8")]
	public ItemData(string newName, int amt)
	{
	}
}
[Token(Token = "0x2000337")]
[CreateAssetMenu(menuName = "Items/Equip", order = 999)]
public class ItemEquip : Item
{
	[Token(Token = "0x2000338")]
	public enum EquipType
	{
		[Token(Token = "0x4001094")]
		head,
		[Token(Token = "0x4001095")]
		top,
		[Token(Token = "0x4001096")]
		bottom,
		[Token(Token = "0x4001097")]
		weapon,
		[Token(Token = "0x4001098")]
		accessory
	}

	[Token(Token = "0x4001083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public EquipType equipType;

	[Token(Token = "0x4001084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject inGamePrefab;

	[Token(Token = "0x4001085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public PassiveAbility passive;

	[Token(Token = "0x4001086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int power;

	[Token(Token = "0x4001087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int defense;

	[Token(Token = "0x4001088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int health;

	[Token(Token = "0x4001089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int speed;

	[Token(Token = "0x400108A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public int crit;

	[Token(Token = "0x400108B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int expBoost;

	[Token(Token = "0x400108C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int spellVamp;

	[Token(Token = "0x400108D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public int critDamage;

	[Token(Token = "0x400108E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int apBoost;

	[Token(Token = "0x400108F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public int runSpeed;

	[Token(Token = "0x4001090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public int summonPower;

	[Token(Token = "0x4001091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public int glitchChance;

	[Token(Token = "0x4001092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool musicSwap;

	[Token(Token = "0x6001120")]
	[Address(RVA = "0xCB7600", Offset = "0xCB7600", VA = "0xCB7600", Slot = "4")]
	public override void useItem(int inventoryIndex)
	{
	}

	[Token(Token = "0x6001121")]
	[Address(RVA = "0xCB7D88", Offset = "0xCB7D88", VA = "0xCB7D88")]
	public void useItemWeapon(int inventoryIndex, bool rightHand)
	{
	}

	[Token(Token = "0x6001122")]
	[Address(RVA = "0xCB8244", Offset = "0xCB8244", VA = "0xCB8244")]
	public string getEquipDescription()
	{
		return null;
	}

	[Token(Token = "0x6001123")]
	[Address(RVA = "0xCB9120", Offset = "0xCB9120", VA = "0xCB9120")]
	public ItemEquip()
	{
	}
}
[Token(Token = "0x2000339")]
[CreateAssetMenu(menuName = "Items/Passive Scroll", order = 999)]
public class ItemPassiveScroll : Item
{
	[Token(Token = "0x4001099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PassiveAbility passive;

	[Token(Token = "0x400109A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject particle;

	[Token(Token = "0x400109B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int requiredLevel;

	[Token(Token = "0x6001124")]
	[Address(RVA = "0xCB912C", Offset = "0xCB912C", VA = "0xCB912C", Slot = "4")]
	public override void useItem(int inventoryIndex)
	{
	}

	[Token(Token = "0x6001125")]
	[Address(RVA = "0xCB9488", Offset = "0xCB9488", VA = "0xCB9488")]
	public ItemPassiveScroll()
	{
	}
}
[Token(Token = "0x200033A")]
[CreateAssetMenu(menuName = "Items/Potion", order = 999)]
public class ItemPotion : Item
{
	[Token(Token = "0x400109C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int potency;

	[Token(Token = "0x400109D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool usePercentage;

	[Token(Token = "0x400109E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject useParticle;

	[Token(Token = "0x6001126")]
	[Address(RVA = "0xCB948C", Offset = "0xCB948C", VA = "0xCB948C", Slot = "4")]
	public override void useItem(int inventoryIndex)
	{
	}

	[Token(Token = "0x6001127")]
	[Address(RVA = "0xCB9834", Offset = "0xCB9834", VA = "0xCB9834")]
	public ItemPotion()
	{
	}
}
[Token(Token = "0x200033B")]
[CreateAssetMenu(menuName = "Items/Set Story", order = 999)]
public class ItemSetStory : Item
{
	[Token(Token = "0x400109F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string storyString;

	[Token(Token = "0x40010A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int value;

	[Token(Token = "0x6001128")]
	[Address(RVA = "0xCB9840", Offset = "0xCB9840", VA = "0xCB9840", Slot = "4")]
	public override void useItem(int inventoryIndex)
	{
	}

	[Token(Token = "0x6001129")]
	[Address(RVA = "0xCB98C8", Offset = "0xCB98C8", VA = "0xCB98C8")]
	public ItemSetStory()
	{
	}
}
[Token(Token = "0x200033C")]
[CreateAssetMenu(menuName = "Loot Table", order = 999)]
public class LootTable : ScriptableObject
{
	[Token(Token = "0x40010A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Item[] commonItems;

	[Token(Token = "0x40010A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Item[] rareItems;

	[Token(Token = "0x40010A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Item[] veryRareItems;

	[Token(Token = "0x40010A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Item[] superRareItems;

	[Token(Token = "0x600112A")]
	[Address(RVA = "0xCB98CC", Offset = "0xCB98CC", VA = "0xCB98CC")]
	public LootTable()
	{
	}
}
[Token(Token = "0x200033D")]
public class NPCQuestElevator : NPCQuestCondition
{
	[Token(Token = "0x40010A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Item requiredItem;

	[Token(Token = "0x40010A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int numOfItemRequired;

	[Token(Token = "0x40010A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string sceneName;

	[Token(Token = "0x600112B")]
	[Address(RVA = "0xCB98D4", Offset = "0xCB98D4", VA = "0xCB98D4", Slot = "4")]
	public override void checkIfConditionMet()
	{
	}

	[Token(Token = "0x600112C")]
	[Address(RVA = "0xCB9AFC", Offset = "0xCB9AFC", VA = "0xCB9AFC")]
	public void removeItems()
	{
	}

	[Token(Token = "0x600112D")]
	[Address(RVA = "0xCB9D14", Offset = "0xCB9D14", VA = "0xCB9D14", Slot = "5")]
	public override void onQuestComplete()
	{
	}

	[Token(Token = "0x600112E")]
	[Address(RVA = "0xCB9D70", Offset = "0xCB9D70", VA = "0xCB9D70")]
	public NPCQuestElevator()
	{
	}
}
[Token(Token = "0x200033E")]
public class NPCQuestCondition : MonoBehaviour
{
	[Token(Token = "0x40010A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool conditionMet;

	[Token(Token = "0x40010A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string questID;

	[Token(Token = "0x40010AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Item rewardItem;

	[Token(Token = "0x40010AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int numOfRewardItems;

	[Token(Token = "0x40010AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool requireAnswer;

	[Token(Token = "0x40010AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool giveItem;

	[Token(Token = "0x40010AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool repeatable;

	[Token(Token = "0x40010AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent onCompleteEvent;

	[Token(Token = "0x600112F")]
	[Address(RVA = "0xCB9DF0", Offset = "0xCB9DF0", VA = "0xCB9DF0", Slot = "4")]
	public virtual void checkIfConditionMet()
	{
	}

	[Token(Token = "0x6001130")]
	[Address(RVA = "0xCB9DF4", Offset = "0xCB9DF4", VA = "0xCB9DF4", Slot = "5")]
	public virtual void onQuestComplete()
	{
	}

	[Token(Token = "0x6001131")]
	[Address(RVA = "0xCB9DF8", Offset = "0xCB9DF8", VA = "0xCB9DF8")]
	public void loadScene(string scene)
	{
	}

	[Token(Token = "0x6001132")]
	[Address(RVA = "0xCB9D7C", Offset = "0xCB9D7C", VA = "0xCB9D7C")]
	public NPCQuestCondition()
	{
	}
}
[Token(Token = "0x200033F")]
public class NPCQuestEquipHack : NPCQuestCondition
{
	[Token(Token = "0x40010B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PlayerSpell requiredSpell;

	[Token(Token = "0x40010B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string monsterEncounterName;

	[Token(Token = "0x6001133")]
	[Address(RVA = "0xCB9E50", Offset = "0xCB9E50", VA = "0xCB9E50", Slot = "4")]
	public override void checkIfConditionMet()
	{
	}

	[Token(Token = "0x6001134")]
	[Address(RVA = "0xCBA11C", Offset = "0xCBA11C", VA = "0xCBA11C", Slot = "5")]
	public override void onQuestComplete()
	{
	}

	[Token(Token = "0x6001135")]
	[Address(RVA = "0xCBA120", Offset = "0xCBA120", VA = "0xCBA120")]
	public NPCQuestEquipHack()
	{
	}
}
[Token(Token = "0x2000340")]
public class NPCQuestGiveItem : NPCQuestCondition
{
	[Token(Token = "0x40010B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Item requiredItem;

	[Token(Token = "0x40010B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int numOfItemRequired;

	[Token(Token = "0x40010B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool removeRequiredItems;

	[Token(Token = "0x6001136")]
	[Address(RVA = "0xCBA124", Offset = "0xCBA124", VA = "0xCBA124", Slot = "4")]
	public override void checkIfConditionMet()
	{
	}

	[Token(Token = "0x6001137")]
	[Address(RVA = "0xCBA398", Offset = "0xCBA398", VA = "0xCBA398")]
	public void removeItems()
	{
	}

	[Token(Token = "0x6001138")]
	[Address(RVA = "0xCBA5B8", Offset = "0xCBA5B8", VA = "0xCBA5B8", Slot = "5")]
	public override void onQuestComplete()
	{
	}

	[Token(Token = "0x6001139")]
	[Address(RVA = "0xCBA5D4", Offset = "0xCBA5D4", VA = "0xCBA5D4")]
	public NPCQuestGiveItem()
	{
	}
}
[Token(Token = "0x2000341")]
public class NPCQuestShadow : NPCQuestCondition
{
	[Token(Token = "0x40010B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform directionLightTrans;

	[Token(Token = "0x600113A")]
	[Address(RVA = "0xCBA5E4", Offset = "0xCBA5E4", VA = "0xCBA5E4", Slot = "4")]
	public override void checkIfConditionMet()
	{
	}

	[Token(Token = "0x600113B")]
	[Address(RVA = "0xCBA79C", Offset = "0xCBA79C", VA = "0xCBA79C")]
	private void Update()
	{
	}

	[Token(Token = "0x600113C")]
	[Address(RVA = "0xCBA950", Offset = "0xCBA950", VA = "0xCBA950")]
	public NPCQuestShadow()
	{
	}
}
[Token(Token = "0x2000342")]
public class NPCQuestTPose : NPCQuestCondition
{
	[Token(Token = "0x600113D")]
	[Address(RVA = "0xCBA954", Offset = "0xCBA954", VA = "0xCBA954", Slot = "4")]
	public override void checkIfConditionMet()
	{
	}

	[Token(Token = "0x600113E")]
	[Address(RVA = "0xCBABF4", Offset = "0xCBABF4", VA = "0xCBABF4")]
	public NPCQuestTPose()
	{
	}
}
[Token(Token = "0x2000343")]
public class NPCOverworld : MonoBehaviour
{
	[Token(Token = "0x2000346")]
	[CompilerGenerated]
	private sealed class <rotateTowardsPlayerTimer>d__58 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NPCOverworld <>4__this;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 <distance>5__2;

		[Token(Token = "0x1700028F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001161")]
			[Address(RVA = "0xCBE4C4", Offset = "0xCBE4C4", VA = "0xCBE4C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000290")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001163")]
			[Address(RVA = "0xCBE50C", Offset = "0xCBE50C", VA = "0xCBE50C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0xCBD8D0", Offset = "0xCBD8D0", VA = "0xCBD8D0")]
		[DebuggerHidden]
		public <rotateTowardsPlayerTimer>d__58(int <>1__state)
		{
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0xCBE228", Offset = "0xCBE228", VA = "0xCBE228", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0xCBE22C", Offset = "0xCBE22C", VA = "0xCBE22C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xCBE4CC", Offset = "0xCBE4CC", VA = "0xCBE4CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000347")]
	[CompilerGenerated]
	private sealed class <timedDialogueDisplay>d__63 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NPCOverworld <>4__this;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string text;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string <>7__wrap1;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <>7__wrap2;

		[Token(Token = "0x17000291")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001167")]
			[Address(RVA = "0xCBE8C0", Offset = "0xCBE8C0", VA = "0xCBE8C0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000292")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001169")]
			[Address(RVA = "0xCBE908", Offset = "0xCBE908", VA = "0xCBE908", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0xCBDD40", Offset = "0xCBDD40", VA = "0xCBDD40")]
		[DebuggerHidden]
		public <timedDialogueDisplay>d__63(int <>1__state)
		{
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0xCBE514", Offset = "0xCBE514", VA = "0xCBE514", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0xCBE518", Offset = "0xCBE518", VA = "0xCBE518", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0xCBE8C8", Offset = "0xCBE8C8", VA = "0xCBE8C8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40010B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string NPCName;

	[Token(Token = "0x40010B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform dialoguePoint;

	[Token(Token = "0x40010B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject dialogueBoxprefab;

	[Token(Token = "0x40010B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public UIDialogueCanvas dialogueBox;

	[Token(Token = "0x40010BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Dialogue npcDialogue;

	[Token(Token = "0x40010BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Dialogue questCompleteDialogue;

	[Token(Token = "0x40010BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Dialogue postQuestCompleteDialogue;

	[Token(Token = "0x40010BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public Dialogue originalDialogue;

	[Token(Token = "0x40010BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public ScriptableStoryEvent npcStoryEvent;

	[Token(Token = "0x40010BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public List<Item> shopInventory;

	[Token(Token = "0x40010C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public SideQuest[] sideQuests;

	[Token(Token = "0x40010C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ShopInventory[] shopInventories;

	[Token(Token = "0x40010C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool shopkeeper;

	[Token(Token = "0x40010C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	public bool sideQuestHub;

	[Token(Token = "0x40010C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
	public bool interactOnCollision;

	[Token(Token = "0x40010C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
	public bool hasStoryAdvanceListener;

	[Token(Token = "0x40010C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool movingNPC;

	[Token(Token = "0x40010C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool turnToPlayer;

	[Token(Token = "0x40010C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private NPCQuestCondition questCondition;

	[Token(Token = "0x40010C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Transform[] movePoints;

	[Token(Token = "0x40010CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int curMovePoint;

	[Token(Token = "0x40010CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private int dialogueNum;

	[Token(Token = "0x40010CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int storyEventNum;

	[Token(Token = "0x40010CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public NavMeshAgent navMeshAgent;

	[Token(Token = "0x40010CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public UnityEvent onDialogueEnd;

	[Token(Token = "0x40010CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public UnityEvent onInteractStart;

	[Token(Token = "0x40010D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[HideInInspector]
	public bool dialogueOver;

	[Token(Token = "0x40010D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
	private bool dialogueAnimating;

	[Token(Token = "0x40010D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
	private bool dialogueSkipped;

	[Token(Token = "0x40010D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBB")]
	public bool endStoryFlag;

	[Token(Token = "0x40010D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	public bool blockInteraction;

	[Token(Token = "0x40010D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
	private bool firstQuestCheck;

	[Token(Token = "0x40010D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Animator anim;

	[Token(Token = "0x40010D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public UnityEvent playerInteractResume;

	[Token(Token = "0x40010D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public UnityAction advanceStoryAction;

	[Token(Token = "0x40010D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[Header("Audio")]
	public AudioClip[] welcomeClips;

	[Token(Token = "0x40010DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public AudioClip[] shopIdleClips;

	[Token(Token = "0x40010DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public AudioClip[] shopBuyClips;

	[Token(Token = "0x40010DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public AudioClip[] leaveClips;

	[Token(Token = "0x40010DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private bool firstInteractionMade;

	[Token(Token = "0x40010DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private string dialogueCheckString;

	[Token(Token = "0x40010DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private bool canShowResponses;

	[Token(Token = "0x600113F")]
	[Address(RVA = "0xCBABF8", Offset = "0xCBABF8", VA = "0xCBABF8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001140")]
	[Address(RVA = "0xCBAF40", Offset = "0xCBAF40", VA = "0xCBAF40")]
	private void Start()
	{
	}

	[Token(Token = "0x6001141")]
	[Address(RVA = "0xCBB080", Offset = "0xCBB080", VA = "0xCBB080")]
	public void clearEndDialogueEvents()
	{
	}

	[Token(Token = "0x6001142")]
	[Address(RVA = "0xCBB0A8", Offset = "0xCBB0A8", VA = "0xCBB0A8")]
	public void playAnimation(string animName)
	{
	}

	[Token(Token = "0x6001143")]
	[Address(RVA = "0xCBB0CC", Offset = "0xCBB0CC", VA = "0xCBB0CC")]
	public void advanceStory()
	{
	}

	[Token(Token = "0x6001144")]
	[Address(RVA = "0xCBBB18", Offset = "0xCBBB18", VA = "0xCBBB18")]
	private void Update()
	{
	}

	[Token(Token = "0x6001145")]
	[Address(RVA = "0xCBB31C", Offset = "0xCBB31C", VA = "0xCBB31C")]
	public void interactWithNPC()
	{
	}

	[Token(Token = "0x6001146")]
	[Address(RVA = "0xCBCE08", Offset = "0xCBCE08", VA = "0xCBCE08")]
	public void playWelcomeClip()
	{
	}

	[Token(Token = "0x6001147")]
	[Address(RVA = "0xCBBDB4", Offset = "0xCBBDB4", VA = "0xCBBDB4")]
	public void talkToNPC()
	{
	}

	[Token(Token = "0x6001148")]
	[Address(RVA = "0xCBCECC", Offset = "0xCBCECC", VA = "0xCBCECC")]
	public void rotateTowardsPlayer()
	{
	}

	[Token(Token = "0x6001149")]
	[Address(RVA = "0xCBD600", Offset = "0xCBD600", VA = "0xCBD600")]
	public void playLeaveClip()
	{
	}

	[Token(Token = "0x600114A")]
	[Address(RVA = "0xCBD6C4", Offset = "0xCBD6C4", VA = "0xCBD6C4")]
	public void playShopBuyClip()
	{
	}

	[Token(Token = "0x600114B")]
	[Address(RVA = "0xCBD788", Offset = "0xCBD788", VA = "0xCBD788")]
	public void playIdleClip()
	{
	}

	[Token(Token = "0x600114C")]
	[Address(RVA = "0xCBD37C", Offset = "0xCBD37C", VA = "0xCBD37C")]
	public void translateAndSetString(string s, string textToChange, string table = "UI Text")
	{
	}

	[Token(Token = "0x600114D")]
	[Address(RVA = "0xCBCEEC", Offset = "0xCBCEEC", VA = "0xCBCEEC")]
	public void translateAndSetUIText(string s, Text textToChange, string table = "UI Text")
	{
	}

	[Token(Token = "0x600114E")]
	[Address(RVA = "0xCBD124", Offset = "0xCBD124", VA = "0xCBD124")]
	public void translateAndSetDialogue(string s)
	{
	}

	[Token(Token = "0x600114F")]
	[Address(RVA = "0xCBD598", Offset = "0xCBD598", VA = "0xCBD598")]
	[IteratorStateMachine(typeof(<rotateTowardsPlayerTimer>d__58))]
	private IEnumerator rotateTowardsPlayerTimer()
	{
		return null;
	}

	[Token(Token = "0x6001150")]
	[Address(RVA = "0xCBD8F8", Offset = "0xCBD8F8", VA = "0xCBD8F8")]
	public void makeUninteractable()
	{
	}

	[Token(Token = "0x6001151")]
	[Address(RVA = "0xCBD954", Offset = "0xCBD954", VA = "0xCBD954")]
	public void makeInteractable()
	{
	}

	[Token(Token = "0x6001152")]
	[Address(RVA = "0xCBD9B0", Offset = "0xCBD9B0", VA = "0xCBD9B0")]
	public void clearDialogueEndEvents()
	{
	}

	[Token(Token = "0x6001153")]
	[Address(RVA = "0xCBD9CC", Offset = "0xCBD9CC", VA = "0xCBD9CC")]
	public void answerQuestion(int resp)
	{
	}

	[Token(Token = "0x6001154")]
	[Address(RVA = "0xCBD85C", Offset = "0xCBD85C", VA = "0xCBD85C")]
	[IteratorStateMachine(typeof(<timedDialogueDisplay>d__63))]
	private IEnumerator timedDialogueDisplay(string text)
	{
		return null;
	}

	[Token(Token = "0x6001155")]
	[Address(RVA = "0xCBDD68", Offset = "0xCBDD68", VA = "0xCBDD68")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001156")]
	[Address(RVA = "0xCBDF10", Offset = "0xCBDF10", VA = "0xCBDF10")]
	public void forceRemoveNPCFromInteractList()
	{
	}

	[Token(Token = "0x6001157")]
	[Address(RVA = "0xCBDF88", Offset = "0xCBDF88", VA = "0xCBDF88")]
	public void freePlayer()
	{
	}

	[Token(Token = "0x6001158")]
	[Address(RVA = "0xCBDFDC", Offset = "0xCBDFDC", VA = "0xCBDFDC")]
	public NPCOverworld()
	{
	}
}
[Token(Token = "0x2000348")]
public class OverworldChest : MonoBehaviour
{
	[Token(Token = "0x40010EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool opened;

	[Token(Token = "0x40010ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool dungeonChest;

	[Token(Token = "0x40010EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool alwaysDropItem;

	[Token(Token = "0x40010EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool alwaysDropCredits;

	[Token(Token = "0x40010F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public DungeonFloor thisFloor;

	[Token(Token = "0x40010F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Item[] itemDrops;

	[Token(Token = "0x40010F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Item[] itemDropsRare;

	[Token(Token = "0x40010F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Item[] itemDropsVeryRare;

	[Token(Token = "0x40010F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Item[] itemDropsUltraRare;

	[Token(Token = "0x40010F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int averageCreditReward;

	[Token(Token = "0x40010F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject rewardText;

	[Token(Token = "0x40010F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private string rewardTextString;

	[Token(Token = "0x40010F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Item GarunteedItem;

	[Token(Token = "0x40010F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int specialChestNum;

	[Token(Token = "0x40010FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Color currentRarityColor;

	[Token(Token = "0x17000293")]
	private string specialChestID
	{
		[Token(Token = "0x600116A")]
		[Address(RVA = "0xCBE910", Offset = "0xCBE910", VA = "0xCBE910")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600116B")]
	[Address(RVA = "0xCBE9B4", Offset = "0xCBE9B4", VA = "0xCBE9B4")]
	private void Start()
	{
	}

	[Token(Token = "0x600116C")]
	[Address(RVA = "0xCBEF0C", Offset = "0xCBEF0C", VA = "0xCBEF0C")]
	private void rewardGained()
	{
	}

	[Token(Token = "0x600116D")]
	[Address(RVA = "0xCBF718", Offset = "0xCBF718", VA = "0xCBF718")]
	private void openChest()
	{
	}

	[Token(Token = "0x600116E")]
	[Address(RVA = "0xCBF6DC", Offset = "0xCBF6DC", VA = "0xCBF6DC")]
	public void switchTextColorToRarity(Item.ItemRarity rarity)
	{
	}

	[Token(Token = "0x600116F")]
	[Address(RVA = "0xCBFCA4", Offset = "0xCBFCA4", VA = "0xCBFCA4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001170")]
	[Address(RVA = "0xCBFD28", Offset = "0xCBFD28", VA = "0xCBFD28")]
	public OverworldChest()
	{
	}
}
[Token(Token = "0x2000349")]
public class OverworldDamageText : MonoBehaviour
{
	[Token(Token = "0x40010FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TMP_Text text;

	[Token(Token = "0x40010FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float aliveTime;

	[Token(Token = "0x40010FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float timeToFade;

	[Token(Token = "0x6001171")]
	[Address(RVA = "0xCC0D94", Offset = "0xCC0D94", VA = "0xCC0D94")]
	private void Start()
	{
	}

	[Token(Token = "0x6001172")]
	[Address(RVA = "0xCC0EE0", Offset = "0xCC0EE0", VA = "0xCC0EE0")]
	private void Update()
	{
	}

	[Token(Token = "0x6001173")]
	[Address(RVA = "0xCC1080", Offset = "0xCC1080", VA = "0xCC1080")]
	public OverworldDamageText()
	{
	}
}
[Token(Token = "0x200034A")]
public class OverworldPhysicsButton : MonoBehaviour
{
	[Token(Token = "0x200034B")]
	[CompilerGenerated]
	private sealed class <cooldownTimer>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OverworldPhysicsButton <>4__this;

		[Token(Token = "0x17000294")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600117B")]
			[Address(RVA = "0xCC16B8", Offset = "0xCC16B8", VA = "0xCC16B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000295")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600117D")]
			[Address(RVA = "0xCC1700", Offset = "0xCC1700", VA = "0xCC1700", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0xCC1564", Offset = "0xCC1564", VA = "0xCC1564")]
		[DebuggerHidden]
		public <cooldownTimer>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0xCC1608", Offset = "0xCC1608", VA = "0xCC1608", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0xCC160C", Offset = "0xCC160C", VA = "0xCC160C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0xCC16C0", Offset = "0xCC16C0", VA = "0xCC16C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40010FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<GameObject> touchingObjects;

	[Token(Token = "0x40010FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isDown;

	[Token(Token = "0x4001100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject enableObject;

	[Token(Token = "0x4001101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool onCoolDown;

	[Token(Token = "0x4001102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioSource source;

	[Token(Token = "0x6001174")]
	[Address(RVA = "0xCC1094", Offset = "0xCC1094", VA = "0xCC1094")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x6001175")]
	[Address(RVA = "0xCC1370", Offset = "0xCC1370", VA = "0xCC1370")]
	private void OnTriggerExit(Collider collision)
	{
	}

	[Token(Token = "0x6001176")]
	[Address(RVA = "0xCC1308", Offset = "0xCC1308", VA = "0xCC1308")]
	[IteratorStateMachine(typeof(<cooldownTimer>d__7))]
	private IEnumerator cooldownTimer()
	{
		return null;
	}

	[Token(Token = "0x6001177")]
	[Address(RVA = "0xCC158C", Offset = "0xCC158C", VA = "0xCC158C")]
	public OverworldPhysicsButton()
	{
	}
}
[Token(Token = "0x200034C")]
public class OverworldShowProjectile : MonoBehaviour
{
	[Token(Token = "0x4001106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x4001107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int damage;

	[Token(Token = "0x4001108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody rb;

	[Token(Token = "0x4001109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject explosionParticle;

	[Token(Token = "0x600117E")]
	[Address(RVA = "0xCC1708", Offset = "0xCC1708", VA = "0xCC1708")]
	private void Update()
	{
	}

	[Token(Token = "0x600117F")]
	[Address(RVA = "0xCC178C", Offset = "0xCC178C", VA = "0xCC178C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001180")]
	[Address(RVA = "0xCC19A4", Offset = "0xCC19A4", VA = "0xCC19A4")]
	public OverworldShowProjectile()
	{
	}
}
[Token(Token = "0x200034D")]
public class OverworldSpring : MonoBehaviour
{
	[Token(Token = "0x400110A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float jumpPower;

	[Token(Token = "0x400110B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float jumpTime;

	[Token(Token = "0x400110C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator animator;

	[Token(Token = "0x400110D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource source;

	[Token(Token = "0x400110E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float coolDown;

	[Token(Token = "0x400110F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float timer;

	[Token(Token = "0x6001181")]
	[Address(RVA = "0xCC19B8", Offset = "0xCC19B8", VA = "0xCC19B8")]
	private void Start()
	{
	}

	[Token(Token = "0x6001182")]
	[Address(RVA = "0xCC1AC0", Offset = "0xCC1AC0", VA = "0xCC1AC0")]
	private void Update()
	{
	}

	[Token(Token = "0x6001183")]
	[Address(RVA = "0xCC1AF4", Offset = "0xCC1AF4", VA = "0xCC1AF4")]
	public void destroyThis()
	{
	}

	[Token(Token = "0x6001184")]
	[Address(RVA = "0xCC1B60", Offset = "0xCC1B60", VA = "0xCC1B60")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001185")]
	[Address(RVA = "0xCC1CB0", Offset = "0xCC1CB0", VA = "0xCC1CB0")]
	public OverworldSpring()
	{
	}
}
[Token(Token = "0x200034E")]
public class OverworldTurret : MonoBehaviour
{
	[Token(Token = "0x200034F")]
	public enum TurretMode
	{
		[Token(Token = "0x4001120")]
		shootBallMode,
		[Token(Token = "0x4001121")]
		marioFireMode
	}

	[Token(Token = "0x4001110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform fireTrans;

	[Token(Token = "0x4001111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject turrethead;

	[Token(Token = "0x4001112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject projectile;

	[Token(Token = "0x4001113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float aggroRadius;

	[Token(Token = "0x4001114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int damage;

	[Token(Token = "0x4001115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool spreadShot;

	[Token(Token = "0x4001116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool superSpread;

	[Token(Token = "0x4001117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float fireTimer;

	[Token(Token = "0x4001118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float fireCooldown;

	[Token(Token = "0x4001119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float rotateSpeed;

	[Token(Token = "0x400111A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject flames;

	[Token(Token = "0x400111B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject destroyParticle;

	[Token(Token = "0x400111C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float aliveTime;

	[Token(Token = "0x400111D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float timeToEnable;

	[Token(Token = "0x400111E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TurretMode turretMode;

	[Token(Token = "0x6001186")]
	[Address(RVA = "0xCC1CC4", Offset = "0xCC1CC4", VA = "0xCC1CC4")]
	private void Update()
	{
	}

	[Token(Token = "0x6001187")]
	[Address(RVA = "0xCC2120", Offset = "0xCC2120", VA = "0xCC2120")]
	private void fireBullet()
	{
	}

	[Token(Token = "0x6001188")]
	[Address(RVA = "0xCC2538", Offset = "0xCC2538", VA = "0xCC2538")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001189")]
	[Address(RVA = "0xCC2894", Offset = "0xCC2894", VA = "0xCC2894")]
	public OverworldTurret()
	{
	}
}
[Token(Token = "0x2000350")]
public class PlayerTriggerEvent : MonoBehaviour
{
	[Token(Token = "0x4001122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onPlayerEnter;

	[Token(Token = "0x600118A")]
	[Address(RVA = "0xCC28BC", Offset = "0xCC28BC", VA = "0xCC28BC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600118B")]
	[Address(RVA = "0xCC28C0", Offset = "0xCC28C0", VA = "0xCC28C0")]
	public PlayerTriggerEvent()
	{
	}
}
[Serializable]
[Token(Token = "0x2000351")]
public class SavedDungeonInfo
{
	[Token(Token = "0x4001123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string dungeonName;

	[Token(Token = "0x4001124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int numOfFloors;

	[Token(Token = "0x4001125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int playerCurrentFloor;

	[Token(Token = "0x4001126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<DungeonFloor> discoveredFloors;

	[Token(Token = "0x4001127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string battleSceneName;

	[Token(Token = "0x600118C")]
	[Address(RVA = "0xCC2928", Offset = "0xCC2928", VA = "0xCC2928")]
	public SavedDungeonInfo()
	{
	}
}
[Token(Token = "0x2000352")]
[CreateAssetMenu(menuName = "Enemy List", order = 999)]
public class ScriptableEnemyList : ScriptableObject
{
	[Token(Token = "0x4001128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<EnemyParent> easyEnemies;

	[Token(Token = "0x4001129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<EnemyParent> mediumEnemies;

	[Token(Token = "0x400112A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<EnemyParent> hardEnemies;

	[Token(Token = "0x400112B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<EnemyParent> infiniteEnemies;

	[Token(Token = "0x600118D")]
	[Address(RVA = "0xCC29AC", Offset = "0xCC29AC", VA = "0xCC29AC")]
	public ScriptableEnemyList()
	{
	}
}
[Token(Token = "0x2000353")]
public class ScriptableQuest : ScriptableObject
{
	[Token(Token = "0x400112C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Dialogue> questDialogue;

	[Token(Token = "0x400112D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Dialogue> completeDialogue;

	[Token(Token = "0x400112E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<Item> requiredItems;

	[Token(Token = "0x400112F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int requiredCredits;

	[Token(Token = "0x600118E")]
	[Address(RVA = "0xCC2A84", Offset = "0xCC2A84", VA = "0xCC2A84")]
	public ScriptableQuest()
	{
	}
}
[Token(Token = "0x2000354")]
[CreateAssetMenu(menuName = "Overworld Events/Story Event", order = 999)]
public class ScriptableStoryEvent : ScriptableObject
{
	[Token(Token = "0x4001130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string eventName;

	[Token(Token = "0x4001131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<StoryAction> storyActions;

	[Token(Token = "0x600118F")]
	[Address(RVA = "0xCC2B00", Offset = "0xCC2B00", VA = "0xCC2B00")]
	public ScriptableStoryEvent()
	{
	}
}
[Token(Token = "0x2000355")]
public abstract class StoryAction : ScriptableObject
{
	[Token(Token = "0x4001132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool unlockPlayer;

	[Token(Token = "0x4001133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool disableAction;

	[Token(Token = "0x6001190")]
	public abstract void doAction();

	[Token(Token = "0x6001191")]
	[Address(RVA = "0xCC2B7C", Offset = "0xCC2B7C", VA = "0xCC2B7C")]
	protected StoryAction()
	{
	}
}
[Token(Token = "0x2000356")]
[CreateAssetMenu(menuName = "Shop Inventory", order = 999)]
public class ShopInventory : ScriptableObject
{
	[Token(Token = "0x4001134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Item> shopItems;

	[Token(Token = "0x4001135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string storyUnlockString;

	[Token(Token = "0x4001136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int reqStoryVal;

	[Token(Token = "0x4001137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool useTokensForShop;

	[Token(Token = "0x6001192")]
	[Address(RVA = "0xCC2B84", Offset = "0xCC2B84", VA = "0xCC2B84")]
	public ShopInventory()
	{
	}
}
[Token(Token = "0x2000357")]
public class ShopWarper : MonoBehaviour
{
	[Token(Token = "0x4001138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public NPCOverworld shopNPC;

	[Token(Token = "0x4001139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform telePoint;

	[Token(Token = "0x400113A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform returnPoint;

	[Token(Token = "0x400113B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject togglableShopObjects;

	[Token(Token = "0x400113C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.Vector3 oldMenuPos;

	[Token(Token = "0x400113D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform menuLastParent;

	[Token(Token = "0x400113E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioSource doorSource;

	[Token(Token = "0x400113F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private UnityEngine.Vector3 oldMenuScale;

	[Token(Token = "0x4001140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private UnityEngine.Vector3 smallMenuScale;

	[Token(Token = "0x4001141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private UnityEngine.Vector3 oldPointerScale;

	[Token(Token = "0x4001142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private UnityEngine.Vector3 smallPointerScale;

	[Token(Token = "0x4001143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float oldLineWidth;

	[Token(Token = "0x4001144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public int shopMusic;

	[Token(Token = "0x4001145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool storeActive;

	[Token(Token = "0x6001193")]
	[Address(RVA = "0xCC2BD4", Offset = "0xCC2BD4", VA = "0xCC2BD4")]
	private void Start()
	{
	}

	[Token(Token = "0x6001194")]
	[Address(RVA = "0xCC2C00", Offset = "0xCC2C00", VA = "0xCC2C00")]
	private void Update()
	{
	}

	[Token(Token = "0x6001195")]
	[Address(RVA = "0xCC2C9C", Offset = "0xCC2C9C", VA = "0xCC2C9C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001196")]
	[Address(RVA = "0xCC32F0", Offset = "0xCC32F0", VA = "0xCC32F0")]
	public void returnPlayer()
	{
	}

	[Token(Token = "0x6001197")]
	[Address(RVA = "0xCC3670", Offset = "0xCC3670", VA = "0xCC3670")]
	public ShopWarper()
	{
	}
}
[Token(Token = "0x2000358")]
public class SideQuest : ScriptableObject
{
	[Token(Token = "0x4001146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Sprite icon;

	[Token(Token = "0x4001147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string questName;

	[Token(Token = "0x4001148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string storyPreReq;

	[Token(Token = "0x4001149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string questDescription;

	[Token(Token = "0x400114A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Item[] rewarditems;

	[Token(Token = "0x400114B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int rewardCredits;

	[Token(Token = "0x400114C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int expReward;

	[Token(Token = "0x400114D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool repeatable;

	[Token(Token = "0x17000296")]
	public string rewardString
	{
		[Token(Token = "0x6001198")]
		[Address(RVA = "0xCC3684", Offset = "0xCC3684", VA = "0xCC3684")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001199")]
	[Address(RVA = "0xCC38A0", Offset = "0xCC38A0", VA = "0xCC38A0", Slot = "4")]
	public virtual void completeQuest()
	{
	}

	[Token(Token = "0x600119A")]
	[Address(RVA = "0xCC39D8", Offset = "0xCC39D8", VA = "0xCC39D8", Slot = "5")]
	public virtual bool isQuestComplete()
	{
		return default(bool);
	}

	[Token(Token = "0x600119B")]
	[Address(RVA = "0xCC39E0", Offset = "0xCC39E0", VA = "0xCC39E0")]
	public SideQuest()
	{
	}
}
[Serializable]
[Token(Token = "0x2000359")]
public class QuestData
{
	[Token(Token = "0x400114E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string questName;

	[Token(Token = "0x400114F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int progress;

	[Token(Token = "0x600119C")]
	[Address(RVA = "0xCC3A54", Offset = "0xCC3A54", VA = "0xCC3A54")]
	public QuestData(string name)
	{
	}
}
[Token(Token = "0x200035A")]
[CreateAssetMenu(menuName = "Quests/Item Turn in", order = 999)]
public class SideQuestItemTurnIn : SideQuest
{
	[Token(Token = "0x4001150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Item requiredItem;

	[Token(Token = "0x4001151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int requiredAmount;

	[Token(Token = "0x600119D")]
	[Address(RVA = "0xCC3AB8", Offset = "0xCC3AB8", VA = "0xCC3AB8", Slot = "5")]
	public override bool isQuestComplete()
	{
		return default(bool);
	}

	[Token(Token = "0x600119E")]
	[Address(RVA = "0xCC3C90", Offset = "0xCC3C90", VA = "0xCC3C90", Slot = "4")]
	public override void completeQuest()
	{
	}

	[Token(Token = "0x600119F")]
	[Address(RVA = "0xCC3EB0", Offset = "0xCC3EB0", VA = "0xCC3EB0")]
	public SideQuestItemTurnIn()
	{
	}
}
[Token(Token = "0x200035B")]
[CreateAssetMenu(menuName = "Quests/Level Spell", order = 999)]
public class SideQuestLvlSpell : SideQuest
{
	[Token(Token = "0x4001152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public PlayerSpell[] spells;

	[Token(Token = "0x4001153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int requiredLevel;

	[Token(Token = "0x60011A0")]
	[Address(RVA = "0xCC3EB4", Offset = "0xCC3EB4", VA = "0xCC3EB4", Slot = "5")]
	public override bool isQuestComplete()
	{
		return default(bool);
	}

	[Token(Token = "0x60011A1")]
	[Address(RVA = "0xCC3F98", Offset = "0xCC3F98", VA = "0xCC3F98")]
	public SideQuestLvlSpell()
	{
	}
}
[Token(Token = "0x200035C")]
[CreateAssetMenu(menuName = "Quests/Story Prog", order = 999)]
public class SideQuestStoryProg : SideQuest
{
	[Token(Token = "0x4001154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string storyString;

	[Token(Token = "0x4001155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int reqProgress;

	[Token(Token = "0x60011A2")]
	[Address(RVA = "0xCC3F9C", Offset = "0xCC3F9C", VA = "0xCC3F9C", Slot = "5")]
	public override bool isQuestComplete()
	{
		return default(bool);
	}

	[Token(Token = "0x60011A3")]
	[Address(RVA = "0xCC401C", Offset = "0xCC401C", VA = "0xCC401C")]
	public SideQuestStoryProg()
	{
	}
}
[Token(Token = "0x200035D")]
public class SimSimBossStarter : MonoBehaviour
{
	[Token(Token = "0x4001156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EnemyOverworld[] bossEnemies;

	[Token(Token = "0x4001157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject stairs;

	[Token(Token = "0x60011A4")]
	[Address(RVA = "0xCC4020", Offset = "0xCC4020", VA = "0xCC4020")]
	private void Start()
	{
	}

	[Token(Token = "0x60011A5")]
	[Address(RVA = "0xCC40C0", Offset = "0xCC40C0", VA = "0xCC40C0")]
	public void beginBossEncounter()
	{
	}

	[Token(Token = "0x60011A6")]
	[Address(RVA = "0xCC41F0", Offset = "0xCC41F0", VA = "0xCC41F0")]
	public SimSimBossStarter()
	{
	}
}
[Token(Token = "0x200035E")]
public class SnowballHazzard : MonoBehaviour
{
	[Token(Token = "0x4001158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int damage;

	[Token(Token = "0x4001159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject destroyParticle;

	[Token(Token = "0x400115A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxAliveTime;

	[Token(Token = "0x400115B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float timeAlive;

	[Token(Token = "0x400115C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Rigidbody rb;

	[Token(Token = "0x400115D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.Vector3 startPos;

	[Token(Token = "0x400115E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Quaternion startRot;

	[Token(Token = "0x60011A7")]
	[Address(RVA = "0xCC41F8", Offset = "0xCC41F8", VA = "0xCC41F8")]
	private void Start()
	{
	}

	[Token(Token = "0x60011A8")]
	[Address(RVA = "0xCC4290", Offset = "0xCC4290", VA = "0xCC4290")]
	private void damagePlayer()
	{
	}

	[Token(Token = "0x60011A9")]
	[Address(RVA = "0xCC42EC", Offset = "0xCC42EC", VA = "0xCC42EC")]
	private void Update()
	{
	}

	[Token(Token = "0x60011AA")]
	[Address(RVA = "0xCC4554", Offset = "0xCC4554", VA = "0xCC4554")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60011AB")]
	[Address(RVA = "0xCC4334", Offset = "0xCC4334", VA = "0xCC4334")]
	private void resetBall()
	{
	}

	[Token(Token = "0x60011AC")]
	[Address(RVA = "0xCC4614", Offset = "0xCC4614", VA = "0xCC4614")]
	public SnowballHazzard()
	{
	}
}
[Token(Token = "0x200035F")]
public class SoundManager : MonoBehaviour
{
	[Token(Token = "0x2000360")]
	[CompilerGenerated]
	private sealed class <openCCHestTimer>d__35 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SoundManager <>4__this;

		[Token(Token = "0x17000297")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60011C1")]
			[Address(RVA = "0xCC4AB0", Offset = "0xCC4AB0", VA = "0xCC4AB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000298")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60011C3")]
			[Address(RVA = "0xCC4AF8", Offset = "0xCC4AF8", VA = "0xCC4AF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xCC49B8", Offset = "0xCC49B8", VA = "0xCC49B8")]
		[DebuggerHidden]
		public <openCCHestTimer>d__35(int <>1__state)
		{
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xCC49E8", Offset = "0xCC49E8", VA = "0xCC49E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xCC49EC", Offset = "0xCC49EC", VA = "0xCC49EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xCC4AB8", Offset = "0xCC4AB8", VA = "0xCC4AB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400115F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource uiSource;

	[Token(Token = "0x4001160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource uiSource2;

	[Token(Token = "0x4001161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource voiceSource;

	[Token(Token = "0x4001162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SoundManager instance;

	[Token(Token = "0x4001163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Ui Clips")]
	public AudioClip uiSelectSound;

	[Token(Token = "0x4001164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip uiSubmitSound;

	[Token(Token = "0x4001165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioClip uiTabChangeSound;

	[Token(Token = "0x4001166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioClip uiOpenSound;

	[Token(Token = "0x4001167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioClip uiCloseSound;

	[Token(Token = "0x4001168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AudioClip uiShopPurchase;

	[Token(Token = "0x4001169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AudioClip uiChangeSpell;

	[Token(Token = "0x400116A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public AudioClip uiError1;

	[Token(Token = "0x400116B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AudioClip openChest;

	[Token(Token = "0x400116C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public AudioClip getLoot;

	[Token(Token = "0x400116D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AudioClip equipItem;

	[Token(Token = "0x400116E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public AudioClip tossItem;

	[Token(Token = "0x400116F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AudioClip taskComplete;

	[Token(Token = "0x4001170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Header("Overworld Clips")]
	public AudioClip warpSound;

	[Token(Token = "0x4001171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AudioClip enccounterStart;

	[Token(Token = "0x4001172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public AudioClip hitOWEnemySound;

	[Token(Token = "0x60011AD")]
	[Address(RVA = "0xCC462C", Offset = "0xCC462C", VA = "0xCC462C")]
	private void Start()
	{
	}

	[Token(Token = "0x60011AE")]
	[Address(RVA = "0xCC4678", Offset = "0xCC4678", VA = "0xCC4678")]
	public void playUISelect()
	{
	}

	[Token(Token = "0x60011AF")]
	[Address(RVA = "0xCC46AC", Offset = "0xCC46AC", VA = "0xCC46AC")]
	public void playUISubmit()
	{
	}

	[Token(Token = "0x60011B0")]
	[Address(RVA = "0xCC46E0", Offset = "0xCC46E0", VA = "0xCC46E0")]
	public void playTaskComplete()
	{
	}

	[Token(Token = "0x60011B1")]
	[Address(RVA = "0xCC4714", Offset = "0xCC4714", VA = "0xCC4714")]
	public void playUIOpen()
	{
	}

	[Token(Token = "0x60011B2")]
	[Address(RVA = "0xCC4748", Offset = "0xCC4748", VA = "0xCC4748")]
	public void playUIClose()
	{
	}

	[Token(Token = "0x60011B3")]
	[Address(RVA = "0xCC477C", Offset = "0xCC477C", VA = "0xCC477C")]
	public void playUIPurchase()
	{
	}

	[Token(Token = "0x60011B4")]
	[Address(RVA = "0xCC47B0", Offset = "0xCC47B0", VA = "0xCC47B0")]
	public void playUIChangeSpell()
	{
	}

	[Token(Token = "0x60011B5")]
	[Address(RVA = "0xCC47E4", Offset = "0xCC47E4", VA = "0xCC47E4")]
	public void playUIError1()
	{
	}

	[Token(Token = "0x60011B6")]
	[Address(RVA = "0xCC4818", Offset = "0xCC4818", VA = "0xCC4818")]
	public void playWarpSound()
	{
	}

	[Token(Token = "0x60011B7")]
	[Address(RVA = "0xCC484C", Offset = "0xCC484C", VA = "0xCC484C")]
	public void playEncounterSound()
	{
	}

	[Token(Token = "0x60011B8")]
	[Address(RVA = "0xCC4880", Offset = "0xCC4880", VA = "0xCC4880")]
	public void playEquipItem()
	{
	}

	[Token(Token = "0x60011B9")]
	[Address(RVA = "0xCC48B4", Offset = "0xCC48B4", VA = "0xCC48B4")]
	public void playTossItem()
	{
	}

	[Token(Token = "0x60011BA")]
	[Address(RVA = "0xCC48E8", Offset = "0xCC48E8", VA = "0xCC48E8")]
	public void playHitOWEnemySound()
	{
	}

	[Token(Token = "0x60011BB")]
	[Address(RVA = "0xCC491C", Offset = "0xCC491C", VA = "0xCC491C")]
	public void playOpenChestSound()
	{
	}

	[Token(Token = "0x60011BC")]
	[Address(RVA = "0xCC4950", Offset = "0xCC4950", VA = "0xCC4950")]
	[IteratorStateMachine(typeof(<openCCHestTimer>d__35))]
	private IEnumerator openCCHestTimer()
	{
		return null;
	}

	[Token(Token = "0x60011BD")]
	[Address(RVA = "0xCC49E0", Offset = "0xCC49E0", VA = "0xCC49E0")]
	public SoundManager()
	{
	}
}
[Token(Token = "0x2000361")]
public class SpecialOverworld : MonoBehaviour
{
	[Token(Token = "0x60011C4")]
	[Address(RVA = "0xCC4B00", Offset = "0xCC4B00", VA = "0xCC4B00")]
	public void unlockPlayerMovement()
	{
	}

	[Token(Token = "0x60011C5")]
	[Address(RVA = "0xCC4B54", Offset = "0xCC4B54", VA = "0xCC4B54")]
	public SpecialOverworld()
	{
	}
}
[Token(Token = "0x2000362")]
public class IceCreamHandler : MonoBehaviour
{
	[Token(Token = "0x60011C6")]
	[Address(RVA = "0xCC4B5C", Offset = "0xCC4B5C", VA = "0xCC4B5C")]
	private void Start()
	{
	}

	[Token(Token = "0x60011C7")]
	[Address(RVA = "0xCC4B60", Offset = "0xCC4B60", VA = "0xCC4B60")]
	private void Update()
	{
	}

	[Token(Token = "0x60011C8")]
	[Address(RVA = "0xCC4C00", Offset = "0xCC4C00", VA = "0xCC4C00")]
	public IceCreamHandler()
	{
	}
}
[Token(Token = "0x2000363")]
[CreateAssetMenu(menuName = "Overworld Events/Actions/Dialogue Action", order = 999)]
public class StoryDialogue : StoryAction
{
	[Token(Token = "0x4001176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Dialogue dialogue;

	[Token(Token = "0x4001177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string npcName;

	[Token(Token = "0x4001178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private NPCOverworld npc;

	[Token(Token = "0x4001179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool dialogueSet;

	[Token(Token = "0x60011C9")]
	[Address(RVA = "0xCC4C08", Offset = "0xCC4C08", VA = "0xCC4C08", Slot = "4")]
	public override void doAction()
	{
	}

	[Token(Token = "0x60011CA")]
	[Address(RVA = "0xCC4D6C", Offset = "0xCC4D6C", VA = "0xCC4D6C")]
	public StoryDialogue()
	{
	}
}
[Token(Token = "0x2000364")]
public class StoryDisabler : MonoBehaviour
{
	[Token(Token = "0x400117A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string storyName;

	[Token(Token = "0x400117B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int reqValue;

	[Token(Token = "0x400117C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool useExactValue;

	[Token(Token = "0x400117D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool requireGreaterValue;

	[Token(Token = "0x400117E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int[] storyRangeValue;

	[Token(Token = "0x400117F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int languageVer;

	[Token(Token = "0x60011CB")]
	[Address(RVA = "0xCC4D74", Offset = "0xCC4D74", VA = "0xCC4D74")]
	private void Start()
	{
	}

	[Token(Token = "0x60011CC")]
	[Address(RVA = "0xCC5040", Offset = "0xCC5040", VA = "0xCC5040")]
	public StoryDisabler()
	{
	}
}
[Token(Token = "0x2000365")]
[CreateAssetMenu(menuName = "Overworld Events/Actions/End Story Action", order = 999)]
public class StoryEndAndSwitchDialogue : StoryAction
{
	[Token(Token = "0x4001180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string npcName;

	[Token(Token = "0x4001181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private NPCOverworld npc;

	[Token(Token = "0x4001182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Dialogue endDialogue;

	[Token(Token = "0x60011CD")]
	[Address(RVA = "0xCC5058", Offset = "0xCC5058", VA = "0xCC5058", Slot = "4")]
	public override void doAction()
	{
	}

	[Token(Token = "0x60011CE")]
	[Address(RVA = "0xCC5130", Offset = "0xCC5130", VA = "0xCC5130")]
	public StoryEndAndSwitchDialogue()
	{
	}
}
[Token(Token = "0x2000366")]
public class StoryEventHelper : MonoBehaviour
{
	[Token(Token = "0x2000367")]
	[CompilerGenerated]
	private sealed class <whiteFadeSceneTimer>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string scene;

		[Token(Token = "0x17000299")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60011E1")]
			[Address(RVA = "0xCC5DA8", Offset = "0xCC5DA8", VA = "0xCC5DA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60011E3")]
			[Address(RVA = "0xCC5DF0", Offset = "0xCC5DF0", VA = "0xCC5DF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xCC5A20", Offset = "0xCC5A20", VA = "0xCC5A20")]
		[DebuggerHidden]
		public <whiteFadeSceneTimer>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xCC5CAC", Offset = "0xCC5CAC", VA = "0xCC5CAC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xCC5CB0", Offset = "0xCC5CB0", VA = "0xCC5CB0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xCC5DB0", Offset = "0xCC5DB0", VA = "0xCC5DB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string storyString;

	[Token(Token = "0x4001184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AudioClip originalMusic;

	[Token(Token = "0x4001185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] musicTracks;

	[Token(Token = "0x4001186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Item storyitem;

	[Token(Token = "0x4001187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject rewardText;

	[Token(Token = "0x4001188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool givenItem;

	[Token(Token = "0x4001189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] disabledObjects;

	[Token(Token = "0x400118A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform[] moveSpots;

	[Token(Token = "0x60011CF")]
	[Address(RVA = "0xCC5138", Offset = "0xCC5138", VA = "0xCC5138")]
	public void updateStoryString(int val)
	{
	}

	[Token(Token = "0x60011D0")]
	[Address(RVA = "0xCC51B8", Offset = "0xCC51B8", VA = "0xCC51B8")]
	public void enableObject(int num)
	{
	}

	[Token(Token = "0x60011D1")]
	[Address(RVA = "0xCC51F4", Offset = "0xCC51F4", VA = "0xCC51F4")]
	public void startStoryCombat(int num)
	{
	}

	[Token(Token = "0x60011D2")]
	[Address(RVA = "0xCC5278", Offset = "0xCC5278", VA = "0xCC5278")]
	public void unlockPlayer()
	{
	}

	[Token(Token = "0x60011D3")]
	[Address(RVA = "0xCC52CC", Offset = "0xCC52CC", VA = "0xCC52CC")]
	public void switchMusic(int num)
	{
	}

	[Token(Token = "0x60011D4")]
	[Address(RVA = "0xCC53E8", Offset = "0xCC53E8", VA = "0xCC53E8")]
	public void giveItem()
	{
	}

	[Token(Token = "0x60011D5")]
	[Address(RVA = "0xCC5814", Offset = "0xCC5814", VA = "0xCC5814")]
	public void loadScene(string name)
	{
	}

	[Token(Token = "0x60011D6")]
	[Address(RVA = "0xCC586C", Offset = "0xCC586C", VA = "0xCC586C")]
	public void stopMusic()
	{
	}

	[Token(Token = "0x60011D7")]
	[Address(RVA = "0xCC5934", Offset = "0xCC5934", VA = "0xCC5934")]
	public void playWhiteFade(float time)
	{
	}

	[Token(Token = "0x60011D8")]
	[Address(RVA = "0xCC5998", Offset = "0xCC5998", VA = "0xCC5998")]
	public void whiteFadeIntoScene(string scene)
	{
	}

	[Token(Token = "0x60011D9")]
	[Address(RVA = "0xCC59B8", Offset = "0xCC59B8", VA = "0xCC59B8")]
	[IteratorStateMachine(typeof(<whiteFadeSceneTimer>d__18))]
	private IEnumerator whiteFadeSceneTimer(string scene)
	{
		return null;
	}

	[Token(Token = "0x60011DA")]
	[Address(RVA = "0xCC5A48", Offset = "0xCC5A48", VA = "0xCC5A48")]
	public void movePlayer(int spot)
	{
	}

	[Token(Token = "0x60011DB")]
	[Address(RVA = "0xCC5B44", Offset = "0xCC5B44", VA = "0xCC5B44")]
	public void activateOtherStory(string story)
	{
	}

	[Token(Token = "0x60011DC")]
	[Address(RVA = "0xCC5BB8", Offset = "0xCC5BB8", VA = "0xCC5BB8")]
	public void playOriginalMusic()
	{
	}

	[Token(Token = "0x60011DD")]
	[Address(RVA = "0xCC5CA4", Offset = "0xCC5CA4", VA = "0xCC5CA4")]
	public StoryEventHelper()
	{
	}
}
[Token(Token = "0x2000368")]
[CreateAssetMenu(menuName = "Overworld Events/Actions/Move Action", order = 999)]
public class StoryMoveCharacter : StoryAction
{
	[Token(Token = "0x400118E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string targetPositionName;

	[Token(Token = "0x400118F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string npcName;

	[Token(Token = "0x4001190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool autoProceedStory;

	[Token(Token = "0x4001191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool showRenderersOnMove;

	[Token(Token = "0x4001192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	private bool proceeded;

	[Token(Token = "0x4001193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private NPCOverworld npc;

	[Token(Token = "0x60011E4")]
	[Address(RVA = "0xCC5DF8", Offset = "0xCC5DF8", VA = "0xCC5DF8", Slot = "4")]
	public override void doAction()
	{
	}

	[Token(Token = "0x60011E5")]
	[Address(RVA = "0xCC5FF0", Offset = "0xCC5FF0", VA = "0xCC5FF0")]
	public StoryMoveCharacter()
	{
	}
}
[Token(Token = "0x2000369")]
[CreateAssetMenu(menuName = "Overworld Events/Actions/Animation Action", order = 999)]
public class StoryPlayAnimation : StoryAction
{
	[Token(Token = "0x4001194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator anim;

	[Token(Token = "0x4001195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool setTrigger;

	[Token(Token = "0x4001196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool forcePlay;

	[Token(Token = "0x4001197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string animName;

	[Token(Token = "0x4001198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string storyGOName;

	[Token(Token = "0x4001199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float waitTime;

	[Token(Token = "0x400119A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int animstarted;

	[Token(Token = "0x400119B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool playMusic;

	[Token(Token = "0x400119C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int musicTrack;

	[Token(Token = "0x400119D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int animationLayer;

	[Token(Token = "0x400119E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string animation;

	[Token(Token = "0x60011E6")]
	[Address(RVA = "0xCC5FF8", Offset = "0xCC5FF8", VA = "0xCC5FF8", Slot = "4")]
	public override void doAction()
	{
	}

	[Token(Token = "0x60011E7")]
	[Address(RVA = "0xCC61CC", Offset = "0xCC61CC", VA = "0xCC61CC")]
	public StoryPlayAnimation()
	{
	}
}
[Token(Token = "0x200036A")]
[CreateAssetMenu(menuName = "Overworld Events/Actions/Player Animation Action", order = 999)]
public class StoryPlayerAnimation : StoryAction
{
	[Token(Token = "0x400119F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string triggerName;

	[Token(Token = "0x40011A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string storyGOName;

	[Token(Token = "0x40011A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float waitTime;

	[Token(Token = "0x40011A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int animstarted;

	[Token(Token = "0x40011A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool forcePlay;

	[Token(Token = "0x40011A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool rotatePlayer;

	[Token(Token = "0x40011A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float rotateY;

	[Token(Token = "0x40011A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject particle;

	[Token(Token = "0x60011E8")]
	[Address(RVA = "0xCC61E0", Offset = "0xCC61E0", VA = "0xCC61E0", Slot = "4")]
	public override void doAction()
	{
	}

	[Token(Token = "0x60011E9")]
	[Address(RVA = "0xCC63C8", Offset = "0xCC63C8", VA = "0xCC63C8")]
	public static bool HasParameter(string paramName, Animator animator)
	{
		return default(bool);
	}

	[Token(Token = "0x60011EA")]
	[Address(RVA = "0xCC6458", Offset = "0xCC6458", VA = "0xCC6458")]
	public StoryPlayerAnimation()
	{
	}
}
[Token(Token = "0x200036B")]
public class SwapTriggerOverworld : MonoBehaviour
{
	[Token(Token = "0x40011A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject disableObject;

	[Token(Token = "0x40011A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject enableObject;

	[Token(Token = "0x60011EB")]
	[Address(RVA = "0xCC646C", Offset = "0xCC646C", VA = "0xCC646C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60011EC")]
	[Address(RVA = "0xCC6524", Offset = "0xCC6524", VA = "0xCC6524")]
	public SwapTriggerOverworld()
	{
	}
}
[Token(Token = "0x200036C")]
public class WarpToPoint : MonoBehaviour
{
	[Token(Token = "0x60011ED")]
	[Address(RVA = "0xCC652C", Offset = "0xCC652C", VA = "0xCC652C")]
	private void Start()
	{
	}

	[Token(Token = "0x60011EE")]
	[Address(RVA = "0xCC6530", Offset = "0xCC6530", VA = "0xCC6530")]
	private void Update()
	{
	}

	[Token(Token = "0x60011EF")]
	[Address(RVA = "0xCC6534", Offset = "0xCC6534", VA = "0xCC6534")]
	public WarpToPoint()
	{
	}
}
[Token(Token = "0x200036D")]
public class PassiveAdrOnHurt : PassiveAbility
{
	[Token(Token = "0x40011A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int adrenalineGain;

	[Token(Token = "0x40011AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float timeSinceGain;

	[Token(Token = "0x40011AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float coolDown;

	[Token(Token = "0x60011F0")]
	[Address(RVA = "0xCC653C", Offset = "0xCC653C", VA = "0xCC653C", Slot = "8")]
	public override void onHurtFunction()
	{
	}

	[Token(Token = "0x60011F1")]
	[Address(RVA = "0xCC65E4", Offset = "0xCC65E4", VA = "0xCC65E4")]
	private void Update()
	{
	}

	[Token(Token = "0x60011F2")]
	[Address(RVA = "0xCC6610", Offset = "0xCC6610", VA = "0xCC6610")]
	public PassiveAdrOnHurt()
	{
	}
}
[Token(Token = "0x200036E")]
public class PassiveApplyDebuffOnAttack : PassiveAbility
{
	[Token(Token = "0x40011AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GlitchEffects glitch;

	[Token(Token = "0x40011AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float chanceToApply;

	[Token(Token = "0x60011F3")]
	[Address(RVA = "0xCC6620", Offset = "0xCC6620", VA = "0xCC6620", Slot = "6")]
	public override void onAttackFunction(Weapon weapon, EnemyParent enemy)
	{
	}

	[Token(Token = "0x60011F4")]
	[Address(RVA = "0xCC6980", Offset = "0xCC6980", VA = "0xCC6980")]
	public PassiveApplyDebuffOnAttack()
	{
	}
}
[Token(Token = "0x200036F")]
public class PassiveAPReduce : PassiveAbility
{
	[Token(Token = "0x40011AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int APCostToReduce;

	[Token(Token = "0x40011AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int amountToReduce;

	[Token(Token = "0x60011F5")]
	[Address(RVA = "0xCC6988", Offset = "0xCC6988", VA = "0xCC6988")]
	public PassiveAPReduce()
	{
	}
}
[Token(Token = "0x2000370")]
public class PassiveAPReturn : PassiveAbility
{
	[Token(Token = "0x40011B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int refundAmt;

	[Token(Token = "0x40011B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float chanceToProc;

	[Token(Token = "0x40011B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject procEffect;

	[Token(Token = "0x60011F6")]
	[Address(RVA = "0xCC699C", Offset = "0xCC699C", VA = "0xCC699C", Slot = "5")]
	public override void onCastFunction(GameObject hand)
	{
	}

	[Token(Token = "0x60011F7")]
	[Address(RVA = "0xCC6B80", Offset = "0xCC6B80", VA = "0xCC6B80")]
	public PassiveAPReturn()
	{
	}
}
[Token(Token = "0x2000371")]
public class PassiveAutoSummon : PassiveAbility
{
	[Token(Token = "0x60011F8")]
	[Address(RVA = "0xCC6B98", Offset = "0xCC6B98", VA = "0xCC6B98", Slot = "7")]
	public override void onBattleStartFunction()
	{
	}

	[Token(Token = "0x60011F9")]
	[Address(RVA = "0xCC6CCC", Offset = "0xCC6CCC", VA = "0xCC6CCC")]
	public PassiveAutoSummon()
	{
	}
}
[Token(Token = "0x2000372")]
public class PassiveBuffStart : PassiveAbility
{
	[Token(Token = "0x40011B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public BuffSpell battleBuff;

	[Token(Token = "0x60011FA")]
	[Address(RVA = "0xCC6CD4", Offset = "0xCC6CD4", VA = "0xCC6CD4", Slot = "7")]
	public override void onBattleStartFunction()
	{
	}

	[Token(Token = "0x60011FB")]
	[Address(RVA = "0xCC6FB4", Offset = "0xCC6FB4", VA = "0xCC6FB4")]
	public PassiveBuffStart()
	{
	}
}
[Token(Token = "0x2000373")]
public class PassiveCureDebuff : PassiveAbility
{
	[Token(Token = "0x40011B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float healChance;

	[Token(Token = "0x60011FC")]
	[Address(RVA = "0xCC6FBC", Offset = "0xCC6FBC", VA = "0xCC6FBC", Slot = "4")]
	public override void onceATurnFunction()
	{
	}

	[Token(Token = "0x60011FD")]
	[Address(RVA = "0xCC7324", Offset = "0xCC7324", VA = "0xCC7324")]
	public PassiveCureDebuff()
	{
	}
}
[Token(Token = "0x2000374")]
public class PassiveDoublePhysDmg : PassiveAbility
{
	[Token(Token = "0x60011FE")]
	[Address(RVA = "0xCC7338", Offset = "0xCC7338", VA = "0xCC7338", Slot = "6")]
	public override void onAttackFunction(Weapon weapon, EnemyParent enemy)
	{
	}

	[Token(Token = "0x60011FF")]
	[Address(RVA = "0xCC739C", Offset = "0xCC739C", VA = "0xCC739C")]
	public PassiveDoublePhysDmg()
	{
	}
}
[Token(Token = "0x2000375")]
public class PassiveFlatStat : PassiveAbility
{
	[Token(Token = "0x2000376")]
	public enum StatType
	{
		[Token(Token = "0x40011B8")]
		power,
		[Token(Token = "0x40011B9")]
		defense,
		[Token(Token = "0x40011BA")]
		health,
		[Token(Token = "0x40011BB")]
		crit,
		[Token(Token = "0x40011BC")]
		maxAP,
		[Token(Token = "0x40011BD")]
		moveSpeed,
		[Token(Token = "0x40011BE")]
		critDamage,
		[Token(Token = "0x40011BF")]
		spellVamp,
		[Token(Token = "0x40011C0")]
		expBoost,
		[Token(Token = "0x40011C1")]
		summonPower,
		[Token(Token = "0x40011C2")]
		spellPowerMod,
		[Token(Token = "0x40011C3")]
		glitchChance,
		[Token(Token = "0x40011C4")]
		dropBonus
	}

	[Token(Token = "0x40011B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int statVal;

	[Token(Token = "0x40011B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public StatType statType;

	[Token(Token = "0x6001200")]
	[Address(RVA = "0xCC73A4", Offset = "0xCC73A4", VA = "0xCC73A4", Slot = "10")]
	public virtual int getStatVal()
	{
		return default(int);
	}

	[Token(Token = "0x6001201")]
	[Address(RVA = "0xCC73AC", Offset = "0xCC73AC", VA = "0xCC73AC")]
	public PassiveFlatStat()
	{
	}
}
[Token(Token = "0x2000377")]
public class PassiveFlatStatBlue : PassiveFlatStat
{
	[Token(Token = "0x40011C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool trackPassives;

	[Token(Token = "0x6001202")]
	[Address(RVA = "0xCC73B4", Offset = "0xCC73B4", VA = "0xCC73B4", Slot = "10")]
	public override int getStatVal()
	{
		return default(int);
	}

	[Token(Token = "0x6001203")]
	[Address(RVA = "0xCC7454", Offset = "0xCC7454", VA = "0xCC7454")]
	public PassiveFlatStatBlue()
	{
	}
}
[Token(Token = "0x2000378")]
public class PassiveFlatStatCheckHP : PassiveFlatStat
{
	[Token(Token = "0x6001204")]
	[Address(RVA = "0xCC745C", Offset = "0xCC745C", VA = "0xCC745C", Slot = "10")]
	public override int getStatVal()
	{
		return default(int);
	}

	[Token(Token = "0x6001205")]
	[Address(RVA = "0xCC7550", Offset = "0xCC7550", VA = "0xCC7550")]
	public PassiveFlatStatCheckHP()
	{
	}
}
[Token(Token = "0x2000379")]
public class PassiveFlatStatEnemyCount : PassiveFlatStat
{
	[Token(Token = "0x40011C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int enemyCount;

	[Token(Token = "0x40011C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool requireExactVal;

	[Token(Token = "0x40011C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool factorLevel;

	[Token(Token = "0x6001206")]
	[Address(RVA = "0xCC7558", Offset = "0xCC7558", VA = "0xCC7558", Slot = "10")]
	public override int getStatVal()
	{
		return default(int);
	}

	[Token(Token = "0x6001207")]
	[Address(RVA = "0xCC7678", Offset = "0xCC7678", VA = "0xCC7678")]
	public PassiveFlatStatEnemyCount()
	{
	}
}
[Token(Token = "0x200037A")]
public class PassiveFlatStatGlitch : PassiveFlatStat
{
	[Token(Token = "0x6001208")]
	[Address(RVA = "0xCC7690", Offset = "0xCC7690", VA = "0xCC7690", Slot = "10")]
	public override int getStatVal()
	{
		return default(int);
	}

	[Token(Token = "0x6001209")]
	[Address(RVA = "0xCC776C", Offset = "0xCC776C", VA = "0xCC776C")]
	public PassiveFlatStatGlitch()
	{
	}
}
[Token(Token = "0x200037B")]
public class PassiveFlatStatReqLvl : PassiveFlatStat
{
	[Token(Token = "0x40011C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int reqLevel;

	[Token(Token = "0x600120A")]
	[Address(RVA = "0xCC7774", Offset = "0xCC7774", VA = "0xCC7774", Slot = "10")]
	public override int getStatVal()
	{
		return default(int);
	}

	[Token(Token = "0x600120B")]
	[Address(RVA = "0xCC77F8", Offset = "0xCC77F8", VA = "0xCC77F8")]
	public PassiveFlatStatReqLvl()
	{
	}
}
[Token(Token = "0x200037C")]
public class PassiveFlatStatReqName : PassiveFlatStat
{
	[Token(Token = "0x40011CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string reqName;

	[Token(Token = "0x600120C")]
	[Address(RVA = "0xCC7800", Offset = "0xCC7800", VA = "0xCC7800", Slot = "10")]
	public override int getStatVal()
	{
		return default(int);
	}

	[Token(Token = "0x600120D")]
	[Address(RVA = "0xCC7888", Offset = "0xCC7888", VA = "0xCC7888")]
	public PassiveFlatStatReqName()
	{
	}
}
[Token(Token = "0x200037D")]
public class PassiveFlatStatSpellAffinity : PassiveFlatStat
{
	[Token(Token = "0x40011CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public PlayerSpell.SpellElement element;

	[Token(Token = "0x600120E")]
	[Address(RVA = "0xCC7890", Offset = "0xCC7890", VA = "0xCC7890", Slot = "10")]
	public override int getStatVal()
	{
		return default(int);
	}

	[Token(Token = "0x600120F")]
	[Address(RVA = "0xCC79C0", Offset = "0xCC79C0", VA = "0xCC79C0")]
	public PassiveFlatStatSpellAffinity()
	{
	}
}
[Token(Token = "0x200037E")]
public class PassiveFlatStatSummonsCount : PassiveFlatStat
{
	[Token(Token = "0x40011CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int reqSummons;

	[Token(Token = "0x6001210")]
	[Address(RVA = "0xCC79C8", Offset = "0xCC79C8", VA = "0xCC79C8", Slot = "10")]
	public override int getStatVal()
	{
		return default(int);
	}

	[Token(Token = "0x6001211")]
	[Address(RVA = "0xCC7A94", Offset = "0xCC7A94", VA = "0xCC7A94")]
	public PassiveFlatStatSummonsCount()
	{
	}
}
[Token(Token = "0x200037F")]
public class PassiveGalaxyBrain : PassiveAbility
{
	[Token(Token = "0x6001212")]
	[Address(RVA = "0xCC7AA4", Offset = "0xCC7AA4", VA = "0xCC7AA4", Slot = "7")]
	public override void onBattleStartFunction()
	{
	}

	[Token(Token = "0x6001213")]
	[Address(RVA = "0xCC7B48", Offset = "0xCC7B48", VA = "0xCC7B48")]
	public PassiveGalaxyBrain()
	{
	}
}
[Token(Token = "0x2000380")]
public class PassiveGlitchRoulette : PassiveAbility
{
	[Token(Token = "0x40011CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GlitchEffects[] glitches;

	[Token(Token = "0x6001214")]
	[Address(RVA = "0xCC7B50", Offset = "0xCC7B50", VA = "0xCC7B50", Slot = "6")]
	public override void onAttackFunction(Weapon weapon, EnemyParent enemy)
	{
	}

	[Token(Token = "0x6001215")]
	[Address(RVA = "0xCC7C68", Offset = "0xCC7C68", VA = "0xCC7C68")]
	public PassiveGlitchRoulette()
	{
	}
}
[Token(Token = "0x2000381")]
public class PassiveHealthOnCrit : PassiveAbility
{
	[Token(Token = "0x6001216")]
	[Address(RVA = "0xCC7C70", Offset = "0xCC7C70", VA = "0xCC7C70", Slot = "9")]
	public override void onSpellHitFunction(int damage, bool crit)
	{
	}

	[Token(Token = "0x6001217")]
	[Address(RVA = "0xCC7E0C", Offset = "0xCC7E0C", VA = "0xCC7E0C")]
	public PassiveHealthOnCrit()
	{
	}
}
[Token(Token = "0x2000382")]
public class PassiveHealTurn : PassiveAbility
{
	[Token(Token = "0x6001218")]
	[Address(RVA = "0xCC7E14", Offset = "0xCC7E14", VA = "0xCC7E14", Slot = "4")]
	public override void onceATurnFunction()
	{
	}

	[Token(Token = "0x6001219")]
	[Address(RVA = "0xCC7ED0", Offset = "0xCC7ED0", VA = "0xCC7ED0")]
	public PassiveHealTurn()
	{
	}
}
[Token(Token = "0x2000383")]
public class PassiveMorbinTime : PassiveAbility
{
	[Token(Token = "0x600121A")]
	[Address(RVA = "0xCC7ED8", Offset = "0xCC7ED8", VA = "0xCC7ED8", Slot = "6")]
	public override void onAttackFunction(Weapon weapon, EnemyParent enemy)
	{
	}

	[Token(Token = "0x600121B")]
	[Address(RVA = "0xCC7F8C", Offset = "0xCC7F8C", VA = "0xCC7F8C")]
	public PassiveMorbinTime()
	{
	}
}
[Token(Token = "0x2000384")]
public class PassiveRandomizeLoadout : PassiveAbility
{
	[Token(Token = "0x40011CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public BattleBuff[] buffs;

	[Token(Token = "0x600121C")]
	[Address(RVA = "0xCC7F94", Offset = "0xCC7F94", VA = "0xCC7F94", Slot = "7")]
	public override void onBattleStartFunction()
	{
	}

	[Token(Token = "0x600121D")]
	[Address(RVA = "0xCC8404", Offset = "0xCC8404", VA = "0xCC8404")]
	public PassiveRandomizeLoadout()
	{
	}
}
[Token(Token = "0x2000385")]
public class PassiveShortenCooldown : PassiveAbility
{
	[Token(Token = "0x40011CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float chanceToOccur;

	[Token(Token = "0x600121E")]
	[Address(RVA = "0xCC840C", Offset = "0xCC840C", VA = "0xCC840C", Slot = "4")]
	public override void onceATurnFunction()
	{
	}

	[Token(Token = "0x600121F")]
	[Address(RVA = "0xCC84C8", Offset = "0xCC84C8", VA = "0xCC84C8")]
	public PassiveShortenCooldown()
	{
	}
}
[Token(Token = "0x2000386")]
public class PassiveThievery : PassiveAbility
{
	[Token(Token = "0x40011D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float chanceToSteal;

	[Token(Token = "0x40011D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float moneyEarnedFactor;

	[Token(Token = "0x6001220")]
	[Address(RVA = "0xCC84DC", Offset = "0xCC84DC", VA = "0xCC84DC", Slot = "6")]
	public override void onAttackFunction(Weapon weapon, EnemyParent enemy)
	{
	}

	[Token(Token = "0x6001221")]
	[Address(RVA = "0xCC86E8", Offset = "0xCC86E8", VA = "0xCC86E8")]
	public PassiveThievery()
	{
	}
}
[Token(Token = "0x2000387")]
[CreateAssetMenu(menuName = "Scriptable Passive", order = 999)]
public class ScriptablePassive : ScriptableObject
{
	[Token(Token = "0x40011D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PassiveAbility ability;

	[Token(Token = "0x6001222")]
	[Address(RVA = "0xCC86FC", Offset = "0xCC86FC", VA = "0xCC86FC")]
	public ScriptablePassive()
	{
	}
}
[Token(Token = "0x2000388")]
public class OverworldPet : MonoBehaviour
{
	[Token(Token = "0x2000389")]
	protected enum PetState
	{
		[Token(Token = "0x40011D8")]
		Idle,
		[Token(Token = "0x40011D9")]
		Following,
		[Token(Token = "0x40011DA")]
		Disarming
	}

	[Token(Token = "0x200038A")]
	protected class IdleState : State<OverworldPet>
	{
		[Token(Token = "0x6001226")]
		[Address(RVA = "0xCC89E0", Offset = "0xCC89E0", VA = "0xCC89E0", Slot = "4")]
		public override void activate(OverworldPet parent)
		{
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0xCC8A54", Offset = "0xCC8A54", VA = "0xCC8A54", Slot = "5")]
		public override void update(OverworldPet parent)
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xCC88A8", Offset = "0xCC88A8", VA = "0xCC88A8")]
		public IdleState()
		{
		}
	}

	[Token(Token = "0x200038B")]
	protected class FollowState : State<OverworldPet>
	{
		[Token(Token = "0x6001229")]
		[Address(RVA = "0xCC8BAC", Offset = "0xCC8BAC", VA = "0xCC8BAC", Slot = "4")]
		public override void activate(OverworldPet parent)
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xCC8C20", Offset = "0xCC8C20", VA = "0xCC8C20", Slot = "5")]
		public override void update(OverworldPet parent)
		{
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0xCC88F0", Offset = "0xCC88F0", VA = "0xCC88F0")]
		public FollowState()
		{
		}
	}

	[Token(Token = "0x200038C")]
	protected class DisarmState : State<OverworldPet>
	{
		[Token(Token = "0x600122C")]
		[Address(RVA = "0xCC8DB0", Offset = "0xCC8DB0", VA = "0xCC8DB0", Slot = "4")]
		public override void activate(OverworldPet parent)
		{
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0xCC8DB4", Offset = "0xCC8DB4", VA = "0xCC8DB4", Slot = "5")]
		public override void update(OverworldPet parent)
		{
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0xCC8938", Offset = "0xCC8938", VA = "0xCC8938")]
		public DisarmState()
		{
		}
	}

	[Token(Token = "0x40011D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public NavMeshAgent agent;

	[Token(Token = "0x40011D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float followDistance;

	[Token(Token = "0x40011D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Animator animator;

	[Token(Token = "0x40011D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected StateMachine<OverworldPet, PetState> stateMachine;

	[Token(Token = "0x6001223")]
	[Address(RVA = "0xCC8704", Offset = "0xCC8704", VA = "0xCC8704")]
	private void Start()
	{
	}

	[Token(Token = "0x6001224")]
	[Address(RVA = "0xCC8980", Offset = "0xCC8980", VA = "0xCC8980")]
	private void Update()
	{
	}

	[Token(Token = "0x6001225")]
	[Address(RVA = "0xCC89D0", Offset = "0xCC89D0", VA = "0xCC89D0")]
	public OverworldPet()
	{
	}
}
[Token(Token = "0x200038D")]
public class PetBarkaxer : MonoBehaviour
{
	[Token(Token = "0x600122F")]
	[Address(RVA = "0xCC8DB8", Offset = "0xCC8DB8", VA = "0xCC8DB8")]
	private void Start()
	{
	}

	[Token(Token = "0x6001230")]
	[Address(RVA = "0xCC8DBC", Offset = "0xCC8DBC", VA = "0xCC8DBC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001231")]
	[Address(RVA = "0xCC8DC0", Offset = "0xCC8DC0", VA = "0xCC8DC0")]
	public PetBarkaxer()
	{
	}
}
[Token(Token = "0x200038E")]
public class MemorySphere : MonoBehaviour
{
	[Token(Token = "0x200038F")]
	[CompilerGenerated]
	private sealed class <disableTimer>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MemorySphere <>4__this;

		[Token(Token = "0x1700029B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001238")]
			[Address(RVA = "0xCC8FC4", Offset = "0xCC8FC4", VA = "0xCC8FC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600123A")]
			[Address(RVA = "0xCC900C", Offset = "0xCC900C", VA = "0xCC900C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0xCC8ED8", Offset = "0xCC8ED8", VA = "0xCC8ED8")]
		[DebuggerHidden]
		public <disableTimer>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0xCC8F10", Offset = "0xCC8F10", VA = "0xCC8F10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0xCC8F14", Offset = "0xCC8F14", VA = "0xCC8F14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0xCC8FCC", Offset = "0xCC8FCC", VA = "0xCC8FCC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40011DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject memorySphere;

	[Token(Token = "0x40011DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material[] materialsRight;

	[Token(Token = "0x40011DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material[] materialsLeft;

	[Token(Token = "0x40011DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MeshRenderer leftEyeRenderer;

	[Token(Token = "0x40011DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MeshRenderer rightEyeRenderer;

	[Token(Token = "0x40011E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float sphereActiveTime;

	[Token(Token = "0x6001232")]
	[Address(RVA = "0xCC8DC8", Offset = "0xCC8DC8", VA = "0xCC8DC8")]
	public void swapSphereTexturesAndEnable(int num)
	{
	}

	[Token(Token = "0x6001233")]
	[Address(RVA = "0xCC8E70", Offset = "0xCC8E70", VA = "0xCC8E70")]
	[IteratorStateMachine(typeof(<disableTimer>d__7))]
	private IEnumerator disableTimer()
	{
		return null;
	}

	[Token(Token = "0x6001234")]
	[Address(RVA = "0xCC8F00", Offset = "0xCC8F00", VA = "0xCC8F00")]
	public MemorySphere()
	{
	}
}
[Token(Token = "0x2000390")]
[CreateAssetMenu(menuName = "Player Class", order = 999)]
public class ArcaxerClass : ScriptableObject
{
	[Token(Token = "0x40011E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string className;

	[Token(Token = "0x40011E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PlayerSpell[] learnableSpells;

	[Token(Token = "0x40011E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PassiveAbility[] learnablePassives;

	[Token(Token = "0x40011E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool randomPassives;

	[Token(Token = "0x40011E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool randomSpells;

	[Token(Token = "0x40011E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int[] spellLevelReqs;

	[Token(Token = "0x40011EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int[] passiveLevelReqs;

	[Token(Token = "0x1700029D")]
	public string translatedName
	{
		[Token(Token = "0x600123B")]
		[Address(RVA = "0xCC9014", Offset = "0xCC9014", VA = "0xCC9014")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600123C")]
	[Address(RVA = "0xCC9094", Offset = "0xCC9094", VA = "0xCC9094")]
	public ArcaxerClass()
	{
	}
}
[Token(Token = "0x2000391")]
public class BackFlair : MonoBehaviour
{
	[Token(Token = "0x600123D")]
	[Address(RVA = "0xCC90E4", Offset = "0xCC90E4", VA = "0xCC90E4")]
	public BackFlair()
	{
	}
}
[Token(Token = "0x2000392")]
public class FootStepSoundPlayer : MonoBehaviour
{
	[Token(Token = "0x40011EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource source;

	[Token(Token = "0x40011EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float timeToStep;

	[Token(Token = "0x40011ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float time;

	[Token(Token = "0x600123E")]
	[Address(RVA = "0xCC90EC", Offset = "0xCC90EC", VA = "0xCC90EC")]
	private void Start()
	{
	}

	[Token(Token = "0x600123F")]
	[Address(RVA = "0xCC90F0", Offset = "0xCC90F0", VA = "0xCC90F0")]
	private void Update()
	{
	}

	[Token(Token = "0x6001240")]
	[Address(RVA = "0xCC91C0", Offset = "0xCC91C0", VA = "0xCC91C0")]
	public FootStepSoundPlayer()
	{
	}
}
[Token(Token = "0x2000393")]
public class GiantSummon : MonoBehaviour
{
	[Token(Token = "0x40011EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GiantSummon instance;

	[Token(Token = "0x40011EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform leftCastTrans;

	[Token(Token = "0x40011F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform rightCastTrans;

	[Token(Token = "0x40011F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform summonHeadTarget;

	[Token(Token = "0x40011F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject leftCharge;

	[Token(Token = "0x40011F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject rightCharge;

	[Token(Token = "0x40011F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Weapon leftWeapon;

	[Token(Token = "0x40011F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Weapon rightWeapon;

	[Token(Token = "0x40011F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion leftRot;

	[Token(Token = "0x40011F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Quaternion rightRot;

	[Token(Token = "0x40011F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Material weaponMat;

	[Token(Token = "0x6001241")]
	[Address(RVA = "0xCC91D4", Offset = "0xCC91D4", VA = "0xCC91D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001242")]
	[Address(RVA = "0xCC9220", Offset = "0xCC9220", VA = "0xCC9220")]
	protected void Update()
	{
	}

	[Token(Token = "0x6001243")]
	[Address(RVA = "0xCC936C", Offset = "0xCC936C", VA = "0xCC936C")]
	public void copyWeapon(Weapon weapon, bool right)
	{
	}

	[Token(Token = "0x6001244")]
	[Address(RVA = "0xCC95E8", Offset = "0xCC95E8", VA = "0xCC95E8")]
	public void destroyWeapon(bool right)
	{
	}

	[Token(Token = "0x6001245")]
	[Address(RVA = "0xCC966C", Offset = "0xCC966C", VA = "0xCC966C")]
	public void copyChargeEffect(GameObject charge, bool right)
	{
	}

	[Token(Token = "0x6001246")]
	[Address(RVA = "0xCC9760", Offset = "0xCC9760", VA = "0xCC9760")]
	public void destroyCharge(bool right)
	{
	}

	[Token(Token = "0x6001247")]
	[Address(RVA = "0xCC97D0", Offset = "0xCC97D0", VA = "0xCC97D0")]
	public void enlargeSpell(PlayerSpell spell, bool rightHand)
	{
	}

	[Token(Token = "0x6001248")]
	[Address(RVA = "0xCC99D0", Offset = "0xCC99D0", VA = "0xCC99D0")]
	public GiantSummon()
	{
	}
}
[Token(Token = "0x2000394")]
public class HandCaster : MonoBehaviour
{
	[Token(Token = "0x2000395")]
	public enum HandState
	{
		[Token(Token = "0x4001217")]
		Idle,
		[Token(Token = "0x4001218")]
		Casting,
		[Token(Token = "0x4001219")]
		Charging,
		[Token(Token = "0x400121A")]
		Weilding,
		[Token(Token = "0x400121B")]
		Summoning,
		[Token(Token = "0x400121C")]
		ClosedIdle,
		[Token(Token = "0x400121D")]
		UltReady,
		[Token(Token = "0x400121E")]
		CastingUlt
	}

	[Token(Token = "0x2000396")]
	private class IdleState : State<HandCaster>
	{
		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool playedSound;

		[Token(Token = "0x6001261")]
		[Address(RVA = "0xCCBA34", Offset = "0xCCBA34", VA = "0xCCBA34", Slot = "4")]
		public override void activate(HandCaster parent)
		{
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0xCCBA58", Offset = "0xCCBA58", VA = "0xCCBA58", Slot = "5")]
		public override void update(HandCaster parent)
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0xCCADC8", Offset = "0xCCADC8", VA = "0xCCADC8")]
		public IdleState()
		{
		}
	}

	[Token(Token = "0x2000397")]
	private class ClosedIdleState : State<HandCaster>
	{
		[Token(Token = "0x6001264")]
		[Address(RVA = "0xCCC4B0", Offset = "0xCCC4B0", VA = "0xCCC4B0", Slot = "4")]
		public override void activate(HandCaster parent)
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xCCC558", Offset = "0xCCC558", VA = "0xCCC558", Slot = "5")]
		public override void update(HandCaster parent)
		{
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0xCCAF30", Offset = "0xCCAF30", VA = "0xCCAF30")]
		public ClosedIdleState()
		{
		}
	}

	[Token(Token = "0x2000398")]
	private class ChargingState : State<HandCaster>
	{
		[Token(Token = "0x6001267")]
		[Address(RVA = "0xCCC5D0", Offset = "0xCCC5D0", VA = "0xCCC5D0", Slot = "4")]
		public override void activate(HandCaster parent)
		{
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0xCCC89C", Offset = "0xCCC89C", VA = "0xCCC89C", Slot = "5")]
		public override void update(HandCaster parent)
		{
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0xCCAE58", Offset = "0xCCAE58", VA = "0xCCAE58")]
		public ChargingState()
		{
		}
	}

	[Token(Token = "0x2000399")]
	private class CastingState : State<HandCaster>
	{
		[Token(Token = "0x600126A")]
		[Address(RVA = "0xCCCCE0", Offset = "0xCCCCE0", VA = "0xCCCCE0")]
		private void castCurrentSpell(HandCaster parent)
		{
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0xCCD6B8", Offset = "0xCCD6B8", VA = "0xCCD6B8", Slot = "4")]
		public override void activate(HandCaster parent)
		{
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0xCCD848", Offset = "0xCCD848", VA = "0xCCD848", Slot = "5")]
		public override void update(HandCaster parent)
		{
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0xCCAE10", Offset = "0xCCAE10", VA = "0xCCAE10")]
		public CastingState()
		{
		}
	}

	[Token(Token = "0x200039A")]
	private class SummoningState : State<HandCaster>
	{
		[Token(Token = "0x600126E")]
		[Address(RVA = "0xCCD84C", Offset = "0xCCD84C", VA = "0xCCD84C", Slot = "4")]
		public override void activate(HandCaster parent)
		{
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xCCD850", Offset = "0xCCD850", VA = "0xCCD850", Slot = "5")]
		public override void update(HandCaster parent)
		{
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xCCAEE8", Offset = "0xCCAEE8", VA = "0xCCAEE8")]
		public SummoningState()
		{
		}
	}

	[Token(Token = "0x200039B")]
	private class WieldingState : State<HandCaster>
	{
		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameObject weaponHeld;

		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody weaponRb;

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xCCD854", Offset = "0xCCD854", VA = "0xCCD854")]
		private void teleportToTarget(HandCaster parent)
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xCCDD58", Offset = "0xCCDD58", VA = "0xCCDD58")]
		private void teleportToOrigin(HandCaster parent)
		{
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0xCCDE30", Offset = "0xCCDE30", VA = "0xCCDE30")]
		public void holsterWeapon(HandCaster parent, float timeToDestroy)
		{
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0xCCE008", Offset = "0xCCE008", VA = "0xCCE008", Slot = "4")]
		public override void activate(HandCaster parent)
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0xCCE3FC", Offset = "0xCCE3FC", VA = "0xCCE3FC", Slot = "5")]
		public override void update(HandCaster parent)
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0xCCAEA0", Offset = "0xCCAEA0", VA = "0xCCAEA0")]
		public WieldingState()
		{
		}
	}

	[Token(Token = "0x40011F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private StateMachine<HandCaster, HandState> stateMachine;

	[Token(Token = "0x40011FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Loadout")]
	public PlayerSpell currentSpell;

	[Token(Token = "0x40011FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PlayerSpell defensiveSpell;

	[Token(Token = "0x40011FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected PlayerSpell lastSpellBeforeEnemyTurn;

	[Token(Token = "0x40011FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Weapon currentWeapon;

	[Token(Token = "0x40011FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public PlayerSpell[] equippedSpells;

	[Token(Token = "0x40011FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool spellsLocked;

	[Token(Token = "0x4001200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool weaponsLocked;

	[Token(Token = "0x4001201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Assign Stuff")]
	public Transform spellSpawnTrans;

	[Token(Token = "0x4001202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform weaponSpawnTrans;

	[Token(Token = "0x4001203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject spellCanvas;

	[Token(Token = "0x4001204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject adrenalineParticle;

	[Token(Token = "0x4001205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool rightHand;

	[Token(Token = "0x4001206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Button[] spellButtons;

	[Token(Token = "0x4001207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Image[] spellImages;

	[Token(Token = "0x4001208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text[] spellTexts;

	[Token(Token = "0x4001209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject spellChangeEffect;

	[Token(Token = "0x400120A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public SkinnedMeshRenderer handRend;

	[Token(Token = "0x400120B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject lineRend;

	[Token(Token = "0x400120C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected PlayerControllerArcaxer playerController;

	[Token(Token = "0x400120D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected Transform originTrans;

	[Token(Token = "0x400120E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected float _handSpeed;

	[Token(Token = "0x400120F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected int[] turnsSinceUsedSpells;

	[Token(Token = "0x4001210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected bool[] usedSpellThisTurn;

	[Token(Token = "0x4001211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	protected float[] stackingMultiplier;

	[Token(Token = "0x4001212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	protected int selectedSpellNum;

	[Token(Token = "0x4001213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	protected List<PassiveAbility> onCastPassives;

	[Token(Token = "0x4001214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private GameObject currentEffect;

	[Token(Token = "0x4001215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public bool forceHolster;

	[Token(Token = "0x1700029E")]
	private float gripTrigger
	{
		[Token(Token = "0x6001249")]
		[Address(RVA = "0xCC99D8", Offset = "0xCC99D8", VA = "0xCC99D8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700029F")]
	private float indexTrigger
	{
		[Token(Token = "0x600124A")]
		[Address(RVA = "0xCC9A58", Offset = "0xCC9A58", VA = "0xCC9A58")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170002A0")]
	private UnityEngine.Vector2 thumbStick
	{
		[Token(Token = "0x600124B")]
		[Address(RVA = "0xCC9AD8", Offset = "0xCC9AD8", VA = "0xCC9AD8")]
		get
		{
			return default(UnityEngine.Vector2);
		}
	}

	[Token(Token = "0x170002A1")]
	private bool handTriggerDown
	{
		[Token(Token = "0x600124C")]
		[Address(RVA = "0xCC9B58", Offset = "0xCC9B58", VA = "0xCC9B58")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002A2")]
	private bool indexTriggerDown
	{
		[Token(Token = "0x600124D")]
		[Address(RVA = "0xCC9BD8", Offset = "0xCC9BD8", VA = "0xCC9BD8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002A3")]
	public float handSpeed
	{
		[Token(Token = "0x600124E")]
		[Address(RVA = "0xCC9C58", Offset = "0xCC9C58", VA = "0xCC9C58")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600124F")]
		[Address(RVA = "0xCC9C60", Offset = "0xCC9C60", VA = "0xCC9C60")]
		private set
		{
		}
	}

	[Token(Token = "0x170002A4")]
	public UnityEngine.Vector3 velocity
	{
		[Token(Token = "0x6001250")]
		[Address(RVA = "0xCC9C68", Offset = "0xCC9C68", VA = "0xCC9C68")]
		get
		{
			return default(UnityEngine.Vector3);
		}
	}

	[Token(Token = "0x170002A5")]
	protected virtual bool canCastSpell
	{
		[Token(Token = "0x6001251")]
		[Address(RVA = "0xCC9CE8", Offset = "0xCC9CE8", VA = "0xCC9CE8", Slot = "4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001252")]
	[Address(RVA = "0xCC9E38", Offset = "0xCC9E38", VA = "0xCC9E38")]
	public bool canCastSpellSpecific(int num)
	{
		return default(bool);
	}

	[Token(Token = "0x6001253")]
	[Address(RVA = "0xCC9F18", Offset = "0xCC9F18", VA = "0xCC9F18", Slot = "5")]
	public virtual void increaseTurnCDCounters()
	{
	}

	[Token(Token = "0x6001254")]
	[Address(RVA = "0xCCA2FC", Offset = "0xCCA2FC", VA = "0xCCA2FC")]
	public void increaseAbilityTimers(int amt)
	{
	}

	[Token(Token = "0x6001255")]
	[Address(RVA = "0xCCA3D4", Offset = "0xCCA3D4", VA = "0xCCA3D4")]
	public void swapToDefensiveSpell()
	{
	}

	[Token(Token = "0x6001256")]
	[Address(RVA = "0xCCA494", Offset = "0xCCA494", VA = "0xCCA494")]
	public void swapFromDefensiveSpell()
	{
	}

	[Token(Token = "0x6001257")]
	[Address(RVA = "0xCCA550", Offset = "0xCCA550", VA = "0xCCA550")]
	private void Start()
	{
	}

	[Token(Token = "0x6001258")]
	[Address(RVA = "0xCCAF78", Offset = "0xCCAF78", VA = "0xCCAF78", Slot = "6")]
	public virtual void updateSpellInfo()
	{
	}

	[Token(Token = "0x6001259")]
	[Address(RVA = "0xCCB51C", Offset = "0xCCB51C", VA = "0xCCB51C")]
	private void Update()
	{
	}

	[Token(Token = "0x600125A")]
	[Address(RVA = "0xCCB56C", Offset = "0xCCB56C", VA = "0xCCB56C")]
	private int getThumbPadDirection(HandCaster parent)
	{
		return default(int);
	}

	[Token(Token = "0x600125B")]
	[Address(RVA = "0xCCB5D4", Offset = "0xCCB5D4", VA = "0xCCB5D4")]
	public void forceOnCastPassives()
	{
	}

	[Token(Token = "0x600125C")]
	[Address(RVA = "0xCCB730", Offset = "0xCCB730", VA = "0xCCB730")]
	private void checkIfTurnOver()
	{
	}

	[Token(Token = "0x600125D")]
	[Address(RVA = "0xCCB834", Offset = "0xCCB834", VA = "0xCCB834")]
	public void switchToSummoning()
	{
	}

	[Token(Token = "0x600125E")]
	[Address(RVA = "0xCCB888", Offset = "0xCCB888", VA = "0xCCB888")]
	public bool checkForIdle()
	{
		return default(bool);
	}

	[Token(Token = "0x600125F")]
	[Address(RVA = "0xCCB8D8", Offset = "0xCCB8D8", VA = "0xCCB8D8")]
	public void forceDropWeapon()
	{
	}

	[Token(Token = "0x6001260")]
	[Address(RVA = "0xCCB8E4", Offset = "0xCCB8E4", VA = "0xCCB8E4")]
	public HandCaster()
	{
	}
}
[Token(Token = "0x200039C")]
public class OverworldAttack : MonoBehaviour
{
	[Token(Token = "0x200039D")]
	[CompilerGenerated]
	private sealed class <disableCollider>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OverworldAttack <>4__this;

		[Token(Token = "0x170002A6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600127E")]
			[Address(RVA = "0xCCE99C", Offset = "0xCCE99C", VA = "0xCCE99C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001280")]
			[Address(RVA = "0xCCE9E4", Offset = "0xCCE9E4", VA = "0xCCE9E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xCCE8B4", Offset = "0xCCE8B4", VA = "0xCCE8B4")]
		[DebuggerHidden]
		public <disableCollider>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0xCCE8E4", Offset = "0xCCE8E4", VA = "0xCCE8E4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0xCCE8E8", Offset = "0xCCE8E8", VA = "0xCCE8E8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0xCCE9A4", Offset = "0xCCE9A4", VA = "0xCCE9A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject thirdPersonPlayer;

	[Token(Token = "0x4001223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider col;

	[Token(Token = "0x6001277")]
	[Address(RVA = "0xCCE744", Offset = "0xCCE744", VA = "0xCCE744")]
	private void Start()
	{
	}

	[Token(Token = "0x6001278")]
	[Address(RVA = "0xCCE7CC", Offset = "0xCCE7CC", VA = "0xCCE7CC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001279")]
	[Address(RVA = "0xCCE764", Offset = "0xCCE764", VA = "0xCCE764")]
	[IteratorStateMachine(typeof(<disableCollider>d__4))]
	private IEnumerator disableCollider()
	{
		return null;
	}

	[Token(Token = "0x600127A")]
	[Address(RVA = "0xCCE8DC", Offset = "0xCCE8DC", VA = "0xCCE8DC")]
	public OverworldAttack()
	{
	}
}
[Token(Token = "0x200039E")]
public class PlayerControllerArcaxer : MonoBehaviour
{
	[Token(Token = "0x200039F")]
	public delegate void PlayerCritEventHandler(int damage);

	[Token(Token = "0x20003A0")]
	public delegate void PlayerDamagedEventHandler();

	[Token(Token = "0x20003A1")]
	public delegate void PlayerLowHealthEventHandler();

	[Token(Token = "0x20003A2")]
	public delegate void PlayerAdrenalineMaxedEventHandler();

	[Token(Token = "0x20003A3")]
	public enum AdrenalineState
	{
		[Token(Token = "0x4001266")]
		idle,
		[Token(Token = "0x4001267")]
		available,
		[Token(Token = "0x4001268")]
		draining,
		[Token(Token = "0x4001269")]
		summoned
	}

	[Token(Token = "0x20003A4")]
	[CompilerGenerated]
	private sealed class <resetInvincibilityTimer>d__94 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlayerControllerArcaxer <>4__this;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float level;

		[Token(Token = "0x170002AD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60012C6")]
			[Address(RVA = "0xCD22F0", Offset = "0xCD22F0", VA = "0xCD22F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60012C8")]
			[Address(RVA = "0xCD2338", Offset = "0xCD2338", VA = "0xCD2338", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0xCD0548", Offset = "0xCD0548", VA = "0xCD0548")]
		[DebuggerHidden]
		public <resetInvincibilityTimer>d__94(int <>1__state)
		{
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0xCD2234", Offset = "0xCD2234", VA = "0xCD2234", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0xCD2238", Offset = "0xCD2238", VA = "0xCD2238", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xCD22F8", Offset = "0xCD22F8", VA = "0xCD22F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003A5")]
	[CompilerGenerated]
	private sealed class <killPlayerTimer>d__99 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerControllerArcaxer <>4__this;

		[Token(Token = "0x170002AF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60012CC")]
			[Address(RVA = "0xCD25CC", Offset = "0xCD25CC", VA = "0xCD25CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60012CE")]
			[Address(RVA = "0xCD2614", Offset = "0xCD2614", VA = "0xCD2614", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0xCD0B00", Offset = "0xCD0B00", VA = "0xCD0B00")]
		[DebuggerHidden]
		public <killPlayerTimer>d__99(int <>1__state)
		{
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0xCD2340", Offset = "0xCD2340", VA = "0xCD2340", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0xCD2344", Offset = "0xCD2344", VA = "0xCD2344", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0xCD25D4", Offset = "0xCD25D4", VA = "0xCD25D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003A6")]
	[CompilerGenerated]
	private sealed class <playNotificationMessageTimer>d__104 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerControllerArcaxer <>4__this;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string text;

		[Token(Token = "0x170002B1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60012D2")]
			[Address(RVA = "0xCD27A8", Offset = "0xCD27A8", VA = "0xCD27A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60012D4")]
			[Address(RVA = "0xCD27F0", Offset = "0xCD27F0", VA = "0xCD27F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0xCD0BEC", Offset = "0xCD0BEC", VA = "0xCD0BEC")]
		[DebuggerHidden]
		public <playNotificationMessageTimer>d__104(int <>1__state)
		{
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xCD261C", Offset = "0xCD261C", VA = "0xCD261C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xCD2620", Offset = "0xCD2620", VA = "0xCD2620", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0xCD27B0", Offset = "0xCD27B0", VA = "0xCD27B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003A9")]
	[CompilerGenerated]
	private sealed class <buffTextTimer>d__118 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<string> strings;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlayerControllerArcaxer <>4__this;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<string>.Enumerator <>7__wrap1;

		[Token(Token = "0x170002B3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60012DD")]
			[Address(RVA = "0xCD2CB8", Offset = "0xCD2CB8", VA = "0xCD2CB8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60012DF")]
			[Address(RVA = "0xCD2D00", Offset = "0xCD2D00", VA = "0xCD2D00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0xCD1D48", Offset = "0xCD1D48", VA = "0xCD1D48")]
		[DebuggerHidden]
		public <buffTextTimer>d__118(int <>1__state)
		{
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0xCD28C8", Offset = "0xCD28C8", VA = "0xCD28C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0xCD28F4", Offset = "0xCD28F4", VA = "0xCD28F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0xCD2C68", Offset = "0xCD2C68", VA = "0xCD2C68")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0xCD2CC0", Offset = "0xCD2CC0", VA = "0xCD2CC0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int maxHealth;

	[Token(Token = "0x4001228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int _currentAP;

	[Token(Token = "0x4001229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int maxMP;

	[Token(Token = "0x400122A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int _currentMP;

	[Token(Token = "0x400122B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int deathSaves;

	[Token(Token = "0x400122C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float maxAdrenaline;

	[Token(Token = "0x400122D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float _currentAdrenaline;

	[Token(Token = "0x400122E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected int _healthPoints;

	[Token(Token = "0x400122F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool isDead;

	[Token(Token = "0x4001230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int maxAp;

	[Token(Token = "0x4001231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int spellsFiredThisBattle;

	[Token(Token = "0x4001232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool cheatDamage;

	[Token(Token = "0x4001233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool disableBackTeleport;

	[Token(Token = "0x4001234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4001235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public PlayerStats playerStats;

	[Token(Token = "0x4001236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public bool isTeleported;

	[Token(Token = "0x4001237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[HideInInspector]
	public BhapticsManager bHapticsManager;

	[Token(Token = "0x4001238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("UI Elements")]
	public UIBar healthBar;

	[Token(Token = "0x4001239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public UIBar APBar;

	[Token(Token = "0x400123A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UIBar adrenalineBar;

	[Token(Token = "0x400123B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UIBar manaBar;

	[Token(Token = "0x400123C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text phaseText;

	[Token(Token = "0x400123D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Text buffText;

	[Token(Token = "0x400123E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject damageText;

	[Token(Token = "0x400123F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject healText;

	[Token(Token = "0x4001240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject damageTextCrit;

	[Token(Token = "0x4001241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject infoTextEnemy;

	[Token(Token = "0x4001242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Animator fadeAnim;

	[Token(Token = "0x4001243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public FadeMaterial fadeToBlack;

	[Token(Token = "0x4001244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public UIHud uiHUD;

	[Token(Token = "0x4001245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Image fullScreenColor;

	[Token(Token = "0x4001246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Transform infoCanvasTrans;

	[Token(Token = "0x4001247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject infoCanvas;

	[Token(Token = "0x4001248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public UIBattleResults UIResults;

	[Token(Token = "0x4001249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GameObject playHUD;

	[Token(Token = "0x400124A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public GameObject cam;

	[Token(Token = "0x400124B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public GameObject UIInfoCanvas;

	[Token(Token = "0x400124C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public GameObject deathBlinders;

	[Token(Token = "0x400124D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public HaxChangeCard changeCardEffect;

	[Token(Token = "0x400124E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[HideInInspector]
	public UnityEngine.Vector3 summonPosRight;

	[Token(Token = "0x400124F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	[HideInInspector]
	public UnityEngine.Vector3 summonPosLeft;

	[Token(Token = "0x4001250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[HideInInspector]
	public UnityEngine.Vector3 originPos;

	[Token(Token = "0x4001251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[Header("Hands")]
	public HandCaster leftHand;

	[Token(Token = "0x4001252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public HandCaster rightHand;

	[Token(Token = "0x4001253")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public Material handNormal;

	[Token(Token = "0x4001254")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public Material handCharged;

	[Token(Token = "0x4001255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[Header("Effects")]
	public GameObject maxAdrenalineParticle;

	[Token(Token = "0x400125A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[Header("Active Buffs")]
	public List<BattleBuff> activeBuffs;

	[Token(Token = "0x400125B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public AdrenalineState adrenalineState;

	[Token(Token = "0x400125C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public GameObject postProcessing;

	[Token(Token = "0x400125D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public bool hasProjectileReflect;

	[Token(Token = "0x400125E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	private float invincibilityTimeLevel;

	[Token(Token = "0x400125F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private float invincibilityTimer;

	[Token(Token = "0x4001260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	private int defenseFloorMod;

	[Token(Token = "0x4001261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public bool frenziedCasting;

	[Token(Token = "0x4001262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B1")]
	public bool reflectProjectiles;

	[Token(Token = "0x4001263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
	public int adrenalineModifier;

	[Token(Token = "0x4001264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlayerControllerArcaxer instance;

	[Token(Token = "0x170002A8")]
	public int manaPoints
	{
		[Token(Token = "0x6001281")]
		[Address(RVA = "0xCCE9EC", Offset = "0xCCE9EC", VA = "0xCCE9EC")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001282")]
		[Address(RVA = "0xCCE9F4", Offset = "0xCCE9F4", VA = "0xCCE9F4")]
		set
		{
		}
	}

	[Token(Token = "0x170002A9")]
	public int healthpoints
	{
		[Token(Token = "0x6001283")]
		[Address(RVA = "0xCCEAAC", Offset = "0xCCEAAC", VA = "0xCCEAAC")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001284")]
		[Address(RVA = "0xCCEAB4", Offset = "0xCCEAB4", VA = "0xCCEAB4")]
		set
		{
		}
	}

	[Token(Token = "0x170002AA")]
	public int currentAp
	{
		[Token(Token = "0x6001285")]
		[Address(RVA = "0xCCEBC4", Offset = "0xCCEBC4", VA = "0xCCEBC4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001286")]
		[Address(RVA = "0xCC6B6C", Offset = "0xCC6B6C", VA = "0xCC6B6C")]
		set
		{
		}
	}

	[Token(Token = "0x170002AB")]
	public float currentAdrenaline
	{
		[Token(Token = "0x6001287")]
		[Address(RVA = "0xCCEC00", Offset = "0xCCEC00", VA = "0xCCEC00")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001288")]
		[Address(RVA = "0xCCEC08", Offset = "0xCCEC08", VA = "0xCCEC08")]
		set
		{
		}
	}

	[Token(Token = "0x170002AC")]
	public UnityEngine.Vector3 playerPosition
	{
		[Token(Token = "0x6001291")]
		[Address(RVA = "0xCCF314", Offset = "0xCCF314", VA = "0xCCF314")]
		get
		{
			return default(UnityEngine.Vector3);
		}
	}

	[Token(Token = "0x14000013")]
	public event PlayerCritEventHandler OnPlayerCrit
	{
		[Token(Token = "0x6001289")]
		[Address(RVA = "0xCCEE14", Offset = "0xCCEE14", VA = "0xCCEE14")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600128A")]
		[Address(RVA = "0xCCEEB4", Offset = "0xCCEEB4", VA = "0xCCEEB4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000014")]
	public event PlayerDamagedEventHandler OnPlayerDamaged
	{
		[Token(Token = "0x600128B")]
		[Address(RVA = "0xCCEF54", Offset = "0xCCEF54", VA = "0xCCEF54")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600128C")]
		[Address(RVA = "0xCCEFF4", Offset = "0xCCEFF4", VA = "0xCCEFF4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000015")]
	public event PlayerLowHealthEventHandler OnPlayerLow
	{
		[Token(Token = "0x600128D")]
		[Address(RVA = "0xCCF094", Offset = "0xCCF094", VA = "0xCCF094")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600128E")]
		[Address(RVA = "0xCCF134", Offset = "0xCCF134", VA = "0xCCF134")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000016")]
	public event PlayerAdrenalineMaxedEventHandler OnAdrenalineMaxed
	{
		[Token(Token = "0x600128F")]
		[Address(RVA = "0xCCF1D4", Offset = "0xCCF1D4", VA = "0xCCF1D4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6001290")]
		[Address(RVA = "0xCCF274", Offset = "0xCCF274", VA = "0xCCF274")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6001292")]
	[Address(RVA = "0xCCF378", Offset = "0xCCF378", VA = "0xCCF378")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001293")]
	[Address(RVA = "0xCCF4C8", Offset = "0xCCF4C8", VA = "0xCCF4C8")]
	public void notifyCrit(int amount)
	{
	}

	[Token(Token = "0x6001294")]
	[Address(RVA = "0xCCF4E4", Offset = "0xCCF4E4", VA = "0xCCF4E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6001295")]
	[Address(RVA = "0xCD0214", Offset = "0xCD0214", VA = "0xCD0214")]
	private void Update()
	{
	}

	[Token(Token = "0x6001296")]
	[Address(RVA = "0xCD049C", Offset = "0xCD049C", VA = "0xCD049C")]
	public void makeInvincibleForTime(float time)
	{
	}

	[Token(Token = "0x6001297")]
	[Address(RVA = "0xCD04C8", Offset = "0xCD04C8", VA = "0xCD04C8")]
	[IteratorStateMachine(typeof(<resetInvincibilityTimer>d__94))]
	private IEnumerator resetInvincibilityTimer(float time, float level)
	{
		return null;
	}

	[Token(Token = "0x6001298")]
	[Address(RVA = "0xCD0570", Offset = "0xCD0570", VA = "0xCD0570")]
	private void fadeOutAtStart()
	{
	}

	[Token(Token = "0x6001299")]
	[Address(RVA = "0xCD05C8", Offset = "0xCD05C8", VA = "0xCD05C8")]
	public void damagePlayer(int damage, bool isTrueDamage = false, bool hapticFeedback = true)
	{
	}

	[Token(Token = "0x600129A")]
	[Address(RVA = "0xCC7CF0", Offset = "0xCC7CF0", VA = "0xCC7CF0")]
	public void healPlayer(int health)
	{
	}

	[Token(Token = "0x600129B")]
	[Address(RVA = "0xCCEBA4", Offset = "0xCCEBA4", VA = "0xCCEBA4")]
	public void killPlayer()
	{
	}

	[Token(Token = "0x600129C")]
	[Address(RVA = "0xCD0A98", Offset = "0xCD0A98", VA = "0xCD0A98")]
	[IteratorStateMachine(typeof(<killPlayerTimer>d__99))]
	private IEnumerator killPlayerTimer()
	{
		return null;
	}

	[Token(Token = "0x600129D")]
	[Address(RVA = "0xCCEBCC", Offset = "0xCCEBCC", VA = "0xCCEBCC")]
	public void updateApBar()
	{
	}

	[Token(Token = "0x600129E")]
	[Address(RVA = "0xCD01E0", Offset = "0xCD01E0", VA = "0xCD01E0")]
	public void updateManaBar()
	{
	}

	[Token(Token = "0x600129F")]
	[Address(RVA = "0xCD0B28", Offset = "0xCD0B28", VA = "0xCD0B28")]
	public void updateAp(int amount)
	{
	}

	[Token(Token = "0x60012A0")]
	[Address(RVA = "0xCC86C8", Offset = "0xCC86C8", VA = "0xCC86C8")]
	public void playNotificationMessage(string text)
	{
	}

	[Token(Token = "0x60012A1")]
	[Address(RVA = "0xCD0B78", Offset = "0xCD0B78", VA = "0xCD0B78")]
	[IteratorStateMachine(typeof(<playNotificationMessageTimer>d__104))]
	private IEnumerator playNotificationMessageTimer(string text)
	{
		return null;
	}

	[Token(Token = "0x60012A2")]
	[Address(RVA = "0xCD0C14", Offset = "0xCD0C14", VA = "0xCD0C14")]
	private void hideBattleBars()
	{
	}

	[Token(Token = "0x60012A3")]
	[Address(RVA = "0xCC65AC", Offset = "0xCC65AC", VA = "0xCC65AC")]
	public void giveAdrenaline(float amt)
	{
	}

	[Token(Token = "0x60012A4")]
	[Address(RVA = "0xCCEDE8", Offset = "0xCCEDE8", VA = "0xCCEDE8")]
	public void updateAdrenalineBar()
	{
	}

	[Token(Token = "0x60012A5")]
	[Address(RVA = "0xCD0C98", Offset = "0xCD0C98", VA = "0xCD0C98")]
	public void giveAdrenalineRush()
	{
	}

	[Token(Token = "0x60012A6")]
	[Address(RVA = "0xCD0DF8", Offset = "0xCD0DF8", VA = "0xCD0DF8")]
	public void translateAndSetStringPhaseText(string s)
	{
	}

	[Token(Token = "0x60012A7")]
	[Address(RVA = "0xCD10D4", Offset = "0xCD10D4", VA = "0xCD10D4")]
	public void translateAndSetStringNotification(string s)
	{
	}

	[Token(Token = "0x60012A8")]
	[Address(RVA = "0xCD103C", Offset = "0xCD103C", VA = "0xCD103C")]
	private void setPhaseText(string s)
	{
	}

	[Token(Token = "0x60012A9")]
	[Address(RVA = "0xCCEC74", Offset = "0xCCEC74", VA = "0xCCEC74")]
	public void makeSummonAvailable()
	{
	}

	[Token(Token = "0x60012AA")]
	[Address(RVA = "0xCD1328", Offset = "0xCD1328", VA = "0xCD1328")]
	public void tickDownBuffs()
	{
	}

	[Token(Token = "0x60012AB")]
	[Address(RVA = "0xCD17C8", Offset = "0xCD17C8", VA = "0xCD17C8")]
	public bool hasBuff(BattleBuff buff)
	{
		return default(bool);
	}

	[Token(Token = "0x60012AC")]
	[Address(RVA = "0xCC6D84", Offset = "0xCC6D84", VA = "0xCC6D84")]
	public void addBuff(BattleBuff buff)
	{
	}

	[Token(Token = "0x60012AD")]
	[Address(RVA = "0xCD1958", Offset = "0xCD1958", VA = "0xCD1958")]
	public void removeBuff(BattleBuff buff)
	{
	}

	[Token(Token = "0x60012AE")]
	[Address(RVA = "0xCD1AB8", Offset = "0xCD1AB8", VA = "0xCD1AB8")]
	public void removeBuffs(List<BattleBuff> buffs)
	{
	}

	[Token(Token = "0x60012AF")]
	[Address(RVA = "0xCD1754", Offset = "0xCD1754", VA = "0xCD1754")]
	[IteratorStateMachine(typeof(<buffTextTimer>d__118))]
	private IEnumerator buffTextTimer(List<string> strings)
	{
		return null;
	}

	[Token(Token = "0x60012B0")]
	[Address(RVA = "0xCD018C", Offset = "0xCD018C", VA = "0xCD018C")]
	public void centerInfoCanvas()
	{
	}

	[Token(Token = "0x60012B1")]
	[Address(RVA = "0xCD1D70", Offset = "0xCD1D70", VA = "0xCD1D70")]
	public void centerResultsCanvas()
	{
	}

	[Token(Token = "0x60012B2")]
	[Address(RVA = "0xCD1DC4", Offset = "0xCD1DC4", VA = "0xCD1DC4")]
	public PlayerControllerArcaxer()
	{
	}
}
[Serializable]
[Token(Token = "0x20003AA")]
public class ArcaxerPlayerSettings
{
	[Token(Token = "0x400127F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float worldYPosModifier;

	[Token(Token = "0x4001280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float worldZPosModifier;

	[Token(Token = "0x4001281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float worldXPosModifier;

	[Token(Token = "0x4001282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool comfortModeOn;

	[Token(Token = "0x4001283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float masterVolume;

	[Token(Token = "0x4001284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float musicVolume;

	[Token(Token = "0x4001285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float sfxVolume;

	[Token(Token = "0x4001286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float voiceVolume;

	[Token(Token = "0x4001287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float voiceAssistVolume;

	[Token(Token = "0x4001288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool hapticFeedbackOn;

	[Token(Token = "0x4001289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool mirrorCameraTurn;

	[Token(Token = "0x400128A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool smoothTurn;

	[Token(Token = "0x400128B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	public bool leftHandMode;

	[Token(Token = "0x400128C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool mixedReality;

	[Token(Token = "0x400128D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool mixedRealityBattle;

	[Token(Token = "0x400128E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool postProcessingEnabled;

	[Token(Token = "0x400128F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int selectedLocale;

	[Token(Token = "0x4001290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool analyticsOn;

	[Token(Token = "0x4001291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool quest1PerformanceMode;

	[Token(Token = "0x60012E0")]
	[Address(RVA = "0xCD2D08", Offset = "0xCD2D08", VA = "0xCD2D08")]
	public ArcaxerPlayerSettings()
	{
	}
}
[Token(Token = "0x20003AB")]
public class SpellManager : MonoBehaviour
{
	[Token(Token = "0x20003AC")]
	public enum spellName
	{
		[Token(Token = "0x4001296")]
		MagicMissile,
		[Token(Token = "0x4001297")]
		Arcanado
	}

	[Token(Token = "0x4001292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject magicMissilePrefab;

	[Token(Token = "0x4001293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject fireBallPrefab;

	[Token(Token = "0x4001294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SpellManager instance;

	[Token(Token = "0x60012E1")]
	[Address(RVA = "0xCD2D30", Offset = "0xCD2D30", VA = "0xCD2D30")]
	private void Awake()
	{
	}

	[Token(Token = "0x60012E2")]
	[Address(RVA = "0xCD2D7C", Offset = "0xCD2D7C", VA = "0xCD2D7C")]
	private void Update()
	{
	}

	[Token(Token = "0x60012E3")]
	[Address(RVA = "0xCD2D80", Offset = "0xCD2D80", VA = "0xCD2D80")]
	public GameObject getSpellEffect(spellName sp)
	{
		return null;
	}

	[Token(Token = "0x60012E4")]
	[Address(RVA = "0xCD2E04", Offset = "0xCD2E04", VA = "0xCD2E04")]
	public GameObject getSpellMissile(spellName sp)
	{
		return null;
	}

	[Token(Token = "0x60012E5")]
	[Address(RVA = "0xCD2E88", Offset = "0xCD2E88", VA = "0xCD2E88")]
	public SpellManager()
	{
	}
}
[Token(Token = "0x20003AD")]
public class Arcanado : PlayerSpell
{
	[Token(Token = "0x20003AE")]
	[CompilerGenerated]
	private sealed class <propelSpell>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Arcanado <>4__this;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody <spellRB>5__2;

		[Token(Token = "0x170002B6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60012F1")]
			[Address(RVA = "0xCD3DA8", Offset = "0xCD3DA8", VA = "0xCD3DA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60012F3")]
			[Address(RVA = "0xCD3DF0", Offset = "0xCD3DF0", VA = "0xCD3DF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0xCD374C", Offset = "0xCD374C", VA = "0xCD374C")]
		[DebuggerHidden]
		public <propelSpell>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0xCD3BC8", Offset = "0xCD3BC8", VA = "0xCD3BC8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0xCD3BCC", Offset = "0xCD3BCC", VA = "0xCD3BCC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0xCD3DB0", Offset = "0xCD3DB0", VA = "0xCD3DB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public int damage;

	[Token(Token = "0x4001299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float speed;

	[Token(Token = "0x400129A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float curveMultiplier;

	[Token(Token = "0x400129B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private bool goingRight;

	[Token(Token = "0x400129C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
	public bool canUnLink;

	[Token(Token = "0x170002B5")]
	public override string spellToolTip
	{
		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xCD2E90", Offset = "0xCD2E90", VA = "0xCD2E90", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60012E7")]
	[Address(RVA = "0xCD3498", Offset = "0xCD3498", VA = "0xCD3498", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x60012E8")]
	[Address(RVA = "0xCD3720", Offset = "0xCD3720", VA = "0xCD3720")]
	private void Update()
	{
	}

	[Token(Token = "0x60012E9")]
	[Address(RVA = "0xCD36B8", Offset = "0xCD36B8", VA = "0xCD36B8")]
	[IteratorStateMachine(typeof(<propelSpell>d__9))]
	public IEnumerator propelSpell()
	{
		return null;
	}

	[Token(Token = "0x60012EA")]
	[Address(RVA = "0xCD3774", Offset = "0xCD3774", VA = "0xCD3774")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60012EB")]
	[Address(RVA = "0xCD38EC", Offset = "0xCD38EC", VA = "0xCD38EC")]
	private void collideWithEnemy(EnemyParent ep)
	{
	}

	[Token(Token = "0x60012EC")]
	[Address(RVA = "0xCD3AB8", Offset = "0xCD3AB8", VA = "0xCD3AB8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60012ED")]
	[Address(RVA = "0xCD3BA8", Offset = "0xCD3BA8", VA = "0xCD3BA8")]
	public Arcanado()
	{
	}
}
[Token(Token = "0x20003AF")]
public class ArcaneMissile : PlayerSpell
{
	[Token(Token = "0x20003B0")]
	[CompilerGenerated]
	private sealed class <propelSpell>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ArcaneMissile <>4__this;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody <spellRB>5__2;

		[Token(Token = "0x170002B9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60012FE")]
			[Address(RVA = "0xCD4C08", Offset = "0xCD4C08", VA = "0xCD4C08", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002BA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001300")]
			[Address(RVA = "0xCD4C50", Offset = "0xCD4C50", VA = "0xCD4C50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xCD45F4", Offset = "0xCD45F4", VA = "0xCD45F4")]
		[DebuggerHidden]
		public <propelSpell>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xCD4A5C", Offset = "0xCD4A5C", VA = "0xCD4A5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xCD4A60", Offset = "0xCD4A60", VA = "0xCD4A60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xCD4C10", Offset = "0xCD4C10", VA = "0xCD4C10", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40012A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float speed;

	[Token(Token = "0x40012A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject explosionGameobject;

	[Token(Token = "0x40012A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public int damage;

	[Token(Token = "0x40012A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public bool bigSpell;

	[Token(Token = "0x40012A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
	public bool alwaysLaunchWithMaxPower;

	[Token(Token = "0x170002B8")]
	public override string spellToolTip
	{
		[Token(Token = "0x60012F4")]
		[Address(RVA = "0xCD3DF8", Offset = "0xCD3DF8", VA = "0xCD3DF8", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60012F5")]
	[Address(RVA = "0xCD4388", Offset = "0xCD4388", VA = "0xCD4388")]
	private void Update()
	{
	}

	[Token(Token = "0x60012F6")]
	[Address(RVA = "0xCD43B4", Offset = "0xCD43B4", VA = "0xCD43B4", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x60012F7")]
	[Address(RVA = "0xCD458C", Offset = "0xCD458C", VA = "0xCD458C")]
	[IteratorStateMachine(typeof(<propelSpell>d__9))]
	public IEnumerator propelSpell()
	{
		return null;
	}

	[Token(Token = "0x60012F8")]
	[Address(RVA = "0xCD461C", Offset = "0xCD461C", VA = "0xCD461C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60012F9")]
	[Address(RVA = "0xCD4744", Offset = "0xCD4744", VA = "0xCD4744")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60012FA")]
	[Address(RVA = "0xCD4A4C", Offset = "0xCD4A4C", VA = "0xCD4A4C")]
	public ArcaneMissile()
	{
	}
}
[Token(Token = "0x20003B1")]
public class BlinkDefensive : PlayerSpell
{
	[Token(Token = "0x20003B2")]
	[CompilerGenerated]
	private sealed class <teleportTimer>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float <timer>5__2;

		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <maxTime>5__3;

		[Token(Token = "0x170002BC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001309")]
			[Address(RVA = "0xCD5650", Offset = "0xCD5650", VA = "0xCD5650", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002BD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600130B")]
			[Address(RVA = "0xCD5698", Offset = "0xCD5698", VA = "0xCD5698", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0xCD541C", Offset = "0xCD541C", VA = "0xCD541C")]
		[DebuggerHidden]
		public <teleportTimer>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0xCD5444", Offset = "0xCD5444", VA = "0xCD5444", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0xCD5448", Offset = "0xCD5448", VA = "0xCD5448", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0xCD5658", Offset = "0xCD5658", VA = "0xCD5658", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40012AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BlinkDefensive instance;

	[Token(Token = "0x170002BB")]
	public override string spellToolTip
	{
		[Token(Token = "0x6001301")]
		[Address(RVA = "0xCD4C58", Offset = "0xCD4C58", VA = "0xCD4C58", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001302")]
	[Address(RVA = "0xCD5088", Offset = "0xCD5088", VA = "0xCD5088", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x6001303")]
	[Address(RVA = "0xCD5300", Offset = "0xCD5300", VA = "0xCD5300")]
	[IteratorStateMachine(typeof(<teleportTimer>d__4))]
	private IEnumerator teleportTimer()
	{
		return null;
	}

	[Token(Token = "0x6001304")]
	[Address(RVA = "0xCD5360", Offset = "0xCD5360", VA = "0xCD5360")]
	private void teleportTimer2()
	{
	}

	[Token(Token = "0x6001305")]
	[Address(RVA = "0xCD5414", Offset = "0xCD5414", VA = "0xCD5414")]
	public BlinkDefensive()
	{
	}
}
[Token(Token = "0x20003B3")]
public class AttackBuff : BattleBuff
{
	[Token(Token = "0x600130C")]
	[Address(RVA = "0xCD56A0", Offset = "0xCD56A0", VA = "0xCD56A0", Slot = "4")]
	public override void applyBuff()
	{
	}

	[Token(Token = "0x600130D")]
	[Address(RVA = "0xCD571C", Offset = "0xCD571C", VA = "0xCD571C", Slot = "5")]
	public override void removeBuff()
	{
	}

	[Token(Token = "0x600130E")]
	[Address(RVA = "0xCD5798", Offset = "0xCD5798", VA = "0xCD5798")]
	public AttackBuff()
	{
	}
}
[Token(Token = "0x20003B4")]
public abstract class BattleBuff : MonoBehaviour
{
	[Token(Token = "0x40012AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string buffName;

	[Token(Token = "0x40012B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int turnDuration;

	[Token(Token = "0x40012B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public int turnsActive;

	[Token(Token = "0x40012B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int potency;

	[Token(Token = "0x40012B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Sprite icon;

	[Token(Token = "0x40012B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool debuff;

	[Token(Token = "0x40012B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool useOnCast;

	[Token(Token = "0x40012B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool useOnDamageSpell;

	[Token(Token = "0x40012B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
	public bool hasApplied;

	[Token(Token = "0x40012B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool hasRemoved;

	[Token(Token = "0x600130F")]
	public abstract void applyBuff();

	[Token(Token = "0x6001310")]
	public abstract void removeBuff();

	[Token(Token = "0x6001311")]
	[Address(RVA = "0xCD57F4", Offset = "0xCD57F4", VA = "0xCD57F4", Slot = "6")]
	public virtual void onceATurn()
	{
	}

	[Token(Token = "0x6001312")]
	[Address(RVA = "0xCD57F8", Offset = "0xCD57F8", VA = "0xCD57F8", Slot = "7")]
	public virtual void onCast()
	{
	}

	[Token(Token = "0x6001313")]
	[Address(RVA = "0xCD57FC", Offset = "0xCD57FC", VA = "0xCD57FC", Slot = "8")]
	public virtual void onDamageSpell()
	{
	}

	[Token(Token = "0x6001314")]
	[Address(RVA = "0xCD579C", Offset = "0xCD579C", VA = "0xCD579C")]
	protected BattleBuff()
	{
	}
}
[Token(Token = "0x20003B5")]
public class BuffSpell : PlayerSpell
{
	[Token(Token = "0x40012B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public BattleBuff battleBuff;

	[Token(Token = "0x40012BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public string buffNotification;

	[Token(Token = "0x40012BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GameObject castEffect;

	[Token(Token = "0x6001315")]
	[Address(RVA = "0xCD5800", Offset = "0xCD5800", VA = "0xCD5800", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x6001316")]
	[Address(RVA = "0xCD5D40", Offset = "0xCD5D40", VA = "0xCD5D40")]
	public BuffSpell()
	{
	}
}
[Token(Token = "0x20003B6")]
public class CritBuff : BattleBuff
{
	[Token(Token = "0x6001317")]
	[Address(RVA = "0xCD5E34", Offset = "0xCD5E34", VA = "0xCD5E34", Slot = "4")]
	public override void applyBuff()
	{
	}

	[Token(Token = "0x6001318")]
	[Address(RVA = "0xCD5EA0", Offset = "0xCD5EA0", VA = "0xCD5EA0", Slot = "5")]
	public override void removeBuff()
	{
	}

	[Token(Token = "0x6001319")]
	[Address(RVA = "0xCD5F0C", Offset = "0xCD5F0C", VA = "0xCD5F0C")]
	public CritBuff()
	{
	}
}
[Token(Token = "0x20003B7")]
public class GiantBuff : BattleBuff
{
	[Token(Token = "0x600131A")]
	[Address(RVA = "0xCD5F10", Offset = "0xCD5F10", VA = "0xCD5F10", Slot = "4")]
	public override void applyBuff()
	{
	}

	[Token(Token = "0x600131B")]
	[Address(RVA = "0xCD5FC0", Offset = "0xCD5FC0", VA = "0xCD5FC0", Slot = "5")]
	public override void removeBuff()
	{
	}

	[Token(Token = "0x600131C")]
	[Address(RVA = "0xCD6070", Offset = "0xCD6070", VA = "0xCD6070")]
	public GiantBuff()
	{
	}
}
[Token(Token = "0x20003B8")]
public class HealBuff : BattleBuff
{
	[Token(Token = "0x600131D")]
	[Address(RVA = "0xCD6074", Offset = "0xCD6074", VA = "0xCD6074", Slot = "4")]
	public override void applyBuff()
	{
	}

	[Token(Token = "0x600131E")]
	[Address(RVA = "0xCD6118", Offset = "0xCD6118", VA = "0xCD6118", Slot = "5")]
	public override void removeBuff()
	{
	}

	[Token(Token = "0x600131F")]
	[Address(RVA = "0xCD61BC", Offset = "0xCD61BC", VA = "0xCD61BC", Slot = "6")]
	public override void onceATurn()
	{
	}

	[Token(Token = "0x6001320")]
	[Address(RVA = "0xCD6294", Offset = "0xCD6294", VA = "0xCD6294")]
	public HealBuff()
	{
	}
}
[Token(Token = "0x20003B9")]
public class OneCritBuff : BattleBuff
{
	[Token(Token = "0x20003BA")]
	[CompilerGenerated]
	private sealed class <waitToDestroy>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OneCritBuff <>4__this;

		[Token(Token = "0x170002BE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001329")]
			[Address(RVA = "0xCD6520", Offset = "0xCD6520", VA = "0xCD6520", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002BF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600132B")]
			[Address(RVA = "0xCD6568", Offset = "0xCD6568", VA = "0xCD6568", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0xCD6430", Offset = "0xCD6430", VA = "0xCD6430")]
		[DebuggerHidden]
		public <waitToDestroy>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0xCD645C", Offset = "0xCD645C", VA = "0xCD645C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0xCD6460", Offset = "0xCD6460", VA = "0xCD6460", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0xCD6528", Offset = "0xCD6528", VA = "0xCD6528", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6001321")]
	[Address(RVA = "0xCD6298", Offset = "0xCD6298", VA = "0xCD6298", Slot = "4")]
	public override void applyBuff()
	{
	}

	[Token(Token = "0x6001322")]
	[Address(RVA = "0xCD6320", Offset = "0xCD6320", VA = "0xCD6320", Slot = "5")]
	public override void removeBuff()
	{
	}

	[Token(Token = "0x6001323")]
	[Address(RVA = "0xCD63A8", Offset = "0xCD63A8", VA = "0xCD63A8", Slot = "8")]
	public override void onDamageSpell()
	{
	}

	[Token(Token = "0x6001324")]
	[Address(RVA = "0xCD63C8", Offset = "0xCD63C8", VA = "0xCD63C8")]
	[IteratorStateMachine(typeof(<waitToDestroy>d__3))]
	private IEnumerator waitToDestroy()
	{
		return null;
	}

	[Token(Token = "0x6001325")]
	[Address(RVA = "0xCD6458", Offset = "0xCD6458", VA = "0xCD6458")]
	public OneCritBuff()
	{
	}
}
[Token(Token = "0x20003BB")]
public class PoisonDebuff : BattleBuff
{
	[Token(Token = "0x600132C")]
	[Address(RVA = "0xCD6570", Offset = "0xCD6570", VA = "0xCD6570", Slot = "4")]
	public override void applyBuff()
	{
	}

	[Token(Token = "0x600132D")]
	[Address(RVA = "0xCD6614", Offset = "0xCD6614", VA = "0xCD6614", Slot = "5")]
	public override void removeBuff()
	{
	}

	[Token(Token = "0x600132E")]
	[Address(RVA = "0xCD66B8", Offset = "0xCD66B8", VA = "0xCD66B8", Slot = "6")]
	public override void onceATurn()
	{
	}

	[Token(Token = "0x600132F")]
	[Address(RVA = "0xCD6780", Offset = "0xCD6780", VA = "0xCD6780")]
	public PoisonDebuff()
	{
	}
}
[Token(Token = "0x20003BC")]
public class ShieldBuff : BattleBuff
{
	[Token(Token = "0x6001330")]
	[Address(RVA = "0xCD6784", Offset = "0xCD6784", VA = "0xCD6784", Slot = "4")]
	public override void applyBuff()
	{
	}

	[Token(Token = "0x6001331")]
	[Address(RVA = "0xCD6800", Offset = "0xCD6800", VA = "0xCD6800", Slot = "5")]
	public override void removeBuff()
	{
	}

	[Token(Token = "0x6001332")]
	[Address(RVA = "0xCD687C", Offset = "0xCD687C", VA = "0xCD687C")]
	public ShieldBuff()
	{
	}
}
[Token(Token = "0x20003BD")]
public class ThornsBuff : BattleBuff
{
	[Token(Token = "0x40012BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float powerMod;

	[Token(Token = "0x6001333")]
	[Address(RVA = "0xCD6880", Offset = "0xCD6880", VA = "0xCD6880", Slot = "4")]
	public override void applyBuff()
	{
	}

	[Token(Token = "0x6001334")]
	[Address(RVA = "0xCD6884", Offset = "0xCD6884", VA = "0xCD6884", Slot = "5")]
	public override void removeBuff()
	{
	}

	[Token(Token = "0x6001335")]
	[Address(RVA = "0xCD6888", Offset = "0xCD6888", VA = "0xCD6888")]
	public void dealThornDamage(EnemyParent enemy, float damage)
	{
	}

	[Token(Token = "0x6001336")]
	[Address(RVA = "0xCD68CC", Offset = "0xCD68CC", VA = "0xCD68CC")]
	public ThornsBuff()
	{
	}
}
[Token(Token = "0x20003BE")]
public class ChaosBlast : PlayerSpell
{
	[Token(Token = "0x40012C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Fireball fireBall;

	[Token(Token = "0x40012C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public int damage;

	[Token(Token = "0x6001337")]
	[Address(RVA = "0xCD68D0", Offset = "0xCD68D0", VA = "0xCD68D0", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x6001338")]
	[Address(RVA = "0xCD6E34", Offset = "0xCD6E34", VA = "0xCD6E34")]
	public ChaosBlast()
	{
	}
}
[Token(Token = "0x20003BF")]
public class EarthBomb : PlayerSpell
{
	[Token(Token = "0x40012C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public int damage;

	[Token(Token = "0x40012C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float glitchDamageBonus;

	[Token(Token = "0x40012C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float speed;

	[Token(Token = "0x40012C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public EarthBombExplosion explosionGameobject;

	[Token(Token = "0x170002C0")]
	public override string spellToolTip
	{
		[Token(Token = "0x6001339")]
		[Address(RVA = "0xCD6E38", Offset = "0xCD6E38", VA = "0xCD6E38", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600133A")]
	[Address(RVA = "0xCD7618", Offset = "0xCD7618", VA = "0xCD7618", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x600133B")]
	[Address(RVA = "0xCD77CC", Offset = "0xCD77CC", VA = "0xCD77CC")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600133C")]
	[Address(RVA = "0xCD7A08", Offset = "0xCD7A08", VA = "0xCD7A08")]
	public EarthBomb()
	{
	}
}
[Token(Token = "0x20003C0")]
public class EarthBombExplosion : MonoBehaviour
{
	[Token(Token = "0x40012C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int damage;

	[Token(Token = "0x40012C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float adrenalineMod;

	[Token(Token = "0x40012C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float chanceToInflict;

	[Token(Token = "0x40012C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<EnemyParent> enemiesHit;

	[Token(Token = "0x600133D")]
	[Address(RVA = "0xCD7A14", Offset = "0xCD7A14", VA = "0xCD7A14")]
	private void Start()
	{
	}

	[Token(Token = "0x600133E")]
	[Address(RVA = "0xCD7A84", Offset = "0xCD7A84", VA = "0xCD7A84")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x600133F")]
	[Address(RVA = "0xCD7EB8", Offset = "0xCD7EB8", VA = "0xCD7EB8")]
	public EarthBombExplosion()
	{
	}
}
[Token(Token = "0x20003C1")]
public class Earthquake : PlayerSpell
{
	[Token(Token = "0x40012CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject particle;

	[Token(Token = "0x40012CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GlitchEffects glitch;

	[Token(Token = "0x40012CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public bool canHitFlying;

	[Token(Token = "0x40012CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
	public bool strikeRandomTarget;

	[Token(Token = "0x40012CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public float chanceToHurtSelf;

	[Token(Token = "0x40012CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public int damage;

	[Token(Token = "0x40012D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public bool breakLinks;

	[Token(Token = "0x40012D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFD")]
	public bool correctRotation;

	[Token(Token = "0x170002C1")]
	public override string spellToolTip
	{
		[Token(Token = "0x6001340")]
		[Address(RVA = "0xCD7F40", Offset = "0xCD7F40", VA = "0xCD7F40", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001341")]
	[Address(RVA = "0xCD8544", Offset = "0xCD8544", VA = "0xCD8544", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x6001342")]
	[Address(RVA = "0xCD8F60", Offset = "0xCD8F60", VA = "0xCD8F60")]
	public Earthquake()
	{
	}
}
[Token(Token = "0x20003C2")]
public class EraseTime : PlayerSpell
{
	[Token(Token = "0x6001343")]
	[Address(RVA = "0xCD8F6C", Offset = "0xCD8F6C", VA = "0xCD8F6C", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001344")]
	[Address(RVA = "0xCD8F84", Offset = "0xCD8F84", VA = "0xCD8F84", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x6001345")]
	[Address(RVA = "0xCD9054", Offset = "0xCD9054", VA = "0xCD9054")]
	public EraseTime()
	{
	}
}
[Token(Token = "0x20003C3")]
public class Fireball : PlayerSpell
{
	[Token(Token = "0x20003C4")]
	[CompilerGenerated]
	private sealed class <propelSpell>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Fireball <>4__this;

		[Token(Token = "0x170002C3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001356")]
			[Address(RVA = "0xCDC144", Offset = "0xCDC144", VA = "0xCDC144", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001358")]
			[Address(RVA = "0xCDC18C", Offset = "0xCDC18C", VA = "0xCDC18C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0xCDA264", Offset = "0xCDA264", VA = "0xCDA264")]
		[DebuggerHidden]
		public <propelSpell>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0xCDBFF0", Offset = "0xCDBFF0", VA = "0xCDBFF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0xCDBFF4", Offset = "0xCDBFF4", VA = "0xCDBFF4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0xCDC14C", Offset = "0xCDC14C", VA = "0xCDC14C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20003C5")]
	[CompilerGenerated]
	private sealed class <removeFromHitEnemies>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Fireball <>4__this;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public EnemyParent ep;

		[Token(Token = "0x170002C5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600135C")]
			[Address(RVA = "0xCDC288", Offset = "0xCDC288", VA = "0xCDC288", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600135E")]
			[Address(RVA = "0xCDC2D0", Offset = "0xCDC2D0", VA = "0xCDC2D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0xCDA300", Offset = "0xCDA300", VA = "0xCDA300")]
		[DebuggerHidden]
		public <removeFromHitEnemies>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xCDC194", Offset = "0xCDC194", VA = "0xCDC194", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xCDC198", Offset = "0xCDC198", VA = "0xCDC198", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0xCDC290", Offset = "0xCDC290", VA = "0xCDC290", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40012D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public int damage;

	[Token(Token = "0x40012D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float speed;

	[Token(Token = "0x40012D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject explosionGameobject;

	[Token(Token = "0x40012D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GlitchEffects glitchBurn;

	[Token(Token = "0x40012D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Rigidbody rb;

	[Token(Token = "0x40012D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public bool destroyOnCollision;

	[Token(Token = "0x40012D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
	public bool destroyOnCollisionWithEnemy;

	[Token(Token = "0x40012D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x102")]
	public bool destroyAfterTime;

	[Token(Token = "0x40012DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x103")]
	public bool alwaysLaunchWithMaxPower;

	[Token(Token = "0x40012DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public bool stopSeekOnCollision;

	[Token(Token = "0x40012DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public float timeToDestruct;

	[Token(Token = "0x40012DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private float destructTimer;

	[Token(Token = "0x40012DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private UnityEngine.Vector3 castVector;

	[Token(Token = "0x40012DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	public bool boomerangVelocity;

	[Token(Token = "0x40012E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private float stackingBoomeringVelcoty;

	[Token(Token = "0x40012E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public float glitchDamageBonus;

	[Token(Token = "0x40012E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public bool breakShields;

	[Token(Token = "0x40012E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
	public bool canUnLink;

	[Token(Token = "0x40012E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12A")]
	public bool detonateDebuffs;

	[Token(Token = "0x40012E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12B")]
	public bool increaseDamageStacksOnCollision;

	[Token(Token = "0x40012E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	public float backStabBonus;

	[Token(Token = "0x40012E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private UnityEngine.Vector3 velocityBeforePhysicsUpdate;

	[Token(Token = "0x40012E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	public bool canCopySpells;

	[Token(Token = "0x40012E9")]
	private const float copyChance = 0.1f;

	[Token(Token = "0x40012EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private List<EnemyParent> hitEnemies;

	[Token(Token = "0x170002C2")]
	public override string spellToolTip
	{
		[Token(Token = "0x6001346")]
		[Address(RVA = "0xCD9058", Offset = "0xCD9058", VA = "0xCD9058", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001347")]
	[Address(RVA = "0xCD966C", Offset = "0xCD966C", VA = "0xCD966C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001348")]
	[Address(RVA = "0xCD9998", Offset = "0xCD9998", VA = "0xCD9998")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6001349")]
	[Address(RVA = "0xCD989C", Offset = "0xCD989C", VA = "0xCD989C")]
	private void spawnImpact(UnityEngine.Vector3 position)
	{
	}

	[Token(Token = "0x600134A")]
	[Address(RVA = "0xCD9A1C", Offset = "0xCD9A1C", VA = "0xCD9A1C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600134B")]
	[Address(RVA = "0xCD9A48", Offset = "0xCD9A48", VA = "0xCD9A48", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x600134C")]
	[Address(RVA = "0xCDA1FC", Offset = "0xCDA1FC", VA = "0xCDA1FC")]
	[IteratorStateMachine(typeof(<propelSpell>d__32))]
	public IEnumerator propelSpell()
	{
		return null;
	}

	[Token(Token = "0x600134D")]
	[Address(RVA = "0xCDA28C", Offset = "0xCDA28C", VA = "0xCDA28C")]
	[IteratorStateMachine(typeof(<removeFromHitEnemies>d__33))]
	private IEnumerator removeFromHitEnemies(EnemyParent ep)
	{
		return null;
	}

	[Token(Token = "0x600134E")]
	[Address(RVA = "0xCDA328", Offset = "0xCDA328", VA = "0xCDA328")]
	private void collideWithEnemy(EnemyParent ep)
	{
	}

	[Token(Token = "0x600134F")]
	[Address(RVA = "0xCDB930", Offset = "0xCDB930", VA = "0xCDB930")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6001350")]
	[Address(RVA = "0xCDBC1C", Offset = "0xCDBC1C", VA = "0xCDBC1C")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x6001351")]
	[Address(RVA = "0xCDAEC4", Offset = "0xCDAEC4", VA = "0xCDAEC4")]
	private void copySpell(EnemyParent enemy)
	{
	}

	[Token(Token = "0x6001352")]
	[Address(RVA = "0xCDBF5C", Offset = "0xCDBF5C", VA = "0xCDBF5C")]
	public Fireball()
	{
	}
}
[Token(Token = "0x20003C6")]
public class Firewall : PlayerSpell
{
	[Token(Token = "0x40012F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float invincibleTime;

	[Token(Token = "0x600135F")]
	[Address(RVA = "0xCDC2D8", Offset = "0xCDC2D8", VA = "0xCDC2D8", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x6001360")]
	[Address(RVA = "0xCDC440", Offset = "0xCDC440", VA = "0xCDC440")]
	public Firewall()
	{
	}
}
[Token(Token = "0x20003C7")]
public class Flamethrower : PlayerSpell
{
	[Token(Token = "0x20003C8")]
	[CompilerGenerated]
	private sealed class <fireLoop>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Flamethrower <>4__this;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <flames>5__2;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <counter>5__3;

		[Token(Token = "0x170002C7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001368")]
			[Address(RVA = "0xCDC860", Offset = "0xCDC860", VA = "0xCDC860", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600136A")]
			[Address(RVA = "0xCDC8A8", Offset = "0xCDC8A8", VA = "0xCDC8A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xCDC5D0", Offset = "0xCDC5D0", VA = "0xCDC5D0")]
		[DebuggerHidden]
		public <fireLoop>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0xCDC604", Offset = "0xCDC604", VA = "0xCDC604", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xCDC608", Offset = "0xCDC608", VA = "0xCDC608", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0xCDC868", Offset = "0xCDC868", VA = "0xCDC868", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40012F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Fireball fireBall;

	[Token(Token = "0x40012F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public int damage;

	[Token(Token = "0x6001361")]
	[Address(RVA = "0xCDC44C", Offset = "0xCDC44C", VA = "0xCDC44C", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x6001362")]
	[Address(RVA = "0xCDC53C", Offset = "0xCDC53C", VA = "0xCDC53C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001363")]
	[Address(RVA = "0xCDC4D4", Offset = "0xCDC4D4", VA = "0xCDC4D4")]
	[IteratorStateMachine(typeof(<fireLoop>d__4))]
	private IEnumerator fireLoop()
	{
		return null;
	}

	[Token(Token = "0x6001364")]
	[Address(RVA = "0xCDC5F8", Offset = "0xCDC5F8", VA = "0xCDC5F8")]
	public Flamethrower()
	{
	}
}
[Token(Token = "0x20003C9")]
public class GiveAdrenaline : PlayerSpell
{
	[Token(Token = "0x40012FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public int adrenalineBonus;

	[Token(Token = "0x600136B")]
	[Address(RVA = "0xCDC8B0", Offset = "0xCDC8B0", VA = "0xCDC8B0", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x600136C")]
	[Address(RVA = "0xCDC9B0", Offset = "0xCDC9B0", VA = "0xCDC9B0")]
	public GiveAdrenaline()
	{
	}
}
[Token(Token = "0x20003CA")]
public class HaxNuke : PlayerSpell
{
	[Token(Token = "0x20003CB")]
	[CompilerGenerated]
	private sealed class <spellTimer>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HaxNuke <>4__this;

		[Token(Token = "0x170002C9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001374")]
			[Address(RVA = "0xCDCE04", Offset = "0xCDCE04", VA = "0xCDCE04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001376")]
			[Address(RVA = "0xCDCE4C", Offset = "0xCDCE4C", VA = "0xCDCE4C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0xCDCAF4", Offset = "0xCDCAF4", VA = "0xCDCAF4")]
		[DebuggerHidden]
		public <spellTimer>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0xCDCB20", Offset = "0xCDCB20", VA = "0xCDCB20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0xCDCB24", Offset = "0xCDCB24", VA = "0xCDCB24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0xCDCE0C", Offset = "0xCDCE0C", VA = "0xCDCE0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x600136D")]
	[Address(RVA = "0xCDC9BC", Offset = "0xCDC9BC", VA = "0xCDC9BC", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600136E")]
	[Address(RVA = "0xCDC9D4", Offset = "0xCDC9D4", VA = "0xCDC9D4", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x600136F")]
	[Address(RVA = "0xCDCA8C", Offset = "0xCDCA8C", VA = "0xCDCA8C")]
	[IteratorStateMachine(typeof(<spellTimer>d__2))]
	private IEnumerator spellTimer()
	{
		return null;
	}

	[Token(Token = "0x6001370")]
	[Address(RVA = "0xCDCB1C", Offset = "0xCDCB1C", VA = "0xCDCB1C")]
	public HaxNuke()
	{
	}
}
[Token(Token = "0x20003CC")]
public class HotSwap : PlayerSpell
{
	[Token(Token = "0x6001377")]
	[Address(RVA = "0xCDCE54", Offset = "0xCDCE54", VA = "0xCDCE54", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x6001378")]
	[Address(RVA = "0xCDCF60", Offset = "0xCDCF60", VA = "0xCDCF60")]
	public HotSwap()
	{
	}
}
[Token(Token = "0x20003CD")]
public class KillSelfSpell : PlayerSpell
{
	[Token(Token = "0x6001379")]
	[Address(RVA = "0xCDCF64", Offset = "0xCDCF64", VA = "0xCDCF64", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x600137A")]
	[Address(RVA = "0xCDCFC8", Offset = "0xCDCFC8", VA = "0xCDCFC8")]
	public KillSelfSpell()
	{
	}
}
[Token(Token = "0x20003CE")]
public class LightningBeamFade : MonoBehaviour
{
	[Token(Token = "0x40012FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Color originColor;

	[Token(Token = "0x40012FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color alphaColor;

	[Token(Token = "0x4001300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float timeToFade;

	[Token(Token = "0x600137B")]
	[Address(RVA = "0xCDCFCC", Offset = "0xCDCFCC", VA = "0xCDCFCC")]
	private void Start()
	{
	}

	[Token(Token = "0x600137C")]
	[Address(RVA = "0xCDD03C", Offset = "0xCDD03C", VA = "0xCDD03C")]
	private void Update()
	{
	}

	[Token(Token = "0x600137D")]
	[Address(RVA = "0xCDD040", Offset = "0xCDD040", VA = "0xCDD040")]
	public LightningBeamFade()
	{
	}
}
[Token(Token = "0x20003CF")]
public class LightningBolt : PlayerSpell
{
	[Token(Token = "0x4001301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public int damage;

	[Token(Token = "0x4001302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public bool isCharging;

	[Token(Token = "0x4001303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public int chargeLevel;

	[Token(Token = "0x4001304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public int chargeMax;

	[Token(Token = "0x4001305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public int chargeAccel;

	[Token(Token = "0x4001306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public LightningCharge lCharge;

	[Token(Token = "0x4001307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public LineRenderer LightningBeam;

	[Token(Token = "0x4001308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public GameObject hitEnemy;

	[Token(Token = "0x4001309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private bool perfectCharge;

	[Token(Token = "0x170002CB")]
	public override string spellToolTip
	{
		[Token(Token = "0x600137F")]
		[Address(RVA = "0xCDD0A8", Offset = "0xCDD0A8", VA = "0xCDD0A8", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600137E")]
	[Address(RVA = "0xCDD050", Offset = "0xCDD050", VA = "0xCDD050", Slot = "7")]
	public override void OnInstantiate()
	{
	}

	[Token(Token = "0x6001380")]
	[Address(RVA = "0xCDD5A0", Offset = "0xCDD5A0", VA = "0xCDD5A0", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x6001381")]
	[Address(RVA = "0xCDDB70", Offset = "0xCDDB70", VA = "0xCDDB70")]
	public void chargingBolt()
	{
	}

	[Token(Token = "0x6001382")]
	[Address(RVA = "0xCDD8C0", Offset = "0xCDD8C0", VA = "0xCDD8C0")]
	public GameObject SelectClosestTarget()
	{
		return null;
	}

	[Token(Token = "0x6001383")]
	[Address(RVA = "0xCDDB8C", Offset = "0xCDDB8C", VA = "0xCDDB8C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001384")]
	[Address(RVA = "0xCDDC94", Offset = "0xCDDC94", VA = "0xCDDC94")]
	public LightningBolt()
	{
	}
}
[Token(Token = "0x20003D0")]
public class LightningCharge : MonoBehaviour
{
	[Token(Token = "0x400130A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int chargeTime;

	[Token(Token = "0x6001385")]
	[Address(RVA = "0xCDDCA4", Offset = "0xCDDCA4", VA = "0xCDDCA4")]
	private void OnInstantiate()
	{
	}

	[Token(Token = "0x6001386")]
	[Address(RVA = "0xCDDCAC", Offset = "0xCDDCAC", VA = "0xCDDCAC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001387")]
	[Address(RVA = "0xCDDCBC", Offset = "0xCDDCBC", VA = "0xCDDCBC")]
	public LightningCharge()
	{
	}
}
[Token(Token = "0x20003D1")]
public abstract class PlayerSpell : MonoBehaviour
{
	[Token(Token = "0x20003D2")]
	public class DamageEvent : UnityEvent<int, bool>
	{
		[Token(Token = "0x6001396")]
		[Address(RVA = "0xCDE5C4", Offset = "0xCDE5C4", VA = "0xCDE5C4")]
		public DamageEvent()
		{
		}
	}

	[Token(Token = "0x20003D3")]
	public enum SpellType
	{
		[Token(Token = "0x400132D")]
		Damage,
		[Token(Token = "0x400132E")]
		Buff,
		[Token(Token = "0x400132F")]
		Consumable,
		[Token(Token = "0x4001330")]
		Summon,
		[Token(Token = "0x4001331")]
		Defensive
	}

	[Token(Token = "0x20003D4")]
	public enum SpellElement
	{
		[Token(Token = "0x4001333")]
		Normal,
		[Token(Token = "0x4001334")]
		Fire,
		[Token(Token = "0x4001335")]
		Frost,
		[Token(Token = "0x4001336")]
		Earth,
		[Token(Token = "0x4001337")]
		Air,
		[Token(Token = "0x4001338")]
		Light,
		[Token(Token = "0x4001339")]
		Shadow,
		[Token(Token = "0x400133A")]
		Poison,
		[Token(Token = "0x400133B")]
		Lightning
	}

	[Token(Token = "0x20003D6")]
	[CompilerGenerated]
	private sealed class <AimAssistProjectile>d__50 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject target;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject proj;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PlayerSpell <>4__this;

		[Token(Token = "0x170002D0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600139C")]
			[Address(RVA = "0xCDEA40", Offset = "0xCDEA40", VA = "0xCDEA40", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600139E")]
			[Address(RVA = "0xCDEA88", Offset = "0xCDEA88", VA = "0xCDEA88", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xCDE598", Offset = "0xCDE598", VA = "0xCDE598")]
		[DebuggerHidden]
		public <AimAssistProjectile>d__50(int <>1__state)
		{
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xCDE668", Offset = "0xCDE668", VA = "0xCDE668", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0xCDE66C", Offset = "0xCDE66C", VA = "0xCDE66C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0xCDEA48", Offset = "0xCDEA48", VA = "0xCDEA48", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400130B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Parent Assign Prefabs")]
	public BattleElementType elementType;

	[Token(Token = "0x400130C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject chargingEffect;

	[Token(Token = "0x400130D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject spellEffect;

	[Token(Token = "0x400130E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject castParticle;

	[Token(Token = "0x400130F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public float handSpeed;

	[Token(Token = "0x4001310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public UnityEngine.Vector3 curveVector;

	[Token(Token = "0x4001311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[HideInInspector]
	public Quaternion handRotation;

	[Token(Token = "0x4001312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject handObject;

	[Token(Token = "0x4001313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Parent Assign Stats")]
	public int apCost;

	[Token(Token = "0x4001314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float adrenalineMod;

	[Token(Token = "0x4001315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool autoSeek;

	[Token(Token = "0x4001316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int spellLevel;

	[Token(Token = "0x4001317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public int coolDown;

	[Token(Token = "0x4001318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int manaCost;

	[Token(Token = "0x4001319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int breakDamage;

	[Token(Token = "0x400131A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool startSpellOnCooldown;

	[Token(Token = "0x400131B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected float minTimeHitEnemy;

	[Token(Token = "0x400131C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	protected float timeSinceHit;

	[Token(Token = "0x400131D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float stackingDamageMultiplier;

	[Token(Token = "0x400131E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float stackingDamageIterator;

	[Token(Token = "0x400131F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float maxStackDamage;

	[Token(Token = "0x4001320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool applyStackingDamage;

	[Token(Token = "0x4001321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Header("Parent Assign Item Info")]
	public string spellName;

	[Token(Token = "0x4001322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public string spellDescription;

	[Token(Token = "0x4001323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Header("Unique Assigns")]
	public PlayerSpell preReqSpell;

	[Token(Token = "0x4001324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public DamageEvent onDamageEnemy;

	[Token(Token = "0x4001325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Sprite icon;

	[Token(Token = "0x4001326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public SpellElement spellElement;

	[Token(Token = "0x4001327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public SpellType spellType;

	[Token(Token = "0x4001328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public int chanceToInflict;

	[Token(Token = "0x4001329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[SerializeField]
	private float aimAssistAngleMax;

	[Token(Token = "0x400132A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private float aimAssistStrength;

	[Token(Token = "0x400132B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[HideInInspector]
	public UnityEngine.Vector3 startHandPos;

	[Token(Token = "0x170002CC")]
	public int modifiedCost
	{
		[Token(Token = "0x6001388")]
		[Address(RVA = "0xCD5AC8", Offset = "0xCD5AC8", VA = "0xCD5AC8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170002CD")]
	[HideInInspector]
	public string translatedName
	{
		[Token(Token = "0x6001389")]
		[Address(RVA = "0xCDDCC4", Offset = "0xCDDCC4", VA = "0xCDDCC4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002CE")]
	[HideInInspector]
	public string translatedDescription
	{
		[Token(Token = "0x600138A")]
		[Address(RVA = "0xCD744C", Offset = "0xCD744C", VA = "0xCD744C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170002CF")]
	public virtual string spellToolTip
	{
		[Token(Token = "0x6001390")]
		[Address(RVA = "0xCDE0EC", Offset = "0xCDE0EC", VA = "0xCDE0EC", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600138B")]
	[Address(RVA = "0xCD8F78", Offset = "0xCD8F78", VA = "0xCD8F78", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600138C")]
	[Address(RVA = "0xCDDE54", Offset = "0xCDDE54", VA = "0xCDDE54")]
	public void translateStrings()
	{
	}

	[Token(Token = "0x600138D")]
	[Address(RVA = "0xCDDEC8", Offset = "0xCDDEC8", VA = "0xCDDEC8")]
	public void translateAndSetString(string s, string textToChange, string table = "Hax")
	{
	}

	[Token(Token = "0x600138E")]
	[Address(RVA = "0xCD6AC8", Offset = "0xCD6AC8", VA = "0xCD6AC8")]
	protected int modifiyDamage(int dam)
	{
		return default(int);
	}

	[Token(Token = "0x600138F")]
	[Address(RVA = "0xCD8DDC", Offset = "0xCD8DDC", VA = "0xCD8DDC")]
	protected void preDamageApply()
	{
	}

	[Token(Token = "0x6001391")]
	public abstract void castSpell(bool freeCast = false);

	[Token(Token = "0x6001392")]
	[Address(RVA = "0xCDE51C", Offset = "0xCDE51C", VA = "0xCDE51C")]
	[IteratorStateMachine(typeof(<AimAssistProjectile>d__50))]
	private IEnumerator AimAssistProjectile(GameObject proj, GameObject target)
	{
		return null;
	}

	[Token(Token = "0x6001393")]
	[Address(RVA = "0xCD9CA8", Offset = "0xCD9CA8", VA = "0xCD9CA8")]
	public void SelectAimAssistTarget(GameObject proj, [Optional] GameObject altOrigin)
	{
	}

	[Token(Token = "0x6001394")]
	[Address(RVA = "0xCDE5C0", Offset = "0xCDE5C0", VA = "0xCDE5C0", Slot = "7")]
	public virtual void OnInstantiate()
	{
	}

	[Token(Token = "0x6001395")]
	[Address(RVA = "0xCD5D8C", Offset = "0xCD5D8C", VA = "0xCD5D8C")]
	protected PlayerSpell()
	{
	}
}
[Serializable]
[Token(Token = "0x20003D7")]
public class PlayerSpellData
{
	[Token(Token = "0x4001342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string spellName;

	[Token(Token = "0x4001343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private int _level;

	[Token(Token = "0x4001344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private int _exp;

	[Token(Token = "0x4001345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int oldExp;

	[Token(Token = "0x170002D2")]
	public int level
	{
		[Token(Token = "0x600139F")]
		[Address(RVA = "0xCDEA90", Offset = "0xCDEA90", VA = "0xCDEA90")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60013A0")]
		[Address(RVA = "0xCDEA98", Offset = "0xCDEA98", VA = "0xCDEA98")]
		set
		{
		}
	}

	[Token(Token = "0x170002D3")]
	public int exp
	{
		[Token(Token = "0x60013A1")]
		[Address(RVA = "0xCDEAA0", Offset = "0xCDEAA0", VA = "0xCDEAA0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60013A2")]
		[Address(RVA = "0xCDEAA8", Offset = "0xCDEAA8", VA = "0xCDEAA8")]
		set
		{
		}
	}

	[Token(Token = "0x170002D4")]
	public int expRequired
	{
		[Token(Token = "0x60013A3")]
		[Address(RVA = "0xCDEB78", Offset = "0xCDEB78", VA = "0xCDEB78")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60013A4")]
	[Address(RVA = "0xCDEBC8", Offset = "0xCDEBC8", VA = "0xCDEBC8")]
	private void levelUp()
	{
	}

	[Token(Token = "0x60013A5")]
	[Address(RVA = "0xCDBEF0", Offset = "0xCDBEF0", VA = "0xCDBEF0")]
	public PlayerSpellData(string name)
	{
	}
}
[Token(Token = "0x20003D8")]
public class Projectile : MonoBehaviour
{
	[Token(Token = "0x60013A6")]
	[Address(RVA = "0xCDEC44", Offset = "0xCDEC44", VA = "0xCDEC44")]
	private void Start()
	{
	}

	[Token(Token = "0x60013A7")]
	[Address(RVA = "0xCDEC48", Offset = "0xCDEC48", VA = "0xCDEC48")]
	private void Update()
	{
	}

	[Token(Token = "0x60013A8")]
	[Address(RVA = "0xCDEC4C", Offset = "0xCDEC4C", VA = "0xCDEC4C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60013A9")]
	[Address(RVA = "0xCDED0C", Offset = "0xCDED0C", VA = "0xCDED0C")]
	public Projectile()
	{
	}
}
[Token(Token = "0x20003D9")]
public class RepelBullets : PlayerSpell
{
	[Token(Token = "0x4001346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float reqDistanceToPlayer;

	[Token(Token = "0x170002D5")]
	public override string spellToolTip
	{
		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xCDED14", Offset = "0xCDED14", VA = "0xCDED14", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60013AB")]
	[Address(RVA = "0xCDF140", Offset = "0xCDF140", VA = "0xCDF140", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x60013AC")]
	[Address(RVA = "0xCDF3D0", Offset = "0xCDF3D0", VA = "0xCDF3D0", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60013AD")]
	[Address(RVA = "0xCDF3DC", Offset = "0xCDF3DC", VA = "0xCDF3DC")]
	public RepelBullets()
	{
	}
}
[Token(Token = "0x20003DA")]
public class RestoreSpell : PlayerSpell
{
	[Token(Token = "0x4001347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public string spellNotification;

	[Token(Token = "0x4001348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public float potency;

	[Token(Token = "0x4001349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GameObject auraParticle;

	[Token(Token = "0x400134A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public int healDebuffs;

	[Token(Token = "0x400134B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public BattleBuff buff;

	[Token(Token = "0x60013AE")]
	[Address(RVA = "0xCDF3E8", Offset = "0xCDF3E8", VA = "0xCDF3E8", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x60013AF")]
	[Address(RVA = "0xCDF8F8", Offset = "0xCDF8F8", VA = "0xCDF8F8")]
	public RestoreSpell()
	{
	}
}
[Token(Token = "0x20003DB")]
public class ReverseTime : PlayerSpell
{
	[Token(Token = "0x20003DC")]
	[CompilerGenerated]
	private sealed class <restartTimer>d__1 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x170002D6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60013B6")]
			[Address(RVA = "0xCDFBE8", Offset = "0xCDFBE8", VA = "0xCDFBE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013B8")]
			[Address(RVA = "0xCDFC30", Offset = "0xCDFC30", VA = "0xCDFC30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0xCDF9CC", Offset = "0xCDF9CC", VA = "0xCDF9CC")]
		[DebuggerHidden]
		public <restartTimer>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0xCDF9F8", Offset = "0xCDF9F8", VA = "0xCDF9F8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xCDF9FC", Offset = "0xCDF9FC", VA = "0xCDF9FC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0xCDFBF0", Offset = "0xCDFBF0", VA = "0xCDFBF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x60013B0")]
	[Address(RVA = "0xCDF94C", Offset = "0xCDF94C", VA = "0xCDF94C", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x60013B1")]
	[Address(RVA = "0xCDF96C", Offset = "0xCDF96C", VA = "0xCDF96C")]
	[IteratorStateMachine(typeof(<restartTimer>d__1))]
	private IEnumerator restartTimer()
	{
		return null;
	}

	[Token(Token = "0x60013B2")]
	[Address(RVA = "0xCDF9F4", Offset = "0xCDF9F4", VA = "0xCDF9F4")]
	public ReverseTime()
	{
	}
}
[Token(Token = "0x20003DD")]
public class RNGza : PlayerSpell
{
	[Token(Token = "0x20003DE")]
	[CompilerGenerated]
	private sealed class <waitToSetSpellPower>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerSpell randomSpell;

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RNGza <>4__this;

		[Token(Token = "0x170002D9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60013C0")]
			[Address(RVA = "0xCE0638", Offset = "0xCE0638", VA = "0xCE0638", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60013C2")]
			[Address(RVA = "0xCE0680", Offset = "0xCE0680", VA = "0xCE0680", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0xCE0558", Offset = "0xCE0558", VA = "0xCE0558")]
		[DebuggerHidden]
		public <waitToSetSpellPower>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0xCE0584", Offset = "0xCE0584", VA = "0xCE0584", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0xCE0588", Offset = "0xCE0588", VA = "0xCE0588", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0xCE0640", Offset = "0xCE0640", VA = "0xCE0640", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400134E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public bool mirrorCasted;

	[Token(Token = "0x170002D8")]
	public override string spellToolTip
	{
		[Token(Token = "0x60013B9")]
		[Address(RVA = "0xCDFC38", Offset = "0xCDFC38", VA = "0xCDFC38", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60013BA")]
	[Address(RVA = "0xCE00C8", Offset = "0xCE00C8", VA = "0xCE00C8", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x60013BB")]
	[Address(RVA = "0xCE04E4", Offset = "0xCE04E4", VA = "0xCE04E4")]
	[IteratorStateMachine(typeof(<waitToSetSpellPower>d__4))]
	private IEnumerator waitToSetSpellPower(PlayerSpell randomSpell)
	{
		return null;
	}

	[Token(Token = "0x60013BC")]
	[Address(RVA = "0xCE0580", Offset = "0xCE0580", VA = "0xCE0580")]
	public RNGza()
	{
	}
}
[Token(Token = "0x20003DF")]
[CreateAssetMenu(menuName = "Scriptable Spell", order = 999)]
public class ScriptableSpell : ScriptableObject
{
	[Token(Token = "0x4001353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PlayerSpell playerSpell;

	[Token(Token = "0x60013C3")]
	[Address(RVA = "0xCE0688", Offset = "0xCE0688", VA = "0xCE0688")]
	public ScriptableSpell()
	{
	}
}
[Token(Token = "0x20003E0")]
public class GlitchBlue : GlitchEffects
{
	[Token(Token = "0x4001354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Color color;

	[Token(Token = "0x60013C4")]
	[Address(RVA = "0xCE0690", Offset = "0xCE0690", VA = "0xCE0690", Slot = "4")]
	public override void applyGlitch()
	{
	}

	[Token(Token = "0x60013C5")]
	[Address(RVA = "0xCE0740", Offset = "0xCE0740", VA = "0xCE0740", Slot = "7")]
	public override void doEffect()
	{
	}

	[Token(Token = "0x60013C6")]
	[Address(RVA = "0xCE0744", Offset = "0xCE0744", VA = "0xCE0744", Slot = "5")]
	public override void removeGlitch()
	{
	}

	[Token(Token = "0x60013C7")]
	[Address(RVA = "0xCE0808", Offset = "0xCE0808", VA = "0xCE0808")]
	public GlitchBlue()
	{
	}
}
[Token(Token = "0x20003E1")]
public class GlitchBreach : GlitchEffects
{
	[Token(Token = "0x60013C8")]
	[Address(RVA = "0xCE0864", Offset = "0xCE0864", VA = "0xCE0864", Slot = "4")]
	public override void applyGlitch()
	{
	}

	[Token(Token = "0x60013C9")]
	[Address(RVA = "0xCE0868", Offset = "0xCE0868", VA = "0xCE0868", Slot = "7")]
	public override void doEffect()
	{
	}

	[Token(Token = "0x60013CA")]
	[Address(RVA = "0xCE086C", Offset = "0xCE086C", VA = "0xCE086C", Slot = "5")]
	public override void removeGlitch()
	{
	}

	[Token(Token = "0x60013CB")]
	[Address(RVA = "0xCE0870", Offset = "0xCE0870", VA = "0xCE0870", Slot = "6")]
	public override int onDamagedEffect(bool isPhysical, int damage)
	{
		return default(int);
	}

	[Token(Token = "0x60013CC")]
	[Address(RVA = "0xCE087C", Offset = "0xCE087C", VA = "0xCE087C")]
	public GlitchBreach()
	{
	}
}
[Token(Token = "0x20003E2")]
public class GlitchBurn : GlitchEffects
{
	[Token(Token = "0x4001355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool damagePercent;

	[Token(Token = "0x60013CD")]
	[Address(RVA = "0xCE0880", Offset = "0xCE0880", VA = "0xCE0880", Slot = "4")]
	public override void applyGlitch()
	{
	}

	[Token(Token = "0x60013CE")]
	[Address(RVA = "0xCE0898", Offset = "0xCE0898", VA = "0xCE0898", Slot = "5")]
	public override void removeGlitch()
	{
	}

	[Token(Token = "0x60013CF")]
	[Address(RVA = "0xCE089C", Offset = "0xCE089C", VA = "0xCE089C", Slot = "7")]
	public override void doEffect()
	{
	}

	[Token(Token = "0x60013D0")]
	[Address(RVA = "0xCE0948", Offset = "0xCE0948", VA = "0xCE0948")]
	public GlitchBurn()
	{
	}
}
[Token(Token = "0x20003E3")]
public class GlitchDestabalize : GlitchEffects
{
	[Token(Token = "0x4001356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject explosionEffect;

	[Token(Token = "0x60013D1")]
	[Address(RVA = "0xCE0954", Offset = "0xCE0954", VA = "0xCE0954", Slot = "4")]
	public override void applyGlitch()
	{
	}

	[Token(Token = "0x60013D2")]
	[Address(RVA = "0xCE0964", Offset = "0xCE0964", VA = "0xCE0964", Slot = "5")]
	public override void removeGlitch()
	{
	}

	[Token(Token = "0x60013D3")]
	[Address(RVA = "0xCE0968", Offset = "0xCE0968", VA = "0xCE0968", Slot = "7")]
	public override void doEffect()
	{
	}

	[Token(Token = "0x60013D4")]
	[Address(RVA = "0xCE0B50", Offset = "0xCE0B50", VA = "0xCE0B50")]
	public GlitchDestabalize()
	{
	}
}
[Token(Token = "0x20003E4")]
public abstract class GlitchEffects : MonoBehaviour
{
	[Token(Token = "0x20003E5")]
	public enum GlitchType
	{
		[Token(Token = "0x400135F")]
		onceATurn,
		[Token(Token = "0x4001360")]
		onApply,
		[Token(Token = "0x4001361")]
		onDeath,
		[Token(Token = "0x4001362")]
		onDamaged,
		[Token(Token = "0x4001363")]
		stun
	}

	[Token(Token = "0x4001357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string effectName;

	[Token(Token = "0x4001358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Sprite icon;

	[Token(Token = "0x4001359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int turnDuration;

	[Token(Token = "0x400135A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[HideInInspector]
	public int turnsActive;

	[Token(Token = "0x400135B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int potency;

	[Token(Token = "0x400135C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public EnemyParent enemyParent;

	[Token(Token = "0x400135D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GlitchType glitchType;

	[Token(Token = "0x170002DB")]
	public string translatedName
	{
		[Token(Token = "0x60013D5")]
		[Address(RVA = "0xCE0B54", Offset = "0xCE0B54", VA = "0xCE0B54")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60013D6")]
	public abstract void applyGlitch();

	[Token(Token = "0x60013D7")]
	public abstract void removeGlitch();

	[Token(Token = "0x60013D8")]
	[Address(RVA = "0xCE0BD4", Offset = "0xCE0BD4", VA = "0xCE0BD4", Slot = "6")]
	public virtual int onDamagedEffect(bool isPhysical, int damage)
	{
		return default(int);
	}

	[Token(Token = "0x60013D9")]
	public abstract void doEffect();

	[Token(Token = "0x60013DA")]
	[Address(RVA = "0xCE080C", Offset = "0xCE080C", VA = "0xCE080C")]
	protected GlitchEffects()
	{
	}
}
[Token(Token = "0x20003E6")]
public class GlitchEthereal : GlitchEffects
{
	[Token(Token = "0x60013DB")]
	[Address(RVA = "0xCE0BDC", Offset = "0xCE0BDC", VA = "0xCE0BDC", Slot = "4")]
	public override void applyGlitch()
	{
	}

	[Token(Token = "0x60013DC")]
	[Address(RVA = "0xCE0BF8", Offset = "0xCE0BF8", VA = "0xCE0BF8", Slot = "7")]
	public override void doEffect()
	{
	}

	[Token(Token = "0x60013DD")]
	[Address(RVA = "0xCE0BFC", Offset = "0xCE0BFC", VA = "0xCE0BFC", Slot = "5")]
	public override void removeGlitch()
	{
	}

	[Token(Token = "0x60013DE")]
	[Address(RVA = "0xCE0C1C", Offset = "0xCE0C1C", VA = "0xCE0C1C")]
	public GlitchEthereal()
	{
	}
}
[Token(Token = "0x20003E7")]
public class GlitchFreeze : GlitchEffects
{
	[Token(Token = "0x60013DF")]
	[Address(RVA = "0xCE0C20", Offset = "0xCE0C20", VA = "0xCE0C20", Slot = "4")]
	public override void applyGlitch()
	{
	}

	[Token(Token = "0x60013E0")]
	[Address(RVA = "0xCE0C38", Offset = "0xCE0C38", VA = "0xCE0C38", Slot = "5")]
	public override void removeGlitch()
	{
	}

	[Token(Token = "0x60013E1")]
	[Address(RVA = "0xCE0C74", Offset = "0xCE0C74", VA = "0xCE0C74", Slot = "7")]
	public override void doEffect()
	{
	}

	[Token(Token = "0x60013E2")]
	[Address(RVA = "0xCE0CB0", Offset = "0xCE0CB0", VA = "0xCE0CB0")]
	public GlitchFreeze()
	{
	}
}
[Token(Token = "0x20003E8")]
public class GlitchHealSpring : GlitchEffects
{
	[Token(Token = "0x60013E3")]
	[Address(RVA = "0xCE0CB4", Offset = "0xCE0CB4", VA = "0xCE0CB4", Slot = "4")]
	public override void applyGlitch()
	{
	}

	[Token(Token = "0x60013E4")]
	[Address(RVA = "0xCE0CB8", Offset = "0xCE0CB8", VA = "0xCE0CB8", Slot = "5")]
	public override void removeGlitch()
	{
	}

	[Token(Token = "0x60013E5")]
	[Address(RVA = "0xCE0CBC", Offset = "0xCE0CBC", VA = "0xCE0CBC", Slot = "7")]
	public override void doEffect()
	{
	}

	[Token(Token = "0x60013E6")]
	[Address(RVA = "0xCE0D58", Offset = "0xCE0D58", VA = "0xCE0D58")]
	public GlitchHealSpring()
	{
	}
}
[Token(Token = "0x20003E9")]
public class GlitchMarked : GlitchEffects
{
	[Token(Token = "0x60013E7")]
	[Address(RVA = "0xCE0D5C", Offset = "0xCE0D5C", VA = "0xCE0D5C", Slot = "4")]
	public override void applyGlitch()
	{
	}

	[Token(Token = "0x60013E8")]
	[Address(RVA = "0xCE0D60", Offset = "0xCE0D60", VA = "0xCE0D60", Slot = "7")]
	public override void doEffect()
	{
	}

	[Token(Token = "0x60013E9")]
	[Address(RVA = "0xCE0D64", Offset = "0xCE0D64", VA = "0xCE0D64", Slot = "5")]
	public override void removeGlitch()
	{
	}

	[Token(Token = "0x60013EA")]
	[Address(RVA = "0xCE0D68", Offset = "0xCE0D68", VA = "0xCE0D68", Slot = "6")]
	public override int onDamagedEffect(bool isPhysical, int damage)
	{
		return default(int);
	}

	[Token(Token = "0x60013EB")]
	[Address(RVA = "0xCE0E0C", Offset = "0xCE0E0C", VA = "0xCE0E0C")]
	public GlitchMarked()
	{
	}
}
[Token(Token = "0x20003EA")]
public class GlitchReanimate : GlitchEffects
{
	[Token(Token = "0x4001364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PlayerSpell summonCaster;

	[Token(Token = "0x60013EC")]
	[Address(RVA = "0xCE0E10", Offset = "0xCE0E10", VA = "0xCE0E10", Slot = "4")]
	public override void applyGlitch()
	{
	}

	[Token(Token = "0x60013ED")]
	[Address(RVA = "0xCE0E20", Offset = "0xCE0E20", VA = "0xCE0E20", Slot = "7")]
	public override void doEffect()
	{
	}

	[Token(Token = "0x60013EE")]
	[Address(RVA = "0xCE0E44", Offset = "0xCE0E44", VA = "0xCE0E44", Slot = "5")]
	public override void removeGlitch()
	{
	}

	[Token(Token = "0x60013EF")]
	[Address(RVA = "0xCE0E48", Offset = "0xCE0E48", VA = "0xCE0E48")]
	public GlitchReanimate()
	{
	}
}
[Token(Token = "0x20003EB")]
public class GlitchStrengthen : GlitchEffects
{
	[Token(Token = "0x60013F0")]
	[Address(RVA = "0xCE0E4C", Offset = "0xCE0E4C", VA = "0xCE0E4C", Slot = "4")]
	public override void applyGlitch()
	{
	}

	[Token(Token = "0x60013F1")]
	[Address(RVA = "0xCE0E54", Offset = "0xCE0E54", VA = "0xCE0E54", Slot = "5")]
	public override void removeGlitch()
	{
	}

	[Token(Token = "0x60013F2")]
	[Address(RVA = "0xCE0EA4", Offset = "0xCE0EA4", VA = "0xCE0EA4", Slot = "7")]
	public override void doEffect()
	{
	}

	[Token(Token = "0x60013F3")]
	[Address(RVA = "0xCE0EF4", Offset = "0xCE0EF4", VA = "0xCE0EF4")]
	public GlitchStrengthen()
	{
	}
}
[Token(Token = "0x20003EC")]
public class GlitchStun : GlitchEffects
{
	[Token(Token = "0x60013F4")]
	[Address(RVA = "0xCE0EF8", Offset = "0xCE0EF8", VA = "0xCE0EF8", Slot = "4")]
	public override void applyGlitch()
	{
	}

	[Token(Token = "0x60013F5")]
	[Address(RVA = "0xCE0F10", Offset = "0xCE0F10", VA = "0xCE0F10", Slot = "7")]
	public override void doEffect()
	{
	}

	[Token(Token = "0x60013F6")]
	[Address(RVA = "0xCE0F14", Offset = "0xCE0F14", VA = "0xCE0F14", Slot = "5")]
	public override void removeGlitch()
	{
	}

	[Token(Token = "0x60013F7")]
	[Address(RVA = "0xCE0F18", Offset = "0xCE0F18", VA = "0xCE0F18")]
	private void Start()
	{
	}

	[Token(Token = "0x60013F8")]
	[Address(RVA = "0xCE0F1C", Offset = "0xCE0F1C", VA = "0xCE0F1C")]
	private void Update()
	{
	}

	[Token(Token = "0x60013F9")]
	[Address(RVA = "0xCE0F20", Offset = "0xCE0F20", VA = "0xCE0F20")]
	public GlitchStun()
	{
	}
}
[Token(Token = "0x20003ED")]
public class GlitchThorns : GlitchEffects
{
	[Token(Token = "0x60013FA")]
	[Address(RVA = "0xCE0F24", Offset = "0xCE0F24", VA = "0xCE0F24", Slot = "4")]
	public override void applyGlitch()
	{
	}

	[Token(Token = "0x60013FB")]
	[Address(RVA = "0xCE0F28", Offset = "0xCE0F28", VA = "0xCE0F28", Slot = "7")]
	public override void doEffect()
	{
	}

	[Token(Token = "0x60013FC")]
	[Address(RVA = "0xCE0F2C", Offset = "0xCE0F2C", VA = "0xCE0F2C", Slot = "5")]
	public override void removeGlitch()
	{
	}

	[Token(Token = "0x60013FD")]
	[Address(RVA = "0xCE0F30", Offset = "0xCE0F30", VA = "0xCE0F30", Slot = "6")]
	public override int onDamagedEffect(bool isPhysical, int damage)
	{
		return default(int);
	}

	[Token(Token = "0x60013FE")]
	[Address(RVA = "0xCE0FB4", Offset = "0xCE0FB4", VA = "0xCE0FB4")]
	public GlitchThorns()
	{
	}
}
[Token(Token = "0x20003EE")]
public class GlitchWeaken : GlitchEffects
{
	[Token(Token = "0x60013FF")]
	[Address(RVA = "0xCE0FB8", Offset = "0xCE0FB8", VA = "0xCE0FB8", Slot = "4")]
	public override void applyGlitch()
	{
	}

	[Token(Token = "0x6001400")]
	[Address(RVA = "0xCE0FD0", Offset = "0xCE0FD0", VA = "0xCE0FD0", Slot = "5")]
	public override void removeGlitch()
	{
	}

	[Token(Token = "0x6001401")]
	[Address(RVA = "0xCE1008", Offset = "0xCE1008", VA = "0xCE1008", Slot = "7")]
	public override void doEffect()
	{
	}

	[Token(Token = "0x6001402")]
	[Address(RVA = "0xCE1040", Offset = "0xCE1040", VA = "0xCE1040")]
	public GlitchWeaken()
	{
	}
}
[Token(Token = "0x20003EF")]
public class StopTime : PlayerSpell
{
	[Token(Token = "0x4001365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private float slowTimeScale;

	[Token(Token = "0x4001366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float originalFixedTimeScale;

	[Token(Token = "0x4001367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public AudioClip timeResumeClip;

	[Token(Token = "0x4001368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public AudioSource source;

	[Token(Token = "0x4001369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float reqTimeToResume;

	[Token(Token = "0x400136A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private float timer;

	[Token(Token = "0x170002DC")]
	public override string spellToolTip
	{
		[Token(Token = "0x6001403")]
		[Address(RVA = "0xCE1044", Offset = "0xCE1044", VA = "0xCE1044", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001404")]
	[Address(RVA = "0xCE1470", Offset = "0xCE1470", VA = "0xCE1470", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x6001405")]
	[Address(RVA = "0xCE154C", Offset = "0xCE154C", VA = "0xCE154C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001406")]
	[Address(RVA = "0xCE1668", Offset = "0xCE1668", VA = "0xCE1668")]
	public StopTime()
	{
	}
}
[Token(Token = "0x20003F0")]
public class SummonBryce : PlayerSpell
{
	[Token(Token = "0x400136B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public BattleAlly ally;

	[Token(Token = "0x400136C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject spawnParticle;

	[Token(Token = "0x6001407")]
	[Address(RVA = "0xCE1680", Offset = "0xCE1680", VA = "0xCE1680", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x6001408")]
	[Address(RVA = "0xCE1D64", Offset = "0xCE1D64", VA = "0xCE1D64")]
	public SummonBryce()
	{
	}
}
[Token(Token = "0x20003F1")]
public class SwapWeaponSpell : PlayerSpell
{
	[Token(Token = "0x400136D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Weapon weapon;

	[Token(Token = "0x6001409")]
	[Address(RVA = "0xCE1D68", Offset = "0xCE1D68", VA = "0xCE1D68", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x600140A")]
	[Address(RVA = "0xCE2038", Offset = "0xCE2038", VA = "0xCE2038")]
	public SwapWeaponSpell()
	{
	}
}
[Token(Token = "0x20003F2")]
public class TransformGiantSpell : PlayerSpell
{
	[Token(Token = "0x400136E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public int potency;

	[Token(Token = "0x600140B")]
	[Address(RVA = "0xCE203C", Offset = "0xCE203C", VA = "0xCE203C", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x600140C")]
	[Address(RVA = "0xCE2098", Offset = "0xCE2098", VA = "0xCE2098")]
	public TransformGiantSpell()
	{
	}
}
[Token(Token = "0x20003F3")]
public class TriBeam : PlayerSpell
{
	[Token(Token = "0x20003F4")]
	[CompilerGenerated]
	private sealed class <beamLife>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TriBeam <>4__this;

		[Token(Token = "0x170002DD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001415")]
			[Address(RVA = "0xCE2524", Offset = "0xCE2524", VA = "0xCE2524", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001417")]
			[Address(RVA = "0xCE256C", Offset = "0xCE256C", VA = "0xCE256C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0xCE22C4", Offset = "0xCE22C4", VA = "0xCE22C4")]
		[DebuggerHidden]
		public <beamLife>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0xCE244C", Offset = "0xCE244C", VA = "0xCE244C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001414")]
		[Address(RVA = "0xCE2450", Offset = "0xCE2450", VA = "0xCE2450", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0xCE252C", Offset = "0xCE252C", VA = "0xCE252C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400136F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public int damage;

	[Token(Token = "0x4001370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject beamObject;

	[Token(Token = "0x4001371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GameObject[] beams;

	[Token(Token = "0x4001372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public GameObject[] startEffects;

	[Token(Token = "0x4001373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public GameObject[] impactEffects;

	[Token(Token = "0x4001374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public int currentEffect;

	[Token(Token = "0x4001375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public TriBeamCharge.ElementState elementState;

	[Token(Token = "0x600140D")]
	[Address(RVA = "0xCE20A4", Offset = "0xCE20A4", VA = "0xCE20A4", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x600140E")]
	[Address(RVA = "0xCE225C", Offset = "0xCE225C", VA = "0xCE225C")]
	[IteratorStateMachine(typeof(<beamLife>d__8))]
	public IEnumerator beamLife()
	{
		return null;
	}

	[Token(Token = "0x600140F")]
	[Address(RVA = "0xCE22EC", Offset = "0xCE22EC", VA = "0xCE22EC")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6001410")]
	[Address(RVA = "0xCE23E0", Offset = "0xCE23E0", VA = "0xCE23E0", Slot = "7")]
	public override void OnInstantiate()
	{
	}

	[Token(Token = "0x6001411")]
	[Address(RVA = "0xCE2440", Offset = "0xCE2440", VA = "0xCE2440")]
	public TriBeam()
	{
	}
}
[Token(Token = "0x20003F5")]
public class TriBeamCharge : MonoBehaviour
{
	[Token(Token = "0x20003F6")]
	public enum ElementState
	{
		[Token(Token = "0x400137D")]
		fire,
		[Token(Token = "0x400137E")]
		ice,
		[Token(Token = "0x400137F")]
		electric
	}

	[Token(Token = "0x20003F7")]
	[CompilerGenerated]
	private sealed class <TriBeamCycle>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TriBeamCharge <>4__this;

		[Token(Token = "0x170002DF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600141F")]
			[Address(RVA = "0xCE277C", Offset = "0xCE277C", VA = "0xCE277C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001421")]
			[Address(RVA = "0xCE27C4", Offset = "0xCE27C4", VA = "0xCE27C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0xCE25FC", Offset = "0xCE25FC", VA = "0xCE25FC")]
		[DebuggerHidden]
		public <TriBeamCycle>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0xCE2630", Offset = "0xCE2630", VA = "0xCE2630", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0xCE2634", Offset = "0xCE2634", VA = "0xCE2634", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0xCE2784", Offset = "0xCE2784", VA = "0xCE2784", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] chargeEffects;

	[Token(Token = "0x400137A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int currentEffect;

	[Token(Token = "0x400137B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public ElementState elementState;

	[Token(Token = "0x6001418")]
	[Address(RVA = "0xCE2574", Offset = "0xCE2574", VA = "0xCE2574")]
	private void Start()
	{
	}

	[Token(Token = "0x6001419")]
	[Address(RVA = "0xCE2594", Offset = "0xCE2594", VA = "0xCE2594")]
	[IteratorStateMachine(typeof(<TriBeamCycle>d__5))]
	private IEnumerator TriBeamCycle()
	{
		return null;
	}

	[Token(Token = "0x600141A")]
	[Address(RVA = "0xCE2624", Offset = "0xCE2624", VA = "0xCE2624")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600141B")]
	[Address(RVA = "0xCE2628", Offset = "0xCE2628", VA = "0xCE2628")]
	public TriBeamCharge()
	{
	}
}
[Token(Token = "0x20003F8")]
public class TripleBolt : PlayerSpell
{
	[Token(Token = "0x20003F9")]
	[CompilerGenerated]
	private sealed class <propelSpell>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TripleBolt <>4__this;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody <spellRB>5__2;

		[Token(Token = "0x170002E2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600142F")]
			[Address(RVA = "0xCE427C", Offset = "0xCE427C", VA = "0xCE427C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001431")]
			[Address(RVA = "0xCE42C4", Offset = "0xCE42C4", VA = "0xCE42C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0xCE3620", Offset = "0xCE3620", VA = "0xCE3620")]
		[DebuggerHidden]
		public <propelSpell>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0xCE40F0", Offset = "0xCE40F0", VA = "0xCE40F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0xCE40F4", Offset = "0xCE40F4", VA = "0xCE40F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0xCE4284", Offset = "0xCE4284", VA = "0xCE4284", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float speed;

	[Token(Token = "0x4001384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject explosionGameobject;

	[Token(Token = "0x4001385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public int damage;

	[Token(Token = "0x4001386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public bool isFirstBolt;

	[Token(Token = "0x4001387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public GlitchEffects glitchBurn;

	[Token(Token = "0x4001388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public bool destroyOnCollision;

	[Token(Token = "0x4001389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
	public bool destroyOnCollisionWithEnemy;

	[Token(Token = "0x400138A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x102")]
	public bool destroyAfterTime;

	[Token(Token = "0x400138B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public float glitchDamageBonus;

	[Token(Token = "0x400138C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public bool canUnLink;

	[Token(Token = "0x400138D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
	public bool randomizeLaunchAngle;

	[Token(Token = "0x400138E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public float launchPower;

	[Token(Token = "0x400138F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public float launchAngle;

	[Token(Token = "0x4001390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public bool quadShot;

	[Token(Token = "0x4001391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x115")]
	public bool useWeaponDamage;

	[Token(Token = "0x4001392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x116")]
	public bool seekForwardOnly;

	[Token(Token = "0x4001393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public TripleBolt OriginalBolt;

	[Token(Token = "0x170002E1")]
	public override string spellToolTip
	{
		[Token(Token = "0x6001422")]
		[Address(RVA = "0xCE27CC", Offset = "0xCE27CC", VA = "0xCE27CC", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001423")]
	[Address(RVA = "0xCE2DD0", Offset = "0xCE2DD0", VA = "0xCE2DD0", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001424")]
	[Address(RVA = "0xCE2E5C", Offset = "0xCE2E5C", VA = "0xCE2E5C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001425")]
	[Address(RVA = "0xCE2E88", Offset = "0xCE2E88", VA = "0xCE2E88", Slot = "6")]
	public override void castSpell(bool freeCast = false)
	{
	}

	[Token(Token = "0x6001426")]
	[Address(RVA = "0xCE35B8", Offset = "0xCE35B8", VA = "0xCE35B8")]
	[IteratorStateMachine(typeof(<propelSpell>d__22))]
	public IEnumerator propelSpell()
	{
		return null;
	}

	[Token(Token = "0x6001427")]
	[Address(RVA = "0xCE3648", Offset = "0xCE3648", VA = "0xCE3648")]
	private void spawnImpact(UnityEngine.Vector3 position)
	{
	}

	[Token(Token = "0x6001428")]
	[Address(RVA = "0xCE3744", Offset = "0xCE3744", VA = "0xCE3744")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6001429")]
	[Address(RVA = "0xCE3EE4", Offset = "0xCE3EE4", VA = "0xCE3EE4")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x600142A")]
	[Address(RVA = "0xCE3900", Offset = "0xCE3900", VA = "0xCE3900")]
	private void collideWithEnemy(EnemyParent ep)
	{
	}

	[Token(Token = "0x600142B")]
	[Address(RVA = "0xCE40CC", Offset = "0xCE40CC", VA = "0xCE40CC")]
	public TripleBolt()
	{
	}
}
[Token(Token = "0x20003FA")]
public class InteractBox : MonoBehaviour
{
	[Token(Token = "0x4001398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ThirdPersonController tpc;

	[Token(Token = "0x6001432")]
	[Address(RVA = "0xCE42CC", Offset = "0xCE42CC", VA = "0xCE42CC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001433")]
	[Address(RVA = "0xCE4420", Offset = "0xCE4420", VA = "0xCE4420")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6001434")]
	[Address(RVA = "0xCE4530", Offset = "0xCE4530", VA = "0xCE4530")]
	public InteractBox()
	{
	}
}
[Token(Token = "0x20003FB")]
public class ThirdPersonCamFollow : MonoBehaviour
{
	[Token(Token = "0x4001399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private UnityEngine.Vector3 camPos;

	[Token(Token = "0x400139A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private UnityEngine.Vector3 camPos2;

	[Token(Token = "0x400139B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float camModifierY;

	[Token(Token = "0x400139C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float camModifierX;

	[Token(Token = "0x400139D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float camModifierZ;

	[Token(Token = "0x400139E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float lastYGrab;

	[Token(Token = "0x400139F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float lastXGrab;

	[Token(Token = "0x40013A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float lastZGrab;

	[Token(Token = "0x40013A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float turnAngle;

	[Token(Token = "0x40013A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float camModOpenVRY;

	[Token(Token = "0x40013A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform camTrans2;

	[Token(Token = "0x40013A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _grabbing;

	[Token(Token = "0x170002E4")]
	public bool grabbing
	{
		[Token(Token = "0x6001435")]
		[Address(RVA = "0xCE4538", Offset = "0xCE4538", VA = "0xCE4538")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001436")]
	[Address(RVA = "0xCE4540", Offset = "0xCE4540", VA = "0xCE4540")]
	private void Start()
	{
	}

	[Token(Token = "0x6001437")]
	[Address(RVA = "0xCE45E8", Offset = "0xCE45E8", VA = "0xCE45E8")]
	public void resetCamera()
	{
	}

	[Token(Token = "0x6001438")]
	[Address(RVA = "0xCE4614", Offset = "0xCE4614", VA = "0xCE4614")]
	private void Update()
	{
	}

	[Token(Token = "0x6001439")]
	[Address(RVA = "0xCE4618", Offset = "0xCE4618", VA = "0xCE4618")]
	public void UpdateCameraPos()
	{
	}

	[Token(Token = "0x600143A")]
	[Address(RVA = "0xCE4C50", Offset = "0xCE4C50", VA = "0xCE4C50")]
	public UnityEngine.Vector3 RotatePointAroundPivot(UnityEngine.Vector3 point, UnityEngine.Vector3 pivot, UnityEngine.Vector3 angles)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600143B")]
	[Address(RVA = "0xCE4CD0", Offset = "0xCE4CD0", VA = "0xCE4CD0")]
	public ThirdPersonCamFollow()
	{
	}
}
[Token(Token = "0x20003FC")]
public class ThirdPersonController : MonoBehaviour
{
	[Token(Token = "0x20003FD")]
	private enum PlayerState
	{
		[Token(Token = "0x40013C9")]
		Idle,
		[Token(Token = "0x40013CA")]
		Moving,
		[Token(Token = "0x40013CB")]
		Attacking,
		[Token(Token = "0x40013CC")]
		Interacting,
		[Token(Token = "0x40013CD")]
		Damaged,
		[Token(Token = "0x40013CE")]
		Dead,
		[Token(Token = "0x40013CF")]
		Boarding
	}

	[Token(Token = "0x20003FE")]
	private class IdleState : State<ThirdPersonController>
	{
		[Token(Token = "0x600145A")]
		[Address(RVA = "0xCE7044", Offset = "0xCE7044", VA = "0xCE7044", Slot = "4")]
		public override void activate(ThirdPersonController parent)
		{
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0xCE70C4", Offset = "0xCE70C4", VA = "0xCE70C4", Slot = "5")]
		public override void update(ThirdPersonController parent)
		{
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0xCE5478", Offset = "0xCE5478", VA = "0xCE5478")]
		public IdleState()
		{
		}
	}

	[Token(Token = "0x20003FF")]
	private class InteractingState : State<ThirdPersonController>
	{
		[Token(Token = "0x40013D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private NPCOverworld npc;

		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityEvent resumeGame;

		[Token(Token = "0x600145D")]
		[Address(RVA = "0xCE74F4", Offset = "0xCE74F4", VA = "0xCE74F4")]
		public void changeToIdle()
		{
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0xCE7568", Offset = "0xCE7568", VA = "0xCE7568", Slot = "4")]
		public override void activate(ThirdPersonController parent)
		{
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0xCE7778", Offset = "0xCE7778", VA = "0xCE7778", Slot = "5")]
		public override void update(ThirdPersonController parent)
		{
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0xCE555C", Offset = "0xCE555C", VA = "0xCE555C")]
		public InteractingState()
		{
		}
	}

	[Token(Token = "0x2000400")]
	private class MovingState : State<ThirdPersonController>
	{
		[Token(Token = "0x6001461")]
		[Address(RVA = "0xCE7974", Offset = "0xCE7974", VA = "0xCE7974", Slot = "4")]
		public override void activate(ThirdPersonController parent)
		{
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0xCE79F4", Offset = "0xCE79F4", VA = "0xCE79F4", Slot = "5")]
		public override void update(ThirdPersonController parent)
		{
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0xCE54C0", Offset = "0xCE54C0", VA = "0xCE54C0")]
		public MovingState()
		{
		}
	}

	[Token(Token = "0x2000401")]
	private class AttackingState : State<ThirdPersonController>
	{
		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float timer;

		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float animationTime;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool particlePlaced;

		[Token(Token = "0x6001464")]
		[Address(RVA = "0xCE7DF4", Offset = "0xCE7DF4", VA = "0xCE7DF4", Slot = "4")]
		public override void activate(ThirdPersonController parent)
		{
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0xCE7ED0", Offset = "0xCE7ED0", VA = "0xCE7ED0", Slot = "5")]
		public override void update(ThirdPersonController parent)
		{
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0xCE5508", Offset = "0xCE5508", VA = "0xCE5508")]
		public AttackingState()
		{
		}
	}

	[Token(Token = "0x2000402")]
	private class DamagedState : State<ThirdPersonController>
	{
		[Token(Token = "0x6001467")]
		[Address(RVA = "0xCE81A8", Offset = "0xCE81A8", VA = "0xCE81A8", Slot = "4")]
		public override void activate(ThirdPersonController parent)
		{
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0xCE8200", Offset = "0xCE8200", VA = "0xCE8200", Slot = "5")]
		public override void update(ThirdPersonController parent)
		{
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0xCE55D8", Offset = "0xCE55D8", VA = "0xCE55D8")]
		public DamagedState()
		{
		}
	}

	[Token(Token = "0x2000403")]
	private class DeadState : State<ThirdPersonController>
	{
		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float timer;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float animationTime;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool startedSceneLoad;

		[Token(Token = "0x600146A")]
		[Address(RVA = "0xCE8204", Offset = "0xCE8204", VA = "0xCE8204", Slot = "4")]
		public override void activate(ThirdPersonController parent)
		{
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0xCE8268", Offset = "0xCE8268", VA = "0xCE8268", Slot = "5")]
		public override void update(ThirdPersonController parent)
		{
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0xCE5620", Offset = "0xCE5620", VA = "0xCE5620")]
		public DeadState()
		{
		}
	}

	[Token(Token = "0x2000404")]
	private class BoardingState : State<ThirdPersonController>
	{
		[Token(Token = "0x600146D")]
		[Address(RVA = "0xCE8348", Offset = "0xCE8348", VA = "0xCE8348", Slot = "4")]
		public override void activate(ThirdPersonController parent)
		{
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0xCE84CC", Offset = "0xCE84CC", VA = "0xCE84CC", Slot = "5")]
		public override void update(ThirdPersonController parent)
		{
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0xCE5670", Offset = "0xCE5670", VA = "0xCE5670")]
		public BoardingState()
		{
		}
	}

	[Token(Token = "0x2000405")]
	[CompilerGenerated]
	private sealed class <unlockMenuOnLoad>d__48 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ThirdPersonController <>4__this;

		[Token(Token = "0x170002EB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001473")]
			[Address(RVA = "0xCE8804", Offset = "0xCE8804", VA = "0xCE8804", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001475")]
			[Address(RVA = "0xCE884C", Offset = "0xCE884C", VA = "0xCE884C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0xCE5B78", Offset = "0xCE5B78", VA = "0xCE5B78")]
		[DebuggerHidden]
		public <unlockMenuOnLoad>d__48(int <>1__state)
		{
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0xCE8758", Offset = "0xCE8758", VA = "0xCE8758", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0xCE875C", Offset = "0xCE875C", VA = "0xCE875C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0xCE880C", Offset = "0xCE880C", VA = "0xCE880C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000406")]
	[CompilerGenerated]
	private sealed class <rotatePlayerTimer>d__53 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ThirdPersonController <>4__this;

		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float y;

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <maxAllowedTime>5__3;

		[Token(Token = "0x170002ED")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001479")]
			[Address(RVA = "0xCE8B18", Offset = "0xCE8B18", VA = "0xCE8B18", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002EE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600147B")]
			[Address(RVA = "0xCE8B60", Offset = "0xCE8B60", VA = "0xCE8B60", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0xCE5D14", Offset = "0xCE5D14", VA = "0xCE5D14")]
		[DebuggerHidden]
		public <rotatePlayerTimer>d__53(int <>1__state)
		{
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0xCE8854", Offset = "0xCE8854", VA = "0xCE8854", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0xCE8858", Offset = "0xCE8858", VA = "0xCE8858", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0xCE8B20", Offset = "0xCE8B20", VA = "0xCE8B20", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000407")]
	[CompilerGenerated]
	private sealed class <jumpTimer>d__55 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40013E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40013E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float jumpPower;

		[Token(Token = "0x40013E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ThirdPersonController <>4__this;

		[Token(Token = "0x40013E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float time;

		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <t>5__2;

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <jump>5__3;

		[Token(Token = "0x170002EF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600147F")]
			[Address(RVA = "0xCE8CE0", Offset = "0xCE8CE0", VA = "0xCE8CE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F0")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001481")]
			[Address(RVA = "0xCE8D28", Offset = "0xCE8D28", VA = "0xCE8D28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600147C")]
		[Address(RVA = "0xCE5DDC", Offset = "0xCE5DDC", VA = "0xCE5DDC")]
		[DebuggerHidden]
		public <jumpTimer>d__55(int <>1__state)
		{
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0xCE8B68", Offset = "0xCE8B68", VA = "0xCE8B68", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0xCE8B6C", Offset = "0xCE8B6C", VA = "0xCE8B6C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0xCE8CE8", Offset = "0xCE8CE8", VA = "0xCE8CE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000408")]
	[CompilerGenerated]
	private sealed class <encounterTimer>d__56 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string scene;

		[Token(Token = "0x170002F1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001485")]
			[Address(RVA = "0xCE8EB8", Offset = "0xCE8EB8", VA = "0xCE8EB8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001487")]
			[Address(RVA = "0xCE8F00", Offset = "0xCE8F00", VA = "0xCE8F00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0xCE5E04", Offset = "0xCE5E04", VA = "0xCE5E04")]
		[DebuggerHidden]
		public <encounterTimer>d__56(int <>1__state)
		{
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0xCE8D30", Offset = "0xCE8D30", VA = "0xCE8D30", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0xCE8D34", Offset = "0xCE8D34", VA = "0xCE8D34", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0xCE8EC0", Offset = "0xCE8EC0", VA = "0xCE8EC0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000409")]
	[CompilerGenerated]
	private sealed class <interactProceedTimerEnum>d__77 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40013EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40013ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float time;

		[Token(Token = "0x40013EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ThirdPersonController <>4__this;

		[Token(Token = "0x40013EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string StoryGOName;

		[Token(Token = "0x170002F3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600148B")]
			[Address(RVA = "0xCE903C", Offset = "0xCE903C", VA = "0xCE903C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600148D")]
			[Address(RVA = "0xCE9084", Offset = "0xCE9084", VA = "0xCE9084", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0xCE6E84", Offset = "0xCE6E84", VA = "0xCE6E84")]
		[DebuggerHidden]
		public <interactProceedTimerEnum>d__77(int <>1__state)
		{
		}

		[Token(Token = "0x6001489")]
		[Address(RVA = "0xCE8F08", Offset = "0xCE8F08", VA = "0xCE8F08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0xCE8F0C", Offset = "0xCE8F0C", VA = "0xCE8F0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0xCE9044", Offset = "0xCE9044", VA = "0xCE9044", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40013A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ThirdPersonController instance;

	[Token(Token = "0x40013A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator playerAnimator;

	[Token(Token = "0x40013A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool playerStopped;

	[Token(Token = "0x40013A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool movementLocked;

	[Token(Token = "0x40013A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool attackLocked;

	[Token(Token = "0x40013AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool menuLocked;

	[Token(Token = "0x40013AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool encounterStarting;

	[Token(Token = "0x40013AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _movementMagnitude;

	[Token(Token = "0x40013AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject overworldAttackParticle;

	[Token(Token = "0x40013AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject compass;

	[Token(Token = "0x40013AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HoverboardController hoverboard;

	[Token(Token = "0x40013B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public HoverboardController hoverboardPrefab;

	[Token(Token = "0x40013B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject backFlair;

	[Token(Token = "0x40013B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject dungeonLight;

	[Token(Token = "0x40013B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform attackSpawnTrans;

	[Token(Token = "0x40013B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform footPos;

	[Token(Token = "0x40013B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform hoverboardPos;

	[Token(Token = "0x40013B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Item requiredHoverItem;

	[Token(Token = "0x40013B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public UIBar playerHealthBar;

	[Token(Token = "0x40013B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public List<NPCOverworld> lastSeenNPCs;

	[Token(Token = "0x40013B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private SkinnedMeshRenderer[] renderers;

	[Token(Token = "0x40013BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private MeshRenderer[] renderers2;

	[Token(Token = "0x40013BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool storyProceedTrigger;

	[Token(Token = "0x40013BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
	public bool canInteract;

	[Token(Token = "0x40013BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Material chubgusMaterial;

	[Token(Token = "0x40013BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Transform avatarSpawn;

	[Token(Token = "0x40013BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Dictionary<int, string> avatarDic;

	[Token(Token = "0x40013C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private StateMachine<ThirdPersonController, PlayerState> stateMachine;

	[Token(Token = "0x40013C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private CharacterController characterController;

	[Token(Token = "0x40013C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float _runSpeed;

	[Token(Token = "0x40013C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public UnityEvent onEnemyEncounter;

	[Token(Token = "0x40013C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public UnityEvent onHoverboardDismount;

	[Token(Token = "0x40013C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public UnityEvent onMenuClose;

	[Token(Token = "0x40013C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private bool menuLockOnStart;

	[Token(Token = "0x40013C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
	public bool forceOffBoard;

	[Token(Token = "0x170002E5")]
	public float getMoveMagnitude
	{
		[Token(Token = "0x600143C")]
		[Address(RVA = "0xCE4CD8", Offset = "0xCE4CD8", VA = "0xCE4CD8")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170002E6")]
	public bool isMoving
	{
		[Token(Token = "0x600143D")]
		[Address(RVA = "0xCE4CE0", Offset = "0xCE4CE0", VA = "0xCE4CE0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002E7")]
	public bool isGrounded
	{
		[Token(Token = "0x600143E")]
		[Address(RVA = "0xCE4D30", Offset = "0xCE4D30", VA = "0xCE4D30")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002E8")]
	public float runSpeed
	{
		[Token(Token = "0x600143F")]
		[Address(RVA = "0xCE4D4C", Offset = "0xCE4D4C", VA = "0xCE4D4C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170002E9")]
	public bool isBoarding
	{
		[Token(Token = "0x6001440")]
		[Address(RVA = "0xCE4DE8", Offset = "0xCE4DE8", VA = "0xCE4DE8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002EA")]
	public bool canUseHoverBoard
	{
		[Token(Token = "0x6001452")]
		[Address(RVA = "0xCE6508", Offset = "0xCE6508", VA = "0xCE6508")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001441")]
	[Address(RVA = "0xCE4E38", Offset = "0xCE4E38", VA = "0xCE4E38")]
	public void UpdateSkin()
	{
	}

	[Token(Token = "0x6001442")]
	[Address(RVA = "0xCE517C", Offset = "0xCE517C", VA = "0xCE517C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001443")]
	[Address(RVA = "0xCE56B8", Offset = "0xCE56B8", VA = "0xCE56B8")]
	private void Start()
	{
	}

	[Token(Token = "0x6001444")]
	[Address(RVA = "0xCE5B10", Offset = "0xCE5B10", VA = "0xCE5B10")]
	[IteratorStateMachine(typeof(<unlockMenuOnLoad>d__48))]
	private IEnumerator unlockMenuOnLoad()
	{
		return null;
	}

	[Token(Token = "0x6001445")]
	[Address(RVA = "0xCE593C", Offset = "0xCE593C", VA = "0xCE593C")]
	private void destroyCloseEnemies()
	{
	}

	[Token(Token = "0x6001446")]
	[Address(RVA = "0xCE5BA0", Offset = "0xCE5BA0", VA = "0xCE5BA0")]
	public void startEncounterBad()
	{
	}

	[Token(Token = "0x6001447")]
	[Address(RVA = "0xCE5BF4", Offset = "0xCE5BF4", VA = "0xCE5BF4")]
	public void startEncounterGood(string scene)
	{
	}

	[Token(Token = "0x6001448")]
	[Address(RVA = "0xCE5C7C", Offset = "0xCE5C7C", VA = "0xCE5C7C")]
	public void rotatePlayer(float y)
	{
	}

	[Token(Token = "0x6001449")]
	[Address(RVA = "0xCE5C9C", Offset = "0xCE5C9C", VA = "0xCE5C9C")]
	[IteratorStateMachine(typeof(<rotatePlayerTimer>d__53))]
	private IEnumerator rotatePlayerTimer(float y)
	{
		return null;
	}

	[Token(Token = "0x600144A")]
	[Address(RVA = "0xCE5D3C", Offset = "0xCE5D3C", VA = "0xCE5D3C")]
	public void characterJump(float jumpPower, float time)
	{
	}

	[Token(Token = "0x600144B")]
	[Address(RVA = "0xCE5D5C", Offset = "0xCE5D5C", VA = "0xCE5D5C")]
	[IteratorStateMachine(typeof(<jumpTimer>d__55))]
	private IEnumerator jumpTimer(float jumpPower, float time)
	{
		return null;
	}

	[Token(Token = "0x600144C")]
	[Address(RVA = "0xCE5C14", Offset = "0xCE5C14", VA = "0xCE5C14")]
	[IteratorStateMachine(typeof(<encounterTimer>d__56))]
	private IEnumerator encounterTimer(string scene)
	{
		return null;
	}

	[Token(Token = "0x600144D")]
	[Address(RVA = "0xCE5E2C", Offset = "0xCE5E2C", VA = "0xCE5E2C")]
	public void hideRenderers()
	{
	}

	[Token(Token = "0x600144E")]
	[Address(RVA = "0xCE5F64", Offset = "0xCE5F64", VA = "0xCE5F64")]
	public void showRenderers()
	{
	}

	[Token(Token = "0x600144F")]
	[Address(RVA = "0xCE609C", Offset = "0xCE609C", VA = "0xCE609C")]
	public void killPlayer()
	{
	}

	[Token(Token = "0x6001450")]
	[Address(RVA = "0xCE60F0", Offset = "0xCE60F0", VA = "0xCE60F0")]
	public void useCompass()
	{
	}

	[Token(Token = "0x6001451")]
	[Address(RVA = "0xCE6330", Offset = "0xCE6330", VA = "0xCE6330")]
	private void Update()
	{
	}

	[Token(Token = "0x6001453")]
	[Address(RVA = "0xCE663C", Offset = "0xCE663C", VA = "0xCE663C")]
	public void updateHealthBars()
	{
	}

	[Token(Token = "0x6001454")]
	[Address(RVA = "0xCE66EC", Offset = "0xCE66EC", VA = "0xCE66EC")]
	public void getMenuInput()
	{
	}

	[Token(Token = "0x6001455")]
	[Address(RVA = "0xCE6770", Offset = "0xCE6770", VA = "0xCE6770")]
	public void toggleMenu()
	{
	}

	[Token(Token = "0x6001456")]
	[Address(RVA = "0xCE6950", Offset = "0xCE6950", VA = "0xCE6950")]
	private void movePlayer()
	{
	}

	[Token(Token = "0x6001457")]
	[Address(RVA = "0xCE6DDC", Offset = "0xCE6DDC", VA = "0xCE6DDC")]
	public void interactProceedTimer(float time, string StoryGOName)
	{
	}

	[Token(Token = "0x6001458")]
	[Address(RVA = "0xCE6E00", Offset = "0xCE6E00", VA = "0xCE6E00")]
	[IteratorStateMachine(typeof(<interactProceedTimerEnum>d__77))]
	private IEnumerator interactProceedTimerEnum(float time, string StoryGOName)
	{
		return null;
	}

	[Token(Token = "0x6001459")]
	[Address(RVA = "0xCE6EAC", Offset = "0xCE6EAC", VA = "0xCE6EAC")]
	public ThirdPersonController()
	{
	}
}
[Token(Token = "0x200040A")]
public class BattleTutorialPrompts : MonoBehaviour
{
	[Token(Token = "0x40013F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string[] battle1Prompts;

	[Token(Token = "0x40013F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[TextArea]
	public string[] battle2Prompts;

	[Token(Token = "0x40013F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[TextArea]
	public string[] battle3Prompts;

	[Token(Token = "0x40013F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[TextArea]
	public string[] battle4Prompts;

	[Token(Token = "0x40013F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int currentPrompt;

	[Token(Token = "0x40013F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string[] battlePrompts;

	[Token(Token = "0x40013F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool canProceed;

	[Token(Token = "0x40013F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text explainText;

	[Token(Token = "0x40013F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int tutorialNum;

	[Token(Token = "0x40013F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Animator tutorialImageAnim;

	[Token(Token = "0x40013FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEvent onPromptClose;

	[Token(Token = "0x600148E")]
	[Address(RVA = "0xCE908C", Offset = "0xCE908C", VA = "0xCE908C")]
	private void Start()
	{
	}

	[Token(Token = "0x600148F")]
	[Address(RVA = "0xCE921C", Offset = "0xCE921C", VA = "0xCE921C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001490")]
	[Address(RVA = "0xCE9090", Offset = "0xCE9090", VA = "0xCE9090")]
	public void forceUpdatePrompt()
	{
	}

	[Token(Token = "0x6001491")]
	[Address(RVA = "0xCE9490", Offset = "0xCE9490", VA = "0xCE9490")]
	public BattleTutorialPrompts()
	{
	}
}
[Token(Token = "0x200040B")]
public class TutorialDungeon : MonoBehaviour
{
	[Token(Token = "0x200040C")]
	[CompilerGenerated]
	private sealed class <floorADvanceTimer1>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TutorialDungeon <>4__this;

		[Token(Token = "0x170002F5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014A5")]
			[Address(RVA = "0xCEA300", Offset = "0xCEA300", VA = "0xCEA300", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014A7")]
			[Address(RVA = "0xCEA348", Offset = "0xCEA348", VA = "0xCEA348", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0xCE9FA8", Offset = "0xCE9FA8", VA = "0xCE9FA8")]
		[DebuggerHidden]
		public <floorADvanceTimer1>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0xCE9FD0", Offset = "0xCE9FD0", VA = "0xCE9FD0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0xCE9FD4", Offset = "0xCE9FD4", VA = "0xCE9FD4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0xCEA308", Offset = "0xCEA308", VA = "0xCEA308", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200040D")]
	[CompilerGenerated]
	private sealed class <floorADvanceTimer2>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TutorialDungeon <>4__this;

		[Token(Token = "0x170002F7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014AB")]
			[Address(RVA = "0xCEA68C", Offset = "0xCEA68C", VA = "0xCEA68C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014AD")]
			[Address(RVA = "0xCEA6D4", Offset = "0xCEA6D4", VA = "0xCEA6D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0xCEA350", Offset = "0xCEA350", VA = "0xCEA350")]
		[DebuggerHidden]
		public <floorADvanceTimer2>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0xCEA378", Offset = "0xCEA378", VA = "0xCEA378", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0xCEA37C", Offset = "0xCEA37C", VA = "0xCEA37C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0xCEA694", Offset = "0xCEA694", VA = "0xCEA694", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40013FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string storyName;

	[Token(Token = "0x40013FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] tutorialFloors;

	[Token(Token = "0x40013FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip taskmasterEncounterTrack;

	[Token(Token = "0x40013FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource musicPlayer;

	[Token(Token = "0x6001492")]
	[Address(RVA = "0xCE9500", Offset = "0xCE9500", VA = "0xCE9500")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001493")]
	[Address(RVA = "0xCE9970", Offset = "0xCE9970", VA = "0xCE9970")]
	private void Start()
	{
	}

	[Token(Token = "0x6001494")]
	[Address(RVA = "0xCE9B10", Offset = "0xCE9B10", VA = "0xCE9B10")]
	private void fadeBackFromBlack()
	{
	}

	[Token(Token = "0x6001495")]
	[Address(RVA = "0xCE9BEC", Offset = "0xCE9BEC", VA = "0xCE9BEC")]
	private void disableLoadingText()
	{
	}

	[Token(Token = "0x6001496")]
	[Address(RVA = "0xCE9C58", Offset = "0xCE9C58", VA = "0xCE9C58")]
	private void Update()
	{
	}

	[Token(Token = "0x6001497")]
	[Address(RVA = "0xCE9C5C", Offset = "0xCE9C5C", VA = "0xCE9C5C")]
	public void dialogue1Complete()
	{
	}

	[Token(Token = "0x6001498")]
	[Address(RVA = "0xCE9CB0", Offset = "0xCE9CB0", VA = "0xCE9CB0")]
	public void lockPlayerMovement()
	{
	}

	[Token(Token = "0x6001499")]
	[Address(RVA = "0xCE9D08", Offset = "0xCE9D08", VA = "0xCE9D08")]
	public void dialogue2Complete()
	{
	}

	[Token(Token = "0x600149A")]
	[Address(RVA = "0xCE9D9C", Offset = "0xCE9D9C", VA = "0xCE9D9C")]
	public void encounter2Complete()
	{
	}

	[Token(Token = "0x600149B")]
	[Address(RVA = "0xCE9E10", Offset = "0xCE9E10", VA = "0xCE9E10")]
	public void playTaskMasterEncounterTrack()
	{
	}

	[Token(Token = "0x600149C")]
	[Address(RVA = "0xCE9E44", Offset = "0xCE9E44", VA = "0xCE9E44")]
	public void encounter3Complete()
	{
	}

	[Token(Token = "0x600149D")]
	[Address(RVA = "0xCE9E48", Offset = "0xCE9E48", VA = "0xCE9E48")]
	public void advanceToFloor2()
	{
	}

	[Token(Token = "0x600149E")]
	[Address(RVA = "0xCE9ED0", Offset = "0xCE9ED0", VA = "0xCE9ED0")]
	public void advanceToFloor3()
	{
	}

	[Token(Token = "0x600149F")]
	[Address(RVA = "0xCE9E68", Offset = "0xCE9E68", VA = "0xCE9E68")]
	[IteratorStateMachine(typeof(<floorADvanceTimer1>d__17))]
	private IEnumerator floorADvanceTimer1()
	{
		return null;
	}

	[Token(Token = "0x60014A0")]
	[Address(RVA = "0xCE9EF0", Offset = "0xCE9EF0", VA = "0xCE9EF0")]
	[IteratorStateMachine(typeof(<floorADvanceTimer2>d__18))]
	private IEnumerator floorADvanceTimer2()
	{
		return null;
	}

	[Token(Token = "0x60014A1")]
	[Address(RVA = "0xCE9F58", Offset = "0xCE9F58", VA = "0xCE9F58")]
	public TutorialDungeon()
	{
	}
}
[Token(Token = "0x200040E")]
public class BattleDialogueBox : MonoBehaviour
{
	[Token(Token = "0x200040F")]
	[CompilerGenerated]
	private sealed class <timedDialogueDisplay>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BattleDialogueBox <>4__this;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string text;

		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string <>7__wrap1;

		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <>7__wrap2;

		[Token(Token = "0x170002F9")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014B4")]
			[Address(RVA = "0xCEABE8", Offset = "0xCEABE8", VA = "0xCEABE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014B6")]
			[Address(RVA = "0xCEAC30", Offset = "0xCEAC30", VA = "0xCEAC30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0xCEA8EC", Offset = "0xCEA8EC", VA = "0xCEA8EC")]
		[DebuggerHidden]
		public <timedDialogueDisplay>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0xCEA978", Offset = "0xCEA978", VA = "0xCEA978", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0xCEA97C", Offset = "0xCEA97C", VA = "0xCEA97C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0xCEABF0", Offset = "0xCEABF0", VA = "0xCEABF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TMP_Text dialogueText;

	[Token(Token = "0x4001406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string dialogueString;

	[Token(Token = "0x4001407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool dialogueAnimating;

	[Token(Token = "0x4001408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool dialogueSkipped;

	[Token(Token = "0x4001409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	private bool dialogueOver;

	[Token(Token = "0x400140A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioSource dialogueSource;

	[Token(Token = "0x400140B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Sprite characterPortrait;

	[Token(Token = "0x400140C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Image portraitImage;

	[Token(Token = "0x400140D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float timeDisplayed;

	[Token(Token = "0x400140E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float timeBetweenChars;

	[Token(Token = "0x60014AE")]
	[Address(RVA = "0xCEA6DC", Offset = "0xCEA6DC", VA = "0xCEA6DC")]
	private void Start()
	{
	}

	[Token(Token = "0x60014AF")]
	[Address(RVA = "0xCEA878", Offset = "0xCEA878", VA = "0xCEA878")]
	[IteratorStateMachine(typeof(<timedDialogueDisplay>d__11))]
	private IEnumerator timedDialogueDisplay(string text)
	{
		return null;
	}

	[Token(Token = "0x60014B0")]
	[Address(RVA = "0xCEA914", Offset = "0xCEA914", VA = "0xCEA914")]
	public BattleDialogueBox()
	{
	}
}
[Token(Token = "0x2000410")]
public class BossText : MonoBehaviour
{
	[Token(Token = "0x2000411")]
	[CompilerGenerated]
	private sealed class <textAppear>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BossText <>4__this;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color <newCol>5__2;

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <i>5__3;

		[Token(Token = "0x170002FB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014BE")]
			[Address(RVA = "0xCEB024", Offset = "0xCEB024", VA = "0xCEB024", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014C0")]
			[Address(RVA = "0xCEB06C", Offset = "0xCEB06C", VA = "0xCEB06C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0xCEACC4", Offset = "0xCEACC4", VA = "0xCEACC4")]
		[DebuggerHidden]
		public <textAppear>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0xCEAD3C", Offset = "0xCEAD3C", VA = "0xCEAD3C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0xCEAD40", Offset = "0xCEAD40", VA = "0xCEAD40", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0xCEB02C", Offset = "0xCEB02C", VA = "0xCEB02C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string bossName;

	[Token(Token = "0x4001416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TMP_Text text;

	[Token(Token = "0x4001417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource audioSource;

	[Token(Token = "0x60014B7")]
	[Address(RVA = "0xCEAC38", Offset = "0xCEAC38", VA = "0xCEAC38")]
	private void Start()
	{
	}

	[Token(Token = "0x60014B8")]
	[Address(RVA = "0xCEACC0", Offset = "0xCEACC0", VA = "0xCEACC0")]
	private void Update()
	{
	}

	[Token(Token = "0x60014B9")]
	[Address(RVA = "0xCEAC58", Offset = "0xCEAC58", VA = "0xCEAC58")]
	[IteratorStateMachine(typeof(<textAppear>d__5))]
	private IEnumerator textAppear()
	{
		return null;
	}

	[Token(Token = "0x60014BA")]
	[Address(RVA = "0xCEACEC", Offset = "0xCEACEC", VA = "0xCEACEC")]
	public BossText()
	{
	}
}
[Token(Token = "0x2000412")]
public class FadeMaterial : MonoBehaviour
{
	[Token(Token = "0x2000413")]
	[CompilerGenerated]
	private sealed class <FadeBack>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FadeMaterial <>4__this;

		[Token(Token = "0x170002FD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014CA")]
			[Address(RVA = "0xCEB38C", Offset = "0xCEB38C", VA = "0xCEB38C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014CC")]
			[Address(RVA = "0xCEB3D4", Offset = "0xCEB3D4", VA = "0xCEB3D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0xCEB188", Offset = "0xCEB188", VA = "0xCEB188")]
		[DebuggerHidden]
		public <FadeBack>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0xCEB248", Offset = "0xCEB248", VA = "0xCEB248", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0xCEB24C", Offset = "0xCEB24C", VA = "0xCEB24C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0xCEB394", Offset = "0xCEB394", VA = "0xCEB394", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000414")]
	[CompilerGenerated]
	private sealed class <Fade>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FadeMaterial <>4__this;

		[Token(Token = "0x170002FF")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014D0")]
			[Address(RVA = "0xCEB524", Offset = "0xCEB524", VA = "0xCEB524", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000300")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014D2")]
			[Address(RVA = "0xCEB56C", Offset = "0xCEB56C", VA = "0xCEB56C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0xCEB1B0", Offset = "0xCEB1B0", VA = "0xCEB1B0")]
		[DebuggerHidden]
		public <Fade>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0xCEB3DC", Offset = "0xCEB3DC", VA = "0xCEB3DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0xCEB3E0", Offset = "0xCEB3E0", VA = "0xCEB3E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014D1")]
		[Address(RVA = "0xCEB52C", Offset = "0xCEB52C", VA = "0xCEB52C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400141D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maxTime;

	[Token(Token = "0x400141E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Renderer rend;

	[Token(Token = "0x400141F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Events")]
	public UnityEvent onDissolveEnded;

	[Token(Token = "0x60014C1")]
	[Address(RVA = "0xCEB074", Offset = "0xCEB074", VA = "0xCEB074")]
	public void startDissolve()
	{
	}

	[Token(Token = "0x60014C2")]
	[Address(RVA = "0xCEB0FC", Offset = "0xCEB0FC", VA = "0xCEB0FC")]
	public void startDissolveBack()
	{
	}

	[Token(Token = "0x60014C3")]
	[Address(RVA = "0xCEB184", Offset = "0xCEB184", VA = "0xCEB184")]
	public void makeWorldGrey()
	{
	}

	[Token(Token = "0x60014C4")]
	[Address(RVA = "0xCEB11C", Offset = "0xCEB11C", VA = "0xCEB11C")]
	[IteratorStateMachine(typeof(<FadeBack>d__6))]
	private IEnumerator FadeBack()
	{
		return null;
	}

	[Token(Token = "0x60014C5")]
	[Address(RVA = "0xCEB094", Offset = "0xCEB094", VA = "0xCEB094")]
	[IteratorStateMachine(typeof(<Fade>d__7))]
	private IEnumerator Fade()
	{
		return null;
	}

	[Token(Token = "0x60014C6")]
	[Address(RVA = "0xCEB1D8", Offset = "0xCEB1D8", VA = "0xCEB1D8")]
	public FadeMaterial()
	{
	}
}
[Token(Token = "0x2000415")]
public class HaxChangeCard : MonoBehaviour
{
	[Token(Token = "0x4001426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text spellText;

	[Token(Token = "0x4001427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject spinny;

	[Token(Token = "0x4001428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float deathTime;

	[Token(Token = "0x4001429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float maxDeathTime;

	[Token(Token = "0x400142A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private UnityEngine.Vector3 startPos;

	[Token(Token = "0x60014D3")]
	[Address(RVA = "0xCEB574", Offset = "0xCEB574", VA = "0xCEB574")]
	private void Start()
	{
	}

	[Token(Token = "0x60014D4")]
	[Address(RVA = "0xCEB5A4", Offset = "0xCEB5A4", VA = "0xCEB5A4")]
	private void Update()
	{
	}

	[Token(Token = "0x60014D5")]
	[Address(RVA = "0xCEB81C", Offset = "0xCEB81C", VA = "0xCEB81C")]
	public HaxChangeCard()
	{
	}
}
[Token(Token = "0x2000416")]
public class LookAtPlayer : MonoBehaviour
{
	[Token(Token = "0x400142B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform cam;

	[Token(Token = "0x60014D6")]
	[Address(RVA = "0xCEB82C", Offset = "0xCEB82C", VA = "0xCEB82C")]
	private void Start()
	{
	}

	[Token(Token = "0x60014D7")]
	[Address(RVA = "0xCEB910", Offset = "0xCEB910", VA = "0xCEB910")]
	private void Update()
	{
	}

	[Token(Token = "0x60014D8")]
	[Address(RVA = "0xCEBA4C", Offset = "0xCEBA4C", VA = "0xCEBA4C")]
	public LookAtPlayer()
	{
	}
}
[Token(Token = "0x2000417")]
public static class ExtensionMethods
{
	[Token(Token = "0x60014D9")]
	[Address(RVA = "0xCEBA54", Offset = "0xCEBA54", VA = "0xCEBA54")]
	public static float Remap(this float value, float from1, float to1, float from2, float to2)
	{
		return default(float);
	}
}
[Token(Token = "0x2000418")]
public class UIBar : MonoBehaviour
{
	[Token(Token = "0x400142C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool autoRotate;

	[Token(Token = "0x400142D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool useGradient;

	[Token(Token = "0x400142E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool ghostEffect;

	[Token(Token = "0x400142F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool useBullets;

	[Token(Token = "0x4001430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image[] bulletImages;

	[Token(Token = "0x4001431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image bar;

	[Token(Token = "0x4001432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Image ghostBar;

	[Token(Token = "0x4001433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text barText;

	[Token(Token = "0x4001434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float maxAmount;

	[Token(Token = "0x4001435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float _amount;

	[Token(Token = "0x4001436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool debug;

	[Token(Token = "0x4001437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Gradient gradient;

	[Token(Token = "0x4001438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _activateOnReset;

	[Token(Token = "0x4001439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float healthRemap;

	[Token(Token = "0x400143A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool colorSet;

	[Token(Token = "0x17000301")]
	public bool show
	{
		[Token(Token = "0x60014DB")]
		[Address(RVA = "0xCEBA9C", Offset = "0xCEBA9C", VA = "0xCEBA9C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60014DA")]
		[Address(RVA = "0xCEBA70", Offset = "0xCEBA70", VA = "0xCEBA70")]
		set
		{
		}
	}

	[Token(Token = "0x17000302")]
	public float amount
	{
		[Token(Token = "0x60014DE")]
		[Address(RVA = "0xCEBB0C", Offset = "0xCEBB0C", VA = "0xCEBB0C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60014DF")]
		[Address(RVA = "0xCEBB14", Offset = "0xCEBB14", VA = "0xCEBB14")]
		set
		{
		}
	}

	[Token(Token = "0x60014DC")]
	[Address(RVA = "0xCEBAA4", Offset = "0xCEBAA4", VA = "0xCEBAA4")]
	private void Start()
	{
	}

	[Token(Token = "0x60014DD")]
	[Address(RVA = "0xCEBAA8", Offset = "0xCEBAA8", VA = "0xCEBAA8")]
	private void updateBarText()
	{
	}

	[Token(Token = "0x60014E0")]
	[Address(RVA = "0xCEBD00", Offset = "0xCEBD00", VA = "0xCEBD00")]
	private void Update()
	{
	}

	[Token(Token = "0x60014E1")]
	[Address(RVA = "0xCEBD60", Offset = "0xCEBD60", VA = "0xCEBD60")]
	public void reset()
	{
	}

	[Token(Token = "0x60014E2")]
	[Address(RVA = "0xCEBE8C", Offset = "0xCEBE8C", VA = "0xCEBE8C")]
	public UIBar()
	{
	}
}
[Token(Token = "0x2000419")]
public class UIBattleInfoCanvas : MonoBehaviour
{
	[Token(Token = "0x400143B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator phaseTextAnim;

	[Token(Token = "0x400143C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator notificationAnim;

	[Token(Token = "0x400143D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIBattleInfoCanvas instance;

	[Token(Token = "0x60014E3")]
	[Address(RVA = "0xCEBEA4", Offset = "0xCEBEA4", VA = "0xCEBEA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60014E4")]
	[Address(RVA = "0xCEBEF0", Offset = "0xCEBEF0", VA = "0xCEBEF0")]
	public UIBattleInfoCanvas()
	{
	}
}
[Token(Token = "0x200041A")]
public class UIHud : MonoBehaviour
{
	[Token(Token = "0x400143E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform targetTrans;

	[Token(Token = "0x400143F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform buffTrans;

	[Token(Token = "0x4001440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<GameObject> buffIcons;

	[Token(Token = "0x4001441")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject buffPrefab;

	[Token(Token = "0x4001442")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Animator healthWarningAnim;

	[Token(Token = "0x4001443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject redBlinders;

	[Token(Token = "0x4001444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject damageTextprefab;

	[Token(Token = "0x4001445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform damageTextSpawn;

	[Token(Token = "0x60014E5")]
	[Address(RVA = "0xCEBEF8", Offset = "0xCEBEF8", VA = "0xCEBEF8")]
	public void addBuffIcon(BattleBuff buff)
	{
	}

	[Token(Token = "0x60014E6")]
	[Address(RVA = "0xCEC164", Offset = "0xCEC164", VA = "0xCEC164")]
	public void updateBuffIcons()
	{
	}

	[Token(Token = "0x60014E7")]
	[Address(RVA = "0xCEC2C0", Offset = "0xCEC2C0", VA = "0xCEC2C0")]
	public void removeAllIcons()
	{
	}

	[Token(Token = "0x60014E8")]
	[Address(RVA = "0xCEC3BC", Offset = "0xCEC3BC", VA = "0xCEC3BC")]
	public void removeBuffIcon(string buffName)
	{
	}

	[Token(Token = "0x60014E9")]
	[Address(RVA = "0xCEC584", Offset = "0xCEC584", VA = "0xCEC584")]
	public void playHealthWarningAnimation()
	{
	}

	[Token(Token = "0x60014EA")]
	[Address(RVA = "0xCEC5EC", Offset = "0xCEC5EC", VA = "0xCEC5EC")]
	public void showDamageText(int damage)
	{
	}

	[Token(Token = "0x60014EB")]
	[Address(RVA = "0xCEC7B8", Offset = "0xCEC7B8", VA = "0xCEC7B8")]
	public void showHealText(int health)
	{
	}

	[Token(Token = "0x60014EC")]
	[Address(RVA = "0xCEC9B4", Offset = "0xCEC9B4", VA = "0xCEC9B4")]
	public UIHud()
	{
	}
}
[Token(Token = "0x200041B")]
public class BattleSpellButton : MonoBehaviour, ISelectHandler, IEventSystemHandler, IPointerEnterHandler
{
	[Token(Token = "0x4001446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Button button;

	[Token(Token = "0x60014ED")]
	[Address(RVA = "0xCEC9BC", Offset = "0xCEC9BC", VA = "0xCEC9BC")]
	private void Start()
	{
	}

	[Token(Token = "0x60014EE")]
	[Address(RVA = "0xCECA0C", Offset = "0xCECA0C", VA = "0xCECA0C", Slot = "4")]
	public void OnSelect(BaseEventData eventData)
	{
	}

	[Token(Token = "0x60014EF")]
	[Address(RVA = "0xCECA10", Offset = "0xCECA10", VA = "0xCECA10", Slot = "5")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60014F0")]
	[Address(RVA = "0xCECA14", Offset = "0xCECA14", VA = "0xCECA14")]
	public BattleSpellButton()
	{
	}
}
[Token(Token = "0x200041C")]
public class BlackFade : MonoBehaviour
{
	[Token(Token = "0x200041D")]
	[CompilerGenerated]
	private sealed class <fadeToBlackTimer>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BlackFade <>4__this;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Color <newCol>5__2;

		[Token(Token = "0x17000303")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014FC")]
			[Address(RVA = "0xCECEF4", Offset = "0xCECEF4", VA = "0xCECEF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000304")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014FE")]
			[Address(RVA = "0xCECF3C", Offset = "0xCECF3C", VA = "0xCECF3C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0xCECCA8", Offset = "0xCECCA8", VA = "0xCECCA8")]
		[DebuggerHidden]
		public <fadeToBlackTimer>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x60014FA")]
		[Address(RVA = "0xCECD28", Offset = "0xCECD28", VA = "0xCECD28", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0xCECD2C", Offset = "0xCECD2C", VA = "0xCECD2C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014FD")]
		[Address(RVA = "0xCECEFC", Offset = "0xCECEFC", VA = "0xCECEFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200041E")]
	[CompilerGenerated]
	private sealed class <fadeToWhiteTimer>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BlackFade <>4__this;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Color <newCol>5__2;

		[Token(Token = "0x17000305")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001502")]
			[Address(RVA = "0xCED104", Offset = "0xCED104", VA = "0xCED104", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000306")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001504")]
			[Address(RVA = "0xCED14C", Offset = "0xCED14C", VA = "0xCED14C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0xCECCD0", Offset = "0xCECCD0", VA = "0xCECCD0")]
		[DebuggerHidden]
		public <fadeToWhiteTimer>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6001500")]
		[Address(RVA = "0xCECF44", Offset = "0xCECF44", VA = "0xCECF44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0xCECF48", Offset = "0xCECF48", VA = "0xCECF48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0xCED10C", Offset = "0xCED10C", VA = "0xCED10C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200041F")]
	[CompilerGenerated]
	private sealed class <fadeFromBlackTimer>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BlackFade <>4__this;

		[Token(Token = "0x4001458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float time;

		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Color <newCol>5__2;

		[Token(Token = "0x17000307")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001508")]
			[Address(RVA = "0xCED31C", Offset = "0xCED31C", VA = "0xCED31C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000308")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600150A")]
			[Address(RVA = "0xCED364", Offset = "0xCED364", VA = "0xCED364", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0xCECCF8", Offset = "0xCECCF8", VA = "0xCECCF8")]
		[DebuggerHidden]
		public <fadeFromBlackTimer>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6001506")]
		[Address(RVA = "0xCED154", Offset = "0xCED154", VA = "0xCED154", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001507")]
		[Address(RVA = "0xCED158", Offset = "0xCED158", VA = "0xCED158", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0xCED324", Offset = "0xCED324", VA = "0xCED324", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Image image;

	[Token(Token = "0x4001448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BlackFade instance;

	[Token(Token = "0x4001449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool isFading;

	[Token(Token = "0x400144A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool isReturning;

	[Token(Token = "0x60014F1")]
	[Address(RVA = "0xCECA1C", Offset = "0xCECA1C", VA = "0xCECA1C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60014F2")]
	[Address(RVA = "0xCEA2E0", Offset = "0xCEA2E0", VA = "0xCEA2E0")]
	public void fadeToBlack(float time)
	{
	}

	[Token(Token = "0x60014F3")]
	[Address(RVA = "0xCECB78", Offset = "0xCECB78", VA = "0xCECB78")]
	public void fadeToWhite(float time)
	{
	}

	[Token(Token = "0x60014F4")]
	[Address(RVA = "0xCECC10", Offset = "0xCECC10", VA = "0xCECC10")]
	public void fadeFromBlack(float time)
	{
	}

	[Token(Token = "0x60014F5")]
	[Address(RVA = "0xCECB00", Offset = "0xCECB00", VA = "0xCECB00")]
	[IteratorStateMachine(typeof(<fadeToBlackTimer>d__8))]
	private IEnumerator fadeToBlackTimer(float time)
	{
		return null;
	}

	[Token(Token = "0x60014F6")]
	[Address(RVA = "0xCECB98", Offset = "0xCECB98", VA = "0xCECB98")]
	[IteratorStateMachine(typeof(<fadeToWhiteTimer>d__9))]
	private IEnumerator fadeToWhiteTimer(float time)
	{
		return null;
	}

	[Token(Token = "0x60014F7")]
	[Address(RVA = "0xCECC30", Offset = "0xCECC30", VA = "0xCECC30")]
	[IteratorStateMachine(typeof(<fadeFromBlackTimer>d__10))]
	private IEnumerator fadeFromBlackTimer(float time)
	{
		return null;
	}

	[Token(Token = "0x60014F8")]
	[Address(RVA = "0xCECD20", Offset = "0xCECD20", VA = "0xCECD20")]
	public BlackFade()
	{
	}
}
[Token(Token = "0x2000420")]
public class ClassSelectMenu : MonoBehaviour
{
	[Token(Token = "0x2000421")]
	[CompilerGenerated]
	private sealed class <loadSceneTimer>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400146A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000309")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001516")]
			[Address(RVA = "0xCEDAD0", Offset = "0xCEDAD0", VA = "0xCEDAD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001518")]
			[Address(RVA = "0xCEDB18", Offset = "0xCEDB18", VA = "0xCEDB18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0xCED944", Offset = "0xCED944", VA = "0xCED944")]
		[DebuggerHidden]
		public <loadSceneTimer>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0xCED9B0", Offset = "0xCED9B0", VA = "0xCED9B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0xCED9B4", Offset = "0xCED9B4", VA = "0xCED9B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001517")]
		[Address(RVA = "0xCEDAD8", Offset = "0xCEDAD8", VA = "0xCEDAD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000422")]
	[CompilerGenerated]
	private sealed class <timedDialogueDisplay>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400146B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400146C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400146D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ClassSelectMenu <>4__this;

		[Token(Token = "0x400146E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string text;

		[Token(Token = "0x400146F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string <>7__wrap1;

		[Token(Token = "0x4001470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <>7__wrap2;

		[Token(Token = "0x1700030B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600151C")]
			[Address(RVA = "0xCEDD3C", Offset = "0xCEDD3C", VA = "0xCEDD3C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600151E")]
			[Address(RVA = "0xCEDD84", Offset = "0xCEDD84", VA = "0xCEDD84", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001519")]
		[Address(RVA = "0xCED96C", Offset = "0xCED96C", VA = "0xCED96C")]
		[DebuggerHidden]
		public <timedDialogueDisplay>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x600151A")]
		[Address(RVA = "0xCEDB20", Offset = "0xCEDB20", VA = "0xCEDB20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600151B")]
		[Address(RVA = "0xCEDB24", Offset = "0xCEDB24", VA = "0xCEDB24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0xCEDD44", Offset = "0xCEDD44", VA = "0xCEDD44", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400145A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text infoText;

	[Token(Token = "0x400145B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int selectedClass;

	[Token(Token = "0x400145C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string[] selectStrings;

	[Token(Token = "0x400145D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool dialogueAnimating;

	[Token(Token = "0x400145E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool dialogueSkipped;

	[Token(Token = "0x400145F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	private bool dialogueOver;

	[Token(Token = "0x4001460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject[] selectOrbs;

	[Token(Token = "0x4001461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject selectedOrb;

	[Token(Token = "0x4001462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject placementOrb;

	[Token(Token = "0x4001463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ArcaxerClass[] classes;

	[Token(Token = "0x4001464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool orbHeld;

	[Token(Token = "0x4001465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool newSceneLoading;

	[Token(Token = "0x4001466")]
	private const float smallOrbScale = 0.2f;

	[Token(Token = "0x4001467")]
	private const float bigOrbScale = 5f;

	[Token(Token = "0x4001468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float textSpeed;

	[Token(Token = "0x600150B")]
	[Address(RVA = "0xCED36C", Offset = "0xCED36C", VA = "0xCED36C")]
	private void Start()
	{
	}

	[Token(Token = "0x600150C")]
	[Address(RVA = "0xCED41C", Offset = "0xCED41C", VA = "0xCED41C")]
	private void Update()
	{
	}

	[Token(Token = "0x600150D")]
	[Address(RVA = "0xCED568", Offset = "0xCED568", VA = "0xCED568")]
	public void selectClass(int num)
	{
	}

	[Token(Token = "0x600150E")]
	[Address(RVA = "0xCED6FC", Offset = "0xCED6FC", VA = "0xCED6FC")]
	public void deselectClass()
	{
	}

	[Token(Token = "0x600150F")]
	[Address(RVA = "0xCED7FC", Offset = "0xCED7FC", VA = "0xCED7FC")]
	public void loadNextScene()
	{
	}

	[Token(Token = "0x6001510")]
	[Address(RVA = "0xCED8E4", Offset = "0xCED8E4", VA = "0xCED8E4")]
	[IteratorStateMachine(typeof(<loadSceneTimer>d__20))]
	private IEnumerator loadSceneTimer()
	{
		return null;
	}

	[Token(Token = "0x6001511")]
	[Address(RVA = "0xCED3A8", Offset = "0xCED3A8", VA = "0xCED3A8")]
	[IteratorStateMachine(typeof(<timedDialogueDisplay>d__21))]
	private IEnumerator timedDialogueDisplay(string text)
	{
		return null;
	}

	[Token(Token = "0x6001512")]
	[Address(RVA = "0xCED994", Offset = "0xCED994", VA = "0xCED994")]
	public ClassSelectMenu()
	{
	}
}
[Token(Token = "0x2000423")]
public class ClassSelectOrb : MonoBehaviour
{
	[Token(Token = "0x4001471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource source;

	[Token(Token = "0x4001472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.Vector3 startPos;

	[Token(Token = "0x4001473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Quaternion startRot;

	[Token(Token = "0x4001474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool startingLoad;

	[Token(Token = "0x4001475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	private bool pickedUp;

	[Token(Token = "0x4001476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent onOrbPlacement;

	[Token(Token = "0x600151F")]
	[Address(RVA = "0xCEDD8C", Offset = "0xCEDD8C", VA = "0xCEDD8C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001520")]
	[Address(RVA = "0xCEDDDC", Offset = "0xCEDDDC", VA = "0xCEDDDC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001521")]
	[Address(RVA = "0xCEDE38", Offset = "0xCEDE38", VA = "0xCEDE38")]
	public void onDrop()
	{
	}

	[Token(Token = "0x6001522")]
	[Address(RVA = "0xCEDF14", Offset = "0xCEDF14", VA = "0xCEDF14")]
	public void onPickuP()
	{
	}

	[Token(Token = "0x6001523")]
	[Address(RVA = "0xCEDF3C", Offset = "0xCEDF3C", VA = "0xCEDF3C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001524")]
	[Address(RVA = "0xCEDFD8", Offset = "0xCEDFD8", VA = "0xCEDFD8")]
	public ClassSelectOrb()
	{
	}
}
[Token(Token = "0x2000424")]
public class EnemyInfoCanvas : MonoBehaviour
{
	[Token(Token = "0x4001477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text nameText;

	[Token(Token = "0x4001478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UIBar hpBar;

	[Token(Token = "0x4001479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UIBar breakBar;

	[Token(Token = "0x400147A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform buffTrans;

	[Token(Token = "0x400147B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject buffPrefab;

	[Token(Token = "0x400147C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject blueMageIcon;

	[Token(Token = "0x400147D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject breakText;

	[Token(Token = "0x400147E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Image elementImage;

	[Token(Token = "0x400147F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<GameObject> buffIcons;

	[Token(Token = "0x6001525")]
	[Address(RVA = "0xCEE040", Offset = "0xCEE040", VA = "0xCEE040")]
	public void addBuffIcon(GlitchEffects buff)
	{
	}

	[Token(Token = "0x6001526")]
	[Address(RVA = "0xCEE2AC", Offset = "0xCEE2AC", VA = "0xCEE2AC")]
	public void updateBuffIcons(List<GlitchEffects> effects)
	{
	}

	[Token(Token = "0x6001527")]
	[Address(RVA = "0xCEE4B0", Offset = "0xCEE4B0", VA = "0xCEE4B0")]
	public void removeBuffIcon(string buffName)
	{
	}

	[Token(Token = "0x6001528")]
	[Address(RVA = "0xCEE6A8", Offset = "0xCEE6A8", VA = "0xCEE6A8")]
	public EnemyInfoCanvas()
	{
	}
}
[Token(Token = "0x2000425")]
public class PlayerOverworld : MonoBehaviour
{
	[Token(Token = "0x2000426")]
	[CompilerGenerated]
	private sealed class <deathAnimation>d__50 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40014A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerOverworld <>4__this;

		[Token(Token = "0x1700030F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001540")]
			[Address(RVA = "0xCF1788", Offset = "0xCF1788", VA = "0xCF1788", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000310")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001542")]
			[Address(RVA = "0xCF17D0", Offset = "0xCF17D0", VA = "0xCF17D0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600153D")]
		[Address(RVA = "0xCF134C", Offset = "0xCF134C", VA = "0xCF134C")]
		[DebuggerHidden]
		public <deathAnimation>d__50(int <>1__state)
		{
		}

		[Token(Token = "0x600153E")]
		[Address(RVA = "0xCF160C", Offset = "0xCF160C", VA = "0xCF160C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600153F")]
		[Address(RVA = "0xCF1610", Offset = "0xCF1610", VA = "0xCF1610", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001541")]
		[Address(RVA = "0xCF1790", Offset = "0xCF1790", VA = "0xCF1790", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("UI")]
	public GameObject UICanvas;

	[Token(Token = "0x4001481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject UIInventory;

	[Token(Token = "0x4001482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject UILoadout;

	[Token(Token = "0x4001483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public UIMenu UITabs;

	[Token(Token = "0x4001484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UIShop shop;

	[Token(Token = "0x4001485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UITaskMenu taskMenu;

	[Token(Token = "0x4001486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject cam;

	[Token(Token = "0x4001487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject floorTextPrefab;

	[Token(Token = "0x4001488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Animator UIHUDAnimator;

	[Token(Token = "0x4001489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[Header("Misc Assigns")]
	public static PlayerOverworld instance;

	[Token(Token = "0x400148A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject leftHand;

	[Token(Token = "0x400148B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject rightHand;

	[Token(Token = "0x400148C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject VRCameraRig;

	[Token(Token = "0x400148D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject pointerSphere;

	[Token(Token = "0x400148E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ThirdPersonCamFollow camFollow;

	[Token(Token = "0x400148F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject postProcessing;

	[Token(Token = "0x4001490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Animator loadingTextAnim;

	[Token(Token = "0x4001491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public TunnellingMobile tunneling;

	[Token(Token = "0x4001492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject firstEnemyAttacked;

	[Token(Token = "0x4001493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private UnityEngine.Vector3 originalCameraScale;

	[Token(Token = "0x4001494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private UnityEngine.Vector3 smallCameraScale;

	[Token(Token = "0x4001495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private UnityEngine.Vector3 preShrinkPosition;

	[Token(Token = "0x4001496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private Quaternion originalRotation;

	[Token(Token = "0x4001497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public OverworldPet activePet;

	[Token(Token = "0x4001498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Transform playerParentTransform;

	[Token(Token = "0x4001499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private GameObject currentFloorText;

	[Token(Token = "0x400149A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public OVRInputModule ovrInputModule;

	[Token(Token = "0x400149B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x400149C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[Header("Camera Rig Prefabs")]
	public GameObject OculusRig;

	[Token(Token = "0x400149D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Dictionary<int, string> skinDic;

	[Token(Token = "0x400149E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private bool isAlive;

	[Token(Token = "0x400149F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
	private bool _inFirstPerson;

	[Token(Token = "0x40014A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11A")]
	public bool lockPerspectiveSwap;

	[Token(Token = "0x1700030D")]
	public bool inFirstPerson
	{
		[Token(Token = "0x6001529")]
		[Address(RVA = "0xCEE724", Offset = "0xCEE724", VA = "0xCEE724")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700030E")]
	private bool canSwapPerspective
	{
		[Token(Token = "0x600152A")]
		[Address(RVA = "0xCEE72C", Offset = "0xCEE72C", VA = "0xCEE72C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600152B")]
	[Address(RVA = "0xCEE860", Offset = "0xCEE860", VA = "0xCEE860")]
	private void Awake()
	{
	}

	[Token(Token = "0x600152C")]
	[Address(RVA = "0xCEE99C", Offset = "0xCEE99C", VA = "0xCEE99C")]
	private void Start()
	{
	}

	[Token(Token = "0x600152D")]
	[Address(RVA = "0xCEF380", Offset = "0xCEF380", VA = "0xCEF380")]
	public void updatePlayerSkin()
	{
	}

	[Token(Token = "0x600152E")]
	[Address(RVA = "0xCEF284", Offset = "0xCEF284", VA = "0xCEF284")]
	public void updateHandedPointed()
	{
	}

	[Token(Token = "0x600152F")]
	[Address(RVA = "0xCEF160", Offset = "0xCEF160", VA = "0xCEF160")]
	public void loadCameraAngle()
	{
	}

	[Token(Token = "0x6001530")]
	[Address(RVA = "0xCEF6C0", Offset = "0xCEF6C0", VA = "0xCEF6C0")]
	public void resetCameraAngle()
	{
	}

	[Token(Token = "0x6001531")]
	[Address(RVA = "0xCEF7D0", Offset = "0xCEF7D0", VA = "0xCEF7D0")]
	public void playLevelUpEffect()
	{
	}

	[Token(Token = "0x6001532")]
	[Address(RVA = "0xCEF948", Offset = "0xCEF948", VA = "0xCEF948")]
	private void Update()
	{
	}

	[Token(Token = "0x6001533")]
	[Address(RVA = "0xCF06A0", Offset = "0xCF06A0", VA = "0xCF06A0")]
	public void displayFloorText()
	{
	}

	[Token(Token = "0x6001534")]
	[Address(RVA = "0xCF0EB8", Offset = "0xCF0EB8", VA = "0xCF0EB8")]
	public void swapToInventory()
	{
	}

	[Token(Token = "0x6001535")]
	[Address(RVA = "0xCF0EF0", Offset = "0xCF0EF0", VA = "0xCF0EF0")]
	public void swapToLoadout()
	{
	}

	[Token(Token = "0x6001536")]
	[Address(RVA = "0xCF0F28", Offset = "0xCF0F28", VA = "0xCF0F28")]
	public void dealDamageToPlayer(int damage)
	{
	}

	[Token(Token = "0x6001537")]
	[Address(RVA = "0xCF1270", Offset = "0xCF1270", VA = "0xCF1270")]
	public void killPlayer()
	{
	}

	[Token(Token = "0x6001538")]
	[Address(RVA = "0xCF12E4", Offset = "0xCF12E4", VA = "0xCF12E4")]
	[IteratorStateMachine(typeof(<deathAnimation>d__50))]
	private IEnumerator deathAnimation()
	{
		return null;
	}

	[Token(Token = "0x6001539")]
	[Address(RVA = "0xCF0358", Offset = "0xCF0358", VA = "0xCF0358")]
	public void switchToFPCam()
	{
	}

	[Token(Token = "0x600153A")]
	[Address(RVA = "0xCF0144", Offset = "0xCF0144", VA = "0xCF0144")]
	public void switchToTPCam(bool enableMovement = true)
	{
	}

	[Token(Token = "0x600153B")]
	[Address(RVA = "0xCF1374", Offset = "0xCF1374", VA = "0xCF1374")]
	public void unparentPlayer()
	{
	}

	[Token(Token = "0x600153C")]
	[Address(RVA = "0xCF139C", Offset = "0xCF139C", VA = "0xCF139C")]
	public PlayerOverworld()
	{
	}
}
[Token(Token = "0x2000427")]
public class UIButton : MonoBehaviour, ISelectHandler, IEventSystemHandler, IPointerEnterHandler
{
	[Token(Token = "0x2000428")]
	[CompilerGenerated]
	private sealed class <fadeIn>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UIButton <>4__this;

		[Token(Token = "0x17000311")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600154D")]
			[Address(RVA = "0xCF1D6C", Offset = "0xCF1D6C", VA = "0xCF1D6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000312")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600154F")]
			[Address(RVA = "0xCF1DB4", Offset = "0xCF1DB4", VA = "0xCF1DB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600154A")]
		[Address(RVA = "0xCF1A54", Offset = "0xCF1A54", VA = "0xCF1A54")]
		[DebuggerHidden]
		public <fadeIn>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600154B")]
		[Address(RVA = "0xCF1C94", Offset = "0xCF1C94", VA = "0xCF1C94", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0xCF1C98", Offset = "0xCF1C98", VA = "0xCF1C98", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0xCF1D74", Offset = "0xCF1D74", VA = "0xCF1D74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40014A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Button button;

	[Token(Token = "0x40014A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Image image;

	[Token(Token = "0x40014A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float startAlpha;

	[Token(Token = "0x40014A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Color btnCol;

	[Token(Token = "0x40014A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UnityEvent OnPointerEnterEvent;

	[Token(Token = "0x6001543")]
	[Address(RVA = "0xCF17D8", Offset = "0xCF17D8", VA = "0xCF17D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6001544")]
	[Address(RVA = "0xCF189C", Offset = "0xCF189C", VA = "0xCF189C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001545")]
	[Address(RVA = "0xCF19EC", Offset = "0xCF19EC", VA = "0xCF19EC")]
	[IteratorStateMachine(typeof(<fadeIn>d__7))]
	private IEnumerator fadeIn()
	{
		return null;
	}

	[Token(Token = "0x6001546")]
	[Address(RVA = "0xCF1A7C", Offset = "0xCF1A7C", VA = "0xCF1A7C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001547")]
	[Address(RVA = "0xCF1B28", Offset = "0xCF1B28", VA = "0xCF1B28", Slot = "4")]
	public void OnSelect(BaseEventData eventData)
	{
	}

	[Token(Token = "0x6001548")]
	[Address(RVA = "0xCF1B2C", Offset = "0xCF1B2C", VA = "0xCF1B2C", Slot = "5")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6001549")]
	[Address(RVA = "0xCF1C24", Offset = "0xCF1C24", VA = "0xCF1C24")]
	public UIButton()
	{
	}
}
[Token(Token = "0x2000429")]
public class UIFloorSelect : MonoBehaviour
{
	[Token(Token = "0x200042A")]
	[CompilerGenerated]
	private sealed class <warpTImer>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UIFloorSelect <>4__this;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string dungeonSaveString;

		[Token(Token = "0x17000313")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600155B")]
			[Address(RVA = "0xCF2828", Offset = "0xCF2828", VA = "0xCF2828", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000314")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600155D")]
			[Address(RVA = "0xCF2870", Offset = "0xCF2870", VA = "0xCF2870", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001558")]
		[Address(RVA = "0xCF22E4", Offset = "0xCF22E4", VA = "0xCF22E4")]
		[DebuggerHidden]
		public <warpTImer>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6001559")]
		[Address(RVA = "0xCF2314", Offset = "0xCF2314", VA = "0xCF2314", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600155A")]
		[Address(RVA = "0xCF2318", Offset = "0xCF2318", VA = "0xCF2318", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600155C")]
		[Address(RVA = "0xCF2830", Offset = "0xCF2830", VA = "0xCF2830", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40014AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool hasWarped;

	[Token(Token = "0x40014AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject warpMenu;

	[Token(Token = "0x40014AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] warpButtons;

	[Token(Token = "0x6001550")]
	[Address(RVA = "0xCF1DBC", Offset = "0xCF1DBC", VA = "0xCF1DBC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001551")]
	[Address(RVA = "0xCF1DC0", Offset = "0xCF1DC0", VA = "0xCF1DC0")]
	private int roundDown(int num)
	{
		return default(int);
	}

	[Token(Token = "0x6001552")]
	[Address(RVA = "0xCF1E3C", Offset = "0xCF1E3C", VA = "0xCF1E3C")]
	public void leaveWarp()
	{
	}

	[Token(Token = "0x6001553")]
	[Address(RVA = "0xCF1EC0", Offset = "0xCF1EC0", VA = "0xCF1EC0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001554")]
	[Address(RVA = "0xCF21A8", Offset = "0xCF21A8", VA = "0xCF21A8")]
	public void closeMenu()
	{
	}

	[Token(Token = "0x6001555")]
	[Address(RVA = "0xCF2240", Offset = "0xCF2240", VA = "0xCF2240")]
	public void loadDungeon(string dungeonSaveString)
	{
	}

	[Token(Token = "0x6001556")]
	[Address(RVA = "0xCF2270", Offset = "0xCF2270", VA = "0xCF2270")]
	[IteratorStateMachine(typeof(<warpTImer>d__9))]
	public IEnumerator warpTImer(string dungeonSaveString)
	{
		return null;
	}

	[Token(Token = "0x6001557")]
	[Address(RVA = "0xCF230C", Offset = "0xCF230C", VA = "0xCF230C")]
	public UIFloorSelect()
	{
	}
}
[Token(Token = "0x200042B")]
public class UIIntroMenu : MonoBehaviour
{
	[Token(Token = "0x200042C")]
	[CompilerGenerated]
	private sealed class <exitTimer>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000315")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600157D")]
			[Address(RVA = "0xCF52B8", Offset = "0xCF52B8", VA = "0xCF52B8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000316")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600157F")]
			[Address(RVA = "0xCF5300", Offset = "0xCF5300", VA = "0xCF5300", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600157A")]
		[Address(RVA = "0xCF2EE0", Offset = "0xCF2EE0", VA = "0xCF2EE0")]
		[DebuggerHidden]
		public <exitTimer>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x600157B")]
		[Address(RVA = "0xCF5218", Offset = "0xCF5218", VA = "0xCF5218", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600157C")]
		[Address(RVA = "0xCF521C", Offset = "0xCF521C", VA = "0xCF521C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600157E")]
		[Address(RVA = "0xCF52C0", Offset = "0xCF52C0", VA = "0xCF52C0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200042D")]
	[CompilerGenerated]
	private sealed class <StartTimer>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UIIntroMenu <>4__this;

		[Token(Token = "0x17000317")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001583")]
			[Address(RVA = "0xCF58A8", Offset = "0xCF58A8", VA = "0xCF58A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000318")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001585")]
			[Address(RVA = "0xCF58F0", Offset = "0xCF58F0", VA = "0xCF58F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001580")]
		[Address(RVA = "0xCF3E94", Offset = "0xCF3E94", VA = "0xCF3E94")]
		[DebuggerHidden]
		public <StartTimer>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x6001581")]
		[Address(RVA = "0xCF5308", Offset = "0xCF5308", VA = "0xCF5308", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001582")]
		[Address(RVA = "0xCF530C", Offset = "0xCF530C", VA = "0xCF530C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001584")]
		[Address(RVA = "0xCF58B0", Offset = "0xCF58B0", VA = "0xCF58B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40014B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject skipTutorialPrompt;

	[Token(Token = "0x40014B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject deleteFilePrompt;

	[Token(Token = "0x40014B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject loadingPrompt;

	[Token(Token = "0x40014B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject fileSelectScreen;

	[Token(Token = "0x40014B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject difficultyScreen;

	[Token(Token = "0x40014B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject keyboard;

	[Token(Token = "0x40014B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject notEntitledScreen;

	[Token(Token = "0x40014BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject challengeModeScreen;

	[Token(Token = "0x40014BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject selectSprite;

	[Token(Token = "0x40014BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject debugModeOn;

	[Token(Token = "0x40014BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject[] selectPoses;

	[Token(Token = "0x40014BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text versionText;

	[Token(Token = "0x40014BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text[] fileClassText;

	[Token(Token = "0x40014C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Text[] fileLvlText;

	[Token(Token = "0x40014C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text[] fileNameText;

	[Token(Token = "0x40014C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Text[] difficultyNameText;

	[Token(Token = "0x40014C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Text nameField;

	[Token(Token = "0x40014C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject demoText;

	[Token(Token = "0x40014C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float cheatTimer;

	[Token(Token = "0x40014C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float reqCheatTimer;

	[Token(Token = "0x40014C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Dropdown dropdown;

	[Token(Token = "0x40014C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public int challengeModeSelected;

	[Token(Token = "0x40014C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public ArcaxerClass[] challengeClasses;

	[Token(Token = "0x40014CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject bHapticsButton;

	[Token(Token = "0x600155E")]
	[Address(RVA = "0xCF2878", Offset = "0xCF2878", VA = "0xCF2878")]
	private void Awake()
	{
	}

	[Token(Token = "0x600155F")]
	[Address(RVA = "0xCF2AE0", Offset = "0xCF2AE0", VA = "0xCF2AE0")]
	private void getUserCallback(Message<User> msg)
	{
	}

	[Token(Token = "0x6001560")]
	[Address(RVA = "0xCF2BBC", Offset = "0xCF2BBC", VA = "0xCF2BBC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001561")]
	[Address(RVA = "0xCF2DDC", Offset = "0xCF2DDC", VA = "0xCF2DDC")]
	private void EntitlementCallback(Message msg)
	{
	}

	[Token(Token = "0x6001562")]
	[Address(RVA = "0xCF2E80", Offset = "0xCF2E80", VA = "0xCF2E80")]
	[IteratorStateMachine(typeof(<exitTimer>d__28))]
	private IEnumerator exitTimer()
	{
		return null;
	}

	[Token(Token = "0x6001563")]
	[Address(RVA = "0xCF2F08", Offset = "0xCF2F08", VA = "0xCF2F08")]
	public void playHapticStart()
	{
	}

	[Token(Token = "0x6001564")]
	[Address(RVA = "0xCF2FA8", Offset = "0xCF2FA8", VA = "0xCF2FA8")]
	private void Update()
	{
	}

	[Token(Token = "0x6001565")]
	[Address(RVA = "0xCF3288", Offset = "0xCF3288", VA = "0xCF3288")]
	public void moveSelectSprite(int pos)
	{
	}

	[Token(Token = "0x6001566")]
	[Address(RVA = "0xCF3300", Offset = "0xCF3300", VA = "0xCF3300")]
	public void newGamePressed()
	{
	}

	[Token(Token = "0x6001567")]
	[Address(RVA = "0xCF3320", Offset = "0xCF3320", VA = "0xCF3320")]
	public void playStorypressed()
	{
	}

	[Token(Token = "0x6001568")]
	[Address(RVA = "0xCF2D74", Offset = "0xCF2D74", VA = "0xCF2D74")]
	[IteratorStateMachine(typeof(<StartTimer>d__34))]
	private IEnumerator StartTimer()
	{
		return null;
	}

	[Token(Token = "0x6001569")]
	[Address(RVA = "0xCF3EBC", Offset = "0xCF3EBC", VA = "0xCF3EBC")]
	private static void LocaleSelected(int index)
	{
	}

	[Token(Token = "0x600156A")]
	[Address(RVA = "0xCF3394", Offset = "0xCF3394", VA = "0xCF3394")]
	public void updateFileSelectScreen()
	{
	}

	[Token(Token = "0x600156B")]
	[Address(RVA = "0xCF3FC4", Offset = "0xCF3FC4", VA = "0xCF3FC4")]
	public void translateAndSetString(string s, Text textToChange)
	{
	}

	[Token(Token = "0x600156C")]
	[Address(RVA = "0xCF4224", Offset = "0xCF4224", VA = "0xCF4224")]
	public void selectSaveFile(int file)
	{
	}

	[Token(Token = "0x600156D")]
	[Address(RVA = "0xCF4348", Offset = "0xCF4348", VA = "0xCF4348")]
	public void loadGamePressed()
	{
	}

	[Token(Token = "0x600156E")]
	[Address(RVA = "0xCF4648", Offset = "0xCF4648", VA = "0xCF4648")]
	public void loadNewGame()
	{
	}

	[Token(Token = "0x600156F")]
	[Address(RVA = "0xCF46B4", Offset = "0xCF46B4", VA = "0xCF46B4")]
	public void deleteButtonPressed(int file)
	{
	}

	[Token(Token = "0x6001570")]
	[Address(RVA = "0xCF4760", Offset = "0xCF4760", VA = "0xCF4760")]
	public void deleteFileYesPressed()
	{
	}

	[Token(Token = "0x6001571")]
	[Address(RVA = "0xCF4904", Offset = "0xCF4904", VA = "0xCF4904")]
	public void deleteFileNoPressed()
	{
	}

	[Token(Token = "0x6001572")]
	[Address(RVA = "0xCF4970", Offset = "0xCF4970", VA = "0xCF4970")]
	public void backFromFileSelectPressed()
	{
	}

	[Token(Token = "0x6001573")]
	[Address(RVA = "0xCF49DC", Offset = "0xCF49DC", VA = "0xCF49DC")]
	public void tutorialSkipPressed()
	{
	}

	[Token(Token = "0x6001574")]
	[Address(RVA = "0xCF4AB4", Offset = "0xCF4AB4", VA = "0xCF4AB4")]
	public void namesubmitpressed()
	{
	}

	[Token(Token = "0x6001575")]
	[Address(RVA = "0xCF4D98", Offset = "0xCF4D98", VA = "0xCF4D98")]
	public void difficultyChosepressed(int num)
	{
	}

	[Token(Token = "0x6001576")]
	[Address(RVA = "0xCF4E34", Offset = "0xCF4E34", VA = "0xCF4E34")]
	public void challengeModePressed(int mode)
	{
	}

	[Token(Token = "0x6001577")]
	[Address(RVA = "0xCF5118", Offset = "0xCF5118", VA = "0xCF5118")]
	public void tutorialSkipNoPressed()
	{
	}

	[Token(Token = "0x6001578")]
	[Address(RVA = "0xCF51AC", Offset = "0xCF51AC", VA = "0xCF51AC")]
	public void quitPressed()
	{
	}

	[Token(Token = "0x6001579")]
	[Address(RVA = "0xCF5208", Offset = "0xCF5208", VA = "0xCF5208")]
	public UIIntroMenu()
	{
	}
}
[Token(Token = "0x2000432")]
public class UIInventory : MonoBehaviour
{
	[Token(Token = "0x40014DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIInventory instance;

	[Token(Token = "0x40014DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject UIItemPrefab;

	[Token(Token = "0x40014DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform UIItemSpawn;

	[Token(Token = "0x40014DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Item.ItemType currentItemTabType;

	[Token(Token = "0x40014DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject weaponEquipPrompt;

	[Token(Token = "0x40014E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject tossItemPrompt;

	[Token(Token = "0x40014E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text tossItemPromptText;

	[Token(Token = "0x40014E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text tossItemQuantText;

	[Token(Token = "0x40014E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text tossButtonText;

	[Token(Token = "0x40014E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int tossItemQuantity;

	[Token(Token = "0x40014E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text creditsText;

	[Token(Token = "0x40014E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text sellValueText;

	[Token(Token = "0x40014E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text itemDescriptionText;

	[Token(Token = "0x40014E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text topText;

	[Token(Token = "0x40014E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Text bottomText;

	[Token(Token = "0x40014EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text hatText;

	[Token(Token = "0x40014EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Text weaponLText;

	[Token(Token = "0x40014EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Text weaponRText;

	[Token(Token = "0x40014ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Text AccessoryText;

	[Token(Token = "0x40014EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Image headEquipImg;

	[Token(Token = "0x40014EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Image topEquipImg;

	[Token(Token = "0x40014F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Image bottomEquipImg;

	[Token(Token = "0x40014F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Image weaponLImg;

	[Token(Token = "0x40014F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Image weaponRImg;

	[Token(Token = "0x40014F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Image accessoryImg;

	[Token(Token = "0x40014F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject tabIndicator;

	[Token(Token = "0x40014F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject useButton;

	[Token(Token = "0x40014F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject tossButton;

	[Token(Token = "0x40014F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Transform[] tabIndicatorZones;

	[Token(Token = "0x40014F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public GameObject tokenParent;

	[Token(Token = "0x40014F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Text tokenText;

	[Token(Token = "0x40014FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public int currentlySelectedItem;

	[Token(Token = "0x600158F")]
	[Address(RVA = "0xCF5C60", Offset = "0xCF5C60", VA = "0xCF5C60")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001590")]
	[Address(RVA = "0xCF5E7C", Offset = "0xCF5E7C", VA = "0xCF5E7C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001591")]
	[Address(RVA = "0xCF6BF8", Offset = "0xCF6BF8", VA = "0xCF6BF8")]
	public void changeSelectedItem(int num)
	{
	}

	[Token(Token = "0x6001592")]
	[Address(RVA = "0xCF71B4", Offset = "0xCF71B4", VA = "0xCF71B4")]
	public void useItem()
	{
	}

	[Token(Token = "0x6001593")]
	[Address(RVA = "0xCF7480", Offset = "0xCF7480", VA = "0xCF7480")]
	public void sortItemsByName()
	{
	}

	[Token(Token = "0x6001594")]
	[Address(RVA = "0xCF761C", Offset = "0xCF761C", VA = "0xCF761C")]
	public void sortItemsByValue()
	{
	}

	[Token(Token = "0x6001595")]
	[Address(RVA = "0xCF77B8", Offset = "0xCF77B8", VA = "0xCF77B8")]
	public void sortItemsByRarity()
	{
	}

	[Token(Token = "0x6001596")]
	[Address(RVA = "0xCF7954", Offset = "0xCF7954", VA = "0xCF7954")]
	public void tossItem()
	{
	}

	[Token(Token = "0x6001597")]
	[Address(RVA = "0xCF7CB8", Offset = "0xCF7CB8", VA = "0xCF7CB8")]
	public void changeTossQuantity(bool increase)
	{
	}

	[Token(Token = "0x6001598")]
	[Address(RVA = "0xCF736C", Offset = "0xCF736C", VA = "0xCF736C")]
	private void resetItemSelection()
	{
	}

	[Token(Token = "0x6001599")]
	[Address(RVA = "0xCF7E08", Offset = "0xCF7E08", VA = "0xCF7E08")]
	public void tossItemPressed()
	{
	}

	[Token(Token = "0x600159A")]
	[Address(RVA = "0xCF8100", Offset = "0xCF8100", VA = "0xCF8100")]
	public void tossItemCancelPressed()
	{
	}

	[Token(Token = "0x600159B")]
	[Address(RVA = "0xCF8120", Offset = "0xCF8120", VA = "0xCF8120")]
	public void equipWeapon(bool isRight)
	{
	}

	[Token(Token = "0x600159C")]
	[Address(RVA = "0xCF8324", Offset = "0xCF8324", VA = "0xCF8324")]
	public void switchTextColorToRarity(Text text, Item.ItemRarity rarity)
	{
	}

	[Token(Token = "0x600159D")]
	[Address(RVA = "0xCF5E80", Offset = "0xCF5E80", VA = "0xCF5E80")]
	public void refreshItemList()
	{
	}

	[Token(Token = "0x600159E")]
	[Address(RVA = "0xCF8438", Offset = "0xCF8438", VA = "0xCF8438")]
	public void showEquipInfo(string slot)
	{
	}

	[Token(Token = "0x600159F")]
	[Address(RVA = "0xCF86AC", Offset = "0xCF86AC", VA = "0xCF86AC")]
	public void switchItemTab(string type)
	{
	}

	[Token(Token = "0x60015A0")]
	[Address(RVA = "0xCF8834", Offset = "0xCF8834", VA = "0xCF8834")]
	public UIInventory()
	{
	}
}
[Token(Token = "0x2000434")]
public class UIItemButton : MonoBehaviour
{
	[Token(Token = "0x40014FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text titleText;

	[Token(Token = "0x4001500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text quantityText;

	[Token(Token = "0x4001501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string descriptionText;

	[Token(Token = "0x4001502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Image itemImage;

	[Token(Token = "0x4001503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int itemInventoryIndex;

	[Token(Token = "0x60015A6")]
	[Address(RVA = "0xCF8904", Offset = "0xCF8904", VA = "0xCF8904")]
	private void Start()
	{
	}

	[Token(Token = "0x60015A7")]
	[Address(RVA = "0xCF89D0", Offset = "0xCF89D0", VA = "0xCF89D0")]
	public void showItemInfo()
	{
	}

	[Token(Token = "0x60015A8")]
	[Address(RVA = "0xCF8A3C", Offset = "0xCF8A3C", VA = "0xCF8A3C")]
	public void buttonPressed()
	{
	}

	[Token(Token = "0x60015A9")]
	[Address(RVA = "0xCF8A94", Offset = "0xCF8A94", VA = "0xCF8A94")]
	public UIItemButton()
	{
	}
}
[Token(Token = "0x2000435")]
public class UILoadout : MonoBehaviour
{
	[Token(Token = "0x4001504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UILoadout instance;

	[Token(Token = "0x4001505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Stat Text")]
	public Text nameText;

	[Token(Token = "0x4001506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text levelText;

	[Token(Token = "0x4001507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text powerText;

	[Token(Token = "0x4001508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text maxApText;

	[Token(Token = "0x4001509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text defenseText;

	[Token(Token = "0x400150A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text speedText;

	[Token(Token = "0x400150B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Text runSpeedText;

	[Token(Token = "0x400150C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text critChanceText;

	[Token(Token = "0x400150D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text critDamageText;

	[Token(Token = "0x400150E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text difficultyText;

	[Token(Token = "0x400150F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text spellDexcriptionText;

	[Token(Token = "0x4001510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text classText;

	[Token(Token = "0x4001511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text CPText;

	[Token(Token = "0x4001512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Header("Status bars")]
	public UIBar healthBar;

	[Token(Token = "0x4001513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public UIBar expBar;

	[Token(Token = "0x4001514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("Spell Inventory Stuff")]
	public UISpellButton spellButtonPrefab;

	[Token(Token = "0x4001515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Transform UISpellSpawn;

	[Token(Token = "0x4001516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private List<GameObject> currentDisplayedSpellButtons;

	[Token(Token = "0x4001517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public UISpellSelectButton[] rightHandButtons;

	[Token(Token = "0x4001518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public UISpellSelectButton[] leftHandButtons;

	[Token(Token = "0x4001519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public UISpellSelectButton defensiveButtonL;

	[Token(Token = "0x400151A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject selectSprite;

	[Token(Token = "0x400151B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Sprite FemaleProfile;

	[Token(Token = "0x400151C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Image profilePicture;

	[Token(Token = "0x400151D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private int selectedSpellIndex;

	[Token(Token = "0x400151E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private bool selectedRightHand;

	[Token(Token = "0x400151F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDD")]
	private bool selectedDefensive;

	[Token(Token = "0x60015AA")]
	[Address(RVA = "0xCF8A9C", Offset = "0xCF8A9C", VA = "0xCF8A9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60015AB")]
	[Address(RVA = "0xCF8AE8", Offset = "0xCF8AE8", VA = "0xCF8AE8")]
	private void Start()
	{
	}

	[Token(Token = "0x60015AC")]
	[Address(RVA = "0xCF932C", Offset = "0xCF932C", VA = "0xCF932C")]
	private void Update()
	{
	}

	[Token(Token = "0x60015AD")]
	[Address(RVA = "0xCF9330", Offset = "0xCF9330", VA = "0xCF9330")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60015AE")]
	[Address(RVA = "0xCF8AEC", Offset = "0xCF8AEC", VA = "0xCF8AEC")]
	public void updateLoadoutInfo()
	{
	}

	[Token(Token = "0x60015AF")]
	[Address(RVA = "0xCF9348", Offset = "0xCF9348", VA = "0xCF9348")]
	public void updateSpellInventory()
	{
	}

	[Token(Token = "0x60015B0")]
	[Address(RVA = "0xCF9D94", Offset = "0xCF9D94", VA = "0xCF9D94")]
	public void changeSelectedHand(bool right, int index)
	{
	}

	[Token(Token = "0x60015B1")]
	[Address(RVA = "0xCF9E7C", Offset = "0xCF9E7C", VA = "0xCF9E7C")]
	public void changeSelectHandDefensive(bool right)
	{
	}

	[Token(Token = "0x60015B2")]
	[Address(RVA = "0xCF9E88", Offset = "0xCF9E88", VA = "0xCF9E88")]
	public void changeEquippedSpell(int index)
	{
	}

	[Token(Token = "0x60015B3")]
	[Address(RVA = "0xCFA17C", Offset = "0xCFA17C", VA = "0xCFA17C")]
	public void changeEquippedSpellDefensive(int index)
	{
	}

	[Token(Token = "0x60015B4")]
	[Address(RVA = "0xCFA378", Offset = "0xCFA378", VA = "0xCFA378")]
	public UILoadout()
	{
	}
}
[Token(Token = "0x2000437")]
public class UIOptions : MonoBehaviour
{
	[Token(Token = "0x4001521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Toggle comfortToggle;

	[Token(Token = "0x4001522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Toggle hapticFeebackToggle;

	[Token(Token = "0x4001523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Toggle cameraTurnToggle;

	[Token(Token = "0x4001524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Toggle smoothTurnToggle;

	[Token(Token = "0x4001525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Toggle leftHandToggle;

	[Token(Token = "0x4001526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Toggle postProcessingToggle;

	[Token(Token = "0x4001527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Toggle MRToggle;

	[Token(Token = "0x4001528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Toggle MRToggleBattle;

	[Token(Token = "0x4001529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Slider masterVolume;

	[Token(Token = "0x400152A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Slider musicVolume;

	[Token(Token = "0x400152B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Slider sfxVolume;

	[Token(Token = "0x400152C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Slider voiceVolume;

	[Token(Token = "0x400152D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Slider voiceAssistantVolume;

	[Token(Token = "0x400152E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Dropdown skinDropdown;

	[Token(Token = "0x400152F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject extraSettings;

	[Token(Token = "0x4001530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject experimentalSettings;

	[Token(Token = "0x4001531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Dictionary<string, int> skinDic;

	[Token(Token = "0x60015B7")]
	[Address(RVA = "0xCFA484", Offset = "0xCFA484", VA = "0xCFA484")]
	public void quitGamePressed()
	{
	}

	[Token(Token = "0x60015B8")]
	[Address(RVA = "0xCFA4EC", Offset = "0xCFA4EC", VA = "0xCFA4EC")]
	private void Start()
	{
	}

	[Token(Token = "0x60015B9")]
	[Address(RVA = "0xCFA900", Offset = "0xCFA900", VA = "0xCFA900")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60015BA")]
	[Address(RVA = "0xCFAB54", Offset = "0xCFAB54", VA = "0xCFAB54")]
	public void toggleComfort()
	{
	}

	[Token(Token = "0x60015BB")]
	[Address(RVA = "0xCFAC2C", Offset = "0xCFAC2C", VA = "0xCFAC2C")]
	public void updateSkin()
	{
	}

	[Token(Token = "0x60015BC")]
	[Address(RVA = "0xCFAD2C", Offset = "0xCFAD2C", VA = "0xCFAD2C")]
	public void toggleSmoothTurn()
	{
	}

	[Token(Token = "0x60015BD")]
	[Address(RVA = "0xCFADA4", Offset = "0xCFADA4", VA = "0xCFADA4")]
	public void toggleLeftHanded()
	{
	}

	[Token(Token = "0x60015BE")]
	[Address(RVA = "0xCFAE40", Offset = "0xCFAE40", VA = "0xCFAE40")]
	public void toggleCameraTurn()
	{
	}

	[Token(Token = "0x60015BF")]
	[Address(RVA = "0xCFAEB8", Offset = "0xCFAEB8", VA = "0xCFAEB8")]
	public void toggleHaptics()
	{
	}

	[Token(Token = "0x60015C0")]
	[Address(RVA = "0xCFAF30", Offset = "0xCFAF30", VA = "0xCFAF30")]
	public void togglePostProcessing()
	{
	}

	[Token(Token = "0x60015C1")]
	[Address(RVA = "0xCFB008", Offset = "0xCFB008", VA = "0xCFB008")]
	public void togglemixedReality()
	{
	}

	[Token(Token = "0x60015C2")]
	[Address(RVA = "0xCFB198", Offset = "0xCFB198", VA = "0xCFB198")]
	public void togglemixedRealityBattle()
	{
	}

	[Token(Token = "0x60015C3")]
	[Address(RVA = "0xCFB210", Offset = "0xCFB210", VA = "0xCFB210")]
	public void OnSliderChange(int slider)
	{
	}

	[Token(Token = "0x60015C4")]
	[Address(RVA = "0xCFB598", Offset = "0xCFB598", VA = "0xCFB598")]
	public void returnToTitle()
	{
	}

	[Token(Token = "0x60015C5")]
	[Address(RVA = "0xCFB63C", Offset = "0xCFB63C", VA = "0xCFB63C")]
	public void StartNewGamePlus()
	{
	}

	[Token(Token = "0x60015C6")]
	[Address(RVA = "0xCFB768", Offset = "0xCFB768", VA = "0xCFB768")]
	public UIOptions()
	{
	}
}
[Token(Token = "0x2000438")]
public class UIPassiveButton : MonoBehaviour
{
	[Token(Token = "0x4001532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text titleText;

	[Token(Token = "0x4001533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text costText;

	[Token(Token = "0x4001534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string descriptionText;

	[Token(Token = "0x4001535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Image abilityImage;

	[Token(Token = "0x4001536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int abilityInevntoryIndex;

	[Token(Token = "0x4001537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ToJOutline outline;

	[Token(Token = "0x4001538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GradientColor textOutline;

	[Token(Token = "0x4001539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int btnNum;

	[Token(Token = "0x60015C7")]
	[Address(RVA = "0xCFBB08", Offset = "0xCFBB08", VA = "0xCFBB08")]
	private void Start()
	{
	}

	[Token(Token = "0x60015C8")]
	[Address(RVA = "0xCFBB0C", Offset = "0xCFBB0C", VA = "0xCFBB0C")]
	public void showItemInfo()
	{
	}

	[Token(Token = "0x60015C9")]
	[Address(RVA = "0xCFBBC0", Offset = "0xCFBBC0", VA = "0xCFBBC0")]
	public void buttonPressed()
	{
	}

	[Token(Token = "0x60015CA")]
	[Address(RVA = "0xCFBCCC", Offset = "0xCFBCCC", VA = "0xCFBCCC")]
	public UIPassiveButton()
	{
	}
}
[Token(Token = "0x2000439")]
public class UIPassiveMenu : MonoBehaviour
{
	[Token(Token = "0x400153A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject UIPassivePrefab;

	[Token(Token = "0x400153B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform UIPassiveSpawn;

	[Token(Token = "0x400153C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text ppText;

	[Token(Token = "0x400153D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text abilityNameText;

	[Token(Token = "0x400153E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text abilityDescriptionText;

	[Token(Token = "0x400153F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UIPassiveButton currentButton;

	[Token(Token = "0x4001540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<GameObject> currentDisplayedAbilityButtons;

	[Token(Token = "0x4001541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int currentlySelectedItem;

	[Token(Token = "0x4001542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIPassiveMenu instance;

	[Token(Token = "0x60015CB")]
	[Address(RVA = "0xCFBCD4", Offset = "0xCFBCD4", VA = "0xCFBCD4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60015CC")]
	[Address(RVA = "0xCFC790", Offset = "0xCFC790", VA = "0xCFC790")]
	private void Awake()
	{
	}

	[Token(Token = "0x60015CD")]
	[Address(RVA = "0xCFC7DC", Offset = "0xCFC7DC", VA = "0xCFC7DC")]
	public void equipPassiveAbility()
	{
	}

	[Token(Token = "0x60015CE")]
	[Address(RVA = "0xCFCC20", Offset = "0xCFCC20", VA = "0xCFCC20")]
	public void unequipPassiveAbility()
	{
	}

	[Token(Token = "0x60015CF")]
	[Address(RVA = "0xCFBCD8", Offset = "0xCFBCD8", VA = "0xCFBCD8")]
	public void refreshAbilityList()
	{
	}

	[Token(Token = "0x60015D0")]
	[Address(RVA = "0xCFCF88", Offset = "0xCFCF88", VA = "0xCFCF88")]
	public UIPassiveMenu()
	{
	}
}
[Token(Token = "0x200043A")]
public class UIScaleAnimator : MonoBehaviour
{
	[Token(Token = "0x4001543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Vector3 startScale;

	[Token(Token = "0x4001544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool goBig;

	[Token(Token = "0x4001545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float timer;

	[Token(Token = "0x60015D1")]
	[Address(RVA = "0xCFD00C", Offset = "0xCFD00C", VA = "0xCFD00C")]
	private void Start()
	{
	}

	[Token(Token = "0x60015D2")]
	[Address(RVA = "0xCFD03C", Offset = "0xCFD03C", VA = "0xCFD03C")]
	private void Update()
	{
	}

	[Token(Token = "0x60015D3")]
	[Address(RVA = "0xCFD15C", Offset = "0xCFD15C", VA = "0xCFD15C")]
	public UIScaleAnimator()
	{
	}
}
[Token(Token = "0x200043B")]
public class UIShop : MonoBehaviour
{
	[Token(Token = "0x4001546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject UIItemPrefab;

	[Token(Token = "0x4001547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform UIItemSpawn;

	[Token(Token = "0x4001548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text creditsText;

	[Token(Token = "0x4001549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text itemDescriptionText;

	[Token(Token = "0x400154A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public NPCOverworld npc;

	[Token(Token = "0x400154B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ScrollRect itemScrollRect;

	[Token(Token = "0x400154C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform infoTextSpawn;

	[Token(Token = "0x400154D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject infoTextPrefab;

	[Token(Token = "0x400154E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject tokenSprite;

	[Token(Token = "0x400154F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject[] stockButtons;

	[Token(Token = "0x4001550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int currentStockTab;

	[Token(Token = "0x4001551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public EventSystem eventSystem;

	[Token(Token = "0x4001552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float idleTimer;

	[Token(Token = "0x4001553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float idleTimeLimit;

	[Token(Token = "0x4001554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool firstBuy;

	[Token(Token = "0x4001555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<GameObject> currentDisplayedItemButtons;

	[Token(Token = "0x4001556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public int currentlySelectedItem;

	[Token(Token = "0x60015D4")]
	[Address(RVA = "0xCFD16C", Offset = "0xCFD16C", VA = "0xCFD16C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60015D5")]
	[Address(RVA = "0xCFD524", Offset = "0xCFD524", VA = "0xCFD524")]
	private void Update()
	{
	}

	[Token(Token = "0x60015D6")]
	[Address(RVA = "0xCFD574", Offset = "0xCFD574", VA = "0xCFD574")]
	private void spawnInfoText(string text)
	{
	}

	[Token(Token = "0x60015D7")]
	[Address(RVA = "0xCFD440", Offset = "0xCFD440", VA = "0xCFD440")]
	public void switchStockTab(int tab)
	{
	}

	[Token(Token = "0x60015D8")]
	[Address(RVA = "0xCFD2FC", Offset = "0xCFD2FC", VA = "0xCFD2FC")]
	public void updateStockTabButtons()
	{
	}

	[Token(Token = "0x60015D9")]
	[Address(RVA = "0xCFDFA8", Offset = "0xCFDFA8", VA = "0xCFDFA8")]
	public void changeSelectedItem(int num)
	{
	}

	[Token(Token = "0x60015DA")]
	[Address(RVA = "0xCFE398", Offset = "0xCFE398", VA = "0xCFE398")]
	public void buyItem()
	{
	}

	[Token(Token = "0x60015DB")]
	[Address(RVA = "0xCFE6E4", Offset = "0xCFE6E4", VA = "0xCFE6E4")]
	public void sellAllTrash()
	{
	}

	[Token(Token = "0x60015DC")]
	[Address(RVA = "0xCFE99C", Offset = "0xCFE99C", VA = "0xCFE99C")]
	public void sellAllDupes()
	{
	}

	[Token(Token = "0x60015DD")]
	[Address(RVA = "0xCFEDD8", Offset = "0xCFEDD8", VA = "0xCFEDD8")]
	public void closeShop()
	{
	}

	[Token(Token = "0x60015DE")]
	[Address(RVA = "0xCFDEEC", Offset = "0xCFDEEC", VA = "0xCFDEEC")]
	private void clearSelection()
	{
	}

	[Token(Token = "0x60015DF")]
	[Address(RVA = "0xCFD744", Offset = "0xCFD744", VA = "0xCFD744")]
	public void refreshItemList()
	{
	}

	[Token(Token = "0x60015E0")]
	[Address(RVA = "0xCFEF44", Offset = "0xCFEF44", VA = "0xCFEF44")]
	public UIShop()
	{
	}
}
[Token(Token = "0x200043C")]
public class UIShopItemButton : MonoBehaviour
{
	[Token(Token = "0x4001557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text titleText;

	[Token(Token = "0x4001558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text valueText;

	[Token(Token = "0x4001559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string descriptionText;

	[Token(Token = "0x400155A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Image itemImage;

	[Token(Token = "0x400155B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int itemInventoryIndex;

	[Token(Token = "0x400155C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UIShop shop;

	[Token(Token = "0x60015E1")]
	[Address(RVA = "0xCFEFD0", Offset = "0xCFEFD0", VA = "0xCFEFD0")]
	public void showItemInfo()
	{
	}

	[Token(Token = "0x60015E2")]
	[Address(RVA = "0xCFF004", Offset = "0xCFF004", VA = "0xCFF004")]
	public void buttonPressed()
	{
	}

	[Token(Token = "0x60015E3")]
	[Address(RVA = "0xCFF028", Offset = "0xCFF028", VA = "0xCFF028")]
	public UIShopItemButton()
	{
	}
}
[Token(Token = "0x200043D")]
public class UISpellButton : MonoBehaviour
{
	[Token(Token = "0x400155D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text titleText;

	[Token(Token = "0x400155E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text spellLevelText;

	[Token(Token = "0x400155F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text spellExpText;

	[Token(Token = "0x4001560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string descriptionText;

	[Token(Token = "0x4001561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Image spellImage;

	[Token(Token = "0x4001562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int spellInventoryIndex;

	[Token(Token = "0x60015E4")]
	[Address(RVA = "0xCFF030", Offset = "0xCFF030", VA = "0xCFF030")]
	public void showSpellInfo()
	{
	}

	[Token(Token = "0x60015E5")]
	[Address(RVA = "0xCFF034", Offset = "0xCFF034", VA = "0xCFF034")]
	public void buttonPressed()
	{
	}

	[Token(Token = "0x60015E6")]
	[Address(RVA = "0xCFF448", Offset = "0xCFF448", VA = "0xCFF448")]
	public UISpellButton()
	{
	}
}
[Token(Token = "0x200043E")]
public class UISpellSelectButton : MonoBehaviour
{
	[Token(Token = "0x4001563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int index;

	[Token(Token = "0x4001564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isRightHand;

	[Token(Token = "0x4001565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image icon;

	[Token(Token = "0x4001566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform selectSpriteLocation;

	[Token(Token = "0x60015E7")]
	[Address(RVA = "0xCFF450", Offset = "0xCFF450", VA = "0xCFF450")]
	public void buttonPressed()
	{
	}

	[Token(Token = "0x60015E8")]
	[Address(RVA = "0xCFF4F8", Offset = "0xCFF4F8", VA = "0xCFF4F8")]
	public void buttonPressedDefensive()
	{
	}

	[Token(Token = "0x60015E9")]
	[Address(RVA = "0xCFF59C", Offset = "0xCFF59C", VA = "0xCFF59C")]
	public UISpellSelectButton()
	{
	}
}
[Token(Token = "0x200043F")]
public class UITaskButton : MonoBehaviour
{
	[Token(Token = "0x4001567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text questNameText;

	[Token(Token = "0x4001568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Image iconImage;

	[Token(Token = "0x4001569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Image completedImage;

	[Token(Token = "0x400156A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SideQuest quest;

	[Token(Token = "0x60015EA")]
	[Address(RVA = "0xCFF5AC", Offset = "0xCFF5AC", VA = "0xCFF5AC")]
	public void onClick()
	{
	}

	[Token(Token = "0x60015EB")]
	[Address(RVA = "0xCFF750", Offset = "0xCFF750", VA = "0xCFF750")]
	public UITaskButton()
	{
	}
}
[Token(Token = "0x2000440")]
public class UITaskMenu : MonoBehaviour
{
	[Token(Token = "0x400156B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text questDescriptionText;

	[Token(Token = "0x400156C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text questRewardText;

	[Token(Token = "0x400156D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SideQuest[] quests;

	[Token(Token = "0x400156E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform UIQuestSpawn;

	[Token(Token = "0x400156F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public NPCOverworld npc;

	[Token(Token = "0x4001570")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public UITaskButton taskButtonPrefab;

	[Token(Token = "0x4001571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SideQuest currentlySelectedQuest;

	[Token(Token = "0x4001572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public UITaskButton selectedButton;

	[Token(Token = "0x4001573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject completeButton;

	[Token(Token = "0x4001574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public EventSystem eventSystem;

	[Token(Token = "0x4001575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UITaskMenu instance;

	[Token(Token = "0x60015EC")]
	[Address(RVA = "0xCFF758", Offset = "0xCFF758", VA = "0xCFF758")]
	private void Awake()
	{
	}

	[Token(Token = "0x60015ED")]
	[Address(RVA = "0xCFF7A4", Offset = "0xCFF7A4", VA = "0xCFF7A4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60015EE")]
	[Address(RVA = "0xD000C8", Offset = "0xD000C8", VA = "0xD000C8")]
	public void closeTaskMenu()
	{
	}

	[Token(Token = "0x60015EF")]
	[Address(RVA = "0xCFF61C", Offset = "0xCFF61C", VA = "0xCFF61C")]
	public void changeSelectedQuest(SideQuest q)
	{
	}

	[Token(Token = "0x60015F0")]
	[Address(RVA = "0xD0024C", Offset = "0xD0024C", VA = "0xD0024C")]
	public void submitCompleteQuest()
	{
	}

	[Token(Token = "0x60015F1")]
	[Address(RVA = "0xCFF918", Offset = "0xCFF918", VA = "0xCFF918")]
	public void refreshItemList()
	{
	}

	[Token(Token = "0x60015F2")]
	[Address(RVA = "0xD00574", Offset = "0xD00574", VA = "0xD00574")]
	public UITaskMenu()
	{
	}
}
[Token(Token = "0x2000441")]
public class StairArrow : MonoBehaviour
{
	[Token(Token = "0x4001576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float aliveTime;

	[Token(Token = "0x4001577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float maxTime;

	[Token(Token = "0x4001578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.Vector3 target;

	[Token(Token = "0x60015F3")]
	[Address(RVA = "0xD0057C", Offset = "0xD0057C", VA = "0xD0057C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60015F4")]
	[Address(RVA = "0xD00708", Offset = "0xD00708", VA = "0xD00708")]
	private void Update()
	{
	}

	[Token(Token = "0x60015F5")]
	[Address(RVA = "0xD007D0", Offset = "0xD007D0", VA = "0xD007D0")]
	public StairArrow()
	{
	}
}
[Token(Token = "0x2000442")]
public class UIBattleResults : MonoBehaviour
{
	[Token(Token = "0x2000443")]
	[CompilerGenerated]
	private sealed class <animateExpBar>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UIBattleResults <>4__this;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <iter>5__2;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<int[]>.Enumerator <>7__wrap2;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[] <level>5__4;

		[Token(Token = "0x1700031A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001603")]
			[Address(RVA = "0xD01D80", Offset = "0xD01D80", VA = "0xD01D80", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001605")]
			[Address(RVA = "0xD01DC8", Offset = "0xD01DC8", VA = "0xD01DC8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0xD01680", Offset = "0xD01680", VA = "0xD01680")]
		[DebuggerHidden]
		public <animateExpBar>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0xD01724", Offset = "0xD01724", VA = "0xD01724", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001601")]
		[Address(RVA = "0xD01740", Offset = "0xD01740", VA = "0xD01740", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001602")]
		[Address(RVA = "0xD01D30", Offset = "0xD01D30", VA = "0xD01D30")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6001604")]
		[Address(RVA = "0xD01D88", Offset = "0xD01D88", VA = "0xD01D88", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIBattleResults instance;

	[Token(Token = "0x400157A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Results Texts")]
	public Text expText;

	[Token(Token = "0x400157B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text moneyText;

	[Token(Token = "0x400157C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text itemText;

	[Token(Token = "0x400157D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text resultsLevelText;

	[Token(Token = "0x400157E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text sweepText;

	[Token(Token = "0x400157F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Header("Containers")]
	public GameObject resultsHUD;

	[Token(Token = "0x4001580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject levelUpHUD;

	[Token(Token = "0x4001581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject loadingPrompt;

	[Token(Token = "0x4001582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Level Up Texts")]
	public Text lvlText;

	[Token(Token = "0x4001583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text statsText;

	[Token(Token = "0x4001584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Text toNextLvlText;

	[Token(Token = "0x4001585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Text learnedSpellsText;

	[Token(Token = "0x4001586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public UIBar expBar;

	[Token(Token = "0x4001587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	public List<int[]> queuedLevels;

	[Token(Token = "0x4001588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool animatingBar;

	[Token(Token = "0x4001589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AudioClip fanfareIntro;

	[Token(Token = "0x400158A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public AudioClip fanfareLoop;

	[Token(Token = "0x400158B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AudioClip fanfareIntroBoss;

	[Token(Token = "0x400158C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public AudioClip fanfareLoopBoss;

	[Token(Token = "0x400158D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public List<string> learnedSpells;

	[Token(Token = "0x400158E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public List<string> learnedPassives;

	[Token(Token = "0x17000319")]
	public bool playerLeveled
	{
		[Token(Token = "0x60015F6")]
		[Address(RVA = "0xD007E0", Offset = "0xD007E0", VA = "0xD007E0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60015F7")]
	[Address(RVA = "0xD00830", Offset = "0xD00830", VA = "0xD00830")]
	private void Awake()
	{
	}

	[Token(Token = "0x60015F8")]
	[Address(RVA = "0xD0087C", Offset = "0xD0087C", VA = "0xD0087C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60015F9")]
	[Address(RVA = "0xD00A54", Offset = "0xD00A54", VA = "0xD00A54")]
	public void updateResultsText(int exp, int money, List<Item> items)
	{
	}

	[Token(Token = "0x60015FA")]
	[Address(RVA = "0xD00D64", Offset = "0xD00D64", VA = "0xD00D64")]
	public void updateLevelUpText(int level, string stats, int expToNext)
	{
	}

	[Token(Token = "0x60015FB")]
	[Address(RVA = "0xD00EE0", Offset = "0xD00EE0", VA = "0xD00EE0")]
	public void updateLearnedSpellsText()
	{
	}

	[Token(Token = "0x60015FC")]
	[Address(RVA = "0xD014DC", Offset = "0xD014DC", VA = "0xD014DC")]
	public void queueLevelUp(int expReq, int expStart, int newExp)
	{
	}

	[Token(Token = "0x60015FD")]
	[Address(RVA = "0xD01618", Offset = "0xD01618", VA = "0xD01618")]
	[IteratorStateMachine(typeof(<animateExpBar>d__30))]
	private IEnumerator animateExpBar()
	{
		return null;
	}

	[Token(Token = "0x60015FE")]
	[Address(RVA = "0xD016A8", Offset = "0xD016A8", VA = "0xD016A8")]
	public UIBattleResults()
	{
	}
}
[Token(Token = "0x2000444")]
public class UIButtonClick : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
{
	[Token(Token = "0x4001595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent PointerDown;

	[Token(Token = "0x4001596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityEvent PointerUp;

	[Token(Token = "0x6001606")]
	[Address(RVA = "0xD01DD0", Offset = "0xD01DD0", VA = "0xD01DD0", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6001607")]
	[Address(RVA = "0xD01DE4", Offset = "0xD01DE4", VA = "0xD01DE4", Slot = "5")]
	public void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6001608")]
	[Address(RVA = "0xD01DF8", Offset = "0xD01DF8", VA = "0xD01DF8")]
	public UIButtonClick()
	{
	}
}
[Token(Token = "0x2000445")]
public class UIDialogueCanvas : MonoBehaviour
{
	[Token(Token = "0x4001597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TMP_Text dialogueText;

	[Token(Token = "0x4001598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text nameText;

	[Token(Token = "0x4001599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public NPCOverworld npc;

	[Token(Token = "0x400159A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Canvas canvas;

	[Token(Token = "0x400159B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Text[] responseTexts;

	[Token(Token = "0x400159C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] responseButtons;

	[Token(Token = "0x400159D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioSource beepSource;

	[Token(Token = "0x400159E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioSource voiceSource;

	[Token(Token = "0x400159F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform followTarget;

	[Token(Token = "0x6001609")]
	[Address(RVA = "0xD01E00", Offset = "0xD01E00", VA = "0xD01E00")]
	private void Start()
	{
	}

	[Token(Token = "0x600160A")]
	[Address(RVA = "0xD01FCC", Offset = "0xD01FCC", VA = "0xD01FCC")]
	private void Update()
	{
	}

	[Token(Token = "0x600160B")]
	[Address(RVA = "0xD02070", Offset = "0xD02070", VA = "0xD02070")]
	public void answerQuestion(int num)
	{
	}

	[Token(Token = "0x600160C")]
	[Address(RVA = "0xD0208C", Offset = "0xD0208C", VA = "0xD0208C")]
	public UIDialogueCanvas()
	{
	}
}
[Token(Token = "0x2000446")]
public class UIDungeonInfo : MonoBehaviour
{
	[Token(Token = "0x40015A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text dungeonNameText;

	[Token(Token = "0x40015A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text floorNumText;

	[Token(Token = "0x600160D")]
	[Address(RVA = "0xD02094", Offset = "0xD02094", VA = "0xD02094")]
	private void Start()
	{
	}

	[Token(Token = "0x600160E")]
	[Address(RVA = "0xD022F0", Offset = "0xD022F0", VA = "0xD022F0")]
	public void updateInfo()
	{
	}

	[Token(Token = "0x600160F")]
	[Address(RVA = "0xD0243C", Offset = "0xD0243C", VA = "0xD0243C")]
	public UIDungeonInfo()
	{
	}
}
[Token(Token = "0x2000447")]
public class UIMenu : MonoBehaviour
{
	[Token(Token = "0x40015A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject inventoryMenu;

	[Token(Token = "0x40015A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject loadoutMenu;

	[Token(Token = "0x40015A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject passivesMenus;

	[Token(Token = "0x40015A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject optionsMenu;

	[Token(Token = "0x40015A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject menuParticle;

	[Token(Token = "0x40015A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static UIMenu instance;

	[Token(Token = "0x40015A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] equipTutorialImages;

	[Token(Token = "0x6001610")]
	[Address(RVA = "0xD02444", Offset = "0xD02444", VA = "0xD02444")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001611")]
	[Address(RVA = "0xD02490", Offset = "0xD02490", VA = "0xD02490")]
	public void openInventory()
	{
	}

	[Token(Token = "0x6001612")]
	[Address(RVA = "0xD024F0", Offset = "0xD024F0", VA = "0xD024F0")]
	public void openLoadout()
	{
	}

	[Token(Token = "0x6001613")]
	[Address(RVA = "0xD02550", Offset = "0xD02550", VA = "0xD02550")]
	public void openPassives()
	{
	}

	[Token(Token = "0x6001614")]
	[Address(RVA = "0xD025B0", Offset = "0xD025B0", VA = "0xD025B0")]
	public void openOptions()
	{
	}

	[Token(Token = "0x6001615")]
	[Address(RVA = "0xCFF1B8", Offset = "0xCFF1B8", VA = "0xCFF1B8")]
	public void proceedEquipTutorial(int step)
	{
	}

	[Token(Token = "0x6001616")]
	[Address(RVA = "0xD02610", Offset = "0xD02610", VA = "0xD02610")]
	public UIMenu()
	{
	}
}
[Token(Token = "0x2000448")]
public class AnalyticsHelper : MonoBehaviour
{
	[Token(Token = "0x6001617")]
	[Address(RVA = "0xD02618", Offset = "0xD02618", VA = "0xD02618")]
	public void startReplay(string eventName)
	{
	}

	[Token(Token = "0x6001618")]
	[Address(RVA = "0xD02708", Offset = "0xD02708", VA = "0xD02708")]
	public void stopReplay(string eventName)
	{
	}

	[Token(Token = "0x6001619")]
	[Address(RVA = "0xD027F8", Offset = "0xD027F8", VA = "0xD027F8")]
	public AnalyticsHelper()
	{
	}
}
[Token(Token = "0x2000449")]
public class ChaseHazzardDisabler : MonoBehaviour
{
	[Token(Token = "0x600161A")]
	[Address(RVA = "0xD02800", Offset = "0xD02800", VA = "0xD02800")]
	private void Start()
	{
	}

	[Token(Token = "0x600161B")]
	[Address(RVA = "0xD028B4", Offset = "0xD028B4", VA = "0xD028B4")]
	public ChaseHazzardDisabler()
	{
	}
}
[Token(Token = "0x200044A")]
public class CoffeeLakePuzzle : MonoBehaviour
{
	[Token(Token = "0x40015A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool block1;

	[Token(Token = "0x40015AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool block2;

	[Token(Token = "0x40015AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool block3;

	[Token(Token = "0x40015AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject rewardChest;

	[Token(Token = "0x600161C")]
	[Address(RVA = "0xD028BC", Offset = "0xD028BC", VA = "0xD028BC")]
	private void Start()
	{
	}

	[Token(Token = "0x600161D")]
	[Address(RVA = "0xD028C0", Offset = "0xD028C0", VA = "0xD028C0")]
	public void updateBlockState(int block, bool state)
	{
	}

	[Token(Token = "0x600161E")]
	[Address(RVA = "0xD029C0", Offset = "0xD029C0", VA = "0xD029C0")]
	public CoffeeLakePuzzle()
	{
	}
}
[Token(Token = "0x200044B")]
public class CoffeePuzzleCapsule : MonoBehaviour
{
	[Token(Token = "0x40015AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CoffeeLakePuzzle puzzle;

	[Token(Token = "0x40015AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int puzzleSlot;

	[Token(Token = "0x600161F")]
	[Address(RVA = "0xD029C8", Offset = "0xD029C8", VA = "0xD029C8")]
	private void Start()
	{
	}

	[Token(Token = "0x6001620")]
	[Address(RVA = "0xD029CC", Offset = "0xD029CC", VA = "0xD029CC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001621")]
	[Address(RVA = "0xD02AA8", Offset = "0xD02AA8", VA = "0xD02AA8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6001622")]
	[Address(RVA = "0xD02B84", Offset = "0xD02B84", VA = "0xD02B84")]
	public CoffeePuzzleCapsule()
	{
	}
}
[Token(Token = "0x200044C")]
public class CoffeePuzzleSlot : MonoBehaviour
{
	[Token(Token = "0x40015AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int slotNum;

	[Token(Token = "0x6001623")]
	[Address(RVA = "0xD02B94", Offset = "0xD02B94", VA = "0xD02B94")]
	public CoffeePuzzleSlot()
	{
	}
}
[Token(Token = "0x200044D")]
public class CollideWithPlayer : MonoBehaviour
{
	[Token(Token = "0x40015B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEvent onCollide;

	[Token(Token = "0x6001624")]
	[Address(RVA = "0xD02BA4", Offset = "0xD02BA4", VA = "0xD02BA4")]
	private void Start()
	{
	}

	[Token(Token = "0x6001625")]
	[Address(RVA = "0xD02BA8", Offset = "0xD02BA8", VA = "0xD02BA8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001626")]
	[Address(RVA = "0xD02C34", Offset = "0xD02C34", VA = "0xD02C34")]
	public CollideWithPlayer()
	{
	}
}
[Token(Token = "0x200044E")]
public class DebugUI : MonoBehaviour
{
	[Token(Token = "0x6001627")]
	[Address(RVA = "0xD02C9C", Offset = "0xD02C9C", VA = "0xD02C9C")]
	public void resetGame()
	{
	}

	[Token(Token = "0x6001628")]
	[Address(RVA = "0xD02D7C", Offset = "0xD02D7C", VA = "0xD02D7C")]
	public void warpToHub()
	{
	}

	[Token(Token = "0x6001629")]
	[Address(RVA = "0xD02E14", Offset = "0xD02E14", VA = "0xD02E14")]
	public DebugUI()
	{
	}
}
[Token(Token = "0x200044F")]
public class DestroyAfterTime : MonoBehaviour
{
	[Token(Token = "0x40015B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float time;

	[Token(Token = "0x600162A")]
	[Address(RVA = "0xD02E1C", Offset = "0xD02E1C", VA = "0xD02E1C")]
	private void Start()
	{
	}

	[Token(Token = "0x600162B")]
	[Address(RVA = "0xD02E98", Offset = "0xD02E98", VA = "0xD02E98")]
	public DestroyAfterTime()
	{
	}
}
[Token(Token = "0x2000450")]
public class DisableOnAndroid : MonoBehaviour
{
	[Token(Token = "0x600162C")]
	[Address(RVA = "0xD02EA0", Offset = "0xD02EA0", VA = "0xD02EA0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600162D")]
	[Address(RVA = "0xD02EE4", Offset = "0xD02EE4", VA = "0xD02EE4")]
	public DisableOnAndroid()
	{
	}
}
[Token(Token = "0x2000451")]
public class DungeonCollFixer : MonoBehaviour
{
	[Token(Token = "0x600162E")]
	[Address(RVA = "0xD02EEC", Offset = "0xD02EEC", VA = "0xD02EEC")]
	public void fixColliders()
	{
	}

	[Token(Token = "0x600162F")]
	[Address(RVA = "0xD02FE8", Offset = "0xD02FE8", VA = "0xD02FE8")]
	public DungeonCollFixer()
	{
	}
}
[Token(Token = "0x2000452")]
public class GrabbableEdit : MonoBehaviour
{
	[Token(Token = "0x40015B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected bool m_allowOffhandGrab;

	[Token(Token = "0x40015B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	protected bool m_snapPosition;

	[Token(Token = "0x40015B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[SerializeField]
	protected bool m_snapOrientation;

	[Token(Token = "0x40015B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected Transform m_snapOffset;

	[Token(Token = "0x40015B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected Collider[] m_grabPoints;

	[Token(Token = "0x40015B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected bool m_grabbedKinematic;

	[Token(Token = "0x40015B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected Collider m_grabbedCollider;

	[Token(Token = "0x40015B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected OVRGrabber m_grabbedBy;

	[Token(Token = "0x1700031C")]
	public bool allowOffhandGrab
	{
		[Token(Token = "0x6001630")]
		[Address(RVA = "0xD02FF0", Offset = "0xD02FF0", VA = "0xD02FF0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700031D")]
	public bool isGrabbed
	{
		[Token(Token = "0x6001631")]
		[Address(RVA = "0xD02FF8", Offset = "0xD02FF8", VA = "0xD02FF8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700031E")]
	public bool snapPosition
	{
		[Token(Token = "0x6001632")]
		[Address(RVA = "0xD03058", Offset = "0xD03058", VA = "0xD03058")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700031F")]
	public bool snapOrientation
	{
		[Token(Token = "0x6001633")]
		[Address(RVA = "0xD03060", Offset = "0xD03060", VA = "0xD03060")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000320")]
	public Transform snapOffset
	{
		[Token(Token = "0x6001634")]
		[Address(RVA = "0xD03068", Offset = "0xD03068", VA = "0xD03068")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000321")]
	public OVRGrabber grabbedBy
	{
		[Token(Token = "0x6001635")]
		[Address(RVA = "0xD03070", Offset = "0xD03070", VA = "0xD03070")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000322")]
	public Transform grabbedTransform
	{
		[Token(Token = "0x6001636")]
		[Address(RVA = "0xD03078", Offset = "0xD03078", VA = "0xD03078")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000323")]
	public Rigidbody grabbedRigidbody
	{
		[Token(Token = "0x6001637")]
		[Address(RVA = "0xD03094", Offset = "0xD03094", VA = "0xD03094")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000324")]
	public Collider[] grabPoints
	{
		[Token(Token = "0x6001638")]
		[Address(RVA = "0xD030B0", Offset = "0xD030B0", VA = "0xD030B0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001639")]
	[Address(RVA = "0xD030B8", Offset = "0xD030B8", VA = "0xD030B8", Slot = "4")]
	public virtual void GrabBegin(OVRGrabber hand, Collider grabPoint)
	{
	}

	[Token(Token = "0x600163A")]
	[Address(RVA = "0xD03134", Offset = "0xD03134", VA = "0xD03134", Slot = "5")]
	public virtual void GrabEnd(UnityEngine.Vector3 linearVelocity, UnityEngine.Vector3 angularVelocity)
	{
	}

	[Token(Token = "0x600163B")]
	[Address(RVA = "0xD03208", Offset = "0xD03208", VA = "0xD03208")]
	private void Awake()
	{
	}

	[Token(Token = "0x600163C")]
	[Address(RVA = "0xD03354", Offset = "0xD03354", VA = "0xD03354", Slot = "6")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600163D")]
	[Address(RVA = "0xD033B8", Offset = "0xD033B8", VA = "0xD033B8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600163E")]
	[Address(RVA = "0xD03418", Offset = "0xD03418", VA = "0xD03418")]
	public GrabbableEdit()
	{
	}
}
[Token(Token = "0x2000453")]
public class HapticClipManager : MonoBehaviour
{
	[Token(Token = "0x40015BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static HapticClipManager instance;

	[Token(Token = "0x40015BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Arms")]
	public HapticClip hackChangeLeftClip;

	[Token(Token = "0x40015BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HapticClip hackChangeRightClip;

	[Token(Token = "0x40015BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public HapticClip leftCastClip;

	[Token(Token = "0x40015BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HapticClip rightCastClip;

	[Token(Token = "0x40015BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public HapticClip leftChargeClip;

	[Token(Token = "0x40015C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HapticClip rightChargeClip;

	[Token(Token = "0x40015C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public HapticClip summonWeaponLeftClip;

	[Token(Token = "0x40015C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public HapticClip summonWeaponRightClip;

	[Token(Token = "0x40015C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public HapticClip recoilPistolRight;

	[Token(Token = "0x40015C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public HapticClip recoilPistolLeft;

	[Token(Token = "0x40015C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public HapticClip punchLeft;

	[Token(Token = "0x40015C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public HapticClip punchRight;

	[Token(Token = "0x40015C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public HapticClip meleeImpactRight;

	[Token(Token = "0x40015C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public HapticClip meleeImpactLeft;

	[Token(Token = "0x40015C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public HapticClip clickLeft;

	[Token(Token = "0x40015CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public HapticClip clickRight;

	[Token(Token = "0x40015CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Header("Head")]
	public HapticClip impactHeadClip;

	[Token(Token = "0x40015CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public HapticClip equipHelmetHead;

	[Token(Token = "0x40015CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Header("Chest")]
	public HapticClip lootTrash;

	[Token(Token = "0x40015CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public HapticClip lootUncommon;

	[Token(Token = "0x40015CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public HapticClip lootRare;

	[Token(Token = "0x40015D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public HapticClip lootEpic;

	[Token(Token = "0x40015D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public HapticClip castRightChest;

	[Token(Token = "0x40015D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public HapticClip castLeftChest;

	[Token(Token = "0x40015D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public HapticClip spellChargeLeftChest;

	[Token(Token = "0x40015D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public HapticClip spellChargeRightChest;

	[Token(Token = "0x40015D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public HapticClip recoilPistolLeftChest;

	[Token(Token = "0x40015D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public HapticClip recoilPistolRightChest;

	[Token(Token = "0x40015D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public HapticClip healingChest;

	[Token(Token = "0x40015D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public HapticClip doorChest;

	[Token(Token = "0x40015D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public HapticClip equipHatChest;

	[Token(Token = "0x40015DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public HapticClip equipPantsChest;

	[Token(Token = "0x40015DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public HapticClip equipShirtChest;

	[Token(Token = "0x40015DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public HapticClip equipWeaponLeft;

	[Token(Token = "0x40015DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public HapticClip equipWeaponRight;

	[Token(Token = "0x40015DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public HapticClip dashChest;

	[Token(Token = "0x40015DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public HapticClip damageChest1;

	[Token(Token = "0x40015E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public HapticClip damageChest2;

	[Token(Token = "0x40015E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public HapticClip damageChest3;

	[Token(Token = "0x40015E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public HapticClip battleStartChest;

	[Token(Token = "0x40015E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public HapticClip stairsChest;

	[Token(Token = "0x40015E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public HapticClip meleeStrikeLeftChest;

	[Token(Token = "0x40015E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public HapticClip meleeStrikeRightChest;

	[Token(Token = "0x40015E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public HapticClip greenBlastChest;

	[Token(Token = "0x40015E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public HapticClip explosionChest;

	[Token(Token = "0x40015E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public HapticClip drinkPotionChest;

	[Token(Token = "0x40015E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public HapticClip treadmillChest;

	[Token(Token = "0x40015EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public HapticClip levelUpChest;

	[Token(Token = "0x40015EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public HapticClip meleeHitRightChest;

	[Token(Token = "0x40015EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public HapticClip meleeHitLeftChest;

	[Token(Token = "0x40015ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public HapticClip heartBeatChest;

	[Token(Token = "0x40015EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public HapticClip startGameChest;

	[Token(Token = "0x40015EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[Header("Sources")]
	public HapticSource armLeftSource;

	[Token(Token = "0x40015F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public HapticSource armRightSource;

	[Token(Token = "0x40015F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public HapticSource chestSource;

	[Token(Token = "0x40015F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public HapticSource headSource;

	[Token(Token = "0x40015F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public bool heartBeatOn;

	[Token(Token = "0x40015F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
	private float heartTimer;

	[Token(Token = "0x40015F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private float timerMax;

	[Token(Token = "0x600163F")]
	[Address(RVA = "0xD03428", Offset = "0xD03428", VA = "0xD03428")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001640")]
	[Address(RVA = "0xD03474", Offset = "0xD03474", VA = "0xD03474")]
	private void Update()
	{
	}

	[Token(Token = "0x6001641")]
	[Address(RVA = "0xD034E8", Offset = "0xD034E8", VA = "0xD034E8")]
	public void playDash()
	{
	}

	[Token(Token = "0x6001642")]
	[Address(RVA = "0xD03510", Offset = "0xD03510", VA = "0xD03510")]
	public void playPotion()
	{
	}

	[Token(Token = "0x6001643")]
	[Address(RVA = "0xD03538", Offset = "0xD03538", VA = "0xD03538")]
	public void playGreenBlast()
	{
	}

	[Token(Token = "0x6001644")]
	[Address(RVA = "0xD03560", Offset = "0xD03560", VA = "0xD03560")]
	public void playExplosion()
	{
	}

	[Token(Token = "0x6001645")]
	[Address(RVA = "0xD03588", Offset = "0xD03588", VA = "0xD03588")]
	public void playStartGameChest()
	{
	}

	[Token(Token = "0x6001646")]
	[Address(RVA = "0xD034C0", Offset = "0xD034C0", VA = "0xD034C0")]
	public void playHeartBeat()
	{
	}

	[Token(Token = "0x6001647")]
	[Address(RVA = "0xD035B0", Offset = "0xD035B0", VA = "0xD035B0")]
	public void playCast(bool isRight)
	{
	}

	[Token(Token = "0x6001648")]
	[Address(RVA = "0xD03620", Offset = "0xD03620", VA = "0xD03620")]
	public void playChangeHax(bool isRight)
	{
	}

	[Token(Token = "0x6001649")]
	[Address(RVA = "0xD03660", Offset = "0xD03660", VA = "0xD03660")]
	public void playPunch(bool isRight)
	{
	}

	[Token(Token = "0x600164A")]
	[Address(RVA = "0xD036A0", Offset = "0xD036A0", VA = "0xD036A0")]
	public void playMeleeHit(bool isRight)
	{
	}

	[Token(Token = "0x600164B")]
	[Address(RVA = "0xD03710", Offset = "0xD03710", VA = "0xD03710")]
	public void playCharge(bool isRight)
	{
	}

	[Token(Token = "0x600164C")]
	[Address(RVA = "0xD03780", Offset = "0xD03780", VA = "0xD03780")]
	public void playDamaged(int level)
	{
	}

	[Token(Token = "0x600164D")]
	[Address(RVA = "0xD03830", Offset = "0xD03830", VA = "0xD03830")]
	public void playEquipWeapon(bool isRight)
	{
	}

	[Token(Token = "0x600164E")]
	[Address(RVA = "0xD038A0", Offset = "0xD038A0", VA = "0xD038A0")]
	public void playEquipHat()
	{
	}

	[Token(Token = "0x600164F")]
	[Address(RVA = "0xD038E0", Offset = "0xD038E0", VA = "0xD038E0")]
	public void playTreadmill()
	{
	}

	[Token(Token = "0x6001650")]
	[Address(RVA = "0xD03924", Offset = "0xD03924", VA = "0xD03924")]
	public void playlevelUp()
	{
	}

	[Token(Token = "0x6001651")]
	[Address(RVA = "0xD0394C", Offset = "0xD0394C", VA = "0xD0394C")]
	public void playEquipChest()
	{
	}

	[Token(Token = "0x6001652")]
	[Address(RVA = "0xD03974", Offset = "0xD03974", VA = "0xD03974")]
	public void playEquipPants()
	{
	}

	[Token(Token = "0x6001653")]
	[Address(RVA = "0xD0399C", Offset = "0xD0399C", VA = "0xD0399C")]
	public void playFindLoot(int lootLevel)
	{
	}

	[Token(Token = "0x6001654")]
	[Address(RVA = "0xD03A24", Offset = "0xD03A24", VA = "0xD03A24")]
	public void playPistolRecoil(bool isRight)
	{
	}

	[Token(Token = "0x6001655")]
	[Address(RVA = "0xD03A94", Offset = "0xD03A94", VA = "0xD03A94")]
	public void playHealing()
	{
	}

	[Token(Token = "0x6001656")]
	[Address(RVA = "0xD03ABC", Offset = "0xD03ABC", VA = "0xD03ABC")]
	public void playStairs()
	{
	}

	[Token(Token = "0x6001657")]
	[Address(RVA = "0xD03AE4", Offset = "0xD03AE4", VA = "0xD03AE4")]
	public void playDoor()
	{
	}

	[Token(Token = "0x6001658")]
	[Address(RVA = "0xD03B0C", Offset = "0xD03B0C", VA = "0xD03B0C")]
	public void playBattleStart()
	{
	}

	[Token(Token = "0x6001659")]
	[Address(RVA = "0xD03B34", Offset = "0xD03B34", VA = "0xD03B34")]
	public HapticClipManager()
	{
	}
}
[Token(Token = "0x2000454")]
public interface ITargetable
{
	[Token(Token = "0x600165A")]
	GameObject getAimAssistTarget();
}
[Token(Token = "0x2000455")]
public class Keyboard : MonoBehaviour
{
	[Token(Token = "0x40015F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int characterLimit;

	[Token(Token = "0x40015F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public InputField input;

	[Token(Token = "0x40015F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Button[] letterkeys;

	[Token(Token = "0x40015F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Button[] altKeys;

	[Token(Token = "0x40015FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string[] convertKeys;

	[Token(Token = "0x40015FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject badWordText;

	[Token(Token = "0x40015FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string alpha;

	[Token(Token = "0x40015FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool shift_pressed;

	[Token(Token = "0x600165B")]
	[Address(RVA = "0xD03B44", Offset = "0xD03B44", VA = "0xD03B44")]
	private void Start()
	{
	}

	[Token(Token = "0x600165C")]
	[Address(RVA = "0xD03B48", Offset = "0xD03B48", VA = "0xD03B48")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600165D")]
	[Address(RVA = "0xD03B4C", Offset = "0xD03B4C", VA = "0xD03B4C")]
	public void onClick_type(Text t)
	{
	}

	[Token(Token = "0x600165E")]
	[Address(RVA = "0xD03C50", Offset = "0xD03C50", VA = "0xD03C50")]
	public void LetterUp(int inputNum)
	{
	}

	[Token(Token = "0x600165F")]
	[Address(RVA = "0xD03D98", Offset = "0xD03D98", VA = "0xD03D98")]
	public void LetterDown(int inputNum)
	{
	}

	[Token(Token = "0x6001660")]
	[Address(RVA = "0xD03EDC", Offset = "0xD03EDC", VA = "0xD03EDC")]
	public void onClick_delete()
	{
	}

	[Token(Token = "0x6001661")]
	[Address(RVA = "0xD03F60", Offset = "0xD03F60", VA = "0xD03F60")]
	public void onClick_Shift()
	{
	}

	[Token(Token = "0x6001662")]
	[Address(RVA = "0xD04208", Offset = "0xD04208", VA = "0xD04208")]
	public void onClick_revertChar()
	{
	}

	[Token(Token = "0x6001663")]
	[Address(RVA = "0xD04098", Offset = "0xD04098", VA = "0xD04098")]
	public void changeAltKeys()
	{
	}

	[Token(Token = "0x6001664")]
	[Address(RVA = "0xD04320", Offset = "0xD04320", VA = "0xD04320")]
	public Keyboard()
	{
	}
}
[Token(Token = "0x2000456")]
public class Poke_Button : MonoBehaviour
{
	[Token(Token = "0x40015FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float maxHoldTime;

	[Token(Token = "0x40015FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Button btn;

	[Token(Token = "0x4001600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool hold;

	[Token(Token = "0x4001601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool afterPress;

	[Token(Token = "0x4001602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve bounceAnim;

	[Token(Token = "0x4001603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private BoxCollider bCollider;

	[Token(Token = "0x4001604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UnityEngine.Vector3 initalPos;

	[Token(Token = "0x4001605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool pressed;

	[Token(Token = "0x4001606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	private bool bounce;

	[Token(Token = "0x4001607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float maxDist;

	[Token(Token = "0x4001608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float maxScale;

	[Token(Token = "0x4001609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float holdTime;

	[Token(Token = "0x400160A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float currTime;

	[Token(Token = "0x400160B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Color normalColor;

	[Token(Token = "0x400160C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Color hoverColor;

	[Token(Token = "0x6001665")]
	[Address(RVA = "0xD04380", Offset = "0xD04380", VA = "0xD04380")]
	private void Start()
	{
	}

	[Token(Token = "0x6001666")]
	[Address(RVA = "0xD04430", Offset = "0xD04430", VA = "0xD04430")]
	private void Update()
	{
	}

	[Token(Token = "0x6001667")]
	[Address(RVA = "0xD044F4", Offset = "0xD044F4", VA = "0xD044F4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001668")]
	[Address(RVA = "0xD045C0", Offset = "0xD045C0", VA = "0xD045C0")]
	private void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x6001669")]
	[Address(RVA = "0xD04898", Offset = "0xD04898", VA = "0xD04898")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600166A")]
	[Address(RVA = "0xD04854", Offset = "0xD04854", VA = "0xD04854")]
	public void clickButton()
	{
	}

	[Token(Token = "0x600166B")]
	[Address(RVA = "0xD04ACC", Offset = "0xD04ACC", VA = "0xD04ACC")]
	public void hoverEnter()
	{
	}

	[Token(Token = "0x600166C")]
	[Address(RVA = "0xD04B50", Offset = "0xD04B50", VA = "0xD04B50")]
	public void hoverExit()
	{
	}

	[Token(Token = "0x600166D")]
	[Address(RVA = "0xD04BC8", Offset = "0xD04BC8", VA = "0xD04BC8")]
	public Poke_Button()
	{
	}
}
[Token(Token = "0x2000457")]
public class MatchMainCamTrans : MonoBehaviour
{
	[Token(Token = "0x400160D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform cam;

	[Token(Token = "0x600166F")]
	[Address(RVA = "0xD04C28", Offset = "0xD04C28", VA = "0xD04C28")]
	private void Start()
	{
	}

	[Token(Token = "0x6001670")]
	[Address(RVA = "0xD04C54", Offset = "0xD04C54", VA = "0xD04C54")]
	private void Update()
	{
	}

	[Token(Token = "0x6001671")]
	[Address(RVA = "0xD04D88", Offset = "0xD04D88", VA = "0xD04D88")]
	public MatchMainCamTrans()
	{
	}
}
[Token(Token = "0x2000458")]
public class MatchTransform : MonoBehaviour
{
	[Token(Token = "0x400160E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform copyTrans;

	[Token(Token = "0x400160F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool positionOnly;

	[Token(Token = "0x4001610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float yModifier;

	[Token(Token = "0x6001672")]
	[Address(RVA = "0xD04D90", Offset = "0xD04D90", VA = "0xD04D90")]
	private void Update()
	{
	}

	[Token(Token = "0x6001673")]
	[Address(RVA = "0xD04E98", Offset = "0xD04E98", VA = "0xD04E98")]
	public MatchTransform()
	{
	}
}
[Token(Token = "0x2000459")]
public class MoveRight : MonoBehaviour
{
	[Token(Token = "0x4001611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x4001612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool rotate;

	[Token(Token = "0x4001613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool goUp;

	[Token(Token = "0x6001674")]
	[Address(RVA = "0xD04EA0", Offset = "0xD04EA0", VA = "0xD04EA0")]
	private void Update()
	{
	}

	[Token(Token = "0x6001675")]
	[Address(RVA = "0xD04FCC", Offset = "0xD04FCC", VA = "0xD04FCC")]
	public MoveRight()
	{
	}
}
[Token(Token = "0x200045A")]
public class MRDemoArcaxer : MonoBehaviour
{
	[Token(Token = "0x4001614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Animator portalAnim;

	[Token(Token = "0x4001615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MusicPlayer musicPlayer;

	[Token(Token = "0x4001616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource source;

	[Token(Token = "0x4001617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public PassiveAbility hacknSlash;

	[Token(Token = "0x4001618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject gameHUD;

	[Token(Token = "0x6001676")]
	[Address(RVA = "0xD04FDC", Offset = "0xD04FDC", VA = "0xD04FDC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001677")]
	[Address(RVA = "0xD05140", Offset = "0xD05140", VA = "0xD05140")]
	public void activatePortal()
	{
	}

	[Token(Token = "0x6001678")]
	[Address(RVA = "0xD051A4", Offset = "0xD051A4", VA = "0xD051A4")]
	public void battleStart()
	{
	}

	[Token(Token = "0x6001679")]
	[Address(RVA = "0xD05220", Offset = "0xD05220", VA = "0xD05220")]
	public void battleEnd()
	{
	}

	[Token(Token = "0x600167A")]
	[Address(RVA = "0xD05274", Offset = "0xD05274", VA = "0xD05274")]
	public MRDemoArcaxer()
	{
	}
}
[Token(Token = "0x200045B")]
public class MRDemoSword : MonoBehaviour
{
	[Token(Token = "0x200045C")]
	[CompilerGenerated]
	private sealed class <disolveMaterial>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MRDemoSword <>4__this;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Renderer[] <rends>5__2;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <disolve>5__3;

		[Token(Token = "0x17000325")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001681")]
			[Address(RVA = "0xD05680", Offset = "0xD05680", VA = "0xD05680", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000326")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001683")]
			[Address(RVA = "0xD056C8", Offset = "0xD056C8", VA = "0xD056C8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600167E")]
		[Address(RVA = "0xD05328", Offset = "0xD05328", VA = "0xD05328")]
		[DebuggerHidden]
		public <disolveMaterial>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x600167F")]
		[Address(RVA = "0xD05358", Offset = "0xD05358", VA = "0xD05358", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001680")]
		[Address(RVA = "0xD0535C", Offset = "0xD0535C", VA = "0xD0535C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001682")]
		[Address(RVA = "0xD05688", Offset = "0xD05688", VA = "0xD05688", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MRDemoArcaxer mrManager;

	[Token(Token = "0x400161A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Animator anim;

	[Token(Token = "0x600167B")]
	[Address(RVA = "0xD0527C", Offset = "0xD0527C", VA = "0xD0527C")]
	public void onGrab()
	{
	}

	[Token(Token = "0x600167C")]
	[Address(RVA = "0xD052C0", Offset = "0xD052C0", VA = "0xD052C0")]
	[IteratorStateMachine(typeof(<disolveMaterial>d__3))]
	protected IEnumerator disolveMaterial()
	{
		return null;
	}

	[Token(Token = "0x600167D")]
	[Address(RVA = "0xD05350", Offset = "0xD05350", VA = "0xD05350")]
	public MRDemoSword()
	{
	}
}
[Token(Token = "0x200045D")]
public class MusicPlayer : MonoBehaviour
{
	[Token(Token = "0x200045E")]
	[CompilerGenerated]
	private sealed class <playLoopSound>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MusicPlayer <>4__this;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int num;

		[Token(Token = "0x17000327")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600168D")]
			[Address(RVA = "0xD05B00", Offset = "0xD05B00", VA = "0xD05B00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000328")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600168F")]
			[Address(RVA = "0xD05B48", Offset = "0xD05B48", VA = "0xD05B48", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600168A")]
		[Address(RVA = "0xD0588C", Offset = "0xD0588C", VA = "0xD0588C")]
		[DebuggerHidden]
		public <playLoopSound>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600168B")]
		[Address(RVA = "0xD05994", Offset = "0xD05994", VA = "0xD05994", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600168C")]
		[Address(RVA = "0xD05998", Offset = "0xD05998", VA = "0xD05998", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600168E")]
		[Address(RVA = "0xD05B08", Offset = "0xD05B08", VA = "0xD05B08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioSource source;

	[Token(Token = "0x4001621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip[] musicIntro;

	[Token(Token = "0x4001622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] musicLoop;

	[Token(Token = "0x4001623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool lookForMusicSwap;

	[Token(Token = "0x4001624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool cancelLoop;

	[Token(Token = "0x4001625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool playOnStart;

	[Token(Token = "0x6001684")]
	[Address(RVA = "0xD056D0", Offset = "0xD056D0", VA = "0xD056D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001685")]
	[Address(RVA = "0xD05814", Offset = "0xD05814", VA = "0xD05814")]
	[IteratorStateMachine(typeof(<playLoopSound>d__7))]
	private IEnumerator playLoopSound(int num)
	{
		return null;
	}

	[Token(Token = "0x6001686")]
	[Address(RVA = "0xD058B4", Offset = "0xD058B4", VA = "0xD058B4")]
	public void playTrackStopped(int track)
	{
	}

	[Token(Token = "0x6001687")]
	[Address(RVA = "0xD00A14", Offset = "0xD00A14", VA = "0xD00A14")]
	public void playTrackNum(int num)
	{
	}

	[Token(Token = "0x6001688")]
	[Address(RVA = "0xD05918", Offset = "0xD05918", VA = "0xD05918")]
	public void playTrackNumNoLoop(int num)
	{
	}

	[Token(Token = "0x6001689")]
	[Address(RVA = "0xD05984", Offset = "0xD05984", VA = "0xD05984")]
	public MusicPlayer()
	{
	}
}
[Token(Token = "0x200045F")]
public class NOLOHandPhysics : MonoBehaviour
{
	[Token(Token = "0x400162A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400162B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rigidbody rb;

	[Token(Token = "0x400162C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isRight;

	[Token(Token = "0x400162D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static NOLOHandPhysics rightNoloPhysics;

	[Token(Token = "0x400162E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static NOLOHandPhysics leftNoloPhysics;

	[Token(Token = "0x6001690")]
	[Address(RVA = "0xD05B50", Offset = "0xD05B50", VA = "0xD05B50")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001691")]
	[Address(RVA = "0xD05BAC", Offset = "0xD05BAC", VA = "0xD05BAC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001692")]
	[Address(RVA = "0xD05C70", Offset = "0xD05C70", VA = "0xD05C70")]
	public NOLOHandPhysics()
	{
	}
}
[Token(Token = "0x2000460")]
public class OculusPlatformManager : MonoBehaviour
{
	[Token(Token = "0x6001693")]
	[Address(RVA = "0xD05C78", Offset = "0xD05C78", VA = "0xD05C78")]
	private void Start()
	{
	}

	[Token(Token = "0x6001694")]
	[Address(RVA = "0xD05CD8", Offset = "0xD05CD8", VA = "0xD05CD8")]
	private void checkEntitlement()
	{
	}

	[Token(Token = "0x6001695")]
	[Address(RVA = "0xD05D70", Offset = "0xD05D70", VA = "0xD05D70")]
	private void getEntitlementCallback(Message msg)
	{
	}

	[Token(Token = "0x6001696")]
	[Address(RVA = "0xD05EA8", Offset = "0xD05EA8", VA = "0xD05EA8")]
	private void GetLoggedInUserCallback(Message<User> msg)
	{
	}

	[Token(Token = "0x6001697")]
	[Address(RVA = "0xD05F88", Offset = "0xD05F88", VA = "0xD05F88")]
	private void Update()
	{
	}

	[Token(Token = "0x6001698")]
	[Address(RVA = "0xD05F8C", Offset = "0xD05F8C", VA = "0xD05F8C")]
	public OculusPlatformManager()
	{
	}
}
[Token(Token = "0x2000461")]
public class OVRGrabbable : MonoBehaviour
{
	[Token(Token = "0x2000462")]
	[CompilerGenerated]
	private sealed class <soundTimer>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OVRGrabbable <>4__this;

		[Token(Token = "0x17000332")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60016AE")]
			[Address(RVA = "0xD06B5C", Offset = "0xD06B5C", VA = "0xD06B5C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000333")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016B0")]
			[Address(RVA = "0xD06BA4", Offset = "0xD06BA4", VA = "0xD06BA4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016AB")]
		[Address(RVA = "0xD05FFC", Offset = "0xD05FFC", VA = "0xD05FFC")]
		[DebuggerHidden]
		public <soundTimer>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x60016AC")]
		[Address(RVA = "0xD06AA8", Offset = "0xD06AA8", VA = "0xD06AA8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016AD")]
		[Address(RVA = "0xD06AAC", Offset = "0xD06AAC", VA = "0xD06AAC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016AF")]
		[Address(RVA = "0xD06B64", Offset = "0xD06B64", VA = "0xD06B64", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400162F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected bool m_allowOffhandGrab;

	[Token(Token = "0x4001630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	protected bool m_snapPosition;

	[Token(Token = "0x4001631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[SerializeField]
	protected bool m_snapOrientation;

	[Token(Token = "0x4001632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected Transform m_snapOffset;

	[Token(Token = "0x4001633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected Collider[] m_grabPoints;

	[Token(Token = "0x4001634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected bool m_grabbedKinematic;

	[Token(Token = "0x4001635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected Collider m_grabbedCollider;

	[Token(Token = "0x4001636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected OVRGrabber m_grabbedBy;

	[Token(Token = "0x4001637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent onGrab;

	[Token(Token = "0x4001638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent onDrop;

	[Token(Token = "0x4001639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Rigidbody rb;

	[Token(Token = "0x400163A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool canGrab;

	[Token(Token = "0x400163B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool snapToHand;

	[Token(Token = "0x400163C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	private bool canMakeSound;

	[Token(Token = "0x17000329")]
	public bool allowOffhandGrab
	{
		[Token(Token = "0x600169A")]
		[Address(RVA = "0xD06024", Offset = "0xD06024", VA = "0xD06024")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700032A")]
	public bool isGrabbed
	{
		[Token(Token = "0x600169B")]
		[Address(RVA = "0xD0602C", Offset = "0xD0602C", VA = "0xD0602C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700032B")]
	public bool snapPosition
	{
		[Token(Token = "0x600169C")]
		[Address(RVA = "0xD0608C", Offset = "0xD0608C", VA = "0xD0608C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700032C")]
	public bool snapOrientation
	{
		[Token(Token = "0x600169D")]
		[Address(RVA = "0xD06094", Offset = "0xD06094", VA = "0xD06094")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700032D")]
	public Transform snapOffset
	{
		[Token(Token = "0x600169E")]
		[Address(RVA = "0xD0609C", Offset = "0xD0609C", VA = "0xD0609C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700032E")]
	public OVRGrabber grabbedBy
	{
		[Token(Token = "0x600169F")]
		[Address(RVA = "0xD060A4", Offset = "0xD060A4", VA = "0xD060A4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700032F")]
	public Transform grabbedTransform
	{
		[Token(Token = "0x60016A0")]
		[Address(RVA = "0xD060AC", Offset = "0xD060AC", VA = "0xD060AC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000330")]
	public Rigidbody grabbedRigidbody
	{
		[Token(Token = "0x60016A1")]
		[Address(RVA = "0xD060C8", Offset = "0xD060C8", VA = "0xD060C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000331")]
	public Collider[] grabPoints
	{
		[Token(Token = "0x60016A2")]
		[Address(RVA = "0xD06150", Offset = "0xD06150", VA = "0xD06150")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001699")]
	[Address(RVA = "0xD05F94", Offset = "0xD05F94", VA = "0xD05F94")]
	[IteratorStateMachine(typeof(<soundTimer>d__14))]
	private IEnumerator soundTimer()
	{
		return null;
	}

	[Token(Token = "0x60016A3")]
	[Address(RVA = "0xD06158", Offset = "0xD06158", VA = "0xD06158", Slot = "4")]
	public virtual void GrabBegin(OVRGrabber hand, Collider grabPoint)
	{
	}

	[Token(Token = "0x60016A4")]
	[Address(RVA = "0xD062EC", Offset = "0xD062EC", VA = "0xD062EC")]
	private void Update()
	{
	}

	[Token(Token = "0x60016A5")]
	[Address(RVA = "0xD0640C", Offset = "0xD0640C", VA = "0xD0640C", Slot = "5")]
	public virtual void GrabEnd(UnityEngine.Vector3 linearVelocity, UnityEngine.Vector3 angularVelocity, float scaler = 1f)
	{
	}

	[Token(Token = "0x60016A6")]
	[Address(RVA = "0xD06514", Offset = "0xD06514", VA = "0xD06514")]
	private void Awake()
	{
	}

	[Token(Token = "0x60016A7")]
	[Address(RVA = "0xD06690", Offset = "0xD06690", VA = "0xD06690", Slot = "6")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60016A8")]
	[Address(RVA = "0xD06708", Offset = "0xD06708", VA = "0xD06708")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60016A9")]
	[Address(RVA = "0xD0683C", Offset = "0xD0683C", VA = "0xD0683C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60016AA")]
	[Address(RVA = "0xD06A14", Offset = "0xD06A14", VA = "0xD06A14")]
	public OVRGrabbable()
	{
	}
}
[Token(Token = "0x2000463")]
[RequireComponent(typeof(Rigidbody))]
public class OVRGrabber : MonoBehaviour
{
	[Token(Token = "0x4001640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float grabBegin;

	[Token(Token = "0x4001641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float grabEnd;

	[Token(Token = "0x4001642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float handForceScaler;

	[Token(Token = "0x4001643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool alreadyUpdated;

	[Token(Token = "0x4001644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	[SerializeField]
	protected bool m_parentHeldObject;

	[Token(Token = "0x4001645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	[SerializeField]
	protected bool m_moveHandPosition;

	[Token(Token = "0x4001646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected Transform m_gripTransform;

	[Token(Token = "0x4001647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected Collider[] m_grabVolumes;

	[Token(Token = "0x4001648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected OVRInput.Controller m_controller;

	[Token(Token = "0x4001649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	protected bool rightHand;

	[Token(Token = "0x400164A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected Transform m_parentTransform;

	[Token(Token = "0x400164B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected GameObject m_player;

	[Token(Token = "0x400164C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected bool m_grabVolumeEnabled;

	[Token(Token = "0x400164D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected UnityEngine.Vector3 m_lastPos;

	[Token(Token = "0x400164E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected Quaternion m_lastRot;

	[Token(Token = "0x400164F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected Quaternion m_anchorOffsetRotation;

	[Token(Token = "0x4001650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected UnityEngine.Vector3 m_anchorOffsetPosition;

	[Token(Token = "0x4001651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	protected float m_prevFlex;

	[Token(Token = "0x4001652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected OVRGrabbable m_grabbedObj;

	[Token(Token = "0x4001653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected UnityEngine.Vector3 m_grabbedObjectPosOff;

	[Token(Token = "0x4001654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	protected Quaternion m_grabbedObjectRotOff;

	[Token(Token = "0x4001655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected Dictionary<OVRGrabbable, int> m_grabCandidates;

	[Token(Token = "0x4001656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected bool m_operatingWithoutOVRCameraRig;

	[Token(Token = "0x17000334")]
	public OVRGrabbable grabbedObject
	{
		[Token(Token = "0x60016B1")]
		[Address(RVA = "0xD06BAC", Offset = "0xD06BAC", VA = "0xD06BAC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60016B2")]
	[Address(RVA = "0xD0678C", Offset = "0xD0678C", VA = "0xD0678C")]
	public void ForceRelease(OVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x60016B3")]
	[Address(RVA = "0xD06E70", Offset = "0xD06E70", VA = "0xD06E70", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60016B4")]
	[Address(RVA = "0xD06FB4", Offset = "0xD06FB4", VA = "0xD06FB4", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60016B5")]
	[Address(RVA = "0xD071E4", Offset = "0xD071E4", VA = "0xD071E4", Slot = "6")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x60016B6")]
	[Address(RVA = "0xD071EC", Offset = "0xD071EC", VA = "0xD071EC", Slot = "7")]
	public virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x60016B7")]
	[Address(RVA = "0xD071FC", Offset = "0xD071FC", VA = "0xD071FC")]
	private void OnUpdatedAnchors()
	{
	}

	[Token(Token = "0x60016B8")]
	[Address(RVA = "0xD07614", Offset = "0xD07614", VA = "0xD07614")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60016B9")]
	[Address(RVA = "0xD0768C", Offset = "0xD0768C", VA = "0xD0768C")]
	public void forceMGrab(OVRGrabbable g)
	{
	}

	[Token(Token = "0x60016BA")]
	[Address(RVA = "0xD07694", Offset = "0xD07694", VA = "0xD07694")]
	private void OnTriggerEnter(Collider otherCollider)
	{
	}

	[Token(Token = "0x60016BB")]
	[Address(RVA = "0xD077BC", Offset = "0xD077BC", VA = "0xD077BC")]
	private void OnTriggerExit(Collider otherCollider)
	{
	}

	[Token(Token = "0x60016BC")]
	[Address(RVA = "0xD075D4", Offset = "0xD075D4", VA = "0xD075D4")]
	protected void CheckForGrabOrRelease(float prevFlex)
	{
	}

	[Token(Token = "0x60016BD")]
	[Address(RVA = "0xD07918", Offset = "0xD07918", VA = "0xD07918", Slot = "8")]
	protected virtual void GrabBegin()
	{
	}

	[Token(Token = "0x60016BE")]
	[Address(RVA = "0xD07FC8", Offset = "0xD07FC8", VA = "0xD07FC8", Slot = "9")]
	protected virtual void MoveGrabbedObject(UnityEngine.Vector3 pos, Quaternion rot, bool forceTeleport = false)
	{
	}

	[Token(Token = "0x60016BF")]
	[Address(RVA = "0xD06BB4", Offset = "0xD06BB4", VA = "0xD06BB4")]
	protected void GrabEnd()
	{
	}

	[Token(Token = "0x60016C0")]
	[Address(RVA = "0xD08228", Offset = "0xD08228", VA = "0xD08228")]
	protected void GrabbableRelease(UnityEngine.Vector3 linearVelocity, UnityEngine.Vector3 angularVelocity)
	{
	}

	[Token(Token = "0x60016C1")]
	[Address(RVA = "0xD082A0", Offset = "0xD082A0", VA = "0xD082A0", Slot = "10")]
	protected virtual void GrabVolumeEnable(bool enabled)
	{
	}

	[Token(Token = "0x60016C2")]
	[Address(RVA = "0xD08360", Offset = "0xD08360", VA = "0xD08360", Slot = "11")]
	protected virtual void OffhandGrabbed(OVRGrabbable grabbable)
	{
	}

	[Token(Token = "0x60016C3")]
	[Address(RVA = "0xD07094", Offset = "0xD07094", VA = "0xD07094")]
	protected void SetPlayerIgnoreCollision(GameObject grabbable, bool ignore)
	{
	}

	[Token(Token = "0x60016C4")]
	[Address(RVA = "0xD0842C", Offset = "0xD0842C", VA = "0xD0842C")]
	public OVRGrabber()
	{
	}
}
[Token(Token = "0x2000464")]
[RequireComponent(typeof(Canvas))]
public class OVRRaycaster : GraphicRaycaster, IPointerEnterHandler, IEventSystemHandler
{
	[Token(Token = "0x2000465")]
	private struct RaycastHit
	{
		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Graphic graphic;

		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UnityEngine.Vector3 worldPos;

		[Token(Token = "0x400165E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool fromMouse;
	}

	[Token(Token = "0x4001657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("A world space pointer for this canvas")]
	public GameObject pointer;

	[Token(Token = "0x4001658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int sortOrder;

	[NonSerialized]
	[Token(Token = "0x4001659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Canvas m_Canvas;

	[NonSerialized]
	[Token(Token = "0x400165A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<RaycastHit> m_RaycastResults;

	[NonSerialized]
	[Token(Token = "0x400165B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly List<RaycastHit> s_SortedGraphics;

	[Token(Token = "0x17000335")]
	private Canvas canvas
	{
		[Token(Token = "0x60016C7")]
		[Address(RVA = "0xD0856C", Offset = "0xD0856C", VA = "0xD0856C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000336")]
	public override Camera eventCamera
	{
		[Token(Token = "0x60016C8")]
		[Address(RVA = "0xD08600", Offset = "0xD08600", VA = "0xD08600", Slot = "18")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000337")]
	public override int sortOrderPriority
	{
		[Token(Token = "0x60016C9")]
		[Address(RVA = "0xD0861C", Offset = "0xD0861C", VA = "0xD0861C", Slot = "20")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60016C6")]
	[Address(RVA = "0xD084CC", Offset = "0xD084CC", VA = "0xD084CC")]
	protected OVRRaycaster()
	{
	}

	[Token(Token = "0x60016CA")]
	[Address(RVA = "0xD08624", Offset = "0xD08624", VA = "0xD08624", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60016CB")]
	[Address(RVA = "0xD08778", Offset = "0xD08778", VA = "0xD08778")]
	private void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList, Ray ray, bool checkForBlocking)
	{
	}

	[Token(Token = "0x60016CC")]
	[Address(RVA = "0xD094E0", Offset = "0xD094E0", VA = "0xD094E0", Slot = "17")]
	public override void Raycast(PointerEventData eventData, List<RaycastResult> resultAppendList)
	{
	}

	[Token(Token = "0x60016CD")]
	[Address(RVA = "0xD0954C", Offset = "0xD0954C", VA = "0xD0954C")]
	public void RaycastPointer(PointerEventData eventData, List<RaycastResult> resultAppendList)
	{
	}

	[Token(Token = "0x60016CE")]
	[Address(RVA = "0xD08E44", Offset = "0xD08E44", VA = "0xD08E44")]
	private void GraphicRaycast(Canvas canvas, Ray ray, List<RaycastHit> results)
	{
	}

	[Token(Token = "0x60016CF")]
	[Address(RVA = "0xD099D8", Offset = "0xD099D8", VA = "0xD099D8")]
	public UnityEngine.Vector2 GetScreenPosition(RaycastResult raycastResult)
	{
		return default(UnityEngine.Vector2);
	}

	[Token(Token = "0x60016D0")]
	[Address(RVA = "0xD0979C", Offset = "0xD0979C", VA = "0xD0979C")]
	private static bool RayIntersectsRectTransform(RectTransform rectTransform, Ray ray, out UnityEngine.Vector3 worldPos)
	{
		return default(bool);
	}

	[Token(Token = "0x60016D1")]
	[Address(RVA = "0xD09A10", Offset = "0xD09A10", VA = "0xD09A10")]
	public bool IsFocussed()
	{
		return default(bool);
	}

	[Token(Token = "0x60016D2")]
	[Address(RVA = "0xD09B28", Offset = "0xD09B28", VA = "0xD09B28", Slot = "22")]
	public void OnPointerEnter(PointerEventData e)
	{
	}
}
[Token(Token = "0x2000467")]
public class OWMoveToPlayer : MonoBehaviour
{
	[Token(Token = "0x4001661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x60016D7")]
	[Address(RVA = "0xD09D78", Offset = "0xD09D78", VA = "0xD09D78")]
	private void Update()
	{
	}

	[Token(Token = "0x60016D8")]
	[Address(RVA = "0xD09F38", Offset = "0xD09F38", VA = "0xD09F38")]
	public OWMoveToPlayer()
	{
	}
}
[Token(Token = "0x2000468")]
public class PlatformSwapper : MonoBehaviour
{
	[Token(Token = "0x4001662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject androidObject;

	[Token(Token = "0x4001663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject pcObject;

	[Token(Token = "0x60016D9")]
	[Address(RVA = "0xD09F48", Offset = "0xD09F48", VA = "0xD09F48")]
	private void Start()
	{
	}

	[Token(Token = "0x60016DA")]
	[Address(RVA = "0xD09FB4", Offset = "0xD09FB4", VA = "0xD09FB4")]
	public PlatformSwapper()
	{
	}
}
[Token(Token = "0x2000469")]
public class Quest1Disabler : MonoBehaviour
{
	[Token(Token = "0x60016DB")]
	[Address(RVA = "0xD09FBC", Offset = "0xD09FBC", VA = "0xD09FBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60016DC")]
	[Address(RVA = "0xD0A048", Offset = "0xD0A048", VA = "0xD0A048")]
	public Quest1Disabler()
	{
	}
}
[Token(Token = "0x200046A")]
public class Quest1ShadowRemover : MonoBehaviour
{
	[Token(Token = "0x60016DD")]
	[Address(RVA = "0xD0A050", Offset = "0xD0A050", VA = "0xD0A050")]
	private void Start()
	{
	}

	[Token(Token = "0x60016DE")]
	[Address(RVA = "0xD0A11C", Offset = "0xD0A11C", VA = "0xD0A11C")]
	public Quest1ShadowRemover()
	{
	}
}
[Token(Token = "0x200046B")]
public class RotateHelper : MonoBehaviour
{
	[Token(Token = "0x4001664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float rotX;

	[Token(Token = "0x4001665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float rotY;

	[Token(Token = "0x4001666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float rotZ;

	[Token(Token = "0x4001667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speed;

	[Token(Token = "0x60016DF")]
	[Address(RVA = "0xD0A124", Offset = "0xD0A124", VA = "0xD0A124")]
	private void Update()
	{
	}

	[Token(Token = "0x60016E0")]
	[Address(RVA = "0xD0A1C8", Offset = "0xD0A1C8", VA = "0xD0A1C8")]
	public RotateHelper()
	{
	}
}
[Token(Token = "0x200046C")]
public class RotateWithVelocity : MonoBehaviour
{
	[Token(Token = "0x4001668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody rb;

	[Token(Token = "0x60016E1")]
	[Address(RVA = "0xD0A1D8", Offset = "0xD0A1D8", VA = "0xD0A1D8")]
	private void Update()
	{
	}

	[Token(Token = "0x60016E2")]
	[Address(RVA = "0xD0A218", Offset = "0xD0A218", VA = "0xD0A218")]
	public RotateWithVelocity()
	{
	}
}
[Token(Token = "0x200046D")]
public class ScaleCloseToCam : MonoBehaviour
{
	[Token(Token = "0x60016E3")]
	[Address(RVA = "0xD0A220", Offset = "0xD0A220", VA = "0xD0A220")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60016E4")]
	[Address(RVA = "0xD0A390", Offset = "0xD0A390", VA = "0xD0A390")]
	public ScaleCloseToCam()
	{
	}
}
[Token(Token = "0x200046E")]
public class ScrollUV : MonoBehaviour
{
	[Token(Token = "0x4001669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float scrollSpeed_X;

	[Token(Token = "0x400166A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float scrollSpeed_Y;

	[Token(Token = "0x400166B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer rend;

	[Token(Token = "0x60016E5")]
	[Address(RVA = "0xD0A398", Offset = "0xD0A398", VA = "0xD0A398")]
	private void Start()
	{
	}

	[Token(Token = "0x60016E6")]
	[Address(RVA = "0xD0A3E8", Offset = "0xD0A3E8", VA = "0xD0A3E8")]
	private void Update()
	{
	}

	[Token(Token = "0x60016E7")]
	[Address(RVA = "0xD0A44C", Offset = "0xD0A44C", VA = "0xD0A44C")]
	public ScrollUV()
	{
	}
}
[Token(Token = "0x200046F")]
public class StateMachine<T, E>
{
	[Token(Token = "0x400166C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private E _currentState;

	[Token(Token = "0x400166D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private T parent;

	[Token(Token = "0x400166E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private State<T>[] states;

	[Token(Token = "0x17000338")]
	public E CurrentState
	{
		[Token(Token = "0x60016E8")]
		get
		{
			return (E)null;
		}
	}

	[Token(Token = "0x17000339")]
	private State<T> currentState
	{
		[Token(Token = "0x60016E9")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60016EA")]
	public StateMachine(T parent, State<T>[] states, E initState)
	{
	}

	[Token(Token = "0x60016EB")]
	public void update()
	{
	}

	[Token(Token = "0x60016EC")]
	public void switchState(E newState)
	{
	}
}
[Token(Token = "0x2000470")]
public abstract class State<T>
{
	[Token(Token = "0x60016ED")]
	public abstract void activate(T parent);

	[Token(Token = "0x60016EE")]
	public abstract void update(T parent);

	[Token(Token = "0x60016EF")]
	protected State()
	{
	}
}
[Token(Token = "0x2000471")]
public class SwapInputText : MonoBehaviour
{
	[Token(Token = "0x2000472")]
	[CompilerGenerated]
	private sealed class <lateStart>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SwapInputText <>4__this;

		[Token(Token = "0x1700033A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60016F6")]
			[Address(RVA = "0xD0AAAC", Offset = "0xD0AAAC", VA = "0xD0AAAC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700033B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60016F8")]
			[Address(RVA = "0xD0AAF4", Offset = "0xD0AAF4", VA = "0xD0AAF4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60016F3")]
		[Address(RVA = "0xD0A770", Offset = "0xD0A770", VA = "0xD0A770")]
		[DebuggerHidden]
		public <lateStart>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x60016F4")]
		[Address(RVA = "0xD0A7A0", Offset = "0xD0A7A0", VA = "0xD0A7A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60016F5")]
		[Address(RVA = "0xD0A7A4", Offset = "0xD0A7A4", VA = "0xD0A7A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60016F7")]
		[Address(RVA = "0xD0AAB4", Offset = "0xD0AAB4", VA = "0xD0AAB4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400166F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TMP_Text[] texts;

	[Token(Token = "0x4001670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text[] textsUI;

	[Token(Token = "0x60016F0")]
	[Address(RVA = "0xD0A45C", Offset = "0xD0A45C", VA = "0xD0A45C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60016F1")]
	[Address(RVA = "0xD0A708", Offset = "0xD0A708", VA = "0xD0A708")]
	[IteratorStateMachine(typeof(<lateStart>d__3))]
	private IEnumerator lateStart()
	{
		return null;
	}

	[Token(Token = "0x60016F2")]
	[Address(RVA = "0xD0A798", Offset = "0xD0A798", VA = "0xD0A798")]
	public SwapInputText()
	{
	}
}
[Token(Token = "0x2000473")]
public class TakeScreenshot : MonoBehaviour
{
	[Token(Token = "0x2000474")]
	public enum CaptureSize
	{
		[Token(Token = "0x400167A")]
		CameraSize,
		[Token(Token = "0x400167B")]
		ScreenResolution,
		[Token(Token = "0x400167C")]
		FixedSize
	}

	[Token(Token = "0x4001674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera targetCamera;

	[Token(Token = "0x4001675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CaptureSize captureSize;

	[Token(Token = "0x4001676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public UnityEngine.Vector2 pixelSize;

	[Token(Token = "0x4001677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string savePath;

	[Token(Token = "0x4001678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string fileName;

	[Token(Token = "0x60016F9")]
	[Address(RVA = "0xD0AAFC", Offset = "0xD0AAFC", VA = "0xD0AAFC")]
	public void saveCapture()
	{
	}

	[Token(Token = "0x60016FA")]
	[Address(RVA = "0xD0AF94", Offset = "0xD0AF94", VA = "0xD0AF94")]
	public static Texture2D capture(Camera camera)
	{
		return null;
	}

	[Token(Token = "0x60016FB")]
	[Address(RVA = "0xD0ADB0", Offset = "0xD0ADB0", VA = "0xD0ADB0")]
	public static Texture2D capture(Camera camera, int width, int height)
	{
		return null;
	}

	[Token(Token = "0x60016FC")]
	[Address(RVA = "0xD0AF6C", Offset = "0xD0AF6C", VA = "0xD0AF6C")]
	public static void saveTexture(string path, Texture2D texture)
	{
	}

	[Token(Token = "0x60016FD")]
	[Address(RVA = "0xD0AFCC", Offset = "0xD0AFCC", VA = "0xD0AFCC")]
	private void Update()
	{
	}

	[Token(Token = "0x60016FE")]
	[Address(RVA = "0xD0B04C", Offset = "0xD0B04C", VA = "0xD0B04C")]
	public TakeScreenshot()
	{
	}
}
[Token(Token = "0x2000475")]
public class PlayerRigSwitcher : MonoBehaviour
{
	[Token(Token = "0x400167D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject picoPlayer;

	[Token(Token = "0x400167E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject qiyuPlayer;

	[Token(Token = "0x400167F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject noloPlayer;

	[Token(Token = "0x60016FF")]
	[Address(RVA = "0xD0B0C0", Offset = "0xD0B0C0", VA = "0xD0B0C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001700")]
	[Address(RVA = "0xD0B0C4", Offset = "0xD0B0C4", VA = "0xD0B0C4")]
	public PlayerRigSwitcher()
	{
	}
}
[Token(Token = "0x2000476")]
public class UniversalGrabbable : MonoBehaviour
{
	[Token(Token = "0x4001680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	protected bool m_allowOffhandGrab;

	[Token(Token = "0x4001681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	protected bool m_snapPosition;

	[Token(Token = "0x4001682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[SerializeField]
	protected bool m_snapOrientation;

	[Token(Token = "0x4001683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected Transform m_snapOffset;

	[Token(Token = "0x4001684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected Collider[] m_grabPoints;

	[Token(Token = "0x4001685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected bool m_grabbedKinematic;

	[Token(Token = "0x4001686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected Collider m_grabbedCollider;

	[Token(Token = "0x4001687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected UniversalGrabber m_grabbedBy;

	[Token(Token = "0x4001688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public UnityEvent onGrab;

	[Token(Token = "0x4001689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public UnityEvent onDrop;

	[Token(Token = "0x1700033C")]
	public bool allowOffhandGrab
	{
		[Token(Token = "0x6001701")]
		[Address(RVA = "0xD0B0CC", Offset = "0xD0B0CC", VA = "0xD0B0CC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700033D")]
	public bool isGrabbed
	{
		[Token(Token = "0x6001702")]
		[Address(RVA = "0xD0B0D4", Offset = "0xD0B0D4", VA = "0xD0B0D4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700033E")]
	public bool snapPosition
	{
		[Token(Token = "0x6001703")]
		[Address(RVA = "0xD0B134", Offset = "0xD0B134", VA = "0xD0B134")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700033F")]
	public bool snapOrientation
	{
		[Token(Token = "0x6001704")]
		[Address(RVA = "0xD0B13C", Offset = "0xD0B13C", VA = "0xD0B13C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000340")]
	public Transform snapOffset
	{
		[Token(Token = "0x6001705")]
		[Address(RVA = "0xD0B144", Offset = "0xD0B144", VA = "0xD0B144")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000341")]
	public UniversalGrabber grabbedBy
	{
		[Token(Token = "0x6001706")]
		[Address(RVA = "0xD0B14C", Offset = "0xD0B14C", VA = "0xD0B14C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000342")]
	public Transform grabbedTransform
	{
		[Token(Token = "0x6001707")]
		[Address(RVA = "0xD0B154", Offset = "0xD0B154", VA = "0xD0B154")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000343")]
	public Rigidbody grabbedRigidbody
	{
		[Token(Token = "0x6001708")]
		[Address(RVA = "0xD0B170", Offset = "0xD0B170", VA = "0xD0B170")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000344")]
	public Collider[] grabPoints
	{
		[Token(Token = "0x6001709")]
		[Address(RVA = "0xD0B18C", Offset = "0xD0B18C", VA = "0xD0B18C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600170A")]
	[Address(RVA = "0xD0B194", Offset = "0xD0B194", VA = "0xD0B194", Slot = "4")]
	public virtual void GrabBegin(UniversalGrabber hand, Collider grabPoint)
	{
	}

	[Token(Token = "0x600170B")]
	[Address(RVA = "0xD0B288", Offset = "0xD0B288", VA = "0xD0B288", Slot = "5")]
	public virtual void GrabEnd(UnityEngine.Vector3 linearVelocity, UnityEngine.Vector3 angularVelocity, float scaler = 1f)
	{
	}

	[Token(Token = "0x600170C")]
	[Address(RVA = "0xD0B390", Offset = "0xD0B390", VA = "0xD0B390")]
	private void Awake()
	{
	}

	[Token(Token = "0x600170D")]
	[Address(RVA = "0xD0B4DC", Offset = "0xD0B4DC", VA = "0xD0B4DC", Slot = "6")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600170E")]
	[Address(RVA = "0xD0B540", Offset = "0xD0B540", VA = "0xD0B540")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600170F")]
	[Address(RVA = "0xD0B674", Offset = "0xD0B674", VA = "0xD0B674")]
	public UniversalGrabbable()
	{
	}
}
[Token(Token = "0x2000477")]
[RequireComponent(typeof(Rigidbody))]
public class UniversalGrabber : MonoBehaviour
{
	[Token(Token = "0x400168A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float grabBegin;

	[Token(Token = "0x400168B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float grabEnd;

	[Token(Token = "0x400168C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float handForceScaler;

	[Token(Token = "0x400168D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool alreadyUpdated;

	[Token(Token = "0x400168E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	[SerializeField]
	protected bool m_parentHeldObject;

	[Token(Token = "0x400168F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	[SerializeField]
	protected bool m_moveHandPosition;

	[Token(Token = "0x4001690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected Transform m_gripTransform;

	[Token(Token = "0x4001691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	protected Collider[] m_grabVolumes;

	[Token(Token = "0x4001692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	protected OVRInput.Controller m_controller;

	[Token(Token = "0x4001693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	protected Transform m_parentTransform;

	[Token(Token = "0x4001694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	protected GameObject m_player;

	[Token(Token = "0x4001695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected bool m_grabVolumeEnabled;

	[Token(Token = "0x4001696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected UnityEngine.Vector3 m_lastPos;

	[Token(Token = "0x4001697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected Quaternion m_lastRot;

	[Token(Token = "0x4001698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected Quaternion m_anchorOffsetRotation;

	[Token(Token = "0x4001699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected UnityEngine.Vector3 m_anchorOffsetPosition;

	[Token(Token = "0x400169A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	protected float m_prevFlex;

	[Token(Token = "0x400169B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected UniversalGrabbable m_grabbedObj;

	[Token(Token = "0x400169C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected UnityEngine.Vector3 m_grabbedObjectPosOff;

	[Token(Token = "0x400169D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	protected Quaternion m_grabbedObjectRotOff;

	[Token(Token = "0x400169E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected Dictionary<UniversalGrabbable, int> m_grabCandidates;

	[Token(Token = "0x400169F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected bool m_operatingWithoutOVRCameraRig;

	[Token(Token = "0x17000345")]
	public UniversalGrabbable grabbedObject
	{
		[Token(Token = "0x6001710")]
		[Address(RVA = "0xD0B700", Offset = "0xD0B700", VA = "0xD0B700")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001711")]
	[Address(RVA = "0xD0B5C4", Offset = "0xD0B5C4", VA = "0xD0B5C4")]
	public void ForceRelease(UniversalGrabbable grabbable)
	{
	}

	[Token(Token = "0x6001712")]
	[Address(RVA = "0xD0B970", Offset = "0xD0B970", VA = "0xD0B970", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6001713")]
	[Address(RVA = "0xD0BAB4", Offset = "0xD0BAB4", VA = "0xD0BAB4", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6001714")]
	[Address(RVA = "0xD0BCE4", Offset = "0xD0BCE4", VA = "0xD0BCE4", Slot = "6")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x6001715")]
	[Address(RVA = "0xD0BCEC", Offset = "0xD0BCEC", VA = "0xD0BCEC", Slot = "7")]
	public virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x6001716")]
	[Address(RVA = "0xD0BCFC", Offset = "0xD0BCFC", VA = "0xD0BCFC")]
	private void OnUpdatedAnchors()
	{
	}

	[Token(Token = "0x6001717")]
	[Address(RVA = "0xD0BF8C", Offset = "0xD0BF8C", VA = "0xD0BF8C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001718")]
	[Address(RVA = "0xD0C004", Offset = "0xD0C004", VA = "0xD0C004")]
	private void OnTriggerEnter(Collider otherCollider)
	{
	}

	[Token(Token = "0x6001719")]
	[Address(RVA = "0xD0C12C", Offset = "0xD0C12C", VA = "0xD0C12C")]
	private void OnTriggerExit(Collider otherCollider)
	{
	}

	[Token(Token = "0x600171A")]
	[Address(RVA = "0xD0BF4C", Offset = "0xD0BF4C", VA = "0xD0BF4C")]
	protected void CheckForGrabOrRelease(float prevFlex)
	{
	}

	[Token(Token = "0x600171B")]
	[Address(RVA = "0xD0C288", Offset = "0xD0C288", VA = "0xD0C288", Slot = "8")]
	protected virtual void GrabBegin()
	{
	}

	[Token(Token = "0x600171C")]
	[Address(RVA = "0xD0C938", Offset = "0xD0C938", VA = "0xD0C938", Slot = "9")]
	protected virtual void MoveGrabbedObject(UnityEngine.Vector3 pos, Quaternion rot, bool forceTeleport = false)
	{
	}

	[Token(Token = "0x600171D")]
	[Address(RVA = "0xD0B708", Offset = "0xD0B708", VA = "0xD0B708")]
	protected void GrabEnd()
	{
	}

	[Token(Token = "0x600171E")]
	[Address(RVA = "0xD0CB6C", Offset = "0xD0CB6C", VA = "0xD0CB6C")]
	protected void GrabbableRelease(UnityEngine.Vector3 linearVelocity, UnityEngine.Vector3 angularVelocity)
	{
	}

	[Token(Token = "0x600171F")]
	[Address(RVA = "0xD0CBE4", Offset = "0xD0CBE4", VA = "0xD0CBE4", Slot = "10")]
	protected virtual void GrabVolumeEnable(bool enabled)
	{
	}

	[Token(Token = "0x6001720")]
	[Address(RVA = "0xD0CCA4", Offset = "0xD0CCA4", VA = "0xD0CCA4", Slot = "11")]
	protected virtual void OffhandGrabbed(UniversalGrabbable grabbable)
	{
	}

	[Token(Token = "0x6001721")]
	[Address(RVA = "0xD0BB94", Offset = "0xD0BB94", VA = "0xD0BB94")]
	protected void SetPlayerIgnoreCollision(GameObject grabbable, bool ignore)
	{
	}

	[Token(Token = "0x6001722")]
	[Address(RVA = "0xD0CD70", Offset = "0xD0CD70", VA = "0xD0CD70")]
	public UniversalGrabber()
	{
	}
}
[Token(Token = "0x2000478")]
public class VRHapticManager : MonoBehaviour
{
	[Token(Token = "0x40016A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static VRHapticManager _instance;

	[Token(Token = "0x17000346")]
	public static VRHapticManager instance
	{
		[Token(Token = "0x6001725")]
		[Address(RVA = "0xD04998", Offset = "0xD04998", VA = "0xD04998")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001724")]
	[Address(RVA = "0xD0CE10", Offset = "0xD0CE10", VA = "0xD0CE10")]
	private void init()
	{
	}

	[Token(Token = "0x6001726")]
	[Address(RVA = "0xD0CE14", Offset = "0xD0CE14", VA = "0xD0CE14", Slot = "4")]
	public virtual void playBadClip(bool left, bool overrideClip = false)
	{
	}

	[Token(Token = "0x6001727")]
	[Address(RVA = "0xD0CE18", Offset = "0xD0CE18", VA = "0xD0CE18", Slot = "5")]
	public virtual void playGoodClip(bool left, bool overrideClip = false)
	{
	}

	[Token(Token = "0x6001728")]
	[Address(RVA = "0xD0CE1C", Offset = "0xD0CE1C", VA = "0xD0CE1C", Slot = "6")]
	public virtual void playExtraClip(bool left, int clip, bool overrideClip = false)
	{
	}

	[Token(Token = "0x6001729")]
	[Address(RVA = "0xD0CE20", Offset = "0xD0CE20", VA = "0xD0CE20")]
	public VRHapticManager()
	{
	}
}
[Token(Token = "0x2000479")]
public class VRHapticManagerNOLO : VRHapticManager
{
	[Token(Token = "0x600172A")]
	[Address(RVA = "0xD0CE28", Offset = "0xD0CE28", VA = "0xD0CE28")]
	public VRHapticManagerNOLO()
	{
	}
}
[Token(Token = "0x200047A")]
public class VRHapticManagerPico : VRHapticManager
{
	[Token(Token = "0x600172B")]
	[Address(RVA = "0xD0CE30", Offset = "0xD0CE30", VA = "0xD0CE30", Slot = "4")]
	public override void playBadClip(bool left, bool overrideClip = false)
	{
	}

	[Token(Token = "0x600172C")]
	[Address(RVA = "0xD0CE34", Offset = "0xD0CE34", VA = "0xD0CE34", Slot = "5")]
	public override void playGoodClip(bool left, bool overrideClip = false)
	{
	}

	[Token(Token = "0x600172D")]
	[Address(RVA = "0xD0CE38", Offset = "0xD0CE38", VA = "0xD0CE38", Slot = "6")]
	public override void playExtraClip(bool left, int clip, bool overrideClip = false)
	{
	}

	[Token(Token = "0x600172E")]
	[Address(RVA = "0xD0CE3C", Offset = "0xD0CE3C", VA = "0xD0CE3C")]
	public VRHapticManagerPico()
	{
	}
}
[Token(Token = "0x200047B")]
public class VRHapticManagerQiyu : VRHapticManager
{
	[Token(Token = "0x40016A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InputDevice leftHand;

	[Token(Token = "0x40016A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public InputDevice rightHand;

	[Token(Token = "0x600172F")]
	[Address(RVA = "0xD0CE44", Offset = "0xD0CE44", VA = "0xD0CE44")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001730")]
	[Address(RVA = "0xD0CF54", Offset = "0xD0CF54", VA = "0xD0CF54", Slot = "4")]
	public override void playBadClip(bool left, bool overrideClip = false)
	{
	}

	[Token(Token = "0x6001731")]
	[Address(RVA = "0xD0CFE4", Offset = "0xD0CFE4", VA = "0xD0CFE4", Slot = "5")]
	public override void playGoodClip(bool left, bool overrideClip = false)
	{
	}

	[Token(Token = "0x6001732")]
	[Address(RVA = "0xD0D078", Offset = "0xD0D078", VA = "0xD0D078", Slot = "6")]
	public override void playExtraClip(bool left, int clip, bool overrideClip = false)
	{
	}

	[Token(Token = "0x6001733")]
	[Address(RVA = "0xD0D100", Offset = "0xD0D100", VA = "0xD0D100")]
	public VRHapticManagerQiyu()
	{
	}
}
[Token(Token = "0x200047C")]
public class VRInputManager : MonoBehaviour
{
	[Token(Token = "0x40016A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool openVR;

	[Token(Token = "0x40016A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	protected bool lefthanded;

	[Token(Token = "0x40016A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool knuckles;

	[Token(Token = "0x40016A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected Transform trackingSpace;

	[Token(Token = "0x40016A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static float stickDeadzone;

	[Token(Token = "0x40016A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	protected static VRInputManager _instance;

	[Token(Token = "0x17000347")]
	public static VRInputManager instance
	{
		[Token(Token = "0x6001736")]
		[Address(RVA = "0xD07464", Offset = "0xD07464", VA = "0xD07464")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000348")]
	public bool leftThumbstickIdle
	{
		[Token(Token = "0x6001737")]
		[Address(RVA = "0xD0D254", Offset = "0xD0D254", VA = "0xD0D254")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000349")]
	public virtual string selectButtonString
	{
		[Token(Token = "0x6001739")]
		[Address(RVA = "0xD0D3A0", Offset = "0xD0D3A0", VA = "0xD0D3A0", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700034A")]
	public virtual string menuButtonString
	{
		[Token(Token = "0x600173A")]
		[Address(RVA = "0xD0D40C", Offset = "0xD0D40C", VA = "0xD0D40C", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700034B")]
	public virtual string hoverboardString
	{
		[Token(Token = "0x600173B")]
		[Address(RVA = "0xD0D478", Offset = "0xD0D478", VA = "0xD0D478", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700034C")]
	public virtual string hoverboardBrakeString
	{
		[Token(Token = "0x600173C")]
		[Address(RVA = "0xD0D4E4", Offset = "0xD0D4E4", VA = "0xD0D4E4", Slot = "9")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700034D")]
	public virtual bool thumbstickInputLostLeft
	{
		[Token(Token = "0x600173D")]
		[Address(RVA = "0xD0D550", Offset = "0xD0D550", VA = "0xD0D550", Slot = "10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700034E")]
	public virtual bool thumbstickRequirementLeft
	{
		[Token(Token = "0x600173E")]
		[Address(RVA = "0xD0D5EC", Offset = "0xD0D5EC", VA = "0xD0D5EC", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700034F")]
	public virtual bool thumbstickRequirementRight
	{
		[Token(Token = "0x600173F")]
		[Address(RVA = "0xD0D5F4", Offset = "0xD0D5F4", VA = "0xD0D5F4", Slot = "12")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000350")]
	public OVRInput.Button switchPerspective
	{
		[Token(Token = "0x6001744")]
		[Address(RVA = "0xD0D77C", Offset = "0xD0D77C", VA = "0xD0D77C")]
		get
		{
			return default(OVRInput.Button);
		}
	}

	[Token(Token = "0x17000351")]
	public virtual bool switchPerspectiveDown
	{
		[Token(Token = "0x6001745")]
		[Address(RVA = "0xD0D794", Offset = "0xD0D794", VA = "0xD0D794", Slot = "17")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000352")]
	public virtual bool cameraTurnRightDown
	{
		[Token(Token = "0x6001746")]
		[Address(RVA = "0xD0D7EC", Offset = "0xD0D7EC", VA = "0xD0D7EC", Slot = "18")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000353")]
	public virtual bool cameraTurnLeftDown
	{
		[Token(Token = "0x6001747")]
		[Address(RVA = "0xD0D844", Offset = "0xD0D844", VA = "0xD0D844", Slot = "19")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000354")]
	public OVRInput.Button triggerInteract
	{
		[Token(Token = "0x6001748")]
		[Address(RVA = "0xD0D89C", Offset = "0xD0D89C", VA = "0xD0D89C")]
		get
		{
			return default(OVRInput.Button);
		}
	}

	[Token(Token = "0x17000355")]
	public virtual bool leftStickPress
	{
		[Token(Token = "0x6001749")]
		[Address(RVA = "0xD0D8A4", Offset = "0xD0D8A4", VA = "0xD0D8A4", Slot = "20")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000356")]
	public virtual bool rightStickPress
	{
		[Token(Token = "0x600174A")]
		[Address(RVA = "0xD0D8FC", Offset = "0xD0D8FC", VA = "0xD0D8FC", Slot = "21")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000357")]
	public virtual bool takeScreenShot
	{
		[Token(Token = "0x600174B")]
		[Address(RVA = "0xD0D954", Offset = "0xD0D954", VA = "0xD0D954", Slot = "22")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000358")]
	public virtual bool triggerInteractDown
	{
		[Token(Token = "0x600174C")]
		[Address(RVA = "0xD0D95C", Offset = "0xD0D95C", VA = "0xD0D95C", Slot = "23")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000359")]
	public OVRInput.Button triggerMenusRight
	{
		[Token(Token = "0x600174F")]
		[Address(RVA = "0xD0DB30", Offset = "0xD0DB30", VA = "0xD0DB30")]
		get
		{
			return default(OVRInput.Button);
		}
	}

	[Token(Token = "0x1700035A")]
	public virtual bool triggerMenusRightDown
	{
		[Token(Token = "0x6001750")]
		[Address(RVA = "0xD0DB58", Offset = "0xD0DB58", VA = "0xD0DB58", Slot = "26")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700035B")]
	public virtual bool triggerMenusRightHeld
	{
		[Token(Token = "0x6001751")]
		[Address(RVA = "0xD0DBE4", Offset = "0xD0DBE4", VA = "0xD0DBE4", Slot = "27")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700035C")]
	public virtual bool triggerMenusRightUp
	{
		[Token(Token = "0x6001752")]
		[Address(RVA = "0xD0DC70", Offset = "0xD0DC70", VA = "0xD0DC70", Slot = "28")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700035D")]
	public virtual bool triggerMenusLeftHeld
	{
		[Token(Token = "0x6001753")]
		[Address(RVA = "0xD0DCFC", Offset = "0xD0DCFC", VA = "0xD0DCFC", Slot = "29")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700035E")]
	public OVRInput.Button triggerMenusLeft
	{
		[Token(Token = "0x6001754")]
		[Address(RVA = "0xD0DD88", Offset = "0xD0DD88", VA = "0xD0DD88")]
		get
		{
			return default(OVRInput.Button);
		}
	}

	[Token(Token = "0x1700035F")]
	public virtual bool triggerMenusLeftDown
	{
		[Token(Token = "0x6001755")]
		[Address(RVA = "0xD0DDB0", Offset = "0xD0DDB0", VA = "0xD0DDB0", Slot = "30")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000360")]
	public virtual bool triggerMenusLeftUp
	{
		[Token(Token = "0x6001756")]
		[Address(RVA = "0xD0DE3C", Offset = "0xD0DE3C", VA = "0xD0DE3C", Slot = "31")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000361")]
	public OVRInput.Button hoverBoardBrake
	{
		[Token(Token = "0x6001757")]
		[Address(RVA = "0xD0DEC8", Offset = "0xD0DEC8", VA = "0xD0DEC8")]
		get
		{
			return default(OVRInput.Button);
		}
	}

	[Token(Token = "0x17000362")]
	public virtual bool hoverBoardBrakeHeld
	{
		[Token(Token = "0x6001758")]
		[Address(RVA = "0xD0DEE0", Offset = "0xD0DEE0", VA = "0xD0DEE0", Slot = "32")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000363")]
	public virtual float castLeftTriggerVal
	{
		[Token(Token = "0x6001759")]
		[Address(RVA = "0xD0DF4C", Offset = "0xD0DF4C", VA = "0xD0DF4C", Slot = "33")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000364")]
	public virtual float castRightTriggerVal
	{
		[Token(Token = "0x600175A")]
		[Address(RVA = "0xD0DFA4", Offset = "0xD0DFA4", VA = "0xD0DFA4", Slot = "34")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000365")]
	public virtual float wieldRightTriggerVal
	{
		[Token(Token = "0x600175B")]
		[Address(RVA = "0xD0DFFC", Offset = "0xD0DFFC", VA = "0xD0DFFC", Slot = "35")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000366")]
	public virtual bool wieldRightTriggerHeld
	{
		[Token(Token = "0x600175C")]
		[Address(RVA = "0xD0E054", Offset = "0xD0E054", VA = "0xD0E054", Slot = "36")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000367")]
	public virtual float wieldLeftTriggerVal
	{
		[Token(Token = "0x600175D")]
		[Address(RVA = "0xD0E0AC", Offset = "0xD0E0AC", VA = "0xD0E0AC", Slot = "37")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000368")]
	public virtual bool wieldLeftTriggerHeld
	{
		[Token(Token = "0x600175E")]
		[Address(RVA = "0xD0E104", Offset = "0xD0E104", VA = "0xD0E104", Slot = "38")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000369")]
	public virtual bool leftIndexTriggerDown
	{
		[Token(Token = "0x600175F")]
		[Address(RVA = "0xD0E15C", Offset = "0xD0E15C", VA = "0xD0E15C", Slot = "39")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700036A")]
	public virtual bool rightIndexTriggerDown
	{
		[Token(Token = "0x6001760")]
		[Address(RVA = "0xD0E1B4", Offset = "0xD0E1B4", VA = "0xD0E1B4", Slot = "40")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700036B")]
	public virtual bool leftHandTriggerDown
	{
		[Token(Token = "0x6001761")]
		[Address(RVA = "0xD0E20C", Offset = "0xD0E20C", VA = "0xD0E20C", Slot = "41")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700036C")]
	public virtual bool rightHandTriggerDown
	{
		[Token(Token = "0x6001762")]
		[Address(RVA = "0xD0E264", Offset = "0xD0E264", VA = "0xD0E264", Slot = "42")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700036D")]
	public virtual UnityEngine.Vector2 leftThumbStick
	{
		[Token(Token = "0x6001763")]
		[Address(RVA = "0xD0E2BC", Offset = "0xD0E2BC", VA = "0xD0E2BC", Slot = "43")]
		get
		{
			return default(UnityEngine.Vector2);
		}
	}

	[Token(Token = "0x1700036E")]
	public virtual UnityEngine.Vector2 rightThumbStick
	{
		[Token(Token = "0x6001764")]
		[Address(RVA = "0xD0E314", Offset = "0xD0E314", VA = "0xD0E314", Slot = "44")]
		get
		{
			return default(UnityEngine.Vector2);
		}
	}

	[Token(Token = "0x1700036F")]
	public virtual UnityEngine.Vector3 leftHandVelocity
	{
		[Token(Token = "0x6001765")]
		[Address(RVA = "0xD0E36C", Offset = "0xD0E36C", VA = "0xD0E36C", Slot = "45")]
		get
		{
			return default(UnityEngine.Vector3);
		}
	}

	[Token(Token = "0x17000370")]
	public virtual UnityEngine.Vector3 rightHandVelocity
	{
		[Token(Token = "0x6001766")]
		[Address(RVA = "0xD0E3C0", Offset = "0xD0E3C0", VA = "0xD0E3C0", Slot = "46")]
		get
		{
			return default(UnityEngine.Vector3);
		}
	}

	[Token(Token = "0x17000371")]
	public OVRInput.Button npcInteract
	{
		[Token(Token = "0x6001767")]
		[Address(RVA = "0xD0E414", Offset = "0xD0E414", VA = "0xD0E414")]
		get
		{
			return default(OVRInput.Button);
		}
	}

	[Token(Token = "0x17000372")]
	public virtual bool npcInteractDown
	{
		[Token(Token = "0x6001768")]
		[Address(RVA = "0xD0E428", Offset = "0xD0E428", VA = "0xD0E428", Slot = "47")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000373")]
	public virtual bool npcInteractHeld
	{
		[Token(Token = "0x6001769")]
		[Address(RVA = "0xD0E490", Offset = "0xD0E490", VA = "0xD0E490", Slot = "48")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000374")]
	public virtual bool npcInteractUp
	{
		[Token(Token = "0x600176A")]
		[Address(RVA = "0xD0E4F8", Offset = "0xD0E4F8", VA = "0xD0E4F8", Slot = "49")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000375")]
	public OVRInput.Button hoverboardMount
	{
		[Token(Token = "0x600176B")]
		[Address(RVA = "0xD0E560", Offset = "0xD0E560", VA = "0xD0E560")]
		get
		{
			return default(OVRInput.Button);
		}
	}

	[Token(Token = "0x17000376")]
	public virtual bool hoverboardMountDown
	{
		[Token(Token = "0x600176C")]
		[Address(RVA = "0xD0E574", Offset = "0xD0E574", VA = "0xD0E574", Slot = "50")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000377")]
	public virtual bool hoverboardMountHeld
	{
		[Token(Token = "0x600176D")]
		[Address(RVA = "0xD0E5DC", Offset = "0xD0E5DC", VA = "0xD0E5DC", Slot = "51")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000378")]
	public virtual bool hoverboardMountUp
	{
		[Token(Token = "0x600176E")]
		[Address(RVA = "0xD0E644", Offset = "0xD0E644", VA = "0xD0E644", Slot = "52")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000379")]
	public virtual bool openMenu
	{
		[Token(Token = "0x600176F")]
		[Address(RVA = "0xD0E6AC", Offset = "0xD0E6AC", VA = "0xD0E6AC", Slot = "53")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700037A")]
	public virtual bool startDown
	{
		[Token(Token = "0x6001770")]
		[Address(RVA = "0xD0E714", Offset = "0xD0E714", VA = "0xD0E714", Slot = "54")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001734")]
	[Address(RVA = "0xD0D108", Offset = "0xD0D108", VA = "0xD0D108")]
	private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x6001735")]
	[Address(RVA = "0xD0D168", Offset = "0xD0D168", VA = "0xD0D168", Slot = "4")]
	protected virtual void init()
	{
	}

	[Token(Token = "0x6001738")]
	[Address(RVA = "0xD0D39C", Offset = "0xD0D39C", VA = "0xD0D39C", Slot = "5")]
	public virtual void updateTrackingSpace()
	{
	}

	[Token(Token = "0x6001740")]
	[Address(RVA = "0xD0D5FC", Offset = "0xD0D5FC", VA = "0xD0D5FC", Slot = "13")]
	public virtual UnityEngine.Vector3 localControllerPos(bool rightHand)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6001741")]
	[Address(RVA = "0xD0D65C", Offset = "0xD0D65C", VA = "0xD0D65C", Slot = "14")]
	public virtual Quaternion localControllerRotation(bool rightHand)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6001742")]
	[Address(RVA = "0xD0D6BC", Offset = "0xD0D6BC", VA = "0xD0D6BC", Slot = "15")]
	public virtual UnityEngine.Vector3 localControllerVelocity(bool rightHand)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x6001743")]
	[Address(RVA = "0xD0D71C", Offset = "0xD0D71C", VA = "0xD0D71C", Slot = "16")]
	public virtual UnityEngine.Vector3 localControllerAngularVelocity(bool rightHand)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x600174D")]
	[Address(RVA = "0xD0D9B4", Offset = "0xD0D9B4", VA = "0xD0D9B4", Slot = "24")]
	public virtual bool isPointing(bool right)
	{
		return default(bool);
	}

	[Token(Token = "0x600174E")]
	[Address(RVA = "0xD0DA24", Offset = "0xD0DA24", VA = "0xD0DA24", Slot = "25")]
	public virtual bool isGivingThumbsUp(bool right)
	{
		return default(bool);
	}

	[Token(Token = "0x6001771")]
	[Address(RVA = "0xD0E76C", Offset = "0xD0E76C", VA = "0xD0E76C")]
	public VRInputManager()
	{
	}
}
[Token(Token = "0x200047D")]
public class VRInputManagerNOLO : VRInputManager
{
	[Token(Token = "0x6001773")]
	[Address(RVA = "0xD0E7C4", Offset = "0xD0E7C4", VA = "0xD0E7C4")]
	public VRInputManagerNOLO()
	{
	}
}
[Token(Token = "0x200047E")]
public class VRInputManagerQiyu : VRInputManager
{
	[Token(Token = "0x200047F")]
	public enum PressType
	{
		[Token(Token = "0x40016BA")]
		Begin,
		[Token(Token = "0x40016BB")]
		End,
		[Token(Token = "0x40016BC")]
		Continuous
	}

	[Token(Token = "0x40016A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public InputDevice leftHand;

	[Token(Token = "0x40016AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public InputDevice rightHand;

	[Token(Token = "0x40016AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool checkedForVive;

	[Token(Token = "0x40016AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool _perspectiveDownLastFrame;

	[Token(Token = "0x40016AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	private bool _cameraTurnRightDown;

	[Token(Token = "0x40016AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	private bool _cameraTurnLeftDown;

	[Token(Token = "0x40016AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool _triggerMenusRightDownLastFrame;

	[Token(Token = "0x40016B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool _triggerMenusRightDown;

	[Token(Token = "0x40016B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	private bool _leftStickDownLastFrame;

	[Token(Token = "0x40016B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
	private bool _triggerMenusLeftDownLastFrame;

	[Token(Token = "0x40016B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _leftHandTriggerDownLastFrame;

	[Token(Token = "0x40016B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool _rightHandTriggerDownLastFrame;

	[Token(Token = "0x40016B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	private bool _npcInteractDownLastFrame;

	[Token(Token = "0x40016B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
	private bool _hoverboardMountDownLastFrame;

	[Token(Token = "0x40016B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool _menuDownlastFrame;

	[Token(Token = "0x40016B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	private bool _startDownLastFrame;

	[Token(Token = "0x1700037B")]
	public override string selectButtonString
	{
		[Token(Token = "0x6001778")]
		[Address(RVA = "0xD0EDFC", Offset = "0xD0EDFC", VA = "0xD0EDFC", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700037C")]
	public override string menuButtonString
	{
		[Token(Token = "0x6001779")]
		[Address(RVA = "0xD0EE00", Offset = "0xD0EE00", VA = "0xD0EE00", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700037D")]
	public override string hoverboardString
	{
		[Token(Token = "0x600177A")]
		[Address(RVA = "0xD0EE04", Offset = "0xD0EE04", VA = "0xD0EE04", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700037E")]
	public override string hoverboardBrakeString
	{
		[Token(Token = "0x600177B")]
		[Address(RVA = "0xD0EE08", Offset = "0xD0EE08", VA = "0xD0EE08", Slot = "9")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700037F")]
	public override bool thumbstickInputLostLeft
	{
		[Token(Token = "0x600177C")]
		[Address(RVA = "0xD0EE0C", Offset = "0xD0EE0C", VA = "0xD0EE0C", Slot = "10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000380")]
	public override bool thumbstickRequirementLeft
	{
		[Token(Token = "0x600177D")]
		[Address(RVA = "0xD0EE10", Offset = "0xD0EE10", VA = "0xD0EE10", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000381")]
	public override bool thumbstickRequirementRight
	{
		[Token(Token = "0x600177E")]
		[Address(RVA = "0xD0EE18", Offset = "0xD0EE18", VA = "0xD0EE18", Slot = "12")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000382")]
	public override bool switchPerspectiveDown
	{
		[Token(Token = "0x600177F")]
		[Address(RVA = "0xD0EE20", Offset = "0xD0EE20", VA = "0xD0EE20", Slot = "17")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000383")]
	public override bool cameraTurnRightDown
	{
		[Token(Token = "0x6001780")]
		[Address(RVA = "0xD0EEC4", Offset = "0xD0EEC4", VA = "0xD0EEC4", Slot = "18")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000384")]
	public override bool cameraTurnLeftDown
	{
		[Token(Token = "0x6001781")]
		[Address(RVA = "0xD0EF88", Offset = "0xD0EF88", VA = "0xD0EF88", Slot = "19")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000385")]
	public override bool triggerInteractDown
	{
		[Token(Token = "0x6001782")]
		[Address(RVA = "0xD0F04C", Offset = "0xD0F04C", VA = "0xD0F04C", Slot = "23")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000386")]
	public override bool triggerMenusRightDown
	{
		[Token(Token = "0x6001783")]
		[Address(RVA = "0xD0F0F0", Offset = "0xD0F0F0", VA = "0xD0F0F0", Slot = "26")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000387")]
	public override bool triggerMenusRightHeld
	{
		[Token(Token = "0x6001784")]
		[Address(RVA = "0xD0F100", Offset = "0xD0F100", VA = "0xD0F100", Slot = "27")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000388")]
	public override bool triggerMenusRightUp
	{
		[Token(Token = "0x6001785")]
		[Address(RVA = "0xD0F188", Offset = "0xD0F188", VA = "0xD0F188", Slot = "28")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000389")]
	public override bool leftStickPress
	{
		[Token(Token = "0x6001786")]
		[Address(RVA = "0xD0F22C", Offset = "0xD0F22C", VA = "0xD0F22C", Slot = "20")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700038A")]
	public override bool rightStickPress
	{
		[Token(Token = "0x6001787")]
		[Address(RVA = "0xD0F2B4", Offset = "0xD0F2B4", VA = "0xD0F2B4", Slot = "21")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700038B")]
	public override bool triggerMenusLeftHeld
	{
		[Token(Token = "0x6001788")]
		[Address(RVA = "0xD0F33C", Offset = "0xD0F33C", VA = "0xD0F33C", Slot = "29")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700038C")]
	public override bool takeScreenShot
	{
		[Token(Token = "0x6001789")]
		[Address(RVA = "0xD0F3C4", Offset = "0xD0F3C4", VA = "0xD0F3C4", Slot = "22")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700038D")]
	public override bool triggerMenusLeftDown
	{
		[Token(Token = "0x600178A")]
		[Address(RVA = "0xD0F468", Offset = "0xD0F468", VA = "0xD0F468", Slot = "30")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700038E")]
	public override bool triggerMenusLeftUp
	{
		[Token(Token = "0x600178B")]
		[Address(RVA = "0xD0F50C", Offset = "0xD0F50C", VA = "0xD0F50C", Slot = "31")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700038F")]
	public override bool hoverBoardBrakeHeld
	{
		[Token(Token = "0x600178C")]
		[Address(RVA = "0xD0F5B0", Offset = "0xD0F5B0", VA = "0xD0F5B0", Slot = "32")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000390")]
	public override float castLeftTriggerVal
	{
		[Token(Token = "0x600178D")]
		[Address(RVA = "0xD0F638", Offset = "0xD0F638", VA = "0xD0F638", Slot = "33")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000391")]
	public override float castRightTriggerVal
	{
		[Token(Token = "0x600178E")]
		[Address(RVA = "0xD0F6C4", Offset = "0xD0F6C4", VA = "0xD0F6C4", Slot = "34")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000392")]
	public override float wieldRightTriggerVal
	{
		[Token(Token = "0x600178F")]
		[Address(RVA = "0xD0F750", Offset = "0xD0F750", VA = "0xD0F750", Slot = "35")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000393")]
	public override bool wieldRightTriggerHeld
	{
		[Token(Token = "0x6001790")]
		[Address(RVA = "0xD0F7DC", Offset = "0xD0F7DC", VA = "0xD0F7DC", Slot = "36")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000394")]
	public override float wieldLeftTriggerVal
	{
		[Token(Token = "0x6001791")]
		[Address(RVA = "0xD0F864", Offset = "0xD0F864", VA = "0xD0F864", Slot = "37")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000395")]
	public override bool wieldLeftTriggerHeld
	{
		[Token(Token = "0x6001792")]
		[Address(RVA = "0xD0F8F0", Offset = "0xD0F8F0", VA = "0xD0F8F0", Slot = "38")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000396")]
	public override bool leftIndexTriggerDown
	{
		[Token(Token = "0x6001793")]
		[Address(RVA = "0xD0F978", Offset = "0xD0F978", VA = "0xD0F978", Slot = "39")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000397")]
	public override bool rightIndexTriggerDown
	{
		[Token(Token = "0x6001794")]
		[Address(RVA = "0xD0F988", Offset = "0xD0F988", VA = "0xD0F988", Slot = "40")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000398")]
	public override bool leftHandTriggerDown
	{
		[Token(Token = "0x6001795")]
		[Address(RVA = "0xD0F998", Offset = "0xD0F998", VA = "0xD0F998", Slot = "41")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000399")]
	public override bool rightHandTriggerDown
	{
		[Token(Token = "0x6001796")]
		[Address(RVA = "0xD0FA3C", Offset = "0xD0FA3C", VA = "0xD0FA3C", Slot = "42")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700039A")]
	public override UnityEngine.Vector2 leftThumbStick
	{
		[Token(Token = "0x6001797")]
		[Address(RVA = "0xD0FAE0", Offset = "0xD0FAE0", VA = "0xD0FAE0", Slot = "43")]
		get
		{
			return default(UnityEngine.Vector2);
		}
	}

	[Token(Token = "0x1700039B")]
	public override UnityEngine.Vector2 rightThumbStick
	{
		[Token(Token = "0x6001798")]
		[Address(RVA = "0xD0FC48", Offset = "0xD0FC48", VA = "0xD0FC48", Slot = "44")]
		get
		{
			return default(UnityEngine.Vector2);
		}
	}

	[Token(Token = "0x1700039C")]
	public override UnityEngine.Vector3 leftHandVelocity
	{
		[Token(Token = "0x6001799")]
		[Address(RVA = "0xD0FDB0", Offset = "0xD0FDB0", VA = "0xD0FDB0", Slot = "45")]
		get
		{
			return default(UnityEngine.Vector3);
		}
	}

	[Token(Token = "0x1700039D")]
	public override UnityEngine.Vector3 rightHandVelocity
	{
		[Token(Token = "0x600179A")]
		[Address(RVA = "0xD0FE54", Offset = "0xD0FE54", VA = "0xD0FE54", Slot = "46")]
		get
		{
			return default(UnityEngine.Vector3);
		}
	}

	[Token(Token = "0x1700039E")]
	public override bool npcInteractDown
	{
		[Token(Token = "0x600179B")]
		[Address(RVA = "0xD0FEF8", Offset = "0xD0FEF8", VA = "0xD0FEF8", Slot = "47")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700039F")]
	public override bool npcInteractHeld
	{
		[Token(Token = "0x600179C")]
		[Address(RVA = "0xD0FF9C", Offset = "0xD0FF9C", VA = "0xD0FF9C", Slot = "48")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003A0")]
	public override bool npcInteractUp
	{
		[Token(Token = "0x600179D")]
		[Address(RVA = "0xD10024", Offset = "0xD10024", VA = "0xD10024", Slot = "49")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003A1")]
	public override bool hoverboardMountDown
	{
		[Token(Token = "0x600179E")]
		[Address(RVA = "0xD100C8", Offset = "0xD100C8", VA = "0xD100C8", Slot = "50")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003A2")]
	public override bool hoverboardMountHeld
	{
		[Token(Token = "0x600179F")]
		[Address(RVA = "0xD10170", Offset = "0xD10170", VA = "0xD10170", Slot = "51")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003A3")]
	public override bool hoverboardMountUp
	{
		[Token(Token = "0x60017A0")]
		[Address(RVA = "0xD101F8", Offset = "0xD101F8", VA = "0xD101F8", Slot = "52")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003A4")]
	public override bool openMenu
	{
		[Token(Token = "0x60017A1")]
		[Address(RVA = "0xD1029C", Offset = "0xD1029C", VA = "0xD1029C", Slot = "53")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003A5")]
	public override bool startDown
	{
		[Token(Token = "0x60017A2")]
		[Address(RVA = "0xD10340", Offset = "0xD10340", VA = "0xD10340", Slot = "54")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001774")]
	[Address(RVA = "0xD0E81C", Offset = "0xD0E81C", VA = "0xD0E81C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001775")]
	[Address(RVA = "0xD0E878", Offset = "0xD0E878", VA = "0xD0E878")]
	private bool buttonStateActive(bool buttonDown, bool downLastFrame, PressType type)
	{
		return default(bool);
	}

	[Token(Token = "0x6001776")]
	[Address(RVA = "0xD0E8B0", Offset = "0xD0E8B0", VA = "0xD0E8B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6001777")]
	[Address(RVA = "0xD0EB88", Offset = "0xD0EB88", VA = "0xD0EB88")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60017A3")]
	[Address(RVA = "0xD103E8", Offset = "0xD103E8", VA = "0xD103E8", Slot = "25")]
	public override bool isGivingThumbsUp(bool right)
	{
		return default(bool);
	}

	[Token(Token = "0x60017A4")]
	[Address(RVA = "0xD103F0", Offset = "0xD103F0", VA = "0xD103F0", Slot = "24")]
	public override bool isPointing(bool right)
	{
		return default(bool);
	}

	[Token(Token = "0x60017A5")]
	[Address(RVA = "0xD103F8", Offset = "0xD103F8", VA = "0xD103F8", Slot = "16")]
	public override UnityEngine.Vector3 localControllerAngularVelocity(bool right)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60017A6")]
	[Address(RVA = "0xD104F8", Offset = "0xD104F8", VA = "0xD104F8", Slot = "13")]
	public override UnityEngine.Vector3 localControllerPos(bool right)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60017A7")]
	[Address(RVA = "0xD105F8", Offset = "0xD105F8", VA = "0xD105F8", Slot = "14")]
	public override Quaternion localControllerRotation(bool right)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60017A8")]
	[Address(RVA = "0xD10714", Offset = "0xD10714", VA = "0xD10714", Slot = "15")]
	public override UnityEngine.Vector3 localControllerVelocity(bool right)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60017A9")]
	[Address(RVA = "0xD10734", Offset = "0xD10734", VA = "0xD10734")]
	public VRInputManagerQiyu()
	{
	}
}
[Token(Token = "0x2000480")]
public class VRInputManagerVive : VRInputManager
{
	[Token(Token = "0x2000481")]
	public enum PressType
	{
		[Token(Token = "0x40016CD")]
		Begin,
		[Token(Token = "0x40016CE")]
		End,
		[Token(Token = "0x40016CF")]
		Continuous
	}

	[Token(Token = "0x40016BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public InputDevice leftHand;

	[Token(Token = "0x40016BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public InputDevice rightHand;

	[Token(Token = "0x40016BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool checkedForVive;

	[Token(Token = "0x40016C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	private bool _perspectiveDownLastFrame;

	[Token(Token = "0x40016C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	private bool _cameraTurnRightDown;

	[Token(Token = "0x40016C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
	private bool _cameraTurnLeftDown;

	[Token(Token = "0x40016C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool _triggerMenusRightDownLastFrame;

	[Token(Token = "0x40016C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool _triggerMenusRightDown;

	[Token(Token = "0x40016C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	private bool _triggerMenusLeftDownLastFrame;

	[Token(Token = "0x40016C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
	private bool _leftHandTriggerDownLastFrame;

	[Token(Token = "0x40016C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _rightHandTriggerDownLastFrame;

	[Token(Token = "0x40016C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool _npcInteractDownLastFrame;

	[Token(Token = "0x40016C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
	private bool _hoverboardMountDownLastFrame;

	[Token(Token = "0x40016CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
	private bool _menuDownlastFrame;

	[Token(Token = "0x40016CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool _startDownLastFrame;

	[Token(Token = "0x170003A6")]
	public override string selectButtonString
	{
		[Token(Token = "0x60017AF")]
		[Address(RVA = "0xD10BBC", Offset = "0xD10BBC", VA = "0xD10BBC", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003A7")]
	public override string menuButtonString
	{
		[Token(Token = "0x60017B0")]
		[Address(RVA = "0xD10BC0", Offset = "0xD10BC0", VA = "0xD10BC0", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003A8")]
	public override string hoverboardString
	{
		[Token(Token = "0x60017B1")]
		[Address(RVA = "0xD10BC4", Offset = "0xD10BC4", VA = "0xD10BC4", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003A9")]
	public override string hoverboardBrakeString
	{
		[Token(Token = "0x60017B2")]
		[Address(RVA = "0xD10BC8", Offset = "0xD10BC8", VA = "0xD10BC8", Slot = "9")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170003AA")]
	public override bool thumbstickInputLostLeft
	{
		[Token(Token = "0x60017B3")]
		[Address(RVA = "0xD10BCC", Offset = "0xD10BCC", VA = "0xD10BCC", Slot = "10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003AB")]
	public override bool thumbstickRequirementLeft
	{
		[Token(Token = "0x60017B4")]
		[Address(RVA = "0xD10BD0", Offset = "0xD10BD0", VA = "0xD10BD0", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003AC")]
	public override bool thumbstickRequirementRight
	{
		[Token(Token = "0x60017B5")]
		[Address(RVA = "0xD10BD8", Offset = "0xD10BD8", VA = "0xD10BD8", Slot = "12")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003AD")]
	public override bool switchPerspectiveDown
	{
		[Token(Token = "0x60017B6")]
		[Address(RVA = "0xD10BE0", Offset = "0xD10BE0", VA = "0xD10BE0", Slot = "17")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003AE")]
	public override bool cameraTurnRightDown
	{
		[Token(Token = "0x60017B7")]
		[Address(RVA = "0xD10C84", Offset = "0xD10C84", VA = "0xD10C84", Slot = "18")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003AF")]
	public override bool cameraTurnLeftDown
	{
		[Token(Token = "0x60017B8")]
		[Address(RVA = "0xD10D48", Offset = "0xD10D48", VA = "0xD10D48", Slot = "19")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003B0")]
	public override bool triggerInteractDown
	{
		[Token(Token = "0x60017B9")]
		[Address(RVA = "0xD10E0C", Offset = "0xD10E0C", VA = "0xD10E0C", Slot = "23")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003B1")]
	public override bool triggerMenusRightDown
	{
		[Token(Token = "0x60017BA")]
		[Address(RVA = "0xD10EB0", Offset = "0xD10EB0", VA = "0xD10EB0", Slot = "26")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003B2")]
	public override bool triggerMenusRightHeld
	{
		[Token(Token = "0x60017BB")]
		[Address(RVA = "0xD10EC0", Offset = "0xD10EC0", VA = "0xD10EC0", Slot = "27")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003B3")]
	public override bool triggerMenusRightUp
	{
		[Token(Token = "0x60017BC")]
		[Address(RVA = "0xD10F48", Offset = "0xD10F48", VA = "0xD10F48", Slot = "28")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003B4")]
	public override bool triggerMenusLeftHeld
	{
		[Token(Token = "0x60017BD")]
		[Address(RVA = "0xD10FEC", Offset = "0xD10FEC", VA = "0xD10FEC", Slot = "29")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003B5")]
	public override bool triggerMenusLeftDown
	{
		[Token(Token = "0x60017BE")]
		[Address(RVA = "0xD11074", Offset = "0xD11074", VA = "0xD11074", Slot = "30")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003B6")]
	public override bool triggerMenusLeftUp
	{
		[Token(Token = "0x60017BF")]
		[Address(RVA = "0xD11118", Offset = "0xD11118", VA = "0xD11118", Slot = "31")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003B7")]
	public override bool hoverBoardBrakeHeld
	{
		[Token(Token = "0x60017C0")]
		[Address(RVA = "0xD111BC", Offset = "0xD111BC", VA = "0xD111BC", Slot = "32")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003B8")]
	public override float castLeftTriggerVal
	{
		[Token(Token = "0x60017C1")]
		[Address(RVA = "0xD11244", Offset = "0xD11244", VA = "0xD11244", Slot = "33")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170003B9")]
	public override float castRightTriggerVal
	{
		[Token(Token = "0x60017C2")]
		[Address(RVA = "0xD112D0", Offset = "0xD112D0", VA = "0xD112D0", Slot = "34")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170003BA")]
	public override float wieldRightTriggerVal
	{
		[Token(Token = "0x60017C3")]
		[Address(RVA = "0xD1135C", Offset = "0xD1135C", VA = "0xD1135C", Slot = "35")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170003BB")]
	public override bool wieldRightTriggerHeld
	{
		[Token(Token = "0x60017C4")]
		[Address(RVA = "0xD113E8", Offset = "0xD113E8", VA = "0xD113E8", Slot = "36")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003BC")]
	public override float wieldLeftTriggerVal
	{
		[Token(Token = "0x60017C5")]
		[Address(RVA = "0xD11470", Offset = "0xD11470", VA = "0xD11470", Slot = "37")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170003BD")]
	public override bool wieldLeftTriggerHeld
	{
		[Token(Token = "0x60017C6")]
		[Address(RVA = "0xD114FC", Offset = "0xD114FC", VA = "0xD114FC", Slot = "38")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003BE")]
	public override bool leftIndexTriggerDown
	{
		[Token(Token = "0x60017C7")]
		[Address(RVA = "0xD11584", Offset = "0xD11584", VA = "0xD11584", Slot = "39")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003BF")]
	public override bool rightIndexTriggerDown
	{
		[Token(Token = "0x60017C8")]
		[Address(RVA = "0xD11594", Offset = "0xD11594", VA = "0xD11594", Slot = "40")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003C0")]
	public override bool leftHandTriggerDown
	{
		[Token(Token = "0x60017C9")]
		[Address(RVA = "0xD115A4", Offset = "0xD115A4", VA = "0xD115A4", Slot = "41")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003C1")]
	public override bool rightHandTriggerDown
	{
		[Token(Token = "0x60017CA")]
		[Address(RVA = "0xD11648", Offset = "0xD11648", VA = "0xD11648", Slot = "42")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003C2")]
	public override UnityEngine.Vector2 leftThumbStick
	{
		[Token(Token = "0x60017CB")]
		[Address(RVA = "0xD116EC", Offset = "0xD116EC", VA = "0xD116EC", Slot = "43")]
		get
		{
			return default(UnityEngine.Vector2);
		}
	}

	[Token(Token = "0x170003C3")]
	public override UnityEngine.Vector2 rightThumbStick
	{
		[Token(Token = "0x60017CC")]
		[Address(RVA = "0xD11854", Offset = "0xD11854", VA = "0xD11854", Slot = "44")]
		get
		{
			return default(UnityEngine.Vector2);
		}
	}

	[Token(Token = "0x170003C4")]
	public override UnityEngine.Vector3 leftHandVelocity
	{
		[Token(Token = "0x60017CD")]
		[Address(RVA = "0xD119BC", Offset = "0xD119BC", VA = "0xD119BC", Slot = "45")]
		get
		{
			return default(UnityEngine.Vector3);
		}
	}

	[Token(Token = "0x170003C5")]
	public override UnityEngine.Vector3 rightHandVelocity
	{
		[Token(Token = "0x60017CE")]
		[Address(RVA = "0xD11A60", Offset = "0xD11A60", VA = "0xD11A60", Slot = "46")]
		get
		{
			return default(UnityEngine.Vector3);
		}
	}

	[Token(Token = "0x170003C6")]
	public override bool npcInteractDown
	{
		[Token(Token = "0x60017CF")]
		[Address(RVA = "0xD11B04", Offset = "0xD11B04", VA = "0xD11B04", Slot = "47")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003C7")]
	public override bool npcInteractHeld
	{
		[Token(Token = "0x60017D0")]
		[Address(RVA = "0xD11BA8", Offset = "0xD11BA8", VA = "0xD11BA8", Slot = "48")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003C8")]
	public override bool npcInteractUp
	{
		[Token(Token = "0x60017D1")]
		[Address(RVA = "0xD11C30", Offset = "0xD11C30", VA = "0xD11C30", Slot = "49")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003C9")]
	public override bool hoverboardMountDown
	{
		[Token(Token = "0x60017D2")]
		[Address(RVA = "0xD11CD4", Offset = "0xD11CD4", VA = "0xD11CD4", Slot = "50")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003CA")]
	public override bool hoverboardMountHeld
	{
		[Token(Token = "0x60017D3")]
		[Address(RVA = "0xD11D7C", Offset = "0xD11D7C", VA = "0xD11D7C", Slot = "51")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003CB")]
	public override bool hoverboardMountUp
	{
		[Token(Token = "0x60017D4")]
		[Address(RVA = "0xD11E04", Offset = "0xD11E04", VA = "0xD11E04", Slot = "52")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003CC")]
	public override bool openMenu
	{
		[Token(Token = "0x60017D5")]
		[Address(RVA = "0xD11EA8", Offset = "0xD11EA8", VA = "0xD11EA8", Slot = "53")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170003CD")]
	public override bool startDown
	{
		[Token(Token = "0x60017D6")]
		[Address(RVA = "0xD11F4C", Offset = "0xD11F4C", VA = "0xD11F4C", Slot = "54")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60017AA")]
	[Address(RVA = "0xD1078C", Offset = "0xD1078C", VA = "0xD1078C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60017AB")]
	[Address(RVA = "0xD107E8", Offset = "0xD107E8", VA = "0xD107E8")]
	private bool buttonStateActive(bool buttonDown, bool downLastFrame, PressType type)
	{
		return default(bool);
	}

	[Token(Token = "0x60017AC")]
	[Address(RVA = "0xD10820", Offset = "0xD10820", VA = "0xD10820")]
	private void Start()
	{
	}

	[Token(Token = "0x60017AD")]
	[Address(RVA = "0xD1082C", Offset = "0xD1082C", VA = "0xD1082C")]
	private void Update()
	{
	}

	[Token(Token = "0x60017AE")]
	[Address(RVA = "0xD10984", Offset = "0xD10984", VA = "0xD10984")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60017D7")]
	[Address(RVA = "0xD11FCC", Offset = "0xD11FCC", VA = "0xD11FCC", Slot = "25")]
	public override bool isGivingThumbsUp(bool right)
	{
		return default(bool);
	}

	[Token(Token = "0x60017D8")]
	[Address(RVA = "0xD11FD4", Offset = "0xD11FD4", VA = "0xD11FD4", Slot = "24")]
	public override bool isPointing(bool right)
	{
		return default(bool);
	}

	[Token(Token = "0x60017D9")]
	[Address(RVA = "0xD11FDC", Offset = "0xD11FDC", VA = "0xD11FDC", Slot = "16")]
	public override UnityEngine.Vector3 localControllerAngularVelocity(bool right)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60017DA")]
	[Address(RVA = "0xD120DC", Offset = "0xD120DC", VA = "0xD120DC", Slot = "13")]
	public override UnityEngine.Vector3 localControllerPos(bool right)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60017DB")]
	[Address(RVA = "0xD121DC", Offset = "0xD121DC", VA = "0xD121DC", Slot = "14")]
	public override Quaternion localControllerRotation(bool right)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60017DC")]
	[Address(RVA = "0xD122F8", Offset = "0xD122F8", VA = "0xD122F8", Slot = "15")]
	public override UnityEngine.Vector3 localControllerVelocity(bool right)
	{
		return default(UnityEngine.Vector3);
	}

	[Token(Token = "0x60017DD")]
	[Address(RVA = "0xD12318", Offset = "0xD12318", VA = "0xD12318")]
	public VRInputManagerVive()
	{
	}
}
[Token(Token = "0x2000482")]
public class CrossbowBolt : MonoBehaviour
{
	[Token(Token = "0x40016D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rigidbody rigidbody;

	[Token(Token = "0x40016D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public WeaponCrossbow crossBow;

	[Token(Token = "0x40016D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Collider col;

	[Token(Token = "0x60017DE")]
	[Address(RVA = "0xD12370", Offset = "0xD12370", VA = "0xD12370")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60017DF")]
	[Address(RVA = "0xD124CC", Offset = "0xD124CC", VA = "0xD124CC")]
	public CrossbowBolt()
	{
	}
}
[Token(Token = "0x2000483")]
public class RouleteCannon : WeaponRanged
{
	[Token(Token = "0x2000484")]
	private enum ChargeState
	{
		[Token(Token = "0x40016D9")]
		Idle,
		[Token(Token = "0x40016DA")]
		charging,
		[Token(Token = "0x40016DB")]
		maxCharge
	}

	[Token(Token = "0x2000485")]
	[CompilerGenerated]
	private sealed class <chargeGun>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RouleteCannon <>4__this;

		[Token(Token = "0x170003CE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60017EA")]
			[Address(RVA = "0xD13314", Offset = "0xD13314", VA = "0xD13314", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003CF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60017EC")]
			[Address(RVA = "0xD1335C", Offset = "0xD1335C", VA = "0xD1335C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0xD12B08", Offset = "0xD12B08", VA = "0xD12B08")]
		[DebuggerHidden]
		public <chargeGun>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0xD12F6C", Offset = "0xD12F6C", VA = "0xD12F6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0xD12F70", Offset = "0xD12F70", VA = "0xD12F70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0xD1331C", Offset = "0xD1331C", VA = "0xD1331C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40016D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private float chargeTime;

	[Token(Token = "0x40016D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public float ChargeSweetSpotSeconds;

	[Token(Token = "0x40016D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public float ChargeFizzleSeconds;

	[Token(Token = "0x40016D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private GameObject gunChargeObject;

	[Token(Token = "0x40016D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private ChargeState chargeState;

	[Token(Token = "0x60017E0")]
	[Address(RVA = "0xD124D4", Offset = "0xD124D4", VA = "0xD124D4", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60017E1")]
	[Address(RVA = "0xD12934", Offset = "0xD12934", VA = "0xD12934", Slot = "5")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60017E2")]
	[Address(RVA = "0xD12A0C", Offset = "0xD12A0C", VA = "0xD12A0C", Slot = "7")]
	public override void fireWeapon()
	{
	}

	[Token(Token = "0x60017E3")]
	[Address(RVA = "0xD12AA0", Offset = "0xD12AA0", VA = "0xD12AA0")]
	[IteratorStateMachine(typeof(<chargeGun>d__9))]
	private IEnumerator chargeGun()
	{
		return null;
	}

	[Token(Token = "0x60017E4")]
	[Address(RVA = "0xD12B30", Offset = "0xD12B30", VA = "0xD12B30", Slot = "8")]
	public override void releaseTrigger()
	{
	}

	[Token(Token = "0x60017E5")]
	[Address(RVA = "0xD12C20", Offset = "0xD12C20", VA = "0xD12C20")]
	private void chargeFizzle()
	{
	}

	[Token(Token = "0x60017E6")]
	[Address(RVA = "0xD12F54", Offset = "0xD12F54", VA = "0xD12F54")]
	public RouleteCannon()
	{
	}
}
[Token(Token = "0x2000486")]
public class Weapon : MonoBehaviour
{
	[Token(Token = "0x2000487")]
	public enum WeaponType
	{
		[Token(Token = "0x4001702")]
		melee,
		[Token(Token = "0x4001703")]
		ranged,
		[Token(Token = "0x4001704")]
		thrown,
		[Token(Token = "0x4001705")]
		grenade
	}

	[Token(Token = "0x2000488")]
	[CompilerGenerated]
	private sealed class <disolveMaterial>d__46 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Weapon <>4__this;

		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Renderer[] <rends>5__2;

		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <disolve>5__3;

		[Token(Token = "0x400170B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <multiplier>5__4;

		[Token(Token = "0x170003D1")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60017FE")]
			[Address(RVA = "0xD15798", Offset = "0xD15798", VA = "0xD15798", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003D2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001800")]
			[Address(RVA = "0xD157E0", Offset = "0xD157E0", VA = "0xD157E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0xD155D4", Offset = "0xD155D4", VA = "0xD155D4")]
		[DebuggerHidden]
		public <disolveMaterial>d__46(int <>1__state)
		{
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0xD155FC", Offset = "0xD155FC", VA = "0xD155FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0xD15600", Offset = "0xD15600", VA = "0xD15600", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0xD157A0", Offset = "0xD157A0", VA = "0xD157A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40016DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int power;

	[Token(Token = "0x40016E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int healthCost;

	[Token(Token = "0x40016E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float requiredSpeedToHit;

	[Token(Token = "0x40016E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float cdTime;

	[Token(Token = "0x40016E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float cooldown;

	[Token(Token = "0x40016E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float weaponAliveTime;

	[Token(Token = "0x40016E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float throwPower;

	[Token(Token = "0x40016E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float chanceToConsumeResource;

	[Token(Token = "0x40016E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int comboPlus;

	[Token(Token = "0x40016E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int currentCombo;

	[Token(Token = "0x40016E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private EnemyParent currentEnemy;

	[Token(Token = "0x40016EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float statusInflictChance;

	[Token(Token = "0x40016EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GlitchEffects glitch;

	[Token(Token = "0x40016EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool canUnlink;

	[Token(Token = "0x40016ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject weaponHitEffect;

	[Token(Token = "0x40016EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Material handMatSwap;

	[Token(Token = "0x40016EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool sliceReset;

	[Token(Token = "0x40016F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool wasThrown;

	[Token(Token = "0x40016F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	public bool canDeflect;

	[Token(Token = "0x40016F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Rigidbody rigidbody;

	[Token(Token = "0x40016F3")]
	private const float reqHandSpeedToDeflect = 1.4f;

	[Token(Token = "0x40016F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public HandCaster hand;

	[Token(Token = "0x40016F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Transform throwTransform;

	[Token(Token = "0x40016F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public AudioSource hitAudio;

	[Token(Token = "0x40016F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool throwCollided;

	[Token(Token = "0x40016F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public PlayerSpell specialAbility;

	[Token(Token = "0x40016F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public WeaponType weaponType;

	[Token(Token = "0x40016FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public EnemyParent.EnemyTribe tribeDamageType;

	[Token(Token = "0x40016FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public float tribeDamageMultiplier;

	[Token(Token = "0x40016FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	protected int gunPlayerDamageMultiplier;

	[Token(Token = "0x40016FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private bool hasHacknSlash;

	[Token(Token = "0x40016FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
	public bool hackNSlash;

	[Token(Token = "0x40016FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
	[HideInInspector]
	public bool forcehackNSlash;

	[Token(Token = "0x4001700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBB")]
	protected bool arcaxersResolve;

	[Token(Token = "0x170003D0")]
	private bool canDamageTarget
	{
		[Token(Token = "0x60017ED")]
		[Address(RVA = "0xD13364", Offset = "0xD13364", VA = "0xD13364")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60017EE")]
	[Address(RVA = "0xD124D8", Offset = "0xD124D8", VA = "0xD124D8", Slot = "4")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60017EF")]
	[Address(RVA = "0xD134FC", Offset = "0xD134FC", VA = "0xD134FC", Slot = "5")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x60017F0")]
	[Address(RVA = "0xD135E0", Offset = "0xD135E0", VA = "0xD135E0")]
	public void resetCombo()
	{
	}

	[Token(Token = "0x60017F1")]
	[Address(RVA = "0xD135E8", Offset = "0xD135E8", VA = "0xD135E8")]
	public void onDropWeapon()
	{
	}

	[Token(Token = "0x60017F2")]
	[Address(RVA = "0xD13698", Offset = "0xD13698", VA = "0xD13698", Slot = "6")]
	public virtual void dealDamage(EnemyParent enemy, bool harmSelf = true, float modDamage = 1f)
	{
	}

	[Token(Token = "0x60017F3")]
	[Address(RVA = "0xD12D90", Offset = "0xD12D90", VA = "0xD12D90")]
	protected void dealWeaponDamageToPlayer(bool harmSelf)
	{
	}

	[Token(Token = "0x60017F4")]
	[Address(RVA = "0xD13D14", Offset = "0xD13D14", VA = "0xD13D14")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60017F5")]
	[Address(RVA = "0xD13E10", Offset = "0xD13E10", VA = "0xD13E10")]
	private void OnTriggerEnter(Collider collision)
	{
	}

	[Token(Token = "0x60017F6")]
	[Address(RVA = "0xD14350", Offset = "0xD14350", VA = "0xD14350")]
	private void OnTriggerExit(Collider collision)
	{
	}

	[Token(Token = "0x60017F7")]
	[Address(RVA = "0xD13494", Offset = "0xD13494", VA = "0xD13494")]
	[IteratorStateMachine(typeof(<disolveMaterial>d__46))]
	private IEnumerator disolveMaterial()
	{
		return null;
	}

	[Token(Token = "0x60017F8")]
	[Address(RVA = "0xD143CC", Offset = "0xD143CC", VA = "0xD143CC", Slot = "7")]
	public virtual void fireWeapon()
	{
	}

	[Token(Token = "0x60017F9")]
	[Address(RVA = "0xD14590", Offset = "0xD14590", VA = "0xD14590", Slot = "8")]
	public virtual void releaseTrigger()
	{
	}

	[Token(Token = "0x60017FA")]
	[Address(RVA = "0xD14594", Offset = "0xD14594", VA = "0xD14594")]
	public Weapon()
	{
	}
}
[Token(Token = "0x2000489")]
public class WeaponCrossbow : Weapon
{
	[Token(Token = "0x400170C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject muzzleFlash;

	[Token(Token = "0x400170D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject hitParticle;

	[Token(Token = "0x400170E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Transform barrelPoint;

	[Token(Token = "0x400170F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public CrossbowBolt boltPrefab;

	[Token(Token = "0x4001710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float fireForce;

	[Token(Token = "0x4001711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public AudioSource shootAudio;

	[Token(Token = "0x4001712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Animator crossbowAnim;

	[Token(Token = "0x6001801")]
	[Address(RVA = "0xD157E8", Offset = "0xD157E8", VA = "0xD157E8", Slot = "5")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001802")]
	[Address(RVA = "0xD157F0", Offset = "0xD157F0", VA = "0xD157F0", Slot = "7")]
	public override void fireWeapon()
	{
	}

	[Token(Token = "0x6001803")]
	[Address(RVA = "0xD15A78", Offset = "0xD15A78", VA = "0xD15A78")]
	public WeaponCrossbow()
	{
	}
}
[Token(Token = "0x200048A")]
public class WeaponGhostBlaster : Weapon
{
	[Token(Token = "0x4001713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject muzzleFlash;

	[Token(Token = "0x4001714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject hitParticle;

	[Token(Token = "0x4001715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Transform barrelPoint;

	[Token(Token = "0x4001716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GlitchEffects glitchToRemove;

	[Token(Token = "0x4001717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public LayerMask rayMask;

	[Token(Token = "0x4001718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float chanceToRemove;

	[Token(Token = "0x6001804")]
	[Address(RVA = "0xD15A88", Offset = "0xD15A88", VA = "0xD15A88", Slot = "5")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001805")]
	[Address(RVA = "0xD15A90", Offset = "0xD15A90", VA = "0xD15A90", Slot = "7")]
	public override void fireWeapon()
	{
	}

	[Token(Token = "0x6001806")]
	[Address(RVA = "0xD16304", Offset = "0xD16304", VA = "0xD16304")]
	public WeaponGhostBlaster()
	{
	}
}
[Token(Token = "0x200048B")]
public class WeaponGrenade : Weapon
{
	[Token(Token = "0x4001719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject explodeParticle;

	[Token(Token = "0x400171A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public float timeToExplode;

	[Token(Token = "0x400171B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float timeAlive;

	[Token(Token = "0x400171C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float explodeRadius;

	[Token(Token = "0x400171D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private List<EnemyParent> damagedEnemies;

	[Token(Token = "0x6001807")]
	[Address(RVA = "0xD1630C", Offset = "0xD1630C", VA = "0xD1630C", Slot = "4")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6001808")]
	[Address(RVA = "0xD16314", Offset = "0xD16314", VA = "0xD16314", Slot = "5")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6001809")]
	[Address(RVA = "0xD163C0", Offset = "0xD163C0", VA = "0xD163C0")]
	private void explode()
	{
	}

	[Token(Token = "0x600180A")]
	[Address(RVA = "0xD16690", Offset = "0xD16690", VA = "0xD16690")]
	public WeaponGrenade()
	{
	}
}
[Token(Token = "0x200048C")]
public class WeaponRanged : Weapon
{
	[Token(Token = "0x200048D")]
	[CompilerGenerated]
	private sealed class <rapidFireTimer>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WeaponRanged <>4__this;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numOfShots>5__2;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <shots>5__3;

		[Token(Token = "0x170003D3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001813")]
			[Address(RVA = "0xD17018", Offset = "0xD17018", VA = "0xD17018", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003D4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001815")]
			[Address(RVA = "0xD17060", Offset = "0xD17060", VA = "0xD17060", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0xD16DC8", Offset = "0xD16DC8", VA = "0xD16DC8")]
		[DebuggerHidden]
		public <rapidFireTimer>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0xD16F10", Offset = "0xD16F10", VA = "0xD16F10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001812")]
		[Address(RVA = "0xD16F14", Offset = "0xD16F14", VA = "0xD16F14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0xD17020", Offset = "0xD17020", VA = "0xD17020", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400171E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject muzzleFlash;

	[Token(Token = "0x400171F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject hitParticle;

	[Token(Token = "0x4001720")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject gunChargeEffect;

	[Token(Token = "0x4001721")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject gunFizzleEffect;

	[Token(Token = "0x4001722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Transform barrelPoint;

	[Token(Token = "0x4001723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public LayerMask rayMask;

	[Token(Token = "0x4001724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Animator gunAnimator;

	[Token(Token = "0x4001725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private bool isFiring;

	[Token(Token = "0x4001726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
	public bool rapidFire;

	[Token(Token = "0x4001727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFA")]
	public bool chargeFire;

	[Token(Token = "0x4001728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	public int hpCostMultiplier;

	[Token(Token = "0x600180B")]
	[Address(RVA = "0xD1671C", Offset = "0xD1671C", VA = "0xD1671C", Slot = "5")]
	protected override void Update()
	{
	}

	[Token(Token = "0x600180C")]
	[Address(RVA = "0xD16724", Offset = "0xD16724", VA = "0xD16724")]
	protected void fireBullet(bool damagePlayer = true, int numOfShotsInClip = 1, float multiplier = 1f)
	{
	}

	[Token(Token = "0x600180D")]
	[Address(RVA = "0xD16D60", Offset = "0xD16D60", VA = "0xD16D60")]
	[IteratorStateMachine(typeof(<rapidFireTimer>d__13))]
	private IEnumerator rapidFireTimer()
	{
		return null;
	}

	[Token(Token = "0x600180E")]
	[Address(RVA = "0xD16DF0", Offset = "0xD16DF0", VA = "0xD16DF0", Slot = "7")]
	public override void fireWeapon()
	{
	}

	[Token(Token = "0x600180F")]
	[Address(RVA = "0xD16F00", Offset = "0xD16F00", VA = "0xD16F00")]
	public WeaponRanged()
	{
	}
}
namespace MK.Toon
{
	[Token(Token = "0x200048E")]
	public static class MKToonMaterialHelper
	{
		[Token(Token = "0x200048F")]
		public static class PropertyNames
		{
			[Token(Token = "0x400172E")]
			public const string SHOW_MAIN_BEHAVIOR = "_MKEditorShowMainBehavior";

			[Token(Token = "0x400172F")]
			public const string SHOW_DETAIL_BEHAVIOR = "_MKEditorShowDetailBehavior";

			[Token(Token = "0x4001730")]
			public const string SHOW_LIGHT_BEHAVIOR = "_MKEditorShowLightBehavior";

			[Token(Token = "0x4001731")]
			public const string SHOW_RENDER_BEHAVIOR = "_MKEditorShowRenderBehavior";

			[Token(Token = "0x4001732")]
			public const string SHOW_SPECULAR_BEHAVIOR = "_MKEditorShowSpecularBehavior";

			[Token(Token = "0x4001733")]
			public const string SHOW_TRANSLUCENT_BEHAVIOR = "_MKEditorShowTranslucentBehavior";

			[Token(Token = "0x4001734")]
			public const string SHOW_RIM_BEHAVIOR = "_MKEditorShowRimBehavior";

			[Token(Token = "0x4001735")]
			public const string SHOW_REFLECTION_BEHAVIOR = "_MKEditorShowReflectionBehavior";

			[Token(Token = "0x4001736")]
			public const string SHOW_SHADOW_BEHAVIOR = "_MKEditorShowShadowBehavior";

			[Token(Token = "0x4001737")]
			public const string SHOW_DISSOLVE_BEHAVIOR = "_MKEditorShowDissolveBehavior";

			[Token(Token = "0x4001738")]
			public const string SHOW_OUTLINE_BEHAVIOR = "_MKEditorShowOutlineBehavior";

			[Token(Token = "0x4001739")]
			public const string SHOW_SKETCH_BEHAVIOR = "_MKEditorShowSketchBehavior";

			[Token(Token = "0x400173A")]
			public const string MAIN_TEXTURE = "_MainTex";

			[Token(Token = "0x400173B")]
			public const string CULL_MODE = "_CullMode";

			[Token(Token = "0x400173C")]
			public const string Z_WRITE = "_ZWrite";

			[Token(Token = "0x400173D")]
			public const string MAIN_COLOR = "_Color";

			[Token(Token = "0x400173E")]
			public const string BLEND_0 = "_Blend0";

			[Token(Token = "0x400173F")]
			public const string BLEND_1 = "_Blend1";

			[Token(Token = "0x4001740")]
			public const string CUT_OFF = "_Cutoff";

			[Token(Token = "0x4001741")]
			public const string BLEND_MODE = "_Mode";

			[Token(Token = "0x4001742")]
			public const string USE_COLOR_SOURCE_MAP = "_AlbedoMap";

			[Token(Token = "0x4001743")]
			public const string DETAIL_ALBEDO_MAP = "_DetailAlbedoMap";

			[Token(Token = "0x4001744")]
			public const string DETAIL_BUMP_SCALE = "_DetailNormalMapScale";

			[Token(Token = "0x4001745")]
			public const string DETAIL_BUMP_MAP = "_DetailNormalMap";

			[Token(Token = "0x4001746")]
			public const string DETAIL_COLOR = "_DetailColor";

			[Token(Token = "0x4001747")]
			public const string DETAIL_TINT = "_DetailTint";

			[Token(Token = "0x4001748")]
			public const string USE_BUMP_MAP = "_UseBumpMap";

			[Token(Token = "0x4001749")]
			public const string BUMP_MAP = "_BumpMap";

			[Token(Token = "0x400174A")]
			public const string BUMP_SCALE = "_BumpScale";

			[Token(Token = "0x400174B")]
			public const string LIGHT_TYPE = "_LightType";

			[Token(Token = "0x400174C")]
			public const string LIGHT_MODEL = "_LightModel";

			[Token(Token = "0x400174D")]
			public const string Ramp = "_Ramp";

			[Token(Token = "0x400174E")]
			public const string LIGHT_CUTS = "_LightCuts";

			[Token(Token = "0x400174F")]
			public const string LIGHT_THRESHOLD = "_LightThreshold";

			[Token(Token = "0x4001750")]
			public const string OCCLUSION_MAP = "_OcclusionMap";

			[Token(Token = "0x4001751")]
			public const string OCCLUSION_STRENGTH = "_OcclusionStrength";

			[Token(Token = "0x4001752")]
			public const string LIGHT_SMOOTHNESS = "_LightSmoothness";

			[Token(Token = "0x4001753")]
			public const string RIM_SMOOTHNESS = "_RimSmoothness";

			[Token(Token = "0x4001754")]
			public const string REFLECT_SMOOTHNESS = "_ReflectSmoothness";

			[Token(Token = "0x4001755")]
			public const string CONTRAST = "_Contrast";

			[Token(Token = "0x4001756")]
			public const string SATURATION = "_Saturation";

			[Token(Token = "0x4001757")]
			public const string BRIGHTNESS = "_Brightness";

			[Token(Token = "0x4001758")]
			public const string ROUGHNESS = "_Roughness";

			[Token(Token = "0x4001759")]
			public const string SHADOW_COLOR = "_ShadowColor";

			[Token(Token = "0x400175A")]
			public const string HIGHLIGHT_COLOR = "_HighlightColor";

			[Token(Token = "0x400175B")]
			public const string SHADOW_INTENSITY = "_ShadowIntensity";

			[Token(Token = "0x400175C")]
			public const string USE_OUTLINE = "_UseOutline";

			[Token(Token = "0x400175D")]
			public const string OUTLINE_COLOR = "_OutlineColor";

			[Token(Token = "0x400175E")]
			public const string OUTLINE_SIZE = "_OutlineSize";

			[Token(Token = "0x400175F")]
			public const string USE_RIM = "_UseRim";

			[Token(Token = "0x4001760")]
			public const string RIM_COLOR = "_RimColor";

			[Token(Token = "0x4001761")]
			public const string RIM_SIZE = "_RimSize";

			[Token(Token = "0x4001762")]
			public const string RIM_INTENSITY = "_RimIntensity";

			[Token(Token = "0x4001763")]
			public const string SPECULAR_SHININESS = "_Shininess";

			[Token(Token = "0x4001764")]
			public const string SPEC_COLOR = "_SpecColor";

			[Token(Token = "0x4001765")]
			public const string SPEC_GLOSS_MAP = "_SpecGlossMap";

			[Token(Token = "0x4001766")]
			public const string SPECULAR_INTENSITY = "_SpecularIntensity";

			[Token(Token = "0x4001767")]
			public const string USE_ANISOTROPIC_SPECULAR = "_UseAnisotropicSpecular";

			[Token(Token = "0x4001768")]
			public const string ANISO_MAP = "_AnisoMap";

			[Token(Token = "0x4001769")]
			public const string ANISO_OFFSET = "_AnisoOffset";

			[Token(Token = "0x400176A")]
			public const string USE_REFLECTION = "_UseReflection";

			[Token(Token = "0x400176B")]
			public const string REFLECT_COLOR = "_ReflectColor";

			[Token(Token = "0x400176C")]
			public const string REFLECT_INTENSITY = "_ReflectIntensity";

			[Token(Token = "0x400176D")]
			public const string REFLECT_MAP = "_ReflectMap";

			[Token(Token = "0x400176E")]
			public const string USE_DISSOLVE = "_UseDissolve";

			[Token(Token = "0x400176F")]
			public const string DISSOLVE_MAP = "_DissolveMap";

			[Token(Token = "0x4001770")]
			public const string DISSOLVE_AMOUNT = "_DissolveAmount";

			[Token(Token = "0x4001771")]
			public const string DISSOLVE_RAMP_SIZE = "_DissolveRampSize";

			[Token(Token = "0x4001772")]
			public const string DISSOLVE_RAMP = "_DissolveRamp";

			[Token(Token = "0x4001773")]
			public const string DISSOLVE_COLOR = "_DissolveColor";

			[Token(Token = "0x4001774")]
			public const string USE_TRANSLUCENT = "_UseTranslucent";

			[Token(Token = "0x4001775")]
			public const string TRANSLUCENT_COLOR = "_TranslucentColor";

			[Token(Token = "0x4001776")]
			public const string TRANSLUCENT_MAP = "_TranslucentMap";

			[Token(Token = "0x4001777")]
			public const string TRANSLUCENT_INTENSITY = "_TranslucentIntensity";

			[Token(Token = "0x4001778")]
			public const string TRANSLUCENT_SHININESS = "_TranslucentShininess";

			[Token(Token = "0x4001779")]
			public const string EMISSION_COLOR = "_EmissionColor";

			[Token(Token = "0x400177A")]
			public const string EMISSION_MAP = "_EmissionMap";

			[Token(Token = "0x400177B")]
			public const string EMISSION = "_Emission";

			[Token(Token = "0x400177C")]
			public const string USE_SKETCH = "_UseSketch";

			[Token(Token = "0x400177D")]
			public const string SKETCH_MAP = "_SketchMap";

			[Token(Token = "0x400177E")]
			public const string SKETCH_TINT = "_SketchScale";

			[Token(Token = "0x400177F")]
			public const string SKETCH_TONE_MIN = "_SketchToneMin";

			[Token(Token = "0x4001780")]
			public const string SKETCH_TONE_MAX = "_SketchToneMax";
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0xD17068", Offset = "0xD17068", VA = "0xD17068")]
		public static void SetMainTexture(Material material, Texture tex)
		{
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0xD170C4", Offset = "0xD170C4", VA = "0xD170C4")]
		public static Texture GetMainTexture(Material material)
		{
			return null;
		}

		[Token(Token = "0x6001818")]
		[Address(RVA = "0xD17118", Offset = "0xD17118", VA = "0xD17118")]
		public static void SetMainColor(Material material, Color color)
		{
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0xD1719C", Offset = "0xD1719C", VA = "0xD1719C")]
		public static Color MainColor(Material material)
		{
			return default(Color);
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0xD171F0", Offset = "0xD171F0", VA = "0xD171F0")]
		public static void SetZWrite(Material material, bool z)
		{
		}

		[Token(Token = "0x600181B")]
		[Address(RVA = "0xD17258", Offset = "0xD17258", VA = "0xD17258")]
		public static bool GetZWrite(Material material)
		{
			return default(bool);
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0xD172BC", Offset = "0xD172BC", VA = "0xD172BC")]
		public static void SetCullMode(Material material, CullMode cull)
		{
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0xD17318", Offset = "0xD17318", VA = "0xD17318")]
		public static CullMode GetCullMode(Material material)
		{
			return default(CullMode);
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0xD17388", Offset = "0xD17388", VA = "0xD17388")]
		public static void SetDetailTint(Material material, float tint)
		{
		}

		[Token(Token = "0x600181F")]
		[Address(RVA = "0xD173EC", Offset = "0xD173EC", VA = "0xD173EC")]
		public static float GeDetailTint(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001820")]
		[Address(RVA = "0xD17440", Offset = "0xD17440", VA = "0xD17440")]
		public static void SetDetailTexture(Material material, Texture tex)
		{
		}

		[Token(Token = "0x6001821")]
		[Address(RVA = "0xD1749C", Offset = "0xD1749C", VA = "0xD1749C")]
		public static Texture GetDetailTexture(Material material)
		{
			return null;
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0xD174F0", Offset = "0xD174F0", VA = "0xD174F0")]
		public static void SetDetailNormalMap(Material material, Texture tex)
		{
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0xD1754C", Offset = "0xD1754C", VA = "0xD1754C")]
		public static Texture GetDetailNormalMap(Material material)
		{
			return null;
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0xD175A0", Offset = "0xD175A0", VA = "0xD175A0")]
		public static void SetDetailBumpScale(Material material, float bumpScale)
		{
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0xD17604", Offset = "0xD17604", VA = "0xD17604")]
		public static float GetDetailBumpScale(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0xD17658", Offset = "0xD17658", VA = "0xD17658")]
		public static void SetDetailColor(Material material, Color color)
		{
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0xD176DC", Offset = "0xD176DC", VA = "0xD176DC")]
		public static Color GetDetailColor(Material material)
		{
			return default(Color);
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0xD17730", Offset = "0xD17730", VA = "0xD17730")]
		public static void SetNormalmap(Material material, Texture tex)
		{
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0xD1778C", Offset = "0xD1778C", VA = "0xD1778C")]
		public static Texture GetBumpMap(Material material)
		{
			return null;
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0xD177E0", Offset = "0xD177E0", VA = "0xD177E0")]
		public static void SetBumpScale(Material material, float bumpScale)
		{
		}

		[Token(Token = "0x600182B")]
		[Address(RVA = "0xD17844", Offset = "0xD17844", VA = "0xD17844")]
		public static float GetBumpScale(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0xD17898", Offset = "0xD17898", VA = "0xD17898")]
		public static void SetLightRampMap(Material material, Texture tex)
		{
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0xD178F4", Offset = "0xD178F4", VA = "0xD178F4")]
		public static Texture GetLightRampMap(Material material)
		{
			return null;
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0xD17948", Offset = "0xD17948", VA = "0xD17948")]
		public static void SetLightCuts(Material material, float cuts)
		{
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0xD179AC", Offset = "0xD179AC", VA = "0xD179AC")]
		public static float GetLightCuts(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0xD17A00", Offset = "0xD17A00", VA = "0xD17A00")]
		public static void SetLightThreshold(Material material, float threshold)
		{
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0xD17A64", Offset = "0xD17A64", VA = "0xD17A64")]
		public static float GetLightThreshold(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0xD17AB8", Offset = "0xD17AB8", VA = "0xD17AB8")]
		public static void SetOcclusionMap(Material material, Texture tex)
		{
		}

		[Token(Token = "0x6001833")]
		[Address(RVA = "0xD17B14", Offset = "0xD17B14", VA = "0xD17B14")]
		public static Texture GetOcclusionMap(Material material)
		{
			return null;
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0xD17B68", Offset = "0xD17B68", VA = "0xD17B68")]
		public static void SetOcclusionStrength(Material material, float strength)
		{
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0xD17BCC", Offset = "0xD17BCC", VA = "0xD17BCC")]
		public static float GetOcclusionStrength(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0xD17C20", Offset = "0xD17C20", VA = "0xD17C20")]
		public static void SetBrightness(Material material, float brightness)
		{
		}

		[Token(Token = "0x6001837")]
		[Address(RVA = "0xD17C84", Offset = "0xD17C84", VA = "0xD17C84")]
		public static float GetBrightness(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001838")]
		[Address(RVA = "0xD17CD8", Offset = "0xD17CD8", VA = "0xD17CD8")]
		public static void SetContrast(Material material, float contrast)
		{
		}

		[Token(Token = "0x6001839")]
		[Address(RVA = "0xD17D3C", Offset = "0xD17D3C", VA = "0xD17D3C")]
		public static float GetContrast(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x600183A")]
		[Address(RVA = "0xD17D90", Offset = "0xD17D90", VA = "0xD17D90")]
		public static void SetSaturation(Material material, float saturation)
		{
		}

		[Token(Token = "0x600183B")]
		[Address(RVA = "0xD17DF4", Offset = "0xD17DF4", VA = "0xD17DF4")]
		public static float GetSaturation(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x600183C")]
		[Address(RVA = "0xD17E48", Offset = "0xD17E48", VA = "0xD17E48")]
		public static void SetLightSmoothness(Material material, float smoothness)
		{
		}

		[Token(Token = "0x600183D")]
		[Address(RVA = "0xD17EAC", Offset = "0xD17EAC", VA = "0xD17EAC")]
		public static float GetLightSmoothness(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0xD17F00", Offset = "0xD17F00", VA = "0xD17F00")]
		public static void SetRimSmoothness(Material material, float smoothness)
		{
		}

		[Token(Token = "0x600183F")]
		[Address(RVA = "0xD17F64", Offset = "0xD17F64", VA = "0xD17F64")]
		public static float GetRimSmoothness(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001840")]
		[Address(RVA = "0xD17FB8", Offset = "0xD17FB8", VA = "0xD17FB8")]
		public static void SetReflectSmoothness(Material material, float smoothness)
		{
		}

		[Token(Token = "0x6001841")]
		[Address(RVA = "0xD1801C", Offset = "0xD1801C", VA = "0xD1801C")]
		public static float GetReflectSmoothness(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0xD18070", Offset = "0xD18070", VA = "0xD18070")]
		public static void SetRoughness(Material material, float roughness)
		{
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0xD180D4", Offset = "0xD180D4", VA = "0xD180D4")]
		public static float GetRoughness(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001844")]
		[Address(RVA = "0xD18128", Offset = "0xD18128", VA = "0xD18128")]
		public static void SetShadowColor(Material material, Color color)
		{
		}

		[Token(Token = "0x6001845")]
		[Address(RVA = "0xD181AC", Offset = "0xD181AC", VA = "0xD181AC")]
		public static Color GetShadowColor(Material material)
		{
			return default(Color);
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0xD18200", Offset = "0xD18200", VA = "0xD18200")]
		public static void SetHightlightColor(Material material, Color color)
		{
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0xD18284", Offset = "0xD18284", VA = "0xD18284")]
		public static Color GetHightlightColor(Material material)
		{
			return default(Color);
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0xD182D8", Offset = "0xD182D8", VA = "0xD182D8")]
		public static void SetShadowIntensity(Material material, float intensity)
		{
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0xD1833C", Offset = "0xD1833C", VA = "0xD1833C")]
		public static float GetShadowIntensity(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x600184A")]
		[Address(RVA = "0xD18390", Offset = "0xD18390", VA = "0xD18390")]
		public static void SetOutlineColor(Material material, Color color)
		{
		}

		[Token(Token = "0x600184B")]
		[Address(RVA = "0xD18414", Offset = "0xD18414", VA = "0xD18414")]
		public static Color SetOutlineColor(Material material)
		{
			return default(Color);
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0xD18468", Offset = "0xD18468", VA = "0xD18468")]
		public static void SetOutlineSize(Material material, float size)
		{
		}

		[Token(Token = "0x600184D")]
		[Address(RVA = "0xD184CC", Offset = "0xD184CC", VA = "0xD184CC")]
		public static float GetOutlineSize(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0xD18520", Offset = "0xD18520", VA = "0xD18520")]
		public static void SetRimColor(Material material, Color color)
		{
		}

		[Token(Token = "0x600184F")]
		[Address(RVA = "0xD185A4", Offset = "0xD185A4", VA = "0xD185A4")]
		public static Color GetRimColor(Material material)
		{
			return default(Color);
		}

		[Token(Token = "0x6001850")]
		[Address(RVA = "0xD185F8", Offset = "0xD185F8", VA = "0xD185F8")]
		public static void SetRimSize(Material material, float size)
		{
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0xD1865C", Offset = "0xD1865C", VA = "0xD1865C")]
		public static float GetRimSize(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001852")]
		[Address(RVA = "0xD186B0", Offset = "0xD186B0", VA = "0xD186B0")]
		public static void SetRimIntensity(Material material, float intensity)
		{
		}

		[Token(Token = "0x6001853")]
		[Address(RVA = "0xD18714", Offset = "0xD18714", VA = "0xD18714")]
		public static float GetRimIntensity(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0xD18768", Offset = "0xD18768", VA = "0xD18768")]
		public static void SetSpecularShininess(Material material, float shininess)
		{
		}

		[Token(Token = "0x6001855")]
		[Address(RVA = "0xD187CC", Offset = "0xD187CC", VA = "0xD187CC")]
		public static float GetSpecularShininess(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001856")]
		[Address(RVA = "0xD18820", Offset = "0xD18820", VA = "0xD18820")]
		public static void SetSpecularColor(Material material, Color color)
		{
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0xD188A4", Offset = "0xD188A4", VA = "0xD188A4")]
		public static Color GetSpecularColor(Material material)
		{
			return default(Color);
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0xD188F8", Offset = "0xD188F8", VA = "0xD188F8")]
		public static void SetSpecularMap(Material material, Texture tex)
		{
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0xD18954", Offset = "0xD18954", VA = "0xD18954")]
		public static Texture GetSpecularMap(Material material)
		{
			return null;
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0xD189A8", Offset = "0xD189A8", VA = "0xD189A8")]
		public static void SetSpecularIntensity(Material material, float intensity)
		{
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0xD18A0C", Offset = "0xD18A0C", VA = "0xD18A0C")]
		public static float GetSpecularIntensity(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0xD18A60", Offset = "0xD18A60", VA = "0xD18A60")]
		public static void SetAnisoMap(Material material, Texture tex)
		{
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0xD18ABC", Offset = "0xD18ABC", VA = "0xD18ABC")]
		public static Texture GetAnisoMap(Material material)
		{
			return null;
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0xD18B10", Offset = "0xD18B10", VA = "0xD18B10")]
		public static void SetAnisoOffset(Material material, float offset)
		{
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0xD18B74", Offset = "0xD18B74", VA = "0xD18B74")]
		public static float GetAnisoOffset(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0xD18BC8", Offset = "0xD18BC8", VA = "0xD18BC8")]
		public static void SetReflectMap(Material material, Texture tex)
		{
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0xD18C24", Offset = "0xD18C24", VA = "0xD18C24")]
		public static Texture GetReflectMap(Material material)
		{
			return null;
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0xD18C78", Offset = "0xD18C78", VA = "0xD18C78")]
		public static void SetReflectColor(Material material, Color color)
		{
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0xD18CFC", Offset = "0xD18CFC", VA = "0xD18CFC")]
		public static Color GetReflectColor(Material material)
		{
			return default(Color);
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0xD18D50", Offset = "0xD18D50", VA = "0xD18D50")]
		public static void SetReflectIntensity(Material material, float intensity)
		{
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0xD18DB4", Offset = "0xD18DB4", VA = "0xD18DB4")]
		public static float GetReflectIntensity(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0xD18E08", Offset = "0xD18E08", VA = "0xD18E08")]
		public static void SetDissolveMap(Material material, Texture tex)
		{
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0xD18E64", Offset = "0xD18E64", VA = "0xD18E64")]
		public static Texture GetDissolveMap(Material material)
		{
			return null;
		}

		[Token(Token = "0x6001868")]
		[Address(RVA = "0xD18EB8", Offset = "0xD18EB8", VA = "0xD18EB8")]
		public static void SetDissolveRampMap(Material material, Texture tex)
		{
		}

		[Token(Token = "0x6001869")]
		[Address(RVA = "0xD18F14", Offset = "0xD18F14", VA = "0xD18F14")]
		public static Texture GetDissolveRampMap(Material material)
		{
			return null;
		}

		[Token(Token = "0x600186A")]
		[Address(RVA = "0xD18F68", Offset = "0xD18F68", VA = "0xD18F68")]
		public static void SetDissolveColor(Material material, Color color)
		{
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0xD18FEC", Offset = "0xD18FEC", VA = "0xD18FEC")]
		public static Color GetDissolveColor(Material material)
		{
			return default(Color);
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0xD19040", Offset = "0xD19040", VA = "0xD19040")]
		public static void SetDissolveAmount(Material material, float amount)
		{
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0xD190A4", Offset = "0xD190A4", VA = "0xD190A4")]
		public static float GetDissolveAmount(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0xD190F8", Offset = "0xD190F8", VA = "0xD190F8")]
		public static void SetDissolveRampSize(Material material, float size)
		{
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0xD1915C", Offset = "0xD1915C", VA = "0xD1915C")]
		public static float GetDissolveRampSize(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001870")]
		[Address(RVA = "0xD191B0", Offset = "0xD191B0", VA = "0xD191B0")]
		public static void SetTranslucentMap(Material material, Texture tex)
		{
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0xD1920C", Offset = "0xD1920C", VA = "0xD1920C")]
		public static Texture GetTranslucentMap(Material material)
		{
			return null;
		}

		[Token(Token = "0x6001872")]
		[Address(RVA = "0xD19260", Offset = "0xD19260", VA = "0xD19260")]
		public static void SetTranslucentColor(Material material, Color color)
		{
		}

		[Token(Token = "0x6001873")]
		[Address(RVA = "0xD192E4", Offset = "0xD192E4", VA = "0xD192E4")]
		public static Color GetTranslucentColor(Material material)
		{
			return default(Color);
		}

		[Token(Token = "0x6001874")]
		[Address(RVA = "0xD19338", Offset = "0xD19338", VA = "0xD19338")]
		public static void SetTranslucentIntensity(Material material, float intensity)
		{
		}

		[Token(Token = "0x6001875")]
		[Address(RVA = "0xD1939C", Offset = "0xD1939C", VA = "0xD1939C")]
		public static float GetTranslucentIntensity(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001876")]
		[Address(RVA = "0xD193F0", Offset = "0xD193F0", VA = "0xD193F0")]
		public static void SetTranslucentShininess(Material material, float shininess)
		{
		}

		[Token(Token = "0x6001877")]
		[Address(RVA = "0xD19454", Offset = "0xD19454", VA = "0xD19454")]
		public static float GetTranslucentShininess(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001878")]
		[Address(RVA = "0xD194A8", Offset = "0xD194A8", VA = "0xD194A8")]
		public static void SetEmissionMap(Material material, Texture tex)
		{
		}

		[Token(Token = "0x6001879")]
		[Address(RVA = "0xD19504", Offset = "0xD19504", VA = "0xD19504")]
		public static Texture GetEmissionMap(Material material)
		{
			return null;
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0xD19558", Offset = "0xD19558", VA = "0xD19558")]
		public static void SetEmissionColor(Material material, Color color)
		{
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0xD195DC", Offset = "0xD195DC", VA = "0xD195DC")]
		public static Color GetEmissionColor(Material material)
		{
			return default(Color);
		}

		[Token(Token = "0x600187C")]
		[Address(RVA = "0xD19630", Offset = "0xD19630", VA = "0xD19630")]
		public static void SetSketchMap(Material material, Texture tex)
		{
		}

		[Token(Token = "0x600187D")]
		[Address(RVA = "0xD1968C", Offset = "0xD1968C", VA = "0xD1968C")]
		public static Texture GetSketchMap(Material material)
		{
			return null;
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0xD196E0", Offset = "0xD196E0", VA = "0xD196E0")]
		public static void SetSketchTint(Material material, float tint)
		{
		}

		[Token(Token = "0x600187F")]
		[Address(RVA = "0xD19744", Offset = "0xD19744", VA = "0xD19744")]
		public static float GetSketchTint(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001880")]
		[Address(RVA = "0xD19798", Offset = "0xD19798", VA = "0xD19798")]
		public static void SetSketchToneMin(Material material, float toneMin)
		{
		}

		[Token(Token = "0x6001881")]
		[Address(RVA = "0xD197FC", Offset = "0xD197FC", VA = "0xD197FC")]
		public static float GetSketchToneMin(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x6001882")]
		[Address(RVA = "0xD19850", Offset = "0xD19850", VA = "0xD19850")]
		public static void SetSketchToneMax(Material material, float toneMax)
		{
		}

		[Token(Token = "0x6001883")]
		[Address(RVA = "0xD198B4", Offset = "0xD198B4", VA = "0xD198B4")]
		public static float GetSketchToneMax(Material material)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000490")]
	public enum Workflow
	{
		[Token(Token = "0x4001782")]
		Metallic,
		[Token(Token = "0x4001783")]
		Specular,
		[Token(Token = "0x4001784")]
		Roughness
	}
	[Token(Token = "0x2000491")]
	public enum Surface
	{
		[Token(Token = "0x4001786")]
		Opaque,
		[Token(Token = "0x4001787")]
		Transparent
	}
	[Token(Token = "0x2000492")]
	internal enum SurfaceRefraction
	{
		[Token(Token = "0x4001789")]
		Transparent = 1
	}
	[Token(Token = "0x2000493")]
	internal enum SurfaceOutline
	{
		[Token(Token = "0x400178B")]
		Opaque
	}
	[Token(Token = "0x2000494")]
	public enum RenderFace
	{
		[Token(Token = "0x400178D")]
		DoubleSided,
		[Token(Token = "0x400178E")]
		Back,
		[Token(Token = "0x400178F")]
		Front
	}
	[Token(Token = "0x2000495")]
	public enum DetailBlend
	{
		[Token(Token = "0x4001791")]
		Mix,
		[Token(Token = "0x4001792")]
		Add,
		[Token(Token = "0x4001793")]
		Multiply
	}
	[Token(Token = "0x2000496")]
	public enum Light
	{
		[Token(Token = "0x4001795")]
		Builtin,
		[Token(Token = "0x4001796")]
		Cel,
		[Token(Token = "0x4001797")]
		Banded,
		[Token(Token = "0x4001798")]
		Ramp
	}
	[Token(Token = "0x2000497")]
	public enum ZWrite
	{
		[Token(Token = "0x400179A")]
		Off,
		[Token(Token = "0x400179B")]
		On
	}
	[Token(Token = "0x2000498")]
	public enum Iridescence
	{
		[Token(Token = "0x400179D")]
		Off,
		[Token(Token = "0x400179E")]
		On
	}
	[Token(Token = "0x2000499")]
	public enum Rim
	{
		[Token(Token = "0x40017A0")]
		Off,
		[Token(Token = "0x40017A1")]
		Default,
		[Token(Token = "0x40017A2")]
		Split
	}
	[Token(Token = "0x200049A")]
	public enum ColorGrading
	{
		[Token(Token = "0x40017A4")]
		Off,
		[Token(Token = "0x40017A5")]
		Albedo,
		[Token(Token = "0x40017A6")]
		FinalOutput
	}
	[Token(Token = "0x200049B")]
	public enum VertexAnimation
	{
		[Token(Token = "0x40017A8")]
		Off,
		[Token(Token = "0x40017A9")]
		Sine,
		[Token(Token = "0x40017AA")]
		Pulse,
		[Token(Token = "0x40017AB")]
		Noise
	}
	[Token(Token = "0x200049C")]
	public enum Dissolve
	{
		[Token(Token = "0x40017AD")]
		Off,
		[Token(Token = "0x40017AE")]
		Default,
		[Token(Token = "0x40017AF")]
		BorderColor,
		[Token(Token = "0x40017B0")]
		BorderRamp
	}
	[Token(Token = "0x200049D")]
	public enum LightTransmission
	{
		[Token(Token = "0x40017B2")]
		Off,
		[Token(Token = "0x40017B3")]
		Translucent,
		[Token(Token = "0x40017B4")]
		SubSurfaceScattering
	}
	[Token(Token = "0x200049E")]
	public enum Diffuse
	{
		[Token(Token = "0x40017B6")]
		Lambert,
		[Token(Token = "0x40017B7")]
		OrenNayar,
		[Token(Token = "0x40017B8")]
		Minnaert
	}
	[Token(Token = "0x200049F")]
	public enum Specular
	{
		[Token(Token = "0x40017BA")]
		Off,
		[Token(Token = "0x40017BB")]
		Isotropic,
		[Token(Token = "0x40017BC")]
		Anisotropic
	}
	[Token(Token = "0x20004A0")]
	internal enum SpecularSimple
	{
		[Token(Token = "0x40017BE")]
		Off,
		[Token(Token = "0x40017BF")]
		Isotropic
	}
	[Token(Token = "0x20004A1")]
	public enum Artistic
	{
		[Token(Token = "0x40017C1")]
		Off,
		[Token(Token = "0x40017C2")]
		Drawn,
		[Token(Token = "0x40017C3")]
		Hatching,
		[Token(Token = "0x40017C4")]
		Sketch
	}
	[Token(Token = "0x20004A2")]
	public enum ArtisticProjection
	{
		[Token(Token = "0x40017C6")]
		TangentSpace,
		[Token(Token = "0x40017C7")]
		ScreenSpace
	}
	[Token(Token = "0x20004A3")]
	public enum EnvironmentReflection
	{
		[Token(Token = "0x40017C9")]
		Off,
		[Token(Token = "0x40017CA")]
		Ambient,
		[Token(Token = "0x40017CB")]
		Advanced
	}
	[Token(Token = "0x20004A4")]
	internal enum EnvironmentReflectionSimple
	{
		[Token(Token = "0x40017CD")]
		Off,
		[Token(Token = "0x40017CE")]
		Ambient
	}
	[Token(Token = "0x20004A5")]
	public enum Outline
	{
		[Token(Token = "0x40017D0")]
		HullObject = 1,
		[Token(Token = "0x40017D1")]
		HullOrigin,
		[Token(Token = "0x40017D2")]
		HullClip
	}
	[Token(Token = "0x20004A6")]
	public enum OutlineData
	{
		[Token(Token = "0x40017D4")]
		Normal,
		[Token(Token = "0x40017D5")]
		Baked
	}
	[Token(Token = "0x20004A7")]
	public enum Stencil
	{
		[Token(Token = "0x40017D7")]
		Builtin = 1,
		[Token(Token = "0x40017D8")]
		Custom
	}
	[Token(Token = "0x20004A8")]
	public enum BlendFactor
	{
		[Token(Token = "0x40017DA")]
		Zero,
		[Token(Token = "0x40017DB")]
		One,
		[Token(Token = "0x40017DC")]
		DstColor,
		[Token(Token = "0x40017DD")]
		SrcColor,
		[Token(Token = "0x40017DE")]
		OneMinusDstColor,
		[Token(Token = "0x40017DF")]
		SrcAlpha,
		[Token(Token = "0x40017E0")]
		OneMinusSrcColor,
		[Token(Token = "0x40017E1")]
		DstAlpha,
		[Token(Token = "0x40017E2")]
		OneMinusDstAlpha,
		[Token(Token = "0x40017E3")]
		SrcAlphaSaturate,
		[Token(Token = "0x40017E4")]
		OneMinusSrcAlpha
	}
	[Token(Token = "0x20004A9")]
	public enum Blend
	{
		[Token(Token = "0x40017E6")]
		Alpha,
		[Token(Token = "0x40017E7")]
		Premultiply,
		[Token(Token = "0x40017E8")]
		Additive,
		[Token(Token = "0x40017E9")]
		Multiply,
		[Token(Token = "0x40017EA")]
		Custom
	}
	[Token(Token = "0x20004AA")]
	internal enum BlendOpaque
	{
		[Token(Token = "0x40017EC")]
		Default = 0,
		[Token(Token = "0x40017ED")]
		Custom = 4
	}
	[Token(Token = "0x20004AB")]
	public enum BlendOperation
	{
		[Token(Token = "0x40017EF")]
		Add,
		[Token(Token = "0x40017F0")]
		Subtract,
		[Token(Token = "0x40017F1")]
		ReverseSubtract,
		[Token(Token = "0x40017F2")]
		Min,
		[Token(Token = "0x40017F3")]
		Max,
		[Token(Token = "0x40017F4")]
		LogicalClear,
		[Token(Token = "0x40017F5")]
		LogicalSet,
		[Token(Token = "0x40017F6")]
		LogicalCopy,
		[Token(Token = "0x40017F7")]
		LogicalCopyInverted,
		[Token(Token = "0x40017F8")]
		LogicalNoop,
		[Token(Token = "0x40017F9")]
		LogicalInvert,
		[Token(Token = "0x40017FA")]
		LogicalAnd,
		[Token(Token = "0x40017FB")]
		LogicalNand,
		[Token(Token = "0x40017FC")]
		LogicalOr,
		[Token(Token = "0x40017FD")]
		LogicalNor,
		[Token(Token = "0x40017FE")]
		LogicalXor,
		[Token(Token = "0x40017FF")]
		LogicalEquivalence,
		[Token(Token = "0x4001800")]
		LogicalAndReverse,
		[Token(Token = "0x4001801")]
		LogicalAndInverted,
		[Token(Token = "0x4001802")]
		LogicalOrReverse,
		[Token(Token = "0x4001803")]
		LogicalOrInverted,
		[Token(Token = "0x4001804")]
		Multiply,
		[Token(Token = "0x4001805")]
		Screen,
		[Token(Token = "0x4001806")]
		Overlay,
		[Token(Token = "0x4001807")]
		Darken,
		[Token(Token = "0x4001808")]
		Lighten,
		[Token(Token = "0x4001809")]
		ColorDodge,
		[Token(Token = "0x400180A")]
		ColorBurn,
		[Token(Token = "0x400180B")]
		HardLight,
		[Token(Token = "0x400180C")]
		SoftLight,
		[Token(Token = "0x400180D")]
		Difference,
		[Token(Token = "0x400180E")]
		Exclusion,
		[Token(Token = "0x400180F")]
		HSLHue,
		[Token(Token = "0x4001810")]
		HSLSaturation,
		[Token(Token = "0x4001811")]
		HSLColor,
		[Token(Token = "0x4001812")]
		HSLLuminosity
	}
	[Token(Token = "0x20004AC")]
	public enum ColorBlend
	{
		[Token(Token = "0x4001814")]
		Multiply,
		[Token(Token = "0x4001815")]
		Additive,
		[Token(Token = "0x4001816")]
		Subtractive,
		[Token(Token = "0x4001817")]
		Overlay,
		[Token(Token = "0x4001818")]
		Color,
		[Token(Token = "0x4001819")]
		Difference
	}
	[Token(Token = "0x20004AD")]
	public enum RenderQueue
	{
		[Token(Token = "0x400181B")]
		Background = 1000,
		[Token(Token = "0x400181C")]
		Geometry = 2000,
		[Token(Token = "0x400181D")]
		AlphaTest = 2450,
		[Token(Token = "0x400181E")]
		GeometryLast = 2500,
		[Token(Token = "0x400181F")]
		Transparent = 3000,
		[Token(Token = "0x4001820")]
		Overlay = 4000
	}
	[Token(Token = "0x20004AE")]
	public enum ZTest
	{
		[Token(Token = "0x4001822")]
		Always = 8,
		[Token(Token = "0x4001823")]
		Equal = 3,
		[Token(Token = "0x4001824")]
		GreaterEqual = 7,
		[Token(Token = "0x4001825")]
		Greater = 5,
		[Token(Token = "0x4001826")]
		LessEqual = 4,
		[Token(Token = "0x4001827")]
		Less = 2,
		[Token(Token = "0x4001828")]
		NotEqual = 6
	}
	[Token(Token = "0x20004AF")]
	public enum StencilOperation
	{
		[Token(Token = "0x400182A")]
		Keep,
		[Token(Token = "0x400182B")]
		Zero,
		[Token(Token = "0x400182C")]
		Replace,
		[Token(Token = "0x400182D")]
		IncrementSaturate,
		[Token(Token = "0x400182E")]
		DecrementSaturate,
		[Token(Token = "0x400182F")]
		Invert,
		[Token(Token = "0x4001830")]
		IncrementWrap,
		[Token(Token = "0x4001831")]
		DecrementWrap,
		[Token(Token = "0x4001832")]
		Always
	}
	[Token(Token = "0x20004B0")]
	public enum StencilComparison
	{
		[Token(Token = "0x4001834")]
		Disabled,
		[Token(Token = "0x4001835")]
		Never,
		[Token(Token = "0x4001836")]
		Less,
		[Token(Token = "0x4001837")]
		Equal,
		[Token(Token = "0x4001838")]
		LessEqual,
		[Token(Token = "0x4001839")]
		Greater,
		[Token(Token = "0x400183A")]
		NotEqual,
		[Token(Token = "0x400183B")]
		GreaterEqual,
		[Token(Token = "0x400183C")]
		Always
	}
	[Token(Token = "0x20004B1")]
	public static class Keywords
	{
		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string albedoMap;

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string alphaClipping;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string[] surface;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string[] lightTransmission;

		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string thicknessMap;

		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string normalMap;

		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly string heightMap;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly string parallax;

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly string occlusionMap;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly string[] blend;

		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly string[] light;

		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly string[] artistic;

		[Token(Token = "0x4001849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly string[] artisticProjection;

		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly string artisticAnimation;

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly string[] workflow;

		[Token(Token = "0x400184C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly string emission;

		[Token(Token = "0x400184D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly string emissionMap;

		[Token(Token = "0x400184E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly string detailMap;

		[Token(Token = "0x400184F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly string[] detailBlend;

		[Token(Token = "0x4001850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly string detailNormalMap;

		[Token(Token = "0x4001851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly string[] rim;

		[Token(Token = "0x4001852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly string[] iridescence;

		[Token(Token = "0x4001853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly string[] colorGrading;

		[Token(Token = "0x4001854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static readonly string[] dissolve;

		[Token(Token = "0x4001855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public static readonly string goochRamp;

		[Token(Token = "0x4001856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public static readonly string goochBrightMap;

		[Token(Token = "0x4001857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public static readonly string goochDarkMap;

		[Token(Token = "0x4001858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public static readonly string[] diffuse;

		[Token(Token = "0x4001859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public static readonly string[] specular;

		[Token(Token = "0x400185A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public static readonly string[] environmentReflections;

		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public static readonly string fresnelHighlights;

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public static readonly string[] outline;

		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public static readonly string outlineData;

		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public static readonly string outlineMap;

		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public static readonly string refractionDistortionMap;

		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public static readonly string indexOfRefraction;

		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public static readonly string outlineNoise;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public static readonly string receiveShadows;

		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public static readonly string wrappedLighting;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public static readonly string[] colorBlend;

		[Token(Token = "0x4001865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public static readonly string flipbook;

		[Token(Token = "0x4001866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public static readonly string softFade;

		[Token(Token = "0x4001867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public static readonly string cameraFade;

		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public static readonly string thresholdMap;

		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public static readonly string pbsMap0;

		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public static readonly string pbsMap1;

		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public static readonly string[] vertexAnimation;

		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public static readonly string vertexAnimationMap;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public static readonly string vertexAnimationStutter;
	}
	[Token(Token = "0x20004B2")]
	public static class Properties
	{
		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly string shaderComponentOutlineName;

		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static readonly string shaderComponentRefractionName;

		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal static readonly string shaderVariantPBSName;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal static readonly string shaderVariantSimpleName;

		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal static readonly string shaderVariantUnlitName;

		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly EnumProperty<Workflow> workflow;

		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly EnumProperty<RenderFace> renderFace;

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly SurfaceProperty surface;

		[Token(Token = "0x4001876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly EnumProperty<ZWrite> zWrite;

		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly EnumProperty<ZTest> zTest;

		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly EnumProperty<BlendFactor> blendSrc;

		[Token(Token = "0x4001879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly EnumProperty<BlendFactor> blendDst;

		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly BlendProperty blend;

		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly AlphaClippingProperty alphaClipping;

		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly ColorProperty albedoColor;

		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly RangeProperty alphaCutoff;

		[Token(Token = "0x400187E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly TextureProperty albedoMap;

		[Token(Token = "0x400187F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly TilingProperty mainTiling;

		[Token(Token = "0x4001880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly OffsetProperty mainOffset;

		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly ColorProperty specularColor;

		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly RangeProperty metallic;

		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly RangeProperty smoothness;

		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly RangeProperty roughness;

		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static readonly TextureProperty specularMap;

		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public static readonly TextureProperty roughnessMap;

		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public static readonly TextureProperty metallicMap;

		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public static readonly FloatProperty normalMapIntensity;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public static readonly TextureProperty normalMap;

		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public static readonly RangeProperty parallax;

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public static readonly TextureProperty heightMap;

		[Token(Token = "0x400188C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public static readonly EnumProperty<LightTransmission> lightTransmission;

		[Token(Token = "0x400188D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public static readonly RangeProperty lightTransmissionDistortion;

		[Token(Token = "0x400188E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public static readonly ColorProperty lightTransmissionColor;

		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public static readonly TextureProperty thicknessMap;

		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public static readonly RangeProperty occlusionMapIntensity;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public static readonly TextureProperty occlusionMap;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public static readonly ColorProperty emissionColor;

		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public static readonly TextureProperty emissionMap;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public static readonly EnumProperty<DetailBlend> detailBlend;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public static readonly ColorProperty detailColor;

		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public static readonly RangeProperty detailMix;

		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public static readonly TextureProperty detailMap;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public static readonly TilingProperty detailTiling;

		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public static readonly OffsetProperty detailOffset;

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public static readonly FloatProperty detailNormalMapIntensity;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public static readonly TextureProperty detailNormalMap;

		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public static readonly BoolProperty receiveShadows;

		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public static readonly BoolProperty wrappedLighting;

		[Token(Token = "0x400189E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public static readonly RangeProperty diffuseSmoothness;

		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public static readonly RangeProperty diffuseThresholdOffset;

		[Token(Token = "0x40018A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public static readonly RangeProperty specularSmoothness;

		[Token(Token = "0x40018A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public static readonly RangeProperty specularThresholdOffset;

		[Token(Token = "0x40018A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public static readonly RangeProperty rimSmoothness;

		[Token(Token = "0x40018A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public static readonly RangeProperty rimThresholdOffset;

		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public static readonly RangeProperty lightTransmissionSmoothness;

		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public static readonly RangeProperty lightTransmissionThresholdOffset;

		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public static readonly EnumProperty<Light> light;

		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public static readonly TextureProperty diffuseRamp;

		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public static readonly TextureProperty specularRamp;

		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public static readonly TextureProperty rimRamp;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public static readonly TextureProperty lightTransmissionRamp;

		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public static readonly StepProperty lightBands;

		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public static readonly RangeProperty lightBandsScale;

		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public static readonly RangeProperty lightThreshold;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public static readonly TextureProperty thresholdMap;

		[Token(Token = "0x40018AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public static readonly FloatProperty thresholdMapScale;

		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public static readonly RangeProperty goochRampIntensity;

		[Token(Token = "0x40018B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public static readonly TextureProperty goochRamp;

		[Token(Token = "0x40018B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public static readonly ColorProperty goochBrightColor;

		[Token(Token = "0x40018B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public static readonly TextureProperty goochBrightMap;

		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public static readonly ColorProperty goochDarkColor;

		[Token(Token = "0x40018B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public static readonly TextureProperty goochDarkMap;

		[Token(Token = "0x40018B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public static readonly EnumProperty<ColorGrading> colorGrading;

		[Token(Token = "0x40018B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public static readonly FloatProperty contrast;

		[Token(Token = "0x40018B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public static readonly RangeProperty saturation;

		[Token(Token = "0x40018B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public static readonly RangeProperty brightness;

		[Token(Token = "0x40018BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public static readonly EnumProperty<Iridescence> iridescence;

		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public static readonly TextureProperty iridescenceRamp;

		[Token(Token = "0x40018BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public static readonly RangeProperty iridescenceSize;

		[Token(Token = "0x40018BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public static readonly RangeProperty iridescenceThresholdOffset;

		[Token(Token = "0x40018BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public static readonly RangeProperty iridescenceSmoothness;

		[Token(Token = "0x40018BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public static readonly ColorProperty iridescenceColor;

		[Token(Token = "0x40018C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public static readonly EnumProperty<Rim> rim;

		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public static readonly ColorProperty rimColor;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public static readonly ColorProperty rimBrightColor;

		[Token(Token = "0x40018C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public static readonly ColorProperty rimDarkColor;

		[Token(Token = "0x40018C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public static readonly RangeProperty rimSize;

		[Token(Token = "0x40018C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		public static readonly EnumProperty<VertexAnimation> vertexAnimation;

		[Token(Token = "0x40018C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public static readonly BoolProperty vertexAnimationStutter;

		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public static readonly TextureProperty vertexAnimationMap;

		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		public static readonly RangeProperty vertexAnimationIntensity;

		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		public static readonly Vector3Property vertexAnimationFrequency;

		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		public static readonly EnumProperty<Dissolve> dissolve;

		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public static readonly TextureProperty dissolveMap;

		[Token(Token = "0x40018CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		public static readonly FloatProperty dissolveMapScale;

		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		public static readonly RangeProperty dissolveAmount;

		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		public static readonly RangeProperty dissolveBorderSize;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		public static readonly TextureProperty dissolveBorderRamp;

		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		public static readonly ColorProperty dissolveBorderColor;

		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		public static readonly EnumProperty<Artistic> artistic;

		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		public static readonly EnumProperty<ArtisticProjection> artisticProjection;

		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		public static readonly RangeProperty artisticFrequency;

		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		public static readonly FloatProperty drawnMapScale;

		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		public static readonly TextureProperty drawnMap;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		public static readonly FloatProperty hatchingMapScale;

		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		public static readonly TextureProperty hatchingBrightMap;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		public static readonly TextureProperty hatchingDarkMap;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		public static readonly RangeProperty drawnClampMin;

		[Token(Token = "0x40018DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		public static readonly RangeProperty drawnClampMax;

		[Token(Token = "0x40018DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		public static readonly FloatProperty sketchMapScale;

		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		public static readonly TextureProperty sketchMap;

		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		public static readonly EnumProperty<Diffuse> diffuse;

		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		public static readonly SpecularProperty specular;

		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		public static readonly RangeProperty specularIntensity;

		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		public static readonly RangeProperty anisotropy;

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		public static readonly RangeProperty lightTransmissionIntensity;

		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		public static readonly EnvironmentReflectionProperty environmentReflections;

		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		public static readonly BoolProperty fresnelHighlights;

		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		public static readonly RenderPriorityProperty renderPriority;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		public static readonly StencilModeProperty stencil;

		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		public static readonly StepProperty stencilRef;

		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		public static readonly StepProperty stencilReadMask;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		public static readonly StepProperty stencilWriteMask;

		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		public static readonly EnumProperty<StencilComparison> stencilComp;

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		public static readonly EnumProperty<StencilOperation> stencilPass;

		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		public static readonly EnumProperty<StencilOperation> stencilFail;

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		public static readonly EnumProperty<StencilOperation> stencilZFail;

		[Token(Token = "0x40018ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
		public static readonly EnumProperty<Outline> outline;

		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
		public static readonly EnumProperty<OutlineData> outlineData;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		public static readonly TextureProperty outlineMap;

		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		public static readonly RangeProperty outlineSize;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		public static readonly ColorProperty outlineColor;

		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		public static readonly RangeProperty outlineNoise;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
		public static readonly FloatProperty refractionDistortionMapScale;

		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
		public static readonly TextureProperty refractionDistortionMap;

		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		public static readonly FloatProperty refractionDistortion;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
		public static readonly RangeProperty refractionDistortionFade;

		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
		public static readonly RangeProperty indexOfRefraction;

		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
		public static readonly BoolProperty flipbook;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
		public static readonly BoolProperty softFade;

		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
		public static readonly FloatProperty softFadeNearDistance;

		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
		public static readonly FloatProperty softFadeFarDistance;

		[Token(Token = "0x40018FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
		public static readonly BoolProperty cameraFade;

		[Token(Token = "0x40018FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x478")]
		public static readonly FloatProperty cameraFadeNearDistance;

		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x480")]
		public static readonly FloatProperty cameraFadeFarDistance;

		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x488")]
		public static readonly EnumProperty<ColorBlend> colorBlend;

		[Token(Token = "0x6001885")]
		[Address(RVA = "0xD1AD94", Offset = "0xD1AD94", VA = "0xD1AD94")]
		public static void UpdateSystemProperties(Material material)
		{
		}
	}
	[Token(Token = "0x20004B3")]
	public abstract class Property<T>
	{
		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected string[] _keywords;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected Uniform _uniform;

		[Token(Token = "0x170003D5")]
		public Uniform uniform
		{
			[Token(Token = "0x6001887")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001888")]
		public Property(Uniform uniform, params string[] keywords)
		{
		}

		[Token(Token = "0x6001889")]
		public abstract T GetValue(Material material);

		[Token(Token = "0x600188A")]
		public abstract void SetValue(Material material, T value);

		[Token(Token = "0x600188B")]
		protected void SetKeyword(Material material, bool b, int keywordIndex)
		{
		}

		[Token(Token = "0x600188C")]
		private void CleanKeywords(Material material)
		{
		}
	}
	[Token(Token = "0x20004B4")]
	public abstract class Property<T, U> : Property<T>
	{
		[Token(Token = "0x600188D")]
		public Property(Uniform uniform, params string[] keywords)
		{
		}

		[Token(Token = "0x600188E")]
		public abstract void SetValue(Material material, T valueM, U valueS);
	}
	[Token(Token = "0x20004B5")]
	public class BoolProperty : Property<bool>
	{
		[Token(Token = "0x600188F")]
		[Address(RVA = "0xD1DEFC", Offset = "0xD1DEFC", VA = "0xD1DEFC")]
		public BoolProperty(Uniform uniform, string keyword)
		{
		}

		[Token(Token = "0x6001890")]
		[Address(RVA = "0xD1E4F4", Offset = "0xD1E4F4", VA = "0xD1E4F4")]
		public BoolProperty(Uniform uniform)
		{
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0xD1E5A0", Offset = "0xD1E5A0", VA = "0xD1E5A0", Slot = "4")]
		public override bool GetValue(Material material)
		{
			return default(bool);
		}

		[Token(Token = "0x6001892")]
		[Address(RVA = "0xD1E5D4", Offset = "0xD1E5D4", VA = "0xD1E5D4", Slot = "5")]
		public override void SetValue(Material material, bool value)
		{
		}
	}
	[Token(Token = "0x20004B6")]
	public class IntProperty : Property<int>
	{
		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _keywordDisabled;

		[Token(Token = "0x6001893")]
		[Address(RVA = "0xD1E660", Offset = "0xD1E660", VA = "0xD1E660")]
		public IntProperty(Uniform uniform, string keyword, int keywordDisabled = 0)
		{
		}

		[Token(Token = "0x6001894")]
		[Address(RVA = "0xD1E720", Offset = "0xD1E720", VA = "0xD1E720")]
		public IntProperty(Uniform uniform)
		{
		}

		[Token(Token = "0x6001895")]
		[Address(RVA = "0xD1E7CC", Offset = "0xD1E7CC", VA = "0xD1E7CC", Slot = "4")]
		public override int GetValue(Material material)
		{
			return default(int);
		}

		[Token(Token = "0x6001896")]
		[Address(RVA = "0xD1E7F4", Offset = "0xD1E7F4", VA = "0xD1E7F4", Slot = "5")]
		public override void SetValue(Material material, int value)
		{
		}
	}
	[Token(Token = "0x20004B7")]
	public class StepProperty : Property<int>
	{
		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _keywordDisabled;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _minValue;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int _maxValue;

		[Token(Token = "0x6001897")]
		[Address(RVA = "0xD1E884", Offset = "0xD1E884", VA = "0xD1E884")]
		public StepProperty(Uniform uniform, int minValue, int maxValue, string keyword, int keywordDisabled = 0)
		{
		}

		[Token(Token = "0x6001898")]
		[Address(RVA = "0xD1DFBC", Offset = "0xD1DFBC", VA = "0xD1DFBC")]
		public StepProperty(Uniform uniform, int minValue, int maxValue)
		{
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0xD1E96C", Offset = "0xD1E96C", VA = "0xD1E96C", Slot = "4")]
		public override int GetValue(Material material)
		{
			return default(int);
		}

		[Token(Token = "0x600189A")]
		[Address(RVA = "0xD1E994", Offset = "0xD1E994", VA = "0xD1E994", Slot = "5")]
		public override void SetValue(Material material, int value)
		{
		}
	}
	[Token(Token = "0x20004B8")]
	public class FloatProperty : Property<float>
	{
		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _keywordDisabled;

		[Token(Token = "0x600189B")]
		[Address(RVA = "0xD1EA38", Offset = "0xD1EA38", VA = "0xD1EA38")]
		public FloatProperty(Uniform uniform, string keyword, float keywordDisabled = 0f)
		{
		}

		[Token(Token = "0x600189C")]
		[Address(RVA = "0xD1DC04", Offset = "0xD1DC04", VA = "0xD1DC04")]
		public FloatProperty(Uniform uniform)
		{
		}

		[Token(Token = "0x600189D")]
		[Address(RVA = "0xD1EB0C", Offset = "0xD1EB0C", VA = "0xD1EB0C", Slot = "4")]
		public override float GetValue(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0xD1EB34", Offset = "0xD1EB34", VA = "0xD1EB34", Slot = "5")]
		public override void SetValue(Material material, float value)
		{
		}
	}
	[Token(Token = "0x20004B9")]
	public class RangeProperty : Property<float>
	{
		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _keywordDisabled;

		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float _minValue;

		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _maxValue;

		[Token(Token = "0x600189F")]
		[Address(RVA = "0xD1E1F4", Offset = "0xD1E1F4", VA = "0xD1E1F4")]
		public RangeProperty(Uniform uniform, string keyword, float minValue, float maxValue, float keywordDisabled = 0f)
		{
		}

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0xD1DCB0", Offset = "0xD1DCB0", VA = "0xD1DCB0")]
		public RangeProperty(Uniform uniform, string keyword, float minValue, float keywordDisabled = 0f)
		{
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0xD1D928", Offset = "0xD1D928", VA = "0xD1D928")]
		public RangeProperty(Uniform uniform, float minValue, float maxValue)
		{
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0xD1E080", Offset = "0xD1E080", VA = "0xD1E080")]
		public RangeProperty(Uniform uniform, float minValue)
		{
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0xD1EBD8", Offset = "0xD1EBD8", VA = "0xD1EBD8", Slot = "4")]
		public override float GetValue(Material material)
		{
			return default(float);
		}

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0xD1EC00", Offset = "0xD1EC00", VA = "0xD1EC00", Slot = "5")]
		public override void SetValue(Material material, float value)
		{
		}
	}
	[Token(Token = "0x20004BA")]
	public class Vector2Property : Property<UnityEngine.Vector2>
	{
		[Token(Token = "0x60018A5")]
		[Address(RVA = "0xD1ECB8", Offset = "0xD1ECB8", VA = "0xD1ECB8")]
		public Vector2Property(Uniform uniform)
		{
		}

		[Token(Token = "0x60018A6")]
		[Address(RVA = "0xD1ED64", Offset = "0xD1ED64", VA = "0xD1ED64", Slot = "4")]
		public override UnityEngine.Vector2 GetValue(Material material)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0xD1ED8C", Offset = "0xD1ED8C", VA = "0xD1ED8C", Slot = "5")]
		public override void SetValue(Material material, UnityEngine.Vector2 value)
		{
		}
	}
	[Token(Token = "0x20004BB")]
	public class Vector3Property : Property<UnityEngine.Vector3>
	{
		[Token(Token = "0x60018A8")]
		[Address(RVA = "0xD1E148", Offset = "0xD1E148", VA = "0xD1E148")]
		public Vector3Property(Uniform uniform)
		{
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0xD1EDBC", Offset = "0xD1EDBC", VA = "0xD1EDBC", Slot = "4")]
		public override UnityEngine.Vector3 GetValue(Material material)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0xD1EDE4", Offset = "0xD1EDE4", VA = "0xD1EDE4", Slot = "5")]
		public override void SetValue(Material material, UnityEngine.Vector3 value)
		{
		}
	}
	[Token(Token = "0x20004BC")]
	public class Vector4Property : Property<Vector4>
	{
		[Token(Token = "0x60018AB")]
		[Address(RVA = "0xD1EE10", Offset = "0xD1EE10", VA = "0xD1EE10")]
		public Vector4Property(Uniform uniform)
		{
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0xD1EEBC", Offset = "0xD1EEBC", VA = "0xD1EEBC", Slot = "4")]
		public override Vector4 GetValue(Material material)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0xD1EEE4", Offset = "0xD1EEE4", VA = "0xD1EEE4", Slot = "5")]
		public override void SetValue(Material material, Vector4 value)
		{
		}
	}
	[Token(Token = "0x20004BD")]
	public class ColorProperty : Property<Color>
	{
		[Token(Token = "0x60018AE")]
		[Address(RVA = "0xD1DD90", Offset = "0xD1DD90", VA = "0xD1DD90")]
		public ColorProperty(Uniform uniform, string keyword)
		{
		}

		[Token(Token = "0x60018AF")]
		[Address(RVA = "0xD1D87C", Offset = "0xD1D87C", VA = "0xD1D87C")]
		public ColorProperty(Uniform uniform)
		{
		}

		[Token(Token = "0x60018B0")]
		[Address(RVA = "0xD1EF0C", Offset = "0xD1EF0C", VA = "0xD1EF0C", Slot = "4")]
		public override Color GetValue(Material material)
		{
			return default(Color);
		}

		[Token(Token = "0x60018B1")]
		[Address(RVA = "0xD1EF34", Offset = "0xD1EF34", VA = "0xD1EF34", Slot = "5")]
		public override void SetValue(Material material, Color color)
		{
		}
	}
	[Token(Token = "0x20004BE")]
	public class TextureProperty : Property<Texture>
	{
		[Token(Token = "0x60018B2")]
		[Address(RVA = "0xD1D9EC", Offset = "0xD1D9EC", VA = "0xD1D9EC")]
		public TextureProperty(Uniform uniform, string keyword)
		{
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0xD1DE50", Offset = "0xD1DE50", VA = "0xD1DE50")]
		public TextureProperty(Uniform uniform)
		{
		}

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0xD1EF5C", Offset = "0xD1EF5C", VA = "0xD1EF5C", Slot = "4")]
		public override Texture GetValue(Material material)
		{
			return null;
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0xD1EF84", Offset = "0xD1EF84", VA = "0xD1EF84", Slot = "5")]
		public override void SetValue(Material material, Texture texture)
		{
		}
	}
	[Token(Token = "0x20004BF")]
	public class EnumProperty<T> : Property<T> where T : Enum
	{
		[Token(Token = "0x60018B6")]
		public EnumProperty(Uniform uniform, params string[] keywords)
		{
		}

		[Token(Token = "0x60018B7")]
		public override T GetValue(Material material)
		{
			return (T)null;
		}

		[Token(Token = "0x60018B8")]
		public override void SetValue(Material material, T value)
		{
		}
	}
	[Token(Token = "0x20004C0")]
	public class AlphaClippingProperty : Property<bool>
	{
		[Token(Token = "0x60018B9")]
		[Address(RVA = "0xD1D7BC", Offset = "0xD1D7BC", VA = "0xD1D7BC")]
		public AlphaClippingProperty(Uniform uniform, string keyword)
		{
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0xD1F040", Offset = "0xD1F040", VA = "0xD1F040", Slot = "4")]
		public override bool GetValue(Material material)
		{
			return default(bool);
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0xD1F074", Offset = "0xD1F074", VA = "0xD1F074", Slot = "5")]
		public override void SetValue(Material material, bool value)
		{
		}
	}
	[Token(Token = "0x20004C1")]
	public class TilingProperty : Property<UnityEngine.Vector2>
	{
		[Token(Token = "0x60018BC")]
		[Address(RVA = "0xD1DAAC", Offset = "0xD1DAAC", VA = "0xD1DAAC")]
		public TilingProperty(Uniform uniform)
		{
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0xD1F1B0", Offset = "0xD1F1B0", VA = "0xD1F1B0", Slot = "4")]
		public override UnityEngine.Vector2 GetValue(Material material)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0xD1F208", Offset = "0xD1F208", VA = "0xD1F208", Slot = "5")]
		public override void SetValue(Material material, UnityEngine.Vector2 value)
		{
		}
	}
	[Token(Token = "0x20004C2")]
	public class OffsetProperty : Property<UnityEngine.Vector2>
	{
		[Token(Token = "0x60018BF")]
		[Address(RVA = "0xD1DB58", Offset = "0xD1DB58", VA = "0xD1DB58")]
		public OffsetProperty(Uniform uniform)
		{
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0xD1F278", Offset = "0xD1F278", VA = "0xD1F278", Slot = "4")]
		public override UnityEngine.Vector2 GetValue(Material material)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0xD1F2D0", Offset = "0xD1F2D0", VA = "0xD1F2D0", Slot = "5")]
		public override void SetValue(Material material, UnityEngine.Vector2 value)
		{
		}
	}
	[Token(Token = "0x20004C3")]
	public class SpecularProperty : Property<Specular>
	{
		[Token(Token = "0x60018C2")]
		[Address(RVA = "0xD1E2DC", Offset = "0xD1E2DC", VA = "0xD1E2DC")]
		public SpecularProperty(Uniform uniform, params string[] keywords)
		{
		}

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0xD1F340", Offset = "0xD1F340", VA = "0xD1F340", Slot = "4")]
		public override Specular GetValue(Material material)
		{
			return default(Specular);
		}

		[Token(Token = "0x60018C4")]
		[Address(RVA = "0xD1F368", Offset = "0xD1F368", VA = "0xD1F368", Slot = "5")]
		public override void SetValue(Material material, Specular specular)
		{
		}
	}
	[Token(Token = "0x20004C4")]
	public class EnvironmentReflectionProperty : Property<EnvironmentReflection>
	{
		[Token(Token = "0x60018C5")]
		[Address(RVA = "0xD1E33C", Offset = "0xD1E33C", VA = "0xD1E33C")]
		public EnvironmentReflectionProperty(Uniform uniform, params string[] keywords)
		{
		}

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0xD1F464", Offset = "0xD1F464", VA = "0xD1F464", Slot = "4")]
		public override EnvironmentReflection GetValue(Material material)
		{
			return default(EnvironmentReflection);
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0xD1F48C", Offset = "0xD1F48C", VA = "0xD1F48C", Slot = "5")]
		public override void SetValue(Material material, EnvironmentReflection environmentReflection)
		{
		}
	}
	[Token(Token = "0x20004C5")]
	public class StencilModeProperty : Property<Stencil>
	{
		[Token(Token = "0x60018C8")]
		[Address(RVA = "0xD1E448", Offset = "0xD1E448", VA = "0xD1E448")]
		public StencilModeProperty(Uniform uniform)
		{
		}

		[Token(Token = "0x60018C9")]
		[Address(RVA = "0xD1F588", Offset = "0xD1F588", VA = "0xD1F588", Slot = "4")]
		public override Stencil GetValue(Material material)
		{
			return default(Stencil);
		}

		[Token(Token = "0x60018CA")]
		[Address(RVA = "0xD1F5B0", Offset = "0xD1F5B0", VA = "0xD1F5B0", Slot = "5")]
		public override void SetValue(Material material, Stencil stencil)
		{
		}
	}
	[Token(Token = "0x20004C6")]
	public class RenderPriorityProperty : Property<int, bool>
	{
		[Token(Token = "0x60018CB")]
		[Address(RVA = "0xD1E39C", Offset = "0xD1E39C", VA = "0xD1E39C")]
		public RenderPriorityProperty(Uniform uniform)
		{
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0xD1F734", Offset = "0xD1F734", VA = "0xD1F734", Slot = "4")]
		public override int GetValue(Material material)
		{
			return default(int);
		}

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0xD1F78C", Offset = "0xD1F78C", VA = "0xD1F78C", Slot = "5")]
		public override void SetValue(Material material, int priority)
		{
		}

		[Token(Token = "0x60018CE")]
		[Address(RVA = "0xD1F79C", Offset = "0xD1F79C", VA = "0xD1F79C", Slot = "6")]
		public override void SetValue(Material material, int priority, bool alphaClipping)
		{
		}
	}
	[Token(Token = "0x20004C7")]
	public class SurfaceProperty : Property<Surface, bool>
	{
		[Token(Token = "0x60018CF")]
		[Address(RVA = "0xD1D6FC", Offset = "0xD1D6FC", VA = "0xD1D6FC")]
		public SurfaceProperty(Uniform uniform, params string[] keywords)
		{
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0xD1F8D8", Offset = "0xD1F8D8", VA = "0xD1F8D8", Slot = "4")]
		public override Surface GetValue(Material material)
		{
			return default(Surface);
		}

		[Token(Token = "0x60018D1")]
		[Address(RVA = "0xD1F930", Offset = "0xD1F930", VA = "0xD1F930", Slot = "5")]
		public override void SetValue(Material material, Surface surface)
		{
		}

		[Token(Token = "0x60018D2")]
		[Address(RVA = "0xD1F940", Offset = "0xD1F940", VA = "0xD1F940", Slot = "6")]
		public override void SetValue(Material material, Surface surface, bool alphaClipping)
		{
		}
	}
	[Token(Token = "0x20004C8")]
	public class BlendProperty : Property<Blend>
	{
		[Token(Token = "0x60018D3")]
		[Address(RVA = "0xD1D75C", Offset = "0xD1D75C", VA = "0xD1D75C")]
		public BlendProperty(Uniform uniform, params string[] keywords)
		{
		}

		[Token(Token = "0x60018D4")]
		[Address(RVA = "0xD1FD54", Offset = "0xD1FD54", VA = "0xD1FD54", Slot = "4")]
		public override Blend GetValue(Material material)
		{
			return default(Blend);
		}

		[Token(Token = "0x60018D5")]
		[Address(RVA = "0xD1FDAC", Offset = "0xD1FDAC", VA = "0xD1FDAC", Slot = "5")]
		public override void SetValue(Material material, Blend blend)
		{
		}
	}
	[Token(Token = "0x20004C9")]
	public class Uniform
	{
		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected string _name;

		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int _id;

		[Token(Token = "0x170003D6")]
		public string name
		{
			[Token(Token = "0x60018D6")]
			[Address(RVA = "0xD2008C", Offset = "0xD2008C", VA = "0xD2008C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003D7")]
		public int id
		{
			[Token(Token = "0x60018D7")]
			[Address(RVA = "0xD20094", Offset = "0xD20094", VA = "0xD20094")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60018D8")]
		[Address(RVA = "0xD2009C", Offset = "0xD2009C", VA = "0xD2009C")]
		public Uniform(string name)
		{
		}
	}
	[Token(Token = "0x20004CA")]
	public static class Uniforms
	{
		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Uniform workflow;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Uniform renderFace;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Uniform surface;

		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly Uniform zWrite;

		[Token(Token = "0x4001910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly Uniform zTest;

		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly Uniform blendSrc;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly Uniform blendDst;

		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly Uniform blend;

		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly Uniform alphaClipping;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly Uniform albedoColor;

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly Uniform alphaCutoff;

		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly Uniform albedoMap;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly Uniform specularColor;

		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly Uniform metallic;

		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly Uniform smoothness;

		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly Uniform roughness;

		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly Uniform specularMap;

		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly Uniform roughnessMap;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly Uniform metallicMap;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly Uniform normalMapIntensity;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly Uniform normalMap;

		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly Uniform parallax;

		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly Uniform heightMap;

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static readonly Uniform lightTransmission;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public static readonly Uniform lightTransmissionDistortion;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public static readonly Uniform lightTransmissionColor;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public static readonly Uniform thicknessMap;

		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public static readonly Uniform occlusionMapIntensity;

		[Token(Token = "0x4001928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public static readonly Uniform occlusionMap;

		[Token(Token = "0x4001929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public static readonly Uniform emissionColor;

		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public static readonly Uniform emissionMap;

		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public static readonly Uniform detailBlend;

		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public static readonly Uniform detailColor;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public static readonly Uniform detailMix;

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public static readonly Uniform detailMap;

		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public static readonly Uniform detailNormalMapIntensity;

		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public static readonly Uniform detailNormalMap;

		[Token(Token = "0x4001931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public static readonly Uniform receiveShadows;

		[Token(Token = "0x4001932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public static readonly Uniform wrappedLighting;

		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public static readonly Uniform diffuseSmoothness;

		[Token(Token = "0x4001934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public static readonly Uniform diffuseThresholdOffset;

		[Token(Token = "0x4001935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public static readonly Uniform specularSmoothness;

		[Token(Token = "0x4001936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public static readonly Uniform specularThresholdOffset;

		[Token(Token = "0x4001937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public static readonly Uniform rimSmoothness;

		[Token(Token = "0x4001938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public static readonly Uniform rimThresholdOffset;

		[Token(Token = "0x4001939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public static readonly Uniform lightTransmissionSmoothness;

		[Token(Token = "0x400193A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public static readonly Uniform lightTransmissionThresholdOffset;

		[Token(Token = "0x400193B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public static readonly Uniform light;

		[Token(Token = "0x400193C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public static readonly Uniform diffuseRamp;

		[Token(Token = "0x400193D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public static readonly Uniform specularRamp;

		[Token(Token = "0x400193E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public static readonly Uniform rimRamp;

		[Token(Token = "0x400193F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public static readonly Uniform lightTransmissionRamp;

		[Token(Token = "0x4001940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public static readonly Uniform lightBands;

		[Token(Token = "0x4001941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public static readonly Uniform lightBandsScale;

		[Token(Token = "0x4001942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public static readonly Uniform lightThreshold;

		[Token(Token = "0x4001943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public static readonly Uniform thresholdMap;

		[Token(Token = "0x4001944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public static readonly Uniform thresholdMapScale;

		[Token(Token = "0x4001945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public static readonly Uniform goochRampIntensity;

		[Token(Token = "0x4001946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public static readonly Uniform goochRamp;

		[Token(Token = "0x4001947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public static readonly Uniform goochBrightColor;

		[Token(Token = "0x4001948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public static readonly Uniform goochBrightMap;

		[Token(Token = "0x4001949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public static readonly Uniform goochDarkColor;

		[Token(Token = "0x400194A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public static readonly Uniform goochDarkMap;

		[Token(Token = "0x400194B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public static readonly Uniform colorGrading;

		[Token(Token = "0x400194C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public static readonly Uniform contrast;

		[Token(Token = "0x400194D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public static readonly Uniform saturation;

		[Token(Token = "0x400194E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public static readonly Uniform brightness;

		[Token(Token = "0x400194F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public static readonly Uniform iridescence;

		[Token(Token = "0x4001950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		public static readonly Uniform iridescenceRamp;

		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public static readonly Uniform iridescenceSize;

		[Token(Token = "0x4001952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public static readonly Uniform iridescenceThresholdOffset;

		[Token(Token = "0x4001953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public static readonly Uniform iridescenceSmoothness;

		[Token(Token = "0x4001954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public static readonly Uniform iridescenceColor;

		[Token(Token = "0x4001955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public static readonly Uniform rim;

		[Token(Token = "0x4001956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public static readonly Uniform rimColor;

		[Token(Token = "0x4001957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public static readonly Uniform rimBrightColor;

		[Token(Token = "0x4001958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public static readonly Uniform rimDarkColor;

		[Token(Token = "0x4001959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public static readonly Uniform rimSize;

		[Token(Token = "0x400195A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public static readonly Uniform vertexAnimation;

		[Token(Token = "0x400195B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public static readonly Uniform vertexAnimationStutter;

		[Token(Token = "0x400195C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public static readonly Uniform vertexAnimationMap;

		[Token(Token = "0x400195D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public static readonly Uniform vertexAnimationIntensity;

		[Token(Token = "0x400195E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public static readonly Uniform vertexAnimationFrequency;

		[Token(Token = "0x400195F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public static readonly Uniform dissolve;

		[Token(Token = "0x4001960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public static readonly Uniform dissolveMap;

		[Token(Token = "0x4001961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public static readonly Uniform dissolveMapScale;

		[Token(Token = "0x4001962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public static readonly Uniform dissolveAmount;

		[Token(Token = "0x4001963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		public static readonly Uniform dissolveBorderSize;

		[Token(Token = "0x4001964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public static readonly Uniform dissolveBorderRamp;

		[Token(Token = "0x4001965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public static readonly Uniform dissolveBorderColor;

		[Token(Token = "0x4001966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		public static readonly Uniform artistic;

		[Token(Token = "0x4001967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		public static readonly Uniform artisticProjection;

		[Token(Token = "0x4001968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		public static readonly Uniform artisticFrequency;

		[Token(Token = "0x4001969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public static readonly Uniform drawnMapScale;

		[Token(Token = "0x400196A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		public static readonly Uniform drawnMap;

		[Token(Token = "0x400196B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		public static readonly Uniform hatchingMapScale;

		[Token(Token = "0x400196C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		public static readonly Uniform hatchingBrightMap;

		[Token(Token = "0x400196D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		public static readonly Uniform hatchingDarkMap;

		[Token(Token = "0x400196E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		public static readonly Uniform drawnClampMin;

		[Token(Token = "0x400196F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		public static readonly Uniform drawnClampMax;

		[Token(Token = "0x4001970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		public static readonly Uniform sketchMapScale;

		[Token(Token = "0x4001971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		public static readonly Uniform sketchMap;

		[Token(Token = "0x4001972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		public static readonly Uniform diffuse;

		[Token(Token = "0x4001973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		public static readonly Uniform specular;

		[Token(Token = "0x4001974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		public static readonly Uniform specularIntensity;

		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		public static readonly Uniform anisotropy;

		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		public static readonly Uniform lightTransmissionIntensity;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		public static readonly Uniform environmentReflections;

		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		public static readonly Uniform fresnelHighlights;

		[Token(Token = "0x4001979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		public static readonly Uniform stencil;

		[Token(Token = "0x400197A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		public static readonly Uniform renderPriority;

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		public static readonly Uniform stencilRef;

		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		public static readonly Uniform stencilReadMask;

		[Token(Token = "0x400197D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		public static readonly Uniform stencilWriteMask;

		[Token(Token = "0x400197E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		public static readonly Uniform stencilComp;

		[Token(Token = "0x400197F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		public static readonly Uniform stencilPass;

		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		public static readonly Uniform stencilFail;

		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		public static readonly Uniform stencilZFail;

		[Token(Token = "0x4001982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		public static readonly Uniform outline;

		[Token(Token = "0x4001983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		public static readonly Uniform outlineData;

		[Token(Token = "0x4001984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		public static readonly Uniform outlineMap;

		[Token(Token = "0x4001985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		public static readonly Uniform outlineSize;

		[Token(Token = "0x4001986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D0")]
		public static readonly Uniform outlineColor;

		[Token(Token = "0x4001987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		public static readonly Uniform outlineNoise;

		[Token(Token = "0x4001988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		public static readonly Uniform refractionDistortionMapScale;

		[Token(Token = "0x4001989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		public static readonly Uniform refractionDistortionMap;

		[Token(Token = "0x400198A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		public static readonly Uniform refractionDistortion;

		[Token(Token = "0x400198B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
		public static readonly Uniform indexOfRefraction;

		[Token(Token = "0x400198C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
		public static readonly Uniform refractionDistortionFade;

		[Token(Token = "0x400198D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		public static readonly Uniform flipbook;

		[Token(Token = "0x400198E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		public static readonly Uniform softFade;

		[Token(Token = "0x400198F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		public static readonly Uniform softFadeNearDistance;

		[Token(Token = "0x4001990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		public static readonly Uniform softFadeFarDistance;

		[Token(Token = "0x4001991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x428")]
		public static readonly Uniform cameraFade;

		[Token(Token = "0x4001992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x430")]
		public static readonly Uniform cameraFadeNearDistance;

		[Token(Token = "0x4001993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x438")]
		public static readonly Uniform cameraFadeFarDistance;

		[Token(Token = "0x4001994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x440")]
		public static readonly Uniform colorBlend;

		[Token(Token = "0x4001995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x448")]
		public static readonly Uniform initialized;

		[Token(Token = "0x4001996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x450")]
		public static readonly Uniform optionsTab;

		[Token(Token = "0x4001997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
		public static readonly Uniform inputTab;

		[Token(Token = "0x4001998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
		public static readonly Uniform stylizeTab;

		[Token(Token = "0x4001999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x468")]
		public static readonly Uniform advancedTab;

		[Token(Token = "0x400199A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x470")]
		public static readonly Uniform particlesTab;

		[Token(Token = "0x400199B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x478")]
		public static readonly Uniform outlineTab;

		[Token(Token = "0x400199C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x480")]
		public static readonly Uniform refractionTab;

		[Token(Token = "0x400199D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x488")]
		public static readonly Uniform mainTex;

		[Token(Token = "0x400199E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x490")]
		public static readonly Uniform cutoff;
	}
}
namespace UnityEngine.EventSystems
{
	[Token(Token = "0x20004CB")]
	public class OVRInputModule : PointerInputModule
	{
		[Token(Token = "0x20004CC")]
		[Obsolete("Mode is no longer needed on input module as it handles both mouse and keyboard simultaneously.", false)]
		public enum InputMode
		{
			[Token(Token = "0x40019B9")]
			Mouse,
			[Token(Token = "0x40019BA")]
			Buttons
		}

		[Token(Token = "0x400199F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Object which points with Z axis. E.g. CentreEyeAnchor from OVRCameraRig")]
		public Transform rayTransform;

		[Token(Token = "0x40019A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public OVRCursor m_Cursor;

		[Token(Token = "0x40019A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool rightHanded;

		[Token(Token = "0x40019A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Keyboard button to act as gaze click")]
		public KeyCode gazeClickKey;

		[Token(Token = "0x40019A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Perform an sphere cast to determine correct depth for gaze pointer")]
		[Header("Physics")]
		public bool performSphereCastForGazepointer;

		[Token(Token = "0x40019A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[Header("Gamepad Stick Scroll")]
		[Tooltip("Enable scrolling with the right stick on a gamepad")]
		public bool useRightStickScroll;

		[Token(Token = "0x40019A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Deadzone for right stick to prevent accidental scrolling")]
		public float rightStickDeadZone;

		[Token(Token = "0x40019A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Touchpad Swipe Scroll")]
		[Tooltip("Enable scrolling by swiping the touchpad")]
		public bool useSwipeScroll;

		[Token(Token = "0x40019A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Minimum trackpad movement in pixels to start swiping")]
		public float swipeDragThreshold;

		[Token(Token = "0x40019A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Distance scrolled when swipe scroll occurs")]
		public float swipeDragScale;

		[Token(Token = "0x40019A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Invert X axis on touchpad")]
		public bool InvertSwipeXAxis;

		[NonSerialized]
		[Token(Token = "0x40019AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public OVRRaycaster activeGraphicRaycaster;

		[Token(Token = "0x40019AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Minimum pointer movement in degrees to start dragging")]
		[Header("Dragging")]
		public float angleDragThreshold;

		[Token(Token = "0x40019AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private float m_SpherecastRadius;

		[Token(Token = "0x40019AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float m_NextAction;

		[Token(Token = "0x40019AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector2 m_LastMousePosition;

		[Token(Token = "0x40019AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector2 m_MousePosition;

		[Token(Token = "0x40019B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[Header("Standalone Input Module")]
		private string m_HorizontalAxis;

		[Token(Token = "0x40019B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private string m_VerticalAxis;

		[Token(Token = "0x40019B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private string m_SubmitButton;

		[Token(Token = "0x40019B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private string m_CancelButton;

		[Token(Token = "0x40019B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float m_InputActionsPerSecond;

		[Token(Token = "0x40019B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		private bool m_AllowActivationOnMobileDevice;

		[Token(Token = "0x40019B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected Dictionary<int, OVRPointerEventData> m_VRRayPointerData;

		[Token(Token = "0x40019B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly MouseState m_MouseState;

		[Token(Token = "0x170003D8")]
		[Obsolete("Mode is no longer needed on input module as it handles both mouse and keyboard simultaneously.", false)]
		public InputMode inputMode
		{
			[Token(Token = "0x60018DB")]
			[Address(RVA = "0xD2308C", Offset = "0xD2308C", VA = "0xD2308C")]
			get
			{
				return default(InputMode);
			}
		}

		[Token(Token = "0x170003D9")]
		public bool allowActivationOnMobileDevice
		{
			[Token(Token = "0x60018DC")]
			[Address(RVA = "0xD23094", Offset = "0xD23094", VA = "0xD23094")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018DD")]
			[Address(RVA = "0xD2309C", Offset = "0xD2309C", VA = "0xD2309C")]
			set
			{
			}
		}

		[Token(Token = "0x170003DA")]
		public float inputActionsPerSecond
		{
			[Token(Token = "0x60018DE")]
			[Address(RVA = "0xD230A8", Offset = "0xD230A8", VA = "0xD230A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018DF")]
			[Address(RVA = "0xD230B0", Offset = "0xD230B0", VA = "0xD230B0")]
			set
			{
			}
		}

		[Token(Token = "0x170003DB")]
		public string horizontalAxis
		{
			[Token(Token = "0x60018E0")]
			[Address(RVA = "0xD230B8", Offset = "0xD230B8", VA = "0xD230B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018E1")]
			[Address(RVA = "0xD230C0", Offset = "0xD230C0", VA = "0xD230C0")]
			set
			{
			}
		}

		[Token(Token = "0x170003DC")]
		public string verticalAxis
		{
			[Token(Token = "0x60018E2")]
			[Address(RVA = "0xD230C8", Offset = "0xD230C8", VA = "0xD230C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018E3")]
			[Address(RVA = "0xD230D0", Offset = "0xD230D0", VA = "0xD230D0")]
			set
			{
			}
		}

		[Token(Token = "0x170003DD")]
		public string submitButton
		{
			[Token(Token = "0x60018E4")]
			[Address(RVA = "0xD230D8", Offset = "0xD230D8", VA = "0xD230D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018E5")]
			[Address(RVA = "0xD230E0", Offset = "0xD230E0", VA = "0xD230E0")]
			set
			{
			}
		}

		[Token(Token = "0x170003DE")]
		public string cancelButton
		{
			[Token(Token = "0x60018E6")]
			[Address(RVA = "0xD230E8", Offset = "0xD230E8", VA = "0xD230E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018E7")]
			[Address(RVA = "0xD230F0", Offset = "0xD230F0", VA = "0xD230F0")]
			set
			{
			}
		}

		[Token(Token = "0x60018DA")]
		[Address(RVA = "0xD22F20", Offset = "0xD22F20", VA = "0xD22F20")]
		protected OVRInputModule()
		{
		}

		[Token(Token = "0x60018E8")]
		[Address(RVA = "0xD230F8", Offset = "0xD230F8", VA = "0xD230F8", Slot = "24")]
		public override void UpdateModule()
		{
		}

		[Token(Token = "0x60018E9")]
		[Address(RVA = "0xD23104", Offset = "0xD23104", VA = "0xD23104", Slot = "25")]
		public override bool IsModuleSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x60018EA")]
		[Address(RVA = "0xD2310C", Offset = "0xD2310C", VA = "0xD2310C", Slot = "21")]
		public override bool ShouldActivateModule()
		{
			return default(bool);
		}

		[Token(Token = "0x60018EB")]
		[Address(RVA = "0xD23114", Offset = "0xD23114", VA = "0xD23114", Slot = "23")]
		public override void ActivateModule()
		{
		}

		[Token(Token = "0x60018EC")]
		[Address(RVA = "0xD231C8", Offset = "0xD231C8", VA = "0xD231C8", Slot = "22")]
		public override void DeactivateModule()
		{
		}

		[Token(Token = "0x60018ED")]
		[Address(RVA = "0xD234D8", Offset = "0xD234D8", VA = "0xD234D8")]
		private bool SendSubmitEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x60018EE")]
		[Address(RVA = "0xD2357C", Offset = "0xD2357C", VA = "0xD2357C")]
		private bool AllowMoveEventProcessing(float time)
		{
			return default(bool);
		}

		[Token(Token = "0x60018EF")]
		[Address(RVA = "0xD23584", Offset = "0xD23584", VA = "0xD23584")]
		private Vector2 GetRawMoveVector()
		{
			return default(Vector2);
		}

		[Token(Token = "0x60018F0")]
		[Address(RVA = "0xD235C4", Offset = "0xD235C4", VA = "0xD235C4")]
		private bool SendMoveEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x60018F1")]
		[Address(RVA = "0xD23608", Offset = "0xD23608", VA = "0xD23608")]
		private bool SendUpdateEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x60018F2")]
		[Address(RVA = "0xD23750", Offset = "0xD23750", VA = "0xD23750")]
		private void ProcessMousePress(MouseButtonEventData data)
		{
		}

		[Token(Token = "0x60018F3")]
		[Address(RVA = "0xD23D8C", Offset = "0xD23D8C", VA = "0xD23D8C")]
		private void ProcessMouseEvent(MouseState mouseData)
		{
		}

		[Token(Token = "0x60018F4")]
		[Address(RVA = "0xD24094", Offset = "0xD24094", VA = "0xD24094", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x60018F5")]
		[Address(RVA = "0xD24054", Offset = "0xD24054", VA = "0xD24054")]
		private static bool UseMouse(bool pressed, bool released, PointerEventData pointerData)
		{
			return default(bool);
		}

		[Token(Token = "0x60018F6")]
		[Address(RVA = "0xD24128", Offset = "0xD24128", VA = "0xD24128")]
		protected void CopyFromTo(OVRPointerEventData from, OVRPointerEventData to)
		{
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0xD24190", Offset = "0xD24190", VA = "0xD24190")]
		protected new void CopyFromTo(PointerEventData from, PointerEventData to)
		{
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0xD241E8", Offset = "0xD241E8", VA = "0xD241E8")]
		protected bool GetPointerData(int id, out OVRPointerEventData data, bool create)
		{
			return default(bool);
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0xD231E4", Offset = "0xD231E4", VA = "0xD231E4")]
		protected new void ClearSelection()
		{
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0xD242D4", Offset = "0xD242D4", VA = "0xD242D4")]
		private static Vector3 GetRectTransformNormal(RectTransform rectTransform)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60018FB")]
		[Address(RVA = "0xD24478", Offset = "0xD24478", VA = "0xD24478", Slot = "31")]
		protected virtual MouseState GetGazePointerData()
		{
			return null;
		}

		[Token(Token = "0x60018FC")]
		[Address(RVA = "0xD24B84", Offset = "0xD24B84", VA = "0xD24B84")]
		protected MouseState GetCanvasPointerData()
		{
			return null;
		}

		[Token(Token = "0x60018FD")]
		[Address(RVA = "0xD24F10", Offset = "0xD24F10", VA = "0xD24F10")]
		private bool ShouldStartDrag(PointerEventData pointerEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x60018FE")]
		[Address(RVA = "0xD240F0", Offset = "0xD240F0", VA = "0xD240F0")]
		private static bool IsPointerMoving(PointerEventData pointerEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x60018FF")]
		[Address(RVA = "0xD251BC", Offset = "0xD251BC", VA = "0xD251BC")]
		protected Vector2 SwipeAdjustedPosition(Vector2 originalPosition, PointerEventData pointerEvent)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001900")]
		[Address(RVA = "0xD251C0", Offset = "0xD251C0", VA = "0xD251C0", Slot = "30")]
		protected override void ProcessDrag(PointerEventData pointerEvent)
		{
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0xD25490", Offset = "0xD25490", VA = "0xD25490", Slot = "32")]
		protected virtual PointerEventData.FramePressState GetGazeButtonState()
		{
			return default(PointerEventData.FramePressState);
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0xD24AE0", Offset = "0xD24AE0", VA = "0xD24AE0")]
		protected Vector2 GetExtraScrollDelta()
		{
			return default(Vector2);
		}
	}
}
namespace UnityEngine.AI
{
	[Token(Token = "0x20004CD")]
	[ExecuteInEditMode]
	[HelpURL("https://github.com/Unity-Technologies/NavMeshComponents#documentation-draft")]
	[AddComponentMenu("Navigation/NavMeshLink", 33)]
	[DefaultExecutionOrder(-101)]
	public class NavMeshLink : MonoBehaviour
	{
		[Token(Token = "0x40019BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int m_AgentTypeID;

		[Token(Token = "0x40019BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private Vector3 m_StartPoint;

		[Token(Token = "0x40019BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Vector3 m_EndPoint;

		[Token(Token = "0x40019BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float m_Width;

		[Token(Token = "0x40019BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private int m_CostModifier;

		[Token(Token = "0x40019C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private bool m_Bidirectional;

		[Token(Token = "0x40019C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[SerializeField]
		private bool m_AutoUpdatePosition;

		[Token(Token = "0x40019C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private int m_Area;

		[Token(Token = "0x40019C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private NavMeshLinkInstance m_LinkInstance;

		[Token(Token = "0x40019C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 m_LastPosition;

		[Token(Token = "0x40019C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Quaternion m_LastRotation;

		[Token(Token = "0x40019C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<NavMeshLink> s_Tracked;

		[Token(Token = "0x170003DF")]
		public int agentTypeID
		{
			[Token(Token = "0x6001903")]
			[Address(RVA = "0xD255E4", Offset = "0xD255E4", VA = "0xD255E4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001904")]
			[Address(RVA = "0xD255EC", Offset = "0xD255EC", VA = "0xD255EC")]
			set
			{
			}
		}

		[Token(Token = "0x170003E0")]
		public Vector3 startPoint
		{
			[Token(Token = "0x6001905")]
			[Address(RVA = "0xD25630", Offset = "0xD25630", VA = "0xD25630")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001906")]
			[Address(RVA = "0xD2563C", Offset = "0xD2563C", VA = "0xD2563C")]
			set
			{
			}
		}

		[Token(Token = "0x170003E1")]
		public Vector3 endPoint
		{
			[Token(Token = "0x6001907")]
			[Address(RVA = "0xD25664", Offset = "0xD25664", VA = "0xD25664")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001908")]
			[Address(RVA = "0xD25670", Offset = "0xD25670", VA = "0xD25670")]
			set
			{
			}
		}

		[Token(Token = "0x170003E2")]
		public float width
		{
			[Token(Token = "0x6001909")]
			[Address(RVA = "0xD25698", Offset = "0xD25698", VA = "0xD25698")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600190A")]
			[Address(RVA = "0xD256A0", Offset = "0xD256A0", VA = "0xD256A0")]
			set
			{
			}
		}

		[Token(Token = "0x170003E3")]
		public int costModifier
		{
			[Token(Token = "0x600190B")]
			[Address(RVA = "0xD256C4", Offset = "0xD256C4", VA = "0xD256C4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600190C")]
			[Address(RVA = "0xD256CC", Offset = "0xD256CC", VA = "0xD256CC")]
			set
			{
			}
		}

		[Token(Token = "0x170003E4")]
		public bool bidirectional
		{
			[Token(Token = "0x600190D")]
			[Address(RVA = "0xD256F0", Offset = "0xD256F0", VA = "0xD256F0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600190E")]
			[Address(RVA = "0xD256F8", Offset = "0xD256F8", VA = "0xD256F8")]
			set
			{
			}
		}

		[Token(Token = "0x170003E5")]
		public bool autoUpdate
		{
			[Token(Token = "0x600190F")]
			[Address(RVA = "0xD25720", Offset = "0xD25720", VA = "0xD25720")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001910")]
			[Address(RVA = "0xD25728", Offset = "0xD25728", VA = "0xD25728")]
			set
			{
			}
		}

		[Token(Token = "0x170003E6")]
		public int area
		{
			[Token(Token = "0x6001911")]
			[Address(RVA = "0xD257C8", Offset = "0xD257C8", VA = "0xD257C8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001912")]
			[Address(RVA = "0xD257D0", Offset = "0xD257D0", VA = "0xD257D0")]
			set
			{
			}
		}

		[Token(Token = "0x6001913")]
		[Address(RVA = "0xD257F4", Offset = "0xD257F4", VA = "0xD257F4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001914")]
		[Address(RVA = "0xD25C00", Offset = "0xD25C00", VA = "0xD25C00")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001915")]
		[Address(RVA = "0xD25610", Offset = "0xD25610", VA = "0xD25610")]
		public void UpdateLink()
		{
		}

		[Token(Token = "0x6001916")]
		[Address(RVA = "0xD25A2C", Offset = "0xD25A2C", VA = "0xD25A2C")]
		private static void AddTracking(NavMeshLink link)
		{
		}

		[Token(Token = "0x6001917")]
		[Address(RVA = "0xD25C60", Offset = "0xD25C60", VA = "0xD25C60")]
		private static void RemoveTracking(NavMeshLink link)
		{
		}

		[Token(Token = "0x6001918")]
		[Address(RVA = "0xD25730", Offset = "0xD25730", VA = "0xD25730")]
		private void SetAutoUpdate(bool value)
		{
		}

		[Token(Token = "0x6001919")]
		[Address(RVA = "0xD25874", Offset = "0xD25874", VA = "0xD25874")]
		private void AddLink()
		{
		}

		[Token(Token = "0x600191A")]
		[Address(RVA = "0xD25DC8", Offset = "0xD25DC8", VA = "0xD25DC8")]
		private bool HasTransformChanged()
		{
			return default(bool);
		}

		[Token(Token = "0x600191B")]
		[Address(RVA = "0xD25E8C", Offset = "0xD25E8C", VA = "0xD25E8C")]
		private void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x600191C")]
		[Address(RVA = "0xD25EAC", Offset = "0xD25EAC", VA = "0xD25EAC")]
		private static void UpdateTrackedInstances()
		{
		}

		[Token(Token = "0x600191D")]
		[Address(RVA = "0xD2603C", Offset = "0xD2603C", VA = "0xD2603C")]
		public NavMeshLink()
		{
		}
	}
	[Token(Token = "0x20004CE")]
	[AddComponentMenu("Navigation/NavMeshModifier", 32)]
	[HelpURL("https://github.com/Unity-Technologies/NavMeshComponents#documentation-draft")]
	[ExecuteInEditMode]
	public class NavMeshModifier : MonoBehaviour
	{
		[Token(Token = "0x40019C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_OverrideArea;

		[Token(Token = "0x40019C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int m_Area;

		[Token(Token = "0x40019C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool m_IgnoreFromBuild;

		[Token(Token = "0x40019CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<int> m_AffectedAgents;

		[Token(Token = "0x40019CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<NavMeshModifier> s_NavMeshModifiers;

		[Token(Token = "0x170003E7")]
		public bool overrideArea
		{
			[Token(Token = "0x600191F")]
			[Address(RVA = "0xD26180", Offset = "0xD26180", VA = "0xD26180")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001920")]
			[Address(RVA = "0xD26188", Offset = "0xD26188", VA = "0xD26188")]
			set
			{
			}
		}

		[Token(Token = "0x170003E8")]
		public int area
		{
			[Token(Token = "0x6001921")]
			[Address(RVA = "0xD26194", Offset = "0xD26194", VA = "0xD26194")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001922")]
			[Address(RVA = "0xD2619C", Offset = "0xD2619C", VA = "0xD2619C")]
			set
			{
			}
		}

		[Token(Token = "0x170003E9")]
		public bool ignoreFromBuild
		{
			[Token(Token = "0x6001923")]
			[Address(RVA = "0xD261A4", Offset = "0xD261A4", VA = "0xD261A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001924")]
			[Address(RVA = "0xD261AC", Offset = "0xD261AC", VA = "0xD261AC")]
			set
			{
			}
		}

		[Token(Token = "0x170003EA")]
		public static List<NavMeshModifier> activeModifiers
		{
			[Token(Token = "0x6001925")]
			[Address(RVA = "0xD261B8", Offset = "0xD261B8", VA = "0xD261B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001926")]
		[Address(RVA = "0xD26210", Offset = "0xD26210", VA = "0xD26210")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001927")]
		[Address(RVA = "0xD26324", Offset = "0xD26324", VA = "0xD26324")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0xD263A4", Offset = "0xD263A4", VA = "0xD263A4")]
		public bool AffectsAgentType(int agentTypeID)
		{
			return default(bool);
		}

		[Token(Token = "0x6001929")]
		[Address(RVA = "0xD2645C", Offset = "0xD2645C", VA = "0xD2645C")]
		public NavMeshModifier()
		{
		}
	}
	[Token(Token = "0x20004CF")]
	[HelpURL("https://github.com/Unity-Technologies/NavMeshComponents#documentation-draft")]
	[AddComponentMenu("Navigation/NavMeshModifierVolume", 31)]
	[ExecuteInEditMode]
	public class NavMeshModifierVolume : MonoBehaviour
	{
		[Token(Token = "0x40019CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Vector3 m_Size;

		[Token(Token = "0x40019CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Vector3 m_Center;

		[Token(Token = "0x40019CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int m_Area;

		[Token(Token = "0x40019CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private List<int> m_AffectedAgents;

		[Token(Token = "0x40019D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<NavMeshModifierVolume> s_NavMeshModifiers;

		[Token(Token = "0x170003EB")]
		public Vector3 size
		{
			[Token(Token = "0x600192B")]
			[Address(RVA = "0xD265A4", Offset = "0xD265A4", VA = "0xD265A4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600192C")]
			[Address(RVA = "0xD265B0", Offset = "0xD265B0", VA = "0xD265B0")]
			set
			{
			}
		}

		[Token(Token = "0x170003EC")]
		public Vector3 center
		{
			[Token(Token = "0x600192D")]
			[Address(RVA = "0xD265BC", Offset = "0xD265BC", VA = "0xD265BC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600192E")]
			[Address(RVA = "0xD265C8", Offset = "0xD265C8", VA = "0xD265C8")]
			set
			{
			}
		}

		[Token(Token = "0x170003ED")]
		public int area
		{
			[Token(Token = "0x600192F")]
			[Address(RVA = "0xD265D4", Offset = "0xD265D4", VA = "0xD265D4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001930")]
			[Address(RVA = "0xD265DC", Offset = "0xD265DC", VA = "0xD265DC")]
			set
			{
			}
		}

		[Token(Token = "0x170003EE")]
		public static List<NavMeshModifierVolume> activeModifiers
		{
			[Token(Token = "0x6001931")]
			[Address(RVA = "0xD265E4", Offset = "0xD265E4", VA = "0xD265E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001932")]
		[Address(RVA = "0xD2663C", Offset = "0xD2663C", VA = "0xD2663C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001933")]
		[Address(RVA = "0xD26750", Offset = "0xD26750", VA = "0xD26750")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001934")]
		[Address(RVA = "0xD267D0", Offset = "0xD267D0", VA = "0xD267D0")]
		public bool AffectsAgentType(int agentTypeID)
		{
			return default(bool);
		}

		[Token(Token = "0x6001935")]
		[Address(RVA = "0xD26888", Offset = "0xD26888", VA = "0xD26888")]
		public NavMeshModifierVolume()
		{
		}
	}
	[Token(Token = "0x20004D0")]
	public enum CollectObjects
	{
		[Token(Token = "0x40019D2")]
		All,
		[Token(Token = "0x40019D3")]
		Volume,
		[Token(Token = "0x40019D4")]
		Children
	}
	[Token(Token = "0x20004D1")]
	[HelpURL("https://github.com/Unity-Technologies/NavMeshComponents#documentation-draft")]
	[DefaultExecutionOrder(-102)]
	[AddComponentMenu("Navigation/NavMeshSurface", 30)]
	[ExecuteInEditMode]
	public class NavMeshSurface : MonoBehaviour
	{
		[Token(Token = "0x40019D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int m_AgentTypeID;

		[Token(Token = "0x40019D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private CollectObjects m_CollectObjects;

		[Token(Token = "0x40019D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Vector3 m_Size;

		[Token(Token = "0x40019D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private Vector3 m_Center;

		[Token(Token = "0x40019D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private LayerMask m_LayerMask;

		[Token(Token = "0x40019DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private NavMeshCollectGeometry m_UseGeometry;

		[Token(Token = "0x40019DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private int m_DefaultArea;

		[Token(Token = "0x40019DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		private bool m_IgnoreNavMeshAgent;

		[Token(Token = "0x40019DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[SerializeField]
		private bool m_IgnoreNavMeshObstacle;

		[Token(Token = "0x40019DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		[SerializeField]
		private bool m_OverrideTileSize;

		[Token(Token = "0x40019DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private int m_TileSize;

		[Token(Token = "0x40019E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private bool m_OverrideVoxelSize;

		[Token(Token = "0x40019E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float m_VoxelSize;

		[Token(Token = "0x40019E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		private bool m_BuildHeightMesh;

		[Token(Token = "0x40019E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[FormerlySerializedAs("m_BakedNavMeshData")]
		private NavMeshData m_NavMeshData;

		[Token(Token = "0x40019E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshDataInstance m_NavMeshDataInstance;

		[Token(Token = "0x40019E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 m_LastPosition;

		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion m_LastRotation;

		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly List<NavMeshSurface> s_NavMeshSurfaces;

		[Token(Token = "0x170003EF")]
		public int agentTypeID
		{
			[Token(Token = "0x6001937")]
			[Address(RVA = "0xD269E4", Offset = "0xD269E4", VA = "0xD269E4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001938")]
			[Address(RVA = "0xD269EC", Offset = "0xD269EC", VA = "0xD269EC")]
			set
			{
			}
		}

		[Token(Token = "0x170003F0")]
		public CollectObjects collectObjects
		{
			[Token(Token = "0x6001939")]
			[Address(RVA = "0xD269F4", Offset = "0xD269F4", VA = "0xD269F4")]
			get
			{
				return default(CollectObjects);
			}
			[Token(Token = "0x600193A")]
			[Address(RVA = "0xD269FC", Offset = "0xD269FC", VA = "0xD269FC")]
			set
			{
			}
		}

		[Token(Token = "0x170003F1")]
		public Vector3 size
		{
			[Token(Token = "0x600193B")]
			[Address(RVA = "0xD26A04", Offset = "0xD26A04", VA = "0xD26A04")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600193C")]
			[Address(RVA = "0xD26A10", Offset = "0xD26A10", VA = "0xD26A10")]
			set
			{
			}
		}

		[Token(Token = "0x170003F2")]
		public Vector3 center
		{
			[Token(Token = "0x600193D")]
			[Address(RVA = "0xD26A1C", Offset = "0xD26A1C", VA = "0xD26A1C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600193E")]
			[Address(RVA = "0xD26A28", Offset = "0xD26A28", VA = "0xD26A28")]
			set
			{
			}
		}

		[Token(Token = "0x170003F3")]
		public LayerMask layerMask
		{
			[Token(Token = "0x600193F")]
			[Address(RVA = "0xD26A34", Offset = "0xD26A34", VA = "0xD26A34")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6001940")]
			[Address(RVA = "0xD26A3C", Offset = "0xD26A3C", VA = "0xD26A3C")]
			set
			{
			}
		}

		[Token(Token = "0x170003F4")]
		public NavMeshCollectGeometry useGeometry
		{
			[Token(Token = "0x6001941")]
			[Address(RVA = "0xD26A44", Offset = "0xD26A44", VA = "0xD26A44")]
			get
			{
				return default(NavMeshCollectGeometry);
			}
			[Token(Token = "0x6001942")]
			[Address(RVA = "0xD26A4C", Offset = "0xD26A4C", VA = "0xD26A4C")]
			set
			{
			}
		}

		[Token(Token = "0x170003F5")]
		public int defaultArea
		{
			[Token(Token = "0x6001943")]
			[Address(RVA = "0xD26A54", Offset = "0xD26A54", VA = "0xD26A54")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001944")]
			[Address(RVA = "0xD26A5C", Offset = "0xD26A5C", VA = "0xD26A5C")]
			set
			{
			}
		}

		[Token(Token = "0x170003F6")]
		public bool ignoreNavMeshAgent
		{
			[Token(Token = "0x6001945")]
			[Address(RVA = "0xD26A64", Offset = "0xD26A64", VA = "0xD26A64")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001946")]
			[Address(RVA = "0xD26A6C", Offset = "0xD26A6C", VA = "0xD26A6C")]
			set
			{
			}
		}

		[Token(Token = "0x170003F7")]
		public bool ignoreNavMeshObstacle
		{
			[Token(Token = "0x6001947")]
			[Address(RVA = "0xD26A78", Offset = "0xD26A78", VA = "0xD26A78")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001948")]
			[Address(RVA = "0xD26A80", Offset = "0xD26A80", VA = "0xD26A80")]
			set
			{
			}
		}

		[Token(Token = "0x170003F8")]
		public bool overrideTileSize
		{
			[Token(Token = "0x6001949")]
			[Address(RVA = "0xD26A8C", Offset = "0xD26A8C", VA = "0xD26A8C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600194A")]
			[Address(RVA = "0xD26A94", Offset = "0xD26A94", VA = "0xD26A94")]
			set
			{
			}
		}

		[Token(Token = "0x170003F9")]
		public int tileSize
		{
			[Token(Token = "0x600194B")]
			[Address(RVA = "0xD26AA0", Offset = "0xD26AA0", VA = "0xD26AA0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600194C")]
			[Address(RVA = "0xD26AA8", Offset = "0xD26AA8", VA = "0xD26AA8")]
			set
			{
			}
		}

		[Token(Token = "0x170003FA")]
		public bool overrideVoxelSize
		{
			[Token(Token = "0x600194D")]
			[Address(RVA = "0xD26AB0", Offset = "0xD26AB0", VA = "0xD26AB0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600194E")]
			[Address(RVA = "0xD26AB8", Offset = "0xD26AB8", VA = "0xD26AB8")]
			set
			{
			}
		}

		[Token(Token = "0x170003FB")]
		public float voxelSize
		{
			[Token(Token = "0x600194F")]
			[Address(RVA = "0xD26AC4", Offset = "0xD26AC4", VA = "0xD26AC4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001950")]
			[Address(RVA = "0xD26ACC", Offset = "0xD26ACC", VA = "0xD26ACC")]
			set
			{
			}
		}

		[Token(Token = "0x170003FC")]
		public bool buildHeightMesh
		{
			[Token(Token = "0x6001951")]
			[Address(RVA = "0xD26AD4", Offset = "0xD26AD4", VA = "0xD26AD4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001952")]
			[Address(RVA = "0xD26ADC", Offset = "0xD26ADC", VA = "0xD26ADC")]
			set
			{
			}
		}

		[Token(Token = "0x170003FD")]
		public NavMeshData navMeshData
		{
			[Token(Token = "0x6001953")]
			[Address(RVA = "0xD26AE8", Offset = "0xD26AE8", VA = "0xD26AE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001954")]
			[Address(RVA = "0xD26AF0", Offset = "0xD26AF0", VA = "0xD26AF0")]
			set
			{
			}
		}

		[Token(Token = "0x170003FE")]
		public static List<NavMeshSurface> activeSurfaces
		{
			[Token(Token = "0x6001955")]
			[Address(RVA = "0xD26AF8", Offset = "0xD26AF8", VA = "0xD26AF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0xD26B50", Offset = "0xD26B50", VA = "0xD26B50")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0xD26F20", Offset = "0xD26F20", VA = "0xD26F20")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001958")]
		[Address(RVA = "0xD26DC4", Offset = "0xD26DC4", VA = "0xD26DC4")]
		public void AddData()
		{
		}

		[Token(Token = "0x6001959")]
		[Address(RVA = "0xD26F84", Offset = "0xD26F84", VA = "0xD26F84")]
		public void RemoveData()
		{
		}

		[Token(Token = "0x600195A")]
		[Address(RVA = "0xD2710C", Offset = "0xD2710C", VA = "0xD2710C")]
		public NavMeshBuildSettings GetBuildSettings()
		{
			return default(NavMeshBuildSettings);
		}

		[Token(Token = "0x600195B")]
		[Address(RVA = "0xD27280", Offset = "0xD27280", VA = "0xD27280")]
		public void BuildNavMesh()
		{
		}

		[Token(Token = "0x600195C")]
		[Address(RVA = "0xD284F8", Offset = "0xD284F8", VA = "0xD284F8")]
		public AsyncOperation UpdateNavMesh(NavMeshData data)
		{
			return null;
		}

		[Token(Token = "0x600195D")]
		[Address(RVA = "0xD26BAC", Offset = "0xD26BAC", VA = "0xD26BAC")]
		private static void Register(NavMeshSurface surface)
		{
		}

		[Token(Token = "0x600195E")]
		[Address(RVA = "0xD26FA4", Offset = "0xD26FA4", VA = "0xD26FA4")]
		private static void Unregister(NavMeshSurface surface)
		{
		}

		[Token(Token = "0x600195F")]
		[Address(RVA = "0xD28620", Offset = "0xD28620", VA = "0xD28620")]
		private static void UpdateActive()
		{
		}

		[Token(Token = "0x6001960")]
		[Address(RVA = "0xD28720", Offset = "0xD28720", VA = "0xD28720")]
		private void AppendModifierVolumes(ref List<NavMeshBuildSource> sources)
		{
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0xD274CC", Offset = "0xD274CC", VA = "0xD274CC")]
		private List<NavMeshBuildSource> CollectSources()
		{
			return null;
		}

		[Token(Token = "0x6001962")]
		[Address(RVA = "0xD27D14", Offset = "0xD27D14", VA = "0xD27D14")]
		private static Vector3 Abs(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001963")]
		[Address(RVA = "0xD28D54", Offset = "0xD28D54", VA = "0xD28D54")]
		private static Bounds GetWorldBounds(Matrix4x4 mat, Bounds bounds)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001964")]
		[Address(RVA = "0xD27D24", Offset = "0xD27D24", VA = "0xD27D24")]
		private Bounds CalculateWorldBounds(List<NavMeshBuildSource> sources)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001965")]
		[Address(RVA = "0xD28F84", Offset = "0xD28F84", VA = "0xD28F84")]
		private bool HasTransformChanged()
		{
			return default(bool);
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0xD286EC", Offset = "0xD286EC", VA = "0xD286EC")]
		private void UpdateDataIfTransformChanged()
		{
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0xD29048", Offset = "0xD29048", VA = "0xD29048")]
		public NavMeshSurface()
		{
		}
	}
}
namespace Qiyi.UI.InputField
{
	[Token(Token = "0x20004D3")]
	public abstract class AbstractInputField : IVrInputField
	{
		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ICaret _caret;

		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IInputEventProcessor _inputEventProcessor;

		[Token(Token = "0x40019EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITextComponentWrapper _editableText;

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IInputFieldController _controller;

		[Token(Token = "0x40019F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color _selectionColor;

		[Token(Token = "0x40019F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Color _defaultColor;

		[Token(Token = "0x40019F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool _interactive;

		[Token(Token = "0x170003FF")]
		protected virtual ITextComponentWrapper EditableText
		{
			[Token(Token = "0x600196F")]
			[Address(RVA = "0xD2942C", Offset = "0xD2942C", VA = "0xD2942C", Slot = "14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000400")]
		protected virtual IInputFieldController InputFieldController
		{
			[Token(Token = "0x6001970")]
			[Address(RVA = "0xD29434", Offset = "0xD29434", VA = "0xD29434", Slot = "15")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000401")]
		public virtual Color SelectionColor
		{
			[Token(Token = "0x6001971")]
			[Address(RVA = "0xD2943C", Offset = "0xD2943C", VA = "0xD2943C", Slot = "16")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001972")]
			[Address(RVA = "0xD29448", Offset = "0xD29448", VA = "0xD29448", Slot = "17")]
			set
			{
			}
		}

		[Token(Token = "0x17000402")]
		public virtual Color DefaultColor
		{
			[Token(Token = "0x6001973")]
			[Address(RVA = "0xD29454", Offset = "0xD29454", VA = "0xD29454", Slot = "18")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001974")]
			[Address(RVA = "0xD29460", Offset = "0xD29460", VA = "0xD29460", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x17000403")]
		public virtual string TextValue
		{
			[Token(Token = "0x6001975")]
			[Address(RVA = "0xD2946C", Offset = "0xD2946C", VA = "0xD2946C", Slot = "20")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001976")]
			[Address(RVA = "0xD29510", Offset = "0xD29510", VA = "0xD29510", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x17000404")]
		public string text
		{
			[Token(Token = "0x6001977")]
			[Address(RVA = "0xD2963C", Offset = "0xD2963C", VA = "0xD2963C", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001978")]
			[Address(RVA = "0xD2964C", Offset = "0xD2964C", VA = "0xD2964C", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000405")]
		protected virtual ICaret Caret
		{
			[Token(Token = "0x6001979")]
			[Address(RVA = "0xD2965C", Offset = "0xD2965C", VA = "0xD2965C", Slot = "22")]
			get
			{
				return null;
			}
			[Token(Token = "0x600197A")]
			[Address(RVA = "0xD29664", Offset = "0xD29664", VA = "0xD29664", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0xD2971C", Offset = "0xD2971C", VA = "0xD2971C")]
		protected AbstractInputField(ICaret caret, IInputEventProcessor inputEventProcessor, IInputFieldController controller, ITextComponentWrapper text)
		{
		}

		[Token(Token = "0x600197C")]
		[Address(RVA = "0xD29770", Offset = "0xD29770", VA = "0xD29770", Slot = "24")]
		public virtual void DrawCaretOrSelection(ITextComponentWrapper text)
		{
		}

		[Token(Token = "0x600197D")]
		protected abstract void DrawSelection(ICaret caret, Color color, ITextComponentWrapper text, UnityEngine.Vector2 offset);

		[Token(Token = "0x600197E")]
		protected abstract void DrawCaret(ICaret caret, Color color, ITextComponentWrapper text, UnityEngine.Vector2 offset);

		[Token(Token = "0x600197F")]
		[Address(RVA = "0xD29A44", Offset = "0xD29A44", VA = "0xD29A44", Slot = "27")]
		public virtual void ProcessEvent(Event evt)
		{
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0xD29C60", Offset = "0xD29C60", VA = "0xD29C60", Slot = "28")]
		public virtual void ActivateInputField()
		{
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0xD29D34", Offset = "0xD29D34", VA = "0xD29D34", Slot = "29")]
		public virtual void DeactivateInputField()
		{
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0xD29DF0", Offset = "0xD29DF0", VA = "0xD29DF0", Slot = "30")]
		public virtual void FinishInput()
		{
		}

		[Token(Token = "0x6001983")]
		protected abstract string ProcessText(ITextComponentWrapper text, ICaret caret);

		[Token(Token = "0x6001984")]
		[Address(RVA = "0xD29EB0", Offset = "0xD29EB0", VA = "0xD29EB0", Slot = "32")]
		public virtual void UpdateText()
		{
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0xD2A054", Offset = "0xD2A054", VA = "0xD2A054", Slot = "33")]
		public virtual bool IsInteractive()
		{
			return default(bool);
		}

		[Token(Token = "0x6001986")]
		public abstract void OnPointerDown(PointerEventData eventData);

		[Token(Token = "0x6001987")]
		public abstract void OnDrag(PointerEventData eventData);
	}
	[Token(Token = "0x20004D4")]
	public class BaseTextProcessor : IInputEventProcessor
	{
		[Token(Token = "0x40019F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private StringBuilder _processedText;

		[Token(Token = "0x40019F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ICaretNavigator _caretNavigator;

		[Token(Token = "0x17000406")]
		private static string _clipboard
		{
			[Token(Token = "0x6001988")]
			[Address(RVA = "0xD2A05C", Offset = "0xD2A05C", VA = "0xD2A05C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001989")]
			[Address(RVA = "0xD2A064", Offset = "0xD2A064", VA = "0xD2A064")]
			set
			{
			}
		}

		[Token(Token = "0x17000407")]
		public string TextValue
		{
			[Token(Token = "0x600198A")]
			[Address(RVA = "0xD2A06C", Offset = "0xD2A06C", VA = "0xD2A06C", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x600198B")]
			[Address(RVA = "0xD2A08C", Offset = "0xD2A08C", VA = "0xD2A08C", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x600198C")]
		[Address(RVA = "0xD2A0FC", Offset = "0xD2A0FC", VA = "0xD2A0FC")]
		public BaseTextProcessor(StringBuilder textToProcess, ICaretNavigator receiver)
		{
		}

		[Token(Token = "0x600198D")]
		[Address(RVA = "0xD2A128", Offset = "0xD2A128", VA = "0xD2A128", Slot = "4")]
		public bool ProcessEvent(Event keyEvent, int caretIndex, int selectionIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x600198E")]
		[Address(RVA = "0xD2AE14", Offset = "0xD2AE14", VA = "0xD2AE14")]
		private bool HasSelection(int index, int selectionIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x600198F")]
		[Address(RVA = "0xD2AE20", Offset = "0xD2AE20", VA = "0xD2AE20", Slot = "8")]
		protected virtual bool HandleInputChar(StringBuilder text, int index, int selectionIndex, char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6001990")]
		[Address(RVA = "0xD2A3F4", Offset = "0xD2A3F4", VA = "0xD2A3F4")]
		private bool Ctrl(Event evt)
		{
			return default(bool);
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0xD2A468", Offset = "0xD2A468", VA = "0xD2A468")]
		private bool Shift(Event evt)
		{
			return default(bool);
		}

		[Token(Token = "0x6001992")]
		[Address(RVA = "0xD2A444", Offset = "0xD2A444", VA = "0xD2A444")]
		private bool Alt(Event evt)
		{
			return default(bool);
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0xD2A680", Offset = "0xD2A680", VA = "0xD2A680", Slot = "7")]
		public void SelectAll()
		{
		}

		[Token(Token = "0x6001994")]
		[Address(RVA = "0xD2A48C", Offset = "0xD2A48C", VA = "0xD2A48C")]
		private void Backspace(StringBuilder text, int caretIndex, int selectionIndex)
		{
		}

		[Token(Token = "0x6001995")]
		[Address(RVA = "0xD2AE90", Offset = "0xD2AE90", VA = "0xD2AE90")]
		private void Delete(StringBuilder text, int start, int end)
		{
		}

		[Token(Token = "0x6001996")]
		[Address(RVA = "0xD2A4B4", Offset = "0xD2A4B4", VA = "0xD2A4B4")]
		private void ForwardSpace(StringBuilder text, int caretIndex, int selectionIndex)
		{
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0xD2B088", Offset = "0xD2B088", VA = "0xD2B088")]
		private void Append(char c, int index)
		{
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0xD2A514", Offset = "0xD2A514", VA = "0xD2A514")]
		private void MoveTextStart(bool shift)
		{
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0xD2A5C0", Offset = "0xD2A5C0", VA = "0xD2A5C0")]
		private void MoveTextEnd(bool shift)
		{
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0xD2A7EC", Offset = "0xD2A7EC", VA = "0xD2A7EC")]
		private string Copy(StringBuilder text, int start, int end)
		{
			return null;
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0xD2A7A4", Offset = "0xD2A7A4", VA = "0xD2A7A4")]
		private void Cut(StringBuilder text, int start, int end)
		{
		}

		[Token(Token = "0x600199C")]
		[Address(RVA = "0xD2A894", Offset = "0xD2A894", VA = "0xD2A894")]
		private void Paste(StringBuilder text, int start, int end)
		{
		}

		[Token(Token = "0x600199D")]
		[Address(RVA = "0xD2AFB0", Offset = "0xD2AFB0", VA = "0xD2AFB0")]
		private void Insert(StringBuilder text, char insert, int start)
		{
		}

		[Token(Token = "0x600199E")]
		[Address(RVA = "0xD2AA6C", Offset = "0xD2AA6C", VA = "0xD2AA6C")]
		private void MoveRight(int index, int selectionIndex, bool shift)
		{
		}

		[Token(Token = "0x600199F")]
		[Address(RVA = "0xD2A92C", Offset = "0xD2A92C", VA = "0xD2A92C")]
		private void MoveLeft(int index, int selectionIndex, bool shift)
		{
		}

		[Token(Token = "0x60019A0")]
		[Address(RVA = "0xD2ABA4", Offset = "0xD2ABA4", VA = "0xD2ABA4")]
		private void MoveUp(int index, int selectionIndex, bool shift)
		{
		}

		[Token(Token = "0x60019A1")]
		[Address(RVA = "0xD2ACDC", Offset = "0xD2ACDC", VA = "0xD2ACDC")]
		private void MoveDown(int index, int selectionIndex, bool shift)
		{
		}
	}
	[Token(Token = "0x20004D5")]
	public class CaretNavigator : ICaretNavigator
	{
		[Token(Token = "0x40019F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ICaret _caret;

		[Token(Token = "0x40019F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ITextComponentWrapper _textWrapper;

		[Token(Token = "0x40019F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IVrInputField _inputField;

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0xD2B158", Offset = "0xD2B158", VA = "0xD2B158")]
		public CaretNavigator(ICaret caret, ITextComponentWrapper text, IVrInputField inputField)
		{
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0xD2B194", Offset = "0xD2B194", VA = "0xD2B194", Slot = "4")]
		public void MoveCaretTo(int index, bool withSelection)
		{
		}

		[Token(Token = "0x60019A4")]
		[Address(RVA = "0xD2B2DC", Offset = "0xD2B2DC", VA = "0xD2B2DC", Slot = "7")]
		public void MoveDown(bool goToLastChar, bool withSelection)
		{
		}

		[Token(Token = "0x60019A5")]
		[Address(RVA = "0xD2B424", Offset = "0xD2B424", VA = "0xD2B424", Slot = "5")]
		public void MoveLeft(bool withSelection)
		{
		}

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0xD2B4DC", Offset = "0xD2B4DC", VA = "0xD2B4DC", Slot = "6")]
		public void MoveRight(bool withSelection)
		{
		}

		[Token(Token = "0x60019A7")]
		[Address(RVA = "0xD2B594", Offset = "0xD2B594", VA = "0xD2B594", Slot = "8")]
		public void MoveUp(bool goToFirstChar, bool withSelection)
		{
		}
	}
	[Token(Token = "0x20004D6")]
	[RequireComponent(typeof(RectTransform))]
	[RequireComponent(typeof(LayoutElement))]
	[RequireComponent(typeof(CanvasRenderer))]
	public class DefaultCaret : MonoBehaviour, ICaret
	{
		[Token(Token = "0x20004D7")]
		[CompilerGenerated]
		private sealed class <CaretBlink>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DefaultCaret <>4__this;

			[Token(Token = "0x4001A03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <timer>5__2;

			[Token(Token = "0x1700040A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60019BF")]
				[Address(RVA = "0xD2C448", Offset = "0xD2C448", VA = "0xD2C448", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700040B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60019C1")]
				[Address(RVA = "0xD2C490", Offset = "0xD2C490", VA = "0xD2C490", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60019BC")]
			[Address(RVA = "0xD2C2DC", Offset = "0xD2C2DC", VA = "0xD2C2DC")]
			[DebuggerHidden]
			public <CaretBlink>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x60019BD")]
			[Address(RVA = "0xD2C314", Offset = "0xD2C314", VA = "0xD2C314", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60019BE")]
			[Address(RVA = "0xD2C318", Offset = "0xD2C318", VA = "0xD2C318", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60019C0")]
			[Address(RVA = "0xD2C450", Offset = "0xD2C450", VA = "0xD2C450", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40019F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Mesh _mesh;

		[Token(Token = "0x40019FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _selectionAnchorIndex;

		[Token(Token = "0x40019FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _index;

		[Token(Token = "0x40019FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _isVisible;

		[Token(Token = "0x40019FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool _isVisibleTmp;

		[Token(Token = "0x40019FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Coroutine _blinkCoroutine;

		[Token(Token = "0x17000408")]
		public IInputFieldController InputFieldController
		{
			[Token(Token = "0x60019A9")]
			[Address(RVA = "0xD2B6E4", Offset = "0xD2B6E4", VA = "0xD2B6E4", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60019A8")]
			[Address(RVA = "0xD2B6DC", Offset = "0xD2B6DC", VA = "0xD2B6DC", Slot = "5")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000409")]
		public CanvasRenderer CaretRenderer
		{
			[Token(Token = "0x60019AD")]
			[Address(RVA = "0xD2B964", Offset = "0xD2B964", VA = "0xD2B964")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019AA")]
		[Address(RVA = "0xD2B6EC", Offset = "0xD2B6EC", VA = "0xD2B6EC")]
		private void Start()
		{
		}

		[Token(Token = "0x60019AB")]
		[Address(RVA = "0xD2B9AC", Offset = "0xD2B9AC", VA = "0xD2B9AC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0xD2BA2C", Offset = "0xD2BA2C", VA = "0xD2BA2C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0xD2BAE8", Offset = "0xD2BAE8", VA = "0xD2BAE8", Slot = "6")]
		public void ActivateCaret()
		{
		}

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0xD2BB80", Offset = "0xD2BB80", VA = "0xD2BB80", Slot = "7")]
		public void DeactivateCaret()
		{
		}

		[Token(Token = "0x60019B0")]
		[Address(RVA = "0xD2B9B0", Offset = "0xD2B9B0", VA = "0xD2B9B0", Slot = "11")]
		public void DestroyCaret()
		{
		}

		[Token(Token = "0x60019B1")]
		[Address(RVA = "0xD2BC3C", Offset = "0xD2BC3C", VA = "0xD2BC3C")]
		private bool HasSelection()
		{
			return default(bool);
		}

		[Token(Token = "0x60019B2")]
		[Address(RVA = "0xD2BC4C", Offset = "0xD2BC4C", VA = "0xD2BC4C", Slot = "9")]
		public int GetIndex()
		{
			return default(int);
		}

		[Token(Token = "0x60019B3")]
		[Address(RVA = "0xD2BC54", Offset = "0xD2BC54", VA = "0xD2BC54", Slot = "13")]
		public void MoveTo(int index, bool withSelection)
		{
		}

		[Token(Token = "0x60019B4")]
		[Address(RVA = "0xD2BC7C", Offset = "0xD2BC7C", VA = "0xD2BC7C")]
		private void SetupCursorVertsPositions(ref UIVertex[] verts, Rect drawRect)
		{
		}

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0xD2BD94", Offset = "0xD2BD94", VA = "0xD2BD94", Slot = "12")]
		public bool IsVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0xD2BDAC", Offset = "0xD2BDAC", VA = "0xD2BDAC", Slot = "8")]
		public void Draw(Rect drawRect, Color color, VertexHelper helper)
		{
		}

		[Token(Token = "0x60019B7")]
		[Address(RVA = "0xD2BEA8", Offset = "0xD2BEA8", VA = "0xD2BEA8")]
		private void GenerateCursorOrSelection(VertexHelper helper, Rect drawRect, Color color)
		{
		}

		[Token(Token = "0x60019B8")]
		[Address(RVA = "0xD2B880", Offset = "0xD2B880", VA = "0xD2B880")]
		private void AlignPosition(RectTransform textTransform, RectTransform caretTransform)
		{
		}

		[Token(Token = "0x60019B9")]
		[Address(RVA = "0xD2BB18", Offset = "0xD2BB18", VA = "0xD2BB18")]
		[IteratorStateMachine(typeof(<CaretBlink>d__26))]
		private IEnumerator CaretBlink()
		{
			return null;
		}

		[Token(Token = "0x60019BA")]
		[Address(RVA = "0xD2C304", Offset = "0xD2C304", VA = "0xD2C304", Slot = "10")]
		public int GetSelectionIndex()
		{
			return default(int);
		}

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0xD2C30C", Offset = "0xD2C30C", VA = "0xD2C30C")]
		public DefaultCaret()
		{
		}
	}
	[Token(Token = "0x20004D8")]
	public class EditableText : ITextComponentWrapper
	{
		[Token(Token = "0x4001A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Text _textComponent;

		[Token(Token = "0x4001A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextGenerator _rawTextGenerator;

		[Token(Token = "0x1700040C")]
		private TextGenerator DisplayedTextGenerator
		{
			[Token(Token = "0x60019C2")]
			[Address(RVA = "0xD2C498", Offset = "0xD2C498", VA = "0xD2C498")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700040D")]
		private TextGenerator RawTextGenerator
		{
			[Token(Token = "0x60019C3")]
			[Address(RVA = "0xD2C4B4", Offset = "0xD2C4B4", VA = "0xD2C4B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700040E")]
		public Rect DisplayRect
		{
			[Token(Token = "0x60019C5")]
			[Address(RVA = "0xD2C54C", Offset = "0xD2C54C", VA = "0xD2C54C", Slot = "5")]
			get
			{
				return default(Rect);
			}
		}

		[Token(Token = "0x1700040F")]
		public int DisplayedTextLength
		{
			[Token(Token = "0x60019C6")]
			[Address(RVA = "0xD2C574", Offset = "0xD2C574", VA = "0xD2C574", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000410")]
		public int LineCount
		{
			[Token(Token = "0x60019C7")]
			[Address(RVA = "0xD2C5A4", Offset = "0xD2C5A4", VA = "0xD2C5A4", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0xD2C520", Offset = "0xD2C520", VA = "0xD2C520")]
		public EditableText(Text text, TextGenerator generator)
		{
		}

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0xD2C5C0", Offset = "0xD2C5C0", VA = "0xD2C5C0", Slot = "4")]
		public UnityEngine.Vector2 MousePositionInTextRect(PointerEventData eventData)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0xD2C67C", Offset = "0xD2C67C", VA = "0xD2C67C", Slot = "12")]
		public void Populate(string text, GameObject context)
		{
		}

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0xD2C7B0", Offset = "0xD2C7B0", VA = "0xD2C7B0", Slot = "14")]
		public UnityEngine.Vector2 CursorPositionAt(int relativeIndex)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0xD2C904", Offset = "0xD2C904", VA = "0xD2C904", Slot = "13")]
		public float CharWidth(int index)
		{
			return default(float);
		}

		[Token(Token = "0x60019CC")]
		[Address(RVA = "0xD2C9C8", Offset = "0xD2C9C8", VA = "0xD2C9C8")]
		private UnityEngine.Vector2 RoundedTextPivotLocalPosition(Text textComponent)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60019CD")]
		[Address(RVA = "0xD2CB2C", Offset = "0xD2CB2C", VA = "0xD2CB2C")]
		private int LineFromPosition(UnityEngine.Vector2 pos, TextGenerator generator)
		{
			return default(int);
		}

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0xD2CD24", Offset = "0xD2CD24", VA = "0xD2CD24", Slot = "18")]
		public int RelativeIndexFromPosition(UnityEngine.Vector2 pos)
		{
			return default(int);
		}

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0xD2CFE8", Offset = "0xD2CFE8", VA = "0xD2CFE8", Slot = "10")]
		public int LineEndIndex(int line)
		{
			return default(int);
		}

		[Token(Token = "0x60019D0")]
		[Address(RVA = "0xD2D158", Offset = "0xD2D158", VA = "0xD2D158", Slot = "11")]
		public int LineStartIndex(int line)
		{
			return default(int);
		}

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0xD2D2B4", Offset = "0xD2D2B4", VA = "0xD2D2B4", Slot = "8")]
		public float LineHeight(int line)
		{
			return default(float);
		}

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0xD2D39C", Offset = "0xD2D39C", VA = "0xD2D39C", Slot = "9")]
		public float LineTop(int line)
		{
			return default(float);
		}

		[Token(Token = "0x60019D3")]
		[Address(RVA = "0xD2D460", Offset = "0xD2D460", VA = "0xD2D460", Slot = "15")]
		public UnityEngine.Vector2 CaretOffset()
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60019D4")]
		[Address(RVA = "0xD2D468", Offset = "0xD2D468", VA = "0xD2D468", Slot = "17")]
		public int GetLineByCharIndex(int caretIndex)
		{
			return default(int);
		}

		[Token(Token = "0x60019D5")]
		[Address(RVA = "0xD2D584", Offset = "0xD2D584", VA = "0xD2D584", Slot = "19")]
		public int LineDownIndex(bool goToLastChar, int index)
		{
			return default(int);
		}

		[Token(Token = "0x60019D6")]
		[Address(RVA = "0xD2D7FC", Offset = "0xD2D7FC", VA = "0xD2D7FC", Slot = "20")]
		public int LineUpIndex(bool goToFirstChar, int index)
		{
			return default(int);
		}

		[Token(Token = "0x60019D7")]
		[Address(RVA = "0xD2D9BC", Offset = "0xD2D9BC", VA = "0xD2D9BC", Slot = "16")]
		public void UpdateDisplayText(string text)
		{
		}
	}
	[Token(Token = "0x20004D9")]
	public interface ICaret
	{
		[Token(Token = "0x17000411")]
		IInputFieldController InputFieldController
		{
			[Token(Token = "0x60019D8")]
			get;
			[Token(Token = "0x60019D9")]
			set;
		}

		[Token(Token = "0x60019DA")]
		void ActivateCaret();

		[Token(Token = "0x60019DB")]
		void DeactivateCaret();

		[Token(Token = "0x60019DC")]
		void Draw(Rect drawRect, Color color, VertexHelper helper);

		[Token(Token = "0x60019DD")]
		int GetIndex();

		[Token(Token = "0x60019DE")]
		int GetSelectionIndex();

		[Token(Token = "0x60019DF")]
		void DestroyCaret();

		[Token(Token = "0x60019E0")]
		bool IsVisible();

		[Token(Token = "0x60019E1")]
		void MoveTo(int index, bool withSelection);
	}
	[Token(Token = "0x20004DA")]
	public interface ICaretNavigator
	{
		[Token(Token = "0x60019E2")]
		void MoveCaretTo(int index, bool withSelection);

		[Token(Token = "0x60019E3")]
		void MoveLeft(bool withSelection);

		[Token(Token = "0x60019E4")]
		void MoveRight(bool withSelection);

		[Token(Token = "0x60019E5")]
		void MoveDown(bool goToLastChar, bool withSelection);

		[Token(Token = "0x60019E6")]
		void MoveUp(bool goToFistChar, bool withSelection);
	}
	[Token(Token = "0x20004DB")]
	public interface IInputEventProcessor
	{
		[Token(Token = "0x17000412")]
		string TextValue
		{
			[Token(Token = "0x60019E9")]
			get;
			[Token(Token = "0x60019E8")]
			set;
		}

		[Token(Token = "0x60019E7")]
		bool ProcessEvent(Event keyEvent, int caretIndex, int selectionIndex);

		[Token(Token = "0x60019EA")]
		void SelectAll();
	}
	[Token(Token = "0x20004DC")]
	public interface IInputFieldController
	{
		[Token(Token = "0x60019EB")]
		void MarkGeometryAsDirty();

		[Token(Token = "0x60019EC")]
		void OnEndInput(string text);

		[Token(Token = "0x60019ED")]
		void UpdateDisplayText(string text);

		[Token(Token = "0x60019EE")]
		void PopulateText(string text);
	}
	[Token(Token = "0x20004DD")]
	public interface ITextComponentWrapper
	{
		[Token(Token = "0x17000413")]
		Rect DisplayRect
		{
			[Token(Token = "0x60019F0")]
			get;
		}

		[Token(Token = "0x17000414")]
		int DisplayedTextLength
		{
			[Token(Token = "0x60019F1")]
			get;
		}

		[Token(Token = "0x17000415")]
		int LineCount
		{
			[Token(Token = "0x60019F2")]
			get;
		}

		[Token(Token = "0x60019EF")]
		UnityEngine.Vector2 MousePositionInTextRect(PointerEventData eventData);

		[Token(Token = "0x60019F3")]
		float LineHeight(int line);

		[Token(Token = "0x60019F4")]
		float LineTop(int line);

		[Token(Token = "0x60019F5")]
		int LineEndIndex(int line);

		[Token(Token = "0x60019F6")]
		int LineStartIndex(int line);

		[Token(Token = "0x60019F7")]
		void Populate(string text, GameObject context);

		[Token(Token = "0x60019F8")]
		float CharWidth(int index);

		[Token(Token = "0x60019F9")]
		UnityEngine.Vector2 CursorPositionAt(int relativeIndex);

		[Token(Token = "0x60019FA")]
		UnityEngine.Vector2 CaretOffset();

		[Token(Token = "0x60019FB")]
		void UpdateDisplayText(string text);

		[Token(Token = "0x60019FC")]
		int GetLineByCharIndex(int index);

		[Token(Token = "0x60019FD")]
		int RelativeIndexFromPosition(UnityEngine.Vector2 position);

		[Token(Token = "0x60019FE")]
		int LineDownIndex(bool goToLastChar, int currentIndex);

		[Token(Token = "0x60019FF")]
		int LineUpIndex(bool goToFirstChar, int currentIndex);
	}
	[Token(Token = "0x20004DE")]
	public interface IVrInputField
	{
		[Token(Token = "0x17000416")]
		string TextValue
		{
			[Token(Token = "0x6001A00")]
			get;
			[Token(Token = "0x6001A01")]
			set;
		}

		[Token(Token = "0x17000417")]
		[Obsolete("use TextValue property instead.")]
		string text
		{
			[Token(Token = "0x6001A02")]
			get;
			[Token(Token = "0x6001A03")]
			set;
		}

		[Token(Token = "0x6001A04")]
		void ProcessEvent(Event evt);

		[Token(Token = "0x6001A05")]
		void ActivateInputField();

		[Token(Token = "0x6001A06")]
		void DeactivateInputField();

		[Token(Token = "0x6001A07")]
		void FinishInput();

		[Token(Token = "0x6001A08")]
		void UpdateText();

		[Token(Token = "0x6001A09")]
		bool IsInteractive();
	}
	[Token(Token = "0x20004DF")]
	public class MultiLineInputFieldImpl : AbstractInputField
	{
		[Token(Token = "0x4001A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Color _selectionColor;

		[Token(Token = "0x4001A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int _drawStart;

		[Token(Token = "0x4001A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int _drawEnd;

		[Token(Token = "0x6001A0A")]
		[Address(RVA = "0xD2D9E0", Offset = "0xD2D9E0", VA = "0xD2D9E0")]
		public MultiLineInputFieldImpl(ICaret caret, IInputEventProcessor inputEventProcessor, IInputFieldController controller, ITextComponentWrapper text)
		{
		}

		[Token(Token = "0x6001A0B")]
		[Address(RVA = "0xD2DA38", Offset = "0xD2DA38", VA = "0xD2DA38", Slot = "31")]
		protected override string ProcessText(ITextComponentWrapper text, ICaret caret)
		{
			return null;
		}

		[Token(Token = "0x6001A0C")]
		[Address(RVA = "0xD2E35C", Offset = "0xD2E35C", VA = "0xD2E35C", Slot = "25")]
		protected override void DrawSelection(ICaret caret, Color color, ITextComponentWrapper text, UnityEngine.Vector2 offset)
		{
		}

		[Token(Token = "0x6001A0D")]
		[Address(RVA = "0xD2EF6C", Offset = "0xD2EF6C", VA = "0xD2EF6C", Slot = "26")]
		protected override void DrawCaret(ICaret caret, Color color, ITextComponentWrapper text, UnityEngine.Vector2 offset)
		{
		}

		[Token(Token = "0x6001A0E")]
		[Address(RVA = "0xD2E6E0", Offset = "0xD2E6E0", VA = "0xD2E6E0")]
		private List<Rect> CalculateSelectionRects(ICaret caret, ITextComponentWrapper text, UnityEngine.Vector2 offset)
		{
			return null;
		}

		[Token(Token = "0x6001A0F")]
		[Address(RVA = "0xD2F420", Offset = "0xD2F420", VA = "0xD2F420")]
		private Rect HightedLineRect(int startIndex, int endIndex, float height, ITextComponentWrapper text)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001A10")]
		[Address(RVA = "0xD2F5F8", Offset = "0xD2F5F8", VA = "0xD2F5F8", Slot = "34")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001A11")]
		[Address(RVA = "0xD2F804", Offset = "0xD2F804", VA = "0xD2F804", Slot = "35")]
		public override void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001A12")]
		[Address(RVA = "0xD2F25C", Offset = "0xD2F25C", VA = "0xD2F25C")]
		private Rect CalculateCaretDrawRect(ITextComponentWrapper text, UnityEngine.Vector2 offset, int relativeIndex)
		{
			return default(Rect);
		}
	}
	[Token(Token = "0x20004E0")]
	internal static class SetPropertyUtility
	{
		[Token(Token = "0x6001A13")]
		[Address(RVA = "0xD2FE94", Offset = "0xD2FE94", VA = "0xD2FE94")]
		public static bool SetColor(ref Color currentValue, Color newValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A14")]
		public static bool SetStruct<T>(ref T currentValue, T newValue) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x6001A15")]
		public static bool SetClass<T>(ref T currentValue, T newValue) where T : class
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004E1")]
	public class SingleLineInputProcessor : BaseTextProcessor
	{
		[Token(Token = "0x6001A16")]
		[Address(RVA = "0xD2FEDC", Offset = "0xD2FEDC", VA = "0xD2FEDC")]
		public SingleLineInputProcessor(StringBuilder textToProcess, ICaretNavigator receiver)
		{
		}

		[Token(Token = "0x6001A17")]
		[Address(RVA = "0xD2FF08", Offset = "0xD2FF08", VA = "0xD2FF08", Slot = "8")]
		protected override bool HandleInputChar(StringBuilder text, int index, int selectionIndex, char c)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004E2")]
	public class VrInputField : Selectable, IVrInputField, ICanvasElement, IUpdateSelectedHandler, IEventSystemHandler, IInputFieldController, IDragHandler, ISelectHandler, IDeselectHandler, IPointerClickHandler
	{
		[Token(Token = "0x20004E3")]
		private enum LineType
		{
			[Token(Token = "0x4001A16")]
			SingleLine,
			[Token(Token = "0x4001A17")]
			MultiLine
		}

		[Serializable]
		[Token(Token = "0x20004E4")]
		public class OnValueChangedEvent : UnityEvent<string>
		{
			[Token(Token = "0x6001A40")]
			[Address(RVA = "0xD3131C", Offset = "0xD3131C", VA = "0xD3131C")]
			public OnValueChangedEvent()
			{
			}
		}

		[Token(Token = "0x4001A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string ReginFormat_Num;

		[Token(Token = "0x4001A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private Text _textComponent;

		[Token(Token = "0x4001A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private GameObject _placeHolder;

		[Token(Token = "0x4001A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private Color _selectionColor;

		[Token(Token = "0x4001A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private LineType _lineType;

		[Token(Token = "0x4001A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		private int _characterLimit;

		[Token(Token = "0x4001A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private SGImeInputType sgImeInputType;

		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		private SGImeTextType sgImeTextType;

		[Token(Token = "0x4001A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private string _regexFormat;

		[Token(Token = "0x4001A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public OnValueChangedEvent onValueChanged;

		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AbstractInputField _impl;

		[Token(Token = "0x4001A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private ITextComponentWrapper _editableText;

		[Token(Token = "0x17000418")]
		public int CharacterLimit
		{
			[Token(Token = "0x6001A18")]
			[Address(RVA = "0xD2FF3C", Offset = "0xD2FF3C", VA = "0xD2FF3C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A19")]
			[Address(RVA = "0xD2FF44", Offset = "0xD2FF44", VA = "0xD2FF44")]
			set
			{
			}
		}

		[Token(Token = "0x17000419")]
		public string RegexFormat
		{
			[Token(Token = "0x6001A1A")]
			[Address(RVA = "0xD2FFD4", Offset = "0xD2FFD4", VA = "0xD2FFD4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A1B")]
			[Address(RVA = "0xD2FFDC", Offset = "0xD2FFDC", VA = "0xD2FFDC")]
			set
			{
			}
		}

		[Token(Token = "0x1700041A")]
		private AbstractInputField Impl
		{
			[Token(Token = "0x6001A1C")]
			[Address(RVA = "0xD2FFE4", Offset = "0xD2FFE4", VA = "0xD2FFE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700041B")]
		public string TextValue
		{
			[Token(Token = "0x6001A1D")]
			[Address(RVA = "0xD3029C", Offset = "0xD3029C", VA = "0xD3029C", Slot = "39")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A1E")]
			[Address(RVA = "0xD302D4", Offset = "0xD302D4", VA = "0xD302D4", Slot = "40")]
			set
			{
			}
		}

		[Token(Token = "0x1700041C")]
		public string text
		{
			[Token(Token = "0x6001A1F")]
			[Address(RVA = "0xD30370", Offset = "0xD30370", VA = "0xD30370", Slot = "41")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A20")]
			[Address(RVA = "0xD30374", Offset = "0xD30374", VA = "0xD30374", Slot = "42")]
			set
			{
			}
		}

		[Token(Token = "0x6001A21")]
		[Address(RVA = "0xD30378", Offset = "0xD30378", VA = "0xD30378", Slot = "36")]
		public override void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001A22")]
		[Address(RVA = "0xD304D4", Offset = "0xD304D4", VA = "0xD304D4", Slot = "37")]
		public override void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001A23")]
		[Address(RVA = "0xD30394", Offset = "0xD30394", VA = "0xD30394", Slot = "44")]
		public void ActivateInputField()
		{
		}

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0xD304DC", Offset = "0xD304DC", VA = "0xD304DC", Slot = "45")]
		public void DeactivateInputField()
		{
		}

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0xD304F8", Offset = "0xD304F8", VA = "0xD304F8", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0xD305B0", Offset = "0xD305B0", VA = "0xD305B0", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001A27")]
		[Address(RVA = "0xD306C0", Offset = "0xD306C0", VA = "0xD306C0", Slot = "48")]
		public bool IsInteractive()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A28")]
		[Address(RVA = "0xD30718", Offset = "0xD30718", VA = "0xD30718", Slot = "46")]
		public void FinishInput()
		{
		}

		[Token(Token = "0x6001A29")]
		[Address(RVA = "0xD30750", Offset = "0xD30750", VA = "0xD30750", Slot = "43")]
		public void ProcessEvent(Event evt)
		{
		}

		[Token(Token = "0x6001A2A")]
		[Address(RVA = "0xD30008", Offset = "0xD30008", VA = "0xD30008")]
		private void initialize()
		{
		}

		[Token(Token = "0x6001A2B")]
		[Address(RVA = "0xD30884", Offset = "0xD30884", VA = "0xD30884")]
		private ICaret CreateCaret()
		{
			return null;
		}

		[Token(Token = "0x6001A2C")]
		[Address(RVA = "0xD30528", Offset = "0xD30528", VA = "0xD30528")]
		public void RegisterTextComponentDirtyCallbacks(Text textComponent)
		{
		}

		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0xD30638", Offset = "0xD30638", VA = "0xD30638")]
		public void UnregisterTextComponentDirtyCallbacks(Text textComponent)
		{
		}

		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0xD30C24", Offset = "0xD30C24", VA = "0xD30C24", Slot = "55")]
		public void MarkGeometryAsDirty()
		{
		}

		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0xD30C7C", Offset = "0xD30C7C", VA = "0xD30C7C", Slot = "49")]
		public void Rebuild(CanvasUpdate executing)
		{
		}

		[Token(Token = "0x6001A30")]
		[Address(RVA = "0xD30CC8", Offset = "0xD30CC8", VA = "0xD30CC8", Slot = "51")]
		public void LayoutComplete()
		{
		}

		[Token(Token = "0x6001A31")]
		[Address(RVA = "0xD30CCC", Offset = "0xD30CCC", VA = "0xD30CCC", Slot = "52")]
		public void GraphicUpdateComplete()
		{
		}

		[Token(Token = "0x6001A32")]
		[Address(RVA = "0xD30CD0", Offset = "0xD30CD0", VA = "0xD30CD0", Slot = "47")]
		public void UpdateText()
		{
		}

		[Token(Token = "0x6001A33")]
		[Address(RVA = "0xD30D08", Offset = "0xD30D08", VA = "0xD30D08", Slot = "58")]
		public void PopulateText(string text)
		{
		}

		[Token(Token = "0x6001A34")]
		[Address(RVA = "0xD30DD8", Offset = "0xD30DD8", VA = "0xD30DD8", Slot = "54")]
		public void OnUpdateSelected(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0xD30DDC", Offset = "0xD30DDC", VA = "0xD30DDC", Slot = "57")]
		public void UpdateDisplayText(string text)
		{
		}

		[Token(Token = "0x6001A36")]
		[Address(RVA = "0xD30FF0", Offset = "0xD30FF0", VA = "0xD30FF0", Slot = "56")]
		public void OnEndInput(string text)
		{
		}

		[Token(Token = "0x6001A37")]
		[Address(RVA = "0xD30FF4", Offset = "0xD30FF4", VA = "0xD30FF4")]
		public void RegisterTextComponentDirtyCallbacks()
		{
		}

		[Token(Token = "0x6001A38")]
		[Address(RVA = "0xD30FFC", Offset = "0xD30FFC", VA = "0xD30FFC", Slot = "32")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0xD310D4", Offset = "0xD310D4", VA = "0xD310D4", Slot = "26")]
		protected override void DoStateTransition(SelectionState state, bool instant)
		{
		}

		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0xD31070", Offset = "0xD31070", VA = "0xD31070")]
		private bool AcceptPointerEvent(PointerEventData eventData)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A3B")]
		[Address(RVA = "0xD311D8", Offset = "0xD311D8", VA = "0xD311D8", Slot = "59")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001A3C")]
		[Address(RVA = "0xD31234", Offset = "0xD31234", VA = "0xD31234", Slot = "60")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001A3D")]
		[Address(RVA = "0xD31244", Offset = "0xD31244", VA = "0xD31244")]
		public VrInputField()
		{
		}

		[SpecialName]
		[Token(Token = "0x6001A3F")]
		[Address(RVA = "0xD31314", Offset = "0xD31314", VA = "0xD31314", Slot = "50")]
		private Transform UnityEngine.UI.ICanvasElement.get_transform()
		{
			return null;
		}
	}
	[Token(Token = "0x20004E5")]
	public class VrInputFieldImpl : AbstractInputField
	{
		[Token(Token = "0x4001A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int _drawStart;

		[Token(Token = "0x4001A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int _drawEnd;

		[Token(Token = "0x6001A41")]
		[Address(RVA = "0xD30BD0", Offset = "0xD30BD0", VA = "0xD30BD0")]
		public VrInputFieldImpl(ICaret caret, IInputEventProcessor inputEventProcessor, IInputFieldController controller, ITextComponentWrapper editableText)
		{
		}

		[Token(Token = "0x6001A42")]
		[Address(RVA = "0xD31364", Offset = "0xD31364", VA = "0xD31364", Slot = "31")]
		protected override string ProcessText(ITextComponentWrapper editableText, ICaret caret)
		{
			return null;
		}

		[Token(Token = "0x6001A43")]
		[Address(RVA = "0xD318B0", Offset = "0xD318B0", VA = "0xD318B0")]
		private Rect CalculateCaretDrawRect(ITextComponentWrapper text, UnityEngine.Vector2 offset, int index, int selectionIndex)
		{
			return default(Rect);
		}

		[Token(Token = "0x6001A44")]
		[Address(RVA = "0xD31AA4", Offset = "0xD31AA4", VA = "0xD31AA4")]
		private int LocalIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6001A45")]
		[Address(RVA = "0xD31B68", Offset = "0xD31B68", VA = "0xD31B68")]
		private int LocalSelectionIndex(ITextComponentWrapper text)
		{
			return default(int);
		}

		[Token(Token = "0x6001A46")]
		[Address(RVA = "0xD31CB8", Offset = "0xD31CB8", VA = "0xD31CB8", Slot = "25")]
		protected override void DrawSelection(ICaret caret, Color color, ITextComponentWrapper text, UnityEngine.Vector2 offset)
		{
		}

		[Token(Token = "0x6001A47")]
		[Address(RVA = "0xD31F7C", Offset = "0xD31F7C", VA = "0xD31F7C", Slot = "26")]
		protected override void DrawCaret(ICaret caret, Color color, ITextComponentWrapper text, UnityEngine.Vector2 offset)
		{
		}

		[Token(Token = "0x6001A48")]
		[Address(RVA = "0xD32240", Offset = "0xD32240", VA = "0xD32240", Slot = "34")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001A49")]
		[Address(RVA = "0xD324B8", Offset = "0xD324B8", VA = "0xD324B8", Slot = "35")]
		public override void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0xD323BC", Offset = "0xD323BC", VA = "0xD323BC")]
		private void MoveCaretWithinBounds(int index, bool withSelection)
		{
		}
	}
}
namespace Qiyi.InputMethod
{
	[Token(Token = "0x20004E6")]
	public sealed class CandidateInfo
	{
		[Token(Token = "0x20004E7")]
		public class Builder
		{
			[Token(Token = "0x4001A20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private string _word;

			[Token(Token = "0x4001A21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private string _pinyin;

			[Token(Token = "0x4001A22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int _pageNumber;

			[Token(Token = "0x4001A23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private int _indexInPage;

			[Token(Token = "0x4001A24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int _matchLength;

			[Token(Token = "0x6001A57")]
			[Address(RVA = "0xD339E0", Offset = "0xD339E0", VA = "0xD339E0")]
			public Builder Word(string word)
			{
				return null;
			}

			[Token(Token = "0x6001A58")]
			[Address(RVA = "0xD339E8", Offset = "0xD339E8", VA = "0xD339E8")]
			public Builder Pinyin(string pinyin)
			{
				return null;
			}

			[Token(Token = "0x6001A59")]
			[Address(RVA = "0xD339F0", Offset = "0xD339F0", VA = "0xD339F0")]
			public Builder PageNumber(int pageNumber)
			{
				return null;
			}

			[Token(Token = "0x6001A5A")]
			[Address(RVA = "0xD339F8", Offset = "0xD339F8", VA = "0xD339F8")]
			public Builder IndexInPage(int index)
			{
				return null;
			}

			[Token(Token = "0x6001A5B")]
			[Address(RVA = "0xD33A00", Offset = "0xD33A00", VA = "0xD33A00")]
			public Builder MatchLength(int matchLength)
			{
				return null;
			}

			[Token(Token = "0x6001A5C")]
			[Address(RVA = "0xD33A08", Offset = "0xD33A08", VA = "0xD33A08")]
			public CandidateInfo Build()
			{
				return null;
			}

			[Token(Token = "0x6001A5D")]
			[Address(RVA = "0xD33A80", Offset = "0xD33A80", VA = "0xD33A80")]
			public Builder()
			{
			}
		}

		[Token(Token = "0x4001A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static CandidateInfo NONE;

		[Token(Token = "0x1700041D")]
		public string Word
		{
			[Token(Token = "0x6001A4C")]
			[Address(RVA = "0xD3392C", Offset = "0xD3392C", VA = "0xD3392C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A4B")]
			[Address(RVA = "0xD33924", Offset = "0xD33924", VA = "0xD33924")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700041E")]
		public string Pinyin
		{
			[Token(Token = "0x6001A4E")]
			[Address(RVA = "0xD3393C", Offset = "0xD3393C", VA = "0xD3393C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A4D")]
			[Address(RVA = "0xD33934", Offset = "0xD33934", VA = "0xD33934")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700041F")]
		public int PageNumber
		{
			[Token(Token = "0x6001A50")]
			[Address(RVA = "0xD3394C", Offset = "0xD3394C", VA = "0xD3394C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A4F")]
			[Address(RVA = "0xD33944", Offset = "0xD33944", VA = "0xD33944")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000420")]
		public int IndexInPage
		{
			[Token(Token = "0x6001A52")]
			[Address(RVA = "0xD3395C", Offset = "0xD3395C", VA = "0xD3395C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A51")]
			[Address(RVA = "0xD33954", Offset = "0xD33954", VA = "0xD33954")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000421")]
		public int MatchLength
		{
			[Token(Token = "0x6001A54")]
			[Address(RVA = "0xD3396C", Offset = "0xD3396C", VA = "0xD3396C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A53")]
			[Address(RVA = "0xD33964", Offset = "0xD33964", VA = "0xD33964")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001A55")]
		[Address(RVA = "0xD33974", Offset = "0xD33974", VA = "0xD33974")]
		private CandidateInfo()
		{
		}
	}
	[Token(Token = "0x20004E8")]
	internal class CandidateSource : ICandidateSource
	{
		[Token(Token = "0x4001A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _globalIndex;

		[Token(Token = "0x4001A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Page> _pages;

		[Token(Token = "0x6001A5E")]
		[Address(RVA = "0xD33A88", Offset = "0xD33A88", VA = "0xD33A88", Slot = "7")]
		public List<Page> GetPages()
		{
			return null;
		}

		[Token(Token = "0x6001A5F")]
		[Address(RVA = "0xD33A90", Offset = "0xD33A90", VA = "0xD33A90", Slot = "4")]
		public CandidateInfo GetNextCandidate(Func<CandidateInfo> RequestMorePage)
		{
			return null;
		}

		[Token(Token = "0x6001A60")]
		[Address(RVA = "0xD33C34", Offset = "0xD33C34", VA = "0xD33C34", Slot = "6")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001A61")]
		[Address(RVA = "0xD33CA8", Offset = "0xD33CA8", VA = "0xD33CA8", Slot = "5")]
		public bool AddPage(Page page)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A62")]
		[Address(RVA = "0xD33DA8", Offset = "0xD33DA8", VA = "0xD33DA8")]
		public CandidateSource()
		{
		}
	}
	[Token(Token = "0x20004E9")]
	internal class DummyIMProvider : IInputMethodProvider
	{
		[Token(Token = "0x4001A27")]
		private const uint PAGE_SIZE = 48u;

		[Token(Token = "0x6001A63")]
		[Address(RVA = "0xD33E24", Offset = "0xD33E24", VA = "0xD33E24", Slot = "4")]
		public void Initialize(Action OnSuccess, Action OnFail, MonoBehaviour monoObject)
		{
		}

		[Token(Token = "0x6001A64")]
		[Address(RVA = "0xD33E44", Offset = "0xD33E44", VA = "0xD33E44", Slot = "5")]
		public void ShutDown()
		{
		}

		[Token(Token = "0x6001A65")]
		[Address(RVA = "0xD33E48", Offset = "0xD33E48", VA = "0xD33E48", Slot = "6")]
		public Page Convert(string input)
		{
			return null;
		}

		[Token(Token = "0x6001A66")]
		[Address(RVA = "0xD34118", Offset = "0xD34118", VA = "0xD34118", Slot = "7")]
		public Page HandleSelection(string compositionString, int pageNumber, int selectedIndexInPage)
		{
			return null;
		}

		[Token(Token = "0x6001A67")]
		[Address(RVA = "0xD3448C", Offset = "0xD3448C", VA = "0xD3448C", Slot = "8")]
		public Page PageDown()
		{
			return null;
		}

		[Token(Token = "0x6001A68")]
		[Address(RVA = "0xD34174", Offset = "0xD34174", VA = "0xD34174")]
		private Page WordPrediction(int pageNumber, int indexInPage)
		{
			return null;
		}

		[Token(Token = "0x6001A69")]
		[Address(RVA = "0xD33EE0", Offset = "0xD33EE0", VA = "0xD33EE0")]
		private List<CandidateInfo> GetCandidates(int count, int pageNumber, string pinyin)
		{
			return null;
		}

		[Token(Token = "0x6001A6A")]
		[Address(RVA = "0xD34534", Offset = "0xD34534", VA = "0xD34534")]
		public DummyIMProvider()
		{
		}
	}
	[Token(Token = "0x20004EA")]
	internal interface ICandidateSource
	{
		[Token(Token = "0x6001A6B")]
		CandidateInfo GetNextCandidate(Func<CandidateInfo> OnRunOut);

		[Token(Token = "0x6001A6C")]
		bool AddPage(Page page);

		[Token(Token = "0x6001A6D")]
		void Clear();

		[Token(Token = "0x6001A6E")]
		List<Page> GetPages();
	}
	[Token(Token = "0x20004EB")]
	internal interface IInputMethodProvider
	{
		[Token(Token = "0x6001A6F")]
		void Initialize(Action OnSuccess, Action OnFail, MonoBehaviour monoObject);

		[Token(Token = "0x6001A70")]
		void ShutDown();

		[Token(Token = "0x6001A71")]
		Page Convert(string input);

		[Token(Token = "0x6001A72")]
		Page HandleSelection(string compositionString, int pageNumber, int selectedIndexInPage);

		[Token(Token = "0x6001A73")]
		Page PageDown();
	}
	[Token(Token = "0x20004EC")]
	public interface IInputMethodView
	{
		[Token(Token = "0x6001A74")]
		MonoBehaviour GetMonoContext();

		[Token(Token = "0x6001A75")]
		void InitFail();

		[Token(Token = "0x6001A76")]
		void InitSuccess();
	}
	[Token(Token = "0x20004ED")]
	internal class InputMethod : MonoBehaviour, IInputMethodView
	{
		[Token(Token = "0x4001A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int MAX_INPUT_LENGTH;

		[Token(Token = "0x4001A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static InputMethod _instance;

		[Token(Token = "0x17000422")]
		private InputMethodImpl Impl
		{
			[Token(Token = "0x6001A78")]
			[Address(RVA = "0xD34544", Offset = "0xD34544", VA = "0xD34544")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A77")]
			[Address(RVA = "0xD3453C", Offset = "0xD3453C", VA = "0xD3453C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001A79")]
		[Address(RVA = "0xD3454C", Offset = "0xD3454C", VA = "0xD3454C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A7A")]
		[Address(RVA = "0xD34840", Offset = "0xD34840", VA = "0xD34840")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A7B")]
		[Address(RVA = "0xD34950", Offset = "0xD34950", VA = "0xD34950", Slot = "4")]
		public MonoBehaviour GetMonoContext()
		{
			return null;
		}

		[Token(Token = "0x6001A7C")]
		[Address(RVA = "0xD34954", Offset = "0xD34954", VA = "0xD34954", Slot = "5")]
		public void InitFail()
		{
		}

		[Token(Token = "0x6001A7D")]
		[Address(RVA = "0xD34958", Offset = "0xD34958", VA = "0xD34958", Slot = "6")]
		public void InitSuccess()
		{
		}

		[Token(Token = "0x6001A7E")]
		[Address(RVA = "0xD349B4", Offset = "0xD349B4", VA = "0xD349B4")]
		public static bool HandleInput(string input)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A7F")]
		[Address(RVA = "0xD34C68", Offset = "0xD34C68", VA = "0xD34C68")]
		public static bool HandleSelection(string compositionString, int pageNumber, int indexInPage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A80")]
		[Address(RVA = "0xD34F50", Offset = "0xD34F50", VA = "0xD34F50")]
		public static CandidateInfo GetCandidate()
		{
			return null;
		}

		[Token(Token = "0x6001A81")]
		[Address(RVA = "0xD35150", Offset = "0xD35150", VA = "0xD35150")]
		public static string GetPinyinSep(int page, int index)
		{
			return null;
		}

		[Token(Token = "0x6001A82")]
		[Address(RVA = "0xD354A4", Offset = "0xD354A4", VA = "0xD354A4")]
		public InputMethod()
		{
		}
	}
	[Token(Token = "0x20004EE")]
	internal class InputMethodImpl
	{
		[Token(Token = "0x20004EF")]
		private static class IMComponentFactory
		{
			[Token(Token = "0x6001A8E")]
			[Address(RVA = "0xD354F8", Offset = "0xD354F8", VA = "0xD354F8")]
			internal static IInputMethodProvider CreateIMProvider()
			{
				return null;
			}

			[Token(Token = "0x6001A8F")]
			[Address(RVA = "0xD3564C", Offset = "0xD3564C", VA = "0xD3564C")]
			internal static ICandidateSource CreateCandidateSource()
			{
				return null;
			}
		}

		[Token(Token = "0x4001A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IInputMethodProvider _imProvider;

		[Token(Token = "0x4001A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ICandidateSource _candidateSource;

		[Token(Token = "0x4001A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IInputMethodView _view;

		[Token(Token = "0x6001A84")]
		[Address(RVA = "0xD34674", Offset = "0xD34674", VA = "0xD34674")]
		public InputMethodImpl(IInputMethodView view)
		{
		}

		[Token(Token = "0x6001A85")]
		[Address(RVA = "0xD35554", Offset = "0xD35554", VA = "0xD35554")]
		private void OnInitSuccess()
		{
		}

		[Token(Token = "0x6001A86")]
		[Address(RVA = "0xD356A4", Offset = "0xD356A4", VA = "0xD356A4")]
		private void OnInitFail()
		{
		}

		[Token(Token = "0x6001A87")]
		[Address(RVA = "0xD3578C", Offset = "0xD3578C", VA = "0xD3578C")]
		private CandidateInfo OnRunOut()
		{
			return null;
		}

		[Token(Token = "0x6001A88")]
		[Address(RVA = "0xD35804", Offset = "0xD35804", VA = "0xD35804")]
		private bool PageDown()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A89")]
		[Address(RVA = "0xD348AC", Offset = "0xD348AC", VA = "0xD348AC")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6001A8A")]
		[Address(RVA = "0xD3529C", Offset = "0xD3529C", VA = "0xD3529C")]
		public string GetPinyinSep(int page, int index)
		{
			return null;
		}

		[Token(Token = "0x6001A8B")]
		[Address(RVA = "0xD34AD0", Offset = "0xD34AD0", VA = "0xD34AD0")]
		public bool HandleInput(string input)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A8C")]
		[Address(RVA = "0xD34DA0", Offset = "0xD34DA0", VA = "0xD34DA0")]
		public bool HandleSelection(string compositionString, int pageNumber, int indexInPage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A8D")]
		[Address(RVA = "0xD35064", Offset = "0xD35064", VA = "0xD35064")]
		public CandidateInfo GetCandidate()
		{
			return null;
		}
	}
	[Token(Token = "0x20004F0")]
	internal class Page
	{
		[Token(Token = "0x20004F1")]
		public class Builder
		{
			[Token(Token = "0x4001A35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int _pageSize;

			[Token(Token = "0x4001A36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private bool _hasNextPage;

			[Token(Token = "0x4001A37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			private bool _hasPrevPage;

			[Token(Token = "0x4001A38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private string _input;

			[Token(Token = "0x4001A39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int _pageNumber;

			[Token(Token = "0x4001A3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<CandidateInfo> _candidates;

			[Token(Token = "0x6001A9F")]
			[Address(RVA = "0xD34050", Offset = "0xD34050", VA = "0xD34050")]
			public Builder PageSize(int pageSize)
			{
				return null;
			}

			[Token(Token = "0x6001AA0")]
			[Address(RVA = "0xD34060", Offset = "0xD34060", VA = "0xD34060")]
			public Builder HasNextPage(bool hasNextPage)
			{
				return null;
			}

			[Token(Token = "0x6001AA1")]
			[Address(RVA = "0xD3406C", Offset = "0xD3406C", VA = "0xD3406C")]
			public Builder HasPrevPage(bool hasPrevPage)
			{
				return null;
			}

			[Token(Token = "0x6001AA2")]
			[Address(RVA = "0xD34078", Offset = "0xD34078", VA = "0xD34078")]
			public Builder Input(string input)
			{
				return null;
			}

			[Token(Token = "0x6001AA3")]
			[Address(RVA = "0xD34058", Offset = "0xD34058", VA = "0xD34058")]
			public Builder Candidates(List<CandidateInfo> candidates)
			{
				return null;
			}

			[Token(Token = "0x6001AA4")]
			[Address(RVA = "0xD34080", Offset = "0xD34080", VA = "0xD34080")]
			public Builder PageNumber(int num)
			{
				return null;
			}

			[Token(Token = "0x6001AA5")]
			[Address(RVA = "0xD34088", Offset = "0xD34088", VA = "0xD34088")]
			public Page Build()
			{
				return null;
			}

			[Token(Token = "0x6001AA6")]
			[Address(RVA = "0xD34048", Offset = "0xD34048", VA = "0xD34048")]
			public Builder()
			{
			}
		}

		[Token(Token = "0x4001A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Page EMPTY;

		[Token(Token = "0x17000423")]
		public int PageSize
		{
			[Token(Token = "0x6001A91")]
			[Address(RVA = "0xD35938", Offset = "0xD35938", VA = "0xD35938")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A90")]
			[Address(RVA = "0xD35930", Offset = "0xD35930", VA = "0xD35930")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000424")]
		public bool HasNextPage
		{
			[Token(Token = "0x6001A93")]
			[Address(RVA = "0xD3594C", Offset = "0xD3594C", VA = "0xD3594C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A92")]
			[Address(RVA = "0xD35940", Offset = "0xD35940", VA = "0xD35940")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000425")]
		public bool HasPrevPage
		{
			[Token(Token = "0x6001A95")]
			[Address(RVA = "0xD35960", Offset = "0xD35960", VA = "0xD35960")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A94")]
			[Address(RVA = "0xD35954", Offset = "0xD35954", VA = "0xD35954")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000426")]
		public string Input
		{
			[Token(Token = "0x6001A97")]
			[Address(RVA = "0xD35970", Offset = "0xD35970", VA = "0xD35970")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A96")]
			[Address(RVA = "0xD35968", Offset = "0xD35968", VA = "0xD35968")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000427")]
		public int PageNumber
		{
			[Token(Token = "0x6001A99")]
			[Address(RVA = "0xD35980", Offset = "0xD35980", VA = "0xD35980")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A98")]
			[Address(RVA = "0xD35978", Offset = "0xD35978", VA = "0xD35978")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000428")]
		public List<CandidateInfo> Candidates
		{
			[Token(Token = "0x6001A9B")]
			[Address(RVA = "0xD35990", Offset = "0xD35990", VA = "0xD35990")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A9A")]
			[Address(RVA = "0xD35988", Offset = "0xD35988", VA = "0xD35988")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001A9C")]
		[Address(RVA = "0xD35998", Offset = "0xD35998", VA = "0xD35998")]
		private Page()
		{
		}

		[Token(Token = "0x6001A9D")]
		[Address(RVA = "0xD359A0", Offset = "0xD359A0", VA = "0xD359A0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20004F2")]
	internal class PinyinIMProvider : IInputMethodProvider
	{
		[Token(Token = "0x20004F3")]
		[CompilerGenerated]
		private sealed class <InitPinyinIme>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string fromPath;

			[Token(Token = "0x4001A47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string toPath;

			[Token(Token = "0x4001A48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public PinyinIMProvider <>4__this;

			[Token(Token = "0x4001A49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private string[] <>7__wrap1;

			[Token(Token = "0x4001A4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <>7__wrap2;

			[Token(Token = "0x4001A4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private string <file>5__4;

			[Token(Token = "0x4001A4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private WWW <www>5__5;

			[Token(Token = "0x17000429")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001ABB")]
				[Address(RVA = "0xD379A8", Offset = "0xD379A8", VA = "0xD379A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700042A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001ABD")]
				[Address(RVA = "0xD379F0", Offset = "0xD379F0", VA = "0xD379F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AB8")]
			[Address(RVA = "0xD36B3C", Offset = "0xD36B3C", VA = "0xD36B3C")]
			[DebuggerHidden]
			public <InitPinyinIme>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6001AB9")]
			[Address(RVA = "0xD36B64", Offset = "0xD36B64", VA = "0xD36B64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001ABA")]
			[Address(RVA = "0xD36B68", Offset = "0xD36B68", VA = "0xD36B68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001ABC")]
			[Address(RVA = "0xD379B0", Offset = "0xD379B0", VA = "0xD379B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001A3B")]
		private const int MAX_INPUT_LEGNTH = 20;

		[Token(Token = "0x4001A3C")]
		private const int WORD_BUFFER_SIZE = 24;

		[Token(Token = "0x4001A3D")]
		private const uint PAGE_SIZE = 48u;

		[Token(Token = "0x4001A3E")]
		private const string DLL_NAME = "sogou_ime";

		[Token(Token = "0x4001A3F")]
		private const string DICT_FOLDER_NAME = "Dict";

		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Action _onSuccess;

		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Action _onFail;

		[Token(Token = "0x4001A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string _currentInput;

		[Token(Token = "0x4001A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MonoBehaviour _monoContext;

		[PreserveSig]
		[Token(Token = "0x6001AA7")]
		[Address(RVA = "0xD35C1C", Offset = "0xD35C1C", VA = "0xD35C1C")]
		private static extern bool InitPinyinNative(string dictPath, uint fuzzy, uint pageSize = 0u);

		[PreserveSig]
		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0xD35CC4", Offset = "0xD35CC4", VA = "0xD35CC4")]
		private static extern int ConvertNative(string input, StringBuilder pinyinSep, out bool hasNextPage);

		[PreserveSig]
		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0xD35DA4", Offset = "0xD35DA4", VA = "0xD35DA4")]
		private static extern int NextWordNative(StringBuilder builder, int index);

		[PreserveSig]
		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0xD35E50", Offset = "0xD35E50", VA = "0xD35E50")]
		private static extern int WordPredictionNative(int pageNumber, int selected, out bool hasNextPage);

		[PreserveSig]
		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0xD35EFC", Offset = "0xD35EFC", VA = "0xD35EFC")]
		private static extern void DeactiveInputMethodNative();

		[PreserveSig]
		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0xD35F64", Offset = "0xD35F64", VA = "0xD35F64")]
		private static extern int PageDownNative(out bool hasNextPage, out int nativePageNumber);

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0xD36000", Offset = "0xD36000", VA = "0xD36000", Slot = "4")]
		public void Initialize(Action OnSuccess, Action OnFail, MonoBehaviour monoObject)
		{
		}

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0xD3617C", Offset = "0xD3617C", VA = "0xD3617C", Slot = "5")]
		public void ShutDown()
		{
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0xD3619C", Offset = "0xD3619C", VA = "0xD3619C", Slot = "6")]
		public Page Convert(string input)
		{
			return null;
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0xD365A0", Offset = "0xD365A0", VA = "0xD365A0", Slot = "8")]
		public Page PageDown()
		{
			return null;
		}

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0xD36754", Offset = "0xD36754", VA = "0xD36754", Slot = "7")]
		public Page HandleSelection(string compositionString, int pageNumber, int selectedIndexInPage)
		{
			return null;
		}

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0xD367B4", Offset = "0xD367B4", VA = "0xD367B4")]
		private Page WordPrediction(int pageNumber, int selectedIndexInPage)
		{
			return null;
		}

		[Token(Token = "0x6001AB3")]
		[Address(RVA = "0xD36AF8", Offset = "0xD36AF8", VA = "0xD36AF8")]
		private void ResetBuffer(StringBuilder builder)
		{
		}

		[Token(Token = "0x6001AB4")]
		[Address(RVA = "0xD36100", Offset = "0xD36100", VA = "0xD36100")]
		[IteratorStateMachine(typeof(<InitPinyinIme>d__22))]
		private IEnumerator InitPinyinIme(string fromPath, string toPath)
		{
			return null;
		}

		[Token(Token = "0x6001AB5")]
		[Address(RVA = "0xD363C8", Offset = "0xD363C8", VA = "0xD363C8")]
		private List<CandidateInfo> GetCandidates(int count, int pageNumber, string pinyin)
		{
			return null;
		}

		[Token(Token = "0x6001AB6")]
		[Address(RVA = "0xD36954", Offset = "0xD36954", VA = "0xD36954")]
		private List<CandidateInfo> GetPredictionCandidates(int count, int pageNumber)
		{
			return null;
		}

		[Token(Token = "0x6001AB7")]
		[Address(RVA = "0xD35928", Offset = "0xD35928", VA = "0xD35928")]
		public PinyinIMProvider()
		{
		}
	}
}
namespace Qiyi.InputMethod.Keyboard
{
	[Token(Token = "0x20004F4")]
	public class CandidateItemPool
	{
		[Token(Token = "0x4001A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameObject pooledItem;

		[Token(Token = "0x4001A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<GameObject> pool;

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0xD379F8", Offset = "0xD379F8", VA = "0xD379F8")]
		public CandidateItemPool(GameObject pooledItem)
		{
		}

		[Token(Token = "0x6001ABF")]
		[Address(RVA = "0xD37A88", Offset = "0xD37A88", VA = "0xD37A88")]
		public GameObject GetPooledObject(Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6001AC0")]
		[Address(RVA = "0xD37E5C", Offset = "0xD37E5C", VA = "0xD37E5C")]
		public void RecycleObject(GameObject obj)
		{
		}

		[Token(Token = "0x6001AC1")]
		[Address(RVA = "0xD37E9C", Offset = "0xD37E9C", VA = "0xD37E9C")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x20004F5")]
	public class CandidatePager : MonoBehaviour, ICandidatePager
	{
		[Token(Token = "0x20004F6")]
		private class CandidateItem
		{
			[Token(Token = "0x1700042D")]
			public CandidateInfo Info
			{
				[Token(Token = "0x6001AE3")]
				[Address(RVA = "0xD397F4", Offset = "0xD397F4", VA = "0xD397F4")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6001AE2")]
				[Address(RVA = "0xD397EC", Offset = "0xD397EC", VA = "0xD397EC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700042E")]
			public float ItemWidth
			{
				[Token(Token = "0x6001AE5")]
				[Address(RVA = "0xD39804", Offset = "0xD39804", VA = "0xD39804")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001AE4")]
				[Address(RVA = "0xD397FC", Offset = "0xD397FC", VA = "0xD397FC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6001AE6")]
			[Address(RVA = "0xD38E94", Offset = "0xD38E94", VA = "0xD38E94")]
			public CandidateItem(CandidateInfo info, float width)
			{
			}
		}

		[Token(Token = "0x20004F7")]
		[CompilerGenerated]
		private sealed class <ExpandPanelAnimation>d__44 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CandidatePager <>4__this;

			[Token(Token = "0x4001A71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <timer>5__2;

			[Token(Token = "0x1700042F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AEA")]
				[Address(RVA = "0xD39964", Offset = "0xD39964", VA = "0xD39964", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000430")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AEC")]
				[Address(RVA = "0xD399AC", Offset = "0xD399AC", VA = "0xD399AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AE7")]
			[Address(RVA = "0xD387D4", Offset = "0xD387D4", VA = "0xD387D4")]
			[DebuggerHidden]
			public <ExpandPanelAnimation>d__44(int <>1__state)
			{
			}

			[Token(Token = "0x6001AE8")]
			[Address(RVA = "0xD3980C", Offset = "0xD3980C", VA = "0xD3980C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AE9")]
			[Address(RVA = "0xD39810", Offset = "0xD39810", VA = "0xD39810", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AEB")]
			[Address(RVA = "0xD3996C", Offset = "0xD3996C", VA = "0xD3996C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004F8")]
		[CompilerGenerated]
		private sealed class <FoldPanelAnimation>d__45 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CandidatePager <>4__this;

			[Token(Token = "0x4001A75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <timer>5__2;

			[Token(Token = "0x17000431")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AF0")]
				[Address(RVA = "0xD39B0C", Offset = "0xD39B0C", VA = "0xD39B0C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000432")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AF2")]
				[Address(RVA = "0xD39B54", Offset = "0xD39B54", VA = "0xD39B54", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AED")]
			[Address(RVA = "0xD38864", Offset = "0xD38864", VA = "0xD38864")]
			[DebuggerHidden]
			public <FoldPanelAnimation>d__45(int <>1__state)
			{
			}

			[Token(Token = "0x6001AEE")]
			[Address(RVA = "0xD399B4", Offset = "0xD399B4", VA = "0xD399B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AEF")]
			[Address(RVA = "0xD399B8", Offset = "0xD399B8", VA = "0xD399B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AF1")]
			[Address(RVA = "0xD39B14", Offset = "0xD39B14", VA = "0xD39B14", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004FA")]
		[CompilerGenerated]
		private sealed class <TranslateXBy>d__60 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CandidatePager <>4__this;

			[Token(Token = "0x4001A7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float offset;

			[Token(Token = "0x4001A7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform t;

			[Token(Token = "0x4001A7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityEngine.Vector3 <currentPosition>5__2;

			[Token(Token = "0x4001A7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <speed>5__3;

			[Token(Token = "0x4001A7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <delta>5__4;

			[Token(Token = "0x17000433")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001AF8")]
				[Address(RVA = "0xD39CEC", Offset = "0xD39CEC", VA = "0xD39CEC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000434")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001AFA")]
				[Address(RVA = "0xD39D34", Offset = "0xD39D34", VA = "0xD39D34", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001AF5")]
			[Address(RVA = "0xD39728", Offset = "0xD39728", VA = "0xD39728")]
			[DebuggerHidden]
			public <TranslateXBy>d__60(int <>1__state)
			{
			}

			[Token(Token = "0x6001AF6")]
			[Address(RVA = "0xD39B8C", Offset = "0xD39B8C", VA = "0xD39B8C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001AF7")]
			[Address(RVA = "0xD39B90", Offset = "0xD39B90", VA = "0xD39B90", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001AF9")]
			[Address(RVA = "0xD39CF4", Offset = "0xD39CF4", VA = "0xD39CF4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Button m_PageUpButton;

		[Token(Token = "0x4001A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Button m_PageDownButton;

		[Token(Token = "0x4001A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject m_CandidateItemPrefab;

		[Token(Token = "0x4001A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_LinePrefab;

		[Token(Token = "0x4001A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private RectTransform m_ContentRect;

		[Token(Token = "0x4001A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Text m_InputPinyinText;

		[Token(Token = "0x4001A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float m_LineWidth;

		[Token(Token = "0x4001A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Button m_ExpandButton;

		[Token(Token = "0x4001A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Button m_FoldButton;

		[Token(Token = "0x4001A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float m_ItemMinWidth;

		[Token(Token = "0x4001A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private int m_RowCount;

		[Token(Token = "0x4001A5A")]
		private const int UNIT_WORD_LENGTH = 3;

		[Token(Token = "0x4001A5B")]
		private const float ANIMATION_DURATION = 0.2f;

		[Token(Token = "0x4001A5C")]
		private const float PAGING_DURATION = 0.7f;

		[Token(Token = "0x4001A5D")]
		private const int CANDIDATE_QUEUE_SIZE = 5;

		[Token(Token = "0x4001A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_InitialRectWidth;

		[Token(Token = "0x4001A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float m_FoldedHeight;

		[Token(Token = "0x4001A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_ExpandedHeight;

		[Token(Token = "0x4001A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float m_PagerScrolledOffset;

		[Token(Token = "0x4001A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CandidateItemPool m_CandidateItemPool;

		[Token(Token = "0x4001A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<CandidateItem> m_CandidateBindingQueue;

		[Token(Token = "0x4001A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool m_HasMoreCandidates;

		[Token(Token = "0x4001A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool m_HasPreviousPage;

		[Token(Token = "0x4001A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		private bool m_IsExpanded;

		[Token(Token = "0x4001A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int m_CurrentDisplayPage;

		[Token(Token = "0x4001A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int m_TotalPage;

		[Token(Token = "0x4001A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private RectTransform _rect;

		[Token(Token = "0x4001A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool _isAnimating;

		[Token(Token = "0x1700042B")]
		private RectTransform CachedRect
		{
			[Token(Token = "0x6001AC2")]
			[Address(RVA = "0xD37F5C", Offset = "0xD37F5C", VA = "0xD37F5C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001AC3")]
			[Address(RVA = "0xD37FF0", Offset = "0xD37FF0", VA = "0xD37FF0")]
			set
			{
			}
		}

		[Token(Token = "0x1700042C")]
		public Action<CandidateInfo> OnCandidateClickDelegate
		{
			[Token(Token = "0x6001AC8")]
			[Address(RVA = "0xD3820C", Offset = "0xD3820C", VA = "0xD3820C", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001AC9")]
			[Address(RVA = "0xD38214", Offset = "0xD38214", VA = "0xD38214", Slot = "5")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001AC4")]
		[Address(RVA = "0xD37FF8", Offset = "0xD37FF8", VA = "0xD37FF8", Slot = "7")]
		public void Hide()
		{
		}

		[Token(Token = "0x6001AC5")]
		[Address(RVA = "0xD38060", Offset = "0xD38060", VA = "0xD38060", Slot = "6")]
		public void Show()
		{
		}

		[Token(Token = "0x6001AC6")]
		[Address(RVA = "0xD38084", Offset = "0xD38084", VA = "0xD38084", Slot = "8")]
		public bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6001AC7")]
		[Address(RVA = "0xD380A4", Offset = "0xD380A4", VA = "0xD380A4", Slot = "9")]
		public void UpdateWords()
		{
		}

		[Token(Token = "0x6001ACA")]
		[Address(RVA = "0xD3821C", Offset = "0xD3821C", VA = "0xD3821C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0xD38280", Offset = "0xD38280", VA = "0xD38280", Slot = "10")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001ACC")]
		[Address(RVA = "0xD38420", Offset = "0xD38420", VA = "0xD38420")]
		private void SetupViews()
		{
		}

		[Token(Token = "0x6001ACD")]
		[Address(RVA = "0xD38530", Offset = "0xD38530", VA = "0xD38530")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001ACE")]
		[Address(RVA = "0xD38634", Offset = "0xD38634", VA = "0xD38634")]
		private void ExpandPanel(bool animate = true)
		{
		}

		[Token(Token = "0x6001ACF")]
		[Address(RVA = "0xD386DC", Offset = "0xD386DC", VA = "0xD386DC")]
		[IteratorStateMachine(typeof(<ExpandPanelAnimation>d__44))]
		private IEnumerator ExpandPanelAnimation()
		{
			return null;
		}

		[Token(Token = "0x6001AD0")]
		[Address(RVA = "0xD387FC", Offset = "0xD387FC", VA = "0xD387FC")]
		[IteratorStateMachine(typeof(<FoldPanelAnimation>d__45))]
		private IEnumerator FoldPanelAnimation()
		{
			return null;
		}

		[Token(Token = "0x6001AD1")]
		[Address(RVA = "0xD3888C", Offset = "0xD3888C", VA = "0xD3888C")]
		private void FoldPanel(bool animate = true)
		{
		}

		[Token(Token = "0x6001AD2")]
		[Address(RVA = "0xD38924", Offset = "0xD38924", VA = "0xD38924")]
		private void HandlePageDown()
		{
		}

		[Token(Token = "0x6001AD3")]
		[Address(RVA = "0xD38C74", Offset = "0xD38C74", VA = "0xD38C74")]
		private void HandlePageUp()
		{
		}

		[Token(Token = "0x6001AD4")]
		[Address(RVA = "0xD38D30", Offset = "0xD38D30", VA = "0xD38D30")]
		private CandidateItem GetNextCandidateData()
		{
			return null;
		}

		[Token(Token = "0x6001AD5")]
		[Address(RVA = "0xD389F0", Offset = "0xD389F0", VA = "0xD389F0")]
		private void PopulatePage(Action<CandidateInfo> onItemClick)
		{
		}

		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0xD38ECC", Offset = "0xD38ECC", VA = "0xD38ECC")]
		private bool PopulateLine(Transform line, Action<CandidateInfo> onItemClick)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AD7")]
		[Address(RVA = "0xD38E58", Offset = "0xD38E58", VA = "0xD38E58")]
		private float CalculateItemWidth(int wordLength, int unitWordLength, float unitWidth)
		{
			return default(float);
		}

		[Token(Token = "0x6001AD8")]
		[Address(RVA = "0xD3912C", Offset = "0xD3912C", VA = "0xD3912C")]
		private GameObject BindCandidateObject(Transform parent, Action<CandidateInfo> onclick, CandidateItem data)
		{
			return null;
		}

		[Token(Token = "0x6001AD9")]
		[Address(RVA = "0xD39334", Offset = "0xD39334", VA = "0xD39334")]
		private void UpdateDisplayPinyin(string pinyin)
		{
		}

		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0xD380CC", Offset = "0xD380CC", VA = "0xD380CC")]
		private void PopulateFirstPage(Action<CandidateInfo> onclick)
		{
		}

		[Token(Token = "0x6001ADB")]
		[Address(RVA = "0xD38744", Offset = "0xD38744", VA = "0xD38744")]
		private void UpdatePagerButtonsVisibility()
		{
		}

		[Token(Token = "0x6001ADC")]
		[Address(RVA = "0xD39358", Offset = "0xD39358", VA = "0xD39358")]
		private void ClearContent()
		{
		}

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0xD385A8", Offset = "0xD385A8", VA = "0xD385A8")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001ADE")]
		[Address(RVA = "0xD38BEC", Offset = "0xD38BEC", VA = "0xD38BEC")]
		[IteratorStateMachine(typeof(<TranslateXBy>d__60))]
		private IEnumerator TranslateXBy(Transform t, float offset)
		{
			return null;
		}

		[Token(Token = "0x6001ADF")]
		[Address(RVA = "0xD39750", Offset = "0xD39750", VA = "0xD39750")]
		public CandidatePager()
		{
		}
	}
	[Token(Token = "0x20004FB")]
	public interface ICandidatePager
	{
		[Token(Token = "0x17000435")]
		Action<CandidateInfo> OnCandidateClickDelegate
		{
			[Token(Token = "0x6001AFB")]
			get;
			[Token(Token = "0x6001AFC")]
			set;
		}

		[Token(Token = "0x6001AFD")]
		void Show();

		[Token(Token = "0x6001AFE")]
		void Hide();

		[Token(Token = "0x6001AFF")]
		bool IsActive();

		[Token(Token = "0x6001B00")]
		void UpdateWords();
	}
	[Token(Token = "0x20004FC")]
	public class TextHoverEffect : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4001A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text _text;

		[Token(Token = "0x4001A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Color _highlightedColor;

		[Token(Token = "0x4001A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Color _normalColor;

		[Token(Token = "0x6001B01")]
		[Address(RVA = "0xD39D3C", Offset = "0xD39D3C", VA = "0xD39D3C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B02")]
		[Address(RVA = "0xD39D8C", Offset = "0xD39D8C", VA = "0xD39D8C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001B03")]
		[Address(RVA = "0xD39DBC", Offset = "0xD39DBC", VA = "0xD39DBC", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B04")]
		[Address(RVA = "0xD39DEC", Offset = "0xD39DEC", VA = "0xD39DEC", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001B05")]
		[Address(RVA = "0xD39E1C", Offset = "0xD39E1C", VA = "0xD39E1C")]
		public TextHoverEffect()
		{
		}
	}
}
namespace Rainbows
{
	[Token(Token = "0x20004FD")]
	public class RainbowSceneSelect : MonoBehaviour
	{
		[Token(Token = "0x4001A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool GUIHide;

		[Token(Token = "0x4001A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool GUIHide2;

		[Token(Token = "0x4001A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool GUIHide3;

		[Token(Token = "0x6001B06")]
		[Address(RVA = "0xD39E38", Offset = "0xD39E38", VA = "0xD39E38")]
		public void LoadSceneDemo1()
		{
		}

		[Token(Token = "0x6001B07")]
		[Address(RVA = "0xD39EA0", Offset = "0xD39EA0", VA = "0xD39EA0")]
		public void LoadSceneDemo2()
		{
		}

		[Token(Token = "0x6001B08")]
		[Address(RVA = "0xD39F08", Offset = "0xD39F08", VA = "0xD39F08")]
		public void LoadSceneDemo3()
		{
		}

		[Token(Token = "0x6001B09")]
		[Address(RVA = "0xD39F70", Offset = "0xD39F70", VA = "0xD39F70")]
		public void LoadSceneDemo4()
		{
		}

		[Token(Token = "0x6001B0A")]
		[Address(RVA = "0xD39FD8", Offset = "0xD39FD8", VA = "0xD39FD8")]
		public void LoadSceneDemo5()
		{
		}

		[Token(Token = "0x6001B0B")]
		[Address(RVA = "0xD3A040", Offset = "0xD3A040", VA = "0xD3A040")]
		public void LoadSceneDemo6()
		{
		}

		[Token(Token = "0x6001B0C")]
		[Address(RVA = "0xD3A0A8", Offset = "0xD3A0A8", VA = "0xD3A0A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B0D")]
		[Address(RVA = "0xD3A208", Offset = "0xD3A208", VA = "0xD3A208")]
		public RainbowSceneSelect()
		{
		}
	}
}
namespace RainbowMagic
{
	[Token(Token = "0x20004FE")]
	public class RainbowButtonScript : MonoBehaviour
	{
		[Token(Token = "0x4001A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Button;

		[Token(Token = "0x4001A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text MyButtonText;

		[Token(Token = "0x4001A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string projectileParticleName;

		[Token(Token = "0x4001A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RainbowFireProjectile effectScript;

		[Token(Token = "0x4001A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RainbowProjectileScript projectileScript;

		[Token(Token = "0x4001A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float buttonsX;

		[Token(Token = "0x4001A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float buttonsY;

		[Token(Token = "0x4001A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float buttonsSizeX;

		[Token(Token = "0x4001A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float buttonsSizeY;

		[Token(Token = "0x4001A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float buttonsDistance;

		[Token(Token = "0x6001B0E")]
		[Address(RVA = "0xD3A210", Offset = "0xD3A210", VA = "0xD3A210")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B0F")]
		[Address(RVA = "0xD3A390", Offset = "0xD3A390", VA = "0xD3A390")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B10")]
		[Address(RVA = "0xD3A2F8", Offset = "0xD3A2F8", VA = "0xD3A2F8")]
		public void getProjectileNames()
		{
		}

		[Token(Token = "0x6001B11")]
		[Address(RVA = "0xD3A3BC", Offset = "0xD3A3BC", VA = "0xD3A3BC")]
		public bool overButton()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B12")]
		[Address(RVA = "0xD3A494", Offset = "0xD3A494", VA = "0xD3A494")]
		public RainbowButtonScript()
		{
		}
	}
	[Token(Token = "0x20004FF")]
	public class RainbowFireProjectile : MonoBehaviour
	{
		[Token(Token = "0x4001A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RaycastHit hit;

		[Token(Token = "0x4001A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject[] projectiles;

		[Token(Token = "0x4001A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform spawnPosition;

		[Token(Token = "0x4001A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public int currentProjectile;

		[Token(Token = "0x4001A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float speed;

		[Token(Token = "0x4001A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RainbowButtonScript selectedProjectileButton;

		[Token(Token = "0x6001B13")]
		[Address(RVA = "0xD3A49C", Offset = "0xD3A49C", VA = "0xD3A49C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B14")]
		[Address(RVA = "0xD3A510", Offset = "0xD3A510", VA = "0xD3A510")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B15")]
		[Address(RVA = "0xD3A8E0", Offset = "0xD3A8E0", VA = "0xD3A8E0")]
		public void nextEffect()
		{
		}

		[Token(Token = "0x6001B16")]
		[Address(RVA = "0xD3A91C", Offset = "0xD3A91C", VA = "0xD3A91C")]
		public void previousEffect()
		{
		}

		[Token(Token = "0x6001B17")]
		[Address(RVA = "0xD3A958", Offset = "0xD3A958", VA = "0xD3A958")]
		public void AdjustSpeed(float newSpeed)
		{
		}

		[Token(Token = "0x6001B18")]
		[Address(RVA = "0xD3A960", Offset = "0xD3A960", VA = "0xD3A960")]
		public RainbowFireProjectile()
		{
		}
	}
	[Token(Token = "0x2000500")]
	public class RainbowProjectileScript : MonoBehaviour
	{
		[Token(Token = "0x4001A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject impactParticle;

		[Token(Token = "0x4001A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject projectileParticle;

		[Token(Token = "0x4001A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject muzzleParticle;

		[Token(Token = "0x4001A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject[] trailParticles;

		[Token(Token = "0x4001A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Adjust if not using Sphere Collider")]
		public float colliderRadius;

		[Token(Token = "0x4001A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float collideOffset;

		[Token(Token = "0x6001B19")]
		[Address(RVA = "0xD3A970", Offset = "0xD3A970", VA = "0xD3A970")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B1A")]
		[Address(RVA = "0xD3AB70", Offset = "0xD3AB70", VA = "0xD3AB70")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001B1B")]
		[Address(RVA = "0xD3B284", Offset = "0xD3B284", VA = "0xD3B284")]
		public RainbowProjectileScript()
		{
		}
	}
	[Token(Token = "0x2000501")]
	public class RainbowMagicSoundSpawn : MonoBehaviour
	{
		[Token(Token = "0x4001A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject prefabSound;

		[Token(Token = "0x4001A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool destroyWhenDone;

		[Token(Token = "0x4001A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool soundPrefabIsChild;

		[Token(Token = "0x4001A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0.01f, 10f)]
		public float pitchRandomMultiplier;

		[Token(Token = "0x6001B1C")]
		[Address(RVA = "0xD3B298", Offset = "0xD3B298", VA = "0xD3B298")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B1D")]
		[Address(RVA = "0xD3B4EC", Offset = "0xD3B4EC", VA = "0xD3B4EC")]
		public RainbowMagicSoundSpawn()
		{
		}
	}
}
namespace MagicArsenal
{
	[Token(Token = "0x2000502")]
	public class MagicButtonScript : MonoBehaviour
	{
		[Token(Token = "0x4001AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Button;

		[Token(Token = "0x4001AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text MyButtonText;

		[Token(Token = "0x4001AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string projectileParticleName;

		[Token(Token = "0x4001AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MagicFireProjectile effectScript;

		[Token(Token = "0x4001AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MagicProjectileScript projectileScript;

		[Token(Token = "0x4001AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float buttonsX;

		[Token(Token = "0x4001AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float buttonsY;

		[Token(Token = "0x4001AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float buttonsSizeX;

		[Token(Token = "0x4001AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float buttonsSizeY;

		[Token(Token = "0x4001AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float buttonsDistance;

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0xD3B504", Offset = "0xD3B504", VA = "0xD3B504")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B1F")]
		[Address(RVA = "0xD3B684", Offset = "0xD3B684", VA = "0xD3B684")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B20")]
		[Address(RVA = "0xD3B5EC", Offset = "0xD3B5EC", VA = "0xD3B5EC")]
		public void getProjectileNames()
		{
		}

		[Token(Token = "0x6001B21")]
		[Address(RVA = "0xD3B6B0", Offset = "0xD3B6B0", VA = "0xD3B6B0")]
		public bool overButton()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B22")]
		[Address(RVA = "0xD3B788", Offset = "0xD3B788", VA = "0xD3B788")]
		public MagicButtonScript()
		{
		}
	}
	[Token(Token = "0x2000503")]
	public class MagicDragMouseOrbit : MonoBehaviour
	{
		[Token(Token = "0x4001AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4001AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float distance;

		[Token(Token = "0x4001AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float xSpeed;

		[Token(Token = "0x4001AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ySpeed;

		[Token(Token = "0x4001AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float yMinLimit;

		[Token(Token = "0x4001AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float yMaxLimit;

		[Token(Token = "0x4001AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float distanceMin;

		[Token(Token = "0x4001AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float distanceMax;

		[Token(Token = "0x4001AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float smoothTime;

		[Token(Token = "0x4001AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float rotationYAxis;

		[Token(Token = "0x4001AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float rotationXAxis;

		[Token(Token = "0x4001AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float velocityX;

		[Token(Token = "0x4001AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float velocityY;

		[Token(Token = "0x6001B23")]
		[Address(RVA = "0xD3B790", Offset = "0xD3B790", VA = "0xD3B790")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B24")]
		[Address(RVA = "0xD3B85C", Offset = "0xD3B85C", VA = "0xD3B85C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001B25")]
		[Address(RVA = "0xD3BBD8", Offset = "0xD3BBD8", VA = "0xD3BBD8")]
		public static float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6001B26")]
		[Address(RVA = "0xD3BC14", Offset = "0xD3BC14", VA = "0xD3BC14")]
		public MagicDragMouseOrbit()
		{
		}
	}
	[Token(Token = "0x2000504")]
	public class MagicFireProjectile : MonoBehaviour
	{
		[Token(Token = "0x4001AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RaycastHit hit;

		[Token(Token = "0x4001AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject[] projectiles;

		[Token(Token = "0x4001AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform spawnPosition;

		[Token(Token = "0x4001ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public int currentProjectile;

		[Token(Token = "0x4001ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float speed;

		[Token(Token = "0x4001ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MagicButtonScript selectedProjectileButton;

		[Token(Token = "0x6001B27")]
		[Address(RVA = "0xD3BC30", Offset = "0xD3BC30", VA = "0xD3BC30")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B28")]
		[Address(RVA = "0xD3BCA4", Offset = "0xD3BCA4", VA = "0xD3BCA4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B29")]
		[Address(RVA = "0xD3C0B0", Offset = "0xD3C0B0", VA = "0xD3C0B0")]
		public void nextEffect()
		{
		}

		[Token(Token = "0x6001B2A")]
		[Address(RVA = "0xD3C0EC", Offset = "0xD3C0EC", VA = "0xD3C0EC")]
		public void previousEffect()
		{
		}

		[Token(Token = "0x6001B2B")]
		[Address(RVA = "0xD3C128", Offset = "0xD3C128", VA = "0xD3C128")]
		public void AdjustSpeed(float newSpeed)
		{
		}

		[Token(Token = "0x6001B2C")]
		[Address(RVA = "0xD3C130", Offset = "0xD3C130", VA = "0xD3C130")]
		public MagicFireProjectile()
		{
		}
	}
	[Token(Token = "0x2000505")]
	public class MagicLoopScript : MonoBehaviour
	{
		[Token(Token = "0x2000506")]
		[CompilerGenerated]
		private sealed class <EffectLoop>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001ABF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001AC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001AC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLoopScript <>4__this;

			[Token(Token = "0x4001AC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GameObject <effectPlayer>5__2;

			[Token(Token = "0x17000436")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B34")]
				[Address(RVA = "0xD3C3E4", Offset = "0xD3C3E4", VA = "0xD3C3E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000437")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B36")]
				[Address(RVA = "0xD3C42C", Offset = "0xD3C42C", VA = "0xD3C42C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B31")]
			[Address(RVA = "0xD3C1F8", Offset = "0xD3C1F8", VA = "0xD3C1F8")]
			[DebuggerHidden]
			public <EffectLoop>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001B32")]
			[Address(RVA = "0xD3C230", Offset = "0xD3C230", VA = "0xD3C230", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B33")]
			[Address(RVA = "0xD3C234", Offset = "0xD3C234", VA = "0xD3C234", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B35")]
			[Address(RVA = "0xD3C3EC", Offset = "0xD3C3EC", VA = "0xD3C3EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject chosenEffect;

		[Token(Token = "0x4001ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float loopTimeLimit;

		[Token(Token = "0x6001B2D")]
		[Address(RVA = "0xD3C140", Offset = "0xD3C140", VA = "0xD3C140")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B2E")]
		[Address(RVA = "0xD3C144", Offset = "0xD3C144", VA = "0xD3C144")]
		public void PlayEffect()
		{
		}

		[Token(Token = "0x6001B2F")]
		[Address(RVA = "0xD3C190", Offset = "0xD3C190", VA = "0xD3C190")]
		[IteratorStateMachine(typeof(<EffectLoop>d__4))]
		private IEnumerator EffectLoop()
		{
			return null;
		}

		[Token(Token = "0x6001B30")]
		[Address(RVA = "0xD3C220", Offset = "0xD3C220", VA = "0xD3C220")]
		public MagicLoopScript()
		{
		}
	}
	[Token(Token = "0x2000507")]
	public class MagicLightFade : MonoBehaviour
	{
		[Token(Token = "0x4001AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Seconds to dim the light")]
		public float life;

		[Token(Token = "0x4001AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool killAfterLife;

		[Token(Token = "0x4001AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Light li;

		[Token(Token = "0x4001AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float initIntensity;

		[Token(Token = "0x6001B37")]
		[Address(RVA = "0xD3C434", Offset = "0xD3C434", VA = "0xD3C434")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B38")]
		[Address(RVA = "0xD3C53C", Offset = "0xD3C53C", VA = "0xD3C53C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B39")]
		[Address(RVA = "0xD3C678", Offset = "0xD3C678", VA = "0xD3C678")]
		public MagicLightFade()
		{
		}
	}
	[Token(Token = "0x2000508")]
	public class MagicRotation : MonoBehaviour
	{
		[Token(Token = "0x2000509")]
		public enum spaceEnum
		{
			[Token(Token = "0x4001ACA")]
			Local,
			[Token(Token = "0x4001ACB")]
			World
		}

		[Token(Token = "0x4001AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Rotate axises by degrees per second")]
		public UnityEngine.Vector3 rotateVector;

		[Token(Token = "0x4001AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public spaceEnum rotateSpace;

		[Token(Token = "0x6001B3A")]
		[Address(RVA = "0xD3C694", Offset = "0xD3C694", VA = "0xD3C694")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B3B")]
		[Address(RVA = "0xD3C698", Offset = "0xD3C698", VA = "0xD3C698")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B3C")]
		[Address(RVA = "0xD3C76C", Offset = "0xD3C76C", VA = "0xD3C76C")]
		public MagicRotation()
		{
		}
	}
}
namespace GAP_ParticleSystemController
{
	[Serializable]
	[Token(Token = "0x200050A")]
	public class ParticleSystemOriginalSettings
	{
		[Token(Token = "0x4001ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SerializableMinMaxGradient _startColor;

		[Token(Token = "0x4001ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SerializableMinMaxGradient _colorOverLifetimeC;

		[Token(Token = "0x4001ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SerializableMinMaxCurve _startSize;

		[Token(Token = "0x4001ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SerializableMinMaxCurve _startSizeX;

		[Token(Token = "0x4001AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SerializableMinMaxCurve _startSizeY;

		[Token(Token = "0x4001AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SerializableMinMaxCurve _startSizeZ;

		[Token(Token = "0x4001AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SerializableMinMaxCurve _startSpeed;

		[Token(Token = "0x4001AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SerializableMinMaxCurve _startDelay;

		[Token(Token = "0x4001AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SerializableMinMaxCurve _startLifetime;

		[Token(Token = "0x4001AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SerializableMinMaxCurve _velocityOverLifetimeX;

		[Token(Token = "0x4001AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public SerializableMinMaxCurve _velocityOverLifetimeY;

		[Token(Token = "0x4001AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public SerializableMinMaxCurve _velocityOverLifetimeZ;

		[Token(Token = "0x4001AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public SerializableVector3 _localPosition;

		[Token(Token = "0x4001AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public SerializableGradient _trailGradient;

		[Token(Token = "0x4001ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float _duration;

		[Token(Token = "0x4001ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float _shapeRadius;

		[Token(Token = "0x4001ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float _trailWidthMultiplier;

		[Token(Token = "0x4001ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float _trailTime;

		[Token(Token = "0x4001ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool _active;

		[Token(Token = "0x4001ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool _loop;

		[Token(Token = "0x4001AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		public bool _prewarm;

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0xD3C7CC", Offset = "0xD3C7CC", VA = "0xD3C7CC")]
		public ParticleSystemOriginalSettings()
		{
		}
	}
	[Token(Token = "0x200050B")]
	[ExecuteInEditMode]
	public class ParticleSystemController : MonoBehaviour
	{
		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float size;

		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float speed;

		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool loop;

		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool prewarm;

		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool lights;

		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool trails;

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool changeColor;

		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newMaxColor;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color newMinColor;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<GameObject> ParticleSystems;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<bool> ActiveParticleSystems;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<ParticleSystemOriginalSettings> psOriginalSettingsList;

		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0xD3C7D4", Offset = "0xD3C7D4", VA = "0xD3C7D4")]
		public void UpdateParticleSystem()
		{
		}

		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0xD3F414", Offset = "0xD3F414", VA = "0xD3F414")]
		public void ChangeColorOnly()
		{
		}

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0xD3FEB8", Offset = "0xD3FEB8", VA = "0xD3FEB8")]
		public void ResizeOnly()
		{
		}

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0xD406F4", Offset = "0xD406F4", VA = "0xD406F4")]
		public void ResetParticleSystem()
		{
		}

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0xD3ED34", Offset = "0xD3ED34", VA = "0xD3ED34")]
		public Color ChangeHUE(Color oldColor, Color newColor)
		{
			return default(Color);
		}

		[Token(Token = "0x6001B43")]
		[Address(RVA = "0xD3EDCC", Offset = "0xD3EDCC", VA = "0xD3EDCC")]
		public Gradient ChangeGradientColor(Gradient oldGradient, Color newMaxColor, Color newMinColor)
		{
			return null;
		}

		[Token(Token = "0x6001B44")]
		[Address(RVA = "0xD3FC38", Offset = "0xD3FC38", VA = "0xD3FC38")]
		public void FillLists()
		{
		}

		[Token(Token = "0x6001B45")]
		[Address(RVA = "0xD41304", Offset = "0xD41304", VA = "0xD41304")]
		public void EmptyLists()
		{
		}

		[Token(Token = "0x6001B46")]
		[Address(RVA = "0xD40E84", Offset = "0xD40E84", VA = "0xD40E84")]
		private void AddChildRecurvsively(Transform transf)
		{
		}

		[Token(Token = "0x6001B47")]
		[Address(RVA = "0xD4138C", Offset = "0xD4138C", VA = "0xD4138C")]
		public ParticleSystemController()
		{
		}
	}
	[Token(Token = "0x200050C")]
	public static class SaveParticleSystemScript
	{
		[Token(Token = "0x6001B48")]
		[Address(RVA = "0xD3F174", Offset = "0xD3F174", VA = "0xD3F174")]
		public static void SaveVFX(GameObject prefabVFX, List<ParticleSystemOriginalSettings> psOriginalSettingsList)
		{
		}

		[Token(Token = "0x6001B49")]
		[Address(RVA = "0xD3E5DC", Offset = "0xD3E5DC", VA = "0xD3E5DC")]
		public static List<ParticleSystemOriginalSettings> LoadVFX(GameObject prefabVFX)
		{
			return null;
		}

		[Token(Token = "0x6001B4A")]
		[Address(RVA = "0xD3E054", Offset = "0xD3E054", VA = "0xD3E054")]
		public static bool CheckExistingFile(GameObject prefabVFX)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B4B")]
		[Address(RVA = "0xD414B8", Offset = "0xD414B8", VA = "0xD414B8")]
		private static string GetPrefabFolder(GameObject prefabVFX)
		{
			return null;
		}

		[Token(Token = "0x6001B4C")]
		[Address(RVA = "0xD414B0", Offset = "0xD414B0", VA = "0xD414B0")]
		private static string GetPrefabFolder2018_3(GameObject prefabVFX)
		{
			return null;
		}

		[Token(Token = "0x6001B4D")]
		[Address(RVA = "0xD3F410", Offset = "0xD3F410", VA = "0xD3F410")]
		public static void SaveNestedPrefab(GameObject prefab)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200050D")]
	public class SerializableMinMaxGradient
	{
		[Token(Token = "0x4001AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SerializableColor color;

		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SerializableColor colorMax;

		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SerializableColor colorMin;

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SerializableAlphaKeys gradientAlphaKeys;

		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SerializableColorKeys gradientColorKeys;

		[Token(Token = "0x4001AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SerializableAlphaKeys gradientMaxAlphaKeys;

		[Token(Token = "0x4001AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SerializableColorKeys gradientMaxColorKeys;

		[Token(Token = "0x4001AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SerializableAlphaKeys gradientMinAlphaKeys;

		[Token(Token = "0x4001AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SerializableColorKeys gradientMinColorKeys;

		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SerializablePSGradientMode gradientMode;

		[Token(Token = "0x6001B4E")]
		[Address(RVA = "0xD3E090", Offset = "0xD3E090", VA = "0xD3E090")]
		public SerializableMinMaxGradient(ParticleSystem.MinMaxGradient minMaxGradient)
		{
		}

		[Token(Token = "0x6001B4F")]
		[Address(RVA = "0xD3E7DC", Offset = "0xD3E7DC", VA = "0xD3E7DC")]
		public ParticleSystem.MinMaxGradient GetMinMaxGradient()
		{
			return default(ParticleSystem.MinMaxGradient);
		}
	}
	[Serializable]
	[Token(Token = "0x200050E")]
	public class SerializableMinMaxCurve
	{
		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float constant;

		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float constantMax;

		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float constantMin;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SerializableAnimationCurve curve;

		[Token(Token = "0x4001AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SerializableAnimationCurve curveMax;

		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SerializableAnimationCurve curveMin;

		[Token(Token = "0x4001AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float curveMultiplier;

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SerializablePSCurveMode curveMode;

		[Token(Token = "0x6001B50")]
		[Address(RVA = "0xD3E3E4", Offset = "0xD3E3E4", VA = "0xD3E3E4")]
		public SerializableMinMaxCurve(ParticleSystem.MinMaxCurve minMaxCurve)
		{
		}

		[Token(Token = "0x6001B51")]
		[Address(RVA = "0xD3EB1C", Offset = "0xD3EB1C", VA = "0xD3EB1C")]
		public ParticleSystem.MinMaxCurve GetMinMaxCurve()
		{
			return default(ParticleSystem.MinMaxCurve);
		}
	}
	[Serializable]
	[Token(Token = "0x200050F")]
	public class SerializableAnimationCurve
	{
		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SerializableKeyFrames[] keys;

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SerializableWrapMode postWrapMode;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SerializableWrapMode preWrapMode;

		[Token(Token = "0x6001B52")]
		[Address(RVA = "0xD41B48", Offset = "0xD41B48", VA = "0xD41B48")]
		public SerializableAnimationCurve(AnimationCurve animCurve)
		{
		}

		[Token(Token = "0x6001B53")]
		[Address(RVA = "0xD41E2C", Offset = "0xD41E2C", VA = "0xD41E2C")]
		public AnimationCurve GetAnimationCurve()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000510")]
	public class SerializableKeyFrames
	{
		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float inTangent;

		[Token(Token = "0x4001B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float outTangent;

		[Token(Token = "0x4001B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int tangentMode;

		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float time;

		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float value;

		[Token(Token = "0x6001B54")]
		[Address(RVA = "0xD41FB0", Offset = "0xD41FB0", VA = "0xD41FB0")]
		public SerializableKeyFrames(Keyframe keyFrame)
		{
		}

		[Token(Token = "0x6001B55")]
		[Address(RVA = "0xD420A4", Offset = "0xD420A4", VA = "0xD420A4")]
		public Keyframe GetKeyFrames()
		{
			return default(Keyframe);
		}
	}
	[Serializable]
	[Token(Token = "0x2000511")]
	public class SerializableAlphaKeys
	{
		[Token(Token = "0x4001B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] alpha;

		[Token(Token = "0x4001B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] time;

		[Token(Token = "0x6001B56")]
		[Address(RVA = "0xD41580", Offset = "0xD41580", VA = "0xD41580")]
		public SerializableAlphaKeys(GradientAlphaKey[] gradAlphaKeys)
		{
		}

		[Token(Token = "0x6001B57")]
		[Address(RVA = "0xD4191C", Offset = "0xD4191C", VA = "0xD4191C")]
		public GradientAlphaKey[] GetAlphaKeys()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000512")]
	public class SerializableColorKeys
	{
		[Token(Token = "0x4001B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SerializableColor[] color;

		[Token(Token = "0x4001B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] time;

		[Token(Token = "0x6001B58")]
		[Address(RVA = "0xD41668", Offset = "0xD41668", VA = "0xD41668")]
		public SerializableColorKeys(GradientColorKey[] gradColorKeys)
		{
		}

		[Token(Token = "0x6001B59")]
		[Address(RVA = "0xD419EC", Offset = "0xD419EC", VA = "0xD419EC")]
		public GradientColorKey[] GetColorKeys()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000513")]
	public class SerializableColor
	{
		[Token(Token = "0x4001B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float R;

		[Token(Token = "0x4001B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float G;

		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float B;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float A;

		[Token(Token = "0x6001B5A")]
		[Address(RVA = "0xD41540", Offset = "0xD41540", VA = "0xD41540")]
		public SerializableColor(Color color)
		{
		}

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0xD41910", Offset = "0xD41910", VA = "0xD41910")]
		public Color GetColor()
		{
			return default(Color);
		}
	}
	[Serializable]
	[Token(Token = "0x2000514")]
	public class SerializableVector3
	{
		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float x;

		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float y;

		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float z;

		[Token(Token = "0x6001B5C")]
		[Address(RVA = "0xD3E5A0", Offset = "0xD3E5A0", VA = "0xD3E5A0")]
		public SerializableVector3(UnityEngine.Vector3 v3)
		{
		}

		[Token(Token = "0x6001B5D")]
		[Address(RVA = "0xD3ED28", Offset = "0xD3ED28", VA = "0xD3ED28")]
		public UnityEngine.Vector3 GetVector3()
		{
			return default(UnityEngine.Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000515")]
	public class SerializableGradient
	{
		[Token(Token = "0x4001B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SerializableAlphaKeys gradientAlphaKeys;

		[Token(Token = "0x4001B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SerializableColorKeys gradientColorKeys;

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SerializableGradientMode gradientMode;

		[Token(Token = "0x6001B5E")]
		[Address(RVA = "0xD3EFA8", Offset = "0xD3EFA8", VA = "0xD3EFA8")]
		public SerializableGradient(Gradient gradient)
		{
		}

		[Token(Token = "0x6001B5F")]
		[Address(RVA = "0xD3F0C0", Offset = "0xD3F0C0", VA = "0xD3F0C0")]
		public Gradient GetGradient()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000516")]
	public class SerializablePSGradientMode
	{
		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string mode;

		[Token(Token = "0x6001B60")]
		[Address(RVA = "0xD414C0", Offset = "0xD414C0", VA = "0xD414C0")]
		public SerializablePSGradientMode(ParticleSystemGradientMode psGradientMode)
		{
		}

		[Token(Token = "0x6001B61")]
		[Address(RVA = "0xD417F0", Offset = "0xD417F0", VA = "0xD417F0")]
		public ParticleSystemGradientMode GetGradientMode()
		{
			return default(ParticleSystemGradientMode);
		}
	}
	[Serializable]
	[Token(Token = "0x2000517")]
	public class SerializableGradientMode
	{
		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string mode;

		[Token(Token = "0x6001B62")]
		[Address(RVA = "0xD4227C", Offset = "0xD4227C", VA = "0xD4227C")]
		public SerializableGradientMode(GradientMode gradientMode)
		{
		}

		[Token(Token = "0x6001B63")]
		[Address(RVA = "0xD422FC", Offset = "0xD422FC", VA = "0xD422FC")]
		public GradientMode GetGradientMode()
		{
			return default(GradientMode);
		}
	}
	[Serializable]
	[Token(Token = "0x2000518")]
	public class SerializablePSCurveMode
	{
		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string mode;

		[Token(Token = "0x6001B64")]
		[Address(RVA = "0xD41AC8", Offset = "0xD41AC8", VA = "0xD41AC8")]
		public SerializablePSCurveMode(ParticleSystemCurveMode psCurveMode)
		{
		}

		[Token(Token = "0x6001B65")]
		[Address(RVA = "0xD41D3C", Offset = "0xD41D3C", VA = "0xD41D3C")]
		public ParticleSystemCurveMode GetCurveMode()
		{
			return default(ParticleSystemCurveMode);
		}
	}
	[Serializable]
	[Token(Token = "0x2000519")]
	public class SerializableWrapMode
	{
		[Token(Token = "0x4001B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string mode;

		[Token(Token = "0x6001B66")]
		[Address(RVA = "0xD42024", Offset = "0xD42024", VA = "0xD42024")]
		public SerializableWrapMode(WrapMode wrapMode)
		{
		}

		[Token(Token = "0x6001B67")]
		[Address(RVA = "0xD42134", Offset = "0xD42134", VA = "0xD42134")]
		public WrapMode GetWrapMode()
		{
			return default(WrapMode);
		}
	}
}
namespace OculusSampleFramework
{
	[Token(Token = "0x200051A")]
	public class ColorGrabbable : OVRGrabbable
	{
		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color COLOR_GRAB;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Color COLOR_HIGHLIGHT;

		[Token(Token = "0x4001B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Color m_color;

		[Token(Token = "0x4001B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private MeshRenderer[] m_meshRenderers;

		[Token(Token = "0x4001B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool m_highlight;

		[Token(Token = "0x17000438")]
		public bool Highlight
		{
			[Token(Token = "0x6001B68")]
			[Address(RVA = "0xD42384", Offset = "0xD42384", VA = "0xD42384")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B69")]
			[Address(RVA = "0xD4238C", Offset = "0xD4238C", VA = "0xD4238C")]
			set
			{
			}
		}

		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0xD42398", Offset = "0xD42398", VA = "0xD42398")]
		protected void UpdateColor()
		{
		}

		[Token(Token = "0x6001B6B")]
		[Address(RVA = "0xD42538", Offset = "0xD42538", VA = "0xD42538", Slot = "4")]
		public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
		{
		}

		[Token(Token = "0x6001B6C")]
		[Address(RVA = "0xD42554", Offset = "0xD42554", VA = "0xD42554")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B6D")]
		[Address(RVA = "0xD42444", Offset = "0xD42444", VA = "0xD42444")]
		private void SetColor(Color color)
		{
		}

		[Token(Token = "0x6001B6E")]
		[Address(RVA = "0xD427B8", Offset = "0xD427B8", VA = "0xD427B8")]
		public ColorGrabbable()
		{
		}
	}
	[Token(Token = "0x200051B")]
	public class DistanceGrabbable : OVRGrabbable
	{
		[Token(Token = "0x4001B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string m_materialColorField;

		[Token(Token = "0x4001B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GrabbableCrosshair m_crosshair;

		[Token(Token = "0x4001B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GrabManager m_crosshairManager;

		[Token(Token = "0x4001B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Renderer m_renderer;

		[Token(Token = "0x4001B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MaterialPropertyBlock m_mpb;

		[Token(Token = "0x4001B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool m_inRange;

		[Token(Token = "0x4001B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool m_targeted;

		[Token(Token = "0x17000439")]
		public bool InRange
		{
			[Token(Token = "0x6001B70")]
			[Address(RVA = "0xD42830", Offset = "0xD42830", VA = "0xD42830")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B71")]
			[Address(RVA = "0xD42838", Offset = "0xD42838", VA = "0xD42838")]
			set
			{
			}
		}

		[Token(Token = "0x1700043A")]
		public bool Targeted
		{
			[Token(Token = "0x6001B72")]
			[Address(RVA = "0xD429A4", Offset = "0xD429A4", VA = "0xD429A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B73")]
			[Address(RVA = "0xD429AC", Offset = "0xD429AC", VA = "0xD429AC")]
			set
			{
			}
		}

		[Token(Token = "0x6001B74")]
		[Address(RVA = "0xD429B8", Offset = "0xD429B8", VA = "0xD429B8", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001B75")]
		[Address(RVA = "0xD42844", Offset = "0xD42844", VA = "0xD42844")]
		private void RefreshCrosshair()
		{
		}

		[Token(Token = "0x6001B76")]
		[Address(RVA = "0xD42B74", Offset = "0xD42B74", VA = "0xD42B74")]
		public DistanceGrabbable()
		{
		}
	}
	[Token(Token = "0x200051C")]
	[RequireComponent(typeof(Rigidbody))]
	public class DistanceGrabber : OVRGrabber
	{
		[Token(Token = "0x4001B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private float m_spherecastRadius;

		[Token(Token = "0x4001B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private float m_noSnapThreshhold;

		[Token(Token = "0x4001B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private bool m_useSpherecast;

		[Token(Token = "0x4001B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[SerializeField]
		public bool m_preventGrabThroughWalls;

		[Token(Token = "0x4001B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float m_objectPullVelocity;

		[Token(Token = "0x4001B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float m_objectPullMaxRotationRate;

		[Token(Token = "0x4001B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool m_movingObjectToHand;

		[Token(Token = "0x4001B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private float m_maxGrabDistance;

		[Token(Token = "0x4001B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private int m_grabObjectsInLayer;

		[Token(Token = "0x4001B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private int m_obstructionLayer;

		[Token(Token = "0x4001B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private DistanceGrabber m_otherHand;

		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected DistanceGrabbable m_target;

		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Collider m_targetCollider;

		[Token(Token = "0x1700043B")]
		public bool UseSpherecast
		{
			[Token(Token = "0x6001B77")]
			[Address(RVA = "0xD42B7C", Offset = "0xD42B7C", VA = "0xD42B7C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B78")]
			[Address(RVA = "0xD42B84", Offset = "0xD42B84", VA = "0xD42B84")]
			set
			{
			}
		}

		[Token(Token = "0x6001B79")]
		[Address(RVA = "0xD42BA0", Offset = "0xD42BA0", VA = "0xD42BA0", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0xD42DA4", Offset = "0xD42DA4", VA = "0xD42DA4", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0xD43638", Offset = "0xD43638", VA = "0xD43638", Slot = "8")]
		protected override void GrabBegin()
		{
		}

		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0xD43B8C", Offset = "0xD43B8C", VA = "0xD43B8C", Slot = "9")]
		protected override void MoveGrabbedObject(UnityEngine.Vector3 pos, Quaternion rot, bool forceTeleport = false)
		{
		}

		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0xD43F9C", Offset = "0xD43F9C", VA = "0xD43F9C")]
		private static DistanceGrabbable HitInfoToGrabbable(RaycastHit hitInfo)
		{
			return null;
		}

		[Token(Token = "0x6001B7E")]
		[Address(RVA = "0xD42FAC", Offset = "0xD42FAC", VA = "0xD42FAC")]
		protected bool FindTarget(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B7F")]
		[Address(RVA = "0xD44088", Offset = "0xD44088", VA = "0xD44088")]
		protected bool FindTargetWithSpherecast(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B80")]
		[Address(RVA = "0xD44428", Offset = "0xD44428", VA = "0xD44428", Slot = "10")]
		protected override void GrabVolumeEnable(bool enabled)
		{
		}

		[Token(Token = "0x6001B81")]
		[Address(RVA = "0xD44440", Offset = "0xD44440", VA = "0xD44440", Slot = "11")]
		protected override void OffhandGrabbed(OVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x6001B82")]
		[Address(RVA = "0xD44448", Offset = "0xD44448", VA = "0xD44448")]
		public DistanceGrabber()
		{
		}
	}
	[Token(Token = "0x200051D")]
	public class GrabbableCrosshair : MonoBehaviour
	{
		[Token(Token = "0x200051E")]
		public enum CrosshairState
		{
			[Token(Token = "0x4001B38")]
			Disabled,
			[Token(Token = "0x4001B39")]
			Enabled,
			[Token(Token = "0x4001B3A")]
			Targeted
		}

		[Token(Token = "0x4001B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CrosshairState m_state;

		[Token(Token = "0x4001B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_centerEyeAnchor;

		[Token(Token = "0x4001B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject m_targetedCrosshair;

		[Token(Token = "0x4001B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_enabledCrosshair;

		[Token(Token = "0x6001B83")]
		[Address(RVA = "0xD44468", Offset = "0xD44468", VA = "0xD44468")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B84")]
		[Address(RVA = "0xD42AE8", Offset = "0xD42AE8", VA = "0xD42AE8")]
		public void SetState(CrosshairState cs)
		{
		}

		[Token(Token = "0x6001B85")]
		[Address(RVA = "0xD444C8", Offset = "0xD444C8", VA = "0xD444C8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B86")]
		[Address(RVA = "0xD44500", Offset = "0xD44500", VA = "0xD44500")]
		public GrabbableCrosshair()
		{
		}
	}
	[Token(Token = "0x200051F")]
	public class GrabManager : MonoBehaviour
	{
		[Token(Token = "0x4001B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Collider m_grabVolume;

		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color OutlineColorInRange;

		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color OutlineColorHighlighted;

		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color OutlineColorOutOfRange;

		[Token(Token = "0x6001B87")]
		[Address(RVA = "0xD44508", Offset = "0xD44508", VA = "0xD44508")]
		private void OnTriggerEnter(Collider otherCollider)
		{
		}

		[Token(Token = "0x6001B88")]
		[Address(RVA = "0xD445B4", Offset = "0xD445B4", VA = "0xD445B4")]
		private void OnTriggerExit(Collider otherCollider)
		{
		}

		[Token(Token = "0x6001B89")]
		[Address(RVA = "0xD4465C", Offset = "0xD4465C", VA = "0xD4465C")]
		public GrabManager()
		{
		}
	}
	[Token(Token = "0x2000520")]
	public class PauseOnInputLoss : MonoBehaviour
	{
		[Token(Token = "0x6001B8A")]
		[Address(RVA = "0xD44664", Offset = "0xD44664", VA = "0xD44664")]
		private void Start()
		{
		}

		[Token(Token = "0x6001B8B")]
		[Address(RVA = "0xD44750", Offset = "0xD44750", VA = "0xD44750")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6001B8C")]
		[Address(RVA = "0xD4475C", Offset = "0xD4475C", VA = "0xD4475C")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6001B8D")]
		[Address(RVA = "0xD44768", Offset = "0xD44768", VA = "0xD44768")]
		public PauseOnInputLoss()
		{
		}
	}
	[Token(Token = "0x2000521")]
	public class BoneCapsuleTriggerLogic : MonoBehaviour
	{
		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableToolTags ToolTags;

		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HashSet<ColliderZone> CollidersTouchingUs;

		[Token(Token = "0x4001B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ColliderZone> _elementsToCleanUp;

		[Token(Token = "0x6001B8E")]
		[Address(RVA = "0xD44770", Offset = "0xD44770", VA = "0xD44770")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001B8F")]
		[Address(RVA = "0xD447C0", Offset = "0xD447C0", VA = "0xD447C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001B90")]
		[Address(RVA = "0xD44B88", Offset = "0xD44B88", VA = "0xD44B88")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001B91")]
		[Address(RVA = "0xD44C74", Offset = "0xD44C74", VA = "0xD44C74")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001B92")]
		[Address(RVA = "0xD447C4", Offset = "0xD447C4", VA = "0xD447C4")]
		private void CleanUpDeadColliders()
		{
		}

		[Token(Token = "0x6001B93")]
		[Address(RVA = "0xD44D60", Offset = "0xD44D60", VA = "0xD44D60")]
		public BoneCapsuleTriggerLogic()
		{
		}
	}
	[Token(Token = "0x2000522")]
	public class ButtonController : Interactable
	{
		[Token(Token = "0x2000523")]
		public enum ContactTest
		{
			[Token(Token = "0x4001B51")]
			PerpenTest,
			[Token(Token = "0x4001B52")]
			BackwardsPress
		}

		[Token(Token = "0x4001B42")]
		private const float ENTRY_DOT_THRESHOLD = 0.8f;

		[Token(Token = "0x4001B43")]
		private const float PERP_DOT_THRESHOLD = 0.5f;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject _proximityZone;

		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _contactZone;

		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _actionZone;

		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ContactTest[] _contactTests;

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform _buttonPlaneCenter;

		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _makeSureToolIsOnPositiveSide;

		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private UnityEngine.Vector3 _localButtonDirection;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private InteractableToolTags[] _allValidToolsTags;

		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _toolTagsMask;

		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private bool _allowMultipleNearFieldInteraction;

		[Token(Token = "0x4001B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Dictionary<InteractableTool, InteractableState> _toolToState;

		[Token(Token = "0x1700043C")]
		public override int ValidToolTagsMask
		{
			[Token(Token = "0x6001B94")]
			[Address(RVA = "0xD44E20", Offset = "0xD44E20", VA = "0xD44E20", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700043D")]
		public UnityEngine.Vector3 LocalButtonDirection
		{
			[Token(Token = "0x6001B95")]
			[Address(RVA = "0xD44E28", Offset = "0xD44E28", VA = "0xD44E28")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x1700043E")]
		public InteractableState CurrentButtonState
		{
			[Token(Token = "0x6001B96")]
			[Address(RVA = "0xD44E34", Offset = "0xD44E34", VA = "0xD44E34")]
			[CompilerGenerated]
			get
			{
				return default(InteractableState);
			}
			[Token(Token = "0x6001B97")]
			[Address(RVA = "0xD44E3C", Offset = "0xD44E3C", VA = "0xD44E3C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0xD44E44", Offset = "0xD44E44", VA = "0xD44E44", Slot = "9")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0xD44F24", Offset = "0xD44F24", VA = "0xD44F24")]
		private void FireInteractionEventsOnDepth(InteractableCollisionDepth oldDepth, InteractableTool collidingTool, InteractionType interactionType)
		{
		}

		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0xD45114", Offset = "0xD45114", VA = "0xD45114", Slot = "8")]
		public override void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth)
		{
		}

		[Token(Token = "0x6001B9B")]
		[Address(RVA = "0xD456DC", Offset = "0xD456DC", VA = "0xD456DC")]
		private InteractableState GetUpcomingStateNearField(InteractableState oldState, InteractableCollisionDepth newCollisionDepth, bool toolIsInActionZone, bool toolIsInContactZone, bool toolIsInProximity, bool validContact, bool onPositiveSideOfInteractable)
		{
			return default(InteractableState);
		}

		[Token(Token = "0x6001B9C")]
		[Address(RVA = "0xD4578C", Offset = "0xD4578C", VA = "0xD4578C")]
		public void ForceResetButton()
		{
		}

		[Token(Token = "0x6001B9D")]
		[Address(RVA = "0xD45600", Offset = "0xD45600", VA = "0xD45600")]
		private bool IsValidContact(InteractableTool collidingTool, UnityEngine.Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B9E")]
		[Address(RVA = "0xD4589C", Offset = "0xD4589C", VA = "0xD4589C")]
		private bool PassEntryTest(InteractableTool collidingTool, UnityEngine.Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B9F")]
		[Address(RVA = "0xD459A8", Offset = "0xD459A8", VA = "0xD459A8")]
		private bool PassPerpTest(InteractableTool collidingTool, UnityEngine.Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BA0")]
		[Address(RVA = "0xD45A28", Offset = "0xD45A28", VA = "0xD45A28")]
		public ButtonController()
		{
		}
	}
	[Token(Token = "0x2000524")]
	public class ButtonTriggerZone : MonoBehaviour, ColliderZone
	{
		[Token(Token = "0x4001B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _parentInteractableObj;

		[Token(Token = "0x1700043F")]
		public Collider Collider
		{
			[Token(Token = "0x6001BA1")]
			[Address(RVA = "0xD45B2C", Offset = "0xD45B2C", VA = "0xD45B2C", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BA2")]
			[Address(RVA = "0xD45B34", Offset = "0xD45B34", VA = "0xD45B34")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000440")]
		public Interactable ParentInteractable
		{
			[Token(Token = "0x6001BA3")]
			[Address(RVA = "0xD45B3C", Offset = "0xD45B3C", VA = "0xD45B3C", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BA4")]
			[Address(RVA = "0xD45B44", Offset = "0xD45B44", VA = "0xD45B44")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000441")]
		public InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6001BA5")]
			[Address(RVA = "0xD45B4C", Offset = "0xD45B4C", VA = "0xD45B4C", Slot = "6")]
			get
			{
				return default(InteractableCollisionDepth);
			}
		}

		[Token(Token = "0x6001BA6")]
		[Address(RVA = "0xD45B9C", Offset = "0xD45B9C", VA = "0xD45B9C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001BA7")]
		[Address(RVA = "0xD45C1C", Offset = "0xD45C1C", VA = "0xD45C1C")]
		public ButtonTriggerZone()
		{
		}
	}
	[Token(Token = "0x2000525")]
	public interface ColliderZone
	{
		[Token(Token = "0x17000442")]
		Collider Collider
		{
			[Token(Token = "0x6001BA8")]
			get;
		}

		[Token(Token = "0x17000443")]
		Interactable ParentInteractable
		{
			[Token(Token = "0x6001BA9")]
			get;
		}

		[Token(Token = "0x17000444")]
		InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6001BAA")]
			get;
		}
	}
	[Token(Token = "0x2000526")]
	public class ColliderZoneArgs : EventArgs
	{
		[Token(Token = "0x4001B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ColliderZone Collider;

		[Token(Token = "0x4001B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float FrameTime;

		[Token(Token = "0x4001B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableTool CollidingTool;

		[Token(Token = "0x4001B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly InteractionType InteractionT;

		[Token(Token = "0x6001BAB")]
		[Address(RVA = "0xD45080", Offset = "0xD45080", VA = "0xD45080")]
		public ColliderZoneArgs(ColliderZone collider, float frameTime, InteractableTool collidingTool, InteractionType interactionType)
		{
		}
	}
	[Token(Token = "0x2000527")]
	public enum InteractionType
	{
		[Token(Token = "0x4001B5B")]
		Enter,
		[Token(Token = "0x4001B5C")]
		Stay,
		[Token(Token = "0x4001B5D")]
		Exit
	}
	[Token(Token = "0x2000528")]
	public class HandsManager : MonoBehaviour
	{
		[Token(Token = "0x2000529")]
		public enum HandsVisualMode
		{
			[Token(Token = "0x4001B6F")]
			Mesh,
			[Token(Token = "0x4001B70")]
			Skeleton,
			[Token(Token = "0x4001B71")]
			Both
		}

		[Token(Token = "0x200052A")]
		[CompilerGenerated]
		private sealed class <FindSkeletonVisualGameObjects>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandsManager <>4__this;

			[Token(Token = "0x17000450")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BCD")]
				[Address(RVA = "0xD47F84", Offset = "0xD47F84", VA = "0xD47F84", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000451")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BCF")]
				[Address(RVA = "0xD47FCC", Offset = "0xD47FCC", VA = "0xD47FCC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BCA")]
			[Address(RVA = "0xD47D64", Offset = "0xD47D64", VA = "0xD47D64")]
			[DebuggerHidden]
			public <FindSkeletonVisualGameObjects>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6001BCB")]
			[Address(RVA = "0xD47D8C", Offset = "0xD47D8C", VA = "0xD47D8C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BCC")]
			[Address(RVA = "0xD47D90", Offset = "0xD47D90", VA = "0xD47D90", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BCE")]
			[Address(RVA = "0xD47F8C", Offset = "0xD47F8C", VA = "0xD47F8C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B5E")]
		private const string SKELETON_VISUALIZER_NAME = "SkeletonRenderer";

		[Token(Token = "0x4001B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _leftHand;

		[Token(Token = "0x4001B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _rightHand;

		[Token(Token = "0x4001B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HandsVisualMode VisualMode;

		[Token(Token = "0x4001B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private OVRHand[] _hand;

		[Token(Token = "0x4001B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OVRSkeleton[] _handSkeleton;

		[Token(Token = "0x4001B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRSkeletonRenderer[] _handSkeletonRenderer;

		[Token(Token = "0x4001B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OVRMesh[] _handMesh;

		[Token(Token = "0x4001B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private OVRMeshRenderer[] _handMeshRenderer;

		[Token(Token = "0x4001B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SkinnedMeshRenderer _leftMeshRenderer;

		[Token(Token = "0x4001B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SkinnedMeshRenderer _rightMeshRenderer;

		[Token(Token = "0x4001B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject _leftSkeletonVisual;

		[Token(Token = "0x4001B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject _rightSkeletonVisual;

		[Token(Token = "0x4001B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _currentHandAlpha;

		[Token(Token = "0x4001B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int HandAlphaId;

		[Token(Token = "0x17000445")]
		public OVRHand RightHand
		{
			[Token(Token = "0x6001BAC")]
			[Address(RVA = "0xD45C24", Offset = "0xD45C24", VA = "0xD45C24")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BAD")]
			[Address(RVA = "0xD45C50", Offset = "0xD45C50", VA = "0xD45C50")]
			private set
			{
			}
		}

		[Token(Token = "0x17000446")]
		public OVRSkeleton RightHandSkeleton
		{
			[Token(Token = "0x6001BAE")]
			[Address(RVA = "0xD45CAC", Offset = "0xD45CAC", VA = "0xD45CAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BAF")]
			[Address(RVA = "0xD45CD8", Offset = "0xD45CD8", VA = "0xD45CD8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000447")]
		public OVRSkeletonRenderer RightHandSkeletonRenderer
		{
			[Token(Token = "0x6001BB0")]
			[Address(RVA = "0xD45D34", Offset = "0xD45D34", VA = "0xD45D34")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BB1")]
			[Address(RVA = "0xD45D60", Offset = "0xD45D60", VA = "0xD45D60")]
			private set
			{
			}
		}

		[Token(Token = "0x17000448")]
		public OVRMesh RightHandMesh
		{
			[Token(Token = "0x6001BB2")]
			[Address(RVA = "0xD45DBC", Offset = "0xD45DBC", VA = "0xD45DBC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BB3")]
			[Address(RVA = "0xD45DE8", Offset = "0xD45DE8", VA = "0xD45DE8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000449")]
		public OVRMeshRenderer RightHandMeshRenderer
		{
			[Token(Token = "0x6001BB4")]
			[Address(RVA = "0xD45E44", Offset = "0xD45E44", VA = "0xD45E44")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BB5")]
			[Address(RVA = "0xD45E70", Offset = "0xD45E70", VA = "0xD45E70")]
			private set
			{
			}
		}

		[Token(Token = "0x1700044A")]
		public OVRHand LeftHand
		{
			[Token(Token = "0x6001BB6")]
			[Address(RVA = "0xD45ECC", Offset = "0xD45ECC", VA = "0xD45ECC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BB7")]
			[Address(RVA = "0xD45EF4", Offset = "0xD45EF4", VA = "0xD45EF4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700044B")]
		public OVRSkeleton LeftHandSkeleton
		{
			[Token(Token = "0x6001BB8")]
			[Address(RVA = "0xD45F4C", Offset = "0xD45F4C", VA = "0xD45F4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BB9")]
			[Address(RVA = "0xD45F74", Offset = "0xD45F74", VA = "0xD45F74")]
			private set
			{
			}
		}

		[Token(Token = "0x1700044C")]
		public OVRSkeletonRenderer LeftHandSkeletonRenderer
		{
			[Token(Token = "0x6001BBA")]
			[Address(RVA = "0xD45FCC", Offset = "0xD45FCC", VA = "0xD45FCC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BBB")]
			[Address(RVA = "0xD45FF4", Offset = "0xD45FF4", VA = "0xD45FF4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700044D")]
		public OVRMesh LeftHandMesh
		{
			[Token(Token = "0x6001BBC")]
			[Address(RVA = "0xD4604C", Offset = "0xD4604C", VA = "0xD4604C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BBD")]
			[Address(RVA = "0xD46074", Offset = "0xD46074", VA = "0xD46074")]
			private set
			{
			}
		}

		[Token(Token = "0x1700044E")]
		public OVRMeshRenderer LeftHandMeshRenderer
		{
			[Token(Token = "0x6001BBE")]
			[Address(RVA = "0xD460CC", Offset = "0xD460CC", VA = "0xD460CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BBF")]
			[Address(RVA = "0xD460F4", Offset = "0xD460F4", VA = "0xD460F4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700044F")]
		public static HandsManager Instance
		{
			[Token(Token = "0x6001BC0")]
			[Address(RVA = "0xD4614C", Offset = "0xD4614C", VA = "0xD4614C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001BC1")]
			[Address(RVA = "0xD46194", Offset = "0xD46194", VA = "0xD46194")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001BC2")]
		[Address(RVA = "0xD461E0", Offset = "0xD461E0", VA = "0xD461E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001BC3")]
		[Address(RVA = "0xD46568", Offset = "0xD46568", VA = "0xD46568")]
		private void Update()
		{
		}

		[Token(Token = "0x6001BC4")]
		[Address(RVA = "0xD46500", Offset = "0xD46500", VA = "0xD46500")]
		[IteratorStateMachine(typeof(<FindSkeletonVisualGameObjects>d__52))]
		private IEnumerator FindSkeletonVisualGameObjects()
		{
			return null;
		}

		[Token(Token = "0x6001BC5")]
		[Address(RVA = "0xD465E4", Offset = "0xD465E4", VA = "0xD465E4")]
		public void SwitchVisualization()
		{
		}

		[Token(Token = "0x6001BC6")]
		[Address(RVA = "0xD466A8", Offset = "0xD466A8", VA = "0xD466A8")]
		private void SetToCurrentVisualMode()
		{
		}

		[Token(Token = "0x6001BC7")]
		[Address(RVA = "0xD46878", Offset = "0xD46878", VA = "0xD46878")]
		public static List<OVRBoneCapsule> GetCapsulesPerBone(OVRSkeleton skeleton, OVRSkeleton.BoneId boneId)
		{
			return null;
		}

		[Token(Token = "0x6001BC8")]
		[Address(RVA = "0xD46AD8", Offset = "0xD46AD8", VA = "0xD46AD8")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC9")]
		[Address(RVA = "0xD46C38", Offset = "0xD46C38", VA = "0xD46C38")]
		public HandsManager()
		{
		}
	}
	[Token(Token = "0x200052B")]
	public abstract class Interactable : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200052C")]
		public class InteractableStateArgsEvent : UnityEvent<InteractableStateArgs>
		{
			[Token(Token = "0x6001BE1")]
			[Address(RVA = "0xD48678", Offset = "0xD48678", VA = "0xD48678")]
			public InteractableStateArgsEvent()
			{
			}
		}

		[Token(Token = "0x4001B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ColliderZone _proximityZoneCollider;

		[Token(Token = "0x4001B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ColliderZone _contactZoneCollider;

		[Token(Token = "0x4001B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ColliderZone _actionZoneCollider;

		[Token(Token = "0x4001B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractableStateArgsEvent InteractableStateChanged;

		[Token(Token = "0x17000452")]
		public ColliderZone ProximityCollider
		{
			[Token(Token = "0x6001BD0")]
			[Address(RVA = "0xD47FD4", Offset = "0xD47FD4", VA = "0xD47FD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000453")]
		public ColliderZone ContactCollider
		{
			[Token(Token = "0x6001BD1")]
			[Address(RVA = "0xD47FDC", Offset = "0xD47FDC", VA = "0xD47FDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000454")]
		public ColliderZone ActionCollider
		{
			[Token(Token = "0x6001BD2")]
			[Address(RVA = "0xD47FE4", Offset = "0xD47FE4", VA = "0xD47FE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000455")]
		public virtual int ValidToolTagsMask
		{
			[Token(Token = "0x6001BD3")]
			[Address(RVA = "0xD47FEC", Offset = "0xD47FEC", VA = "0xD47FEC", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000017")]
		public event Action<ColliderZoneArgs> ProximityZoneEvent
		{
			[Token(Token = "0x6001BD4")]
			[Address(RVA = "0xD47FF4", Offset = "0xD47FF4", VA = "0xD47FF4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001BD5")]
			[Address(RVA = "0xD480A4", Offset = "0xD480A4", VA = "0xD480A4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000018")]
		public event Action<ColliderZoneArgs> ContactZoneEvent
		{
			[Token(Token = "0x6001BD7")]
			[Address(RVA = "0xD48170", Offset = "0xD48170", VA = "0xD48170")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001BD8")]
			[Address(RVA = "0xD48220", Offset = "0xD48220", VA = "0xD48220")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000019")]
		public event Action<ColliderZoneArgs> ActionZoneEvent
		{
			[Token(Token = "0x6001BDA")]
			[Address(RVA = "0xD482EC", Offset = "0xD482EC", VA = "0xD482EC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001BDB")]
			[Address(RVA = "0xD4839C", Offset = "0xD4839C", VA = "0xD4839C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0xD48154", Offset = "0xD48154", VA = "0xD48154", Slot = "5")]
		protected virtual void OnProximityZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0xD482D0", Offset = "0xD482D0", VA = "0xD482D0", Slot = "6")]
		protected virtual void OnContactZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0xD4844C", Offset = "0xD4844C", VA = "0xD4844C", Slot = "7")]
		protected virtual void OnActionZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6001BDD")]
		public abstract void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth);

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0xD48468", Offset = "0xD48468", VA = "0xD48468", Slot = "9")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001BDF")]
		[Address(RVA = "0xD4856C", Offset = "0xD4856C", VA = "0xD4856C", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001BE0")]
		[Address(RVA = "0xD48670", Offset = "0xD48670", VA = "0xD48670")]
		protected Interactable()
		{
		}
	}
	[Token(Token = "0x200052D")]
	public enum InteractableCollisionDepth
	{
		[Token(Token = "0x4001B7D")]
		None,
		[Token(Token = "0x4001B7E")]
		Proximity,
		[Token(Token = "0x4001B7F")]
		Contact,
		[Token(Token = "0x4001B80")]
		Action
	}
	[Token(Token = "0x200052E")]
	public enum InteractableState
	{
		[Token(Token = "0x4001B82")]
		Default,
		[Token(Token = "0x4001B83")]
		ProximityState,
		[Token(Token = "0x4001B84")]
		ContactState,
		[Token(Token = "0x4001B85")]
		ActionState
	}
	[Token(Token = "0x200052F")]
	public class InteractableStateArgs : EventArgs
	{
		[Token(Token = "0x4001B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Interactable Interactable;

		[Token(Token = "0x4001B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly InteractableTool Tool;

		[Token(Token = "0x4001B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableState OldInteractableState;

		[Token(Token = "0x4001B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly InteractableState NewInteractableState;

		[Token(Token = "0x4001B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ColliderZoneArgs ColliderArgs;

		[Token(Token = "0x6001BE2")]
		[Address(RVA = "0xD486C0", Offset = "0xD486C0", VA = "0xD486C0")]
		public InteractableStateArgs(Interactable interactable, InteractableTool tool, InteractableState newInteractableState, InteractableState oldState, ColliderZoneArgs colliderArgs)
		{
		}
	}
	[Token(Token = "0x2000530")]
	public class InteractableRegistry : MonoBehaviour
	{
		[Token(Token = "0x4001B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<Interactable> _interactables;

		[Token(Token = "0x17000456")]
		public static HashSet<Interactable> Interactables
		{
			[Token(Token = "0x6001BE3")]
			[Address(RVA = "0xD48754", Offset = "0xD48754", VA = "0xD48754")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0xD484BC", Offset = "0xD484BC", VA = "0xD484BC")]
		public static void RegisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0xD485C0", Offset = "0xD485C0", VA = "0xD485C0")]
		public static void UnregisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0xD487AC", Offset = "0xD487AC", VA = "0xD487AC")]
		public InteractableRegistry()
		{
		}
	}
	[Token(Token = "0x2000531")]
	public class InteractableToolsCreator : MonoBehaviour
	{
		[Token(Token = "0x2000532")]
		[CompilerGenerated]
		private sealed class <AttachToolsToHands>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform[] toolObjects;

			[Token(Token = "0x4001B91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isRightHand;

			[Token(Token = "0x4001B92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public InteractableToolsCreator <>4__this;

			[Token(Token = "0x4001B93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private HandsManager <handsManagerObj>5__2;

			[Token(Token = "0x4001B94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private HashSet<Transform>.Enumerator <>7__wrap2;

			[Token(Token = "0x4001B95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Transform <toolObject>5__4;

			[Token(Token = "0x4001B96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private OVRSkeleton <handSkeletonToAttachTo>5__5;

			[Token(Token = "0x17000457")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BF0")]
				[Address(RVA = "0xD48ECC", Offset = "0xD48ECC", VA = "0xD48ECC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000458")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BF2")]
				[Address(RVA = "0xD48F14", Offset = "0xD48F14", VA = "0xD48F14", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BEC")]
			[Address(RVA = "0xD48930", Offset = "0xD48930", VA = "0xD48930")]
			[DebuggerHidden]
			public <AttachToolsToHands>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6001BED")]
			[Address(RVA = "0xD48A6C", Offset = "0xD48A6C", VA = "0xD48A6C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BEE")]
			[Address(RVA = "0xD48A88", Offset = "0xD48A88", VA = "0xD48A88", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BEF")]
			[Address(RVA = "0xD48E7C", Offset = "0xD48E7C", VA = "0xD48E7C")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6001BF1")]
			[Address(RVA = "0xD48ED4", Offset = "0xD48ED4", VA = "0xD48ED4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform[] LeftHandTools;

		[Token(Token = "0x4001B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform[] RightHandTools;

		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0xD48840", Offset = "0xD48840", VA = "0xD48840")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0xD488AC", Offset = "0xD488AC", VA = "0xD488AC")]
		[IteratorStateMachine(typeof(<AttachToolsToHands>d__3))]
		private IEnumerator AttachToolsToHands(Transform[] toolObjects, bool isRightHand)
		{
			return null;
		}

		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0xD48958", Offset = "0xD48958", VA = "0xD48958")]
		private void AttachToolToHandTransform(Transform tool, bool isRightHanded)
		{
		}

		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0xD48A64", Offset = "0xD48A64", VA = "0xD48A64")]
		public InteractableToolsCreator()
		{
		}
	}
	[Token(Token = "0x2000533")]
	public class InteractableToolsInputRouter : MonoBehaviour
	{
		[Token(Token = "0x4001B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InteractableToolsInputRouter _instance;

		[Token(Token = "0x4001B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _leftPinch;

		[Token(Token = "0x4001B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _rightPinch;

		[Token(Token = "0x4001B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<InteractableTool> _leftHandNearTools;

		[Token(Token = "0x4001B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<InteractableTool> _leftHandFarTools;

		[Token(Token = "0x4001B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HashSet<InteractableTool> _rightHandNearTools;

		[Token(Token = "0x4001B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HashSet<InteractableTool> _rightHandFarTools;

		[Token(Token = "0x17000459")]
		public static InteractableToolsInputRouter Instance
		{
			[Token(Token = "0x6001BF3")]
			[Address(RVA = "0xD48F1C", Offset = "0xD48F1C", VA = "0xD48F1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001BF4")]
		[Address(RVA = "0xD49068", Offset = "0xD49068", VA = "0xD49068")]
		public void RegisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6001BF5")]
		[Address(RVA = "0xD49104", Offset = "0xD49104", VA = "0xD49104")]
		public void UnregisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6001BF6")]
		[Address(RVA = "0xD491A0", Offset = "0xD491A0", VA = "0xD491A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001BF7")]
		[Address(RVA = "0xD49458", Offset = "0xD49458", VA = "0xD49458")]
		private bool UpdateToolsAndEnableState(HashSet<InteractableTool> tools, bool toolsAreEnabledThisFrame)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BF8")]
		[Address(RVA = "0xD49494", Offset = "0xD49494", VA = "0xD49494")]
		private bool UpdateTools(HashSet<InteractableTool> tools, bool resetCollisionData = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BF9")]
		[Address(RVA = "0xD49750", Offset = "0xD49750", VA = "0xD49750")]
		private void ToggleToolsEnableState(HashSet<InteractableTool> tools, bool enableState)
		{
		}

		[Token(Token = "0x6001BFA")]
		[Address(RVA = "0xD49958", Offset = "0xD49958", VA = "0xD49958")]
		public InteractableToolsInputRouter()
		{
		}
	}
	[Token(Token = "0x2000534")]
	public class FingerTipPokeTool : InteractableTool
	{
		[Token(Token = "0x2000535")]
		[CompilerGenerated]
		private sealed class <AttachTriggerLogic>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001BA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001BAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001BAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FingerTipPokeTool <>4__this;

			[Token(Token = "0x1700045E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C0C")]
				[Address(RVA = "0xD4AA5C", Offset = "0xD4AA5C", VA = "0xD4AA5C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700045F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C0E")]
				[Address(RVA = "0xD4AAA4", Offset = "0xD4AAA4", VA = "0xD4AAA4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C09")]
			[Address(RVA = "0xD49B9C", Offset = "0xD49B9C", VA = "0xD49B9C")]
			[DebuggerHidden]
			public <AttachTriggerLogic>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6001C0A")]
			[Address(RVA = "0xD4A5EC", Offset = "0xD4A5EC", VA = "0xD4A5EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C0B")]
			[Address(RVA = "0xD4A5F0", Offset = "0xD4A5F0", VA = "0xD4A5F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C0D")]
			[Address(RVA = "0xD4AA64", Offset = "0xD4AA64", VA = "0xD4AA64", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B9E")]
		private const int NUM_VELOCITY_FRAMES = 10;

		[Token(Token = "0x4001B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private FingerTipPokeToolView _fingerTipPokeToolView;

		[Token(Token = "0x4001BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private OVRPlugin.HandFinger _fingerToFollow;

		[Token(Token = "0x4001BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private UnityEngine.Vector3[] _velocityFrames;

		[Token(Token = "0x4001BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _currVelocityFrame;

		[Token(Token = "0x4001BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool _sampledMaxFramesAlready;

		[Token(Token = "0x4001BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private UnityEngine.Vector3 _position;

		[Token(Token = "0x4001BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BoneCapsuleTriggerLogic[] _boneCapsuleTriggerLogic;

		[Token(Token = "0x4001BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _lastScale;

		[Token(Token = "0x4001BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _isInitialized;

		[Token(Token = "0x4001BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private OVRBoneCapsule _capsuleToTrack;

		[Token(Token = "0x1700045A")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6001BFB")]
			[Address(RVA = "0xD49A30", Offset = "0xD49A30", VA = "0xD49A30", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x1700045B")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6001BFC")]
			[Address(RVA = "0xD49A38", Offset = "0xD49A38", VA = "0xD49A38", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x1700045C")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6001BFD")]
			[Address(RVA = "0xD49A40", Offset = "0xD49A40", VA = "0xD49A40", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700045D")]
		public override bool EnableState
		{
			[Token(Token = "0x6001BFE")]
			[Address(RVA = "0xD49A48", Offset = "0xD49A48", VA = "0xD49A48", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BFF")]
			[Address(RVA = "0xD49A70", Offset = "0xD49A70", VA = "0xD49A70", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6001C00")]
		[Address(RVA = "0xD49AA0", Offset = "0xD49AA0", VA = "0xD49AA0", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6001C01")]
		[Address(RVA = "0xD49B34", Offset = "0xD49B34", VA = "0xD49B34")]
		[IteratorStateMachine(typeof(<AttachTriggerLogic>d__21))]
		private IEnumerator AttachTriggerLogic()
		{
			return null;
		}

		[Token(Token = "0x6001C02")]
		[Address(RVA = "0xD49BC4", Offset = "0xD49BC4", VA = "0xD49BC4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C03")]
		[Address(RVA = "0xD49E4C", Offset = "0xD49E4C", VA = "0xD49E4C")]
		private void UpdateAverageVelocity()
		{
		}

		[Token(Token = "0x6001C04")]
		[Address(RVA = "0xD4A008", Offset = "0xD4A008", VA = "0xD4A008")]
		private void CheckAndUpdateScale()
		{
		}

		[Token(Token = "0x6001C05")]
		[Address(RVA = "0xD4A0F4", Offset = "0xD4A0F4", VA = "0xD4A0F4", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6001C06")]
		[Address(RVA = "0xD4A470", Offset = "0xD4A470", VA = "0xD4A470", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6001C07")]
		[Address(RVA = "0xD4A474", Offset = "0xD4A474", VA = "0xD4A474", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6001C08")]
		[Address(RVA = "0xD4A478", Offset = "0xD4A478", VA = "0xD4A478")]
		public FingerTipPokeTool()
		{
		}
	}
	[Token(Token = "0x2000536")]
	public class FingerTipPokeToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x4001BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _sphereMeshRenderer;

		[Token(Token = "0x17000460")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6001C0F")]
			[Address(RVA = "0xD4AAAC", Offset = "0xD4AAAC", VA = "0xD4AAAC", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001C10")]
			[Address(RVA = "0xD4AAB4", Offset = "0xD4AAB4", VA = "0xD4AAB4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000461")]
		public bool EnableState
		{
			[Token(Token = "0x6001C11")]
			[Address(RVA = "0xD4AABC", Offset = "0xD4AABC", VA = "0xD4AABC", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C12")]
			[Address(RVA = "0xD4AAD8", Offset = "0xD4AAD8", VA = "0xD4AAD8", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000462")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6001C13")]
			[Address(RVA = "0xD4AAF8", Offset = "0xD4AAF8", VA = "0xD4AAF8", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C14")]
			[Address(RVA = "0xD4AB00", Offset = "0xD4AB00", VA = "0xD4AB00", Slot = "9")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000463")]
		public float SphereRadius
		{
			[Token(Token = "0x6001C15")]
			[Address(RVA = "0xD4AB0C", Offset = "0xD4AB0C", VA = "0xD4AB0C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C16")]
			[Address(RVA = "0xD4AB14", Offset = "0xD4AB14", VA = "0xD4AB14")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001C17")]
		[Address(RVA = "0xD4AB1C", Offset = "0xD4AB1C", VA = "0xD4AB1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C18")]
		[Address(RVA = "0xD4AB58", Offset = "0xD4AB58", VA = "0xD4AB58", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6001C19")]
		[Address(RVA = "0xD4AB5C", Offset = "0xD4AB5C", VA = "0xD4AB5C")]
		public FingerTipPokeToolView()
		{
		}
	}
	[Token(Token = "0x2000537")]
	[Flags]
	public enum InteractableToolTags
	{
		[Token(Token = "0x4001BB1")]
		None = 0,
		[Token(Token = "0x4001BB2")]
		Ray = 1,
		[Token(Token = "0x4001BB3")]
		Poke = 4,
		[Token(Token = "0x4001BB4")]
		All = -1
	}
	[Token(Token = "0x2000538")]
	public enum ToolInputState
	{
		[Token(Token = "0x4001BB6")]
		Inactive,
		[Token(Token = "0x4001BB7")]
		PrimaryInputDown,
		[Token(Token = "0x4001BB8")]
		PrimaryInputDownStay,
		[Token(Token = "0x4001BB9")]
		PrimaryInputUp
	}
	[Token(Token = "0x2000539")]
	public class InteractableCollisionInfo
	{
		[Token(Token = "0x4001BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ColliderZone InteractableCollider;

		[Token(Token = "0x4001BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableCollisionDepth CollisionDepth;

		[Token(Token = "0x4001BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractableTool CollidingTool;

		[Token(Token = "0x6001C1A")]
		[Address(RVA = "0xD4A430", Offset = "0xD4A430", VA = "0xD4A430")]
		public InteractableCollisionInfo(ColliderZone collider, InteractableCollisionDepth collisionDepth, InteractableTool collidingTool)
		{
		}
	}
	[Token(Token = "0x200053A")]
	public abstract class InteractableTool : MonoBehaviour
	{
		[Token(Token = "0x4001BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<InteractableCollisionInfo> _currentIntersectingObjects;

		[Token(Token = "0x4001BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Interactable> _addedInteractables;

		[Token(Token = "0x4001BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Interactable> _removedInteractables;

		[Token(Token = "0x4001BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Interactable> _remainingInteractables;

		[Token(Token = "0x4001BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Interactable, InteractableCollisionInfo> _currInteractableToCollisionInfos;

		[Token(Token = "0x4001BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Interactable, InteractableCollisionInfo> _prevInteractableToCollisionInfos;

		[Token(Token = "0x17000464")]
		public Transform ToolTransform
		{
			[Token(Token = "0x6001C1B")]
			[Address(RVA = "0xD4AB64", Offset = "0xD4AB64", VA = "0xD4AB64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000465")]
		public bool IsRightHandedTool
		{
			[Token(Token = "0x6001C1C")]
			[Address(RVA = "0xD4AB6C", Offset = "0xD4AB6C", VA = "0xD4AB6C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C1D")]
			[Address(RVA = "0xD4AB74", Offset = "0xD4AB74", VA = "0xD4AB74")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000466")]
		public abstract InteractableToolTags ToolTags
		{
			[Token(Token = "0x6001C1E")]
			get;
		}

		[Token(Token = "0x17000467")]
		public abstract ToolInputState ToolInputState
		{
			[Token(Token = "0x6001C1F")]
			get;
		}

		[Token(Token = "0x17000468")]
		public abstract bool IsFarFieldTool
		{
			[Token(Token = "0x6001C20")]
			get;
		}

		[Token(Token = "0x17000469")]
		public UnityEngine.Vector3 Velocity
		{
			[Token(Token = "0x6001C21")]
			[Address(RVA = "0xD4AB80", Offset = "0xD4AB80", VA = "0xD4AB80")]
			[CompilerGenerated]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6001C22")]
			[Address(RVA = "0xD4AB8C", Offset = "0xD4AB8C", VA = "0xD4AB8C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700046A")]
		public UnityEngine.Vector3 InteractionPosition
		{
			[Token(Token = "0x6001C23")]
			[Address(RVA = "0xD4AB98", Offset = "0xD4AB98", VA = "0xD4AB98")]
			[CompilerGenerated]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6001C24")]
			[Address(RVA = "0xD4ABA4", Offset = "0xD4ABA4", VA = "0xD4ABA4")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700046B")]
		public abstract bool EnableState
		{
			[Token(Token = "0x6001C29")]
			get;
			[Token(Token = "0x6001C2A")]
			set;
		}

		[Token(Token = "0x6001C25")]
		[Address(RVA = "0xD4ABB0", Offset = "0xD4ABB0", VA = "0xD4ABB0")]
		public List<InteractableCollisionInfo> GetCurrentIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6001C26")]
		public abstract List<InteractableCollisionInfo> GetNextIntersectingObjects();

		[Token(Token = "0x6001C27")]
		public abstract void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone);

		[Token(Token = "0x6001C28")]
		public abstract void DeFocus();

		[Token(Token = "0x6001C2B")]
		public abstract void Initialize();

		[Token(Token = "0x6001C2C")]
		[Address(RVA = "0xD498C0", Offset = "0xD498C0", VA = "0xD498C0")]
		public KeyValuePair<Interactable, InteractableCollisionInfo> GetFirstCurrentCollisionInfo()
		{
			return default(KeyValuePair<Interactable, InteractableCollisionInfo>);
		}

		[Token(Token = "0x6001C2D")]
		[Address(RVA = "0xD49908", Offset = "0xD49908", VA = "0xD49908")]
		public void ClearAllCurrentCollisionInfos()
		{
		}

		[Token(Token = "0x6001C2E")]
		[Address(RVA = "0xD4ABB8", Offset = "0xD4ABB8", VA = "0xD4ABB8", Slot = "13")]
		public virtual void UpdateCurrentCollisionsBasedOnDepth()
		{
		}

		[Token(Token = "0x6001C2F")]
		[Address(RVA = "0xD4AE64", Offset = "0xD4AE64", VA = "0xD4AE64", Slot = "14")]
		public virtual void UpdateLatestCollisionData()
		{
		}

		[Token(Token = "0x6001C30")]
		[Address(RVA = "0xD4A48C", Offset = "0xD4A48C", VA = "0xD4A48C")]
		protected InteractableTool()
		{
		}
	}
	[Token(Token = "0x200053B")]
	public interface InteractableToolView
	{
		[Token(Token = "0x1700046C")]
		InteractableTool InteractableTool
		{
			[Token(Token = "0x6001C31")]
			get;
		}

		[Token(Token = "0x1700046D")]
		bool EnableState
		{
			[Token(Token = "0x6001C33")]
			get;
			[Token(Token = "0x6001C34")]
			set;
		}

		[Token(Token = "0x1700046E")]
		bool ToolActivateState
		{
			[Token(Token = "0x6001C35")]
			get;
			[Token(Token = "0x6001C36")]
			set;
		}

		[Token(Token = "0x6001C32")]
		void SetFocusedInteractable(Interactable interactable);
	}
	[Token(Token = "0x200053C")]
	public class PinchStateModule
	{
		[Token(Token = "0x200053D")]
		private enum PinchState
		{
			[Token(Token = "0x4001BCA")]
			None,
			[Token(Token = "0x4001BCB")]
			PinchDown,
			[Token(Token = "0x4001BCC")]
			PinchStay,
			[Token(Token = "0x4001BCD")]
			PinchUp
		}

		[Token(Token = "0x4001BC6")]
		private const float PINCH_STRENGTH_THRESHOLD = 1f;

		[Token(Token = "0x4001BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PinchState _currPinchState;

		[Token(Token = "0x4001BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Interactable _firstFocusedInteractable;

		[Token(Token = "0x1700046F")]
		public bool PinchUpAndDownOnFocusedObject
		{
			[Token(Token = "0x6001C37")]
			[Address(RVA = "0xD4B6AC", Offset = "0xD4B6AC", VA = "0xD4B6AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000470")]
		public bool PinchSteadyOnFocusedObject
		{
			[Token(Token = "0x6001C38")]
			[Address(RVA = "0xD4B728", Offset = "0xD4B728", VA = "0xD4B728")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000471")]
		public bool PinchDownOnFocusedObject
		{
			[Token(Token = "0x6001C39")]
			[Address(RVA = "0xD4B7A4", Offset = "0xD4B7A4", VA = "0xD4B7A4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C3A")]
		[Address(RVA = "0xD4B820", Offset = "0xD4B820", VA = "0xD4B820")]
		public PinchStateModule()
		{
		}

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0xD4B840", Offset = "0xD4B840", VA = "0xD4B840")]
		public void UpdateState(OVRHand hand, Interactable currFocusedInteractable)
		{
		}
	}
	[Token(Token = "0x200053E")]
	public class RayTool : InteractableTool
	{
		[Token(Token = "0x4001BCE")]
		private const float MINIMUM_RAY_CAST_DISTANCE = 0.8f;

		[Token(Token = "0x4001BCF")]
		private const float COLLIDER_RADIUS = 0.01f;

		[Token(Token = "0x4001BD0")]
		private const int NUM_MAX_PRIMARY_HITS = 10;

		[Token(Token = "0x4001BD1")]
		private const int NUM_MAX_SECONDARY_HITS = 25;

		[Token(Token = "0x4001BD2")]
		private const int NUM_COLLIDERS_TO_TEST = 20;

		[Token(Token = "0x4001BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private RayToolView _rayToolView;

		[Token(Token = "0x4001BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Range(0f, 45f)]
		[SerializeField]
		private float _coneAngleDegrees;

		[Token(Token = "0x4001BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float _farFieldMaxDistance;

		[Token(Token = "0x4001BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PinchStateModule _pinchStateModule;

		[Token(Token = "0x4001BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Interactable _focusedInteractable;

		[Token(Token = "0x4001BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Collider[] _collidersOverlapped;

		[Token(Token = "0x4001BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Interactable _currInteractableCastedAgainst;

		[Token(Token = "0x4001BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _coneAngleReleaseDegrees;

		[Token(Token = "0x4001BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RaycastHit[] _primaryHits;

		[Token(Token = "0x4001BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider[] _secondaryOverlapResults;

		[Token(Token = "0x4001BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _initialized;

		[Token(Token = "0x17000472")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6001C3C")]
			[Address(RVA = "0xD4B98C", Offset = "0xD4B98C", VA = "0xD4B98C", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x17000473")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6001C3D")]
			[Address(RVA = "0xD4B994", Offset = "0xD4B994", VA = "0xD4B994", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x17000474")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6001C3E")]
			[Address(RVA = "0xD4B9F0", Offset = "0xD4B9F0", VA = "0xD4B9F0", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000475")]
		public override bool EnableState
		{
			[Token(Token = "0x6001C3F")]
			[Address(RVA = "0xD4B9F8", Offset = "0xD4B9F8", VA = "0xD4B9F8", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C40")]
			[Address(RVA = "0xD4BA38", Offset = "0xD4BA38", VA = "0xD4BA38", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6001C41")]
		[Address(RVA = "0xD4BAA8", Offset = "0xD4BAA8", VA = "0xD4BAA8", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0xD4BAF4", Offset = "0xD4BAF4", VA = "0xD4BAF4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001C43")]
		[Address(RVA = "0xD4BB80", Offset = "0xD4BB80", VA = "0xD4BB80")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C44")]
		[Address(RVA = "0xD4BE2C", Offset = "0xD4BE2C", VA = "0xD4BE2C")]
		private UnityEngine.Vector3 GetRayCastOrigin()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001C45")]
		[Address(RVA = "0xD4BEA8", Offset = "0xD4BEA8", VA = "0xD4BEA8", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6001C46")]
		[Address(RVA = "0xD4C26C", Offset = "0xD4C26C", VA = "0xD4C26C")]
		private bool HasRayReleasedInteractable(Interactable focusedInteractable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C47")]
		[Address(RVA = "0xD4C408", Offset = "0xD4C408", VA = "0xD4C408")]
		private Interactable FindTargetInteractable()
		{
			return null;
		}

		[Token(Token = "0x6001C48")]
		[Address(RVA = "0xD4C520", Offset = "0xD4C520", VA = "0xD4C520")]
		private Interactable FindPrimaryRaycastHit(UnityEngine.Vector3 rayOrigin, UnityEngine.Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x6001C49")]
		[Address(RVA = "0xD4C844", Offset = "0xD4C844", VA = "0xD4C844")]
		private Interactable FindInteractableViaConeTest(UnityEngine.Vector3 rayOrigin, UnityEngine.Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x6001C4A")]
		[Address(RVA = "0xD4CBC0", Offset = "0xD4CBC0", VA = "0xD4CBC0", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6001C4B")]
		[Address(RVA = "0xD4CC80", Offset = "0xD4CC80", VA = "0xD4CC80", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6001C4C")]
		[Address(RVA = "0xD4CCA8", Offset = "0xD4CCA8", VA = "0xD4CCA8")]
		public RayTool()
		{
		}
	}
	[Token(Token = "0x200053F")]
	public class RayToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x4001BDE")]
		private const int NUM_RAY_LINE_POSITIONS = 25;

		[Token(Token = "0x4001BDF")]
		private const float DEFAULT_RAY_CAST_DISTANCE = 3f;

		[Token(Token = "0x4001BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _targetTransform;

		[Token(Token = "0x4001BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private LineRenderer _lineRenderer;

		[Token(Token = "0x4001BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _toolActivateState;

		[Token(Token = "0x4001BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _focusedTransform;

		[Token(Token = "0x4001BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.Vector3[] linePositions;

		[Token(Token = "0x4001BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Gradient _oldColorGradient;

		[Token(Token = "0x4001BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Gradient _highLightColorGradient;

		[Token(Token = "0x17000476")]
		public bool EnableState
		{
			[Token(Token = "0x6001C4D")]
			[Address(RVA = "0xD4BA1C", Offset = "0xD4BA1C", VA = "0xD4BA1C", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C4E")]
			[Address(RVA = "0xD4BA54", Offset = "0xD4BA54", VA = "0xD4BA54", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000477")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6001C4F")]
			[Address(RVA = "0xD4CD80", Offset = "0xD4CD80", VA = "0xD4CD80", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C50")]
			[Address(RVA = "0xD4BDF0", Offset = "0xD4BDF0", VA = "0xD4BDF0", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x17000478")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6001C52")]
			[Address(RVA = "0xD4CF88", Offset = "0xD4CF88", VA = "0xD4CF88", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001C53")]
			[Address(RVA = "0xD4CF90", Offset = "0xD4CF90", VA = "0xD4CF90")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001C51")]
		[Address(RVA = "0xD4CD88", Offset = "0xD4CD88", VA = "0xD4CD88")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C54")]
		[Address(RVA = "0xD4CBF0", Offset = "0xD4CBF0", VA = "0xD4CBF0", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6001C55")]
		[Address(RVA = "0xD4CF98", Offset = "0xD4CF98", VA = "0xD4CF98")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C56")]
		[Address(RVA = "0xD4D244", Offset = "0xD4D244", VA = "0xD4D244")]
		public static UnityEngine.Vector3 GetPointOnBezierCurve(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3, float t)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001C57")]
		[Address(RVA = "0xD4D2EC", Offset = "0xD4D2EC", VA = "0xD4D2EC")]
		public RayToolView()
		{
		}
	}
	[Token(Token = "0x2000540")]
	public class DistanceGrabberSample : MonoBehaviour
	{
		[Token(Token = "0x4001BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool useSpherecast;

		[Token(Token = "0x4001BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool allowGrabThroughWalls;

		[Token(Token = "0x4001BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DistanceGrabber[] m_grabbers;

		[Token(Token = "0x17000479")]
		public bool UseSpherecast
		{
			[Token(Token = "0x6001C58")]
			[Address(RVA = "0xD4D344", Offset = "0xD4D344", VA = "0xD4D344")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C59")]
			[Address(RVA = "0xD4D34C", Offset = "0xD4D34C", VA = "0xD4D34C")]
			set
			{
			}
		}

		[Token(Token = "0x1700047A")]
		public bool AllowGrabThroughWalls
		{
			[Token(Token = "0x6001C5A")]
			[Address(RVA = "0xD4D3B8", Offset = "0xD4D3B8", VA = "0xD4D3B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C5B")]
			[Address(RVA = "0xD4D3C0", Offset = "0xD4D3C0", VA = "0xD4D3C0")]
			set
			{
			}
		}

		[Token(Token = "0x6001C5C")]
		[Address(RVA = "0xD4D41C", Offset = "0xD4D41C", VA = "0xD4D41C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0xD4D6BC", Offset = "0xD4D6BC", VA = "0xD4D6BC")]
		public void ToggleSphereCasting(Toggle t)
		{
		}

		[Token(Token = "0x6001C5E")]
		[Address(RVA = "0xD4D6CC", Offset = "0xD4D6CC", VA = "0xD4D6CC")]
		public void ToggleGrabThroughWalls(Toggle t)
		{
		}

		[Token(Token = "0x6001C5F")]
		[Address(RVA = "0xD4D6DC", Offset = "0xD4D6DC", VA = "0xD4D6DC")]
		public DistanceGrabberSample()
		{
		}
	}
	[Token(Token = "0x2000541")]
	public class ControllerBoxController : MonoBehaviour
	{
		[Token(Token = "0x4001BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TrainLocomotive _locomotive;

		[Token(Token = "0x4001BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private CowController _cowController;

		[Token(Token = "0x6001C60")]
		[Address(RVA = "0xD4D6E4", Offset = "0xD4D6E4", VA = "0xD4D6E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C61")]
		[Address(RVA = "0xD4D6E8", Offset = "0xD4D6E8", VA = "0xD4D6E8")]
		public void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001C62")]
		[Address(RVA = "0xD4D754", Offset = "0xD4D754", VA = "0xD4D754")]
		public void DecreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001C63")]
		[Address(RVA = "0xD4D7E4", Offset = "0xD4D7E4", VA = "0xD4D7E4")]
		public void IncreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001C64")]
		[Address(RVA = "0xD4D874", Offset = "0xD4D874", VA = "0xD4D874")]
		public void SmokeButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001C65")]
		[Address(RVA = "0xD4D920", Offset = "0xD4D920", VA = "0xD4D920")]
		public void WhistleButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001C66")]
		[Address(RVA = "0xD4D9FC", Offset = "0xD4D9FC", VA = "0xD4D9FC")]
		public void ReverseButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001C67")]
		[Address(RVA = "0xD4DA40", Offset = "0xD4DA40", VA = "0xD4DA40")]
		public void SwitchVisualization(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001C68")]
		[Address(RVA = "0xD4DAA4", Offset = "0xD4DAA4", VA = "0xD4DAA4")]
		public void GoMoo(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001C69")]
		[Address(RVA = "0xD4DB04", Offset = "0xD4DB04", VA = "0xD4DB04")]
		public ControllerBoxController()
		{
		}
	}
	[Token(Token = "0x2000542")]
	public class CowController : MonoBehaviour
	{
		[Token(Token = "0x4001BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Animation _cowAnimation;

		[Token(Token = "0x4001BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource _mooCowAudioSource;

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0xD4DB0C", Offset = "0xD4DB0C", VA = "0xD4DB0C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C6B")]
		[Address(RVA = "0xD4DB10", Offset = "0xD4DB10", VA = "0xD4DB10")]
		public void PlayMooSound()
		{
		}

		[Token(Token = "0x6001C6C")]
		[Address(RVA = "0xD4DAD4", Offset = "0xD4DAD4", VA = "0xD4DAD4")]
		public void GoMooCowGo()
		{
		}

		[Token(Token = "0x6001C6D")]
		[Address(RVA = "0xD4DB44", Offset = "0xD4DB44", VA = "0xD4DB44")]
		public CowController()
		{
		}
	}
	[Token(Token = "0x2000543")]
	public class PanelHMDFollower : MonoBehaviour
	{
		[Token(Token = "0x2000544")]
		[CompilerGenerated]
		private sealed class <LerpToHMD>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001BF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001BFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001BFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PanelHMDFollower <>4__this;

			[Token(Token = "0x4001BFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private UnityEngine.Vector3 <newPanelPosition>5__2;

			[Token(Token = "0x4001BFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <startTime>5__3;

			[Token(Token = "0x4001BFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <endTime>5__4;

			[Token(Token = "0x1700047B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C76")]
				[Address(RVA = "0xD4E18C", Offset = "0xD4E18C", VA = "0xD4E18C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700047C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C78")]
				[Address(RVA = "0xD4E1D4", Offset = "0xD4E1D4", VA = "0xD4E1D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C73")]
			[Address(RVA = "0xD4DF14", Offset = "0xD4DF14", VA = "0xD4DF14")]
			[DebuggerHidden]
			public <LerpToHMD>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001C74")]
			[Address(RVA = "0xD4DFDC", Offset = "0xD4DFDC", VA = "0xD4DFDC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C75")]
			[Address(RVA = "0xD4DFE0", Offset = "0xD4DFE0", VA = "0xD4DFE0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C77")]
			[Address(RVA = "0xD4E194", Offset = "0xD4E194", VA = "0xD4E194", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001BEF")]
		private const float TOTAL_DURATION = 3f;

		[Token(Token = "0x4001BF0")]
		private const float HMD_MOVEMENT_THRESHOLD = 0.3f;

		[Token(Token = "0x4001BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _maxDistance;

		[Token(Token = "0x4001BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _minDistance;

		[Token(Token = "0x4001BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _minZDistance;

		[Token(Token = "0x4001BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRCameraRig _cameraRig;

		[Token(Token = "0x4001BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Vector3 _panelInitialPosition;

		[Token(Token = "0x4001BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _coroutine;

		[Token(Token = "0x4001BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityEngine.Vector3 _prevPos;

		[Token(Token = "0x4001BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private UnityEngine.Vector3 _lastMovedToPos;

		[Token(Token = "0x6001C6E")]
		[Address(RVA = "0xD4DB4C", Offset = "0xD4DB4C", VA = "0xD4DB4C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C6F")]
		[Address(RVA = "0xD4DBE0", Offset = "0xD4DBE0", VA = "0xD4DBE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C70")]
		[Address(RVA = "0xD4DED4", Offset = "0xD4DED4", VA = "0xD4DED4")]
		private UnityEngine.Vector3 CalculateIdealAnchorPosition()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6001C71")]
		[Address(RVA = "0xD4DE6C", Offset = "0xD4DE6C", VA = "0xD4DE6C")]
		[IteratorStateMachine(typeof(<LerpToHMD>d__13))]
		private IEnumerator LerpToHMD()
		{
			return null;
		}

		[Token(Token = "0x6001C72")]
		[Address(RVA = "0xD4DF3C", Offset = "0xD4DF3C", VA = "0xD4DF3C")]
		public PanelHMDFollower()
		{
		}
	}
	[Token(Token = "0x2000545")]
	public class SelectionCylinder : MonoBehaviour
	{
		[Token(Token = "0x2000546")]
		public enum SelectionState
		{
			[Token(Token = "0x4001C06")]
			Off,
			[Token(Token = "0x4001C07")]
			Selected,
			[Token(Token = "0x4001C08")]
			Highlighted
		}

		[Token(Token = "0x4001BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _selectionMeshRenderer;

		[Token(Token = "0x4001C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _colorId;

		[Token(Token = "0x4001C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material[] _selectionMaterials;

		[Token(Token = "0x4001C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color[] _defaultSelectionColors;

		[Token(Token = "0x4001C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color[] _highlightColors;

		[Token(Token = "0x4001C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SelectionState _currSelectionState;

		[Token(Token = "0x1700047D")]
		public SelectionState CurrSelectionState
		{
			[Token(Token = "0x6001C79")]
			[Address(RVA = "0xD4E1DC", Offset = "0xD4E1DC", VA = "0xD4E1DC")]
			get
			{
				return default(SelectionState);
			}
			[Token(Token = "0x6001C7A")]
			[Address(RVA = "0xD4E1E4", Offset = "0xD4E1E4", VA = "0xD4E1E4")]
			set
			{
			}
		}

		[Token(Token = "0x6001C7B")]
		[Address(RVA = "0xD4E338", Offset = "0xD4E338", VA = "0xD4E338")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C7C")]
		[Address(RVA = "0xD4E4C0", Offset = "0xD4E4C0", VA = "0xD4E4C0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001C7D")]
		[Address(RVA = "0xD4E258", Offset = "0xD4E258", VA = "0xD4E258")]
		private void AffectSelectionColor(Color[] newColors)
		{
		}

		[Token(Token = "0x6001C7E")]
		[Address(RVA = "0xD4E588", Offset = "0xD4E588", VA = "0xD4E588")]
		public SelectionCylinder()
		{
		}
	}
	[Token(Token = "0x2000547")]
	public class TrackSegment : MonoBehaviour
	{
		[Token(Token = "0x2000548")]
		public enum SegmentType
		{
			[Token(Token = "0x4001C17")]
			Straight,
			[Token(Token = "0x4001C18")]
			LeftTurn,
			[Token(Token = "0x4001C19")]
			RightTurn,
			[Token(Token = "0x4001C1A")]
			Switch
		}

		[Token(Token = "0x4001C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SegmentType _segmentType;

		[Token(Token = "0x4001C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshFilter _straight;

		[Token(Token = "0x4001C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshFilter _leftTurn;

		[Token(Token = "0x4001C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshFilter _rightTurn;

		[Token(Token = "0x4001C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _gridSize;

		[Token(Token = "0x4001C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int _subDivCount;

		[Token(Token = "0x4001C0F")]
		private const float _originalGridSize = 0.8f;

		[Token(Token = "0x4001C10")]
		private const float _trackWidth = 0.15f;

		[Token(Token = "0x4001C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject _mesh;

		[Token(Token = "0x4001C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Pose _p1;

		[Token(Token = "0x4001C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Pose _p2;

		[Token(Token = "0x4001C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Pose _endPose;

		[Token(Token = "0x1700047E")]
		public float StartDistance
		{
			[Token(Token = "0x6001C80")]
			[Address(RVA = "0xD4E5F8", Offset = "0xD4E5F8", VA = "0xD4E5F8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C81")]
			[Address(RVA = "0xD4E600", Offset = "0xD4E600", VA = "0xD4E600")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700047F")]
		public float GridSize
		{
			[Token(Token = "0x6001C82")]
			[Address(RVA = "0xD4E608", Offset = "0xD4E608", VA = "0xD4E608")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C83")]
			[Address(RVA = "0xD4E610", Offset = "0xD4E610", VA = "0xD4E610")]
			private set
			{
			}
		}

		[Token(Token = "0x17000480")]
		public int SubDivCount
		{
			[Token(Token = "0x6001C84")]
			[Address(RVA = "0xD4E618", Offset = "0xD4E618", VA = "0xD4E618")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001C85")]
			[Address(RVA = "0xD4E620", Offset = "0xD4E620", VA = "0xD4E620")]
			set
			{
			}
		}

		[Token(Token = "0x17000481")]
		public SegmentType Type
		{
			[Token(Token = "0x6001C86")]
			[Address(RVA = "0xD4E628", Offset = "0xD4E628", VA = "0xD4E628")]
			get
			{
				return default(SegmentType);
			}
		}

		[Token(Token = "0x17000482")]
		public Pose EndPose
		{
			[Token(Token = "0x6001C87")]
			[Address(RVA = "0xD4E630", Offset = "0xD4E630", VA = "0xD4E630")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000483")]
		public float Radius
		{
			[Token(Token = "0x6001C88")]
			[Address(RVA = "0xD4EA04", Offset = "0xD4EA04", VA = "0xD4EA04")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000484")]
		public float SegmentLength
		{
			[Token(Token = "0x6001C8A")]
			[Address(RVA = "0xD4E68C", Offset = "0xD4E68C", VA = "0xD4E68C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001C89")]
		[Address(RVA = "0xD4EA14", Offset = "0xD4EA14", VA = "0xD4EA14")]
		public float setGridSize(float size)
		{
			return default(float);
		}

		[Token(Token = "0x6001C8B")]
		[Address(RVA = "0xD4EA2C", Offset = "0xD4EA2C", VA = "0xD4EA2C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C8C")]
		[Address(RVA = "0xD4E6CC", Offset = "0xD4E6CC", VA = "0xD4E6CC")]
		public void UpdatePose(float distanceIntoSegment, Pose pose)
		{
		}

		[Token(Token = "0x6001C8D")]
		[Address(RVA = "0xD4EA30", Offset = "0xD4EA30", VA = "0xD4EA30")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C8E")]
		[Address(RVA = "0xD4EA34", Offset = "0xD4EA34", VA = "0xD4EA34")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001C8F")]
		[Address(RVA = "0xD4EA90", Offset = "0xD4EA90", VA = "0xD4EA90")]
		private void DrawDebugLines()
		{
		}

		[Token(Token = "0x6001C90")]
		[Address(RVA = "0xD4F3C4", Offset = "0xD4F3C4", VA = "0xD4F3C4")]
		public void RegenerateTrackAndMesh()
		{
		}

		[Token(Token = "0x6001C91")]
		[Address(RVA = "0xD4F61C", Offset = "0xD4F61C", VA = "0xD4F61C")]
		public TrackSegment()
		{
		}
	}
	[Token(Token = "0x2000549")]
	public class TrainButtonVisualController : MonoBehaviour
	{
		[Token(Token = "0x200054A")]
		[CompilerGenerated]
		private sealed class <ResetPosition>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainButtonVisualController <>4__this;

			[Token(Token = "0x4001C2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x4001C30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <endTime>5__3;

			[Token(Token = "0x17000485")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CA0")]
				[Address(RVA = "0xD500D4", Offset = "0xD500D4", VA = "0xD500D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000486")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CA2")]
				[Address(RVA = "0xD5011C", Offset = "0xD5011C", VA = "0xD5011C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C9D")]
			[Address(RVA = "0xD4FF18", Offset = "0xD4FF18", VA = "0xD4FF18")]
			[DebuggerHidden]
			public <ResetPosition>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6001C9E")]
			[Address(RVA = "0xD4FF68", Offset = "0xD4FF68", VA = "0xD4FF68", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C9F")]
			[Address(RVA = "0xD4FF6C", Offset = "0xD4FF6C", VA = "0xD4FF6C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CA1")]
			[Address(RVA = "0xD500DC", Offset = "0xD500DC", VA = "0xD500DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001C1B")]
		private const float LERP_TO_OLD_POS_DURATION = 1f;

		[Token(Token = "0x4001C1C")]
		private const float LOCAL_SIZE_HALVED = 0.5f;

		[Token(Token = "0x4001C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _meshRenderer;

		[Token(Token = "0x4001C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshRenderer _glowRenderer;

		[Token(Token = "0x4001C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ButtonController _buttonController;

		[Token(Token = "0x4001C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color _buttonContactColor;

		[Token(Token = "0x4001C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color _buttonActionColor;

		[Token(Token = "0x4001C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4001C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip _actionSoundEffect;

		[Token(Token = "0x4001C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform _buttonContactTransform;

		[Token(Token = "0x4001C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float _contactMaxDisplacementDistance;

		[Token(Token = "0x4001C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material _buttonMaterial;

		[Token(Token = "0x4001C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Color _buttonDefaultColor;

		[Token(Token = "0x4001C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _materialColorId;

		[Token(Token = "0x4001C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool _buttonInContactOrActionStates;

		[Token(Token = "0x4001C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine _lerpToOldPositionCr;

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private UnityEngine.Vector3 _oldPosition;

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0xD4F758", Offset = "0xD4F758", VA = "0xD4F758")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0xD4F7FC", Offset = "0xD4F7FC", VA = "0xD4F7FC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001C94")]
		[Address(RVA = "0xD4F88C", Offset = "0xD4F88C", VA = "0xD4F88C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0xD4F9D4", Offset = "0xD4F9D4", VA = "0xD4F9D4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001C96")]
		[Address(RVA = "0xD4FB60", Offset = "0xD4FB60", VA = "0xD4FB60")]
		private void ActionOrInContactZoneStayEvent(ColliderZoneArgs collisionArgs)
		{
		}

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0xD4FC70", Offset = "0xD4FC70", VA = "0xD4FC70")]
		private void InteractableStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0xD4FE5C", Offset = "0xD4FE5C", VA = "0xD4FE5C")]
		private void PlaySound(AudioClip clip)
		{
		}

		[Token(Token = "0x6001C99")]
		[Address(RVA = "0xD4FD80", Offset = "0xD4FD80", VA = "0xD4FD80")]
		private void StopResetLerping()
		{
		}

		[Token(Token = "0x6001C9A")]
		[Address(RVA = "0xD4FD94", Offset = "0xD4FD94", VA = "0xD4FD94")]
		private void LerpToOldPosition()
		{
		}

		[Token(Token = "0x6001C9B")]
		[Address(RVA = "0xD4FEB0", Offset = "0xD4FEB0", VA = "0xD4FEB0")]
		[IteratorStateMachine(typeof(<ResetPosition>d__26))]
		private IEnumerator ResetPosition()
		{
			return null;
		}

		[Token(Token = "0x6001C9C")]
		[Address(RVA = "0xD4FF40", Offset = "0xD4FF40", VA = "0xD4FF40")]
		public TrainButtonVisualController()
		{
		}
	}
	[Token(Token = "0x200054B")]
	public class TrainCar : TrainCarBase
	{
		[Token(Token = "0x4001C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TrainCarBase _parentLocomotive;

		[Token(Token = "0x4001C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected float _distanceBehindParent;

		[Token(Token = "0x17000487")]
		public float DistanceBehindParentScaled
		{
			[Token(Token = "0x6001CA3")]
			[Address(RVA = "0xD50124", Offset = "0xD50124", VA = "0xD50124")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001CA4")]
		[Address(RVA = "0xD50134", Offset = "0xD50134", VA = "0xD50134", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001CA5")]
		[Address(RVA = "0xD5013C", Offset = "0xD5013C", VA = "0xD5013C", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6001CA6")]
		[Address(RVA = "0xD5046C", Offset = "0xD5046C", VA = "0xD5046C")]
		public TrainCar()
		{
		}
	}
	[Token(Token = "0x200054C")]
	public abstract class TrainCarBase : MonoBehaviour
	{
		[Token(Token = "0x4001C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static UnityEngine.Vector3 OFFSET;

		[Token(Token = "0x4001C34")]
		private const float WHEEL_RADIUS = 0.027f;

		[Token(Token = "0x4001C35")]
		private const float TWO_PI = (float)Math.PI * 2f;

		[Token(Token = "0x4001C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Transform _frontWheels;

		[Token(Token = "0x4001C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Transform _rearWheels;

		[Token(Token = "0x4001C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected TrainTrack _trainTrack;

		[Token(Token = "0x4001C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Transform[] _individualWheels;

		[Token(Token = "0x4001C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float scale;

		[Token(Token = "0x4001C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Pose _frontPose;

		[Token(Token = "0x4001C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Pose _rearPose;

		[Token(Token = "0x17000488")]
		public float Distance
		{
			[Token(Token = "0x6001CA7")]
			[Address(RVA = "0xD50550", Offset = "0xD50550", VA = "0xD50550")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CA8")]
			[Address(RVA = "0xD50558", Offset = "0xD50558", VA = "0xD50558")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000489")]
		public float Scale
		{
			[Token(Token = "0x6001CA9")]
			[Address(RVA = "0xD50560", Offset = "0xD50560", VA = "0xD50560")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CAA")]
			[Address(RVA = "0xD50568", Offset = "0xD50568", VA = "0xD50568")]
			set
			{
			}
		}

		[Token(Token = "0x6001CAB")]
		[Address(RVA = "0xD50138", Offset = "0xD50138", VA = "0xD50138", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001CAC")]
		[Address(RVA = "0xD50570", Offset = "0xD50570", VA = "0xD50570")]
		public void UpdatePose(float distance, TrainCarBase train, Pose pose)
		{
		}

		[Token(Token = "0x6001CAD")]
		[Address(RVA = "0xD50178", Offset = "0xD50178", VA = "0xD50178")]
		protected void UpdateCarPosition()
		{
		}

		[Token(Token = "0x6001CAE")]
		[Address(RVA = "0xD50388", Offset = "0xD50388", VA = "0xD50388")]
		protected void RotateCarWheels()
		{
		}

		[Token(Token = "0x6001CAF")]
		public abstract void UpdatePosition();

		[Token(Token = "0x6001CB0")]
		[Address(RVA = "0xD504CC", Offset = "0xD504CC", VA = "0xD504CC")]
		protected TrainCarBase()
		{
		}
	}
	[Token(Token = "0x200054D")]
	public class TrainCrossingController : MonoBehaviour
	{
		[Token(Token = "0x200054E")]
		[CompilerGenerated]
		private sealed class <AnimateCrossing>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainCrossingController <>4__this;

			[Token(Token = "0x4001C4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float animationLength;

			[Token(Token = "0x4001C4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <animationEndTime>5__2;

			[Token(Token = "0x4001C4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <lightBlinkDuration>5__3;

			[Token(Token = "0x4001C4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <lightBlinkStartTime>5__4;

			[Token(Token = "0x4001C4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <lightBlinkEndTime>5__5;

			[Token(Token = "0x4001C50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Material <lightToBlinkOn>5__6;

			[Token(Token = "0x4001C51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Material <lightToBlinkOff>5__7;

			[Token(Token = "0x4001C52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Color <onColor>5__8;

			[Token(Token = "0x4001C53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Color <offColor>5__9;

			[Token(Token = "0x1700048A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CBE")]
				[Address(RVA = "0xD50DB8", Offset = "0xD50DB8", VA = "0xD50DB8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700048B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CC0")]
				[Address(RVA = "0xD50E00", Offset = "0xD50E00", VA = "0xD50E00", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CBB")]
			[Address(RVA = "0xD50A7C", Offset = "0xD50A7C", VA = "0xD50A7C")]
			[DebuggerHidden]
			public <AnimateCrossing>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6001CBC")]
			[Address(RVA = "0xD50BF0", Offset = "0xD50BF0", VA = "0xD50BF0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CBD")]
			[Address(RVA = "0xD50BF4", Offset = "0xD50BF4", VA = "0xD50BF4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CBF")]
			[Address(RVA = "0xD50DC0", Offset = "0xD50DC0", VA = "0xD50DC0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4001C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip[] _crossingSounds;

		[Token(Token = "0x4001C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshRenderer _lightSide1Renderer;

		[Token(Token = "0x4001C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshRenderer _lightSide2Renderer;

		[Token(Token = "0x4001C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x4001C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material _lightsSide1Mat;

		[Token(Token = "0x4001C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material _lightsSide2Mat;

		[Token(Token = "0x4001C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _colorId;

		[Token(Token = "0x4001C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine _xingAnimationCr;

		[Token(Token = "0x4001C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6001CB2")]
		[Address(RVA = "0xD506E0", Offset = "0xD506E0", VA = "0xD506E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CB3")]
		[Address(RVA = "0xD50720", Offset = "0xD50720", VA = "0xD50720")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001CB4")]
		[Address(RVA = "0xD507F8", Offset = "0xD507F8", VA = "0xD507F8")]
		public void CrossingButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001CB5")]
		[Address(RVA = "0xD5093C", Offset = "0xD5093C", VA = "0xD5093C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CB6")]
		[Address(RVA = "0xD50850", Offset = "0xD50850", VA = "0xD50850")]
		private void ActivateTrainCrossing()
		{
		}

		[Token(Token = "0x6001CB7")]
		[Address(RVA = "0xD50A04", Offset = "0xD50A04", VA = "0xD50A04")]
		[IteratorStateMachine(typeof(<AnimateCrossing>d__15))]
		private IEnumerator AnimateCrossing(float animationLength)
		{
			return null;
		}

		[Token(Token = "0x6001CB8")]
		[Address(RVA = "0xD50AA4", Offset = "0xD50AA4", VA = "0xD50AA4")]
		private void AffectMaterials(Material[] materials, Color newColor)
		{
		}

		[Token(Token = "0x6001CB9")]
		[Address(RVA = "0xD50B3C", Offset = "0xD50B3C", VA = "0xD50B3C")]
		private void ToggleLightObjects(bool enableState)
		{
		}

		[Token(Token = "0x6001CBA")]
		[Address(RVA = "0xD50B98", Offset = "0xD50B98", VA = "0xD50B98")]
		public TrainCrossingController()
		{
		}
	}
	[Token(Token = "0x200054F")]
	public class TrainLocomotive : TrainCarBase
	{
		[Token(Token = "0x2000550")]
		private enum EngineSoundState
		{
			[Token(Token = "0x4001C72")]
			Start,
			[Token(Token = "0x4001C73")]
			AccelerateOrSetProperSpeed,
			[Token(Token = "0x4001C74")]
			Stop
		}

		[Token(Token = "0x2000551")]
		[CompilerGenerated]
		private sealed class <StartStopTrain>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool startTrain;

			[Token(Token = "0x4001C78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrainLocomotive <>4__this;

			[Token(Token = "0x4001C79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <endSpeed>5__2;

			[Token(Token = "0x4001C7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <timePeriodForSpeedChange>5__3;

			[Token(Token = "0x4001C7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__4;

			[Token(Token = "0x4001C7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <endTime>5__5;

			[Token(Token = "0x4001C7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <startSpeed>5__6;

			[Token(Token = "0x1700048C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CD3")]
				[Address(RVA = "0xD51664", Offset = "0xD51664", VA = "0xD51664", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700048D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CD5")]
				[Address(RVA = "0xD516AC", Offset = "0xD516AC", VA = "0xD516AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CD0")]
			[Address(RVA = "0xD51090", Offset = "0xD51090", VA = "0xD51090")]
			[DebuggerHidden]
			public <StartStopTrain>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x6001CD1")]
			[Address(RVA = "0xD51458", Offset = "0xD51458", VA = "0xD51458", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CD2")]
			[Address(RVA = "0xD5145C", Offset = "0xD5145C", VA = "0xD5145C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CD4")]
			[Address(RVA = "0xD5166C", Offset = "0xD5166C", VA = "0xD5166C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001C54")]
		private const float MIN_SPEED = 0.2f;

		[Token(Token = "0x4001C55")]
		private const float MAX_SPEED = 2.7f;

		[Token(Token = "0x4001C56")]
		private const float SMOKE_SPEED_MULTIPLIER = 8f;

		[Token(Token = "0x4001C57")]
		private const int MAX_PARTICLES_MULTIPLIER = 3;

		[Token(Token = "0x4001C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Range(0.2f, 2.7f)]
		protected float _initialSpeed;

		[Token(Token = "0x4001C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4001C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _decreaseSpeedButton;

		[Token(Token = "0x4001C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject _increaseSpeedButton;

		[Token(Token = "0x4001C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject _smokeButton;

		[Token(Token = "0x4001C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject _whistleButton;

		[Token(Token = "0x4001C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject _reverseButton;

		[Token(Token = "0x4001C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private AudioSource _whistleAudioSource;

		[Token(Token = "0x4001C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private AudioClip _whistleSound;

		[Token(Token = "0x4001C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private AudioSource _engineAudioSource;

		[Token(Token = "0x4001C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private AudioClip[] _accelerationSounds;

		[Token(Token = "0x4001C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private AudioClip[] _decelerationSounds;

		[Token(Token = "0x4001C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private AudioClip _startUpSound;

		[Token(Token = "0x4001C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private AudioSource _smokeStackAudioSource;

		[Token(Token = "0x4001C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private AudioClip _smokeSound;

		[Token(Token = "0x4001C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private ParticleSystem _smoke1;

		[Token(Token = "0x4001C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private ParticleSystem _smoke2;

		[Token(Token = "0x4001C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TrainCarBase[] _childCars;

		[Token(Token = "0x4001C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool _isMoving;

		[Token(Token = "0x4001C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool _reverse;

		[Token(Token = "0x4001C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _currentSpeed;

		[Token(Token = "0x4001C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _speedDiv;

		[Token(Token = "0x4001C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _standardRateOverTimeMultiplier;

		[Token(Token = "0x4001C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int _standardMaxParticles;

		[Token(Token = "0x4001C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Coroutine _startStopTrainCr;

		[Token(Token = "0x6001CC1")]
		[Address(RVA = "0xD50E08", Offset = "0xD50E08", VA = "0xD50E08")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CC2")]
		[Address(RVA = "0xD50F4C", Offset = "0xD50F4C", VA = "0xD50F4C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CC3")]
		[Address(RVA = "0xD50F58", Offset = "0xD50F58", VA = "0xD50F58", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6001CC4")]
		[Address(RVA = "0xD4D718", Offset = "0xD4D718", VA = "0xD4D718")]
		public void StartStopStateChanged()
		{
		}

		[Token(Token = "0x6001CC5")]
		[Address(RVA = "0xD50ED0", Offset = "0xD50ED0", VA = "0xD50ED0")]
		[IteratorStateMachine(typeof(<StartStopTrain>d__34))]
		private IEnumerator StartStopTrain(bool startTrain)
		{
			return null;
		}

		[Token(Token = "0x6001CC6")]
		[Address(RVA = "0xD510B8", Offset = "0xD510B8", VA = "0xD510B8")]
		private float PlayEngineSound(EngineSoundState engineSoundState)
		{
			return default(float);
		}

		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0xD51030", Offset = "0xD51030", VA = "0xD51030")]
		private void UpdateDistance()
		{
		}

		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0xD4D784", Offset = "0xD4D784", VA = "0xD4D784")]
		public void DecreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6001CC9")]
		[Address(RVA = "0xD4D814", Offset = "0xD4D814", VA = "0xD4D814")]
		public void IncreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6001CCA")]
		[Address(RVA = "0xD512CC", Offset = "0xD512CC", VA = "0xD512CC")]
		private void UpdateSmokeEmissionBasedOnSpeed()
		{
		}

		[Token(Token = "0x6001CCB")]
		[Address(RVA = "0xD513C0", Offset = "0xD513C0", VA = "0xD513C0")]
		private float GetCurrentSmokeEmission()
		{
			return default(float);
		}

		[Token(Token = "0x6001CCC")]
		[Address(RVA = "0xD4D8A4", Offset = "0xD4D8A4", VA = "0xD4D8A4")]
		public void SmokeButtonStateChanged()
		{
		}

		[Token(Token = "0x6001CCD")]
		[Address(RVA = "0xD4D950", Offset = "0xD4D950", VA = "0xD4D950")]
		public void WhistleButtonStateChanged()
		{
		}

		[Token(Token = "0x6001CCE")]
		[Address(RVA = "0xD4DA30", Offset = "0xD4DA30", VA = "0xD4DA30")]
		public void ReverseButtonStateChanged()
		{
		}

		[Token(Token = "0x6001CCF")]
		[Address(RVA = "0xD513FC", Offset = "0xD513FC", VA = "0xD513FC")]
		public TrainLocomotive()
		{
		}
	}
	[Token(Token = "0x2000552")]
	public class TrainTrack : MonoBehaviour
	{
		[Token(Token = "0x4001C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _gridSize;

		[Token(Token = "0x4001C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int _subDivCount;

		[Token(Token = "0x4001C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform _segmentParent;

		[Token(Token = "0x4001C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _trainParent;

		[Token(Token = "0x4001C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _regnerateTrackMeshOnAwake;

		[Token(Token = "0x4001C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _trainLength;

		[Token(Token = "0x4001C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TrackSegment[] _trackSegments;

		[Token(Token = "0x1700048E")]
		public float TrackLength
		{
			[Token(Token = "0x6001CD6")]
			[Address(RVA = "0xD516B4", Offset = "0xD516B4", VA = "0xD516B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CD7")]
			[Address(RVA = "0xD516BC", Offset = "0xD516BC", VA = "0xD516BC")]
			private set
			{
			}
		}

		[Token(Token = "0x6001CD8")]
		[Address(RVA = "0xD516C4", Offset = "0xD516C4", VA = "0xD516C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CD9")]
		[Address(RVA = "0xD505D8", Offset = "0xD505D8", VA = "0xD505D8")]
		public TrackSegment GetSegment(float distance)
		{
			return null;
		}

		[Token(Token = "0x6001CDA")]
		[Address(RVA = "0xD516C8", Offset = "0xD516C8", VA = "0xD516C8")]
		public void Regenerate()
		{
		}

		[Token(Token = "0x6001CDB")]
		[Address(RVA = "0xD518B4", Offset = "0xD518B4", VA = "0xD518B4")]
		private void SetScale(float ratio)
		{
		}

		[Token(Token = "0x6001CDC")]
		[Address(RVA = "0xD51994", Offset = "0xD51994", VA = "0xD51994")]
		public TrainTrack()
		{
		}
	}
	[Token(Token = "0x2000553")]
	public class Pose
	{
		[Token(Token = "0x4001C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityEngine.Vector3 Position;

		[Token(Token = "0x4001C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x6001CDD")]
		[Address(RVA = "0xD4F6C0", Offset = "0xD4F6C0", VA = "0xD4F6C0")]
		public Pose()
		{
		}

		[Token(Token = "0x6001CDE")]
		[Address(RVA = "0xD519B0", Offset = "0xD519B0", VA = "0xD519B0")]
		public Pose(UnityEngine.Vector3 position, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x2000554")]
	public class WindmillBladesController : MonoBehaviour
	{
		[Token(Token = "0x2000555")]
		[CompilerGenerated]
		private sealed class <LerpToSpeed>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4001C95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float goalSpeed;

			[Token(Token = "0x4001C96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <totalTime>5__2;

			[Token(Token = "0x4001C97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startSpeed>5__3;

			[Token(Token = "0x17000490")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CEB")]
				[Address(RVA = "0xD51F3C", Offset = "0xD51F3C", VA = "0xD51F3C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000491")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CED")]
				[Address(RVA = "0xD51F84", Offset = "0xD51F84", VA = "0xD51F84", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CE8")]
			[Address(RVA = "0xD51C6C", Offset = "0xD51C6C", VA = "0xD51C6C")]
			[DebuggerHidden]
			public <LerpToSpeed>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6001CE9")]
			[Address(RVA = "0xD51DB8", Offset = "0xD51DB8", VA = "0xD51DB8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CEA")]
			[Address(RVA = "0xD51DBC", Offset = "0xD51DBC", VA = "0xD51DBC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CEC")]
			[Address(RVA = "0xD51F44", Offset = "0xD51F44", VA = "0xD51F44", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000556")]
		[CompilerGenerated]
		private sealed class <PlaySoundDelayed>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001C98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001C99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001C9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4001C9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioClip initial;

			[Token(Token = "0x4001C9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float timeDelayAfterInitial;

			[Token(Token = "0x4001C9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AudioClip clip;

			[Token(Token = "0x17000492")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CF1")]
				[Address(RVA = "0xD52054", Offset = "0xD52054", VA = "0xD52054", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000493")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CF3")]
				[Address(RVA = "0xD5209C", Offset = "0xD5209C", VA = "0xD5209C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CEE")]
			[Address(RVA = "0xD51D20", Offset = "0xD51D20", VA = "0xD51D20")]
			[DebuggerHidden]
			public <PlaySoundDelayed>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6001CEF")]
			[Address(RVA = "0xD51F8C", Offset = "0xD51F8C", VA = "0xD51F8C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CF0")]
			[Address(RVA = "0xD51F90", Offset = "0xD51F90", VA = "0xD51F90", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CF2")]
			[Address(RVA = "0xD5205C", Offset = "0xD5205C", VA = "0xD5205C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001C87")]
		private const float MAX_TIME = 1f;

		[Token(Token = "0x4001C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4001C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip _windMillRotationSound;

		[Token(Token = "0x4001C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip _windMillStartSound;

		[Token(Token = "0x4001C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip _windMillStopSound;

		[Token(Token = "0x4001C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _currentSpeed;

		[Token(Token = "0x4001C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _lerpSpeedCoroutine;

		[Token(Token = "0x4001C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine _audioChangeCr;

		[Token(Token = "0x4001C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion _originalRotation;

		[Token(Token = "0x4001C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _rotAngle;

		[Token(Token = "0x1700048F")]
		public bool IsMoving
		{
			[Token(Token = "0x6001CDF")]
			[Address(RVA = "0xD51A14", Offset = "0xD51A14", VA = "0xD51A14")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001CE0")]
			[Address(RVA = "0xD51A1C", Offset = "0xD51A1C", VA = "0xD51A1C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001CE1")]
		[Address(RVA = "0xD51A28", Offset = "0xD51A28", VA = "0xD51A28")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CE2")]
		[Address(RVA = "0xD51A58", Offset = "0xD51A58", VA = "0xD51A58")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CE3")]
		[Address(RVA = "0xD51B98", Offset = "0xD51B98", VA = "0xD51B98")]
		public void SetMoveState(bool newMoveState, float goalSpeed)
		{
		}

		[Token(Token = "0x6001CE4")]
		[Address(RVA = "0xD51BF4", Offset = "0xD51BF4", VA = "0xD51BF4")]
		[IteratorStateMachine(typeof(<LerpToSpeed>d__17))]
		private IEnumerator LerpToSpeed(float goalSpeed)
		{
			return null;
		}

		[Token(Token = "0x6001CE5")]
		[Address(RVA = "0xD51C94", Offset = "0xD51C94", VA = "0xD51C94")]
		[IteratorStateMachine(typeof(<PlaySoundDelayed>d__18))]
		private IEnumerator PlaySoundDelayed(AudioClip initial, AudioClip clip, float timeDelayAfterInitial)
		{
			return null;
		}

		[Token(Token = "0x6001CE6")]
		[Address(RVA = "0xD51D48", Offset = "0xD51D48", VA = "0xD51D48")]
		private void PlaySound(AudioClip clip, bool loop = false)
		{
		}

		[Token(Token = "0x6001CE7")]
		[Address(RVA = "0xD51DB0", Offset = "0xD51DB0", VA = "0xD51DB0")]
		public WindmillBladesController()
		{
		}
	}
	[Token(Token = "0x2000557")]
	public class WindmillController : MonoBehaviour
	{
		[Token(Token = "0x4001C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4001C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _maxSpeed;

		[Token(Token = "0x4001CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x4001CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WindmillBladesController _bladesRotation;

		[Token(Token = "0x4001CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0xD520A4", Offset = "0xD520A4", VA = "0xD520A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0xD52104", Offset = "0xD52104", VA = "0xD52104")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0xD521CC", Offset = "0xD521CC", VA = "0xD521CC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0xD522DC", Offset = "0xD522DC", VA = "0xD522DC")]
		private void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6001CF8")]
		[Address(RVA = "0xD52354", Offset = "0xD52354", VA = "0xD52354")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CF9")]
		[Address(RVA = "0xD5241C", Offset = "0xD5241C", VA = "0xD5241C")]
		public WindmillController()
		{
		}
	}
	[Token(Token = "0x2000558")]
	public enum EUiDisplayType
	{
		[Token(Token = "0x4001CA4")]
		EUDT_WorldGeoQuad,
		[Token(Token = "0x4001CA5")]
		EUDT_OverlayQuad,
		[Token(Token = "0x4001CA6")]
		EUDT_None,
		[Token(Token = "0x4001CA7")]
		EUDT_MaxDislayTypes
	}
	[Token(Token = "0x2000559")]
	public class OVROverlaySample : MonoBehaviour
	{
		[Token(Token = "0x200055A")]
		[CompilerGenerated]
		private sealed class <WaitforOVROverlay>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001CC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001CC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001CC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OVROverlaySample <>4__this;

			[Token(Token = "0x17000494")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001D0D")]
				[Address(RVA = "0xD53A20", Offset = "0xD53A20", VA = "0xD53A20", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000495")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001D0F")]
				[Address(RVA = "0xD53A68", Offset = "0xD53A68", VA = "0xD53A68", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001D0A")]
			[Address(RVA = "0xD530E4", Offset = "0xD530E4", VA = "0xD530E4")]
			[DebuggerHidden]
			public <WaitforOVROverlay>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6001D0B")]
			[Address(RVA = "0xD53840", Offset = "0xD53840", VA = "0xD53840", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001D0C")]
			[Address(RVA = "0xD53844", Offset = "0xD53844", VA = "0xD53844", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001D0E")]
			[Address(RVA = "0xD53A28", Offset = "0xD53A28", VA = "0xD53A28", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inMenu;

		[Token(Token = "0x4001CA9")]
		private const string ovrOverlayID = "OVROverlayID";

		[Token(Token = "0x4001CAA")]
		private const string applicationID = "ApplicationID";

		[Token(Token = "0x4001CAB")]
		private const string noneID = "NoneID";

		[Token(Token = "0x4001CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Toggle applicationRadioButton;

		[Token(Token = "0x4001CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Toggle noneRadioButton;

		[Token(Token = "0x4001CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("App vs Compositor Comparison Settings")]
		public GameObject mainCamera;

		[Token(Token = "0x4001CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject uiCamera;

		[Token(Token = "0x4001CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject uiGeoParent;

		[Token(Token = "0x4001CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject worldspaceGeoParent;

		[Token(Token = "0x4001CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OVROverlay cameraRenderOverlay;

		[Token(Token = "0x4001CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OVROverlay renderingLabelOverlay;

		[Token(Token = "0x4001CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture applicationLabelTexture;

		[Token(Token = "0x4001CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture compositorLabelTexture;

		[Token(Token = "0x4001CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Level Loading Sim Settings")]
		public GameObject prefabForLevelLoadSim;

		[Token(Token = "0x4001CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public OVROverlay cubemapOverlay;

		[Token(Token = "0x4001CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public OVROverlay loadingTextQuadOverlay;

		[Token(Token = "0x4001CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float distanceFromCamToLoadText;

		[Token(Token = "0x4001CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cubeSpawnRadius;

		[Token(Token = "0x4001CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float heightBetweenItems;

		[Token(Token = "0x4001CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int numObjectsPerLevel;

		[Token(Token = "0x4001CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int numLevels;

		[Token(Token = "0x4001CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int numLoopsTrigger;

		[Token(Token = "0x4001CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<GameObject> spawnedCubes;

		[Token(Token = "0x6001CFA")]
		[Address(RVA = "0xD5242C", Offset = "0xD5242C", VA = "0xD5242C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CFB")]
		[Address(RVA = "0xD52C48", Offset = "0xD52C48", VA = "0xD52C48")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CFC")]
		[Address(RVA = "0xD52D70", Offset = "0xD52D70", VA = "0xD52D70")]
		private void ActivateWorldGeo()
		{
		}

		[Token(Token = "0x6001CFD")]
		[Address(RVA = "0xD52E8C", Offset = "0xD52E8C", VA = "0xD52E8C")]
		private void ActivateOVROverlay()
		{
		}

		[Token(Token = "0x6001CFE")]
		[Address(RVA = "0xD52FA8", Offset = "0xD52FA8", VA = "0xD52FA8")]
		private void ActivateNone()
		{
		}

		[Token(Token = "0x6001CFF")]
		[Address(RVA = "0xD52D50", Offset = "0xD52D50", VA = "0xD52D50")]
		private void TriggerLoad()
		{
		}

		[Token(Token = "0x6001D00")]
		[Address(RVA = "0xD5307C", Offset = "0xD5307C", VA = "0xD5307C")]
		[IteratorStateMachine(typeof(<WaitforOVROverlay>d__30))]
		private IEnumerator WaitforOVROverlay()
		{
			return null;
		}

		[Token(Token = "0x6001D01")]
		[Address(RVA = "0xD5310C", Offset = "0xD5310C", VA = "0xD5310C")]
		private void TriggerUnload()
		{
		}

		[Token(Token = "0x6001D02")]
		[Address(RVA = "0xD52884", Offset = "0xD52884", VA = "0xD52884")]
		private void CameraAndRenderTargetSetup()
		{
		}

		[Token(Token = "0x6001D03")]
		[Address(RVA = "0xD53254", Offset = "0xD53254", VA = "0xD53254")]
		private void SimulateLevelLoad()
		{
		}

		[Token(Token = "0x6001D04")]
		[Address(RVA = "0xD53134", Offset = "0xD53134", VA = "0xD53134")]
		private void ClearObjects()
		{
		}

		[Token(Token = "0x6001D05")]
		[Address(RVA = "0xD535D0", Offset = "0xD535D0", VA = "0xD535D0")]
		public void RadioPressed(string radioLabel, string group, Toggle t)
		{
		}

		[Token(Token = "0x6001D06")]
		[Address(RVA = "0xD536BC", Offset = "0xD536BC", VA = "0xD536BC")]
		public OVROverlaySample()
		{
		}
	}
}
namespace OVRTouchSample
{
	[Token(Token = "0x200055B")]
	[RequireComponent(typeof(OVRGrabber))]
	public class Hand : MonoBehaviour
	{
		[Token(Token = "0x4001CC3")]
		public const string ANIM_LAYER_NAME_POINT = "Point Layer";

		[Token(Token = "0x4001CC4")]
		public const string ANIM_LAYER_NAME_THUMB = "Thumb Layer";

		[Token(Token = "0x4001CC5")]
		public const string ANIM_PARAM_NAME_FLEX = "Flex";

		[Token(Token = "0x4001CC6")]
		public const string ANIM_PARAM_NAME_POSE = "Pose";

		[Token(Token = "0x4001CC7")]
		public const float THRESH_COLLISION_FLEX = 0.9f;

		[Token(Token = "0x4001CC8")]
		public const float INPUT_RATE_CHANGE = 20f;

		[Token(Token = "0x4001CC9")]
		public const float COLLIDER_SCALE_MIN = 0.01f;

		[Token(Token = "0x4001CCA")]
		public const float COLLIDER_SCALE_MAX = 1f;

		[Token(Token = "0x4001CCB")]
		public const float COLLIDER_SCALE_PER_SECOND = 1f;

		[Token(Token = "0x4001CCC")]
		public const float TRIGGER_DEBOUNCE_TIME = 0.05f;

		[Token(Token = "0x4001CCD")]
		public const float THUMB_DEBOUNCE_TIME = 0.15f;

		[Token(Token = "0x4001CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool rightHand;

		[Token(Token = "0x4001CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x4001CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HandPose m_defaultGrabPose;

		[Token(Token = "0x4001CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] m_colliders;

		[Token(Token = "0x4001CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_collisionEnabled;

		[Token(Token = "0x4001CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRGrabber m_grabber;

		[Token(Token = "0x4001CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Renderer> m_showAfterInputFocusAcquired;

		[Token(Token = "0x4001CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_animLayerIndexThumb;

		[Token(Token = "0x4001CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_animLayerIndexPoint;

		[Token(Token = "0x4001CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_animParamIndexFlex;

		[Token(Token = "0x4001CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_animParamIndexPose;

		[Token(Token = "0x4001CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_isPointing;

		[Token(Token = "0x4001CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool m_isGivingThumbsUp;

		[Token(Token = "0x4001CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_pointBlend;

		[Token(Token = "0x4001CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_thumbsUpBlend;

		[Token(Token = "0x4001CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x4001CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_collisionScaleCurrent;

		[Token(Token = "0x6001D10")]
		[Address(RVA = "0xD53A70", Offset = "0xD53A70", VA = "0xD53A70")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D11")]
		[Address(RVA = "0xD53AC0", Offset = "0xD53AC0", VA = "0xD53AC0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D12")]
		[Address(RVA = "0xD5400C", Offset = "0xD5400C", VA = "0xD5400C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001D13")]
		[Address(RVA = "0xD540F8", Offset = "0xD540F8", VA = "0xD540F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D14")]
		[Address(RVA = "0xD54278", Offset = "0xD54278", VA = "0xD54278")]
		private void UpdateCapTouchStates()
		{
		}

		[Token(Token = "0x6001D15")]
		[Address(RVA = "0xD54598", Offset = "0xD54598", VA = "0xD54598")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001D16")]
		[Address(RVA = "0xD5467C", Offset = "0xD5467C", VA = "0xD5467C")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6001D17")]
		[Address(RVA = "0xD54850", Offset = "0xD54850", VA = "0xD54850")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6001D18")]
		[Address(RVA = "0xD5431C", Offset = "0xD5431C", VA = "0xD5431C")]
		private float InputValueRateChange(bool isDown, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6001D19")]
		[Address(RVA = "0xD54370", Offset = "0xD54370", VA = "0xD54370")]
		private void UpdateAnimStates()
		{
		}

		[Token(Token = "0x6001D1A")]
		[Address(RVA = "0xD53ECC", Offset = "0xD53ECC", VA = "0xD53ECC")]
		private void CollisionEnable(bool enabled)
		{
		}

		[Token(Token = "0x6001D1B")]
		[Address(RVA = "0xD54974", Offset = "0xD54974", VA = "0xD54974")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x200055D")]
	public enum HandPoseId
	{
		[Token(Token = "0x4001CE2")]
		Default,
		[Token(Token = "0x4001CE3")]
		Generic,
		[Token(Token = "0x4001CE4")]
		PingPongBall,
		[Token(Token = "0x4001CE5")]
		Controller
	}
	[Token(Token = "0x200055E")]
	public class HandPose : MonoBehaviour
	{
		[Token(Token = "0x4001CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_allowPointing;

		[Token(Token = "0x4001CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		private bool m_allowThumbsUp;

		[Token(Token = "0x4001CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private HandPoseId m_poseId;

		[Token(Token = "0x17000496")]
		public bool AllowPointing
		{
			[Token(Token = "0x6001D1F")]
			[Address(RVA = "0xD54A24", Offset = "0xD54A24", VA = "0xD54A24")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000497")]
		public bool AllowThumbsUp
		{
			[Token(Token = "0x6001D20")]
			[Address(RVA = "0xD54A2C", Offset = "0xD54A2C", VA = "0xD54A2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000498")]
		public HandPoseId PoseId
		{
			[Token(Token = "0x6001D21")]
			[Address(RVA = "0xD54A34", Offset = "0xD54A34", VA = "0xD54A34")]
			get
			{
				return default(HandPoseId);
			}
		}

		[Token(Token = "0x6001D22")]
		[Address(RVA = "0xD54A3C", Offset = "0xD54A3C", VA = "0xD54A3C")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x200055F")]
	public class TouchController : MonoBehaviour
	{
		[Token(Token = "0x4001CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x4001CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x4001CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x6001D23")]
		[Address(RVA = "0xD54A44", Offset = "0xD54A44", VA = "0xD54A44")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D24")]
		[Address(RVA = "0xD54D10", Offset = "0xD54D10", VA = "0xD54D10")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6001D25")]
		[Address(RVA = "0xD54D60", Offset = "0xD54D60", VA = "0xD54D60")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6001D26")]
		[Address(RVA = "0xD54D98", Offset = "0xD54D98", VA = "0xD54D98")]
		public TouchController()
		{
		}
	}
}
namespace VolumetricLines
{
	[Token(Token = "0x2000560")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(MeshFilter))]
	[RequireComponent(typeof(MeshRenderer))]
	public class VolumetricLineBehavior : MonoBehaviour
	{
		[Token(Token = "0x4001CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Material m_templateMaterial;

		[Token(Token = "0x4001CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool m_doNotOverwriteTemplateMaterialProperties;

		[Token(Token = "0x4001CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private UnityEngine.Vector3 m_startPos;

		[Token(Token = "0x4001CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEngine.Vector3 m_endPos;

		[Token(Token = "0x4001CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private Color m_lineColor;

		[Token(Token = "0x4001CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float m_lineWidth;

		[Token(Token = "0x4001CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Range(0f, 1f)]
		private float m_lightSaberFactor;

		[Token(Token = "0x4001CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_material;

		[Token(Token = "0x4001CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MeshFilter m_meshFilter;

		[Token(Token = "0x17000499")]
		public Material TemplateMaterial
		{
			[Token(Token = "0x6001D27")]
			[Address(RVA = "0xD54DA0", Offset = "0xD54DA0", VA = "0xD54DA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001D28")]
			[Address(RVA = "0xD54DA8", Offset = "0xD54DA8", VA = "0xD54DA8")]
			set
			{
			}
		}

		[Token(Token = "0x1700049A")]
		public bool DoNotOverwriteTemplateMaterialProperties
		{
			[Token(Token = "0x6001D29")]
			[Address(RVA = "0xD54DB0", Offset = "0xD54DB0", VA = "0xD54DB0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001D2A")]
			[Address(RVA = "0xD54DB8", Offset = "0xD54DB8", VA = "0xD54DB8")]
			set
			{
			}
		}

		[Token(Token = "0x1700049B")]
		public Color LineColor
		{
			[Token(Token = "0x6001D2B")]
			[Address(RVA = "0xD54DC4", Offset = "0xD54DC4", VA = "0xD54DC4")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6001D2C")]
			[Address(RVA = "0xD54DD0", Offset = "0xD54DD0", VA = "0xD54DD0")]
			set
			{
			}
		}

		[Token(Token = "0x1700049C")]
		public float LineWidth
		{
			[Token(Token = "0x6001D2D")]
			[Address(RVA = "0xD54FB4", Offset = "0xD54FB4", VA = "0xD54FB4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D2E")]
			[Address(RVA = "0xD54FBC", Offset = "0xD54FBC", VA = "0xD54FBC")]
			set
			{
			}
		}

		[Token(Token = "0x1700049D")]
		public float LightSaberFactor
		{
			[Token(Token = "0x6001D2F")]
			[Address(RVA = "0xD55078", Offset = "0xD55078", VA = "0xD55078")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D30")]
			[Address(RVA = "0xD55080", Offset = "0xD55080", VA = "0xD55080")]
			set
			{
			}
		}

		[Token(Token = "0x1700049E")]
		public UnityEngine.Vector3 StartPos
		{
			[Token(Token = "0x6001D31")]
			[Address(RVA = "0xD5513C", Offset = "0xD5513C", VA = "0xD5513C")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6001D32")]
			[Address(RVA = "0xD55148", Offset = "0xD55148", VA = "0xD55148")]
			set
			{
			}
		}

		[Token(Token = "0x1700049F")]
		public UnityEngine.Vector3 EndPos
		{
			[Token(Token = "0x6001D33")]
			[Address(RVA = "0xD553C4", Offset = "0xD553C4", VA = "0xD553C4")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6001D34")]
			[Address(RVA = "0xD553D0", Offset = "0xD553D0", VA = "0xD553D0")]
			set
			{
			}
		}

		[Token(Token = "0x6001D35")]
		[Address(RVA = "0xD54E9C", Offset = "0xD54E9C", VA = "0xD54E9C")]
		private void CreateMaterial()
		{
		}

		[Token(Token = "0x6001D36")]
		[Address(RVA = "0xD5552C", Offset = "0xD5552C", VA = "0xD5552C")]
		private void DestroyMaterial()
		{
		}

		[Token(Token = "0x6001D37")]
		[Address(RVA = "0xD553F0", Offset = "0xD553F0", VA = "0xD553F0")]
		private void SetAllMaterialProperties()
		{
		}

		[Token(Token = "0x6001D38")]
		[Address(RVA = "0xD5515C", Offset = "0xD5515C", VA = "0xD5515C")]
		public void SetStartAndEndPoints(UnityEngine.Vector3 startPoint, UnityEngine.Vector3 endPoint)
		{
		}

		[Token(Token = "0x6001D39")]
		[Address(RVA = "0xD55610", Offset = "0xD55610", VA = "0xD55610")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D3A")]
		[Address(RVA = "0xD55914", Offset = "0xD55914", VA = "0xD55914")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001D3B")]
		[Address(RVA = "0xD55918", Offset = "0xD55918", VA = "0xD55918")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D3C")]
		[Address(RVA = "0xD559E4", Offset = "0xD559E4", VA = "0xD559E4")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6001D3D")]
		[Address(RVA = "0xD559FC", Offset = "0xD559FC", VA = "0xD559FC")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001D3E")]
		[Address(RVA = "0xD55AB8", Offset = "0xD55AB8", VA = "0xD55AB8")]
		public VolumetricLineBehavior()
		{
		}
	}
	[Token(Token = "0x2000561")]
	public static class VolumetricLineVertexData
	{
		[Token(Token = "0x4001CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UnityEngine.Vector2[] TexCoords;

		[Token(Token = "0x4001CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly UnityEngine.Vector2[] VertexOffsets;

		[Token(Token = "0x4001CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly int[] Indices;
	}
}
namespace VolumetricLines.Utils
{
	[Token(Token = "0x2000562")]
	public static class TransformExtensionMethods
	{
		[Token(Token = "0x6001D40")]
		[Address(RVA = "0xD555B8", Offset = "0xD555B8", VA = "0xD555B8")]
		public static float GetGlobalUniformScaleForLineWidth(this Transform trans)
		{
			return default(float);
		}
	}
}
namespace NOLO
{
	[Token(Token = "0x2000563")]
	public struct Nolo_Vector3
	{
		[Token(Token = "0x4001CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;
	}
	[Token(Token = "0x2000564")]
	public struct Nolo_Vector2
	{
		[Token(Token = "0x4001CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;
	}
	[Token(Token = "0x2000565")]
	public struct Nolo_Quaternion
	{
		[Token(Token = "0x4001CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x4001CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x4001CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x4001D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float w;
	}
	[Token(Token = "0x2000566")]
	public enum EBattery
	{
		[Token(Token = "0x4001D02")]
		ShutDown,
		[Token(Token = "0x4001D03")]
		Low,
		[Token(Token = "0x4001D04")]
		Middle,
		[Token(Token = "0x4001D05")]
		High
	}
	[Token(Token = "0x2000567")]
	public struct Nolo_Pose
	{
		[Token(Token = "0x4001D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Nolo_Vector3 pos;

		[Token(Token = "0x4001D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Nolo_Quaternion rot;

		[Token(Token = "0x4001D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Nolo_Vector3 vecVelocity;

		[Token(Token = "0x4001D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Nolo_Vector3 vecAngularVelocity;
	}
	[Token(Token = "0x2000568")]
	public struct Nolo_ControllerStates
	{
		[Token(Token = "0x4001D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint buttons;

		[Token(Token = "0x4001D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint touches;

		[Token(Token = "0x4001D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Nolo_Vector2 touchpadAxis;
	}
	[Token(Token = "0x2000569")]
	[UnmanagedFunctionPointer(CallingConvention.StdCall)]
	public delegate void DisConnectedCallBack();
	[Token(Token = "0x200056A")]
	[UnmanagedFunctionPointer(CallingConvention.StdCall)]
	public delegate void ConnectedCallBack();
	[Token(Token = "0x200056B")]
	public class NOLOClient_V2_API
	{
		[Token(Token = "0x4001D0D")]
		public const string dllName = "noloRuntime";

		[Token(Token = "0x6001D49")]
		[Address(RVA = "0xD55E58", Offset = "0xD55E58", VA = "0xD55E58")]
		public static Nolo_Transform GetPoseByDeviceType(int deviceIndex)
		{
			return default(Nolo_Transform);
		}

		[Token(Token = "0x6001D4A")]
		[Address(RVA = "0xD55FFC", Offset = "0xD55FFC", VA = "0xD55FFC")]
		public static NoloVR_Plugins.Nolo_ControllerStates GetControllerStatesByDeviceType(int deviceIndex)
		{
			return default(NoloVR_Plugins.Nolo_ControllerStates);
		}

		[Token(Token = "0x6001D4B")]
		[Address(RVA = "0xD560A4", Offset = "0xD560A4", VA = "0xD560A4")]
		public static int GetElectricityByDeviceType(int deviceIndex)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6001D4C")]
		[Address(RVA = "0xD560F0", Offset = "0xD560F0", VA = "0xD560F0")]
		public static extern void open_Nolo_ZeroMQ();

		[PreserveSig]
		[Token(Token = "0x6001D4D")]
		[Address(RVA = "0xD56154", Offset = "0xD56154", VA = "0xD56154")]
		public static extern void close_Nolo_ZeroMQ();

		[PreserveSig]
		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0xD55EFC", Offset = "0xD55EFC", VA = "0xD55EFC")]
		public static extern int get_Nolo_Battery(int type);

		[PreserveSig]
		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0xD55F78", Offset = "0xD55F78", VA = "0xD55F78")]
		public static extern Nolo_Pose get_Nolo_Pose(int type);

		[PreserveSig]
		[Token(Token = "0x6001D50")]
		[Address(RVA = "0xD56028", Offset = "0xD56028", VA = "0xD56028")]
		public static extern Nolo_ControllerStates get_Nolo_ControllerStates(int type);

		[PreserveSig]
		[Token(Token = "0x6001D51")]
		[Address(RVA = "0xD561B8", Offset = "0xD561B8", VA = "0xD561B8")]
		public static extern bool Nolovr_TriggerHapticPulse(int type, int intensity);

		[PreserveSig]
		[Token(Token = "0x6001D52")]
		[Address(RVA = "0xD56244", Offset = "0xD56244", VA = "0xD56244")]
		public static extern bool disConnenct_FunCallBack(DisConnectedCallBack callback);

		[PreserveSig]
		[Token(Token = "0x6001D53")]
		[Address(RVA = "0xD562CC", Offset = "0xD562CC", VA = "0xD562CC")]
		public static extern bool connectSuccess_FunCallBack(ConnectedCallBack callback);

		[Token(Token = "0x6001D54")]
		[Address(RVA = "0xD56354", Offset = "0xD56354", VA = "0xD56354")]
		public NOLOClient_V2_API()
		{
		}
	}
}
namespace Eppy
{
	[Token(Token = "0x200056C")]
	public sealed class Tuple<T1, T2>
	{
		[Token(Token = "0x4001D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T1 item1;

		[Token(Token = "0x4001D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly T2 item2;

		[Token(Token = "0x170004A0")]
		public T1 Item1
		{
			[Token(Token = "0x6001D55")]
			get
			{
				return (T1)null;
			}
		}

		[Token(Token = "0x170004A1")]
		public T2 Item2
		{
			[Token(Token = "0x6001D56")]
			get
			{
				return (T2)null;
			}
		}

		[Token(Token = "0x6001D57")]
		public Tuple(T1 item1, T2 item2)
		{
		}

		[Token(Token = "0x6001D58")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001D59")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001D5A")]
		public override bool Equals(object o)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D5B")]
		public bool Equals(Tuple<T1, T2> other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D5C")]
		public static bool operator ==(Tuple<T1, T2> a, Tuple<T1, T2> b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D5D")]
		public static bool operator !=(Tuple<T1, T2> a, Tuple<T1, T2> b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D5E")]
		public void Unpack(Action<T1, T2> unpackerDelegate)
		{
		}
	}
}
namespace SharpNav
{
	[Serializable]
	[Token(Token = "0x200056D")]
	public struct Area : IEquatable<Area>, IEquatable<byte>
	{
		[Token(Token = "0x4001D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Area Null;

		[Token(Token = "0x4001D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static readonly Area Default;

		[Token(Token = "0x4001D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly byte Id;

		[Token(Token = "0x170004A2")]
		public bool IsWalkable
		{
			[Token(Token = "0x6001D60")]
			[Address(RVA = "0xD56364", Offset = "0xD56364", VA = "0xD56364")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001D5F")]
		[Address(RVA = "0xD5635C", Offset = "0xD5635C", VA = "0xD5635C")]
		public Area(byte id)
		{
		}

		[Token(Token = "0x6001D61")]
		[Address(RVA = "0xD56374", Offset = "0xD56374", VA = "0xD56374")]
		public static implicit operator Area(byte value)
		{
			return default(Area);
		}

		[Token(Token = "0x6001D62")]
		[Address(RVA = "0xD5637C", Offset = "0xD5637C", VA = "0xD5637C")]
		public static bool operator ==(Area left, Area right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D63")]
		[Address(RVA = "0xD5639C", Offset = "0xD5639C", VA = "0xD5639C")]
		public static bool operator !=(Area left, Area right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D64")]
		[Address(RVA = "0xD5638C", Offset = "0xD5638C", VA = "0xD5638C", Slot = "4")]
		public bool Equals(Area other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D65")]
		[Address(RVA = "0xD56404", Offset = "0xD56404", VA = "0xD56404", Slot = "5")]
		public bool Equals(byte other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D66")]
		[Address(RVA = "0xD56414", Offset = "0xD56414", VA = "0xD56414", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D67")]
		[Address(RVA = "0xD56594", Offset = "0xD56594", VA = "0xD56594", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001D68")]
		[Address(RVA = "0xD565B4", Offset = "0xD565B4", VA = "0xD565B4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200056E")]
	public class AreaGenerator
	{
		[Token(Token = "0x4001D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IEnumerable<Triangle3> tris;

		[Token(Token = "0x4001D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int triCount;

		[Token(Token = "0x4001D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Eppy.Tuple<Func<Triangle3, bool>, Area>> conditions;

		[Token(Token = "0x4001D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Area defaultArea;

		[Token(Token = "0x6001D6A")]
		[Address(RVA = "0xD56670", Offset = "0xD56670", VA = "0xD56670")]
		private AreaGenerator(IEnumerable<Triangle3> verts, int triCount, Area defaultArea)
		{
		}

		[Token(Token = "0x6001D6B")]
		[Address(RVA = "0xD56718", Offset = "0xD56718", VA = "0xD56718")]
		public static AreaGenerator From(IEnumerable<Triangle3> tris, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D6C")]
		[Address(RVA = "0xD567B4", Offset = "0xD567B4", VA = "0xD567B4")]
		public static AreaGenerator From(IEnumerable<Triangle3> tris, int triCount, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D6D")]
		[Address(RVA = "0xD5682C", Offset = "0xD5682C", VA = "0xD5682C")]
		public static AreaGenerator From(Triangle3[] tris, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D6E")]
		[Address(RVA = "0xD568C0", Offset = "0xD568C0", VA = "0xD568C0")]
		public static AreaGenerator From(Triangle3[] tris, int triOffset, int triCount, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D6F")]
		[Address(RVA = "0xD56960", Offset = "0xD56960", VA = "0xD56960")]
		public static AreaGenerator From(SharpNav.Geometry.Vector3[] verts, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D70")]
		[Address(RVA = "0xD56A28", Offset = "0xD56A28", VA = "0xD56A28")]
		public static AreaGenerator From(SharpNav.Geometry.Vector3[] verts, int vertOffset, int vertStride, int triCount, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D71")]
		[Address(RVA = "0xD56AD0", Offset = "0xD56AD0", VA = "0xD56AD0")]
		public static AreaGenerator From(float[] verts, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D72")]
		[Address(RVA = "0xD56B98", Offset = "0xD56B98", VA = "0xD56B98")]
		public static AreaGenerator From(float[] verts, int floatOffset, int floatStride, int triCount, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D73")]
		[Address(RVA = "0xD56C40", Offset = "0xD56C40", VA = "0xD56C40")]
		public static AreaGenerator From(SharpNav.Geometry.Vector3[] verts, int[] inds, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D74")]
		[Address(RVA = "0xD56D14", Offset = "0xD56D14", VA = "0xD56D14")]
		public static AreaGenerator From(SharpNav.Geometry.Vector3[] verts, int[] inds, int vertOffset, int vertStride, int indexOffset, int triCount, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D75")]
		[Address(RVA = "0xD56DD4", Offset = "0xD56DD4", VA = "0xD56DD4")]
		public static AreaGenerator From(float[] verts, int[] inds, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D76")]
		[Address(RVA = "0xD56EA8", Offset = "0xD56EA8", VA = "0xD56EA8")]
		public static AreaGenerator From(float[] verts, int[] inds, int floatOffset, int floatStride, int indexOffset, int triCount, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D77")]
		[Address(RVA = "0xD56F68", Offset = "0xD56F68", VA = "0xD56F68")]
		public Area[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6001D78")]
		[Address(RVA = "0xD57480", Offset = "0xD57480", VA = "0xD57480")]
		public AreaGenerator MarkAboveSlope(float angle, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D79")]
		[Address(RVA = "0xD57610", Offset = "0xD57610", VA = "0xD57610")]
		public AreaGenerator MarkBelowSlope(float angle, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D7A")]
		[Address(RVA = "0xD577A0", Offset = "0xD577A0", VA = "0xD577A0")]
		public AreaGenerator MarkAtSlope(float angle, float range, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D7B")]
		[Address(RVA = "0xD57934", Offset = "0xD57934", VA = "0xD57934")]
		public AreaGenerator MarkBelowHeight(float y, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D7C")]
		[Address(RVA = "0xD57AC4", Offset = "0xD57AC4", VA = "0xD57AC4")]
		public AreaGenerator MarkAtHeight(float y, float radius, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D7D")]
		[Address(RVA = "0xD57B04", Offset = "0xD57B04", VA = "0xD57B04")]
		public AreaGenerator MarkAboveHeight(float y, Area area)
		{
			return null;
		}

		[Token(Token = "0x6001D7E")]
		[Address(RVA = "0xD57C94", Offset = "0xD57C94", VA = "0xD57C94")]
		public AreaGenerator MarkCustomFilter(Func<Triangle3, bool> func, Area area)
		{
			return null;
		}
	}
	[Token(Token = "0x2000574")]
	public class Cell
	{
		[Token(Token = "0x4001D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Span> spans;

		[Token(Token = "0x4001D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int height;

		[Token(Token = "0x170004A3")]
		public int Height
		{
			[Token(Token = "0x6001D8A")]
			[Address(RVA = "0xD57F90", Offset = "0xD57F90", VA = "0xD57F90")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004A4")]
		public int SpanCount
		{
			[Token(Token = "0x6001D8B")]
			[Address(RVA = "0xD57F98", Offset = "0xD57F98", VA = "0xD57F98")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004A5")]
		public int WalkableSpanCount
		{
			[Token(Token = "0x6001D8C")]
			[Address(RVA = "0xD57FE0", Offset = "0xD57FE0", VA = "0xD57FE0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004A6")]
		public ReadOnlyCollection<Span> Spans
		{
			[Token(Token = "0x6001D8D")]
			[Address(RVA = "0xD58078", Offset = "0xD58078", VA = "0xD58078")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004A7")]
		internal List<Span> MutableSpans
		{
			[Token(Token = "0x6001D8E")]
			[Address(RVA = "0xD580C8", Offset = "0xD580C8", VA = "0xD580C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004A8")]
		public Span? this[int location]
		{
			[Token(Token = "0x6001D8F")]
			[Address(RVA = "0xD580D0", Offset = "0xD580D0", VA = "0xD580D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001D89")]
		[Address(RVA = "0xD57F00", Offset = "0xD57F00", VA = "0xD57F00")]
		public Cell(int height)
		{
		}

		[Token(Token = "0x6001D90")]
		[Address(RVA = "0xD582F8", Offset = "0xD582F8", VA = "0xD582F8")]
		public void AddSpan(Span span)
		{
		}
	}
	[Token(Token = "0x2000575")]
	public struct CompactCell
	{
		[Token(Token = "0x4001D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int StartIndex;

		[Token(Token = "0x4001D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Count;

		[Token(Token = "0x6001D91")]
		[Address(RVA = "0xD585C8", Offset = "0xD585C8", VA = "0xD585C8")]
		public CompactCell(int start, int count)
		{
		}
	}
	[Token(Token = "0x2000576")]
	public class CompactHeightfield
	{
		[Token(Token = "0x2000577")]
		[CompilerGenerated]
		private sealed class <get_Item>d__42 : IEnumerable<CompactSpan>, IEnumerable, IEnumerator<CompactSpan>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private CompactSpan <>2__current;

			[Token(Token = "0x4001D30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001D31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int x;

			[Token(Token = "0x4001D32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int <>3__x;

			[Token(Token = "0x4001D33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public CompactHeightfield <>4__this;

			[Token(Token = "0x4001D34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int y;

			[Token(Token = "0x4001D35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public int <>3__y;

			[Token(Token = "0x4001D36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <end>5__2;

			[Token(Token = "0x4001D37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private int <i>5__3;

			[Token(Token = "0x170004B9")]
			private CompactSpan System.Collections.Generic.IEnumerator<SharpNav.CompactSpan>.Current
			{
				[Token(Token = "0x6001DB8")]
				[Address(RVA = "0xD5E344", Offset = "0xD5E344", VA = "0xD5E344", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(CompactSpan);
				}
			}

			[Token(Token = "0x170004BA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DBA")]
				[Address(RVA = "0xD5E394", Offset = "0xD5E394", VA = "0xD5E394", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DB5")]
			[Address(RVA = "0xD5E1F4", Offset = "0xD5E1F4", VA = "0xD5E1F4")]
			[DebuggerHidden]
			public <get_Item>d__42(int <>1__state)
			{
			}

			[Token(Token = "0x6001DB6")]
			[Address(RVA = "0xD5E228", Offset = "0xD5E228", VA = "0xD5E228", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DB7")]
			[Address(RVA = "0xD5E22C", Offset = "0xD5E22C", VA = "0xD5E22C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DB9")]
			[Address(RVA = "0xD5E354", Offset = "0xD5E354", VA = "0xD5E354", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001DBB")]
			[Address(RVA = "0xD5E3F0", Offset = "0xD5E3F0", VA = "0xD5E3F0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<CompactSpan> System.Collections.Generic.IEnumerable<SharpNav.CompactSpan>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001DBC")]
			[Address(RVA = "0xD5E4A4", Offset = "0xD5E4A4", VA = "0xD5E4A4", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000578")]
		[CompilerGenerated]
		private sealed class <get_Item>d__44 : IEnumerable<CompactSpan>, IEnumerable, IEnumerator<CompactSpan>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private CompactSpan <>2__current;

			[Token(Token = "0x4001D3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001D3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public CompactHeightfield <>4__this;

			[Token(Token = "0x4001D3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int i;

			[Token(Token = "0x4001D3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int <>3__i;

			[Token(Token = "0x4001D3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <end>5__2;

			[Token(Token = "0x4001D3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <j>5__3;

			[Token(Token = "0x170004BB")]
			private CompactSpan System.Collections.Generic.IEnumerator<SharpNav.CompactSpan>.Current
			{
				[Token(Token = "0x6001DC0")]
				[Address(RVA = "0xD5E594", Offset = "0xD5E594", VA = "0xD5E594", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(CompactSpan);
				}
			}

			[Token(Token = "0x170004BC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001DC2")]
				[Address(RVA = "0xD5E5E4", Offset = "0xD5E5E4", VA = "0xD5E5E4", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001DBD")]
			[Address(RVA = "0xD5E4A8", Offset = "0xD5E4A8", VA = "0xD5E4A8")]
			[DebuggerHidden]
			public <get_Item>d__44(int <>1__state)
			{
			}

			[Token(Token = "0x6001DBE")]
			[Address(RVA = "0xD5E4DC", Offset = "0xD5E4DC", VA = "0xD5E4DC", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001DBF")]
			[Address(RVA = "0xD5E4E0", Offset = "0xD5E4E0", VA = "0xD5E4E0", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001DC1")]
			[Address(RVA = "0xD5E5A4", Offset = "0xD5E5A4", VA = "0xD5E5A4", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001DC3")]
			[Address(RVA = "0xD5E640", Offset = "0xD5E640", VA = "0xD5E640", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<CompactSpan> System.Collections.Generic.IEnumerable<SharpNav.CompactSpan>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001DC4")]
			[Address(RVA = "0xD5E6EC", Offset = "0xD5E6EC", VA = "0xD5E6EC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4001D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BBox3 bounds;

		[Token(Token = "0x4001D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int width;

		[Token(Token = "0x4001D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int height;

		[Token(Token = "0x4001D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int length;

		[Token(Token = "0x4001D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float cellSize;

		[Token(Token = "0x4001D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float cellHeight;

		[Token(Token = "0x4001D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CompactCell[] cells;

		[Token(Token = "0x4001D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CompactSpan[] spans;

		[Token(Token = "0x4001D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Area[] areas;

		[Token(Token = "0x4001D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int[] distances;

		[Token(Token = "0x4001D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int maxDistance;

		[Token(Token = "0x4001D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int maxRegions;

		[Token(Token = "0x4001D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int borderSize;

		[Token(Token = "0x170004A9")]
		public int Width
		{
			[Token(Token = "0x6001D94")]
			[Address(RVA = "0xD58BB4", Offset = "0xD58BB4", VA = "0xD58BB4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004AA")]
		public int Height
		{
			[Token(Token = "0x6001D95")]
			[Address(RVA = "0xD58BBC", Offset = "0xD58BBC", VA = "0xD58BBC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004AB")]
		public int Length
		{
			[Token(Token = "0x6001D96")]
			[Address(RVA = "0xD58BC4", Offset = "0xD58BC4", VA = "0xD58BC4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004AC")]
		public BBox3 Bounds
		{
			[Token(Token = "0x6001D97")]
			[Address(RVA = "0xD58BCC", Offset = "0xD58BCC", VA = "0xD58BCC")]
			get
			{
				return default(BBox3);
			}
		}

		[Token(Token = "0x170004AD")]
		public float CellSize
		{
			[Token(Token = "0x6001D98")]
			[Address(RVA = "0xD58BE0", Offset = "0xD58BE0", VA = "0xD58BE0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170004AE")]
		public float CellHeight
		{
			[Token(Token = "0x6001D99")]
			[Address(RVA = "0xD58BE8", Offset = "0xD58BE8", VA = "0xD58BE8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170004AF")]
		public int MaxDistance
		{
			[Token(Token = "0x6001D9A")]
			[Address(RVA = "0xD58BF0", Offset = "0xD58BF0", VA = "0xD58BF0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004B0")]
		public int[] Distances
		{
			[Token(Token = "0x6001D9B")]
			[Address(RVA = "0xD58BF8", Offset = "0xD58BF8", VA = "0xD58BF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004B1")]
		public int BorderSize
		{
			[Token(Token = "0x6001D9C")]
			[Address(RVA = "0xD58C00", Offset = "0xD58C00", VA = "0xD58C00")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004B2")]
		public int MaxRegions
		{
			[Token(Token = "0x6001D9D")]
			[Address(RVA = "0xD58C08", Offset = "0xD58C08", VA = "0xD58C08")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004B3")]
		public CompactCell[] Cells
		{
			[Token(Token = "0x6001D9E")]
			[Address(RVA = "0xD58C10", Offset = "0xD58C10", VA = "0xD58C10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004B4")]
		public CompactSpan[] Spans
		{
			[Token(Token = "0x6001D9F")]
			[Address(RVA = "0xD58C18", Offset = "0xD58C18", VA = "0xD58C18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004B5")]
		public Area[] Areas
		{
			[Token(Token = "0x6001DA0")]
			[Address(RVA = "0xD58C20", Offset = "0xD58C20", VA = "0xD58C20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004B6")]
		public IEnumerable<CompactSpan> this[int x, int y]
		{
			[Token(Token = "0x6001DA1")]
			[Address(RVA = "0xD58C28", Offset = "0xD58C28", VA = "0xD58C28")]
			[IteratorStateMachine(typeof(<get_Item>d__42))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004B7")]
		public IEnumerable<CompactSpan> this[int i]
		{
			[Token(Token = "0x6001DA2")]
			[Address(RVA = "0xD58CA8", Offset = "0xD58CA8", VA = "0xD58CA8")]
			[IteratorStateMachine(typeof(<get_Item>d__44))]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004B8")]
		public CompactSpan this[CompactSpanReference spanRef]
		{
			[Token(Token = "0x6001DA3")]
			[Address(RVA = "0xD58D20", Offset = "0xD58D20", VA = "0xD58D20")]
			get
			{
				return default(CompactSpan);
			}
		}

		[Token(Token = "0x6001D92")]
		[Address(RVA = "0xD585D0", Offset = "0xD585D0", VA = "0xD585D0")]
		public CompactHeightfield(Heightfield field, NavMeshGenerationSettings settings)
		{
		}

		[Token(Token = "0x6001D93")]
		[Address(RVA = "0xD5862C", Offset = "0xD5862C", VA = "0xD5862C")]
		public CompactHeightfield(Heightfield field, int walkableHeight, int walkableClimb)
		{
		}

		[Token(Token = "0x6001DA4")]
		[Address(RVA = "0xD58D54", Offset = "0xD58D54", VA = "0xD58D54")]
		public void BuildDistanceField()
		{
		}

		[Token(Token = "0x6001DA5")]
		[Address(RVA = "0xD59BF0", Offset = "0xD59BF0", VA = "0xD59BF0")]
		public void Erode(int radius)
		{
		}

		[Token(Token = "0x6001DA6")]
		[Address(RVA = "0xD59D24", Offset = "0xD59D24", VA = "0xD59D24")]
		public void BuildRegions(int borderSize, int minRegionArea, int mergeRegionArea)
		{
		}

		[Token(Token = "0x6001DA7")]
		[Address(RVA = "0xD5A5BC", Offset = "0xD5A5BC", VA = "0xD5A5BC")]
		private static void AppendStacks(List<CompactSpanReference> source, List<CompactSpanReference> destination, RegionId[] regions)
		{
		}

		[Token(Token = "0x6001DA8")]
		[Address(RVA = "0xD5B6C8", Offset = "0xD5B6C8", VA = "0xD5B6C8")]
		private int FilterSmallRegions(RegionId[] regionIds, int minRegionArea, int mergeRegionSize, int maxRegionId)
		{
			return default(int);
		}

		[Token(Token = "0x6001DA9")]
		[Address(RVA = "0xD58E5C", Offset = "0xD58E5C", VA = "0xD58E5C")]
		private void CalculateDistanceField(int[] src)
		{
		}

		[Token(Token = "0x6001DAA")]
		[Address(RVA = "0xD59844", Offset = "0xD59844", VA = "0xD59844")]
		private void BoxBlur(int[] distances, int threshold, int[] buffer)
		{
		}

		[Token(Token = "0x6001DAB")]
		[Address(RVA = "0xD5A748", Offset = "0xD5A748", VA = "0xD5A748")]
		private void ExpandRegions(RegionId[] regions, int[] floodDistances, int maxIterations, int level, List<CompactSpanReference> stack, RegionId[] regionBuffer, int[] distanceBuffer)
		{
		}

		[Token(Token = "0x6001DAC")]
		[Address(RVA = "0xD5AF14", Offset = "0xD5AF14", VA = "0xD5AF14")]
		private bool FloodRegion(RegionId[] regions, int[] floodDistances, int regionIndex, int level, ref CompactSpanReference start)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DAD")]
		[Address(RVA = "0xD5C2EC", Offset = "0xD5C2EC", VA = "0xD5C2EC")]
		private bool IsSolidEdge(RegionId[] regions, ref CompactSpanReference spanRef, Direction dir)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DAE")]
		[Address(RVA = "0xD5C4A0", Offset = "0xD5C4A0", VA = "0xD5C4A0")]
		private void WalkContour(RegionId[] regions, CompactSpanReference spanRef, Direction dir, List<RegionId> cont)
		{
		}

		[Token(Token = "0x6001DAF")]
		[Address(RVA = "0xD5A270", Offset = "0xD5A270", VA = "0xD5A270")]
		private void FillRectangleRegion(RegionId[] regions, RegionId newRegionId, int left, int right, int bottom, int top)
		{
		}

		[Token(Token = "0x6001DB0")]
		[Address(RVA = "0xD5A330", Offset = "0xD5A330", VA = "0xD5A330")]
		private void SortCellsByLevel(RegionId[] regions, List<CompactSpanReference>[] stacks, int startlevel, int numStacks, int logLevelsPerStack)
		{
		}

		[Token(Token = "0x6001DB1")]
		[Address(RVA = "0xD5CA20", Offset = "0xD5CA20", VA = "0xD5CA20")]
		public ContourSet BuildContourSet(NavMeshGenerationSettings settings)
		{
			return null;
		}

		[Token(Token = "0x6001DB2")]
		[Address(RVA = "0xD5CA44", Offset = "0xD5CA44", VA = "0xD5CA44")]
		public ContourSet BuildContourSet(float maxError, int maxEdgeLength, ContourBuildFlags buildFlags)
		{
			return null;
		}

		[Token(Token = "0x6001DB3")]
		[Address(RVA = "0xD5D320", Offset = "0xD5D320", VA = "0xD5D320")]
		private void WalkContour(CompactSpanReference spanReference, EdgeFlags[] flags, List<ContourVertex> points)
		{
		}

		[Token(Token = "0x6001DB4")]
		[Address(RVA = "0xD5D89C", Offset = "0xD5D89C", VA = "0xD5D89C")]
		private int GetCornerHeight(CompactSpanReference sr, Direction dir, out bool isBorderVertex)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000579")]
	public struct CompactSpan
	{
		[Token(Token = "0x4001D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Minimum;

		[Token(Token = "0x4001D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Height;

		[Token(Token = "0x4001D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte ConnectionWest;

		[Token(Token = "0x4001D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public byte ConnectionNorth;

		[Token(Token = "0x4001D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public byte ConnectionEast;

		[Token(Token = "0x4001D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
		public byte ConnectionSouth;

		[Token(Token = "0x4001D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public RegionId Region;

		[Token(Token = "0x4001D47")]
		private const byte NotConnected = byte.MaxValue;

		[Token(Token = "0x170004BD")]
		public bool HasUpperBound
		{
			[Token(Token = "0x6001DC6")]
			[Address(RVA = "0xD5E76C", Offset = "0xD5E76C", VA = "0xD5E76C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004BE")]
		public int Maximum
		{
			[Token(Token = "0x6001DC7")]
			[Address(RVA = "0xD5E780", Offset = "0xD5E780", VA = "0xD5E780")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004BF")]
		public int ConnectionCount
		{
			[Token(Token = "0x6001DC8")]
			[Address(RVA = "0xD5E78C", Offset = "0xD5E78C", VA = "0xD5E78C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001DC5")]
		[Address(RVA = "0xD5E6F0", Offset = "0xD5E6F0", VA = "0xD5E6F0")]
		public CompactSpan(int minimum, int height)
		{
		}

		[Token(Token = "0x6001DC9")]
		[Address(RVA = "0xD5E7C8", Offset = "0xD5E7C8", VA = "0xD5E7C8")]
		public static void OverlapMin(ref CompactSpan left, ref CompactSpan right, out int min)
		{
		}

		[Token(Token = "0x6001DCA")]
		[Address(RVA = "0xD5E844", Offset = "0xD5E844", VA = "0xD5E844")]
		public static void OverlapMax(ref CompactSpan left, ref CompactSpan right, out int max)
		{
		}

		[Token(Token = "0x6001DCB")]
		[Address(RVA = "0xD5E8F8", Offset = "0xD5E8F8", VA = "0xD5E8F8")]
		public static CompactSpan FromMinMax(int min, int max)
		{
			return default(CompactSpan);
		}

		[Token(Token = "0x6001DCC")]
		[Address(RVA = "0xD5E91C", Offset = "0xD5E91C", VA = "0xD5E91C")]
		public static void FromMinMax(int min, int max, out CompactSpan span)
		{
		}

		[Token(Token = "0x6001DCD")]
		[Address(RVA = "0xD5E99C", Offset = "0xD5E99C", VA = "0xD5E99C")]
		public static void SetConnection(Direction dir, int i, ref CompactSpan s)
		{
		}

		[Token(Token = "0x6001DCE")]
		[Address(RVA = "0xD5EA90", Offset = "0xD5EA90", VA = "0xD5EA90")]
		public static void UnsetConnection(Direction dir, ref CompactSpan s)
		{
		}

		[Token(Token = "0x6001DCF")]
		[Address(RVA = "0xD5EB38", Offset = "0xD5EB38", VA = "0xD5EB38")]
		public static int GetConnection(ref CompactSpan s, Direction dir)
		{
			return default(int);
		}

		[Token(Token = "0x6001DD0")]
		[Address(RVA = "0xD5EBD4", Offset = "0xD5EBD4", VA = "0xD5EBD4")]
		public int GetConnection(Direction dir)
		{
			return default(int);
		}

		[Token(Token = "0x6001DD1")]
		[Address(RVA = "0xD5EBD8", Offset = "0xD5EBD8", VA = "0xD5EBD8")]
		public bool IsConnected(Direction dir)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200057A")]
	public struct CompactSpanReference : IEquatable<CompactSpanReference>
	{
		[Token(Token = "0x4001D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly CompactSpanReference Null;

		[Token(Token = "0x4001D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int X;

		[Token(Token = "0x4001D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int Y;

		[Token(Token = "0x4001D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int Index;

		[Token(Token = "0x6001DD2")]
		[Address(RVA = "0xD5EC7C", Offset = "0xD5EC7C", VA = "0xD5EC7C")]
		public CompactSpanReference(int x, int y, int i)
		{
		}

		[Token(Token = "0x6001DD3")]
		[Address(RVA = "0xD5EC88", Offset = "0xD5EC88", VA = "0xD5EC88")]
		public static bool operator ==(CompactSpanReference left, CompactSpanReference right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DD4")]
		[Address(RVA = "0xD5ECDC", Offset = "0xD5ECDC", VA = "0xD5ECDC")]
		public static bool operator !=(CompactSpanReference left, CompactSpanReference right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DD5")]
		[Address(RVA = "0xD5ED64", Offset = "0xD5ED64", VA = "0xD5ED64", Slot = "4")]
		public bool Equals(CompactSpanReference other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DD6")]
		[Address(RVA = "0xD5EDDC", Offset = "0xD5EDDC", VA = "0xD5EDDC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DD7")]
		[Address(RVA = "0xD5EEF0", Offset = "0xD5EEF0", VA = "0xD5EEF0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x200057B")]
	public class Contour
	{
		[Token(Token = "0x4001D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ContourVertex[] vertices;

		[Token(Token = "0x4001D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RegionId regionId;

		[Token(Token = "0x4001D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Area area;

		[Token(Token = "0x170004C0")]
		public ContourVertex[] Vertices
		{
			[Token(Token = "0x6001DDA")]
			[Address(RVA = "0xD5F090", Offset = "0xD5F090", VA = "0xD5F090")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004C1")]
		public bool IsNull
		{
			[Token(Token = "0x6001DDB")]
			[Address(RVA = "0xD5F098", Offset = "0xD5F098", VA = "0xD5F098")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170004C2")]
		public Area Area
		{
			[Token(Token = "0x6001DDC")]
			[Address(RVA = "0xD5F0B8", Offset = "0xD5F0B8", VA = "0xD5F0B8")]
			get
			{
				return default(Area);
			}
		}

		[Token(Token = "0x170004C3")]
		public RegionId RegionId
		{
			[Token(Token = "0x6001DDD")]
			[Address(RVA = "0xD5F0C0", Offset = "0xD5F0C0", VA = "0xD5F0C0")]
			get
			{
				return default(RegionId);
			}
		}

		[Token(Token = "0x170004C4")]
		public int Area2D
		{
			[Token(Token = "0x6001DDE")]
			[Address(RVA = "0xD5F0C8", Offset = "0xD5F0C8", VA = "0xD5F0C8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001DD9")]
		[Address(RVA = "0xD5EFAC", Offset = "0xD5EFAC", VA = "0xD5EFAC")]
		public Contour(List<ContourVertex> verts, RegionId region, Area area, int borderSize)
		{
		}

		[Token(Token = "0x6001DDF")]
		[Address(RVA = "0xD5F154", Offset = "0xD5F154", VA = "0xD5F154")]
		public void MergeWith(Contour contour)
		{
		}

		[Token(Token = "0x6001DE0")]
		[Address(RVA = "0xD5F3A4", Offset = "0xD5F3A4", VA = "0xD5F3A4")]
		private static void GetClosestIndices(Contour a, Contour b, out int indexA, out int indexB)
		{
		}

		[Token(Token = "0x6001DE1")]
		[Address(RVA = "0xD5F54C", Offset = "0xD5F54C", VA = "0xD5F54C")]
		public static void Simplify(List<ContourVertex> rawVerts, List<ContourVertex> simplified, float maxError, int maxEdgeLen, ContourBuildFlags buildFlags)
		{
		}

		[Token(Token = "0x6001DE2")]
		[Address(RVA = "0xD600E8", Offset = "0xD600E8", VA = "0xD600E8")]
		public static void RemoveDegenerateSegments(List<ContourVertex> simplified)
		{
		}
	}
	[Token(Token = "0x200057C")]
	[Flags]
	public enum ContourBuildFlags
	{
		[Token(Token = "0x4001D50")]
		None = 0,
		[Token(Token = "0x4001D51")]
		TessellateWallEdges = 1,
		[Token(Token = "0x4001D52")]
		TessellateAreaEdges = 2
	}
	[Token(Token = "0x200057D")]
	public class ContourSet : ICollection<Contour>, IEnumerable<Contour>, IEnumerable
	{
		[Token(Token = "0x4001D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Contour> contours;

		[Token(Token = "0x4001D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BBox3 bounds;

		[Token(Token = "0x4001D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int width;

		[Token(Token = "0x4001D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int height;

		[Token(Token = "0x170004C5")]
		public int Count
		{
			[Token(Token = "0x6001DE4")]
			[Address(RVA = "0xD60288", Offset = "0xD60288", VA = "0xD60288", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004C6")]
		public BBox3 Bounds
		{
			[Token(Token = "0x6001DE5")]
			[Address(RVA = "0xD602D0", Offset = "0xD602D0", VA = "0xD602D0")]
			get
			{
				return default(BBox3);
			}
		}

		[Token(Token = "0x170004C7")]
		public int Width
		{
			[Token(Token = "0x6001DE6")]
			[Address(RVA = "0xD602E4", Offset = "0xD602E4", VA = "0xD602E4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004C8")]
		public int Height
		{
			[Token(Token = "0x6001DE7")]
			[Address(RVA = "0xD602EC", Offset = "0xD602EC", VA = "0xD602EC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004C9")]
		private bool System.Collections.Generic.ICollection<SharpNav.Contour>.IsReadOnly
		{
			[Token(Token = "0x6001DE8")]
			[Address(RVA = "0xD602F4", Offset = "0xD602F4", VA = "0xD602F4", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001DE3")]
		[Address(RVA = "0xD601F8", Offset = "0xD601F8", VA = "0xD601F8")]
		public ContourSet(IEnumerable<Contour> contours, BBox3 bounds, int width, int height)
		{
		}

		[Token(Token = "0x6001DE9")]
		[Address(RVA = "0xD602FC", Offset = "0xD602FC", VA = "0xD602FC", Slot = "8")]
		public bool Contains(Contour item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DEA")]
		[Address(RVA = "0xD60354", Offset = "0xD60354", VA = "0xD60354", Slot = "9")]
		public void CopyTo(Contour[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6001DEB")]
		[Address(RVA = "0xD603BC", Offset = "0xD603BC", VA = "0xD603BC", Slot = "11")]
		public IEnumerator<Contour> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001DEC")]
		[Address(RVA = "0xD6044C", Offset = "0xD6044C", VA = "0xD6044C", Slot = "6")]
		private void System.Collections.Generic.ICollection<SharpNav.Contour>.Add(Contour item)
		{
		}

		[Token(Token = "0x6001DED")]
		[Address(RVA = "0xD6048C", Offset = "0xD6048C", VA = "0xD6048C", Slot = "7")]
		private void System.Collections.Generic.ICollection<SharpNav.Contour>.Clear()
		{
		}

		[Token(Token = "0x6001DEE")]
		[Address(RVA = "0xD604CC", Offset = "0xD604CC", VA = "0xD604CC", Slot = "10")]
		private bool System.Collections.Generic.ICollection<SharpNav.Contour>.Remove(Contour item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DEF")]
		[Address(RVA = "0xD6050C", Offset = "0xD6050C", VA = "0xD6050C", Slot = "12")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x200057E")]
	public struct ContourVertex
	{
		[Token(Token = "0x4001D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int X;

		[Token(Token = "0x4001D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Y;

		[Token(Token = "0x4001D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int Z;

		[Token(Token = "0x4001D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public RegionId RegionId;

		[Token(Token = "0x6001DF0")]
		[Address(RVA = "0xD600DC", Offset = "0xD600DC", VA = "0xD600DC")]
		public ContourVertex(int x, int y, int z, RegionId region)
		{
		}

		[Token(Token = "0x6001DF1")]
		[Address(RVA = "0xD60510", Offset = "0xD60510", VA = "0xD60510")]
		public ContourVertex(SharpNav.Geometry.Vector3 vec, RegionId region)
		{
		}

		[Token(Token = "0x6001DF2")]
		[Address(RVA = "0xD6009C", Offset = "0xD6009C", VA = "0xD6009C")]
		public ContourVertex(ContourVertex vert, int index)
		{
		}

		[Token(Token = "0x6001DF3")]
		[Address(RVA = "0xD6054C", Offset = "0xD6054C", VA = "0xD6054C")]
		public ContourVertex(ContourVertex vert, RegionId region)
		{
		}

		[Token(Token = "0x6001DF4")]
		[Address(RVA = "0xD5F510", Offset = "0xD5F510", VA = "0xD5F510")]
		public static bool IsLeft(ref ContourVertex a, ref ContourVertex b, ref ContourVertex c)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DF5")]
		[Address(RVA = "0xD6055C", Offset = "0xD6055C", VA = "0xD6055C")]
		public static void Area2D(ref ContourVertex a, ref ContourVertex b, ref ContourVertex c, out int area)
		{
		}
	}
	[Token(Token = "0x200057F")]
	public enum Direction
	{
		[Token(Token = "0x4001D5C")]
		West,
		[Token(Token = "0x4001D5D")]
		North,
		[Token(Token = "0x4001D5E")]
		East,
		[Token(Token = "0x4001D5F")]
		South
	}
	[Token(Token = "0x2000580")]
	public static class DirectionExtensions
	{
		[Token(Token = "0x4001D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] OffsetsX;

		[Token(Token = "0x4001D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] OffsetsY;

		[Token(Token = "0x6001DF6")]
		[Address(RVA = "0xD60598", Offset = "0xD60598", VA = "0xD60598")]
		public static int GetHorizontalOffset(this Direction dir)
		{
			return default(int);
		}

		[Token(Token = "0x6001DF7")]
		[Address(RVA = "0xD60614", Offset = "0xD60614", VA = "0xD60614")]
		public static int GetVerticalOffset(this Direction dir)
		{
			return default(int);
		}

		[Token(Token = "0x6001DF8")]
		[Address(RVA = "0xD60690", Offset = "0xD60690", VA = "0xD60690")]
		public static Direction NextClockwise(this Direction dir)
		{
			return default(Direction);
		}

		[Token(Token = "0x6001DF9")]
		[Address(RVA = "0xD606FC", Offset = "0xD606FC", VA = "0xD606FC")]
		public static Direction NextCounterClockwise(this Direction dir)
		{
			return default(Direction);
		}
	}
	[Token(Token = "0x2000581")]
	[Flags]
	public enum EdgeFlags : byte
	{
		[Token(Token = "0x4001D63")]
		None = 0,
		[Token(Token = "0x4001D64")]
		West = 1,
		[Token(Token = "0x4001D65")]
		North = 2,
		[Token(Token = "0x4001D66")]
		East = 4,
		[Token(Token = "0x4001D67")]
		South = 8,
		[Token(Token = "0x4001D68")]
		All = 0xF
	}
	[Token(Token = "0x2000582")]
	public static class EdgeFlagsHelper
	{
		[Token(Token = "0x6001DFB")]
		[Address(RVA = "0xD6083C", Offset = "0xD6083C", VA = "0xD6083C")]
		public static void AddEdge(ref EdgeFlags edges, Direction dir)
		{
		}

		[Token(Token = "0x6001DFC")]
		[Address(RVA = "0xD60854", Offset = "0xD60854", VA = "0xD60854")]
		public static void FlipEdges(ref EdgeFlags edges)
		{
		}

		[Token(Token = "0x6001DFD")]
		[Address(RVA = "0xD60864", Offset = "0xD60864", VA = "0xD60864")]
		public static bool IsConnected(ref EdgeFlags edges, Direction dir)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DFE")]
		[Address(RVA = "0xD6087C", Offset = "0xD6087C", VA = "0xD6087C")]
		public static void RemoveEdge(ref EdgeFlags edges, Direction dir)
		{
		}
	}
	[Token(Token = "0x2000583")]
	public class Heightfield
	{
		[Token(Token = "0x4001D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BBox3 bounds;

		[Token(Token = "0x4001D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int width;

		[Token(Token = "0x4001D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int height;

		[Token(Token = "0x4001D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int length;

		[Token(Token = "0x4001D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float cellSize;

		[Token(Token = "0x4001D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float cellHeight;

		[Token(Token = "0x4001D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Cell[] cells;

		[Token(Token = "0x170004CA")]
		public BBox3 Bounds
		{
			[Token(Token = "0x6001E01")]
			[Address(RVA = "0xD60BD8", Offset = "0xD60BD8", VA = "0xD60BD8")]
			get
			{
				return default(BBox3);
			}
		}

		[Token(Token = "0x170004CB")]
		public SharpNav.Geometry.Vector3 Minimum
		{
			[Token(Token = "0x6001E02")]
			[Address(RVA = "0xD60BEC", Offset = "0xD60BEC", VA = "0xD60BEC")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
		}

		[Token(Token = "0x170004CC")]
		public SharpNav.Geometry.Vector3 Maximum
		{
			[Token(Token = "0x6001E03")]
			[Address(RVA = "0xD60BF8", Offset = "0xD60BF8", VA = "0xD60BF8")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
		}

		[Token(Token = "0x170004CD")]
		public int Width
		{
			[Token(Token = "0x6001E04")]
			[Address(RVA = "0xD60C04", Offset = "0xD60C04", VA = "0xD60C04")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004CE")]
		public int Height
		{
			[Token(Token = "0x6001E05")]
			[Address(RVA = "0xD60C0C", Offset = "0xD60C0C", VA = "0xD60C0C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004CF")]
		public int Length
		{
			[Token(Token = "0x6001E06")]
			[Address(RVA = "0xD60C14", Offset = "0xD60C14", VA = "0xD60C14")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004D0")]
		public SharpNav.Geometry.Vector3 CellSize
		{
			[Token(Token = "0x6001E07")]
			[Address(RVA = "0xD60C1C", Offset = "0xD60C1C", VA = "0xD60C1C")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
		}

		[Token(Token = "0x170004D1")]
		public float CellSizeXZ
		{
			[Token(Token = "0x6001E08")]
			[Address(RVA = "0xD60C54", Offset = "0xD60C54", VA = "0xD60C54")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170004D2")]
		public float CellHeight
		{
			[Token(Token = "0x6001E09")]
			[Address(RVA = "0xD60C5C", Offset = "0xD60C5C", VA = "0xD60C5C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170004D3")]
		public int SpanCount
		{
			[Token(Token = "0x6001E0A")]
			[Address(RVA = "0xD60C64", Offset = "0xD60C64", VA = "0xD60C64")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004D4")]
		public Cell this[int x, int y]
		{
			[Token(Token = "0x6001E0B")]
			[Address(RVA = "0xD60CD0", Offset = "0xD60CD0", VA = "0xD60CD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004D5")]
		public Cell this[int i]
		{
			[Token(Token = "0x6001E0C")]
			[Address(RVA = "0xD60D60", Offset = "0xD60D60", VA = "0xD60D60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004D6")]
		public Span this[SpanReference spanRef]
		{
			[Token(Token = "0x6001E0D")]
			[Address(RVA = "0xD60DD4", Offset = "0xD60DD4", VA = "0xD60DD4")]
			get
			{
				return default(Span);
			}
		}

		[Token(Token = "0x6001DFF")]
		[Address(RVA = "0xD60894", Offset = "0xD60894", VA = "0xD60894")]
		public Heightfield(BBox3 b, NavMeshGenerationSettings settings)
		{
		}

		[Token(Token = "0x6001E00")]
		[Address(RVA = "0xD608DC", Offset = "0xD608DC", VA = "0xD608DC")]
		public Heightfield(BBox3 b, float cellSize, float cellHeight)
		{
		}

		[Token(Token = "0x6001E0E")]
		[Address(RVA = "0xD60E74", Offset = "0xD60E74", VA = "0xD60E74")]
		public void FilterLowHangingWalkableObstacles(int walkableClimb)
		{
		}

		[Token(Token = "0x6001E0F")]
		[Address(RVA = "0xD6106C", Offset = "0xD6106C", VA = "0xD6106C")]
		public void FilterWalkableLowHeightSpans(int walkableHeight)
		{
		}

		[Token(Token = "0x6001E10")]
		[Address(RVA = "0xD611F4", Offset = "0xD611F4", VA = "0xD611F4")]
		public void FilterLedgeSpans(int walkableHeight, int walkableClimb)
		{
		}

		[Token(Token = "0x6001E11")]
		[Address(RVA = "0xD6173C", Offset = "0xD6173C", VA = "0xD6173C")]
		public void RasterizeTrianglesIndexedWithAreas(SharpNav.Geometry.Vector3[] verts, int[] inds, Area[] areas)
		{
		}

		[Token(Token = "0x6001E12")]
		[Address(RVA = "0xD61788", Offset = "0xD61788", VA = "0xD61788")]
		public void RasterizeTrianglesIndexedWithAreas(SharpNav.Geometry.Vector3[] verts, int[] inds, int vertOffset, int vertStride, int indexOffset, int triCount, Area[] areas)
		{
		}

		[Token(Token = "0x6001E13")]
		[Address(RVA = "0xD61FD8", Offset = "0xD61FD8", VA = "0xD61FD8")]
		public void RasterizeTrianglesIndexedWithAreas(float[] verts, int[] inds, Area[] areas)
		{
		}

		[Token(Token = "0x6001E14")]
		[Address(RVA = "0xD62024", Offset = "0xD62024", VA = "0xD62024")]
		public void RasterizeTrianglesIndexedWithAreas(float[] verts, int[] inds, int floatOffset, int floatStride, int indexOffset, int triCount, Area[] areas)
		{
		}

		[Token(Token = "0x6001E15")]
		[Address(RVA = "0xD623A4", Offset = "0xD623A4", VA = "0xD623A4")]
		public void RasterizeTrianglesWithAreas(Triangle3[] tris, Area[] areas)
		{
		}

		[Token(Token = "0x6001E16")]
		[Address(RVA = "0xD623C4", Offset = "0xD623C4", VA = "0xD623C4")]
		public void RasterizeTrianglesWithAreas(Triangle3[] tris, int triOffset, int triCount, Area[] areas)
		{
		}

		[Token(Token = "0x6001E17")]
		[Address(RVA = "0xD625E4", Offset = "0xD625E4", VA = "0xD625E4")]
		public void RasterizeTrianglesWithAreas(SharpNav.Geometry.Vector3[] verts, Area[] areas)
		{
		}

		[Token(Token = "0x6001E18")]
		[Address(RVA = "0xD62620", Offset = "0xD62620", VA = "0xD62620")]
		public void RasterizeTrianglesWithAreas(SharpNav.Geometry.Vector3[] verts, int vertOffset, int vertStride, int triCount, Area[] areas)
		{
		}

		[Token(Token = "0x6001E19")]
		[Address(RVA = "0xD628A8", Offset = "0xD628A8", VA = "0xD628A8")]
		public void RasterizeTrianglesWithAreas(float[] verts, Area[] areas)
		{
		}

		[Token(Token = "0x6001E1A")]
		[Address(RVA = "0xD628E4", Offset = "0xD628E4", VA = "0xD628E4")]
		public void RasterizeTrianglesWithAreas(float[] verts, int floatOffset, int floatStride, int triCount, Area[] areas)
		{
		}

		[Token(Token = "0x6001E1B")]
		[Address(RVA = "0xD62C38", Offset = "0xD62C38", VA = "0xD62C38")]
		public void RasterizeTrianglesIndexed(SharpNav.Geometry.Vector3[] verts, int[] inds)
		{
		}

		[Token(Token = "0x6001E1C")]
		[Address(RVA = "0xD62F28", Offset = "0xD62F28", VA = "0xD62F28")]
		public void RasterizeTrianglesIndexed(SharpNav.Geometry.Vector3[] verts, int[] inds, Area area)
		{
		}

		[Token(Token = "0x6001E1D")]
		[Address(RVA = "0xD62F74", Offset = "0xD62F74", VA = "0xD62F74")]
		public void RasterizeTrianglesIndexed(SharpNav.Geometry.Vector3[] verts, int[] inds, int vertOffset, int vertStride, int indexOffset, int triCount)
		{
		}

		[Token(Token = "0x6001E1E")]
		[Address(RVA = "0xD62CEC", Offset = "0xD62CEC", VA = "0xD62CEC")]
		public void RasterizeTrianglesIndexed(SharpNav.Geometry.Vector3[] verts, int[] inds, int vertOffset, int vertStride, int indexOffset, int triCount, Area area)
		{
		}

		[Token(Token = "0x6001E1F")]
		[Address(RVA = "0xD63028", Offset = "0xD63028", VA = "0xD63028")]
		public void RasterizeTrianglesIndexed(float[] verts, int[] inds)
		{
		}

		[Token(Token = "0x6001E20")]
		[Address(RVA = "0xD633E4", Offset = "0xD633E4", VA = "0xD633E4")]
		public void RasterizeTrianglesIndexed(float[] verts, int[] inds, Area area)
		{
		}

		[Token(Token = "0x6001E21")]
		[Address(RVA = "0xD63430", Offset = "0xD63430", VA = "0xD63430")]
		public void RasterizeTrianglesIndexed(float[] verts, int[] inds, int floatOffset, int floatStride, int indexOffset, int triCount)
		{
		}

		[Token(Token = "0x6001E22")]
		[Address(RVA = "0xD630DC", Offset = "0xD630DC", VA = "0xD630DC")]
		public void RasterizeTrianglesIndexed(float[] verts, int[] inds, int floatOffset, int floatStride, int indexOffset, int triCount, Area area)
		{
		}

		[Token(Token = "0x6001E23")]
		[Address(RVA = "0xD634E4", Offset = "0xD634E4", VA = "0xD634E4")]
		public void RasterizeTriangles(IEnumerable<Triangle3> tris)
		{
		}

		[Token(Token = "0x6001E24")]
		[Address(RVA = "0xD63554", Offset = "0xD63554", VA = "0xD63554")]
		public void RasterizeTriangles(IEnumerable<Triangle3> tris, Area area)
		{
		}

		[Token(Token = "0x6001E25")]
		[Address(RVA = "0xD63898", Offset = "0xD63898", VA = "0xD63898")]
		public void RasterizeTriangles(Triangle3[] tris)
		{
		}

		[Token(Token = "0x6001E26")]
		[Address(RVA = "0xD63B38", Offset = "0xD63B38", VA = "0xD63B38")]
		public void RasterizeTriangles(Triangle3[] tris, Area area)
		{
		}

		[Token(Token = "0x6001E27")]
		[Address(RVA = "0xD63B58", Offset = "0xD63B58", VA = "0xD63B58")]
		public void RasterizeTriangles(Triangle3[] tris, int triOffset, int triCount)
		{
		}

		[Token(Token = "0x6001E28")]
		[Address(RVA = "0xD63910", Offset = "0xD63910", VA = "0xD63910")]
		public void RasterizeTriangles(Triangle3[] tris, int triOffset, int triCount, Area area)
		{
		}

		[Token(Token = "0x6001E29")]
		[Address(RVA = "0xD63BE0", Offset = "0xD63BE0", VA = "0xD63BE0")]
		public void RasterizeTriangles(SharpNav.Geometry.Vector3[] verts)
		{
		}

		[Token(Token = "0x6001E2A")]
		[Address(RVA = "0xD63E90", Offset = "0xD63E90", VA = "0xD63E90")]
		public void RasterizeTriangles(SharpNav.Geometry.Vector3[] verts, Area area)
		{
		}

		[Token(Token = "0x6001E2B")]
		[Address(RVA = "0xD63ECC", Offset = "0xD63ECC", VA = "0xD63ECC")]
		public void RasterizeTriangles(SharpNav.Geometry.Vector3[] verts, int vertOffset, int vertStride, int triCount)
		{
		}

		[Token(Token = "0x6001E2C")]
		[Address(RVA = "0xD63C74", Offset = "0xD63C74", VA = "0xD63C74")]
		public void RasterizeTriangles(SharpNav.Geometry.Vector3[] verts, int vertOffset, int vertStride, int triCount, Area area)
		{
		}

		[Token(Token = "0x6001E2D")]
		[Address(RVA = "0xD63F5C", Offset = "0xD63F5C", VA = "0xD63F5C")]
		public void RasterizeTriangles(float[] verts)
		{
		}

		[Token(Token = "0x6001E2E")]
		[Address(RVA = "0xD642D4", Offset = "0xD642D4", VA = "0xD642D4")]
		public void RasterizeTriangles(float[] verts, Area area)
		{
		}

		[Token(Token = "0x6001E2F")]
		[Address(RVA = "0xD64310", Offset = "0xD64310", VA = "0xD64310")]
		public void RasterizeTriangles(float[] verts, int floatOffset, int floatStride, int triCount)
		{
		}

		[Token(Token = "0x6001E30")]
		[Address(RVA = "0xD63FF0", Offset = "0xD63FF0", VA = "0xD63FF0")]
		public void RasterizeTriangles(float[] verts, int floatOffset, int floatStride, int triCount, Area area)
		{
		}

		[Token(Token = "0x6001E31")]
		[Address(RVA = "0xD643A0", Offset = "0xD643A0", VA = "0xD643A0")]
		public void RasterizeTriangle(ref Triangle3 tri)
		{
		}

		[Token(Token = "0x6001E32")]
		[Address(RVA = "0xD63884", Offset = "0xD63884", VA = "0xD63884")]
		public void RasterizeTriangle(ref Triangle3 tri, Area area)
		{
		}

		[Token(Token = "0x6001E33")]
		[Address(RVA = "0xD64420", Offset = "0xD64420", VA = "0xD64420")]
		public void RasterizeTriangle(float ax, float ay, float az, float bx, float by, float bz, float cx, float cy, float cz)
		{
		}

		[Token(Token = "0x6001E34")]
		[Address(RVA = "0xD64510", Offset = "0xD64510", VA = "0xD64510")]
		public void RasterizeTriangle(float ax, float ay, float az, float bx, float by, float bz, float cx, float cy, float cz, Area area)
		{
		}

		[Token(Token = "0x6001E35")]
		[Address(RVA = "0xD64554", Offset = "0xD64554", VA = "0xD64554")]
		public void RasterizeTriangle(ref SharpNav.Geometry.Vector3 a, ref SharpNav.Geometry.Vector3 b, ref SharpNav.Geometry.Vector3 c)
		{
		}

		[Token(Token = "0x6001E36")]
		[Address(RVA = "0xD61A48", Offset = "0xD61A48", VA = "0xD61A48")]
		public void RasterizeTriangle(ref SharpNav.Geometry.Vector3 a, ref SharpNav.Geometry.Vector3 b, ref SharpNav.Geometry.Vector3 c, Area area)
		{
		}
	}
	[Token(Token = "0x2000584")]
	public class HeightPatch
	{
		[Token(Token = "0x4001D70")]
		public const int UnsetHeight = -1;

		[Token(Token = "0x4001D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int xmin;

		[Token(Token = "0x4001D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int ymin;

		[Token(Token = "0x4001D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int width;

		[Token(Token = "0x4001D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int length;

		[Token(Token = "0x4001D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int[] data;

		[Token(Token = "0x170004D7")]
		public int X
		{
			[Token(Token = "0x6001E38")]
			[Address(RVA = "0xD64988", Offset = "0xD64988", VA = "0xD64988")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004D8")]
		public int Y
		{
			[Token(Token = "0x6001E39")]
			[Address(RVA = "0xD64990", Offset = "0xD64990", VA = "0xD64990")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004D9")]
		public int Width
		{
			[Token(Token = "0x6001E3A")]
			[Address(RVA = "0xD64998", Offset = "0xD64998", VA = "0xD64998")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004DA")]
		public int Length
		{
			[Token(Token = "0x6001E3B")]
			[Address(RVA = "0xD649A0", Offset = "0xD649A0", VA = "0xD649A0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004DB")]
		public int this[int index]
		{
			[Token(Token = "0x6001E3C")]
			[Address(RVA = "0xD649A8", Offset = "0xD649A8", VA = "0xD649A8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001E3D")]
			[Address(RVA = "0xD649D8", Offset = "0xD649D8", VA = "0xD649D8")]
			set
			{
			}
		}

		[Token(Token = "0x170004DC")]
		public int this[int x, int y]
		{
			[Token(Token = "0x6001E3E")]
			[Address(RVA = "0xD64A08", Offset = "0xD64A08", VA = "0xD64A08")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001E3F")]
			[Address(RVA = "0xD64A40", Offset = "0xD64A40", VA = "0xD64A40")]
			set
			{
			}
		}

		[Token(Token = "0x6001E37")]
		[Address(RVA = "0xD64848", Offset = "0xD64848", VA = "0xD64848")]
		public HeightPatch(int x, int y, int width, int length)
		{
		}

		[Token(Token = "0x6001E40")]
		[Address(RVA = "0xD64A78", Offset = "0xD64A78", VA = "0xD64A78")]
		public bool IsSet(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E41")]
		[Address(RVA = "0xD64AB0", Offset = "0xD64AB0", VA = "0xD64AB0")]
		public bool TryGetHeight(int index, out int value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E42")]
		[Address(RVA = "0xD64AD4", Offset = "0xD64AD4", VA = "0xD64AD4")]
		public bool TryGetHeight(int x, int y, out int value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E43")]
		[Address(RVA = "0xD64AF8", Offset = "0xD64AF8", VA = "0xD64AF8")]
		public void Resize(int x, int y, int width, int length)
		{
		}

		[Token(Token = "0x6001E44")]
		[Address(RVA = "0xD64934", Offset = "0xD64934", VA = "0xD64934")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001E45")]
		[Address(RVA = "0xD64B74", Offset = "0xD64B74", VA = "0xD64B74")]
		public void SetAll(int h)
		{
		}
	}
	[Token(Token = "0x2000585")]
	internal static class MathHelper
	{
		[Token(Token = "0x6001E46")]
		[Address(RVA = "0xD64BC4", Offset = "0xD64BC4", VA = "0xD64BC4")]
		internal static int Clamp(int val, int min, int max)
		{
			return default(int);
		}

		[Token(Token = "0x6001E47")]
		[Address(RVA = "0xD645DC", Offset = "0xD645DC", VA = "0xD645DC")]
		internal static void Clamp(ref int val, int min, int max)
		{
		}

		[Token(Token = "0x6001E48")]
		[Address(RVA = "0xD64BE0", Offset = "0xD64BE0", VA = "0xD64BE0")]
		internal static uint Clamp(uint val, uint min, uint max)
		{
			return default(uint);
		}

		[Token(Token = "0x6001E49")]
		[Address(RVA = "0xD64BFC", Offset = "0xD64BFC", VA = "0xD64BFC")]
		internal static void Clamp(ref uint val, uint min, uint max)
		{
		}

		[Token(Token = "0x6001E4A")]
		[Address(RVA = "0xD64C18", Offset = "0xD64C18", VA = "0xD64C18")]
		internal static float Clamp(float val, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6001E4B")]
		[Address(RVA = "0xD64C34", Offset = "0xD64C34", VA = "0xD64C34")]
		internal static void Clamp(ref float val, float min, float max)
		{
		}

		[Token(Token = "0x6001E4C")]
		[Address(RVA = "0xD64C58", Offset = "0xD64C58", VA = "0xD64C58")]
		public static float Normalize(float t, float t0, float t1)
		{
			return default(float);
		}

		[Token(Token = "0x6001E4D")]
		[Address(RVA = "0xD64C7C", Offset = "0xD64C7C", VA = "0xD64C7C")]
		internal static int NextPowerOfTwo(int v)
		{
			return default(int);
		}

		[Token(Token = "0x6001E4E")]
		[Address(RVA = "0xD64C9C", Offset = "0xD64C9C", VA = "0xD64C9C")]
		internal static uint NextPowerOfTwo(uint v)
		{
			return default(uint);
		}

		[Token(Token = "0x6001E4F")]
		[Address(RVA = "0xD64CBC", Offset = "0xD64CBC", VA = "0xD64CBC")]
		internal static int Log2(int v)
		{
			return default(int);
		}

		[Token(Token = "0x6001E50")]
		[Address(RVA = "0xD64D10", Offset = "0xD64D10", VA = "0xD64D10")]
		internal static uint Log2(uint v)
		{
			return default(uint);
		}

		[Token(Token = "0x6001E51")]
		[Address(RVA = "0xD64D68", Offset = "0xD64D68", VA = "0xD64D68")]
		internal static int ClipPolygonToPlane(SharpNav.Geometry.Vector3[] inVertices, SharpNav.Geometry.Vector3[] outVertices, int numVerts, float planeX, float planeZ, float planeD)
		{
			return default(int);
		}

		[Token(Token = "0x6001E52")]
		[Address(RVA = "0xD645F8", Offset = "0xD645F8", VA = "0xD645F8")]
		internal static int ClipPolygonToPlane(SharpNav.Geometry.Vector3[] inVertices, SharpNav.Geometry.Vector3[] outVertices, float[] distances, int numVerts, float planeX, float planeZ, float planeD)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000586")]
	public class NavMesh : TiledNavMesh
	{
		[Token(Token = "0x6001E53")]
		[Address(RVA = "0xD64DFC", Offset = "0xD64DFC", VA = "0xD64DFC")]
		public NavMesh(NavMeshBuilder builder)
		{
		}

		[Token(Token = "0x6001E54")]
		[Address(RVA = "0xD64E04", Offset = "0xD64E04", VA = "0xD64E04")]
		public static NavMesh Generate(IEnumerable<Triangle3> triangles, NavMeshGenerationSettings settings, out PolyMesh polyMesh, out PolyMeshDetail polyMeshDetail)
		{
			return null;
		}
	}
	[Token(Token = "0x2000587")]
	public class NavMeshBuilder
	{
		[Token(Token = "0x4001D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PathfindingCommon.NavMeshInfo header;

		[Token(Token = "0x4001D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SharpNav.Geometry.Vector3[] navVerts;

		[Token(Token = "0x4001D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Poly[] navPolys;

		[Token(Token = "0x4001D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PolyMeshDetail.MeshData[] navDMeshes;

		[Token(Token = "0x4001D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SharpNav.Geometry.Vector3[] navDVerts;

		[Token(Token = "0x4001D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PolyMeshDetail.TriangleData[] navDTris;

		[Token(Token = "0x4001D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BVTree navBvTree;

		[Token(Token = "0x4001D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OffMeshConnection[] offMeshConnections;

		[Token(Token = "0x170004DD")]
		public PathfindingCommon.NavMeshInfo Header
		{
			[Token(Token = "0x6001E56")]
			[Address(RVA = "0xD66750", Offset = "0xD66750", VA = "0xD66750")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004DE")]
		public SharpNav.Geometry.Vector3[] NavVerts
		{
			[Token(Token = "0x6001E57")]
			[Address(RVA = "0xD66758", Offset = "0xD66758", VA = "0xD66758")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004DF")]
		public Poly[] NavPolys
		{
			[Token(Token = "0x6001E58")]
			[Address(RVA = "0xD66760", Offset = "0xD66760", VA = "0xD66760")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E0")]
		public PolyMeshDetail.MeshData[] NavDMeshes
		{
			[Token(Token = "0x6001E59")]
			[Address(RVA = "0xD66768", Offset = "0xD66768", VA = "0xD66768")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E1")]
		public SharpNav.Geometry.Vector3[] NavDVerts
		{
			[Token(Token = "0x6001E5A")]
			[Address(RVA = "0xD66770", Offset = "0xD66770", VA = "0xD66770")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E2")]
		public PolyMeshDetail.TriangleData[] NavDTris
		{
			[Token(Token = "0x6001E5B")]
			[Address(RVA = "0xD66778", Offset = "0xD66778", VA = "0xD66778")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E3")]
		public BVTree NavBvTree
		{
			[Token(Token = "0x6001E5C")]
			[Address(RVA = "0xD66780", Offset = "0xD66780", VA = "0xD66780")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E4")]
		public OffMeshConnection[] OffMeshCons
		{
			[Token(Token = "0x6001E5D")]
			[Address(RVA = "0xD66788", Offset = "0xD66788", VA = "0xD66788")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001E55")]
		[Address(RVA = "0xD6516C", Offset = "0xD6516C", VA = "0xD6516C")]
		public NavMeshBuilder(PolyMesh polyMesh, PolyMeshDetail polyMeshDetail, OffMeshConnection[] offMeshCons, NavMeshGenerationSettings settings)
		{
		}
	}
	[Token(Token = "0x2000588")]
	public class NavMeshGenerationSettings
	{
		[Token(Token = "0x170004E5")]
		public static NavMeshGenerationSettings Default
		{
			[Token(Token = "0x6001E5F")]
			[Address(RVA = "0xD66798", Offset = "0xD66798", VA = "0xD66798")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004E6")]
		public float CellSize
		{
			[Token(Token = "0x6001E60")]
			[Address(RVA = "0xD6683C", Offset = "0xD6683C", VA = "0xD6683C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001E61")]
			[Address(RVA = "0xD66844", Offset = "0xD66844", VA = "0xD66844")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004E7")]
		public float CellHeight
		{
			[Token(Token = "0x6001E62")]
			[Address(RVA = "0xD6684C", Offset = "0xD6684C", VA = "0xD6684C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001E63")]
			[Address(RVA = "0xD66854", Offset = "0xD66854", VA = "0xD66854")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004E8")]
		public float MaxClimb
		{
			[Token(Token = "0x6001E64")]
			[Address(RVA = "0xD6685C", Offset = "0xD6685C", VA = "0xD6685C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001E65")]
			[Address(RVA = "0xD66864", Offset = "0xD66864", VA = "0xD66864")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004E9")]
		public float AgentHeight
		{
			[Token(Token = "0x6001E66")]
			[Address(RVA = "0xD6686C", Offset = "0xD6686C", VA = "0xD6686C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001E67")]
			[Address(RVA = "0xD66874", Offset = "0xD66874", VA = "0xD66874")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004EA")]
		public float AgentRadius
		{
			[Token(Token = "0x6001E68")]
			[Address(RVA = "0xD6687C", Offset = "0xD6687C", VA = "0xD6687C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001E69")]
			[Address(RVA = "0xD66884", Offset = "0xD66884", VA = "0xD66884")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004EB")]
		public int MinRegionSize
		{
			[Token(Token = "0x6001E6A")]
			[Address(RVA = "0xD6688C", Offset = "0xD6688C", VA = "0xD6688C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001E6B")]
			[Address(RVA = "0xD66894", Offset = "0xD66894", VA = "0xD66894")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004EC")]
		public int MergedRegionSize
		{
			[Token(Token = "0x6001E6C")]
			[Address(RVA = "0xD6689C", Offset = "0xD6689C", VA = "0xD6689C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001E6D")]
			[Address(RVA = "0xD668A4", Offset = "0xD668A4", VA = "0xD668A4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004ED")]
		public int MaxEdgeLength
		{
			[Token(Token = "0x6001E6E")]
			[Address(RVA = "0xD668AC", Offset = "0xD668AC", VA = "0xD668AC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001E6F")]
			[Address(RVA = "0xD668B4", Offset = "0xD668B4", VA = "0xD668B4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004EE")]
		public float MaxEdgeError
		{
			[Token(Token = "0x6001E70")]
			[Address(RVA = "0xD668BC", Offset = "0xD668BC", VA = "0xD668BC")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001E71")]
			[Address(RVA = "0xD668C4", Offset = "0xD668C4", VA = "0xD668C4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004EF")]
		public ContourBuildFlags ContourFlags
		{
			[Token(Token = "0x6001E72")]
			[Address(RVA = "0xD668CC", Offset = "0xD668CC", VA = "0xD668CC")]
			[CompilerGenerated]
			get
			{
				return default(ContourBuildFlags);
			}
			[Token(Token = "0x6001E73")]
			[Address(RVA = "0xD668D4", Offset = "0xD668D4", VA = "0xD668D4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004F0")]
		public int VertsPerPoly
		{
			[Token(Token = "0x6001E74")]
			[Address(RVA = "0xD668DC", Offset = "0xD668DC", VA = "0xD668DC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001E75")]
			[Address(RVA = "0xD668E4", Offset = "0xD668E4", VA = "0xD668E4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004F1")]
		public int SampleDistance
		{
			[Token(Token = "0x6001E76")]
			[Address(RVA = "0xD668EC", Offset = "0xD668EC", VA = "0xD668EC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001E77")]
			[Address(RVA = "0xD668F4", Offset = "0xD668F4", VA = "0xD668F4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004F2")]
		public int MaxSampleError
		{
			[Token(Token = "0x6001E78")]
			[Address(RVA = "0xD668FC", Offset = "0xD668FC", VA = "0xD668FC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001E79")]
			[Address(RVA = "0xD66904", Offset = "0xD66904", VA = "0xD66904")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004F3")]
		public bool BuildBoundingVolumeTree
		{
			[Token(Token = "0x6001E7A")]
			[Address(RVA = "0xD6690C", Offset = "0xD6690C", VA = "0xD6690C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001E7B")]
			[Address(RVA = "0xD66914", Offset = "0xD66914", VA = "0xD66914")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170004F4")]
		public int VoxelAgentHeight
		{
			[Token(Token = "0x6001E7C")]
			[Address(RVA = "0xD650F8", Offset = "0xD650F8", VA = "0xD650F8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004F5")]
		public int VoxelMaxClimb
		{
			[Token(Token = "0x6001E7D")]
			[Address(RVA = "0xD65120", Offset = "0xD65120", VA = "0xD65120")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004F6")]
		public int VoxelAgentRadius
		{
			[Token(Token = "0x6001E7E")]
			[Address(RVA = "0xD65144", Offset = "0xD65144", VA = "0xD65144")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0xD66790", Offset = "0xD66790", VA = "0xD66790")]
		public NavMeshGenerationSettings()
		{
		}
	}
	[Token(Token = "0x2000589")]
	public class NavMeshQuery
	{
		[Token(Token = "0x200058A")]
		private struct QueryData
		{
			[Token(Token = "0x4001D94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool Status;

			[Token(Token = "0x4001D95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Node LastBestNode;

			[Token(Token = "0x4001D96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float LastBestNodeCost;

			[Token(Token = "0x4001D97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int StartRef;

			[Token(Token = "0x4001D98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int EndRef;

			[Token(Token = "0x4001D99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public SharpNav.Geometry.Vector3 StartPos;

			[Token(Token = "0x4001D9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SharpNav.Geometry.Vector3 EndPos;
		}

		[Token(Token = "0x200058B")]
		public struct SegInterval
		{
			[Token(Token = "0x4001D9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int Reference;

			[Token(Token = "0x4001D9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int TMin;

			[Token(Token = "0x4001D9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int TMax;
		}

		[Token(Token = "0x4001D8C")]
		private const float H_SCALE = 0.999f;

		[Token(Token = "0x4001D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TiledNavMesh nav;

		[Token(Token = "0x4001D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[] areaCost;

		[Token(Token = "0x4001D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private NodePool tinyNodePool;

		[Token(Token = "0x4001D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NodePool nodePool;

		[Token(Token = "0x4001D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PriorityQueue<Node> openList;

		[Token(Token = "0x4001D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private QueryData query;

		[Token(Token = "0x4001D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private System.Random rand;

		[Token(Token = "0x170004F7")]
		public TiledNavMesh NavMesh
		{
			[Token(Token = "0x6001E82")]
			[Address(RVA = "0xD66D34", Offset = "0xD66D34", VA = "0xD66D34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001E7F")]
		[Address(RVA = "0xD66920", Offset = "0xD66920", VA = "0xD66920")]
		public NavMeshQuery(TiledNavMesh nav, int maxNodes)
		{
		}

		[Token(Token = "0x6001E80")]
		[Address(RVA = "0xD6699C", Offset = "0xD6699C", VA = "0xD6699C")]
		public NavMeshQuery(TiledNavMesh nav, int maxNodes, System.Random rand)
		{
		}

		[Token(Token = "0x6001E81")]
		[Address(RVA = "0xD66C34", Offset = "0xD66C34", VA = "0xD66C34")]
		public float GetCost(SharpNav.Geometry.Vector3 pa, SharpNav.Geometry.Vector3 pb, Poly curPoly)
		{
			return default(float);
		}

		[Token(Token = "0x6001E83")]
		[Address(RVA = "0xD66D3C", Offset = "0xD66D3C", VA = "0xD66D3C")]
		public SharpNav.Geometry.Vector3 FindRandomPointOnPoly(MeshTile tile, Poly poly, int polyRef)
		{
			return default(SharpNav.Geometry.Vector3);
		}

		[Token(Token = "0x6001E84")]
		[Address(RVA = "0xD66D68", Offset = "0xD66D68", VA = "0xD66D68")]
		public void FindRandomPointOnPoly(MeshTile tile, Poly poly, int polyRef, out SharpNav.Geometry.Vector3 randomPt)
		{
		}

		[Token(Token = "0x6001E85")]
		[Address(RVA = "0xD67094", Offset = "0xD67094", VA = "0xD67094")]
		public NavPoint FindRandomPoint()
		{
			return default(NavPoint);
		}

		[Token(Token = "0x6001E86")]
		[Address(RVA = "0xD670B8", Offset = "0xD670B8", VA = "0xD670B8")]
		public void FindRandomPoint(out NavPoint randomPoint)
		{
		}

		[Token(Token = "0x6001E87")]
		[Address(RVA = "0xD673C8", Offset = "0xD673C8", VA = "0xD673C8")]
		public NavPoint FindRandomPointAroundCircle(NavPoint center, float radius)
		{
			return default(NavPoint);
		}

		[Token(Token = "0x6001E88")]
		[Address(RVA = "0xD673EC", Offset = "0xD673EC", VA = "0xD673EC")]
		public void FindRandomPointAroundCircle(NavPoint center, float radius, out NavPoint randomPoint)
		{
		}

		[Token(Token = "0x6001E89")]
		[Address(RVA = "0xD68328", Offset = "0xD68328", VA = "0xD68328")]
		public bool FindPath(ref NavPoint startPt, ref NavPoint endPt, List<int> path)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E8A")]
		[Address(RVA = "0xD68B10", Offset = "0xD68B10", VA = "0xD68B10")]
		public bool FindStraightPath(SharpNav.Geometry.Vector3 startPos, SharpNav.Geometry.Vector3 endPos, int[] path, int pathSize, SharpNav.Geometry.Vector3[] straightPath, int[] straightPathFlags, int[] straightPathRefs, ref int straightPathCount, int maxStraightPath, PathBuildFlags options)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E8B")]
		[Address(RVA = "0xD6988C", Offset = "0xD6988C", VA = "0xD6988C")]
		public bool MoveAlongSurface(NavPoint startPoint, SharpNav.Geometry.Vector3 endPos, ref SharpNav.Geometry.Vector3 resultPos, List<int> visited)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E8C")]
		[Address(RVA = "0xD6A1C4", Offset = "0xD6A1C4", VA = "0xD6A1C4")]
		public bool InitSlicedFindPath(NavPoint startPoint, NavPoint endPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E8D")]
		[Address(RVA = "0xD6A3F0", Offset = "0xD6A3F0", VA = "0xD6A3F0")]
		public bool UpdateSlicedFindPath(int maxIter, ref int doneIters)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E8E")]
		[Address(RVA = "0xD6A898", Offset = "0xD6A898", VA = "0xD6A898")]
		public bool FinalizeSlicedFindPath(int[] path, ref int pathCount, int maxPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E8F")]
		[Address(RVA = "0xD6A9D4", Offset = "0xD6A9D4", VA = "0xD6A9D4")]
		public bool FinalizedSlicedPathPartial(int[] existing, int existingSize, int[] path, ref int pathCount, int maxPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E90")]
		[Address(RVA = "0xD6ABD8", Offset = "0xD6ABD8", VA = "0xD6ABD8")]
		public bool Raycast(NavPoint startPoint, SharpNav.Geometry.Vector3 endPos, ref float t, ref SharpNav.Geometry.Vector3 hitNormal, int[] path, ref int pathCount, int maxPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E91")]
		[Address(RVA = "0xD6B110", Offset = "0xD6B110", VA = "0xD6B110")]
		public bool FindLocalNeighbourhood(NavPoint centerPoint, float radius, int[] resultRef, int[] resultParent, ref int resultCount, int maxResult)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E92")]
		[Address(RVA = "0xD6B7AC", Offset = "0xD6B7AC", VA = "0xD6B7AC")]
		public bool GetPolyWallSegments(int reference, LocalBoundary.Segment[] segmentVerts, int[] segmentRefs, ref int segmentCount, int maxSegments)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E93")]
		[Address(RVA = "0xD6BE10", Offset = "0xD6BE10", VA = "0xD6BE10")]
		public void InsertInterval(SegInterval[] ints, ref int nints, int maxInts, int tmin, int tmax, int reference)
		{
		}

		[Token(Token = "0x6001E94")]
		[Address(RVA = "0xD689C0", Offset = "0xD689C0", VA = "0xD689C0")]
		public bool GetEdgeMidPoint(int from, Poly fromPoly, MeshTile fromTile, int to, Poly toPoly, MeshTile toTile, ref SharpNav.Geometry.Vector3 mid)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E95")]
		[Address(RVA = "0xD694D4", Offset = "0xD694D4", VA = "0xD694D4")]
		public bool GetPortalPoints(int from, int to, ref SharpNav.Geometry.Vector3 left, ref SharpNav.Geometry.Vector3 right, ref PolygonType fromType, ref PolygonType toType)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E96")]
		[Address(RVA = "0xD67E0C", Offset = "0xD67E0C", VA = "0xD67E0C")]
		public bool GetPortalPoints(int from, Poly fromPoly, MeshTile fromTile, int to, Poly toPoly, MeshTile toTile, ref SharpNav.Geometry.Vector3 left, ref SharpNav.Geometry.Vector3 right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E97")]
		[Address(RVA = "0xD6BF34", Offset = "0xD6BF34", VA = "0xD6BF34")]
		public bool ClosestPointOnPoly(int reference, SharpNav.Geometry.Vector3 pos, ref SharpNav.Geometry.Vector3 closest)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E98")]
		[Address(RVA = "0xD6BFBC", Offset = "0xD6BFBC", VA = "0xD6BFBC")]
		public bool ClosestPointOnPoly(int reference, SharpNav.Geometry.Vector3 pos, out SharpNav.Geometry.Vector3 closest, out bool posOverPoly)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E99")]
		[Address(RVA = "0xD69268", Offset = "0xD69268", VA = "0xD69268")]
		public bool ClosestPointOnPolyBoundary(int reference, SharpNav.Geometry.Vector3 pos, ref SharpNav.Geometry.Vector3 closest)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E9A")]
		[Address(RVA = "0xD692F4", Offset = "0xD692F4", VA = "0xD692F4")]
		public bool AppendVertex(SharpNav.Geometry.Vector3 pos, int flags, int reference, SharpNav.Geometry.Vector3[] straightPath, int[] straightPathFlags, int[] straightPathRefs, ref int straightPathCount, int maxStraightPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E9B")]
		[Address(RVA = "0xD695AC", Offset = "0xD695AC", VA = "0xD695AC")]
		public bool AppendPortals(int startIdx, int endIdx, SharpNav.Geometry.Vector3 endPos, int[] path, SharpNav.Geometry.Vector3[] straightPath, int[] straightPathFlags, int[] straightPathRefs, ref int straightPathCount, int maxStraightPath, PathBuildFlags options)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E9C")]
		[Address(RVA = "0xD66F70", Offset = "0xD66F70", VA = "0xD66F70")]
		public bool GetPolyHeight(int reference, SharpNav.Geometry.Vector3 pos, ref float height)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E9D")]
		[Address(RVA = "0xD6C6A0", Offset = "0xD6C6A0", VA = "0xD6C6A0")]
		public NavPoint FindNearestPoly(SharpNav.Geometry.Vector3 center, SharpNav.Geometry.Vector3 extents)
		{
			return default(NavPoint);
		}

		[Token(Token = "0x6001E9E")]
		[Address(RVA = "0xD6C6DC", Offset = "0xD6C6DC", VA = "0xD6C6DC")]
		public void FindNearestPoly(ref SharpNav.Geometry.Vector3 center, ref SharpNav.Geometry.Vector3 extents, out NavPoint nearestPt)
		{
		}

		[Token(Token = "0x6001E9F")]
		[Address(RVA = "0xD6C9FC", Offset = "0xD6C9FC", VA = "0xD6C9FC")]
		public bool QueryPolygons(ref SharpNav.Geometry.Vector3 center, ref SharpNav.Geometry.Vector3 extent, List<int> polys)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EA0")]
		[Address(RVA = "0xD6CCB0", Offset = "0xD6CCB0", VA = "0xD6CCB0")]
		public bool IsValidPolyRef(int reference)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EA1")]
		[Address(RVA = "0xD68254", Offset = "0xD68254", VA = "0xD68254")]
		public bool IsInOpenList(Node node)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EA2")]
		[Address(RVA = "0xD68238", Offset = "0xD68238", VA = "0xD68238")]
		public bool IsInClosedList(Node node)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EA3")]
		[Address(RVA = "0xD68AEC", Offset = "0xD68AEC", VA = "0xD68AEC")]
		public void SetNodeFlagOpen(ref Node node)
		{
		}

		[Token(Token = "0x6001EA4")]
		[Address(RVA = "0xD67D60", Offset = "0xD67D60", VA = "0xD67D60")]
		public void SetNodeFlagClosed(ref Node node)
		{
		}

		[Token(Token = "0x6001EA5")]
		[Address(RVA = "0xD68270", Offset = "0xD68270", VA = "0xD68270")]
		public NodeFlags RemoveNodeFlagClosed(Node node)
		{
			return default(NodeFlags);
		}
	}
	[Token(Token = "0x200058C")]
	public class Node : IValueWithCost
	{
		[Token(Token = "0x4001D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SharpNav.Geometry.Vector3 Pos;

		[Token(Token = "0x4001D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float cost;

		[Token(Token = "0x4001DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float total;

		[Token(Token = "0x4001DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int ParentIdx;

		[Token(Token = "0x4001DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public NodeFlags Flags;

		[Token(Token = "0x4001DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int Id;

		[Token(Token = "0x170004F8")]
		public float Cost
		{
			[Token(Token = "0x6001EA6")]
			[Address(RVA = "0xD6CCE8", Offset = "0xD6CCE8", VA = "0xD6CCE8", Slot = "4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001EA7")]
		[Address(RVA = "0xD6CCF0", Offset = "0xD6CCF0", VA = "0xD6CCF0")]
		public Node()
		{
		}
	}
	[Token(Token = "0x200058D")]
	[Flags]
	public enum NodeFlags
	{
		[Token(Token = "0x4001DA5")]
		Open = 1,
		[Token(Token = "0x4001DA6")]
		Closed = 2
	}
	[Token(Token = "0x200058E")]
	public class NodePool
	{
		[Token(Token = "0x200058F")]
		private class IntNodeIdComparer : IEqualityComparer<int>
		{
			[Token(Token = "0x4001DAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int hashSize;

			[Token(Token = "0x6001EAE")]
			[Address(RVA = "0xD6CD00", Offset = "0xD6CD00", VA = "0xD6CD00")]
			public IntNodeIdComparer(int hashSize)
			{
			}

			[Token(Token = "0x6001EAF")]
			[Address(RVA = "0xD6CD28", Offset = "0xD6CD28", VA = "0xD6CD28", Slot = "4")]
			public bool Equals(int left, int right)
			{
				return default(bool);
			}

			[Token(Token = "0x6001EB0")]
			[Address(RVA = "0xD6CD34", Offset = "0xD6CD34", VA = "0xD6CD34", Slot = "5")]
			public int GetHashCode(int obj)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4001DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Node> nodes;

		[Token(Token = "0x4001DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<int, Node> nodeDict;

		[Token(Token = "0x4001DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int maxNodes;

		[Token(Token = "0x6001EA8")]
		[Address(RVA = "0xD66B24", Offset = "0xD66B24", VA = "0xD66B24")]
		public NodePool(int maxNodes, int hashSize)
		{
		}

		[Token(Token = "0x6001EA9")]
		[Address(RVA = "0xD67B54", Offset = "0xD67B54", VA = "0xD67B54")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001EAA")]
		[Address(RVA = "0xD6AB60", Offset = "0xD6AB60", VA = "0xD6AB60")]
		public Node FindNode(int id)
		{
			return null;
		}

		[Token(Token = "0x6001EAB")]
		[Address(RVA = "0xD67BDC", Offset = "0xD67BDC", VA = "0xD67BDC")]
		public Node GetNode(int id)
		{
			return null;
		}

		[Token(Token = "0x6001EAC")]
		[Address(RVA = "0xD6828C", Offset = "0xD6828C", VA = "0xD6828C")]
		public int GetNodeIdx(Node node)
		{
			return default(int);
		}

		[Token(Token = "0x6001EAD")]
		[Address(RVA = "0xD67D88", Offset = "0xD67D88", VA = "0xD67D88")]
		public Node GetNodeAtIdx(int idx)
		{
			return null;
		}
	}
	[Token(Token = "0x2000590")]
	public struct PolyBounds : IEquatable<PolyBounds>
	{
		[Token(Token = "0x4001DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PolyVertex Min;

		[Token(Token = "0x4001DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PolyVertex Max;

		[Token(Token = "0x6001EB1")]
		[Address(RVA = "0xD7E3CC", Offset = "0xD7E3CC", VA = "0xD7E3CC")]
		public PolyBounds(PolyVertex min, PolyVertex max)
		{
		}

		[Token(Token = "0x6001EB2")]
		[Address(RVA = "0xD7E3E0", Offset = "0xD7E3E0", VA = "0xD7E3E0")]
		public static bool Overlapping(ref PolyBounds a, ref PolyBounds b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EB3")]
		[Address(RVA = "0xD7E44C", Offset = "0xD7E44C", VA = "0xD7E44C")]
		public static bool operator ==(PolyBounds left, PolyBounds right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EB4")]
		[Address(RVA = "0xD7E4F4", Offset = "0xD7E4F4", VA = "0xD7E4F4")]
		public static bool operator !=(PolyBounds left, PolyBounds right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EB5")]
		[Address(RVA = "0xD7E47C", Offset = "0xD7E47C", VA = "0xD7E47C", Slot = "4")]
		public bool Equals(PolyBounds other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EB6")]
		[Address(RVA = "0xD7E59C", Offset = "0xD7E59C", VA = "0xD7E59C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EB7")]
		[Address(RVA = "0xD7E690", Offset = "0xD7E690", VA = "0xD7E690", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001EB8")]
		[Address(RVA = "0xD7E704", Offset = "0xD7E704", VA = "0xD7E704", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000591")]
	public class PolyMesh
	{
		[Token(Token = "0x2000592")]
		private struct Triangle
		{
			[Token(Token = "0x4001DB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int Index0;

			[Token(Token = "0x4001DB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int Index1;

			[Token(Token = "0x4001DB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int Index2;
		}

		[Token(Token = "0x2000593")]
		private struct AdjacencyEdge
		{
			[Token(Token = "0x4001DBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int Vert0;

			[Token(Token = "0x4001DBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int Vert1;

			[Token(Token = "0x4001DBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int PolyEdge0;

			[Token(Token = "0x4001DBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int PolyEdge1;

			[Token(Token = "0x4001DBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int Poly0;

			[Token(Token = "0x4001DBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int Poly1;
		}

		[Token(Token = "0x2000594")]
		private struct Edge
		{
			[Token(Token = "0x4001DC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int Vert0;

			[Token(Token = "0x4001DC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int Vert1;

			[Token(Token = "0x4001DC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public RegionId Region;

			[Token(Token = "0x4001DC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Area Area;

			[Token(Token = "0x6001EDC")]
			[Address(RVA = "0xD82EF8", Offset = "0xD82EF8", VA = "0xD82EF8")]
			public Edge(int vert0, int vert1, RegionId region, Area area)
			{
			}
		}

		[Token(Token = "0x2000595")]
		public class Polygon
		{
			[Token(Token = "0x4001DC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int[] vertices;

			[Token(Token = "0x4001DC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int[] neighborEdges;

			[Token(Token = "0x4001DC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Area area;

			[Token(Token = "0x4001DC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private RegionId regionId;

			[Token(Token = "0x4001DC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int flags;

			[Token(Token = "0x17000502")]
			public int[] Vertices
			{
				[Token(Token = "0x6001EDE")]
				[Address(RVA = "0xD82F08", Offset = "0xD82F08", VA = "0xD82F08")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000503")]
			public int[] NeighborEdges
			{
				[Token(Token = "0x6001EDF")]
				[Address(RVA = "0xD82F10", Offset = "0xD82F10", VA = "0xD82F10")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000504")]
			public Area Area
			{
				[Token(Token = "0x6001EE0")]
				[Address(RVA = "0xD82F18", Offset = "0xD82F18", VA = "0xD82F18")]
				get
				{
					return default(Area);
				}
				[Token(Token = "0x6001EE1")]
				[Address(RVA = "0xD82F20", Offset = "0xD82F20", VA = "0xD82F20")]
				set
				{
				}
			}

			[Token(Token = "0x17000505")]
			public RegionId RegionId
			{
				[Token(Token = "0x6001EE2")]
				[Address(RVA = "0xD82F28", Offset = "0xD82F28", VA = "0xD82F28")]
				get
				{
					return default(RegionId);
				}
				[Token(Token = "0x6001EE3")]
				[Address(RVA = "0xD82F30", Offset = "0xD82F30", VA = "0xD82F30")]
				set
				{
				}
			}

			[Token(Token = "0x17000506")]
			public int Flags
			{
				[Token(Token = "0x6001EE4")]
				[Address(RVA = "0xD82F38", Offset = "0xD82F38", VA = "0xD82F38")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001EE5")]
				[Address(RVA = "0xD82F40", Offset = "0xD82F40", VA = "0xD82F40")]
				set
				{
				}
			}

			[Token(Token = "0x17000507")]
			public int VertexCount
			{
				[Token(Token = "0x6001EE6")]
				[Address(RVA = "0xD82E34", Offset = "0xD82E34", VA = "0xD82E34")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6001EDD")]
			[Address(RVA = "0xD80324", Offset = "0xD80324", VA = "0xD80324")]
			public Polygon(int numVertsPerPoly, Area area, RegionId regionId, int flags)
			{
			}

			[Token(Token = "0x6001EE7")]
			[Address(RVA = "0xD82E88", Offset = "0xD82E88", VA = "0xD82E88")]
			public bool ContainsVertex(int vertex)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001DAD")]
		public const int NullId = -1;

		[Token(Token = "0x4001DAE")]
		private const int DiagonalFlag = int.MinValue;

		[Token(Token = "0x4001DAF")]
		private const int NeighborEdgeFlag = int.MinValue;

		[Token(Token = "0x4001DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PolyVertex[] vertices;

		[Token(Token = "0x4001DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Polygon[] polygons;

		[Token(Token = "0x4001DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int numVertsPerPoly;

		[Token(Token = "0x4001DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private BBox3 bounds;

		[Token(Token = "0x4001DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float cellSize;

		[Token(Token = "0x4001DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float cellHeight;

		[Token(Token = "0x4001DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int borderSize;

		[Token(Token = "0x170004F9")]
		public int VertCount
		{
			[Token(Token = "0x6001EBB")]
			[Address(RVA = "0xD822AC", Offset = "0xD822AC", VA = "0xD822AC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004FA")]
		public int PolyCount
		{
			[Token(Token = "0x6001EBC")]
			[Address(RVA = "0xD822C8", Offset = "0xD822C8", VA = "0xD822C8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004FB")]
		public int NumVertsPerPoly
		{
			[Token(Token = "0x6001EBD")]
			[Address(RVA = "0xD822E4", Offset = "0xD822E4", VA = "0xD822E4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170004FC")]
		public PolyVertex[] Verts
		{
			[Token(Token = "0x6001EBE")]
			[Address(RVA = "0xD822EC", Offset = "0xD822EC", VA = "0xD822EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004FD")]
		public Polygon[] Polys
		{
			[Token(Token = "0x6001EBF")]
			[Address(RVA = "0xD822F4", Offset = "0xD822F4", VA = "0xD822F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170004FE")]
		public BBox3 Bounds
		{
			[Token(Token = "0x6001EC0")]
			[Address(RVA = "0xD822FC", Offset = "0xD822FC", VA = "0xD822FC")]
			get
			{
				return default(BBox3);
			}
		}

		[Token(Token = "0x170004FF")]
		public float CellSize
		{
			[Token(Token = "0x6001EC1")]
			[Address(RVA = "0xD82310", Offset = "0xD82310", VA = "0xD82310")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000500")]
		public float CellHeight
		{
			[Token(Token = "0x6001EC2")]
			[Address(RVA = "0xD82318", Offset = "0xD82318", VA = "0xD82318")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000501")]
		public int BorderSize
		{
			[Token(Token = "0x6001EC3")]
			[Address(RVA = "0xD82320", Offset = "0xD82320", VA = "0xD82320")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001EB9")]
		[Address(RVA = "0xD7EAA8", Offset = "0xD7EAA8", VA = "0xD7EAA8")]
		public PolyMesh(ContourSet contSet, NavMeshGenerationSettings settings)
		{
		}

		[Token(Token = "0x6001EBA")]
		[Address(RVA = "0xD7EAC8", Offset = "0xD7EAC8", VA = "0xD7EAC8")]
		public PolyMesh(ContourSet contSet, float cellSize, float cellHeight, int borderSize, int numVertsPerPoly)
		{
		}

		[Token(Token = "0x6001EC4")]
		[Address(RVA = "0xD82328", Offset = "0xD82328", VA = "0xD82328")]
		public static bool IsBoundaryEdge(int flag)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EC5")]
		[Address(RVA = "0xD82330", Offset = "0xD82330", VA = "0xD82330")]
		public static bool IsInteriorEdge(int flag)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EC6")]
		[Address(RVA = "0xD8233C", Offset = "0xD8233C", VA = "0xD8233C")]
		public static bool HasDiagonalFlag(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EC7")]
		[Address(RVA = "0xD82344", Offset = "0xD82344", VA = "0xD82344")]
		public static bool Diagonal(int i, int j, PolyVertex[] verts, int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EC8")]
		[Address(RVA = "0xD8239C", Offset = "0xD8239C", VA = "0xD8239C")]
		public static bool InCone(int i, int j, PolyVertex[] verts, int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EC9")]
		[Address(RVA = "0xD82544", Offset = "0xD82544", VA = "0xD82544")]
		public static bool Diagonalie(int i, int j, PolyVertex[] verts, int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ECA")]
		[Address(RVA = "0xD82780", Offset = "0xD82780", VA = "0xD82780")]
		private static int Prev(int i, int n)
		{
			return default(int);
		}

		[Token(Token = "0x6001ECB")]
		[Address(RVA = "0xD82770", Offset = "0xD82770", VA = "0xD82770")]
		private static int Next(int i, int n)
		{
			return default(int);
		}

		[Token(Token = "0x6001ECC")]
		[Address(RVA = "0xD828CC", Offset = "0xD828CC", VA = "0xD828CC")]
		private static bool ULeft(PolyVertex a, PolyVertex b, PolyVertex c)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ECD")]
		[Address(RVA = "0xD828F0", Offset = "0xD828F0", VA = "0xD828F0")]
		private static void SetDiagonalFlag(ref int index)
		{
		}

		[Token(Token = "0x6001ECE")]
		[Address(RVA = "0xD80414", Offset = "0xD80414", VA = "0xD80414")]
		private static int RemoveDiagonalFlag(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001ECF")]
		[Address(RVA = "0xD82900", Offset = "0xD82900", VA = "0xD82900")]
		private static void RemoveDiagonalFlag(ref int index)
		{
		}

		[Token(Token = "0x6001ED0")]
		[Address(RVA = "0xD7FD20", Offset = "0xD7FD20", VA = "0xD7FD20")]
		private static int Triangulate(PolyVertex[] verts, int[] indices, Triangle[] tris)
		{
			return default(int);
		}

		[Token(Token = "0x6001ED1")]
		[Address(RVA = "0xD82968", Offset = "0xD82968", VA = "0xD82968")]
		private static bool IsInConeLoose(int i, int j, PolyVertex[] verts, int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ED2")]
		[Address(RVA = "0xD82910", Offset = "0xD82910", VA = "0xD82910")]
		private static bool IsDiagonalLoose(int i, int j, PolyVertex[] verts, int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ED3")]
		[Address(RVA = "0xD82B1C", Offset = "0xD82B1C", VA = "0xD82B1C")]
		private static bool IsDiagonalieLoose(int i, int j, PolyVertex[] verts, int[] indices)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ED4")]
		[Address(RVA = "0xD82DEC", Offset = "0xD82DEC", VA = "0xD82DEC")]
		private static bool xorb(bool x, bool y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ED5")]
		[Address(RVA = "0xD82D40", Offset = "0xD82D40", VA = "0xD82D40")]
		private static bool IsIntersectProp(ref PolyVertex a, ref PolyVertex b, ref PolyVertex c, ref PolyVertex d)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ED6")]
		[Address(RVA = "0xD801D0", Offset = "0xD801D0", VA = "0xD801D0")]
		private static int AddVertex(Dictionary<PolyVertex, int> vertDict, PolyVertex v, List<PolyVertex> verts)
		{
			return default(int);
		}

		[Token(Token = "0x6001ED7")]
		[Address(RVA = "0xD8041C", Offset = "0xD8041C", VA = "0xD8041C")]
		private static int GetPolyMergeValue(List<Polygon> polys, int polyA, int polyB, List<PolyVertex> verts, out int edgeA, out int edgeB)
		{
			return default(int);
		}

		[Token(Token = "0x6001ED8")]
		[Address(RVA = "0xD80CA0", Offset = "0xD80CA0", VA = "0xD80CA0")]
		private static bool CanRemoveVertex(List<Polygon> polys, int remove)
		{
			return default(bool);
		}

		[Token(Token = "0x6001ED9")]
		[Address(RVA = "0xD81DD4", Offset = "0xD81DD4", VA = "0xD81DD4")]
		private static void BuildMeshAdjacency(List<PolyVertex> vertices, List<Polygon> polys, int numVertsPerPoly)
		{
		}

		[Token(Token = "0x6001EDA")]
		[Address(RVA = "0xD809FC", Offset = "0xD809FC", VA = "0xD809FC")]
		private void MergePolys(List<Polygon> polys, int polyA, int polyB, int edgeA, int edgeB)
		{
		}

		[Token(Token = "0x6001EDB")]
		[Address(RVA = "0xD80FC4", Offset = "0xD80FC4", VA = "0xD80FC4")]
		private void RemoveVertex(List<PolyVertex> verts, List<Polygon> polys, int vertex)
		{
		}
	}
	[Token(Token = "0x2000596")]
	public class PolyMeshDetail
	{
		[Token(Token = "0x2000597")]
		private enum EdgeValues
		{
			[Token(Token = "0x4001DCE")]
			Undefined = -1,
			[Token(Token = "0x4001DCF")]
			Hull = -2
		}

		[Token(Token = "0x2000598")]
		public struct MeshData
		{
			[Token(Token = "0x4001DD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int VertexIndex;

			[Token(Token = "0x4001DD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int VertexCount;

			[Token(Token = "0x4001DD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int TriangleIndex;

			[Token(Token = "0x4001DD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int TriangleCount;
		}

		[Token(Token = "0x2000599")]
		public struct TriangleData
		{
			[Token(Token = "0x4001DD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int VertexHash0;

			[Token(Token = "0x4001DD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int VertexHash1;

			[Token(Token = "0x4001DD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int VertexHash2;

			[Token(Token = "0x4001DD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int Flags;

			[Token(Token = "0x1700050E")]
			public int this[int index]
			{
				[Token(Token = "0x6001F06")]
				[Address(RVA = "0xD87908", Offset = "0xD87908", VA = "0xD87908")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6001F03")]
			[Address(RVA = "0xD87750", Offset = "0xD87750", VA = "0xD87750")]
			public TriangleData(int hash0, int hash1, int hash2)
			{
			}

			[Token(Token = "0x6001F04")]
			[Address(RVA = "0xD86B74", Offset = "0xD86B74", VA = "0xD86B74")]
			public TriangleData(int hash0, int hash1, int hash2, int flags)
			{
			}

			[Token(Token = "0x6001F05")]
			[Address(RVA = "0xD84F1C", Offset = "0xD84F1C", VA = "0xD84F1C")]
			public TriangleData(TriangleData data, List<SharpNav.Geometry.Vector3> verts, SharpNav.Geometry.Vector3[] vpoly, int npoly)
			{
			}

			[Token(Token = "0x6001F07")]
			[Address(RVA = "0xD8775C", Offset = "0xD8775C", VA = "0xD8775C")]
			public static int GetTriFlags(ref TriangleData t, List<SharpNav.Geometry.Vector3> verts, SharpNav.Geometry.Vector3[] vpoly, int npoly)
			{
				return default(int);
			}
		}

		[Token(Token = "0x200059A")]
		private struct EdgeInfo
		{
			[Token(Token = "0x4001DD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int EndPt0;

			[Token(Token = "0x4001DD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int EndPt1;

			[Token(Token = "0x4001DDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int RightFace;

			[Token(Token = "0x4001DDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int LeftFace;

			[Token(Token = "0x6001F08")]
			[Address(RVA = "0xD876B0", Offset = "0xD876B0", VA = "0xD876B0")]
			public EdgeInfo(int endPt0, int endPt1, int rightFace, int leftFace)
			{
			}

			[Token(Token = "0x6001F09")]
			[Address(RVA = "0xD8759C", Offset = "0xD8759C", VA = "0xD8759C")]
			public static void UpdateLeftFace(ref EdgeInfo e, int s, int t, int f)
			{
			}
		}

		[Token(Token = "0x200059B")]
		private struct SamplingData
		{
			[Token(Token = "0x4001DDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int X;

			[Token(Token = "0x4001DDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int Y;

			[Token(Token = "0x4001DDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int Z;

			[Token(Token = "0x4001DDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool IsSampled;

			[Token(Token = "0x6001F0A")]
			[Address(RVA = "0xD864F8", Offset = "0xD864F8", VA = "0xD864F8")]
			public SamplingData(int x, int y, int z, bool isSampled)
			{
			}
		}

		[Token(Token = "0x4001DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] VertexOffset;

		[Token(Token = "0x4001DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MeshData[] meshes;

		[Token(Token = "0x4001DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private SharpNav.Geometry.Vector3[] verts;

		[Token(Token = "0x4001DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TriangleData[] tris;

		[Token(Token = "0x17000508")]
		public int MeshCount
		{
			[Token(Token = "0x6001EEA")]
			[Address(RVA = "0xD84F5C", Offset = "0xD84F5C", VA = "0xD84F5C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000509")]
		public int VertCount
		{
			[Token(Token = "0x6001EEB")]
			[Address(RVA = "0xD84F74", Offset = "0xD84F74", VA = "0xD84F74")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700050A")]
		public int TrisCount
		{
			[Token(Token = "0x6001EEC")]
			[Address(RVA = "0xD84F8C", Offset = "0xD84F8C", VA = "0xD84F8C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700050B")]
		public MeshData[] Meshes
		{
			[Token(Token = "0x6001EED")]
			[Address(RVA = "0xD84FA4", Offset = "0xD84FA4", VA = "0xD84FA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700050C")]
		public SharpNav.Geometry.Vector3[] Verts
		{
			[Token(Token = "0x6001EEE")]
			[Address(RVA = "0xD84FAC", Offset = "0xD84FAC", VA = "0xD84FAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700050D")]
		public TriangleData[] Tris
		{
			[Token(Token = "0x6001EEF")]
			[Address(RVA = "0xD84FB4", Offset = "0xD84FB4", VA = "0xD84FB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EE8")]
		[Address(RVA = "0xD82F48", Offset = "0xD82F48", VA = "0xD82F48")]
		public PolyMeshDetail(PolyMesh mesh, CompactHeightfield compactField, NavMeshGenerationSettings settings)
		{
		}

		[Token(Token = "0x6001EE9")]
		[Address(RVA = "0xD82F68", Offset = "0xD82F68", VA = "0xD82F68")]
		public PolyMeshDetail(PolyMesh mesh, CompactHeightfield compactField, float sampleDist, float sampleMaxError)
		{
		}

		[Token(Token = "0x6001EF0")]
		[Address(RVA = "0xD84FBC", Offset = "0xD84FBC", VA = "0xD84FBC")]
		private static float GetJitterX(int i)
		{
			return default(float);
		}

		[Token(Token = "0x6001EF1")]
		[Address(RVA = "0xD84FEC", Offset = "0xD84FEC", VA = "0xD84FEC")]
		private static float GetJitterY(int i)
		{
			return default(float);
		}

		[Token(Token = "0x6001EF2")]
		[Address(RVA = "0xD8501C", Offset = "0xD8501C", VA = "0xD8501C")]
		private static int GetEdgeFlags(SharpNav.Geometry.Vector3 va, SharpNav.Geometry.Vector3 vb, SharpNav.Geometry.Vector3[] vpoly, int npoly)
		{
			return default(int);
		}

		[Token(Token = "0x6001EF3")]
		[Address(RVA = "0xD83898", Offset = "0xD83898", VA = "0xD83898")]
		private void GetHeightData(CompactHeightfield compactField, PolyMesh.Polygon poly, int polyCount, PolyVertex[] verts, int borderSize, HeightPatch hp)
		{
		}

		[Token(Token = "0x6001EF4")]
		[Address(RVA = "0xD8522C", Offset = "0xD8522C", VA = "0xD8522C")]
		private void GetHeightDataSeedsFromVertices(CompactHeightfield compactField, PolyMesh.Polygon poly, int polyCount, PolyVertex[] verts, int borderSize, HeightPatch hp, List<CompactSpanReference> stack)
		{
		}

		[Token(Token = "0x6001EF5")]
		[Address(RVA = "0xD85B38", Offset = "0xD85B38", VA = "0xD85B38")]
		private static float PolyMinExtent(SharpNav.Geometry.Vector3[] verts)
		{
			return default(float);
		}

		[Token(Token = "0x6001EF6")]
		[Address(RVA = "0xD83F80", Offset = "0xD83F80", VA = "0xD83F80")]
		private void BuildPolyDetail(SharpNav.Geometry.Vector3[] polyMeshVerts, int numMeshVerts, float sampleDist, float sampleMaxError, CompactHeightfield compactField, HeightPatch hp, List<SharpNav.Geometry.Vector3> verts, List<TriangleData> tris, List<EdgeInfo> edges, List<SamplingData> samples)
		{
		}

		[Token(Token = "0x6001EF7")]
		[Address(RVA = "0xD85D0C", Offset = "0xD85D0C", VA = "0xD85D0C")]
		private int GetHeight(SharpNav.Geometry.Vector3 loc, float invCellSize, float cellHeight, HeightPatch hp)
		{
			return default(int);
		}

		[Token(Token = "0x6001EF8")]
		[Address(RVA = "0xD86B50", Offset = "0xD86B50", VA = "0xD86B50")]
		private static int Prev(int i, int n)
		{
			return default(int);
		}

		[Token(Token = "0x6001EF9")]
		[Address(RVA = "0xD86B64", Offset = "0xD86B64", VA = "0xD86B64")]
		private static int Next(int i, int n)
		{
			return default(int);
		}

		[Token(Token = "0x6001EFA")]
		[Address(RVA = "0xD85F3C", Offset = "0xD85F3C", VA = "0xD85F3C")]
		private void TriangulateHull(List<SharpNav.Geometry.Vector3> pts, List<int> hull, List<TriangleData> tris)
		{
		}

		[Token(Token = "0x6001EFB")]
		[Address(RVA = "0xD866A4", Offset = "0xD866A4", VA = "0xD866A4")]
		private void DelaunayHull(List<SharpNav.Geometry.Vector3> pts, List<int> hull, List<TriangleData> tris, List<EdgeInfo> edges)
		{
		}

		[Token(Token = "0x6001EFC")]
		[Address(RVA = "0xD86C78", Offset = "0xD86C78", VA = "0xD86C78")]
		private void CompleteFacet(List<SharpNav.Geometry.Vector3> pts, List<EdgeInfo> edges, ref int nfaces, int curEdge)
		{
		}

		[Token(Token = "0x6001EFD")]
		[Address(RVA = "0xD86B80", Offset = "0xD86B80", VA = "0xD86B80")]
		private int AddEdge(List<EdgeInfo> edges, int s, int t, int leftFace, int rightFace)
		{
			return default(int);
		}

		[Token(Token = "0x6001EFE")]
		[Address(RVA = "0xD875F0", Offset = "0xD875F0", VA = "0xD875F0")]
		private int FindEdge(List<EdgeInfo> edges, int s, int t)
		{
			return default(int);
		}

		[Token(Token = "0x6001EFF")]
		[Address(RVA = "0xD873F4", Offset = "0xD873F4", VA = "0xD873F4")]
		private bool OverlapEdges(List<SharpNav.Geometry.Vector3> pts, List<EdgeInfo> edges, int s1, int t1)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F00")]
		[Address(RVA = "0xD87234", Offset = "0xD87234", VA = "0xD87234")]
		private bool CircumCircle(SharpNav.Geometry.Vector3 p1, SharpNav.Geometry.Vector3 p2, SharpNav.Geometry.Vector3 p3, ref SharpNav.Geometry.Vector3 c, out float r)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F01")]
		[Address(RVA = "0xD8650C", Offset = "0xD8650C", VA = "0xD8650C")]
		private float DistanceToTriMesh(SharpNav.Geometry.Vector3 p, List<SharpNav.Geometry.Vector3> verts, List<TriangleData> tris)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200059C")]
	public struct PolyVertex : IEquatable<PolyVertex>
	{
		[Token(Token = "0x200059D")]
		internal class RoughYEqualityComparer : IEqualityComparer<PolyVertex>
		{
			[Token(Token = "0x4001DE3")]
			private const int HashConstX = -1918454973;

			[Token(Token = "0x4001DE4")]
			private const int HashConstZ = -887442657;

			[Token(Token = "0x4001DE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int epsilonY;

			[Token(Token = "0x6001F1F")]
			[Address(RVA = "0xD7FCEC", Offset = "0xD7FCEC", VA = "0xD7FCEC")]
			public RoughYEqualityComparer(int epsilonY)
			{
			}

			[Token(Token = "0x6001F20")]
			[Address(RVA = "0xD87D18", Offset = "0xD87D18", VA = "0xD87D18", Slot = "4")]
			public bool Equals(PolyVertex left, PolyVertex right)
			{
				return default(bool);
			}

			[Token(Token = "0x6001F21")]
			[Address(RVA = "0xD87DC0", Offset = "0xD87DC0", VA = "0xD87DC0", Slot = "5")]
			public int GetHashCode(PolyVertex obj)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4001DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int X;

		[Token(Token = "0x4001DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Y;

		[Token(Token = "0x4001DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int Z;

		[Token(Token = "0x6001F0B")]
		[Address(RVA = "0xD7FD14", Offset = "0xD7FD14", VA = "0xD7FD14")]
		public PolyVertex(int x, int y, int z)
		{
		}

		[Token(Token = "0x6001F0C")]
		[Address(RVA = "0xD8792C", Offset = "0xD8792C", VA = "0xD8792C")]
		public static PolyVertex ComponentMin(PolyVertex a, PolyVertex b)
		{
			return default(PolyVertex);
		}

		[Token(Token = "0x6001F0D")]
		[Address(RVA = "0xD87958", Offset = "0xD87958", VA = "0xD87958")]
		public static void ComponentMin(ref PolyVertex a, ref PolyVertex b, out PolyVertex result)
		{
		}

		[Token(Token = "0x6001F0E")]
		[Address(RVA = "0xD87998", Offset = "0xD87998", VA = "0xD87998")]
		public static PolyVertex ComponentMax(PolyVertex a, PolyVertex b)
		{
			return default(PolyVertex);
		}

		[Token(Token = "0x6001F0F")]
		[Address(RVA = "0xD879C4", Offset = "0xD879C4", VA = "0xD879C4")]
		public static void ComponentMax(ref PolyVertex a, ref PolyVertex b, out PolyVertex result)
		{
		}

		[Token(Token = "0x6001F10")]
		[Address(RVA = "0xD827D4", Offset = "0xD827D4", VA = "0xD827D4")]
		public static bool IsLeft(ref PolyVertex a, ref PolyVertex b, ref PolyVertex c)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F11")]
		[Address(RVA = "0xD82794", Offset = "0xD82794", VA = "0xD82794")]
		public static bool IsLeftOn(ref PolyVertex a, ref PolyVertex b, ref PolyVertex c)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F12")]
		[Address(RVA = "0xD82810", Offset = "0xD82810", VA = "0xD82810")]
		public static bool Equal2D(ref PolyVertex a, ref PolyVertex b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F13")]
		[Address(RVA = "0xD8283C", Offset = "0xD8283C", VA = "0xD8283C")]
		public static bool Intersect(ref PolyVertex a, ref PolyVertex b, ref PolyVertex c, ref PolyVertex d)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F14")]
		[Address(RVA = "0xD87A40", Offset = "0xD87A40", VA = "0xD87A40")]
		public static bool IntersectProp(ref PolyVertex a, ref PolyVertex b, ref PolyVertex c, ref PolyVertex d)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F15")]
		[Address(RVA = "0xD87AEC", Offset = "0xD87AEC", VA = "0xD87AEC")]
		public static bool IsBetween(ref PolyVertex a, ref PolyVertex b, ref PolyVertex c)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F16")]
		[Address(RVA = "0xD82DF8", Offset = "0xD82DF8", VA = "0xD82DF8")]
		public static bool IsCollinear(ref PolyVertex a, ref PolyVertex b, ref PolyVertex c)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F17")]
		[Address(RVA = "0xD87A04", Offset = "0xD87A04", VA = "0xD87A04")]
		public static void Area2D(ref PolyVertex a, ref PolyVertex b, ref PolyVertex c, out int area)
		{
		}

		[Token(Token = "0x6001F18")]
		[Address(RVA = "0xD87B88", Offset = "0xD87B88", VA = "0xD87B88")]
		public static void Area2D(ref ContourVertex a, ref ContourVertex b, ref ContourVertex c, out int area)
		{
		}

		[Token(Token = "0x6001F19")]
		[Address(RVA = "0xD7E56C", Offset = "0xD7E56C", VA = "0xD7E56C")]
		public static bool operator ==(PolyVertex left, PolyVertex right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F1A")]
		[Address(RVA = "0xD87BF8", Offset = "0xD87BF8", VA = "0xD87BF8")]
		public static bool operator !=(PolyVertex left, PolyVertex right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F1B")]
		[Address(RVA = "0xD87BC4", Offset = "0xD87BC4", VA = "0xD87BC4", Slot = "4")]
		public bool Equals(PolyVertex other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F1C")]
		[Address(RVA = "0xD87C28", Offset = "0xD87C28", VA = "0xD87C28", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F1D")]
		[Address(RVA = "0xD7E6BC", Offset = "0xD7E6BC", VA = "0xD7E6BC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001F1E")]
		[Address(RVA = "0xD7E8A0", Offset = "0xD7E8A0", VA = "0xD7E8A0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200059E")]
	[Flags]
	public enum RegionFlags
	{
		[Token(Token = "0x4001DE7")]
		Border = 0x20000000,
		[Token(Token = "0x4001DE8")]
		VertexBorder = 0x40000000,
		[Token(Token = "0x4001DE9")]
		AreaBorder = int.MinValue
	}
	[Serializable]
	[Token(Token = "0x200059F")]
	public struct RegionId : IEquatable<RegionId>, IEquatable<int>
	{
		[Token(Token = "0x4001DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly RegionId Null;

		[Token(Token = "0x4001DEB")]
		public const int MaskId = 536870911;

		[Token(Token = "0x4001DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int bits;

		[Token(Token = "0x1700050F")]
		public int Id
		{
			[Token(Token = "0x6001F24")]
			[Address(RVA = "0xD87EC0", Offset = "0xD87EC0", VA = "0xD87EC0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000510")]
		public RegionFlags Flags
		{
			[Token(Token = "0x6001F25")]
			[Address(RVA = "0xD87ECC", Offset = "0xD87ECC", VA = "0xD87ECC")]
			get
			{
				return default(RegionFlags);
			}
		}

		[Token(Token = "0x17000511")]
		public bool IsNull
		{
			[Token(Token = "0x6001F26")]
			[Address(RVA = "0xD87ED8", Offset = "0xD87ED8", VA = "0xD87ED8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001F22")]
		[Address(RVA = "0xD87DDC", Offset = "0xD87DDC", VA = "0xD87DDC")]
		public RegionId(int id)
		{
		}

		[Token(Token = "0x6001F23")]
		[Address(RVA = "0xD87DE4", Offset = "0xD87DE4", VA = "0xD87DE4")]
		public RegionId(int id, RegionFlags flags)
		{
		}

		[Token(Token = "0x6001F27")]
		[Address(RVA = "0xD87EE8", Offset = "0xD87EE8", VA = "0xD87EE8")]
		public static RegionId FromRawBits(int bits)
		{
			return default(RegionId);
		}

		[Token(Token = "0x6001F28")]
		[Address(RVA = "0xD87EF0", Offset = "0xD87EF0", VA = "0xD87EF0")]
		public static RegionId WithFlags(RegionId region, RegionFlags flags)
		{
			return default(RegionId);
		}

		[Token(Token = "0x6001F29")]
		[Address(RVA = "0xD87FBC", Offset = "0xD87FBC", VA = "0xD87FBC")]
		public static RegionId WithoutFlags(RegionId region)
		{
			return default(RegionId);
		}

		[Token(Token = "0x6001F2A")]
		[Address(RVA = "0xD87FE0", Offset = "0xD87FE0", VA = "0xD87FE0")]
		public static RegionId WithoutFlags(RegionId region, RegionFlags flags)
		{
			return default(RegionId);
		}

		[Token(Token = "0x6001F2B")]
		[Address(RVA = "0xD80314", Offset = "0xD80314", VA = "0xD80314")]
		public static bool HasFlags(RegionId region, RegionFlags flags)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F2C")]
		[Address(RVA = "0xD880AC", Offset = "0xD880AC", VA = "0xD880AC")]
		public static bool operator ==(RegionId left, int right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F2D")]
		[Address(RVA = "0xD88120", Offset = "0xD88120", VA = "0xD88120")]
		public static bool operator !=(RegionId left, int right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F2E")]
		[Address(RVA = "0xD85160", Offset = "0xD85160", VA = "0xD85160")]
		public static bool operator ==(RegionId left, RegionId right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F2F")]
		[Address(RVA = "0xD85198", Offset = "0xD85198", VA = "0xD85198")]
		public static bool operator !=(RegionId left, RegionId right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F30")]
		[Address(RVA = "0xD881F0", Offset = "0xD881F0", VA = "0xD881F0")]
		public static explicit operator int(RegionId id)
		{
			return default(int);
		}

		[Token(Token = "0x6001F31")]
		[Address(RVA = "0xD881B4", Offset = "0xD881B4", VA = "0xD881B4", Slot = "4")]
		public bool Equals(RegionId other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F32")]
		[Address(RVA = "0xD880E4", Offset = "0xD880E4", VA = "0xD880E4", Slot = "5")]
		public bool Equals(int other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F33")]
		[Address(RVA = "0xD881F4", Offset = "0xD881F4", VA = "0xD881F4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F34")]
		[Address(RVA = "0xD883C0", Offset = "0xD883C0", VA = "0xD883C0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001F35")]
		[Address(RVA = "0xD883DC", Offset = "0xD883DC", VA = "0xD883DC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20005A0")]
	public class Region
	{
		[Token(Token = "0x4001DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int spanCount;

		[Token(Token = "0x4001DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private RegionId id;

		[Token(Token = "0x4001DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Area areaType;

		[Token(Token = "0x4001DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool remap;

		[Token(Token = "0x4001DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private bool visited;

		[Token(Token = "0x4001DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<RegionId> connections;

		[Token(Token = "0x4001DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<RegionId> floors;

		[Token(Token = "0x17000512")]
		public int SpanCount
		{
			[Token(Token = "0x6001F38")]
			[Address(RVA = "0xD88710", Offset = "0xD88710", VA = "0xD88710")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001F39")]
			[Address(RVA = "0xD88718", Offset = "0xD88718", VA = "0xD88718")]
			set
			{
			}
		}

		[Token(Token = "0x17000513")]
		public RegionId Id
		{
			[Token(Token = "0x6001F3A")]
			[Address(RVA = "0xD88720", Offset = "0xD88720", VA = "0xD88720")]
			get
			{
				return default(RegionId);
			}
			[Token(Token = "0x6001F3B")]
			[Address(RVA = "0xD88728", Offset = "0xD88728", VA = "0xD88728")]
			set
			{
			}
		}

		[Token(Token = "0x17000514")]
		public Area AreaType
		{
			[Token(Token = "0x6001F3C")]
			[Address(RVA = "0xD88730", Offset = "0xD88730", VA = "0xD88730")]
			get
			{
				return default(Area);
			}
			[Token(Token = "0x6001F3D")]
			[Address(RVA = "0xD88738", Offset = "0xD88738", VA = "0xD88738")]
			set
			{
			}
		}

		[Token(Token = "0x17000515")]
		public bool Remap
		{
			[Token(Token = "0x6001F3E")]
			[Address(RVA = "0xD88740", Offset = "0xD88740", VA = "0xD88740")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001F3F")]
			[Address(RVA = "0xD88748", Offset = "0xD88748", VA = "0xD88748")]
			set
			{
			}
		}

		[Token(Token = "0x17000516")]
		public bool Visited
		{
			[Token(Token = "0x6001F40")]
			[Address(RVA = "0xD88754", Offset = "0xD88754", VA = "0xD88754")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001F41")]
			[Address(RVA = "0xD8875C", Offset = "0xD8875C", VA = "0xD8875C")]
			set
			{
			}
		}

		[Token(Token = "0x17000517")]
		public List<RegionId> FloorRegions
		{
			[Token(Token = "0x6001F42")]
			[Address(RVA = "0xD88768", Offset = "0xD88768", VA = "0xD88768")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000518")]
		public List<RegionId> Connections
		{
			[Token(Token = "0x6001F43")]
			[Address(RVA = "0xD88770", Offset = "0xD88770", VA = "0xD88770")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000519")]
		public bool IsBorder
		{
			[Token(Token = "0x6001F44")]
			[Address(RVA = "0xD88778", Offset = "0xD88778", VA = "0xD88778")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700051A")]
		public bool IsBorderOrNull
		{
			[Token(Token = "0x6001F45")]
			[Address(RVA = "0xD887D0", Offset = "0xD887D0", VA = "0xD887D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001F37")]
		[Address(RVA = "0xD88610", Offset = "0xD88610", VA = "0xD88610")]
		public Region(int idNum)
		{
		}

		[Token(Token = "0x6001F46")]
		[Address(RVA = "0xD887E8", Offset = "0xD887E8", VA = "0xD887E8")]
		public void RemoveAdjacentNeighbours()
		{
		}

		[Token(Token = "0x6001F47")]
		[Address(RVA = "0xD88934", Offset = "0xD88934", VA = "0xD88934")]
		public void ReplaceNeighbour(RegionId oldId, RegionId newId)
		{
		}

		[Token(Token = "0x6001F48")]
		[Address(RVA = "0xD88B24", Offset = "0xD88B24", VA = "0xD88B24")]
		public bool CanMergeWith(Region otherRegion)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F49")]
		[Address(RVA = "0xD88CA8", Offset = "0xD88CA8", VA = "0xD88CA8")]
		public void AddUniqueFloorRegion(RegionId n)
		{
		}

		[Token(Token = "0x6001F4A")]
		[Address(RVA = "0xD88D80", Offset = "0xD88D80", VA = "0xD88D80")]
		public bool MergeWithRegion(Region otherRegion)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F4B")]
		[Address(RVA = "0xD8920C", Offset = "0xD8920C", VA = "0xD8920C")]
		public bool IsConnectedToBorder()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20005A1")]
	public struct Span
	{
		[Token(Token = "0x4001DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Minimum;

		[Token(Token = "0x4001DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Maximum;

		[Token(Token = "0x4001DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Area Area;

		[Token(Token = "0x1700051B")]
		public int Height
		{
			[Token(Token = "0x6001F4E")]
			[Address(RVA = "0xD89354", Offset = "0xD89354", VA = "0xD89354")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001F4C")]
		[Address(RVA = "0xD892D4", Offset = "0xD892D4", VA = "0xD892D4")]
		public Span(int min, int max)
		{
		}

		[Token(Token = "0x6001F4D")]
		[Address(RVA = "0xD89348", Offset = "0xD89348", VA = "0xD89348")]
		public Span(int min, int max, Area area)
		{
		}
	}
	[Token(Token = "0x20005A2")]
	public struct SpanReference
	{
		[Token(Token = "0x4001DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int x;

		[Token(Token = "0x4001DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private int y;

		[Token(Token = "0x4001DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int index;

		[Token(Token = "0x1700051C")]
		public int X
		{
			[Token(Token = "0x6001F50")]
			[Address(RVA = "0xD8936C", Offset = "0xD8936C", VA = "0xD8936C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700051D")]
		public int Y
		{
			[Token(Token = "0x6001F51")]
			[Address(RVA = "0xD89374", Offset = "0xD89374", VA = "0xD89374")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700051E")]
		public int Index
		{
			[Token(Token = "0x6001F52")]
			[Address(RVA = "0xD8937C", Offset = "0xD8937C", VA = "0xD8937C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001F4F")]
		[Address(RVA = "0xD89360", Offset = "0xD89360", VA = "0xD89360")]
		public SpanReference(int x, int y, int i)
		{
		}
	}
	[Token(Token = "0x20005A3")]
	public class TiledNavMesh
	{
		[Token(Token = "0x20005A4")]
		public struct TiledNavMeshParams
		{
			[Token(Token = "0x4001E08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SharpNav.Geometry.Vector3 Origin;

			[Token(Token = "0x4001E09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float TileWidth;

			[Token(Token = "0x4001E0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float TileHeight;

			[Token(Token = "0x4001E0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int MaxTiles;

			[Token(Token = "0x4001E0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int MaxPolys;
		}

		[Token(Token = "0x4001DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private TiledNavMeshParams parameters;

		[Token(Token = "0x4001DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private SharpNav.Geometry.Vector3 origin;

		[Token(Token = "0x4001DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float tileWidth;

		[Token(Token = "0x4001DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float tileHeight;

		[Token(Token = "0x4001DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int maxTiles;

		[Token(Token = "0x4001DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int tileLookupTableSize;

		[Token(Token = "0x4001E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int tileLookupTableMask;

		[Token(Token = "0x4001E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MeshTile[] posLookup;

		[Token(Token = "0x4001E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshTile nextFree;

		[Token(Token = "0x4001E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MeshTile[] tiles;

		[Token(Token = "0x4001E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int saltBits;

		[Token(Token = "0x4001E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int tileBits;

		[Token(Token = "0x4001E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int polyBits;

		[Token(Token = "0x1700051F")]
		public int TileCount
		{
			[Token(Token = "0x6001F54")]
			[Address(RVA = "0xD89BEC", Offset = "0xD89BEC", VA = "0xD89BEC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000520")]
		public MeshTile this[int index]
		{
			[Token(Token = "0x6001F55")]
			[Address(RVA = "0xD89BF4", Offset = "0xD89BF4", VA = "0xD89BF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000521")]
		public object Tag
		{
			[Token(Token = "0x6001F56")]
			[Address(RVA = "0xD89C24", Offset = "0xD89C24", VA = "0xD89C24")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F57")]
			[Address(RVA = "0xD89C2C", Offset = "0xD89C2C", VA = "0xD89C2C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001F53")]
		[Address(RVA = "0xD89384", Offset = "0xD89384", VA = "0xD89384")]
		public TiledNavMesh(NavMeshBuilder data)
		{
		}

		[Token(Token = "0x6001F58")]
		[Address(RVA = "0xD89430", Offset = "0xD89430", VA = "0xD89430")]
		public bool InitTileNavMesh(TiledNavMeshParams parameters)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F59")]
		[Address(RVA = "0xD896B0", Offset = "0xD896B0", VA = "0xD896B0")]
		public void AddTile(NavMeshBuilder data, int lastRef, ref int result)
		{
		}

		[Token(Token = "0x6001F5A")]
		[Address(RVA = "0xD89D24", Offset = "0xD89D24", VA = "0xD89D24")]
		public void ConnectIntLinks(ref MeshTile tile)
		{
		}

		[Token(Token = "0x6001F5B")]
		[Address(RVA = "0xD89EE4", Offset = "0xD89EE4", VA = "0xD89EE4")]
		public void BaseOffMeshLinks(ref MeshTile tile)
		{
		}

		[Token(Token = "0x6001F5C")]
		[Address(RVA = "0xD8A2E4", Offset = "0xD8A2E4", VA = "0xD8A2E4")]
		public void ConnectExtLinks(ref MeshTile tile, ref MeshTile target, BoundarySide side)
		{
		}

		[Token(Token = "0x6001F5D")]
		[Address(RVA = "0xD8A828", Offset = "0xD8A828", VA = "0xD8A828")]
		public void ConnectExtOffMeshLinks(ref MeshTile tile, ref MeshTile target, BoundarySide side)
		{
		}

		[Token(Token = "0x6001F5E")]
		[Address(RVA = "0xD8B44C", Offset = "0xD8B44C", VA = "0xD8B44C")]
		public bool GetOffMeshConnectionPolyEndPoints(int prevRef, int polyRef, ref SharpNav.Geometry.Vector3 startPos, ref SharpNav.Geometry.Vector3 endPos)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F5F")]
		[Address(RVA = "0xD8AFDC", Offset = "0xD8AFDC", VA = "0xD8AFDC")]
		public void FindConnectingPolys(SharpNav.Geometry.Vector3 va, SharpNav.Geometry.Vector3 vb, MeshTile tile, BoundarySide side, List<int> con, List<float> conarea)
		{
		}

		[Token(Token = "0x6001F60")]
		[Address(RVA = "0xD8B654", Offset = "0xD8B654", VA = "0xD8B654")]
		public void CalcSlabEndPoints(SharpNav.Geometry.Vector3 va, SharpNav.Geometry.Vector3 vb, SharpNav.Geometry.Vector2 bmin, SharpNav.Geometry.Vector2 bmax, BoundarySide side)
		{
		}

		[Token(Token = "0x6001F61")]
		[Address(RVA = "0xD8B658", Offset = "0xD8B658", VA = "0xD8B658")]
		public float GetSlabCoord(SharpNav.Geometry.Vector3 va, BoundarySide side)
		{
			return default(float);
		}

		[Token(Token = "0x6001F62")]
		[Address(RVA = "0xD8B68C", Offset = "0xD8B68C", VA = "0xD8B68C")]
		public bool OverlapSlabs(SharpNav.Geometry.Vector2 amin, SharpNav.Geometry.Vector2 amax, SharpNav.Geometry.Vector2 bmin, SharpNav.Geometry.Vector2 bmax, float px, float py)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F63")]
		[Address(RVA = "0xD8AD40", Offset = "0xD8AD40", VA = "0xD8AD40")]
		public int FindNearestPolyInTile(MeshTile tile, SharpNav.Geometry.Vector3 center, SharpNav.Geometry.Vector3 extents, ref SharpNav.Geometry.Vector3 nearestPt)
		{
			return default(int);
		}

		[Token(Token = "0x6001F64")]
		[Address(RVA = "0xD8B7D8", Offset = "0xD8B7D8", VA = "0xD8B7D8")]
		public int QueryPolygonsInTile(MeshTile tile, BBox3 qbounds, List<int> polys)
		{
			return default(int);
		}

		[Token(Token = "0x6001F65")]
		[Address(RVA = "0xD8ACE0", Offset = "0xD8ACE0", VA = "0xD8ACE0")]
		public int AllocLink(MeshTile tile)
		{
			return default(int);
		}

		[Token(Token = "0x6001F66")]
		[Address(RVA = "0xD8ABE8", Offset = "0xD8ABE8", VA = "0xD8ABE8")]
		public int GetTileRef(MeshTile tile)
		{
			return default(int);
		}

		[Token(Token = "0x6001F67")]
		[Address(RVA = "0xD89C3C", Offset = "0xD89C3C", VA = "0xD89C3C")]
		public MeshTile GetTileAt(int x, int y, int layer)
		{
			return null;
		}

		[Token(Token = "0x6001F68")]
		[Address(RVA = "0xD8A1F4", Offset = "0xD8A1F4", VA = "0xD8A1F4")]
		public int GetTilesAt(int x, int y, MeshTile[] tiles)
		{
			return default(int);
		}

		[Token(Token = "0x6001F69")]
		[Address(RVA = "0xD8AB84", Offset = "0xD8AB84", VA = "0xD8AB84")]
		public int GetNeighbourTilesAt(int x, int y, BoundarySide side, MeshTile[] tiles)
		{
			return default(int);
		}

		[Token(Token = "0x6001F6A")]
		[Address(RVA = "0xD89CFC", Offset = "0xD89CFC", VA = "0xD89CFC")]
		public int ComputeTileHash(int x, int y, int mask)
		{
			return default(int);
		}

		[Token(Token = "0x6001F6B")]
		[Address(RVA = "0xD8AD38", Offset = "0xD8AD38", VA = "0xD8AD38")]
		public int GetReference(int polyBase, int poly)
		{
			return default(int);
		}

		[Token(Token = "0x6001F6C")]
		[Address(RVA = "0xD8AD2C", Offset = "0xD8AD2C", VA = "0xD8AD2C")]
		public bool IsLinkAllocated(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F6D")]
		[Address(RVA = "0xD8ACD8", Offset = "0xD8ACD8", VA = "0xD8ACD8")]
		public bool IsExternalLink(int neighbor)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F6E")]
		[Address(RVA = "0xD8AC60", Offset = "0xD8AC60", VA = "0xD8AC60")]
		public int GetPolyRefBase(MeshTile tile)
		{
			return default(int);
		}

		[Token(Token = "0x6001F6F")]
		[Address(RVA = "0xD8BE44", Offset = "0xD8BE44", VA = "0xD8BE44")]
		public bool TryGetTileAndPolyByRef(int reference, out MeshTile tile, out Poly poly)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F70")]
		[Address(RVA = "0xD8BF34", Offset = "0xD8BF34", VA = "0xD8BF34")]
		public void TryGetTileAndPolyByRefUnsafe(int reference, out MeshTile tile, out Poly poly)
		{
		}

		[Token(Token = "0x6001F71")]
		[Address(RVA = "0xD8BFC8", Offset = "0xD8BFC8", VA = "0xD8BFC8")]
		public bool IsValidPolyRef(int reference)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F72")]
		[Address(RVA = "0xD8B610", Offset = "0xD8B610", VA = "0xD8B610")]
		public void DecodePolyId(int reference, ref int salt, ref int indexTile, ref int indexPoly)
		{
		}

		[Token(Token = "0x6001F73")]
		[Address(RVA = "0xD89CDC", Offset = "0xD89CDC", VA = "0xD89CDC")]
		public int DecodePolyIdSalt(int reference)
		{
			return default(int);
		}

		[Token(Token = "0x6001F74")]
		[Address(RVA = "0xD89CC4", Offset = "0xD89CC4", VA = "0xD89CC4")]
		public int DecodePolyIdTile(int reference)
		{
			return default(int);
		}

		[Token(Token = "0x6001F75")]
		[Address(RVA = "0xD8AFC8", Offset = "0xD8AFC8", VA = "0xD8AFC8")]
		public int DecodePolyIdPoly(int reference)
		{
			return default(int);
		}

		[Token(Token = "0x6001F76")]
		[Address(RVA = "0xD8BE28", Offset = "0xD8BE28", VA = "0xD8BE28")]
		public int EncodePolyId(int salt, int indexTile, int indexPoly)
		{
			return default(int);
		}

		[Token(Token = "0x6001F77")]
		[Address(RVA = "0xD8C064", Offset = "0xD8C064", VA = "0xD8C064")]
		public void CalcTileLoc(ref SharpNav.Geometry.Vector3 pos, out int tx, out int ty)
		{
		}
	}
}
namespace SharpNav.Pathfinding
{
	[Token(Token = "0x20005A5")]
	public enum BoundarySide : byte
	{
		[Token(Token = "0x4001E0E")]
		Internal = byte.MaxValue,
		[Token(Token = "0x4001E0F")]
		PlusX = 0,
		[Token(Token = "0x4001E10")]
		PlusXPlusZ = 1,
		[Token(Token = "0x4001E11")]
		PlusZ = 2,
		[Token(Token = "0x4001E12")]
		MinusXPlusZ = 3,
		[Token(Token = "0x4001E13")]
		MinusX = 4,
		[Token(Token = "0x4001E14")]
		MinusXMinusZ = 5,
		[Token(Token = "0x4001E15")]
		MinusZ = 6,
		[Token(Token = "0x4001E16")]
		PlusXMinusZ = 7
	}
	[Token(Token = "0x20005A6")]
	public static class BoundarySideExtensions
	{
		[Token(Token = "0x6001F78")]
		[Address(RVA = "0xD8AB6C", Offset = "0xD8AB6C", VA = "0xD8AB6C")]
		public static BoundarySide GetOpposite(this BoundarySide side)
		{
			return default(BoundarySide);
		}

		[Token(Token = "0x6001F79")]
		[Address(RVA = "0xD8C13C", Offset = "0xD8C13C", VA = "0xD8C13C")]
		public static BoundarySide FromPoint(SharpNav.Geometry.Vector3 pt, BBox3 bounds)
		{
			return default(BoundarySide);
		}
	}
	[Token(Token = "0x20005A7")]
	public class Link
	{
		[Token(Token = "0x4001E17")]
		public const int External = int.MinValue;

		[Token(Token = "0x4001E18")]
		public const int Null = -1;

		[Token(Token = "0x17000522")]
		public int Reference
		{
			[Token(Token = "0x6001F7A")]
			[Address(RVA = "0xD8C1DC", Offset = "0xD8C1DC", VA = "0xD8C1DC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001F7B")]
			[Address(RVA = "0xD8C1E4", Offset = "0xD8C1E4", VA = "0xD8C1E4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000523")]
		public int Next
		{
			[Token(Token = "0x6001F7C")]
			[Address(RVA = "0xD8C1EC", Offset = "0xD8C1EC", VA = "0xD8C1EC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001F7D")]
			[Address(RVA = "0xD8C1F4", Offset = "0xD8C1F4", VA = "0xD8C1F4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000524")]
		public int Edge
		{
			[Token(Token = "0x6001F7E")]
			[Address(RVA = "0xD8C1FC", Offset = "0xD8C1FC", VA = "0xD8C1FC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001F7F")]
			[Address(RVA = "0xD8C204", Offset = "0xD8C204", VA = "0xD8C204")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000525")]
		public BoundarySide Side
		{
			[Token(Token = "0x6001F80")]
			[Address(RVA = "0xD8C20C", Offset = "0xD8C20C", VA = "0xD8C20C")]
			[CompilerGenerated]
			get
			{
				return default(BoundarySide);
			}
			[Token(Token = "0x6001F81")]
			[Address(RVA = "0xD8C214", Offset = "0xD8C214", VA = "0xD8C214")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000526")]
		public int BMin
		{
			[Token(Token = "0x6001F82")]
			[Address(RVA = "0xD8C21C", Offset = "0xD8C21C", VA = "0xD8C21C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001F83")]
			[Address(RVA = "0xD8C224", Offset = "0xD8C224", VA = "0xD8C224")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000527")]
		public int BMax
		{
			[Token(Token = "0x6001F84")]
			[Address(RVA = "0xD8C22C", Offset = "0xD8C22C", VA = "0xD8C22C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001F85")]
			[Address(RVA = "0xD8C234", Offset = "0xD8C234", VA = "0xD8C234")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001F86")]
		[Address(RVA = "0xD89D1C", Offset = "0xD89D1C", VA = "0xD89D1C")]
		public Link()
		{
		}
	}
	[Token(Token = "0x20005A8")]
	public class MeshTile
	{
		[Token(Token = "0x17000528")]
		public int Salt
		{
			[Token(Token = "0x6001F87")]
			[Address(RVA = "0xD8C23C", Offset = "0xD8C23C", VA = "0xD8C23C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001F88")]
			[Address(RVA = "0xD8C244", Offset = "0xD8C244", VA = "0xD8C244")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000529")]
		public int LinksFreeList
		{
			[Token(Token = "0x6001F89")]
			[Address(RVA = "0xD8C24C", Offset = "0xD8C24C", VA = "0xD8C24C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001F8A")]
			[Address(RVA = "0xD8C254", Offset = "0xD8C254", VA = "0xD8C254")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700052A")]
		public PathfindingCommon.NavMeshInfo Header
		{
			[Token(Token = "0x6001F8B")]
			[Address(RVA = "0xD8C25C", Offset = "0xD8C25C", VA = "0xD8C25C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F8C")]
			[Address(RVA = "0xD8C264", Offset = "0xD8C264", VA = "0xD8C264")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700052B")]
		public Poly[] Polys
		{
			[Token(Token = "0x6001F8D")]
			[Address(RVA = "0xD8C26C", Offset = "0xD8C26C", VA = "0xD8C26C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F8E")]
			[Address(RVA = "0xD8C274", Offset = "0xD8C274", VA = "0xD8C274")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700052C")]
		public SharpNav.Geometry.Vector3[] Verts
		{
			[Token(Token = "0x6001F8F")]
			[Address(RVA = "0xD8C27C", Offset = "0xD8C27C", VA = "0xD8C27C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F90")]
			[Address(RVA = "0xD8C284", Offset = "0xD8C284", VA = "0xD8C284")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700052D")]
		public Link[] Links
		{
			[Token(Token = "0x6001F91")]
			[Address(RVA = "0xD8C28C", Offset = "0xD8C28C", VA = "0xD8C28C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F92")]
			[Address(RVA = "0xD8C294", Offset = "0xD8C294", VA = "0xD8C294")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700052E")]
		public PolyMeshDetail.MeshData[] DetailMeshes
		{
			[Token(Token = "0x6001F93")]
			[Address(RVA = "0xD8C29C", Offset = "0xD8C29C", VA = "0xD8C29C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F94")]
			[Address(RVA = "0xD8C2A4", Offset = "0xD8C2A4", VA = "0xD8C2A4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700052F")]
		public SharpNav.Geometry.Vector3[] DetailVerts
		{
			[Token(Token = "0x6001F95")]
			[Address(RVA = "0xD8C2AC", Offset = "0xD8C2AC", VA = "0xD8C2AC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F96")]
			[Address(RVA = "0xD8C2B4", Offset = "0xD8C2B4", VA = "0xD8C2B4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000530")]
		public PolyMeshDetail.TriangleData[] DetailTris
		{
			[Token(Token = "0x6001F97")]
			[Address(RVA = "0xD8C2BC", Offset = "0xD8C2BC", VA = "0xD8C2BC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F98")]
			[Address(RVA = "0xD8C2C4", Offset = "0xD8C2C4", VA = "0xD8C2C4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000531")]
		public OffMeshConnection[] OffMeshConnections
		{
			[Token(Token = "0x6001F99")]
			[Address(RVA = "0xD8C2CC", Offset = "0xD8C2CC", VA = "0xD8C2CC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F9A")]
			[Address(RVA = "0xD8C2D4", Offset = "0xD8C2D4", VA = "0xD8C2D4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000532")]
		public BVTree BVTree
		{
			[Token(Token = "0x6001F9B")]
			[Address(RVA = "0xD8C2DC", Offset = "0xD8C2DC", VA = "0xD8C2DC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F9C")]
			[Address(RVA = "0xD8C2E4", Offset = "0xD8C2E4", VA = "0xD8C2E4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000533")]
		public NavMeshBuilder Data
		{
			[Token(Token = "0x6001F9D")]
			[Address(RVA = "0xD8C2EC", Offset = "0xD8C2EC", VA = "0xD8C2EC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001F9E")]
			[Address(RVA = "0xD8C2F4", Offset = "0xD8C2F4", VA = "0xD8C2F4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000534")]
		public MeshTile Next
		{
			[Token(Token = "0x6001F9F")]
			[Address(RVA = "0xD8C2FC", Offset = "0xD8C2FC", VA = "0xD8C2FC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FA0")]
			[Address(RVA = "0xD8C304", Offset = "0xD8C304", VA = "0xD8C304")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001FA1")]
		[Address(RVA = "0xD8C30C", Offset = "0xD8C30C", VA = "0xD8C30C")]
		public void ClosestPointOnPoly(Poly poly, SharpNav.Geometry.Vector3 pos, ref SharpNav.Geometry.Vector3 closest)
		{
		}

		[Token(Token = "0x6001FA2")]
		[Address(RVA = "0xD8BD58", Offset = "0xD8BD58", VA = "0xD8BD58")]
		public void ClosestPointOnPoly(int indexPoly, SharpNav.Geometry.Vector3 pos, ref SharpNav.Geometry.Vector3 closest)
		{
		}

		[Token(Token = "0x6001FA3")]
		[Address(RVA = "0xD8C514", Offset = "0xD8C514", VA = "0xD8C514")]
		public void ClosestPointOnPolyBoundary(Poly poly, SharpNav.Geometry.Vector3 pos, out SharpNav.Geometry.Vector3 closest)
		{
		}

		[Token(Token = "0x6001FA4")]
		[Address(RVA = "0xD8C7AC", Offset = "0xD8C7AC", VA = "0xD8C7AC")]
		public bool ClosestHeight(int indexPoly, SharpNav.Geometry.Vector3 pos, out float h)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FA5")]
		[Address(RVA = "0xD8C364", Offset = "0xD8C364", VA = "0xD8C364")]
		public void ClosestPointOnPolyOffMeshConnection(Poly poly, SharpNav.Geometry.Vector3 pos, out SharpNav.Geometry.Vector3 closest)
		{
		}

		[Token(Token = "0x6001FA6")]
		[Address(RVA = "0xD89C34", Offset = "0xD89C34", VA = "0xD89C34")]
		public MeshTile()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005A9")]
	public struct NavPoint
	{
		[Token(Token = "0x4001E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly NavPoint Null;

		[Token(Token = "0x4001E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Polygon;

		[Token(Token = "0x4001E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SharpNav.Geometry.Vector3 Position;

		[Token(Token = "0x6001FA7")]
		[Address(RVA = "0xD8CA58", Offset = "0xD8CA58", VA = "0xD8CA58")]
		public NavPoint(int poly, SharpNav.Geometry.Vector3 pos)
		{
		}
	}
	[Token(Token = "0x20005AA")]
	[Flags]
	public enum OffMeshConnectionFlags : byte
	{
		[Token(Token = "0x4001E30")]
		None = 0,
		[Token(Token = "0x4001E31")]
		Bidirectional = 1
	}
	[Token(Token = "0x20005AB")]
	public class OffMeshConnection
	{
		[Token(Token = "0x17000535")]
		public SharpNav.Geometry.Vector3 Pos0
		{
			[Token(Token = "0x6001FA9")]
			[Address(RVA = "0xD8CAEC", Offset = "0xD8CAEC", VA = "0xD8CAEC")]
			[CompilerGenerated]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
			[Token(Token = "0x6001FAA")]
			[Address(RVA = "0xD8CAF8", Offset = "0xD8CAF8", VA = "0xD8CAF8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000536")]
		public SharpNav.Geometry.Vector3 Pos1
		{
			[Token(Token = "0x6001FAB")]
			[Address(RVA = "0xD8CB04", Offset = "0xD8CB04", VA = "0xD8CB04")]
			[CompilerGenerated]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
			[Token(Token = "0x6001FAC")]
			[Address(RVA = "0xD8CB10", Offset = "0xD8CB10", VA = "0xD8CB10")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000537")]
		public float Radius
		{
			[Token(Token = "0x6001FAD")]
			[Address(RVA = "0xD8CB1C", Offset = "0xD8CB1C", VA = "0xD8CB1C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001FAE")]
			[Address(RVA = "0xD8CB24", Offset = "0xD8CB24", VA = "0xD8CB24")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000538")]
		public int Poly
		{
			[Token(Token = "0x6001FAF")]
			[Address(RVA = "0xD8CB2C", Offset = "0xD8CB2C", VA = "0xD8CB2C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001FB0")]
			[Address(RVA = "0xD8CB34", Offset = "0xD8CB34", VA = "0xD8CB34")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000539")]
		public OffMeshConnectionFlags Flags
		{
			[Token(Token = "0x6001FB1")]
			[Address(RVA = "0xD8CB3C", Offset = "0xD8CB3C", VA = "0xD8CB3C")]
			[CompilerGenerated]
			get
			{
				return default(OffMeshConnectionFlags);
			}
			[Token(Token = "0x6001FB2")]
			[Address(RVA = "0xD8CB44", Offset = "0xD8CB44", VA = "0xD8CB44")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700053A")]
		public BoundarySide Side
		{
			[Token(Token = "0x6001FB3")]
			[Address(RVA = "0xD8CB4C", Offset = "0xD8CB4C", VA = "0xD8CB4C")]
			[CompilerGenerated]
			get
			{
				return default(BoundarySide);
			}
			[Token(Token = "0x6001FB4")]
			[Address(RVA = "0xD8CB54", Offset = "0xD8CB54", VA = "0xD8CB54")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700053B")]
		public object Tag
		{
			[Token(Token = "0x6001FB5")]
			[Address(RVA = "0xD8CB5C", Offset = "0xD8CB5C", VA = "0xD8CB5C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FB6")]
			[Address(RVA = "0xD8CB64", Offset = "0xD8CB64", VA = "0xD8CB64")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001FB7")]
		[Address(RVA = "0xD8CB6C", Offset = "0xD8CB6C", VA = "0xD8CB6C")]
		public OffMeshConnection()
		{
		}
	}
	[Token(Token = "0x20005AC")]
	[Flags]
	public enum PathBuildFlags
	{
		[Token(Token = "0x4001E3A")]
		None = 0,
		[Token(Token = "0x4001E3B")]
		AreaCrossingVertices = 1,
		[Token(Token = "0x4001E3C")]
		AllCrossingVertices = 2
	}
	[Token(Token = "0x20005AD")]
	public class PathfindingCommon
	{
		[Token(Token = "0x20005AE")]
		public class NavMeshInfo
		{
			[Token(Token = "0x4001E41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int X;

			[Token(Token = "0x4001E42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int Y;

			[Token(Token = "0x4001E43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int Layer;

			[Token(Token = "0x4001E44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int PolyCount;

			[Token(Token = "0x4001E45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int VertCount;

			[Token(Token = "0x4001E46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int MaxLinkCount;

			[Token(Token = "0x4001E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int DetailMeshCount;

			[Token(Token = "0x4001E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public int DetailVertCount;

			[Token(Token = "0x4001E49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int DetailTriCount;

			[Token(Token = "0x4001E4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int BvNodeCount;

			[Token(Token = "0x4001E4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int OffMeshConCount;

			[Token(Token = "0x4001E4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public int OffMeshBase;

			[Token(Token = "0x4001E4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float WalkableHeight;

			[Token(Token = "0x4001E4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float WalkableRadius;

			[Token(Token = "0x4001E4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float WalkableClimb;

			[Token(Token = "0x4001E50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public BBox3 Bounds;

			[Token(Token = "0x4001E51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public float BvQuantFactor;

			[Token(Token = "0x6001FBA")]
			[Address(RVA = "0xD8CEA4", Offset = "0xD8CEA4", VA = "0xD8CEA4")]
			public NavMeshInfo()
			{
			}
		}

		[Token(Token = "0x4001E3D")]
		public const int VERTS_PER_POLYGON = 6;

		[Token(Token = "0x4001E3E")]
		public const int STRAIGHTPATH_START = 1;

		[Token(Token = "0x4001E3F")]
		public const int STRAIGHTPATH_END = 2;

		[Token(Token = "0x4001E40")]
		public const int STRAIGHTPATH_OFFMESH_CONNECTION = 4;

		[Token(Token = "0x6001FB8")]
		[Address(RVA = "0xD8CB74", Offset = "0xD8CB74", VA = "0xD8CB74")]
		public static void RandomPointInConvexPoly(SharpNav.Geometry.Vector3[] pts, int npts, float[] areas, float s, float t, out SharpNav.Geometry.Vector3 pt)
		{
		}

		[Token(Token = "0x6001FB9")]
		[Address(RVA = "0xD8CE9C", Offset = "0xD8CE9C", VA = "0xD8CE9C")]
		public PathfindingCommon()
		{
		}
	}
	[Token(Token = "0x20005AF")]
	public class Poly
	{
		[Token(Token = "0x4001E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PolygonType polyType;

		[Token(Token = "0x1700053C")]
		public int FirstLink
		{
			[Token(Token = "0x6001FBB")]
			[Address(RVA = "0xD8CEAC", Offset = "0xD8CEAC", VA = "0xD8CEAC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001FBC")]
			[Address(RVA = "0xD8CEB4", Offset = "0xD8CEB4", VA = "0xD8CEB4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700053D")]
		public int[] Verts
		{
			[Token(Token = "0x6001FBD")]
			[Address(RVA = "0xD8CEBC", Offset = "0xD8CEBC", VA = "0xD8CEBC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FBE")]
			[Address(RVA = "0xD8CEC4", Offset = "0xD8CEC4", VA = "0xD8CEC4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700053E")]
		public int[] Neis
		{
			[Token(Token = "0x6001FBF")]
			[Address(RVA = "0xD8CECC", Offset = "0xD8CECC", VA = "0xD8CECC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001FC0")]
			[Address(RVA = "0xD8CED4", Offset = "0xD8CED4", VA = "0xD8CED4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700053F")]
		public int Flags
		{
			[Token(Token = "0x6001FC1")]
			[Address(RVA = "0xD8CEDC", Offset = "0xD8CEDC", VA = "0xD8CEDC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001FC2")]
			[Address(RVA = "0xD8CEE4", Offset = "0xD8CEE4", VA = "0xD8CEE4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000540")]
		public int VertCount
		{
			[Token(Token = "0x6001FC3")]
			[Address(RVA = "0xD8CEEC", Offset = "0xD8CEEC", VA = "0xD8CEEC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001FC4")]
			[Address(RVA = "0xD8CEF4", Offset = "0xD8CEF4", VA = "0xD8CEF4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000541")]
		public Area Area
		{
			[Token(Token = "0x6001FC5")]
			[Address(RVA = "0xD8CEFC", Offset = "0xD8CEFC", VA = "0xD8CEFC")]
			[CompilerGenerated]
			get
			{
				return default(Area);
			}
			[Token(Token = "0x6001FC6")]
			[Address(RVA = "0xD8CF04", Offset = "0xD8CF04", VA = "0xD8CF04")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000542")]
		public PolygonType PolyType
		{
			[Token(Token = "0x6001FC7")]
			[Address(RVA = "0xD8CF0C", Offset = "0xD8CF0C", VA = "0xD8CF0C")]
			get
			{
				return default(PolygonType);
			}
			[Token(Token = "0x6001FC8")]
			[Address(RVA = "0xD8CF14", Offset = "0xD8CF14", VA = "0xD8CF14")]
			set
			{
			}
		}

		[Token(Token = "0x6001FC9")]
		[Address(RVA = "0xD8CF1C", Offset = "0xD8CF1C", VA = "0xD8CF1C")]
		public Poly()
		{
		}
	}
	[Token(Token = "0x20005B0")]
	[Flags]
	public enum PolygonType : byte
	{
		[Token(Token = "0x4001E5A")]
		Ground = 0,
		[Token(Token = "0x4001E5B")]
		OffMeshConnection = 1
	}
}
namespace SharpNav.Geometry
{
	[Serializable]
	[Token(Token = "0x20005B1")]
	public struct BBox2i : IEquatable<BBox2i>
	{
		[Token(Token = "0x4001E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector2i Min;

		[Token(Token = "0x4001E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2i Max;

		[Token(Token = "0x6001FCA")]
		[Address(RVA = "0xD8CF24", Offset = "0xD8CF24", VA = "0xD8CF24")]
		public BBox2i(Vector2i min, Vector2i max)
		{
		}

		[Token(Token = "0x6001FCB")]
		[Address(RVA = "0xD8CF2C", Offset = "0xD8CF2C", VA = "0xD8CF2C")]
		public BBox2i(int minX, int minY, int maxX, int maxY)
		{
		}

		[Token(Token = "0x6001FCC")]
		[Address(RVA = "0xD8CF38", Offset = "0xD8CF38", VA = "0xD8CF38")]
		public static bool operator ==(BBox2i left, BBox2i right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FCD")]
		[Address(RVA = "0xD8D014", Offset = "0xD8D014", VA = "0xD8D014")]
		public static bool operator !=(BBox2i left, BBox2i right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FCE")]
		[Address(RVA = "0xD8D044", Offset = "0xD8D044", VA = "0xD8D044", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001FCF")]
		[Address(RVA = "0xD8D384", Offset = "0xD8D384", VA = "0xD8D384", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001FD0")]
		[Address(RVA = "0xD8D414", Offset = "0xD8D414", VA = "0xD8D414", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FD1")]
		[Address(RVA = "0xD8CF64", Offset = "0xD8CF64", VA = "0xD8CF64", Slot = "4")]
		public bool Equals(BBox2i other)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20005B2")]
	public struct BBox3 : IEquatable<BBox3>
	{
		[Token(Token = "0x4001E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 Min;

		[Token(Token = "0x4001E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 Max;

		[Token(Token = "0x17000543")]
		public Vector3 Center
		{
			[Token(Token = "0x6001FD4")]
			[Address(RVA = "0xD8D56C", Offset = "0xD8D56C", VA = "0xD8D56C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000544")]
		public Vector3 Size
		{
			[Token(Token = "0x6001FD5")]
			[Address(RVA = "0xD8D620", Offset = "0xD8D620", VA = "0xD8D620")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001FD2")]
		[Address(RVA = "0xD8D54C", Offset = "0xD8D54C", VA = "0xD8D54C")]
		public BBox3(Vector3 min, Vector3 max)
		{
		}

		[Token(Token = "0x6001FD3")]
		[Address(RVA = "0xD8D55C", Offset = "0xD8D55C", VA = "0xD8D55C")]
		public BBox3(float minX, float minY, float minZ, float maxX, float maxY, float maxZ)
		{
		}

		[Token(Token = "0x6001FD6")]
		[Address(RVA = "0xD8D6AC", Offset = "0xD8D6AC", VA = "0xD8D6AC")]
		public static bool Overlapping(ref BBox3 a, ref BBox3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FD7")]
		[Address(RVA = "0xD8D718", Offset = "0xD8D718", VA = "0xD8D718")]
		public static bool IsValid(ref BBox3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FD8")]
		[Address(RVA = "0xD8D8F0", Offset = "0xD8D8F0", VA = "0xD8D8F0")]
		public static bool operator ==(BBox3 left, BBox3 right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FD9")]
		[Address(RVA = "0xD8DA04", Offset = "0xD8DA04", VA = "0xD8DA04")]
		public static bool operator !=(BBox3 left, BBox3 right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FDA")]
		[Address(RVA = "0xD8D920", Offset = "0xD8D920", VA = "0xD8D920", Slot = "4")]
		public bool Equals(BBox3 other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FDB")]
		[Address(RVA = "0xD8DA6C", Offset = "0xD8DA6C", VA = "0xD8DA6C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FDC")]
		[Address(RVA = "0xD8DAFC", Offset = "0xD8DAFC", VA = "0xD8DAFC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001FDD")]
		[Address(RVA = "0xD8DB70", Offset = "0xD8DB70", VA = "0xD8DB70", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20005B3")]
	internal static class Containment
	{
		[Token(Token = "0x6001FDE")]
		[Address(RVA = "0xD8DED0", Offset = "0xD8DED0", VA = "0xD8DED0")]
		internal static bool PointInPoly(Vector3 pt, Vector3[] verts, int nverts)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20005B4")]
	internal static class Distance
	{
		[Token(Token = "0x6001FDF")]
		[Address(RVA = "0xD8DF98", Offset = "0xD8DF98", VA = "0xD8DF98")]
		internal static float PointToSegmentSquared(ref Vector3 pt, ref Vector3 p, ref Vector3 q)
		{
			return default(float);
		}

		[Token(Token = "0x6001FE0")]
		[Address(RVA = "0xD8E100", Offset = "0xD8E100", VA = "0xD8E100")]
		internal static float PointToSegment2DSquared(int x, int z, int px, int pz, int qx, int qz)
		{
			return default(float);
		}

		[Token(Token = "0x6001FE1")]
		[Address(RVA = "0xD8E19C", Offset = "0xD8E19C", VA = "0xD8E19C")]
		internal static float PointToSegment2DSquared(ref Vector3 pt, ref Vector3 p, ref Vector3 q)
		{
			return default(float);
		}

		[Token(Token = "0x6001FE2")]
		[Address(RVA = "0xD8E1B4", Offset = "0xD8E1B4", VA = "0xD8E1B4")]
		internal static float PointToSegment2DSquared(ref Vector3 pt, ref Vector3 p, ref Vector3 q, out float t)
		{
			return default(float);
		}

		[Token(Token = "0x6001FE3")]
		[Address(RVA = "0xD8E25C", Offset = "0xD8E25C", VA = "0xD8E25C")]
		internal static float PointToPolygonSquared(Vector3 point, Vector3[] verts, int vertCount)
		{
			return default(float);
		}

		[Token(Token = "0x6001FE4")]
		[Address(RVA = "0xD8E40C", Offset = "0xD8E40C", VA = "0xD8E40C")]
		internal static float PointToPolygonEdgeSquared(Vector3 pt, Vector3[] verts, int nverts)
		{
			return default(float);
		}

		[Token(Token = "0x6001FE5")]
		[Address(RVA = "0xD8E560", Offset = "0xD8E560", VA = "0xD8E560")]
		internal static bool PointToPolygonEdgeSquared(Vector3 pt, Vector3[] verts, int nverts, float[] edgeDist, float[] edgeT)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FE6")]
		[Address(RVA = "0xD8E674", Offset = "0xD8E674", VA = "0xD8E674")]
		internal static float PointToTriangle(Vector3 p, Vector3 a, Vector3 b, Vector3 c)
		{
			return default(float);
		}

		[Token(Token = "0x6001FE7")]
		[Address(RVA = "0xD8E764", Offset = "0xD8E764", VA = "0xD8E764")]
		internal static bool PointToTriangle(Vector3 p, Vector3 a, Vector3 b, Vector3 c, out float height)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20005B5")]
	internal static class Intersection
	{
		[Token(Token = "0x6001FE8")]
		[Address(RVA = "0xD8E910", Offset = "0xD8E910", VA = "0xD8E910")]
		internal static bool SegmentSegment2D(ref Vector3 a, ref Vector3 b, ref Vector3 c, ref Vector3 d)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FE9")]
		[Address(RVA = "0xD8E9E8", Offset = "0xD8E9E8", VA = "0xD8E9E8")]
		internal static bool SegmentSegment2D(ref Vector3 a, ref Vector3 b, ref Vector3 c, ref Vector3 d, out float s, out float t)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FEA")]
		[Address(RVA = "0xD8EB8C", Offset = "0xD8EB8C", VA = "0xD8EB8C")]
		internal static bool PolyPoly2D(Vector3[] polya, int npolya, Vector3[] polyb, int npolyb)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FEB")]
		[Address(RVA = "0xD8EF24", Offset = "0xD8EF24", VA = "0xD8EF24")]
		internal static bool SegmentPoly2D(Vector3 p0, Vector3 p1, Vector3[] verts, int nverts, out float tmin, out float tmax, out int segMin, out int segMax)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FEC")]
		[Address(RVA = "0xD8EDC4", Offset = "0xD8EDC4", VA = "0xD8EDC4")]
		internal static void ProjectPoly(Vector3 axis, Vector3[] poly, int npoly, out float rmin, out float rmax)
		{
		}

		[Token(Token = "0x6001FED")]
		[Address(RVA = "0xD8EF04", Offset = "0xD8EF04", VA = "0xD8EF04")]
		internal static bool OverlapRange(float amin, float amax, float bmin, float bmax, float eps)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20005B6")]
	public struct Triangle3 : IEquatable<Triangle3>
	{
		[Token(Token = "0x4001E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 A;

		[Token(Token = "0x4001E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 B;

		[Token(Token = "0x4001E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 C;

		[Token(Token = "0x17000545")]
		public Vector3 AB
		{
			[Token(Token = "0x6001FEF")]
			[Address(RVA = "0xD8F190", Offset = "0xD8F190", VA = "0xD8F190")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000546")]
		public Vector3 AC
		{
			[Token(Token = "0x6001FF0")]
			[Address(RVA = "0xD8F220", Offset = "0xD8F220", VA = "0xD8F220")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000547")]
		public Vector3 BA
		{
			[Token(Token = "0x6001FF1")]
			[Address(RVA = "0xD8F28C", Offset = "0xD8F28C", VA = "0xD8F28C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000548")]
		public Vector3 BC
		{
			[Token(Token = "0x6001FF2")]
			[Address(RVA = "0xD8F2F8", Offset = "0xD8F2F8", VA = "0xD8F2F8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000549")]
		public Vector3 CA
		{
			[Token(Token = "0x6001FF3")]
			[Address(RVA = "0xD8F364", Offset = "0xD8F364", VA = "0xD8F364")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700054A")]
		public Vector3 CB
		{
			[Token(Token = "0x6001FF4")]
			[Address(RVA = "0xD8F3D0", Offset = "0xD8F3D0", VA = "0xD8F3D0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700054B")]
		public float Area
		{
			[Token(Token = "0x6001FF5")]
			[Address(RVA = "0xD8F43C", Offset = "0xD8F43C", VA = "0xD8F43C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700054C")]
		public float Perimeter
		{
			[Token(Token = "0x6001FF6")]
			[Address(RVA = "0xD8F630", Offset = "0xD8F630", VA = "0xD8F630")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700054D")]
		public Vector3 Centroid
		{
			[Token(Token = "0x6001FF7")]
			[Address(RVA = "0xD8F6A4", Offset = "0xD8F6A4", VA = "0xD8F6A4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700054E")]
		public Vector3 Normal
		{
			[Token(Token = "0x6001FF8")]
			[Address(RVA = "0xD8F764", Offset = "0xD8F764", VA = "0xD8F764")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001FEE")]
		[Address(RVA = "0xD8F170", Offset = "0xD8F170", VA = "0xD8F170")]
		public Triangle3(Vector3 a, Vector3 b, Vector3 c)
		{
		}

		[Token(Token = "0x6001FF9")]
		[Address(RVA = "0xD8F89C", Offset = "0xD8F89C", VA = "0xD8F89C")]
		public static bool operator ==(Triangle3 left, Triangle3 right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FFA")]
		[Address(RVA = "0xD8F968", Offset = "0xD8F968", VA = "0xD8F968")]
		public static bool operator !=(Triangle3 left, Triangle3 right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FFB")]
		[Address(RVA = "0xD8F99C", Offset = "0xD8F99C", VA = "0xD8F99C")]
		public static BBox3 GetBoundingBox(Triangle3 tri)
		{
			return default(BBox3);
		}

		[Token(Token = "0x6001FFC")]
		[Address(RVA = "0xD8F9DC", Offset = "0xD8F9DC", VA = "0xD8F9DC")]
		public static void GetBoundingBox(ref Triangle3 tri, out BBox3 bbox)
		{
		}

		[Token(Token = "0x6001FFD")]
		[Address(RVA = "0xD8F9F0", Offset = "0xD8F9F0", VA = "0xD8F9F0")]
		public static void GetBoundingBox(ref Vector3 a, ref Vector3 b, ref Vector3 c, out BBox3 bbox)
		{
		}

		[Token(Token = "0x6001FFE")]
		[Address(RVA = "0xD8FA6C", Offset = "0xD8FA6C", VA = "0xD8FA6C")]
		public static void Area2D(ref Vector3 a, ref Vector3 b, ref Vector3 c, out float area)
		{
		}

		[Token(Token = "0x6001FFF")]
		[Address(RVA = "0xD8FAA8", Offset = "0xD8FAA8", VA = "0xD8FAA8")]
		public static float Area2D(Vector3 a, Vector3 b, Vector3 c)
		{
			return default(float);
		}

		[Token(Token = "0x6002000")]
		[Address(RVA = "0xD8F8CC", Offset = "0xD8F8CC", VA = "0xD8F8CC", Slot = "4")]
		public bool Equals(Triangle3 other)
		{
			return default(bool);
		}

		[Token(Token = "0x6002001")]
		[Address(RVA = "0xD8FB00", Offset = "0xD8FB00", VA = "0xD8FB00", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002002")]
		[Address(RVA = "0xD8FBF8", Offset = "0xD8FBF8", VA = "0xD8FBF8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6002003")]
		[Address(RVA = "0xD8FC44", Offset = "0xD8FC44", VA = "0xD8FC44", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20005B7")]
	public static class TriangleEnumerable
	{
		[Token(Token = "0x20005B8")]
		[CompilerGenerated]
		private sealed class <FromTriangle>d__0 : IEnumerable<Triangle3>, IEnumerable, IEnumerator<Triangle3>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Triangle3 <>2__current;

			[Token(Token = "0x4001E65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001E66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Triangle3[] triangles;

			[Token(Token = "0x4001E67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Triangle3[] <>3__triangles;

			[Token(Token = "0x4001E68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private int triOffset;

			[Token(Token = "0x4001E69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public int <>3__triOffset;

			[Token(Token = "0x4001E6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private int triCount;

			[Token(Token = "0x4001E6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public int <>3__triCount;

			[Token(Token = "0x4001E6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int <i>5__2;

			[Token(Token = "0x1700054F")]
			private Triangle3 System.Collections.Generic.IEnumerator<SharpNav.Geometry.Triangle3>.Current
			{
				[Token(Token = "0x6002011")]
				[Address(RVA = "0xD90B64", Offset = "0xD90B64", VA = "0xD90B64", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Triangle3);
				}
			}

			[Token(Token = "0x17000550")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002013")]
				[Address(RVA = "0xD90BBC", Offset = "0xD90BBC", VA = "0xD90BBC", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600200E")]
			[Address(RVA = "0xD8FED0", Offset = "0xD8FED0", VA = "0xD8FED0")]
			[DebuggerHidden]
			public <FromTriangle>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x600200F")]
			[Address(RVA = "0xD90AC0", Offset = "0xD90AC0", VA = "0xD90AC0", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002010")]
			[Address(RVA = "0xD90AC4", Offset = "0xD90AC4", VA = "0xD90AC4", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002012")]
			[Address(RVA = "0xD90B7C", Offset = "0xD90B7C", VA = "0xD90B7C", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002014")]
			[Address(RVA = "0xD90C24", Offset = "0xD90C24", VA = "0xD90C24", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Triangle3> System.Collections.Generic.IEnumerable<SharpNav.Geometry.Triangle3>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002015")]
			[Address(RVA = "0xD90CD8", Offset = "0xD90CD8", VA = "0xD90CD8", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20005B9")]
		[CompilerGenerated]
		private sealed class <FromVector3>d__1 : IEnumerable<Triangle3>, IEnumerable, IEnumerator<Triangle3>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Triangle3 <>2__current;

			[Token(Token = "0x4001E6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001E70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int vertStride;

			[Token(Token = "0x4001E71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int <>3__vertStride;

			[Token(Token = "0x4001E72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3[] vertices;

			[Token(Token = "0x4001E73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3[] <>3__vertices;

			[Token(Token = "0x4001E74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private int vertOffset;

			[Token(Token = "0x4001E75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public int <>3__vertOffset;

			[Token(Token = "0x4001E76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int triCount;

			[Token(Token = "0x4001E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public int <>3__triCount;

			[Token(Token = "0x4001E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private int <i>5__2;

			[Token(Token = "0x17000551")]
			private Triangle3 System.Collections.Generic.IEnumerator<SharpNav.Geometry.Triangle3>.Current
			{
				[Token(Token = "0x6002019")]
				[Address(RVA = "0xD90DE8", Offset = "0xD90DE8", VA = "0xD90DE8", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Triangle3);
				}
			}

			[Token(Token = "0x17000552")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600201B")]
				[Address(RVA = "0xD90E40", Offset = "0xD90E40", VA = "0xD90E40", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002016")]
			[Address(RVA = "0xD8FFA4", Offset = "0xD8FFA4", VA = "0xD8FFA4")]
			[DebuggerHidden]
			public <FromVector3>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6002017")]
			[Address(RVA = "0xD90CDC", Offset = "0xD90CDC", VA = "0xD90CDC", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002018")]
			[Address(RVA = "0xD90CE0", Offset = "0xD90CE0", VA = "0xD90CE0", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600201A")]
			[Address(RVA = "0xD90E00", Offset = "0xD90E00", VA = "0xD90E00", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600201C")]
			[Address(RVA = "0xD90EA8", Offset = "0xD90EA8", VA = "0xD90EA8", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Triangle3> System.Collections.Generic.IEnumerable<SharpNav.Geometry.Triangle3>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600201D")]
			[Address(RVA = "0xD90F64", Offset = "0xD90F64", VA = "0xD90F64", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20005BA")]
		[CompilerGenerated]
		private sealed class <FromFloat>d__2 : IEnumerable<Triangle3>, IEnumerable, IEnumerator<Triangle3>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Triangle3 <>2__current;

			[Token(Token = "0x4001E7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001E7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int floatStride;

			[Token(Token = "0x4001E7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int <>3__floatStride;

			[Token(Token = "0x4001E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private int floatOffset;

			[Token(Token = "0x4001E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public int <>3__floatOffset;

			[Token(Token = "0x4001E80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float[] vertices;

			[Token(Token = "0x4001E81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float[] <>3__vertices;

			[Token(Token = "0x4001E82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int triCount;

			[Token(Token = "0x4001E83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public int <>3__triCount;

			[Token(Token = "0x4001E84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private int <i>5__2;

			[Token(Token = "0x17000553")]
			private Triangle3 System.Collections.Generic.IEnumerator<SharpNav.Geometry.Triangle3>.Current
			{
				[Token(Token = "0x6002021")]
				[Address(RVA = "0xD910C4", Offset = "0xD910C4", VA = "0xD910C4", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Triangle3);
				}
			}

			[Token(Token = "0x17000554")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002023")]
				[Address(RVA = "0xD9111C", Offset = "0xD9111C", VA = "0xD9111C", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600201E")]
			[Address(RVA = "0xD90078", Offset = "0xD90078", VA = "0xD90078")]
			[DebuggerHidden]
			public <FromFloat>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x600201F")]
			[Address(RVA = "0xD90F68", Offset = "0xD90F68", VA = "0xD90F68", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002020")]
			[Address(RVA = "0xD90F6C", Offset = "0xD90F6C", VA = "0xD90F6C", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002022")]
			[Address(RVA = "0xD910DC", Offset = "0xD910DC", VA = "0xD910DC", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002024")]
			[Address(RVA = "0xD91184", Offset = "0xD91184", VA = "0xD91184", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Triangle3> System.Collections.Generic.IEnumerable<SharpNav.Geometry.Triangle3>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002025")]
			[Address(RVA = "0xD91240", Offset = "0xD91240", VA = "0xD91240", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20005BB")]
		[CompilerGenerated]
		private sealed class <FromIndexedVector3>d__3 : IEnumerable<Triangle3>, IEnumerable, IEnumerator<Triangle3>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Triangle3 <>2__current;

			[Token(Token = "0x4001E87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001E88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int vertOffset;

			[Token(Token = "0x4001E89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int <>3__vertOffset;

			[Token(Token = "0x4001E8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int[] indices;

			[Token(Token = "0x4001E8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public int[] <>3__indices;

			[Token(Token = "0x4001E8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private int indexOffset;

			[Token(Token = "0x4001E8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public int <>3__indexOffset;

			[Token(Token = "0x4001E8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int vertStride;

			[Token(Token = "0x4001E8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public int <>3__vertStride;

			[Token(Token = "0x4001E90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Vector3[] vertices;

			[Token(Token = "0x4001E91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Vector3[] <>3__vertices;

			[Token(Token = "0x4001E92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private int triCount;

			[Token(Token = "0x4001E93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public int <>3__triCount;

			[Token(Token = "0x4001E94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private int <i>5__2;

			[Token(Token = "0x17000555")]
			private Triangle3 System.Collections.Generic.IEnumerator<SharpNav.Geometry.Triangle3>.Current
			{
				[Token(Token = "0x6002029")]
				[Address(RVA = "0xD91390", Offset = "0xD91390", VA = "0xD91390", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Triangle3);
				}
			}

			[Token(Token = "0x17000556")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600202B")]
				[Address(RVA = "0xD913E8", Offset = "0xD913E8", VA = "0xD913E8", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002026")]
			[Address(RVA = "0xD90164", Offset = "0xD90164", VA = "0xD90164")]
			[DebuggerHidden]
			public <FromIndexedVector3>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6002027")]
			[Address(RVA = "0xD91244", Offset = "0xD91244", VA = "0xD91244", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002028")]
			[Address(RVA = "0xD91248", Offset = "0xD91248", VA = "0xD91248", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600202A")]
			[Address(RVA = "0xD913A8", Offset = "0xD913A8", VA = "0xD913A8", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600202C")]
			[Address(RVA = "0xD91450", Offset = "0xD91450", VA = "0xD91450", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Triangle3> System.Collections.Generic.IEnumerable<SharpNav.Geometry.Triangle3>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600202D")]
			[Address(RVA = "0xD9151C", Offset = "0xD9151C", VA = "0xD9151C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x20005BC")]
		[CompilerGenerated]
		private sealed class <FromIndexedFloat>d__4 : IEnumerable<Triangle3>, IEnumerable, IEnumerator<Triangle3>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private Triangle3 <>2__current;

			[Token(Token = "0x4001E97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4001E98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int floatOffset;

			[Token(Token = "0x4001E99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int <>3__floatOffset;

			[Token(Token = "0x4001E9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int[] indices;

			[Token(Token = "0x4001E9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public int[] <>3__indices;

			[Token(Token = "0x4001E9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private int indexOffset;

			[Token(Token = "0x4001E9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public int <>3__indexOffset;

			[Token(Token = "0x4001E9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private int floatStride;

			[Token(Token = "0x4001E9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public int <>3__floatStride;

			[Token(Token = "0x4001EA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private float[] vertices;

			[Token(Token = "0x4001EA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public float[] <>3__vertices;

			[Token(Token = "0x4001EA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private int triCount;

			[Token(Token = "0x4001EA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public int <>3__triCount;

			[Token(Token = "0x4001EA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			private int <i>5__2;

			[Token(Token = "0x17000557")]
			private Triangle3 System.Collections.Generic.IEnumerator<SharpNav.Geometry.Triangle3>.Current
			{
				[Token(Token = "0x6002031")]
				[Address(RVA = "0xD916B0", Offset = "0xD916B0", VA = "0xD916B0", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return default(Triangle3);
				}
			}

			[Token(Token = "0x17000558")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002033")]
				[Address(RVA = "0xD91708", Offset = "0xD91708", VA = "0xD91708", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600202E")]
			[Address(RVA = "0xD90250", Offset = "0xD90250", VA = "0xD90250")]
			[DebuggerHidden]
			public <FromIndexedFloat>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x600202F")]
			[Address(RVA = "0xD91520", Offset = "0xD91520", VA = "0xD91520", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002030")]
			[Address(RVA = "0xD91524", Offset = "0xD91524", VA = "0xD91524", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002032")]
			[Address(RVA = "0xD916C8", Offset = "0xD916C8", VA = "0xD916C8", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6002034")]
			[Address(RVA = "0xD91770", Offset = "0xD91770", VA = "0xD91770", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Triangle3> System.Collections.Generic.IEnumerable<SharpNav.Geometry.Triangle3>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002035")]
			[Address(RVA = "0xD9183C", Offset = "0xD9183C", VA = "0xD9183C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x6002004")]
		[Address(RVA = "0xD8FE40", Offset = "0xD8FE40", VA = "0xD8FE40")]
		[IteratorStateMachine(typeof(<FromTriangle>d__0))]
		public static IEnumerable<Triangle3> FromTriangle(Triangle3[] triangles, int triOffset, int triCount)
		{
			return null;
		}

		[Token(Token = "0x6002005")]
		[Address(RVA = "0xD8FF04", Offset = "0xD8FF04", VA = "0xD8FF04")]
		[IteratorStateMachine(typeof(<FromVector3>d__1))]
		public static IEnumerable<Triangle3> FromVector3(Vector3[] vertices, int vertOffset, int vertStride, int triCount)
		{
			return null;
		}

		[Token(Token = "0x6002006")]
		[Address(RVA = "0xD8FFD8", Offset = "0xD8FFD8", VA = "0xD8FFD8")]
		[IteratorStateMachine(typeof(<FromFloat>d__2))]
		public static IEnumerable<Triangle3> FromFloat(float[] vertices, int floatOffset, int floatStride, int triCount)
		{
			return null;
		}

		[Token(Token = "0x6002007")]
		[Address(RVA = "0xD900AC", Offset = "0xD900AC", VA = "0xD900AC")]
		[IteratorStateMachine(typeof(<FromIndexedVector3>d__3))]
		public static IEnumerable<Triangle3> FromIndexedVector3(Vector3[] vertices, int[] indices, int vertOffset, int vertStride, int indexOffset, int triCount)
		{
			return null;
		}

		[Token(Token = "0x6002008")]
		[Address(RVA = "0xD90198", Offset = "0xD90198", VA = "0xD90198")]
		[IteratorStateMachine(typeof(<FromIndexedFloat>d__4))]
		public static IEnumerable<Triangle3> FromIndexedFloat(float[] vertices, int[] indices, int floatOffset, int floatStride, int indexOffset, int triCount)
		{
			return null;
		}

		[Token(Token = "0x6002009")]
		[Address(RVA = "0xD90284", Offset = "0xD90284", VA = "0xD90284")]
		public static BBox3 GetBoundingBox(this IEnumerable<Triangle3> tris)
		{
			return default(BBox3);
		}

		[Token(Token = "0x600200A")]
		[Address(RVA = "0xD902BC", Offset = "0xD902BC", VA = "0xD902BC")]
		public static BBox3 GetBoundingBox(this IEnumerable<Triangle3> tris, float padding)
		{
			return default(BBox3);
		}

		[Token(Token = "0x600200B")]
		[Address(RVA = "0xD90754", Offset = "0xD90754", VA = "0xD90754")]
		public static BBox3 GetBoundingBox(this IEnumerable<Vector3> vecs)
		{
			return default(BBox3);
		}

		[Token(Token = "0x600200C")]
		[Address(RVA = "0xD906AC", Offset = "0xD906AC", VA = "0xD906AC")]
		private static void ApplyVertexToBounds(ref Vector3 v, ref BBox3 b)
		{
		}

		[Token(Token = "0x600200D")]
		[Address(RVA = "0xD90728", Offset = "0xD90728", VA = "0xD90728")]
		private static void ApplyPaddingToBounds(float pad, ref BBox3 b)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20005BD")]
	public struct Vector2 : IEquatable<Vector2>
	{
		[Token(Token = "0x4001EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string listSeparator;

		[Token(Token = "0x4001EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float X;

		[Token(Token = "0x4001EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Y;

		[Token(Token = "0x4001EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Vector2 UnitX;

		[Token(Token = "0x4001EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Vector2 UnitY;

		[Token(Token = "0x4001EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly Vector2 Zero;

		[Token(Token = "0x4001EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly Vector2 One;

		[Token(Token = "0x17000559")]
		public float Length
		{
			[Token(Token = "0x600203A")]
			[Address(RVA = "0xD91860", Offset = "0xD91860", VA = "0xD91860")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700055A")]
		public float LengthSquared
		{
			[Token(Token = "0x600203B")]
			[Address(RVA = "0xD918CC", Offset = "0xD918CC", VA = "0xD918CC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700055B")]
		public Vector2 PerpendicularRight
		{
			[Token(Token = "0x600203C")]
			[Address(RVA = "0xD918E0", Offset = "0xD918E0", VA = "0xD918E0")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x1700055C")]
		public Vector2 PerpendicularLeft
		{
			[Token(Token = "0x600203D")]
			[Address(RVA = "0xD918EC", Offset = "0xD918EC", VA = "0xD918EC")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x1700055D")]
		public float this[int index]
		{
			[Token(Token = "0x600203E")]
			[Address(RVA = "0xD918F8", Offset = "0xD918F8", VA = "0xD918F8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600203F")]
			[Address(RVA = "0xD91990", Offset = "0xD91990", VA = "0xD91990")]
			set
			{
			}
		}

		[Token(Token = "0x1700055E")]
		public Vector2 Yx
		{
			[Token(Token = "0x6002060")]
			[Address(RVA = "0xD9224C", Offset = "0xD9224C", VA = "0xD9224C")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6002061")]
			[Address(RVA = "0xD92254", Offset = "0xD92254", VA = "0xD92254")]
			set
			{
			}
		}

		[Token(Token = "0x6002036")]
		[Address(RVA = "0xD91840", Offset = "0xD91840", VA = "0xD91840")]
		public Vector2(float value)
		{
		}

		[Token(Token = "0x6002037")]
		[Address(RVA = "0xD91848", Offset = "0xD91848", VA = "0xD91848")]
		public Vector2(float x, float y)
		{
		}

		[Token(Token = "0x6002038")]
		[Address(RVA = "0xD91850", Offset = "0xD91850", VA = "0xD91850")]
		[Obsolete]
		public Vector2(Vector2 v)
		{
		}

		[Token(Token = "0x6002039")]
		[Address(RVA = "0xD91858", Offset = "0xD91858", VA = "0xD91858")]
		[Obsolete]
		public Vector2(Vector3 v)
		{
		}

		[Token(Token = "0x6002040")]
		[Address(RVA = "0xD91A28", Offset = "0xD91A28", VA = "0xD91A28")]
		public Vector2 Normalized()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002041")]
		[Address(RVA = "0xD91A68", Offset = "0xD91A68", VA = "0xD91A68")]
		public void Normalize()
		{
		}

		[Token(Token = "0x6002042")]
		[Address(RVA = "0xD91A90", Offset = "0xD91A90", VA = "0xD91A90")]
		public static Vector2 Add(Vector2 a, Vector2 b)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002043")]
		[Address(RVA = "0xD91B04", Offset = "0xD91B04", VA = "0xD91B04")]
		public static void Add(ref Vector2 a, ref Vector2 b, out Vector2 result)
		{
		}

		[Token(Token = "0x6002044")]
		[Address(RVA = "0xD91B18", Offset = "0xD91B18", VA = "0xD91B18")]
		public static Vector2 Subtract(Vector2 a, Vector2 b)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002045")]
		[Address(RVA = "0xD91B8C", Offset = "0xD91B8C", VA = "0xD91B8C")]
		public static void Subtract(ref Vector2 a, ref Vector2 b, out Vector2 result)
		{
		}

		[Token(Token = "0x6002046")]
		[Address(RVA = "0xD91BA0", Offset = "0xD91BA0", VA = "0xD91BA0")]
		public static Vector2 Multiply(Vector2 vector, float scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002047")]
		[Address(RVA = "0xD91C10", Offset = "0xD91C10", VA = "0xD91C10")]
		public static void Multiply(ref Vector2 vector, float scale, out Vector2 result)
		{
		}

		[Token(Token = "0x6002048")]
		[Address(RVA = "0xD91C20", Offset = "0xD91C20", VA = "0xD91C20")]
		public static Vector2 Multiply(Vector2 vector, Vector2 scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002049")]
		[Address(RVA = "0xD91C94", Offset = "0xD91C94", VA = "0xD91C94")]
		public static void Multiply(ref Vector2 vector, ref Vector2 scale, out Vector2 result)
		{
		}

		[Token(Token = "0x600204A")]
		[Address(RVA = "0xD91CA8", Offset = "0xD91CA8", VA = "0xD91CA8")]
		public static Vector2 Divide(Vector2 vector, float scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600204B")]
		[Address(RVA = "0xD91D20", Offset = "0xD91D20", VA = "0xD91D20")]
		public static void Divide(ref Vector2 vector, float scale, out Vector2 result)
		{
		}

		[Token(Token = "0x600204C")]
		[Address(RVA = "0xD91D9C", Offset = "0xD91D9C", VA = "0xD91D9C")]
		public static Vector2 Divide(Vector2 vector, Vector2 scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600204D")]
		[Address(RVA = "0xD91E10", Offset = "0xD91E10", VA = "0xD91E10")]
		public static void Divide(ref Vector2 vector, ref Vector2 scale, out Vector2 result)
		{
		}

		[Token(Token = "0x600204E")]
		[Address(RVA = "0xD91E24", Offset = "0xD91E24", VA = "0xD91E24")]
		public static Vector2 ComponentMin(Vector2 a, Vector2 b)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600204F")]
		[Address(RVA = "0xD91E38", Offset = "0xD91E38", VA = "0xD91E38")]
		public static void ComponentMin(ref Vector2 a, ref Vector2 b, out Vector2 result)
		{
		}

		[Token(Token = "0x6002050")]
		[Address(RVA = "0xD91E64", Offset = "0xD91E64", VA = "0xD91E64")]
		public static Vector2 ComponentMax(Vector2 a, Vector2 b)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002051")]
		[Address(RVA = "0xD91E78", Offset = "0xD91E78", VA = "0xD91E78")]
		public static void ComponentMax(ref Vector2 a, ref Vector2 b, out Vector2 result)
		{
		}

		[Token(Token = "0x6002052")]
		[Address(RVA = "0xD91EA4", Offset = "0xD91EA4", VA = "0xD91EA4")]
		public static Vector2 Min(Vector2 left, Vector2 right)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002053")]
		[Address(RVA = "0xD91ECC", Offset = "0xD91ECC", VA = "0xD91ECC")]
		public static Vector2 Max(Vector2 left, Vector2 right)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002054")]
		[Address(RVA = "0xD91EF4", Offset = "0xD91EF4", VA = "0xD91EF4")]
		public static Vector2 Clamp(Vector2 vec, Vector2 min, Vector2 max)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002055")]
		[Address(RVA = "0xD91F30", Offset = "0xD91F30", VA = "0xD91F30")]
		public static void Clamp(ref Vector2 vec, ref Vector2 min, ref Vector2 max, out Vector2 result)
		{
		}

		[Token(Token = "0x6002056")]
		[Address(RVA = "0xD91F94", Offset = "0xD91F94", VA = "0xD91F94")]
		public static Vector2 Normalize(Vector2 vec)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002057")]
		[Address(RVA = "0xD91FCC", Offset = "0xD91FCC", VA = "0xD91FCC")]
		public static void Normalize(ref Vector2 vec, out Vector2 result)
		{
		}

		[Token(Token = "0x6002058")]
		[Address(RVA = "0xD92000", Offset = "0xD92000", VA = "0xD92000")]
		public static float Dot(Vector2 left, Vector2 right)
		{
			return default(float);
		}

		[Token(Token = "0x6002059")]
		[Address(RVA = "0xD92010", Offset = "0xD92010", VA = "0xD92010")]
		public static void Dot(ref Vector2 left, ref Vector2 right, out float result)
		{
		}

		[Token(Token = "0x600205A")]
		[Address(RVA = "0xD9202C", Offset = "0xD9202C", VA = "0xD9202C")]
		public static float PerpDot(Vector2 left, Vector2 right)
		{
			return default(float);
		}

		[Token(Token = "0x600205B")]
		[Address(RVA = "0xD9203C", Offset = "0xD9203C", VA = "0xD9203C")]
		public static void PerpDot(ref Vector2 left, ref Vector2 right, out float result)
		{
		}

		[Token(Token = "0x600205C")]
		[Address(RVA = "0xD92058", Offset = "0xD92058", VA = "0xD92058")]
		public static Vector2 Lerp(Vector2 a, Vector2 b, float blend)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600205D")]
		[Address(RVA = "0xD92074", Offset = "0xD92074", VA = "0xD92074")]
		public static void Lerp(ref Vector2 a, ref Vector2 b, float blend, out Vector2 result)
		{
		}

		[Token(Token = "0x600205E")]
		[Address(RVA = "0xD92090", Offset = "0xD92090", VA = "0xD92090")]
		public static Vector2 BaryCentric(Vector2 a, Vector2 b, Vector2 c, float u, float v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600205F")]
		[Address(RVA = "0xD92174", Offset = "0xD92174", VA = "0xD92174")]
		public static void BaryCentric(ref Vector2 a, ref Vector2 b, ref Vector2 c, float u, float v, out Vector2 result)
		{
		}

		[Token(Token = "0x6002062")]
		[Address(RVA = "0xD92168", Offset = "0xD92168", VA = "0xD92168")]
		public static Vector2 operator +(Vector2 left, Vector2 right)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002063")]
		[Address(RVA = "0xD9214C", Offset = "0xD9214C", VA = "0xD9214C")]
		public static Vector2 operator -(Vector2 left, Vector2 right)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002064")]
		[Address(RVA = "0xD9225C", Offset = "0xD9225C", VA = "0xD9225C")]
		public static Vector2 operator -(Vector2 vec)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002065")]
		[Address(RVA = "0xD92268", Offset = "0xD92268", VA = "0xD92268")]
		public static Vector2 operator *(Vector2 vec, float scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002066")]
		[Address(RVA = "0xD92158", Offset = "0xD92158", VA = "0xD92158")]
		public static Vector2 operator *(float scale, Vector2 vec)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002067")]
		[Address(RVA = "0xD92274", Offset = "0xD92274", VA = "0xD92274")]
		public static Vector2 operator *(Vector2 vec, Vector2 scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002068")]
		[Address(RVA = "0xD92280", Offset = "0xD92280", VA = "0xD92280")]
		public static Vector2 operator /(Vector2 vec, float scale)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6002069")]
		[Address(RVA = "0xD92294", Offset = "0xD92294", VA = "0xD92294")]
		public static bool operator ==(Vector2 left, Vector2 right)
		{
			return default(bool);
		}

		[Token(Token = "0x600206A")]
		[Address(RVA = "0xD922D0", Offset = "0xD922D0", VA = "0xD922D0")]
		public static bool operator !=(Vector2 left, Vector2 right)
		{
			return default(bool);
		}

		[Token(Token = "0x600206B")]
		[Address(RVA = "0xD922E8", Offset = "0xD922E8", VA = "0xD922E8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600206C")]
		[Address(RVA = "0xD923C4", Offset = "0xD923C4", VA = "0xD923C4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600206D")]
		[Address(RVA = "0xD923F8", Offset = "0xD923F8", VA = "0xD923F8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600206E")]
		[Address(RVA = "0xD922AC", Offset = "0xD922AC", VA = "0xD922AC", Slot = "4")]
		public bool Equals(Vector2 other)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20005BE")]
	public struct Vector2i : IEquatable<Vector2i>
	{
		[Token(Token = "0x4001EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector2i Min;

		[Token(Token = "0x4001EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Vector2i Max;

		[Token(Token = "0x4001EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Vector2i Zero;

		[Token(Token = "0x4001EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int X;

		[Token(Token = "0x4001EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Y;

		[Token(Token = "0x6002070")]
		[Address(RVA = "0xD92550", Offset = "0xD92550", VA = "0xD92550")]
		public Vector2i(int x, int y)
		{
		}

		[Token(Token = "0x6002071")]
		[Address(RVA = "0xD8D52C", Offset = "0xD8D52C", VA = "0xD8D52C")]
		public static bool operator ==(Vector2i left, Vector2i right)
		{
			return default(bool);
		}

		[Token(Token = "0x6002072")]
		[Address(RVA = "0xD92580", Offset = "0xD92580", VA = "0xD92580")]
		public static bool operator !=(Vector2i left, Vector2i right)
		{
			return default(bool);
		}

		[Token(Token = "0x6002073")]
		[Address(RVA = "0xD8D3B0", Offset = "0xD8D3B0", VA = "0xD8D3B0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6002074")]
		[Address(RVA = "0xD8D1E0", Offset = "0xD8D1E0", VA = "0xD8D1E0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002075")]
		[Address(RVA = "0xD925F8", Offset = "0xD925F8", VA = "0xD925F8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002076")]
		[Address(RVA = "0xD92558", Offset = "0xD92558", VA = "0xD92558", Slot = "4")]
		public bool Equals(Vector2i other)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20005BF")]
	public struct Vector3 : IEquatable<Vector3>
	{
		[Token(Token = "0x4001EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float X;

		[Token(Token = "0x4001EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Y;

		[Token(Token = "0x4001EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float Z;

		[Token(Token = "0x4001EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector3 UnitX;

		[Token(Token = "0x4001EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly Vector3 UnitY;

		[Token(Token = "0x4001EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly Vector3 UnitZ;

		[Token(Token = "0x4001EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static readonly Vector3 Zero;

		[Token(Token = "0x4001EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly Vector3 One;

		[Token(Token = "0x4001EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static string listSeparator;

		[Token(Token = "0x1700055F")]
		public float this[int index]
		{
			[Token(Token = "0x600207C")]
			[Address(RVA = "0xD92798", Offset = "0xD92798", VA = "0xD92798")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600207D")]
			[Address(RVA = "0xD92840", Offset = "0xD92840", VA = "0xD92840")]
			set
			{
			}
		}

		[Token(Token = "0x17000560")]
		public Vector3 Xzy
		{
			[Token(Token = "0x60020B1")]
			[Address(RVA = "0xD9368C", Offset = "0xD9368C", VA = "0xD9368C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60020B2")]
			[Address(RVA = "0xD93698", Offset = "0xD93698", VA = "0xD93698")]
			set
			{
			}
		}

		[Token(Token = "0x17000561")]
		public Vector3 Yxz
		{
			[Token(Token = "0x60020B3")]
			[Address(RVA = "0xD936A4", Offset = "0xD936A4", VA = "0xD936A4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60020B4")]
			[Address(RVA = "0xD936B0", Offset = "0xD936B0", VA = "0xD936B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000562")]
		public Vector3 Yzx
		{
			[Token(Token = "0x60020B5")]
			[Address(RVA = "0xD936BC", Offset = "0xD936BC", VA = "0xD936BC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60020B6")]
			[Address(RVA = "0xD936C8", Offset = "0xD936C8", VA = "0xD936C8")]
			set
			{
			}
		}

		[Token(Token = "0x17000563")]
		public Vector3 Zxy
		{
			[Token(Token = "0x60020B7")]
			[Address(RVA = "0xD936D4", Offset = "0xD936D4", VA = "0xD936D4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60020B8")]
			[Address(RVA = "0xD936E0", Offset = "0xD936E0", VA = "0xD936E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000564")]
		public Vector3 Zyx
		{
			[Token(Token = "0x60020B9")]
			[Address(RVA = "0xD936EC", Offset = "0xD936EC", VA = "0xD936EC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60020BA")]
			[Address(RVA = "0xD936F8", Offset = "0xD936F8", VA = "0xD936F8")]
			set
			{
			}
		}

		[Token(Token = "0x6002078")]
		[Address(RVA = "0xD92774", Offset = "0xD92774", VA = "0xD92774")]
		public Vector3(float value)
		{
		}

		[Token(Token = "0x6002079")]
		[Address(RVA = "0xD8EDB8", Offset = "0xD8EDB8", VA = "0xD8EDB8")]
		public Vector3(float x, float y, float z)
		{
		}

		[Token(Token = "0x600207A")]
		[Address(RVA = "0xD92780", Offset = "0xD92780", VA = "0xD92780")]
		public Vector3(Vector3 v)
		{
		}

		[Token(Token = "0x600207B")]
		[Address(RVA = "0xD9278C", Offset = "0xD9278C", VA = "0xD9278C")]
		public void Set(float x, float y, float z)
		{
		}

		[Token(Token = "0x600207E")]
		[Address(RVA = "0xD928E8", Offset = "0xD928E8", VA = "0xD928E8")]
		[Obsolete("Use static Add() method instead.")]
		public void Add(Vector3 right)
		{
		}

		[Token(Token = "0x600207F")]
		[Address(RVA = "0xD92908", Offset = "0xD92908", VA = "0xD92908")]
		[Obsolete("Use static Add() method instead.")]
		public void Add(ref Vector3 right)
		{
		}

		[Token(Token = "0x6002080")]
		[Address(RVA = "0xD9292C", Offset = "0xD9292C", VA = "0xD9292C")]
		[Obsolete("Use static Subtract() method instead.")]
		public void Sub(Vector3 right)
		{
		}

		[Token(Token = "0x6002081")]
		[Address(RVA = "0xD9294C", Offset = "0xD9294C", VA = "0xD9294C")]
		[Obsolete("Use static Subtract() method instead.")]
		public void Sub(ref Vector3 right)
		{
		}

		[Token(Token = "0x6002082")]
		[Address(RVA = "0xD92970", Offset = "0xD92970", VA = "0xD92970")]
		[Obsolete("Use static Multiply() method instead.")]
		public void Mult(float f)
		{
		}

		[Token(Token = "0x6002083")]
		[Address(RVA = "0xD9298C", Offset = "0xD9298C", VA = "0xD9298C")]
		[Obsolete("Use static Divide() method instead.")]
		public void Div(float f)
		{
		}

		[Token(Token = "0x6002084")]
		[Address(RVA = "0xD8F5B0", Offset = "0xD8F5B0", VA = "0xD8F5B0")]
		public float Length()
		{
			return default(float);
		}

		[Token(Token = "0x6002085")]
		[Address(RVA = "0xD8E0E0", Offset = "0xD8E0E0", VA = "0xD8E0E0")]
		public float LengthSquared()
		{
			return default(float);
		}

		[Token(Token = "0x6002086")]
		[Address(RVA = "0xD929B0", Offset = "0xD929B0", VA = "0xD929B0")]
		public Vector3 Normalized()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002087")]
		[Address(RVA = "0xD929F8", Offset = "0xD929F8", VA = "0xD929F8")]
		public void Normalize()
		{
		}

		[Token(Token = "0x6002088")]
		[Address(RVA = "0xD92A2C", Offset = "0xD92A2C", VA = "0xD92A2C")]
		[Obsolete("Use static Multiply() method instead.")]
		public void Scale(float sx, float sy, float sz)
		{
		}

		[Token(Token = "0x6002089")]
		[Address(RVA = "0xD92A4C", Offset = "0xD92A4C", VA = "0xD92A4C")]
		[Obsolete("Use static Multiply() method instead.")]
		public void Scale(Vector3 scale)
		{
		}

		[Token(Token = "0x600208A")]
		[Address(RVA = "0xD92A6C", Offset = "0xD92A6C", VA = "0xD92A6C")]
		[Obsolete("Use static Multiply() method instead.")]
		public void Scale(ref Vector3 scale)
		{
		}

		[Token(Token = "0x600208B")]
		[Address(RVA = "0xD92A90", Offset = "0xD92A90", VA = "0xD92A90")]
		[Obsolete("Use static Subtract() method instead.")]
		public static Vector3 Sub(Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600208C")]
		[Address(RVA = "0xD92AA0", Offset = "0xD92AA0", VA = "0xD92AA0")]
		[Obsolete("Use static Subtract() method instead.")]
		public static void Sub(ref Vector3 a, ref Vector3 b, out Vector3 result)
		{
		}

		[Token(Token = "0x600208D")]
		[Address(RVA = "0xD92AC4", Offset = "0xD92AC4", VA = "0xD92AC4")]
		[Obsolete("Use static Multiply() method instead.")]
		public static Vector3 Mult(Vector3 a, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600208E")]
		[Address(RVA = "0xD92AD4", Offset = "0xD92AD4", VA = "0xD92AD4")]
		[Obsolete("Use static Multiply() method instead.")]
		public static void Mult(ref Vector3 a, float f, out Vector3 result)
		{
		}

		[Token(Token = "0x600208F")]
		[Address(RVA = "0xD92AF0", Offset = "0xD92AF0", VA = "0xD92AF0")]
		[Obsolete("Use static Divide() method instead.")]
		public static Vector3 Div(Vector3 a, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002090")]
		[Address(RVA = "0xD92B08", Offset = "0xD92B08", VA = "0xD92B08")]
		[Obsolete("Use static Divide() method instead.")]
		public static void Div(ref Vector3 a, float f, out Vector3 result)
		{
		}

		[Token(Token = "0x6002091")]
		[Address(RVA = "0xD92B2C", Offset = "0xD92B2C", VA = "0xD92B2C")]
		public static Vector3 Add(Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002092")]
		[Address(RVA = "0xD92BB4", Offset = "0xD92BB4", VA = "0xD92BB4")]
		public static void Add(ref Vector3 a, ref Vector3 b, out Vector3 result)
		{
		}

		[Token(Token = "0x6002093")]
		[Address(RVA = "0xD92BD8", Offset = "0xD92BD8", VA = "0xD92BD8")]
		public static Vector3 Subtract(Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002094")]
		[Address(RVA = "0xD8F1FC", Offset = "0xD8F1FC", VA = "0xD8F1FC")]
		public static void Subtract(ref Vector3 a, ref Vector3 b, out Vector3 result)
		{
		}

		[Token(Token = "0x6002095")]
		[Address(RVA = "0xD92C60", Offset = "0xD92C60", VA = "0xD92C60")]
		public static Vector3 Multiply(Vector3 vector, float scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002096")]
		[Address(RVA = "0xD92CD8", Offset = "0xD92CD8", VA = "0xD92CD8")]
		public static void Multiply(ref Vector3 vector, float scale, out Vector3 result)
		{
		}

		[Token(Token = "0x6002097")]
		[Address(RVA = "0xD92CF4", Offset = "0xD92CF4", VA = "0xD92CF4")]
		public static Vector3 Multiply(Vector3 vector, Vector3 scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6002098")]
		[Address(RVA = "0xD92D7C", Offset = "0xD92D7C", VA = "0xD92D7C")]
		public static void Multiply(ref Vector3 vector, ref Vector3 scale, out Vector3 result)
		{
		}

		[Token(Token = "0x6002099")]
		[Address(RVA = "0xD92DA0", Offset = "0xD92DA0", VA = "0xD92DA0")]
		public static Vector3 Divide(Vector3 vector, float scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600209A")]
		[Address(RVA = "0xD92E20", Offset = "0xD92E20", VA = "0xD92E20")]
		public static void Divide(ref Vector3 vector, float scale, out Vector3 result)
		{
		}

		[Token(Token = "0x600209B")]
		[Address(RVA = "0xD92EA8", Offset = "0xD92EA8", VA = "0xD92EA8")]
		public static Vector3 Divide(Vector3 vector, Vector3 scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600209C")]
		[Address(RVA = "0xD92F30", Offset = "0xD92F30", VA = "0xD92F30")]
		public static void Divide(ref Vector3 vector, ref Vector3 scale, out Vector3 result)
		{
		}

		[Token(Token = "0x600209D")]
		[Address(RVA = "0xD92F54", Offset = "0xD92F54", VA = "0xD92F54")]
		public static Vector3 ComponentMin(Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600209E")]
		[Address(RVA = "0xD92F70", Offset = "0xD92F70", VA = "0xD92F70")]
		public static void ComponentMin(ref Vector3 a, ref Vector3 b, out Vector3 result)
		{
		}

		[Token(Token = "0x600209F")]
		[Address(RVA = "0xD92FB0", Offset = "0xD92FB0", VA = "0xD92FB0")]
		public static Vector3 ComponentMax(Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020A0")]
		[Address(RVA = "0xD92FCC", Offset = "0xD92FCC", VA = "0xD92FCC")]
		public static void ComponentMax(ref Vector3 a, ref Vector3 b, out Vector3 result)
		{
		}

		[Token(Token = "0x60020A1")]
		[Address(RVA = "0xD9300C", Offset = "0xD9300C", VA = "0xD9300C")]
		public static Vector3 Min(Vector3 left, Vector3 right)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020A2")]
		[Address(RVA = "0xD93048", Offset = "0xD93048", VA = "0xD93048")]
		public static Vector3 Max(Vector3 left, Vector3 right)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020A3")]
		[Address(RVA = "0xD93084", Offset = "0xD93084", VA = "0xD93084")]
		public static Vector3 Clamp(Vector3 vec, Vector3 min, Vector3 max)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020A4")]
		[Address(RVA = "0xD930DC", Offset = "0xD930DC", VA = "0xD930DC")]
		public static void Clamp(ref Vector3 vec, ref Vector3 min, ref Vector3 max, out Vector3 result)
		{
		}

		[Token(Token = "0x60020A5")]
		[Address(RVA = "0xD8F848", Offset = "0xD8F848", VA = "0xD8F848")]
		public static Vector3 Normalize(Vector3 vec)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020A6")]
		[Address(RVA = "0xD93174", Offset = "0xD93174", VA = "0xD93174")]
		public static void Normalize(ref Vector3 vec, out Vector3 result)
		{
		}

		[Token(Token = "0x60020A7")]
		[Address(RVA = "0xD931B4", Offset = "0xD931B4", VA = "0xD931B4")]
		public static float Dot(Vector3 left, Vector3 right)
		{
			return default(float);
		}

		[Token(Token = "0x60020A8")]
		[Address(RVA = "0xD931CC", Offset = "0xD931CC", VA = "0xD931CC")]
		public static void Dot(ref Vector3 left, ref Vector3 right, out float result)
		{
		}

		[Token(Token = "0x60020A9")]
		[Address(RVA = "0xD8F510", Offset = "0xD8F510", VA = "0xD8F510")]
		public static Vector3 Cross(Vector3 left, Vector3 right)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020AA")]
		[Address(RVA = "0xD931F8", Offset = "0xD931F8", VA = "0xD931F8")]
		public static void Cross(ref Vector3 left, ref Vector3 right, out Vector3 result)
		{
		}

		[Token(Token = "0x60020AB")]
		[Address(RVA = "0xD93238", Offset = "0xD93238", VA = "0xD93238")]
		public static Vector3 Lerp(Vector3 a, Vector3 b, float blend)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020AC")]
		[Address(RVA = "0xD93260", Offset = "0xD93260", VA = "0xD93260")]
		public static void Lerp(ref Vector3 a, ref Vector3 b, float blend, out Vector3 result)
		{
		}

		[Token(Token = "0x60020AD")]
		[Address(RVA = "0xD93294", Offset = "0xD93294", VA = "0xD93294")]
		public static Vector3 BaryCentric(Vector3 a, Vector3 b, Vector3 c, float u, float v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020AE")]
		[Address(RVA = "0xD933A8", Offset = "0xD933A8", VA = "0xD933A8")]
		public static void BaryCentric(ref Vector3 a, ref Vector3 b, ref Vector3 c, float u, float v, out Vector3 result)
		{
		}

		[Token(Token = "0x60020AF")]
		[Address(RVA = "0xD934AC", Offset = "0xD934AC", VA = "0xD934AC")]
		public static float CalculateAngle(Vector3 first, Vector3 second)
		{
			return default(float);
		}

		[Token(Token = "0x60020B0")]
		[Address(RVA = "0xD935A4", Offset = "0xD935A4", VA = "0xD935A4")]
		public static void CalculateAngle(ref Vector3 first, ref Vector3 second, out float result)
		{
		}

		[Token(Token = "0x60020BB")]
		[Address(RVA = "0xD8D5F8", Offset = "0xD8D5F8", VA = "0xD8D5F8")]
		public static Vector3 operator +(Vector3 left, Vector3 right)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020BC")]
		[Address(RVA = "0xD8D69C", Offset = "0xD8D69C", VA = "0xD8D69C")]
		public static Vector3 operator -(Vector3 left, Vector3 right)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020BD")]
		[Address(RVA = "0xD93704", Offset = "0xD93704", VA = "0xD93704")]
		public static Vector3 operator -(Vector3 vec)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020BE")]
		[Address(RVA = "0xD8F754", Offset = "0xD8F754", VA = "0xD8F754")]
		public static Vector3 operator *(Vector3 vec, float scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020BF")]
		[Address(RVA = "0xD93394", Offset = "0xD93394", VA = "0xD93394")]
		public static Vector3 operator *(float scale, Vector3 vec)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020C0")]
		[Address(RVA = "0xD93714", Offset = "0xD93714", VA = "0xD93714")]
		public static Vector3 operator *(Vector3 vec, Vector3 scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020C1")]
		[Address(RVA = "0xD8D608", Offset = "0xD8D608", VA = "0xD8D608")]
		public static Vector3 operator /(Vector3 vec, float scale)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60020C2")]
		[Address(RVA = "0xD8DA4C", Offset = "0xD8DA4C", VA = "0xD8DA4C")]
		public static bool operator ==(Vector3 left, Vector3 right)
		{
			return default(bool);
		}

		[Token(Token = "0x60020C3")]
		[Address(RVA = "0xD93724", Offset = "0xD93724", VA = "0xD93724")]
		public static bool operator !=(Vector3 left, Vector3 right)
		{
			return default(bool);
		}

		[Token(Token = "0x60020C4")]
		[Address(RVA = "0xD8DD0C", Offset = "0xD8DD0C", VA = "0xD8DD0C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60020C5")]
		[Address(RVA = "0xD8DB28", Offset = "0xD8DB28", VA = "0xD8DB28", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60020C6")]
		[Address(RVA = "0xD93744", Offset = "0xD93744", VA = "0xD93744", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60020C7")]
		[Address(RVA = "0xD8FAD0", Offset = "0xD8FAD0", VA = "0xD8FAD0", Slot = "4")]
		public bool Equals(Vector3 other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20005C0")]
	internal static class Vector3Extensions
	{
		[Token(Token = "0x60020C9")]
		[Address(RVA = "0xD938D4", Offset = "0xD938D4", VA = "0xD938D4")]
		internal static void ComponentMin(ref Vector3 left, ref Vector3 right, out Vector3 result)
		{
		}

		[Token(Token = "0x60020CA")]
		[Address(RVA = "0xD9399C", Offset = "0xD9399C", VA = "0xD9399C")]
		internal static void ComponentMax(ref Vector3 left, ref Vector3 right, out Vector3 result)
		{
		}

		[Token(Token = "0x60020CB")]
		[Address(RVA = "0xD93A64", Offset = "0xD93A64", VA = "0xD93A64")]
		internal static float Distance2D(Vector3 a, Vector3 b)
		{
			return default(float);
		}

		[Token(Token = "0x60020CC")]
		[Address(RVA = "0xD93AA0", Offset = "0xD93AA0", VA = "0xD93AA0")]
		internal static void Distance2D(ref Vector3 a, ref Vector3 b, out float dist)
		{
		}

		[Token(Token = "0x60020CD")]
		[Address(RVA = "0xD8E8EC", Offset = "0xD8E8EC", VA = "0xD8E8EC")]
		internal static void Dot2D(ref Vector3 left, ref Vector3 right, out float result)
		{
		}

		[Token(Token = "0x60020CE")]
		[Address(RVA = "0xD93B34", Offset = "0xD93B34", VA = "0xD93B34")]
		internal static float Dot2D(ref Vector3 left, ref Vector3 right)
		{
			return default(float);
		}

		[Token(Token = "0x60020CF")]
		[Address(RVA = "0xD93B54", Offset = "0xD93B54", VA = "0xD93B54")]
		internal static float Cross2D(Vector3 p1, Vector3 p2, Vector3 p3)
		{
			return default(float);
		}

		[Token(Token = "0x60020D0")]
		[Address(RVA = "0xD8E9AC", Offset = "0xD8E9AC", VA = "0xD8E9AC")]
		internal static void Cross2D(ref Vector3 p1, ref Vector3 p2, ref Vector3 p3, out float result)
		{
		}

		[Token(Token = "0x60020D1")]
		[Address(RVA = "0xD8EB68", Offset = "0xD8EB68", VA = "0xD8EB68")]
		internal static void PerpDotXZ(ref Vector3 a, ref Vector3 b, out float result)
		{
		}

		[Token(Token = "0x60020D2")]
		[Address(RVA = "0xD93B7C", Offset = "0xD93B7C", VA = "0xD93B7C")]
		internal static void CalculateSlopeAngle(ref Vector3 vec, out float angle)
		{
		}
	}
}
namespace SharpNav.Crowds
{
	[Token(Token = "0x20005C1")]
	public class Agent : IEquatable<Agent>
	{
		[Token(Token = "0x4001EBA")]
		private const int AgentMaxCorners = 4;

		[Token(Token = "0x4001EBB")]
		public const int AgentMaxNeighbors = 6;

		[Token(Token = "0x4001EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool active;

		[Token(Token = "0x4001EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private AgentState state;

		[Token(Token = "0x4001EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool partial;

		[Token(Token = "0x4001EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PathCorridor corridor;

		[Token(Token = "0x4001EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LocalBoundary boundary;

		[Token(Token = "0x4001EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float topologyOptTime;

		[Token(Token = "0x4001EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CrowdNeighbor[] neighbors;

		[Token(Token = "0x4001EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int numNeis;

		[Token(Token = "0x4001EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float DesiredSpeed;

		[Token(Token = "0x4001EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SharpNav.Geometry.Vector3 currentPos;

		[Token(Token = "0x4001EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public SharpNav.Geometry.Vector3 Disp;

		[Token(Token = "0x4001EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public SharpNav.Geometry.Vector3 DesiredVel;

		[Token(Token = "0x4001EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public SharpNav.Geometry.Vector3 NVel;

		[Token(Token = "0x4001EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public SharpNav.Geometry.Vector3 Vel;

		[Token(Token = "0x4001ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public AgentParams Parameters;

		[Token(Token = "0x4001ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public SharpNav.Geometry.Vector3[] CornerVerts;

		[Token(Token = "0x4001ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public int[] CornerFlags;

		[Token(Token = "0x4001ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int[] CornerPolys;

		[Token(Token = "0x4001ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int numCorners;

		[Token(Token = "0x4001ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private TargetState targetState;

		[Token(Token = "0x4001ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int TargetRef;

		[Token(Token = "0x4001ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private SharpNav.Geometry.Vector3 targetPos;

		[Token(Token = "0x4001ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public int TargetPathqRef;

		[Token(Token = "0x4001ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public bool TargetReplan;

		[Token(Token = "0x4001ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float TargetReplanTime;

		[Token(Token = "0x4001ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private int agentIndex;

		[Token(Token = "0x17000565")]
		public int AgentIndex
		{
			[Token(Token = "0x60020D3")]
			[Address(RVA = "0xD93C40", Offset = "0xD93C40", VA = "0xD93C40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000566")]
		public bool IsActive
		{
			[Token(Token = "0x60020D5")]
			[Address(RVA = "0xD93E80", Offset = "0xD93E80", VA = "0xD93E80")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60020D6")]
			[Address(RVA = "0xD93E88", Offset = "0xD93E88", VA = "0xD93E88")]
			set
			{
			}
		}

		[Token(Token = "0x17000567")]
		public bool IsPartial
		{
			[Token(Token = "0x60020D7")]
			[Address(RVA = "0xD93E94", Offset = "0xD93E94", VA = "0xD93E94")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60020D8")]
			[Address(RVA = "0xD93E9C", Offset = "0xD93E9C", VA = "0xD93E9C")]
			set
			{
			}
		}

		[Token(Token = "0x17000568")]
		public AgentState State
		{
			[Token(Token = "0x60020D9")]
			[Address(RVA = "0xD93EA8", Offset = "0xD93EA8", VA = "0xD93EA8")]
			get
			{
				return default(AgentState);
			}
			[Token(Token = "0x60020DA")]
			[Address(RVA = "0xD93EB0", Offset = "0xD93EB0", VA = "0xD93EB0")]
			set
			{
			}
		}

		[Token(Token = "0x17000569")]
		public SharpNav.Geometry.Vector3 Position
		{
			[Token(Token = "0x60020DB")]
			[Address(RVA = "0xD93EB8", Offset = "0xD93EB8", VA = "0xD93EB8")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
			[Token(Token = "0x60020DC")]
			[Address(RVA = "0xD93EC4", Offset = "0xD93EC4", VA = "0xD93EC4")]
			set
			{
			}
		}

		[Token(Token = "0x1700056A")]
		public LocalBoundary Boundary
		{
			[Token(Token = "0x60020DD")]
			[Address(RVA = "0xD93ED0", Offset = "0xD93ED0", VA = "0xD93ED0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700056B")]
		public PathCorridor Corridor
		{
			[Token(Token = "0x60020DE")]
			[Address(RVA = "0xD93ED8", Offset = "0xD93ED8", VA = "0xD93ED8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700056C")]
		public CrowdNeighbor[] Neighbors
		{
			[Token(Token = "0x60020DF")]
			[Address(RVA = "0xD93EE0", Offset = "0xD93EE0", VA = "0xD93EE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700056D")]
		public int NeighborCount
		{
			[Token(Token = "0x60020E0")]
			[Address(RVA = "0xD93EE8", Offset = "0xD93EE8", VA = "0xD93EE8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60020E1")]
			[Address(RVA = "0xD93EF0", Offset = "0xD93EF0", VA = "0xD93EF0")]
			set
			{
			}
		}

		[Token(Token = "0x1700056E")]
		public TargetState TargetState
		{
			[Token(Token = "0x60020E2")]
			[Address(RVA = "0xD93EF8", Offset = "0xD93EF8", VA = "0xD93EF8")]
			get
			{
				return default(TargetState);
			}
			[Token(Token = "0x60020E3")]
			[Address(RVA = "0xD93F00", Offset = "0xD93F00", VA = "0xD93F00")]
			set
			{
			}
		}

		[Token(Token = "0x1700056F")]
		public SharpNav.Geometry.Vector3 TargetPosition
		{
			[Token(Token = "0x60020E4")]
			[Address(RVA = "0xD93F08", Offset = "0xD93F08", VA = "0xD93F08")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
			[Token(Token = "0x60020E5")]
			[Address(RVA = "0xD93F14", Offset = "0xD93F14", VA = "0xD93F14")]
			set
			{
			}
		}

		[Token(Token = "0x17000570")]
		public int CornerCount
		{
			[Token(Token = "0x60020E6")]
			[Address(RVA = "0xD93F20", Offset = "0xD93F20", VA = "0xD93F20")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60020E7")]
			[Address(RVA = "0xD93F28", Offset = "0xD93F28", VA = "0xD93F28")]
			set
			{
			}
		}

		[Token(Token = "0x60020D4")]
		[Address(RVA = "0xD93C48", Offset = "0xD93C48", VA = "0xD93C48")]
		public Agent(int maxPath, int agentIndex)
		{
		}

		[Token(Token = "0x60020E8")]
		[Address(RVA = "0xD93F30", Offset = "0xD93F30", VA = "0xD93F30")]
		public void Integrate(float dt)
		{
		}

		[Token(Token = "0x60020E9")]
		[Address(RVA = "0xD94098", Offset = "0xD94098", VA = "0xD94098")]
		public void Reset(int reference, SharpNav.Geometry.Vector3 nearest)
		{
		}

		[Token(Token = "0x60020EA")]
		[Address(RVA = "0xD9418C", Offset = "0xD9418C", VA = "0xD9418C")]
		public void RequestMoveTargetReplan(int reference, SharpNav.Geometry.Vector3 pos)
		{
		}

		[Token(Token = "0x60020EB")]
		[Address(RVA = "0xD941B4", Offset = "0xD941B4", VA = "0xD941B4")]
		public bool RequestMoveTarget(int reference, SharpNav.Geometry.Vector3 pos)
		{
			return default(bool);
		}

		[Token(Token = "0x60020EC")]
		[Address(RVA = "0xD941E0", Offset = "0xD941E0", VA = "0xD941E0")]
		public void RequestMoveVelocity(SharpNav.Geometry.Vector3 vel)
		{
		}

		[Token(Token = "0x60020ED")]
		[Address(RVA = "0xD94200", Offset = "0xD94200", VA = "0xD94200")]
		public void ResetMoveTarget()
		{
		}

		[Token(Token = "0x60020EE")]
		[Address(RVA = "0xD94214", Offset = "0xD94214", VA = "0xD94214")]
		public void UpdateAgentParameters(AgentParams parameters)
		{
		}

		[Token(Token = "0x60020EF")]
		[Address(RVA = "0xD9422C", Offset = "0xD9422C", VA = "0xD9422C")]
		public static bool operator ==(Agent left, Agent right)
		{
			return default(bool);
		}

		[Token(Token = "0x60020F0")]
		[Address(RVA = "0xD94278", Offset = "0xD94278", VA = "0xD94278")]
		public static bool operator !=(Agent left, Agent right)
		{
			return default(bool);
		}

		[Token(Token = "0x60020F1")]
		[Address(RVA = "0xD94258", Offset = "0xD94258", VA = "0xD94258", Slot = "4")]
		public bool Equals(Agent other)
		{
			return default(bool);
		}

		[Token(Token = "0x60020F2")]
		[Address(RVA = "0xD942A4", Offset = "0xD942A4", VA = "0xD942A4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60020F3")]
		[Address(RVA = "0xD94330", Offset = "0xD94330", VA = "0xD94330", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60020F4")]
		[Address(RVA = "0xD94338", Offset = "0xD94338", VA = "0xD94338", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20005C2")]
	public class Crowd
	{
		[Token(Token = "0x4001ED6")]
		private const int AgentMaxObstacleAvoidanceParams = 8;

		[Token(Token = "0x4001ED7")]
		private const int AgentMaxNeighbours = 6;

		[Token(Token = "0x4001ED8")]
		private const int AgentMaxCorners = 4;

		[Token(Token = "0x4001ED9")]
		private const int MaxItersPerUpdate = 100;

		[Token(Token = "0x4001EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int maxAgents;

		[Token(Token = "0x4001EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Agent[] agents;

		[Token(Token = "0x4001EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AgentAnimation[] agentAnims;

		[Token(Token = "0x4001EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PathQueue pathq;

		[Token(Token = "0x4001EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ObstacleAvoidanceQuery.ObstacleAvoidanceParams[] obstacleQueryParams;

		[Token(Token = "0x4001EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ObstacleAvoidanceQuery obstacleQuery;

		[Token(Token = "0x4001EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ProximityGrid<Agent> grid;

		[Token(Token = "0x4001EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[] pathResult;

		[Token(Token = "0x4001EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int maxPathResult;

		[Token(Token = "0x4001EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private SharpNav.Geometry.Vector3 ext;

		[Token(Token = "0x4001EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int velocitySampleCount;

		[Token(Token = "0x4001EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private NavMeshQuery navQuery;

		[Token(Token = "0x60020F5")]
		[Address(RVA = "0xD94340", Offset = "0xD94340", VA = "0xD94340")]
		public Crowd(int maxAgents, float maxAgentRadius, ref TiledNavMesh navMesh)
		{
		}

		[Token(Token = "0x60020F6")]
		[Address(RVA = "0xD94724", Offset = "0xD94724", VA = "0xD94724")]
		public ObstacleAvoidanceQuery.ObstacleAvoidanceParams GetObstacleAvoidanceParams(int idx)
		{
			return default(ObstacleAvoidanceQuery.ObstacleAvoidanceParams);
		}

		[Token(Token = "0x60020F7")]
		[Address(RVA = "0xD9477C", Offset = "0xD9477C", VA = "0xD9477C")]
		public void SetObstacleAvoidanceParams(int idx, ObstacleAvoidanceQuery.ObstacleAvoidanceParams parameters)
		{
		}

		[Token(Token = "0x60020F8")]
		[Address(RVA = "0xD947EC", Offset = "0xD947EC", VA = "0xD947EC")]
		public int GetAgentCount()
		{
			return default(int);
		}

		[Token(Token = "0x60020F9")]
		[Address(RVA = "0xD947F4", Offset = "0xD947F4", VA = "0xD947F4")]
		public Agent GetAgent(int idx)
		{
			return null;
		}

		[Token(Token = "0x60020FA")]
		[Address(RVA = "0xD9483C", Offset = "0xD9483C", VA = "0xD9483C")]
		public int AddAgent(SharpNav.Geometry.Vector3 pos, AgentParams parameters)
		{
			return default(int);
		}

		[Token(Token = "0x60020FB")]
		[Address(RVA = "0xD94950", Offset = "0xD94950", VA = "0xD94950")]
		public bool RemoveAgent(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60020FC")]
		[Address(RVA = "0xD949A4", Offset = "0xD949A4", VA = "0xD949A4")]
		public int GetActiveAgents(Agent[] agents)
		{
			return default(int);
		}

		[Token(Token = "0x60020FD")]
		[Address(RVA = "0xD94A60", Offset = "0xD94A60", VA = "0xD94A60")]
		public int GetAgentIndex(Agent agent)
		{
			return default(int);
		}

		[Token(Token = "0x60020FE")]
		[Address(RVA = "0xD94AD8", Offset = "0xD94AD8", VA = "0xD94AD8")]
		public void Update(float dt)
		{
		}

		[Token(Token = "0x60020FF")]
		[Address(RVA = "0xD961A4", Offset = "0xD961A4", VA = "0xD961A4")]
		public void UpdateMoveRequest()
		{
		}

		[Token(Token = "0x6002100")]
		[Address(RVA = "0xD96B84", Offset = "0xD96B84", VA = "0xD96B84")]
		public void UpdateTopologyOptimization(Agent[] agents, int numAgents, float dt)
		{
		}

		[Token(Token = "0x6002101")]
		[Address(RVA = "0xD95E98", Offset = "0xD95E98", VA = "0xD95E98")]
		public void CheckPathValidity(Agent[] agents, int agentCount, float dt)
		{
		}

		[Token(Token = "0x6002102")]
		[Address(RVA = "0xD975C4", Offset = "0xD975C4", VA = "0xD975C4")]
		public bool OverOffmeshConnection(Agent ag, float radius)
		{
			return default(bool);
		}

		[Token(Token = "0x6002103")]
		[Address(RVA = "0xD9779C", Offset = "0xD9779C", VA = "0xD9779C")]
		public void CalcSmoothSteerDirection(Agent ag, ref SharpNav.Geometry.Vector3 dir)
		{
		}

		[Token(Token = "0x6002104")]
		[Address(RVA = "0xD97998", Offset = "0xD97998", VA = "0xD97998")]
		public void CalcStraightSteerDirection(Agent ag, ref SharpNav.Geometry.Vector3 dir)
		{
		}

		[Token(Token = "0x6002105")]
		[Address(RVA = "0xD97A7C", Offset = "0xD97A7C", VA = "0xD97A7C")]
		public float GetDistanceToGoal(Agent ag, float range)
		{
			return default(float);
		}

		[Token(Token = "0x6002106")]
		[Address(RVA = "0xD96FE8", Offset = "0xD96FE8", VA = "0xD96FE8")]
		public int GetNeighbours(SharpNav.Geometry.Vector3 pos, float height, float range, Agent skip, CrowdNeighbor[] result, int maxResult, Agent[] agents, ProximityGrid<Agent> grid)
		{
			return default(int);
		}

		[Token(Token = "0x6002107")]
		[Address(RVA = "0xD98C44", Offset = "0xD98C44", VA = "0xD98C44")]
		public int AddNeighbour(Agent agent, float dist, CrowdNeighbor[] neis, int nneis, int maxNeis)
		{
			return default(int);
		}

		[Token(Token = "0x6002108")]
		[Address(RVA = "0xD984D0", Offset = "0xD984D0", VA = "0xD984D0")]
		public int AddToPathQueue(Agent newag, Agent[] agents, int numAgents, int maxAgents)
		{
			return default(int);
		}

		[Token(Token = "0x6002109")]
		[Address(RVA = "0xD98750", Offset = "0xD98750", VA = "0xD98750")]
		public int AddToOptQueue(Agent newag, Agent[] agents, int numAgents, int maxAgents)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20005C3")]
	public struct CrowdNeighbor
	{
		[Token(Token = "0x4001EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Index;

		[Token(Token = "0x4001EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Distance;
	}
	[Token(Token = "0x20005C4")]
	public struct AgentParams
	{
		[Token(Token = "0x4001EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float Radius;

		[Token(Token = "0x4001EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Height;

		[Token(Token = "0x4001EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float MaxAcceleration;

		[Token(Token = "0x4001EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float MaxSpeed;

		[Token(Token = "0x4001EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float CollisionQueryRange;

		[Token(Token = "0x4001EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float PathOptimizationRange;

		[Token(Token = "0x4001EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float SeparationWeight;

		[Token(Token = "0x4001EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UpdateFlags UpdateFlags;

		[Token(Token = "0x4001EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public byte ObstacleAvoidanceType;

		[Token(Token = "0x4001EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public byte QueryFilterType;
	}
	[Token(Token = "0x20005C5")]
	public struct AgentAnimation
	{
		[Token(Token = "0x4001EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SharpNav.Geometry.Vector3 InitPos;

		[Token(Token = "0x4001EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SharpNav.Geometry.Vector3 StartPos;

		[Token(Token = "0x4001EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SharpNav.Geometry.Vector3 EndPos;

		[Token(Token = "0x4001EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int PolyRef;

		[Token(Token = "0x4001EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float T;

		[Token(Token = "0x4001EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float TMax;

		[Token(Token = "0x17000571")]
		public bool Active
		{
			[Token(Token = "0x600210A")]
			[Address(RVA = "0xD98ECC", Offset = "0xD98ECC", VA = "0xD98ECC")]
			[CompilerGenerated]
			readonly get
			{
				return default(bool);
			}
			[Token(Token = "0x600210B")]
			[Address(RVA = "0xD98ED4", Offset = "0xD98ED4", VA = "0xD98ED4")]
			[CompilerGenerated]
			set
			{
			}
		}
	}
	[Token(Token = "0x20005C6")]
	[Flags]
	public enum AgentState
	{
		[Token(Token = "0x4001EFA")]
		Invalid = 0,
		[Token(Token = "0x4001EFB")]
		Walking = 1,
		[Token(Token = "0x4001EFC")]
		Offmesh = 2
	}
	[Token(Token = "0x20005C7")]
	public class LocalBoundary
	{
		[Token(Token = "0x20005C8")]
		public struct Segment
		{
			[Token(Token = "0x4001F04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SharpNav.Geometry.Vector3 Start;

			[Token(Token = "0x4001F05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public SharpNav.Geometry.Vector3 End;

			[Token(Token = "0x4001F06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float Dist;
		}

		[Token(Token = "0x4001EFD")]
		private const int MaxLocalSegs = 8;

		[Token(Token = "0x4001EFE")]
		private const int MaxLocalPolys = 16;

		[Token(Token = "0x4001EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SharpNav.Geometry.Vector3 center;

		[Token(Token = "0x4001F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Segment[] segs;

		[Token(Token = "0x4001F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int segCount;

		[Token(Token = "0x4001F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int[] polys;

		[Token(Token = "0x4001F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int numPolys;

		[Token(Token = "0x17000572")]
		public SharpNav.Geometry.Vector3 Center
		{
			[Token(Token = "0x600210D")]
			[Address(RVA = "0xD98EE0", Offset = "0xD98EE0", VA = "0xD98EE0")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
		}

		[Token(Token = "0x17000573")]
		public Segment[] Segs
		{
			[Token(Token = "0x600210E")]
			[Address(RVA = "0xD98EEC", Offset = "0xD98EEC", VA = "0xD98EEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000574")]
		public int SegCount
		{
			[Token(Token = "0x600210F")]
			[Address(RVA = "0xD98EF4", Offset = "0xD98EF4", VA = "0xD98EF4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600210C")]
		[Address(RVA = "0xD93DE0", Offset = "0xD93DE0", VA = "0xD93DE0")]
		public LocalBoundary()
		{
		}

		[Token(Token = "0x6002110")]
		[Address(RVA = "0xD94170", Offset = "0xD94170", VA = "0xD94170")]
		public void Reset()
		{
		}

		[Token(Token = "0x6002111")]
		[Address(RVA = "0xD98EFC", Offset = "0xD98EFC", VA = "0xD98EFC")]
		public void AddSegment(float dist, Segment s)
		{
		}

		[Token(Token = "0x6002112")]
		[Address(RVA = "0xD96DA4", Offset = "0xD96DA4", VA = "0xD96DA4")]
		public void Update(int reference, SharpNav.Geometry.Vector3 pos, float collisionQueryRange, NavMeshQuery navquery)
		{
		}

		[Token(Token = "0x6002113")]
		[Address(RVA = "0xD96CE8", Offset = "0xD96CE8", VA = "0xD96CE8")]
		public bool IsValid(NavMeshQuery navquery)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20005C9")]
	public class ObstacleAvoidanceQuery
	{
		[Token(Token = "0x20005CA")]
		private struct ObstacleCircle
		{
			[Token(Token = "0x4001F12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SharpNav.Geometry.Vector3 Position;

			[Token(Token = "0x4001F13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public SharpNav.Geometry.Vector3 Vel;

			[Token(Token = "0x4001F14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SharpNav.Geometry.Vector3 DesiredVel;

			[Token(Token = "0x4001F15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float Radius;

			[Token(Token = "0x4001F16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SharpNav.Geometry.Vector3 Dp;

			[Token(Token = "0x4001F17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public SharpNav.Geometry.Vector3 Np;
		}

		[Token(Token = "0x20005CB")]
		private struct ObstacleSegment
		{
			[Token(Token = "0x4001F18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public SharpNav.Geometry.Vector3 P;

			[Token(Token = "0x4001F19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public SharpNav.Geometry.Vector3 Q;

			[Token(Token = "0x4001F1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool Touch;
		}

		[Token(Token = "0x20005CC")]
		public struct ObstacleAvoidanceParams
		{
			[Token(Token = "0x4001F1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float VelBias;

			[Token(Token = "0x4001F1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float WeightDesVel;

			[Token(Token = "0x4001F1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float WeightCurVel;

			[Token(Token = "0x4001F1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float WeightSide;

			[Token(Token = "0x4001F1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float WeightToi;

			[Token(Token = "0x4001F20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float HorizTime;

			[Token(Token = "0x4001F21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int GridSize;

			[Token(Token = "0x4001F22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int AdaptiveDivs;

			[Token(Token = "0x4001F23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int AdaptiveRings;

			[Token(Token = "0x4001F24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int AdaptiveDepth;
		}

		[Token(Token = "0x4001F07")]
		private const int MaxPatternDivs = 32;

		[Token(Token = "0x4001F08")]
		private const int MaxPatternRings = 4;

		[Token(Token = "0x4001F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ObstacleAvoidanceParams parameters;

		[Token(Token = "0x4001F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float invHorizTime;

		[Token(Token = "0x4001F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float invVmax;

		[Token(Token = "0x4001F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int maxCircles;

		[Token(Token = "0x4001F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ObstacleCircle[] circles;

		[Token(Token = "0x4001F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int numCircles;

		[Token(Token = "0x4001F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int maxSegments;

		[Token(Token = "0x4001F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ObstacleSegment[] segments;

		[Token(Token = "0x4001F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int numSegments;

		[Token(Token = "0x6002114")]
		[Address(RVA = "0xD9467C", Offset = "0xD9467C", VA = "0xD9467C")]
		public ObstacleAvoidanceQuery(int maxCircles, int maxSegments)
		{
		}

		[Token(Token = "0x6002115")]
		[Address(RVA = "0xD97B68", Offset = "0xD97B68", VA = "0xD97B68")]
		public void Reset()
		{
		}

		[Token(Token = "0x6002116")]
		[Address(RVA = "0xD97B74", Offset = "0xD97B74", VA = "0xD97B74")]
		public void AddCircle(SharpNav.Geometry.Vector3 pos, float rad, SharpNav.Geometry.Vector3 vel, SharpNav.Geometry.Vector3 dvel)
		{
		}

		[Token(Token = "0x6002117")]
		[Address(RVA = "0xD97C18", Offset = "0xD97C18", VA = "0xD97C18")]
		public void AddSegment(SharpNav.Geometry.Vector3 p, SharpNav.Geometry.Vector3 q)
		{
		}

		[Token(Token = "0x6002118")]
		[Address(RVA = "0xD99134", Offset = "0xD99134", VA = "0xD99134")]
		public void Prepare(SharpNav.Geometry.Vector3 position, SharpNav.Geometry.Vector3 desiredVel)
		{
		}

		[Token(Token = "0x6002119")]
		[Address(RVA = "0xD9936C", Offset = "0xD9936C", VA = "0xD9936C")]
		public float ProcessSample(SharpNav.Geometry.Vector3 vcand, float cs, SharpNav.Geometry.Vector3 position, float radius, SharpNav.Geometry.Vector3 vel, SharpNav.Geometry.Vector3 desiredVel)
		{
			return default(float);
		}

		[Token(Token = "0x600211A")]
		[Address(RVA = "0xD99790", Offset = "0xD99790", VA = "0xD99790")]
		public bool SweepCircleCircle(SharpNav.Geometry.Vector3 center0, float radius0, SharpNav.Geometry.Vector3 v, SharpNav.Geometry.Vector3 center1, float radius1, ref float tmin, ref float tmax)
		{
			return default(bool);
		}

		[Token(Token = "0x600211B")]
		[Address(RVA = "0xD998D4", Offset = "0xD998D4", VA = "0xD998D4")]
		public bool IntersectRaySegment(SharpNav.Geometry.Vector3 ap, SharpNav.Geometry.Vector3 u, SharpNav.Geometry.Vector3 bp, SharpNav.Geometry.Vector3 bq, ref float t)
		{
			return default(bool);
		}

		[Token(Token = "0x600211C")]
		[Address(RVA = "0xD980EC", Offset = "0xD980EC", VA = "0xD980EC")]
		public int SampleVelocityGrid(SharpNav.Geometry.Vector3 pos, float rad, float vmax, SharpNav.Geometry.Vector3 vel, SharpNav.Geometry.Vector3 desiredVel, ref SharpNav.Geometry.Vector3 nvel, ObstacleAvoidanceParams parameters)
		{
			return default(int);
		}

		[Token(Token = "0x600211D")]
		[Address(RVA = "0xD97C94", Offset = "0xD97C94", VA = "0xD97C94")]
		public int SampleVelocityAdaptive(SharpNav.Geometry.Vector3 position, float radius, float vmax, SharpNav.Geometry.Vector3 vel, SharpNav.Geometry.Vector3 desiredVel, ref SharpNav.Geometry.Vector3 nvel, ObstacleAvoidanceParams parameters)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20005CD")]
	public class PathCorridor
	{
		[Token(Token = "0x4001F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SharpNav.Geometry.Vector3 pos;

		[Token(Token = "0x4001F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private SharpNav.Geometry.Vector3 target;

		[Token(Token = "0x4001F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int[] path;

		[Token(Token = "0x4001F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int pathCount;

		[Token(Token = "0x4001F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int maxPath;

		[Token(Token = "0x17000575")]
		public SharpNav.Geometry.Vector3 Pos
		{
			[Token(Token = "0x600211F")]
			[Address(RVA = "0xD99A20", Offset = "0xD99A20", VA = "0xD99A20")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
		}

		[Token(Token = "0x17000576")]
		public SharpNav.Geometry.Vector3 Target
		{
			[Token(Token = "0x6002120")]
			[Address(RVA = "0xD99A2C", Offset = "0xD99A2C", VA = "0xD99A2C")]
			get
			{
				return default(SharpNav.Geometry.Vector3);
			}
		}

		[Token(Token = "0x17000577")]
		public int[] Path
		{
			[Token(Token = "0x6002121")]
			[Address(RVA = "0xD99A38", Offset = "0xD99A38", VA = "0xD99A38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000578")]
		public int PathCount
		{
			[Token(Token = "0x6002122")]
			[Address(RVA = "0xD99A40", Offset = "0xD99A40", VA = "0xD99A40")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600211E")]
		[Address(RVA = "0xD93D74", Offset = "0xD93D74", VA = "0xD93D74")]
		public PathCorridor(int maxPath)
		{
		}

		[Token(Token = "0x6002123")]
		[Address(RVA = "0xD94134", Offset = "0xD94134", VA = "0xD94134")]
		public void Reset(int reference, SharpNav.Geometry.Vector3 pos)
		{
		}

		[Token(Token = "0x6002124")]
		[Address(RVA = "0xD98488", Offset = "0xD98488", VA = "0xD98488")]
		public void SetCorridor(SharpNav.Geometry.Vector3 target, int[] path, int npath)
		{
		}

		[Token(Token = "0x6002125")]
		[Address(RVA = "0xD982B8", Offset = "0xD982B8", VA = "0xD982B8")]
		public bool MovePosition(SharpNav.Geometry.Vector3 npos, NavMeshQuery navquery)
		{
			return default(bool);
		}

		[Token(Token = "0x6002126")]
		[Address(RVA = "0xD9721C", Offset = "0xD9721C", VA = "0xD9721C")]
		public int FindCorners(SharpNav.Geometry.Vector3[] cornerVerts, int[] cornerFlags, int[] cornerPolys, int maxCorners, NavMeshQuery navquery)
		{
			return default(int);
		}

		[Token(Token = "0x6002127")]
		[Address(RVA = "0xD9898C", Offset = "0xD9898C", VA = "0xD9898C")]
		public bool OptimizePathTopology(NavMeshQuery navquery)
		{
			return default(bool);
		}

		[Token(Token = "0x6002128")]
		[Address(RVA = "0xD973CC", Offset = "0xD973CC", VA = "0xD973CC")]
		public void OptimizePathVisibility(SharpNav.Geometry.Vector3 next, float pathOptimizationRange, NavMeshQuery navquery)
		{
		}

		[Token(Token = "0x6002129")]
		[Address(RVA = "0xD99A48", Offset = "0xD99A48", VA = "0xD99A48")]
		public int MergeCorridorStartMoved(int[] path, int npath, int maxPath, int[] visited, int nvisited)
		{
			return default(int);
		}

		[Token(Token = "0x600212A")]
		[Address(RVA = "0xD99C5C", Offset = "0xD99C5C", VA = "0xD99C5C")]
		public int MergeCorridorStartShortcut(int[] path, int npath, int maxPath, int[] visited, int nvisited)
		{
			return default(int);
		}

		[Token(Token = "0x600212B")]
		[Address(RVA = "0xD97664", Offset = "0xD97664", VA = "0xD97664")]
		public bool MoveOverOffmeshConnection(int offMeshConRef, int[] refs, ref SharpNav.Geometry.Vector3 startPos, ref SharpNav.Geometry.Vector3 endPos, NavMeshQuery navquery)
		{
			return default(bool);
		}

		[Token(Token = "0x600212C")]
		[Address(RVA = "0xD98AEC", Offset = "0xD98AEC", VA = "0xD98AEC")]
		public bool FixPathStart(int safeRef, SharpNav.Geometry.Vector3 safePos)
		{
			return default(bool);
		}

		[Token(Token = "0x600212D")]
		[Address(RVA = "0xD98B70", Offset = "0xD98B70", VA = "0xD98B70")]
		public bool IsValid(int maxLookAhead, NavMeshQuery navquery)
		{
			return default(bool);
		}

		[Token(Token = "0x600212E")]
		[Address(RVA = "0xD96D6C", Offset = "0xD96D6C", VA = "0xD96D6C")]
		public int GetFirstPoly()
		{
			return default(int);
		}

		[Token(Token = "0x600212F")]
		[Address(RVA = "0xD9870C", Offset = "0xD9870C", VA = "0xD9870C")]
		public int GetLastPoly()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20005CE")]
	public class PathQueue
	{
		[Token(Token = "0x20005CF")]
		private struct PathQuery
		{
			[Token(Token = "0x4001F31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int Reference;

			[Token(Token = "0x4001F32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public SharpNav.Geometry.Vector3 StartPos;

			[Token(Token = "0x4001F33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SharpNav.Geometry.Vector3 EndPos;

			[Token(Token = "0x4001F34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int StartRef;

			[Token(Token = "0x4001F35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int EndRef;

			[Token(Token = "0x4001F36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int[] Path;

			[Token(Token = "0x4001F37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int PathCount;

			[Token(Token = "0x4001F38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Status status;

			[Token(Token = "0x4001F39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int KeepAlive;
		}

		[Token(Token = "0x4001F2A")]
		public const byte Invalid = 0;

		[Token(Token = "0x4001F2B")]
		private const int MaxQueue = 8;

		[Token(Token = "0x4001F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PathQuery[] queue;

		[Token(Token = "0x4001F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int nextHandle;

		[Token(Token = "0x4001F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int maxPathSize;

		[Token(Token = "0x4001F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int queueHead;

		[Token(Token = "0x4001F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NavMeshQuery navquery;

		[Token(Token = "0x6002130")]
		[Address(RVA = "0xD99E44", Offset = "0xD99E44", VA = "0xD99E44")]
		public PathQueue(int maxPathSize, int maxSearchNodeCount, ref TiledNavMesh nav)
		{
		}

		[Token(Token = "0x6002131")]
		[Address(RVA = "0xD99F7C", Offset = "0xD99F7C", VA = "0xD99F7C")]
		public void Update(int maxIters)
		{
		}

		[Token(Token = "0x6002132")]
		[Address(RVA = "0xD9A0C4", Offset = "0xD9A0C4", VA = "0xD9A0C4")]
		public int Request(int startRef, int endRef, SharpNav.Geometry.Vector3 startPos, SharpNav.Geometry.Vector3 endPos)
		{
			return default(int);
		}

		[Token(Token = "0x6002133")]
		[Address(RVA = "0xD9A198", Offset = "0xD9A198", VA = "0xD9A198")]
		public Status GetRequestStatus(int reference)
		{
			return default(Status);
		}

		[Token(Token = "0x6002134")]
		[Address(RVA = "0xD9A1F0", Offset = "0xD9A1F0", VA = "0xD9A1F0")]
		public bool GetPathResult(int reference, int[] path, ref int pathSize, int maxPath)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20005D0")]
	public enum Status
	{
		[Token(Token = "0x4001F3B")]
		Failure,
		[Token(Token = "0x4001F3C")]
		Success,
		[Token(Token = "0x4001F3D")]
		InProgress
	}
	[Token(Token = "0x20005D1")]
	public static class StatusExtensions
	{
		[Token(Token = "0x6002135")]
		[Address(RVA = "0xD9A0BC", Offset = "0xD9A0BC", VA = "0xD9A0BC")]
		public static Status ToStatus(this bool variable)
		{
			return default(Status);
		}
	}
	[Token(Token = "0x20005D2")]
	public enum TargetState
	{
		[Token(Token = "0x4001F3F")]
		None,
		[Token(Token = "0x4001F40")]
		Failed,
		[Token(Token = "0x4001F41")]
		Valid,
		[Token(Token = "0x4001F42")]
		Requesting,
		[Token(Token = "0x4001F43")]
		WaitingForQueue,
		[Token(Token = "0x4001F44")]
		WaitingForPath,
		[Token(Token = "0x4001F45")]
		Velocity
	}
	[Token(Token = "0x20005D3")]
	[Flags]
	public enum UpdateFlags
	{
		[Token(Token = "0x4001F47")]
		AnticipateTurns = 1,
		[Token(Token = "0x4001F48")]
		ObstacleAvoidance = 2,
		[Token(Token = "0x4001F49")]
		Separation = 4,
		[Token(Token = "0x4001F4A")]
		OptimizeVis = 8,
		[Token(Token = "0x4001F4B")]
		OptimizeTopo = 0x10
	}
}
namespace SharpNav.Collections
{
	[Token(Token = "0x20005D4")]
	public class BVTree
	{
		[Token(Token = "0x20005D5")]
		public struct Node
		{
			[Token(Token = "0x20005D6")]
			public class CompareX : IComparer<Node>
			{
				[Token(Token = "0x600213D")]
				[Address(RVA = "0xD9AC64", Offset = "0xD9AC64", VA = "0xD9AC64", Slot = "4")]
				public int Compare(Node x, Node y)
				{
					return default(int);
				}

				[Token(Token = "0x600213E")]
				[Address(RVA = "0xD9AC4C", Offset = "0xD9AC4C", VA = "0xD9AC4C")]
				public CompareX()
				{
				}
			}

			[Token(Token = "0x20005D7")]
			public class CompareY : IComparer<Node>
			{
				[Token(Token = "0x600213F")]
				[Address(RVA = "0xD9AC84", Offset = "0xD9AC84", VA = "0xD9AC84", Slot = "4")]
				public int Compare(Node x, Node y)
				{
					return default(int);
				}

				[Token(Token = "0x6002140")]
				[Address(RVA = "0xD9AC54", Offset = "0xD9AC54", VA = "0xD9AC54")]
				public CompareY()
				{
				}
			}

			[Token(Token = "0x20005D8")]
			public class CompareZ : IComparer<Node>
			{
				[Token(Token = "0x6002141")]
				[Address(RVA = "0xD9ACA4", Offset = "0xD9ACA4", VA = "0xD9ACA4", Slot = "4")]
				public int Compare(Node x, Node y)
				{
					return default(int);
				}

				[Token(Token = "0x6002142")]
				[Address(RVA = "0xD9AC5C", Offset = "0xD9AC5C", VA = "0xD9AC5C")]
				public CompareZ()
				{
				}
			}

			[Token(Token = "0x4001F50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public PolyBounds Bounds;

			[Token(Token = "0x4001F51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int Index;
		}

		[Token(Token = "0x4001F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Node.CompareX XComparer;

		[Token(Token = "0x4001F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Node.CompareY YComparer;

		[Token(Token = "0x4001F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly Node.CompareZ ZComparer;

		[Token(Token = "0x4001F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Node[] nodes;

		[Token(Token = "0x17000579")]
		public int Count
		{
			[Token(Token = "0x6002137")]
			[Address(RVA = "0xD9A9D0", Offset = "0xD9A9D0", VA = "0xD9A9D0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700057A")]
		public Node this[int index]
		{
			[Token(Token = "0x6002138")]
			[Address(RVA = "0xD9A9EC", Offset = "0xD9A9EC", VA = "0xD9A9EC")]
			get
			{
				return default(Node);
			}
		}

		[Token(Token = "0x6002136")]
		[Address(RVA = "0xD9A3B0", Offset = "0xD9A3B0", VA = "0xD9A3B0")]
		public BVTree(PolyVertex[] verts, PolyMesh.Polygon[] polys, int nvp, float cellSize, float cellHeight)
		{
		}

		[Token(Token = "0x6002139")]
		[Address(RVA = "0xD9AA2C", Offset = "0xD9AA2C", VA = "0xD9AA2C")]
		private static void CalcExtends(List<Node> items, int minIndex, int maxIndex, out PolyBounds bounds)
		{
		}

		[Token(Token = "0x600213A")]
		[Address(RVA = "0xD9AB48", Offset = "0xD9AB48", VA = "0xD9AB48")]
		private static int LongestAxis(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x600213B")]
		[Address(RVA = "0xD9A718", Offset = "0xD9A718", VA = "0xD9A718")]
		private int Subdivide(List<Node> items, int minIndex, int maxIndex, int curNode)
		{
			return default(int);
		}
	}
}
namespace SharpNav.Collections.Generic
{
	[Token(Token = "0x20005D9")]
	public class BufferedQueue<T> : ICollection<T>, IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x20005DA")]
		[CompilerGenerated]
		private sealed class <GetEnumerator>d__18 : IEnumerator<T>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4001F57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <>2__current;

			[Token(Token = "0x4001F58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public BufferedQueue<T> <>4__this;

			[Token(Token = "0x4001F59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <i>5__2;

			[Token(Token = "0x1700057E")]
			private T System.Collections.Generic.IEnumerator<T>.Current
			{
				[Token(Token = "0x6002155")]
				[DebuggerHidden]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x1700057F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002157")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002152")]
			[DebuggerHidden]
			public <GetEnumerator>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6002153")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002154")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002156")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F52")]
		private const int SIZE = 100;

		[Token(Token = "0x4001F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] data;

		[Token(Token = "0x4001F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int first;

		[Token(Token = "0x4001F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int last;

		[Token(Token = "0x1700057B")]
		public int Count
		{
			[Token(Token = "0x6002145")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700057C")]
		private bool System.Collections.Generic.ICollection<T>.IsReadOnly
		{
			[Token(Token = "0x6002146")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700057D")]
		public T this[int index]
		{
			[Token(Token = "0x6002147")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x6002143")]
		public BufferedQueue(int size)
		{
		}

		[Token(Token = "0x6002144")]
		public BufferedQueue(ICollection<T> items)
		{
		}

		[Token(Token = "0x6002148")]
		public bool Enqueue(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6002149")]
		public T Dequeue()
		{
			return (T)null;
		}

		[Token(Token = "0x600214A")]
		public T Peek()
		{
			return (T)null;
		}

		[Token(Token = "0x600214B")]
		public void Clear()
		{
		}

		[Token(Token = "0x600214C")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x600214D")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x600214E")]
		[IteratorStateMachine(typeof(BufferedQueue<>.<GetEnumerator>d__18))]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600214F")]
		private void System.Collections.Generic.ICollection<T>.Add(T item)
		{
		}

		[Token(Token = "0x6002150")]
		private bool System.Collections.Generic.ICollection<T>.Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6002151")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x20005DB")]
	public class BufferedStack<T> : ICollection<T>, IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x20005DC")]
		[CompilerGenerated]
		private sealed class <GetEnumerator>d__16 : IEnumerator<T>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4001F5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private T <>2__current;

			[Token(Token = "0x4001F5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public BufferedStack<T> <>4__this;

			[Token(Token = "0x4001F5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <i>5__2;

			[Token(Token = "0x17000583")]
			private T System.Collections.Generic.IEnumerator<T>.Current
			{
				[Token(Token = "0x600216A")]
				[DebuggerHidden]
				get
				{
					return (T)null;
				}
			}

			[Token(Token = "0x17000584")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600216C")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002167")]
			[DebuggerHidden]
			public <GetEnumerator>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6002168")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002169")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600216B")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] data;

		[Token(Token = "0x4001F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int top;

		[Token(Token = "0x17000580")]
		public int Count
		{
			[Token(Token = "0x600215A")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000581")]
		private bool System.Collections.Generic.ICollection<T>.IsReadOnly
		{
			[Token(Token = "0x600215B")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000582")]
		public T this[int index]
		{
			[Token(Token = "0x600215C")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x6002158")]
		public BufferedStack(int size)
		{
		}

		[Token(Token = "0x6002159")]
		public BufferedStack(int size, ICollection<T> items)
		{
		}

		[Token(Token = "0x600215D")]
		public bool Push(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x600215E")]
		public T Pop()
		{
			return (T)null;
		}

		[Token(Token = "0x600215F")]
		public T Peek()
		{
			return (T)null;
		}

		[Token(Token = "0x6002160")]
		public void Clear()
		{
		}

		[Token(Token = "0x6002161")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6002162")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6002163")]
		[IteratorStateMachine(typeof(BufferedStack<>.<GetEnumerator>d__16))]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6002164")]
		private void System.Collections.Generic.ICollection<T>.Add(T item)
		{
		}

		[Token(Token = "0x6002165")]
		private bool System.Collections.Generic.ICollection<T>.Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6002166")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x20005DD")]
	public interface IValueWithCost
	{
		[Token(Token = "0x17000585")]
		float Cost
		{
			[Token(Token = "0x600216D")]
			get;
		}
	}
	[Token(Token = "0x20005DE")]
	public class PriorityQueue<T> : ICollection<T>, IEnumerable<T>, IEnumerable where T : class, IValueWithCost
	{
		[Token(Token = "0x4001F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T[] heap;

		[Token(Token = "0x4001F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int capacity;

		[Token(Token = "0x4001F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int size;

		[Token(Token = "0x17000586")]
		public int Count
		{
			[Token(Token = "0x600216F")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000587")]
		private bool System.Collections.Generic.ICollection<T>.IsReadOnly
		{
			[Token(Token = "0x6002170")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600216E")]
		public PriorityQueue(int n)
		{
		}

		[Token(Token = "0x6002171")]
		public void Clear()
		{
		}

		[Token(Token = "0x6002172")]
		public bool Empty()
		{
			return default(bool);
		}

		[Token(Token = "0x6002173")]
		public T Top()
		{
			return null;
		}

		[Token(Token = "0x6002174")]
		public T Pop()
		{
			return null;
		}

		[Token(Token = "0x6002175")]
		public void Push(T node)
		{
		}

		[Token(Token = "0x6002176")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6002177")]
		public void Modify(T node)
		{
		}

		[Token(Token = "0x6002178")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6002179")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600217A")]
		private void System.Collections.Generic.ICollection<T>.Add(T item)
		{
		}

		[Token(Token = "0x600217B")]
		private bool System.Collections.Generic.ICollection<T>.Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x600217C")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600217D")]
		private void BubbleUp(int i, T node)
		{
		}

		[Token(Token = "0x600217E")]
		private void TrickleDown(int i, T node)
		{
		}
	}
	[Token(Token = "0x20005DF")]
	public class ProximityGrid<T> where T : IEquatable<T>
	{
		[Token(Token = "0x20005E0")]
		private class Item
		{
			[Token(Token = "0x17000588")]
			public T Value
			{
				[Token(Token = "0x6002185")]
				[CompilerGenerated]
				get
				{
					return (T)null;
				}
				[Token(Token = "0x6002186")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x17000589")]
			public int X
			{
				[Token(Token = "0x6002187")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6002188")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700058A")]
			public int Y
			{
				[Token(Token = "0x6002189")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x600218A")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x1700058B")]
			public int Next
			{
				[Token(Token = "0x600218B")]
				[CompilerGenerated]
				get
				{
					return default(int);
				}
				[Token(Token = "0x600218C")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x600218D")]
			public Item()
			{
			}
		}

		[Token(Token = "0x4001F63")]
		private const int Invalid = -1;

		[Token(Token = "0x4001F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float invCellSize;

		[Token(Token = "0x4001F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Item[] pool;

		[Token(Token = "0x4001F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int poolHead;

		[Token(Token = "0x4001F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int[] buckets;

		[Token(Token = "0x4001F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private BBox2i bounds;

		[Token(Token = "0x600217F")]
		public ProximityGrid(int poolSize, float cellSize)
		{
		}

		[Token(Token = "0x6002180")]
		public void Clear()
		{
		}

		[Token(Token = "0x6002181")]
		public void AddItem(T value, float minX, float minY, float maxX, float maxY)
		{
		}

		[Token(Token = "0x6002182")]
		public int QueryItems(float minX, float minY, float maxX, float maxY, T[] values, int maxVals)
		{
			return default(int);
		}

		[Token(Token = "0x6002183")]
		public int GetItemCountAtLocation(int x, int y)
		{
			return default(int);
		}

		[Token(Token = "0x6002184")]
		public static int HashPos2(int x, int y, int n)
		{
			return default(int);
		}
	}
}
namespace BonsaiDesk
{
	[Token(Token = "0x20005E1")]
	public class BonsaiBuffer
	{
		[Token(Token = "0x4001F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr unmanagedBuffer;

		[Token(Token = "0x4001F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int ofs;

		[Token(Token = "0x4001F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int length;

		[Token(Token = "0x4001F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _hasFreedBuffer;

		[Token(Token = "0x600218E")]
		[Address(RVA = "0xD9ACC4", Offset = "0xD9ACC4", VA = "0xD9ACC4")]
		public BonsaiBuffer(int length)
		{
		}

		[Token(Token = "0x600218F")]
		[Address(RVA = "0xD9AD40", Offset = "0xD9AD40", VA = "0xD9AD40", Slot = "1")]
		~BonsaiBuffer()
		{
		}

		[Token(Token = "0x6002190")]
		[Address(RVA = "0xD9AE4C", Offset = "0xD9AE4C", VA = "0xD9AE4C")]
		public void WriteCharArray(string value)
		{
		}

		[Token(Token = "0x6002191")]
		[Address(RVA = "0xD9AF70", Offset = "0xD9AF70", VA = "0xD9AF70")]
		public void Write(string value)
		{
		}

		[Token(Token = "0x6002192")]
		public void Write<T>(T value)
		{
		}

		[Token(Token = "0x6002193")]
		[Address(RVA = "0xD9ADD4", Offset = "0xD9ADD4", VA = "0xD9ADD4")]
		public void Free()
		{
		}
	}
	[Token(Token = "0x20005E2")]
	public class BonsaiChunkHeaderEntry
	{
		[Token(Token = "0x4001F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public short endianness;

		[Token(Token = "0x4001F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public short version;

		[Token(Token = "0x4001F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string appVersion;

		[Token(Token = "0x4001F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public short tickRate;

		[Token(Token = "0x4001F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int numTicksInChunk;

		[Token(Token = "0x6002194")]
		[Address(RVA = "0xD9B118", Offset = "0xD9B118", VA = "0xD9B118")]
		public static void Write(BonsaiBuffer buffer, short version, string appVersion, short tickRate, int numTicksInChunk)
		{
		}

		[Token(Token = "0x6002195")]
		[Address(RVA = "0xD9B1DC", Offset = "0xD9B1DC", VA = "0xD9B1DC")]
		public BonsaiChunkHeaderEntry(BinaryReader binaryReader)
		{
		}
	}
	[Token(Token = "0x20005E3")]
	public class BonsaiDestroyObjectEntry
	{
		[Token(Token = "0x4001F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint instanceId;

		[Token(Token = "0x6002196")]
		[Address(RVA = "0xD9B280", Offset = "0xD9B280", VA = "0xD9B280")]
		public static void Write(BonsaiBuffer buffer, uint instanceId)
		{
		}

		[Token(Token = "0x6002197")]
		[Address(RVA = "0xD9B2D8", Offset = "0xD9B2D8", VA = "0xD9B2D8")]
		public BonsaiDestroyObjectEntry(BinaryReader binaryReader)
		{
		}
	}
	[Token(Token = "0x20005E4")]
	public class BonsaiObjectEntry
	{
		[Token(Token = "0x4001F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint instanceId;

		[Token(Token = "0x4001F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ushort prefabId;

		[Token(Token = "0x4001F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public bool activeInHierarchy;

		[Token(Token = "0x4001F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		public bool newPos;

		[Token(Token = "0x4001F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool newRot;

		[Token(Token = "0x4001F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool newScale;

		[Token(Token = "0x4001F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UnityEngine.Vector3 position;

		[Token(Token = "0x4001F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Quaternion rotation;

		[Token(Token = "0x4001F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Vector3 localScale;

		[Token(Token = "0x4001F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<(int, float)> newAnimationFloats;

		[Token(Token = "0x4001F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<(int, int)> newAnimationInts;

		[Token(Token = "0x4001F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<(int, bool)> newAnimationBools;

		[Token(Token = "0x6002198")]
		[Address(RVA = "0xD9B31C", Offset = "0xD9B31C", VA = "0xD9B31C")]
		public BonsaiObjectEntry(BonsaiObjectEntry bonsaiObjectEntry)
		{
		}

		[Token(Token = "0x6002199")]
		[Address(RVA = "0xD9B53C", Offset = "0xD9B53C", VA = "0xD9B53C")]
		public static void Write(BonsaiBuffer buffer, uint instanceId, ushort prefabId, BonsaiTrackedObjectData bonsaiTrackedObjectData, bool newPos, bool newRot, bool newScale, List<(int, float)> newFloats, List<(int, int)> newInts, List<(int, bool)> newBools, BonsaiTrackingManager.BonsaiLogLevel logLevel)
		{
		}

		[Token(Token = "0x600219A")]
		[Address(RVA = "0xD9BC8C", Offset = "0xD9BC8C", VA = "0xD9BC8C")]
		public BonsaiObjectEntry(BinaryReader binaryReader)
		{
		}
	}
	[Token(Token = "0x20005E5")]
	public class BonsaiTickEntry
	{
		[Token(Token = "0x4001F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public long timeTicks;

		[Token(Token = "0x4001F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float unscaledTime;

		[Token(Token = "0x4001F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float deltaTime;

		[Token(Token = "0x4001F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float handleTickTime;

		[Token(Token = "0x4001F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ushort numObjects;

		[Token(Token = "0x4001F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public ushort numDeleted;

		[Token(Token = "0x600219B")]
		[Address(RVA = "0xD9C39C", Offset = "0xD9C39C", VA = "0xD9C39C")]
		public static void Write(BonsaiBuffer buffer, long timeTicks, float unscaledTime, float deltaTime, float handleTickTime, ushort numObjects, ushort numDeleted)
		{
		}

		[Token(Token = "0x600219C")]
		[Address(RVA = "0xD9C4A0", Offset = "0xD9C4A0", VA = "0xD9C4A0")]
		public BonsaiTickEntry(BinaryReader binaryReader)
		{
		}
	}
	[Token(Token = "0x20005E6")]
	public class BonsaiObjectPool<T>
	{
		[Token(Token = "0x4001F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Stack<T> _objects;

		[Token(Token = "0x4001F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly Func<T> _objectGenerator;

		[Token(Token = "0x4001F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _numOutstandingObjects;

		[Token(Token = "0x600219D")]
		public BonsaiObjectPool(Func<T> objectGenerator, int initSize = 0)
		{
		}

		[Token(Token = "0x600219E")]
		public T Get()
		{
			return (T)null;
		}

		[Token(Token = "0x600219F")]
		public void Return(T item)
		{
		}

		[Token(Token = "0x60021A0")]
		public int PoolSize()
		{
			return default(int);
		}

		[Token(Token = "0x60021A1")]
		public int NumOutstandingObjects()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20005E7")]
	public class BonsaiReplayManager : MonoBehaviour
	{
		[Token(Token = "0x20005E8")]
		private struct SetSessionMsg
		{
			[Token(Token = "0x4001FA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string accessToken;

			[Token(Token = "0x4001FA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string apiQueryBase;

			[Token(Token = "0x4001FA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string replayId;

			[Token(Token = "0x4001FA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string orgId;

			[Token(Token = "0x4001FA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string projectId;
		}

		[Token(Token = "0x20005EA")]
		[CompilerGenerated]
		private sealed class <GetAssetBundle>d__27 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001FAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001FAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001FAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BonsaiReplayManager <>4__this;

			[Token(Token = "0x4001FAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private UnityWebRequest <uwr>5__2;

			[Token(Token = "0x4001FAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequestAsyncOperation <operation>5__3;

			[Token(Token = "0x4001FB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool <downloadStarted>5__4;

			[Token(Token = "0x1700058C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60021BF")]
				[Address(RVA = "0xDA0490", Offset = "0xDA0490", VA = "0xDA0490", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700058D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60021C1")]
				[Address(RVA = "0xDA04D8", Offset = "0xDA04D8", VA = "0xDA04D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60021BA")]
			[Address(RVA = "0xD9D8C8", Offset = "0xD9D8C8", VA = "0xD9D8C8")]
			[DebuggerHidden]
			public <GetAssetBundle>d__27(int <>1__state)
			{
			}

			[Token(Token = "0x60021BB")]
			[Address(RVA = "0xD9F7DC", Offset = "0xD9F7DC", VA = "0xD9F7DC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60021BC")]
			[Address(RVA = "0xD9F810", Offset = "0xD9F810", VA = "0xD9F810", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60021BD")]
			[Address(RVA = "0xDA0330", Offset = "0xDA0330", VA = "0xDA0330")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60021BE")]
			[Address(RVA = "0xDA03E0", Offset = "0xDA03E0", VA = "0xDA03E0")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x60021C0")]
			[Address(RVA = "0xDA0498", Offset = "0xDA0498", VA = "0xDA0498", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20005EB")]
		[CompilerGenerated]
		private sealed class <SetSessionCoroutine>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001FB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001FB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001FB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BonsaiReplayManager <>4__this;

			[Token(Token = "0x1700058E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60021C5")]
				[Address(RVA = "0xDA05B0", Offset = "0xDA05B0", VA = "0xDA05B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700058F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60021C7")]
				[Address(RVA = "0xDA05F8", Offset = "0xDA05F8", VA = "0xDA05F8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60021C2")]
			[Address(RVA = "0xD9DA38", Offset = "0xD9DA38", VA = "0xD9DA38")]
			[DebuggerHidden]
			public <SetSessionCoroutine>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x60021C3")]
			[Address(RVA = "0xDA04E0", Offset = "0xDA04E0", VA = "0xDA04E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60021C4")]
			[Address(RVA = "0xDA04E4", Offset = "0xDA04E4", VA = "0xDA04E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60021C6")]
			[Address(RVA = "0xDA05B8", Offset = "0xDA05B8", VA = "0xDA05B8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20005EC")]
		[CompilerGenerated]
		private sealed class <DownloadAndLoadReplay>d__41 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001FB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001FB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001FB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BonsaiReplayManager <>4__this;

			[Token(Token = "0x4001FB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private UnityWebRequest <webRequest>5__2;

			[Token(Token = "0x4001FB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private UnityWebRequestAsyncOperation <operation>5__3;

			[Token(Token = "0x4001FB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool <downloadStarted>5__4;

			[Token(Token = "0x17000590")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60021CC")]
				[Address(RVA = "0xDA0F88", Offset = "0xDA0F88", VA = "0xDA0F88", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000591")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60021CE")]
				[Address(RVA = "0xDA0FD0", Offset = "0xDA0FD0", VA = "0xDA0FD0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60021C8")]
			[Address(RVA = "0xD9F364", Offset = "0xD9F364", VA = "0xD9F364")]
			[DebuggerHidden]
			public <DownloadAndLoadReplay>d__41(int <>1__state)
			{
			}

			[Token(Token = "0x60021C9")]
			[Address(RVA = "0xDA0600", Offset = "0xDA0600", VA = "0xDA0600", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60021CA")]
			[Address(RVA = "0xDA061C", Offset = "0xDA061C", VA = "0xDA061C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60021CB")]
			[Address(RVA = "0xDA0ED8", Offset = "0xDA0ED8", VA = "0xDA0ED8")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60021CD")]
			[Address(RVA = "0xDA0F90", Offset = "0xDA0F90", VA = "0xDA0F90", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string replayId;

		[Token(Token = "0x4001F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject cameraGameObject;

		[Token(Token = "0x4001F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject leftControllerGameObject;

		[Token(Token = "0x4001F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject rightControllerGameObject;

		[Token(Token = "0x4001F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Slider slider;

		[Token(Token = "0x4001F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Button togglePauseButton;

		[Token(Token = "0x4001F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Sprite playSprite;

		[Token(Token = "0x4001F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Sprite pauseSprite;

		[Token(Token = "0x4001F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Text progressText;

		[Token(Token = "0x4001F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public BonsaiSliderManager sliderManager;

		[Token(Token = "0x4001F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject missingTexturePrefab;

		[Token(Token = "0x4001F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool _useAssetBundle;

		[Token(Token = "0x4001F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string _orgId;

		[Token(Token = "0x4001F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string _project_id;

		[Token(Token = "0x4001F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private string _appVersion;

		[Token(Token = "0x4001F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _tickRate;

		[Token(Token = "0x4001F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly Dictionary<uint, GameObject> _objectInstances;

		[Token(Token = "0x4001F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<(BonsaiTickEntry tickEntry, Dictionary<uint, BonsaiObjectEntry> objectEntries)> _replay;

		[Token(Token = "0x4001F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool _isPaused;

		[Token(Token = "0x4001F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float _replayTime;

		[Token(Token = "0x4001FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float _lastProgressLogTime;

		[Token(Token = "0x4001FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private AssetBundle _assetBundle;

		[Token(Token = "0x4001FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool _readyToStartPlaying;

		[Token(Token = "0x4001FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private string _accessToken;

		[Token(Token = "0x4001FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private string _apiQueryBase;

		[Token(Token = "0x60021A2")]
		[Address(RVA = "0xD9C55C", Offset = "0xD9C55C", VA = "0xD9C55C")]
		private void Start()
		{
		}

		[Token(Token = "0x60021A3")]
		[Address(RVA = "0xD9C588", Offset = "0xD9C588", VA = "0xD9C588")]
		private void Update()
		{
		}

		[Token(Token = "0x60021A4")]
		[Address(RVA = "0xD9D860", Offset = "0xD9D860", VA = "0xD9D860")]
		[IteratorStateMachine(typeof(<GetAssetBundle>d__27))]
		private IEnumerator GetAssetBundle()
		{
			return null;
		}

		[Token(Token = "0x60021A5")]
		[Address(RVA = "0xD9D8F0", Offset = "0xD9D8F0", VA = "0xD9D8F0")]
		public void SetSession(string msgJson)
		{
		}

		[Token(Token = "0x60021A6")]
		[Address(RVA = "0xD9D9D0", Offset = "0xD9D9D0", VA = "0xD9D9D0")]
		[IteratorStateMachine(typeof(<SetSessionCoroutine>d__30))]
		private IEnumerator SetSessionCoroutine()
		{
			return null;
		}

		[Token(Token = "0x60021A7")]
		[Address(RVA = "0xD9DA60", Offset = "0xD9DA60", VA = "0xD9DA60")]
		public void ClearAssetCache()
		{
		}

		[Token(Token = "0x60021A8")]
		[Address(RVA = "0xD9DA68", Offset = "0xD9DA68", VA = "0xD9DA68")]
		public void TogglePause()
		{
		}

		[Token(Token = "0x60021A9")]
		[Address(RVA = "0xD9DAB8", Offset = "0xD9DAB8", VA = "0xD9DAB8")]
		public void SliderChange()
		{
		}

		[Token(Token = "0x60021AA")]
		[Address(RVA = "0xD9DB14", Offset = "0xD9DB14", VA = "0xD9DB14")]
		private void UpdateSlider()
		{
		}

		[Token(Token = "0x60021AB")]
		[Address(RVA = "0xD9D4C4", Offset = "0xD9D4C4", VA = "0xD9D4C4")]
		private float ReplayStartTime()
		{
			return default(float);
		}

		[Token(Token = "0x60021AC")]
		[Address(RVA = "0xD9DF30", Offset = "0xD9DF30", VA = "0xD9DF30")]
		private float ReplayEndTime()
		{
			return default(float);
		}

		[Token(Token = "0x60021AD")]
		[Address(RVA = "0xD9D498", Offset = "0xD9D498", VA = "0xD9D498")]
		private float TotalReplayTime()
		{
			return default(float);
		}

		[Token(Token = "0x60021AE")]
		[Address(RVA = "0xD9DFAC", Offset = "0xD9DFAC", VA = "0xD9DFAC")]
		private int LoadPrefabFromAssets(uint instanceId, uint prefabId)
		{
			return default(int);
		}

		[Token(Token = "0x60021AF")]
		[Address(RVA = "0xD9D544", Offset = "0xD9D544", VA = "0xD9D544")]
		private GameObject GetOrCreateObjectInstance(uint instanceId, uint prefabId)
		{
			return null;
		}

		[Token(Token = "0x60021B0")]
		[Address(RVA = "0xD9E118", Offset = "0xD9E118", VA = "0xD9E118")]
		private List<(BonsaiTickEntry, Dictionary<uint, BonsaiObjectEntry>)> ReadReplaySafe(MemoryStream memoryStream)
		{
			return null;
		}

		[Token(Token = "0x60021B1")]
		[Address(RVA = "0xD9F2FC", Offset = "0xD9F2FC", VA = "0xD9F2FC")]
		[IteratorStateMachine(typeof(<DownloadAndLoadReplay>d__41))]
		private IEnumerator DownloadAndLoadReplay()
		{
			return null;
		}

		[Token(Token = "0x60021B2")]
		[Address(RVA = "0xD9F38C", Offset = "0xD9F38C", VA = "0xD9F38C")]
		private void ReadAndLoadReplay(MemoryStream memoryStream)
		{
		}

		[Token(Token = "0x60021B3")]
		[Address(RVA = "0xD9F3A8", Offset = "0xD9F3A8", VA = "0xD9F3A8")]
		private void LogProgress(float progress)
		{
		}

		[Token(Token = "0x60021B4")]
		[Address(RVA = "0xD9F540", Offset = "0xD9F540", VA = "0xD9F540")]
		private bool ProcessHeader(BonsaiChunkHeaderEntry header)
		{
			return default(bool);
		}

		[Token(Token = "0x60021B5")]
		[Address(RVA = "0xD9E3C8", Offset = "0xD9E3C8", VA = "0xD9E3C8")]
		private List<(BonsaiTickEntry, Dictionary<uint, BonsaiObjectEntry>)> ReadReplay(MemoryStream memoryStream, BinaryReader binaryReader)
		{
			return null;
		}

		[Token(Token = "0x60021B6")]
		[Address(RVA = "0xD9D85C", Offset = "0xD9D85C", VA = "0xD9D85C")]
		private static void LogError(string msg)
		{
		}

		[Token(Token = "0x60021B7")]
		[Address(RVA = "0xD9F6C4", Offset = "0xD9F6C4", VA = "0xD9F6C4")]
		public BonsaiReplayManager()
		{
		}
	}
	[Token(Token = "0x20005F0")]
	public class BonsaiSliderManager : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x17000592")]
		public bool pointerDown
		{
			[Token(Token = "0x60021D5")]
			[Address(RVA = "0xDA1008", Offset = "0xDA1008", VA = "0xDA1008")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60021D6")]
			[Address(RVA = "0xDA1010", Offset = "0xDA1010", VA = "0xDA1010")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60021D7")]
		[Address(RVA = "0xDA101C", Offset = "0xDA101C", VA = "0xDA101C", Slot = "4")]
		public void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60021D8")]
		[Address(RVA = "0xDA1028", Offset = "0xDA1028", VA = "0xDA1028", Slot = "5")]
		public void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60021D9")]
		[Address(RVA = "0xDA1030", Offset = "0xDA1030", VA = "0xDA1030")]
		public BonsaiSliderManager()
		{
		}
	}
	[Token(Token = "0x20005F1")]
	public class BonsaiTickData
	{
		[Token(Token = "0x4001FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public long timeTicks;

		[Token(Token = "0x4001FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float unscaledTime;

		[Token(Token = "0x4001FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float deltaTime;

		[Token(Token = "0x4001FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float handleTickTime;

		[Token(Token = "0x4001FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<BonsaiTrackedObjectData> objectData;

		[Token(Token = "0x4001FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<uint> destroyedObjectIds;

		[Token(Token = "0x60021DA")]
		[Address(RVA = "0xDA1038", Offset = "0xDA1038", VA = "0xDA1038")]
		public BonsaiTickData()
		{
		}

		[Token(Token = "0x60021DB")]
		[Address(RVA = "0xDA1100", Offset = "0xDA1100", VA = "0xDA1100")]
		public BonsaiTickData Init(long timeTicks, float unscaledTime, float deltaTime, float handleTickTime)
		{
			return null;
		}
	}
	[Token(Token = "0x20005F2")]
	public class BonsaiTrackedObjectData
	{
		[Token(Token = "0x4001FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint instanceId;

		[Token(Token = "0x4001FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ushort prefabId;

		[Token(Token = "0x4001FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public bool activeInHierarchy;

		[Token(Token = "0x4001FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector3 position;

		[Token(Token = "0x4001FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Quaternion rotation;

		[Token(Token = "0x4001FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public UnityEngine.Vector3 localScale;

		[Token(Token = "0x4001FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Dictionary<int, float> animationFloats;

		[Token(Token = "0x4001FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Dictionary<int, int> animationInts;

		[Token(Token = "0x4001FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Dictionary<int, bool> animationBools;

		[Token(Token = "0x60021DC")]
		[Address(RVA = "0xDA11B8", Offset = "0xDA11B8", VA = "0xDA11B8")]
		public BonsaiTrackedObjectData Init(uint instanceId, ushort prefabId, Transform transform, bool activeInHierarchy, Animator animator)
		{
			return null;
		}

		[Token(Token = "0x60021DD")]
		[Address(RVA = "0xDA14CC", Offset = "0xDA14CC", VA = "0xDA14CC")]
		public BonsaiTrackedObjectData Init(BonsaiTrackedObjectData bonsaiTrackedObjectData)
		{
			return null;
		}

		[Token(Token = "0x60021DE")]
		[Address(RVA = "0xDA1990", Offset = "0xDA1990", VA = "0xDA1990")]
		public BonsaiTrackedObjectData()
		{
		}
	}
	[Token(Token = "0x20005F3")]
	public class BonsaiTrackedObjectDataChangeTracker
	{
		[Token(Token = "0x4001FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Dictionary<uint, bool> _lastObjectActive;

		[Token(Token = "0x4001FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Dictionary<uint, BonsaiTrackedObjectData> _lastObjectData;

		[Token(Token = "0x4001FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly BonsaiObjectPool<BonsaiTrackedObjectData> _bonsaiTrackedObjectDataPool;

		[Token(Token = "0x4001FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<(int, float)> newFloats;

		[Token(Token = "0x4001FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly List<(int, int)> newInts;

		[Token(Token = "0x4001FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly List<(int, bool)> newBools;

		[Token(Token = "0x60021DF")]
		[Address(RVA = "0xDA1AA0", Offset = "0xDA1AA0", VA = "0xDA1AA0")]
		public void RemoveLastDataFor(uint id)
		{
		}

		[Token(Token = "0x60021E0")]
		[Address(RVA = "0xDA1BA0", Offset = "0xDA1BA0", VA = "0xDA1BA0")]
		public void ClearLastData()
		{
		}

		[Token(Token = "0x60021E1")]
		[Address(RVA = "0xDA1D74", Offset = "0xDA1D74", VA = "0xDA1D74")]
		public (bool, bool, bool, bool, List<(int, float)>, List<(int, int)>, List<(int, bool)>) GetTrackedObjectIsNew(BonsaiTrackedObjectData bonsaiTrackedObjectData)
		{
			return default((bool, bool, bool, bool, List<(int, float)>, List<(int, int)>, List<(int, bool)>));
		}

		[Token(Token = "0x60021E2")]
		[Address(RVA = "0xDA2F28", Offset = "0xDA2F28", VA = "0xDA2F28")]
		public BonsaiTrackedObjectDataChangeTracker()
		{
		}
	}
	[Token(Token = "0x20005F5")]
	[DisallowMultipleComponent]
	[DefaultExecutionOrder(-1)]
	public class BonsaiTrackingManager : MonoBehaviour
	{
		[Token(Token = "0x20005F6")]
		public enum BonsaiLogLevel
		{
			[Token(Token = "0x4001FF0")]
			None,
			[Token(Token = "0x4001FF1")]
			Error,
			[Token(Token = "0x4001FF2")]
			Warning,
			[Token(Token = "0x4001FF3")]
			Info,
			[Token(Token = "0x4001FF4")]
			PerformanceProfiling
		}

		[Token(Token = "0x20005F7")]
		public enum ReservedTrackedObjectInstanceIds
		{
			[Token(Token = "0x4001FF6")]
			CenterEye = 1,
			[Token(Token = "0x4001FF7")]
			LeftHand,
			[Token(Token = "0x4001FF8")]
			RightHand
		}

		[Token(Token = "0x4001FD5")]
		private const short TickRate = 20;

		[Token(Token = "0x4001FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _recording;

		[Token(Token = "0x4001FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string token;

		[Token(Token = "0x4001FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BonsaiLogLevel logLevel;

		[Token(Token = "0x4001FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool recordOnStart;

		[Token(Token = "0x4001FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float recordOnStartMaxLengthMinutes;

		[Token(Token = "0x4001FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _recordingAutoStopUnscaledTime;

		[Token(Token = "0x4001FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string _userId;

		[Token(Token = "0x4001FDD")]
		public const string ApiInputBase = "https://api.bonsaidesk.com/input/v1";

		[Token(Token = "0x4001FDE")]
		public const string ApiQueryBase = "https://api.bonsaidesk.com/query/v1";

		[Token(Token = "0x4001FDF")]
		public const int NumTrackedObjectsExpectedUpperEnd = 250;

		[Token(Token = "0x4001FE0")]
		public const int TicksInPipelineExpectedUpperEnd = 5;

		[Token(Token = "0x4001FE1")]
		public const int EventsInPacketExpectedUpperEnd = 100;

		[Token(Token = "0x4001FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private uint _lastUsedTrackedObjectInstanceId;

		[Token(Token = "0x4001FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static BonsaiTrackingManager _instance;

		[Token(Token = "0x4001FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly List<BonsaiTrackObject> _trackedObjects;

		[Token(Token = "0x4001FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly List<Transform> _trackedObjectTransforms;

		[Token(Token = "0x4001FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly List<GameObject> _trackedObjectGameObjects;

		[Token(Token = "0x4001FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Queue<uint> _destroyedObjectIds;

		[Token(Token = "0x4001FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly Queue<BonsaiEvent> _bonsaiEvents;

		[Token(Token = "0x4001FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private BonsaiObjectPool<BonsaiEvent> _bonsaiEventsPool;

		[Token(Token = "0x4001FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float _lastTickTime;

		[Token(Token = "0x4001FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BonsaiTrackingManagerWorker _worker;

		[Token(Token = "0x17000593")]
		public Transform centerEye
		{
			[Token(Token = "0x60021E6")]
			[Address(RVA = "0xDA326C", Offset = "0xDA326C", VA = "0xDA326C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60021E7")]
			[Address(RVA = "0xDA3274", Offset = "0xDA3274", VA = "0xDA3274")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000594")]
		public Transform leftHandAnchor
		{
			[Token(Token = "0x60021E8")]
			[Address(RVA = "0xDA327C", Offset = "0xDA327C", VA = "0xDA327C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60021E9")]
			[Address(RVA = "0xDA3284", Offset = "0xDA3284", VA = "0xDA3284")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000595")]
		public Transform rightHandAnchor
		{
			[Token(Token = "0x60021EA")]
			[Address(RVA = "0xDA328C", Offset = "0xDA328C", VA = "0xDA328C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60021EB")]
			[Address(RVA = "0xDA3294", Offset = "0xDA3294", VA = "0xDA3294")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000596")]
		public static BonsaiTrackingManager instance
		{
			[Token(Token = "0x60021EC")]
			[Address(RVA = "0xDA329C", Offset = "0xDA329C", VA = "0xDA329C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60021ED")]
		[Address(RVA = "0xDA32E4", Offset = "0xDA32E4", VA = "0xDA32E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60021EE")]
		[Address(RVA = "0xDA3E1C", Offset = "0xDA3E1C", VA = "0xDA3E1C")]
		private void Update()
		{
		}

		[Token(Token = "0x60021EF")]
		[Address(RVA = "0xDA3E3C", Offset = "0xDA3E3C", VA = "0xDA3E3C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60021F0")]
		[Address(RVA = "0xDA46D4", Offset = "0xDA46D4", VA = "0xDA46D4")]
		public void StartRecording()
		{
		}

		[Token(Token = "0x60021F1")]
		[Address(RVA = "0xDA3D88", Offset = "0xDA3D88", VA = "0xDA3D88")]
		public void StartRecording(float maxLengthMinutes)
		{
		}

		[Token(Token = "0x60021F2")]
		[Address(RVA = "0xDA4068", Offset = "0xDA4068", VA = "0xDA4068")]
		public void StopRecording()
		{
		}

		[Token(Token = "0x60021F3")]
		[Address(RVA = "0xDA46E0", Offset = "0xDA46E0", VA = "0xDA46E0")]
		public void SetUserId(string userId)
		{
		}

		[Token(Token = "0x60021F4")]
		[Address(RVA = "0xDA4700", Offset = "0xDA4700", VA = "0xDA4700")]
		public uint GetTrackedObjectInstanceId()
		{
			return default(uint);
		}

		[Token(Token = "0x60021F5")]
		[Address(RVA = "0xDA47A4", Offset = "0xDA47A4", VA = "0xDA47A4")]
		public void RegisterObject(BonsaiTrackObject trackObject)
		{
		}

		[Token(Token = "0x60021F6")]
		[Address(RVA = "0xDA49DC", Offset = "0xDA49DC", VA = "0xDA49DC")]
		public void UnregisterObject(BonsaiTrackObject trackObject)
		{
		}

		[Token(Token = "0x60021F7")]
		[Address(RVA = "0xDA4B08", Offset = "0xDA4B08", VA = "0xDA4B08")]
		public void TrackEvent(string eventName)
		{
		}

		[Token(Token = "0x60021F8")]
		[Address(RVA = "0xDA40A0", Offset = "0xDA40A0", VA = "0xDA40A0")]
		private void HandleTick(float startTime)
		{
		}

		[Token(Token = "0x60021F9")]
		[Address(RVA = "0xDA4DA4", Offset = "0xDA4DA4", VA = "0xDA4DA4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60021FA")]
		[Address(RVA = "0xDA4E84", Offset = "0xDA4E84", VA = "0xDA4E84")]
		public BonsaiTrackingManager()
		{
		}
	}
	[Token(Token = "0x20005F9")]
	public class BonsaiTrackingManagerWorker
	{
		[StructLayout(3)]
		[Token(Token = "0x20005FB")]
		[CompilerGenerated]
		private struct <ProcessReplayBuffer>d__56 : IAsyncStateMachine
		{
			[Token(Token = "0x4002027")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4002028")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4002029")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public BonsaiTrackingManagerWorker <>4__this;

			[Token(Token = "0x400202A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int chunkType;

			[Token(Token = "0x400202B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <chunkId>5__2;

			[Token(Token = "0x400202C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private byte[] <bytes>5__3;

			[Token(Token = "0x400202D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private ByteArrayContent <content>5__4;

			[Token(Token = "0x400202E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private TaskAwaiter<HttpResponseMessage> <>u__1;

			[Token(Token = "0x600221D")]
			[Address(RVA = "0xDA644C", Offset = "0xDA644C", VA = "0xDA644C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600221E")]
			[Address(RVA = "0xDA6EAC", Offset = "0xDA6EAC", VA = "0xDA6EAC", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x20005FC")]
		[CompilerGenerated]
		private struct <ProcessEventBuffer>d__57 : IAsyncStateMachine
		{
			[Token(Token = "0x400202F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4002030")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncVoidMethodBuilder <>t__builder;

			[Token(Token = "0x4002031")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public BonsaiTrackingManagerWorker <>4__this;

			[Token(Token = "0x4002032")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private byte[] <bytes>5__2;

			[Token(Token = "0x4002033")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private ByteArrayContent <content>5__3;

			[Token(Token = "0x4002034")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private TaskAwaiter<HttpResponseMessage> <>u__1;

			[Token(Token = "0x600221F")]
			[Address(RVA = "0xDA6EB8", Offset = "0xDA6EB8", VA = "0xDA6EB8", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6002220")]
			[Address(RVA = "0xDA7698", Offset = "0xDA7698", VA = "0xDA7698", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x4001FFB")]
		public const short ReplayVersion = 1;

		[Token(Token = "0x4001FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Thread _thread;

		[Token(Token = "0x4001FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _shouldStop;

		[Token(Token = "0x4001FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float unscaledTime;

		[Token(Token = "0x4001FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly short _tickRate;

		[Token(Token = "0x4002000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly string _appVersion;

		[Token(Token = "0x4002001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string _sessionId;

		[Token(Token = "0x4002002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int _nextChunkId;

		[Token(Token = "0x4002003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string _token;

		[Token(Token = "0x4002004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int _numTicksWrittenToBuffer;

		[Token(Token = "0x4002005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private long _firstTickTimeTicks;

		[Token(Token = "0x4002006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private long _lastTickTimeTicks;

		[Token(Token = "0x4002007")]
		private const float MaxTimeBeforeProcessingBuffer = 5f;

		[Token(Token = "0x4002008")]
		private const int AllowedNumOutstandingHttpRequests = 5;

		[Token(Token = "0x4002009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BonsaiTrackingManager.BonsaiLogLevel _logLevel;

		[Token(Token = "0x400200A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string _userId;

		[Token(Token = "0x400200B")]
		private const int ReplayBufferLength = 1048576;

		[Token(Token = "0x400200C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly BonsaiBuffer _replayBuffer;

		[Token(Token = "0x400200D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _lastReplayBufferProcessUnscaledTime;

		[Token(Token = "0x400200E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private readonly BonsaiObjectPool<byte[]> _replayByteArrayPool;

		[Token(Token = "0x400200F")]
		private const int EventBufferLength = 204800;

		[Token(Token = "0x4002010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private readonly BonsaiBuffer _eventBuffer;

		[Token(Token = "0x4002011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float _lastEventBufferProcessUnscaledTime;

		[Token(Token = "0x4002012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly BonsaiObjectPool<byte[]> _eventByteArrayPool;

		[Token(Token = "0x4002013")]
		private const string JsonStart = "{\"batch\":[";

		[Token(Token = "0x4002014")]
		private const string JsonEnd = "],\"timestamp\":\"yyyy-MM-ddTHH:mm:ss.fffZ\",\"sentAt\":\"yyyy-MM-ddTHH:mm:ss.fffZ\"}";

		[Token(Token = "0x4002015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int _headerLength;

		[Token(Token = "0x4002016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _sentInitialChunk;

		[Token(Token = "0x4002017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private readonly List<BonsaiTickData> _tickDataWorkerCopy;

		[Token(Token = "0x4002018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private readonly List<BonsaiEvent> _eventsWorkerCopy;

		[Token(Token = "0x4002019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly BonsaiTrackedObjectDataChangeTracker bonsaiTrackedObjectDataChangeTracker;

		[Token(Token = "0x400201A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private HttpClient _httpClient;

		[Token(Token = "0x400201B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private readonly Mutex _mutex;

		[Token(Token = "0x400201C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly List<BonsaiTickData> _tickData;

		[Token(Token = "0x400201D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private readonly List<BonsaiEvent> _events;

		[Token(Token = "0x400201E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private readonly BonsaiObjectPool<BonsaiTickData> _bonsaiTickDataPool;

		[Token(Token = "0x400201F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private readonly BonsaiObjectPool<BonsaiTrackedObjectData> _bonsaiTrackedObjectDataPool;

		[Token(Token = "0x4002020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly BonsaiObjectPool<BonsaiEvent> _bonsaiEventsPool;

		[Token(Token = "0x17000597")]
		public string SessionId
		{
			[Token(Token = "0x60021FE")]
			[Address(RVA = "0xDA50D4", Offset = "0xDA50D4", VA = "0xDA50D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60021FF")]
		[Address(RVA = "0xDA3670", Offset = "0xDA3670", VA = "0xDA3670")]
		public BonsaiTrackingManagerWorker(string token, string sessionId, float currentTime, short tickRate, string appVersion, BonsaiTrackingManager.BonsaiLogLevel logLevel, string userId)
		{
		}

		[Token(Token = "0x6002200")]
		[Address(RVA = "0xDA50DC", Offset = "0xDA50DC", VA = "0xDA50DC", Slot = "1")]
		~BonsaiTrackingManagerWorker()
		{
		}

		[Token(Token = "0x6002201")]
		[Address(RVA = "0xDA5190", Offset = "0xDA5190", VA = "0xDA5190")]
		private void Process()
		{
		}

		[Token(Token = "0x6002202")]
		[Address(RVA = "0xDA51C8", Offset = "0xDA51C8", VA = "0xDA51C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6002203")]
		[Address(RVA = "0xDA57C4", Offset = "0xDA57C4", VA = "0xDA57C4")]
		private void Stop()
		{
		}

		[Token(Token = "0x6002204")]
		[Address(RVA = "0xDA51CC", Offset = "0xDA51CC", VA = "0xDA51CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002205")]
		[Address(RVA = "0xDA5A30", Offset = "0xDA5A30", VA = "0xDA5A30")]
		private void SendInitialChunkAndPrepareBuffer()
		{
		}

		[Token(Token = "0x6002206")]
		[Address(RVA = "0xDA5B2C", Offset = "0xDA5B2C", VA = "0xDA5B2C")]
		private void HandleTick(BonsaiTickData bonsaiTickData)
		{
		}

		[Token(Token = "0x6002207")]
		[Address(RVA = "0xDA5C40", Offset = "0xDA5C40", VA = "0xDA5C40")]
		private bool TryWriteTick(BonsaiTickData bonsaiTickData)
		{
			return default(bool);
		}

		[Token(Token = "0x6002208")]
		[Address(RVA = "0xDA5D2C", Offset = "0xDA5D2C", VA = "0xDA5D2C")]
		private void WriteTick(BonsaiTickData bonsaiTickData)
		{
		}

		[Token(Token = "0x6002209")]
		[Address(RVA = "0xDA5BB8", Offset = "0xDA5BB8", VA = "0xDA5BB8")]
		private void HandleEvent(BonsaiEvent bonsaiEvent)
		{
		}

		[Token(Token = "0x600220A")]
		[Address(RVA = "0xDA5FB0", Offset = "0xDA5FB0", VA = "0xDA5FB0")]
		private bool TryWriteEvent(BonsaiEvent bonsaiEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x600220B")]
		[Address(RVA = "0xDA6060", Offset = "0xDA6060", VA = "0xDA6060")]
		private void WriteEvent(BonsaiEvent bonsaiEvent)
		{
		}

		[Token(Token = "0x600220C")]
		[Address(RVA = "0xDA4C00", Offset = "0xDA4C00", VA = "0xDA4C00")]
		public BonsaiTickData AddBonsaiTickData()
		{
			return null;
		}

		[Token(Token = "0x600220D")]
		[Address(RVA = "0xDA4CD0", Offset = "0xDA4CD0", VA = "0xDA4CD0")]
		public BonsaiTrackedObjectData AddBonsaiTrackedObjectData(BonsaiTickData bonsaiTickData)
		{
			return null;
		}

		[Token(Token = "0x600220E")]
		[Address(RVA = "0xDA455C", Offset = "0xDA455C", VA = "0xDA455C")]
		public BonsaiEvent AddBonsaiEvent()
		{
			return null;
		}

		[Token(Token = "0x600220F")]
		[Address(RVA = "0xDA58F8", Offset = "0xDA58F8", VA = "0xDA58F8")]
		[AsyncStateMachine(typeof(<ProcessReplayBuffer>d__56))]
		private void ProcessReplayBuffer(int chunkType)
		{
		}

		[Token(Token = "0x6002210")]
		[Address(RVA = "0xDA599C", Offset = "0xDA599C", VA = "0xDA599C")]
		[AsyncStateMachine(typeof(<ProcessEventBuffer>d__57))]
		private void ProcessEventBuffer()
		{
		}

		[Token(Token = "0x6002211")]
		[Address(RVA = "0xDA6240", Offset = "0xDA6240", VA = "0xDA6240")]
		public void SetUserId(string userId)
		{
		}

		[Token(Token = "0x6002212")]
		[Address(RVA = "0xDA4080", Offset = "0xDA4080", VA = "0xDA4080")]
		public void WaitOne()
		{
		}

		[Token(Token = "0x6002213")]
		[Address(RVA = "0xDA462C", Offset = "0xDA462C", VA = "0xDA462C")]
		public void ReleaseMutex()
		{
		}

		[Token(Token = "0x6002214")]
		[Address(RVA = "0xDA4E5C", Offset = "0xDA4E5C", VA = "0xDA4E5C")]
		public void ShouldStop()
		{
		}

		[Token(Token = "0x6002215")]
		[Address(RVA = "0xDA4E68", Offset = "0xDA4E68", VA = "0xDA4E68")]
		public bool Join(int millisecondsTimeout)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20005FD")]
	public static class BonsaiUtility
	{
		[Token(Token = "0x6002221")]
		[Address(RVA = "0xDA4648", Offset = "0xDA4648", VA = "0xDA4648")]
		public static void Log(object message)
		{
		}

		[Token(Token = "0x6002222")]
		[Address(RVA = "0xD9BC00", Offset = "0xD9BC00", VA = "0xD9BC00")]
		public static void LogWarning(object message)
		{
		}

		[Token(Token = "0x6002223")]
		[Address(RVA = "0xD9F638", Offset = "0xD9F638", VA = "0xD9F638")]
		public static void LogError(object message)
		{
		}

		[Token(Token = "0x6002224")]
		[Address(RVA = "0xDA76A4", Offset = "0xDA76A4", VA = "0xDA76A4")]
		public static string HashMesh(Mesh mesh)
		{
			return null;
		}

		[Token(Token = "0x6002225")]
		[Address(RVA = "0xDA79FC", Offset = "0xDA79FC", VA = "0xDA79FC")]
		public static byte[] Compress(byte[] data)
		{
			return null;
		}

		[Token(Token = "0x6002226")]
		[Address(RVA = "0xDA7BE4", Offset = "0xDA7BE4", VA = "0xDA7BE4")]
		public static byte[] Decompress(byte[] data)
		{
			return null;
		}
	}
	[Token(Token = "0x20005FE")]
	public class BonsaiTrackCenterEye : MonoBehaviour
	{
		[Token(Token = "0x6002227")]
		[Address(RVA = "0xDA7DD0", Offset = "0xDA7DD0", VA = "0xDA7DD0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002228")]
		[Address(RVA = "0xDA7E34", Offset = "0xDA7E34", VA = "0xDA7E34")]
		public BonsaiTrackCenterEye()
		{
		}
	}
	[Token(Token = "0x20005FF")]
	public class BonsaiTrackHandAnchor : MonoBehaviour
	{
		[Token(Token = "0x2000600")]
		public enum Hand
		{
			[Token(Token = "0x4002037")]
			None,
			[Token(Token = "0x4002038")]
			Left,
			[Token(Token = "0x4002039")]
			Right
		}

		[Token(Token = "0x4002035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Hand hand;

		[Token(Token = "0x6002229")]
		[Address(RVA = "0xDA7E3C", Offset = "0xDA7E3C", VA = "0xDA7E3C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600222A")]
		[Address(RVA = "0xDA7F68", Offset = "0xDA7F68", VA = "0xDA7F68")]
		public BonsaiTrackHandAnchor()
		{
		}
	}
	[Token(Token = "0x2000601")]
	[DisallowMultipleComponent]
	public class BonsaiTrackObject : MonoBehaviour
	{
		[Token(Token = "0x400203A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ushort prefabId;

		[Token(Token = "0x400203B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private uint _instanceId;

		[Token(Token = "0x400203C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator _animator;

		[Token(Token = "0x17000598")]
		public uint instanceId
		{
			[Token(Token = "0x600222B")]
			[Address(RVA = "0xDA7F70", Offset = "0xDA7F70", VA = "0xDA7F70")]
			get
			{
				return default(uint);
			}
		}

		[Token(Token = "0x17000599")]
		public Animator animator
		{
			[Token(Token = "0x600222C")]
			[Address(RVA = "0xDA7F78", Offset = "0xDA7F78", VA = "0xDA7F78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600222D")]
		[Address(RVA = "0xDA7F80", Offset = "0xDA7F80", VA = "0xDA7F80")]
		private void Awake()
		{
		}

		[Token(Token = "0x600222E")]
		[Address(RVA = "0xDA8194", Offset = "0xDA8194", VA = "0xDA8194")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600222F")]
		[Address(RVA = "0xDA8274", Offset = "0xDA8274", VA = "0xDA8274")]
		public BonsaiTrackObject()
		{
		}
	}
}
namespace Bhaptics.Tact.Unity
{
	[Token(Token = "0x2000602")]
	public class AndroidHaptic : IHaptic
	{
		[Token(Token = "0x400203D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static AndroidJavaObject androidJavaObject;

		[Token(Token = "0x400203E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected List<HapticDevice> deviceList;

		[Token(Token = "0x400203F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<string> registeredCache;

		[Token(Token = "0x4002040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly object[] SubmitRegisteredParams;

		[Token(Token = "0x4002041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int[] Empty;

		[Token(Token = "0x4002042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly object[] EmptyParams;

		[Token(Token = "0x4002043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly RotationOption DefaultRotationOption;

		[Token(Token = "0x4002044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly object syncLock;

		[Token(Token = "0x4002045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<PositionType, int[]> updatedList;

		[Token(Token = "0x4002046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected IntPtr AndroidJavaObjectPtr;

		[Token(Token = "0x4002047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected IntPtr SubmitRegisteredPtr;

		[Token(Token = "0x4002048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected IntPtr SubmitRegisteredWithTimePtr;

		[Token(Token = "0x4002049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected IntPtr RegisterPtr;

		[Token(Token = "0x400204A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected IntPtr RegisterReflectedPtr;

		[Token(Token = "0x400204B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected IntPtr PingPtr;

		[Token(Token = "0x400204C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected IntPtr PingAllPtr;

		[Token(Token = "0x400204D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected IntPtr IsRegisteredPtr;

		[Token(Token = "0x400204E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected IntPtr IsPlayingPtr;

		[Token(Token = "0x400204F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected IntPtr IsPlayingAnythingPtr;

		[Token(Token = "0x4002050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected IntPtr ToggleStreamPtr;

		[Token(Token = "0x4002051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected IntPtr IsStreamingEnablePtr;

		[Token(Token = "0x4002052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected IntPtr GetStreamingHostsPtr;

		[Token(Token = "0x4002053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected IntPtr ShowBluetoothPtr;

		[Token(Token = "0x4002054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected IntPtr RefreshPairingInfoPtr;

		[Token(Token = "0x4002055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected IntPtr EnableDevicePtr;

		[Token(Token = "0x6002230")]
		[Address(RVA = "0xDA827C", Offset = "0xDA827C", VA = "0xDA827C")]
		public AndroidHaptic()
		{
		}

		[Token(Token = "0x6002231")]
		[Address(RVA = "0xDA8C08", Offset = "0xDA8C08", VA = "0xDA8C08")]
		public List<AndroidUtils.StreamHost> GetStreamingHosts()
		{
			return null;
		}

		[Token(Token = "0x6002232")]
		[Address(RVA = "0xDA8FF0", Offset = "0xDA8FF0", VA = "0xDA8FF0")]
		public bool IsStreamingEnable()
		{
			return default(bool);
		}

		[Token(Token = "0x6002233")]
		[Address(RVA = "0xDA90E8", Offset = "0xDA90E8", VA = "0xDA90E8")]
		public void ToggleStreaming()
		{
		}

		[Token(Token = "0x6002234")]
		[Address(RVA = "0xDA9204", Offset = "0xDA9204", VA = "0xDA9204", Slot = "4")]
		public bool IsConnect(PositionType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6002235")]
		[Address(RVA = "0xDA9370", Offset = "0xDA9370", VA = "0xDA9370", Slot = "5")]
		public bool IsConnect(HapticDeviceType type, bool isLeft = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6002236")]
		[Address(RVA = "0xDA9508", Offset = "0xDA9508", VA = "0xDA9508", Slot = "6")]
		public bool IsPlaying(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6002237")]
		[Address(RVA = "0xDA95F8", Offset = "0xDA95F8", VA = "0xDA95F8", Slot = "7")]
		public bool IsFeedbackRegistered(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6002238")]
		[Address(RVA = "0xDA9788", Offset = "0xDA9788", VA = "0xDA9788", Slot = "8")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6002239")]
		[Address(RVA = "0xDA981C", Offset = "0xDA981C", VA = "0xDA981C", Slot = "9")]
		public void RegisterTactFileStr(string key, string tactFileStr)
		{
		}

		[Token(Token = "0x600223A")]
		[Address(RVA = "0xDA9934", Offset = "0xDA9934", VA = "0xDA9934", Slot = "10")]
		public void RegisterTactFileStrReflected(string key, string tactFileStr)
		{
		}

		[Token(Token = "0x600223B")]
		[Address(RVA = "0xDA9A4C", Offset = "0xDA9A4C", VA = "0xDA9A4C", Slot = "11")]
		public void Submit(string key, PositionType position, List<DotPoint> points, int durationMillis)
		{
		}

		[Token(Token = "0x600223C")]
		[Address(RVA = "0xDA9F0C", Offset = "0xDA9F0C", VA = "0xDA9F0C", Slot = "12")]
		public void Submit(string key, PositionType position, List<PathPoint> points, int durationMillis)
		{
		}

		[Token(Token = "0x600223D")]
		[Address(RVA = "0xDAA484", Offset = "0xDAA484", VA = "0xDAA484", Slot = "13")]
		public void SubmitRegistered(string key, string altKey, ScaleOption option)
		{
		}

		[Token(Token = "0x600223E")]
		[Address(RVA = "0xDAA50C", Offset = "0xDAA50C", VA = "0xDAA50C", Slot = "14")]
		public void SubmitRegistered(string key, string altKey, RotationOption rOption, ScaleOption sOption)
		{
		}

		[Token(Token = "0x600223F")]
		[Address(RVA = "0xDAA7AC", Offset = "0xDAA7AC", VA = "0xDAA7AC", Slot = "15")]
		public void SubmitRegistered(string key)
		{
		}

		[Token(Token = "0x6002240")]
		[Address(RVA = "0xDAA7C4", Offset = "0xDAA7C4", VA = "0xDAA7C4", Slot = "16")]
		public void SubmitRegistered(string key, int startTimeMillis)
		{
		}

		[Token(Token = "0x6002241")]
		[Address(RVA = "0xDAA8D4", Offset = "0xDAA8D4", VA = "0xDAA8D4", Slot = "17")]
		public void TurnOff(string key)
		{
		}

		[Token(Token = "0x6002242")]
		[Address(RVA = "0xDAAAF8", Offset = "0xDAAAF8", VA = "0xDAAAF8", Slot = "18")]
		public void TurnOff()
		{
		}

		[Token(Token = "0x6002243")]
		[Address(RVA = "0xDAAD04", Offset = "0xDAAD04", VA = "0xDAAD04", Slot = "19")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002244")]
		[Address(RVA = "0xDAA52C", Offset = "0xDAA52C", VA = "0xDAA52C")]
		private void SubmitRequest(string key, string altKey, float intensity, float duration, float offsetAngleX, float offsetY)
		{
		}

		[Token(Token = "0x6002245")]
		[Address(RVA = "0xDAAE04", Offset = "0xDAAE04", VA = "0xDAAE04", Slot = "20")]
		public int[] GetCurrentFeedback(PositionType pos)
		{
			return null;
		}

		[Token(Token = "0x6002246")]
		[Address(RVA = "0xDA8B0C", Offset = "0xDA8B0C", VA = "0xDA8B0C")]
		public List<HapticDevice> GetDevices()
		{
			return null;
		}

		[Token(Token = "0x6002247")]
		[Address(RVA = "0xDAB23C", Offset = "0xDAB23C", VA = "0xDAB23C")]
		public void TogglePosition(string address)
		{
		}

		[Token(Token = "0x6002248")]
		[Address(RVA = "0xDAB370", Offset = "0xDAB370", VA = "0xDAB370")]
		public void PingAll()
		{
		}

		[Token(Token = "0x6002249")]
		[Address(RVA = "0xDAB400", Offset = "0xDAB400", VA = "0xDAB400")]
		public void Ping(string address)
		{
		}

		[Token(Token = "0x600224A")]
		[Address(RVA = "0xDAB4EC", Offset = "0xDAB4EC", VA = "0xDAB4EC")]
		public void ShowBluetoothSetting()
		{
		}

		[Token(Token = "0x600224B")]
		[Address(RVA = "0xDAB588", Offset = "0xDAB588", VA = "0xDAB588")]
		public void EnableDevice(string address, bool boo)
		{
		}

		[Token(Token = "0x600224C")]
		[Address(RVA = "0xDAB6C8", Offset = "0xDAB6C8", VA = "0xDAB6C8")]
		public void RefreshPairingInfo()
		{
		}

		[Token(Token = "0x600224D")]
		[Address(RVA = "0xDA9178", Offset = "0xDA9178", VA = "0xDA9178")]
		private void CallNativeVoidMethod(IntPtr methodPtr, object[] param)
		{
		}

		[Token(Token = "0x600224E")]
		[Address(RVA = "0xDA9058", Offset = "0xDA9058", VA = "0xDA9058")]
		private bool CallNativeBoolMethod(IntPtr methodPtr, object[] param)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x2000603")]
	public class HapticDevice
	{
		[Token(Token = "0x4002056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool IsPaired;

		[Token(Token = "0x4002057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool IsConnected;

		[Token(Token = "0x4002058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string DeviceName;

		[Token(Token = "0x4002059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PositionType Position;

		[Token(Token = "0x400205A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Address;

		[Token(Token = "0x400205B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PositionType[] Candidates;

		[Token(Token = "0x400205C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool IsEnable;

		[Token(Token = "0x400205D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool IsAudioJack;

		[Token(Token = "0x400205E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int Battery;

		[Token(Token = "0x6002250")]
		[Address(RVA = "0xDABC5C", Offset = "0xDABC5C", VA = "0xDABC5C")]
		public HapticDevice()
		{
		}
	}
	[Token(Token = "0x2000604")]
	public static class AndroidUtils
	{
		[Serializable]
		[Token(Token = "0x2000605")]
		private class Wrapper<T>
		{
			[Token(Token = "0x400205F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T[] array;

			[Token(Token = "0x600225A")]
			public Wrapper()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000606")]
		private class Device
		{
			[Token(Token = "0x4002060")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool paired;

			[Token(Token = "0x4002061")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string deviceName;

			[Token(Token = "0x4002062")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int position;

			[Token(Token = "0x4002063")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool connected;

			[Token(Token = "0x4002064")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string address;

			[Token(Token = "0x4002065")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int battery;

			[Token(Token = "0x4002066")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public bool enable;

			[Token(Token = "0x4002067")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
			public bool audioJackIn;

			[Token(Token = "0x600225B")]
			[Address(RVA = "0xDABF00", Offset = "0xDABF00", VA = "0xDABF00")]
			public Device()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000607")]
		public class StreamHost
		{
			[Token(Token = "0x4002068")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string ip;

			[Token(Token = "0x4002069")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool connected;

			[Token(Token = "0x600225C")]
			[Address(RVA = "0xDABF08", Offset = "0xDABF08", VA = "0xDABF08")]
			public StreamHost()
			{
			}
		}

		[Token(Token = "0x6002251")]
		[Address(RVA = "0xDABC64", Offset = "0xDABC64", VA = "0xDABC64")]
		private static PositionType ToDeviceType(int type)
		{
			return default(PositionType);
		}

		[Token(Token = "0x6002252")]
		[Address(RVA = "0xDABC88", Offset = "0xDABC88", VA = "0xDABC88")]
		private static PositionType[] ToCandidates(int type)
		{
			return null;
		}

		[Token(Token = "0x6002253")]
		[Address(RVA = "0xDABDFC", Offset = "0xDABDFC", VA = "0xDABDFC")]
		public static bool IsLeft(PositionType pos)
		{
			return default(bool);
		}

		[Token(Token = "0x6002254")]
		[Address(RVA = "0xDABE24", Offset = "0xDABE24", VA = "0xDABE24")]
		public static bool CanChangePosition(PositionType pos)
		{
			return default(bool);
		}

		[Token(Token = "0x6002255")]
		public static T[] GetJsonArray<T>(string json)
		{
			return null;
		}

		[Token(Token = "0x6002256")]
		[Address(RVA = "0xDABE34", Offset = "0xDABE34", VA = "0xDABE34")]
		private static HapticDevice Convert(Device d)
		{
			return null;
		}

		[Token(Token = "0x6002257")]
		[Address(RVA = "0xDAB0F0", Offset = "0xDAB0F0", VA = "0xDAB0F0")]
		public static List<HapticDevice> ConvertToBhapticsDevices(string[] deviceJson)
		{
			return null;
		}

		[Token(Token = "0x6002258")]
		[Address(RVA = "0xDAB764", Offset = "0xDAB764", VA = "0xDAB764")]
		public static void CallNativeVoidMethod(IntPtr androidObjPtr, IntPtr methodPtr, object[] param)
		{
		}

		[Token(Token = "0x6002259")]
		[Address(RVA = "0xDAB960", Offset = "0xDAB960", VA = "0xDAB960")]
		public static bool CallNativeBoolMethod(IntPtr androidObjPtr, IntPtr methodPtr, object[] param)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000608")]
	public class AndroidWidget_ControlButton : MonoBehaviour
	{
		[Token(Token = "0x400206A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private PositionType DeviceType;

		[Token(Token = "0x400206B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Header("Images")]
		private Sprite defaultImage;

		[Token(Token = "0x400206C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Sprite pairImage;

		[Token(Token = "0x400206D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Sprite defaultHoverImage;

		[Token(Token = "0x400206E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Sprite pairHoverImage;

		[Token(Token = "0x400206F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform pairDeviceCount;

		[Token(Token = "0x4002070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Button button;

		[Token(Token = "0x600225D")]
		[Address(RVA = "0xDABF10", Offset = "0xDABF10", VA = "0xDABF10")]
		private void Awake()
		{
		}

		[Token(Token = "0x600225E")]
		[Address(RVA = "0xDABFC4", Offset = "0xDABFC4", VA = "0xDABFC4")]
		public void Refresh()
		{
		}

		[Token(Token = "0x600225F")]
		[Address(RVA = "0xDAC748", Offset = "0xDAC748", VA = "0xDAC748")]
		public void OnPingDevice()
		{
		}

		[Token(Token = "0x6002260")]
		[Address(RVA = "0xDAC9B0", Offset = "0xDAC9B0", VA = "0xDAC9B0")]
		public void OnClickDevice()
		{
		}

		[Token(Token = "0x6002261")]
		[Address(RVA = "0xDACA3C", Offset = "0xDACA3C", VA = "0xDACA3C")]
		public AndroidWidget_ControlButton()
		{
		}
	}
	[Token(Token = "0x2000609")]
	public class AndroidWidget_ObjectPool : MonoBehaviour
	{
		[Token(Token = "0x4002071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ScrollRect pariedDeviceScrollrect;

		[Token(Token = "0x4002072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AndroidWidget_PairedDeviceUI pairedDeviceUIGameObject;

		[Token(Token = "0x4002073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private int objectCount;

		[Token(Token = "0x4002074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<AndroidWidget_PairedDeviceUI> pairedUIList;

		[Token(Token = "0x6002262")]
		[Address(RVA = "0xDACA44", Offset = "0xDACA44", VA = "0xDACA44")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002263")]
		[Address(RVA = "0xDACC08", Offset = "0xDACC08", VA = "0xDACC08")]
		public AndroidWidget_PairedDeviceUI GetPairedDeviceUI()
		{
			return null;
		}

		[Token(Token = "0x6002264")]
		[Address(RVA = "0xDACCC8", Offset = "0xDACCC8", VA = "0xDACCC8")]
		public void DisableAll()
		{
		}

		[Token(Token = "0x6002265")]
		[Address(RVA = "0xDACD64", Offset = "0xDACD64", VA = "0xDACD64")]
		public AndroidWidget_ObjectPool()
		{
		}
	}
	[Token(Token = "0x200060A")]
	public class AndroidWidget_PairedDeviceUI : MonoBehaviour
	{
		[Token(Token = "0x4002075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("[UI]")]
		private Image deviceImage;

		[Token(Token = "0x4002076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Text deviceName;

		[Token(Token = "0x4002077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Button pingButton;

		[Token(Token = "0x4002078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Button toggleButton;

		[Token(Token = "0x4002079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("[Sprites]")]
		[SerializeField]
		private Sprite leftSide;

		[Token(Token = "0x400207A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Sprite rightSide;

		[Token(Token = "0x400207B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HapticDevice device;

		[Token(Token = "0x6002266")]
		[Address(RVA = "0xDACD6C", Offset = "0xDACD6C", VA = "0xDACD6C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002267")]
		[Address(RVA = "0xDACE5C", Offset = "0xDACE5C", VA = "0xDACE5C")]
		public void Refresh(HapticDevice tactDevice, Bhaptics_Widget_Setting setting)
		{
		}

		[Token(Token = "0x6002268")]
		[Address(RVA = "0xDACFF0", Offset = "0xDACFF0", VA = "0xDACFF0")]
		private void OnPing()
		{
		}

		[Token(Token = "0x6002269")]
		[Address(RVA = "0xDAD1CC", Offset = "0xDAD1CC", VA = "0xDAD1CC")]
		private void OnSwap()
		{
		}

		[Token(Token = "0x600226A")]
		[Address(RVA = "0xDAD324", Offset = "0xDAD324", VA = "0xDAD324")]
		public AndroidWidget_PairedDeviceUI()
		{
		}
	}
	[Token(Token = "0x200060B")]
	public class AndroidWidget_SettingUIAnimation : MonoBehaviour
	{
		[Token(Token = "0x400207C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject SettingUI;

		[Token(Token = "0x400207D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x400207E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool settingPanelEnable;

		[Token(Token = "0x600226B")]
		[Address(RVA = "0xDAD32C", Offset = "0xDAD32C", VA = "0xDAD32C")]
		private void Start()
		{
		}

		[Token(Token = "0x600226C")]
		[Address(RVA = "0xDAD394", Offset = "0xDAD394", VA = "0xDAD394")]
		public void Hide()
		{
		}

		[Token(Token = "0x600226D")]
		[Address(RVA = "0xDAD3B4", Offset = "0xDAD3B4", VA = "0xDAD3B4")]
		public void Show()
		{
		}

		[Token(Token = "0x600226E")]
		[Address(RVA = "0xDAD3D4", Offset = "0xDAD3D4", VA = "0xDAD3D4")]
		public void ToggleSettingButton()
		{
		}

		[Token(Token = "0x600226F")]
		[Address(RVA = "0xDAD4F4", Offset = "0xDAD4F4", VA = "0xDAD4F4")]
		public AndroidWidget_SettingUIAnimation()
		{
		}
	}
	[Token(Token = "0x200060C")]
	public class AndroidWidget_UI : MonoBehaviour
	{
		[Token(Token = "0x400207F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject uiContainer;

		[Token(Token = "0x4002080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Button pingAllButton;

		[Token(Token = "0x4002081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("DeviceImages")]
		[SerializeField]
		private Bhaptics_Widget_Setting WidgetSetting;

		[Token(Token = "0x4002082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AndroidWidget_ObjectPool settingObjectPool;

		[Token(Token = "0x4002083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource buttonClickAudio;

		[Token(Token = "0x4002084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Animator animator;

		[Token(Token = "0x4002085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool widgetActive;

		[Token(Token = "0x4002086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AndroidWidget_ControlButton[] controllButtons;

		[Token(Token = "0x4002087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static AndroidWidget_UI Instance;

		[Token(Token = "0x6002270")]
		[Address(RVA = "0xDAD4FC", Offset = "0xDAD4FC", VA = "0xDAD4FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002271")]
		[Address(RVA = "0xDADA10", Offset = "0xDADA10", VA = "0xDADA10")]
		private void Start()
		{
		}

		[Token(Token = "0x6002272")]
		[Address(RVA = "0xDAD6A8", Offset = "0xDAD6A8", VA = "0xDAD6A8")]
		private void InitializeButtons()
		{
		}

		[Token(Token = "0x6002273")]
		[Address(RVA = "0xDADC14", Offset = "0xDADC14", VA = "0xDADC14")]
		public void ToggleWidgetButton()
		{
		}

		[Token(Token = "0x6002274")]
		[Address(RVA = "0xDADCB0", Offset = "0xDADCB0", VA = "0xDADCB0")]
		public void ShowWidget()
		{
		}

		[Token(Token = "0x6002275")]
		[Address(RVA = "0xDADCD0", Offset = "0xDADCD0", VA = "0xDADCD0")]
		public void HideWidget()
		{
		}

		[Token(Token = "0x6002276")]
		[Address(RVA = "0xDADCF0", Offset = "0xDADCF0", VA = "0xDADCF0")]
		public void ButtonClickSound()
		{
		}

		[Token(Token = "0x6002277")]
		[Address(RVA = "0xDADD0C", Offset = "0xDADD0C", VA = "0xDADD0C")]
		private void RefreshPairedDevices(List<HapticDevice> devices)
		{
		}

		[Token(Token = "0x6002278")]
		[Address(RVA = "0xDADB1C", Offset = "0xDADB1C", VA = "0xDADB1C")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6002279")]
		[Address(RVA = "0xDAE010", Offset = "0xDAE010", VA = "0xDAE010")]
		public AndroidWidget_UI()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200060D")]
	public class PositonIconSetting
	{
		[Token(Token = "0x4002088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Sprite connect;

		[Token(Token = "0x4002089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sprite disconnect;

		[Token(Token = "0x600227A")]
		[Address(RVA = "0xDAE020", Offset = "0xDAE020", VA = "0xDAE020")]
		public PositonIconSetting()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200060E")]
	public class IconSetting
	{
		[Token(Token = "0x400208A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Header("[Setting Icons]")]
		public PositonIconSetting Vest;

		[Token(Token = "0x400208B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PositonIconSetting Head;

		[Token(Token = "0x400208C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PositonIconSetting Arm;

		[Token(Token = "0x400208D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PositonIconSetting Foot;

		[Token(Token = "0x400208E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PositonIconSetting Hand;

		[Token(Token = "0x400208F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PositonIconSetting GloveL;

		[Token(Token = "0x4002090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PositonIconSetting GloveR;

		[Token(Token = "0x600227B")]
		[Address(RVA = "0xDAE028", Offset = "0xDAE028", VA = "0xDAE028")]
		public IconSetting()
		{
		}
	}
	[Token(Token = "0x200060F")]
	public class Android_DeviceController : MonoBehaviour
	{
		[Token(Token = "0x4002091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("UI")]
		[SerializeField]
		private Image icon;

		[Token(Token = "0x4002092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private IconSetting widgetSetting;

		[Token(Token = "0x4002093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Sprite TactsuitWiredIcon;

		[Token(Token = "0x4002094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Image batteryLowImage;

		[Token(Token = "0x4002095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Connect Menu")]
		[SerializeField]
		private GameObject ConnectMenu;

		[Token(Token = "0x4002096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Button pingButton;

		[Token(Token = "0x4002097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Button lButton;

		[Token(Token = "0x4002098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Button rButton;

		[Token(Token = "0x4002099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject wiredNotification;

		[Token(Token = "0x400209A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Disconnect Menu")]
		[SerializeField]
		private GameObject DisconnectMenu;

		[Token(Token = "0x400209B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string SelectHexColor;

		[Token(Token = "0x400209C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string SelectHoverHexColor;

		[Token(Token = "0x400209D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string DisableHexColor;

		[Token(Token = "0x400209E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static string DisableHoverHexColor;

		[Token(Token = "0x400209F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private HapticDevice device;

		[Token(Token = "0x600227C")]
		[Address(RVA = "0xDAE030", Offset = "0xDAE030", VA = "0xDAE030")]
		private void Awake()
		{
		}

		[Token(Token = "0x600227D")]
		[Address(RVA = "0xDAE210", Offset = "0xDAE210", VA = "0xDAE210")]
		public void RefreshDevice(HapticDevice d)
		{
		}

		[Token(Token = "0x600227E")]
		[Address(RVA = "0xDAE3E8", Offset = "0xDAE3E8", VA = "0xDAE3E8")]
		private void RenderConnectMenu()
		{
		}

		[Token(Token = "0x600227F")]
		[Address(RVA = "0xDAE470", Offset = "0xDAE470", VA = "0xDAE470")]
		private void RenderDisconnectMenu()
		{
		}

		[Token(Token = "0x6002280")]
		[Address(RVA = "0xDAE4E0", Offset = "0xDAE4E0", VA = "0xDAE4E0")]
		private void UpdateButtons()
		{
		}

		[Token(Token = "0x6002281")]
		[Address(RVA = "0xDAE2A8", Offset = "0xDAE2A8", VA = "0xDAE2A8")]
		private void UpdateIcon(HapticDevice d)
		{
		}

		[Token(Token = "0x6002282")]
		[Address(RVA = "0xDAE8C4", Offset = "0xDAE8C4", VA = "0xDAE8C4")]
		private Sprite GetSprite(PositonIconSetting icon, bool connected)
		{
			return null;
		}

		[Token(Token = "0x6002283")]
		[Address(RVA = "0xDAE8E8", Offset = "0xDAE8E8", VA = "0xDAE8E8")]
		private void Ping()
		{
		}

		[Token(Token = "0x6002284")]
		[Address(RVA = "0xDAE950", Offset = "0xDAE950", VA = "0xDAE950")]
		private void ToLeft()
		{
		}

		[Token(Token = "0x6002285")]
		[Address(RVA = "0xDAEA1C", Offset = "0xDAEA1C", VA = "0xDAEA1C")]
		private void ToRight()
		{
		}

		[Token(Token = "0x6002286")]
		[Address(RVA = "0xDAEAE8", Offset = "0xDAEAE8", VA = "0xDAEAE8")]
		private Color ToColor(string hex)
		{
			return default(Color);
		}

		[Token(Token = "0x6002287")]
		[Address(RVA = "0xDAE790", Offset = "0xDAE790", VA = "0xDAE790")]
		private void ChangeButtonColor(Button targetButton, bool isSelect)
		{
		}

		[Token(Token = "0x6002288")]
		[Address(RVA = "0xDAE748", Offset = "0xDAE748", VA = "0xDAE748")]
		private static bool IsLeft(PositionType pos)
		{
			return default(bool);
		}

		[Token(Token = "0x6002289")]
		[Address(RVA = "0xDAE76C", Offset = "0xDAE76C", VA = "0xDAE76C")]
		private static bool IsRight(PositionType pos)
		{
			return default(bool);
		}

		[Token(Token = "0x600228A")]
		[Address(RVA = "0xDAEB1C", Offset = "0xDAEB1C", VA = "0xDAEB1C")]
		public Android_DeviceController()
		{
		}
	}
	[Token(Token = "0x2000610")]
	public class Android_UIController : MonoBehaviour
	{
		[Token(Token = "0x40020A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private RectTransform mainPanel;

		[Token(Token = "0x40020A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform devicesContainer;

		[Token(Token = "0x40020A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform deviceListPageUi;

		[Token(Token = "0x40020A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Button deviceListNextPageButton;

		[Token(Token = "0x40020A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Button deviceListBackPageButton;

		[Token(Token = "0x40020A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Text deviceListPageText;

		[Token(Token = "0x40020A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Android_DeviceController devicePrefab;

		[Token(Token = "0x40020A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Header("No Paired Device UI")]
		private GameObject noPairedDeviceUi;

		[Token(Token = "0x40020A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Button helpButton;

		[Token(Token = "0x40020A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Button bHpaticsLinkButton;

		[Token(Token = "0x40020AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject helpUi;

		[Token(Token = "0x40020AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Button helpCloseButton;

		[Token(Token = "0x40020AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Android_DeviceController> controllers;

		[Token(Token = "0x40020AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private BoxCollider mainPanelCollider;

		[Token(Token = "0x40020AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private UnityEngine.Vector2 defaultMainPanelSize;

		[Token(Token = "0x40020AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private UnityEngine.Vector2 defaultDeviceContainerSize;

		[Token(Token = "0x40020B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int deviceListSize;

		[Token(Token = "0x40020B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int deviceListPageIndex;

		[Token(Token = "0x40020B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int expandHeight;

		[Token(Token = "0x40020B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private int expandDeviceCount;

		[Token(Token = "0x40020B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int pageActivateDeviceCount;

		[Token(Token = "0x40020B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private int pageExpandHeight;

		[Token(Token = "0x40020B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int maxPageIndex;

		[Token(Token = "0x600228C")]
		[Address(RVA = "0xDAEBF0", Offset = "0xDAEBF0", VA = "0xDAEBF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600228D")]
		[Address(RVA = "0xDAF0B8", Offset = "0xDAF0B8", VA = "0xDAF0B8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600228E")]
		[Address(RVA = "0xDAF228", Offset = "0xDAF228", VA = "0xDAF228")]
		private void Refresh()
		{
		}

		[Token(Token = "0x600228F")]
		[Address(RVA = "0xDAF884", Offset = "0xDAF884", VA = "0xDAF884")]
		private void OnHelp()
		{
		}

		[Token(Token = "0x6002290")]
		[Address(RVA = "0xDAF90C", Offset = "0xDAF90C", VA = "0xDAF90C")]
		private void CloseHelpNotification()
		{
		}

		[Token(Token = "0x6002291")]
		[Address(RVA = "0xDAF994", Offset = "0xDAF994", VA = "0xDAF994")]
		private void OpenLink()
		{
		}

		[Token(Token = "0x6002292")]
		[Address(RVA = "0xDAF9D8", Offset = "0xDAF9D8", VA = "0xDAF9D8")]
		private void NextPage()
		{
		}

		[Token(Token = "0x6002293")]
		[Address(RVA = "0xDAF9FC", Offset = "0xDAF9FC", VA = "0xDAF9FC")]
		private void BackPage()
		{
		}

		[Token(Token = "0x6002294")]
		[Address(RVA = "0xDAFA20", Offset = "0xDAFA20", VA = "0xDAFA20")]
		public Android_UIController()
		{
		}
	}
	[Token(Token = "0x2000611")]
	public class BhapticsAndroidManager : MonoBehaviour
	{
		[Token(Token = "0x40020B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static BhapticsAndroidManager Instance;

		[Token(Token = "0x40020B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static bool pcAndoidTestMode;

		[Token(Token = "0x40020B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<HapticDevice> Devices;

		[Token(Token = "0x40020BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<UnityAction> refreshActions;

		[Token(Token = "0x6002295")]
		[Address(RVA = "0xDAFAB0", Offset = "0xDAFAB0", VA = "0xDAFAB0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002296")]
		[Address(RVA = "0xDAFBB4", Offset = "0xDAFBB4", VA = "0xDAFBB4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002297")]
		[Address(RVA = "0xDAFC4C", Offset = "0xDAFC4C", VA = "0xDAFC4C")]
		private void RefreshDevices()
		{
		}

		[Token(Token = "0x6002298")]
		[Address(RVA = "0xDAC7A0", Offset = "0xDAC7A0", VA = "0xDAC7A0")]
		public static void Ping(PositionType pos)
		{
		}

		[Token(Token = "0x6002299")]
		[Address(RVA = "0xDAD29C", Offset = "0xDAD29C", VA = "0xDAD29C")]
		public static void TogglePosition(string address)
		{
		}

		[Token(Token = "0x600229A")]
		[Address(RVA = "0xDAD064", Offset = "0xDAD064", VA = "0xDAD064")]
		public static void Ping(HapticDevice device)
		{
		}

		[Token(Token = "0x600229B")]
		[Address(RVA = "0xDB00E4", Offset = "0xDB00E4", VA = "0xDB00E4")]
		public static void PingAll()
		{
		}

		[Token(Token = "0x600229C")]
		[Address(RVA = "0xDADF0C", Offset = "0xDADF0C", VA = "0xDADF0C")]
		public static List<HapticDevice> GetDevices()
		{
			return null;
		}

		[Token(Token = "0x600229D")]
		[Address(RVA = "0xDAC4F8", Offset = "0xDAC4F8", VA = "0xDAC4F8")]
		public static List<HapticDevice> GetConnectedDevices(PositionType pos)
		{
			return null;
		}

		[Token(Token = "0x600229E")]
		[Address(RVA = "0xDB0164", Offset = "0xDB0164", VA = "0xDB0164")]
		public static List<HapticDevice> GetPairedDevices(PositionType pos)
		{
			return null;
		}

		[Token(Token = "0x600229F")]
		[Address(RVA = "0xDAD8FC", Offset = "0xDAD8FC", VA = "0xDAD8FC")]
		public static void AddRefreshAction(UnityAction action)
		{
		}

		[Token(Token = "0x60022A0")]
		[Address(RVA = "0xDAF158", Offset = "0xDAF158", VA = "0xDAF158")]
		public static void RemoveRefreshAction(UnityAction action)
		{
		}

		[Token(Token = "0x60022A1")]
		[Address(RVA = "0xDB03AC", Offset = "0xDB03AC", VA = "0xDB03AC")]
		public static void ClearRefreshAction()
		{
		}

		[Token(Token = "0x60022A2")]
		[Address(RVA = "0xDB0444", Offset = "0xDB0444", VA = "0xDB0444")]
		public static bool IsStreaming()
		{
			return default(bool);
		}

		[Token(Token = "0x60022A3")]
		[Address(RVA = "0xDB04C8", Offset = "0xDB04C8", VA = "0xDB04C8")]
		public static void ToggleStreaming()
		{
		}

		[Token(Token = "0x60022A4")]
		[Address(RVA = "0xDB0548", Offset = "0xDB0548", VA = "0xDB0548")]
		public static List<AndroidUtils.StreamHost> GetStreamingHosts()
		{
			return null;
		}

		[Token(Token = "0x60022A5")]
		[Address(RVA = "0xDB0604", Offset = "0xDB0604", VA = "0xDB0604")]
		public static void ShowBluetoothSetting()
		{
		}

		[Token(Token = "0x60022A6")]
		[Address(RVA = "0xDB0684", Offset = "0xDB0684", VA = "0xDB0684")]
		public static void ToggleEnableDevice(HapticDevice device)
		{
		}

		[Token(Token = "0x60022A7")]
		[Address(RVA = "0xDB0728", Offset = "0xDB0728", VA = "0xDB0728")]
		private void OnApplicationFocus(bool pauseStatus)
		{
		}

		[Token(Token = "0x60022A8")]
		[Address(RVA = "0xDB07BC", Offset = "0xDB07BC", VA = "0xDB07BC")]
		public BhapticsAndroidManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000612")]
	public class SettingDeviceIcon
	{
		[Token(Token = "0x40020BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Sprite pairImage;

		[Token(Token = "0x40020BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sprite unpairImage;

		[Token(Token = "0x60022AA")]
		[Address(RVA = "0xDB18D0", Offset = "0xDB18D0", VA = "0xDB18D0")]
		public SettingDeviceIcon()
		{
		}
	}
	[Token(Token = "0x2000613")]
	public class Bhaptics_Widget_Setting : ScriptableObject
	{
		[Token(Token = "0x40020BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("[Setting Icons]")]
		public SettingDeviceIcon SettingTactot;

		[Token(Token = "0x40020BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SettingDeviceIcon SettingTactal;

		[Token(Token = "0x40020BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SettingDeviceIcon SettingTactosyArm;

		[Token(Token = "0x40020C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SettingDeviceIcon SettingTactosyFoot;

		[Token(Token = "0x40020C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SettingDeviceIcon SettingTactosyHand;

		[Token(Token = "0x60022AB")]
		[Address(RVA = "0xDB18D8", Offset = "0xDB18D8", VA = "0xDB18D8")]
		public Sprite GetPairedDeviceSprite(HapticDevice device)
		{
			return null;
		}

		[Token(Token = "0x60022AC")]
		[Address(RVA = "0xDB1A34", Offset = "0xDB1A34", VA = "0xDB1A34")]
		public Bhaptics_Widget_Setting()
		{
		}
	}
	[Token(Token = "0x2000614")]
	public class HapticApi
	{
		[Token(Token = "0x2000615")]
		public struct point
		{
			[Token(Token = "0x40020C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float x;

			[Token(Token = "0x40020C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float y;

			[Token(Token = "0x40020C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int intensity;

			[Token(Token = "0x40020C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int motorCount;
		}

		[Token(Token = "0x2000616")]
		public struct status
		{
			[Token(Token = "0x40020C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int[] values;
		}

		[PreserveSig]
		[Token(Token = "0x60022AD")]
		[Address(RVA = "0xDB1A3C", Offset = "0xDB1A3C", VA = "0xDB1A3C")]
		public static extern bool TryGetExePath(byte[] buf, ref int size);

		[PreserveSig]
		[Token(Token = "0x60022AE")]
		[Address(RVA = "0xDB1AD0", Offset = "0xDB1AD0", VA = "0xDB1AD0")]
		public static extern void Initialise(string appId, string appName);

		[PreserveSig]
		[Token(Token = "0x60022AF")]
		[Address(RVA = "0xDB1B7C", Offset = "0xDB1B7C", VA = "0xDB1B7C")]
		public static extern void Destroy();

		[PreserveSig]
		[Token(Token = "0x60022B0")]
		[Address(RVA = "0xDB1BE0", Offset = "0xDB1BE0", VA = "0xDB1BE0")]
		public static extern void RegisterFeedback(string str, string projectJson);

		[PreserveSig]
		[Token(Token = "0x60022B1")]
		[Address(RVA = "0xDB1C88", Offset = "0xDB1C88", VA = "0xDB1C88")]
		public static extern void RegisterFeedbackFromTactFile(string str, string tactFileStr);

		[PreserveSig]
		[Token(Token = "0x60022B2")]
		[Address(RVA = "0xDB1D34", Offset = "0xDB1D34", VA = "0xDB1D34")]
		public static extern void RegisterFeedbackFromTactFileReflected(string str, string tactFileStr);

		[PreserveSig]
		[Token(Token = "0x60022B3")]
		[Address(RVA = "0xDB1DE0", Offset = "0xDB1DE0", VA = "0xDB1DE0")]
		public static extern void SubmitRegistered(string key);

		[PreserveSig]
		[Token(Token = "0x60022B4")]
		[Address(RVA = "0xDB1E6C", Offset = "0xDB1E6C", VA = "0xDB1E6C")]
		public static extern void SubmitRegisteredStartMillis(string key, int startTimeMillis);

		[PreserveSig]
		[Token(Token = "0x60022B5")]
		[Address(RVA = "0xDB1F00", Offset = "0xDB1F00", VA = "0xDB1F00")]
		public static extern void SubmitRegisteredWithOption(string key, string altKey, float intensity, float duration, float offsetX, float offsetY);

		[PreserveSig]
		[Token(Token = "0x60022B6")]
		[Address(RVA = "0xDB1FDC", Offset = "0xDB1FDC", VA = "0xDB1FDC")]
		public static extern void SubmitByteArray(string key, PositionType pos, byte[] charPtr, int length, int durationMillis);

		[PreserveSig]
		[Token(Token = "0x60022B7")]
		[Address(RVA = "0xDB20A0", Offset = "0xDB20A0", VA = "0xDB20A0")]
		public static extern void SubmitPathArray(string key, PositionType pos, point[] charPtr, int length, int durationMillis);

		[PreserveSig]
		[Token(Token = "0x60022B8")]
		[Address(RVA = "0xDB2164", Offset = "0xDB2164", VA = "0xDB2164")]
		public static extern bool IsFeedbackRegistered(string key);

		[PreserveSig]
		[Token(Token = "0x60022B9")]
		[Address(RVA = "0xDB21FC", Offset = "0xDB21FC", VA = "0xDB21FC")]
		public static extern bool IsPlaying();

		[PreserveSig]
		[Token(Token = "0x60022BA")]
		[Address(RVA = "0xDB226C", Offset = "0xDB226C", VA = "0xDB226C")]
		public static extern bool IsPlayingKey(string key);

		[PreserveSig]
		[Token(Token = "0x60022BB")]
		[Address(RVA = "0xDB2304", Offset = "0xDB2304", VA = "0xDB2304")]
		public static extern void TurnOff();

		[PreserveSig]
		[Token(Token = "0x60022BC")]
		[Address(RVA = "0xDB2368", Offset = "0xDB2368", VA = "0xDB2368")]
		public static extern void TurnOffKey(string key);

		[PreserveSig]
		[Token(Token = "0x60022BD")]
		[Address(RVA = "0xDB23F4", Offset = "0xDB23F4", VA = "0xDB23F4")]
		public static extern void EnableFeedback();

		[PreserveSig]
		[Token(Token = "0x60022BE")]
		[Address(RVA = "0xDB2454", Offset = "0xDB2454", VA = "0xDB2454")]
		public static extern void DisableFeedback();

		[PreserveSig]
		[Token(Token = "0x60022BF")]
		[Address(RVA = "0xDB24B8", Offset = "0xDB24B8", VA = "0xDB24B8")]
		public static extern void ToggleFeedback();

		[PreserveSig]
		[Token(Token = "0x60022C0")]
		[Address(RVA = "0xDB2518", Offset = "0xDB2518", VA = "0xDB2518")]
		public static extern bool IsDevicePlaying(PositionType pos);

		[PreserveSig]
		[Token(Token = "0x60022C1")]
		[Address(RVA = "0xDB259C", Offset = "0xDB259C", VA = "0xDB259C")]
		public static extern bool TryGetResponseForPosition(PositionType pos, out status status);

		[Token(Token = "0x60022C2")]
		[Address(RVA = "0xDB2654", Offset = "0xDB2654", VA = "0xDB2654")]
		public HapticApi()
		{
		}
	}
	[Token(Token = "0x2000617")]
	public class ArmsHapticClip : FileHapticClip
	{
		[Token(Token = "0x40020C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool IsReflect;

		[Token(Token = "0x60022C3")]
		[Address(RVA = "0xDB265C", Offset = "0xDB265C", VA = "0xDB265C", Slot = "12")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, float vestRotationOffsetY, string identifier = "")
		{
		}

		[Token(Token = "0x60022C4")]
		[Address(RVA = "0xDB2A04", Offset = "0xDB2A04", VA = "0xDB2A04", Slot = "17")]
		public override void ResetValues()
		{
		}

		[Token(Token = "0x60022C5")]
		[Address(RVA = "0xDB2A20", Offset = "0xDB2A20", VA = "0xDB2A20")]
		public ArmsHapticClip()
		{
		}
	}
	[Token(Token = "0x2000618")]
	public class BhapticsHaptic : IHaptic
	{
		[Token(Token = "0x60022C6")]
		[Address(RVA = "0xDB2A48", Offset = "0xDB2A48", VA = "0xDB2A48")]
		public BhapticsHaptic()
		{
		}

		[Token(Token = "0x60022C7")]
		[Address(RVA = "0xDB2A78", Offset = "0xDB2A78", VA = "0xDB2A78", Slot = "4")]
		public bool IsConnect(PositionType type)
		{
			return default(bool);
		}

		[Token(Token = "0x60022C8")]
		[Address(RVA = "0xDB2A80", Offset = "0xDB2A80", VA = "0xDB2A80", Slot = "5")]
		public bool IsConnect(HapticDeviceType type, bool isLeft = true)
		{
			return default(bool);
		}

		[Token(Token = "0x60022C9")]
		[Address(RVA = "0xDB2B4C", Offset = "0xDB2B4C", VA = "0xDB2B4C", Slot = "6")]
		public bool IsPlaying(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x60022CA")]
		[Address(RVA = "0xDB2B54", Offset = "0xDB2B54", VA = "0xDB2B54", Slot = "7")]
		public bool IsFeedbackRegistered(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x60022CB")]
		[Address(RVA = "0xDB2B5C", Offset = "0xDB2B5C", VA = "0xDB2B5C", Slot = "8")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x60022CC")]
		[Address(RVA = "0xDB2B60", Offset = "0xDB2B60", VA = "0xDB2B60", Slot = "9")]
		public void RegisterTactFileStr(string key, string tactFileStr)
		{
		}

		[Token(Token = "0x60022CD")]
		[Address(RVA = "0xDB2B6C", Offset = "0xDB2B6C", VA = "0xDB2B6C", Slot = "10")]
		public void RegisterTactFileStrReflected(string key, string tactFileStr)
		{
		}

		[Token(Token = "0x60022CE")]
		[Address(RVA = "0xDB2B78", Offset = "0xDB2B78", VA = "0xDB2B78", Slot = "11")]
		public void Submit(string key, PositionType position, List<DotPoint> points, int durationMillis)
		{
		}

		[Token(Token = "0x60022CF")]
		[Address(RVA = "0xDB2C78", Offset = "0xDB2C78", VA = "0xDB2C78", Slot = "12")]
		public void Submit(string key, PositionType position, List<PathPoint> points, int durationMillis)
		{
		}

		[Token(Token = "0x60022D0")]
		[Address(RVA = "0xDB2DF8", Offset = "0xDB2DF8", VA = "0xDB2DF8", Slot = "13")]
		public void SubmitRegistered(string key, string altKey, ScaleOption option)
		{
		}

		[Token(Token = "0x60022D1")]
		[Address(RVA = "0xDB2E20", Offset = "0xDB2E20", VA = "0xDB2E20", Slot = "14")]
		public void SubmitRegistered(string key, string altKey, RotationOption rOption, ScaleOption sOption)
		{
		}

		[Token(Token = "0x60022D2")]
		[Address(RVA = "0xDB2E48", Offset = "0xDB2E48", VA = "0xDB2E48", Slot = "15")]
		public void SubmitRegistered(string key)
		{
		}

		[Token(Token = "0x60022D3")]
		[Address(RVA = "0xDB2E50", Offset = "0xDB2E50", VA = "0xDB2E50", Slot = "16")]
		public void SubmitRegistered(string key, int startTimeMillis)
		{
		}

		[Token(Token = "0x60022D4")]
		[Address(RVA = "0xDB2E5C", Offset = "0xDB2E5C", VA = "0xDB2E5C", Slot = "17")]
		public void TurnOff(string key)
		{
		}

		[Token(Token = "0x60022D5")]
		[Address(RVA = "0xDB2E64", Offset = "0xDB2E64", VA = "0xDB2E64", Slot = "18")]
		public void TurnOff()
		{
		}

		[Token(Token = "0x60022D6")]
		[Address(RVA = "0xDB2E68", Offset = "0xDB2E68", VA = "0xDB2E68", Slot = "19")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60022D7")]
		[Address(RVA = "0xDB2E6C", Offset = "0xDB2E6C", VA = "0xDB2E6C", Slot = "20")]
		public int[] GetCurrentFeedback(PositionType pos)
		{
			return null;
		}
	}
	[Token(Token = "0x2000619")]
	public class BhapticsProject
	{
		[Token(Token = "0x1700059A")]
		public Track[] Tracks
		{
			[Token(Token = "0x60022D8")]
			[Address(RVA = "0xDB2E8C", Offset = "0xDB2E8C", VA = "0xDB2E8C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60022D9")]
			[Address(RVA = "0xDB2E94", Offset = "0xDB2E94", VA = "0xDB2E94")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700059B")]
		public Layout Layout
		{
			[Token(Token = "0x60022DA")]
			[Address(RVA = "0xDB2E9C", Offset = "0xDB2E9C", VA = "0xDB2E9C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60022DB")]
			[Address(RVA = "0xDB2EA4", Offset = "0xDB2EA4", VA = "0xDB2EA4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60022DC")]
		[Address(RVA = "0xDB2EAC", Offset = "0xDB2EAC", VA = "0xDB2EAC")]
		public static BhapticsProject ToProject(JSONObject jsonObject)
		{
			return null;
		}

		[Token(Token = "0x60022DD")]
		[Address(RVA = "0xDB36E8", Offset = "0xDB36E8", VA = "0xDB36E8")]
		public JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x60022DE")]
		[Address(RVA = "0xDB30EC", Offset = "0xDB30EC", VA = "0xDB30EC")]
		public BhapticsProject()
		{
		}
	}
	[Token(Token = "0x200061A")]
	public class HapticFeedbackFile
	{
		[Token(Token = "0x40020CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BhapticsProject Project;

		[Token(Token = "0x60022DF")]
		[Address(RVA = "0xDB3C68", Offset = "0xDB3C68", VA = "0xDB3C68")]
		public static HapticFeedbackFile ToHapticFeedbackFile(string jsonStr)
		{
			return null;
		}

		[Token(Token = "0x60022E0")]
		[Address(RVA = "0xDB3D2C", Offset = "0xDB3D2C", VA = "0xDB3D2C")]
		public HapticFeedbackFile()
		{
		}
	}
	[Token(Token = "0x200061B")]
	public class Track
	{
		[Token(Token = "0x1700059C")]
		public HapticEffect[] Effects
		{
			[Token(Token = "0x60022E1")]
			[Address(RVA = "0xDB3D34", Offset = "0xDB3D34", VA = "0xDB3D34")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60022E2")]
			[Address(RVA = "0xDB3D3C", Offset = "0xDB3D3C", VA = "0xDB3D3C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60022E3")]
		[Address(RVA = "0xDB3D44", Offset = "0xDB3D44", VA = "0xDB3D44", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60022E4")]
		[Address(RVA = "0xDB30F4", Offset = "0xDB30F4", VA = "0xDB30F4")]
		internal static Track ToTrack(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x60022E5")]
		[Address(RVA = "0xDB383C", Offset = "0xDB383C", VA = "0xDB383C")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x60022E6")]
		[Address(RVA = "0xDB3DC8", Offset = "0xDB3DC8", VA = "0xDB3DC8")]
		public Track()
		{
		}
	}
	[Token(Token = "0x200061C")]
	public class HapticEffect
	{
		[Token(Token = "0x1700059D")]
		public int StartTime
		{
			[Token(Token = "0x60022E7")]
			[Address(RVA = "0xDB42F4", Offset = "0xDB42F4", VA = "0xDB42F4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60022E8")]
			[Address(RVA = "0xDB42FC", Offset = "0xDB42FC", VA = "0xDB42FC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700059E")]
		public int OffsetTime
		{
			[Token(Token = "0x60022E9")]
			[Address(RVA = "0xDB4304", Offset = "0xDB4304", VA = "0xDB4304")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60022EA")]
			[Address(RVA = "0xDB430C", Offset = "0xDB430C", VA = "0xDB430C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700059F")]
		public Dictionary<string, HapticEffectMode> Modes
		{
			[Token(Token = "0x60022EB")]
			[Address(RVA = "0xDB4314", Offset = "0xDB4314", VA = "0xDB4314")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60022EC")]
			[Address(RVA = "0xDB431C", Offset = "0xDB431C", VA = "0xDB431C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60022ED")]
		[Address(RVA = "0xDB4324", Offset = "0xDB4324", VA = "0xDB4324", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60022EE")]
		[Address(RVA = "0xDB3DD0", Offset = "0xDB3DD0", VA = "0xDB3DD0")]
		internal static HapticEffect ToEffect(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x60022EF")]
		[Address(RVA = "0xDB4068", Offset = "0xDB4068", VA = "0xDB4068")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x60022F0")]
		[Address(RVA = "0xDB4568", Offset = "0xDB4568", VA = "0xDB4568")]
		public HapticEffect()
		{
		}
	}
	[Token(Token = "0x200061D")]
	public class Layout
	{
		[Token(Token = "0x170005A0")]
		public string Type
		{
			[Token(Token = "0x60022F1")]
			[Address(RVA = "0xDB4848", Offset = "0xDB4848", VA = "0xDB4848")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60022F2")]
			[Address(RVA = "0xDB4850", Offset = "0xDB4850", VA = "0xDB4850")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170005A1")]
		public Dictionary<string, LayoutObject[]> Layouts
		{
			[Token(Token = "0x60022F3")]
			[Address(RVA = "0xDB4858", Offset = "0xDB4858", VA = "0xDB4858")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60022F4")]
			[Address(RVA = "0xDB4860", Offset = "0xDB4860", VA = "0xDB4860")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60022F5")]
		[Address(RVA = "0xDB3324", Offset = "0xDB3324", VA = "0xDB3324")]
		internal static Layout ToLayout(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x60022F6")]
		[Address(RVA = "0xDB3958", Offset = "0xDB3958", VA = "0xDB3958")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x60022F7")]
		[Address(RVA = "0xDB4868", Offset = "0xDB4868", VA = "0xDB4868")]
		public Layout()
		{
		}
	}
	[Token(Token = "0x200061E")]
	public class LayoutObject
	{
		[Token(Token = "0x170005A2")]
		public int Index
		{
			[Token(Token = "0x60022F8")]
			[Address(RVA = "0xDB4AE8", Offset = "0xDB4AE8", VA = "0xDB4AE8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60022F9")]
			[Address(RVA = "0xDB4AF0", Offset = "0xDB4AF0", VA = "0xDB4AF0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170005A3")]
		public float X
		{
			[Token(Token = "0x60022FA")]
			[Address(RVA = "0xDB4AF8", Offset = "0xDB4AF8", VA = "0xDB4AF8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60022FB")]
			[Address(RVA = "0xDB4B00", Offset = "0xDB4B00", VA = "0xDB4B00")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170005A4")]
		public float Y
		{
			[Token(Token = "0x60022FC")]
			[Address(RVA = "0xDB4B08", Offset = "0xDB4B08", VA = "0xDB4B08")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60022FD")]
			[Address(RVA = "0xDB4B10", Offset = "0xDB4B10", VA = "0xDB4B10")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60022FE")]
		[Address(RVA = "0xDB4870", Offset = "0xDB4870", VA = "0xDB4870")]
		internal static LayoutObject ToLayoutObject(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x60022FF")]
		[Address(RVA = "0xDB49A8", Offset = "0xDB49A8", VA = "0xDB49A8")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002300")]
		[Address(RVA = "0xDB4B18", Offset = "0xDB4B18", VA = "0xDB4B18")]
		public LayoutObject()
		{
		}
	}
	[Token(Token = "0x200061F")]
	public class HapticEffectMode
	{
		[Token(Token = "0x170005A5")]
		public FeedbackMode Mode
		{
			[Token(Token = "0x6002301")]
			[Address(RVA = "0xDB4B20", Offset = "0xDB4B20", VA = "0xDB4B20")]
			[CompilerGenerated]
			get
			{
				return default(FeedbackMode);
			}
			[Token(Token = "0x6002302")]
			[Address(RVA = "0xDB4B28", Offset = "0xDB4B28", VA = "0xDB4B28")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170005A6")]
		public DotMode DotMode
		{
			[Token(Token = "0x6002303")]
			[Address(RVA = "0xDB4B30", Offset = "0xDB4B30", VA = "0xDB4B30")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002304")]
			[Address(RVA = "0xDB4B38", Offset = "0xDB4B38", VA = "0xDB4B38")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170005A7")]
		public PathMode PathMode
		{
			[Token(Token = "0x6002305")]
			[Address(RVA = "0xDB4B40", Offset = "0xDB4B40", VA = "0xDB4B40")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002306")]
			[Address(RVA = "0xDB4B48", Offset = "0xDB4B48", VA = "0xDB4B48")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002307")]
		[Address(RVA = "0xDB4570", Offset = "0xDB4570", VA = "0xDB4570")]
		internal static HapticEffectMode ToMode(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x6002308")]
		[Address(RVA = "0xDB46D0", Offset = "0xDB46D0", VA = "0xDB46D0")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002309")]
		[Address(RVA = "0xDB4B50", Offset = "0xDB4B50", VA = "0xDB4B50")]
		public HapticEffectMode()
		{
		}
	}
	[Token(Token = "0x2000620")]
	public class DotMode
	{
		[Token(Token = "0x170005A8")]
		public bool DotConnected
		{
			[Token(Token = "0x600230A")]
			[Address(RVA = "0xDB5260", Offset = "0xDB5260", VA = "0xDB5260")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600230B")]
			[Address(RVA = "0xDB5268", Offset = "0xDB5268", VA = "0xDB5268")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170005A9")]
		public DotModeObjectCollection[] Feedback
		{
			[Token(Token = "0x600230C")]
			[Address(RVA = "0xDB5274", Offset = "0xDB5274", VA = "0xDB5274")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600230D")]
			[Address(RVA = "0xDB527C", Offset = "0xDB527C", VA = "0xDB527C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600230E")]
		[Address(RVA = "0xDB4B58", Offset = "0xDB4B58", VA = "0xDB4B58")]
		internal static DotMode ToDotMode(JSONObject jsonObj)
		{
			return null;
		}

		[Token(Token = "0x600230F")]
		[Address(RVA = "0xDB4FC4", Offset = "0xDB4FC4", VA = "0xDB4FC4")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002310")]
		[Address(RVA = "0xDB5284", Offset = "0xDB5284", VA = "0xDB5284")]
		public DotMode()
		{
		}
	}
	[Token(Token = "0x2000621")]
	public class DotModeObjectCollection
	{
		[Token(Token = "0x40020DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlaybackType PlaybackType;

		[Token(Token = "0x170005AA")]
		public int StartTime
		{
			[Token(Token = "0x6002311")]
			[Address(RVA = "0xDB579C", Offset = "0xDB579C", VA = "0xDB579C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002312")]
			[Address(RVA = "0xDB57A4", Offset = "0xDB57A4", VA = "0xDB57A4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170005AB")]
		public int EndTime
		{
			[Token(Token = "0x6002313")]
			[Address(RVA = "0xDB57AC", Offset = "0xDB57AC", VA = "0xDB57AC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002314")]
			[Address(RVA = "0xDB57B4", Offset = "0xDB57B4", VA = "0xDB57B4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170005AC")]
		public DotModeObject[] PointList
		{
			[Token(Token = "0x6002315")]
			[Address(RVA = "0xDB57BC", Offset = "0xDB57BC", VA = "0xDB57BC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002316")]
			[Address(RVA = "0xDB57C4", Offset = "0xDB57C4", VA = "0xDB57C4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002317")]
		[Address(RVA = "0xDB528C", Offset = "0xDB528C", VA = "0xDB528C")]
		internal static DotModeObjectCollection ToObject(JSONObject val)
		{
			return null;
		}

		[Token(Token = "0x6002318")]
		[Address(RVA = "0xDB5568", Offset = "0xDB5568", VA = "0xDB5568")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002319")]
		[Address(RVA = "0xDB57CC", Offset = "0xDB57CC", VA = "0xDB57CC")]
		public DotModeObjectCollection()
		{
		}
	}
	[Token(Token = "0x2000622")]
	public class DotModeObject
	{
		[Token(Token = "0x170005AD")]
		public int Index
		{
			[Token(Token = "0x600231A")]
			[Address(RVA = "0xDB5AD0", Offset = "0xDB5AD0", VA = "0xDB5AD0")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600231B")]
			[Address(RVA = "0xDB5AD8", Offset = "0xDB5AD8", VA = "0xDB5AD8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170005AE")]
		public float Intensity
		{
			[Token(Token = "0x600231C")]
			[Address(RVA = "0xDB5AE0", Offset = "0xDB5AE0", VA = "0xDB5AE0")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600231D")]
			[Address(RVA = "0xDB5AE8", Offset = "0xDB5AE8", VA = "0xDB5AE8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600231E")]
		[Address(RVA = "0xDB5918", Offset = "0xDB5918", VA = "0xDB5918")]
		internal static DotModeObject ToObject(JSONObject jsonObject)
		{
			return null;
		}

		[Token(Token = "0x600231F")]
		[Address(RVA = "0xDB59D0", Offset = "0xDB59D0", VA = "0xDB59D0")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002320")]
		[Address(RVA = "0xDB5AF0", Offset = "0xDB5AF0", VA = "0xDB5AF0")]
		public DotModeObject()
		{
		}
	}
	[Token(Token = "0x2000623")]
	public class PathMode
	{
		[Token(Token = "0x170005AF")]
		public PathModeObjectCollection[] Feedback
		{
			[Token(Token = "0x6002321")]
			[Address(RVA = "0xDB5C4C", Offset = "0xDB5C4C", VA = "0xDB5C4C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002322")]
			[Address(RVA = "0xDB5C54", Offset = "0xDB5C54", VA = "0xDB5C54")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002323")]
		[Address(RVA = "0xDB4DBC", Offset = "0xDB4DBC", VA = "0xDB4DBC")]
		internal static PathMode ToPathMode(JSONObject jsonObject)
		{
			return null;
		}

		[Token(Token = "0x6002324")]
		[Address(RVA = "0xDB5144", Offset = "0xDB5144", VA = "0xDB5144")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002325")]
		[Address(RVA = "0xDB5C5C", Offset = "0xDB5C5C", VA = "0xDB5C5C")]
		public PathMode()
		{
		}
	}
	[Token(Token = "0x2000624")]
	public class PathModeObjectCollection
	{
		[Token(Token = "0x40020E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlaybackType PlaybackType;

		[Token(Token = "0x40020E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public PathMovingPattern MovingPattern;

		[Token(Token = "0x170005B0")]
		public PathModeObject[] PointList
		{
			[Token(Token = "0x6002326")]
			[Address(RVA = "0xDB6190", Offset = "0xDB6190", VA = "0xDB6190")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002327")]
			[Address(RVA = "0xDB6198", Offset = "0xDB6198", VA = "0xDB6198")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002328")]
		[Address(RVA = "0xDB5C64", Offset = "0xDB5C64", VA = "0xDB5C64")]
		internal static PathModeObjectCollection ToObject(JSONObject jsonObject)
		{
			return null;
		}

		[Token(Token = "0x6002329")]
		[Address(RVA = "0xDB5F60", Offset = "0xDB5F60", VA = "0xDB5F60")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x600232A")]
		[Address(RVA = "0xDB61A0", Offset = "0xDB61A0", VA = "0xDB61A0")]
		public PathModeObjectCollection()
		{
		}
	}
	[Token(Token = "0x2000625")]
	public class PathModeObject
	{
		[Token(Token = "0x170005B1")]
		public float X
		{
			[Token(Token = "0x600232B")]
			[Address(RVA = "0xDB644C", Offset = "0xDB644C", VA = "0xDB644C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600232C")]
			[Address(RVA = "0xDB6454", Offset = "0xDB6454", VA = "0xDB6454")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170005B2")]
		public float Y
		{
			[Token(Token = "0x600232D")]
			[Address(RVA = "0xDB645C", Offset = "0xDB645C", VA = "0xDB645C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600232E")]
			[Address(RVA = "0xDB6464", Offset = "0xDB6464", VA = "0xDB6464")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170005B3")]
		public float Intensity
		{
			[Token(Token = "0x600232F")]
			[Address(RVA = "0xDB646C", Offset = "0xDB646C", VA = "0xDB646C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002330")]
			[Address(RVA = "0xDB6474", Offset = "0xDB6474", VA = "0xDB6474")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170005B4")]
		public int Time
		{
			[Token(Token = "0x6002331")]
			[Address(RVA = "0xDB647C", Offset = "0xDB647C", VA = "0xDB647C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002332")]
			[Address(RVA = "0xDB6484", Offset = "0xDB6484", VA = "0xDB6484")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002333")]
		[Address(RVA = "0xDB61B0", Offset = "0xDB61B0", VA = "0xDB61B0")]
		internal static PathModeObject ToObject(JSONObject jsonObject)
		{
			return null;
		}

		[Token(Token = "0x6002334")]
		[Address(RVA = "0xDB62CC", Offset = "0xDB62CC", VA = "0xDB62CC")]
		internal JSONObject ToJsonObject()
		{
			return null;
		}

		[Token(Token = "0x6002335")]
		[Address(RVA = "0xDB648C", Offset = "0xDB648C", VA = "0xDB648C")]
		public PathModeObject()
		{
		}
	}
	[Token(Token = "0x2000626")]
	internal class ParseUtil
	{
		[Token(Token = "0x6002336")]
		[Address(RVA = "0xDB5AF8", Offset = "0xDB5AF8", VA = "0xDB5AF8")]
		internal static float GetFloat(JSONObject obj, string key, float defaultValue = -1f)
		{
			return default(float);
		}

		[Token(Token = "0x6002337")]
		[Address(RVA = "0xDB57D4", Offset = "0xDB57D4", VA = "0xDB57D4")]
		internal static int GetInt(JSONObject obj, string key, int defaultValue = -1)
		{
			return default(int);
		}

		[Token(Token = "0x6002338")]
		[Address(RVA = "0xDB6494", Offset = "0xDB6494", VA = "0xDB6494")]
		public ParseUtil()
		{
		}
	}
	[Token(Token = "0x2000627")]
	public class BhapticsUtils
	{
		[Token(Token = "0x40020E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool isInit;

		[Token(Token = "0x40020E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string exeFilePath;

		[Token(Token = "0x40020E9")]
		public const string TypeHead = "Head";

		[Token(Token = "0x40020EA")]
		public const string TypeTactal = "Tactal";

		[Token(Token = "0x40020EB")]
		public const string TypeVest = "Vest";

		[Token(Token = "0x40020EC")]
		public const string TypeTactot = "Tactot";

		[Token(Token = "0x40020ED")]
		public const string TypeTactosy = "Tactosy";

		[Token(Token = "0x40020EE")]
		public const string TypeTactosy2 = "Tactosy2";

		[Token(Token = "0x40020EF")]
		public const string TypeHand = "Hand";

		[Token(Token = "0x40020F0")]
		public const string TypeFoot = "Foot";

		[Token(Token = "0x40020F1")]
		public const string TypeGlove = "Glove";

		[Token(Token = "0x6002339")]
		private static T[] SubArray<T>(T[] data, int index, int length)
		{
			return null;
		}

		[Token(Token = "0x600233A")]
		[Address(RVA = "0xDB649C", Offset = "0xDB649C", VA = "0xDB649C")]
		public static string GetExePath()
		{
			return null;
		}

		[Token(Token = "0x600233B")]
		[Address(RVA = "0xDB64DC", Offset = "0xDB64DC", VA = "0xDB64DC")]
		public static bool IsPlayerInstalled()
		{
			return default(bool);
		}

		[Token(Token = "0x600233C")]
		[Address(RVA = "0xDB64E4", Offset = "0xDB64E4", VA = "0xDB64E4")]
		public static bool IsPlayerRunning()
		{
			return default(bool);
		}

		[Token(Token = "0x600233D")]
		[Address(RVA = "0xDB64EC", Offset = "0xDB64EC", VA = "0xDB64EC")]
		private static bool Is64BitBuild()
		{
			return default(bool);
		}

		[Token(Token = "0x600233E")]
		[Address(RVA = "0xDB6508", Offset = "0xDB6508", VA = "0xDB6508")]
		public static void LaunchPlayer(bool tryLaunch)
		{
		}

		[Token(Token = "0x600233F")]
		[Address(RVA = "0xDB650C", Offset = "0xDB650C", VA = "0xDB650C")]
		public static float Angle(UnityEngine.Vector3 fwd, UnityEngine.Vector3 targetDir)
		{
			return default(float);
		}

		[Token(Token = "0x6002340")]
		[Address(RVA = "0xDB66B0", Offset = "0xDB66B0", VA = "0xDB66B0")]
		private static int AngleDir(UnityEngine.Vector3 fwd, UnityEngine.Vector3 targetDir, UnityEngine.Vector3 up)
		{
			return default(int);
		}

		[Token(Token = "0x6002341")]
		[Address(RVA = "0xDB6708", Offset = "0xDB6708", VA = "0xDB6708")]
		public static PositionType ToPositionType(HapticClipPositionType pos)
		{
			return default(PositionType);
		}

		[Token(Token = "0x6002342")]
		[Address(RVA = "0xDB2AE4", Offset = "0xDB2AE4", VA = "0xDB2AE4")]
		public static PositionType ToPositionType(HapticDeviceType pos, bool isLeft = true)
		{
			return default(PositionType);
		}

		[Token(Token = "0x6002343")]
		[Address(RVA = "0xDB6728", Offset = "0xDB6728", VA = "0xDB6728")]
		public BhapticsUtils()
		{
		}
	}
	[Token(Token = "0x2000628")]
	public class FeetHapticClip : ArmsHapticClip
	{
		[Token(Token = "0x6002344")]
		[Address(RVA = "0xDB6730", Offset = "0xDB6730", VA = "0xDB6730")]
		public FeetHapticClip()
		{
		}
	}
	[Token(Token = "0x2000629")]
	public class FileHapticClip : HapticClip
	{
		[Token(Token = "0x40020F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0.2f, 5f)]
		[Tooltip("Value applied by multiplying")]
		public float Intensity;

		[Token(Token = "0x40020F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0.2f, 5f)]
		[Tooltip("Value applied by multiplying")]
		public float Duration;

		[Token(Token = "0x40020F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HapticDeviceType ClipType;

		[Token(Token = "0x40020F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string JsonValue;

		[Token(Token = "0x40020F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected int _clipDurationTime;

		[Token(Token = "0x170005B5")]
		public int ClipDurationTime
		{
			[Token(Token = "0x6002345")]
			[Address(RVA = "0xDB6744", Offset = "0xDB6744", VA = "0xDB6744")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6002346")]
		[Address(RVA = "0xDB6808", Offset = "0xDB6808", VA = "0xDB6808", Slot = "4")]
		public override void Play()
		{
		}

		[Token(Token = "0x6002347")]
		[Address(RVA = "0xDB6864", Offset = "0xDB6864", VA = "0xDB6864", Slot = "5")]
		public override void Play(string identifier)
		{
		}

		[Token(Token = "0x6002348")]
		[Address(RVA = "0xDB687C", Offset = "0xDB687C", VA = "0xDB687C", Slot = "6")]
		public override void Play(float intensity, string identifier = "")
		{
		}

		[Token(Token = "0x6002349")]
		[Address(RVA = "0xDB6894", Offset = "0xDB6894", VA = "0xDB6894", Slot = "7")]
		public override void Play(float intensity, float duration, string identifier = "")
		{
		}

		[Token(Token = "0x600234A")]
		[Address(RVA = "0xDB68A8", Offset = "0xDB68A8", VA = "0xDB68A8", Slot = "8")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, string identifier = "")
		{
		}

		[Token(Token = "0x600234B")]
		[Address(RVA = "0xDB68B8", Offset = "0xDB68B8", VA = "0xDB68B8", Slot = "9")]
		public override void Play(UnityEngine.Vector3 contactPos, Collider targetCollider, string identifier = "")
		{
		}

		[Token(Token = "0x600234C")]
		[Address(RVA = "0xDB69DC", Offset = "0xDB69DC", VA = "0xDB69DC", Slot = "10")]
		public override void Play(UnityEngine.Vector3 contactPos, UnityEngine.Vector3 targetPos, UnityEngine.Vector3 targetForward, float targetHeight, string identifier = "")
		{
		}

		[Token(Token = "0x600234D")]
		[Address(RVA = "0xDB6A50", Offset = "0xDB6A50", VA = "0xDB6A50", Slot = "12")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, float vestRotationOffsetY, string identifier = "")
		{
		}

		[Token(Token = "0x600234E")]
		[Address(RVA = "0xDB2A14", Offset = "0xDB2A14", VA = "0xDB2A14", Slot = "17")]
		public override void ResetValues()
		{
		}

		[Token(Token = "0x600234F")]
		[Address(RVA = "0xDB6770", Offset = "0xDB6770", VA = "0xDB6770")]
		private int CalculateClipDutationTime(HapticFeedbackFile hapticFeedbackFile)
		{
			return default(int);
		}

		[Token(Token = "0x6002350")]
		[Address(RVA = "0xDB2A34", Offset = "0xDB2A34", VA = "0xDB2A34")]
		public FileHapticClip()
		{
		}
	}
	[Token(Token = "0x200062A")]
	public class GloveHapticClip : ArmsHapticClip
	{
		[Token(Token = "0x6002351")]
		[Address(RVA = "0xDB6CF0", Offset = "0xDB6CF0", VA = "0xDB6CF0")]
		public GloveHapticClip()
		{
		}
	}
	[Token(Token = "0x200062B")]
	public class HandsHapticClip : ArmsHapticClip
	{
		[Token(Token = "0x6002352")]
		[Address(RVA = "0xDB6D04", Offset = "0xDB6D04", VA = "0xDB6D04")]
		public HandsHapticClip()
		{
		}
	}
	[Token(Token = "0x200062C")]
	public enum HapticDeviceType
	{
		[Token(Token = "0x40020F8")]
		None,
		[Token(Token = "0x40020F9")]
		Tactal,
		[Token(Token = "0x40020FA")]
		TactSuit,
		[Token(Token = "0x40020FB")]
		Tactosy_arms,
		[Token(Token = "0x40020FC")]
		Tactosy_hands,
		[Token(Token = "0x40020FD")]
		Tactosy_feet,
		[Token(Token = "0x40020FE")]
		TactGlove
	}
	[Serializable]
	[Token(Token = "0x200062D")]
	public enum HapticClipPositionType
	{
		[Token(Token = "0x4002100")]
		VestFront,
		[Token(Token = "0x4002101")]
		VestBack,
		[Token(Token = "0x4002102")]
		Head,
		[Token(Token = "0x4002103")]
		RightForearm,
		[Token(Token = "0x4002104")]
		LeftForearm,
		[Token(Token = "0x4002105")]
		LeftHand,
		[Token(Token = "0x4002106")]
		RightHand,
		[Token(Token = "0x4002107")]
		LeftFoot,
		[Token(Token = "0x4002108")]
		RightFoot,
		[Token(Token = "0x4002109")]
		LeftGlove,
		[Token(Token = "0x400210A")]
		RightGlove
	}
	[Token(Token = "0x200062E")]
	public class HapticClip : ScriptableObject
	{
		[NonSerialized]
		[Token(Token = "0x400210B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected string assetId;

		[NonSerialized]
		[Token(Token = "0x400210C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string keyId;

		[Token(Token = "0x6002353")]
		[Address(RVA = "0xDB6D18", Offset = "0xDB6D18", VA = "0xDB6D18", Slot = "4")]
		public virtual void Play()
		{
		}

		[Token(Token = "0x6002354")]
		[Address(RVA = "0xDB6D78", Offset = "0xDB6D78", VA = "0xDB6D78", Slot = "5")]
		public virtual void Play(string identifier)
		{
		}

		[Token(Token = "0x6002355")]
		[Address(RVA = "0xDB6D94", Offset = "0xDB6D94", VA = "0xDB6D94", Slot = "6")]
		public virtual void Play(float intensity, string identifier = "")
		{
		}

		[Token(Token = "0x6002356")]
		[Address(RVA = "0xDB6DAC", Offset = "0xDB6DAC", VA = "0xDB6DAC", Slot = "7")]
		public virtual void Play(float intensity, float duration, string identifier = "")
		{
		}

		[Token(Token = "0x6002357")]
		[Address(RVA = "0xDB6DC0", Offset = "0xDB6DC0", VA = "0xDB6DC0", Slot = "8")]
		public virtual void Play(float intensity, float duration, float vestRotationAngleX, string identifier = "")
		{
		}

		[Token(Token = "0x6002358")]
		[Address(RVA = "0xDB6DD0", Offset = "0xDB6DD0", VA = "0xDB6DD0", Slot = "9")]
		public virtual void Play(UnityEngine.Vector3 contactPos, Collider targetCollider, string identifier = "")
		{
		}

		[Token(Token = "0x6002359")]
		[Address(RVA = "0xDB6EF4", Offset = "0xDB6EF4", VA = "0xDB6EF4", Slot = "10")]
		public virtual void Play(UnityEngine.Vector3 contactPos, UnityEngine.Vector3 targetPos, UnityEngine.Vector3 targetForward, float targetHeight, string identifier = "")
		{
		}

		[Token(Token = "0x600235A")]
		[Address(RVA = "0xDB6F64", Offset = "0xDB6F64", VA = "0xDB6F64", Slot = "11")]
		public virtual void Play(float intensity, float duration, UnityEngine.Vector3 contactPos, UnityEngine.Vector3 targetPos, UnityEngine.Vector3 targetForward, float targetHeight, string identifier = "")
		{
		}

		[Token(Token = "0x600235B")]
		[Address(RVA = "0xDB6FE4", Offset = "0xDB6FE4", VA = "0xDB6FE4", Slot = "12")]
		public virtual void Play(float intensity, float duration, float vestRotationAngleX, float vestRotationOffsetY, string identifier = "")
		{
		}

		[Token(Token = "0x600235C")]
		[Address(RVA = "0xDB6FE8", Offset = "0xDB6FE8", VA = "0xDB6FE8", Slot = "13")]
		public virtual void Stop()
		{
		}

		[Token(Token = "0x600235D")]
		[Address(RVA = "0xDB708C", Offset = "0xDB708C", VA = "0xDB708C", Slot = "14")]
		public virtual void Stop(string identifier)
		{
		}

		[Token(Token = "0x600235E")]
		[Address(RVA = "0xDB715C", Offset = "0xDB715C", VA = "0xDB715C", Slot = "15")]
		public virtual bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x600235F")]
		[Address(RVA = "0xDB7218", Offset = "0xDB7218", VA = "0xDB7218", Slot = "16")]
		public virtual bool IsPlaying(string identifier)
		{
			return default(bool);
		}

		[Token(Token = "0x6002360")]
		[Address(RVA = "0xDB6C90", Offset = "0xDB6C90", VA = "0xDB6C90", Slot = "17")]
		public virtual void ResetValues()
		{
		}

		[Token(Token = "0x6002361")]
		[Address(RVA = "0xDB72E8", Offset = "0xDB72E8", VA = "0xDB72E8")]
		public string GetAssetID()
		{
			return null;
		}

		[Token(Token = "0x6002362")]
		[Address(RVA = "0xDB6C94", Offset = "0xDB6C94", VA = "0xDB6C94")]
		public HapticClip()
		{
		}
	}
	[Token(Token = "0x200062F")]
	public class HapticReceiver : MonoBehaviour
	{
		[Token(Token = "0x400210D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsActive;

		[Token(Token = "0x400210E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public PositionTag PositionTag;

		[Token(Token = "0x6002363")]
		[Address(RVA = "0xDB72F0", Offset = "0xDB72F0", VA = "0xDB72F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002364")]
		[Address(RVA = "0xDB7430", Offset = "0xDB7430", VA = "0xDB7430")]
		private void OnTriggerEnter(Collider bullet)
		{
		}

		[Token(Token = "0x6002365")]
		[Address(RVA = "0xDB75D0", Offset = "0xDB75D0", VA = "0xDB75D0")]
		private void OnCollisionEnter(Collision bullet)
		{
		}

		[Token(Token = "0x6002366")]
		[Address(RVA = "0xDB74EC", Offset = "0xDB74EC", VA = "0xDB74EC")]
		private void Handle(UnityEngine.Vector3 contactPoint, HapticSender tactSender)
		{
		}

		[Token(Token = "0x6002367")]
		[Address(RVA = "0xDB77B4", Offset = "0xDB77B4", VA = "0xDB77B4")]
		public HapticReceiver()
		{
		}
	}
	[Token(Token = "0x2000630")]
	public class HapticSender : MonoBehaviour
	{
		[Token(Token = "0x400210F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HapticClip[] DefaultClips;

		[Token(Token = "0x4002110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HeadHapticClip[] HeadClips;

		[Token(Token = "0x4002111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VestHapticClip[] BodyClips;

		[Token(Token = "0x4002112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ArmsHapticClip[] LeftArmClips;

		[Token(Token = "0x4002113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ArmsHapticClip[] RightArmClips;

		[Token(Token = "0x4002114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float yOffsetMultiplier;

		[Token(Token = "0x6002368")]
		[Address(RVA = "0xDB77C4", Offset = "0xDB77C4", VA = "0xDB77C4")]
		public void Play(PositionTag posTag = PositionTag.Default)
		{
		}

		[Token(Token = "0x6002369")]
		[Address(RVA = "0xDB76A8", Offset = "0xDB76A8", VA = "0xDB76A8")]
		public void Play(PositionTag posTag, UnityEngine.Vector3 contactPos, Collider targetCollider)
		{
		}

		[Token(Token = "0x600236A")]
		[Address(RVA = "0xDB7A1C", Offset = "0xDB7A1C", VA = "0xDB7A1C")]
		private void Play(PositionTag posTag, UnityEngine.Vector3 contactPos, UnityEngine.Vector3 targetPos, UnityEngine.Vector3 targetForward, float targetHeight)
		{
		}

		[Token(Token = "0x600236B")]
		[Address(RVA = "0xDB7A90", Offset = "0xDB7A90", VA = "0xDB7A90")]
		public void Play(PositionTag posTag, RaycastHit hit)
		{
		}

		[Token(Token = "0x600236C")]
		[Address(RVA = "0xDB7BC0", Offset = "0xDB7BC0", VA = "0xDB7BC0")]
		private HapticClip GetClip(PositionTag posTag)
		{
			return null;
		}

		[Token(Token = "0x600236D")]
		[Address(RVA = "0xDB7CD8", Offset = "0xDB7CD8", VA = "0xDB7CD8")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x600236E")]
		[Address(RVA = "0xDB77D0", Offset = "0xDB77D0", VA = "0xDB77D0")]
		public void Play(PositionTag posTag, float angleX, float offsetY)
		{
		}

		[Token(Token = "0x600236F")]
		[Address(RVA = "0xDB7CE0", Offset = "0xDB7CE0", VA = "0xDB7CE0")]
		public HapticSender()
		{
		}
	}
	[Token(Token = "0x2000631")]
	public enum PositionTag
	{
		[Token(Token = "0x4002116")]
		Body,
		[Token(Token = "0x4002117")]
		Head,
		[Token(Token = "0x4002118")]
		LeftArm,
		[Token(Token = "0x4002119")]
		RightArm,
		[Token(Token = "0x400211A")]
		Default
	}
	[Token(Token = "0x2000632")]
	public class HapticSource : MonoBehaviour
	{
		[Token(Token = "0x2000633")]
		[CompilerGenerated]
		private sealed class <PlayCoroutine>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002122")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002123")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002124")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delaySecond;

			[Token(Token = "0x4002125")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HapticSource <>4__this;

			[Token(Token = "0x170005B6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600237F")]
				[Address(RVA = "0xDB8670", Offset = "0xDB8670", VA = "0xDB8670", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170005B7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002381")]
				[Address(RVA = "0xDB86B8", Offset = "0xDB86B8", VA = "0xDB86B8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600237C")]
			[Address(RVA = "0xDB854C", Offset = "0xDB854C", VA = "0xDB854C")]
			[DebuggerHidden]
			public <PlayCoroutine>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x600237D")]
			[Address(RVA = "0xDB85A4", Offset = "0xDB85A4", VA = "0xDB85A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600237E")]
			[Address(RVA = "0xDB85A8", Offset = "0xDB85A8", VA = "0xDB85A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002380")]
			[Address(RVA = "0xDB8678", Offset = "0xDB8678", VA = "0xDB8678", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000634")]
		[CompilerGenerated]
		private sealed class <PlayLoopCoroutine>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002126")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002127")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002128")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HapticSource <>4__this;

			[Token(Token = "0x4002129")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private WaitForSeconds <duration>5__2;

			[Token(Token = "0x170005B8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002385")]
				[Address(RVA = "0xDB888C", Offset = "0xDB888C", VA = "0xDB888C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170005B9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002387")]
				[Address(RVA = "0xDB88D4", Offset = "0xDB88D4", VA = "0xDB88D4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002382")]
			[Address(RVA = "0xDB8574", Offset = "0xDB8574", VA = "0xDB8574")]
			[DebuggerHidden]
			public <PlayLoopCoroutine>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6002383")]
			[Address(RVA = "0xDB86C0", Offset = "0xDB86C0", VA = "0xDB86C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002384")]
			[Address(RVA = "0xDB86C4", Offset = "0xDB86C4", VA = "0xDB86C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002386")]
			[Address(RVA = "0xDB8894", Offset = "0xDB8894", VA = "0xDB8894", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400211B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HapticClip clip;

		[Token(Token = "0x400211C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool playOnAwake;

		[Token(Token = "0x400211D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool loop;

		[Token(Token = "0x400211E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float loopDelaySeconds;

		[Token(Token = "0x400211F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Coroutine currentCoroutine;

		[Token(Token = "0x4002120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Coroutine loopCoroutine;

		[Token(Token = "0x4002121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool isLooping;

		[Token(Token = "0x6002370")]
		[Address(RVA = "0xDB7CF0", Offset = "0xDB7CF0", VA = "0xDB7CF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002371")]
		[Address(RVA = "0xDB7F60", Offset = "0xDB7F60", VA = "0xDB7F60")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002372")]
		[Address(RVA = "0xDB81D4", Offset = "0xDB81D4", VA = "0xDB81D4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002373")]
		[Address(RVA = "0xDB8298", Offset = "0xDB8298", VA = "0xDB8298")]
		public void Play()
		{
		}

		[Token(Token = "0x6002374")]
		[Address(RVA = "0xDB7F7C", Offset = "0xDB7F7C", VA = "0xDB7F7C")]
		public void PlayLoop()
		{
		}

		[Token(Token = "0x6002375")]
		[Address(RVA = "0xDB8304", Offset = "0xDB8304", VA = "0xDB8304")]
		public void PlayDelayed(float delaySecond = 0f)
		{
		}

		[Token(Token = "0x6002376")]
		[Address(RVA = "0xDB81D8", Offset = "0xDB81D8", VA = "0xDB81D8")]
		public void Stop()
		{
		}

		[Token(Token = "0x6002377")]
		[Address(RVA = "0xDB84BC", Offset = "0xDB84BC", VA = "0xDB84BC")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6002378")]
		[Address(RVA = "0xDB8444", Offset = "0xDB8444", VA = "0xDB8444")]
		[IteratorStateMachine(typeof(<PlayCoroutine>d__15))]
		private IEnumerator PlayCoroutine(float delaySecond)
		{
			return null;
		}

		[Token(Token = "0x6002379")]
		[Address(RVA = "0xDB80B0", Offset = "0xDB80B0", VA = "0xDB80B0")]
		private void PlayHapticClip()
		{
		}

		[Token(Token = "0x600237A")]
		[Address(RVA = "0xDB829C", Offset = "0xDB829C", VA = "0xDB829C")]
		[IteratorStateMachine(typeof(<PlayLoopCoroutine>d__17))]
		private IEnumerator PlayLoopCoroutine()
		{
			return null;
		}

		[Token(Token = "0x600237B")]
		[Address(RVA = "0xDB859C", Offset = "0xDB859C", VA = "0xDB859C")]
		public HapticSource()
		{
		}
	}
	[Token(Token = "0x2000635")]
	public class HeadHapticClip : FileHapticClip
	{
		[Token(Token = "0x6002388")]
		[Address(RVA = "0xDB88DC", Offset = "0xDB88DC", VA = "0xDB88DC")]
		public HeadHapticClip()
		{
		}
	}
	[Token(Token = "0x2000636")]
	public interface IHaptic
	{
		[Token(Token = "0x6002389")]
		bool IsConnect(PositionType type);

		[Token(Token = "0x600238A")]
		bool IsConnect(HapticDeviceType type, bool isLeft = true);

		[Token(Token = "0x600238B")]
		bool IsPlaying(string key);

		[Token(Token = "0x600238C")]
		bool IsFeedbackRegistered(string key);

		[Token(Token = "0x600238D")]
		bool IsPlaying();

		[Token(Token = "0x600238E")]
		void RegisterTactFileStr(string key, string tactFileStr);

		[Token(Token = "0x600238F")]
		void RegisterTactFileStrReflected(string key, string tactFileStr);

		[Token(Token = "0x6002390")]
		void Submit(string key, PositionType position, List<DotPoint> points, int durationMillis);

		[Token(Token = "0x6002391")]
		void Submit(string key, PositionType position, List<PathPoint> points, int durationMillis);

		[Token(Token = "0x6002392")]
		void SubmitRegistered(string key, string altKey, ScaleOption option);

		[Token(Token = "0x6002393")]
		void SubmitRegistered(string key, string altKey, RotationOption rOption, ScaleOption sOption);

		[Token(Token = "0x6002394")]
		void SubmitRegistered(string key);

		[Token(Token = "0x6002395")]
		void SubmitRegistered(string key, int startTimeMillis);

		[Token(Token = "0x6002396")]
		void TurnOff(string key);

		[Token(Token = "0x6002397")]
		void TurnOff();

		[Token(Token = "0x6002398")]
		void Dispose();

		[Token(Token = "0x6002399")]
		int[] GetCurrentFeedback(PositionType pos);
	}
	[Token(Token = "0x2000637")]
	[CreateAssetMenu(fileName = "SimpleHapticClip", menuName = "Bhaptics/Create Simple HapticClip")]
	public class SimpleHapticClip : HapticClip
	{
		[Token(Token = "0x400212A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Point[] DefaultPoints;

		[Token(Token = "0x400212B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HapticClipPositionType Position;

		[Token(Token = "0x400212C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private SimpleHapticType Mode;

		[Token(Token = "0x400212D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int[] DotPoints;

		[Token(Token = "0x400212E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Point[] Points;

		[Token(Token = "0x400212F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(20f, 10000f)]
		public int TimeMillis;

		[Token(Token = "0x600239A")]
		[Address(RVA = "0xDB88F0", Offset = "0xDB88F0", VA = "0xDB88F0", Slot = "12")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, float vestRotationOffsetY, string identifier = "")
		{
		}

		[Token(Token = "0x600239B")]
		[Address(RVA = "0xDB8DC4", Offset = "0xDB8DC4", VA = "0xDB8DC4", Slot = "17")]
		public override void ResetValues()
		{
		}

		[Token(Token = "0x600239C")]
		[Address(RVA = "0xDB8ADC", Offset = "0xDB8ADC", VA = "0xDB8ADC")]
		private static List<DotPoint> Convert(int[] points)
		{
			return null;
		}

		[Token(Token = "0x600239D")]
		[Address(RVA = "0xDB8C4C", Offset = "0xDB8C4C", VA = "0xDB8C4C")]
		private static List<PathPoint> Convert(Point[] points)
		{
			return null;
		}

		[Token(Token = "0x600239E")]
		[Address(RVA = "0xDB8E50", Offset = "0xDB8E50", VA = "0xDB8E50")]
		public SimpleHapticClip()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000638")]
	public class Point
	{
		[Token(Token = "0x4002130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		public float X;

		[Token(Token = "0x4002131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 1f)]
		public float Y;

		[Token(Token = "0x4002132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 100f)]
		public int Intensity;

		[Token(Token = "0x60023A0")]
		[Address(RVA = "0xDB8F5C", Offset = "0xDB8F5C", VA = "0xDB8F5C")]
		public Point(float x, float y, int intensity)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000639")]
	public enum SimpleHapticType
	{
		[Token(Token = "0x4002134")]
		DotMode = 1,
		[Token(Token = "0x4002135")]
		PathMode
	}
	[Token(Token = "0x200063A")]
	public class VestHapticClip : FileHapticClip
	{
		[Token(Token = "0x4002136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 360f)]
		[SerializeField]
		protected float TactFileAngleX;

		[Token(Token = "0x4002137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[Range(-0.5f, 0.5f)]
		protected float TactFileOffsetY;

		[Token(Token = "0x4002138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RotationOption _rotationOption;

		[Token(Token = "0x4002139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ScaleOption _scaleOption;

		[Token(Token = "0x60023A1")]
		[Address(RVA = "0xDB907C", Offset = "0xDB907C", VA = "0xDB907C", Slot = "4")]
		public override void Play()
		{
		}

		[Token(Token = "0x60023A2")]
		[Address(RVA = "0xDB90D8", Offset = "0xDB90D8", VA = "0xDB90D8", Slot = "5")]
		public override void Play(string identifier)
		{
		}

		[Token(Token = "0x60023A3")]
		[Address(RVA = "0xDB90F0", Offset = "0xDB90F0", VA = "0xDB90F0", Slot = "6")]
		public override void Play(float intensity, string identifier = "")
		{
		}

		[Token(Token = "0x60023A4")]
		[Address(RVA = "0xDB9108", Offset = "0xDB9108", VA = "0xDB9108", Slot = "7")]
		public override void Play(float intensity, float duration, string identifier = "")
		{
		}

		[Token(Token = "0x60023A5")]
		[Address(RVA = "0xDB911C", Offset = "0xDB911C", VA = "0xDB911C", Slot = "8")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, string identifier = "")
		{
		}

		[Token(Token = "0x60023A6")]
		[Address(RVA = "0xDB912C", Offset = "0xDB912C", VA = "0xDB912C", Slot = "12")]
		public override void Play(float intensity, float duration, float vestRotationAngleX, float vestRotationOffsetY, string identifier = "")
		{
		}

		[Token(Token = "0x60023A7")]
		[Address(RVA = "0xDB9378", Offset = "0xDB9378", VA = "0xDB9378", Slot = "17")]
		public override void ResetValues()
		{
		}

		[Token(Token = "0x60023A8")]
		[Address(RVA = "0xDB9388", Offset = "0xDB9388", VA = "0xDB9388")]
		public VestHapticClip()
		{
		}
	}
	[Token(Token = "0x200063B")]
	public class VisualFeedback : MonoBehaviour
	{
		[Token(Token = "0x400213A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HapticClipPositionType devicePos;

		[Token(Token = "0x400213B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform motorContainer;

		[Token(Token = "0x400213C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Gradient motorFeedbackGradient;

		[Token(Token = "0x400213D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform[] motors;

		[Token(Token = "0x400213E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float motorScaleOffset;

		[Token(Token = "0x60023A9")]
		[Address(RVA = "0xDB943C", Offset = "0xDB943C", VA = "0xDB943C")]
		private void Start()
		{
		}

		[Token(Token = "0x60023AA")]
		[Address(RVA = "0xDB979C", Offset = "0xDB979C", VA = "0xDB979C")]
		public void UpdateFeedback(HapticFeedback feedback)
		{
		}

		[Token(Token = "0x60023AB")]
		[Address(RVA = "0xDB9854", Offset = "0xDB9854", VA = "0xDB9854")]
		public void UpdateFeedback(int[] feedbackValues)
		{
		}

		[Token(Token = "0x60023AC")]
		[Address(RVA = "0xDB9A34", Offset = "0xDB9A34", VA = "0xDB9A34")]
		public VisualFeedback()
		{
		}
	}
}
namespace Sigtrap.VrTunnellingPro
{
	[Token(Token = "0x200063C")]
	public class Tunnelling : TunnellingImageBase
	{
		[Token(Token = "0x170005BA")]
		protected override CameraEvent _maskCmdEvt
		{
			[Token(Token = "0x60023AD")]
			[Address(RVA = "0xDB9A4C", Offset = "0xDB9A4C", VA = "0xDB9A4C", Slot = "9")]
			get
			{
				return default(CameraEvent);
			}
		}

		[Token(Token = "0x60023AE")]
		[Address(RVA = "0xDB9A54", Offset = "0xDB9A54", VA = "0xDB9A54")]
		private void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x60023AF")]
		[Address(RVA = "0xDB9EF8", Offset = "0xDB9EF8", VA = "0xDB9EF8")]
		public Tunnelling()
		{
		}
	}
	[Token(Token = "0x200063D")]
	public abstract class TunnellingBase : MonoBehaviour
	{
		[Token(Token = "0x200063E")]
		public enum BackgroundMode
		{
			[Token(Token = "0x400219C")]
			COLOR,
			[Token(Token = "0x400219D")]
			SKYBOX,
			[Token(Token = "0x400219E")]
			CAGE_COLOR,
			[Token(Token = "0x400219F")]
			CAGE_SKYBOX,
			[Token(Token = "0x40021A0")]
			CAGE_ONLY,
			[Token(Token = "0x40021A1")]
			BLUR
		}

		[Token(Token = "0x200063F")]
		public enum MaskMode
		{
			[Token(Token = "0x40021A3")]
			OFF,
			[Token(Token = "0x40021A4")]
			MASK,
			[Token(Token = "0x40021A5")]
			WINDOW,
			[Token(Token = "0x40021A6")]
			PORTAL
		}

		[Token(Token = "0x2000640")]
		public enum MSAA
		{
			[Token(Token = "0x40021A8")]
			AUTO,
			[Token(Token = "0x40021A9")]
			OFF,
			[Token(Token = "0x40021AA")]
			X2,
			[Token(Token = "0x40021AB")]
			X4,
			[Token(Token = "0x40021AC")]
			X8
		}

		[Token(Token = "0x400213F")]
		public const string VRTP_VERSION = "1.2.1";

		[Token(Token = "0x4002140")]
		public const int VRTP_VERSION_MAJOR = 1;

		[Token(Token = "0x4002141")]
		public const int VRTP_VERSION_MINOR = 2;

		[Token(Token = "0x4002142")]
		public const int VRTP_VERSION_PATCH = 1;

		[Token(Token = "0x4002143")]
		public const string VRTP_VERSION_BETA = "";

		[Token(Token = "0x4002144")]
		public const string GLOBAL_PROP_FOGCOLOR = "_VRTP_Cage_FogColor";

		[Token(Token = "0x4002145")]
		public const string GLOBAL_PROP_FOGDENSITY = "_VRTP_Cage_FogDensity";

		[Token(Token = "0x4002146")]
		public const string GLOBAL_PROP_FOGPOWER = "_VRTP_Cage_FogPower";

		[Token(Token = "0x4002147")]
		public const string GLOBAL_PROP_FOGBLEND = "_VRTP_Cage_FogBlend";

		[Token(Token = "0x4002148")]
		protected const string PATH_SHADERS = "Hidden/VrTunnellingPro/";

		[Token(Token = "0x4002149")]
		protected const string PATH_MESHES = "Meshes/";

		[Token(Token = "0x400214A")]
		protected const string PATH_IRISMESH = "Iris";

		[Token(Token = "0x400214B")]
		protected const string PROP_OUTER = "_FxOuter";

		[Token(Token = "0x400214C")]
		protected const string PROP_INNER = "_FxInner";

		[Token(Token = "0x400214D")]
		protected const string PROP_COLOR = "_Color";

		[Token(Token = "0x400214E")]
		protected const string PROP_SKYBOX = "_Skybox";

		[Token(Token = "0x400214F")]
		protected const string PROP_EYEPRJ = "_EyeProjection";

		[Token(Token = "0x4002150")]
		protected const string PROP_EYEMAT = "_EyeToWorld";

		[Token(Token = "0x4002151")]
		protected const string KEYWORD_BKG = "TUNNEL_BKG";

		[Token(Token = "0x4002152")]
		protected const string KEYWORD_SKYBOX = "TUNNEL_SKYBOX";

		[Token(Token = "0x4002153")]
		protected const string KEYWORD_OVERLAY = "TUNNEL_OVERLAY";

		[Token(Token = "0x4002154")]
		public const float FEATHER_MAX = 0.5f;

		[Token(Token = "0x4002155")]
		public const float MOTION_STRENGTH_MAX = 2f;

		[Token(Token = "0x4002156")]
		public const float COUNTER_STRENGTH_MAX = 2f;

		[Token(Token = "0x4002157")]
		public const int FPSDIV_MAX = 60;

		[Token(Token = "0x4002158")]
		private const float COVERAGE_MIN = 0.65f;

		[Token(Token = "0x4002159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int _propFxInner;

		[Token(Token = "0x400215A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected int _propFxOuter;

		[Token(Token = "0x400215B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _propEyeProjection;

		[Token(Token = "0x400215C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _propEyeToWorld;

		[Token(Token = "0x400215D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected int _globPropFogColor;

		[Token(Token = "0x400215E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected int _globPropFogDensity;

		[Token(Token = "0x400215F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected int _globPropFogPower;

		[Token(Token = "0x4002160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected int _globPropFogBlend;

		[Token(Token = "0x4002161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Matrix4x4[] _eyeToWorld;

		[Token(Token = "0x4002162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Matrix4x4[] _eyeProjection;

		[Token(Token = "0x4002163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Motion calculated using this Transform.\n> Generally shouldn't use HMD")]
		public Transform motionTarget;

		[Token(Token = "0x4002164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Colour of vignette.\n> Alpha is blend factor.")]
		public Color effectColor;

		[Token(Token = "0x4002165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Maximum screen coverage.")]
		[Range(0f, 1f)]
		public float effectCoverage;

		[Token(Token = "0x4002166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Feather around cut-off as fraction of screen.")]
		[Range(0f, 0.5f)]
		public float effectFeather;

		[Token(Token = "0x4002167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Cubemap effectSkybox;

		[Token(Token = "0x4002168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool applyColorToBackground;

		[Token(Token = "0x4002169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[Tooltip("Add angular velocity to effect strength?\nHelps players with average sim-sickness.")]
		public bool useAngularVelocity;

		[Token(Token = "0x400216A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Range(0f, 2f)]
		public float angularVelocityStrength;

		[Token(Token = "0x400216B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float angularVelocityMin;

		[Token(Token = "0x400216C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float angularVelocityMax;

		[Token(Token = "0x400216D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float angularVelocitySmoothing;

		[Token(Token = "0x400216E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Add linear acceleration to effect strength?\nHelps players with above-average sim-sickness.")]
		public bool useAcceleration;

		[Token(Token = "0x400216F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Range(0f, 2f)]
		public float accelerationStrength;

		[Token(Token = "0x4002170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float accelerationMin;

		[Token(Token = "0x4002171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float accelerationMax;

		[Token(Token = "0x4002172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float accelerationSmoothing;

		[Token(Token = "0x4002173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Add linear velocity to effect strength?\nHelps players with strong sim-sickness.")]
		public bool useVelocity;

		[Token(Token = "0x4002174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Range(0f, 2f)]
		public float velocityStrength;

		[Token(Token = "0x4002175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float velocityMin;

		[Token(Token = "0x4002176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float velocityMax;

		[Token(Token = "0x4002177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float velocitySmoothing;

		[Token(Token = "0x4002178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Transform used for artificial tilt and framerate division.\nShould be below Motion Target in hierarchy.\nTarget's transform should not be modified by anything else.")]
		public Transform motionEffectTarget;

		[Token(Token = "0x4002179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Move/rotate cage/skybox opposite to Motion Target motion.")]
		public bool useCounterMotion;

		[Token(Token = "0x400217A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Tooltip("Scale counter-rotation relative to Motion Target rotation.")]
		[Range(0f, 2f)]
		public float counterRotationStrength;

		[Token(Token = "0x400217B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Scale counter-rotation on individual axes.\nX: Pitch, Y: Yaw, Z: Roll")]
		public UnityEngine.Vector3 counterRotationPerAxis;

		[Token(Token = "0x400217C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("Artifically tilt the camera when moving to simulate acceleration forces.")]
		public bool useArtificialTilt;

		[Token(Token = "0x400217D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Strength of artificial tilt relative to linear acceleration.")]
		public float tiltStrength;

		[Token(Token = "0x400217E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Tooltip("Maximum artificial tilt in degrees. Zero for no clamp.\nX: Pitch, Y: Roll.")]
		public UnityEngine.Vector2 tiltMaxAngles;

		[Token(Token = "0x400217F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Tooltip("Smooth out tilt over this time.")]
		[Range(0f, 0.5f)]
		public float tiltSmoothTime;

		[Token(Token = "0x4002180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Divide VR framerate by this number while keeping HMD and cage at device framerate.")]
		[Range(1f, 60f)]
		public int framerateDivision;

		[Token(Token = "0x4002181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public bool divideTranslation;

		[Token(Token = "0x4002182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE5")]
		public bool divideRotation;

		[Token(Token = "0x4002183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion _lastRot;

		[Token(Token = "0x4002184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private UnityEngine.Vector3 _lastFwd;

		[Token(Token = "0x4002185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private UnityEngine.Vector3 _lastPos;

		[Token(Token = "0x4002186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float _lastSpeed;

		[Token(Token = "0x4002187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private UnityEngine.Vector3 _lastVel;

		[Token(Token = "0x4002188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected Quaternion _cmRot;

		[Token(Token = "0x4002189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float _avSmoothed;

		[Token(Token = "0x400218A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private float _avSlew;

		[Token(Token = "0x400218B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float _speedSmoothed;

		[Token(Token = "0x400218C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private float _speedSlew;

		[Token(Token = "0x400218D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private float _accelSmoothed;

		[Token(Token = "0x400218E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private float _accelSlew;

		[Token(Token = "0x400218F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Transform _prevMotionEffectTarget;

		[Token(Token = "0x4002190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private bool _prevUseTilt;

		[Token(Token = "0x4002191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private UnityEngine.Vector3 _tiltAccelSmoothed;

		[Token(Token = "0x4002192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private UnityEngine.Vector3 _tiltAccelSlew;

		[Token(Token = "0x4002193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private Angle3 _tiltInit;

		[Token(Token = "0x4002194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private int _lastFpsDivision;

		[Token(Token = "0x4002195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private UnityEngine.Vector3 _mfxTgtLocalPosInit;

		[Token(Token = "0x4002196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Quaternion _mfxTgtLocalRotInit;

		[Token(Token = "0x4002197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		protected Camera _cam;

		[Token(Token = "0x4002198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		protected bool _hasDrawnThisFrame;

		[Token(Token = "0x4002199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private UnityEngine.Vector3 _fpsPosition;

		[Token(Token = "0x400219A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Quaternion _fpsRotation;

		[Token(Token = "0x170005BB")]
		public bool usingMotionEffectTarget
		{
			[Token(Token = "0x60023B0")]
			[Address(RVA = "0xDBA0AC", Offset = "0xDBA0AC", VA = "0xDBA0AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60023B1")]
		[Address(RVA = "0xDBA0CC", Offset = "0xDBA0CC", VA = "0xDBA0CC", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60023B2")]
		[Address(RVA = "0xDBA25C", Offset = "0xDBA25C", VA = "0xDBA25C", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60023B3")]
		[Address(RVA = "0xDBA2C0", Offset = "0xDBA2C0", VA = "0xDBA2C0")]
		protected void ApplyPresetBase(TunnellingPresetBase p)
		{
		}

		[Token(Token = "0x60023B4")]
		[Address(RVA = "0xDBA61C", Offset = "0xDBA61C", VA = "0xDBA61C")]
		protected void FillMaskBuffer(CommandBuffer cb, List<Renderer> rs, Material m)
		{
		}

		[Token(Token = "0x60023B5")]
		[Address(RVA = "0xDBA260", Offset = "0xDBA260", VA = "0xDBA260")]
		protected void ResetMotion()
		{
		}

		[Token(Token = "0x60023B6")]
		[Address(RVA = "0xDBA7E0", Offset = "0xDBA7E0", VA = "0xDBA7E0", Slot = "6")]
		public virtual void ResetCounterMotion()
		{
		}

		[Token(Token = "0x60023B7")]
		[Address(RVA = "0xDBA84C", Offset = "0xDBA84C", VA = "0xDBA84C")]
		private float RemapRadius(float radius)
		{
			return default(float);
		}

		[Token(Token = "0x60023B8")]
		[Address(RVA = "0xDBA878", Offset = "0xDBA878", VA = "0xDBA878")]
		protected float CalculateMotion(float dT)
		{
			return default(float);
		}

		[Token(Token = "0x60023B9")]
		[Address(RVA = "0xDBB5D0", Offset = "0xDBB5D0", VA = "0xDBB5D0")]
		public static UnityEngine.Vector3 SmoothDampAngle(UnityEngine.Vector3 current, UnityEngine.Vector3 target, ref UnityEngine.Vector3 vel, float smoothTime, float maxSpeed, float dT)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60023BA")]
		[Address(RVA = "0xDBB774", Offset = "0xDBB774", VA = "0xDBB774", Slot = "7")]
		protected virtual void UpdateCounterMotion(UnityEngine.Vector3 deltaPos, Quaternion deltaRot)
		{
		}

		[Token(Token = "0x60023BB")]
		[Address(RVA = "0xDBB834", Offset = "0xDBB834", VA = "0xDBB834")]
		protected Quaternion GetCounterRotationDelta(Quaternion deltaRot)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60023BC")]
		[Address(RVA = "0xDBB908", Offset = "0xDBB908", VA = "0xDBB908")]
		protected void UpdateEyeMatrices()
		{
		}

		[Token(Token = "0x60023BD")]
		[Address(RVA = "0xDBBEFC", Offset = "0xDBBEFC", VA = "0xDBBEFC", Slot = "8")]
		protected virtual void CorrectEyeMatrices(Matrix4x4[] eyePrj, Matrix4x4[] eyeToWorld)
		{
		}

		[Token(Token = "0x60023BE")]
		[Address(RVA = "0xDBBF00", Offset = "0xDBBF00", VA = "0xDBBF00")]
		protected void ApplyEyeMatrices(Material m)
		{
		}

		[Token(Token = "0x60023BF")]
		[Address(RVA = "0xDBBF48", Offset = "0xDBBF48", VA = "0xDBBF48")]
		protected TunnellingBase()
		{
		}
	}
	[Token(Token = "0x2000641")]
	public struct Angle
	{
		[Token(Token = "0x2000642")]
		public enum AngleType
		{
			[Token(Token = "0x40021AF")]
			ANGLE,
			[Token(Token = "0x40021B0")]
			ACUTE,
			[Token(Token = "0x40021B1")]
			REFLEX
		}

		[Token(Token = "0x40021AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float _angle;

		[Token(Token = "0x170005BC")]
		public float angle
		{
			[Token(Token = "0x60023C0")]
			[Address(RVA = "0xDBC094", Offset = "0xDBC094", VA = "0xDBC094")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170005BD")]
		public float acute
		{
			[Token(Token = "0x60023C1")]
			[Address(RVA = "0xDBC09C", Offset = "0xDBC09C", VA = "0xDBC09C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170005BE")]
		public float reflex
		{
			[Token(Token = "0x60023C2")]
			[Address(RVA = "0xDBC160", Offset = "0xDBC160", VA = "0xDBC160")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60023C3")]
		[Address(RVA = "0xDBC1AC", Offset = "0xDBC1AC", VA = "0xDBC1AC")]
		public Angle(float a)
		{
		}

		[Token(Token = "0x60023C4")]
		[Address(RVA = "0xDBC1DC", Offset = "0xDBC1DC", VA = "0xDBC1DC")]
		public Angle(Angle a)
		{
		}

		[Token(Token = "0x60023C5")]
		[Address(RVA = "0xDBC20C", Offset = "0xDBC20C", VA = "0xDBC20C")]
		public float ToFloat(AngleType type)
		{
			return default(float);
		}

		[Token(Token = "0x60023C6")]
		[Address(RVA = "0xDBC0E8", Offset = "0xDBC0E8", VA = "0xDBC0E8")]
		public static float ToAngle(float a, AngleType type)
		{
			return default(float);
		}

		[Token(Token = "0x60023C7")]
		[Address(RVA = "0xDBC218", Offset = "0xDBC218", VA = "0xDBC218", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60023C8")]
		[Address(RVA = "0xDBC29C", Offset = "0xDBC29C", VA = "0xDBC29C")]
		public static bool operator <(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023C9")]
		[Address(RVA = "0xDBC2A8", Offset = "0xDBC2A8", VA = "0xDBC2A8")]
		public static bool operator >(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023CA")]
		[Address(RVA = "0xDBC2B4", Offset = "0xDBC2B4", VA = "0xDBC2B4")]
		public static bool operator <=(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023CB")]
		[Address(RVA = "0xDBC2C0", Offset = "0xDBC2C0", VA = "0xDBC2C0")]
		public static bool operator >=(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023CC")]
		[Address(RVA = "0xDBC2CC", Offset = "0xDBC2CC", VA = "0xDBC2CC")]
		public static Angle operator +(Angle a, Angle b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60023CD")]
		[Address(RVA = "0xDBC2FC", Offset = "0xDBC2FC", VA = "0xDBC2FC")]
		public static Angle operator -(Angle a, Angle b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60023CE")]
		[Address(RVA = "0xDBC32C", Offset = "0xDBC32C", VA = "0xDBC32C")]
		public static bool operator ==(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023CF")]
		[Address(RVA = "0xDBC338", Offset = "0xDBC338", VA = "0xDBC338")]
		public static bool operator !=(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023D0")]
		[Address(RVA = "0xDBC344", Offset = "0xDBC344", VA = "0xDBC344", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60023D1")]
		[Address(RVA = "0xDBC3FC", Offset = "0xDBC3FC", VA = "0xDBC3FC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60023D2")]
		[Address(RVA = "0xDBC404", Offset = "0xDBC404", VA = "0xDBC404")]
		public static bool operator <(Angle a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023D3")]
		[Address(RVA = "0xDBC438", Offset = "0xDBC438", VA = "0xDBC438")]
		public static bool operator >(Angle a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023D4")]
		[Address(RVA = "0xDBC46C", Offset = "0xDBC46C", VA = "0xDBC46C")]
		public static bool operator <=(Angle a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023D5")]
		[Address(RVA = "0xDBC4A0", Offset = "0xDBC4A0", VA = "0xDBC4A0")]
		public static bool operator >=(Angle a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023D6")]
		[Address(RVA = "0xDBC4D4", Offset = "0xDBC4D4", VA = "0xDBC4D4")]
		public static Angle operator +(Angle a, float b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60023D7")]
		[Address(RVA = "0xDBC520", Offset = "0xDBC520", VA = "0xDBC520")]
		public static Angle operator -(Angle a, float b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60023D8")]
		[Address(RVA = "0xDBC56C", Offset = "0xDBC56C", VA = "0xDBC56C")]
		public static Angle operator *(Angle a, float b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60023D9")]
		[Address(RVA = "0xDBC59C", Offset = "0xDBC59C", VA = "0xDBC59C")]
		public static Angle operator /(Angle a, float b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60023DA")]
		[Address(RVA = "0xDBC5CC", Offset = "0xDBC5CC", VA = "0xDBC5CC")]
		public static bool operator <(float a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023DB")]
		[Address(RVA = "0xDBC5D4", Offset = "0xDBC5D4", VA = "0xDBC5D4")]
		public static bool operator >(float a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023DC")]
		[Address(RVA = "0xDBC5DC", Offset = "0xDBC5DC", VA = "0xDBC5DC")]
		public static bool operator <=(float a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023DD")]
		[Address(RVA = "0xDBC5E4", Offset = "0xDBC5E4", VA = "0xDBC5E4")]
		public static bool operator >=(float a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023DE")]
		[Address(RVA = "0xDBC5EC", Offset = "0xDBC5EC", VA = "0xDBC5EC")]
		public static Angle operator +(float a, Angle b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60023DF")]
		[Address(RVA = "0xDBC638", Offset = "0xDBC638", VA = "0xDBC638")]
		public static Angle operator -(float a, Angle b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60023E0")]
		[Address(RVA = "0xDBC684", Offset = "0xDBC684", VA = "0xDBC684")]
		public static implicit operator Angle(float f)
		{
			return default(Angle);
		}
	}
	[Token(Token = "0x2000643")]
	public struct Angle3
	{
		[Token(Token = "0x40021B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Angle x;

		[Token(Token = "0x40021B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Angle y;

		[Token(Token = "0x40021B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Angle z;

		[Token(Token = "0x170005BF")]
		public UnityEngine.Vector3 eulerAngles
		{
			[Token(Token = "0x60023E1")]
			[Address(RVA = "0xDBC6B0", Offset = "0xDBC6B0", VA = "0xDBC6B0")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x170005C0")]
		public UnityEngine.Vector3 eulerAcute
		{
			[Token(Token = "0x60023E2")]
			[Address(RVA = "0xDBB3C4", Offset = "0xDBB3C4", VA = "0xDBB3C4")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x170005C1")]
		public UnityEngine.Vector3 eulerReflex
		{
			[Token(Token = "0x60023E3")]
			[Address(RVA = "0xDBC6BC", Offset = "0xDBC6BC", VA = "0xDBC6BC")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x170005C2")]
		public Angle angle
		{
			[Token(Token = "0x60023E4")]
			[Address(RVA = "0xDBC744", Offset = "0xDBC744", VA = "0xDBC744")]
			get
			{
				return default(Angle);
			}
		}

		[Token(Token = "0x170005C3")]
		public UnityEngine.Vector3 axis
		{
			[Token(Token = "0x60023E5")]
			[Address(RVA = "0xDBC804", Offset = "0xDBC804", VA = "0xDBC804")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x60023E6")]
		[Address(RVA = "0xDBB4B4", Offset = "0xDBB4B4", VA = "0xDBB4B4")]
		public Angle3(float x, float y, float z)
		{
		}

		[Token(Token = "0x60023E7")]
		[Address(RVA = "0xDBC838", Offset = "0xDBC838", VA = "0xDBC838")]
		public Angle3(Angle x, Angle y, Angle z)
		{
		}

		[Token(Token = "0x60023E8")]
		[Address(RVA = "0xDBB44C", Offset = "0xDBB44C", VA = "0xDBB44C")]
		public Angle3(UnityEngine.Vector3 euler)
		{
		}

		[Token(Token = "0x60023E9")]
		[Address(RVA = "0xDBC83C", Offset = "0xDBC83C", VA = "0xDBC83C")]
		public Angle3(Quaternion rotation)
		{
		}

		[Token(Token = "0x60023EA")]
		[Address(RVA = "0xDBC774", Offset = "0xDBC774", VA = "0xDBC774")]
		public void ToAxisAngle(out UnityEngine.Vector3 axis, out Angle angle)
		{
		}

		[Token(Token = "0x60023EB")]
		[Address(RVA = "0xDBC874", Offset = "0xDBC874", VA = "0xDBC874")]
		public UnityEngine.Vector3 ToEuler(Angle.AngleType type)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60023EC")]
		[Address(RVA = "0xDBC8D8", Offset = "0xDBC8D8", VA = "0xDBC8D8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60023ED")]
		[Address(RVA = "0xDBB50C", Offset = "0xDBB50C", VA = "0xDBB50C")]
		public static Angle3 operator +(Angle3 a, Angle3 b)
		{
			return default(Angle3);
		}

		[Token(Token = "0x60023EE")]
		[Address(RVA = "0xDBC99C", Offset = "0xDBC99C", VA = "0xDBC99C")]
		public static Angle3 operator -(Angle3 a, Angle3 b)
		{
			return default(Angle3);
		}

		[Token(Token = "0x60023EF")]
		[Address(RVA = "0xDBCA60", Offset = "0xDBCA60", VA = "0xDBCA60")]
		public static Angle3 operator *(Angle3 a, float b)
		{
			return default(Angle3);
		}

		[Token(Token = "0x60023F0")]
		[Address(RVA = "0xDBCB24", Offset = "0xDBCB24", VA = "0xDBCB24")]
		public static bool operator ==(Angle3 a, Angle3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023F1")]
		[Address(RVA = "0xDBCB4C", Offset = "0xDBCB4C", VA = "0xDBCB4C")]
		public static bool operator !=(Angle3 a, Angle3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x60023F2")]
		[Address(RVA = "0xDBCB74", Offset = "0xDBCB74", VA = "0xDBCB74", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60023F3")]
		[Address(RVA = "0xDBCC50", Offset = "0xDBCC50", VA = "0xDBCC50", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60023F4")]
		[Address(RVA = "0xDBB450", Offset = "0xDBB450", VA = "0xDBB450")]
		public static implicit operator Angle3(UnityEngine.Vector3 v)
		{
			return default(Angle3);
		}
	}
	[Token(Token = "0x2000644")]
	public abstract class TunnellingImageBase : TunnellingBase
	{
		[Token(Token = "0x2000645")]
		public enum BlurKernel
		{
			[Token(Token = "0x4002210")]
			FIVE,
			[Token(Token = "0x4002211")]
			NINE,
			[Token(Token = "0x4002212")]
			THIRTEEN
		}

		[Token(Token = "0x2000646")]
		public enum CounterVelocityMode
		{
			[Token(Token = "0x4002214")]
			OFF,
			[Token(Token = "0x4002215")]
			SHADER,
			[Token(Token = "0x4002216")]
			REAL
		}

		[Token(Token = "0x40021B5")]
		private const string KEYWORD_MASK = "TUNNEL_MASK";

		[Token(Token = "0x40021B6")]
		private const string KEYWORD_CONSTANT = "TUNNEL_CONSTANT";

		[Token(Token = "0x40021B7")]
		private const string KEYWORD_INVERT = "TUNNEL_INVERT_MASK";

		[Token(Token = "0x40021B8")]
		private const string KEYWORD_BLUR = "TUNNEL_BLUR";

		[Token(Token = "0x40021B9")]
		private const string PATH_TUNNELSHADER = "Tunnelling";

		[Token(Token = "0x40021BA")]
		private const string PATH_MASKSHADER = "Mask";

		[Token(Token = "0x40021BB")]
		private const string PATH_WINDOWSHADER = "Window";

		[Token(Token = "0x40021BC")]
		private const string PATH_COPYSHADER = "BlitA";

		[Token(Token = "0x40021BD")]
		private const string PATH_BLURSHADER = "SeparableBlur";

		[Token(Token = "0x40021BE")]
		private const string PATH_IRISSHADER = "TunnellingVertexZ";

		[Token(Token = "0x40021BF")]
		private const string PATH_SKYSPHERESHADER = "Skysphere";

		[Token(Token = "0x40021C0")]
		private const string PATH_SKYSPHEREMESH = "Skysphere";

		[Token(Token = "0x40021C1")]
		private const string PROP_FEATHER = "_Feather";

		[Token(Token = "0x40021C2")]
		private const string PROP_BKGRT = "_BkgTex";

		[Token(Token = "0x40021C3")]
		private const string PROP_MASKRT = "_MaskTex";

		[Token(Token = "0x40021C4")]
		private const string PROP_BLUR = "_Blur";

		[Token(Token = "0x40021C5")]
		private const string PROP_OVERLAY = "_Overlay";

		[Token(Token = "0x40021C6")]
		private const string PROP_BLUR_OFFSETS = "_Offsets";

		[Token(Token = "0x40021C7")]
		private const float BLUR_OFFSET_1 = 1.3333334f;

		[Token(Token = "0x40021C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float[] BLUR_OFFSETS_9;

		[Token(Token = "0x40021C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly float[] BLUR_OFFSETS_13;

		[Token(Token = "0x40021CA")]
		public const string GLOBAL_PROP_WORLD2CAGE = "_VRTP_WorldToCage";

		[Token(Token = "0x40021CB")]
		public const string GLOBAL_PROP_WORLD2CAGE_NORMAL = "_VRTP_WorldToCageNormal";

		[Token(Token = "0x40021CC")]
		public const string GLOBAL_PROP_CAGEPOS = "_VRTP_CagePos";

		[Token(Token = "0x40021CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[Tooltip("Determines what is rendered in the vignette effect.")]
		public BackgroundMode backgroundMode;

		[Token(Token = "0x40021CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		[Range(0f, 1f)]
		[Tooltip("Allows a persistent overlay of the effect across the entire view.")]
		public float effectOverlay;

		[Token(Token = "0x40021D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[SerializeField]
		[Tooltip("Root of objects to render as 'cage'.\n> No lighting! Use Unlit materials\n> Parent to camera's parent, to be 'static'")]
		private GameObject _cageParent;

		[Token(Token = "0x40021D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[Range(0f, 2f)]
		public int cageDownsample;

		[Token(Token = "0x40021D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		public MSAA cageAntiAliasing;

		[Token(Token = "0x40021D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public bool cageUpdateEveryFrame;

		[Token(Token = "0x40021D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		[Range(0.001f, 0.2f)]
		public float cageFogDensity;

		[Token(Token = "0x40021D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[Range(1f, 5f)]
		public float cageFogPower;

		[Token(Token = "0x40021D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		[Range(0f, 1f)]
		public float cageFogBlend;

		[Token(Token = "0x40021D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public MaskMode maskMode;

		[Token(Token = "0x40021D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		[Range(0f, 4f)]
		public int blurDownsample;

		[Token(Token = "0x40021D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[Range(1f, 5f)]
		public float blurDistance;

		[Token(Token = "0x40021DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		[Range(1f, 5f)]
		public int blurPasses;

		[Token(Token = "0x40021DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public BlurKernel blurSamples;

		[Token(Token = "0x40021DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		[Tooltip("At start of rendering, fill Z buffer where effect will be to save fillrate on drawing world.\nDisabled with blur or masking.")]
		public bool irisZRejection;

		[Token(Token = "0x40021DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public CounterVelocityMode counterVelocityMode;

		[Token(Token = "0x40021DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		[Tooltip("Reset cage after this distance.\nSet 0 for no distance-based reset.")]
		public float counterVelocityResetDistance;

		[Token(Token = "0x40021DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[Tooltip("Reset cage after this time.\nSet 0 for no distance-based reset.")]
		public float counterVelocityResetTime;

		[Token(Token = "0x40021E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		[Tooltip("Scale counter-velocity relative to Motion Target velocity.")]
		[Range(0f, 2f)]
		public float counterVelocityStrength;

		[Token(Token = "0x40021E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		[Tooltip("Scale counter-velocity on individual axes.\nMultiplied by Counter Velocity Strength.")]
		public UnityEngine.Vector3 counterVelocityPerAxis;

		[Token(Token = "0x40021E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private CommandBuffer _maskCmd;

		[Token(Token = "0x40021E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Material _matTunnel;

		[Token(Token = "0x40021E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private Material _matMask;

		[Token(Token = "0x40021E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private Material _matWindow;

		[Token(Token = "0x40021E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private Material _matCopyAlpha;

		[Token(Token = "0x40021E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private Material _matBlur;

		[Token(Token = "0x40021E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private Material _matSkysphere;

		[Token(Token = "0x40021E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private Mesh _meshSkysphere;

		[Token(Token = "0x40021EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private MeshRenderer[] _cageMrs;

		[Token(Token = "0x40021EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private List<MeshFilter> _cageMfs;

		[Token(Token = "0x40021EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private List<Renderer> _maskObjects;

		[Token(Token = "0x40021ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private RenderTexture _cageRt;

		[Token(Token = "0x40021EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private RenderTexture _maskRt;

		[Token(Token = "0x40021EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private RenderTexture _blurRt0;

		[Token(Token = "0x40021F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private RenderTexture _blurRt1;

		[Token(Token = "0x40021F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private int _rtX;

		[Token(Token = "0x40021F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		private int _rtY;

		[Token(Token = "0x40021F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private int _rtA;

		[Token(Token = "0x40021F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private CommandBuffer _irisCmd;

		[Token(Token = "0x40021F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private Material _matIris;

		[Token(Token = "0x40021F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private Mesh _meshIris;

		[Token(Token = "0x40021F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private Vector4[] _blurOffsets;

		[Token(Token = "0x40021F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private MaskMode _lastMaskMode;

		[Token(Token = "0x40021F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
		private MSAA _lastCageMsaa;

		[Token(Token = "0x40021FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private bool _camHasMaskBuffer;

		[Token(Token = "0x40021FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
		private int _lastCageDownsample;

		[Token(Token = "0x40021FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private int _lastBlurDownsample;

		[Token(Token = "0x40021FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
		private float _lastBlurRadius;

		[Token(Token = "0x40021FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private BlurKernel _lastBlurKernel;

		[Token(Token = "0x40021FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E4")]
		private bool _wasDrawingIrisEarly;

		[Token(Token = "0x4002200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E5")]
		private bool _camHasIrisBuffer;

		[Token(Token = "0x4002201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		private CounterVelocityMode _lastCvMode;

		[Token(Token = "0x4002202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
		private UnityEngine.Vector3 _cmPos;

		[Token(Token = "0x4002203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private UnityEngine.Vector3 _cageInitialPosLocal;

		[Token(Token = "0x4002204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x304")]
		private float _timeToResetCounterVelocity;

		[Token(Token = "0x4002205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private int _propColor;

		[Token(Token = "0x4002206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30C")]
		private int _propBkgRt;

		[Token(Token = "0x4002207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private int _propMaskRt;

		[Token(Token = "0x4002208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
		private int _propSkybox;

		[Token(Token = "0x4002209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private int _propOverlay;

		[Token(Token = "0x400220A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		private int _propBlur;

		[Token(Token = "0x400220B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private int _propBlurOffsets;

		[Token(Token = "0x400220C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x324")]
		private int _globPropWorld2Cage;

		[Token(Token = "0x400220D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		private int _globPropWorld2CageNormal;

		[Token(Token = "0x400220E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
		private int _globPropCagePos;

		[Token(Token = "0x170005C4")]
		public static TunnellingImageBase instance
		{
			[Token(Token = "0x60023F5")]
			[Address(RVA = "0xDBCCBC", Offset = "0xDBCCBC", VA = "0xDBCCBC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60023F6")]
			[Address(RVA = "0xDBCD14", Offset = "0xDBCD14", VA = "0xDBCD14")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170005C5")]
		public bool usingMask
		{
			[Token(Token = "0x60023F7")]
			[Address(RVA = "0xDBCD70", Offset = "0xDBCD70", VA = "0xDBCD70")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005C6")]
		public bool usingCage
		{
			[Token(Token = "0x60023F8")]
			[Address(RVA = "0xDBCD80", Offset = "0xDBCD80", VA = "0xDBCD80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005C7")]
		private bool _usingCageRt
		{
			[Token(Token = "0x60023F9")]
			[Address(RVA = "0xDBCDA4", Offset = "0xDBCDA4", VA = "0xDBCDA4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005C8")]
		private bool _canDrawIris
		{
			[Token(Token = "0x60023FA")]
			[Address(RVA = "0xDBCDB8", Offset = "0xDBCDB8", VA = "0xDBCDB8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005C9")]
		private bool _drawIris
		{
			[Token(Token = "0x60023FB")]
			[Address(RVA = "0xDBCDEC", Offset = "0xDBCDEC", VA = "0xDBCDEC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005CA")]
		protected abstract CameraEvent _maskCmdEvt
		{
			[Token(Token = "0x60023FC")]
			get;
		}

		[Token(Token = "0x60023FD")]
		[Address(RVA = "0xDBCE28", Offset = "0xDBCE28", VA = "0xDBCE28", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60023FE")]
		[Address(RVA = "0xDBD744", Offset = "0xDBD744", VA = "0xDBD744", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60023FF")]
		[Address(RVA = "0xDBDAFC", Offset = "0xDBDAFC", VA = "0xDBDAFC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002400")]
		[Address(RVA = "0xDBDB70", Offset = "0xDBDB70", VA = "0xDBDB70")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002401")]
		[Address(RVA = "0xDBDD48", Offset = "0xDBDD48", VA = "0xDBDD48")]
		private void ReleaseRT(ref RenderTexture rt)
		{
		}

		[Token(Token = "0x6002402")]
		[Address(RVA = "0xDBDDC8", Offset = "0xDBDDC8", VA = "0xDBDDC8")]
		public void AddObjectToMask(Renderer r, bool includeChildren = false)
		{
		}

		[Token(Token = "0x6002403")]
		[Address(RVA = "0xDBE110", Offset = "0xDBE110", VA = "0xDBE110")]
		public void RemoveObjectFromMask(Renderer r, bool includeChildren = false)
		{
		}

		[Token(Token = "0x6002404")]
		[Address(RVA = "0xDBD7C4", Offset = "0xDBD7C4", VA = "0xDBD7C4")]
		public void UpdateCage()
		{
		}

		[Token(Token = "0x6002405")]
		[Address(RVA = "0xDBE1F4", Offset = "0xDBE1F4", VA = "0xDBE1F4", Slot = "6")]
		public override void ResetCounterMotion()
		{
		}

		[Token(Token = "0x6002406")]
		[Address(RVA = "0xDBE2DC", Offset = "0xDBE2DC", VA = "0xDBE2DC")]
		public void ApplyPreset(TunnellingPreset p)
		{
		}

		[Token(Token = "0x6002407")]
		[Address(RVA = "0xDBE70C", Offset = "0xDBE70C", VA = "0xDBE70C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002408")]
		[Address(RVA = "0xDBED14", Offset = "0xDBED14", VA = "0xDBED14")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6002409")]
		[Address(RVA = "0xDB9A58", Offset = "0xDB9A58", VA = "0xDB9A58")]
		protected void Draw(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x600240A")]
		[Address(RVA = "0xDBF4A0", Offset = "0xDBF4A0", VA = "0xDBF4A0", Slot = "8")]
		protected override void CorrectEyeMatrices(Matrix4x4[] eyePrj, Matrix4x4[] eyeToWorld)
		{
		}

		[Token(Token = "0x600240B")]
		[Address(RVA = "0xDBF504", Offset = "0xDBF504", VA = "0xDBF504", Slot = "7")]
		protected override void UpdateCounterMotion(UnityEngine.Vector3 deltaPos, Quaternion deltaRot)
		{
		}

		[Token(Token = "0x600240C")]
		[Address(RVA = "0xDBD4C8", Offset = "0xDBD4C8", VA = "0xDBD4C8")]
		private void UpdateKeywords()
		{
		}

		[Token(Token = "0x600240D")]
		[Address(RVA = "0xDBEAA4", Offset = "0xDBEAA4", VA = "0xDBEAA4")]
		private void UpdateBlurKernel()
		{
		}

		[Token(Token = "0x600240E")]
		[Address(RVA = "0xDBF704", Offset = "0xDBF704", VA = "0xDBF704")]
		private int GetMsaa(MSAA m, int srcMsaa)
		{
			return default(int);
		}

		[Token(Token = "0x600240F")]
		[Address(RVA = "0xDBEEF8", Offset = "0xDBEEF8", VA = "0xDBEEF8")]
		private void UpdateRenderTextures(int srcX, int srcY, int srcMsaa)
		{
		}

		[Token(Token = "0x6002410")]
		[Address(RVA = "0xDBDF40", Offset = "0xDBDF40", VA = "0xDBDF40")]
		private void ResetMaskCommandBuffer()
		{
		}

		[Token(Token = "0x6002411")]
		[Address(RVA = "0xDBDA4C", Offset = "0xDBDA4C", VA = "0xDBDA4C")]
		private void ToggleMaskCommandBuffer(bool on)
		{
		}

		[Token(Token = "0x6002412")]
		[Address(RVA = "0xDBDAB0", Offset = "0xDBDAB0", VA = "0xDBDAB0")]
		private void ToggleIrisCommandBuffer(bool on)
		{
		}

		[Token(Token = "0x6002413")]
		[Address(RVA = "0xDB9F4C", Offset = "0xDB9F4C", VA = "0xDB9F4C")]
		protected TunnellingImageBase()
		{
		}
	}
	[Token(Token = "0x2000647")]
	[RequireComponent(typeof(Renderer))]
	public class TunnellingMaskObject : MonoBehaviour
	{
		[Token(Token = "0x4002217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool autoAddChildren;

		[Token(Token = "0x4002218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer _r;

		[Token(Token = "0x4002219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _started;

		[Token(Token = "0x6002415")]
		[Address(RVA = "0xDBF800", Offset = "0xDBF800", VA = "0xDBF800")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002416")]
		[Address(RVA = "0xDBF850", Offset = "0xDBF850", VA = "0xDBF850")]
		private void Start()
		{
		}

		[Token(Token = "0x6002417")]
		[Address(RVA = "0xDBF85C", Offset = "0xDBF85C", VA = "0xDBF85C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002418")]
		[Address(RVA = "0xDBF9E8", Offset = "0xDBF9E8", VA = "0xDBF9E8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002419")]
		[Address(RVA = "0xDBFB5C", Offset = "0xDBFB5C", VA = "0xDBFB5C")]
		public TunnellingMaskObject()
		{
		}
	}
	[Token(Token = "0x2000648")]
	[RequireComponent(typeof(Renderer))]
	public class TunnellingMaskObjectMobile : MonoBehaviour
	{
		[Token(Token = "0x400221A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool autoAddChildren;

		[Token(Token = "0x400221B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer _r;

		[Token(Token = "0x400221C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _started;

		[Token(Token = "0x600241A")]
		[Address(RVA = "0xDBFB64", Offset = "0xDBFB64", VA = "0xDBFB64")]
		private void Awake()
		{
		}

		[Token(Token = "0x600241B")]
		[Address(RVA = "0xDBFBB4", Offset = "0xDBFBB4", VA = "0xDBFBB4")]
		private void Start()
		{
		}

		[Token(Token = "0x600241C")]
		[Address(RVA = "0xDBFBC0", Offset = "0xDBFBC0", VA = "0xDBFBC0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600241D")]
		[Address(RVA = "0xDC00E8", Offset = "0xDC00E8", VA = "0xDC00E8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600241E")]
		[Address(RVA = "0xDC03B0", Offset = "0xDC03B0", VA = "0xDC03B0")]
		public TunnellingMaskObjectMobile()
		{
		}
	}
	[Token(Token = "0x2000649")]
	public class TunnellingMobile : TunnellingBase
	{
		[Token(Token = "0x400221D")]
		public const string GLOBAL_PROP_STENCILREF = "_VRTP_Stencil_Ref";

		[Token(Token = "0x400221E")]
		public const string GLOBAL_PROP_STENCILMASK = "_VRTP_Stencil_Mask";

		[Token(Token = "0x400221F")]
		public const string GLOBAL_PROP_STENCILBIAS = "_VRTP_Stencil_Bias";

		[Token(Token = "0x4002220")]
		private const string PROP_WRITEZ = "_WriteZ";

		[Token(Token = "0x4002221")]
		private const string PATH_SHADER = "TunnellingVertex";

		[Token(Token = "0x4002222")]
		private const string PATH_STENCILSHADER = "TunnellingMobileStencil";

		[Token(Token = "0x4002223")]
		private const CameraEvent CEVENT_FX = CameraEvent.BeforeImageEffects;

		[Token(Token = "0x4002224")]
		private const CameraEvent CEVENT_Z = CameraEvent.BeforeForwardOpaque;

		[Token(Token = "0x4002225")]
		private const int RQUEUE_FIRST = 1;

		[Token(Token = "0x4002226")]
		private const int RQUEUE_MASK = 2499;

		[Token(Token = "0x4002227")]
		private const int RQUEUE_OPAQUE = 2501;

		[Token(Token = "0x4002228")]
		private const int RQUEUE_LAST = 5000;

		[Token(Token = "0x400222A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material _stencilMat;

		[Token(Token = "0x400222B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[Tooltip("Draw skybox over vignette instead of solid color.")]
		public bool drawSkybox;

		[Token(Token = "0x400222C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C1")]
		[Tooltip("Use stencil mask to exclude objects from vignette?\nCan stress drawcalls and fillrate.")]
		public bool useMask;

		[Token(Token = "0x400222D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C2")]
		[Tooltip("If ticked, transparent objects will draw on top of vignette.\nDisables z-rejection optimisation.")]
		public bool drawBeforeTransparent;

		[Token(Token = "0x400222E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		[Tooltip("Pixels with this value in the stencil buffer will be masked.")]
		[Range(0f, 255f)]
		public int stencilReference;

		[Token(Token = "0x400222F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[Tooltip("Write- and read-mask for stencil buffer.\nIf in doubt, leave at 255.")]
		[Range(0f, 255f)]
		public int stencilMask;

		[Token(Token = "0x4002230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		[Tooltip("Offset Z on mask to avoid z-fighting.")]
		[Range(0f, 10f)]
		public float stencilBias;

		[Token(Token = "0x4002231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private int _propColor;

		[Token(Token = "0x4002232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private int _propSkybox;

		[Token(Token = "0x4002233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private int _propWriteZ;

		[Token(Token = "0x4002234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private int _globPropStencilRef;

		[Token(Token = "0x4002235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private int _globPropStencilMask;

		[Token(Token = "0x4002236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private int _globPropStencilBias;

		[Token(Token = "0x4002237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Material _irisMatOuter;

		[Token(Token = "0x4002238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Material _irisMatInner;

		[Token(Token = "0x4002239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Mesh _irisMesh;

		[Token(Token = "0x400223A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Dictionary<Renderer, MeshFilter> _maskObjects;

		[Token(Token = "0x400223B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Stack<Mesh> _skinnedMeshPool;

		[Token(Token = "0x400223C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Stack<Mesh> _skinnedMeshesRendering;

		[Token(Token = "0x400223D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private List<UnityEngine.Object> _toDestroy;

		[Token(Token = "0x400223E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private List<MeshRenderer> _tempMeshChildren;

		[Token(Token = "0x400223F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private List<SkinnedMeshRenderer> _tempSkinnedMeshChildren;

		[Token(Token = "0x170005CB")]
		public static TunnellingMobile instance
		{
			[Token(Token = "0x600241F")]
			[Address(RVA = "0xDC03B8", Offset = "0xDC03B8", VA = "0xDC03B8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002420")]
			[Address(RVA = "0xDC0400", Offset = "0xDC0400", VA = "0xDC0400")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170005CC")]
		public static Material stencilMat
		{
			[Token(Token = "0x6002421")]
			[Address(RVA = "0xDC044C", Offset = "0xDC044C", VA = "0xDC044C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170005CD")]
		public bool irisZRejectionEnabled
		{
			[Token(Token = "0x6002422")]
			[Address(RVA = "0xDC0544", Offset = "0xDC0544", VA = "0xDC0544")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002423")]
		[Address(RVA = "0xDC0564", Offset = "0xDC0564", VA = "0xDC0564")]
		public void ApplyPreset(TunnellingPresetMobile p)
		{
		}

		[Token(Token = "0x6002424")]
		[Address(RVA = "0xDBFCFC", Offset = "0xDBFCFC", VA = "0xDBFCFC")]
		public void AddObjectToMask(Renderer r, bool includeChildren = false)
		{
		}

		[Token(Token = "0x6002425")]
		[Address(RVA = "0xDC020C", Offset = "0xDC020C", VA = "0xDC020C")]
		public void RemoveObjectFromMask(Renderer r, bool includeChildren = false)
		{
		}

		[Token(Token = "0x6002426")]
		[Address(RVA = "0xDC0618", Offset = "0xDC0618", VA = "0xDC0618", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6002427")]
		[Address(RVA = "0xDC0A7C", Offset = "0xDC0A7C", VA = "0xDC0A7C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002428")]
		[Address(RVA = "0xDC0E58", Offset = "0xDC0E58", VA = "0xDC0E58")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6002429")]
		[Address(RVA = "0xDC162C", Offset = "0xDC162C", VA = "0xDC162C")]
		private void DrawIris(Material m, int submesh, int opaqueQueue, int camLayer)
		{
		}

		[Token(Token = "0x600242A")]
		[Address(RVA = "0xDC18D0", Offset = "0xDC18D0", VA = "0xDC18D0")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x600242B")]
		[Address(RVA = "0xDC18F8", Offset = "0xDC18F8", VA = "0xDC18F8")]
		public TunnellingMobile()
		{
		}
	}
	[Token(Token = "0x200064A")]
	public class TunnellingOpaque : TunnellingImageBase
	{
		[Token(Token = "0x170005CE")]
		protected override CameraEvent _maskCmdEvt
		{
			[Token(Token = "0x600242C")]
			[Address(RVA = "0xDC1ABC", Offset = "0xDC1ABC", VA = "0xDC1ABC", Slot = "9")]
			get
			{
				return default(CameraEvent);
			}
		}

		[Token(Token = "0x600242D")]
		[Address(RVA = "0xDC1AC4", Offset = "0xDC1AC4", VA = "0xDC1AC4")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x600242E")]
		[Address(RVA = "0xDC1AC8", Offset = "0xDC1AC8", VA = "0xDC1AC8")]
		public TunnellingOpaque()
		{
		}
	}
	[Token(Token = "0x200064B")]
	[CreateAssetMenu(menuName = "VrTunnellingPro/Tunnelling Preset", order = 0)]
	public class TunnellingPreset : TunnellingPresetBase
	{
		[Token(Token = "0x4002240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Range(0f, 1f)]
		[SerializeField]
		private float _effectOverlay;

		[Token(Token = "0x4002241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		private bool _overrideEffectOverlay;

		[Token(Token = "0x4002242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private TunnellingBase.BackgroundMode _backgroundMode;

		[Token(Token = "0x4002243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		private bool _overrideBackgroundMode;

		[Token(Token = "0x4002244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[Range(0f, 2f)]
		private int _cageDownsample;

		[Token(Token = "0x4002245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		private bool _overrideCageDownsample;

		[Token(Token = "0x4002246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private TunnellingBase.MSAA _cageAntiAliasing;

		[Token(Token = "0x4002247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		private bool _overrideCageAntiAliasing;

		[Token(Token = "0x4002248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		[SerializeField]
		private bool _cageUpdateEveryFrame;

		[Token(Token = "0x4002249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBE")]
		[SerializeField]
		private bool _overrideCageUpdateEveryFrame;

		[Token(Token = "0x400224A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Range(0.001f, 0.2f)]
		[SerializeField]
		private float _cageFogDensity;

		[Token(Token = "0x400224B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private bool _overrideCageFogDensity;

		[Token(Token = "0x400224C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[Range(1f, 5f)]
		private float _cageFogPower;

		[Token(Token = "0x400224D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private bool _overrideCageFogPower;

		[Token(Token = "0x400224E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _cageFogBlend;

		[Token(Token = "0x400224F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		private bool _overrideCageFogBlend;

		[Token(Token = "0x4002250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TunnellingBase.MaskMode _maskMode;

		[Token(Token = "0x4002251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private bool _overrideMaskMode;

		[Token(Token = "0x4002252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Range(0f, 4f)]
		[SerializeField]
		private int _blurDownsample;

		[Token(Token = "0x4002253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private bool _overrideBlurDownsample;

		[Token(Token = "0x4002254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Range(1f, 5f)]
		[SerializeField]
		private float _blurDistance;

		[Token(Token = "0x4002255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		private bool _overrideBlurDistance;

		[Token(Token = "0x4002256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Range(1f, 5f)]
		[SerializeField]
		private int _blurPasses;

		[Token(Token = "0x4002257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		private bool _overrideBlurPasses;

		[Token(Token = "0x4002258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private TunnellingImageBase.BlurKernel _blurSamples;

		[Token(Token = "0x4002259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		private bool _overrideBlurSamples;

		[Token(Token = "0x400225A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private TunnellingImageBase.CounterVelocityMode _counterVelocityMode;

		[Token(Token = "0x400225B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		private bool _overrideCounterVelocityMode;

		[Token(Token = "0x400225C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private float _counterVelocityResetDistance;

		[Token(Token = "0x400225D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[SerializeField]
		private bool _overrideCounterVelocityResetDistance;

		[Token(Token = "0x400225E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private float _counterVelocityResetTime;

		[Token(Token = "0x400225F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[SerializeField]
		private bool _overrideCounterVelocityResetTime;

		[Token(Token = "0x4002260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[Range(0f, 2f)]
		private float _counterVelocityStrength;

		[Token(Token = "0x4002261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		private bool _overrideCounterVelocityStrength;

		[Token(Token = "0x4002262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private UnityEngine.Vector3 _counterVelocityPerAxis;

		[Token(Token = "0x4002263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[SerializeField]
		private bool _overrideCounterVelocityPerAxis;

		[Token(Token = "0x4002264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12D")]
		[SerializeField]
		private bool _irisZRejection;

		[Token(Token = "0x4002265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12E")]
		[SerializeField]
		private bool _overrideIrisZRejection;

		[Token(Token = "0x170005CF")]
		public float effectOverlay
		{
			[Token(Token = "0x600242F")]
			[Address(RVA = "0xDC1B1C", Offset = "0xDC1B1C", VA = "0xDC1B1C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170005D0")]
		public bool overrideEffectOverlay
		{
			[Token(Token = "0x6002430")]
			[Address(RVA = "0xDC1B24", Offset = "0xDC1B24", VA = "0xDC1B24")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005D1")]
		public TunnellingBase.BackgroundMode backgroundMode
		{
			[Token(Token = "0x6002431")]
			[Address(RVA = "0xDC1B2C", Offset = "0xDC1B2C", VA = "0xDC1B2C")]
			get
			{
				return default(TunnellingBase.BackgroundMode);
			}
		}

		[Token(Token = "0x170005D2")]
		public bool overrideBackgroundMode
		{
			[Token(Token = "0x6002432")]
			[Address(RVA = "0xDBE4CC", Offset = "0xDBE4CC", VA = "0xDBE4CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005D3")]
		public int cageDownsample
		{
			[Token(Token = "0x6002433")]
			[Address(RVA = "0xDC1B34", Offset = "0xDC1B34", VA = "0xDC1B34")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170005D4")]
		public bool overrideCageDownsample
		{
			[Token(Token = "0x6002434")]
			[Address(RVA = "0xDBE4EC", Offset = "0xDBE4EC", VA = "0xDBE4EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005D5")]
		public TunnellingBase.MSAA cageAntiAliasing
		{
			[Token(Token = "0x6002435")]
			[Address(RVA = "0xDC1B3C", Offset = "0xDC1B3C", VA = "0xDC1B3C")]
			get
			{
				return default(TunnellingBase.MSAA);
			}
		}

		[Token(Token = "0x170005D6")]
		public bool overrideCageAntiAliasing
		{
			[Token(Token = "0x6002436")]
			[Address(RVA = "0xDBE50C", Offset = "0xDBE50C", VA = "0xDBE50C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005D7")]
		public bool cageUpdateEveryFrame
		{
			[Token(Token = "0x6002437")]
			[Address(RVA = "0xDC1B44", Offset = "0xDC1B44", VA = "0xDC1B44")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005D8")]
		public bool overrideCageUpdateEveryFrame
		{
			[Token(Token = "0x6002438")]
			[Address(RVA = "0xDBE52C", Offset = "0xDBE52C", VA = "0xDBE52C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005D9")]
		public float cageFogDensity
		{
			[Token(Token = "0x6002439")]
			[Address(RVA = "0xDC1B4C", Offset = "0xDC1B4C", VA = "0xDC1B4C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170005DA")]
		public bool overrideCageFogDensity
		{
			[Token(Token = "0x600243A")]
			[Address(RVA = "0xDBE54C", Offset = "0xDBE54C", VA = "0xDBE54C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005DB")]
		public float cageFogPower
		{
			[Token(Token = "0x600243B")]
			[Address(RVA = "0xDC1B54", Offset = "0xDC1B54", VA = "0xDC1B54")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170005DC")]
		public bool overrideCageFogPower
		{
			[Token(Token = "0x600243C")]
			[Address(RVA = "0xDBE56C", Offset = "0xDBE56C", VA = "0xDBE56C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005DD")]
		public float cageFogBlend
		{
			[Token(Token = "0x600243D")]
			[Address(RVA = "0xDC1B5C", Offset = "0xDC1B5C", VA = "0xDC1B5C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170005DE")]
		public bool overrideCageFogBlend
		{
			[Token(Token = "0x600243E")]
			[Address(RVA = "0xDBE58C", Offset = "0xDBE58C", VA = "0xDBE58C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005DF")]
		public TunnellingBase.MaskMode maskMode
		{
			[Token(Token = "0x600243F")]
			[Address(RVA = "0xDC1B64", Offset = "0xDC1B64", VA = "0xDC1B64")]
			get
			{
				return default(TunnellingBase.MaskMode);
			}
		}

		[Token(Token = "0x170005E0")]
		public bool overrideMaskMode
		{
			[Token(Token = "0x6002440")]
			[Address(RVA = "0xDBE5AC", Offset = "0xDBE5AC", VA = "0xDBE5AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005E1")]
		public int blurDownsample
		{
			[Token(Token = "0x6002441")]
			[Address(RVA = "0xDC1B6C", Offset = "0xDC1B6C", VA = "0xDC1B6C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170005E2")]
		public bool overrideBlurDownsample
		{
			[Token(Token = "0x6002442")]
			[Address(RVA = "0xDBE5CC", Offset = "0xDBE5CC", VA = "0xDBE5CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005E3")]
		public float blurDistance
		{
			[Token(Token = "0x6002443")]
			[Address(RVA = "0xDC1B74", Offset = "0xDC1B74", VA = "0xDC1B74")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170005E4")]
		public bool overrideBlurDistance
		{
			[Token(Token = "0x6002444")]
			[Address(RVA = "0xDBE5EC", Offset = "0xDBE5EC", VA = "0xDBE5EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005E5")]
		public int blurPasses
		{
			[Token(Token = "0x6002445")]
			[Address(RVA = "0xDC1B7C", Offset = "0xDC1B7C", VA = "0xDC1B7C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170005E6")]
		public bool overrideBlurPasses
		{
			[Token(Token = "0x6002446")]
			[Address(RVA = "0xDBE60C", Offset = "0xDBE60C", VA = "0xDBE60C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005E7")]
		public TunnellingImageBase.BlurKernel blurSamples
		{
			[Token(Token = "0x6002447")]
			[Address(RVA = "0xDC1B84", Offset = "0xDC1B84", VA = "0xDC1B84")]
			get
			{
				return default(TunnellingImageBase.BlurKernel);
			}
		}

		[Token(Token = "0x170005E8")]
		public bool overrideBlurSamples
		{
			[Token(Token = "0x6002448")]
			[Address(RVA = "0xDBE62C", Offset = "0xDBE62C", VA = "0xDBE62C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005E9")]
		public TunnellingImageBase.CounterVelocityMode counterVelocityMode
		{
			[Token(Token = "0x6002449")]
			[Address(RVA = "0xDC1B8C", Offset = "0xDC1B8C", VA = "0xDC1B8C")]
			get
			{
				return default(TunnellingImageBase.CounterVelocityMode);
			}
		}

		[Token(Token = "0x170005EA")]
		public bool overrideCounterVelocityMode
		{
			[Token(Token = "0x600244A")]
			[Address(RVA = "0xDBE64C", Offset = "0xDBE64C", VA = "0xDBE64C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005EB")]
		public float counterVelocityResetDistance
		{
			[Token(Token = "0x600244B")]
			[Address(RVA = "0xDC1B94", Offset = "0xDC1B94", VA = "0xDC1B94")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170005EC")]
		public bool overrideCounterVelocityResetDistance
		{
			[Token(Token = "0x600244C")]
			[Address(RVA = "0xDBE66C", Offset = "0xDBE66C", VA = "0xDBE66C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005ED")]
		public float counterVelocityResetTime
		{
			[Token(Token = "0x600244D")]
			[Address(RVA = "0xDC1B9C", Offset = "0xDC1B9C", VA = "0xDC1B9C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170005EE")]
		public bool overrideCounterVelocityResetTime
		{
			[Token(Token = "0x600244E")]
			[Address(RVA = "0xDBE68C", Offset = "0xDBE68C", VA = "0xDBE68C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005EF")]
		public float counterVelocityStrength
		{
			[Token(Token = "0x600244F")]
			[Address(RVA = "0xDC1BA4", Offset = "0xDC1BA4", VA = "0xDC1BA4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170005F0")]
		public bool overrideCounterVelocityStrength
		{
			[Token(Token = "0x6002450")]
			[Address(RVA = "0xDBE6AC", Offset = "0xDBE6AC", VA = "0xDBE6AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005F1")]
		public UnityEngine.Vector3 counterVelocityPerAxis
		{
			[Token(Token = "0x6002451")]
			[Address(RVA = "0xDC1BAC", Offset = "0xDC1BAC", VA = "0xDC1BAC")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x170005F2")]
		public bool overrideCounterVelocityPerAxis
		{
			[Token(Token = "0x6002452")]
			[Address(RVA = "0xDBE6CC", Offset = "0xDBE6CC", VA = "0xDBE6CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005F3")]
		public bool irisZRejection
		{
			[Token(Token = "0x6002453")]
			[Address(RVA = "0xDC1BBC", Offset = "0xDC1BBC", VA = "0xDC1BBC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005F4")]
		public bool overrideIrisZRejection
		{
			[Token(Token = "0x6002454")]
			[Address(RVA = "0xDBE6EC", Offset = "0xDBE6EC", VA = "0xDBE6EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002455")]
		[Address(RVA = "0xDC1BC4", Offset = "0xDC1BC4", VA = "0xDC1BC4")]
		public TunnellingPreset()
		{
		}
	}
	[Token(Token = "0x200064C")]
	public abstract class TunnellingPresetBase : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x200064D")]
		public class MotionSettings
		{
			[Token(Token = "0x4002285")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private bool _use;

			[Token(Token = "0x4002286")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[SerializeField]
			[Range(0f, 2f)]
			private float _strength;

			[Token(Token = "0x4002287")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private float _min;

			[Token(Token = "0x4002288")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[SerializeField]
			private float _max;

			[Token(Token = "0x4002289")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private float _smoothing;

			[Token(Token = "0x17000614")]
			public bool use
			{
				[Token(Token = "0x6002476")]
				[Address(RVA = "0xDC1E18", Offset = "0xDC1E18", VA = "0xDC1E18")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000615")]
			public float strength
			{
				[Token(Token = "0x6002477")]
				[Address(RVA = "0xDC1E20", Offset = "0xDC1E20", VA = "0xDC1E20")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000616")]
			public float min
			{
				[Token(Token = "0x6002478")]
				[Address(RVA = "0xDC1E28", Offset = "0xDC1E28", VA = "0xDC1E28")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000617")]
			public float max
			{
				[Token(Token = "0x6002479")]
				[Address(RVA = "0xDC1E30", Offset = "0xDC1E30", VA = "0xDC1E30")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000618")]
			public float smoothing
			{
				[Token(Token = "0x600247A")]
				[Address(RVA = "0xDC1E38", Offset = "0xDC1E38", VA = "0xDC1E38")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x600247B")]
			[Address(RVA = "0xDC1E40", Offset = "0xDC1E40", VA = "0xDC1E40")]
			public MotionSettings()
			{
			}
		}

		[Token(Token = "0x4002266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool _overrideAll;

		[Token(Token = "0x4002267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _effectCoverage;

		[Token(Token = "0x4002268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool _overrideEffectCoverage;

		[Token(Token = "0x4002269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Color _effectColor;

		[Token(Token = "0x400226A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private bool _overrideEffectColor;

		[Token(Token = "0x400226B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Range(0f, 0.5f)]
		private float _effectFeather;

		[Token(Token = "0x400226C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private bool _overrideEffectFeather;

		[Token(Token = "0x400226D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[SerializeField]
		private bool _applyColorToBackground;

		[Token(Token = "0x400226E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		[SerializeField]
		private bool _overrideApplyColorToBackground;

		[Token(Token = "0x400226F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Cubemap _skybox;

		[Token(Token = "0x4002270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private bool _overrideSkybox;

		[Token(Token = "0x4002271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private MotionSettings _angularVelocity;

		[Token(Token = "0x4002272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private bool _overrideAngularVelocity;

		[Token(Token = "0x4002273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private MotionSettings _acceleration;

		[Token(Token = "0x4002274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private bool _overrideAcceleration;

		[Token(Token = "0x4002275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private MotionSettings _velocity;

		[Token(Token = "0x4002276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _overrideVelocity;

		[Token(Token = "0x4002277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[SerializeField]
		private bool _useCounterMotion;

		[Token(Token = "0x4002278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		[SerializeField]
		private bool _overrideUseCounterMotion;

		[Token(Token = "0x4002279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		[Range(0f, 2f)]
		private float _counterRotationStrength;

		[Token(Token = "0x400227A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private bool _overrideCounterRotationStrength;

		[Token(Token = "0x400227B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[SerializeField]
		private UnityEngine.Vector3 _counterRotationPerAxis;

		[Token(Token = "0x400227C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private bool _overrideCounterRotationPerAxis;

		[Token(Token = "0x400227D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		[SerializeField]
		private bool _useArtificialTilt;

		[Token(Token = "0x400227E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		[SerializeField]
		private bool _overrideUseArtificialTilt;

		[Token(Token = "0x400227F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		[Range(0f, 60f)]
		private int _framerateDivision;

		[Token(Token = "0x4002280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private bool _overrideFramerateDivision;

		[Token(Token = "0x4002281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		[SerializeField]
		private bool _divideTranslation;

		[Token(Token = "0x4002282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		[SerializeField]
		private bool _overrideDivideTranslation;

		[Token(Token = "0x4002283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
		[SerializeField]
		private bool _divideRotation;

		[Token(Token = "0x4002284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[SerializeField]
		private bool _overrideDivideRotation;

		[Token(Token = "0x170005F5")]
		protected bool overrideAll
		{
			[Token(Token = "0x6002456")]
			[Address(RVA = "0xDC1D70", Offset = "0xDC1D70", VA = "0xDC1D70")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005F6")]
		public float effectCoverage
		{
			[Token(Token = "0x6002457")]
			[Address(RVA = "0xDC1D78", Offset = "0xDC1D78", VA = "0xDC1D78")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170005F7")]
		public bool overrideEffectCoverage
		{
			[Token(Token = "0x6002458")]
			[Address(RVA = "0xDBA45C", Offset = "0xDBA45C", VA = "0xDBA45C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005F8")]
		public Color effectColor
		{
			[Token(Token = "0x6002459")]
			[Address(RVA = "0xDC1D80", Offset = "0xDC1D80", VA = "0xDC1D80")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170005F9")]
		public bool overrideEffectColor
		{
			[Token(Token = "0x600245A")]
			[Address(RVA = "0xDBA47C", Offset = "0xDBA47C", VA = "0xDBA47C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005FA")]
		public float effectFeather
		{
			[Token(Token = "0x600245B")]
			[Address(RVA = "0xDC1D8C", Offset = "0xDC1D8C", VA = "0xDC1D8C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170005FB")]
		public bool overrideEffectFeather
		{
			[Token(Token = "0x600245C")]
			[Address(RVA = "0xDBA49C", Offset = "0xDBA49C", VA = "0xDBA49C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005FC")]
		public bool applyColorToBackground
		{
			[Token(Token = "0x600245D")]
			[Address(RVA = "0xDC1D94", Offset = "0xDC1D94", VA = "0xDC1D94")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005FD")]
		public bool overrideApplyColorToBackground
		{
			[Token(Token = "0x600245E")]
			[Address(RVA = "0xDBA4BC", Offset = "0xDBA4BC", VA = "0xDBA4BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170005FE")]
		public Cubemap skybox
		{
			[Token(Token = "0x600245F")]
			[Address(RVA = "0xDC1D9C", Offset = "0xDC1D9C", VA = "0xDC1D9C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170005FF")]
		public bool overrideSkybox
		{
			[Token(Token = "0x6002460")]
			[Address(RVA = "0xDBA4DC", Offset = "0xDBA4DC", VA = "0xDBA4DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000600")]
		public MotionSettings angularVelocity
		{
			[Token(Token = "0x6002461")]
			[Address(RVA = "0xDC1DA4", Offset = "0xDC1DA4", VA = "0xDC1DA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000601")]
		public bool overrideAngularVelocity
		{
			[Token(Token = "0x6002462")]
			[Address(RVA = "0xDBA4FC", Offset = "0xDBA4FC", VA = "0xDBA4FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000602")]
		public MotionSettings acceleration
		{
			[Token(Token = "0x6002463")]
			[Address(RVA = "0xDC1DAC", Offset = "0xDC1DAC", VA = "0xDC1DAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000603")]
		public bool overrideAcceleration
		{
			[Token(Token = "0x6002464")]
			[Address(RVA = "0xDBA51C", Offset = "0xDBA51C", VA = "0xDBA51C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000604")]
		public MotionSettings velocity
		{
			[Token(Token = "0x6002465")]
			[Address(RVA = "0xDC1DB4", Offset = "0xDC1DB4", VA = "0xDC1DB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000605")]
		public bool overrideVelocity
		{
			[Token(Token = "0x6002466")]
			[Address(RVA = "0xDBA53C", Offset = "0xDBA53C", VA = "0xDBA53C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000606")]
		public bool useCounterMotion
		{
			[Token(Token = "0x6002467")]
			[Address(RVA = "0xDC1DBC", Offset = "0xDC1DBC", VA = "0xDC1DBC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000607")]
		public bool overrideUseCounterMotion
		{
			[Token(Token = "0x6002468")]
			[Address(RVA = "0xDBA55C", Offset = "0xDBA55C", VA = "0xDBA55C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000608")]
		public float counterRotationStrength
		{
			[Token(Token = "0x6002469")]
			[Address(RVA = "0xDC1DC4", Offset = "0xDC1DC4", VA = "0xDC1DC4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000609")]
		public bool overrideCounterRotationStrength
		{
			[Token(Token = "0x600246A")]
			[Address(RVA = "0xDC1DCC", Offset = "0xDC1DCC", VA = "0xDC1DCC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700060A")]
		public UnityEngine.Vector3 counterRotationPerAxis
		{
			[Token(Token = "0x600246B")]
			[Address(RVA = "0xDC1DEC", Offset = "0xDC1DEC", VA = "0xDC1DEC")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x1700060B")]
		public bool overrideCounterRotationPerAxis
		{
			[Token(Token = "0x600246C")]
			[Address(RVA = "0xDBA57C", Offset = "0xDBA57C", VA = "0xDBA57C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700060C")]
		public bool useArtificialTilt
		{
			[Token(Token = "0x600246D")]
			[Address(RVA = "0xDC1DF8", Offset = "0xDC1DF8", VA = "0xDC1DF8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700060D")]
		public bool overrideUseArtificialTilt
		{
			[Token(Token = "0x600246E")]
			[Address(RVA = "0xDBA59C", Offset = "0xDBA59C", VA = "0xDBA59C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700060E")]
		public int framerateDivision
		{
			[Token(Token = "0x600246F")]
			[Address(RVA = "0xDC1E00", Offset = "0xDC1E00", VA = "0xDC1E00")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700060F")]
		public bool overrideFramerateDivision
		{
			[Token(Token = "0x6002470")]
			[Address(RVA = "0xDBA5BC", Offset = "0xDBA5BC", VA = "0xDBA5BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000610")]
		public bool divideTranslation
		{
			[Token(Token = "0x6002471")]
			[Address(RVA = "0xDC1E08", Offset = "0xDC1E08", VA = "0xDC1E08")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000611")]
		public bool overrideDivideTranslation
		{
			[Token(Token = "0x6002472")]
			[Address(RVA = "0xDBA5DC", Offset = "0xDBA5DC", VA = "0xDBA5DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000612")]
		public bool divideRotation
		{
			[Token(Token = "0x6002473")]
			[Address(RVA = "0xDC1E10", Offset = "0xDC1E10", VA = "0xDC1E10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000613")]
		public bool overrideDividerotation
		{
			[Token(Token = "0x6002474")]
			[Address(RVA = "0xDBA5FC", Offset = "0xDBA5FC", VA = "0xDBA5FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002475")]
		[Address(RVA = "0xDC1CA0", Offset = "0xDC1CA0", VA = "0xDC1CA0")]
		protected TunnellingPresetBase()
		{
		}
	}
	[Token(Token = "0x200064E")]
	[CreateAssetMenu(menuName = "VrTunnellingPro/Tunnelling Mobile Preset", order = 1)]
	public class TunnellingPresetMobile : TunnellingPresetBase
	{
		[Token(Token = "0x400228A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		[SerializeField]
		private bool _drawSkybox;

		[Token(Token = "0x400228B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
		[SerializeField]
		private bool _overrideDrawSkybox;

		[Token(Token = "0x400228C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9F")]
		[SerializeField]
		private bool _drawBeforeTransparent;

		[Token(Token = "0x400228D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private bool _overrideDrawBeforeTransparent;

		[Token(Token = "0x400228E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		[SerializeField]
		private bool _useMask;

		[Token(Token = "0x400228F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		[SerializeField]
		private bool _overrideUseMask;

		[Token(Token = "0x4002290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		[Range(0f, 255f)]
		private int _stencilReference;

		[Token(Token = "0x4002291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private bool _overrideStencilReference;

		[Token(Token = "0x4002292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		[Range(0f, 255f)]
		private int _stencilMask;

		[Token(Token = "0x4002293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private bool _overrideStencilMask;

		[Token(Token = "0x4002294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		[Range(0f, 10f)]
		private int _stencilBias;

		[Token(Token = "0x4002295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private bool _overrideStencilBias;

		[Token(Token = "0x17000619")]
		public bool drawSkybox
		{
			[Token(Token = "0x600247C")]
			[Address(RVA = "0xDC1E50", Offset = "0xDC1E50", VA = "0xDC1E50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700061A")]
		public bool overrideDrawSkybox
		{
			[Token(Token = "0x600247D")]
			[Address(RVA = "0xDC05F8", Offset = "0xDC05F8", VA = "0xDC05F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700061B")]
		public bool drawBeforeTransparent
		{
			[Token(Token = "0x600247E")]
			[Address(RVA = "0xDC1E58", Offset = "0xDC1E58", VA = "0xDC1E58")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700061C")]
		public bool overrideDrawBeforeTransparent
		{
			[Token(Token = "0x600247F")]
			[Address(RVA = "0xDC1E60", Offset = "0xDC1E60", VA = "0xDC1E60")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700061D")]
		public bool useMask
		{
			[Token(Token = "0x6002480")]
			[Address(RVA = "0xDC1E68", Offset = "0xDC1E68", VA = "0xDC1E68")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700061E")]
		public bool overrideUseMask
		{
			[Token(Token = "0x6002481")]
			[Address(RVA = "0xDC1E70", Offset = "0xDC1E70", VA = "0xDC1E70")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700061F")]
		public int stencilReference
		{
			[Token(Token = "0x6002482")]
			[Address(RVA = "0xDC1E78", Offset = "0xDC1E78", VA = "0xDC1E78")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000620")]
		public bool overrideStencilReference
		{
			[Token(Token = "0x6002483")]
			[Address(RVA = "0xDC1E80", Offset = "0xDC1E80", VA = "0xDC1E80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000621")]
		public int stencilMask
		{
			[Token(Token = "0x6002484")]
			[Address(RVA = "0xDC1E88", Offset = "0xDC1E88", VA = "0xDC1E88")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000622")]
		public bool overrideStencilMask
		{
			[Token(Token = "0x6002485")]
			[Address(RVA = "0xDC1E90", Offset = "0xDC1E90", VA = "0xDC1E90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000623")]
		public int stencilBias
		{
			[Token(Token = "0x6002486")]
			[Address(RVA = "0xDC1E98", Offset = "0xDC1E98", VA = "0xDC1E98")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000624")]
		public bool overrideStencilBias
		{
			[Token(Token = "0x6002487")]
			[Address(RVA = "0xDC1EA0", Offset = "0xDC1EA0", VA = "0xDC1EA0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002488")]
		[Address(RVA = "0xDC1EA8", Offset = "0xDC1EA8", VA = "0xDC1EA8")]
		public TunnellingPresetMobile()
		{
		}
	}
}
namespace Sigtrap.VrTunnellingPro.Examples
{
	[Token(Token = "0x200064F")]
	public class VRTP_ExampleMovement : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000650")]
		private struct Preset
		{
			[Token(Token = "0x40022A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public KeyCode key;

			[Token(Token = "0x40022A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public GameObject[] worldObjects;

			[Token(Token = "0x40022AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TunnellingPreset postPreset;
		}

		[Token(Token = "0x4002296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool _disableModes;

		[Token(Token = "0x4002297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _rotSensitivity;

		[Token(Token = "0x4002298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _movSensitivity;

		[Token(Token = "0x4002299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Cubemap[] _skyboxes;

		[Token(Token = "0x400229A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject[] _cages;

		[Token(Token = "0x400229B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Preset[] _modePresets;

		[Token(Token = "0x400229C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int _currentMode;

		[Token(Token = "0x400229D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool _hasWarnedInput;

		[Token(Token = "0x400229E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Tunnelling _tunnelling;

		[Token(Token = "0x400229F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CharacterController _char;

		[Token(Token = "0x40022A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int _currentSkybox;

		[Token(Token = "0x40022A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int _currentCage;

		[Token(Token = "0x40022A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UnityEngine.Vector3 _speedCurrent;

		[Token(Token = "0x40022A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private UnityEngine.Vector3 _speedSlew;

		[Token(Token = "0x40022A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private float _speedSmoothing;

		[Token(Token = "0x40022A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float _rotCurrent;

		[Token(Token = "0x40022A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float _rotSlew;

		[Token(Token = "0x40022A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[SerializeField]
		private float _rotSmoothing;

		[Token(Token = "0x6002489")]
		[Address(RVA = "0xDC1ED8", Offset = "0xDC1ED8", VA = "0xDC1ED8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600248A")]
		[Address(RVA = "0xDC1F54", Offset = "0xDC1F54", VA = "0xDC1F54")]
		private void Update()
		{
		}

		[Token(Token = "0x600248B")]
		[Address(RVA = "0xDC23F8", Offset = "0xDC23F8", VA = "0xDC23F8")]
		private void SetPreset(int i)
		{
		}

		[Token(Token = "0x600248C")]
		[Address(RVA = "0xDC2538", Offset = "0xDC2538", VA = "0xDC2538")]
		public VRTP_ExampleMovement()
		{
		}
	}
}
namespace SuperAshley.Utility.Extensions
{
	[Token(Token = "0x2000651")]
	public static class Extensions
	{
		[Token(Token = "0x40022AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static System.Random rng;

		[Token(Token = "0x600248D")]
		public static void Shuffle<T>(this IList<T> list)
		{
		}
	}
}
namespace SuperAshley.UI.Effects
{
	[Token(Token = "0x2000652")]
	public abstract class BaseBlockUIEffect : BaseUIEffect
	{
		[Token(Token = "0x40022AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Number of horizontal slices")]
		[Range(1f, 100f)]
		public int horizontalSlices;

		[Token(Token = "0x40022AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Number of vertical slices")]
		[Range(1f, 100f)]
		public int verticalSlices;

		[Token(Token = "0x40022AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Fill method")]
		public FillMethod fillMethod;

		[Token(Token = "0x40022AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[DisplayIf("fillMethod", new object[]
		{
			FillMethod.Horizontal,
			FillMethod.Vertical,
			FillMethod.HorizontalRandom,
			FillMethod.VerticalRandom
		})]
		[Tooltip("Inverse fill direction")]
		public bool inverse;

		[Token(Token = "0x40022B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[Tooltip("Whether to apply a color to fade to")]
		public bool applyFadeColor;

		[Token(Token = "0x40022B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[DisplayIf("applyFadeColor", new object[] { true })]
		[Tooltip("The color to fade to")]
		public Color fadeColor;

		[Token(Token = "0x40022B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected List<int> blockSequence;

		[Token(Token = "0x600248F")]
		[Address(RVA = "0xDC25C4", Offset = "0xDC25C4", VA = "0xDC25C4")]
		private void GenerateBlockSequence()
		{
		}

		[Token(Token = "0x6002490")]
		[Address(RVA = "0xDC28B8", Offset = "0xDC28B8", VA = "0xDC28B8")]
		private void GenerateBlockSequenceVertical(bool random)
		{
		}

		[Token(Token = "0x6002491")]
		[Address(RVA = "0xDC26CC", Offset = "0xDC26CC", VA = "0xDC26CC")]
		private void GenerateBlockSequenceHorizontal(bool random)
		{
		}

		[Token(Token = "0x6002492")]
		[Address(RVA = "0xDC2AA0", Offset = "0xDC2AA0", VA = "0xDC2AA0")]
		private void GenerateBlockSequenceRandom()
		{
		}

		[Token(Token = "0x6002493")]
		[Address(RVA = "0xDC2BA8", Offset = "0xDC2BA8", VA = "0xDC2BA8", Slot = "21")]
		protected override void ApplyEffect(VertexHelper vh)
		{
		}

		[Token(Token = "0x6002494")]
		protected abstract void ApplyBlockEffect(VertexHelper vh, UIVertex top, UIVertex bottom, float uiElementWidth, float uiElementHeight, float widthPerBlock, float heightPerBlock, float uvWidth, float uvHeight, float uvWidthPerBlock, float uvHeightPerBlock);

		[Token(Token = "0x6002495")]
		[Address(RVA = "0xDC2ED0", Offset = "0xDC2ED0", VA = "0xDC2ED0")]
		protected BaseBlockUIEffect()
		{
		}
	}
	[Token(Token = "0x2000653")]
	public enum FillMethod
	{
		[Token(Token = "0x40022B4")]
		Horizontal,
		[Token(Token = "0x40022B5")]
		Vertical,
		[Token(Token = "0x40022B6")]
		HorizontalRandom,
		[Token(Token = "0x40022B7")]
		VerticalRandom,
		[Token(Token = "0x40022B8")]
		Random
	}
	[Token(Token = "0x2000654")]
	public abstract class BaseUIEffect : BaseMeshEffect
	{
		[Token(Token = "0x40022B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Fill amount, or strength of the effect")]
		[Range(0f, 1f)]
		public float fill;

		[Token(Token = "0x6002496")]
		[Address(RVA = "0xDC2F08", Offset = "0xDC2F08", VA = "0xDC2F08", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x6002497")]
		protected abstract void ApplyEffect(VertexHelper vh);

		[Token(Token = "0x6002498")]
		[Address(RVA = "0xDC2F2C", Offset = "0xDC2F2C", VA = "0xDC2F2C")]
		protected void AddQuad(VertexHelper vertexHelper, UnityEngine.Vector2 posMin, UnityEngine.Vector2 posMax, Color32 color, UnityEngine.Vector2 uvMin, UnityEngine.Vector2 uvMax)
		{
		}

		[Token(Token = "0x6002499")]
		[Address(RVA = "0xDC2EF8", Offset = "0xDC2EF8", VA = "0xDC2EF8")]
		protected BaseUIEffect()
		{
		}
	}
	[Token(Token = "0x2000655")]
	[AddComponentMenu("UI/Effects/Extensions/ColorFade")]
	public class ColorFade : BaseBlockUIEffect
	{
		[Token(Token = "0x600249A")]
		[Address(RVA = "0xDC3084", Offset = "0xDC3084", VA = "0xDC3084", Slot = "22")]
		protected override void ApplyBlockEffect(VertexHelper vh, UIVertex top, UIVertex bottom, float uiElementWidth, float uiElementHeight, float widthPerBlock, float heightPerBlock, float uvWidth, float uvHeight, float uvWidthPerBlock, float uvHeightPerBlock)
		{
		}

		[Token(Token = "0x600249B")]
		[Address(RVA = "0xDC3664", Offset = "0xDC3664", VA = "0xDC3664")]
		public ColorFade()
		{
		}
	}
	[Token(Token = "0x2000656")]
	[AddComponentMenu("UI/Effects/Extensions/Dust")]
	public class Dust : BaseBlockUIEffect
	{
		[Token(Token = "0x40022BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Dust Properties")]
		[Tooltip("Show the dust pile?")]
		public bool showDustPile;

		[Token(Token = "0x600249C")]
		[Address(RVA = "0xDC368C", Offset = "0xDC368C", VA = "0xDC368C", Slot = "22")]
		protected override void ApplyBlockEffect(VertexHelper vh, UIVertex top, UIVertex bottom, float uiElementWidth, float uiElementHeight, float widthPerBlock, float heightPerBlock, float uvWidth, float uvHeight, float uvWidthPerBlock, float uvHeightPerBlock)
		{
		}

		[Token(Token = "0x600249D")]
		[Address(RVA = "0xDC3CAC", Offset = "0xDC3CAC", VA = "0xDC3CAC")]
		public Dust()
		{
		}
	}
	[Token(Token = "0x2000657")]
	[AddComponentMenu("UI/Effects/Extensions/Flyout")]
	public class Flyout : BaseBlockUIEffect
	{
		[Token(Token = "0x40022BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Flyout Properties")]
		public float finalScale;

		[Token(Token = "0x40022BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float flyoutDistance;

		[Token(Token = "0x600249E")]
		[Address(RVA = "0xDC3CD8", Offset = "0xDC3CD8", VA = "0xDC3CD8", Slot = "22")]
		protected override void ApplyBlockEffect(VertexHelper vh, UIVertex top, UIVertex bottom, float uiElementWidth, float uiElementHeight, float widthPerBlock, float heightPerBlock, float uvWidth, float uvHeight, float uvWidthPerBlock, float uvHeightPerBlock)
		{
		}

		[Token(Token = "0x600249F")]
		[Address(RVA = "0xDC4358", Offset = "0xDC4358", VA = "0xDC4358")]
		public Flyout()
		{
		}
	}
	[Token(Token = "0x2000658")]
	[AddComponentMenu("UI/Effects/Extensions/HorizontalFlip")]
	public class HorizontalFlip : BaseBlockUIEffect
	{
		[Token(Token = "0x60024A0")]
		[Address(RVA = "0xDC438C", Offset = "0xDC438C", VA = "0xDC438C", Slot = "22")]
		protected override void ApplyBlockEffect(VertexHelper vh, UIVertex top, UIVertex bottom, float uiElementWidth, float uiElementHeight, float widthPerBlock, float heightPerBlock, float uvWidth, float uvHeight, float uvWidthPerBlock, float uvHeightPerBlock)
		{
		}

		[Token(Token = "0x60024A1")]
		[Address(RVA = "0xDC4998", Offset = "0xDC4998", VA = "0xDC4998")]
		public HorizontalFlip()
		{
		}
	}
	[Token(Token = "0x2000659")]
	[AddComponentMenu("UI/Effects/Extensions/HorizontalFold")]
	public class HorizontalFold : BaseBlockUIEffect
	{
		[Token(Token = "0x60024A2")]
		[Address(RVA = "0xDC59C0", Offset = "0xDC59C0", VA = "0xDC59C0", Slot = "22")]
		protected override void ApplyBlockEffect(VertexHelper vh, UIVertex top, UIVertex bottom, float uiElementWidth, float uiElementHeight, float widthPerBlock, float heightPerBlock, float uvWidth, float uvHeight, float uvWidthPerBlock, float uvHeightPerBlock)
		{
		}

		[Token(Token = "0x60024A3")]
		[Address(RVA = "0xDC5FB4", Offset = "0xDC5FB4", VA = "0xDC5FB4")]
		public HorizontalFold()
		{
		}
	}
	[Token(Token = "0x200065A")]
	[AddComponentMenu("UI/Effects/Extensions/Ripple")]
	public class Ripple : BaseUIEffect
	{
		[Token(Token = "0x40022BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Number of slices")]
		[Range(1f, 200f)]
		public int slices;

		[Token(Token = "0x40022BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Ripple Properties")]
		[Tooltip("Magnitude of the ripple")]
		public float magnitude;

		[Token(Token = "0x40022BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Frequency of the ripple")]
		public float frequency;

		[Token(Token = "0x60024A4")]
		[Address(RVA = "0xDC5FBC", Offset = "0xDC5FBC", VA = "0xDC5FBC", Slot = "21")]
		protected override void ApplyEffect(VertexHelper vh)
		{
		}

		[Token(Token = "0x60024A5")]
		[Address(RVA = "0xDC61C4", Offset = "0xDC61C4", VA = "0xDC61C4")]
		public Ripple()
		{
		}
	}
	[Token(Token = "0x200065B")]
	[AddComponentMenu("UI/Effects/Extensions/VerticalFlip")]
	public class VerticalFlip : BaseBlockUIEffect
	{
		[Token(Token = "0x60024A6")]
		[Address(RVA = "0xDC61DC", Offset = "0xDC61DC", VA = "0xDC61DC", Slot = "22")]
		protected override void ApplyBlockEffect(VertexHelper vh, UIVertex top, UIVertex bottom, float uiElementWidth, float uiElementHeight, float widthPerBlock, float heightPerBlock, float uvWidth, float uvHeight, float uvWidthPerBlock, float uvHeightPerBlock)
		{
		}

		[Token(Token = "0x60024A7")]
		[Address(RVA = "0xDC67C8", Offset = "0xDC67C8", VA = "0xDC67C8")]
		public VerticalFlip()
		{
		}
	}
	[Token(Token = "0x200065C")]
	[AddComponentMenu("UI/Effects/Extensions/VerticalFold")]
	public class VerticalFold : BaseBlockUIEffect
	{
		[Token(Token = "0x60024A8")]
		[Address(RVA = "0xDC67D0", Offset = "0xDC67D0", VA = "0xDC67D0", Slot = "22")]
		protected override void ApplyBlockEffect(VertexHelper vh, UIVertex top, UIVertex bottom, float uiElementWidth, float uiElementHeight, float widthPerBlock, float heightPerBlock, float uvWidth, float uvHeight, float uvWidthPerBlock, float uvHeightPerBlock)
		{
		}

		[Token(Token = "0x60024A9")]
		[Address(RVA = "0xDC6DFC", Offset = "0xDC6DFC", VA = "0xDC6DFC")]
		public VerticalFold()
		{
		}
	}
}
namespace SuperAshley.UI.Effects.Extensions
{
	[Token(Token = "0x200065D")]
	[ExecuteInEditMode]
	public class UIEffectAnimationHelper : MonoBehaviour
	{
		[Token(Token = "0x40022C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		[Tooltip("Fill amount, or strength of the effect")]
		public float fill;

		[Token(Token = "0x40022C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The target UI Effect component to change the fill amount")]
		public BaseUIEffect uiEffect;

		[Token(Token = "0x40022C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Graphic graphic;

		[Token(Token = "0x60024AA")]
		[Address(RVA = "0xDC6E04", Offset = "0xDC6E04", VA = "0xDC6E04")]
		private void Awake()
		{
		}

		[Token(Token = "0x60024AB")]
		[Address(RVA = "0xDC6E80", Offset = "0xDC6E80", VA = "0xDC6E80")]
		private void Update()
		{
		}

		[Token(Token = "0x60024AC")]
		[Address(RVA = "0xDC6F50", Offset = "0xDC6F50", VA = "0xDC6F50")]
		public UIEffectAnimationHelper()
		{
		}
	}
}
namespace StylizedWaterShader
{
	[Token(Token = "0x200065E")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class EnableDepthBuffer : MonoBehaviour
	{
		[Token(Token = "0x40022C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Camera cam;

		[Token(Token = "0x60024AD")]
		[Address(RVA = "0xDC6F58", Offset = "0xDC6F58", VA = "0xDC6F58")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60024AE")]
		[Address(RVA = "0xDC6FE0", Offset = "0xDC6FE0", VA = "0xDC6FE0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60024AF")]
		[Address(RVA = "0xDC70C4", Offset = "0xDC70C4", VA = "0xDC70C4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60024B0")]
		[Address(RVA = "0xDC7148", Offset = "0xDC7148", VA = "0xDC7148")]
		public EnableDepthBuffer()
		{
		}
	}
	[Token(Token = "0x200065F")]
	[RequireComponent(typeof(MeshRenderer))]
	[HelpURL("http://staggart.xyz/unity/stylized-water-shader/documentation/")]
	[ExecuteInEditMode]
	public class StylizedWater : MonoBehaviour
	{
		[Token(Token = "0x40022C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] shaderNames;

		[Token(Token = "0x40022C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int shaderIndex;

		[Token(Token = "0x40022C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader shader;

		[Token(Token = "0x40022C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Shader DesktopShader;

		[Token(Token = "0x40022C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Shader MobileAdvancedShader;

		[Token(Token = "0x40022C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(2000f, 4000f)]
		public int renderQueue;

		[Token(Token = "0x40022CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool enableVertexColors;

		[Token(Token = "0x40022CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool enableDepthTex;

		[Token(Token = "0x40022CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool isUnlit;

		[Token(Token = "0x40022CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool enableGradient;

		[Token(Token = "0x40022CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Gradient colorGradient;

		[Token(Token = "0x40022CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ColorUsage(true, true)]
		public Color waterShallowColor;

		[Token(Token = "0x40022D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 100f)]
		public float depth;

		[Token(Token = "0x40022D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[ColorUsage(true, true)]
		public Color waterColor;

		[Token(Token = "0x40022D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[ColorUsage(true, true)]
		public Color fresnelColor;

		[Token(Token = "0x40022D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float fresnel;

		[Token(Token = "0x40022D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ColorUsage(true, true)]
		public Color rimColor;

		[Token(Token = "0x40022D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Range(-0.5f, 0.5f)]
		public float waveTint;

		[Token(Token = "0x40022D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Range(0f, 1f)]
		public float transparency;

		[Token(Token = "0x40022D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Range(0.01f, 1f)]
		public float glossiness;

		[Token(Token = "0x40022D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Range(0f, 1f)]
		public float metallicness;

		[Token(Token = "0x40022D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Range(0f, 3f)]
		public float edgeFade;

		[Token(Token = "0x40022DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string[] tilingMethodNames;

		[Token(Token = "0x40022DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float worldSpaceTiling;

		[Token(Token = "0x40022DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Range(0f, 0.2f)]
		public float refractionAmount;

		[Token(Token = "0x40022DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool enableNormalMap;

		[Token(Token = "0x40022DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(0f, 1f)]
		public float normalStrength;

		[Token(Token = "0x40022DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool enableMacroNormals;

		[Token(Token = "0x40022E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Range(250f, 3000f)]
		public float macroNormalsDistance;

		[Token(Token = "0x40022E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Range(0f, 50f)]
		public float normalTiling;

		[Token(Token = "0x40022E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public int intersectionSolver;

		[Token(Token = "0x40022E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public string[] intersectionSolverNames;

		[Token(Token = "0x40022E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Range(0f, 30f)]
		public float rimSize;

		[Token(Token = "0x40022E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Range(0.1f, 30f)]
		public float rimFalloff;

		[Token(Token = "0x40022E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float rimTiling;

		[Token(Token = "0x40022E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Range(0f, 1f)]
		public float rimDistortion;

		[Token(Token = "0x40022E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool enableVCIntersection;

		[Token(Token = "0x40022E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public int foamSolver;

		[Token(Token = "0x40022EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public string[] foamSolverNames;

		[Token(Token = "0x40022EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Range(-1f, 1f)]
		public float foamOpacity;

		[Token(Token = "0x40022EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public float foamTiling;

		[Token(Token = "0x40022ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Range(0f, 1f)]
		public float foamSize;

		[Token(Token = "0x40022EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[Range(0f, 3f)]
		public float foamDistortion;

		[Token(Token = "0x40022EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Range(0f, 1f)]
		public float foamSpeed;

		[Token(Token = "0x40022F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[Range(0f, 1f)]
		public float waveFoam;

		[Token(Token = "0x40022F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Range(0f, 1f)]
		public float reflectionStrength;

		[Token(Token = "0x40022F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[Range(0.01f, 10f)]
		public float reflectionFresnel;

		[Token(Token = "0x40022F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public bool showReflection;

		[Token(Token = "0x40022F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[Range(0f, 0.2f)]
		public float reflectionRefraction;

		[Token(Token = "0x40022F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Range(0.01f, 10f)]
		public float waveSpeed;

		[Token(Token = "0x40022F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[Range(0f, 1f)]
		public float waveStrength;

		[Token(Token = "0x40022F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Range(-1f, 1f)]
		public Vector4 waveDirectionXZ;

		[Token(Token = "0x40022F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public bool enableSecondaryWaves;

		[Token(Token = "0x40022F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public Texture2D customIntersection;

		[Token(Token = "0x40022FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public Texture2D customNormal;

		[Token(Token = "0x40022FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public Texture2D customHeightmap;

		[Token(Token = "0x40022FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public string[] intersectionStyleNames;

		[Token(Token = "0x40022FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public int intersectionStyle;

		[Token(Token = "0x40022FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public string[] waveStyleNames;

		[Token(Token = "0x40022FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public int waveStyle;

		[Token(Token = "0x4002300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public string[] waveHeightmapNames;

		[Token(Token = "0x4002301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public int waveHeightmapStyle;

		[Token(Token = "0x4002302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public float waveSize;

		[Token(Token = "0x4002303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public bool useCustomIntersection;

		[Token(Token = "0x4002304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x191")]
		public bool useCustomNormals;

		[Token(Token = "0x4002305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x192")]
		public bool useCustomHeightmap;

		[Token(Token = "0x4002306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public Texture2D normals;

		[Token(Token = "0x4002307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Texture2D shadermap;

		[Token(Token = "0x4002308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public Texture2D colorGradientTex;

		[Token(Token = "0x4002309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public bool useCompression;

		[Token(Token = "0x400230A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool EnableReflections;

		[Token(Token = "0x400230B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private Camera reflectionCamera;

		[Token(Token = "0x400230C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private Camera refractCamera;

		[Token(Token = "0x400230D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public bool useReflection;

		[Token(Token = "0x400230E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C9")]
		public bool useRefractionCam;

		[Token(Token = "0x400230F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CA")]
		public bool enableReflectionBlur;

		[Token(Token = "0x4002310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		[Range(1f, 15f)]
		public float reflectionBlurLength;

		[Token(Token = "0x4002311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[Range(1f, 4f)]
		public int reflectionBlurPasses;

		[Token(Token = "0x4002312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private StylizedWaterBlur reflectionBlurRenderer;

		[Token(Token = "0x4002313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public string[] refractionSolverNames;

		[Token(Token = "0x4002314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public int refractionSolver;

		[Token(Token = "0x4002315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public string[] resolutionNames;

		[Token(Token = "0x4002316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public int reflectionRes;

		[Token(Token = "0x4002317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		public int refractRes;

		[Token(Token = "0x4002318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public int reflectionTextureSize;

		[Token(Token = "0x4002319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		public int refractTextureSize;

		[Token(Token = "0x400231A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[Range(0f, 10f)]
		public float clipPlaneOffset;

		[Token(Token = "0x400231B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		public LayerMask reflectLayers;

		[Token(Token = "0x400231C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public LayerMask refractLayers;

		[Token(Token = "0x400231D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Dictionary<Camera, Camera> m_ReflectionCameras;

		[Token(Token = "0x400231E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Dictionary<Camera, StylizedWaterBlur> m_BlurRenderers;

		[Token(Token = "0x400231F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Dictionary<Camera, Camera> m_RefractCameras;

		[Token(Token = "0x4002320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private RenderTexture m_ReflectionTexture;

		[Token(Token = "0x4002321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private RenderTexture m_RefractTexture;

		[Token(Token = "0x4002322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private int m_OldReflectionTextureSize;

		[Token(Token = "0x4002323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		private int m_OldRefractTextureSize;

		[Token(Token = "0x4002324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private bool s_InsideRendering;

		[Token(Token = "0x4002325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		public int lightingMethod;

		[Token(Token = "0x4002326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public string[] lightingMethodNames;

		[Token(Token = "0x4002327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public bool enableShadows;

		[Token(Token = "0x4002328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private StylizedWaterShadowCaster shadowRenderer;

		[Token(Token = "0x4002329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public Light shadowCaster;

		[NonSerialized]
		[Token(Token = "0x400232A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x400232B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public Material material;

		[Token(Token = "0x400232C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public bool isMobileAdvanced;

		[Token(Token = "0x400232D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x281")]
		public bool isMobilePlatform;

		[Token(Token = "0x400232E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public string shaderName;

		[Token(Token = "0x400232F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public bool isWaterLayer;

		[Token(Token = "0x4002330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x291")]
		public bool hasShaderParams;

		[Token(Token = "0x4002331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x292")]
		public bool hasMaterial;

		[Token(Token = "0x4002332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x293")]
		public bool usingSinglePassRendering;

		[Token(Token = "0x4002333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		public bool hideMeshRenderer;

		[Token(Token = "0x60024B1")]
		[Address(RVA = "0xDC7150", Offset = "0xDC7150", VA = "0xDC7150")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60024B2")]
		[Address(RVA = "0xDC7264", Offset = "0xDC7264", VA = "0xDC7264")]
		public void Init()
		{
		}

		[Token(Token = "0x60024B3")]
		[Address(RVA = "0xDC71DC", Offset = "0xDC71DC", VA = "0xDC71DC")]
		public void GetProperties()
		{
		}

		[Token(Token = "0x60024B4")]
		[Address(RVA = "0xDC7268", Offset = "0xDC7268", VA = "0xDC7268")]
		private void GetShaderProperties()
		{
		}

		[Token(Token = "0x60024B5")]
		[Address(RVA = "0xDC7C98", Offset = "0xDC7C98", VA = "0xDC7C98")]
		private void GetShaderType()
		{
		}

		[Token(Token = "0x60024B6")]
		[Address(RVA = "0xDC7C9C", Offset = "0xDC7C9C", VA = "0xDC7C9C")]
		private void SetShaderType()
		{
		}

		[Token(Token = "0x60024B7")]
		[Address(RVA = "0xDC71E0", Offset = "0xDC71E0", VA = "0xDC71E0")]
		public void SetProperties()
		{
		}

		[Token(Token = "0x60024B8")]
		[Address(RVA = "0xDC7F20", Offset = "0xDC7F20", VA = "0xDC7F20")]
		private void SetShaderProperties()
		{
		}

		[Token(Token = "0x60024B9")]
		[Address(RVA = "0xDC8C04", Offset = "0xDC8C04", VA = "0xDC8C04")]
		public void DisableReflectionCam()
		{
		}

		[Token(Token = "0x60024BA")]
		[Address(RVA = "0xDC8A08", Offset = "0xDC8A08", VA = "0xDC8A08")]
		public void DisableRefractionCam()
		{
		}

		[Token(Token = "0x60024BB")]
		[Address(RVA = "0xDC7CA0", Offset = "0xDC7CA0", VA = "0xDC7CA0")]
		private void EnableShadowRendering()
		{
		}

		[Token(Token = "0x60024BC")]
		[Address(RVA = "0xDC7D68", Offset = "0xDC7D68", VA = "0xDC7D68")]
		private void DisableShadowRendering()
		{
		}

		[Token(Token = "0x60024BD")]
		[Address(RVA = "0xDC8E6C", Offset = "0xDC8E6C", VA = "0xDC8E6C")]
		public void SetVegetationStudioWaterLevel()
		{
		}

		[Token(Token = "0x60024BE")]
		[Address(RVA = "0xDC8E70", Offset = "0xDC8E70", VA = "0xDC8E70")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x60024BF")]
		[Address(RVA = "0xDCA450", Offset = "0xDCA450", VA = "0xDCA450")]
		public void CreateReflectionTexture()
		{
		}

		[Token(Token = "0x60024C0")]
		[Address(RVA = "0xDCA57C", Offset = "0xDCA57C", VA = "0xDCA57C")]
		public void CreateRefractionTexture()
		{
		}

		[Token(Token = "0x60024C1")]
		[Address(RVA = "0xDC955C", Offset = "0xDC955C", VA = "0xDC955C")]
		private void CreateWaterObjects(Camera currentCamera, out Camera reflectionCamera, out Camera refractCamera)
		{
		}

		[Token(Token = "0x60024C2")]
		[Address(RVA = "0xDCA70C", Offset = "0xDCA70C", VA = "0xDCA70C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60024C3")]
		[Address(RVA = "0xDCA7A8", Offset = "0xDCA7A8", VA = "0xDCA7A8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60024C4")]
		[Address(RVA = "0xDCA7AC", Offset = "0xDCA7AC", VA = "0xDCA7AC")]
		public StylizedWater()
		{
		}
	}
	[Token(Token = "0x2000660")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class StylizedWaterBlur : MonoBehaviour
	{
		[Token(Token = "0x4002334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera cam;

		[Token(Token = "0x4002335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float length;

		[Token(Token = "0x4002336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int passes;

		[Token(Token = "0x4002337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Shader m_BlurRenderShader;

		[Token(Token = "0x4002338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material m_BlurRenderMat;

		[Token(Token = "0x4002339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CommandBuffer cmd;

		[Token(Token = "0x17000625")]
		private static Shader BlurRenderShader
		{
			[Token(Token = "0x60024C5")]
			[Address(RVA = "0xDCA90C", Offset = "0xDCA90C", VA = "0xDCA90C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000626")]
		private static Material BlurRenderMat
		{
			[Token(Token = "0x60024C6")]
			[Address(RVA = "0xDCA9C4", Offset = "0xDCA9C4", VA = "0xDCA9C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024C7")]
		[Address(RVA = "0xDCAAAC", Offset = "0xDCAAAC", VA = "0xDCAAAC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60024C8")]
		[Address(RVA = "0xDCAB38", Offset = "0xDCAB38", VA = "0xDCAB38")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60024C9")]
		[Address(RVA = "0xDCA028", Offset = "0xDCA028", VA = "0xDCA028")]
		public void Render()
		{
		}

		[Token(Token = "0x60024CA")]
		[Address(RVA = "0xDCABD4", Offset = "0xDCABD4", VA = "0xDCABD4")]
		public StylizedWaterBlur()
		{
		}
	}
	[Token(Token = "0x2000661")]
	[RequireComponent(typeof(Light))]
	[ExecuteInEditMode]
	public class StylizedWaterShadowCaster : MonoBehaviour
	{
		[Token(Token = "0x400233A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CommandBuffer cmd;

		[Token(Token = "0x400233B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Light dirLight;

		[Token(Token = "0x60024CB")]
		[Address(RVA = "0xDCABE8", Offset = "0xDCABE8", VA = "0xDCABE8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60024CC")]
		[Address(RVA = "0xDCAD94", Offset = "0xDCAD94", VA = "0xDCAD94")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60024CD")]
		[Address(RVA = "0xDCAE14", Offset = "0xDCAE14", VA = "0xDCAE14")]
		public StylizedWaterShadowCaster()
		{
		}
	}
	[Token(Token = "0x2000662")]
	public static class StylizedWaterUtilities
	{
		[Token(Token = "0x2000663")]
		public static class CameraUtils
		{
			[Token(Token = "0x60024D1")]
			[Address(RVA = "0xDC9E80", Offset = "0xDC9E80", VA = "0xDC9E80")]
			public static Vector4 CameraSpacePlane(Camera cam, UnityEngine.Vector3 pos, UnityEngine.Vector3 normal, float sideSign, float clipPlaneOffset)
			{
				return default(Vector4);
			}

			[Token(Token = "0x60024D2")]
			[Address(RVA = "0xDC9DEC", Offset = "0xDC9DEC", VA = "0xDC9DEC")]
			public static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
			{
			}

			[Token(Token = "0x60024D3")]
			[Address(RVA = "0xDC9C64", Offset = "0xDC9C64", VA = "0xDC9C64")]
			public static void CopyCameraSettings(Camera src, Camera dest)
			{
			}
		}

		[Token(Token = "0x400233C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool DEBUG;

		[Token(Token = "0x60024CE")]
		[Address(RVA = "0xDCAE1C", Offset = "0xDCAE1C", VA = "0xDCAE1C")]
		public static string[] ComposeDropdown(Texture2D[] resource, string replaceFilter)
		{
			return null;
		}

		[Token(Token = "0x60024CF")]
		[Address(RVA = "0xDCB03C", Offset = "0xDCB03C", VA = "0xDCB03C")]
		public static bool IsApproximatelyEqual(float a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x60024D0")]
		[Address(RVA = "0xDCB054", Offset = "0xDCB054", VA = "0xDCB054")]
		public static bool HasVertexColors(Mesh mesh)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000664")]
	public class OrbitCamera : MonoBehaviour
	{
		[Token(Token = "0x400233D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Space]
		[Header("Stylized Water Demo")]
		public Transform pivot;

		[Token(Token = "0x400233E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Space]
		public bool enableMouse;

		[Token(Token = "0x400233F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float idleRotationSpeed;

		[Token(Token = "0x4002340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform cam;

		[Token(Token = "0x4002341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float cameraRotSide;

		[Token(Token = "0x4002342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float cameraRotUp;

		[Token(Token = "0x4002343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float cameraRotSideCur;

		[Token(Token = "0x4002344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float cameraRotUpCur;

		[Token(Token = "0x4002345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float distance;

		[Token(Token = "0x60024D4")]
		[Address(RVA = "0xDCB1EC", Offset = "0xDCB1EC", VA = "0xDCB1EC")]
		private void Start()
		{
		}

		[Token(Token = "0x60024D5")]
		[Address(RVA = "0xDCB2A0", Offset = "0xDCB2A0", VA = "0xDCB2A0")]
		private void Update()
		{
		}

		[Token(Token = "0x60024D6")]
		[Address(RVA = "0xDCB674", Offset = "0xDCB674", VA = "0xDCB674")]
		public OrbitCamera()
		{
		}
	}
}
namespace DADemo_Sample_Utils
{
	[Token(Token = "0x2000665")]
	public class AADisableChecker : MonoBehaviour
	{
		[Token(Token = "0x60024D7")]
		[Address(RVA = "0xDCB690", Offset = "0xDCB690", VA = "0xDCB690")]
		private void Start()
		{
		}

		[Token(Token = "0x60024D8")]
		[Address(RVA = "0xDCB6D4", Offset = "0xDCB6D4", VA = "0xDCB6D4")]
		private void Update()
		{
		}

		[Token(Token = "0x60024D9")]
		[Address(RVA = "0xDCB6D8", Offset = "0xDCB6D8", VA = "0xDCB6D8")]
		public AADisableChecker()
		{
		}
	}
}
namespace DAShooter
{
	[Token(Token = "0x2000666")]
	public class SpecialRoomFinder : DungeonEventListener
	{
		[Token(Token = "0x4002346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject levelEndGoalTemplate;

		[Token(Token = "0x4002347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject levelStartTemplate;

		[Token(Token = "0x60024DA")]
		[Address(RVA = "0xDCB6E0", Offset = "0xDCB6E0", VA = "0xDCB6E0", Slot = "7")]
		public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x60024DB")]
		[Address(RVA = "0xDCBC4C", Offset = "0xDCBC4C", VA = "0xDCBC4C", Slot = "9")]
		public override void OnDungeonDestroyed(Dungeon dungeon)
		{
		}

		[Token(Token = "0x60024DC")]
		[Address(RVA = "0xDCBA0C", Offset = "0xDCBA0C", VA = "0xDCBA0C")]
		private void SetStartingCell(GridDungeonModel model, DungeonArchitect.Builders.Grid.Cell cell)
		{
		}

		[Token(Token = "0x60024DD")]
		[Address(RVA = "0xDCBBB4", Offset = "0xDCBBB4", VA = "0xDCBBB4")]
		private void SetStartingCell(SimpleCityDungeonModel model, SimpleCityCell cell)
		{
		}

		[Token(Token = "0x60024DE")]
		[Address(RVA = "0xDCBC00", Offset = "0xDCBC00", VA = "0xDCBC00")]
		private void SetEndingCell(SimpleCityDungeonModel model, SimpleCityCell cell)
		{
		}

		[Token(Token = "0x60024DF")]
		[Address(RVA = "0xDCBAE0", Offset = "0xDCBAE0", VA = "0xDCBAE0")]
		private void SetEndingCell(GridDungeonModel model, DungeonArchitect.Builders.Grid.Cell cell)
		{
		}

		[Token(Token = "0x60024E0")]
		[Address(RVA = "0xDCBE68", Offset = "0xDCBE68", VA = "0xDCBE68")]
		private void CreateLevelGoalAt(UnityEngine.Vector3 position, bool up)
		{
		}

		[Token(Token = "0x60024E1")]
		[Address(RVA = "0xDCBD70", Offset = "0xDCBD70", VA = "0xDCBD70")]
		private void CreateLevelStartAt(UnityEngine.Vector3 position, bool up)
		{
		}

		[Token(Token = "0x60024E2")]
		[Address(RVA = "0xDCBC50", Offset = "0xDCBC50", VA = "0xDCBC50")]
		private void DestroyAllLevelGoals()
		{
		}

		[Token(Token = "0x60024E3")]
		[Address(RVA = "0xDCBF5C", Offset = "0xDCBF5C", VA = "0xDCBF5C")]
		public SpecialRoomFinder()
		{
		}
	}
}
namespace JackRabbit
{
	[Token(Token = "0x2000667")]
	public class EnemyController : MonoBehaviour
	{
		[Token(Token = "0x4002348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4002349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxHealth;

		[Token(Token = "0x400234A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool facingRight;

		[Token(Token = "0x400234B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float currentHealth;

		[Token(Token = "0x400234C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody2D rigidBody2D;

		[Token(Token = "0x17000627")]
		public bool Alive
		{
			[Token(Token = "0x60024E7")]
			[Address(RVA = "0xDCC13C", Offset = "0xDCC13C", VA = "0xDCC13C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60024E4")]
		[Address(RVA = "0xDCBF6C", Offset = "0xDCBF6C", VA = "0xDCBF6C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60024E5")]
		[Address(RVA = "0xDCBFC4", Offset = "0xDCBFC4", VA = "0xDCBFC4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60024E6")]
		[Address(RVA = "0xDCC0CC", Offset = "0xDCC0CC", VA = "0xDCC0CC")]
		private void Flip()
		{
		}

		[Token(Token = "0x60024E8")]
		[Address(RVA = "0xDCC14C", Offset = "0xDCC14C", VA = "0xDCC14C")]
		public void ApplyDamage(float amount)
		{
		}

		[Token(Token = "0x60024E9")]
		[Address(RVA = "0xDCC170", Offset = "0xDCC170", VA = "0xDCC170")]
		private void OnDead()
		{
		}

		[Token(Token = "0x60024EA")]
		[Address(RVA = "0xDCC2EC", Offset = "0xDCC2EC", VA = "0xDCC2EC")]
		public EnemyController()
		{
		}
	}
	[Token(Token = "0x2000668")]
	public class FollowPlayer : MonoBehaviour
	{
		[Token(Token = "0x400234D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DungeonNavAgent agent;

		[Token(Token = "0x60024EB")]
		[Address(RVA = "0xDCC2FC", Offset = "0xDCC2FC", VA = "0xDCC2FC")]
		private void Start()
		{
		}

		[Token(Token = "0x60024EC")]
		[Address(RVA = "0xDCC34C", Offset = "0xDCC34C", VA = "0xDCC34C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60024ED")]
		[Address(RVA = "0xDCC3E0", Offset = "0xDCC3E0", VA = "0xDCC3E0")]
		public FollowPlayer()
		{
		}
	}
	[Token(Token = "0x2000669")]
	public class FollowTarget : MonoBehaviour
	{
		[Token(Token = "0x400234E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x400234F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sensitivity;

		[Token(Token = "0x60024EE")]
		[Address(RVA = "0xDCC3E8", Offset = "0xDCC3E8", VA = "0xDCC3E8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60024EF")]
		[Address(RVA = "0xDCC48C", Offset = "0xDCC48C", VA = "0xDCC48C")]
		private void Update()
		{
		}

		[Token(Token = "0x60024F0")]
		[Address(RVA = "0xDCC410", Offset = "0xDCC410", VA = "0xDCC410")]
		private void SetTarget(UnityEngine.Vector3 position3D)
		{
		}

		[Token(Token = "0x60024F1")]
		[Address(RVA = "0xDCC558", Offset = "0xDCC558", VA = "0xDCC558")]
		public FollowTarget()
		{
		}
	}
	[Token(Token = "0x200066A")]
	public class GameControllerJackRabbit : MonoBehaviour
	{
		[Token(Token = "0x200066B")]
		[CompilerGenerated]
		private sealed class <RebuildLevelRoutine>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002357")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002358")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002359")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameControllerJackRabbit <>4__this;

			[Token(Token = "0x17000629")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002500")]
				[Address(RVA = "0xDCD2DC", Offset = "0xDCD2DC", VA = "0xDCD2DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700062A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002502")]
				[Address(RVA = "0xDCD324", Offset = "0xDCD324", VA = "0xDCD324", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60024FD")]
			[Address(RVA = "0xDCCAE4", Offset = "0xDCCAE4", VA = "0xDCCAE4")]
			[DebuggerHidden]
			public <RebuildLevelRoutine>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x60024FE")]
			[Address(RVA = "0xDCCBB4", Offset = "0xDCCBB4", VA = "0xDCCBB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60024FF")]
			[Address(RVA = "0xDCCBB8", Offset = "0xDCCBB8", VA = "0xDCCBB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002501")]
			[Address(RVA = "0xDCD2E4", Offset = "0xDCD2E4", VA = "0xDCD2E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x4002351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DungeonNavMesh navMesh;

		[Token(Token = "0x4002352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text loadingText;

		[Token(Token = "0x4002353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static GameControllerJackRabbit instance;

		[Token(Token = "0x4002354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LevelNpcSpawner npcSpawner;

		[Token(Token = "0x4002355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private WaypointGenerator waypointGenerator;

		[Token(Token = "0x4002356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private SpecialRoomFinder2D specialRoomFinder;

		[Token(Token = "0x17000628")]
		public static GameControllerJackRabbit Instance
		{
			[Token(Token = "0x60024F2")]
			[Address(RVA = "0xDCC568", Offset = "0xDCC568", VA = "0xDCC568")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024F3")]
		[Address(RVA = "0xDCC5B0", Offset = "0xDCC5B0", VA = "0xDCC5B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60024F4")]
		[Address(RVA = "0xDCC6E4", Offset = "0xDCC6E4", VA = "0xDCC6E4")]
		public void CreateNewLevel()
		{
		}

		[Token(Token = "0x60024F5")]
		[Address(RVA = "0xDCC84C", Offset = "0xDCC84C", VA = "0xDCC84C")]
		private void SetLoadingTextVisible(bool visible)
		{
		}

		[Token(Token = "0x60024F6")]
		[Address(RVA = "0xDCC8A0", Offset = "0xDCC8A0", VA = "0xDCC8A0")]
		private void NotifyBuild()
		{
		}

		[Token(Token = "0x60024F7")]
		[Address(RVA = "0xDCCAA4", Offset = "0xDCCAA4", VA = "0xDCCAA4")]
		private void NotifyDestroyed()
		{
		}

		[Token(Token = "0x60024F8")]
		[Address(RVA = "0xDCC7E4", Offset = "0xDCC7E4", VA = "0xDCC7E4")]
		[IteratorStateMachine(typeof(<RebuildLevelRoutine>d__14))]
		private IEnumerator RebuildLevelRoutine()
		{
			return null;
		}

		[Token(Token = "0x60024F9")]
		[Address(RVA = "0xDCCB0C", Offset = "0xDCCB0C", VA = "0xDCCB0C")]
		private void AppendLoadingText(string text)
		{
		}

		[Token(Token = "0x60024FA")]
		[Address(RVA = "0xDCCB64", Offset = "0xDCCB64", VA = "0xDCCB64")]
		private void Update()
		{
		}

		[Token(Token = "0x60024FB")]
		[Address(RVA = "0xDCCB90", Offset = "0xDCCB90", VA = "0xDCCB90")]
		private void RebuildNavigation()
		{
		}

		[Token(Token = "0x60024FC")]
		[Address(RVA = "0xDCCBAC", Offset = "0xDCCBAC", VA = "0xDCCBAC")]
		public GameControllerJackRabbit()
		{
		}
	}
	[Token(Token = "0x200066C")]
	public class LevelEndGoal2D : MonoBehaviour
	{
		[Token(Token = "0x6002503")]
		[Address(RVA = "0xDCD32C", Offset = "0xDCD32C", VA = "0xDCD32C")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x6002504")]
		[Address(RVA = "0xDCD40C", Offset = "0xDCD40C", VA = "0xDCD40C")]
		public LevelEndGoal2D()
		{
		}
	}
	[Token(Token = "0x200066D")]
	public class PlayerController : MonoBehaviour
	{
		[Token(Token = "0x400235A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxSpeed;

		[Token(Token = "0x400235B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float attackMoveSpeedMultiplier;

		[Token(Token = "0x400235C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sprintMultiplier;

		[Token(Token = "0x400235D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float movementSensitivity;

		[Token(Token = "0x400235E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float attackStength;

		[Token(Token = "0x400235F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool facingRight;

		[Token(Token = "0x4002360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody2D rigidBody2D;

		[Token(Token = "0x4002361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator animator;

		[Token(Token = "0x4002362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool attacking;

		[Token(Token = "0x6002505")]
		[Address(RVA = "0xDCD414", Offset = "0xDCD414", VA = "0xDCD414")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002506")]
		[Address(RVA = "0xDCD490", Offset = "0xDCD490", VA = "0xDCD490")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002507")]
		[Address(RVA = "0xDCD7D0", Offset = "0xDCD7D0", VA = "0xDCD7D0")]
		private void OnAttack()
		{
		}

		[Token(Token = "0x6002508")]
		[Address(RVA = "0xDCD9F0", Offset = "0xDCD9F0", VA = "0xDCD9F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002509")]
		[Address(RVA = "0xDCD760", Offset = "0xDCD760", VA = "0xDCD760")]
		private void Flip()
		{
		}

		[Token(Token = "0x600250A")]
		[Address(RVA = "0xDCD9F4", Offset = "0xDCD9F4", VA = "0xDCD9F4")]
		public PlayerController()
		{
		}
	}
	[Token(Token = "0x200066E")]
	public class SpecialRoomFinder2D : DungeonEventListener
	{
		[Token(Token = "0x4002363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject levelEndGoalTemplate;

		[Token(Token = "0x600250B")]
		[Address(RVA = "0xDCDA18", Offset = "0xDCDA18", VA = "0xDCDA18", Slot = "4")]
		public override void OnPostDungeonLayoutBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x600250C")]
		[Address(RVA = "0xDCC99C", Offset = "0xDCC99C", VA = "0xDCC99C")]
		public void FindSpecialRooms(DungeonModel model)
		{
		}

		[Token(Token = "0x600250D")]
		[Address(RVA = "0xDCDE58", Offset = "0xDCDE58", VA = "0xDCDE58", Slot = "9")]
		public override void OnDungeonDestroyed(Dungeon dungeon)
		{
		}

		[Token(Token = "0x600250E")]
		[Address(RVA = "0xDCDA20", Offset = "0xDCDA20", VA = "0xDCDA20")]
		private void SetStartingCell(GridDungeonModel model, DungeonArchitect.Builders.Grid.Cell cell)
		{
		}

		[Token(Token = "0x600250F")]
		[Address(RVA = "0xDCDBA0", Offset = "0xDCDBA0", VA = "0xDCDBA0")]
		private void SetEndingCell(GridDungeonModel model, DungeonArchitect.Builders.Grid.Cell cell)
		{
		}

		[Token(Token = "0x6002510")]
		[Address(RVA = "0xDCDE5C", Offset = "0xDCDE5C", VA = "0xDCDE5C")]
		private UnityEngine.Vector3 FlipYZ(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002511")]
		[Address(RVA = "0xDCDE6C", Offset = "0xDCDE6C", VA = "0xDCDE6C")]
		public SpecialRoomFinder2D()
		{
		}
	}
}
namespace DASideScroller
{
	[Token(Token = "0x200066F")]
	public class SSCamera : MonoBehaviour
	{
		[Token(Token = "0x4002364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4002365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float positionSmoothing;

		[Token(Token = "0x4002366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float lookAtSmoothing;

		[Token(Token = "0x4002367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector3 offset;

		[Token(Token = "0x4002368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private UnityEngine.Vector3 currentLookAt;

		[Token(Token = "0x6002512")]
		[Address(RVA = "0xDCDE74", Offset = "0xDCDE74", VA = "0xDCDE74")]
		private void Start()
		{
		}

		[Token(Token = "0x6002513")]
		[Address(RVA = "0xDCDEA0", Offset = "0xDCDEA0", VA = "0xDCDEA0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002514")]
		[Address(RVA = "0xDCE038", Offset = "0xDCE038", VA = "0xDCE038")]
		public SSCamera()
		{
		}
	}
	[Token(Token = "0x2000670")]
	public class SSGame : MonoBehaviour
	{
		[Token(Token = "0x6002515")]
		[Address(RVA = "0xDCE048", Offset = "0xDCE048", VA = "0xDCE048")]
		private void Start()
		{
		}

		[Token(Token = "0x6002516")]
		[Address(RVA = "0xDCE04C", Offset = "0xDCE04C", VA = "0xDCE04C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002517")]
		[Address(RVA = "0xDCE050", Offset = "0xDCE050", VA = "0xDCE050")]
		public SSGame()
		{
		}
	}
	[Token(Token = "0x2000671")]
	public class SSPlayerMovement : MonoBehaviour
	{
		[Token(Token = "0x4002369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x400236A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float gravity;

		[Token(Token = "0x400236B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float jumpSpeed;

		[Token(Token = "0x400236C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int maxJumps;

		[Token(Token = "0x400236D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float interJumpDelay;

		[Token(Token = "0x400236E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool facingLeft;

		[Token(Token = "0x400236F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CharacterController character;

		[Token(Token = "0x4002370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.Vector3 movement;

		[Token(Token = "0x4002371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator anim;

		[Token(Token = "0x4002372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int numJumpsPerformed;

		[Token(Token = "0x4002373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float lastJumpTimestamp;

		[Token(Token = "0x6002518")]
		[Address(RVA = "0xDCE058", Offset = "0xDCE058", VA = "0xDCE058")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002519")]
		[Address(RVA = "0xDCE0D4", Offset = "0xDCE0D4", VA = "0xDCE0D4")]
		public void OnTeleportered()
		{
		}

		[Token(Token = "0x600251A")]
		[Address(RVA = "0xDCE0F4", Offset = "0xDCE0F4", VA = "0xDCE0F4")]
		private void Update()
		{
		}

		[Token(Token = "0x600251B")]
		[Address(RVA = "0xDCE374", Offset = "0xDCE374", VA = "0xDCE374")]
		private void PerformJump()
		{
		}

		[Token(Token = "0x600251C")]
		[Address(RVA = "0xDCE168", Offset = "0xDCE168", VA = "0xDCE168")]
		private void Move(float h)
		{
		}

		[Token(Token = "0x600251D")]
		[Address(RVA = "0xDCE2A8", Offset = "0xDCE2A8", VA = "0xDCE2A8")]
		private void Turning(float h)
		{
		}

		[Token(Token = "0x600251E")]
		[Address(RVA = "0xDCE30C", Offset = "0xDCE30C", VA = "0xDCE30C")]
		private void Animating(float h)
		{
		}

		[Token(Token = "0x600251F")]
		[Address(RVA = "0xDCE3D0", Offset = "0xDCE3D0", VA = "0xDCE3D0")]
		public SSPlayerMovement()
		{
		}
	}
}
namespace DungeonArchitect
{
	[Token(Token = "0x2000672")]
	[ExecuteInEditMode]
	public class Dungeon : MonoBehaviour
	{
		[Token(Token = "0x4002374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Graph> dungeonThemes;

		[Token(Token = "0x4002375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool debugDraw;

		[Token(Token = "0x4002376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DungeonConfig config;

		[Token(Token = "0x4002377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PooledDungeonSceneProvider sceneProvider;

		[Token(Token = "0x4002378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private DungeonBuilder dungeonBuilder;

		[Token(Token = "0x4002379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private DungeonModel dungeonModel;

		[Token(Token = "0x400237A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private DungeonSceneObjectSpawner objectSpawner;

		[Token(Token = "0x400237B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private LevelMarkerList markers;

		[Token(Token = "0x400237C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool requestedRebuild;

		[Token(Token = "0x1700062B")]
		public DungeonModel ActiveModel
		{
			[Token(Token = "0x6002520")]
			[Address(RVA = "0xDCC908", Offset = "0xDCC908", VA = "0xDCC908")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700062C")]
		public bool IsLayoutBuilt
		{
			[Token(Token = "0x6002521")]
			[Address(RVA = "0xDCE3FC", Offset = "0xDCE3FC", VA = "0xDCE3FC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700062D")]
		public LevelMarkerList Markers
		{
			[Token(Token = "0x6002522")]
			[Address(RVA = "0xDCE4AC", Offset = "0xDCE4AC", VA = "0xDCE4AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700062E")]
		public DungeonConfig Config
		{
			[Token(Token = "0x6002523")]
			[Address(RVA = "0xDCC750", Offset = "0xDCC750", VA = "0xDCC750")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002524")]
		[Address(RVA = "0xDCE4B4", Offset = "0xDCE4B4", VA = "0xDCE4B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002525")]
		[Address(RVA = "0xDCE4B8", Offset = "0xDCE4B8", VA = "0xDCE4B8")]
		private void Initialize()
		{
		}

		[Token(Token = "0x6002526")]
		[Address(RVA = "0xDCE628", Offset = "0xDCE628", VA = "0xDCE628")]
		private List<DungeonPropDataAsset> GetThemeAssets()
		{
			return null;
		}

		[Token(Token = "0x6002527")]
		[Address(RVA = "0xDCD278", Offset = "0xDCD278", VA = "0xDCD278")]
		public void Build()
		{
		}

		[Token(Token = "0x6002528")]
		[Address(RVA = "0xDCF0BC", Offset = "0xDCF0BC", VA = "0xDCF0BC")]
		public void Build(IDungeonSceneObjectInstantiator objectInstantiator)
		{
		}

		[Token(Token = "0x6002529")]
		[Address(RVA = "0xDCF30C", Offset = "0xDCF30C", VA = "0xDCF30C")]
		public void ReapplyTheme(IDungeonSceneObjectInstantiator objectInstantiator)
		{
		}

		[Token(Token = "0x600252A")]
		[Address(RVA = "0xDCF7B8", Offset = "0xDCF7B8", VA = "0xDCF7B8")]
		private DungeonThemeExecutionContext CreateThemeExecutionContext(IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return default(DungeonThemeExecutionContext);
		}

		[Token(Token = "0x600252B")]
		[Address(RVA = "0xDD06EC", Offset = "0xDD06EC", VA = "0xDD06EC")]
		private DungeonEventListener[] GetListeners()
		{
			return null;
		}

		[Token(Token = "0x600252C")]
		[Address(RVA = "0xDCF284", Offset = "0xDCF284", VA = "0xDCF284")]
		private void NotifyPostLayoutBuild()
		{
		}

		[Token(Token = "0x600252D")]
		[Address(RVA = "0xDCF1FC", Offset = "0xDCF1FC", VA = "0xDCF1FC")]
		private void NotifyPreBuild()
		{
		}

		[Token(Token = "0x600252E")]
		[Address(RVA = "0xDCF5A4", Offset = "0xDCF5A4", VA = "0xDCF5A4")]
		private void NotifyPostBuild()
		{
		}

		[Token(Token = "0x600252F")]
		[Address(RVA = "0xDCF6CC", Offset = "0xDCF6CC", VA = "0xDCF6CC")]
		private void NotifyMarkersEmitted(LevelMarkerList markers)
		{
		}

		[Token(Token = "0x6002530")]
		[Address(RVA = "0xDD082C", Offset = "0xDD082C", VA = "0xDD082C")]
		private void NotifyPreDungeonDestroy()
		{
		}

		[Token(Token = "0x6002531")]
		[Address(RVA = "0xDD089C", Offset = "0xDD089C", VA = "0xDD089C")]
		private void NotifyDungeonDestroyed()
		{
		}

		[Token(Token = "0x6002532")]
		[Address(RVA = "0xDCCE5C", Offset = "0xDCCE5C", VA = "0xDCCE5C")]
		public void DestroyDungeon()
		{
		}

		[Token(Token = "0x6002533")]
		[Address(RVA = "0xDD090C", Offset = "0xDD090C", VA = "0xDD090C")]
		public void RequestRebuild()
		{
		}

		[Token(Token = "0x6002534")]
		[Address(RVA = "0xDD0918", Offset = "0xDD0918", VA = "0xDD0918", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6002535")]
		[Address(RVA = "0xDD0A48", Offset = "0xDD0A48", VA = "0xDD0A48")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6002536")]
		[Address(RVA = "0xDD09C0", Offset = "0xDD09C0", VA = "0xDD09C0")]
		private void DebugDraw()
		{
		}

		[Token(Token = "0x6002537")]
		[Address(RVA = "0xDD0A4C", Offset = "0xDD0A4C", VA = "0xDD0A4C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6002538")]
		[Address(RVA = "0xDD0ADC", Offset = "0xDD0ADC", VA = "0xDD0ADC")]
		public void AddPaintCell(IntVector location, bool automaticRebuild)
		{
		}

		[Token(Token = "0x6002539")]
		[Address(RVA = "0xDD0D6C", Offset = "0xDD0D6C", VA = "0xDD0D6C")]
		public void RemovePaintCell(IntVector location, bool automaticRebuild)
		{
		}

		[Token(Token = "0x600253A")]
		[Address(RVA = "0xDD0E78", Offset = "0xDD0E78", VA = "0xDD0E78")]
		public void ClearToolOverlayData(bool automaticRebuild)
		{
		}

		[Token(Token = "0x600253B")]
		[Address(RVA = "0xDD0F30", Offset = "0xDD0F30", VA = "0xDD0F30")]
		public Dungeon()
		{
		}
	}
	[Token(Token = "0x2000674")]
	[ExecuteInEditMode]
	public abstract class DungeonBuilder : MonoBehaviour
	{
		[Token(Token = "0x400237F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected DungeonConfig config;

		[Token(Token = "0x4002380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected PMRandom nrandom;

		[Token(Token = "0x4002381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected PMRandom random;

		[Token(Token = "0x4002382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected DungeonModel model;

		[Token(Token = "0x4002383")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected LevelMarkerList markers;

		[Token(Token = "0x4002384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Blackboard blackboard;

		[Token(Token = "0x4002385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool asyncBuild;

		[Token(Token = "0x4002386")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public long maxBuildTimePerFrame;

		[Token(Token = "0x4002387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform asyncBuildStartPosition;

		[Token(Token = "0x4002388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool isLayoutBuilt;

		[Token(Token = "0x1700062F")]
		public bool IsLayoutBuilt
		{
			[Token(Token = "0x600253F")]
			[Address(RVA = "0xDCE48C", Offset = "0xDCE48C", VA = "0xDCE48C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000630")]
		public LevelMarkerList Markers
		{
			[Token(Token = "0x6002540")]
			[Address(RVA = "0xDD101C", Offset = "0xDD101C", VA = "0xDD101C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000631")]
		public DungeonModel Model
		{
			[Token(Token = "0x6002541")]
			[Address(RVA = "0xDD1024", Offset = "0xDD1024", VA = "0xDD1024")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000632")]
		public Blackboard Blackboard
		{
			[Token(Token = "0x6002542")]
			[Address(RVA = "0xDD102C", Offset = "0xDD102C", VA = "0xDD102C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002543")]
		[Address(RVA = "0xDD1034", Offset = "0xDD1034", VA = "0xDD1034", Slot = "4")]
		public virtual void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6002544")]
		[Address(RVA = "0xDD10FC", Offset = "0xDD10FC", VA = "0xDD10FC", Slot = "5")]
		protected virtual LevelMarkerList CreateMarkerListObject(DungeonConfig config)
		{
			return null;
		}

		[Token(Token = "0x6002545")]
		[Address(RVA = "0xDD115C", Offset = "0xDD115C", VA = "0xDD115C", Slot = "6")]
		public virtual void OnDestroyed()
		{
		}

		[Token(Token = "0x6002546")]
		[Address(RVA = "0xDD11A8", Offset = "0xDD11A8", VA = "0xDD11A8", Slot = "7")]
		public virtual bool IsThemingSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x6002547")]
		[Address(RVA = "0xDD11B0", Offset = "0xDD11B0", VA = "0xDD11B0", Slot = "8")]
		public virtual void BuildNonThemedDungeon(DungeonSceneProvider sceneProvider, IDungeonSceneObjectInstantiator objectInstantiator)
		{
		}

		[Token(Token = "0x6002548")]
		[Address(RVA = "0xDD11B4", Offset = "0xDD11B4", VA = "0xDD11B4", Slot = "9")]
		public virtual void DebugDraw()
		{
		}

		[Token(Token = "0x6002549")]
		[Address(RVA = "0xDD11B8", Offset = "0xDD11B8", VA = "0xDD11B8", Slot = "10")]
		public virtual void DebugDrawGizmos()
		{
		}

		[Token(Token = "0x600254A")]
		[Address(RVA = "0xDD1188", Offset = "0xDD1188", VA = "0xDD1188")]
		protected void ClearSockets()
		{
		}

		[Token(Token = "0x600254B")]
		[Address(RVA = "0xDD11BC", Offset = "0xDD11BC", VA = "0xDD11BC", Slot = "11")]
		public virtual void EmitMarkers()
		{
		}

		[Token(Token = "0x600254C")]
		[Address(RVA = "0xDCF62C", Offset = "0xDCF62C", VA = "0xDCF62C")]
		public void EmitCustomMarkers()
		{
		}

		[Token(Token = "0x600254D")]
		[Address(RVA = "0xDD11DC", Offset = "0xDD11DC", VA = "0xDD11DC")]
		public PropSocket EmitMarker(string SocketType, Matrix4x4 transform, IntVector gridPosition, int cellId)
		{
			return null;
		}

		[Token(Token = "0x600254E")]
		[Address(RVA = "0xDD1210", Offset = "0xDD1210", VA = "0xDD1210")]
		public PropSocket EmitMarker(string SocketType, Matrix4x4 transform, IntVector gridPosition, int cellId, object metadata)
		{
			return null;
		}

		[Token(Token = "0x600254F")]
		[Address(RVA = "0xDD1268", Offset = "0xDD1268", VA = "0xDD1268")]
		public void EmitMarker(string SocketType, Matrix4x4 _transform, int count, UnityEngine.Vector3 InterOffset, IntVector gridPosition, int cellId, UnityEngine.Vector3 LogicalToWorldScale)
		{
		}

		[Token(Token = "0x6002550")]
		[Address(RVA = "0xDD129C", Offset = "0xDD129C", VA = "0xDD129C")]
		public void EmitMarker(string SocketType, Matrix4x4 _transform, int count, UnityEngine.Vector3 InterOffset, IntVector gridPosition, int cellId, UnityEngine.Vector3 LogicalToWorldScale, object metadata)
		{
		}

		[Token(Token = "0x6002551")]
		[Address(RVA = "0xDD12F4", Offset = "0xDD12F4", VA = "0xDD12F4", Slot = "12")]
		public virtual void OnVolumePositionModified(Volume volume, out IntVector newPositionOnGrid, out IntVector newSizeOnGrid)
		{
		}

		[Token(Token = "0x6002552")]
		[Address(RVA = "0xDD13D4", Offset = "0xDD13D4", VA = "0xDD13D4")]
		protected void ProcessMarkerOverrideVolumes()
		{
		}

		[Token(Token = "0x6002553")]
		[Address(RVA = "0xDD1768", Offset = "0xDD1768", VA = "0xDD1768")]
		protected DungeonBuilder()
		{
		}
	}
	[Token(Token = "0x2000675")]
	public class DungeonConfig : MonoBehaviour
	{
		[Token(Token = "0x4002389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Change this number to completely change the layout of your level")]
		public uint Seed;

		[Token(Token = "0x400238A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool Mode2D;

		[Token(Token = "0x6002554")]
		[Address(RVA = "0xDD1808", Offset = "0xDD1808", VA = "0xDD1808", Slot = "4")]
		public virtual bool HasValidConfig(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6002555")]
		[Address(RVA = "0xDD1810", Offset = "0xDD1810", VA = "0xDD1810")]
		public DungeonConfig()
		{
		}
	}
	[Token(Token = "0x2000676")]
	public class DungeonEventListener : MonoBehaviour
	{
		[Token(Token = "0x6002556")]
		[Address(RVA = "0xDD1818", Offset = "0xDD1818", VA = "0xDD1818", Slot = "4")]
		public virtual void OnPostDungeonLayoutBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x6002557")]
		[Address(RVA = "0xDD181C", Offset = "0xDD181C", VA = "0xDD181C", Slot = "5")]
		public virtual void OnDungeonMarkersEmitted(Dungeon dungeon, DungeonModel model, LevelMarkerList markers)
		{
		}

		[Token(Token = "0x6002558")]
		[Address(RVA = "0xDD1820", Offset = "0xDD1820", VA = "0xDD1820", Slot = "6")]
		public virtual void OnPreDungeonBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x6002559")]
		[Address(RVA = "0xDD1824", Offset = "0xDD1824", VA = "0xDD1824", Slot = "7")]
		public virtual void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x600255A")]
		[Address(RVA = "0xDD1828", Offset = "0xDD1828", VA = "0xDD1828", Slot = "8")]
		public virtual void OnPreDungeonDestroy(Dungeon dungeon)
		{
		}

		[Token(Token = "0x600255B")]
		[Address(RVA = "0xDD182C", Offset = "0xDD182C", VA = "0xDD182C", Slot = "9")]
		public virtual void OnDungeonDestroyed(Dungeon dungeon)
		{
		}

		[Token(Token = "0x600255C")]
		[Address(RVA = "0xDCBF64", Offset = "0xDCBF64", VA = "0xDCBF64")]
		public DungeonEventListener()
		{
		}
	}
	[Token(Token = "0x2000677")]
	public class DungeonMarkerEmitter : MonoBehaviour
	{
		[Token(Token = "0x600255D")]
		[Address(RVA = "0xDD1830", Offset = "0xDD1830", VA = "0xDD1830", Slot = "4")]
		public virtual void EmitMarkers(DungeonBuilder builder)
		{
		}

		[Token(Token = "0x600255E")]
		[Address(RVA = "0xDD1834", Offset = "0xDD1834", VA = "0xDD1834")]
		public DungeonMarkerEmitter()
		{
		}
	}
	[Token(Token = "0x2000678")]
	public abstract class DungeonModel : MonoBehaviour
	{
		[Token(Token = "0x400238B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public DungeonToolData ToolData;

		[Token(Token = "0x600255F")]
		[Address(RVA = "0xDD183C", Offset = "0xDD183C", VA = "0xDD183C")]
		private void Reset()
		{
		}

		[Token(Token = "0x6002560")]
		[Address(RVA = "0xDD1848", Offset = "0xDD1848", VA = "0xDD1848", Slot = "4")]
		public virtual void ResetModel()
		{
		}

		[Token(Token = "0x6002561")]
		[Address(RVA = "0xDD184C", Offset = "0xDD184C", VA = "0xDD184C", Slot = "5")]
		public virtual DungeonToolData CreateToolDataInstance()
		{
			return null;
		}

		[Token(Token = "0x6002562")]
		[Address(RVA = "0xDD188C", Offset = "0xDD188C", VA = "0xDD188C")]
		protected DungeonModel()
		{
		}
	}
	[Token(Token = "0x2000679")]
	public abstract class DungeonPaintMode : MonoBehaviour
	{
		[Token(Token = "0x400238C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Dungeon dungeon;

		[Token(Token = "0x400238D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected DungeonModel dungeonModel;

		[Token(Token = "0x400238E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected DungeonConfig dungeonConfig;

		[Token(Token = "0x6002563")]
		[Address(RVA = "0xDD1894", Offset = "0xDD1894", VA = "0xDD1894")]
		public DungeonConfig GetDungeonConfig()
		{
			return null;
		}

		[Token(Token = "0x6002564")]
		[Address(RVA = "0xDD1928", Offset = "0xDD1928", VA = "0xDD1928")]
		public DungeonModel GetDungeonModel()
		{
			return null;
		}

		[Token(Token = "0x6002565")]
		[Address(RVA = "0xDD19BC", Offset = "0xDD19BC", VA = "0xDD19BC")]
		public Dungeon GetDungeon()
		{
			return null;
		}

		[Token(Token = "0x6002566")]
		public T GetSiblingComponent<T>()
		{
			return (T)null;
		}

		[Token(Token = "0x6002567")]
		[Address(RVA = "0xDD1A50", Offset = "0xDD1A50", VA = "0xDD1A50")]
		protected DungeonPaintMode()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200067A")]
	public class PropSocket
	{
		[Token(Token = "0x400238F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Id;

		[Token(Token = "0x4002390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string SocketType;

		[Token(Token = "0x4002391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Matrix4x4 Transform;

		[Token(Token = "0x4002392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public IntVector gridPosition;

		[Token(Token = "0x4002393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int cellId;

		[Token(Token = "0x4002394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool markForDeletion;

		[Token(Token = "0x4002395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<PropSocket> childMarkers;

		[Token(Token = "0x4002396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public object metadata;

		[Token(Token = "0x6002568")]
		[Address(RVA = "0xDD1A58", Offset = "0xDD1A58", VA = "0xDD1A58", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002569")]
		[Address(RVA = "0xDD1A60", Offset = "0xDD1A60", VA = "0xDD1A60")]
		public PropSocket()
		{
		}
	}
	[Token(Token = "0x200067B")]
	public class PropChildSocketData
	{
		[Token(Token = "0x4002397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string SocketType;

		[Token(Token = "0x4002398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Matrix4x4 Offset;

		[Token(Token = "0x600256A")]
		[Address(RVA = "0xDD1ADC", Offset = "0xDD1ADC", VA = "0xDD1ADC")]
		public PropChildSocketData()
		{
		}
	}
	[Token(Token = "0x200067C")]
	public abstract class PropTypeData
	{
		[Token(Token = "0x4002399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string NodeId;

		[Token(Token = "0x400239A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string AttachToSocket;

		[Token(Token = "0x400239B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Affinity;

		[Token(Token = "0x400239C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool ConsumeOnAttach;

		[Token(Token = "0x400239D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Matrix4x4 Offset;

		[Token(Token = "0x400239E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<PropChildSocketData> ChildSockets;

		[Token(Token = "0x400239F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool IsStaticObject;

		[Token(Token = "0x40023A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool affectsNavigation;

		[Token(Token = "0x40023A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		public bool UseSelectionRule;

		[Token(Token = "0x40023A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string SelectorRuleClassName;

		[Token(Token = "0x40023A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool UseTransformRule;

		[Token(Token = "0x40023A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string TransformRuleClassName;

		[Token(Token = "0x40023A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool useSpatialConstraint;

		[Token(Token = "0x40023A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public SpatialConstraintAsset spatialConstraint;

		[Token(Token = "0x600256B")]
		[Address(RVA = "0xDD1AE4", Offset = "0xDD1AE4", VA = "0xDD1AE4")]
		protected PropTypeData()
		{
		}
	}
	[Token(Token = "0x200067D")]
	public class GameObjectPropTypeData : PropTypeData
	{
		[Token(Token = "0x40023A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject Template;

		[Token(Token = "0x600256C")]
		[Address(RVA = "0xDD1B60", Offset = "0xDD1B60", VA = "0xDD1B60")]
		public GameObjectPropTypeData()
		{
		}
	}
	[Token(Token = "0x200067E")]
	public class GameObjectArrayPropTypeData : PropTypeData
	{
		[Token(Token = "0x40023A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject[] Templates;

		[Token(Token = "0x600256D")]
		[Address(RVA = "0xDD1B64", Offset = "0xDD1B64", VA = "0xDD1B64")]
		public GameObjectArrayPropTypeData()
		{
		}
	}
	[Token(Token = "0x200067F")]
	public class SpritePropTypeData : PropTypeData
	{
		[Token(Token = "0x40023A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Sprite sprite;

		[Token(Token = "0x40023AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Color color;

		[Token(Token = "0x40023AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Material materialOverride;

		[Token(Token = "0x40023AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public string sortingLayerName;

		[Token(Token = "0x40023AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public int orderInLayer;

		[Token(Token = "0x40023AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public DungeonSpriteCollisionType collisionType;

		[Token(Token = "0x40023AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public PhysicsMaterial2D physicsMaterial;

		[Token(Token = "0x40023B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public UnityEngine.Vector2 physicsOffset;

		[Token(Token = "0x40023B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public UnityEngine.Vector2 physicsSize;

		[Token(Token = "0x40023B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float physicsRadius;

		[Token(Token = "0x600256E")]
		[Address(RVA = "0xDD1B68", Offset = "0xDD1B68", VA = "0xDD1B68")]
		public SpritePropTypeData()
		{
		}
	}
	[Token(Token = "0x2000680")]
	public class DungeonPropDataAsset
	{
		[Token(Token = "0x40023B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<PropTypeData> Props;

		[Token(Token = "0x600256F")]
		[Address(RVA = "0xDCE8E8", Offset = "0xDCE8E8", VA = "0xDCE8E8")]
		public void BuildFromGraph(Graph graph)
		{
		}

		[Token(Token = "0x6002570")]
		[Address(RVA = "0xDCE86C", Offset = "0xDCE86C", VA = "0xDCE86C")]
		public DungeonPropDataAsset()
		{
		}
	}
	[Token(Token = "0x2000681")]
	public class LeftToRightNodeComparer : IComparer<GraphNode>
	{
		[Token(Token = "0x6002571")]
		[Address(RVA = "0xDD1B74", Offset = "0xDD1B74", VA = "0xDD1B74", Slot = "4")]
		public int Compare(GraphNode a, GraphNode b)
		{
			return default(int);
		}

		[Token(Token = "0x6002572")]
		[Address(RVA = "0xDD1B6C", Offset = "0xDD1B6C", VA = "0xDD1B6C")]
		public LeftToRightNodeComparer()
		{
		}
	}
	[Token(Token = "0x2000682")]
	public interface IDungeonSceneObjectInstantiator
	{
		[Token(Token = "0x6002573")]
		GameObject Instantiate(GameObject template, UnityEngine.Vector3 position, Quaternion rotation, UnityEngine.Vector3 scale, Transform parent);
	}
	[Token(Token = "0x2000683")]
	public class RuntimeDungeonSceneObjectInstantiator : IDungeonSceneObjectInstantiator
	{
		[Token(Token = "0x6002574")]
		[Address(RVA = "0xDD1C24", Offset = "0xDD1C24", VA = "0xDD1C24", Slot = "4")]
		public GameObject Instantiate(GameObject template, UnityEngine.Vector3 position, Quaternion rotation, UnityEngine.Vector3 scale, Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6002575")]
		[Address(RVA = "0xDCF0B4", Offset = "0xDCF0B4", VA = "0xDCF0B4")]
		public RuntimeDungeonSceneObjectInstantiator()
		{
		}
	}
	[Token(Token = "0x2000684")]
	public struct DungeonNodeSpawnData
	{
		[Token(Token = "0x40023B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PropTypeData nodeData;

		[Token(Token = "0x40023B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Matrix4x4 transform;

		[Token(Token = "0x40023B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public PropSocket socket;

		[Token(Token = "0x40023B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float _sortDistance;
	}
	[Token(Token = "0x2000685")]
	public abstract class DungeonSceneObjectSpawner
	{
		[Token(Token = "0x2000686")]
		protected class SpawnInfo
		{
			[Token(Token = "0x40023B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public DungeonNodeSpawnData spawnData;

			[Token(Token = "0x40023B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public GameObject spawnedItem;

			[Token(Token = "0x600257D")]
			[Address(RVA = "0xDD2330", Offset = "0xDD2330", VA = "0xDD2330")]
			public SpawnInfo()
			{
			}
		}

		[Token(Token = "0x6002576")]
		public abstract void Spawn(DungeonNodeSpawnData[] spawnDataList, DungeonSceneProvider sceneProvider, PMRandom random, IDungeonSceneObjectInstantiator objectInstantiator, DungeonItemSpawnListener[] spawnListeners);

		[Token(Token = "0x6002577")]
		[Address(RVA = "0xDD1D70", Offset = "0xDD1D70", VA = "0xDD1D70", Slot = "5")]
		public virtual void Tick()
		{
		}

		[Token(Token = "0x6002578")]
		[Address(RVA = "0xDD1D74", Offset = "0xDD1D74", VA = "0xDD1D74", Slot = "6")]
		public virtual void Destroy()
		{
		}

		[Token(Token = "0x6002579")]
		[Address(RVA = "0xDD1D78", Offset = "0xDD1D78", VA = "0xDD1D78")]
		protected GameObject SpawnNodeItem(DungeonNodeSpawnData data, DungeonSceneProvider sceneProvider, PMRandom random, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x600257A")]
		[Address(RVA = "0xDD205C", Offset = "0xDD205C", VA = "0xDD205C")]
		protected void TagDungeonItemUserData(GameObject dungeonItem, int cellID)
		{
		}

		[Token(Token = "0x600257B")]
		[Address(RVA = "0xDD2128", Offset = "0xDD2128", VA = "0xDD2128")]
		protected void NotifySpawnListeners(DungeonItemSpawnListener[] spawnListeners, List<SpawnInfo> spawnList)
		{
		}

		[Token(Token = "0x600257C")]
		[Address(RVA = "0xDD2328", Offset = "0xDD2328", VA = "0xDD2328")]
		protected DungeonSceneObjectSpawner()
		{
		}
	}
	[Token(Token = "0x2000687")]
	public class SyncDungeonSceneObjectSpawner : DungeonSceneObjectSpawner
	{
		[Token(Token = "0x600257E")]
		[Address(RVA = "0xDD2338", Offset = "0xDD2338", VA = "0xDD2338", Slot = "4")]
		public override void Spawn(DungeonNodeSpawnData[] spawnDataList, DungeonSceneProvider sceneProvider, PMRandom random, IDungeonSceneObjectInstantiator objectInstantiator, DungeonItemSpawnListener[] spawnListeners)
		{
		}

		[Token(Token = "0x600257F")]
		[Address(RVA = "0xDD06E4", Offset = "0xDD06E4", VA = "0xDD06E4")]
		public SyncDungeonSceneObjectSpawner()
		{
		}
	}
	[Token(Token = "0x2000688")]
	public class AsyncDungeonSceneObjectSpawner : DungeonSceneObjectSpawner
	{
		[Token(Token = "0x2000689")]
		public class SpawnListSorter : IComparer<DungeonNodeSpawnData>
		{
			[Token(Token = "0x6002584")]
			[Address(RVA = "0xDD2A28", Offset = "0xDD2A28", VA = "0xDD2A28", Slot = "4")]
			public int Compare(DungeonNodeSpawnData a, DungeonNodeSpawnData b)
			{
				return default(int);
			}

			[Token(Token = "0x6002585")]
			[Address(RVA = "0xDD2704", Offset = "0xDD2704", VA = "0xDD2704")]
			public SpawnListSorter()
			{
			}
		}

		[Token(Token = "0x40023BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private long maxMilliPerFrame;

		[Token(Token = "0x40023BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityEngine.Vector3 buildOrigin;

		[Token(Token = "0x40023BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DungeonSceneProvider sceneProvider;

		[Token(Token = "0x40023BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PMRandom random;

		[Token(Token = "0x40023BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private IDungeonSceneObjectInstantiator objectInstantiator;

		[Token(Token = "0x40023BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private DungeonItemSpawnListener[] spawnListeners;

		[Token(Token = "0x40023C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Queue<DungeonNodeSpawnData> buildQueue;

		[Token(Token = "0x40023C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<SpawnInfo> spawnList;

		[Token(Token = "0x6002580")]
		[Address(RVA = "0xDD0630", Offset = "0xDD0630", VA = "0xDD0630")]
		public AsyncDungeonSceneObjectSpawner(long maxMilliPerFrame, UnityEngine.Vector3 buildOrigin)
		{
		}

		[Token(Token = "0x6002581")]
		[Address(RVA = "0xDD254C", Offset = "0xDD254C", VA = "0xDD254C", Slot = "4")]
		public override void Spawn(DungeonNodeSpawnData[] spawnDataList, DungeonSceneProvider sceneProvider, PMRandom random, IDungeonSceneObjectInstantiator objectInstantiator, DungeonItemSpawnListener[] spawnListeners)
		{
		}

		[Token(Token = "0x6002582")]
		[Address(RVA = "0xDD270C", Offset = "0xDD270C", VA = "0xDD270C", Slot = "5")]
		public override void Tick()
		{
		}

		[Token(Token = "0x6002583")]
		[Address(RVA = "0xDD2964", Offset = "0xDD2964", VA = "0xDD2964", Slot = "6")]
		public override void Destroy()
		{
		}
	}
	[Token(Token = "0x200068A")]
	public class DungeonSceneProvider : MonoBehaviour
	{
		[Token(Token = "0x40023C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected DungeonConfig config;

		[Token(Token = "0x40023C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dungeon dungeon;

		[Token(Token = "0x40023C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject itemParent;

		[Token(Token = "0x40023C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected UnityEngine.Vector3 _position;

		[Token(Token = "0x40023C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Quaternion _rotation;

		[Token(Token = "0x40023C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected UnityEngine.Vector3 _scale;

		[Token(Token = "0x6002586")]
		[Address(RVA = "0xDD2A4C", Offset = "0xDD2A4C", VA = "0xDD2A4C", Slot = "4")]
		public virtual void OnDungeonBuildStart()
		{
		}

		[Token(Token = "0x6002587")]
		[Address(RVA = "0xDD2BB4", Offset = "0xDD2BB4", VA = "0xDD2BB4", Slot = "5")]
		public virtual void OnDungeonBuildStop()
		{
		}

		[Token(Token = "0x6002588")]
		[Address(RVA = "0xDD2BB8", Offset = "0xDD2BB8", VA = "0xDD2BB8", Slot = "6")]
		public virtual GameObject AddGameObject(GameObjectPropTypeData gameObjectProp, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x6002589")]
		[Address(RVA = "0xDD2BC0", Offset = "0xDD2BC0", VA = "0xDD2BC0", Slot = "7")]
		public virtual GameObject AddGameObjectFromArray(GameObjectArrayPropTypeData gameObjectArrayProp, int index, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x600258A")]
		[Address(RVA = "0xDD2BC8", Offset = "0xDD2BC8", VA = "0xDD2BC8", Slot = "8")]
		public virtual GameObject AddSprite(SpritePropTypeData spriteProp, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x600258B")]
		[Address(RVA = "0xDD2BD0", Offset = "0xDD2BD0", VA = "0xDD2BD0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600258C")]
		[Address(RVA = "0xDD2A50", Offset = "0xDD2A50", VA = "0xDD2A50")]
		protected void Initialize()
		{
		}

		[Token(Token = "0x600258D")]
		[Address(RVA = "0xDD2BD4", Offset = "0xDD2BD4", VA = "0xDD2BD4")]
		protected GameObject BuildGameObject(GameObjectPropTypeData gameObjectProp, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x600258E")]
		[Address(RVA = "0xDD2E00", Offset = "0xDD2E00", VA = "0xDD2E00")]
		protected GameObject BuildGameObjectFromArray(GameObjectArrayPropTypeData gameObjectArrayProp, int index, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x600258F")]
		[Address(RVA = "0xDD2C20", Offset = "0xDD2C20", VA = "0xDD2C20")]
		protected GameObject BuildGameObject(GameObject template, string nodeId, bool affectsNavigation, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x6002590")]
		[Address(RVA = "0xDD2EF8", Offset = "0xDD2EF8", VA = "0xDD2EF8")]
		protected void FlipSpriteTransform(ref Matrix4x4 transform, Sprite sprite)
		{
		}

		[Token(Token = "0x6002591")]
		[Address(RVA = "0xDD2FF0", Offset = "0xDD2FF0", VA = "0xDD2FF0")]
		protected void FlipSpritePosition(ref Matrix4x4 transform)
		{
		}

		[Token(Token = "0x6002592")]
		[Address(RVA = "0xDD2FE0", Offset = "0xDD2FE0", VA = "0xDD2FE0")]
		protected void FlipSpritePosition(ref UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x6002593")]
		[Address(RVA = "0xDD302C", Offset = "0xDD302C", VA = "0xDD302C", Slot = "9")]
		public virtual void InvalidateNodeCache(string NodeId)
		{
		}

		[Token(Token = "0x6002594")]
		[Address(RVA = "0xDD3030", Offset = "0xDD3030", VA = "0xDD3030")]
		protected GameObject BuildSpriteObject(SpritePropTypeData spriteData, Matrix4x4 transform, string NodeId)
		{
			return null;
		}

		[Token(Token = "0x6002595")]
		[Address(RVA = "0xDD3480", Offset = "0xDD3480", VA = "0xDD3480")]
		protected void SetTransform(Transform transform, Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x6002596")]
		[Address(RVA = "0xDD34F8", Offset = "0xDD34F8", VA = "0xDD34F8")]
		public DungeonSceneProvider()
		{
		}
	}
	[Token(Token = "0x200068B")]
	public class DungeonSceneProviderData : MonoBehaviour
	{
		[Token(Token = "0x40023C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string NodeId;

		[Token(Token = "0x40023C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dungeon dungeon;

		[Token(Token = "0x40023CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool affectsNavigation;

		[Token(Token = "0x40023CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int userData;

		[Token(Token = "0x6002597")]
		[Address(RVA = "0xDD3500", Offset = "0xDD3500", VA = "0xDD3500")]
		public DungeonSceneProviderData()
		{
		}
	}
	[Token(Token = "0x200068C")]
	public struct DungeonThemeExecutionContext
	{
		[Token(Token = "0x40023CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DungeonBuilder builder;

		[Token(Token = "0x40023CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public DungeonConfig config;

		[Token(Token = "0x40023CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DungeonModel model;

		[Token(Token = "0x40023CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpatialConstraintProcessor spatialConstraintProcessor;

		[Token(Token = "0x40023D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ThemeOverrideVolume[] themeOverrideVolumes;

		[Token(Token = "0x40023D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DungeonSceneProvider sceneProvider;

		[Token(Token = "0x40023D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DungeonSceneObjectSpawner objectSpawner;

		[Token(Token = "0x40023D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DungeonItemSpawnListener[] spawnListeners;

		[Token(Token = "0x40023D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IDungeonSceneObjectInstantiator objectInstantiator;
	}
	[Token(Token = "0x200068D")]
	public class DungeonThemeEngine
	{
		[Token(Token = "0x200068E")]
		private struct NodeListExecutionData
		{
			[Token(Token = "0x40023D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public List<PropTypeData> nodeDataList;

			[Token(Token = "0x40023D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public PropSocket socket;
		}

		[Token(Token = "0x200068F")]
		private struct NodeListExecutionContext
		{
			[Token(Token = "0x40023D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public InstanceCache instanceCache;

			[Token(Token = "0x40023DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public SpatialConstraintProcessor constraintProcessor;

			[Token(Token = "0x40023DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public PMRandom srandom;

			[Token(Token = "0x40023DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DungeonSceneProvider SceneProvider;

			[Token(Token = "0x40023DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IDungeonSceneObjectInstantiator objectInstantiator;
		}

		[Token(Token = "0x40023D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DungeonThemeExecutionContext context;

		[Token(Token = "0x40023D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PMRandom random;

		[Token(Token = "0x6002598")]
		[Address(RVA = "0xDCFBBC", Offset = "0xDCFBBC", VA = "0xDCFBBC")]
		public DungeonThemeEngine(DungeonThemeExecutionContext context)
		{
		}

		[Token(Token = "0x6002599")]
		[Address(RVA = "0xDCFC4C", Offset = "0xDCFC4C", VA = "0xDCFC4C")]
		public void ApplyTheme(LevelMarkerList markers, List<DungeonPropDataAsset> Themes)
		{
		}

		[Token(Token = "0x600259A")]
		[Address(RVA = "0xDD3868", Offset = "0xDD3868", VA = "0xDD3868")]
		private DungeonPropDataAsset GetBestMatchedTheme(List<DungeonPropDataAsset> Themes, PropSocket socket, Dictionary<DungeonPropDataAsset, Dictionary<string, List<PropTypeData>>> PropBySocketTypeByTheme)
		{
			return null;
		}

		[Token(Token = "0x600259B")]
		[Address(RVA = "0xDD4DCC", Offset = "0xDD4DCC", VA = "0xDD4DCC")]
		private bool ProcessSpatialConstraint(SpatialConstraintProcessor constraintProcessor, SpatialConstraintAsset constraint, PropSocket marker, LevelMarkerList markers, out Matrix4x4 OutOffset, out PropSocket[] outMarkersToRemove)
		{
			return default(bool);
		}

		[Token(Token = "0x600259C")]
		[Address(RVA = "0xDD4F40", Offset = "0xDD4F40", VA = "0xDD4F40")]
		private void RecursivelyTagMarkerForDeletion(PropSocket marker, HashSet<int> visited)
		{
		}

		[Token(Token = "0x600259D")]
		[Address(RVA = "0xDD4AC0", Offset = "0xDD4AC0", VA = "0xDD4AC0")]
		private void RecursivelyTagMarkersForDeletion(LevelMarkerList markers)
		{
		}

		[Token(Token = "0x600259E")]
		[Address(RVA = "0xDD3C78", Offset = "0xDD3C78", VA = "0xDD3C78")]
		private bool ShouldDelayExecution(List<PropTypeData> nodeDataList)
		{
			return default(bool);
		}

		[Token(Token = "0x600259F")]
		[Address(RVA = "0xDD3510", Offset = "0xDD3510", VA = "0xDD3510")]
		private void CreatePropLookup(DungeonPropDataAsset PropAsset, Dictionary<DungeonPropDataAsset, Dictionary<string, List<PropTypeData>>> PropBySocketTypeByTheme)
		{
		}

		[Token(Token = "0x60025A0")]
		[Address(RVA = "0xDD3E34", Offset = "0xDD3E34", VA = "0xDD3E34")]
		private void ExecuteNodesUnderMarker(NodeListExecutionData data, NodeListExecutionContext nodeContext, LevelMarkerList markers, List<DungeonNodeSpawnData> spawnDataList)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000690")]
	public class DungeonToolData : ScriptableObject
	{
		[Token(Token = "0x40023DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<IntVector> paintedCells;

		[Token(Token = "0x17000633")]
		public List<IntVector> PaintedCells
		{
			[Token(Token = "0x60025A1")]
			[Address(RVA = "0xDD50FC", Offset = "0xDD50FC", VA = "0xDD50FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60025A2")]
		[Address(RVA = "0xDD5104", Offset = "0xDD5104", VA = "0xDD5104")]
		public DungeonToolData()
		{
		}
	}
	[Token(Token = "0x2000691")]
	public class SelectorRule : ScriptableObject
	{
		[Token(Token = "0x60025A3")]
		[Address(RVA = "0xDD5180", Offset = "0xDD5180", VA = "0xDD5180", Slot = "4")]
		public virtual bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
		{
			return default(bool);
		}

		[Token(Token = "0x60025A4")]
		[Address(RVA = "0xDD5188", Offset = "0xDD5188", VA = "0xDD5188")]
		public SelectorRule()
		{
		}
	}
	[Token(Token = "0x2000692")]
	public class TransformationRule : ScriptableObject
	{
		[Token(Token = "0x60025A5")]
		[Address(RVA = "0xDD5190", Offset = "0xDD5190", VA = "0xDD5190", Slot = "4")]
		public virtual void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
		{
		}

		[Token(Token = "0x60025A6")]
		[Address(RVA = "0xDD5268", Offset = "0xDD5268", VA = "0xDD5268")]
		public TransformationRule()
		{
		}
	}
	[Token(Token = "0x2000693")]
	public class DungeonItemSpawnListener : MonoBehaviour
	{
		[Token(Token = "0x60025A7")]
		[Address(RVA = "0xDD5270", Offset = "0xDD5270", VA = "0xDD5270", Slot = "4")]
		public virtual void SetMetadata(GameObject dungeonItem, DungeonNodeSpawnData spawnData)
		{
		}

		[Token(Token = "0x60025A8")]
		[Address(RVA = "0xDD5274", Offset = "0xDD5274", VA = "0xDD5274")]
		public DungeonItemSpawnListener()
		{
		}
	}
	[Token(Token = "0x2000694")]
	public class PooledDungeonSceneProvider : DungeonSceneProvider
	{
		[Token(Token = "0x40023DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<string, Queue<GameObject>> pooledObjects;

		[Token(Token = "0x60025A9")]
		[Address(RVA = "0xDD527C", Offset = "0xDD527C", VA = "0xDD527C", Slot = "4")]
		public override void OnDungeonBuildStart()
		{
		}

		[Token(Token = "0x60025AA")]
		[Address(RVA = "0xDD5500", Offset = "0xDD5500", VA = "0xDD5500", Slot = "5")]
		public override void OnDungeonBuildStop()
		{
		}

		[Token(Token = "0x60025AB")]
		[Address(RVA = "0xDD5818", Offset = "0xDD5818", VA = "0xDD5818", Slot = "8")]
		public override GameObject AddSprite(SpritePropTypeData spriteProp, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x60025AC")]
		[Address(RVA = "0xDD59D8", Offset = "0xDD59D8", VA = "0xDD59D8", Slot = "9")]
		public override void InvalidateNodeCache(string NodeId)
		{
		}

		[Token(Token = "0x60025AD")]
		[Address(RVA = "0xDD5C2C", Offset = "0xDD5C2C", VA = "0xDD5C2C", Slot = "6")]
		public override GameObject AddGameObject(GameObjectPropTypeData gameObjectProp, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x60025AE")]
		[Address(RVA = "0xDD5F44", Offset = "0xDD5F44", VA = "0xDD5F44", Slot = "7")]
		public override GameObject AddGameObjectFromArray(GameObjectArrayPropTypeData gameObjectArrayProp, int index, Matrix4x4 transform, IDungeonSceneObjectInstantiator objectInstantiator)
		{
			return null;
		}

		[Token(Token = "0x60025AF")]
		[Address(RVA = "0xDD5EB8", Offset = "0xDD5EB8", VA = "0xDD5EB8")]
		private void RecursivelySetStatic(Transform trans)
		{
		}

		[Token(Token = "0x60025B0")]
		[Address(RVA = "0xDD61B8", Offset = "0xDD61B8", VA = "0xDD61B8")]
		public PooledDungeonSceneProvider()
		{
		}
	}
	[Token(Token = "0x2000695")]
	public class BlurFilter : Filter
	{
		[Token(Token = "0x40023E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int radius;

		[Token(Token = "0x40023E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int w;

		[Token(Token = "0x40023E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int h;

		[Token(Token = "0x60025B1")]
		[Address(RVA = "0xDD6234", Offset = "0xDD6234", VA = "0xDD6234")]
		public BlurFilter(int radius)
		{
		}

		[Token(Token = "0x60025B2")]
		[Address(RVA = "0xDD625C", Offset = "0xDD625C", VA = "0xDD625C", Slot = "4")]
		public float[,] ApplyFilter(float[,] data)
		{
			return null;
		}

		[Token(Token = "0x60025B3")]
		[Address(RVA = "0xDD6314", Offset = "0xDD6314", VA = "0xDD6314")]
		private void gaussBlur_4(float[,] scl, float[,] tcl, int r)
		{
		}

		[Token(Token = "0x60025B4")]
		[Address(RVA = "0xDD668C", Offset = "0xDD668C", VA = "0xDD668C")]
		private void boxBlur_4(float[,] scl, float[,] tcl, int r)
		{
		}

		[Token(Token = "0x60025B5")]
		[Address(RVA = "0xDD6C10", Offset = "0xDD6C10", VA = "0xDD6C10")]
		private float Get(float[,] data, int index)
		{
			return default(float);
		}

		[Token(Token = "0x60025B6")]
		[Address(RVA = "0xDD6C64", Offset = "0xDD6C64", VA = "0xDD6C64")]
		private void Set(float[,] data, int index, float value)
		{
		}

		[Token(Token = "0x60025B7")]
		[Address(RVA = "0xDD67B8", Offset = "0xDD67B8", VA = "0xDD67B8")]
		private void boxBlurH_4(float[,] scl, float[,] tcl, int r)
		{
		}

		[Token(Token = "0x60025B8")]
		[Address(RVA = "0xDD69F0", Offset = "0xDD69F0", VA = "0xDD69F0")]
		private void boxBlurT_4(float[,] scl, float[,] tcl, int r)
		{
		}

		[Token(Token = "0x60025B9")]
		[Address(RVA = "0xDD6410", Offset = "0xDD6410", VA = "0xDD6410")]
		private int[] boxesForGauss(float sigma, int n)
		{
			return null;
		}

		[Token(Token = "0x60025BA")]
		[Address(RVA = "0xDD6CB8", Offset = "0xDD6CB8", VA = "0xDD6CB8")]
		private float Round(float a)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000696")]
	public interface Filter
	{
		[Token(Token = "0x60025BB")]
		float[,] ApplyFilter(float[,] data);
	}
	[Serializable]
	[Token(Token = "0x2000697")]
	public class MarkerReplacementEntry
	{
		[Token(Token = "0x40023E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string fromMarker;

		[Token(Token = "0x40023E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string toMarker;

		[Token(Token = "0x60025BC")]
		[Address(RVA = "0xDD6CBC", Offset = "0xDD6CBC", VA = "0xDD6CBC")]
		public MarkerReplacementEntry()
		{
		}
	}
	[Token(Token = "0x2000698")]
	[ExecuteInEditMode]
	public class MarkerReplaceVolume : Volume
	{
		[Token(Token = "0x40023E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public MarkerReplacementEntry[] replacements;

		[Token(Token = "0x60025BD")]
		[Address(RVA = "0xDD6CC4", Offset = "0xDD6CC4", VA = "0xDD6CC4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60025BE")]
		[Address(RVA = "0xDD6CEC", Offset = "0xDD6CEC", VA = "0xDD6CEC")]
		public MarkerReplaceVolume()
		{
		}
	}
	[Token(Token = "0x2000699")]
	[ExecuteInEditMode]
	public class NegationVolume : Volume
	{
		[Token(Token = "0x40023E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool inverse;

		[Token(Token = "0x60025BF")]
		[Address(RVA = "0xDD6D44", Offset = "0xDD6D44", VA = "0xDD6D44")]
		private void Awake()
		{
		}

		[Token(Token = "0x60025C0")]
		[Address(RVA = "0xDD6D6C", Offset = "0xDD6D6C", VA = "0xDD6D6C")]
		public NegationVolume()
		{
		}
	}
	[Token(Token = "0x200069A")]
	public class ThemeOverrideVolume : Volume
	{
		[Token(Token = "0x40023E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Graph overrideTheme;

		[Token(Token = "0x40023E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool useBaseThemeForMissingMarkers;

		[Token(Token = "0x60025C1")]
		[Address(RVA = "0xDD6D98", Offset = "0xDD6D98", VA = "0xDD6D98")]
		private void Awake()
		{
		}

		[Token(Token = "0x60025C2")]
		[Address(RVA = "0xDD6DC0", Offset = "0xDD6DC0", VA = "0xDD6DC0")]
		public ThemeOverrideVolume()
		{
		}
	}
	[Token(Token = "0x200069B")]
	public class Volume : MonoBehaviour
	{
		[Token(Token = "0x40023E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x40023EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool mode2D;

		[Token(Token = "0x40023EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected Color COLOR_WIRE;

		[Token(Token = "0x40023EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected Color COLOR_SOLID_DESELECTED;

		[Token(Token = "0x40023ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Color COLOR_SOLID;

		[Token(Token = "0x60025C3")]
		[Address(RVA = "0xDD1604", Offset = "0xDD1604", VA = "0xDD1604")]
		public Bounds GetBounds()
		{
			return default(Bounds);
		}

		[Token(Token = "0x60025C4")]
		[Address(RVA = "0xDD6DEC", Offset = "0xDD6DEC", VA = "0xDD6DEC")]
		public void GetVolumeGridTransform(out IntVector positionGrid, out IntVector scaleGrid, UnityEngine.Vector3 LogicalGridSize)
		{
		}

		[Token(Token = "0x60025C5")]
		[Address(RVA = "0xDD709C", Offset = "0xDD709C", VA = "0xDD709C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60025C6")]
		[Address(RVA = "0xDD71E0", Offset = "0xDD71E0", VA = "0xDD71E0")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60025C7")]
		[Address(RVA = "0xDD70A4", Offset = "0xDD70A4", VA = "0xDD70A4")]
		private void DrawGizmo(bool selected)
		{
		}

		[Token(Token = "0x60025C8")]
		[Address(RVA = "0xDD6D18", Offset = "0xDD6D18", VA = "0xDD6D18")]
		public Volume()
		{
		}
	}
	[Token(Token = "0x200069C")]
	[ExecuteInEditMode]
	public class InfinityDungeon : MonoBehaviour
	{
		[Token(Token = "0x40023EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform buildPositionTracker;

		[Token(Token = "0x40023EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float buildDistance;

		[Token(Token = "0x40023F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Graph> dungeonThemes;

		[Token(Token = "0x40023F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform parentGameObject;

		[Token(Token = "0x40023F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject chunkDungeonTemplate;

		[Token(Token = "0x40023F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private List<InfinityDungeonConfig> spawnedChunks;

		[Token(Token = "0x40023F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		private bool dungeonBuilt;

		[Token(Token = "0x40023F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private InfinityDungeonConfig config;

		[Token(Token = "0x60025C9")]
		[Address(RVA = "0xDD71E8", Offset = "0xDD71E8", VA = "0xDD71E8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60025CA")]
		[Address(RVA = "0xDD7238", Offset = "0xDD7238", VA = "0xDD7238")]
		public void EditorUpdate()
		{
		}

		[Token(Token = "0x60025CB")]
		[Address(RVA = "0xDD749C", Offset = "0xDD749C", VA = "0xDD749C")]
		private void Update()
		{
		}

		[Token(Token = "0x60025CC")]
		[Address(RVA = "0xDD7568", Offset = "0xDD7568", VA = "0xDD7568")]
		public void BuildDungeon()
		{
		}

		[Token(Token = "0x60025CD")]
		[Address(RVA = "0xDD74AC", Offset = "0xDD74AC", VA = "0xDD74AC")]
		private void UpdateChunks()
		{
		}

		[Token(Token = "0x60025CE")]
		[Address(RVA = "0xDD786C", Offset = "0xDD786C", VA = "0xDD786C")]
		private void UpdateChunks(UnityEngine.Vector3 buildPosition)
		{
		}

		[Token(Token = "0x60025CF")]
		[Address(RVA = "0xDD818C", Offset = "0xDD818C", VA = "0xDD818C")]
		private UnityEngine.Vector3 ClampOnBuildAxis(UnityEngine.Vector3 p)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60025D0")]
		[Address(RVA = "0xDD8228", Offset = "0xDD8228", VA = "0xDD8228")]
		public Dungeon BuildDungeonChunk(UnityEngine.Vector3 chunkPosition)
		{
			return null;
		}

		[Token(Token = "0x60025D1")]
		[Address(RVA = "0xDD75CC", Offset = "0xDD75CC", VA = "0xDD75CC")]
		public void DestroyDungeon()
		{
		}

		[Token(Token = "0x60025D2")]
		[Address(RVA = "0xDD841C", Offset = "0xDD841C", VA = "0xDD841C")]
		public void CopyDungeonConfig(InfinityDungeonConfig targetConfig)
		{
		}

		[Token(Token = "0x60025D3")]
		[Address(RVA = "0xDD8500", Offset = "0xDD8500", VA = "0xDD8500")]
		public InfinityDungeon()
		{
		}
	}
	[Token(Token = "0x200069E")]
	public abstract class InfinityDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x40023F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public UnityEngine.Vector3 chunkPosition;

		[Token(Token = "0x40023F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public UnityEngine.Vector3 chunkSize;

		[Token(Token = "0x60025D7")]
		public abstract UnityEngine.Vector3 GetLogicalCoord(UnityEngine.Vector3 p);

		[Token(Token = "0x60025D8")]
		public abstract bool BuildAlongX();

		[Token(Token = "0x60025D9")]
		public abstract bool BuildAlongY();

		[Token(Token = "0x60025DA")]
		public abstract bool BuildAlongZ();

		[Token(Token = "0x60025DB")]
		[Address(RVA = "0xDD869C", Offset = "0xDD869C", VA = "0xDD869C")]
		protected InfinityDungeonConfig()
		{
		}
	}
	[Token(Token = "0x200069F")]
	public class InfinityDungeonEditorUpdate : MonoBehaviour
	{
		[Token(Token = "0x40023FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InfinityDungeon infinityDungeon;

		[Token(Token = "0x60025DC")]
		[Address(RVA = "0xDD86A4", Offset = "0xDD86A4", VA = "0xDD86A4")]
		public void EditorUpdate()
		{
		}

		[Token(Token = "0x60025DD")]
		[Address(RVA = "0xDD8724", Offset = "0xDD8724", VA = "0xDD8724")]
		public InfinityDungeonEditorUpdate()
		{
		}
	}
	[Token(Token = "0x20006A0")]
	public class DungeonItemGroupInfo : MonoBehaviour
	{
		[Token(Token = "0x40023FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x40023FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int groupId;

		[Token(Token = "0x40023FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string groupType;

		[Token(Token = "0x60025DE")]
		[Address(RVA = "0xDD872C", Offset = "0xDD872C", VA = "0xDD872C")]
		public DungeonItemGroupInfo()
		{
		}
	}
	[Token(Token = "0x20006A1")]
	public class DungeonNavMeshSourceCollector
	{
		[Token(Token = "0x60025DF")]
		[Address(RVA = "0xDD8734", Offset = "0xDD8734", VA = "0xDD8734")]
		private static NavMeshBuildSource CreateMeshSource(Mesh mesh, Matrix4x4 transform)
		{
			return default(NavMeshBuildSource);
		}

		[Token(Token = "0x60025E0")]
		[Address(RVA = "0xDD87D0", Offset = "0xDD87D0", VA = "0xDD87D0")]
		public static void CollectSources(Dungeon dungeon, DungeonNavMeshSourceType MeshSourceType, ref List<NavMeshBuildSource> sources)
		{
		}

		[Token(Token = "0x60025E1")]
		[Address(RVA = "0xDD8EB0", Offset = "0xDD8EB0", VA = "0xDD8EB0")]
		public DungeonNavMeshSourceCollector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006A2")]
	public enum DungeonNavMeshSourceType
	{
		[Token(Token = "0x40023FF")]
		MeshData,
		[Token(Token = "0x4002400")]
		Collision
	}
	[Token(Token = "0x20006A3")]
	public class DungeonRuntimeNavigation : MonoBehaviour
	{
		[Token(Token = "0x4002401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool enableRuntimeNavigation;

		[Token(Token = "0x4002402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UnityEngine.Vector3 boundsPadding;

		[Token(Token = "0x4002403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool bakeTerrain;

		[Token(Token = "0x4002404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Terrain terrain;

		[Token(Token = "0x4002405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private DungeonNavMeshSourceType meshSourceType;

		[Token(Token = "0x4002406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Bounds dungeonBounds;

		[Token(Token = "0x4002407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private NavMeshData m_NavMesh;

		[Token(Token = "0x4002408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshDataInstance m_Instance;

		[Token(Token = "0x4002409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<NavMeshBuildSource> meshSources;

		[Token(Token = "0x60025E2")]
		[Address(RVA = "0xDCF3F4", Offset = "0xDCF3F4", VA = "0xDCF3F4")]
		public void BuildNavMesh()
		{
		}

		[Token(Token = "0x60025E3")]
		[Address(RVA = "0xDD8EB8", Offset = "0xDD8EB8", VA = "0xDD8EB8")]
		private void DestroyNavMesh()
		{
		}

		[Token(Token = "0x60025E4")]
		[Address(RVA = "0xDD9004", Offset = "0xDD9004", VA = "0xDD9004")]
		private void CollectMeshSources()
		{
		}

		[Token(Token = "0x60025E5")]
		[Address(RVA = "0xDD8F24", Offset = "0xDD8F24", VA = "0xDD8F24")]
		private void UpdateNavMesh(bool asyncUpdate = false)
		{
		}

		[Token(Token = "0x60025E6")]
		[Address(RVA = "0xDD92C0", Offset = "0xDD92C0", VA = "0xDD92C0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60025E7")]
		[Address(RVA = "0xDD9454", Offset = "0xDD9454", VA = "0xDD9454")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60025E8")]
		[Address(RVA = "0xDD9458", Offset = "0xDD9458", VA = "0xDD9458")]
		public DungeonRuntimeNavigation()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006A4")]
	public struct DebugTextItem
	{
		[Token(Token = "0x400240A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string message;

		[Token(Token = "0x400240B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UnityEngine.Vector3 position;

		[Token(Token = "0x400240C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Color color;
	}
	[Token(Token = "0x20006A5")]
	public class DebugText3D : MonoBehaviour
	{
		[Token(Token = "0x400240D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public DebugTextItem[] items;

		[Token(Token = "0x60025E9")]
		[Address(RVA = "0xDD951C", Offset = "0xDD951C", VA = "0xDD951C")]
		public DebugText3D()
		{
		}
	}
	[Token(Token = "0x20006A6")]
	public class LevelMarkerList : IEnumerable<PropSocket>, IEnumerable
	{
		[Token(Token = "0x400240E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected List<PropSocket> markers;

		[Token(Token = "0x400240F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int _SocketIdCounter;

		[Token(Token = "0x17000634")]
		public PropSocket this[int index]
		{
			[Token(Token = "0x60025F0")]
			[Address(RVA = "0xDD9810", Offset = "0xDD9810", VA = "0xDD9810")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000635")]
		public int Count
		{
			[Token(Token = "0x60025F1")]
			[Address(RVA = "0xDD9868", Offset = "0xDD9868", VA = "0xDD9868")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60025EA")]
		[Address(RVA = "0xDD9524", Offset = "0xDD9524", VA = "0xDD9524", Slot = "4")]
		public IEnumerator<PropSocket> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60025EB")]
		[Address(RVA = "0xDD95B4", Offset = "0xDD95B4", VA = "0xDD95B4", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60025EC")]
		[Address(RVA = "0xDD9644", Offset = "0xDD9644", VA = "0xDD9644", Slot = "6")]
		public virtual void Add(PropSocket marker)
		{
		}

		[Token(Token = "0x60025ED")]
		[Address(RVA = "0xDD96EC", Offset = "0xDD96EC", VA = "0xDD96EC", Slot = "7")]
		public virtual void AddRange(PropSocket[] markerList)
		{
		}

		[Token(Token = "0x60025EE")]
		[Address(RVA = "0xDD9744", Offset = "0xDD9744", VA = "0xDD9744", Slot = "8")]
		public virtual void Remove(PropSocket marker)
		{
		}

		[Token(Token = "0x60025EF")]
		[Address(RVA = "0xDD979C", Offset = "0xDD979C", VA = "0xDD979C", Slot = "9")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x60025F2")]
		[Address(RVA = "0xDD98B0", Offset = "0xDD98B0", VA = "0xDD98B0", Slot = "10")]
		public virtual IEnumerable<PropSocket> GetMarkersInSearchArea(UnityEngine.Vector2 center, float radius)
		{
			return null;
		}

		[Token(Token = "0x60025F3")]
		[Address(RVA = "0xDD98B8", Offset = "0xDD98B8", VA = "0xDD98B8")]
		public PropSocket EmitMarker(string SocketType, Matrix4x4 transform, IntVector gridPosition, int cellId)
		{
			return null;
		}

		[Token(Token = "0x60025F4")]
		[Address(RVA = "0xDD98EC", Offset = "0xDD98EC", VA = "0xDD98EC")]
		public PropSocket EmitMarker(string SocketType, Matrix4x4 transform, IntVector gridPosition, int cellId, object metadata)
		{
			return null;
		}

		[Token(Token = "0x60025F5")]
		[Address(RVA = "0xDD99C0", Offset = "0xDD99C0", VA = "0xDD99C0")]
		public void EmitMarker(string SocketType, Matrix4x4 _transform, int count, UnityEngine.Vector3 InterOffset, IntVector gridPosition, int cellId, UnityEngine.Vector3 LogicalToWorldScale)
		{
		}

		[Token(Token = "0x60025F6")]
		[Address(RVA = "0xDD99F4", Offset = "0xDD99F4", VA = "0xDD99F4")]
		public void EmitMarker(string SocketType, Matrix4x4 _transform, int count, UnityEngine.Vector3 InterOffset, IntVector gridPosition, int cellId, UnityEngine.Vector3 LogicalToWorldScale, object metadata)
		{
		}

		[Token(Token = "0x60025F7")]
		[Address(RVA = "0xDD9EC8", Offset = "0xDD9EC8", VA = "0xDD9EC8")]
		public LevelMarkerList()
		{
		}
	}
	[Token(Token = "0x20006A7")]
	public class SpatialPartionedLevelMarkerList : LevelMarkerList
	{
		[Token(Token = "0x4002410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float partitionCellSize;

		[Token(Token = "0x4002411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<IntVector2, List<PropSocket>> buckets;

		[Token(Token = "0x60025F8")]
		[Address(RVA = "0xDD9F44", Offset = "0xDD9F44", VA = "0xDD9F44")]
		public SpatialPartionedLevelMarkerList(float partitionCellSize)
		{
		}

		[Token(Token = "0x60025F9")]
		[Address(RVA = "0xDD9FD8", Offset = "0xDD9FD8", VA = "0xDD9FD8")]
		private IntVector2 GetBucketCoord(PropSocket marker)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x60025FA")]
		[Address(RVA = "0xDDA0E4", Offset = "0xDDA0E4", VA = "0xDDA0E4")]
		private IntVector2 GetBucketCoord(UnityEngine.Vector2 position)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x60025FB")]
		[Address(RVA = "0xDD9FF4", Offset = "0xDD9FF4", VA = "0xDD9FF4")]
		private IntVector2 GetBucketCoord(float x, float z)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x60025FC")]
		[Address(RVA = "0xDDA0F0", Offset = "0xDDA0F0", VA = "0xDDA0F0", Slot = "6")]
		public override void Add(PropSocket marker)
		{
		}

		[Token(Token = "0x60025FD")]
		[Address(RVA = "0xDDA284", Offset = "0xDDA284", VA = "0xDDA284", Slot = "8")]
		public override void Remove(PropSocket marker)
		{
		}

		[Token(Token = "0x60025FE")]
		[Address(RVA = "0xDDA358", Offset = "0xDDA358", VA = "0xDDA358", Slot = "10")]
		public override IEnumerable<PropSocket> GetMarkersInSearchArea(UnityEngine.Vector2 center, float radius)
		{
			return null;
		}

		[Token(Token = "0x60025FF")]
		[Address(RVA = "0xDDA4F4", Offset = "0xDDA4F4", VA = "0xDDA4F4", Slot = "9")]
		public override void Clear()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006A8")]
	public struct IntVector
	{
		[Token(Token = "0x4002412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public int x;

		[Token(Token = "0x4002413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[SerializeField]
		public int y;

		[Token(Token = "0x4002414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		public int z;

		[Token(Token = "0x4002415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly IntVector Zero;

		[Token(Token = "0x6002600")]
		[Address(RVA = "0xDDA54C", Offset = "0xDDA54C", VA = "0xDDA54C")]
		public IntVector(UnityEngine.Vector3 v)
		{
		}

		[Token(Token = "0x6002601")]
		[Address(RVA = "0xDD9DE4", Offset = "0xDD9DE4", VA = "0xDD9DE4")]
		public IntVector(int x, int y, int z)
		{
		}

		[Token(Token = "0x6002602")]
		[Address(RVA = "0xDDA7B8", Offset = "0xDDA7B8", VA = "0xDDA7B8")]
		public void Set(int x, int y, int z)
		{
		}

		[Token(Token = "0x6002603")]
		[Address(RVA = "0xDDA7C4", Offset = "0xDDA7C4", VA = "0xDDA7C4")]
		public float DistanceSq()
		{
			return default(float);
		}

		[Token(Token = "0x6002604")]
		[Address(RVA = "0xDDA7E0", Offset = "0xDDA7E0", VA = "0xDDA7E0")]
		public float Distance()
		{
			return default(float);
		}

		[Token(Token = "0x6002605")]
		[Address(RVA = "0xDDA800", Offset = "0xDDA800", VA = "0xDDA800")]
		public UnityEngine.Vector3 ToVector3()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002606")]
		[Address(RVA = "0xDD9EA0", Offset = "0xDD9EA0", VA = "0xDD9EA0")]
		public static IntVector operator +(IntVector a, IntVector b)
		{
			return default(IntVector);
		}

		[Token(Token = "0x6002607")]
		[Address(RVA = "0xDDA818", Offset = "0xDDA818", VA = "0xDDA818")]
		public static IntVector operator -(IntVector a, IntVector b)
		{
			return default(IntVector);
		}

		[Token(Token = "0x6002608")]
		[Address(RVA = "0xDDA834", Offset = "0xDDA834", VA = "0xDDA834")]
		public static IntVector operator *(IntVector a, IntVector b)
		{
			return default(IntVector);
		}

		[Token(Token = "0x6002609")]
		[Address(RVA = "0xDDA850", Offset = "0xDDA850", VA = "0xDDA850")]
		public static UnityEngine.Vector3 operator *(IntVector a, UnityEngine.Vector3 b)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600260A")]
		[Address(RVA = "0xDDA870", Offset = "0xDDA870", VA = "0xDDA870")]
		public static IntVector operator /(IntVector a, IntVector b)
		{
			return default(IntVector);
		}

		[Token(Token = "0x600260B")]
		[Address(RVA = "0xDDA88C", Offset = "0xDDA88C", VA = "0xDDA88C")]
		public static IntVector operator +(IntVector a, int b)
		{
			return default(IntVector);
		}

		[Token(Token = "0x600260C")]
		[Address(RVA = "0xDDA8A4", Offset = "0xDDA8A4", VA = "0xDDA8A4")]
		public static IntVector operator -(IntVector a, int b)
		{
			return default(IntVector);
		}

		[Token(Token = "0x600260D")]
		[Address(RVA = "0xDDA8BC", Offset = "0xDDA8BC", VA = "0xDDA8BC")]
		public static IntVector operator *(IntVector a, int b)
		{
			return default(IntVector);
		}

		[Token(Token = "0x600260E")]
		[Address(RVA = "0xDDA8D4", Offset = "0xDDA8D4", VA = "0xDDA8D4")]
		public static IntVector operator /(IntVector a, int b)
		{
			return default(IntVector);
		}

		[Token(Token = "0x600260F")]
		[Address(RVA = "0xDDA8EC", Offset = "0xDDA8EC", VA = "0xDDA8EC")]
		public static bool operator ==(IntVector a, IntVector b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002610")]
		[Address(RVA = "0xDDA91C", Offset = "0xDDA91C", VA = "0xDDA91C")]
		public static bool operator !=(IntVector a, IntVector b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002611")]
		[Address(RVA = "0xDDA9B4", Offset = "0xDDA9B4", VA = "0xDDA9B4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002612")]
		[Address(RVA = "0xDDAA4C", Offset = "0xDDAA4C", VA = "0xDDAA4C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6002613")]
		[Address(RVA = "0xDDAA60", Offset = "0xDDAA60", VA = "0xDDAA60")]
		public static UnityEngine.Vector3 ToV3(IntVector iv)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002614")]
		[Address(RVA = "0xDDAA74", Offset = "0xDDAA74", VA = "0xDDAA74", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20006A9")]
	public struct IntVector2
	{
		[Token(Token = "0x4002416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public int x;

		[Token(Token = "0x4002417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[SerializeField]
		public int y;

		[Token(Token = "0x4002418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly IntVector2 Zero;

		[Token(Token = "0x6002616")]
		[Address(RVA = "0xDDAB84", Offset = "0xDDAB84", VA = "0xDDAB84")]
		public IntVector2(UnityEngine.Vector3 v)
		{
		}

		[Token(Token = "0x6002617")]
		[Address(RVA = "0xDDA0E8", Offset = "0xDDA0E8", VA = "0xDDA0E8")]
		public IntVector2(int x, int y)
		{
		}

		[Token(Token = "0x6002618")]
		[Address(RVA = "0xDDAD38", Offset = "0xDDAD38", VA = "0xDDAD38")]
		public void Set(int x, int y)
		{
		}

		[Token(Token = "0x6002619")]
		[Address(RVA = "0xDDAD40", Offset = "0xDDAD40", VA = "0xDDAD40")]
		public int ManhattanDistance()
		{
			return default(int);
		}

		[Token(Token = "0x600261A")]
		[Address(RVA = "0xDDAD4C", Offset = "0xDDAD4C", VA = "0xDDAD4C")]
		public float DistanceSq()
		{
			return default(float);
		}

		[Token(Token = "0x600261B")]
		[Address(RVA = "0xDDAD60", Offset = "0xDDAD60", VA = "0xDDAD60")]
		public IntVector2 Abs()
		{
			return default(IntVector2);
		}

		[Token(Token = "0x600261C")]
		[Address(RVA = "0xDDAE14", Offset = "0xDDAE14", VA = "0xDDAE14")]
		public float Distance()
		{
			return default(float);
		}

		[Token(Token = "0x600261D")]
		[Address(RVA = "0xDDAE2C", Offset = "0xDDAE2C", VA = "0xDDAE2C")]
		public UnityEngine.Vector2 ToVector2()
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600261E")]
		[Address(RVA = "0xDDAE3C", Offset = "0xDDAE3C", VA = "0xDDAE3C")]
		public static IntVector2 operator +(IntVector2 a, IntVector2 b)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x600261F")]
		[Address(RVA = "0xDDAE54", Offset = "0xDDAE54", VA = "0xDDAE54")]
		public static IntVector2 operator -(IntVector2 a, IntVector2 b)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x6002620")]
		[Address(RVA = "0xDDAE6C", Offset = "0xDDAE6C", VA = "0xDDAE6C")]
		public static IntVector2 operator *(IntVector2 a, IntVector2 b)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x6002621")]
		[Address(RVA = "0xDDAE84", Offset = "0xDDAE84", VA = "0xDDAE84")]
		public static UnityEngine.Vector3 operator *(IntVector2 a, UnityEngine.Vector3 b)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002622")]
		[Address(RVA = "0xDDAEA0", Offset = "0xDDAEA0", VA = "0xDDAEA0")]
		public static IntVector2 operator /(IntVector2 a, IntVector2 b)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x6002623")]
		[Address(RVA = "0xDDAEB8", Offset = "0xDDAEB8", VA = "0xDDAEB8")]
		public static IntVector2 operator +(IntVector2 a, int b)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x6002624")]
		[Address(RVA = "0xDDAECC", Offset = "0xDDAECC", VA = "0xDDAECC")]
		public static IntVector2 operator -(IntVector2 a, int b)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x6002625")]
		[Address(RVA = "0xDDAEE0", Offset = "0xDDAEE0", VA = "0xDDAEE0")]
		public static IntVector2 operator *(IntVector2 a, int b)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x6002626")]
		[Address(RVA = "0xDDAEF4", Offset = "0xDDAEF4", VA = "0xDDAEF4")]
		public static IntVector2 operator /(IntVector2 a, int b)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x6002627")]
		[Address(RVA = "0xDDAF08", Offset = "0xDDAF08", VA = "0xDDAF08", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002628")]
		[Address(RVA = "0xDDAF90", Offset = "0xDDAF90", VA = "0xDDAF90", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6002629")]
		[Address(RVA = "0xDDAF9C", Offset = "0xDDAF9C", VA = "0xDDAF9C")]
		public static UnityEngine.Vector2 ToV2(IntVector2 iv)
		{
			return default(UnityEngine.Vector2);
		}
	}
	[Serializable]
	[Token(Token = "0x20006AA")]
	public struct Rectangle
	{
		[Token(Token = "0x4002419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private IntVector location;

		[Token(Token = "0x400241A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		private IntVector size;

		[Token(Token = "0x17000636")]
		public IntVector Location
		{
			[Token(Token = "0x600262D")]
			[Address(RVA = "0xDDB018", Offset = "0xDDB018", VA = "0xDDB018")]
			get
			{
				return default(IntVector);
			}
			[Token(Token = "0x600262E")]
			[Address(RVA = "0xDDB028", Offset = "0xDDB028", VA = "0xDDB028")]
			set
			{
			}
		}

		[Token(Token = "0x17000637")]
		public IntVector Size
		{
			[Token(Token = "0x600262F")]
			[Address(RVA = "0xDDB034", Offset = "0xDDB034", VA = "0xDDB034")]
			get
			{
				return default(IntVector);
			}
			[Token(Token = "0x6002630")]
			[Address(RVA = "0xDDB044", Offset = "0xDDB044", VA = "0xDDB044")]
			set
			{
			}
		}

		[Token(Token = "0x17000638")]
		public int X
		{
			[Token(Token = "0x6002631")]
			[Address(RVA = "0xDDB050", Offset = "0xDDB050", VA = "0xDDB050")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000639")]
		public int Z
		{
			[Token(Token = "0x6002632")]
			[Address(RVA = "0xDDB058", Offset = "0xDDB058", VA = "0xDDB058")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700063A")]
		public int Width
		{
			[Token(Token = "0x6002633")]
			[Address(RVA = "0xDDB060", Offset = "0xDDB060", VA = "0xDDB060")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700063B")]
		public int Length
		{
			[Token(Token = "0x6002634")]
			[Address(RVA = "0xDDB068", Offset = "0xDDB068", VA = "0xDDB068")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700063C")]
		public int Left
		{
			[Token(Token = "0x6002635")]
			[Address(RVA = "0xDDB070", Offset = "0xDDB070", VA = "0xDDB070")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700063D")]
		public int Right
		{
			[Token(Token = "0x6002636")]
			[Address(RVA = "0xDDB078", Offset = "0xDDB078", VA = "0xDDB078")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700063E")]
		public int Back
		{
			[Token(Token = "0x6002637")]
			[Address(RVA = "0xDDB088", Offset = "0xDDB088", VA = "0xDDB088")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700063F")]
		public int Front
		{
			[Token(Token = "0x6002638")]
			[Address(RVA = "0xDDB090", Offset = "0xDDB090", VA = "0xDDB090")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600262B")]
		[Address(RVA = "0xDDAFF4", Offset = "0xDDAFF4", VA = "0xDDAFF4")]
		public Rectangle(int x, int z, int width, int length)
		{
		}

		[Token(Token = "0x600262C")]
		[Address(RVA = "0xDDB004", Offset = "0xDDB004", VA = "0xDDB004")]
		public Rectangle(IntVector location, IntVector size)
		{
		}

		[Token(Token = "0x6002639")]
		[Address(RVA = "0xDDB0A0", Offset = "0xDDB0A0", VA = "0xDDB0A0")]
		public void SetY(int y)
		{
		}

		[Token(Token = "0x600263A")]
		[Address(RVA = "0xDDB0A8", Offset = "0xDDB0A8", VA = "0xDDB0A8")]
		public IntVector Center()
		{
			return default(IntVector);
		}

		[Token(Token = "0x600263B")]
		[Address(RVA = "0xDDB144", Offset = "0xDDB144", VA = "0xDDB144")]
		private static UnityEngine.Vector3 ToVector3(IntVector iv)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600263C")]
		[Address(RVA = "0xDDB158", Offset = "0xDDB158", VA = "0xDDB158")]
		public UnityEngine.Vector3 CenterF()
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600263D")]
		[Address(RVA = "0xDDB19C", Offset = "0xDDB19C", VA = "0xDDB19C")]
		public bool Contains(Rectangle rect)
		{
			return default(bool);
		}

		[Token(Token = "0x600263E")]
		[Address(RVA = "0xDDB1F8", Offset = "0xDDB1F8", VA = "0xDDB1F8")]
		public bool Contains(IntVector Point)
		{
			return default(bool);
		}

		[Token(Token = "0x600263F")]
		[Address(RVA = "0xDDB23C", Offset = "0xDDB23C", VA = "0xDDB23C")]
		public bool Contains(int x, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x6002640")]
		[Address(RVA = "0xDDB280", Offset = "0xDDB280", VA = "0xDDB280")]
		public static Rectangle Intersect(Rectangle a, Rectangle b)
		{
			return default(Rectangle);
		}

		[Token(Token = "0x6002641")]
		[Address(RVA = "0xDDB2F4", Offset = "0xDDB2F4", VA = "0xDDB2F4")]
		public bool IntersectsWith(Rectangle rect)
		{
			return default(bool);
		}

		[Token(Token = "0x6002642")]
		[Address(RVA = "0xDDB350", Offset = "0xDDB350", VA = "0xDDB350")]
		public static Rectangle ExpandBounds(Rectangle rect, int distance)
		{
			return default(Rectangle);
		}

		[Token(Token = "0x6002643")]
		[Address(RVA = "0xDDB394", Offset = "0xDDB394", VA = "0xDDB394")]
		public IntVector[] GetBorderPoints()
		{
			return null;
		}
	}
	[Token(Token = "0x20006AB")]
	[AttributeUsage(AttributeTargets.Class)]
	public class MetaAttribute : Attribute
	{
		[Token(Token = "0x400241B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string displayText;

		[Token(Token = "0x6002644")]
		[Address(RVA = "0xDDB65C", Offset = "0xDDB65C", VA = "0xDDB65C")]
		public MetaAttribute(string displayText)
		{
		}
	}
}
namespace DungeonArchitect.Utils
{
	[Token(Token = "0x20006AC")]
	public class Blackboard
	{
		[Token(Token = "0x400241C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BlackboardDatabase<int> intEntries;

		[Token(Token = "0x400241D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BlackboardDatabase<float> floatEntries;

		[Token(Token = "0x400241E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BlackboardDatabase<string> stringEntries;

		[Token(Token = "0x400241F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BlackboardDatabase<UnityEngine.Vector3> vectorEntries;

		[Token(Token = "0x4002420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private BlackboardDatabase<IntVector> intVectorEntries;

		[Token(Token = "0x17000640")]
		public BlackboardDatabase<int> IntEntries
		{
			[Token(Token = "0x6002645")]
			[Address(RVA = "0xDDB684", Offset = "0xDDB684", VA = "0xDDB684")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000641")]
		public BlackboardDatabase<float> FloatEntries
		{
			[Token(Token = "0x6002646")]
			[Address(RVA = "0xDDB68C", Offset = "0xDDB68C", VA = "0xDDB68C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000642")]
		public BlackboardDatabase<string> StringEntries
		{
			[Token(Token = "0x6002647")]
			[Address(RVA = "0xDDB694", Offset = "0xDDB694", VA = "0xDDB694")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000643")]
		public BlackboardDatabase<UnityEngine.Vector3> VectorEntries
		{
			[Token(Token = "0x6002648")]
			[Address(RVA = "0xDDB69C", Offset = "0xDDB69C", VA = "0xDDB69C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000644")]
		public BlackboardDatabase<IntVector> IntVectorEntries
		{
			[Token(Token = "0x6002649")]
			[Address(RVA = "0xDDB6A4", Offset = "0xDDB6A4", VA = "0xDDB6A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600264A")]
		[Address(RVA = "0xDDB6AC", Offset = "0xDDB6AC", VA = "0xDDB6AC")]
		public Blackboard()
		{
		}
	}
	[Token(Token = "0x20006AD")]
	public class BlackboardDatabase<T>
	{
		[Token(Token = "0x4002421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T defaultValue;

		[Token(Token = "0x4002422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<string, T> database;

		[Token(Token = "0x600264B")]
		public BlackboardDatabase(T defaultValue)
		{
		}

		[Token(Token = "0x600264C")]
		public void SetValue(string key, T value)
		{
		}

		[Token(Token = "0x600264D")]
		public T GetValue(string key)
		{
			return (T)null;
		}
	}
	[Token(Token = "0x20006AE")]
	public class ColorUtils
	{
		[Token(Token = "0x600264E")]
		[Address(RVA = "0xDDB8F0", Offset = "0xDDB8F0", VA = "0xDDB8F0")]
		public static Color BrightenColor(Color color, float saturationMultiplier, float brightnessMultiplier)
		{
			return default(Color);
		}

		[Token(Token = "0x600264F")]
		[Address(RVA = "0xDDB964", Offset = "0xDDB964", VA = "0xDDB964")]
		public ColorUtils()
		{
		}
	}
	[Token(Token = "0x20006AF")]
	public class DebugDrawUtils
	{
		[Token(Token = "0x6002650")]
		[Address(RVA = "0xDDB96C", Offset = "0xDDB96C", VA = "0xDDB96C")]
		public static void DrawBounds(Rectangle bounds, Color color, UnityEngine.Vector3 gridScale, bool mode2D)
		{
		}

		[Token(Token = "0x6002651")]
		[Address(RVA = "0xDDBBE4", Offset = "0xDDBBE4", VA = "0xDDBBE4")]
		public static void DrawMarker(PropSocket marker, Color color, bool mode2D)
		{
		}

		[Token(Token = "0x6002652")]
		[Address(RVA = "0xDDBC48", Offset = "0xDDBC48", VA = "0xDDBC48")]
		public static void DrawPoint(UnityEngine.Vector3 position, Color color, bool mode2D)
		{
		}

		[Token(Token = "0x6002653")]
		[Address(RVA = "0xDDBC98", Offset = "0xDDBC98", VA = "0xDDBC98")]
		private static UnityEngine.Vector3 FlipFor2D(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002654")]
		[Address(RVA = "0xDDBACC", Offset = "0xDDBACC", VA = "0xDDBACC")]
		public static void DrawLine(UnityEngine.Vector3 start, UnityEngine.Vector3 end, Color color, float duration, bool depthTest, bool mode2D)
		{
		}

		[Token(Token = "0x6002655")]
		[Address(RVA = "0xDDBCA8", Offset = "0xDDBCA8", VA = "0xDDBCA8")]
		private static UnityEngine.Vector3 GetPointOnCircle(float angle)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002656")]
		[Address(RVA = "0xDDBCD4", Offset = "0xDDBCD4", VA = "0xDDBCD4")]
		public static void DrawCircle(UnityEngine.Vector3 center, float radius, Color color)
		{
		}

		[Token(Token = "0x6002657")]
		[Address(RVA = "0xDDBCF4", Offset = "0xDDBCF4", VA = "0xDDBCF4")]
		public static void DrawCircle(UnityEngine.Vector3 center, float radius, Color color, float segmentMultiplier)
		{
		}

		[Token(Token = "0x6002658")]
		[Address(RVA = "0xDDBF30", Offset = "0xDDBF30", VA = "0xDDBF30")]
		public DebugDrawUtils()
		{
		}
	}
	[Token(Token = "0x20006B0")]
	public class DungeonConstants
	{
		[Token(Token = "0x4002423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string ST_FENCE;

		[Token(Token = "0x4002424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string ST_FENCESEPARATOR;

		[Token(Token = "0x4002425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string ST_DOOR;

		[Token(Token = "0x4002426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string ST_DOOR2D;

		[Token(Token = "0x4002427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string ST_DOOR2D_90;

		[Token(Token = "0x4002428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string ST_WALL;

		[Token(Token = "0x4002429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly string ST_WALL2D;

		[Token(Token = "0x400242A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly string ST_WALLSEPARATOR;

		[Token(Token = "0x400242B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly string ST_GROUND;

		[Token(Token = "0x400242C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly string ST_GROUND2D;

		[Token(Token = "0x400242D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly string ST_STAIR;

		[Token(Token = "0x400242E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly string ST_STAIR2X;

		[Token(Token = "0x400242F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly string ST_WALLHALF;

		[Token(Token = "0x4002430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly string ST_WALLHALFSEPARATOR;

		[Token(Token = "0x4002431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly string ST_NONE;

		[Token(Token = "0x4002432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly string ST_ROOMWALL;

		[Token(Token = "0x4002433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly string ST_ROOMWALLSEPARATOR;

		[Token(Token = "0x4002434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly string ST_ROOMOPENSPACE;

		[Token(Token = "0x4002435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly string ST_LIGHT;

		[Token(Token = "0x6002659")]
		[Address(RVA = "0xDDBF38", Offset = "0xDDBF38", VA = "0xDDBF38")]
		public DungeonConstants()
		{
		}
	}
	[Token(Token = "0x20006B1")]
	public class GraphUtils
	{
		[Token(Token = "0x600265B")]
		[Address(RVA = "0xDDC210", Offset = "0xDDC210", VA = "0xDDC210")]
		private static GraphNode[] GetDirectionalNodes(GraphPin pin, bool isIncoming)
		{
			return null;
		}

		[Token(Token = "0x600265C")]
		[Address(RVA = "0xDDC594", Offset = "0xDDC594", VA = "0xDDC594")]
		private static GraphNode[] GetDirectionalNodes(GraphNode hostNode, bool isIncoming)
		{
			return null;
		}

		[Token(Token = "0x600265D")]
		[Address(RVA = "0xDDC930", Offset = "0xDDC930", VA = "0xDDC930")]
		public static GraphNode[] GetIncomingNodes(GraphPin pin)
		{
			return null;
		}

		[Token(Token = "0x600265E")]
		[Address(RVA = "0xDDC938", Offset = "0xDDC938", VA = "0xDDC938")]
		public static GraphNode[] GetOutgoingNodes(GraphPin pin)
		{
			return null;
		}

		[Token(Token = "0x600265F")]
		[Address(RVA = "0xDDC940", Offset = "0xDDC940", VA = "0xDDC940")]
		public static GraphNode[] GetIncomingNodes(GraphNode node)
		{
			return null;
		}

		[Token(Token = "0x6002660")]
		[Address(RVA = "0xDDC948", Offset = "0xDDC948", VA = "0xDDC948")]
		public static GraphNode[] GetOutgoingNodes(GraphNode node)
		{
			return null;
		}

		[Token(Token = "0x6002661")]
		[Address(RVA = "0xDDC950", Offset = "0xDDC950", VA = "0xDDC950")]
		public GraphUtils()
		{
		}
	}
	[Token(Token = "0x20006B2")]
	public class InstanceCache
	{
		[Token(Token = "0x4002436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, object> InstanceByType;

		[Token(Token = "0x6002662")]
		[Address(RVA = "0xDDC958", Offset = "0xDDC958", VA = "0xDDC958")]
		public object GetInstance(string typeName)
		{
			return null;
		}

		[Token(Token = "0x6002663")]
		[Address(RVA = "0xDDCA78", Offset = "0xDDCA78", VA = "0xDDCA78")]
		public InstanceCache()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B3")]
	public class KeyValueDataEntryBase
	{
		[Token(Token = "0x4002437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public string key;

		[Token(Token = "0x6002664")]
		[Address(RVA = "0xDDCAF4", Offset = "0xDDCAF4", VA = "0xDDCAF4", Slot = "4")]
		public virtual object GetValue()
		{
			return null;
		}

		[Token(Token = "0x6002665")]
		[Address(RVA = "0xDDCAFC", Offset = "0xDDCAFC", VA = "0xDDCAFC", Slot = "5")]
		public virtual void SetValue(object value)
		{
		}

		[Token(Token = "0x6002666")]
		[Address(RVA = "0xDDCB00", Offset = "0xDDCB00", VA = "0xDDCB00")]
		public KeyValueDataEntryBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B4")]
	public class KeyValueDataEntryTyped<T> : KeyValueDataEntryBase
	{
		[Token(Token = "0x4002438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public T value;

		[Token(Token = "0x6002667")]
		public override object GetValue()
		{
			return null;
		}

		[Token(Token = "0x6002668")]
		public override void SetValue(object value)
		{
		}

		[Token(Token = "0x6002669")]
		public KeyValueDataEntryTyped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B5")]
	public class KeyValueDataEntryFloat : KeyValueDataEntryTyped<float>
	{
		[Token(Token = "0x600266A")]
		[Address(RVA = "0xDDCB08", Offset = "0xDDCB08", VA = "0xDDCB08")]
		public KeyValueDataEntryFloat()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B6")]
	public class KeyValueDataEntryInt : KeyValueDataEntryTyped<int>
	{
		[Token(Token = "0x600266B")]
		[Address(RVA = "0xDDCB50", Offset = "0xDDCB50", VA = "0xDDCB50")]
		public KeyValueDataEntryInt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B7")]
	public class KeyValueDataEntryString : KeyValueDataEntryTyped<string>
	{
		[Token(Token = "0x600266C")]
		[Address(RVA = "0xDDCB98", Offset = "0xDDCB98", VA = "0xDDCB98")]
		public KeyValueDataEntryString()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B8")]
	public class KeyValueDataEntryVector3 : KeyValueDataEntryTyped<UnityEngine.Vector3>
	{
		[Token(Token = "0x600266D")]
		[Address(RVA = "0xDDCBE0", Offset = "0xDDCBE0", VA = "0xDDCBE0")]
		public KeyValueDataEntryVector3()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006B9")]
	public class KeyValueDataEntryVector2 : KeyValueDataEntryTyped<UnityEngine.Vector2>
	{
		[Token(Token = "0x600266E")]
		[Address(RVA = "0xDDCC28", Offset = "0xDDCC28", VA = "0xDDCC28")]
		public KeyValueDataEntryVector2()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20006BA")]
	public class KeyValueData
	{
		[Token(Token = "0x4002439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private List<KeyValueDataEntryFloat> dataFloat;

		[Token(Token = "0x400243A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<KeyValueDataEntryInt> dataInt;

		[Token(Token = "0x400243B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<KeyValueDataEntryString> dataString;

		[Token(Token = "0x400243C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<KeyValueDataEntryVector3> dataVector3;

		[Token(Token = "0x400243D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private List<KeyValueDataEntryVector2> dataVector2;

		[Token(Token = "0x600266F")]
		[Address(RVA = "0xDDCC70", Offset = "0xDDCC70", VA = "0xDDCC70")]
		public bool GetFloat(string key, ref float value)
		{
			return default(bool);
		}

		[Token(Token = "0x6002670")]
		[Address(RVA = "0xDDCCD4", Offset = "0xDDCCD4", VA = "0xDDCCD4")]
		public bool GetInt(string key, ref int value)
		{
			return default(bool);
		}

		[Token(Token = "0x6002671")]
		[Address(RVA = "0xDDCD38", Offset = "0xDDCD38", VA = "0xDDCD38")]
		public bool GetString(string key, ref string value)
		{
			return default(bool);
		}

		[Token(Token = "0x6002672")]
		[Address(RVA = "0xDDCD9C", Offset = "0xDDCD9C", VA = "0xDDCD9C")]
		public bool GetVector3(string key, ref UnityEngine.Vector3 value)
		{
			return default(bool);
		}

		[Token(Token = "0x6002673")]
		[Address(RVA = "0xDDCE00", Offset = "0xDDCE00", VA = "0xDDCE00")]
		public bool GetVector2(string key, ref UnityEngine.Vector2 value)
		{
			return default(bool);
		}

		[Token(Token = "0x6002674")]
		[Address(RVA = "0xDDCE64", Offset = "0xDDCE64", VA = "0xDDCE64")]
		public void Set(string key, float value)
		{
		}

		[Token(Token = "0x6002675")]
		[Address(RVA = "0xDDCEFC", Offset = "0xDDCEFC", VA = "0xDDCEFC")]
		public void Set(string key, int value)
		{
		}

		[Token(Token = "0x6002676")]
		[Address(RVA = "0xDDCF94", Offset = "0xDDCF94", VA = "0xDDCF94")]
		public void Set(string key, string value)
		{
		}

		[Token(Token = "0x6002677")]
		[Address(RVA = "0xDDCFF8", Offset = "0xDDCFF8", VA = "0xDDCFF8")]
		public void Set(string key, UnityEngine.Vector3 value)
		{
		}

		[Token(Token = "0x6002678")]
		[Address(RVA = "0xDDD0AC", Offset = "0xDDD0AC", VA = "0xDDD0AC")]
		public void Set(string key, UnityEngine.Vector2 value)
		{
		}

		[Token(Token = "0x6002679")]
		private void SetValue<T>(List<T> data, string key, object value) where T : KeyValueDataEntryBase, new()
		{
		}

		[Token(Token = "0x600267A")]
		private bool GetValue<TEntry, TValue>(List<TEntry> data, string key, ref TValue value) where TEntry : KeyValueDataEntryBase
		{
			return default(bool);
		}

		[Token(Token = "0x600267B")]
		[Address(RVA = "0xDDD150", Offset = "0xDDD150", VA = "0xDDD150")]
		public KeyValueData()
		{
		}
	}
	[Token(Token = "0x20006BB")]
	public class MathUtils
	{
		[Token(Token = "0x400243E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int INVALID_LOCATION;

		[Token(Token = "0x600267C")]
		[Address(RVA = "0xDDD2DC", Offset = "0xDDD2DC", VA = "0xDDD2DC")]
		public static Rectangle Copy(Rectangle other)
		{
			return default(Rectangle);
		}

		[Token(Token = "0x600267D")]
		[Address(RVA = "0xDDD2FC", Offset = "0xDDD2FC", VA = "0xDDD2FC")]
		public static UnityEngine.Vector3 Divide(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600267E")]
		[Address(RVA = "0xDDD30C", Offset = "0xDDD30C", VA = "0xDDD30C")]
		public static UnityEngine.Vector3 ToVector3(IntVector v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600267F")]
		[Address(RVA = "0xDDD320", Offset = "0xDDD320", VA = "0xDDD320")]
		public static IntVector WorldToGrid(UnityEngine.Vector3 WorldCoord, UnityEngine.Vector3 GridCellSize)
		{
			return default(IntVector);
		}

		[Token(Token = "0x6002680")]
		[Address(RVA = "0xDDD524", Offset = "0xDDD524", VA = "0xDDD524")]
		public static UnityEngine.Vector3 GridToWorld(UnityEngine.Vector3 GridCellSize, IntVector v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002681")]
		[Address(RVA = "0xDDD5B8", Offset = "0xDDD5B8", VA = "0xDDD5B8")]
		public static UnityEngine.Vector3 GridToWorld(UnityEngine.Vector3 GridCellSize, UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002682")]
		[Address(RVA = "0xDDD3B0", Offset = "0xDDD3B0", VA = "0xDDD3B0")]
		public static IntVector ToIntVector(UnityEngine.Vector3 v)
		{
			return default(IntVector);
		}

		[Token(Token = "0x6002683")]
		[Address(RVA = "0xDDD5C8", Offset = "0xDDD5C8", VA = "0xDDD5C8")]
		public static UnityEngine.Vector3 V3FloorToInt(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002684")]
		[Address(RVA = "0xDDD73C", Offset = "0xDDD73C", VA = "0xDDD73C")]
		public static UnityEngine.Vector3 V3RoundToInt(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002685")]
		[Address(RVA = "0xDDD988", Offset = "0xDDD988", VA = "0xDDD988")]
		public static IntVector RoundToIntVector(UnityEngine.Vector3 v)
		{
			return default(IntVector);
		}

		[Token(Token = "0x6002686")]
		[Address(RVA = "0xDDDBD4", Offset = "0xDDDBD4", VA = "0xDDDBD4")]
		public static UnityEngine.Vector3 SnapToGrid(UnityEngine.Vector3 position, UnityEngine.Vector3 gridCellSize)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002687")]
		[Address(RVA = "0xDDDC6C", Offset = "0xDDDC6C", VA = "0xDDDC6C")]
		public static UnityEngine.Vector3 SnapToGrid(UnityEngine.Vector3 position, UnityEngine.Vector3 gridCellSize, bool useRounding)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002688")]
		[Address(RVA = "0xDDE038", Offset = "0xDDE038", VA = "0xDDE038")]
		public static bool Intersects(Rect a, Rect b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002689")]
		[Address(RVA = "0xDDE0FC", Offset = "0xDDE0FC", VA = "0xDDE0FC")]
		public static bool Intersects(Rect outer, GraphLink link)
		{
			return default(bool);
		}

		[Token(Token = "0x600268A")]
		[Address(RVA = "0xDDE304", Offset = "0xDDE304", VA = "0xDDE304")]
		public static UnityEngine.Vector2 ClosestPointOnRect(Rect rect, UnityEngine.Vector2 p)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600268B")]
		[Address(RVA = "0xDDE394", Offset = "0xDDE394", VA = "0xDDE394")]
		public static Rect ExpandRect(Rect bounds, float amount)
		{
			return default(Rect);
		}

		[Token(Token = "0x600268C")]
		[Address(RVA = "0xDDE440", Offset = "0xDDE440", VA = "0xDDE440")]
		public static UnityEngine.Vector2 ClampToRect(UnityEngine.Vector2 position, Rect bounds)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600268D")]
		[Address(RVA = "0xDDE4F8", Offset = "0xDDE4F8", VA = "0xDDE4F8")]
		public static void FlipYZ(ref Bounds bounds)
		{
		}

		[Token(Token = "0x600268E")]
		[Address(RVA = "0xDDE5A4", Offset = "0xDDE5A4", VA = "0xDDE5A4")]
		public static UnityEngine.Vector3 FlipYZ(UnityEngine.Vector3 bounds)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600268F")]
		[Address(RVA = "0xDDE5B4", Offset = "0xDDE5B4", VA = "0xDDE5B4")]
		public static IntVector FlipYZ(IntVector bounds)
		{
			return default(IntVector);
		}

		[Token(Token = "0x6002690")]
		[Address(RVA = "0xDDE5C4", Offset = "0xDDE5C4", VA = "0xDDE5C4")]
		public static void Abs(ref UnityEngine.Vector3 v)
		{
		}

		[Token(Token = "0x6002691")]
		public static void Shuffle<T>(List<T> Array, System.Random Random)
		{
		}

		[Token(Token = "0x6002692")]
		public static void Shuffle<T>(T[] Array, System.Random Random)
		{
		}

		[Token(Token = "0x6002693")]
		[Address(RVA = "0xDDE5E0", Offset = "0xDDE5E0", VA = "0xDDE5E0")]
		public static int[] GetShuffledIndices(int Count, System.Random Random)
		{
			return null;
		}

		[Token(Token = "0x6002694")]
		[Address(RVA = "0xDDE744", Offset = "0xDDE744", VA = "0xDDE744")]
		public static Bounds TransformBounds(Matrix4x4 transform, Bounds bounds)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6002695")]
		[Address(RVA = "0xDDE974", Offset = "0xDDE974", VA = "0xDDE974")]
		public static Bounds TransformBoundsX(Matrix4x4 transform, Bounds localBounds)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6002696")]
		[Address(RVA = "0xDDEB38", Offset = "0xDDEB38", VA = "0xDDEB38")]
		public static bool V3Equals(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002697")]
		[Address(RVA = "0xDDEBD4", Offset = "0xDDEBD4", VA = "0xDDEBD4")]
		public static bool V3Equals(UnityEngine.Vector3 a, UnityEngine.Vector3 b, float threshold)
		{
			return default(bool);
		}

		[Token(Token = "0x6002698")]
		[Address(RVA = "0xDDEC80", Offset = "0xDDEC80", VA = "0xDDEC80")]
		public static byte ToByte(float value01)
		{
			return default(byte);
		}

		[Token(Token = "0x6002699")]
		[Address(RVA = "0xDDED74", Offset = "0xDDED74", VA = "0xDDED74")]
		public MathUtils()
		{
		}
	}
	[Token(Token = "0x20006BC")]
	public class Matrix
	{
		[Token(Token = "0x600269B")]
		[Address(RVA = "0xDD9E94", Offset = "0xDD9E94", VA = "0xDD9E94")]
		public static UnityEngine.Vector3 GetTranslation(ref Matrix4x4 matrix)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x600269C")]
		[Address(RVA = "0xDD9EBC", Offset = "0xDD9EBC", VA = "0xDD9EBC")]
		public static void SetTranslation(ref Matrix4x4 matrix, UnityEngine.Vector3 translate)
		{
		}

		[Token(Token = "0x600269D")]
		[Address(RVA = "0xDDEDCC", Offset = "0xDDEDCC", VA = "0xDDEDCC")]
		public static void SetTransform(out Matrix4x4 transform, UnityEngine.Vector3 position, Quaternion rotation, UnityEngine.Vector3 scale)
		{
		}

		[Token(Token = "0x600269E")]
		[Address(RVA = "0xDDEE18", Offset = "0xDDEE18", VA = "0xDDEE18")]
		public static Quaternion GetRotation(ref Matrix4x4 matrix)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600269F")]
		[Address(RVA = "0xDDEF10", Offset = "0xDDEF10", VA = "0xDDEF10")]
		public static UnityEngine.Vector3 GetScale(ref Matrix4x4 matrix)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x60026A0")]
		[Address(RVA = "0xDDEF18", Offset = "0xDDEF18", VA = "0xDDEF18")]
		public static void DecomposeMatrix(ref Matrix4x4 matrix, out UnityEngine.Vector3 localPosition, out Quaternion localRotation, out UnityEngine.Vector3 localScale)
		{
		}

		[Token(Token = "0x60026A1")]
		[Address(RVA = "0xDDEF68", Offset = "0xDDEF68", VA = "0xDDEF68")]
		public static void SetTransformFromMatrix(Transform transform, ref Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x60026A2")]
		[Address(RVA = "0xDD9DF0", Offset = "0xDD9DF0", VA = "0xDD9DF0")]
		public static Matrix4x4 Copy(Matrix4x4 In)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60026A3")]
		[Address(RVA = "0xDDEFC4", Offset = "0xDDEFC4", VA = "0xDDEFC4")]
		public static Matrix4x4 FromGameTransform(Transform t)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60026A4")]
		[Address(RVA = "0xDDF08C", Offset = "0xDDF08C", VA = "0xDDF08C")]
		public Matrix()
		{
		}
	}
	[Token(Token = "0x20006BD")]
	public class PMRandom
	{
		[Token(Token = "0x400243F")]
		private const int A = 16807;

		[Token(Token = "0x4002440")]
		private const int M = int.MaxValue;

		[Token(Token = "0x4002441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private uint seed;

		[Token(Token = "0x4002442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private System.Random random;

		[Token(Token = "0x17000645")]
		public System.Random UniformRandom
		{
			[Token(Token = "0x60026A5")]
			[Address(RVA = "0xDDF094", Offset = "0xDDF094", VA = "0xDDF094")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60026A6")]
		[Address(RVA = "0xDDF09C", Offset = "0xDDF09C", VA = "0xDDF09C")]
		public PMRandom()
		{
		}

		[Token(Token = "0x60026A7")]
		[Address(RVA = "0xDDF184", Offset = "0xDDF184", VA = "0xDDF184")]
		public PMRandom(uint seed)
		{
		}

		[Token(Token = "0x60026A8")]
		[Address(RVA = "0xDDF110", Offset = "0xDDF110", VA = "0xDDF110")]
		public void Initialize(uint seed)
		{
		}

		[Token(Token = "0x60026A9")]
		[Address(RVA = "0xDDF204", Offset = "0xDDF204", VA = "0xDDF204")]
		public float NextGaussianFloat()
		{
			return default(float);
		}

		[Token(Token = "0x60026AA")]
		[Address(RVA = "0xDDF2BC", Offset = "0xDDF2BC", VA = "0xDDF2BC")]
		public float NextGaussianFloat(float mean, float stdDev)
		{
			return default(float);
		}

		[Token(Token = "0x60026AB")]
		[Address(RVA = "0xDDF2E4", Offset = "0xDDF2E4", VA = "0xDDF2E4")]
		public UnityEngine.Vector2 RandomPointOnCircle()
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60026AC")]
		[Address(RVA = "0xDDF32C", Offset = "0xDDF32C", VA = "0xDDF32C")]
		public float GetNextUniformFloat()
		{
			return default(float);
		}
	}
	[Token(Token = "0x20006BE")]
	public class TexturedMaterialInstances
	{
		[Token(Token = "0x4002443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Shader shader;

		[Token(Token = "0x4002444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<Texture2D, Material> materialsByTexture;

		[Token(Token = "0x60026AD")]
		[Address(RVA = "0xDDF354", Offset = "0xDDF354", VA = "0xDDF354")]
		public TexturedMaterialInstances(Shader shader)
		{
		}

		[Token(Token = "0x60026AE")]
		[Address(RVA = "0xDDF3E4", Offset = "0xDDF3E4", VA = "0xDDF3E4")]
		public Material GetMaterial(Texture2D texture)
		{
			return null;
		}
	}
}
namespace DungeonArchitect.Utils.Noise
{
	[Token(Token = "0x20006BF")]
	public interface INoiseTable<T>
	{
		[Token(Token = "0x60026AF")]
		void Init(int InSize, System.Random random);

		[Token(Token = "0x60026B0")]
		float GetNoise(float u, float v);

		[Token(Token = "0x60026B1")]
		NoiseTableCell<T> GetCell(float x, float y);
	}
	[Token(Token = "0x20006C0")]
	public interface INoisePolicy<T>
	{
		[Token(Token = "0x60026B2")]
		float Sample(float x, float y, INoiseTable<T> NoiseTable);

		[Token(Token = "0x60026B3")]
		T GetRandom(System.Random random);
	}
	[Token(Token = "0x20006C1")]
	public struct NoiseTableCell<T>
	{
		[Token(Token = "0x4002445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T N00;

		[Token(Token = "0x4002446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T N10;

		[Token(Token = "0x4002447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T N01;

		[Token(Token = "0x4002448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T N11;
	}
	[Token(Token = "0x20006C2")]
	public abstract class NoiseTable<T> : INoiseTable<T>
	{
		[Token(Token = "0x4002449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int size;

		[Token(Token = "0x400244A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> data;

		[Token(Token = "0x400244B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected INoisePolicy<T> noisePolicy;

		[Token(Token = "0x60026B4")]
		protected abstract INoisePolicy<T> CreateNoisePolicy();

		[Token(Token = "0x60026B5")]
		public void Init(int size, System.Random random)
		{
		}

		[Token(Token = "0x60026B6")]
		public NoiseTableCell<T> GetCell(float x, float y)
		{
			return default(NoiseTableCell<T>);
		}

		[Token(Token = "0x60026B7")]
		public float GetNoise(float u, float v)
		{
			return default(float);
		}

		[Token(Token = "0x60026B8")]
		public float GetNoiseFBM(UnityEngine.Vector2 p, int octaves)
		{
			return default(float);
		}

		[Token(Token = "0x60026B9")]
		private T GetTableData(int x, int y)
		{
			return (T)null;
		}

		[Token(Token = "0x60026BA")]
		private int GetSize()
		{
			return default(int);
		}

		[Token(Token = "0x60026BB")]
		private int IDX(int x, int y)
		{
			return default(int);
		}

		[Token(Token = "0x60026BC")]
		protected NoiseTable()
		{
		}
	}
	[Token(Token = "0x20006C3")]
	public class GradientNoisePolicy : INoisePolicy<UnityEngine.Vector2>
	{
		[Token(Token = "0x60026BD")]
		[Address(RVA = "0xDDF4E0", Offset = "0xDDF4E0", VA = "0xDDF4E0", Slot = "4")]
		public float Sample(float x, float y, INoiseTable<UnityEngine.Vector2> NoiseTable)
		{
			return default(float);
		}

		[Token(Token = "0x60026BE")]
		[Address(RVA = "0xDDF680", Offset = "0xDDF680", VA = "0xDDF680", Slot = "5")]
		public UnityEngine.Vector2 GetRandom(System.Random random)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60026BF")]
		[Address(RVA = "0xDDF6B8", Offset = "0xDDF6B8", VA = "0xDDF6B8")]
		public GradientNoisePolicy()
		{
		}
	}
	[Token(Token = "0x20006C4")]
	public class GradientNoiseTable : NoiseTable<UnityEngine.Vector2>
	{
		[Token(Token = "0x60026C0")]
		[Address(RVA = "0xDDF6C0", Offset = "0xDDF6C0", VA = "0xDDF6C0", Slot = "7")]
		protected override INoisePolicy<UnityEngine.Vector2> CreateNoisePolicy()
		{
			return null;
		}

		[Token(Token = "0x60026C1")]
		[Address(RVA = "0xDDF71C", Offset = "0xDDF71C", VA = "0xDDF71C")]
		public GradientNoiseTable()
		{
		}
	}
}
namespace DungeonArchitect.UI
{
	[Token(Token = "0x20006C5")]
	public interface UIPlatform
	{
		[Token(Token = "0x17000646")]
		UIDragDrop DragDrop
		{
			[Token(Token = "0x60026C8")]
			get;
		}

		[Token(Token = "0x17000647")]
		double timeSinceStartup
		{
			[Token(Token = "0x60026C9")]
			get;
		}

		[Token(Token = "0x17000648")]
		string clipboardText
		{
			[Token(Token = "0x60026CA")]
			get;
			[Token(Token = "0x60026CB")]
			set;
		}

		[Token(Token = "0x60026C2")]
		void ShowObjectProperty(object obj);

		[Token(Token = "0x60026C3")]
		void ShowObjectProperties(object[] obj);

		[Token(Token = "0x60026C4")]
		string GetAssetPath(object obj);

		[Token(Token = "0x60026C5")]
		void MarkAssetDirty(object obj);

		[Token(Token = "0x60026C6")]
		void AddObjectToAsset(UnityEngine.Object objectToAdd, UnityEngine.Object assetObject);

		[Token(Token = "0x60026C7")]
		IContextMenu CreateContextMenu();
	}
	[Token(Token = "0x20006C6")]
	public interface IContextMenu
	{
		[Token(Token = "0x60026CC")]
		void AddItem(string path, ContextMenuFunction func);

		[Token(Token = "0x60026CD")]
		void AddItem(string path, ContextMenuFunctionUserData func, object userData);

		[Token(Token = "0x60026CE")]
		void AddSeparator(string path);

		[Token(Token = "0x60026CF")]
		void Show();
	}
	[Token(Token = "0x20006C7")]
	public enum UIDragDropVisualMode
	{
		[Token(Token = "0x400244D")]
		None,
		[Token(Token = "0x400244E")]
		Copy,
		[Token(Token = "0x400244F")]
		Generic,
		[Token(Token = "0x4002450")]
		Move,
		[Token(Token = "0x4002451")]
		Reject
	}
	[Token(Token = "0x20006C8")]
	public interface UIDragDrop
	{
		[Token(Token = "0x60026D0")]
		void PrepareStartDrag();

		[Token(Token = "0x60026D1")]
		void StartDrag(string title);

		[Token(Token = "0x60026D2")]
		void SetVisualMode(UIDragDropVisualMode visualMode);

		[Token(Token = "0x60026D3")]
		void AcceptDrag();
	}
	[Token(Token = "0x20006C9")]
	public delegate void ContextMenuFunction();
	[Token(Token = "0x20006CA")]
	public delegate void ContextMenuFunctionUserData(object userData);
	[Token(Token = "0x20006CB")]
	public class NullPlatform : UIPlatform
	{
		[Token(Token = "0x17000649")]
		public UIDragDrop DragDrop
		{
			[Token(Token = "0x60026E2")]
			[Address(RVA = "0xDDF9D4", Offset = "0xDDF9D4", VA = "0xDDF9D4", Slot = "10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700064A")]
		public double timeSinceStartup
		{
			[Token(Token = "0x60026E3")]
			[Address(RVA = "0xDDF9DC", Offset = "0xDDF9DC", VA = "0xDDF9DC", Slot = "11")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700064B")]
		public string clipboardText
		{
			[Token(Token = "0x60026E4")]
			[Address(RVA = "0xDDF9E4", Offset = "0xDDF9E4", VA = "0xDDF9E4", Slot = "12")]
			get
			{
				return null;
			}
			[Token(Token = "0x60026E5")]
			[Address(RVA = "0xDDFA24", Offset = "0xDDFA24", VA = "0xDDFA24", Slot = "13")]
			set
			{
			}
		}

		[Token(Token = "0x60026DC")]
		[Address(RVA = "0xDDF97C", Offset = "0xDDF97C", VA = "0xDDF97C", Slot = "4")]
		public void ShowObjectProperty(object obj)
		{
		}

		[Token(Token = "0x60026DD")]
		[Address(RVA = "0xDDF980", Offset = "0xDDF980", VA = "0xDDF980", Slot = "5")]
		public void ShowObjectProperties(object[] obj)
		{
		}

		[Token(Token = "0x60026DE")]
		[Address(RVA = "0xDDF984", Offset = "0xDDF984", VA = "0xDDF984", Slot = "6")]
		public string GetAssetPath(object obj)
		{
			return null;
		}

		[Token(Token = "0x60026DF")]
		[Address(RVA = "0xDDF9C4", Offset = "0xDDF9C4", VA = "0xDDF9C4", Slot = "7")]
		public void MarkAssetDirty(object obj)
		{
		}

		[Token(Token = "0x60026E0")]
		[Address(RVA = "0xDDF9C8", Offset = "0xDDF9C8", VA = "0xDDF9C8", Slot = "8")]
		public void AddObjectToAsset(UnityEngine.Object objectToAdd, UnityEngine.Object assetObject)
		{
		}

		[Token(Token = "0x60026E1")]
		[Address(RVA = "0xDDF9CC", Offset = "0xDDF9CC", VA = "0xDDF9CC", Slot = "9")]
		public IContextMenu CreateContextMenu()
		{
			return null;
		}

		[Token(Token = "0x60026E6")]
		[Address(RVA = "0xDDFA28", Offset = "0xDDFA28", VA = "0xDDFA28")]
		public NullPlatform()
		{
		}
	}
	[Token(Token = "0x20006CC")]
	public interface UIRenderer
	{
		[Token(Token = "0x1700064C")]
		Color color
		{
			[Token(Token = "0x6002705")]
			get;
			[Token(Token = "0x6002706")]
			set;
		}

		[Token(Token = "0x1700064D")]
		Color backgroundColor
		{
			[Token(Token = "0x6002707")]
			get;
			[Token(Token = "0x6002708")]
			set;
		}

		[Token(Token = "0x1700064E")]
		UIStyleManager StyleManager
		{
			[Token(Token = "0x6002709")]
			get;
		}

		[Token(Token = "0x60026E7")]
		void BeginGroup(Rect bounds);

		[Token(Token = "0x60026E8")]
		void EndGroup();

		[Token(Token = "0x60026E9")]
		bool Button(Rect bounds, GUIContent content, GUIStyle style);

		[Token(Token = "0x60026EA")]
		bool Button(Rect bounds, string text, GUIStyle style);

		[Token(Token = "0x60026EB")]
		bool Button(Rect bounds, string text);

		[Token(Token = "0x60026EC")]
		void Box(Rect bounds, string text);

		[Token(Token = "0x60026ED")]
		void Box(Rect bounds, GUIContent content);

		[Token(Token = "0x60026EE")]
		void Box(Rect bounds, GUIContent content, GUIStyle style);

		[Token(Token = "0x60026EF")]
		void Label(Rect bounds, string text, GUIStyle style);

		[Token(Token = "0x60026F0")]
		void Label(Rect bounds, GUIContent content, GUIStyle style);

		[Token(Token = "0x60026F1")]
		UnityEngine.Vector2 BeginScrollView(Rect bounds, UnityEngine.Vector2 scrollPosition, Rect viewRect);

		[Token(Token = "0x60026F2")]
		void DrawTexture(Rect bounds, Texture texture);

		[Token(Token = "0x60026F3")]
		void DrawTexture(Rect bounds, Texture texture, ScaleMode scaleMode, bool alphaBlend, Color color);

		[Token(Token = "0x60026F4")]
		void EndScrollView(bool handleScrollWheel);

		[Token(Token = "0x60026F5")]
		void BeginGUI();

		[Token(Token = "0x60026F6")]
		void EndGUI();

		[Token(Token = "0x60026F7")]
		void DrawLine(UnityEngine.Vector3 v0, UnityEngine.Vector3 v1);

		[Token(Token = "0x60026F8")]
		void DrawLine(Color color, UnityEngine.Vector3 v0, UnityEngine.Vector3 v1);

		[Token(Token = "0x60026F9")]
		void DrawPolyLine(params UnityEngine.Vector3[] points);

		[Token(Token = "0x60026FA")]
		void DrawPolyLine(Color color, params UnityEngine.Vector3[] points);

		[Token(Token = "0x60026FB")]
		void DrawAAPolyLine(float thickness, params UnityEngine.Vector3[] points);

		[Token(Token = "0x60026FC")]
		void DrawAAPolyLine(float thickness, Color color, params UnityEngine.Vector3[] points);

		[Token(Token = "0x60026FD")]
		void DrawAAPolyLine(Texture2D texture, float thickness, params UnityEngine.Vector3[] points);

		[Token(Token = "0x60026FE")]
		void DrawAAPolyLine(Texture2D texture, float thickness, Color color, params UnityEngine.Vector3[] points);

		[Token(Token = "0x60026FF")]
		void DrawBezier(UnityEngine.Vector3 startPos, UnityEngine.Vector3 endPos, UnityEngine.Vector3 startTangent, UnityEngine.Vector3 endTangent, Color lineColor, Texture2D texture, float lineThickness);

		[Token(Token = "0x6002700")]
		void DrawAAConvexPolygon(params UnityEngine.Vector3[] points);

		[Token(Token = "0x6002701")]
		void DrawAAConvexPolygon(Color color, params UnityEngine.Vector3[] points);

		[Token(Token = "0x6002702")]
		void DrawRect(Rect bounds, Color color);

		[Token(Token = "0x6002703")]
		void AddCursorRect(Rect bounds, UICursorType cursorType);

		[Token(Token = "0x6002704")]
		object GetResource<T>(string path);
	}
	[Token(Token = "0x20006CD")]
	public interface UIStyleManager
	{
		[Token(Token = "0x600270A")]
		GUIStyle GetToolbarButtonStyle();

		[Token(Token = "0x600270B")]
		GUIStyle GetButtonStyle();

		[Token(Token = "0x600270C")]
		GUIStyle GetBoxStyle();

		[Token(Token = "0x600270D")]
		GUIStyle GetLabelStyle();

		[Token(Token = "0x600270E")]
		GUIStyle GetBoldLabelStyle();

		[Token(Token = "0x600270F")]
		Font GetFontStandard();

		[Token(Token = "0x6002710")]
		Font GetFontBold();

		[Token(Token = "0x6002711")]
		Font GetFontMini();
	}
	[Token(Token = "0x20006CE")]
	public delegate void OnWidgetFocus(IWidget widget);
	[Token(Token = "0x20006CF")]
	public delegate void OnWidgetLostFocus(IWidget widget);
	[Token(Token = "0x20006D0")]
	public delegate void OnDragEvent();
	[Token(Token = "0x20006D1")]
	public abstract class UISystem
	{
		[Token(Token = "0x1700064F")]
		public IWidget FocusedWidget
		{
			[Token(Token = "0x600271E")]
			[Address(RVA = "0xDDFD88", Offset = "0xDDFD88", VA = "0xDDFD88")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600271F")]
			[Address(RVA = "0xDDFD90", Offset = "0xDDFD90", VA = "0xDDFD90")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000650")]
		public bool IsDragDrop
		{
			[Token(Token = "0x6002720")]
			[Address(RVA = "0xDDFD98", Offset = "0xDDFD98", VA = "0xDDFD98")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002721")]
			[Address(RVA = "0xDDFDA0", Offset = "0xDDFDA0", VA = "0xDDFDA0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000651")]
		public IWidget Layout
		{
			[Token(Token = "0x6002722")]
			[Address(RVA = "0xDDFDAC", Offset = "0xDDFDAC", VA = "0xDDFDAC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002723")]
			[Address(RVA = "0xDDFDB4", Offset = "0xDDFDB4", VA = "0xDDFDB4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000652")]
		public UIPlatform Platform
		{
			[Token(Token = "0x6002724")]
			[Address(RVA = "0xDDFDBC", Offset = "0xDDFDBC", VA = "0xDDFDBC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002725")]
			[Address(RVA = "0xDDFDC4", Offset = "0xDDFDC4", VA = "0xDDFDC4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000653")]
		public UIStyleManager StyleManager
		{
			[Token(Token = "0x6002726")]
			[Address(RVA = "0xDDFDCC", Offset = "0xDDFDCC", VA = "0xDDFDCC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002727")]
			[Address(RVA = "0xDDFDD4", Offset = "0xDDFDD4", VA = "0xDDFDD4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000654")]
		public UIUndoSystem Undo
		{
			[Token(Token = "0x6002728")]
			[Address(RVA = "0xDDFDDC", Offset = "0xDDFDDC", VA = "0xDDFDDC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002729")]
			[Address(RVA = "0xDDFDE4", Offset = "0xDDFDE4", VA = "0xDDFDE4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1400001A")]
		public event OnWidgetFocus WidgetFocused
		{
			[Token(Token = "0x6002734")]
			[Address(RVA = "0xDE01B0", Offset = "0xDE01B0", VA = "0xDE01B0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002735")]
			[Address(RVA = "0xDE024C", Offset = "0xDE024C", VA = "0xDE024C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001B")]
		public event OnWidgetLostFocus WidgetLostFocus
		{
			[Token(Token = "0x6002736")]
			[Address(RVA = "0xDE02E8", Offset = "0xDE02E8", VA = "0xDE02E8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002737")]
			[Address(RVA = "0xDE0384", Offset = "0xDE0384", VA = "0xDE0384")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001C")]
		public event OnDragEvent DragStart
		{
			[Token(Token = "0x6002738")]
			[Address(RVA = "0xDE0420", Offset = "0xDE0420", VA = "0xDE0420")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002739")]
			[Address(RVA = "0xDE04BC", Offset = "0xDE04BC", VA = "0xDE04BC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001D")]
		public event OnDragEvent DragEnd
		{
			[Token(Token = "0x600273A")]
			[Address(RVA = "0xDE0558", Offset = "0xDE0558", VA = "0xDE0558")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600273B")]
			[Address(RVA = "0xDE05F4", Offset = "0xDE05F4", VA = "0xDE05F4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600272A")]
		[Address(RVA = "0xDDFDEC", Offset = "0xDDFDEC", VA = "0xDDFDEC")]
		public UISystem()
		{
		}

		[Token(Token = "0x600272B")]
		protected abstract UIPlatform CreatePlatformInstance();

		[Token(Token = "0x600272C")]
		protected abstract UIStyleManager CreateStyleManagerInstance();

		[Token(Token = "0x600272D")]
		protected abstract UIUndoSystem CreateUndoSystemInstance();

		[Token(Token = "0x600272E")]
		[Address(RVA = "0xDDFE9C", Offset = "0xDDFE9C", VA = "0xDDFE9C")]
		public void Draw(UIRenderer uiRenderer)
		{
		}

		[Token(Token = "0x600272F")]
		[Address(RVA = "0xDDFF54", Offset = "0xDDFF54", VA = "0xDDFF54")]
		public void Update(Rect bounds)
		{
		}

		[Token(Token = "0x6002730")]
		[Address(RVA = "0xDE0038", Offset = "0xDE0038", VA = "0xDE0038")]
		public void SetLayout(IWidget layout)
		{
		}

		[Token(Token = "0x6002731")]
		[Address(RVA = "0xDE0040", Offset = "0xDE0040", VA = "0xDE0040")]
		public void ClearLayout()
		{
		}

		[Token(Token = "0x6002732")]
		[Address(RVA = "0xDE009C", Offset = "0xDE009C", VA = "0xDE009C")]
		public void RequestFocus(IWidget widget)
		{
		}

		[Token(Token = "0x6002733")]
		[Address(RVA = "0xDE0168", Offset = "0xDE0168", VA = "0xDE0168")]
		public void SetDragging(bool dragging)
		{
		}
	}
	[Token(Token = "0x20006D2")]
	public enum UICursorType
	{
		[Token(Token = "0x400245D")]
		Normal,
		[Token(Token = "0x400245E")]
		ResizeHorizontal,
		[Token(Token = "0x400245F")]
		ResizeVertical,
		[Token(Token = "0x4002460")]
		Link
	}
	[Token(Token = "0x20006D3")]
	public delegate void UIUndoRedoDelegate(UISystem uiSystem);
	[Token(Token = "0x20006D4")]
	public interface UIUndoSystem
	{
		[Token(Token = "0x1400001E")]
		event UIUndoRedoDelegate UndoRedoPerformed;

		[Token(Token = "0x6002740")]
		void RecordObject(object obj, string name);

		[Token(Token = "0x6002741")]
		void RegisterCreatedObjectUndo(object obj, string name);

		[Token(Token = "0x6002742")]
		void DestroyObjectImmediate(object obj);

		[Token(Token = "0x6002743")]
		void RegisterCompleteObjectUndo(object obj, string name);
	}
	[Token(Token = "0x20006D5")]
	public interface IDeferredUICommand
	{
		[Token(Token = "0x6002746")]
		void Execute(UISystem uiSystem);
	}
	[Token(Token = "0x20006D6")]
	public abstract class DeferredUICommandBase : IDeferredUICommand
	{
		[Token(Token = "0x6002747")]
		public abstract void Execute(UISystem uiSystem);

		[Token(Token = "0x6002748")]
		[Address(RVA = "0xDE07D0", Offset = "0xDE07D0", VA = "0xDE07D0")]
		protected DeferredUICommandBase()
		{
		}
	}
	[Token(Token = "0x20006D7")]
	public class EditorCommand_InitializeGraphCameras : DeferredUICommandBase
	{
		[Token(Token = "0x4002461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IWidget host;

		[Token(Token = "0x6002749")]
		[Address(RVA = "0xDE07D8", Offset = "0xDE07D8", VA = "0xDE07D8")]
		public EditorCommand_InitializeGraphCameras(IWidget host)
		{
		}

		[Token(Token = "0x600274A")]
		[Address(RVA = "0xDE0800", Offset = "0xDE0800", VA = "0xDE0800", Slot = "5")]
		public override void Execute(UISystem uiSystem)
		{
		}
	}
	[Token(Token = "0x20006D8")]
	public class EditorCommand_FocusOnGraphNode : DeferredUICommandBase
	{
		[Token(Token = "0x4002462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GraphEditor graphEditor;

		[Token(Token = "0x4002463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphNode graphNode;

		[Token(Token = "0x600274B")]
		[Address(RVA = "0xDE0A38", Offset = "0xDE0A38", VA = "0xDE0A38")]
		public EditorCommand_FocusOnGraphNode(GraphEditor graphEditor, GraphNode graphNode)
		{
		}

		[Token(Token = "0x600274C")]
		[Address(RVA = "0xDE0A64", Offset = "0xDE0A64", VA = "0xDE0A64", Slot = "5")]
		public override void Execute(UISystem uiSystem)
		{
		}
	}
	[Token(Token = "0x20006D9")]
	public class EditorCommand_SetBorderContent : DeferredUICommandBase
	{
		[Token(Token = "0x4002464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BorderWidget border;

		[Token(Token = "0x4002465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IWidget content;

		[Token(Token = "0x600274D")]
		[Address(RVA = "0xDE0DB8", Offset = "0xDE0DB8", VA = "0xDE0DB8")]
		public EditorCommand_SetBorderContent(BorderWidget border, IWidget content)
		{
		}

		[Token(Token = "0x600274E")]
		[Address(RVA = "0xDE0DE4", Offset = "0xDE0DE4", VA = "0xDE0DE4", Slot = "5")]
		public override void Execute(UISystem uiSystem)
		{
		}
	}
	[Token(Token = "0x20006DA")]
	public class EditorCommand_UpdateWidget : DeferredUICommandBase
	{
		[Token(Token = "0x4002466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IWidget content;

		[Token(Token = "0x4002467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rect bounds;

		[Token(Token = "0x600274F")]
		[Address(RVA = "0xDE0E0C", Offset = "0xDE0E0C", VA = "0xDE0E0C")]
		public EditorCommand_UpdateWidget(IWidget content, Rect bounds)
		{
		}

		[Token(Token = "0x6002750")]
		[Address(RVA = "0xDE0E5C", Offset = "0xDE0E5C", VA = "0xDE0E5C", Slot = "5")]
		public override void Execute(UISystem uiSystem)
		{
		}
	}
	[Token(Token = "0x20006DB")]
	public class GUIState
	{
		[Token(Token = "0x4002468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Color color;

		[Token(Token = "0x4002469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Color backgroundColor;

		[Token(Token = "0x400246A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UIRenderer renderer;

		[Token(Token = "0x6002751")]
		[Address(RVA = "0xDE0F2C", Offset = "0xDE0F2C", VA = "0xDE0F2C")]
		public GUIState(UIRenderer renderer)
		{
		}

		[Token(Token = "0x6002752")]
		[Address(RVA = "0xDE0F58", Offset = "0xDE0F58", VA = "0xDE0F58")]
		public void Save()
		{
		}

		[Token(Token = "0x6002753")]
		[Address(RVA = "0xDE1074", Offset = "0xDE1074", VA = "0xDE1074")]
		public void Restore()
		{
		}
	}
	[Token(Token = "0x20006DC")]
	public class UIResourceLookup
	{
		[Token(Token = "0x400246B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string TEXTURE_GO_NODE_SELECTION;

		[Token(Token = "0x400246C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string TEXTURE_GO_NODE_FRAME;

		[Token(Token = "0x400246D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string TEXTURE_GO_NODE_BG;

		[Token(Token = "0x400246E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string TEXTURE_PIN_GLOW;

		[Token(Token = "0x400246F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string TEXTURE_MULTI_GO_NODE_FRAME;

		[Token(Token = "0x4002470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string TEXTURE_MARKER_NODE_SELECTION;

		[Token(Token = "0x4002471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly string TEXTURE_MARKER_NODE_FRAME;

		[Token(Token = "0x4002472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly string TEXTURE_MARKER_EMITTER_NODE_FRAME;

		[Token(Token = "0x4002473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly string TEXTURE_MARKER_NODE_BG;

		[Token(Token = "0x4002474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly string TEXTURE_CURSOR_RING;

		[Token(Token = "0x4002475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly string TEXTURE_CURSOR_RING_SOLID;

		[Token(Token = "0x4002476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly string TEXTURE_REFRESH_16;

		[Token(Token = "0x4002477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly string GUI_STYLE_BANNER;

		[Token(Token = "0x4002478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly string ICON_CLOSE_16x;

		[Token(Token = "0x4002479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly string ICON_PLUS_16x;

		[Token(Token = "0x400247A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly string ICON_MOVEUP_16x;

		[Token(Token = "0x400247B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly string ICON_MOVEDOWN_16x;

		[Token(Token = "0x400247C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static readonly string ICON_ZOOMFIT_16x;

		[Token(Token = "0x400247D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public static readonly string ICON_ERROR_16x;

		[Token(Token = "0x400247E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public static readonly string ICON_WARNING_16x;

		[Token(Token = "0x400247F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public static readonly string ICON_INFO_16x;

		[Token(Token = "0x4002480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static readonly string ICON_SUCCESS_16x;

		[Token(Token = "0x4002481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public static readonly string ICON_WHITE_16x;

		[Token(Token = "0x4002482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public static readonly string ICON_PLAY_16x;

		[Token(Token = "0x4002483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public static readonly string ICON_SETTINGS_16x;

		[Token(Token = "0x4002484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public static readonly string SKIN_TOOLBAR_BUTTONS;

		[Token(Token = "0x6002754")]
		[Address(RVA = "0xDE11D0", Offset = "0xDE11D0", VA = "0xDE11D0")]
		public UIResourceLookup()
		{
		}
	}
}
namespace DungeonArchitect.UI.Widgets
{
	[Token(Token = "0x20006DD")]
	public class WidgetClickEvent
	{
		[Token(Token = "0x4002485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Event e;

		[Token(Token = "0x4002486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UISystem uiSystem;

		[Token(Token = "0x4002487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public object userdata;

		[Token(Token = "0x6002756")]
		[Address(RVA = "0xDE15A4", Offset = "0xDE15A4", VA = "0xDE15A4")]
		public WidgetClickEvent()
		{
		}
	}
	[Token(Token = "0x20006DE")]
	public delegate void OnWidgetClicked(WidgetClickEvent clickEvent);
	[Token(Token = "0x20006DF")]
	public class BorderWidget : WidgetBase
	{
		[Token(Token = "0x4002488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IWidget Content;

		[Token(Token = "0x4002489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float paddingLeft;

		[Token(Token = "0x400248A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float paddingTop;

		[Token(Token = "0x400248B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float paddingRight;

		[Token(Token = "0x400248C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float paddingBottom;

		[Token(Token = "0x400248D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Color color;

		[Token(Token = "0x400248E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Color borderColor;

		[Token(Token = "0x400248F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string title;

		[Token(Token = "0x4002490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int titleFontSize;

		[Token(Token = "0x4002491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Color titleColor;

		[Token(Token = "0x4002492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private UnityEngine.Vector2 titleOffset;

		[Token(Token = "0x4002493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool drawOutline;

		[Token(Token = "0x4002494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private IWidget titleWidget;

		[Token(Token = "0x4002495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Func<string> TitleGetter;

		[Token(Token = "0x600275B")]
		[Address(RVA = "0xDE16EC", Offset = "0xDE16EC", VA = "0xDE16EC")]
		public BorderWidget()
		{
		}

		[Token(Token = "0x600275C")]
		[Address(RVA = "0xDE17F0", Offset = "0xDE17F0", VA = "0xDE17F0")]
		public BorderWidget(IWidget content)
		{
		}

		[Token(Token = "0x600275D")]
		[Address(RVA = "0xDE0E04", Offset = "0xDE0E04", VA = "0xDE0E04")]
		public BorderWidget SetContent(IWidget content)
		{
			return null;
		}

		[Token(Token = "0x600275E")]
		[Address(RVA = "0xDE18A0", Offset = "0xDE18A0", VA = "0xDE18A0")]
		public BorderWidget SetPadding(float left, float top, float right, float bottom)
		{
			return null;
		}

		[Token(Token = "0x600275F")]
		[Address(RVA = "0xDE18AC", Offset = "0xDE18AC", VA = "0xDE18AC")]
		public BorderWidget SetColor(Color color)
		{
			return null;
		}

		[Token(Token = "0x6002760")]
		[Address(RVA = "0xDE18B8", Offset = "0xDE18B8", VA = "0xDE18B8")]
		public BorderWidget SetBorderColor(Color borderColor)
		{
			return null;
		}

		[Token(Token = "0x6002761")]
		[Address(RVA = "0xDE18C4", Offset = "0xDE18C4", VA = "0xDE18C4")]
		public BorderWidget SetTransparent()
		{
			return null;
		}

		[Token(Token = "0x6002762")]
		[Address(RVA = "0xDE18D0", Offset = "0xDE18D0", VA = "0xDE18D0")]
		public BorderWidget SetTitle(string title)
		{
			return null;
		}

		[Token(Token = "0x6002763")]
		[Address(RVA = "0xDE18D8", Offset = "0xDE18D8", VA = "0xDE18D8")]
		public BorderWidget SetTitleGetter(Func<string> getter)
		{
			return null;
		}

		[Token(Token = "0x6002764")]
		[Address(RVA = "0xDE1964", Offset = "0xDE1964", VA = "0xDE1964")]
		public BorderWidget SetTitleFontSize(int size)
		{
			return null;
		}

		[Token(Token = "0x6002765")]
		[Address(RVA = "0xDE196C", Offset = "0xDE196C", VA = "0xDE196C")]
		public BorderWidget SetTitleColor(Color color)
		{
			return null;
		}

		[Token(Token = "0x6002766")]
		[Address(RVA = "0xDE1978", Offset = "0xDE1978", VA = "0xDE1978")]
		public BorderWidget SetTitleOffset(UnityEngine.Vector2 offset)
		{
			return null;
		}

		[Token(Token = "0x6002767")]
		[Address(RVA = "0xDE1980", Offset = "0xDE1980", VA = "0xDE1980")]
		public BorderWidget SetTitleWidget(IWidget widget)
		{
			return null;
		}

		[Token(Token = "0x6002768")]
		[Address(RVA = "0xDE1988", Offset = "0xDE1988", VA = "0xDE1988")]
		public BorderWidget SetDrawOutline(bool drawOutline)
		{
			return null;
		}

		[Token(Token = "0x6002769")]
		[Address(RVA = "0xDE1994", Offset = "0xDE1994", VA = "0xDE1994", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x600276A")]
		[Address(RVA = "0xDE1C38", Offset = "0xDE1C38", VA = "0xDE1C38", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x600276B")]
		[Address(RVA = "0xDE233C", Offset = "0xDE233C", VA = "0xDE233C", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x600276C")]
		[Address(RVA = "0xDE2344", Offset = "0xDE2344", VA = "0xDE2344", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x600276D")]
		[Address(RVA = "0xDE23D8", Offset = "0xDE23D8", VA = "0xDE23D8", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}
	}
	[Token(Token = "0x20006E0")]
	public class ButtonWidget : WidgetBase
	{
		[Token(Token = "0x20006E1")]
		public delegate void OnButtonPressed(UISystem uiSystem);

		[Token(Token = "0x4002496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GUIContent content;

		[Token(Token = "0x4002497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color color;

		[Token(Token = "0x1400001F")]
		public event OnButtonPressed ButtonPressed
		{
			[Token(Token = "0x600276E")]
			[Address(RVA = "0xDE24D0", Offset = "0xDE24D0", VA = "0xDE24D0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600276F")]
			[Address(RVA = "0xDE256C", Offset = "0xDE256C", VA = "0xDE256C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002770")]
		[Address(RVA = "0xDE2608", Offset = "0xDE2608", VA = "0xDE2608")]
		public ButtonWidget(GUIContent content)
		{
		}

		[Token(Token = "0x6002771")]
		[Address(RVA = "0xDE2638", Offset = "0xDE2638", VA = "0xDE2638")]
		public ButtonWidget SetColor(Color color)
		{
			return null;
		}

		[Token(Token = "0x6002772")]
		[Address(RVA = "0xDE2644", Offset = "0xDE2644", VA = "0xDE2644", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}
	}
	[Token(Token = "0x20006E2")]
	public enum ImageWidgetDrawMode
	{
		[Token(Token = "0x400249A")]
		Streach,
		[Token(Token = "0x400249B")]
		Fit,
		[Token(Token = "0x400249C")]
		Fill,
		[Token(Token = "0x400249D")]
		Fixed
	}
	[Token(Token = "0x20006E3")]
	public class ImageWidget : WidgetBase
	{
		[Token(Token = "0x400249E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Texture2D texture;

		[Token(Token = "0x400249F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ImageWidgetDrawMode drawMode;

		[Token(Token = "0x40024A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Color tint;

		[Token(Token = "0x6002777")]
		[Address(RVA = "0xDE2A54", Offset = "0xDE2A54", VA = "0xDE2A54")]
		public ImageWidget()
		{
		}

		[Token(Token = "0x6002778")]
		[Address(RVA = "0xDE2A60", Offset = "0xDE2A60", VA = "0xDE2A60")]
		public ImageWidget(Texture2D texture)
		{
		}

		[Token(Token = "0x6002779")]
		[Address(RVA = "0xDE2A8C", Offset = "0xDE2A8C", VA = "0xDE2A8C")]
		public ImageWidget SetImage(Texture2D texture)
		{
			return null;
		}

		[Token(Token = "0x600277A")]
		[Address(RVA = "0xDE2A94", Offset = "0xDE2A94", VA = "0xDE2A94")]
		public ImageWidget SetDrawMode(ImageWidgetDrawMode drawMode)
		{
			return null;
		}

		[Token(Token = "0x600277B")]
		[Address(RVA = "0xDE2A9C", Offset = "0xDE2A9C", VA = "0xDE2A9C")]
		public ImageWidget SetTint(Color tint)
		{
			return null;
		}

		[Token(Token = "0x600277C")]
		[Address(RVA = "0xDE2AA8", Offset = "0xDE2AA8", VA = "0xDE2AA8")]
		private UnityEngine.Vector2 CalculateFitSize(UnityEngine.Vector2 size)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600277D")]
		[Address(RVA = "0xDE2B98", Offset = "0xDE2B98", VA = "0xDE2B98")]
		private UnityEngine.Vector2 CalculateFillSize(UnityEngine.Vector2 size)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600277E")]
		[Address(RVA = "0xDE2CA4", Offset = "0xDE2CA4", VA = "0xDE2CA4", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600277F")]
		[Address(RVA = "0xDE2DA4", Offset = "0xDE2DA4", VA = "0xDE2DA4", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}
	}
	[Token(Token = "0x20006E4")]
	public class LabelWidget : WidgetBase
	{
		[Token(Token = "0x40024A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GUIStyle style;

		[Token(Token = "0x17000655")]
		public string Text
		{
			[Token(Token = "0x6002780")]
			[Address(RVA = "0xDE30E8", Offset = "0xDE30E8", VA = "0xDE30E8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002781")]
			[Address(RVA = "0xDE30F0", Offset = "0xDE30F0", VA = "0xDE30F0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000656")]
		public Color Color
		{
			[Token(Token = "0x6002782")]
			[Address(RVA = "0xDE30F8", Offset = "0xDE30F8", VA = "0xDE30F8")]
			[CompilerGenerated]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6002783")]
			[Address(RVA = "0xDE3104", Offset = "0xDE3104", VA = "0xDE3104")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000657")]
		public int FontSize
		{
			[Token(Token = "0x6002784")]
			[Address(RVA = "0xDE3110", Offset = "0xDE3110", VA = "0xDE3110")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002785")]
			[Address(RVA = "0xDE3118", Offset = "0xDE3118", VA = "0xDE3118")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000658")]
		public bool WordWrap
		{
			[Token(Token = "0x6002786")]
			[Address(RVA = "0xDE3120", Offset = "0xDE3120", VA = "0xDE3120")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002787")]
			[Address(RVA = "0xDE3128", Offset = "0xDE3128", VA = "0xDE3128")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000659")]
		public TextAnchor TextAlign
		{
			[Token(Token = "0x6002788")]
			[Address(RVA = "0xDE3134", Offset = "0xDE3134", VA = "0xDE3134")]
			[CompilerGenerated]
			get
			{
				return default(TextAnchor);
			}
			[Token(Token = "0x6002789")]
			[Address(RVA = "0xDE313C", Offset = "0xDE313C", VA = "0xDE313C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600278A")]
		[Address(RVA = "0xDE3144", Offset = "0xDE3144", VA = "0xDE3144")]
		public LabelWidget(string text)
		{
		}

		[Token(Token = "0x600278B")]
		[Address(RVA = "0xDE317C", Offset = "0xDE317C", VA = "0xDE317C")]
		public LabelWidget SetColor(Color color)
		{
			return null;
		}

		[Token(Token = "0x600278C")]
		[Address(RVA = "0xDE318C", Offset = "0xDE318C", VA = "0xDE318C")]
		public LabelWidget SetFontSize(int size)
		{
			return null;
		}

		[Token(Token = "0x600278D")]
		[Address(RVA = "0xDE3198", Offset = "0xDE3198", VA = "0xDE3198")]
		public LabelWidget SetTextAlign(TextAnchor align)
		{
			return null;
		}

		[Token(Token = "0x600278E")]
		[Address(RVA = "0xDE31A4", Offset = "0xDE31A4", VA = "0xDE31A4")]
		public LabelWidget SetWordWrap(bool wordWrap)
		{
			return null;
		}

		[Token(Token = "0x600278F")]
		[Address(RVA = "0xDE31B4", Offset = "0xDE31B4", VA = "0xDE31B4")]
		private GUIStyle CreateStyle(UIStyleManager styleManager)
		{
			return null;
		}

		[Token(Token = "0x6002790")]
		[Address(RVA = "0xDE32B4", Offset = "0xDE32B4", VA = "0xDE32B4")]
		public float CalcHeight(UIStyleManager styleManager, string text, float width)
		{
			return default(float);
		}

		[Token(Token = "0x6002791")]
		[Address(RVA = "0xDE3360", Offset = "0xDE3360", VA = "0xDE3360")]
		public UnityEngine.Vector2 CalcSize(UISystem uiSystem, string text)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6002792")]
		[Address(RVA = "0xDE3400", Offset = "0xDE3400", VA = "0xDE3400", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6002793")]
		[Address(RVA = "0xDE344C", Offset = "0xDE344C", VA = "0xDE344C", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}
	}
	[Token(Token = "0x20006E5")]
	public class LinkWidget : WidgetBase
	{
		[Token(Token = "0x40024A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IWidget content;

		[Token(Token = "0x40024A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool drawLinkOutline;

		[Token(Token = "0x40024A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool hovered;

		[Token(Token = "0x40024AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private object userdata;

		[Token(Token = "0x40024AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Color highlightColor;

		[Token(Token = "0x14000020")]
		public event OnWidgetClicked LinkClicked
		{
			[Token(Token = "0x6002794")]
			[Address(RVA = "0xDE35C8", Offset = "0xDE35C8", VA = "0xDE35C8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002795")]
			[Address(RVA = "0xDE3664", Offset = "0xDE3664", VA = "0xDE3664")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002796")]
		[Address(RVA = "0xDE3700", Offset = "0xDE3700", VA = "0xDE3700")]
		public LinkWidget()
		{
		}

		[Token(Token = "0x6002797")]
		[Address(RVA = "0xDE3708", Offset = "0xDE3708", VA = "0xDE3708")]
		public LinkWidget(IWidget content)
		{
		}

		[Token(Token = "0x6002798")]
		[Address(RVA = "0xDE3788", Offset = "0xDE3788", VA = "0xDE3788")]
		public LinkWidget SetContent(IWidget content)
		{
			return null;
		}

		[Token(Token = "0x6002799")]
		[Address(RVA = "0xDE3790", Offset = "0xDE3790", VA = "0xDE3790")]
		public LinkWidget SetHighlightColor(Color color)
		{
			return null;
		}

		[Token(Token = "0x600279A")]
		[Address(RVA = "0xDE379C", Offset = "0xDE379C", VA = "0xDE379C")]
		public LinkWidget SetUserData(object userdata)
		{
			return null;
		}

		[Token(Token = "0x600279B")]
		[Address(RVA = "0xDE37A4", Offset = "0xDE37A4", VA = "0xDE37A4")]
		public LinkWidget SetDrawLinkOutline(bool drawLinkOutline)
		{
			return null;
		}

		[Token(Token = "0x600279C")]
		[Address(RVA = "0xDE37B0", Offset = "0xDE37B0", VA = "0xDE37B0", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x600279D")]
		[Address(RVA = "0xDE392C", Offset = "0xDE392C", VA = "0xDE392C", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x600279E")]
		[Address(RVA = "0xDE3B2C", Offset = "0xDE3B2C", VA = "0xDE3B2C", Slot = "22")]
		public override bool RequiresInputEveryFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x600279F")]
		[Address(RVA = "0xDE3B34", Offset = "0xDE3B34", VA = "0xDE3B34", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x60027A0")]
		[Address(RVA = "0xDE3B3C", Offset = "0xDE3B3C", VA = "0xDE3B3C", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x60027A1")]
		[Address(RVA = "0xDE3BD0", Offset = "0xDE3BD0", VA = "0xDE3BD0", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60027A2")]
		[Address(RVA = "0xDE3C94", Offset = "0xDE3C94", VA = "0xDE3C94", Slot = "28")]
		public override void HandleInput(Event e, UISystem uiSystem)
		{
		}
	}
	[Token(Token = "0x20006E6")]
	public abstract class ListViewSource<T>
	{
		[Token(Token = "0x60027A3")]
		public abstract T[] GetItems();

		[Token(Token = "0x60027A4")]
		public abstract IWidget CreateWidget(T item);

		[Token(Token = "0x60027A5")]
		protected ListViewSource()
		{
		}
	}
	[Token(Token = "0x20006E7")]
	public delegate void OnListViewItemSelected(object data);
	[Token(Token = "0x20006E8")]
	public interface IListViewItemWidget
	{
		[Token(Token = "0x1700065A")]
		bool Selected
		{
			[Token(Token = "0x60027AE")]
			get;
			[Token(Token = "0x60027AF")]
			set;
		}

		[Token(Token = "0x1700065B")]
		object ItemData
		{
			[Token(Token = "0x60027B0")]
			get;
			[Token(Token = "0x60027B1")]
			set;
		}

		[Token(Token = "0x14000021")]
		event OnListViewItemSelected ItemSelected;

		[Token(Token = "0x14000022")]
		event OnListViewItemSelected ItemDoubleClicked;

		[Token(Token = "0x60027B2")]
		string GetCaption();
	}
	[Token(Token = "0x20006E9")]
	public class ListViewWidget<T> : WidgetBase
	{
		[Token(Token = "0x20006EA")]
		public delegate void OnSelectionChanged(T Item);

		[Token(Token = "0x40024AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ListViewSource<T> dataSource;

		[Token(Token = "0x40024AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T selectedItem;

		[Token(Token = "0x40024B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ScrollPanelWidget ScrollView;

		[Token(Token = "0x40024B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int ItemHeight;

		[Token(Token = "0x40024B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Color backgroundColor;

		[Token(Token = "0x40024B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private StackPanelWidget panel;

		[Token(Token = "0x40024B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IWidget layout;

		[Token(Token = "0x14000023")]
		public event OnSelectionChanged SelectionChanged
		{
			[Token(Token = "0x60027B3")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60027B4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000024")]
		public event OnSelectionChanged ItemClicked
		{
			[Token(Token = "0x60027B5")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60027B6")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000025")]
		public event OnSelectionChanged ItemDoubleClicked
		{
			[Token(Token = "0x60027B7")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60027B8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60027B9")]
		public void Bind(ListViewSource<T> dataSource)
		{
		}

		[Token(Token = "0x60027BA")]
		private bool IsEqual(T a, T b)
		{
			return default(bool);
		}

		[Token(Token = "0x60027BB")]
		private void BuildLayout()
		{
		}

		[Token(Token = "0x60027BC")]
		private void ListViewItemWidget_ItemDoubleClicked(object data)
		{
		}

		[Token(Token = "0x60027BD")]
		private void ListViewItemWidget_ItemSelected(object data)
		{
		}

		[Token(Token = "0x60027BE")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60027BF")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x60027C0")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x60027C1")]
		public void NotifyDataChanged()
		{
		}

		[Token(Token = "0x60027C2")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x60027C3")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x60027C4")]
		public override bool CanAcquireFocus()
		{
			return default(bool);
		}

		[Token(Token = "0x60027C5")]
		public int GetSelectedIndex()
		{
			return default(int);
		}

		[Token(Token = "0x60027C6")]
		public T GetSelectedItem()
		{
			return (T)null;
		}

		[Token(Token = "0x60027C7")]
		public T GetItem(int index)
		{
			return (T)null;
		}

		[Token(Token = "0x60027C8")]
		public void SetSelectedItem(UISystem uiSystem, T item)
		{
		}

		[Token(Token = "0x60027C9")]
		public void SetSelectedItem(UISystem uiSystem, T item, bool selectOnInspector)
		{
		}

		[Token(Token = "0x60027CA")]
		private bool IsNull(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x60027CB")]
		public void SetSelectedIndex(int index)
		{
		}

		[Token(Token = "0x60027CC")]
		public ListViewWidget()
		{
		}
	}
	[Token(Token = "0x20006EB")]
	public class ListViewTextItemWidget : WidgetBase, IListViewItemWidget
	{
		[Token(Token = "0x40024B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GUIStyle TextStyle;

		[Token(Token = "0x40024BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GUIStyle SelectedTextStyle;

		[Token(Token = "0x40024BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color SelectedColor;

		[Token(Token = "0x40024BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float OffsetX;

		[Token(Token = "0x40024BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Func<string> captionGetter;

		[Token(Token = "0x1700065C")]
		public bool Selected
		{
			[Token(Token = "0x60027D1")]
			[Address(RVA = "0xDE4030", Offset = "0xDE4030", VA = "0xDE4030", Slot = "37")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60027D2")]
			[Address(RVA = "0xDE4038", Offset = "0xDE4038", VA = "0xDE4038", Slot = "38")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700065D")]
		public object ItemData
		{
			[Token(Token = "0x60027D3")]
			[Address(RVA = "0xDE4044", Offset = "0xDE4044", VA = "0xDE4044", Slot = "39")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60027D4")]
			[Address(RVA = "0xDE404C", Offset = "0xDE404C", VA = "0xDE404C", Slot = "40")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x14000026")]
		public event OnListViewItemSelected ItemSelected
		{
			[Token(Token = "0x60027D5")]
			[Address(RVA = "0xDE4054", Offset = "0xDE4054", VA = "0xDE4054", Slot = "33")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60027D6")]
			[Address(RVA = "0xDE40F0", Offset = "0xDE40F0", VA = "0xDE40F0", Slot = "34")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000027")]
		public event OnListViewItemSelected ItemDoubleClicked
		{
			[Token(Token = "0x60027D7")]
			[Address(RVA = "0xDE418C", Offset = "0xDE418C", VA = "0xDE418C", Slot = "35")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60027D8")]
			[Address(RVA = "0xDE4228", Offset = "0xDE4228", VA = "0xDE4228", Slot = "36")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60027D9")]
		[Address(RVA = "0xDE42C4", Offset = "0xDE42C4", VA = "0xDE42C4")]
		public ListViewTextItemWidget(object itemData, Func<string> captionGetter)
		{
		}

		[Token(Token = "0x60027DA")]
		[Address(RVA = "0xDE43A0", Offset = "0xDE43A0", VA = "0xDE43A0", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x60027DB")]
		[Address(RVA = "0xDE457C", Offset = "0xDE457C", VA = "0xDE457C", Slot = "42")]
		public virtual void DrawText(UIRenderer renderer, Rect bounds)
		{
		}

		[Token(Token = "0x60027DC")]
		[Address(RVA = "0xDE4728", Offset = "0xDE4728", VA = "0xDE4728", Slot = "41")]
		public string GetCaption()
		{
			return null;
		}

		[Token(Token = "0x60027DD")]
		[Address(RVA = "0xDE478C", Offset = "0xDE478C", VA = "0xDE478C", Slot = "28")]
		public override void HandleInput(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60027DE")]
		[Address(RVA = "0xDE48AC", Offset = "0xDE48AC", VA = "0xDE48AC", Slot = "32")]
		protected override void HandleDragStart(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60027DF")]
		[Address(RVA = "0xDE4BE4", Offset = "0xDE4BE4", VA = "0xDE4BE4", Slot = "21")]
		public override bool CanAcquireFocus()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20006EC")]
	public enum SplitterDirection
	{
		[Token(Token = "0x40024C1")]
		Horizontal,
		[Token(Token = "0x40024C2")]
		Vertical
	}
	[Token(Token = "0x20006ED")]
	public class SplitterNode
	{
		[Token(Token = "0x40024C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IWidget Content;

		[Token(Token = "0x40024C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Weight;

		[Token(Token = "0x40024C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool IsSplitBar;

		[Token(Token = "0x60027E0")]
		[Address(RVA = "0xDE4BEC", Offset = "0xDE4BEC", VA = "0xDE4BEC")]
		public SplitterNode()
		{
		}
	}
	[Token(Token = "0x20006EE")]
	public delegate void OnSplitBarResized(SplitterNode prev, SplitterNode next);
	[Token(Token = "0x20006EF")]
	public class Splitter : WidgetBase
	{
		[Token(Token = "0x40024C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SplitterDirection direction;

		[Token(Token = "0x40024C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool freeSize;

		[Token(Token = "0x40024C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float minWindowSize;

		[Token(Token = "0x40024C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float barSize;

		[Token(Token = "0x40024CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color barColor;

		[Token(Token = "0x40024CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color barHighlightColor;

		[Token(Token = "0x40024CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<SplitterNode> nodes;

		[Token(Token = "0x1700065E")]
		public SplitterDirection Direction
		{
			[Token(Token = "0x60027E5")]
			[Address(RVA = "0xDE4D40", Offset = "0xDE4D40", VA = "0xDE4D40")]
			get
			{
				return default(SplitterDirection);
			}
		}

		[Token(Token = "0x14000028")]
		public event OnSplitBarResized SplitBarDragged
		{
			[Token(Token = "0x60027E6")]
			[Address(RVA = "0xDE4D48", Offset = "0xDE4D48", VA = "0xDE4D48")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60027E7")]
			[Address(RVA = "0xDE4DE4", Offset = "0xDE4DE4", VA = "0xDE4DE4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60027E8")]
		[Address(RVA = "0xDE4E80", Offset = "0xDE4E80", VA = "0xDE4E80")]
		public Splitter(SplitterDirection direction)
		{
		}

		[Token(Token = "0x60027E9")]
		[Address(RVA = "0xDE4F30", Offset = "0xDE4F30", VA = "0xDE4F30")]
		public Splitter SetMinWindowSize(float minWindowSize)
		{
			return null;
		}

		[Token(Token = "0x60027EA")]
		[Address(RVA = "0xDE4F38", Offset = "0xDE4F38", VA = "0xDE4F38")]
		public Splitter SetBarSize(float barSize)
		{
			return null;
		}

		[Token(Token = "0x60027EB")]
		[Address(RVA = "0xDE4F40", Offset = "0xDE4F40", VA = "0xDE4F40")]
		public Splitter SetFreeSize(bool freeSize)
		{
			return null;
		}

		[Token(Token = "0x60027EC")]
		[Address(RVA = "0xDE4F4C", Offset = "0xDE4F4C", VA = "0xDE4F4C")]
		public Splitter AddWidget(IWidget widget)
		{
			return null;
		}

		[Token(Token = "0x60027ED")]
		[Address(RVA = "0xDE4F54", Offset = "0xDE4F54", VA = "0xDE4F54")]
		public Splitter AddWidget(IWidget widget, float weight)
		{
			return null;
		}

		[Token(Token = "0x60027EE")]
		[Address(RVA = "0xDE5160", Offset = "0xDE5160", VA = "0xDE5160", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x60027EF")]
		[Address(RVA = "0xDE5168", Offset = "0xDE5168", VA = "0xDE5168", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x60027F0")]
		[Address(RVA = "0xDE538C", Offset = "0xDE538C", VA = "0xDE538C")]
		public void OnSplitBarDragged(SplitterDragBarWidget barWidget, UnityEngine.Vector2 delta)
		{
		}

		[Token(Token = "0x60027F1")]
		[Address(RVA = "0xDE59A4", Offset = "0xDE59A4", VA = "0xDE59A4", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x60027F2")]
		[Address(RVA = "0xDE5C80", Offset = "0xDE5C80", VA = "0xDE5C80", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x60027F3")]
		[Address(RVA = "0xDE5D50", Offset = "0xDE5D50", VA = "0xDE5D50", Slot = "28")]
		public override void HandleInput(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60027F4")]
		[Address(RVA = "0xDE5B88", Offset = "0xDE5B88", VA = "0xDE5B88")]
		private Rect GetWidgetBounds(UnityEngine.Vector2 hostSize, float offset, float size)
		{
			return default(Rect);
		}

		[Token(Token = "0x60027F5")]
		[Address(RVA = "0xDE5600", Offset = "0xDE5600", VA = "0xDE5600")]
		private float[] GetLayoutSizes(UnityEngine.Vector2 windowSize)
		{
			return null;
		}

		[Token(Token = "0x60027F6")]
		[Address(RVA = "0xDE5D54", Offset = "0xDE5D54", VA = "0xDE5D54", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}
	}
	[Token(Token = "0x20006F0")]
	public class SplitterDragBarWidget : WidgetBase
	{
		[Token(Token = "0x40024CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Splitter parent;

		[Token(Token = "0x60027F7")]
		[Address(RVA = "0xDE5134", Offset = "0xDE5134", VA = "0xDE5134")]
		public SplitterDragBarWidget(Splitter parent)
		{
		}

		[Token(Token = "0x60027F8")]
		[Address(RVA = "0xDE5ED4", Offset = "0xDE5ED4", VA = "0xDE5ED4", Slot = "21")]
		public override bool CanAcquireFocus()
		{
			return default(bool);
		}

		[Token(Token = "0x60027F9")]
		[Address(RVA = "0xDE5EDC", Offset = "0xDE5EDC", VA = "0xDE5EDC", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x60027FA")]
		[Address(RVA = "0xDE5FDC", Offset = "0xDE5FDC", VA = "0xDE5FDC")]
		private void DrawBar(UIRenderer renderer, Rect bounds, Color barColor)
		{
		}

		[Token(Token = "0x60027FB")]
		[Address(RVA = "0xDE620C", Offset = "0xDE620C", VA = "0xDE620C", Slot = "28")]
		public override void HandleInput(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60027FC")]
		[Address(RVA = "0xDE62A0", Offset = "0xDE62A0", VA = "0xDE62A0", Slot = "27")]
		protected override void DrawFocusHighlight(UISystem uiSystem, UIRenderer renderer)
		{
		}
	}
	[Token(Token = "0x20006F1")]
	public class DebugWidget : WidgetBase
	{
		[Token(Token = "0x40024CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color debugColor;

		[Token(Token = "0x40024D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string caption;

		[Token(Token = "0x60027FD")]
		[Address(RVA = "0xDE6360", Offset = "0xDE6360", VA = "0xDE6360")]
		public DebugWidget()
		{
		}

		[Token(Token = "0x60027FE")]
		[Address(RVA = "0xDE63BC", Offset = "0xDE63BC", VA = "0xDE63BC")]
		public DebugWidget(string caption, Color color)
		{
		}

		[Token(Token = "0x60027FF")]
		[Address(RVA = "0xDE6458", Offset = "0xDE6458", VA = "0xDE6458", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}
	}
	[Token(Token = "0x20006F2")]
	public class BreadCrumbWidgetNode
	{
		[Token(Token = "0x40024D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string displayText;

		[Token(Token = "0x40024D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public object userdata;

		[Token(Token = "0x6002800")]
		[Address(RVA = "0xDE6678", Offset = "0xDE6678", VA = "0xDE6678")]
		public BreadCrumbWidgetNode(string displayText, object userdata)
		{
		}
	}
	[Token(Token = "0x20006F3")]
	public delegate void OnBreadCrumbLinkClicked(object userdata);
	[Token(Token = "0x20006F4")]
	public class BreadCrumbWidget : WidgetBase
	{
		[Token(Token = "0x40024D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IWidget content;

		[Token(Token = "0x40024D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int padding;

		[Token(Token = "0x40024D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool requestRebuild;

		[Token(Token = "0x40024D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<BreadCrumbWidgetNode> items;

		[Token(Token = "0x1700065F")]
		public int FontSize
		{
			[Token(Token = "0x6002807")]
			[Address(RVA = "0xDE691C", Offset = "0xDE691C", VA = "0xDE691C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002808")]
			[Address(RVA = "0xDE6924", Offset = "0xDE6924", VA = "0xDE6924")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000660")]
		public Color TextColor
		{
			[Token(Token = "0x6002809")]
			[Address(RVA = "0xDE692C", Offset = "0xDE692C", VA = "0xDE692C")]
			[CompilerGenerated]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x600280A")]
			[Address(RVA = "0xDE6938", Offset = "0xDE6938", VA = "0xDE6938")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x14000029")]
		public event OnBreadCrumbLinkClicked LinkClicked
		{
			[Token(Token = "0x6002805")]
			[Address(RVA = "0xDE67E4", Offset = "0xDE67E4", VA = "0xDE67E4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002806")]
			[Address(RVA = "0xDE6880", Offset = "0xDE6880", VA = "0xDE6880")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600280B")]
		[Address(RVA = "0xDE6944", Offset = "0xDE6944", VA = "0xDE6944")]
		public BreadCrumbWidget()
		{
		}

		[Token(Token = "0x600280C")]
		[Address(RVA = "0xDE69F4", Offset = "0xDE69F4", VA = "0xDE69F4")]
		public BreadCrumbWidget SetPadding(int padding)
		{
			return null;
		}

		[Token(Token = "0x600280D")]
		[Address(RVA = "0xDE6A04", Offset = "0xDE6A04", VA = "0xDE6A04")]
		public object GetTopItemUserData()
		{
			return null;
		}

		[Token(Token = "0x600280E")]
		[Address(RVA = "0xDE6A80", Offset = "0xDE6A80", VA = "0xDE6A80", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x600280F")]
		[Address(RVA = "0xDE6A88", Offset = "0xDE6A88", VA = "0xDE6A88", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x6002810")]
		[Address(RVA = "0xDE6B1C", Offset = "0xDE6B1C", VA = "0xDE6B1C", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6002811")]
		[Address(RVA = "0xDE6BE0", Offset = "0xDE6BE0", VA = "0xDE6BE0")]
		public void PushPage(string displayName, object userdata)
		{
		}

		[Token(Token = "0x6002812")]
		[Address(RVA = "0xDE6CCC", Offset = "0xDE6CCC", VA = "0xDE6CCC")]
		public void MoveToPage(BreadCrumbWidgetNode node)
		{
		}

		[Token(Token = "0x6002813")]
		[Address(RVA = "0xDE6D8C", Offset = "0xDE6D8C", VA = "0xDE6D8C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6002814")]
		[Address(RVA = "0xDE6DFC", Offset = "0xDE6DFC", VA = "0xDE6DFC")]
		private void Rebuild(UISystem uiSystem)
		{
		}

		[Token(Token = "0x6002815")]
		[Address(RVA = "0xDE7384", Offset = "0xDE7384", VA = "0xDE7384")]
		private void OnCrumbItemClicked(WidgetClickEvent clickEvent)
		{
		}

		[Token(Token = "0x6002816")]
		[Address(RVA = "0xDE743C", Offset = "0xDE743C", VA = "0xDE743C", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x6002817")]
		[Address(RVA = "0xDE75B4", Offset = "0xDE75B4", VA = "0xDE75B4", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}
	}
	[Token(Token = "0x20006F5")]
	public class GraphPanel<TGraphEditor> : WidgetBase where TGraphEditor : GraphEditor
	{
		[Token(Token = "0x40024DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IWidget host;

		[Token(Token = "0x40024DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public BorderWidget Border;

		[Token(Token = "0x40024DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ToolbarWidget FloatingToolbar;

		[Token(Token = "0x40024DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ToolbarWidget Toolbar;

		[Token(Token = "0x40024DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public TGraphEditor GraphEditor;

		[Token(Token = "0x40024DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string BTN_FOCUS_ON_GRAPH;

		[Token(Token = "0x6002818")]
		public GraphPanel(Graph graph, UnityEngine.Object assetObject, UISystem uiSystem)
		{
		}

		[Token(Token = "0x6002819")]
		public GraphPanel(Graph graph, UnityEngine.Object assetObject, UISystem uiSystem, ToolbarWidget toolbar)
		{
		}

		[Token(Token = "0x600281A")]
		private void Toolbar_ButtonPressed(UISystem uiSystem, string id)
		{
		}

		[Token(Token = "0x600281B")]
		public void ResetCamera()
		{
		}

		[Token(Token = "0x600281C")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x600281D")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x600281E")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x600281F")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}
	}
	[Token(Token = "0x20006F6")]
	public enum GridPanelArrangementType
	{
		[Token(Token = "0x40024E1")]
		VerticalScroll
	}
	[Token(Token = "0x20006F7")]
	internal class GridPanelNode
	{
		[Token(Token = "0x40024E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IWidget Widget;

		[Token(Token = "0x6002821")]
		[Address(RVA = "0xDE7638", Offset = "0xDE7638", VA = "0xDE7638")]
		public GridPanelNode()
		{
		}
	}
	[Token(Token = "0x20006F8")]
	public class GridPanelWidget : WidgetBase
	{
		[Token(Token = "0x40024E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<GridPanelNode> nodes;

		[Token(Token = "0x40024E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GridPanelArrangementType arrangement;

		[Token(Token = "0x40024E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private IntVector2 padding;

		[Token(Token = "0x40024E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public UnityEngine.Vector2 cellSize;

		[Token(Token = "0x40024E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public UnityEngine.Vector2 desiredCellSize;

		[Token(Token = "0x40024E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool autoSize;

		[Token(Token = "0x40024E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private IntVector2 renderedCells;

		[Token(Token = "0x6002822")]
		[Address(RVA = "0xDE7640", Offset = "0xDE7640", VA = "0xDE7640")]
		public GridPanelWidget(GridPanelArrangementType arrangement)
		{
		}

		[Token(Token = "0x6002823")]
		[Address(RVA = "0xDE7720", Offset = "0xDE7720", VA = "0xDE7720")]
		public GridPanelWidget AddWidget(IWidget Widget)
		{
			return null;
		}

		[Token(Token = "0x6002824")]
		[Address(RVA = "0xDE7800", Offset = "0xDE7800", VA = "0xDE7800")]
		public GridPanelWidget SetArrangementType(GridPanelArrangementType arrangement)
		{
			return null;
		}

		[Token(Token = "0x6002825")]
		[Address(RVA = "0xDE7808", Offset = "0xDE7808", VA = "0xDE7808")]
		public GridPanelArrangementType GetArrangementType()
		{
			return default(GridPanelArrangementType);
		}

		[Token(Token = "0x6002826")]
		[Address(RVA = "0xDE7810", Offset = "0xDE7810", VA = "0xDE7810")]
		public GridPanelWidget SetPadding(int x, int y)
		{
			return null;
		}

		[Token(Token = "0x6002827")]
		[Address(RVA = "0xDE7820", Offset = "0xDE7820", VA = "0xDE7820")]
		public GridPanelWidget SetAutoSize(bool autoSize)
		{
			return null;
		}

		[Token(Token = "0x6002828")]
		[Address(RVA = "0xDE782C", Offset = "0xDE782C", VA = "0xDE782C")]
		public GridPanelWidget SetCellSize(float width, float height)
		{
			return null;
		}

		[Token(Token = "0x6002829")]
		[Address(RVA = "0xDE7834", Offset = "0xDE7834", VA = "0xDE7834", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600282A")]
		[Address(RVA = "0xDE7878", Offset = "0xDE7878", VA = "0xDE7878")]
		private void UpdateDesiredCellSize(UISystem uiSystem)
		{
		}

		[Token(Token = "0x600282B")]
		[Address(RVA = "0xDE7AF4", Offset = "0xDE7AF4", VA = "0xDE7AF4", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x600282C")]
		[Address(RVA = "0xDE7DB8", Offset = "0xDE7DB8", VA = "0xDE7DB8", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x600282D")]
		[Address(RVA = "0xDE7E88", Offset = "0xDE7E88", VA = "0xDE7E88", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x600282E")]
		[Address(RVA = "0xDE7E90", Offset = "0xDE7E90", VA = "0xDE7E90", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}
	}
	[Token(Token = "0x20006F9")]
	public enum OverlayPanelVAlign
	{
		[Token(Token = "0x40024EB")]
		Fill,
		[Token(Token = "0x40024EC")]
		Top,
		[Token(Token = "0x40024ED")]
		Center,
		[Token(Token = "0x40024EE")]
		Bottom
	}
	[Token(Token = "0x20006FA")]
	public enum OverlayPanelHAlign
	{
		[Token(Token = "0x40024F0")]
		Fill,
		[Token(Token = "0x40024F1")]
		Left,
		[Token(Token = "0x40024F2")]
		Center,
		[Token(Token = "0x40024F3")]
		Right
	}
	[Token(Token = "0x20006FB")]
	internal class OverlayPanelNode
	{
		[Token(Token = "0x40024F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IWidget Widget;

		[Token(Token = "0x40024F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector2 Size;

		[Token(Token = "0x40024F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Vector2 Offset;

		[Token(Token = "0x40024F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public OverlayPanelVAlign VAlign;

		[Token(Token = "0x40024F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public OverlayPanelHAlign HAlign;

		[Token(Token = "0x40024F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Rect Bounds;

		[Token(Token = "0x600282F")]
		[Address(RVA = "0xDE80B4", Offset = "0xDE80B4", VA = "0xDE80B4")]
		public OverlayPanelNode()
		{
		}
	}
	[Token(Token = "0x20006FC")]
	public class OverlayPanelWidget : WidgetBase
	{
		[Token(Token = "0x40024FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<OverlayPanelNode> nodes;

		[Token(Token = "0x6002830")]
		[Address(RVA = "0xDE8128", Offset = "0xDE8128", VA = "0xDE8128")]
		public OverlayPanelWidget AddWidget(IWidget widget, OverlayPanelHAlign HAlign, OverlayPanelVAlign VAlign, UnityEngine.Vector2 size, UnityEngine.Vector2 offset)
		{
			return null;
		}

		[Token(Token = "0x6002831")]
		[Address(RVA = "0xDE8240", Offset = "0xDE8240", VA = "0xDE8240")]
		public OverlayPanelWidget AddWidget(IWidget widget)
		{
			return null;
		}

		[Token(Token = "0x6002832")]
		[Address(RVA = "0xDE82A8", Offset = "0xDE82A8", VA = "0xDE82A8", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x6002833")]
		[Address(RVA = "0xDE85E8", Offset = "0xDE85E8", VA = "0xDE85E8", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x6002834")]
		[Address(RVA = "0xDE876C", Offset = "0xDE876C", VA = "0xDE876C")]
		private OverlayPanelNode FindIntersectingNode(UnityEngine.Vector2 position)
		{
			return null;
		}

		[Token(Token = "0x6002835")]
		[Address(RVA = "0xDE82B4", Offset = "0xDE82B4", VA = "0xDE82B4")]
		public void UpdateNodeBounds(UISystem uiSystem)
		{
		}

		[Token(Token = "0x6002836")]
		[Address(RVA = "0xDE88F4", Offset = "0xDE88F4", VA = "0xDE88F4", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x6002837")]
		[Address(RVA = "0xDE88FC", Offset = "0xDE88FC", VA = "0xDE88FC", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x6002838")]
		[Address(RVA = "0xDE8B20", Offset = "0xDE8B20", VA = "0xDE8B20")]
		public OverlayPanelWidget()
		{
		}
	}
	[Token(Token = "0x20006FD")]
	public class PanelWidget : WidgetBase
	{
		[Token(Token = "0x40024FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected IWidget Content;

		[Token(Token = "0x6002839")]
		[Address(RVA = "0xDE8B98", Offset = "0xDE8B98", VA = "0xDE8B98")]
		public PanelWidget()
		{
		}

		[Token(Token = "0x600283A")]
		[Address(RVA = "0xDE8B9C", Offset = "0xDE8B9C", VA = "0xDE8B9C")]
		public PanelWidget(IWidget content)
		{
		}

		[Token(Token = "0x600283B")]
		[Address(RVA = "0xDE8BC0", Offset = "0xDE8BC0", VA = "0xDE8BC0")]
		public PanelWidget SetContent(IWidget content)
		{
			return null;
		}

		[Token(Token = "0x600283C")]
		[Address(RVA = "0xDE8BC8", Offset = "0xDE8BC8", VA = "0xDE8BC8", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x600283D")]
		[Address(RVA = "0xDE8D4C", Offset = "0xDE8D4C", VA = "0xDE8D4C", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x600283E")]
		[Address(RVA = "0xDE8DD0", Offset = "0xDE8DD0", VA = "0xDE8DD0", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x600283F")]
		[Address(RVA = "0xDE8DD8", Offset = "0xDE8DD8", VA = "0xDE8DD8", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x6002840")]
		[Address(RVA = "0xDE8E6C", Offset = "0xDE8E6C", VA = "0xDE8E6C", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}
	}
	[Token(Token = "0x20006FE")]
	public class ScrollPanelWidget : WidgetBase
	{
		[Token(Token = "0x40024FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IWidget content;

		[Token(Token = "0x40024FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool MouseScrollingEnabled;

		[Token(Token = "0x6002841")]
		[Address(RVA = "0xDE8F44", Offset = "0xDE8F44", VA = "0xDE8F44")]
		public ScrollPanelWidget(IWidget content)
		{
		}

		[Token(Token = "0x6002842")]
		[Address(RVA = "0xDE8F74", Offset = "0xDE8F74", VA = "0xDE8F74")]
		public ScrollPanelWidget(IWidget content, bool mouseScrollingEnabled)
		{
		}

		[Token(Token = "0x6002843")]
		[Address(RVA = "0xDE8FA8", Offset = "0xDE8FA8", VA = "0xDE8FA8", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x6002844")]
		[Address(RVA = "0xDE92A4", Offset = "0xDE92A4", VA = "0xDE92A4", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x6002845")]
		[Address(RVA = "0xDE94B0", Offset = "0xDE94B0", VA = "0xDE94B0", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6002846")]
		[Address(RVA = "0xDE9574", Offset = "0xDE9574", VA = "0xDE9574", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x6002847")]
		[Address(RVA = "0xDE957C", Offset = "0xDE957C", VA = "0xDE957C", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}
	}
	[Token(Token = "0x20006FF")]
	internal class StackPanelNode
	{
		[Token(Token = "0x40024FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IWidget Widget;

		[Token(Token = "0x40024FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool AutoSize;

		[Token(Token = "0x4002500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool AdjustToDynamicDesiredSize;

		[Token(Token = "0x4002501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Size;

		[Token(Token = "0x6002848")]
		[Address(RVA = "0xDE9610", Offset = "0xDE9610", VA = "0xDE9610")]
		public StackPanelNode()
		{
		}
	}
	[Token(Token = "0x2000700")]
	public enum StackPanelOrientation
	{
		[Token(Token = "0x4002503")]
		Horizontal,
		[Token(Token = "0x4002504")]
		Vertical
	}
	[Token(Token = "0x2000701")]
	public class StackPanelWidget : WidgetBase
	{
		[Token(Token = "0x4002505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<StackPanelNode> nodes;

		[Token(Token = "0x4002506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private StackPanelOrientation Orientation;

		[Token(Token = "0x6002849")]
		[Address(RVA = "0xDE71EC", Offset = "0xDE71EC", VA = "0xDE71EC")]
		public StackPanelWidget(StackPanelOrientation orientation)
		{
		}

		[Token(Token = "0x600284A")]
		[Address(RVA = "0xDE9620", Offset = "0xDE9620", VA = "0xDE9620")]
		public StackPanelWidget AddWidget(IWidget Widget)
		{
			return null;
		}

		[Token(Token = "0x600284B")]
		[Address(RVA = "0xDE9710", Offset = "0xDE9710", VA = "0xDE9710")]
		public StackPanelWidget AddWidget(IWidget Widget, float size)
		{
			return null;
		}

		[Token(Token = "0x600284C")]
		[Address(RVA = "0xDE7280", Offset = "0xDE7280", VA = "0xDE7280")]
		public StackPanelWidget AddWidget(IWidget Widget, float size, bool adjustToDynamicDesiredSize)
		{
			return null;
		}

		[Token(Token = "0x600284D")]
		[Address(RVA = "0xDE9718", Offset = "0xDE9718", VA = "0xDE9718", Slot = "23")]
		public override UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600284E")]
		[Address(RVA = "0xDE9A04", Offset = "0xDE9A04", VA = "0xDE9A04", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x600284F")]
		[Address(RVA = "0xDE9F14", Offset = "0xDE9F14", VA = "0xDE9F14", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x6002850")]
		[Address(RVA = "0xDE9FE4", Offset = "0xDE9FE4", VA = "0xDE9FE4", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x6002851")]
		[Address(RVA = "0xDE9FEC", Offset = "0xDE9FEC", VA = "0xDE9FEC", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}
	}
	[Token(Token = "0x2000702")]
	public delegate void WidgetDragEvent(Event e, UISystem uiSystem);
	[Token(Token = "0x2000703")]
	public enum WidgetMessage
	{
		[Token(Token = "0x4002508")]
		DrawHighlight
	}
	[Token(Token = "0x2000704")]
	public interface IWidget
	{
		[Token(Token = "0x17000661")]
		Rect WidgetBounds
		{
			[Token(Token = "0x600285F")]
			get;
			[Token(Token = "0x6002860")]
			set;
		}

		[Token(Token = "0x17000662")]
		bool ShowFocusHighlight
		{
			[Token(Token = "0x6002861")]
			get;
			[Token(Token = "0x6002862")]
			set;
		}

		[Token(Token = "0x17000663")]
		UnityEngine.Vector2 ScrollPosition
		{
			[Token(Token = "0x6002863")]
			get;
			[Token(Token = "0x6002864")]
			set;
		}

		[Token(Token = "0x6002856")]
		void UpdateWidget(UISystem uiSystem, Rect bounds);

		[Token(Token = "0x6002857")]
		void Draw(UISystem uiSystem, UIRenderer renderer);

		[Token(Token = "0x6002858")]
		void HandleInput(Event e, UISystem uiSystem);

		[Token(Token = "0x6002859")]
		void HandleMessage(UISystem uiSystem, WidgetMessage message);

		[Token(Token = "0x600285A")]
		bool IsCompositeWidget();

		[Token(Token = "0x600285B")]
		bool CanAcquireFocus();

		[Token(Token = "0x600285C")]
		bool RequiresInputEveryFrame();

		[Token(Token = "0x600285D")]
		IWidget[] GetChildWidgets();

		[Token(Token = "0x600285E")]
		UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem);
	}
	[Token(Token = "0x2000705")]
	public abstract class WidgetBase : IWidget
	{
		[Token(Token = "0x4002509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool showFocusHighlight;

		[Token(Token = "0x400250A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Rect widgetBounds;

		[Token(Token = "0x400250B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private UnityEngine.Vector2 scrollPosition;

		[Token(Token = "0x400250C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool DragDropEnabled;

		[Token(Token = "0x17000664")]
		public bool ShowFocusHighlight
		{
			[Token(Token = "0x6002865")]
			[Address(RVA = "0xDEA300", Offset = "0xDEA300", VA = "0xDEA300", Slot = "15")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002866")]
			[Address(RVA = "0xDEA308", Offset = "0xDEA308", VA = "0xDEA308", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x17000665")]
		public Rect WidgetBounds
		{
			[Token(Token = "0x6002867")]
			[Address(RVA = "0xDEA314", Offset = "0xDEA314", VA = "0xDEA314", Slot = "13")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x6002868")]
			[Address(RVA = "0xDEA320", Offset = "0xDEA320", VA = "0xDEA320", Slot = "14")]
			set
			{
			}
		}

		[Token(Token = "0x17000666")]
		public virtual UnityEngine.Vector2 ScrollPosition
		{
			[Token(Token = "0x6002869")]
			[Address(RVA = "0xDEA32C", Offset = "0xDEA32C", VA = "0xDEA32C", Slot = "19")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x600286A")]
			[Address(RVA = "0xDEA334", Offset = "0xDEA334", VA = "0xDEA334", Slot = "20")]
			set
			{
			}
		}

		[Token(Token = "0x1400002A")]
		public event WidgetDragEvent DragStart
		{
			[Token(Token = "0x6002876")]
			[Address(RVA = "0xDEA738", Offset = "0xDEA738", VA = "0xDEA738")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002877")]
			[Address(RVA = "0xDEA7D4", Offset = "0xDEA7D4", VA = "0xDEA7D4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002B")]
		public event WidgetDragEvent DragUpdate
		{
			[Token(Token = "0x6002878")]
			[Address(RVA = "0xDEA870", Offset = "0xDEA870", VA = "0xDEA870")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002879")]
			[Address(RVA = "0xDEA90C", Offset = "0xDEA90C", VA = "0xDEA90C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002C")]
		public event WidgetDragEvent DragPerform
		{
			[Token(Token = "0x600287A")]
			[Address(RVA = "0xDEA9A8", Offset = "0xDEA9A8", VA = "0xDEA9A8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600287B")]
			[Address(RVA = "0xDEAA44", Offset = "0xDEAA44", VA = "0xDEAA44")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600286B")]
		[Address(RVA = "0xDEA33C", Offset = "0xDEA33C", VA = "0xDEA33C", Slot = "21")]
		public virtual bool CanAcquireFocus()
		{
			return default(bool);
		}

		[Token(Token = "0x600286C")]
		[Address(RVA = "0xDEA344", Offset = "0xDEA344", VA = "0xDEA344", Slot = "22")]
		public virtual bool RequiresInputEveryFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x600286D")]
		[Address(RVA = "0xDE8F40", Offset = "0xDE8F40", VA = "0xDE8F40", Slot = "23")]
		public virtual UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600286E")]
		public abstract void Draw(UISystem uiSystem, UIRenderer renderer);

		[Token(Token = "0x600286F")]
		[Address(RVA = "0xDE1C2C", Offset = "0xDE1C2C", VA = "0xDE1C2C", Slot = "25")]
		public virtual void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x6002870")]
		[Address(RVA = "0xDEA34C", Offset = "0xDEA34C", VA = "0xDEA34C", Slot = "26")]
		public virtual void HandleMessage(UISystem uiSystem, WidgetMessage message)
		{
		}

		[Token(Token = "0x6002871")]
		[Address(RVA = "0xDEA350", Offset = "0xDEA350", VA = "0xDEA350", Slot = "27")]
		protected virtual void DrawFocusHighlight(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x6002872")]
		[Address(RVA = "0xDE3DF8", Offset = "0xDE3DF8", VA = "0xDE3DF8", Slot = "28")]
		public virtual void HandleInput(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x6002873")]
		[Address(RVA = "0xDEA720", Offset = "0xDEA720", VA = "0xDEA720", Slot = "29")]
		public virtual bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x6002874")]
		[Address(RVA = "0xDEA728", Offset = "0xDEA728", VA = "0xDEA728", Slot = "30")]
		public virtual IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x6002875")]
		[Address(RVA = "0xDEA730", Offset = "0xDEA730", VA = "0xDEA730", Slot = "31")]
		protected virtual bool IsDragDataSupported(Event e, UISystem uiSystem)
		{
			return default(bool);
		}

		[Token(Token = "0x600287C")]
		[Address(RVA = "0xDE4984", Offset = "0xDE4984", VA = "0xDE4984", Slot = "32")]
		protected virtual void HandleDragStart(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x600287D")]
		[Address(RVA = "0xDEA45C", Offset = "0xDEA45C", VA = "0xDEA45C")]
		private void HandleDragUpdate(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x600287E")]
		[Address(RVA = "0xDEA5C0", Offset = "0xDEA5C0", VA = "0xDEA5C0")]
		private void HandleDragPerform(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x600287F")]
		[Address(RVA = "0xDE1788", Offset = "0xDE1788", VA = "0xDE1788")]
		protected WidgetBase()
		{
		}
	}
	[Token(Token = "0x2000706")]
	public class NullWidget : WidgetBase
	{
		[Token(Token = "0x6002880")]
		[Address(RVA = "0xDEAAE0", Offset = "0xDEAAE0", VA = "0xDEAAE0", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x6002881")]
		[Address(RVA = "0xDDFE98", Offset = "0xDDFE98", VA = "0xDDFE98")]
		public NullWidget()
		{
		}
	}
	[Token(Token = "0x2000707")]
	public class WidgetUtils
	{
		[Token(Token = "0x4002510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color FOCUS_HIGHLITE_COLOR;

		[Token(Token = "0x6002882")]
		[Address(RVA = "0xDEAAE4", Offset = "0xDEAAE4", VA = "0xDEAAE4")]
		public static void GetWidgets(IWidget widget, ref List<IWidget> result)
		{
		}

		[Token(Token = "0x6002883")]
		public static List<T> GetWidgetsOfType<T>(IWidget root) where T : IWidget
		{
			return null;
		}

		[Token(Token = "0x6002884")]
		[Address(RVA = "0xDEAC7C", Offset = "0xDEAC7C", VA = "0xDEAC7C")]
		public static void HandleWidgetInput(UISystem uiSystem, Event e, UnityEngine.Vector2 mousePosition, IWidget widget)
		{
		}

		[Token(Token = "0x6002885")]
		[Address(RVA = "0xDEB0B4", Offset = "0xDEB0B4", VA = "0xDEB0B4")]
		public static bool BuildWidgetEvent(UnityEngine.Vector2 mousePosition, IWidget root, IWidget widgetToFind, ref UnityEngine.Vector2 widgetMousePosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6002886")]
		[Address(RVA = "0xDEB310", Offset = "0xDEB310", VA = "0xDEB310")]
		public static bool FindWidgetOnCursor(Event e, IWidget widget, out Event outEvent, out IWidget outWidget)
		{
			return default(bool);
		}

		[Token(Token = "0x6002887")]
		[Address(RVA = "0xDEB6D4", Offset = "0xDEB6D4", VA = "0xDEB6D4")]
		public static void ProcessDragOperation(Event e, IWidget widget, UISystem uiSystem)
		{
		}

		[Token(Token = "0x6002888")]
		[Address(RVA = "0xDEB848", Offset = "0xDEB848", VA = "0xDEB848")]
		public static bool ProcessInputFocus(UnityEngine.Vector2 mousePosition, UISystem uiSystem, IWidget widget)
		{
			return default(bool);
		}

		[Token(Token = "0x6002889")]
		[Address(RVA = "0xDE2064", Offset = "0xDE2064", VA = "0xDE2064")]
		public static void DrawWidgetFocusHighlight(UIRenderer renderer, Rect bounds, Color color)
		{
		}

		[Token(Token = "0x600288A")]
		[Address(RVA = "0xDEBBE8", Offset = "0xDEBBE8", VA = "0xDEBBE8")]
		public static void DrawWidgetFocusHighlight(UIRenderer renderer, Rect bounds, Color color, float thickness)
		{
		}

		[Token(Token = "0x600288B")]
		[Address(RVA = "0xDEBD00", Offset = "0xDEBD00", VA = "0xDEBD00")]
		public static void DrawWidgetFocusHighlight(UIRenderer renderer, Rect bounds, Color color, float thickness, Texture2D texture)
		{
		}

		[Token(Token = "0x600288C")]
		[Address(RVA = "0xDE212C", Offset = "0xDE212C", VA = "0xDE212C")]
		public static void DrawWidgetGroup(UISystem uiSystem, UIRenderer renderer, IWidget widget)
		{
		}

		[Token(Token = "0x600288D")]
		[Address(RVA = "0xDEC054", Offset = "0xDEC054", VA = "0xDEC054")]
		public static bool IsDragEvent(Event e)
		{
			return default(bool);
		}

		[Token(Token = "0x600288E")]
		[Address(RVA = "0xDEC0C0", Offset = "0xDEC0C0", VA = "0xDEC0C0")]
		public WidgetUtils()
		{
		}
	}
	[Token(Token = "0x2000708")]
	public class HighlightWidget : WidgetBase
	{
		[Token(Token = "0x4002511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IWidget Widget;

		[Token(Token = "0x4002512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public object ObjectOfInterest;

		[Token(Token = "0x4002513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color HighlightColor;

		[Token(Token = "0x4002514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float HighlightThickness;

		[Token(Token = "0x4002515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float HighlightTime;

		[Token(Token = "0x4002516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private double lastUpdateTime;

		[Token(Token = "0x4002517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float remainingTime;

		[Token(Token = "0x4002518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D lineTexture;

		[Token(Token = "0x6002890")]
		[Address(RVA = "0xDEC118", Offset = "0xDEC118", VA = "0xDEC118")]
		public HighlightWidget()
		{
		}

		[Token(Token = "0x6002891")]
		[Address(RVA = "0xDEC148", Offset = "0xDEC148", VA = "0xDEC148")]
		public HighlightWidget SetContent(IWidget widget)
		{
			return null;
		}

		[Token(Token = "0x6002892")]
		[Address(RVA = "0xDEC150", Offset = "0xDEC150", VA = "0xDEC150")]
		public HighlightWidget SetHighlightColor(Color highlightColor)
		{
			return null;
		}

		[Token(Token = "0x6002893")]
		[Address(RVA = "0xDEC15C", Offset = "0xDEC15C", VA = "0xDEC15C")]
		public HighlightWidget SetHighlightThickness(float highlightThickness)
		{
			return null;
		}

		[Token(Token = "0x6002894")]
		[Address(RVA = "0xDEC164", Offset = "0xDEC164", VA = "0xDEC164")]
		public HighlightWidget SetHighlightTime(float highlightTime)
		{
			return null;
		}

		[Token(Token = "0x6002895")]
		[Address(RVA = "0xDEC16C", Offset = "0xDEC16C", VA = "0xDEC16C")]
		public HighlightWidget SetObjectOfInterest(object objectOfInterest)
		{
			return null;
		}

		[Token(Token = "0x6002896")]
		[Address(RVA = "0xDEC174", Offset = "0xDEC174", VA = "0xDEC174", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x6002897")]
		[Address(RVA = "0xDEC494", Offset = "0xDEC494", VA = "0xDEC494")]
		public void Activate(UISystem uiSystem)
		{
		}

		[Token(Token = "0x6002898")]
		[Address(RVA = "0xDEC550", Offset = "0xDEC550", VA = "0xDEC550", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x6002899")]
		[Address(RVA = "0xDEC764", Offset = "0xDEC764", VA = "0xDEC764", Slot = "29")]
		public override bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x600289A")]
		[Address(RVA = "0xDEC76C", Offset = "0xDEC76C", VA = "0xDEC76C", Slot = "30")]
		public override IWidget[] GetChildWidgets()
		{
			return null;
		}
	}
	[Token(Token = "0x2000709")]
	public class ToolbarWidget : WidgetBase
	{
		[Token(Token = "0x200070A")]
		public delegate void OnButtonPressed(UISystem uiSystem, string id);

		[Token(Token = "0x200070B")]
		public class ButtonInfo
		{
			[Token(Token = "0x400251F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string ButtonId;

			[Token(Token = "0x4002520")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string IconId;

			[Token(Token = "0x4002521")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Rect Bounds;

			[Token(Token = "0x60028A8")]
			[Address(RVA = "0xDED264", Offset = "0xDED264", VA = "0xDED264")]
			public ButtonInfo()
			{
			}
		}

		[Token(Token = "0x4002519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float ButtonSize;

		[Token(Token = "0x400251A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float Padding;

		[Token(Token = "0x400251B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color Background;

		[Token(Token = "0x400251D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<ButtonInfo> buttons;

		[Token(Token = "0x400251E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GUIStyle buttonStyle;

		[Token(Token = "0x1400002D")]
		public event OnButtonPressed ButtonPressed
		{
			[Token(Token = "0x600289B")]
			[Address(RVA = "0xDEC810", Offset = "0xDEC810", VA = "0xDEC810")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600289C")]
			[Address(RVA = "0xDEC8AC", Offset = "0xDEC8AC", VA = "0xDEC8AC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600289D")]
		[Address(RVA = "0xDEC948", Offset = "0xDEC948", VA = "0xDEC948", Slot = "25")]
		public override void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x600289E")]
		[Address(RVA = "0xDECBA8", Offset = "0xDECBA8", VA = "0xDECBA8", Slot = "24")]
		public override void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x600289F")]
		[Address(RVA = "0xDED17C", Offset = "0xDED17C", VA = "0xDED17C")]
		public void AddButton(string buttonId, string iconId)
		{
		}

		[Token(Token = "0x60028A0")]
		[Address(RVA = "0xDECA18", Offset = "0xDECA18", VA = "0xDECA18")]
		private void UpdateButtonBounds()
		{
		}

		[Token(Token = "0x60028A1")]
		[Address(RVA = "0xDED26C", Offset = "0xDED26C", VA = "0xDED26C")]
		public ToolbarWidget SetBackground(Color background)
		{
			return null;
		}

		[Token(Token = "0x60028A2")]
		[Address(RVA = "0xDED278", Offset = "0xDED278", VA = "0xDED278")]
		public ToolbarWidget SetButtonSize(int buttonSize)
		{
			return null;
		}

		[Token(Token = "0x60028A3")]
		[Address(RVA = "0xDED284", Offset = "0xDED284", VA = "0xDED284")]
		public ToolbarWidget()
		{
		}
	}
}
namespace DungeonArchitect.UI.Widgets.GraphEditors
{
	[Token(Token = "0x200070C")]
	public class EditorGraphBuilder : GraphBuilder
	{
		[Token(Token = "0x4002522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityEngine.Object assetObject;

		[Token(Token = "0x4002523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UIPlatform platform;

		[Token(Token = "0x60028A9")]
		[Address(RVA = "0xDED45C", Offset = "0xDED45C", VA = "0xDED45C")]
		public EditorGraphBuilder(Graph graph, UnityEngine.Object assetObject, UIPlatform platform)
		{
		}

		[Token(Token = "0x60028AA")]
		[Address(RVA = "0xDED488", Offset = "0xDED488", VA = "0xDED488", Slot = "5")]
		public override GraphNode CreateNode(Type nodeType, UIUndoSystem undo)
		{
			return null;
		}

		[Token(Token = "0x60028AB")]
		[Address(RVA = "0xDED574", Offset = "0xDED574", VA = "0xDED574", Slot = "4")]
		public override void DestroyNode(GraphNode node, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x60028AC")]
		public override TLink LinkNodes<TLink>(GraphPin outputPin, GraphPin inputPin)
		{
			return null;
		}
	}
	[Token(Token = "0x200070D")]
	public class GraphContextMenuEvent
	{
		[Token(Token = "0x4002524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GraphPin sourcePin;

		[Token(Token = "0x4002525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector2 mouseWorldPosition;

		[Token(Token = "0x4002526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public object userdata;

		[Token(Token = "0x4002527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UISystem uiSystem;

		[Token(Token = "0x60028AD")]
		[Address(RVA = "0xDED584", Offset = "0xDED584", VA = "0xDED584")]
		public GraphContextMenuEvent()
		{
		}
	}
	[Token(Token = "0x200070E")]
	public abstract class GraphContextMenu
	{
		[Token(Token = "0x200070F")]
		public delegate void OnRequestContextMenuCreation(Event e, UISystem uiSystem);

		[Token(Token = "0x2000710")]
		public delegate void OnMenuItemClicked(object userdata, GraphContextMenuEvent e);

		[Token(Token = "0x4002528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected bool dragged;

		[Token(Token = "0x4002529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected int dragButtonId;

		[Token(Token = "0x400252A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected GraphPin sourcePin;

		[Token(Token = "0x400252B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected UnityEngine.Vector2 mouseWorldPosition;

		[Token(Token = "0x1400002E")]
		public event OnRequestContextMenuCreation RequestContextMenuCreation
		{
			[Token(Token = "0x60028AE")]
			[Address(RVA = "0xDED58C", Offset = "0xDED58C", VA = "0xDED58C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60028AF")]
			[Address(RVA = "0xDED628", Offset = "0xDED628", VA = "0xDED628")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400002F")]
		public event OnMenuItemClicked MenuItemClicked
		{
			[Token(Token = "0x60028B0")]
			[Address(RVA = "0xDED6C4", Offset = "0xDED6C4", VA = "0xDED6C4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60028B1")]
			[Address(RVA = "0xDED760", Offset = "0xDED760", VA = "0xDED760")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60028B2")]
		[Address(RVA = "0xDED7FC", Offset = "0xDED7FC", VA = "0xDED7FC")]
		public void HandleInput(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028B3")]
		[Address(RVA = "0xDED8CC", Offset = "0xDED8CC", VA = "0xDED8CC")]
		protected GraphContextMenuEvent BuildEvent(object userdata, UISystem uiSystem)
		{
			return null;
		}

		[Token(Token = "0x60028B4")]
		public abstract void Show(GraphEditor graphEditor, GraphPin sourcePin, UnityEngine.Vector2 mouseWorld, UISystem uiSystem);

		[Token(Token = "0x60028B5")]
		[Address(RVA = "0xDED954", Offset = "0xDED954", VA = "0xDED954")]
		protected void DispatchMenuItemEvent(object action, GraphContextMenuEvent e)
		{
		}

		[Token(Token = "0x60028B6")]
		[Address(RVA = "0xDED970", Offset = "0xDED970", VA = "0xDED970")]
		protected GraphContextMenu()
		{
		}
	}
	[Token(Token = "0x2000711")]
	public class NullGraphContextMenu : GraphContextMenu
	{
		[Token(Token = "0x60028BF")]
		[Address(RVA = "0xDEDBBC", Offset = "0xDEDBBC", VA = "0xDEDBBC", Slot = "4")]
		public override void Show(GraphEditor graphEditor, GraphPin sourcePin, UnityEngine.Vector2 mouseWorld, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028C0")]
		[Address(RVA = "0xDEDBC0", Offset = "0xDEDBC0", VA = "0xDEDBC0")]
		public NullGraphContextMenu()
		{
		}
	}
	[Token(Token = "0x2000712")]
	public class GraphRendererContext
	{
		[Token(Token = "0x400252E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UIResourceLookup Resources;

		[Token(Token = "0x400252F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GraphEditor GraphEditor;

		[Token(Token = "0x60028C1")]
		[Address(RVA = "0xDEDBD0", Offset = "0xDEDBD0", VA = "0xDEDBD0")]
		public GraphRendererContext()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000713")]
	public class GraphEditorStyle
	{
		[Token(Token = "0x4002530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color backgroundColor;

		[Token(Token = "0x4002531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color gridLineColorThick;

		[Token(Token = "0x4002532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color gridLineColorThin;

		[Token(Token = "0x4002533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float gridCellSpacing;

		[Token(Token = "0x4002534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool gridScaling;

		[Token(Token = "0x4002535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int gridNumCells;

		[Token(Token = "0x4002536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string branding;

		[Token(Token = "0x4002537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color brandingColor;

		[Token(Token = "0x4002538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int brandingSize;

		[Token(Token = "0x4002539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string readonlyText;

		[Token(Token = "0x400253A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color readonlyColor;

		[Token(Token = "0x400253B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public int readonlySize;

		[Token(Token = "0x400253C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Color overlayTextColorLo;

		[Token(Token = "0x400253D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Color overlayTextColorHi;

		[Token(Token = "0x400253E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Color selectionBoxColor;

		[Token(Token = "0x400253F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Color commentTextColor;

		[Token(Token = "0x4002540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public bool displayAssetFilename;

		[Token(Token = "0x60028C2")]
		[Address(RVA = "0xDEDC38", Offset = "0xDEDC38", VA = "0xDEDC38")]
		public GraphEditorStyle()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000714")]
	public abstract class GraphEditor : ScriptableObject, IWidget
	{
		[Token(Token = "0x4002541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Graph graph;

		[Token(Token = "0x4002542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected GraphCamera camera;

		[Token(Token = "0x4002543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GraphEditorStyle editorStyle;

		[Token(Token = "0x4002544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected UnityEngine.Object assetObject;

		[Token(Token = "0x4002545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected GraphEditorEvents events;

		[Token(Token = "0x4002546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected float renderCullingBias;

		[Token(Token = "0x4002547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool showFocusHighlight;

		[Token(Token = "0x4002548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rect widgetBounds;

		[Token(Token = "0x4002549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private UnityEngine.Vector2 scrollPosition;

		[Token(Token = "0x400254B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected GraphSelectionBox selectionBox;

		[Token(Token = "0x400254C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private KeyboardState keyboardState;

		[Token(Token = "0x400254D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CursorDragLink cursorDragLink;

		[Token(Token = "0x400254E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected GraphContextMenu contextMenu;

		[Token(Token = "0x400254F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected GraphNodeRendererFactory nodeRenderers;

		[Token(Token = "0x4002550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected GraphRendererContext rendererContext;

		[Token(Token = "0x4002551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected UnityEngine.Vector2 lastMousePosition;

		[Token(Token = "0x4002552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Rect lastDrawBounds;

		[Token(Token = "0x4002553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool graphReadOnly;

		[Token(Token = "0x4002554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		protected bool draggingNodes;

		[Token(Token = "0x17000667")]
		public GraphCamera Camera
		{
			[Token(Token = "0x60028C3")]
			[Address(RVA = "0xDEDD48", Offset = "0xDEDD48", VA = "0xDEDD48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000668")]
		public GraphEditorStyle EditorStyle
		{
			[Token(Token = "0x60028C4")]
			[Address(RVA = "0xDEDD50", Offset = "0xDEDD50", VA = "0xDEDD50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000669")]
		public GraphEditorEvents Events
		{
			[Token(Token = "0x60028C5")]
			[Address(RVA = "0xDEDD80", Offset = "0xDEDD80", VA = "0xDEDD80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700066A")]
		public bool ShowFocusHighlight
		{
			[Token(Token = "0x60028C6")]
			[Address(RVA = "0xDEDD88", Offset = "0xDEDD88", VA = "0xDEDD88", Slot = "15")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60028C7")]
			[Address(RVA = "0xDEDD90", Offset = "0xDEDD90", VA = "0xDEDD90", Slot = "16")]
			set
			{
			}
		}

		[Token(Token = "0x1700066B")]
		public Rect WidgetBounds
		{
			[Token(Token = "0x60028C8")]
			[Address(RVA = "0xDEDD9C", Offset = "0xDEDD9C", VA = "0xDEDD9C", Slot = "13")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x60028C9")]
			[Address(RVA = "0xDEDDA8", Offset = "0xDEDDA8", VA = "0xDEDDA8", Slot = "14")]
			set
			{
			}
		}

		[Token(Token = "0x1700066C")]
		public virtual UnityEngine.Vector2 ScrollPosition
		{
			[Token(Token = "0x60028CA")]
			[Address(RVA = "0xDEDDB4", Offset = "0xDEDDB4", VA = "0xDEDDB4", Slot = "19")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x60028CB")]
			[Address(RVA = "0xDEDDBC", Offset = "0xDEDDBC", VA = "0xDEDDBC", Slot = "20")]
			set
			{
			}
		}

		[Token(Token = "0x1700066D")]
		public IGraphLinkRenderer GraphLinkRenderer
		{
			[Token(Token = "0x60028CC")]
			[Address(RVA = "0xDEDDC4", Offset = "0xDEDDC4", VA = "0xDEDDC4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60028CD")]
			[Address(RVA = "0xDEDDCC", Offset = "0xDEDDCC", VA = "0xDEDDCC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700066E")]
		public UnityEngine.Vector2 LastMousePosition
		{
			[Token(Token = "0x60028CE")]
			[Address(RVA = "0xDEDDD4", Offset = "0xDEDDD4", VA = "0xDEDDD4")]
			get
			{
				return default(UnityEngine.Vector2);
			}
		}

		[Token(Token = "0x1700066F")]
		public Graph Graph
		{
			[Token(Token = "0x60028CF")]
			[Address(RVA = "0xDEDDDC", Offset = "0xDEDDDC", VA = "0xDEDDDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60028D0")]
		[Address(RVA = "0xDEDDE4", Offset = "0xDEDDE4", VA = "0xDEDDE4", Slot = "9")]
		public bool CanAcquireFocus()
		{
			return default(bool);
		}

		[Token(Token = "0x60028D1")]
		protected abstract GraphContextMenu CreateContextMenu();

		[Token(Token = "0x60028D2")]
		protected abstract void InitializeNodeRenderers(GraphNodeRendererFactory nodeRenderers);

		[Token(Token = "0x60028D3")]
		protected abstract IGraphLinkRenderer CreateGraphLinkRenderer();

		[Token(Token = "0x60028D4")]
		protected abstract void OnMenuItemClicked(object userdata, GraphContextMenuEvent e);

		[Token(Token = "0x60028D5")]
		[Address(RVA = "0xDEDDEC", Offset = "0xDEDDEC", VA = "0xDEDDEC", Slot = "25")]
		protected virtual void SortNodesForDeletion(GraphNode[] nodesToDelete)
		{
		}

		[Token(Token = "0x60028D6")]
		[Address(RVA = "0xDEDDF0", Offset = "0xDEDDF0", VA = "0xDEDDF0", Slot = "26")]
		public virtual void SortPinsForDrawing(GraphPin[] pins)
		{
		}

		[Token(Token = "0x60028D7")]
		[Address(RVA = "0xDEDDF4", Offset = "0xDEDDF4", VA = "0xDEDDF4", Slot = "27")]
		protected virtual GraphEditorStyle CreateEditorStyle()
		{
			return null;
		}

		[Token(Token = "0x60028D8")]
		[Address(RVA = "0xDEDE4C", Offset = "0xDEDE4C", VA = "0xDEDE4C", Slot = "12")]
		public UnityEngine.Vector2 GetDesiredSize(UnityEngine.Vector2 size, UISystem uiSystem)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x60028D9")]
		[Address(RVA = "0xDEDE50", Offset = "0xDEDE50", VA = "0xDEDE50", Slot = "28")]
		public virtual void HandleMessage(UISystem uiSystem, WidgetMessage message)
		{
		}

		[Token(Token = "0x60028DA")]
		[Address(RVA = "0xDEDE54", Offset = "0xDEDE54", VA = "0xDEDE54", Slot = "29")]
		protected virtual void DrawHighlight(UIRenderer renderer)
		{
		}

		[Token(Token = "0x60028DB")]
		[Address(RVA = "0xDEDF60", Offset = "0xDEDF60", VA = "0xDEDF60", Slot = "30")]
		public virtual void Init(Graph graph, Rect editorBounds, UnityEngine.Object assetObject, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028DC")]
		[Address(RVA = "0xDEE148", Offset = "0xDEE148", VA = "0xDEE148")]
		public void SetReadOnly(bool graphReadOnly)
		{
		}

		[Token(Token = "0x60028DD")]
		[Address(RVA = "0xDEE154", Offset = "0xDEE154", VA = "0xDEE154", Slot = "31")]
		public virtual void Release(UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028DE")]
		[Address(RVA = "0xDEE248", Offset = "0xDEE248", VA = "0xDEE248")]
		protected void SetGraph(Graph graph)
		{
		}

		[Token(Token = "0x60028DF")]
		[Address(RVA = "0xDEE250", Offset = "0xDEE250", VA = "0xDEE250")]
		public void FocusCameraOnMarker(string markerName, Rect editorBounds)
		{
		}

		[Token(Token = "0x60028E0")]
		[Address(RVA = "0xDE0B38", Offset = "0xDE0B38", VA = "0xDE0B38")]
		public void FocusCameraOnNode(GraphNode node)
		{
		}

		[Token(Token = "0x60028E1")]
		[Address(RVA = "0xDEE44C", Offset = "0xDEE44C", VA = "0xDEE44C", Slot = "32")]
		public virtual bool RequiresInputEveryFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x60028E2")]
		[Address(RVA = "0xDE0A14", Offset = "0xDE0A14", VA = "0xDE0A14")]
		public void FocusCameraOnBestFit(Rect editorBounds)
		{
		}

		[Token(Token = "0x60028E3")]
		[Address(RVA = "0xDEE454", Offset = "0xDEE454", VA = "0xDEE454")]
		public void FocusCameraOnBestFit()
		{
		}

		[Token(Token = "0x60028E4")]
		[Address(RVA = "0xDEE480", Offset = "0xDEE480", VA = "0xDEE480", Slot = "33")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x60028E5")]
		[Address(RVA = "0xDEE774", Offset = "0xDEE774", VA = "0xDEE774")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60028E6")]
		[Address(RVA = "0xDEE964", Offset = "0xDEE964", VA = "0xDEE964")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x60028E7")]
		[Address(RVA = "0xDEE99C", Offset = "0xDEE99C", VA = "0xDEE99C")]
		private void OnUndoRedoPerformed(UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028E8")]
		[Address(RVA = "0xDEE9AC", Offset = "0xDEE9AC", VA = "0xDEE9AC", Slot = "34")]
		public virtual void HandleMarkedDirty(UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028E9")]
		[Address(RVA = "0xDEEA60", Offset = "0xDEEA60", VA = "0xDEEA60", Slot = "35")]
		public virtual void UpdateWidget(UISystem uiSystem, Rect bounds)
		{
		}

		[Token(Token = "0x60028EA")]
		[Address(RVA = "0xDEEA6C", Offset = "0xDEEA6C", VA = "0xDEEA6C", Slot = "36")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x60028EB")]
		[Address(RVA = "0xDEEA70", Offset = "0xDEEA70", VA = "0xDEEA70", Slot = "37")]
		public virtual void HandleGraphStateChanged(UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028EC")]
		[Address(RVA = "0xDEEA74", Offset = "0xDEEA74", VA = "0xDEEA74", Slot = "38")]
		public virtual void HandleNodePropertyChanged(GraphNode node)
		{
		}

		[Token(Token = "0x60028ED")]
		[Address(RVA = "0xDEEA78", Offset = "0xDEEA78", VA = "0xDEEA78")]
		private void HandleBoxSelection(Rect boundsScreenSpace, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028EE")]
		[Address(RVA = "0xDEED10", Offset = "0xDEED10", VA = "0xDEED10")]
		private bool SetSelectedState(GraphNode node, bool selected)
		{
			return default(bool);
		}

		[Token(Token = "0x60028EF")]
		[Address(RVA = "0xDEED54", Offset = "0xDEED54", VA = "0xDEED54")]
		private void HandleSelect(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028F0")]
		[Address(RVA = "0xDEF194", Offset = "0xDEF194", VA = "0xDEF194")]
		protected GraphNode[] GetSelectedNodes()
		{
			return null;
		}

		[Token(Token = "0x60028F1")]
		[Address(RVA = "0xDEF3C4", Offset = "0xDEF3C4", VA = "0xDEF3C4")]
		private void HandleDrag(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028F2")]
		[Address(RVA = "0xDEFBFC", Offset = "0xDEFBFC", VA = "0xDEFBFC")]
		private void HandleDragPin(GraphPin pin, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028F3")]
		[Address(RVA = "0xDEFC18", Offset = "0xDEFC18", VA = "0xDEFC18", Slot = "39")]
		public virtual void HandleInput(Event _e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028F4")]
		[Address(RVA = "0xDF0060", Offset = "0xDF0060", VA = "0xDF0060")]
		private void PerformCopy(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028F5")]
		[Address(RVA = "0xDF03BC", Offset = "0xDF03BC", VA = "0xDF03BC", Slot = "40")]
		protected virtual GraphNode DuplicateNode(GraphNode sourceNode, UISystem uiSystem)
		{
			return null;
		}

		[Token(Token = "0x60028F6")]
		[Address(RVA = "0xDF0474", Offset = "0xDF0474", VA = "0xDF0474")]
		private void PerformPaste(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028F7")]
		[Address(RVA = "0xDEFEBC", Offset = "0xDEFEBC", VA = "0xDEFEBC")]
		private void HandleKeyboard(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028F8")]
		[Address(RVA = "0xDF0934", Offset = "0xDF0934", VA = "0xDF0934", Slot = "41")]
		public virtual void OnNodeSelectionChanged(UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028F9")]
		[Address(RVA = "0xDF0B64", Offset = "0xDF0B64", VA = "0xDF0B64", Slot = "42")]
		public virtual void OnNodeDoubleClicked(UISystem uiSystem, GraphNode node)
		{
		}

		[Token(Token = "0x60028FA")]
		[Address(RVA = "0xDF0C64", Offset = "0xDF0C64", VA = "0xDF0C64")]
		private void OnRequestContextMenuCreation(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028FB")]
		[Address(RVA = "0xDEFFB8", Offset = "0xDEFFB8", VA = "0xDEFFB8")]
		private void HandleDelete(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028FC")]
		[Address(RVA = "0xDF1158", Offset = "0xDF1158", VA = "0xDF1158")]
		public void DeleteNodes(GraphNode[] nodesToDelete, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028FD")]
		[Address(RVA = "0xDF1230", Offset = "0xDF1230", VA = "0xDF1230", Slot = "43")]
		protected virtual void DestroyNode(GraphNode node, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028FE")]
		[Address(RVA = "0xDF0E54", Offset = "0xDF0E54", VA = "0xDF0E54")]
		private void PerformDelete(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x60028FF")]
		[Address(RVA = "0xDF127C", Offset = "0xDF127C", VA = "0xDF127C", Slot = "44")]
		protected virtual void DrawOverlay(UIRenderer renderer, Rect bounds)
		{
		}

		[Token(Token = "0x6002900")]
		[Address(RVA = "0xDF1280", Offset = "0xDF1280", VA = "0xDF1280", Slot = "45")]
		public virtual bool IsCompositeWidget()
		{
			return default(bool);
		}

		[Token(Token = "0x6002901")]
		[Address(RVA = "0xDF1288", Offset = "0xDF1288", VA = "0xDF1288", Slot = "11")]
		public IWidget[] GetChildWidgets()
		{
			return null;
		}

		[Token(Token = "0x6002902")]
		[Address(RVA = "0xDF1290", Offset = "0xDF1290", VA = "0xDF1290", Slot = "46")]
		public virtual void Draw(UISystem uiSystem, UIRenderer renderer)
		{
		}

		[Token(Token = "0x6002903")]
		[Address(RVA = "0xDF29E4", Offset = "0xDF29E4", VA = "0xDF29E4")]
		private void DrawEditorStats(UIRenderer renderer, Rect bounds)
		{
		}

		[Token(Token = "0x6002904")]
		[Address(RVA = "0xDF23F4", Offset = "0xDF23F4", VA = "0xDF23F4")]
		private void DrawBranding(UIRenderer renderer, Rect bounds)
		{
		}

		[Token(Token = "0x6002905")]
		[Address(RVA = "0xDF26D4", Offset = "0xDF26D4", VA = "0xDF26D4")]
		private void DrawReadOnly(UIRenderer renderer, Rect bounds)
		{
		}

		[Token(Token = "0x6002906")]
		[Address(RVA = "0xDF2D74", Offset = "0xDF2D74", VA = "0xDF2D74", Slot = "47")]
		protected virtual void DrawHUD(UISystem uiSystem, UIRenderer renderer, Rect bounds)
		{
		}

		[Token(Token = "0x6002907")]
		public virtual T CreateNode<T>(UnityEngine.Vector2 screenCoord, UISystem uiSystem) where T : GraphNode, new()
		{
			return null;
		}

		[Token(Token = "0x6002908")]
		[Address(RVA = "0xDF3058", Offset = "0xDF3058", VA = "0xDF3058", Slot = "49")]
		public virtual GraphNode CreateNode(UnityEngine.Vector2 screenCoord, Type nodeType, UISystem uiSystem)
		{
			return null;
		}

		[Token(Token = "0x6002909")]
		[Address(RVA = "0xDEF160", Offset = "0xDEF160", VA = "0xDEF160")]
		protected void BringToFront(GraphNode node)
		{
		}

		[Token(Token = "0x600290A")]
		[Address(RVA = "0xDF1C94", Offset = "0xDF1C94", VA = "0xDF1C94")]
		private void DrawGrid(UIRenderer renderer, Rect bounds, UnityEngine.Vector2 worldSize)
		{
		}

		[Token(Token = "0x600290B")]
		[Address(RVA = "0xDE0C04", Offset = "0xDE0C04", VA = "0xDE0C04")]
		public void SelectNode(GraphNode nodeToSelect, UISystem uiSystem)
		{
		}

		[Token(Token = "0x600290C")]
		[Address(RVA = "0xDF31B4", Offset = "0xDF31B4", VA = "0xDF31B4")]
		public GraphPin GetPinUnderPosition(UnityEngine.Vector2 worldPosition)
		{
			return null;
		}

		[Token(Token = "0x600290D")]
		[Address(RVA = "0xDF34BC", Offset = "0xDF34BC", VA = "0xDF34BC")]
		private void HandleMouseDraggedLinkReleased(UnityEngine.Vector2 mousePositionScreen, UISystem uiSystem)
		{
		}

		[Token(Token = "0x600290E")]
		[Address(RVA = "0xDF38D4", Offset = "0xDF38D4", VA = "0xDF38D4", Slot = "50")]
		protected virtual void CreateLinkBetweenPins(GraphPin outputPin, GraphPin inputPin, UISystem uiSystem)
		{
		}

		[Token(Token = "0x600290F")]
		[Address(RVA = "0xDF3AC0", Offset = "0xDF3AC0", VA = "0xDF3AC0", Slot = "51")]
		public virtual GraphSchema GetGraphSchema()
		{
			return null;
		}

		[Token(Token = "0x6002910")]
		public virtual T CreateLink<T>(Graph graph, GraphPin output, GraphPin input, UISystem uiSystem) where T : GraphLink
		{
			return null;
		}

		[Token(Token = "0x6002911")]
		protected abstract string GetGraphNotInitializedMessage();

		[Token(Token = "0x6002912")]
		[Address(RVA = "0xDF1938", Offset = "0xDF1938", VA = "0xDF1938")]
		private void DrawGraphNotInitializedMessage(UIRenderer renderer, Rect bounds)
		{
		}

		[Token(Token = "0x6002913")]
		[Address(RVA = "0xDF3B1C", Offset = "0xDF3B1C", VA = "0xDF3B1C")]
		protected GraphEditor()
		{
		}
	}
	[Token(Token = "0x2000716")]
	public class GraphSelectionBox
	{
		[Token(Token = "0x2000717")]
		public delegate void OnSelectionPerformed(Rect boundsScreenSpace, UISystem uiSystem);

		[Token(Token = "0x400255A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rect bounds;

		[Token(Token = "0x400255B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector2 dragStart;

		[Token(Token = "0x400255C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int dragButton;

		[Token(Token = "0x400255D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool dragging;

		[Token(Token = "0x17000670")]
		public Rect Bounds
		{
			[Token(Token = "0x600291B")]
			[Address(RVA = "0xDF4DF4", Offset = "0xDF4DF4", VA = "0xDF4DF4")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x600291C")]
			[Address(RVA = "0xDF4E00", Offset = "0xDF4E00", VA = "0xDF4E00")]
			set
			{
			}
		}

		[Token(Token = "0x17000671")]
		public bool Dragging
		{
			[Token(Token = "0x600291D")]
			[Address(RVA = "0xDF4E0C", Offset = "0xDF4E0C", VA = "0xDF4E0C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000030")]
		public event OnSelectionPerformed SelectionPerformed
		{
			[Token(Token = "0x6002919")]
			[Address(RVA = "0xDF4CBC", Offset = "0xDF4CBC", VA = "0xDF4CBC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600291A")]
			[Address(RVA = "0xDF4D58", Offset = "0xDF4D58", VA = "0xDF4D58")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600291E")]
		[Address(RVA = "0xDF4E14", Offset = "0xDF4E14", VA = "0xDF4E14")]
		public void HandleInput(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x600291F")]
		[Address(RVA = "0xDF4FA4", Offset = "0xDF4FA4", VA = "0xDF4FA4")]
		private void ProcessMouseDrag(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x6002920")]
		[Address(RVA = "0xDF4F18", Offset = "0xDF4F18", VA = "0xDF4F18")]
		private void ProcessMouseDown(Event e)
		{
		}

		[Token(Token = "0x6002921")]
		[Address(RVA = "0xDF504C", Offset = "0xDF504C", VA = "0xDF504C")]
		private void ProcessMouseUp(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x6002922")]
		[Address(RVA = "0xDF50D8", Offset = "0xDF50D8", VA = "0xDF50D8")]
		private void ProcessLayoutEvent(Event e)
		{
		}

		[Token(Token = "0x6002923")]
		[Address(RVA = "0xDF5148", Offset = "0xDF5148", VA = "0xDF5148")]
		public bool IsSelectionValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6002924")]
		[Address(RVA = "0xDF5188", Offset = "0xDF5188", VA = "0xDF5188")]
		public void Draw(UIRenderer renderer, GraphEditorStyle style)
		{
		}

		[Token(Token = "0x6002925")]
		[Address(RVA = "0xDF5114", Offset = "0xDF5114", VA = "0xDF5114")]
		private void UpdateBounds(UnityEngine.Vector2 start, UnityEngine.Vector2 end)
		{
		}

		[Token(Token = "0x6002926")]
		[Address(RVA = "0xDF535C", Offset = "0xDF535C", VA = "0xDF535C")]
		public GraphSelectionBox()
		{
		}
	}
	[Token(Token = "0x2000718")]
	internal class KeyboardState
	{
		[Token(Token = "0x400255E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<KeyCode, bool> state;

		[Token(Token = "0x400255F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool shift;

		[Token(Token = "0x4002560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool control;

		[Token(Token = "0x4002561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private bool alt;

		[Token(Token = "0x17000672")]
		public bool ControlPressed
		{
			[Token(Token = "0x600292E")]
			[Address(RVA = "0xDF56D4", Offset = "0xDF56D4", VA = "0xDF56D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000673")]
		public bool ShiftPressed
		{
			[Token(Token = "0x600292F")]
			[Address(RVA = "0xDF56DC", Offset = "0xDF56DC", VA = "0xDF56DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000674")]
		public bool AltPressed
		{
			[Token(Token = "0x6002930")]
			[Address(RVA = "0xDF56E4", Offset = "0xDF56E4", VA = "0xDF56E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600292B")]
		[Address(RVA = "0xDF54B8", Offset = "0xDF54B8", VA = "0xDF54B8")]
		public void SetState(KeyCode keyCode, bool pressed)
		{
		}

		[Token(Token = "0x600292C")]
		[Address(RVA = "0xDF5578", Offset = "0xDF5578", VA = "0xDF5578")]
		public void HandleInput(Event e)
		{
		}

		[Token(Token = "0x600292D")]
		[Address(RVA = "0xDF5640", Offset = "0xDF5640", VA = "0xDF5640")]
		public bool GetSate(KeyCode keyCode)
		{
			return default(bool);
		}

		[Token(Token = "0x6002931")]
		[Address(RVA = "0xDF56EC", Offset = "0xDF56EC", VA = "0xDF56EC")]
		public KeyboardState()
		{
		}
	}
	[Token(Token = "0x2000719")]
	internal class CursorDragLink
	{
		[Token(Token = "0x200071A")]
		public delegate void OnDraggedLinkReleased(UnityEngine.Vector2 mousePositionScreen, UISystem uiSystem);

		[Token(Token = "0x4002562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GraphLink link;

		[Token(Token = "0x4002563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphPin attachedPin;

		[Token(Token = "0x4002564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GraphPin mousePin;

		[Token(Token = "0x4002565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool active;

		[Token(Token = "0x4002566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private UnityEngine.Vector2 mouseScreenPosition;

		[Token(Token = "0x17000675")]
		public GraphPin AttachedPin
		{
			[Token(Token = "0x6002932")]
			[Address(RVA = "0xDF5768", Offset = "0xDF5768", VA = "0xDF5768")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000031")]
		public event OnDraggedLinkReleased DraggedLinkReleased
		{
			[Token(Token = "0x6002933")]
			[Address(RVA = "0xDF5770", Offset = "0xDF5770", VA = "0xDF5770")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002934")]
			[Address(RVA = "0xDF580C", Offset = "0xDF580C", VA = "0xDF580C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002935")]
		[Address(RVA = "0xDF58A8", Offset = "0xDF58A8", VA = "0xDF58A8")]
		public CursorDragLink()
		{
		}

		[Token(Token = "0x6002936")]
		[Address(RVA = "0xDF5994", Offset = "0xDF5994", VA = "0xDF5994")]
		public void Destroy()
		{
		}

		[Token(Token = "0x6002937")]
		[Address(RVA = "0xDF5A08", Offset = "0xDF5A08", VA = "0xDF5A08")]
		public void Activate(GraphPin fromPin, UISystem uiSystem)
		{
		}

		[Token(Token = "0x6002938")]
		[Address(RVA = "0xDF5AAC", Offset = "0xDF5AAC", VA = "0xDF5AAC")]
		public void Deactivate(UISystem uiSystem)
		{
		}

		[Token(Token = "0x6002939")]
		[Address(RVA = "0xDF5AD0", Offset = "0xDF5AD0", VA = "0xDF5AD0")]
		public void Draw(UIRenderer renderer, GraphRendererContext rendererContext, GraphCamera camera)
		{
		}

		[Token(Token = "0x600293A")]
		[Address(RVA = "0xDF5D5C", Offset = "0xDF5D5C", VA = "0xDF5D5C")]
		public void HandleInput(Event e, UISystem uiSystem)
		{
		}

		[Token(Token = "0x600293B")]
		[Address(RVA = "0xDF5A78", Offset = "0xDF5A78", VA = "0xDF5A78")]
		private void AttachPinToLink(GraphPin pin)
		{
		}
	}
	[Token(Token = "0x200071B")]
	internal class NodeZIndexComparer : IComparer<GraphNode>
	{
		[Token(Token = "0x6002940")]
		[Address(RVA = "0xDF5F3C", Offset = "0xDF5F3C", VA = "0xDF5F3C", Slot = "4")]
		public int Compare(GraphNode x, GraphNode y)
		{
			return default(int);
		}

		[Token(Token = "0x6002941")]
		[Address(RVA = "0xDF5FFC", Offset = "0xDF5FFC", VA = "0xDF5FFC")]
		public NodeZIndexComparer()
		{
		}
	}
	[Token(Token = "0x200071C")]
	internal class NodeReversedZIndexComparer : IComparer<GraphNode>
	{
		[Token(Token = "0x6002942")]
		[Address(RVA = "0xDF6004", Offset = "0xDF6004", VA = "0xDF6004", Slot = "4")]
		public int Compare(GraphNode x, GraphNode y)
		{
			return default(int);
		}

		[Token(Token = "0x6002943")]
		[Address(RVA = "0xDF60C4", Offset = "0xDF60C4", VA = "0xDF60C4")]
		public NodeReversedZIndexComparer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200071D")]
	public class GraphEvent<T> where T : EventArgs
	{
		[Token(Token = "0x4002569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<EventHandler<T>> delegates;

		[Token(Token = "0x14000032")]
		[SerializeField]
		private event EventHandler<T> _Event
		{
			[Token(Token = "0x6002944")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002945")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000033")]
		public event EventHandler<T> Event
		{
			[Token(Token = "0x6002946")]
			add
			{
			}
			[Token(Token = "0x6002947")]
			remove
			{
			}
		}

		[Token(Token = "0x6002948")]
		public void Notify(T args)
		{
		}

		[Token(Token = "0x6002949")]
		public void Clear()
		{
		}

		[Token(Token = "0x600294A")]
		public GraphEvent()
		{
		}
	}
	[Token(Token = "0x200071E")]
	public class GraphNodeEventArgs : EventArgs
	{
		[Token(Token = "0x17000676")]
		public UISystem uiSystem
		{
			[Token(Token = "0x600294D")]
			[Address(RVA = "0xDF61E4", Offset = "0xDF61E4", VA = "0xDF61E4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600294E")]
			[Address(RVA = "0xDF61EC", Offset = "0xDF61EC", VA = "0xDF61EC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000677")]
		public GraphNode[] Nodes
		{
			[Token(Token = "0x600294F")]
			[Address(RVA = "0xDF61F4", Offset = "0xDF61F4", VA = "0xDF61F4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002950")]
			[Address(RVA = "0xDF61FC", Offset = "0xDF61FC", VA = "0xDF61FC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600294B")]
		[Address(RVA = "0xDF60CC", Offset = "0xDF60CC", VA = "0xDF60CC")]
		public GraphNodeEventArgs(UISystem uiSystem, GraphNode[] nodes)
		{
		}

		[Token(Token = "0x600294C")]
		[Address(RVA = "0xDF613C", Offset = "0xDF613C", VA = "0xDF613C")]
		public GraphNodeEventArgs(UISystem uiSystem, GraphNode node)
		{
		}
	}
	[Token(Token = "0x200071F")]
	public class GraphEventArgs : EventArgs
	{
		[Token(Token = "0x400256C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Graph graph;

		[Token(Token = "0x17000678")]
		public Graph Graph
		{
			[Token(Token = "0x6002952")]
			[Address(RVA = "0xDF6270", Offset = "0xDF6270", VA = "0xDF6270")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002951")]
		[Address(RVA = "0xDF6204", Offset = "0xDF6204", VA = "0xDF6204")]
		public GraphEventArgs(Graph graph)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000720")]
	public class GraphEditorEvents
	{
		[Token(Token = "0x400256D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GraphEvent<GraphNodeEventArgs> OnNodeDragStart;

		[Token(Token = "0x400256E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GraphEvent<GraphNodeEventArgs> OnNodeDragEnd;

		[Token(Token = "0x400256F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GraphEvent<GraphNodeEventArgs> OnNodeDragged;

		[Token(Token = "0x4002570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GraphEvent<GraphNodeEventArgs> OnNodeCreated;

		[Token(Token = "0x4002571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GraphEvent<GraphNodeEventArgs> OnNodeSelectionChanged;

		[Token(Token = "0x4002572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GraphEvent<GraphNodeEventArgs> OnNodeDoubleClicked;

		[Token(Token = "0x6002953")]
		[Address(RVA = "0xDF6278", Offset = "0xDF6278", VA = "0xDF6278")]
		public GraphEditorEvents()
		{
		}
	}
	[Token(Token = "0x2000721")]
	public class GraphEditorUtils
	{
		[Token(Token = "0x6002954")]
		[Address(RVA = "0xDF6388", Offset = "0xDF6388", VA = "0xDF6388")]
		public static void AddToAsset(UIPlatform platform, UnityEngine.Object assetObject, GraphLink link)
		{
		}

		[Token(Token = "0x6002955")]
		[Address(RVA = "0xDF6440", Offset = "0xDF6440", VA = "0xDF6440")]
		public static void AddToAsset(UIPlatform platform, UnityEngine.Object assetObject, GraphNode node)
		{
		}

		[Token(Token = "0x6002956")]
		[Address(RVA = "0xDF6794", Offset = "0xDF6794", VA = "0xDF6794")]
		public GraphEditorUtils()
		{
		}
	}
	[Token(Token = "0x2000722")]
	public class GraphEditorConstants
	{
		[Token(Token = "0x4002573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color PIN_COLOR;

		[Token(Token = "0x4002574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Color PIN_COLOR_HOVER;

		[Token(Token = "0x4002575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly Color PIN_COLOR_CLICK;

		[Token(Token = "0x4002576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly Color NODE_COLOR;

		[Token(Token = "0x4002577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly Color NODE_COLOR_SELECTED;

		[Token(Token = "0x4002578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly Color TEXT_COLOR;

		[Token(Token = "0x4002579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly Color TEXT_COLOR_SELECTED;

		[Token(Token = "0x6002957")]
		[Address(RVA = "0xDF679C", Offset = "0xDF679C", VA = "0xDF679C")]
		public GraphEditorConstants()
		{
		}
	}
	[Token(Token = "0x2000723")]
	public class GraphOperations
	{
		[Token(Token = "0x6002959")]
		public static T CreateNode<T>(Graph graph, UIUndoSystem undo) where T : GraphNode
		{
			return null;
		}

		[Token(Token = "0x600295A")]
		[Address(RVA = "0xDF6854", Offset = "0xDF6854", VA = "0xDF6854")]
		public static GraphNode CreateNode(Graph graph, Type t, UIUndoSystem undo)
		{
			return null;
		}

		[Token(Token = "0x600295B")]
		[Address(RVA = "0xDF68FC", Offset = "0xDF68FC", VA = "0xDF68FC")]
		private static void InitializeCreatedNode(Graph graph, GraphNode node, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x600295C")]
		[Address(RVA = "0xDF6CF8", Offset = "0xDF6CF8", VA = "0xDF6CF8")]
		private static void DestroyEmitterNodes(Graph graph, MarkerNode markerNode, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x600295D")]
		public static T DuplicateNode<T>(Graph graph, T originalNode, UIUndoSystem undo) where T : GraphNode
		{
			return null;
		}

		[Token(Token = "0x600295E")]
		[Address(RVA = "0xDF7040", Offset = "0xDF7040", VA = "0xDF7040")]
		public static void DestroyNode(GraphNode node, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x600295F")]
		[Address(RVA = "0xDF7500", Offset = "0xDF7500", VA = "0xDF7500")]
		public static void DestroyLink(GraphLink link, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x6002960")]
		[Address(RVA = "0xDF74B8", Offset = "0xDF74B8", VA = "0xDF74B8")]
		public static void BreakInputLinks(GraphNode node, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x6002961")]
		[Address(RVA = "0xDF74DC", Offset = "0xDF74DC", VA = "0xDF74DC")]
		public static void BreakOutputLinks(GraphNode node, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x6002962")]
		[Address(RVA = "0xDF7670", Offset = "0xDF7670", VA = "0xDF7670")]
		private static void BreakLinks(GraphPin[] pins, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x6002963")]
		[Address(RVA = "0xDF76DC", Offset = "0xDF76DC", VA = "0xDF76DC")]
		private static void BreakLinks(GraphPin pin, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x6002964")]
		public static T CreateLink<T>(Graph graph) where T : GraphLink
		{
			return null;
		}

		[Token(Token = "0x6002965")]
		[Address(RVA = "0xDF7754", Offset = "0xDF7754", VA = "0xDF7754")]
		public GraphOperations()
		{
		}
	}
	[Token(Token = "0x2000724")]
	internal class GraphInputHandler
	{
		[Token(Token = "0x6002966")]
		[Address(RVA = "0xDF775C", Offset = "0xDF775C", VA = "0xDF775C")]
		public static bool HandleNodeInput(GraphNode node, Event e, GraphEditor graphEditor, UISystem uiSystem)
		{
			return default(bool);
		}

		[Token(Token = "0x6002967")]
		[Address(RVA = "0xDF7978", Offset = "0xDF7978", VA = "0xDF7978")]
		public static bool HandlePinInput(GraphPin pin, Event e, GraphEditor graphEditor, UISystem uiSystem)
		{
			return default(bool);
		}

		[Token(Token = "0x6002968")]
		[Address(RVA = "0xDF7B58", Offset = "0xDF7B58", VA = "0xDF7B58")]
		private static void DestroyPinLinks(GraphPin pin, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x6002969")]
		[Address(RVA = "0xDF7BDC", Offset = "0xDF7BDC", VA = "0xDF7BDC")]
		public GraphInputHandler()
		{
		}
	}
	[Token(Token = "0x2000725")]
	public interface IGraphLinkRenderer
	{
		[Token(Token = "0x600296A")]
		void DrawGraphLink(UIRenderer renderer, GraphRendererContext rendererContext, GraphLink link, GraphCamera camera);
	}
	[Token(Token = "0x2000726")]
	public class SplineGraphLinkRenderer : IGraphLinkRenderer
	{
		[Token(Token = "0x600296B")]
		[Address(RVA = "0xDF7BE4", Offset = "0xDF7BE4", VA = "0xDF7BE4", Slot = "4")]
		public void DrawGraphLink(UIRenderer renderer, GraphRendererContext rendererContext, GraphLink link, GraphCamera camera)
		{
		}

		[Token(Token = "0x600296C")]
		[Address(RVA = "0xDF8178", Offset = "0xDF8178", VA = "0xDF8178")]
		public SplineGraphLinkRenderer()
		{
		}
	}
	[Token(Token = "0x2000727")]
	public class StraightLineGraphLinkRenderer : IGraphLinkRenderer
	{
		[Token(Token = "0x600296D")]
		[Address(RVA = "0xDF8180", Offset = "0xDF8180", VA = "0xDF8180")]
		private UnityEngine.Vector2 GetPointOnNodeBounds(UnityEngine.Vector2 position, GraphPin pin, float distanceBias)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x600296E")]
		[Address(RVA = "0xDF8418", Offset = "0xDF8418", VA = "0xDF8418", Slot = "4")]
		public void DrawGraphLink(UIRenderer renderer, GraphRendererContext rendererContext, GraphLink link, GraphCamera camera)
		{
		}

		[Token(Token = "0x600296F")]
		[Address(RVA = "0xDF8588", Offset = "0xDF8588", VA = "0xDF8588")]
		public static void DrawLine(UIRenderer renderer, UnityEngine.Vector2 startPos, UnityEngine.Vector2 endPos, GraphCamera camera, Color lineColor, float lineThickness)
		{
		}

		[Token(Token = "0x6002970")]
		[Address(RVA = "0xDF8968", Offset = "0xDF8968", VA = "0xDF8968")]
		public StraightLineGraphLinkRenderer()
		{
		}
	}
	[Token(Token = "0x2000728")]
	public class GraphNodeRenderer
	{
		[Token(Token = "0x6002971")]
		[Address(RVA = "0xDF8970", Offset = "0xDF8970", VA = "0xDF8970", Slot = "4")]
		protected virtual Color getBackgroundColor(GraphNode node)
		{
			return default(Color);
		}

		[Token(Token = "0x6002972")]
		[Address(RVA = "0xDF8A18", Offset = "0xDF8A18", VA = "0xDF8A18", Slot = "5")]
		public virtual void Draw(UIRenderer renderer, GraphRendererContext rendererContext, GraphNode node, GraphCamera camera)
		{
		}

		[Token(Token = "0x6002973")]
		[Address(RVA = "0xDF8F58", Offset = "0xDF8F58", VA = "0xDF8F58", Slot = "6")]
		public virtual void Release()
		{
		}

		[Token(Token = "0x6002974")]
		[Address(RVA = "0xDF8F5C", Offset = "0xDF8F5C", VA = "0xDF8F5C", Slot = "7")]
		protected virtual void DrawTextCentered(UIRenderer renderer, GraphRendererContext rendererContext, GraphNode node, GraphCamera camera, string text)
		{
		}

		[Token(Token = "0x6002975")]
		[Address(RVA = "0xDF8FEC", Offset = "0xDF8FEC", VA = "0xDF8FEC", Slot = "8")]
		protected virtual void DrawTextCentered(UIRenderer renderer, GraphRendererContext rendererContext, GraphNode node, GraphCamera camera, string text, UnityEngine.Vector2 offset)
		{
		}

		[Token(Token = "0x6002976")]
		[Address(RVA = "0xDF94BC", Offset = "0xDF94BC", VA = "0xDF94BC")]
		protected void DrawNodeTexture(UIRenderer renderer, GraphRendererContext rendererContext, GraphNode node, GraphCamera camera, string textureName)
		{
		}

		[Token(Token = "0x6002977")]
		[Address(RVA = "0xDF972C", Offset = "0xDF972C", VA = "0xDF972C")]
		public GraphNodeRenderer()
		{
		}
	}
	[Token(Token = "0x2000729")]
	public class GraphNodeRendererFactory
	{
		[Token(Token = "0x400257A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GraphNodeRenderer defaultRenderer;

		[Token(Token = "0x400257B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<Type, GraphNodeRenderer> renderers;

		[Token(Token = "0x6002978")]
		[Address(RVA = "0xDF9734", Offset = "0xDF9734", VA = "0xDF9734")]
		public void RegisterNodeRenderer(Type nodeType, GraphNodeRenderer renderer)
		{
		}

		[Token(Token = "0x6002979")]
		[Address(RVA = "0xDF97D8", Offset = "0xDF97D8", VA = "0xDF97D8")]
		public GraphNodeRenderer GetRenderer(Type nodeType)
		{
			return null;
		}

		[Token(Token = "0x600297A")]
		[Address(RVA = "0xDF986C", Offset = "0xDF986C", VA = "0xDF986C")]
		public void Release()
		{
		}

		[Token(Token = "0x600297B")]
		[Address(RVA = "0xDF9A08", Offset = "0xDF9A08", VA = "0xDF9A08")]
		public GraphNodeRendererFactory()
		{
		}
	}
	[Token(Token = "0x200072A")]
	public class GraphPinRenderer
	{
		[Token(Token = "0x600297C")]
		[Address(RVA = "0xDF8B6C", Offset = "0xDF8B6C", VA = "0xDF8B6C")]
		public static void Draw(UIRenderer renderer, GraphRendererContext rendererContext, GraphPin pin, GraphCamera camera)
		{
		}

		[Token(Token = "0x600297D")]
		[Address(RVA = "0xDF9AB4", Offset = "0xDF9AB4", VA = "0xDF9AB4")]
		private static Color GetPinColor(GraphPin pin)
		{
			return default(Color);
		}

		[Token(Token = "0x600297E")]
		[Address(RVA = "0xDF9B84", Offset = "0xDF9B84", VA = "0xDF9B84")]
		public GraphPinRenderer()
		{
		}
	}
	[Token(Token = "0x200072B")]
	public class GraphTooltip
	{
		[Token(Token = "0x400257C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string message;

		[Token(Token = "0x600297F")]
		[Address(RVA = "0xDF9B8C", Offset = "0xDF9B8C", VA = "0xDF9B8C")]
		public static void Clear()
		{
		}

		[Token(Token = "0x6002980")]
		[Address(RVA = "0xDF9BFC", Offset = "0xDF9BFC", VA = "0xDF9BFC")]
		public GraphTooltip()
		{
		}
	}
	[Token(Token = "0x200072C")]
	public class GraphTooltipRenderer
	{
		[Token(Token = "0x6002982")]
		[Address(RVA = "0xDF9C64", Offset = "0xDF9C64", VA = "0xDF9C64")]
		public static void Draw(UIRenderer renderer, GraphRendererContext rendererContext, UnityEngine.Vector2 mousePosition)
		{
		}

		[Token(Token = "0x6002983")]
		[Address(RVA = "0xDFA1C4", Offset = "0xDFA1C4", VA = "0xDFA1C4")]
		public GraphTooltipRenderer()
		{
		}
	}
}
namespace DungeonArchitect.Triangulator
{
	[Token(Token = "0x200072D")]
	public class Delauney
	{
		[Token(Token = "0x6002984")]
		[Address(RVA = "0xDFA1CC", Offset = "0xDFA1CC", VA = "0xDFA1CC")]
		public static List<Triangle> Triangulate(List<DungeonArchitect.Triangulator.Geometry.Point> Vertex)
		{
			return null;
		}

		[Token(Token = "0x6002985")]
		[Address(RVA = "0xDFADBC", Offset = "0xDFADBC", VA = "0xDFADBC")]
		private static bool InCircle(DungeonArchitect.Triangulator.Geometry.Point p, DungeonArchitect.Triangulator.Geometry.Point p1, DungeonArchitect.Triangulator.Geometry.Point p2, DungeonArchitect.Triangulator.Geometry.Point p3)
		{
			return default(bool);
		}

		[Token(Token = "0x6002986")]
		[Address(RVA = "0xDFB090", Offset = "0xDFB090", VA = "0xDFB090")]
		public Delauney()
		{
		}
	}
	[Token(Token = "0x200072E")]
	public struct DelauneyTriangle
	{
		[Token(Token = "0x400257D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int p1;

		[Token(Token = "0x400257E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int p2;

		[Token(Token = "0x400257F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int p3;
	}
	[Token(Token = "0x200072F")]
	internal struct IEDGE
	{
		[Token(Token = "0x4002580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int p1;

		[Token(Token = "0x4002581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int p2;
	}
	[Token(Token = "0x2000730")]
	public class DelauneyV2
	{
		[Token(Token = "0x4002582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float EPSILON;

		[Token(Token = "0x6002987")]
		[Address(RVA = "0xDFB098", Offset = "0xDFB098", VA = "0xDFB098")]
		public static DelauneyTriangle[] Triangulate(UnityEngine.Vector2[] vertices)
		{
			return null;
		}

		[Token(Token = "0x6002988")]
		[Address(RVA = "0xDFB918", Offset = "0xDFB918", VA = "0xDFB918")]
		private static bool CircumCircle(float xp, float yp, float x1, float y1, float x2, float y2, float x3, float y3, ref float xc, ref float yc, ref float r)
		{
			return default(bool);
		}

		[Token(Token = "0x6002989")]
		[Address(RVA = "0xDFBB68", Offset = "0xDFBB68", VA = "0xDFBB68")]
		public DelauneyV2()
		{
		}
	}
}
namespace DungeonArchitect.Triangulator.Geometry
{
	[Token(Token = "0x2000731")]
	public class Edge : IEquatable<Edge>
	{
		[Token(Token = "0x4002583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int p1;

		[Token(Token = "0x4002584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int p2;

		[Token(Token = "0x600298B")]
		[Address(RVA = "0xDFB008", Offset = "0xDFB008", VA = "0xDFB008")]
		public Edge(int point1, int point2)
		{
		}

		[Token(Token = "0x600298C")]
		[Address(RVA = "0xDFBBC0", Offset = "0xDFBBC0", VA = "0xDFBBC0")]
		public Edge()
		{
		}

		[Token(Token = "0x600298D")]
		[Address(RVA = "0xDFB034", Offset = "0xDFB034", VA = "0xDFB034", Slot = "4")]
		public bool Equals(Edge other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000732")]
	public class Point
	{
		[Token(Token = "0x4002585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected double _X;

		[Token(Token = "0x4002586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected double _Y;

		[Token(Token = "0x17000679")]
		public double X
		{
			[Token(Token = "0x600298F")]
			[Address(RVA = "0xDFBBDC", Offset = "0xDFBBDC", VA = "0xDFBBDC")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6002990")]
			[Address(RVA = "0xDFBBE4", Offset = "0xDFBBE4", VA = "0xDFBBE4")]
			set
			{
			}
		}

		[Token(Token = "0x1700067A")]
		public double Y
		{
			[Token(Token = "0x6002991")]
			[Address(RVA = "0xDFBBEC", Offset = "0xDFBBEC", VA = "0xDFBBEC")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6002992")]
			[Address(RVA = "0xDFBBF4", Offset = "0xDFBBF4", VA = "0xDFBBF4")]
			set
			{
			}
		}

		[Token(Token = "0x600298E")]
		[Address(RVA = "0xDFAD84", Offset = "0xDFAD84", VA = "0xDFAD84")]
		public Point(double x, double y)
		{
		}

		[Token(Token = "0x6002993")]
		[Address(RVA = "0xDFBBFC", Offset = "0xDFBBFC", VA = "0xDFBBFC")]
		public bool Equals2D(Point other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000733")]
	public class Point<T> : Point
	{
		[Token(Token = "0x4002587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T _attr;

		[Token(Token = "0x1700067B")]
		public T Attribute
		{
			[Token(Token = "0x6002996")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6002997")]
			set
			{
			}
		}

		[Token(Token = "0x6002994")]
		public Point(double x, double y, T attribute)
		{
		}

		[Token(Token = "0x6002995")]
		public Point(double x, double y)
		{
		}
	}
	[Token(Token = "0x2000734")]
	public struct Triangle
	{
		[Token(Token = "0x4002588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int p1;

		[Token(Token = "0x4002589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int p2;

		[Token(Token = "0x400258A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int p3;

		[Token(Token = "0x6002998")]
		[Address(RVA = "0xDFADB0", Offset = "0xDFADB0", VA = "0xDFADB0")]
		public Triangle(int point1, int point2, int point3)
		{
		}
	}
}
namespace DungeonArchitect.Splatmap
{
	[Token(Token = "0x2000735")]
	public class SplatData
	{
		[Token(Token = "0x400258B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float[,] data;

		[Token(Token = "0x1700067C")]
		public float this[IntVector2 coords]
		{
			[Token(Token = "0x6002999")]
			[Address(RVA = "0xDFBC38", Offset = "0xDFBC38", VA = "0xDFBC38")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600299A")]
			[Address(RVA = "0xDFBC88", Offset = "0xDFBC88", VA = "0xDFBC88")]
			set
			{
			}
		}

		[Token(Token = "0x1700067D")]
		public float[,] Data
		{
			[Token(Token = "0x600299B")]
			[Address(RVA = "0xDFBCD8", Offset = "0xDFBCD8", VA = "0xDFBCD8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600299C")]
		[Address(RVA = "0xDFBCE0", Offset = "0xDFBCE0", VA = "0xDFBCE0")]
		public SplatData(int textureSize)
		{
		}

		[Token(Token = "0x600299D")]
		[Address(RVA = "0xDFBD58", Offset = "0xDFBD58", VA = "0xDFBD58")]
		public void Write(Texture2D texture)
		{
		}
	}
	[Token(Token = "0x2000736")]
	public class SplatRasterizer
	{
		[Token(Token = "0x2000737")]
		private struct FloodFillPixelInfo
		{
			[Token(Token = "0x400258D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IntVector2 currentPixel;

			[Token(Token = "0x400258E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public IntVector2 sourcePixel;

			[Token(Token = "0x400258F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float startValue;

			[Token(Token = "0x60029A8")]
			[Address(RVA = "0xDFCE38", Offset = "0xDFCE38", VA = "0xDFCE38")]
			public FloodFillPixelInfo(IntVector2 currentPixel, IntVector2 sourcePixel, float startValue)
			{
			}

			[Token(Token = "0x60029A9")]
			[Address(RVA = "0xDFC418", Offset = "0xDFC418", VA = "0xDFC418")]
			public float DistanceToSource()
			{
				return default(float);
			}
		}

		[Token(Token = "0x400258C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SplatData splatData;

		[Token(Token = "0x600299E")]
		[Address(RVA = "0xDFBF10", Offset = "0xDFBF10", VA = "0xDFBF10")]
		public SplatRasterizer(SplatData splatData)
		{
		}

		[Token(Token = "0x600299F")]
		[Address(RVA = "0xDFBF38", Offset = "0xDFBF38", VA = "0xDFBF38")]
		public void DecayFloodFill(float decayMultiplier)
		{
		}

		[Token(Token = "0x60029A0")]
		[Address(RVA = "0xDFC2A4", Offset = "0xDFC2A4", VA = "0xDFC2A4")]
		private void AddNeighbor(Queue<FloodFillPixelInfo> queue, ref FloodFillPixelInfo info, int textureSize, int dx, int dy, float decayMultiplier)
		{
		}

		[Token(Token = "0x60029A1")]
		[Address(RVA = "0xDFC498", Offset = "0xDFC498", VA = "0xDFC498")]
		private int MapToTextureCoord(float value01, int lastIndex)
		{
			return default(int);
		}

		[Token(Token = "0x60029A2")]
		[Address(RVA = "0xDFC57C", Offset = "0xDFC57C", VA = "0xDFC57C")]
		private void Swap(ref UnityEngine.Vector2 a, ref UnityEngine.Vector2 b)
		{
		}

		[Token(Token = "0x60029A3")]
		[Address(RVA = "0xDFC590", Offset = "0xDFC590", VA = "0xDFC590")]
		public void ApplyCurve(AnimationCurve curve)
		{
		}

		[Token(Token = "0x60029A4")]
		[Address(RVA = "0xDFC67C", Offset = "0xDFC67C", VA = "0xDFC67C")]
		public void DrawLine(UnityEngine.Vector2 start, UnityEngine.Vector2 end, float value)
		{
		}

		[Token(Token = "0x60029A5")]
		[Address(RVA = "0xDFCA9C", Offset = "0xDFCA9C", VA = "0xDFCA9C")]
		public void DrawCircle(UnityEngine.Vector2 center, float radius01, float value)
		{
		}

		[Token(Token = "0x60029A6")]
		[Address(RVA = "0xDFCD8C", Offset = "0xDFCD8C", VA = "0xDFCD8C")]
		private void SetPixel(int x, int y, float value)
		{
		}

		[Token(Token = "0x60029A7")]
		[Address(RVA = "0xDFCC8C", Offset = "0xDFCC8C", VA = "0xDFCC8C")]
		private void _DrawCircleOctants(int xc, int yc, int x, int y, float value)
		{
		}
	}
	[Token(Token = "0x2000738")]
	public class DungeonSplatmapVisualizer : DungeonEventListener
	{
		[Token(Token = "0x4002590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer debugRenderer;

		[Token(Token = "0x60029AA")]
		[Address(RVA = "0xDFCE44", Offset = "0xDFCE44", VA = "0xDFCE44", Slot = "7")]
		public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x60029AB")]
		[Address(RVA = "0xDFCF88", Offset = "0xDFCF88", VA = "0xDFCF88")]
		public DungeonSplatmapVisualizer()
		{
		}
	}
	[Token(Token = "0x2000739")]
	public class DungeonSplatAsset : ScriptableObject
	{
		[Token(Token = "0x4002591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Texture2D[] splatTextures;

		[Token(Token = "0x60029AC")]
		[Address(RVA = "0xDFCF90", Offset = "0xDFCF90", VA = "0xDFCF90")]
		public DungeonSplatAsset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200073A")]
	public struct DungeonSplatmapTextureInfo
	{
		[Token(Token = "0x4002592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public string id;

		[Token(Token = "0x4002593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		public TextureFormat textureFormat;

		[Token(Token = "0x4002594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public int textureSize;
	}
	[Token(Token = "0x200073B")]
	public class DungeonSplatmap : MonoBehaviour
	{
		[Token(Token = "0x4002595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DungeonSplatmapTextureInfo[] textures;

		[Token(Token = "0x4002596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DungeonSplatAsset splatmap;

		[Token(Token = "0x60029AD")]
		[Address(RVA = "0xDFCFE8", Offset = "0xDFCFE8", VA = "0xDFCFE8")]
		public DungeonSplatmap()
		{
		}
	}
}
namespace DungeonArchitect.RuntimeGraphs
{
	[Token(Token = "0x200073C")]
	public class RuntimeGraph<T>
	{
		[Token(Token = "0x4002597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<RuntimeGraphNode<T>> Nodes;

		[Token(Token = "0x60029AE")]
		public void RemoveNode(RuntimeGraphNode<T> node)
		{
		}

		[Token(Token = "0x60029AF")]
		public RuntimeGraph()
		{
		}
	}
	[Token(Token = "0x200073D")]
	public class RuntimeGraphNode<T>
	{
		[Token(Token = "0x4002598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T Payload;

		[Token(Token = "0x4002599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public RuntimeGraph<T> Graph;

		[Token(Token = "0x400259A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UnityEngine.Vector2 Position;

		[Token(Token = "0x400259B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<RuntimeGraphNode<T>> Outgoing;

		[Token(Token = "0x400259C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<RuntimeGraphNode<T>> Incoming;

		[Token(Token = "0x60029B0")]
		public RuntimeGraphNode(RuntimeGraph<T> graph)
		{
		}

		[Token(Token = "0x60029B1")]
		public void MakeLinkTo(RuntimeGraphNode<T> destNode)
		{
		}

		[Token(Token = "0x60029B2")]
		public void BreakLinkTo(RuntimeGraphNode<T> destNode)
		{
		}

		[Token(Token = "0x60029B3")]
		public void BreakAllOutgoingLinks()
		{
		}

		[Token(Token = "0x60029B4")]
		public void BreakAllIncomingLinks()
		{
		}

		[Token(Token = "0x60029B5")]
		public void BreakAllLinks()
		{
		}

		[Token(Token = "0x60029B6")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200073E")]
	public class RuntimeGraphBuilderHandlers<T>
	{
		[Token(Token = "0x400259D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Func<GraphNode, bool> CanCreateNode;

		[Token(Token = "0x400259E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Action<GraphNode, RuntimeGraphNode<T>> NodeCreated;

		[Token(Token = "0x400259F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Func<GraphNode, T> GetPayload;

		[Token(Token = "0x60029B7")]
		public RuntimeGraphBuilderHandlers()
		{
		}
	}
	[Token(Token = "0x200073F")]
	public class RuntimeGraphBuilder
	{
		[Token(Token = "0x60029B8")]
		public static RuntimeGraphNode<T> AddNode<T>(GraphNode graphNode, RuntimeGraph<T> runtimeGraph, RuntimeGraphBuilderHandlers<T> handlers)
		{
			return null;
		}

		[Token(Token = "0x60029B9")]
		public static RuntimeGraphNode<T> AddNode<T>(T payload, RuntimeGraph<T> runtimeGraph)
		{
			return null;
		}

		[Token(Token = "0x60029BA")]
		public static void Build<T>(Graph graph, RuntimeGraph<T> runtimeGraph, RuntimeGraphBuilderHandlers<T> handlers)
		{
		}

		[Token(Token = "0x60029BB")]
		[Address(RVA = "0xDFCFF0", Offset = "0xDFCFF0", VA = "0xDFCFF0")]
		public RuntimeGraphBuilder()
		{
		}
	}
}
namespace DungeonArchitect.RoomDesigner
{
	[Serializable]
	[Token(Token = "0x2000740")]
	public struct DungeonRoomDoorDesigner
	{
		[Token(Token = "0x40025A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public UnityEngine.Vector3 logicalCursorPosition;

		[Token(Token = "0x40025A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public UnityEngine.Vector3 logicalPosition;

		[Token(Token = "0x40025A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Quaternion rotation;

		[Token(Token = "0x40025A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public IntVector logicalSize;

		[Token(Token = "0x40025A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public string markerName;
	}
	[Token(Token = "0x2000741")]
	public class DungeonRoomDesigner : MonoBehaviour
	{
		[Token(Token = "0x40025A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector3 gridSize;

		[Token(Token = "0x40025A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public IntVector roomPosition;

		[Token(Token = "0x40025A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IntVector roomSize;

		[Token(Token = "0x40025A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Dungeon dungeon;

		[Token(Token = "0x40025A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool realtimeUpdate;

		[Token(Token = "0x40025AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool generateBoundaryMarkers;

		[Token(Token = "0x40025AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public DungeonRoomDoorDesigner[] doors;

		[Token(Token = "0x40025AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private DungeonRoomVoxel voxelWorld;

		[Token(Token = "0x40025AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<FloorIsland> islands;

		[Token(Token = "0x60029BC")]
		[Address(RVA = "0xDFCFF8", Offset = "0xDFCFF8", VA = "0xDFCFF8")]
		public void GenerateLayout()
		{
		}

		[Token(Token = "0x60029BD")]
		[Address(RVA = "0xDFDCFC", Offset = "0xDFDCFC", VA = "0xDFDCFC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60029BE")]
		[Address(RVA = "0xDFD2BC", Offset = "0xDFD2BC", VA = "0xDFD2BC")]
		public void CreateDoorPlatforms()
		{
		}

		[Token(Token = "0x60029BF")]
		[Address(RVA = "0xDFD5D0", Offset = "0xDFD5D0", VA = "0xDFD5D0")]
		public void FillSmallGaps()
		{
		}

		[Token(Token = "0x60029C0")]
		[Address(RVA = "0xDFE35C", Offset = "0xDFE35C", VA = "0xDFE35C")]
		public void EmitMarkers(LevelMarkerList markerList)
		{
		}

		[Token(Token = "0x60029C1")]
		[Address(RVA = "0xDFDD00", Offset = "0xDFDD00", VA = "0xDFDD00")]
		private void DebugDrawGizmos()
		{
		}

		[Token(Token = "0x60029C2")]
		[Address(RVA = "0xDFE9BC", Offset = "0xDFE9BC", VA = "0xDFE9BC")]
		public DungeonRoomDesigner()
		{
		}
	}
	[Token(Token = "0x2000742")]
	internal struct CarvingCommand
	{
		[Token(Token = "0x40025AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UnityEngine.Vector3 localPosition;

		[Token(Token = "0x40025AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public DungeonRoomVoxelCellType cellType;

		[Token(Token = "0x40025B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool stateLocked;

		[Token(Token = "0x60029C4")]
		[Address(RVA = "0xDFE090", Offset = "0xDFE090", VA = "0xDFE090")]
		public CarvingCommand(UnityEngine.Vector3 localPosition, DungeonRoomVoxelCellType cellType, bool stateLocked)
		{
		}
	}
	[Token(Token = "0x2000743")]
	internal class FloorIsland
	{
		[Token(Token = "0x40025B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<IntVector> islandCells;

		[Token(Token = "0x1700067E")]
		public List<IntVector> IslandCells
		{
			[Token(Token = "0x60029C5")]
			[Address(RVA = "0xDFEBFC", Offset = "0xDFEBFC", VA = "0xDFEBFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60029C6")]
		[Address(RVA = "0xDFEC04", Offset = "0xDFEC04", VA = "0xDFEC04")]
		public static FloorIsland MergeIslands(FloorIsland[] islands)
		{
			return null;
		}

		[Token(Token = "0x60029C7")]
		[Address(RVA = "0xDFD658", Offset = "0xDFD658", VA = "0xDFD658")]
		public static FloorIsland[] FindIslands(DungeonRoomVoxel voxelWorld, int y)
		{
			return null;
		}

		[Token(Token = "0x60029C8")]
		[Address(RVA = "0xDFEC84", Offset = "0xDFEC84", VA = "0xDFEC84")]
		public FloorIsland()
		{
		}
	}
	[Token(Token = "0x2000744")]
	public class DungeonRoomDesignerHook : DungeonEventListener
	{
		[Token(Token = "0x60029C9")]
		[Address(RVA = "0xDFED00", Offset = "0xDFED00", VA = "0xDFED00", Slot = "4")]
		public override void OnPostDungeonLayoutBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x60029CA")]
		[Address(RVA = "0xDFEF18", Offset = "0xDFEF18", VA = "0xDFEF18", Slot = "5")]
		public override void OnDungeonMarkersEmitted(Dungeon dungeon, DungeonModel model, LevelMarkerList markers)
		{
		}

		[Token(Token = "0x60029CB")]
		[Address(RVA = "0xDFF0D8", Offset = "0xDFF0D8", VA = "0xDFF0D8")]
		public DungeonRoomDesignerHook()
		{
		}
	}
	[Token(Token = "0x2000748")]
	public class DungeonRoomMarkerEmitter
	{
		[Token(Token = "0x60029D4")]
		[Address(RVA = "0xDFF260", Offset = "0xDFF260", VA = "0xDFF260")]
		public static void EmitMarkers(DungeonRoomDesigner room, LevelMarkerList markerList)
		{
		}

		[Token(Token = "0x60029D5")]
		[Address(RVA = "0xDFF4F4", Offset = "0xDFF4F4", VA = "0xDFF4F4")]
		private static PropSocket[] RectFillMarkers(IntVector min, IntVector max, int y, string markerName, UnityEngine.Vector3 gridSize)
		{
			return null;
		}

		[Token(Token = "0x60029D6")]
		[Address(RVA = "0xDFF6DC", Offset = "0xDFF6DC", VA = "0xDFF6DC")]
		private static PropSocket[] RectBoundaryMarkers(IntVector min, IntVector max, int y, string markerName, UnityEngine.Vector3 gridSize)
		{
			return null;
		}

		[Token(Token = "0x60029D7")]
		[Address(RVA = "0xDFFB20", Offset = "0xDFFB20", VA = "0xDFFB20")]
		private static PropSocket CreateMarker(UnityEngine.Vector3 position, Quaternion rotation, string name)
		{
			return null;
		}

		[Token(Token = "0x60029D8")]
		[Address(RVA = "0xDFFC4C", Offset = "0xDFFC4C", VA = "0xDFFC4C")]
		public DungeonRoomMarkerEmitter()
		{
		}
	}
	[Token(Token = "0x2000749")]
	internal class DungeonRoomDesignerConstants
	{
		[Token(Token = "0x40025B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string Ground;

		[Token(Token = "0x40025B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string Wall;

		[Token(Token = "0x40025B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string WallHalf;

		[Token(Token = "0x40025BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string Door;

		[Token(Token = "0x40025BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string Ceiling;

		[Token(Token = "0x60029D9")]
		[Address(RVA = "0xDFFC54", Offset = "0xDFFC54", VA = "0xDFFC54")]
		public DungeonRoomDesignerConstants()
		{
		}
	}
	[Token(Token = "0x200074A")]
	public enum DungeonRoomVoxelCellData
	{
		[Token(Token = "0x40025BD")]
		None,
		[Token(Token = "0x40025BE")]
		Door,
		[Token(Token = "0x40025BF")]
		Stair
	}
	[Token(Token = "0x200074B")]
	public enum DungeonRoomVoxelCellType
	{
		[Token(Token = "0x40025C1")]
		Empty,
		[Token(Token = "0x40025C2")]
		Occupied
	}
	[Serializable]
	[Token(Token = "0x200074C")]
	public class DungeonRoomVoxelCell
	{
		[Token(Token = "0x40025C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public DungeonRoomVoxelCellType cellType;

		[Token(Token = "0x40025C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public bool stateLocked;

		[Token(Token = "0x40025C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public int cellData;

		[Token(Token = "0x60029DB")]
		[Address(RVA = "0xDFFD44", Offset = "0xDFFD44", VA = "0xDFFD44")]
		public DungeonRoomVoxelCell()
		{
		}
	}
	[Token(Token = "0x200074D")]
	public class DungeonRoomVoxel
	{
		[Token(Token = "0x200074E")]
		private class MarkerEmitCommand
		{
			[Token(Token = "0x40025C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string markerName;

			[Token(Token = "0x40025C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public UnityEngine.Vector3 position;

			[Token(Token = "0x40025C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion rotation;

			[Token(Token = "0x60029ED")]
			[Address(RVA = "0xE0063C", Offset = "0xE0063C", VA = "0xE0063C")]
			public MarkerEmitCommand()
			{
			}
		}

		[Token(Token = "0x200074F")]
		private class MarkerEmitCommandList
		{
			[Token(Token = "0x40025CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Dictionary<UnityEngine.Vector3, MarkerEmitCommand> Map;

			[Token(Token = "0x60029EE")]
			[Address(RVA = "0xE00644", Offset = "0xE00644", VA = "0xE00644")]
			public void Add(MarkerEmitCommand command)
			{
			}

			[Token(Token = "0x60029EF")]
			[Address(RVA = "0xE005C4", Offset = "0xE005C4", VA = "0xE005C4")]
			public void Remove(UnityEngine.Vector3 position)
			{
			}

			[Token(Token = "0x60029F0")]
			[Address(RVA = "0xE004E8", Offset = "0xE004E8", VA = "0xE004E8")]
			public bool Contains(UnityEngine.Vector3 position, string markerName)
			{
				return default(bool);
			}

			[Token(Token = "0x60029F1")]
			[Address(RVA = "0xDFFEC8", Offset = "0xDFFEC8", VA = "0xDFFEC8")]
			public MarkerEmitCommandList()
			{
			}
		}

		[Token(Token = "0x40025C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DungeonRoomVoxelCell[,,] cells;

		[Token(Token = "0x1700067F")]
		public DungeonRoomVoxelCell[,,] Cells
		{
			[Token(Token = "0x60029DC")]
			[Address(RVA = "0xDFFD4C", Offset = "0xDFFD4C", VA = "0xDFFD4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60029DD")]
		[Address(RVA = "0xDFD124", Offset = "0xDFD124", VA = "0xDFD124")]
		public DungeonRoomVoxel(int sizeX, int sizeY, int sizeZ)
		{
		}

		[Token(Token = "0x60029DE")]
		[Address(RVA = "0xDFFD54", Offset = "0xDFFD54", VA = "0xDFFD54")]
		public void TagDoorCells(UnityEngine.Vector3 logicalPosition)
		{
		}

		[Token(Token = "0x60029DF")]
		[Address(RVA = "0xDFFD58", Offset = "0xDFFD58", VA = "0xDFFD58")]
		public bool IsValidCoord(IntVector coord)
		{
			return default(bool);
		}

		[Token(Token = "0x60029E0")]
		[Address(RVA = "0xDFFD64", Offset = "0xDFFD64", VA = "0xDFFD64")]
		public bool IsValidCoord(int x, int y, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x60029E1")]
		[Address(RVA = "0xDFFE00", Offset = "0xDFFE00", VA = "0xDFFE00")]
		public void SetState(IntVector coord, DungeonRoomVoxelCellType cellType)
		{
		}

		[Token(Token = "0x60029E2")]
		[Address(RVA = "0xDFE168", Offset = "0xDFE168", VA = "0xDFE168")]
		public void SetData(IntVector coord, DungeonRoomVoxelCellData cellData)
		{
		}

		[Token(Token = "0x60029E3")]
		[Address(RVA = "0xDFEC0C", Offset = "0xDFEC0C", VA = "0xDFEC0C")]
		public bool IsValidPlatform(IntVector p)
		{
			return default(bool);
		}

		[Token(Token = "0x60029E4")]
		[Address(RVA = "0xDFFE0C", Offset = "0xDFFE0C", VA = "0xDFFE0C")]
		public bool ContainsData(IntVector coord, DungeonRoomVoxelCellData cellData)
		{
			return default(bool);
		}

		[Token(Token = "0x60029E5")]
		[Address(RVA = "0xDFE0A8", Offset = "0xDFE0A8", VA = "0xDFE0A8")]
		public void SetState(IntVector coord, DungeonRoomVoxelCellType cellType, bool lockState)
		{
		}

		[Token(Token = "0x60029E6")]
		[Address(RVA = "0xDFEB5C", Offset = "0xDFEB5C", VA = "0xDFEB5C")]
		public bool IsEmpty(int x, int y, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x60029E7")]
		[Address(RVA = "0xDFE384", Offset = "0xDFE384", VA = "0xDFE384")]
		public void EmitMarkers(LevelMarkerList markerList, IntVector roomPosition, DungeonRoomDoorDesigner[] doors, UnityEngine.Vector3 gridSize)
		{
		}

		[Token(Token = "0x60029E8")]
		[Address(RVA = "0xE00204", Offset = "0xE00204", VA = "0xE00204")]
		private void Pass_UpgradeWalls(MarkerEmitCommandList commands)
		{
		}

		[Token(Token = "0x60029E9")]
		[Address(RVA = "0xE00090", Offset = "0xE00090", VA = "0xE00090")]
		private void Pass_AddDoorMarkers(MarkerEmitCommandList commands, DungeonRoomDoorDesigner[] doors)
		{
		}

		[Token(Token = "0x60029EA")]
		[Address(RVA = "0xDFFF44", Offset = "0xDFFF44", VA = "0xDFFF44")]
		private void EmitMarker(string markerName, float x, float y, float z, float angleY, MarkerEmitCommandList commands)
		{
		}

		[Token(Token = "0x60029EB")]
		[Address(RVA = "0xDFFFCC", Offset = "0xDFFFCC", VA = "0xDFFFCC")]
		private void EmitMarker(string markerName, float x, float y, float z, Quaternion rotation, MarkerEmitCommandList commands)
		{
		}

		[Token(Token = "0x60029EC")]
		[Address(RVA = "0xDFE214", Offset = "0xDFE214", VA = "0xDFE214")]
		public void IterateCells(Action<DungeonRoomVoxelCell, IntVector> callback)
		{
		}
	}
}
namespace DungeonArchitect.RoadNetworks
{
	[Token(Token = "0x2000751")]
	public class RoadGraphEdge
	{
		[Token(Token = "0x40025CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int edgeId;

		[Token(Token = "0x40025CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int ownerNodeId;

		[Token(Token = "0x40025CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int otherNodeId;

		[Token(Token = "0x40025D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float thickness;

		[Token(Token = "0x40025D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float angleToXAxis;

		[Token(Token = "0x60029F5")]
		[Address(RVA = "0xE0072C", Offset = "0xE0072C", VA = "0xE0072C")]
		public RoadGraphEdge()
		{
		}
	}
	[Token(Token = "0x2000752")]
	public class RoadGraphNode
	{
		[Token(Token = "0x40025D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int nodeId;

		[Token(Token = "0x40025D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public UnityEngine.Vector3 position;

		[Token(Token = "0x40025D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RoadGraphEdge[] adjacentEdges;

		[Token(Token = "0x60029F6")]
		[Address(RVA = "0xE00734", Offset = "0xE00734", VA = "0xE00734")]
		public RoadGraphNode()
		{
		}
	}
	[Token(Token = "0x2000753")]
	public class RoadGraph
	{
		[Token(Token = "0x40025D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RoadGraphNode[] nodes;

		[Token(Token = "0x60029F7")]
		[Address(RVA = "0xE0073C", Offset = "0xE0073C", VA = "0xE0073C")]
		public RoadGraph()
		{
		}
	}
	[Token(Token = "0x2000754")]
	public class RoadGraphBuilderSettings
	{
		[Token(Token = "0x40025D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float interNodeDistance;

		[Token(Token = "0x60029F8")]
		[Address(RVA = "0xE00794", Offset = "0xE00794", VA = "0xE00794")]
		public RoadGraphBuilderSettings()
		{
		}
	}
	[Token(Token = "0x2000755")]
	public class RoadGraphBuilder
	{
		[Token(Token = "0x40025D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private RoadGraphBuilderSettings settings;

		[Token(Token = "0x40025D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<int, RoadGraphBuildNode> nodes;

		[Token(Token = "0x40025D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _nodeIdCounter;

		[Token(Token = "0x60029F9")]
		[Address(RVA = "0xE007A4", Offset = "0xE007A4", VA = "0xE007A4")]
		public RoadGraphBuilder()
		{
		}

		[Token(Token = "0x60029FA")]
		[Address(RVA = "0xE0085C", Offset = "0xE0085C", VA = "0xE0085C")]
		public RoadGraphBuilder(RoadGraphBuilderSettings settings)
		{
		}

		[Token(Token = "0x60029FB")]
		[Address(RVA = "0xE008EC", Offset = "0xE008EC", VA = "0xE008EC")]
		public void Initialize(RoadGraph graph)
		{
		}

		[Token(Token = "0x60029FC")]
		[Address(RVA = "0xE00C24", Offset = "0xE00C24", VA = "0xE00C24")]
		private RoadGraphBuildNode FindNearestNode(UnityEngine.Vector3 position, float searchRadius)
		{
			return null;
		}

		[Token(Token = "0x60029FD")]
		[Address(RVA = "0xE00DE8", Offset = "0xE00DE8", VA = "0xE00DE8")]
		public void CreateLine(UnityEngine.Vector3 start, UnityEngine.Vector3 end, float thickness)
		{
		}

		[Token(Token = "0x60029FE")]
		[Address(RVA = "0xE01460", Offset = "0xE01460", VA = "0xE01460")]
		public void CreateCircle(UnityEngine.Vector3 center, float radius, float thickness)
		{
		}

		[Token(Token = "0x60029FF")]
		[Address(RVA = "0xE01688", Offset = "0xE01688", VA = "0xE01688")]
		public RoadGraph BakeRoadGraph()
		{
			return null;
		}

		[Token(Token = "0x6002A00")]
		[Address(RVA = "0xE01164", Offset = "0xE01164", VA = "0xE01164")]
		public RoadGraphBuildNode CreateNode(UnityEngine.Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x6002A01")]
		[Address(RVA = "0xE01224", Offset = "0xE01224", VA = "0xE01224")]
		public void ConnectNodes(RoadGraphBuildNode a, RoadGraphBuildNode b, float thickness)
		{
		}
	}
	[Token(Token = "0x2000756")]
	public class RoadGraphBuildNode
	{
		[Token(Token = "0x40025DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int nodeId;

		[Token(Token = "0x40025DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public UnityEngine.Vector3 position;

		[Token(Token = "0x40025DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<RoadGraphBuildNode> connectedNodes;

		[Token(Token = "0x40025DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<float> edgeThickness;

		[Token(Token = "0x6002A02")]
		[Address(RVA = "0xE01F08", Offset = "0xE01F08", VA = "0xE01F08")]
		public RoadGraphBuildNode(int nodeId, UnityEngine.Vector3 position)
		{
		}

		[Token(Token = "0x6002A03")]
		[Address(RVA = "0xE00B38", Offset = "0xE00B38", VA = "0xE00B38")]
		public RoadGraphBuildNode(RoadGraphNode graphNode)
		{
		}
	}
	[Token(Token = "0x2000757")]
	internal class RoadGraphBuilderUtils
	{
		[Token(Token = "0x6002A04")]
		[Address(RVA = "0xE016DC", Offset = "0xE016DC", VA = "0xE016DC")]
		public static RoadGraph BakeRoadGraph(IEnumerable<RoadGraphBuildNode> buildNodes)
		{
			return null;
		}

		[Token(Token = "0x6002A05")]
		[Address(RVA = "0xE02000", Offset = "0xE02000", VA = "0xE02000")]
		private static int SortEdgesByAngle(RoadGraphEdge a, RoadGraphEdge b)
		{
			return default(int);
		}

		[Token(Token = "0x6002A06")]
		[Address(RVA = "0xE02038", Offset = "0xE02038", VA = "0xE02038")]
		public RoadGraphBuilderUtils()
		{
		}
	}
	[Token(Token = "0x2000758")]
	public delegate void RoadBlockLayoutBuiltDelegate(ref UnityEngine.Vector3[] layout);
	[Token(Token = "0x2000759")]
	public class RoadLayoutBuilder
	{
		[Token(Token = "0x40025DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<int, RoadGraphNode> graphNodes;

		[Token(Token = "0x40025E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MeshFilter meshFilter;

		[Token(Token = "0x14000034")]
		public event RoadBlockLayoutBuiltDelegate RoadBlockLayoutBuilt
		{
			[Token(Token = "0x6002A0B")]
			[Address(RVA = "0xE02138", Offset = "0xE02138", VA = "0xE02138")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002A0C")]
			[Address(RVA = "0xE021D4", Offset = "0xE021D4", VA = "0xE021D4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002A0D")]
		[Address(RVA = "0xE02270", Offset = "0xE02270", VA = "0xE02270")]
		public RoadLayoutBuilder(RoadGraph roadGraph, MeshFilter meshFilter)
		{
		}

		[Token(Token = "0x6002A0E")]
		[Address(RVA = "0xE023B0", Offset = "0xE023B0", VA = "0xE023B0")]
		private void GenerateBoundaryMesh(RoadGraphEdge[] edges, UnityEngine.Vector3[] boundaryPoints, List<UnityEngine.Vector3> vertices, List<UnityEngine.Vector2> uv)
		{
		}

		[Token(Token = "0x6002A0F")]
		[Address(RVA = "0xE02A5C", Offset = "0xE02A5C", VA = "0xE02A5C")]
		private UnityEngine.Vector3[] GenerateBlockBoundary(RoadGraphEdge[] edges)
		{
			return null;
		}

		[Token(Token = "0x6002A10")]
		[Address(RVA = "0xE02FD0", Offset = "0xE02FD0", VA = "0xE02FD0")]
		public RoadGraph BakeLayoutGraph()
		{
			return null;
		}

		[Token(Token = "0x6002A11")]
		[Address(RVA = "0xE036A8", Offset = "0xE036A8", VA = "0xE036A8")]
		private RoadGraphEdge[] TraverseEdgeBlock(RoadGraphEdge startEdge, HashSet<int> edgeVisited)
		{
			return null;
		}
	}
}
namespace DungeonArchitect.Navigation
{
	[Token(Token = "0x200075A")]
	public abstract class DungeonNavAgent : MonoBehaviour
	{
		[Token(Token = "0x17000680")]
		public abstract UnityEngine.Vector3 Destination
		{
			[Token(Token = "0x6002A15")]
			get;
			[Token(Token = "0x6002A16")]
			set;
		}

		[Token(Token = "0x17000681")]
		public abstract UnityEngine.Vector3 Velocity
		{
			[Token(Token = "0x6002A17")]
			get;
			[Token(Token = "0x6002A18")]
			set;
		}

		[Token(Token = "0x17000682")]
		public abstract UnityEngine.Vector3 Direction
		{
			[Token(Token = "0x6002A19")]
			get;
		}

		[Token(Token = "0x6002A12")]
		public abstract void Resume();

		[Token(Token = "0x6002A13")]
		public abstract void Stop();

		[Token(Token = "0x6002A14")]
		public abstract float GetRemainingDistance();

		[Token(Token = "0x6002A1A")]
		[Address(RVA = "0xE038D0", Offset = "0xE038D0", VA = "0xE038D0")]
		protected DungeonNavAgent()
		{
		}
	}
	[Token(Token = "0x200075B")]
	public class DungeonNavAgent2D : DungeonNavAgent
	{
		[Token(Token = "0x40025E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x40025E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float height;

		[Token(Token = "0x40025E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxAcceleration;

		[Token(Token = "0x40025E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxSpeed;

		[Token(Token = "0x40025E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float collisionQueryRange;

		[Token(Token = "0x40025E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float pathOptimizationRange;

		[Token(Token = "0x40025E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float separationWeight;

		[Token(Token = "0x40025E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public UnityEngine.Vector2 navAgentCollisionOffset;

		[Token(Token = "0x40025E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float updateFrequency;

		[Token(Token = "0x40025EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int agentId;

		[Token(Token = "0x40025EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private DungeonNavMesh navMesh;

		[Token(Token = "0x40025EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Rigidbody2D rigidBody2D;

		[Token(Token = "0x40025ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool running;

		[Token(Token = "0x40025EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private UnityEngine.Vector3 previousDirection;

		[Token(Token = "0x40025EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private UnityEngine.Vector3 destination;

		[Token(Token = "0x40025F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Agent agent;

		[Token(Token = "0x40025F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UnityEngine.Vector3 _debugNavDest;

		[Token(Token = "0x17000683")]
		public DungeonNavMesh NavMesh
		{
			[Token(Token = "0x6002A1B")]
			[Address(RVA = "0xE038D8", Offset = "0xE038D8", VA = "0xE038D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000684")]
		public override UnityEngine.Vector3 Destination
		{
			[Token(Token = "0x6002A1C")]
			[Address(RVA = "0xE038E0", Offset = "0xE038E0", VA = "0xE038E0", Slot = "7")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6002A1D")]
			[Address(RVA = "0xE038EC", Offset = "0xE038EC", VA = "0xE038EC", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000685")]
		public override UnityEngine.Vector3 Velocity
		{
			[Token(Token = "0x6002A1E")]
			[Address(RVA = "0xE038F8", Offset = "0xE038F8", VA = "0xE038F8", Slot = "9")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6002A1F")]
			[Address(RVA = "0xE03980", Offset = "0xE03980", VA = "0xE03980", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x17000686")]
		public override UnityEngine.Vector3 Direction
		{
			[Token(Token = "0x6002A20")]
			[Address(RVA = "0xE039F4", Offset = "0xE039F4", VA = "0xE039F4", Slot = "11")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x17000687")]
		public float DesiredSpeed
		{
			[Token(Token = "0x6002A21")]
			[Address(RVA = "0xE03A00", Offset = "0xE03A00", VA = "0xE03A00")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000688")]
		private UnityEngine.Vector3 ActorPosition3DX
		{
			[Token(Token = "0x6002A26")]
			[Address(RVA = "0xE03F34", Offset = "0xE03F34", VA = "0xE03F34")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6002A27")]
			[Address(RVA = "0xE03F54", Offset = "0xE03F54", VA = "0xE03F54")]
			set
			{
			}
		}

		[Token(Token = "0x17000689")]
		private UnityEngine.Vector3 ActorPosition3D
		{
			[Token(Token = "0x6002A28")]
			[Address(RVA = "0xE03F04", Offset = "0xE03F04", VA = "0xE03F04")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6002A29")]
			[Address(RVA = "0xE03F9C", Offset = "0xE03F9C", VA = "0xE03F9C")]
			set
			{
			}
		}

		[Token(Token = "0x6002A22")]
		[Address(RVA = "0xE03A38", Offset = "0xE03A38", VA = "0xE03A38")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6002A23")]
		[Address(RVA = "0xE03B10", Offset = "0xE03B10", VA = "0xE03B10")]
		private UnityEngine.Vector3 FlipYZ(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002A24")]
		[Address(RVA = "0xE03B20", Offset = "0xE03B20", VA = "0xE03B20")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002A25")]
		[Address(RVA = "0xE03C04", Offset = "0xE03C04", VA = "0xE03C04")]
		private void Start()
		{
		}

		[Token(Token = "0x6002A2A")]
		[Address(RVA = "0xE03E08", Offset = "0xE03E08", VA = "0xE03E08")]
		private void PositionOnNearestNavMesh()
		{
		}

		[Token(Token = "0x6002A2B")]
		[Address(RVA = "0xE039C4", Offset = "0xE039C4", VA = "0xE039C4")]
		public static SharpNav.Geometry.Vector3 ToSV3(UnityEngine.Vector3 v)
		{
			return default(SharpNav.Geometry.Vector3);
		}

		[Token(Token = "0x6002A2C")]
		[Address(RVA = "0xE0397C", Offset = "0xE0397C", VA = "0xE0397C")]
		public static UnityEngine.Vector3 ToV3(SharpNav.Geometry.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002A2D")]
		[Address(RVA = "0xE03FD8", Offset = "0xE03FD8", VA = "0xE03FD8", Slot = "5")]
		public override void Stop()
		{
		}

		[Token(Token = "0x6002A2E")]
		[Address(RVA = "0xE04134", Offset = "0xE04134", VA = "0xE04134", Slot = "4")]
		public override void Resume()
		{
		}

		[Token(Token = "0x6002A2F")]
		[Address(RVA = "0xE04140", Offset = "0xE04140", VA = "0xE04140")]
		private void Update()
		{
		}

		[Token(Token = "0x6002A30")]
		[Address(RVA = "0xE04144", Offset = "0xE04144", VA = "0xE04144", Slot = "6")]
		public override float GetRemainingDistance()
		{
			return default(float);
		}

		[Token(Token = "0x6002A31")]
		[Address(RVA = "0xE041FC", Offset = "0xE041FC", VA = "0xE041FC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002A32")]
		[Address(RVA = "0xE0463C", Offset = "0xE0463C", VA = "0xE0463C")]
		public DungeonNavAgent2D()
		{
		}
	}
	[Token(Token = "0x200075C")]
	public class DungeonNavAgent3D : DungeonNavAgent
	{
		[Token(Token = "0x40025F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x40025F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float height;

		[Token(Token = "0x40025F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxAcceleration;

		[Token(Token = "0x40025F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxSpeed;

		[Token(Token = "0x40025F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float collisionQueryRange;

		[Token(Token = "0x40025F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float pathOptimizationRange;

		[Token(Token = "0x40025F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float separationWeight;

		[Token(Token = "0x40025F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float gravity;

		[Token(Token = "0x40025FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float updateFrequency;

		[Token(Token = "0x40025FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float timeSinceLastNavUpdate;

		[Token(Token = "0x40025FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CharacterController character;

		[Token(Token = "0x40025FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int agentId;

		[Token(Token = "0x40025FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private DungeonNavMesh navMesh;

		[Token(Token = "0x40025FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool running;

		[Token(Token = "0x4002600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private UnityEngine.Vector3 destination;

		[Token(Token = "0x4002601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Agent agent;

		[Token(Token = "0x1700068A")]
		public DungeonNavMesh NavMesh
		{
			[Token(Token = "0x6002A33")]
			[Address(RVA = "0xE046DC", Offset = "0xE046DC", VA = "0xE046DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700068B")]
		public override UnityEngine.Vector3 Destination
		{
			[Token(Token = "0x6002A34")]
			[Address(RVA = "0xE046E4", Offset = "0xE046E4", VA = "0xE046E4", Slot = "7")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6002A35")]
			[Address(RVA = "0xE046F0", Offset = "0xE046F0", VA = "0xE046F0", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700068C")]
		public override UnityEngine.Vector3 Velocity
		{
			[Token(Token = "0x6002A36")]
			[Address(RVA = "0xE046FC", Offset = "0xE046FC", VA = "0xE046FC", Slot = "9")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6002A37")]
			[Address(RVA = "0xE04784", Offset = "0xE04784", VA = "0xE04784", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x1700068D")]
		public override UnityEngine.Vector3 Direction
		{
			[Token(Token = "0x6002A38")]
			[Address(RVA = "0xE047F8", Offset = "0xE047F8", VA = "0xE047F8", Slot = "11")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x1700068E")]
		public float DesiredSpeed
		{
			[Token(Token = "0x6002A39")]
			[Address(RVA = "0xE048D4", Offset = "0xE048D4", VA = "0xE048D4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6002A3A")]
		[Address(RVA = "0xE0490C", Offset = "0xE0490C", VA = "0xE0490C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6002A3B")]
		[Address(RVA = "0xE04954", Offset = "0xE04954", VA = "0xE04954")]
		private void Start()
		{
		}

		[Token(Token = "0x6002A3C")]
		[Address(RVA = "0xE04B60", Offset = "0xE04B60", VA = "0xE04B60")]
		private void PositionOnNearestNavMesh()
		{
		}

		[Token(Token = "0x6002A3D")]
		[Address(RVA = "0xE047C8", Offset = "0xE047C8", VA = "0xE047C8")]
		public static SharpNav.Geometry.Vector3 ToSV3(UnityEngine.Vector3 v)
		{
			return default(SharpNav.Geometry.Vector3);
		}

		[Token(Token = "0x6002A3E")]
		[Address(RVA = "0xE04780", Offset = "0xE04780", VA = "0xE04780")]
		public static UnityEngine.Vector3 ToV3(SharpNav.Geometry.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002A3F")]
		[Address(RVA = "0xE04C84", Offset = "0xE04C84", VA = "0xE04C84", Slot = "5")]
		public override void Stop()
		{
		}

		[Token(Token = "0x6002A40")]
		[Address(RVA = "0xE04D98", Offset = "0xE04D98", VA = "0xE04D98", Slot = "4")]
		public override void Resume()
		{
		}

		[Token(Token = "0x6002A41")]
		[Address(RVA = "0xE04DA4", Offset = "0xE04DA4", VA = "0xE04DA4")]
		private void Update()
		{
		}

		[Token(Token = "0x6002A42")]
		[Address(RVA = "0xE04DA8", Offset = "0xE04DA8", VA = "0xE04DA8", Slot = "6")]
		public override float GetRemainingDistance()
		{
			return default(float);
		}

		[Token(Token = "0x6002A43")]
		[Address(RVA = "0xE04E70", Offset = "0xE04E70", VA = "0xE04E70")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002A44")]
		[Address(RVA = "0xE04ED0", Offset = "0xE04ED0", VA = "0xE04ED0")]
		private void ProcessMove(bool recalculatePath)
		{
		}

		[Token(Token = "0x6002A45")]
		[Address(RVA = "0xE053DC", Offset = "0xE053DC", VA = "0xE053DC")]
		public DungeonNavAgent3D()
		{
		}
	}
	[Token(Token = "0x200075D")]
	public class NavigationEvent
	{
		[Token(Token = "0x4002602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DungeonNavMesh navMesh;

		[Token(Token = "0x6002A46")]
		[Address(RVA = "0xE0540C", Offset = "0xE0540C", VA = "0xE0540C")]
		public NavigationEvent()
		{
		}
	}
	[Token(Token = "0x200075E")]
	public delegate void OnNavmeshBuiltDelegate(NavigationEvent e);
	[Token(Token = "0x200075F")]
	public class DungeonNavMesh : MonoBehaviour
	{
		[Token(Token = "0x4002603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float agentHeight;

		[Token(Token = "0x4002604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float agentRadius;

		[Token(Token = "0x4002605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float agentClimbHeight;

		[Token(Token = "0x4002606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float cellSize;

		[Token(Token = "0x4002607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int maxCrowdAgents;

		[Token(Token = "0x4002608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Mesh visualization;

		[Token(Token = "0x4002609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color visualizationColor;

		[Token(Token = "0x400260A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool visualize2D;

		[Token(Token = "0x400260C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SharpNav.NavMesh navMesh;

		[Token(Token = "0x400260D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private NavMeshQuery navMeshQuery;

		[Token(Token = "0x400260E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Crowd crowd;

		[Token(Token = "0x400260F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private PolyMesh polyMesh;

		[Token(Token = "0x4002610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PolyMeshDetail polyMeshDetail;

		[Token(Token = "0x1700068F")]
		public SharpNav.NavMesh NavMesh
		{
			[Token(Token = "0x6002A4D")]
			[Address(RVA = "0xE0568C", Offset = "0xE0568C", VA = "0xE0568C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000690")]
		public NavMeshQuery NavMeshQuery
		{
			[Token(Token = "0x6002A4E")]
			[Address(RVA = "0xE05694", Offset = "0xE05694", VA = "0xE05694")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000691")]
		public Crowd Crowd
		{
			[Token(Token = "0x6002A4F")]
			[Address(RVA = "0xE0569C", Offset = "0xE0569C", VA = "0xE0569C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000692")]
		public PolyMesh PolyMesh
		{
			[Token(Token = "0x6002A50")]
			[Address(RVA = "0xE056A4", Offset = "0xE056A4", VA = "0xE056A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000693")]
		public PolyMeshDetail PolyMeshDetail
		{
			[Token(Token = "0x6002A51")]
			[Address(RVA = "0xE056AC", Offset = "0xE056AC", VA = "0xE056AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000035")]
		public event OnNavmeshBuiltDelegate OnNavmeshBuilt
		{
			[Token(Token = "0x6002A4B")]
			[Address(RVA = "0xE05554", Offset = "0xE05554", VA = "0xE05554")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002A4C")]
			[Address(RVA = "0xE055F0", Offset = "0xE055F0", VA = "0xE055F0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002A52")]
		[Address(RVA = "0xE056B4", Offset = "0xE056B4", VA = "0xE056B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002A53")]
		[Address(RVA = "0xE05778", Offset = "0xE05778", VA = "0xE05778")]
		private void Update()
		{
		}

		[Token(Token = "0x6002A54")]
		[Address(RVA = "0xE056BC", Offset = "0xE056BC", VA = "0xE056BC")]
		public void SetNavMeshVisible(bool show)
		{
		}

		[Token(Token = "0x6002A55")]
		[Address(RVA = "0xE057A4", Offset = "0xE057A4", VA = "0xE057A4")]
		public void Build()
		{
		}

		[Token(Token = "0x6002A56")]
		[Address(RVA = "0xE06024", Offset = "0xE06024", VA = "0xE06024")]
		public static UnityEngine.Vector3 ToV3(SharpNav.Geometry.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002A57")]
		[Address(RVA = "0xE05A1C", Offset = "0xE05A1C", VA = "0xE05A1C")]
		private void BuildVisualization()
		{
		}

		[Token(Token = "0x6002A58")]
		[Address(RVA = "0xE06028", Offset = "0xE06028", VA = "0xE06028")]
		public DungeonNavMesh()
		{
		}
	}
	[Token(Token = "0x2000760")]
	public class NavigationBuildInvoker : DungeonEventListener
	{
		[Token(Token = "0x4002611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DungeonNavMesh navMesh;

		[Token(Token = "0x6002A59")]
		[Address(RVA = "0xE06050", Offset = "0xE06050", VA = "0xE06050", Slot = "7")]
		public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x6002A5A")]
		[Address(RVA = "0xE06110", Offset = "0xE06110", VA = "0xE06110")]
		public NavigationBuildInvoker()
		{
		}
	}
	[Token(Token = "0x2000761")]
	public class NavigationTriangleProvider : MonoBehaviour
	{
		[Token(Token = "0x6002A5B")]
		[Address(RVA = "0xE06118", Offset = "0xE06118", VA = "0xE06118", Slot = "4")]
		public virtual void AddNavTriangles(List<Triangle3> triangles)
		{
		}

		[Token(Token = "0x6002A5C")]
		[Address(RVA = "0xE0611C", Offset = "0xE0611C", VA = "0xE0611C")]
		public NavigationTriangleProvider()
		{
		}
	}
	[Token(Token = "0x2000762")]
	public class CityLayoutTriangleProvider : NavigationTriangleProvider
	{
		[Token(Token = "0x4002612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x6002A5D")]
		[Address(RVA = "0xE06124", Offset = "0xE06124", VA = "0xE06124", Slot = "4")]
		public override void AddNavTriangles(List<Triangle3> triangles)
		{
		}

		[Token(Token = "0x6002A5E")]
		[Address(RVA = "0xE06684", Offset = "0xE06684", VA = "0xE06684")]
		public CityLayoutTriangleProvider()
		{
		}
	}
	[Token(Token = "0x2000763")]
	public class Collision2DTriangleProvider : NavigationTriangleProvider
	{
		[Token(Token = "0x4002613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly UnityEngine.Vector3[] cubeVertices;

		[Token(Token = "0x4002614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] cubeIndices;

		[Token(Token = "0x6002A5F")]
		[Address(RVA = "0xE0668C", Offset = "0xE0668C", VA = "0xE0668C", Slot = "4")]
		public override void AddNavTriangles(List<Triangle3> triangles)
		{
		}

		[Token(Token = "0x6002A60")]
		[Address(RVA = "0xE06794", Offset = "0xE06794", VA = "0xE06794")]
		private void AddTriangles(List<Triangle3> triangles, GameObject gameObject)
		{
		}

		[Token(Token = "0x6002A61")]
		[Address(RVA = "0xE06D8C", Offset = "0xE06D8C", VA = "0xE06D8C")]
		public Collision2DTriangleProvider()
		{
		}
	}
	[Token(Token = "0x2000764")]
	public class CollisionTriangleProvider : NavigationTriangleProvider
	{
		[Token(Token = "0x4002615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly UnityEngine.Vector3[] cubeVertices;

		[Token(Token = "0x4002616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] cubeIndices;

		[Token(Token = "0x6002A63")]
		[Address(RVA = "0xE06F08", Offset = "0xE06F08", VA = "0xE06F08", Slot = "4")]
		public override void AddNavTriangles(List<Triangle3> triangles)
		{
		}

		[Token(Token = "0x6002A64")]
		[Address(RVA = "0xE07010", Offset = "0xE07010", VA = "0xE07010")]
		private void AddTriangles(List<Triangle3> triangles, GameObject gameObject)
		{
		}

		[Token(Token = "0x6002A65")]
		[Address(RVA = "0xE07384", Offset = "0xE07384", VA = "0xE07384")]
		public CollisionTriangleProvider()
		{
		}
	}
	[Token(Token = "0x2000765")]
	public class LayoutFloorTriangleProvider : NavigationTriangleProvider
	{
		[Token(Token = "0x4002617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x6002A67")]
		[Address(RVA = "0xE07500", Offset = "0xE07500", VA = "0xE07500", Slot = "4")]
		public override void AddNavTriangles(List<Triangle3> triangles)
		{
		}

		[Token(Token = "0x6002A68")]
		[Address(RVA = "0xE07BB8", Offset = "0xE07BB8", VA = "0xE07BB8")]
		public LayoutFloorTriangleProvider()
		{
		}
	}
	[Token(Token = "0x2000766")]
	public class StaticMeshTriangleProvider : NavigationTriangleProvider
	{
		[Token(Token = "0x6002A69")]
		[Address(RVA = "0xE07BC0", Offset = "0xE07BC0", VA = "0xE07BC0", Slot = "4")]
		public override void AddNavTriangles(List<Triangle3> triangles)
		{
		}

		[Token(Token = "0x6002A6A")]
		[Address(RVA = "0xE07CC8", Offset = "0xE07CC8", VA = "0xE07CC8")]
		private void AddTriangles(List<Triangle3> triangles, GameObject gameObject)
		{
		}

		[Token(Token = "0x6002A6B")]
		[Address(RVA = "0xE0730C", Offset = "0xE0730C", VA = "0xE0730C")]
		public static void AddMeshTriangles(List<Triangle3> triangles, Mesh mesh, Matrix4x4 transform)
		{
		}

		[Token(Token = "0x6002A6C")]
		[Address(RVA = "0xE06A50", Offset = "0xE06A50", VA = "0xE06A50")]
		public static void AddMeshTriangles(List<Triangle3> triangles, UnityEngine.Vector3[] vertices, int[] indices, Matrix4x4 transform)
		{
		}

		[Token(Token = "0x6002A6D")]
		[Address(RVA = "0xE07DEC", Offset = "0xE07DEC", VA = "0xE07DEC")]
		public StaticMeshTriangleProvider()
		{
		}
	}
	[Token(Token = "0x2000767")]
	public class TerrainTriangleProvider : NavigationTriangleProvider
	{
		[Token(Token = "0x4002618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float terrainCellSize;

		[Token(Token = "0x6002A6E")]
		[Address(RVA = "0xE07DF4", Offset = "0xE07DF4", VA = "0xE07DF4", Slot = "4")]
		public override void AddNavTriangles(List<Triangle3> triangles)
		{
		}

		[Token(Token = "0x6002A6F")]
		[Address(RVA = "0xE07ED0", Offset = "0xE07ED0", VA = "0xE07ED0")]
		private void AddTerrainTriangles(List<Triangle3> triangles, Terrain terrain)
		{
		}

		[Token(Token = "0x6002A70")]
		[Address(RVA = "0xE08664", Offset = "0xE08664", VA = "0xE08664")]
		public TerrainTriangleProvider()
		{
		}
	}
}
namespace DungeonArchitect.MiniMaps
{
	[Token(Token = "0x2000768")]
	public abstract class DungeonMiniMap : MonoBehaviour
	{
		[Token(Token = "0x4002619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float updateFrequency;

		[Token(Token = "0x400261A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool enableFogOfWar;

		[Token(Token = "0x400261B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RenderTexture minimapTexture;

		[Token(Token = "0x400261C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader compositeShader;

		[Token(Token = "0x400261D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IntVector2 textureSize;

		[Token(Token = "0x400261E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Texture staticImage;

		[Token(Token = "0x400261F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Texture fogOfWar;

		[Token(Token = "0x4002620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Texture overlayImage;

		[Token(Token = "0x4002621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float timeSinceLastUpdate;

		[Token(Token = "0x4002622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool initialized;

		[Token(Token = "0x4002623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Vector4 uvTransform;

		[Token(Token = "0x17000694")]
		protected abstract bool SupportsFogOfWar
		{
			[Token(Token = "0x6002A71")]
			get;
		}

		[Token(Token = "0x6002A72")]
		protected abstract void CreateTextures(IntVector2 desiredSize, out Texture staticImage, out Texture fogOfWar, out Texture overlayImage, out IntVector2 targetTextureSize);

		[Token(Token = "0x6002A73")]
		protected abstract void UpdateStaticTexture(Texture texture);

		[Token(Token = "0x6002A74")]
		protected abstract void UpdateFogOfWarTexture(Texture texture);

		[Token(Token = "0x6002A75")]
		protected abstract void UpdateOverlayTexture(Texture texture);

		[Token(Token = "0x6002A76")]
		[Address(RVA = "0xE08674", Offset = "0xE08674", VA = "0xE08674")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6002A77")]
		[Address(RVA = "0xE087BC", Offset = "0xE087BC", VA = "0xE087BC")]
		private void UpdateDynamicTextures()
		{
		}

		[Token(Token = "0x6002A78")]
		[Address(RVA = "0xE08B80", Offset = "0xE08B80", VA = "0xE08B80")]
		private bool RequiresUpdate()
		{
			return default(bool);
		}

		[Token(Token = "0x6002A79")]
		[Address(RVA = "0xE08BBC", Offset = "0xE08BBC", VA = "0xE08BBC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002A7A")]
		[Address(RVA = "0xE08B44", Offset = "0xE08B44", VA = "0xE08B44")]
		private Vector4 GetCompositeUVTransform()
		{
			return default(Vector4);
		}

		[Token(Token = "0x6002A7B")]
		[Address(RVA = "0xE087FC", Offset = "0xE087FC", VA = "0xE087FC")]
		private void RenderFinalImage()
		{
		}

		[Token(Token = "0x6002A7C")]
		[Address(RVA = "0xE08C0C", Offset = "0xE08C0C", VA = "0xE08C0C")]
		protected DungeonMiniMap()
		{
		}
	}
}
namespace DungeonArchitect.Graphs
{
	[Token(Token = "0x2000769")]
	public class CommentNode : GraphNode
	{
		[Token(Token = "0x4002624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string message;

		[Token(Token = "0x4002625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color background;

		[Token(Token = "0x4002626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int fontSize;

		[Token(Token = "0x6002A7D")]
		[Address(RVA = "0xE09C20", Offset = "0xE09C20", VA = "0xE09C20", Slot = "6")]
		public override void CopyFrom(GraphNode node)
		{
		}

		[Token(Token = "0x6002A7E")]
		[Address(RVA = "0xE09D80", Offset = "0xE09D80", VA = "0xE09D80")]
		public CommentNode()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200076A")]
	public class IndexCounter
	{
		[Token(Token = "0x4002627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private int index;

		[Token(Token = "0x6002A7F")]
		[Address(RVA = "0xE09E40", Offset = "0xE09E40", VA = "0xE09E40")]
		public int GetNext()
		{
			return default(int);
		}

		[Token(Token = "0x6002A80")]
		[Address(RVA = "0xE09E54", Offset = "0xE09E54", VA = "0xE09E54")]
		public IndexCounter()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200076B")]
	public class Graph : ScriptableObject
	{
		[Token(Token = "0x4002628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private IndexCounter indexCounter;

		[Token(Token = "0x4002629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private IndexCounter topZIndex;

		[Token(Token = "0x400262A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<GraphNode> nodes;

		[Token(Token = "0x400262B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private List<GraphLink> links;

		[Token(Token = "0x17000695")]
		public IndexCounter IndexCounter
		{
			[Token(Token = "0x6002A81")]
			[Address(RVA = "0xE09E5C", Offset = "0xE09E5C", VA = "0xE09E5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000696")]
		public List<GraphNode> Nodes
		{
			[Token(Token = "0x6002A82")]
			[Address(RVA = "0xE09E64", Offset = "0xE09E64", VA = "0xE09E64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000697")]
		public List<GraphLink> Links
		{
			[Token(Token = "0x6002A83")]
			[Address(RVA = "0xE09E6C", Offset = "0xE09E6C", VA = "0xE09E6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000698")]
		public IndexCounter TopZIndex
		{
			[Token(Token = "0x6002A84")]
			[Address(RVA = "0xE09E74", Offset = "0xE09E74", VA = "0xE09E74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002A85")]
		[Address(RVA = "0xE09E7C", Offset = "0xE09E7C", VA = "0xE09E7C", Slot = "4")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6002A86")]
		[Address(RVA = "0xE0A078", Offset = "0xE0A078", VA = "0xE0A078")]
		public GraphNode GetNode(string id)
		{
			return null;
		}

		[Token(Token = "0x6002A87")]
		public T[] GetNodes<T>() where T : GraphNode
		{
			return null;
		}

		[Token(Token = "0x6002A88")]
		[Address(RVA = "0xE0A1B4", Offset = "0xE0A1B4", VA = "0xE0A1B4")]
		public Graph()
		{
		}
	}
	[Token(Token = "0x200076D")]
	public abstract class GraphBuilder
	{
		[Token(Token = "0x400262D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Graph graph;

		[Token(Token = "0x17000699")]
		public Graph Graph
		{
			[Token(Token = "0x6002A8B")]
			[Address(RVA = "0xE0A1E0", Offset = "0xE0A1E0", VA = "0xE0A1E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002A8C")]
		[Address(RVA = "0xE0A1E8", Offset = "0xE0A1E8", VA = "0xE0A1E8")]
		public GraphBuilder(Graph graph)
		{
		}

		[Token(Token = "0x6002A8D")]
		public abstract void DestroyNode(GraphNode node, UIUndoSystem undo);

		[Token(Token = "0x6002A8E")]
		public abstract GraphNode CreateNode(Type nodeType, UIUndoSystem undo);

		[Token(Token = "0x6002A8F")]
		public abstract TLink LinkNodes<TLink>(GraphPin outputPin, GraphPin inputPin) where TLink : GraphLink;

		[Token(Token = "0x6002A90")]
		public T CreateNode<T>(UIUndoSystem undo) where T : GraphNode
		{
			return null;
		}

		[Token(Token = "0x6002A91")]
		[Address(RVA = "0xE0A210", Offset = "0xE0A210", VA = "0xE0A210")]
		public void DestroyAllNodes(UIUndoSystem undo)
		{
		}
	}
	[Token(Token = "0x200076E")]
	public class NonEditorGraphBuilder : GraphBuilder
	{
		[Token(Token = "0x6002A92")]
		[Address(RVA = "0xE0A2CC", Offset = "0xE0A2CC", VA = "0xE0A2CC")]
		public NonEditorGraphBuilder(Graph graph)
		{
		}

		[Token(Token = "0x6002A93")]
		[Address(RVA = "0xE0A2F4", Offset = "0xE0A2F4", VA = "0xE0A2F4", Slot = "5")]
		public override GraphNode CreateNode(Type nodeType, UIUndoSystem undo)
		{
			return null;
		}

		[Token(Token = "0x6002A94")]
		public override TLink LinkNodes<TLink>(GraphPin outputPin, GraphPin inputPin)
		{
			return null;
		}

		[Token(Token = "0x6002A95")]
		[Address(RVA = "0xE0A488", Offset = "0xE0A488", VA = "0xE0A488", Slot = "4")]
		public override void DestroyNode(GraphNode node, UIUndoSystem undo)
		{
		}

		[Token(Token = "0x6002A96")]
		[Address(RVA = "0xE0AA98", Offset = "0xE0AA98", VA = "0xE0AA98")]
		private void DestroyObject(UnityEngine.Object obj)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200076F")]
	public class GraphCamera
	{
		[Token(Token = "0x400262E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float maxAllowedZoom;

		[Token(Token = "0x400262F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private UnityEngine.Vector2 position;

		[Token(Token = "0x4002630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public UnityEngine.Vector2 ScreenOffset;

		[Token(Token = "0x4002631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float zoomLevel;

		[Token(Token = "0x1700069A")]
		public float MaxAllowedZoom
		{
			[Token(Token = "0x6002A97")]
			[Address(RVA = "0xE0ABF8", Offset = "0xE0ABF8", VA = "0xE0ABF8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002A98")]
			[Address(RVA = "0xE0AC00", Offset = "0xE0AC00", VA = "0xE0AC00")]
			set
			{
			}
		}

		[Token(Token = "0x1700069B")]
		public UnityEngine.Vector2 Position
		{
			[Token(Token = "0x6002A99")]
			[Address(RVA = "0xE0AC08", Offset = "0xE0AC08", VA = "0xE0AC08")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x6002A9A")]
			[Address(RVA = "0xE0AC10", Offset = "0xE0AC10", VA = "0xE0AC10")]
			set
			{
			}
		}

		[Token(Token = "0x1700069C")]
		public float ZoomLevel
		{
			[Token(Token = "0x6002A9B")]
			[Address(RVA = "0xE0AC18", Offset = "0xE0AC18", VA = "0xE0AC18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002A9C")]
			[Address(RVA = "0xE0AC20", Offset = "0xE0AC20", VA = "0xE0AC20")]
			set
			{
			}
		}

		[Token(Token = "0x6002A9D")]
		[Address(RVA = "0xE0AC28", Offset = "0xE0AC28", VA = "0xE0AC28")]
		public void Pan(int x, int y)
		{
		}

		[Token(Token = "0x6002A9E")]
		[Address(RVA = "0xE0AC4C", Offset = "0xE0AC4C", VA = "0xE0AC4C")]
		public void Pan(UnityEngine.Vector2 delta)
		{
		}

		[Token(Token = "0x6002A9F")]
		[Address(RVA = "0xE0AC68", Offset = "0xE0AC68", VA = "0xE0AC68")]
		public void HandleInput(Event e)
		{
		}

		[Token(Token = "0x6002AA0")]
		[Address(RVA = "0xE0AE38", Offset = "0xE0AE38", VA = "0xE0AE38")]
		public UnityEngine.Vector2 WorldToScreen(UnityEngine.Vector2 worldCoord)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6002AA1")]
		[Address(RVA = "0xE0AE14", Offset = "0xE0AE14", VA = "0xE0AE14")]
		public UnityEngine.Vector2 ScreenToWorld(UnityEngine.Vector2 screenCoord)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6002AA2")]
		[Address(RVA = "0xE0AE60", Offset = "0xE0AE60", VA = "0xE0AE60")]
		public Rect WorldToScreen(Rect worldCoord)
		{
			return default(Rect);
		}

		[Token(Token = "0x6002AA3")]
		[Address(RVA = "0xE0AEF0", Offset = "0xE0AEF0", VA = "0xE0AEF0")]
		public Rect ScreenToWorld(Rect screenCoord)
		{
			return default(Rect);
		}

		[Token(Token = "0x6002AA4")]
		[Address(RVA = "0xE0AF7C", Offset = "0xE0AF7C", VA = "0xE0AF7C")]
		public void FocusOnBestFit(Graph graph, Rect editorBounds)
		{
		}

		[Token(Token = "0x6002AA5")]
		[Address(RVA = "0xE0B254", Offset = "0xE0B254", VA = "0xE0B254")]
		public void FocusOnNode(GraphNode node, Rect editorBounds)
		{
		}

		[Token(Token = "0x6002AA6")]
		[Address(RVA = "0xE0B2D8", Offset = "0xE0B2D8", VA = "0xE0B2D8")]
		public GraphCamera()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000770")]
	public class GraphLink : ScriptableObject
	{
		[Token(Token = "0x4002632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int id;

		[Token(Token = "0x4002633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GraphPin input;

		[Token(Token = "0x4002634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GraphPin output;

		[Token(Token = "0x4002635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Graph graph;

		[Token(Token = "0x1700069D")]
		public int Id
		{
			[Token(Token = "0x6002AA7")]
			[Address(RVA = "0xE0B34C", Offset = "0xE0B34C", VA = "0xE0B34C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002AA8")]
			[Address(RVA = "0xE0B354", Offset = "0xE0B354", VA = "0xE0B354")]
			set
			{
			}
		}

		[Token(Token = "0x1700069E")]
		public GraphPin Input
		{
			[Token(Token = "0x6002AA9")]
			[Address(RVA = "0xE0B3C8", Offset = "0xE0B3C8", VA = "0xE0B3C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AAA")]
			[Address(RVA = "0xE0B3D0", Offset = "0xE0B3D0", VA = "0xE0B3D0")]
			set
			{
			}
		}

		[Token(Token = "0x1700069F")]
		public GraphPin Output
		{
			[Token(Token = "0x6002AAB")]
			[Address(RVA = "0xE0B3D8", Offset = "0xE0B3D8", VA = "0xE0B3D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AAC")]
			[Address(RVA = "0xE0B3E0", Offset = "0xE0B3E0", VA = "0xE0B3E0")]
			set
			{
			}
		}

		[Token(Token = "0x170006A0")]
		public Graph Graph
		{
			[Token(Token = "0x6002AAD")]
			[Address(RVA = "0xE0B3E8", Offset = "0xE0B3E8", VA = "0xE0B3E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AAE")]
			[Address(RVA = "0xE0B3F0", Offset = "0xE0B3F0", VA = "0xE0B3F0")]
			set
			{
			}
		}

		[Token(Token = "0x6002AAF")]
		[Address(RVA = "0xE0B3F8", Offset = "0xE0B3F8", VA = "0xE0B3F8")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6002AB0")]
		[Address(RVA = "0xE0B35C", Offset = "0xE0B35C", VA = "0xE0B35C")]
		private void UpdateName()
		{
		}

		[Token(Token = "0x6002AB1")]
		[Address(RVA = "0xE0B418", Offset = "0xE0B418", VA = "0xE0B418")]
		public float GetTangentStrength()
		{
			return default(float);
		}

		[Token(Token = "0x6002AB2")]
		[Address(RVA = "0xE0B574", Offset = "0xE0B574", VA = "0xE0B574")]
		public GraphLink()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000771")]
	public class GraphNode : ScriptableObject
	{
		[Token(Token = "0x4002636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		protected string id;

		[Token(Token = "0x4002637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		protected string caption;

		[Token(Token = "0x4002638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		protected Rect bounds;

		[Token(Token = "0x4002639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		protected bool canBeDeleted;

		[Token(Token = "0x400263A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[SerializeField]
		[HideInInspector]
		protected bool canBeSelected;

		[Token(Token = "0x400263B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		[SerializeField]
		[HideInInspector]
		protected bool canBeMoved;

		[Token(Token = "0x400263C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		[SerializeField]
		[HideInInspector]
		protected bool selected;

		[Token(Token = "0x400263D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[HideInInspector]
		protected int zIndex;

		[Token(Token = "0x400263E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		protected List<GraphPin> inputPins;

		[Token(Token = "0x400263F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		protected List<GraphPin> outputPins;

		[Token(Token = "0x4002640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		protected Graph graph;

		[Token(Token = "0x4002641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool dragging;

		[Token(Token = "0x170006A1")]
		public string Id
		{
			[Token(Token = "0x6002AB3")]
			[Address(RVA = "0xE0B57C", Offset = "0xE0B57C", VA = "0xE0B57C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AB4")]
			[Address(RVA = "0xE0B584", Offset = "0xE0B584", VA = "0xE0B584")]
			set
			{
			}
		}

		[Token(Token = "0x170006A2")]
		public string Caption
		{
			[Token(Token = "0x6002AB5")]
			[Address(RVA = "0xE0B58C", Offset = "0xE0B58C", VA = "0xE0B58C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002AB6")]
			[Address(RVA = "0xE0B594", Offset = "0xE0B594", VA = "0xE0B594")]
			set
			{
			}
		}

		[Token(Token = "0x170006A3")]
		public Rect Bounds
		{
			[Token(Token = "0x6002AB7")]
			[Address(RVA = "0xE0B59C", Offset = "0xE0B59C", VA = "0xE0B59C")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x6002AB8")]
			[Address(RVA = "0xE0B5A8", Offset = "0xE0B5A8", VA = "0xE0B5A8")]
			set
			{
			}
		}

		[Token(Token = "0x170006A4")]
		public bool CanBeDeleted
		{
			[Token(Token = "0x6002AB9")]
			[Address(RVA = "0xE0B5B4", Offset = "0xE0B5B4", VA = "0xE0B5B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170006A5")]
		public bool CanBeSelected
		{
			[Token(Token = "0x6002ABA")]
			[Address(RVA = "0xE0B5BC", Offset = "0xE0B5BC", VA = "0xE0B5BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170006A6")]
		public bool CanBeMoved
		{
			[Token(Token = "0x6002ABB")]
			[Address(RVA = "0xE0B5C4", Offset = "0xE0B5C4", VA = "0xE0B5C4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170006A7")]
		public bool Selected
		{
			[Token(Token = "0x6002ABC")]
			[Address(RVA = "0xE0B5CC", Offset = "0xE0B5CC", VA = "0xE0B5CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002ABD")]
			[Address(RVA = "0xE0B5D4", Offset = "0xE0B5D4", VA = "0xE0B5D4")]
			set
			{
			}
		}

		[Token(Token = "0x170006A8")]
		public UnityEngine.Vector2 Size
		{
			[Token(Token = "0x6002ABE")]
			[Address(RVA = "0xE0B5EC", Offset = "0xE0B5EC", VA = "0xE0B5EC")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x6002ABF")]
			[Address(RVA = "0xE0B5F8", Offset = "0xE0B5F8", VA = "0xE0B5F8")]
			set
			{
			}
		}

		[Token(Token = "0x170006A9")]
		public UnityEngine.Vector2 Position
		{
			[Token(Token = "0x6002AC0")]
			[Address(RVA = "0xE0B604", Offset = "0xE0B604", VA = "0xE0B604")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x6002AC1")]
			[Address(RVA = "0xE0A47C", Offset = "0xE0A47C", VA = "0xE0A47C")]
			set
			{
			}
		}

		[Token(Token = "0x170006AA")]
		public int ZIndex
		{
			[Token(Token = "0x6002AC2")]
			[Address(RVA = "0xE0B610", Offset = "0xE0B610", VA = "0xE0B610")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002AC3")]
			[Address(RVA = "0xE0B618", Offset = "0xE0B618", VA = "0xE0B618")]
			set
			{
			}
		}

		[Token(Token = "0x170006AB")]
		public GraphPin[] InputPins
		{
			[Token(Token = "0x6002AC4")]
			[Address(RVA = "0xE0AB10", Offset = "0xE0AB10", VA = "0xE0AB10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006AC")]
		public GraphPin[] OutputPins
		{
			[Token(Token = "0x6002AC5")]
			[Address(RVA = "0xE0AB84", Offset = "0xE0AB84", VA = "0xE0AB84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006AD")]
		public GraphPin OutputPin
		{
			[Token(Token = "0x6002AC6")]
			[Address(RVA = "0xE0B620", Offset = "0xE0B620", VA = "0xE0B620")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006AE")]
		public GraphPin InputPin
		{
			[Token(Token = "0x6002AC7")]
			[Address(RVA = "0xE0B694", Offset = "0xE0B694", VA = "0xE0B694")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006AF")]
		public Graph Graph
		{
			[Token(Token = "0x6002AC8")]
			[Address(RVA = "0xE0B708", Offset = "0xE0B708", VA = "0xE0B708")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006B0")]
		public bool Dragging
		{
			[Token(Token = "0x6002ACD")]
			[Address(RVA = "0xE0B758", Offset = "0xE0B758", VA = "0xE0B758")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002ACE")]
			[Address(RVA = "0xE0B760", Offset = "0xE0B760", VA = "0xE0B760")]
			set
			{
			}
		}

		[Token(Token = "0x6002AC9")]
		[Address(RVA = "0xE0B710", Offset = "0xE0B710", VA = "0xE0B710", Slot = "4")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6002ACA")]
		[Address(RVA = "0xE0B71C", Offset = "0xE0B71C", VA = "0xE0B71C", Slot = "5")]
		public virtual void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6002ACB")]
		[Address(RVA = "0xE09CF8", Offset = "0xE09CF8", VA = "0xE09CF8", Slot = "6")]
		public virtual void CopyFrom(GraphNode node)
		{
		}

		[Token(Token = "0x6002ACC")]
		[Address(RVA = "0xE0B728", Offset = "0xE0B728", VA = "0xE0B728")]
		protected void UpdateName(string prefix)
		{
		}

		[Token(Token = "0x6002ACF")]
		[Address(RVA = "0xE0B76C", Offset = "0xE0B76C", VA = "0xE0B76C")]
		protected GraphPin CreatePin(GraphPinType pinType, UnityEngine.Vector2 position, Rect boundsOffset, UnityEngine.Vector2 tangent)
		{
			return null;
		}

		[Token(Token = "0x6002AD0")]
		protected T CreatePinOfType<T>(GraphPinType pinType, UnityEngine.Vector2 position, Rect boundsOffset, UnityEngine.Vector2 tangent) where T : GraphPin
		{
			return null;
		}

		[Token(Token = "0x6002AD1")]
		[Address(RVA = "0xE0B824", Offset = "0xE0B824", VA = "0xE0B824")]
		public GraphNode[] GetParentNodes()
		{
			return null;
		}

		[Token(Token = "0x6002AD2")]
		[Address(RVA = "0xE0BD7C", Offset = "0xE0BD7C", VA = "0xE0BD7C")]
		public GraphNode[] GetChildNodes()
		{
			return null;
		}

		[Token(Token = "0x6002AD3")]
		[Address(RVA = "0xE0BF9C", Offset = "0xE0BF9C", VA = "0xE0BF9C")]
		public void DragNode(UnityEngine.Vector2 delta)
		{
		}

		[Token(Token = "0x6002AD4")]
		[Address(RVA = "0xE09DE0", Offset = "0xE09DE0", VA = "0xE09DE0")]
		public GraphNode()
		{
		}
	}
	[Token(Token = "0x2000772")]
	public enum GraphPinType
	{
		[Token(Token = "0x4002643")]
		Input,
		[Token(Token = "0x4002644")]
		Output,
		[Token(Token = "0x4002645")]
		Unknown
	}
	[Token(Token = "0x2000773")]
	public enum GraphPinMouseState
	{
		[Token(Token = "0x4002647")]
		Hover,
		[Token(Token = "0x4002648")]
		Clicked,
		[Token(Token = "0x4002649")]
		None
	}
	[Serializable]
	[Token(Token = "0x2000774")]
	public class GraphPin : ScriptableObject
	{
		[Token(Token = "0x2000775")]
		public delegate void OnPinLinksDestroyed(GraphPin pin);

		[Token(Token = "0x400264A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphPinMouseState clickState;

		[Token(Token = "0x400264B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private GraphPinType pinType;

		[Token(Token = "0x400264D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GraphNode node;

		[Token(Token = "0x400264E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEngine.Vector2 position;

		[Token(Token = "0x400264F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Rect boundsOffset;

		[Token(Token = "0x4002650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private UnityEngine.Vector2 tangent;

		[Token(Token = "0x4002651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private float tangentStrength;

		[Token(Token = "0x4002652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool requestLinkDeletionInitiated;

		[Token(Token = "0x170006B1")]
		public GraphPinMouseState ClickState
		{
			[Token(Token = "0x6002AD5")]
			[Address(RVA = "0xE0BFD8", Offset = "0xE0BFD8", VA = "0xE0BFD8")]
			get
			{
				return default(GraphPinMouseState);
			}
			[Token(Token = "0x6002AD6")]
			[Address(RVA = "0xE0BFE0", Offset = "0xE0BFE0", VA = "0xE0BFE0")]
			set
			{
			}
		}

		[Token(Token = "0x170006B2")]
		public GraphPinType PinType
		{
			[Token(Token = "0x6002AD7")]
			[Address(RVA = "0xE0BFE8", Offset = "0xE0BFE8", VA = "0xE0BFE8")]
			get
			{
				return default(GraphPinType);
			}
			[Token(Token = "0x6002AD8")]
			[Address(RVA = "0xE0BFF0", Offset = "0xE0BFF0", VA = "0xE0BFF0")]
			set
			{
			}
		}

		[Token(Token = "0x170006B3")]
		public GraphNode Node
		{
			[Token(Token = "0x6002ADB")]
			[Address(RVA = "0xE0C130", Offset = "0xE0C130", VA = "0xE0C130")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002ADC")]
			[Address(RVA = "0xE0C138", Offset = "0xE0C138", VA = "0xE0C138")]
			set
			{
			}
		}

		[Token(Token = "0x170006B4")]
		public UnityEngine.Vector2 Position
		{
			[Token(Token = "0x6002ADD")]
			[Address(RVA = "0xE0C140", Offset = "0xE0C140", VA = "0xE0C140")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x6002ADE")]
			[Address(RVA = "0xE0C148", Offset = "0xE0C148", VA = "0xE0C148")]
			set
			{
			}
		}

		[Token(Token = "0x170006B5")]
		public UnityEngine.Vector2 WorldPosition
		{
			[Token(Token = "0x6002ADF")]
			[Address(RVA = "0xE0B4D8", Offset = "0xE0B4D8", VA = "0xE0B4D8")]
			get
			{
				return default(UnityEngine.Vector2);
			}
		}

		[Token(Token = "0x170006B6")]
		public Rect BoundsOffset
		{
			[Token(Token = "0x6002AE0")]
			[Address(RVA = "0xE0C150", Offset = "0xE0C150", VA = "0xE0C150")]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x6002AE1")]
			[Address(RVA = "0xE0C15C", Offset = "0xE0C15C", VA = "0xE0C15C")]
			set
			{
			}
		}

		[Token(Token = "0x170006B7")]
		public UnityEngine.Vector2 Tangent
		{
			[Token(Token = "0x6002AE2")]
			[Address(RVA = "0xE0C168", Offset = "0xE0C168", VA = "0xE0C168")]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x6002AE3")]
			[Address(RVA = "0xE0C170", Offset = "0xE0C170", VA = "0xE0C170")]
			set
			{
			}
		}

		[Token(Token = "0x170006B8")]
		public float TangentStrength
		{
			[Token(Token = "0x6002AE4")]
			[Address(RVA = "0xE0C178", Offset = "0xE0C178", VA = "0xE0C178")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002AE5")]
			[Address(RVA = "0xE0C180", Offset = "0xE0C180", VA = "0xE0C180")]
			set
			{
			}
		}

		[Token(Token = "0x170006B9")]
		public bool RequestLinkDeletionInitiated
		{
			[Token(Token = "0x6002AEC")]
			[Address(RVA = "0xE0C310", Offset = "0xE0C310", VA = "0xE0C310")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002AED")]
			[Address(RVA = "0xE0C318", Offset = "0xE0C318", VA = "0xE0C318")]
			set
			{
			}
		}

		[Token(Token = "0x14000036")]
		public event OnPinLinksDestroyed PinLinksDestroyed
		{
			[Token(Token = "0x6002AD9")]
			[Address(RVA = "0xE0BFF8", Offset = "0xE0BFF8", VA = "0xE0BFF8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6002ADA")]
			[Address(RVA = "0xE0C094", Offset = "0xE0C094", VA = "0xE0C094")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6002AE6")]
		[Address(RVA = "0xE0C188", Offset = "0xE0C188", VA = "0xE0C188")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6002AE7")]
		[Address(RVA = "0xE0BA44", Offset = "0xE0BA44", VA = "0xE0BA44")]
		public GraphLink[] GetConntectedLinks()
		{
			return null;
		}

		[Token(Token = "0x6002AE8")]
		[Address(RVA = "0xE0C194", Offset = "0xE0C194", VA = "0xE0C194", Slot = "4")]
		public virtual bool ContainsPoint(UnityEngine.Vector2 worldPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AE9")]
		[Address(RVA = "0xE0C1DC", Offset = "0xE0C1DC", VA = "0xE0C1DC")]
		private Rect GetWorldBounds()
		{
			return default(Rect);
		}

		[Token(Token = "0x6002AEA")]
		[Address(RVA = "0xE0C26C", Offset = "0xE0C26C", VA = "0xE0C26C")]
		public Rect GetBounds()
		{
			return default(Rect);
		}

		[Token(Token = "0x6002AEB")]
		[Address(RVA = "0xE0C2F0", Offset = "0xE0C2F0", VA = "0xE0C2F0")]
		public void NotifyPinLinksDestroyed()
		{
		}

		[Token(Token = "0x6002AEE")]
		[Address(RVA = "0xE0C324", Offset = "0xE0C324", VA = "0xE0C324")]
		public GraphPin()
		{
		}
	}
	[Token(Token = "0x2000776")]
	public class GraphSchema
	{
		[Token(Token = "0x6002AF3")]
		[Address(RVA = "0xE0C4C0", Offset = "0xE0C4C0", VA = "0xE0C4C0", Slot = "4")]
		public virtual bool CanCreateLink(GraphPin output, GraphPin input)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AF4")]
		[Address(RVA = "0xE0C4E4", Offset = "0xE0C4E4", VA = "0xE0C4E4", Slot = "5")]
		public virtual bool CanCreateLink(GraphPin output, GraphPin input, out string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AF5")]
		[Address(RVA = "0xE0CB44", Offset = "0xE0CB44", VA = "0xE0CB44")]
		private static string CombineMarkerNames(List<MarkerNode> markerNodes)
		{
			return null;
		}

		[Token(Token = "0x6002AF6")]
		[Address(RVA = "0xE0C824", Offset = "0xE0C824", VA = "0xE0C824")]
		private static bool ContainsLoops(GraphPin a, GraphPin b, ref List<MarkerNode> cyclePath)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AF7")]
		[Address(RVA = "0xE0CF14", Offset = "0xE0CF14", VA = "0xE0CF14")]
		private static bool FindCycles(ref Dictionary<MarkerNode, List<MarkerNode>> markerChildMap, ref List<MarkerNode> cyclePath)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AF8")]
		[Address(RVA = "0xE0D204", Offset = "0xE0D204", VA = "0xE0D204")]
		private static bool CheckCycleDFS(ref Dictionary<MarkerNode, List<MarkerNode>> markerChildMap, ref List<MarkerNode> traversePath)
		{
			return default(bool);
		}

		[Token(Token = "0x6002AF9")]
		[Address(RVA = "0xE0D578", Offset = "0xE0D578", VA = "0xE0D578")]
		private static GraphNode[] GetOutgoingNodes(GraphNode node, GraphPin a, GraphPin b)
		{
			return null;
		}

		[Token(Token = "0x6002AFA")]
		[Address(RVA = "0xE0CD1C", Offset = "0xE0CD1C", VA = "0xE0CD1C")]
		private static MarkerEmitterNode[] GetEmitters(MarkerNode markerNode, GraphPin a, GraphPin b)
		{
			return null;
		}

		[Token(Token = "0x6002AFB")]
		[Address(RVA = "0xE0D914", Offset = "0xE0D914", VA = "0xE0D914")]
		public GraphSchema()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000777")]
	public class GameObjectArrayNode : VisualNode
	{
		[Token(Token = "0x4002653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GameObject[] Templates;

		[Token(Token = "0x6002AFC")]
		[Address(RVA = "0xE0D91C", Offset = "0xE0D91C", VA = "0xE0D91C", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6002AFD")]
		[Address(RVA = "0xE0DB60", Offset = "0xE0DB60", VA = "0xE0DB60", Slot = "6")]
		public override void CopyFrom(GraphNode node)
		{
		}

		[Token(Token = "0x6002AFE")]
		[Address(RVA = "0xE0DD6C", Offset = "0xE0DD6C", VA = "0xE0DD6C")]
		public GameObjectArrayNode()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000778")]
	public class GameObjectNode : VisualNode
	{
		[Token(Token = "0x4002654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public GameObject Template;

		[Token(Token = "0x6002AFF")]
		[Address(RVA = "0xE0DD84", Offset = "0xE0DD84", VA = "0xE0DD84", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6002B00")]
		[Address(RVA = "0xE0DE28", Offset = "0xE0DE28", VA = "0xE0DE28", Slot = "6")]
		public override void CopyFrom(GraphNode node)
		{
		}

		[Token(Token = "0x6002B01")]
		[Address(RVA = "0xE0DEF8", Offset = "0xE0DEF8", VA = "0xE0DEF8")]
		public GameObjectNode()
		{
		}
	}
	[Token(Token = "0x2000779")]
	public class MarkerEmitterNode : PlaceableNode
	{
		[Token(Token = "0x4002655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private MarkerNode marker;

		[Token(Token = "0x170006BA")]
		public MarkerNode Marker
		{
			[Token(Token = "0x6002B02")]
			[Address(RVA = "0xE0DF04", Offset = "0xE0DF04", VA = "0xE0DF04")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002B03")]
			[Address(RVA = "0xE0DF0C", Offset = "0xE0DF0C", VA = "0xE0DF0C")]
			set
			{
			}
		}

		[Token(Token = "0x6002B04")]
		[Address(RVA = "0xE0DF14", Offset = "0xE0DF14", VA = "0xE0DF14", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6002B05")]
		[Address(RVA = "0xE0E098", Offset = "0xE0E098", VA = "0xE0E098")]
		public MarkerEmitterNode()
		{
		}
	}
	[Token(Token = "0x200077A")]
	public class MarkerNode : GraphNode
	{
		[Token(Token = "0x6002B06")]
		[Address(RVA = "0xE0E110", Offset = "0xE0E110", VA = "0xE0E110", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6002B07")]
		[Address(RVA = "0xE0E298", Offset = "0xE0E298", VA = "0xE0E298")]
		public MarkerNode()
		{
		}
	}
	[Token(Token = "0x200077B")]
	public class PlaceableNode : GraphNode
	{
		[Token(Token = "0x4002656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Matrix4x4 offset;

		[Token(Token = "0x4002657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public bool consumeOnAttach;

		[Token(Token = "0x4002658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float attachmentProbability;

		[Token(Token = "0x6002B08")]
		[Address(RVA = "0xE0E29C", Offset = "0xE0E29C", VA = "0xE0E29C", Slot = "6")]
		public override void CopyFrom(GraphNode node)
		{
		}

		[Token(Token = "0x6002B09")]
		[Address(RVA = "0xE0E09C", Offset = "0xE0E09C", VA = "0xE0E09C")]
		public PlaceableNode()
		{
		}
	}
	[Token(Token = "0x200077C")]
	public enum DungeonSpriteCollisionType
	{
		[Token(Token = "0x400265A")]
		None,
		[Token(Token = "0x400265B")]
		Box,
		[Token(Token = "0x400265C")]
		Circle,
		[Token(Token = "0x400265D")]
		Polygon
	}
	[Serializable]
	[Token(Token = "0x200077D")]
	public class SpriteNode : VisualNode
	{
		[Token(Token = "0x400265E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Sprite sprite;

		[Token(Token = "0x400265F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Color color;

		[Token(Token = "0x4002660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Material materialOverride;

		[Token(Token = "0x4002661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public string sortingLayerName;

		[Token(Token = "0x4002662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public int orderInLayer;

		[Token(Token = "0x4002663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public DungeonSpriteCollisionType collisionType;

		[Token(Token = "0x4002664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public PhysicsMaterial2D physicsMaterial;

		[Token(Token = "0x4002665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public UnityEngine.Vector2 physicsOffset;

		[Token(Token = "0x4002666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public UnityEngine.Vector2 physicsSize;

		[Token(Token = "0x4002667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public float physicsRadius;

		[Token(Token = "0x6002B0A")]
		[Address(RVA = "0xE0E394", Offset = "0xE0E394", VA = "0xE0E394", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6002B0B")]
		[Address(RVA = "0xE0E438", Offset = "0xE0E438", VA = "0xE0E438", Slot = "6")]
		public override void CopyFrom(GraphNode node)
		{
		}

		[Token(Token = "0x6002B0C")]
		[Address(RVA = "0xE0E520", Offset = "0xE0E520", VA = "0xE0E520")]
		public SpriteNode()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200077E")]
	public class VisualNode : PlaceableNode
	{
		[Token(Token = "0x4002668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public bool IsStatic;

		[Token(Token = "0x4002669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		public bool affectsNavigation;

		[Token(Token = "0x400266A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
		public bool selectionRuleEnabled;

		[Token(Token = "0x400266B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string selectionRuleClassName;

		[Token(Token = "0x400266C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool transformRuleEnabled;

		[Token(Token = "0x400266D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public string transformRuleClassName;

		[Token(Token = "0x400266E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool useSpatialConstraint;

		[Token(Token = "0x400266F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		public SpatialConstraintAsset spatialConstraint;

		[Token(Token = "0x6002B0D")]
		[Address(RVA = "0xE0D9C0", Offset = "0xE0D9C0", VA = "0xE0D9C0", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6002B0E")]
		[Address(RVA = "0xE0DC74", Offset = "0xE0DC74", VA = "0xE0DC74", Slot = "6")]
		public override void CopyFrom(GraphNode node)
		{
		}

		[Token(Token = "0x6002B0F")]
		[Address(RVA = "0xE0DD78", Offset = "0xE0DD78", VA = "0xE0DD78")]
		public VisualNode()
		{
		}
	}
}
namespace DungeonArchitect.Graphs.SpatialConstraints
{
	[Token(Token = "0x200077F")]
	public class SCBaseDomainNode : GraphNode
	{
		[Token(Token = "0x4002670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly float TileSize;

		[Token(Token = "0x4002671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		protected SCRuleNodeDomain ruleDomain;

		[Token(Token = "0x4002672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		protected bool isSnapped;

		[Token(Token = "0x170006BB")]
		public SCRuleNodeDomain RuleDomain
		{
			[Token(Token = "0x6002B10")]
			[Address(RVA = "0xE0E5B8", Offset = "0xE0E5B8", VA = "0xE0E5B8")]
			get
			{
				return default(SCRuleNodeDomain);
			}
		}

		[Token(Token = "0x170006BC")]
		public bool IsSnapped
		{
			[Token(Token = "0x6002B11")]
			[Address(RVA = "0xE0E5C0", Offset = "0xE0E5C0", VA = "0xE0E5C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002B12")]
			[Address(RVA = "0xE0E5C8", Offset = "0xE0E5C8", VA = "0xE0E5C8")]
			set
			{
			}
		}

		[Token(Token = "0x6002B13")]
		[Address(RVA = "0xE0E5D4", Offset = "0xE0E5D4", VA = "0xE0E5D4", Slot = "7")]
		public virtual Color GetColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6002B14")]
		[Address(RVA = "0xE0E5E8", Offset = "0xE0E5E8", VA = "0xE0E5E8", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6002B15")]
		[Address(RVA = "0xE0E670", Offset = "0xE0E670", VA = "0xE0E670")]
		public static UnityEngine.Vector2 GetSnapPosition(UnityEngine.Vector2 position)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6002B16")]
		[Address(RVA = "0xE0E888", Offset = "0xE0E888", VA = "0xE0E888")]
		public bool ContainsOtherNodeAt(UnityEngine.Vector2 snappedPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6002B17")]
		[Address(RVA = "0xE0EA84", Offset = "0xE0EA84", VA = "0xE0EA84")]
		public IntVector2 GetHalfGridLogicalCoords()
		{
			return default(IntVector2);
		}

		[Token(Token = "0x6002B18")]
		[Address(RVA = "0xE0ED2C", Offset = "0xE0ED2C", VA = "0xE0ED2C")]
		private void UpdateRuleDomain()
		{
		}

		[Token(Token = "0x6002B19")]
		[Address(RVA = "0xE0ED88", Offset = "0xE0ED88", VA = "0xE0ED88", Slot = "8")]
		public virtual bool SnapNode()
		{
			return default(bool);
		}

		[Token(Token = "0x6002B1A")]
		[Address(RVA = "0xE0EE48", Offset = "0xE0EE48", VA = "0xE0EE48")]
		public SCBaseDomainNode()
		{
		}
	}
	[Token(Token = "0x2000780")]
	public class SCReferenceNode : SCRuleNode
	{
		[Token(Token = "0x6002B1C")]
		[Address(RVA = "0xE0EEA0", Offset = "0xE0EEA0", VA = "0xE0EEA0", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6002B1D")]
		[Address(RVA = "0xE0EEBC", Offset = "0xE0EEBC", VA = "0xE0EEBC", Slot = "7")]
		public override Color GetColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6002B1E")]
		[Address(RVA = "0xE0EED4", Offset = "0xE0EED4", VA = "0xE0EED4")]
		public SCReferenceNode()
		{
		}
	}
	[Token(Token = "0x2000781")]
	public enum SCRuleNodeDomain
	{
		[Token(Token = "0x4002674")]
		Tile,
		[Token(Token = "0x4002675")]
		Edge,
		[Token(Token = "0x4002676")]
		Corner,
		[Token(Token = "0x4002677")]
		Invalid
	}
	[Token(Token = "0x2000782")]
	public enum SCRuleNodeEvaluationMode
	{
		[Token(Token = "0x4002679")]
		AllRulesMustPass,
		[Token(Token = "0x400267A")]
		AtleastOneRuleShouldPass
	}
	[Token(Token = "0x2000783")]
	public class SCRuleNode : SCBaseDomainNode
	{
		[Token(Token = "0x400267B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		public ConstraintRule[] constraints;

		[Token(Token = "0x400267C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		public SCRuleNodeEvaluationMode constraintEvaluationMode;

		[Token(Token = "0x400267D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		public float exclusionRuleSearchRadius;

		[Token(Token = "0x400267E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		public string[] exclusionRuleMarkersToRemove;

		[Token(Token = "0x6002B1F")]
		[Address(RVA = "0xE0EEB8", Offset = "0xE0EEB8", VA = "0xE0EEB8", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6002B20")]
		[Address(RVA = "0xE0EF90", Offset = "0xE0EF90", VA = "0xE0EF90", Slot = "7")]
		public override Color GetColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6002B21")]
		[Address(RVA = "0xE0EFA4", Offset = "0xE0EFA4", VA = "0xE0EFA4", Slot = "6")]
		public override void CopyFrom(GraphNode node)
		{
		}

		[Token(Token = "0x6002B22")]
		[Address(RVA = "0xE0EED8", Offset = "0xE0EED8", VA = "0xE0EED8")]
		public SCRuleNode()
		{
		}
	}
}
namespace DungeonArchitect.Graphs.Layouts
{
	[Token(Token = "0x2000784")]
	public interface IGraphLayout<T>
	{
		[Token(Token = "0x6002B23")]
		void Layout(T[] nodes, IGraphLayoutNodeActions<T> nodeActions);
	}
	[Token(Token = "0x2000785")]
	public interface IGraphLayoutNodeActions<T>
	{
		[Token(Token = "0x6002B24")]
		void SetNodePosition(T node, UnityEngine.Vector2 position);

		[Token(Token = "0x6002B25")]
		UnityEngine.Vector2 GetNodePosition(T node);

		[Token(Token = "0x6002B26")]
		T[] GetOutgoingNodes(T node);
	}
	[Token(Token = "0x2000786")]
	public enum GraphLayoutType
	{
		[Token(Token = "0x4002680")]
		Layered,
		[Token(Token = "0x4002681")]
		Spring
	}
	[Token(Token = "0x2000787")]
	public class GraphLayoutNode<T>
	{
		[Token(Token = "0x170006BD")]
		public T Payload
		{
			[Token(Token = "0x6002B27")]
			[CompilerGenerated]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6002B28")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170006BE")]
		public UnityEngine.Vector2 Position
		{
			[Token(Token = "0x6002B29")]
			[CompilerGenerated]
			get
			{
				return default(UnityEngine.Vector2);
			}
			[Token(Token = "0x6002B2A")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170006BF")]
		public List<GraphLayoutNode<T>> Outgoing
		{
			[Token(Token = "0x6002B2B")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002B2C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170006C0")]
		public List<GraphLayoutNode<T>> Incoming
		{
			[Token(Token = "0x6002B2D")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002B2E")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002B2F")]
		public GraphLayoutNode(T payload, UnityEngine.Vector2 position)
		{
		}
	}
	[Token(Token = "0x2000788")]
	public abstract class GraphLayoutBase<T> : IGraphLayout<T>
	{
		[Token(Token = "0x6002B30")]
		public void Layout(T[] nodes, IGraphLayoutNodeActions<T> nodeActions)
		{
		}

		[Token(Token = "0x6002B31")]
		protected abstract void LayoutImpl(GraphLayoutNode<T>[] nodes);

		[Token(Token = "0x6002B32")]
		protected GraphLayoutBase()
		{
		}
	}
	[Token(Token = "0x2000789")]
	public class DefaultGraphLayoutNodeActions : IGraphLayoutNodeActions<GraphNode>
	{
		[Token(Token = "0x4002686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<GraphNode, List<GraphNode>> outgoingNodes;

		[Token(Token = "0x6002B33")]
		[Address(RVA = "0xE0F1D4", Offset = "0xE0F1D4", VA = "0xE0F1D4")]
		public DefaultGraphLayoutNodeActions(Graph graph)
		{
		}

		[Token(Token = "0x6002B34")]
		[Address(RVA = "0xE0F658", Offset = "0xE0F658", VA = "0xE0F658", Slot = "4")]
		public void SetNodePosition(GraphNode node, UnityEngine.Vector2 position)
		{
		}

		[Token(Token = "0x6002B35")]
		[Address(RVA = "0xE0F670", Offset = "0xE0F670", VA = "0xE0F670", Slot = "5")]
		public UnityEngine.Vector2 GetNodePosition(GraphNode node)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6002B36")]
		[Address(RVA = "0xE0F688", Offset = "0xE0F688", VA = "0xE0F688", Slot = "6")]
		public GraphNode[] GetOutgoingNodes(GraphNode node)
		{
			return null;
		}
	}
	[Token(Token = "0x200078A")]
	public class RuntimeGraphLayoutNodeActions : IGraphLayoutNodeActions<RuntimeGraphNode<GrammarRuntimeGraphNodeData>>
	{
		[Token(Token = "0x6002B37")]
		[Address(RVA = "0xE0F754", Offset = "0xE0F754", VA = "0xE0F754", Slot = "4")]
		public void SetNodePosition(RuntimeGraphNode<GrammarRuntimeGraphNodeData> node, UnityEngine.Vector2 position)
		{
		}

		[Token(Token = "0x6002B38")]
		[Address(RVA = "0xE0F76C", Offset = "0xE0F76C", VA = "0xE0F76C", Slot = "5")]
		public UnityEngine.Vector2 GetNodePosition(RuntimeGraphNode<GrammarRuntimeGraphNodeData> node)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6002B39")]
		[Address(RVA = "0xE0F784", Offset = "0xE0F784", VA = "0xE0F784", Slot = "6")]
		public RuntimeGraphNode<GrammarRuntimeGraphNodeData>[] GetOutgoingNodes(RuntimeGraphNode<GrammarRuntimeGraphNodeData> node)
		{
			return null;
		}

		[Token(Token = "0x6002B3A")]
		[Address(RVA = "0xE0F7D8", Offset = "0xE0F7D8", VA = "0xE0F7D8")]
		public RuntimeGraphLayoutNodeActions()
		{
		}
	}
}
namespace DungeonArchitect.Graphs.Layouts.Spring
{
	[Serializable]
	[Token(Token = "0x200078B")]
	public class GraphLayoutSpringConfig
	{
		[Token(Token = "0x4002687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public float interNodeDistance;

		[Token(Token = "0x4002688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public float interNodeTension;

		[Token(Token = "0x4002689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public float springDistance;

		[Token(Token = "0x400268A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		public float springTension;

		[Token(Token = "0x400268B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public int iterations;

		[Token(Token = "0x400268C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public float timeStep;

		[Token(Token = "0x6002B3B")]
		[Address(RVA = "0xE0F7E0", Offset = "0xE0F7E0", VA = "0xE0F7E0")]
		public GraphLayoutSpringConfig()
		{
		}
	}
	[Token(Token = "0x200078C")]
	internal class SpatialGrid<T>
	{
		[Token(Token = "0x400268D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Dictionary<IntVector2, List<GraphLayoutNode<T>>> grid;

		[Token(Token = "0x400268E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float cellSize;

		[Token(Token = "0x6002B3C")]
		public SpatialGrid(float cellSize)
		{
		}

		[Token(Token = "0x6002B3D")]
		public void Refresh(GraphLayoutNode<T>[] nodes)
		{
		}

		[Token(Token = "0x6002B3E")]
		private IntVector2 GetKey(GraphLayoutNode<T> node)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x6002B3F")]
		public GraphLayoutNode<T>[] GetNearbyNodes(GraphLayoutNode<T> node)
		{
			return null;
		}
	}
	[Token(Token = "0x200078D")]
	public class GraphLayoutSpring<T> : GraphLayoutBase<T>
	{
		[Token(Token = "0x400268F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GraphLayoutSpringConfig config;

		[Token(Token = "0x6002B40")]
		public GraphLayoutSpring(GraphLayoutSpringConfig config)
		{
		}

		[Token(Token = "0x6002B41")]
		protected override void LayoutImpl(GraphLayoutNode<T>[] nodes)
		{
		}
	}
}
namespace DungeonArchitect.Graphs.Layouts.Layered
{
	[Token(Token = "0x200078E")]
	internal class LayoutTreeNode<T>
	{
		[Token(Token = "0x4002690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GraphLayoutNode<T> GraphNode;

		[Token(Token = "0x4002691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float X;

		[Token(Token = "0x4002692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Depth;

		[Token(Token = "0x4002693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float Mod;

		[Token(Token = "0x4002694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public LayoutTreeNode<T> Parent;

		[Token(Token = "0x4002695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<LayoutTreeNode<T>> Children;

		[Token(Token = "0x6002B42")]
		public LayoutTreeNode()
		{
		}
	}
	[Token(Token = "0x200078F")]
	internal class LayoutTree<T>
	{
		[Token(Token = "0x4002696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public LayoutTreeNode<T> root;

		[Token(Token = "0x4002697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<LayoutTreeNode<T>> nodes;

		[Token(Token = "0x6002B43")]
		public LayoutTree()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000790")]
	public class GraphLayoutLayeredConfig
	{
		[Token(Token = "0x4002698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public UnityEngine.Vector2 separation;

		[Token(Token = "0x6002B44")]
		[Address(RVA = "0xE0F800", Offset = "0xE0F800", VA = "0xE0F800")]
		public GraphLayoutLayeredConfig()
		{
		}
	}
	[Token(Token = "0x2000791")]
	public class GraphLayoutLayered<T> : GraphLayoutBase<T>
	{
		[Token(Token = "0x4002699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GraphLayoutLayeredConfig config;

		[Token(Token = "0x6002B45")]
		public GraphLayoutLayered(GraphLayoutLayeredConfig config)
		{
		}

		[Token(Token = "0x6002B46")]
		private LayoutTreeNode<T> BuildTreeNode(LayoutTree<T> tree, LayoutTreeNode<T> parent, GraphLayoutNode<T> graphNode, HashSet<GraphLayoutNode<T>> visited)
		{
			return null;
		}

		[Token(Token = "0x6002B47")]
		private LayoutTree<T> BuildTree(GraphLayoutNode<T>[] nodes)
		{
			return null;
		}

		[Token(Token = "0x6002B48")]
		private void TagNodeLevels(LayoutTreeNode<T> node, int depth)
		{
		}

		[Token(Token = "0x6002B49")]
		private void CalculateInitialX(LayoutTreeNode<T> Node, LayoutTreeNode<T> LeftSibling)
		{
		}

		[Token(Token = "0x6002B4A")]
		private void ResolveConflicts(LayoutTreeNode<T> Node)
		{
		}

		[Token(Token = "0x6002B4B")]
		private void GetLeftContour(LayoutTreeNode<T> Node, float ModSum, Dictionary<int, float> ContourMap)
		{
		}

		[Token(Token = "0x6002B4C")]
		private void GetRightContour(LayoutTreeNode<T> Node, float ModSum, Dictionary<int, float> ContourMap)
		{
		}

		[Token(Token = "0x6002B4D")]
		private LayoutTreeNode<T> GetLeftMostSibling(LayoutTreeNode<T> Node)
		{
			return null;
		}

		[Token(Token = "0x6002B4E")]
		private LayoutTreeNode<T> GetNextSibling(LayoutTreeNode<T> Node)
		{
			return null;
		}

		[Token(Token = "0x6002B4F")]
		private void CalculateFinalX(LayoutTreeNode<T> Node, float TotalMod)
		{
		}

		[Token(Token = "0x6002B50")]
		protected override void LayoutImpl(GraphLayoutNode<T>[] nodes)
		{
		}
	}
}
namespace DungeonArchitect.Landscape
{
	[Token(Token = "0x2000792")]
	public enum RasterizerTextureSpace
	{
		[Token(Token = "0x400269B")]
		HeightMap,
		[Token(Token = "0x400269C")]
		AlphaMap,
		[Token(Token = "0x400269D")]
		DetailMap
	}
	[Token(Token = "0x2000793")]
	public class LandscapeDataRasterizer
	{
		[Token(Token = "0x400269E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Terrain terrain;

		[Token(Token = "0x400269F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float[,] heights;

		[Token(Token = "0x40026A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool[,] lockedCells;

		[Token(Token = "0x40026A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rect worldBounds;

		[Token(Token = "0x40026A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2Int heightmapFrameStart;

		[Token(Token = "0x40026A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector2Int heightmapFrameSize;

		[Token(Token = "0x6002B51")]
		[Address(RVA = "0xE0F814", Offset = "0xE0F814", VA = "0xE0F814")]
		public LandscapeDataRasterizer(Terrain terrain, Rect worldBounds)
		{
		}

		[Token(Token = "0x6002B52")]
		[Address(RVA = "0xE0FBF4", Offset = "0xE0FBF4", VA = "0xE0FBF4")]
		public void LoadData()
		{
		}

		[Token(Token = "0x6002B53")]
		[Address(RVA = "0xE0FCF4", Offset = "0xE0FCF4", VA = "0xE0FCF4")]
		private float GetElevation(float worldElevation)
		{
			return default(float);
		}

		[Token(Token = "0x6002B54")]
		[Address(RVA = "0xE0FD58", Offset = "0xE0FD58", VA = "0xE0FD58")]
		public static float GetHeight(Terrain terrain, float worldX, float worldZ)
		{
			return default(float);
		}

		[Token(Token = "0x6002B55")]
		[Address(RVA = "0xE0FDD0", Offset = "0xE0FDD0", VA = "0xE0FDD0")]
		public static void WorldToTerrainDistance(Terrain terrain, float worldDistX, float worldDistZ, out int terrainDistX, out int terrainDistZ)
		{
		}

		[Token(Token = "0x6002B56")]
		[Address(RVA = "0xE10010", Offset = "0xE10010", VA = "0xE10010")]
		public static void TerrainToWorldDistance(Terrain terrain, int terrainDistX, int terrainDistZ, out float worldDistX, out float worldDistZ)
		{
		}

		[Token(Token = "0x6002B57")]
		[Address(RVA = "0xE0FDC8", Offset = "0xE0FDC8", VA = "0xE0FDC8")]
		public static void WorldToTerrainCoord(Terrain terrain, float x, float y, out int gx, out int gy)
		{
		}

		[Token(Token = "0x6002B58")]
		[Address(RVA = "0xE0F8FC", Offset = "0xE0F8FC", VA = "0xE0F8FC")]
		public static void WorldToTerrainCoord(Terrain terrain, float x, float y, out int gx, out int gy, RasterizerTextureSpace textureSpace)
		{
		}

		[Token(Token = "0x6002B59")]
		[Address(RVA = "0xE10268", Offset = "0xE10268", VA = "0xE10268")]
		public static void WorldToTerrainTextureCoord(Terrain terrain, float x, float y, out int tx, out int ty)
		{
		}

		[Token(Token = "0x6002B5A")]
		[Address(RVA = "0xE104F0", Offset = "0xE104F0", VA = "0xE104F0")]
		public static void WorldToTerrainDetailCoord(Terrain terrain, float x, float y, out int tx, out int ty)
		{
		}

		[Token(Token = "0x6002B5B")]
		[Address(RVA = "0xE10778", Offset = "0xE10778", VA = "0xE10778")]
		public void DrawCell(float x, float y, float w, float h, float elevation)
		{
		}

		[Token(Token = "0x6002B5C")]
		[Address(RVA = "0xE10780", Offset = "0xE10780", VA = "0xE10780")]
		public void DrawCell(float x, float y, float w, float h, float elevation, float flatten)
		{
		}

		[Token(Token = "0x6002B5D")]
		[Address(RVA = "0xE109C0", Offset = "0xE109C0", VA = "0xE109C0")]
		public void SmoothCell(float x, float y, float w, float h, float elevation, int smoothingDistance, AnimationCurve smoothingCurve)
		{
		}

		[Token(Token = "0x6002B5E")]
		[Address(RVA = "0xE109C8", Offset = "0xE109C8", VA = "0xE109C8")]
		public void SmoothCell(float x, float y, float w, float h, float elevation, int smoothingDistance, AnimationCurve smoothingCurve, float flatten)
		{
		}

		[Token(Token = "0x6002B5F")]
		[Address(RVA = "0xE10C28", Offset = "0xE10C28", VA = "0xE10C28")]
		private float Remap(float value, float oldMin, float oldMax, float newMin, float newMax, bool clamp)
		{
			return default(float);
		}

		[Token(Token = "0x6002B60")]
		[Address(RVA = "0xE10C64", Offset = "0xE10C64", VA = "0xE10C64")]
		public void SaveData()
		{
		}
	}
	[Token(Token = "0x2000794")]
	public enum LandscapeTextureType
	{
		[Token(Token = "0x40026A5")]
		Room,
		[Token(Token = "0x40026A6")]
		Corridor,
		[Token(Token = "0x40026A7")]
		Cliff
	}
	[Serializable]
	[Token(Token = "0x2000795")]
	public class LandscapeTexture
	{
		[Token(Token = "0x40026A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LandscapeTextureType textureType;

		[Token(Token = "0x40026A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TerrainLayer terrainLayer;

		[Token(Token = "0x6002B61")]
		[Address(RVA = "0xE10CA8", Offset = "0xE10CA8", VA = "0xE10CA8")]
		public LandscapeTexture()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000796")]
	public class DLCacheBounds
	{
		[Token(Token = "0x40026AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		[SerializeField]
		public int x1;

		[Token(Token = "0x40026AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[HideInInspector]
		[SerializeField]
		public int x2;

		[Token(Token = "0x40026AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		public int y1;

		[Token(Token = "0x40026AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		[SerializeField]
		public int y2;

		[Token(Token = "0x6002B62")]
		[Address(RVA = "0xE10CB0", Offset = "0xE10CB0", VA = "0xE10CB0")]
		public DLCacheBounds()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000797")]
	public class DungeonLandscapeRestorationCache : ScriptableObject
	{
		[Token(Token = "0x40026AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		private float[] dataHeights;

		[Token(Token = "0x40026AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private DLCacheBounds boundsHeight;

		[Token(Token = "0x40026B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private float[] dataAlphamap;

		[Token(Token = "0x40026B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		[SerializeField]
		private int numAlphaMaps;

		[Token(Token = "0x40026B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private DLCacheBounds boundsAlpha;

		[Token(Token = "0x40026B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private int[] dataDetails;

		[Token(Token = "0x40026B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		private int numDetailMaps;

		[Token(Token = "0x40026B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		private DLCacheBounds boundsDetails;

		[Token(Token = "0x6002B63")]
		[Address(RVA = "0xE10CB8", Offset = "0xE10CB8", VA = "0xE10CB8")]
		private static void SerializeArray(float[,] array, out float[] result)
		{
		}

		[Token(Token = "0x6002B64")]
		[Address(RVA = "0xE10DEC", Offset = "0xE10DEC", VA = "0xE10DEC")]
		private static void SerializeArray(float[,,] array, int numAlphaMaps, out float[] result)
		{
		}

		[Token(Token = "0x6002B65")]
		[Address(RVA = "0xE10F60", Offset = "0xE10F60", VA = "0xE10F60")]
		private static void DeserializeArray(float[] array, int sx, int sy, out float[,] result)
		{
		}

		[Token(Token = "0x6002B66")]
		[Address(RVA = "0xE110C8", Offset = "0xE110C8", VA = "0xE110C8")]
		private static void DeserializeArray(float[] array, int sx, int sy, int sm, int desiredSM, out float[,,] result)
		{
		}

		[Token(Token = "0x6002B67")]
		[Address(RVA = "0xE112A4", Offset = "0xE112A4", VA = "0xE112A4")]
		public void SaveLandscapeData(Terrain terrain, Rect worldBounds)
		{
		}

		[Token(Token = "0x6002B68")]
		[Address(RVA = "0xE116C0", Offset = "0xE116C0", VA = "0xE116C0")]
		public void RestoreLandscapeData(Terrain terrain, Rect worldBounds)
		{
		}

		[Token(Token = "0x6002B69")]
		[Address(RVA = "0xE11AC4", Offset = "0xE11AC4", VA = "0xE11AC4")]
		public DungeonLandscapeRestorationCache()
		{
		}
	}
	[Token(Token = "0x2000798")]
	public class LandscapeTransformerBase : DungeonEventListener
	{
		[Token(Token = "0x40026B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Terrain terrain;

		[Token(Token = "0x40026B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		private bool cachedTerrainDataRestored;

		[Token(Token = "0x40026B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[HideInInspector]
		private Rect worldBounds;

		[Token(Token = "0x40026B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public DungeonLandscapeRestorationCache landscapeRestorationCache;

		[Token(Token = "0x6002B6A")]
		[Address(RVA = "0xE11B64", Offset = "0xE11B64", VA = "0xE11B64", Slot = "4")]
		public override void OnPostDungeonLayoutBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x6002B6B")]
		[Address(RVA = "0xE11D94", Offset = "0xE11D94", VA = "0xE11D94", Slot = "9")]
		public override void OnDungeonDestroyed(Dungeon dungeon)
		{
		}

		[Token(Token = "0x6002B6C")]
		[Address(RVA = "0xE11DC8", Offset = "0xE11DC8", VA = "0xE11DC8", Slot = "10")]
		protected virtual void BuildTerrain(DungeonModel model)
		{
		}

		[Token(Token = "0x6002B6D")]
		[Address(RVA = "0xE11DCC", Offset = "0xE11DCC", VA = "0xE11DCC", Slot = "11")]
		protected virtual Rect GetDungeonBounds(DungeonModel model)
		{
			return default(Rect);
		}

		[Token(Token = "0x6002B6E")]
		[Address(RVA = "0xE11CE8", Offset = "0xE11CE8", VA = "0xE11CE8")]
		private void SaveLandscapeData(DungeonModel model)
		{
		}

		[Token(Token = "0x6002B6F")]
		[Address(RVA = "0xE11C60", Offset = "0xE11C60", VA = "0xE11C60")]
		private void RestoreLandscapeData(DungeonModel model)
		{
		}

		[Token(Token = "0x6002B70")]
		[Address(RVA = "0xE11DD4", Offset = "0xE11DD4", VA = "0xE11DD4")]
		public LandscapeTransformerBase()
		{
		}
	}
}
namespace DungeonArchitect.Grammar
{
	[Serializable]
	[Token(Token = "0x2000799")]
	public class DungeonFlowAsset : ScriptableObject
	{
		[Token(Token = "0x40026BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		public GrammarExecGraph executionGraph;

		[Token(Token = "0x40026BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[SerializeField]
		public GrammarProductionRule[] productionRules;

		[Token(Token = "0x40026BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		public GrammarNodeType[] nodeTypes;

		[Token(Token = "0x40026BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[HideInInspector]
		public GrammarNodeType wildcardNodeType;

		[Token(Token = "0x40026BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		[SerializeField]
		public GrammarGraph resultGraph;

		[Token(Token = "0x6002B71")]
		[Address(RVA = "0xE11DDC", Offset = "0xE11DDC", VA = "0xE11DDC")]
		public DungeonFlowAsset()
		{
		}
	}
	[Token(Token = "0x200079A")]
	public class GrammarNodeType : ScriptableObject
	{
		[Token(Token = "0x40026BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public string nodeName;

		[Token(Token = "0x40026C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public string description;

		[Token(Token = "0x40026C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public Color nodeColor;

		[Token(Token = "0x40026C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		public bool wildcard;

		[Token(Token = "0x6002B72")]
		[Address(RVA = "0xE11DE4", Offset = "0xE11DE4", VA = "0xE11DE4")]
		public GrammarNodeType()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200079B")]
	public class GrammarProductionRule : ScriptableObject
	{
		[Token(Token = "0x40026C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public string ruleName;

		[Token(Token = "0x40026C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[SerializeField]
		public GrammarGraph LHSGraph;

		[Token(Token = "0x40026C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		[SerializeField]
		public List<WeightedGrammarGraph> RHSGraphs;

		[Token(Token = "0x6002B73")]
		[Address(RVA = "0xE11DF8", Offset = "0xE11DF8", VA = "0xE11DF8")]
		public GrammarProductionRule()
		{
		}
	}
	[Token(Token = "0x200079C")]
	public class GrammarExecGraph : Graph
	{
		[Token(Token = "0x40026C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public GrammarExecEntryNode entryNode;

		[Token(Token = "0x6002B74")]
		[Address(RVA = "0xE11E74", Offset = "0xE11E74", VA = "0xE11E74", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6002B75")]
		[Address(RVA = "0xE11E94", Offset = "0xE11E94", VA = "0xE11E94")]
		public GrammarExecGraph()
		{
		}
	}
	[Token(Token = "0x200079D")]
	public class GrammarExecEntryNode : GrammarExecNodeBase
	{
		[Token(Token = "0x6002B76")]
		[Address(RVA = "0xE11E9C", Offset = "0xE11E9C", VA = "0xE11E9C", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6002B77")]
		[Address(RVA = "0xE12068", Offset = "0xE12068", VA = "0xE12068")]
		public GrammarExecEntryNode()
		{
		}
	}
	[Token(Token = "0x200079E")]
	public class GrammarExecNodeBase : GraphNode
	{
		[Token(Token = "0x6002B78")]
		[Address(RVA = "0xE11F08", Offset = "0xE11F08", VA = "0xE11F08", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6002B79")]
		[Address(RVA = "0xE1206C", Offset = "0xE1206C", VA = "0xE1206C")]
		public GrammarExecNodeBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200079F")]
	public enum GrammarExecRuleRunMode
	{
		[Token(Token = "0x40026C8")]
		RunOnce,
		[Token(Token = "0x40026C9")]
		RunWithProbability,
		[Token(Token = "0x40026CA")]
		Iterate,
		[Token(Token = "0x40026CB")]
		IterateRange
	}
	[Token(Token = "0x20007A0")]
	public class GrammarExecRuleNode : GrammarExecNodeBase
	{
		[Token(Token = "0x40026CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[HideInInspector]
		public GrammarProductionRule rule;

		[Token(Token = "0x40026CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		public GrammarExecRuleRunMode runMode;

		[Token(Token = "0x40026CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float runProbability;

		[Token(Token = "0x40026CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int iterateCount;

		[Token(Token = "0x40026D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int minIterateCount;

		[Token(Token = "0x40026D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int maxIterateCount;

		[Token(Token = "0x6002B7A")]
		[Address(RVA = "0xE12070", Offset = "0xE12070", VA = "0xE12070")]
		public GrammarExecRuleNode()
		{
		}
	}
	[Token(Token = "0x20007A1")]
	public class GrammarGraph : Graph
	{
		[Token(Token = "0x40026D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useProceduralScript;

		[Token(Token = "0x40026D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string generatorScriptClass;

		[Token(Token = "0x40026D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public KeyValueData editorData;

		[Token(Token = "0x6002B7B")]
		[Address(RVA = "0xE1208C", Offset = "0xE1208C", VA = "0xE1208C", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6002B7C")]
		[Address(RVA = "0xE120AC", Offset = "0xE120AC", VA = "0xE120AC")]
		public GrammarGraph()
		{
		}
	}
	[Token(Token = "0x20007A2")]
	public interface IGrammarGraphBuilder
	{
		[Token(Token = "0x6002B7D")]
		int CreateNode(string nodeName, int executionIndex);

		[Token(Token = "0x6002B7E")]
		bool LinkNodes(int nodeAId, int nodeBId);
	}
	[Token(Token = "0x20007A3")]
	public class GrammarGraphBuilder : IGrammarGraphBuilder
	{
		[Token(Token = "0x40026D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GrammarNodeType[] nodeTypes;

		[Token(Token = "0x40026D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GraphBuilder graphBuilder;

		[Token(Token = "0x40026D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int nodeIdCounter;

		[Token(Token = "0x40026D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GrammarGraph grammarGraph;

		[Token(Token = "0x40026D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<int, GraphNode> generatedNodes;

		[Token(Token = "0x6002B7F")]
		[Address(RVA = "0xE12114", Offset = "0xE12114", VA = "0xE12114")]
		public GrammarGraphBuilder(GrammarGraph grammarGraph, GrammarNodeType[] nodeTypes, GraphBuilder graphBuilder)
		{
		}

		[Token(Token = "0x6002B80")]
		[Address(RVA = "0xE121B8", Offset = "0xE121B8", VA = "0xE121B8", Slot = "4")]
		public int CreateNode(string nodeName, int executionIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6002B81")]
		[Address(RVA = "0xE12388", Offset = "0xE12388", VA = "0xE12388", Slot = "5")]
		public bool LinkNodes(int nodeAId, int nodeBId)
		{
			return default(bool);
		}

		[Token(Token = "0x6002B82")]
		[Address(RVA = "0xE12580", Offset = "0xE12580", VA = "0xE12580")]
		public void ClearGraph()
		{
		}
	}
	[Token(Token = "0x20007A4")]
	public interface IGrammarGraphBuildScript
	{
		[Token(Token = "0x6002B83")]
		void Generate(IGrammarGraphBuilder grammarBuilder);
	}
	[Token(Token = "0x20007A5")]
	public class GrammarNodeBase : GraphNode
	{
		[Token(Token = "0x6002B84")]
		[Address(RVA = "0xE12680", Offset = "0xE12680", VA = "0xE12680")]
		public GrammarNodeBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007A6")]
	public class GrammarNodePin : GraphPin
	{
		[Token(Token = "0x40026DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEngine.Vector2 Padding;

		[Token(Token = "0x6002B85")]
		[Address(RVA = "0xE12684", Offset = "0xE12684", VA = "0xE12684", Slot = "4")]
		public override bool ContainsPoint(UnityEngine.Vector2 worldPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6002B86")]
		[Address(RVA = "0xE12748", Offset = "0xE12748", VA = "0xE12748")]
		public GrammarNodePin()
		{
		}
	}
	[Token(Token = "0x20007A7")]
	public class GrammarRuleNode : GrammarNodeBase
	{
		[Token(Token = "0x6002B87")]
		[Address(RVA = "0xE12754", Offset = "0xE12754", VA = "0xE12754")]
		public GrammarRuleNode()
		{
		}
	}
	[Token(Token = "0x20007A8")]
	public class GrammarTaskNode : GrammarNodeBase
	{
		[Token(Token = "0x40026DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GrammarNodeType NodeType;

		[Token(Token = "0x40026DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int executionIndex;

		[Token(Token = "0x40026DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool DisplayExecutionIndex;

		[Token(Token = "0x6002B88")]
		[Address(RVA = "0xE12758", Offset = "0xE12758", VA = "0xE12758", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6002B89")]
		[Address(RVA = "0xE128B8", Offset = "0xE128B8", VA = "0xE128B8", Slot = "6")]
		public override void CopyFrom(GraphNode otherNode)
		{
		}

		[Token(Token = "0x6002B8A")]
		[Address(RVA = "0xE12950", Offset = "0xE12950", VA = "0xE12950")]
		public GrammarTaskNode()
		{
		}
	}
	[Token(Token = "0x20007A9")]
	public class GrammarRuntimeGraphNodeData
	{
		[Token(Token = "0x40026DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GrammarNodeType nodeType;

		[Token(Token = "0x40026DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int index;

		[Token(Token = "0x6002B8B")]
		[Address(RVA = "0xE1295C", Offset = "0xE1295C", VA = "0xE1295C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002B8C")]
		[Address(RVA = "0xE12A28", Offset = "0xE12A28", VA = "0xE12A28")]
		public GrammarRuntimeGraphNodeData()
		{
		}
	}
	[Token(Token = "0x20007AA")]
	public class GrammarRuntimeGraph : RuntimeGraph<GrammarRuntimeGraphNodeData>
	{
		[Token(Token = "0x6002B8D")]
		[Address(RVA = "0xE12A30", Offset = "0xE12A30", VA = "0xE12A30")]
		public static GrammarRuntimeGraph BuildFrom(GrammarGraph graph)
		{
			return null;
		}

		[Token(Token = "0x6002B8E")]
		[Address(RVA = "0xE12AE0", Offset = "0xE12AE0", VA = "0xE12AE0")]
		public static void BuildFrom(GrammarGraph graph, GrammarRuntimeGraph runtimeGraph)
		{
		}

		[Token(Token = "0x6002B8F")]
		[Address(RVA = "0xE12A98", Offset = "0xE12A98", VA = "0xE12A98")]
		public GrammarRuntimeGraph()
		{
		}
	}
	[Token(Token = "0x20007AB")]
	public class GrammarRuntimeGraphUtils
	{
		[Token(Token = "0x6002B90")]
		[Address(RVA = "0xE12D94", Offset = "0xE12D94", VA = "0xE12D94")]
		public static RuntimeGraphNode<GrammarRuntimeGraphNodeData> FindStartNode(GrammarRuntimeGraph graph)
		{
			return null;
		}

		[Token(Token = "0x6002B91")]
		[Address(RVA = "0xE12EE0", Offset = "0xE12EE0", VA = "0xE12EE0")]
		public GrammarRuntimeGraphUtils()
		{
		}
	}
	[Token(Token = "0x20007AC")]
	public class GrammarRuntimeGraphHandlers : RuntimeGraphBuilderHandlers<GrammarRuntimeGraphNodeData>
	{
		[Token(Token = "0x6002B92")]
		[Address(RVA = "0xE12B78", Offset = "0xE12B78", VA = "0xE12B78")]
		public static GrammarRuntimeGraphHandlers Create()
		{
			return null;
		}

		[Token(Token = "0x6002B93")]
		[Address(RVA = "0xE12EE8", Offset = "0xE12EE8", VA = "0xE12EE8")]
		public GrammarRuntimeGraphHandlers()
		{
		}
	}
	[Token(Token = "0x20007AE")]
	public class ExecutionRuntimeGraphNodeData
	{
		[Token(Token = "0x40026E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RuntimeGrammarProduction rule;

		[Token(Token = "0x40026E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GrammarExecRuleRunMode runMode;

		[Token(Token = "0x40026E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float runProbability;

		[Token(Token = "0x40026E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int iterateCount;

		[Token(Token = "0x40026E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int minIterateCount;

		[Token(Token = "0x40026E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int maxIterateCount;

		[Token(Token = "0x6002B99")]
		[Address(RVA = "0xE130E8", Offset = "0xE130E8", VA = "0xE130E8")]
		public ExecutionRuntimeGraphNodeData()
		{
		}
	}
	[Token(Token = "0x20007AF")]
	public class ExecutionRuntimeGraph : RuntimeGraph<ExecutionRuntimeGraphNodeData>
	{
		[Token(Token = "0x170006C1")]
		public RuntimeGraphNode<ExecutionRuntimeGraphNodeData> EntryNode
		{
			[Token(Token = "0x6002B9A")]
			[Address(RVA = "0xE130F0", Offset = "0xE130F0", VA = "0xE130F0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002B9B")]
			[Address(RVA = "0xE130F8", Offset = "0xE130F8", VA = "0xE130F8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002B9C")]
		[Address(RVA = "0xE13100", Offset = "0xE13100", VA = "0xE13100")]
		public static ExecutionRuntimeGraph BuildFrom(GrammarExecGraph graph, Dictionary<GrammarProductionRule, RuntimeGrammarProduction> mapping)
		{
			return null;
		}

		[Token(Token = "0x6002B9D")]
		[Address(RVA = "0xE13198", Offset = "0xE13198", VA = "0xE13198")]
		public ExecutionRuntimeGraph()
		{
		}
	}
	[Token(Token = "0x20007B0")]
	public class ExecutionRuntimeGraphHandlers : RuntimeGraphBuilderHandlers<ExecutionRuntimeGraphNodeData>
	{
		[Token(Token = "0x6002B9E")]
		[Address(RVA = "0xE131E0", Offset = "0xE131E0", VA = "0xE131E0")]
		public static ExecutionRuntimeGraphHandlers Create(Dictionary<GrammarProductionRule, RuntimeGrammarProduction> mapping)
		{
			return null;
		}

		[Token(Token = "0x6002B9F")]
		[Address(RVA = "0xE133F8", Offset = "0xE133F8", VA = "0xE133F8")]
		public ExecutionRuntimeGraphHandlers()
		{
		}
	}
	[Token(Token = "0x20007B3")]
	public class WeightedGrammarRuntimeGraph : GrammarRuntimeGraph
	{
		[Token(Token = "0x40026EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Weight;

		[Token(Token = "0x6002BA6")]
		[Address(RVA = "0xE13758", Offset = "0xE13758", VA = "0xE13758")]
		public WeightedGrammarRuntimeGraph()
		{
		}
	}
	[Token(Token = "0x20007B4")]
	public class RuntimeGrammarProduction
	{
		[Token(Token = "0x40026F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GrammarProductionRule rule;

		[Token(Token = "0x40026F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GrammarRuntimeGraph LHS;

		[Token(Token = "0x40026F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WeightedGrammarRuntimeGraph[] RHSList;

		[Token(Token = "0x6002BA7")]
		[Address(RVA = "0xE13764", Offset = "0xE13764", VA = "0xE13764")]
		public RuntimeGrammarProduction()
		{
		}
	}
	[Token(Token = "0x20007B5")]
	public class RuntimeGrammar
	{
		[Token(Token = "0x40026F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GrammarRuntimeGraph ResultGraph;

		[Token(Token = "0x40026F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ExecutionRuntimeGraph ExecutionGraph;

		[Token(Token = "0x40026F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RuntimeGrammarProduction[] Rules;

		[Token(Token = "0x40026F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrammarNodeType[] NodeTypes;

		[Token(Token = "0x6002BA8")]
		[Address(RVA = "0xE1376C", Offset = "0xE1376C", VA = "0xE1376C")]
		public static RuntimeGrammar Build(DungeonFlowAsset flowAsset)
		{
			return null;
		}

		[Token(Token = "0x6002BA9")]
		[Address(RVA = "0xE13AA8", Offset = "0xE13AA8", VA = "0xE13AA8")]
		public RuntimeGrammar()
		{
		}
	}
	[Token(Token = "0x20007B6")]
	public class GraphGrammarProcessorSettings
	{
		[Token(Token = "0x40026F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int seed;

		[Token(Token = "0x40026F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool runGraphGenerationScripts;

		[Token(Token = "0x6002BAA")]
		[Address(RVA = "0xE13AB0", Offset = "0xE13AB0", VA = "0xE13AB0")]
		public GraphGrammarProcessorSettings()
		{
		}
	}
	[Token(Token = "0x20007B7")]
	public class GraphGrammarProcessor
	{
		[Token(Token = "0x40026FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private System.Random random;

		[Token(Token = "0x40026FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GraphGrammarProcessorSettings settings;

		[Token(Token = "0x170006C2")]
		public RuntimeGrammar Grammar
		{
			[Token(Token = "0x6002BAB")]
			[Address(RVA = "0xE13AB8", Offset = "0xE13AB8", VA = "0xE13AB8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002BAC")]
			[Address(RVA = "0xE13AC0", Offset = "0xE13AC0", VA = "0xE13AC0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002BAD")]
		[Address(RVA = "0xE13AC8", Offset = "0xE13AC8", VA = "0xE13AC8")]
		public GraphGrammarProcessor(DungeonFlowAsset asset, GraphGrammarProcessorSettings settings)
		{
		}

		[Token(Token = "0x6002BAE")]
		[Address(RVA = "0xE13C88", Offset = "0xE13C88", VA = "0xE13C88")]
		private void RunGraphGenerationScripts(DungeonFlowAsset asset)
		{
		}

		[Token(Token = "0x6002BAF")]
		[Address(RVA = "0xE13E64", Offset = "0xE13E64", VA = "0xE13E64")]
		private void RunGraphGenerationScript(GrammarGraph graph, GrammarNodeType[] nodeTypes)
		{
		}

		[Token(Token = "0x6002BB0")]
		[Address(RVA = "0xE1421C", Offset = "0xE1421C", VA = "0xE1421C")]
		public void Build()
		{
		}

		[Token(Token = "0x6002BB1")]
		[Address(RVA = "0xE14410", Offset = "0xE14410", VA = "0xE14410")]
		private int GetExecutionCount(ExecutionRuntimeGraphNodeData data)
		{
			return default(int);
		}

		[Token(Token = "0x6002BB2")]
		[Address(RVA = "0xE1453C", Offset = "0xE1453C", VA = "0xE1453C")]
		private WeightedGrammarRuntimeGraph GetRandomGraph(WeightedGrammarRuntimeGraph[] graphs)
		{
			return null;
		}

		[Token(Token = "0x6002BB3")]
		[Address(RVA = "0xE14480", Offset = "0xE14480", VA = "0xE14480")]
		private void ApplyRule(RuntimeGraph<GrammarRuntimeGraphNodeData> dataGraph, RuntimeGrammarProduction rule)
		{
		}

		[Token(Token = "0x6002BB4")]
		[Address(RVA = "0xE15840", Offset = "0xE15840", VA = "0xE15840")]
		private Dictionary<int, RuntimeGraphNode<GrammarRuntimeGraphNodeData>> CreateNodeByIndexMap(RuntimeGraph<GrammarRuntimeGraphNodeData> graph)
		{
			return null;
		}

		[Token(Token = "0x6002BB5")]
		[Address(RVA = "0xE14B78", Offset = "0xE14B78", VA = "0xE14B78")]
		private void ApplyMatch(RuntimeGraph<GrammarRuntimeGraphNodeData> dataGraph, RuntimeGraph<GrammarRuntimeGraphNodeData> lhs, RuntimeGraph<GrammarRuntimeGraphNodeData> rhs, Dictionary<RuntimeGraphNode<GrammarRuntimeGraphNodeData>, RuntimeGraphNode<GrammarRuntimeGraphNodeData>> LHSToDataNode)
		{
		}
	}
	[Token(Token = "0x20007B9")]
	internal class GraphPatternMatch
	{
		[Token(Token = "0x40026FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<RuntimeGraphNode<GrammarRuntimeGraphNodeData>, RuntimeGraphNode<GrammarRuntimeGraphNodeData>> PatternToDataNode;

		[Token(Token = "0x6002BB9")]
		[Address(RVA = "0xE15AEC", Offset = "0xE15AEC", VA = "0xE15AEC")]
		public GraphPatternMatch()
		{
		}
	}
	[Token(Token = "0x20007BA")]
	internal class GraphPatternMatcher
	{
		[Token(Token = "0x6002BBA")]
		[Address(RVA = "0xE145F8", Offset = "0xE145F8", VA = "0xE145F8")]
		public static GraphPatternMatch[] Match(RuntimeGraph<GrammarRuntimeGraphNodeData> dataGraph, RuntimeGraph<GrammarRuntimeGraphNodeData> patternGraph)
		{
			return null;
		}

		[Token(Token = "0x6002BBB")]
		[Address(RVA = "0xE15D08", Offset = "0xE15D08", VA = "0xE15D08")]
		private static bool IsNodeDataEqual(RuntimeGraphNode<GrammarRuntimeGraphNodeData> a, RuntimeGraphNode<GrammarRuntimeGraphNodeData> b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002BBC")]
		[Address(RVA = "0xE15E28", Offset = "0xE15E28", VA = "0xE15E28")]
		private static bool TraverseChildren(List<RuntimeGraphNode<GrammarRuntimeGraphNodeData>> dataChildNodes, List<RuntimeGraphNode<GrammarRuntimeGraphNodeData>> patternChildNodes, HashSet<RuntimeGraphNode<GrammarRuntimeGraphNodeData>> unmatchedNodes, GraphPatternMatch match, HashSet<RuntimeGraphNode<GrammarRuntimeGraphNodeData>> visited)
		{
			return default(bool);
		}

		[Token(Token = "0x6002BBD")]
		[Address(RVA = "0xE15B68", Offset = "0xE15B68", VA = "0xE15B68")]
		private static bool MatchRecursive(RuntimeGraphNode<GrammarRuntimeGraphNodeData> dataNode, RuntimeGraphNode<GrammarRuntimeGraphNodeData> patternNode, HashSet<RuntimeGraphNode<GrammarRuntimeGraphNodeData>> unmatchedNodes, GraphPatternMatch match, HashSet<RuntimeGraphNode<GrammarRuntimeGraphNodeData>> visited)
		{
			return default(bool);
		}

		[Token(Token = "0x6002BBE")]
		[Address(RVA = "0xE16128", Offset = "0xE16128", VA = "0xE16128")]
		public GraphPatternMatcher()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007BB")]
	public class WeightedGrammarGraph : ScriptableObject
	{
		[Token(Token = "0x40026FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public float weight;

		[Token(Token = "0x4002700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		public GrammarGraph graph;

		[Token(Token = "0x6002BBF")]
		[Address(RVA = "0xE16130", Offset = "0xE16130", VA = "0xE16130")]
		public WeightedGrammarGraph()
		{
		}
	}
}
namespace DungeonArchitect.SpatialConstraints
{
	[Token(Token = "0x20007BC")]
	public class SpatialConstraintRuleDomain
	{
		[Token(Token = "0x4002701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SCReferenceNode referenceNode;

		[Token(Token = "0x4002702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector3 gridSize;

		[Token(Token = "0x6002BC0")]
		[Address(RVA = "0xE16138", Offset = "0xE16138", VA = "0xE16138")]
		public SpatialConstraintRuleDomain()
		{
		}
	}
	[Token(Token = "0x20007BD")]
	public class RuleMetaAttribute : Attribute
	{
		[Token(Token = "0x4002703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x6002BC1")]
		[Address(RVA = "0xE16198", Offset = "0xE16198", VA = "0xE16198")]
		public RuleMetaAttribute()
		{
		}
	}
	[Token(Token = "0x20007BE")]
	public class ConstraintRuleContext
	{
		[Token(Token = "0x4002704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SpatialConstraintProcessorContext processorContext;

		[Token(Token = "0x4002705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpatialConstraintRuleDomain domain;

		[Token(Token = "0x4002706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SCRuleNode ruleNode;

		[Token(Token = "0x4002707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector3 ruleNodeWorldPosition;

		[Token(Token = "0x4002708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Matrix4x4 rotationFrame;

		[Token(Token = "0x6002BC2")]
		[Address(RVA = "0xE161A0", Offset = "0xE161A0", VA = "0xE161A0")]
		public ConstraintRuleContext()
		{
		}
	}
	[Token(Token = "0x20007BF")]
	public abstract class ConstraintRule : ScriptableObject
	{
		[Token(Token = "0x4002709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		public bool enabled;

		[Token(Token = "0x400270A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		public string ruleName;

		[Token(Token = "0x400270B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public bool inverseRule;

		[Token(Token = "0x6002BC3")]
		[Address(RVA = "0xE161A8", Offset = "0xE161A8", VA = "0xE161A8", Slot = "4")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6002BC4")]
		public abstract bool Process(ConstraintRuleContext context);

		[Token(Token = "0x6002BC5")]
		[Address(RVA = "0xE161EC", Offset = "0xE161EC", VA = "0xE161EC")]
		public static string GetFullMenuPath(Type type)
		{
			return null;
		}

		[Token(Token = "0x6002BC6")]
		[Address(RVA = "0xE1630C", Offset = "0xE1630C", VA = "0xE1630C")]
		public static string GetScriptName(Type type)
		{
			return null;
		}

		[Token(Token = "0x6002BC7")]
		[Address(RVA = "0xE16388", Offset = "0xE16388", VA = "0xE16388")]
		public string GetFullMenuPath()
		{
			return null;
		}

		[Token(Token = "0x6002BC8")]
		[Address(RVA = "0xE161D8", Offset = "0xE161D8", VA = "0xE161D8")]
		public string GetScriptName()
		{
			return null;
		}

		[Token(Token = "0x6002BC9")]
		[Address(RVA = "0xE1639C", Offset = "0xE1639C", VA = "0xE1639C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002BCA")]
		[Address(RVA = "0xE163FC", Offset = "0xE163FC", VA = "0xE163FC")]
		protected ConstraintRule()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007C0")]
	public class SpatialConstraintAsset : ScriptableObject
	{
		[Token(Token = "0x400270C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public bool rotateToFit;

		[Token(Token = "0x400270D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		public bool applyFitRotation;

		[Token(Token = "0x400270E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[SerializeField]
		public bool applyMarkerRotation;

		[Token(Token = "0x400270F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[SerializeField]
		public bool checkRelativeToMarkerRotation;

		[Token(Token = "0x4002710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public GraphNode hostThemeNode;

		[Token(Token = "0x4002711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private SpatialConstraintGraph graph;

		[Token(Token = "0x170006C3")]
		public SpatialConstraintGraph Graph
		{
			[Token(Token = "0x6002BCB")]
			[Address(RVA = "0xE1640C", Offset = "0xE1640C", VA = "0xE1640C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002BCC")]
		[Address(RVA = "0xE16414", Offset = "0xE16414", VA = "0xE16414")]
		public void Init(GraphNode hostThemeNode)
		{
		}

		[Token(Token = "0x6002BCD")]
		[Address(RVA = "0xE16484", Offset = "0xE16484", VA = "0xE16484")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6002BCE")]
		[Address(RVA = "0xE16490", Offset = "0xE16490", VA = "0xE16490")]
		public SpatialConstraintAsset()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007C1")]
	public class SpatialConstraintGraph : Graph
	{
		[Token(Token = "0x4002712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public SpatialConstraintAsset asset;

		[Token(Token = "0x6002BCF")]
		[Address(RVA = "0xE164A8", Offset = "0xE164A8", VA = "0xE164A8", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6002BD0")]
		[Address(RVA = "0xE164AC", Offset = "0xE164AC", VA = "0xE164AC")]
		public SpatialConstraintGraph()
		{
		}
	}
	[Token(Token = "0x20007C2")]
	public class SpatialConstraintProcessorUtils
	{
		[Token(Token = "0x6002BD1")]
		[Address(RVA = "0xE164B4", Offset = "0xE164B4", VA = "0xE164B4")]
		public static UnityEngine.Vector2 GetPosition2D(UnityEngine.Vector3 position)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6002BD2")]
		[Address(RVA = "0xE164BC", Offset = "0xE164BC", VA = "0xE164BC")]
		public static UnityEngine.Vector3 RotateVector(UnityEngine.Vector3 position, Matrix4x4 matrix)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002BD3")]
		[Address(RVA = "0xE164FC", Offset = "0xE164FC", VA = "0xE164FC")]
		public static UnityEngine.Vector3 GetRuleNodeWorldPosition(SCRuleNode ruleNode, SCReferenceNode referenceNode, PropSocket marker, UnityEngine.Vector3 gridSize, ref Matrix4x4 rotationFrame)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002BD4")]
		[Address(RVA = "0xE166E0", Offset = "0xE166E0", VA = "0xE166E0")]
		public SpatialConstraintProcessorUtils()
		{
		}
	}
	[Token(Token = "0x20007C3")]
	public class SpatialConstraintProcessorContext
	{
		[Token(Token = "0x4002713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SpatialConstraintAsset constraintAsset;

		[Token(Token = "0x4002714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PropSocket marker;

		[Token(Token = "0x4002715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DungeonModel model;

		[Token(Token = "0x4002716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public DungeonConfig config;

		[Token(Token = "0x4002717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DungeonBuilder builder;

		[Token(Token = "0x4002718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LevelMarkerList levelMarkers;

		[Token(Token = "0x6002BD5")]
		[Address(RVA = "0xE166E8", Offset = "0xE166E8", VA = "0xE166E8")]
		public SpatialConstraintProcessorContext()
		{
		}
	}
	[Token(Token = "0x20007C4")]
	public abstract class SpatialConstraintProcessor : MonoBehaviour
	{
		[Token(Token = "0x6002BD6")]
		[Address(RVA = "0xE166F0", Offset = "0xE166F0", VA = "0xE166F0", Slot = "4")]
		public virtual SpatialConstraintRuleDomain GetDomain(SpatialConstraintProcessorContext context)
		{
			return null;
		}

		[Token(Token = "0x6002BD7")]
		[Address(RVA = "0xE168A4", Offset = "0xE168A4", VA = "0xE168A4")]
		private bool ProcessSpatialConstraintFrame(SpatialConstraintProcessorContext context, SpatialConstraintRuleDomain domain, Matrix4x4 rotationFrame, out PropSocket[] outMarkersToRemove)
		{
			return default(bool);
		}

		[Token(Token = "0x6002BD8")]
		[Address(RVA = "0xE17A60", Offset = "0xE17A60", VA = "0xE17A60")]
		public bool ProcessSpatialConstraint(SpatialConstraintProcessorContext context, out Matrix4x4 outOffset, out PropSocket[] outMarkersToRemove)
		{
			return default(bool);
		}

		[Token(Token = "0x6002BD9")]
		[Address(RVA = "0xE17E70", Offset = "0xE17E70", VA = "0xE17E70")]
		protected SpatialConstraintProcessor()
		{
		}
	}
}
namespace DungeonArchitect.SpatialConstraints.Isaac
{
	[Token(Token = "0x20007C6")]
	public class SpatialConstraintProcessorIsaac : SpatialConstraintProcessor
	{
		[Token(Token = "0x6002BDF")]
		[Address(RVA = "0xE18030", Offset = "0xE18030", VA = "0xE18030", Slot = "4")]
		public override SpatialConstraintRuleDomain GetDomain(SpatialConstraintProcessorContext context)
		{
			return null;
		}

		[Token(Token = "0x6002BE0")]
		[Address(RVA = "0xE18038", Offset = "0xE18038", VA = "0xE18038")]
		public SpatialConstraintProcessorIsaac()
		{
		}
	}
}
namespace DungeonArchitect.Builders
{
	[Token(Token = "0x20007C7")]
	public class DungeonBuilderDefaultMarkers
	{
		[Token(Token = "0x400271D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<Type, string[]> DefaultMarkersByBuilder;

		[Token(Token = "0x6002BE1")]
		[Address(RVA = "0xE18040", Offset = "0xE18040", VA = "0xE18040")]
		public DungeonBuilderDefaultMarkers()
		{
		}

		[Token(Token = "0x6002BE2")]
		[Address(RVA = "0xE19334", Offset = "0xE19334", VA = "0xE19334")]
		public string[] GetDefaultMarkers(Type builderClass)
		{
			return null;
		}
	}
}
namespace DungeonArchitect.Builders.BSP
{
	[Token(Token = "0x20007C8")]
	internal class BSPDungeonConstants
	{
		[Token(Token = "0x400271E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string GroundRoom;

		[Token(Token = "0x400271F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string GroundCorridor;

		[Token(Token = "0x4002720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string Door;

		[Token(Token = "0x4002721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string WallRoom;

		[Token(Token = "0x4002722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string WallCorridor;

		[Token(Token = "0x4002723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string WallSeparator;

		[Token(Token = "0x6002BE3")]
		[Address(RVA = "0xE193E0", Offset = "0xE193E0", VA = "0xE193E0")]
		public BSPDungeonConstants()
		{
		}
	}
	[Token(Token = "0x20007C9")]
	internal class BSPNodeObject
	{
		[Token(Token = "0x4002724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Rectangle bounds;

		[Token(Token = "0x4002725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BSPNodeObject[] children;

		[Token(Token = "0x4002726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BSPNodeObject parent;

		[Token(Token = "0x4002727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Guid id;

		[Token(Token = "0x4002728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int depthFromRoot;

		[Token(Token = "0x4002729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int padding;

		[Token(Token = "0x400272A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool horizontalSplit;

		[Token(Token = "0x400272B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Color debugColor;

		[Token(Token = "0x400272C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool discarded;

		[Token(Token = "0x400272D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<BSPNodeObject> connectedRooms;

		[Token(Token = "0x400272E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public NodeConnection[] subtreeLeafConnections;

		[Token(Token = "0x170006C4")]
		public Rectangle PaddedBounds
		{
			[Token(Token = "0x6002BE5")]
			[Address(RVA = "0xE194F4", Offset = "0xE194F4", VA = "0xE194F4")]
			get
			{
				return default(Rectangle);
			}
		}

		[Token(Token = "0x6002BE6")]
		[Address(RVA = "0xE19544", Offset = "0xE19544", VA = "0xE19544")]
		public void Split(float splitRatio, System.Random random)
		{
		}

		[Token(Token = "0x6002BE7")]
		[Address(RVA = "0xE1998C", Offset = "0xE1998C", VA = "0xE1998C")]
		public bool MustSplit(int maxSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6002BE8")]
		[Address(RVA = "0xE199DC", Offset = "0xE199DC", VA = "0xE199DC")]
		public bool CanSplit(int minSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6002BE9")]
		[Address(RVA = "0xE198A8", Offset = "0xE198A8", VA = "0xE198A8")]
		public BSPNodeObject()
		{
		}
	}
	[Token(Token = "0x20007CA")]
	internal enum BSPNodeDirection
	{
		[Token(Token = "0x4002730")]
		Left,
		[Token(Token = "0x4002731")]
		Right,
		[Token(Token = "0x4002732")]
		Top,
		[Token(Token = "0x4002733")]
		Bottom
	}
	[Token(Token = "0x20007CB")]
	public class BSPDungeonBuilder : DungeonBuilder
	{
		[Token(Token = "0x4002734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BSPDungeonConfig bspConfig;

		[Token(Token = "0x4002735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private BSPDungeonModel bspModel;

		[Token(Token = "0x4002736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private new System.Random random;

		[Token(Token = "0x6002BEA")]
		[Address(RVA = "0xE19A34", Offset = "0xE19A34", VA = "0xE19A34", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6002BEB")]
		[Address(RVA = "0xE19C4C", Offset = "0xE19C4C", VA = "0xE19C4C", Slot = "6")]
		public override void OnDestroyed()
		{
		}

		[Token(Token = "0x6002BEC")]
		[Address(RVA = "0xE19CE0", Offset = "0xE19CE0", VA = "0xE19CE0", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6002BED")]
		[Address(RVA = "0xE19B74", Offset = "0xE19B74", VA = "0xE19B74")]
		private void GenerateLevelLayout()
		{
		}

		[Token(Token = "0x6002BEE")]
		[Address(RVA = "0xE1BE8C", Offset = "0xE1BE8C", VA = "0xE1BE8C")]
		private void DebugRoomLayout(BSPNodeObject rootNode)
		{
		}

		[Token(Token = "0x6002BEF")]
		[Address(RVA = "0xE1C18C", Offset = "0xE1C18C", VA = "0xE1C18C")]
		private BSPNodeObject GetCornerSubtreeNode(BSPNodeObject node, bool left)
		{
			return null;
		}

		[Token(Token = "0x6002BF0")]
		[Address(RVA = "0xE1BB98", Offset = "0xE1BB98", VA = "0xE1BB98")]
		private void GenerateCustomRooms(BSPNodeObject rootNode)
		{
		}

		[Token(Token = "0x6002BF1")]
		[Address(RVA = "0xE1BB9C", Offset = "0xE1BB9C", VA = "0xE1BB9C")]
		private void DiscardExtraRooms(BSPNodeObject rootNode)
		{
		}

		[Token(Token = "0x6002BF2")]
		[Address(RVA = "0xE1C27C", Offset = "0xE1C27C", VA = "0xE1C27C")]
		private void FlagConnectedLeafNodes(BSPNodeObject node)
		{
		}

		[Token(Token = "0x6002BF3")]
		[Address(RVA = "0xE1C4B0", Offset = "0xE1C4B0", VA = "0xE1C4B0")]
		private bool ConnectActiveSubtrees(BSPNodeObject node)
		{
			return default(bool);
		}

		[Token(Token = "0x6002BF4")]
		[Address(RVA = "0xE1C728", Offset = "0xE1C728", VA = "0xE1C728")]
		private void DiscardSubtree(BSPNodeObject node)
		{
		}

		[Token(Token = "0x6002BF5")]
		[Address(RVA = "0xE1C1E4", Offset = "0xE1C1E4", VA = "0xE1C1E4")]
		private void TraverseTree(BSPNodeObject node, Action<BSPNodeObject> visit)
		{
		}

		[Token(Token = "0x6002BF6")]
		[Address(RVA = "0xE1C6DC", Offset = "0xE1C6DC", VA = "0xE1C6DC")]
		private void TraverseParentBranch(BSPNodeObject node, Action<BSPNodeObject> visit)
		{
		}

		[Token(Token = "0x6002BF7")]
		[Address(RVA = "0xE1BAF0", Offset = "0xE1BAF0", VA = "0xE1BAF0")]
		private void ConnectDoors(BSPNodeObject node)
		{
		}

		[Token(Token = "0x6002BF8")]
		[Address(RVA = "0xE1CFD4", Offset = "0xE1CFD4", VA = "0xE1CFD4")]
		private NodeConnection[] GetConnectionCandidates(BSPNodeObject[] leftRooms, BSPNodeObject[] rightRooms)
		{
			return null;
		}

		[Token(Token = "0x6002BF9")]
		[Address(RVA = "0xE1D438", Offset = "0xE1D438", VA = "0xE1D438")]
		private void Shuffle(List<BSPNodeObject> nodes)
		{
		}

		[Token(Token = "0x6002BFA")]
		[Address(RVA = "0xE1C814", Offset = "0xE1C814", VA = "0xE1C814")]
		private NodeConnection[] ConnectPartitions(BSPNodeObject leftPartition, BSPNodeObject rightPartition, bool horizontalSplit)
		{
			return null;
		}

		[Token(Token = "0x6002BFB")]
		[Address(RVA = "0xE1C048", Offset = "0xE1C048", VA = "0xE1C048")]
		private void FindBoundaryEdgeRooms(BSPNodeObject node, BSPNodeDirection direction, List<BSPNodeObject> result)
		{
		}

		[Token(Token = "0x6002BFC")]
		[Address(RVA = "0xE1B92C", Offset = "0xE1B92C", VA = "0xE1B92C")]
		private void BuildDungeonGraph(BSPNodeObject node)
		{
		}

		[Token(Token = "0x6002BFD")]
		[Address(RVA = "0xE19D08", Offset = "0xE19D08", VA = "0xE19D08")]
		private void EmitLevelMarkers()
		{
		}

		[Token(Token = "0x6002BFE")]
		[Address(RVA = "0xE1BD38", Offset = "0xE1BD38", VA = "0xE1BD38")]
		private void SerializeGraph(BSPNodeObject rootNode)
		{
		}

		[Token(Token = "0x6002BFF")]
		[Address(RVA = "0xE1D540", Offset = "0xE1D540", VA = "0xE1D540")]
		private void SerializeGraph(BSPNodeObject node, List<BSPNode> serializedNodes, List<BSPNodeConnection> serializedConnections)
		{
		}

		[Token(Token = "0x6002C00")]
		[Address(RVA = "0xE1DE54", Offset = "0xE1DE54", VA = "0xE1DE54", Slot = "9")]
		public override void DebugDraw()
		{
		}

		[Token(Token = "0x6002C01")]
		[Address(RVA = "0xE1E6F4", Offset = "0xE1E6F4", VA = "0xE1E6F4")]
		public BSPDungeonBuilder()
		{
		}
	}
	[Token(Token = "0x20007CF")]
	internal class NodeConnection
	{
		[Token(Token = "0x4002740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BSPNodeObject room0;

		[Token(Token = "0x4002741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BSPNodeObject room1;

		[Token(Token = "0x4002742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool doorFacingX;

		[Token(Token = "0x4002743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private IntVector doorPosition0;

		[Token(Token = "0x4002744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private IntVector doorPosition1;

		[Token(Token = "0x170006C5")]
		public BSPNodeObject Room0
		{
			[Token(Token = "0x6002C0D")]
			[Address(RVA = "0xE1E830", Offset = "0xE1E830", VA = "0xE1E830")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006C6")]
		public BSPNodeObject Room1
		{
			[Token(Token = "0x6002C0E")]
			[Address(RVA = "0xE1E838", Offset = "0xE1E838", VA = "0xE1E838")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006C7")]
		public bool DoorFacingX
		{
			[Token(Token = "0x6002C0F")]
			[Address(RVA = "0xE1E840", Offset = "0xE1E840", VA = "0xE1E840")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170006C8")]
		public IntVector DoorPosition0
		{
			[Token(Token = "0x6002C10")]
			[Address(RVA = "0xE1E848", Offset = "0xE1E848", VA = "0xE1E848")]
			get
			{
				return default(IntVector);
			}
			[Token(Token = "0x6002C11")]
			[Address(RVA = "0xE1E858", Offset = "0xE1E858", VA = "0xE1E858")]
			set
			{
			}
		}

		[Token(Token = "0x170006C9")]
		public IntVector DoorPosition1
		{
			[Token(Token = "0x6002C12")]
			[Address(RVA = "0xE1E864", Offset = "0xE1E864", VA = "0xE1E864")]
			get
			{
				return default(IntVector);
			}
			[Token(Token = "0x6002C13")]
			[Address(RVA = "0xE1E874", Offset = "0xE1E874", VA = "0xE1E874")]
			set
			{
			}
		}

		[Token(Token = "0x6002C14")]
		[Address(RVA = "0xE1D224", Offset = "0xE1D224", VA = "0xE1D224")]
		public NodeConnection(BSPNodeObject room0, BSPNodeObject room1, int padding)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007D0")]
	public struct BSPRoomCategory
	{
		[Token(Token = "0x4002745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string category;

		[Token(Token = "0x4002746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int width;

		[Token(Token = "0x4002747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int length;

		[Token(Token = "0x4002748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int minOccurance;

		[Token(Token = "0x4002749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int maxOccurance;

		[Token(Token = "0x400274A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color debugColor;
	}
	[Token(Token = "0x20007D1")]
	public class BSPDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x400274B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Vector2 gridSize;

		[Token(Token = "0x400274C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int dungeonWidth;

		[Token(Token = "0x400274D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int dungeonLength;

		[Token(Token = "0x400274E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int minRoomSize;

		[Token(Token = "0x400274F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int maxRoomSize;

		[Token(Token = "0x4002750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float smallerRoomProbability;

		[Token(Token = "0x4002751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float unevenSplitProbability;

		[Token(Token = "0x4002752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int roomPadding;

		[Token(Token = "0x4002753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float loopingProbability;

		[Token(Token = "0x4002754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int randomKillDepthStart;

		[Token(Token = "0x4002755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float randomKillProbability;

		[Token(Token = "0x4002756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float minAspectRatio;

		[Token(Token = "0x4002757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BSPRoomCategory[] customRooms;

		[Token(Token = "0x6002C15")]
		[Address(RVA = "0xE1E880", Offset = "0xE1E880", VA = "0xE1E880")]
		public BSPDungeonConfig()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007D2")]
	public struct BSPNode
	{
		[Token(Token = "0x4002758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Guid id;

		[Token(Token = "0x4002759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Rectangle bounds;

		[Token(Token = "0x400275A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rectangle paddedBounds;

		[Token(Token = "0x400275B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int depthFromRoot;

		[Token(Token = "0x400275C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string roomCategory;

		[Token(Token = "0x400275D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Guid parent;

		[Token(Token = "0x400275E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Guid[] children;

		[Token(Token = "0x400275F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Guid[] connectedRooms;

		[Token(Token = "0x4002760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public BSPNodeConnection[] subtreeLeafConnections;

		[Token(Token = "0x4002761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color debugColor;

		[Token(Token = "0x4002762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool discarded;
	}
	[Serializable]
	[Token(Token = "0x20007D3")]
	public struct BSPNodeConnection
	{
		[Token(Token = "0x4002763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Guid room0;

		[Token(Token = "0x4002764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid room1;

		[Token(Token = "0x4002765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IntVector doorPosition0;

		[Token(Token = "0x4002766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public IntVector doorPosition1;

		[Token(Token = "0x4002767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool doorFacingX;
	}
	[Token(Token = "0x20007D4")]
	public class BSPDungeonGraphQuery
	{
		[Token(Token = "0x4002768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Guid rootNode;

		[Token(Token = "0x4002769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<Guid, BSPNode> nodeMap;

		[Token(Token = "0x170006CA")]
		public BSPNode RootNode
		{
			[Token(Token = "0x6002C17")]
			[Address(RVA = "0xE1EA44", Offset = "0xE1EA44", VA = "0xE1EA44")]
			get
			{
				return default(BSPNode);
			}
		}

		[Token(Token = "0x6002C16")]
		[Address(RVA = "0xE1E8C4", Offset = "0xE1E8C4", VA = "0xE1E8C4")]
		public BSPDungeonGraphQuery(Guid rootNode, BSPNode[] nodes)
		{
		}

		[Token(Token = "0x6002C18")]
		[Address(RVA = "0xE1E668", Offset = "0xE1E668", VA = "0xE1E668")]
		public BSPNode GetNode(Guid nodeId)
		{
			return default(BSPNode);
		}

		[Token(Token = "0x6002C19")]
		[Address(RVA = "0xE1EA78", Offset = "0xE1EA78", VA = "0xE1EA78")]
		public BSPNode[] GetChildren(Guid nodeId)
		{
			return null;
		}

		[Token(Token = "0x6002C1A")]
		[Address(RVA = "0xE1EC3C", Offset = "0xE1EC3C", VA = "0xE1EC3C")]
		public BSPNode GetParent(Guid nodeId)
		{
			return default(BSPNode);
		}
	}
	[Token(Token = "0x20007D5")]
	public class BSPDungeonModel : DungeonModel
	{
		[Token(Token = "0x400276A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public BSPDungeonConfig Config;

		[Token(Token = "0x400276B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Guid rootNode;

		[Token(Token = "0x400276C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public BSPNode[] nodes;

		[Token(Token = "0x400276D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public BSPNodeConnection[] connections;

		[Token(Token = "0x6002C1B")]
		[Address(RVA = "0xE1E5F0", Offset = "0xE1E5F0", VA = "0xE1E5F0")]
		public BSPDungeonGraphQuery CreateGraphQuery()
		{
			return null;
		}

		[Token(Token = "0x6002C1C")]
		[Address(RVA = "0xE1EC88", Offset = "0xE1EC88", VA = "0xE1EC88", Slot = "4")]
		public override void ResetModel()
		{
		}

		[Token(Token = "0x6002C1D")]
		[Address(RVA = "0xE1ED28", Offset = "0xE1ED28", VA = "0xE1ED28")]
		public BSPDungeonModel()
		{
		}
	}
}
namespace DungeonArchitect.Builders.Snap
{
	[Token(Token = "0x20007D6")]
	public class CellMarkerState
	{
		[Token(Token = "0x400276E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public HashSet<string> GroundTiles;

		[Token(Token = "0x400276F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HashSet<string> EdgeTileX;

		[Token(Token = "0x4002770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HashSet<string> EdgeTileY;

		[Token(Token = "0x4002771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HashSet<string> EdgeTileZ;

		[Token(Token = "0x4002772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HashSet<string> CornerTiles;

		[Token(Token = "0x6002C1E")]
		[Address(RVA = "0xE1ED30", Offset = "0xE1ED30", VA = "0xE1ED30")]
		public CellMarkerState()
		{
		}
	}
	[Token(Token = "0x20007D7")]
	public class ModuleMarkerRegsitry
	{
		[Token(Token = "0x4002773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<IntVector, CellMarkerState> MarkerStates;

		[Token(Token = "0x6002C1F")]
		[Address(RVA = "0xE1EE24", Offset = "0xE1EE24", VA = "0xE1EE24")]
		public CellMarkerState GetState(IntVector position)
		{
			return null;
		}

		[Token(Token = "0x6002C20")]
		[Address(RVA = "0xE1EF2C", Offset = "0xE1EF2C", VA = "0xE1EF2C")]
		public ModuleMarkerRegsitry()
		{
		}
	}
	[Token(Token = "0x20007D8")]
	public class SnapModuleEditorData
	{
		[Token(Token = "0x4002774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntVector cursorPosition;

		[Token(Token = "0x4002775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int brushSize;

		[Token(Token = "0x4002776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Matrix4x4 worldToCamera;

		[Token(Token = "0x6002C21")]
		[Address(RVA = "0xE1EFA8", Offset = "0xE1EFA8", VA = "0xE1EFA8")]
		public SnapModuleEditorData()
		{
		}
	}
	[Token(Token = "0x20007D9")]
	public class SnapModule : MonoBehaviour
	{
		[Token(Token = "0x4002777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This dungeon builder works on a grid based system and required modular mesh assets to be placed on each cell (floors, walls, doors etc). This important field specifies the size of the cell to use. This size is determined by the art asset used in the dungeon theme designed by the artist. In the demo, we have a floor mesh that is 400x400. The height of a floor is chosen to be 200 units as the stair mesh is 200 units high. Hence the defaults are set to 400x400x200. You should change this to the dimension of the modular asset your designer has created for the dungeon")]
		public UnityEngine.Vector3 GridCellSize;

		[Token(Token = "0x4002778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SnapModuleEditorData EditorData;

		[Token(Token = "0x4002779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ModuleMarkerRegsitry MarkerRegistry;

		[Token(Token = "0x6002C22")]
		[Address(RVA = "0xE1F058", Offset = "0xE1F058", VA = "0xE1F058")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6002C23")]
		[Address(RVA = "0xE1F05C", Offset = "0xE1F05C", VA = "0xE1F05C")]
		private void RenderScene()
		{
		}

		[Token(Token = "0x6002C24")]
		[Address(RVA = "0xE1F6D4", Offset = "0xE1F6D4", VA = "0xE1F6D4")]
		private SnapGizmoRenderCommandTile CreateTileRenderCommand(UnityEngine.Vector3 worldPosition)
		{
			return null;
		}

		[Token(Token = "0x6002C25")]
		[Address(RVA = "0xE1F7E4", Offset = "0xE1F7E4", VA = "0xE1F7E4")]
		private void DrawCursor()
		{
		}

		[Token(Token = "0x6002C26")]
		[Address(RVA = "0xE1F814", Offset = "0xE1F814", VA = "0xE1F814")]
		private void DrawTile(IntVector position, Color color)
		{
		}

		[Token(Token = "0x6002C27")]
		[Address(RVA = "0xE1F950", Offset = "0xE1F950", VA = "0xE1F950")]
		public SnapModule()
		{
		}
	}
	[Token(Token = "0x20007DB")]
	internal abstract class SnapGizmoRenderCommand
	{
		[Token(Token = "0x400277C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float DistanceToCamera;

		[Token(Token = "0x400277D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public UnityEngine.Vector3 worldPosition;

		[Token(Token = "0x6002C2B")]
		public abstract void Draw(SnapModule module);

		[Token(Token = "0x6002C2C")]
		[Address(RVA = "0xE1F798", Offset = "0xE1F798", VA = "0xE1F798")]
		public void CalculateDistanceToCamera(Matrix4x4 worldToCamera)
		{
		}

		[Token(Token = "0x6002C2D")]
		[Address(RVA = "0xE1FA78", Offset = "0xE1FA78", VA = "0xE1FA78")]
		protected SnapGizmoRenderCommand()
		{
		}
	}
	[Token(Token = "0x20007DC")]
	internal class SnapGizmoRenderCommandTile : SnapGizmoRenderCommand
	{
		[Token(Token = "0x400277E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color drawColor;

		[Token(Token = "0x400277F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool drawWireframe;

		[Token(Token = "0x6002C2E")]
		[Address(RVA = "0xE1FA80", Offset = "0xE1FA80", VA = "0xE1FA80", Slot = "4")]
		public override void Draw(SnapModule module)
		{
		}

		[Token(Token = "0x6002C2F")]
		[Address(RVA = "0xE1F7D4", Offset = "0xE1F7D4", VA = "0xE1F7D4")]
		public SnapGizmoRenderCommandTile()
		{
		}
	}
	[Token(Token = "0x20007DD")]
	public class SnapBuilder : DungeonBuilder
	{
		[Token(Token = "0x20007DE")]
		private delegate void VisitTreeNodeDelegate(ModuleBuildNode Node);

		[Token(Token = "0x4002780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private SnapConfig snapConfig;

		[Token(Token = "0x4002781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SnapModel snapModel;

		[Token(Token = "0x4002782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private new System.Random random;

		[Token(Token = "0x6002C30")]
		[Address(RVA = "0xE1FB5C", Offset = "0xE1FB5C", VA = "0xE1FB5C", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6002C31")]
		[Address(RVA = "0xE1FB88", Offset = "0xE1FB88", VA = "0xE1FB88", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6002C32")]
		[Address(RVA = "0xE1FB90", Offset = "0xE1FB90", VA = "0xE1FB90", Slot = "7")]
		public override bool IsThemingSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x6002C33")]
		[Address(RVA = "0xE1FB98", Offset = "0xE1FB98", VA = "0xE1FB98", Slot = "8")]
		public override void BuildNonThemedDungeon(DungeonSceneProvider sceneProvider, IDungeonSceneObjectInstantiator objectInstantiator)
		{
		}

		[Token(Token = "0x6002C34")]
		private T GetArrayEntry<T>(int index, T[] array) where T : class
		{
			return null;
		}

		[Token(Token = "0x6002C35")]
		[Address(RVA = "0xE20D88", Offset = "0xE20D88", VA = "0xE20D88")]
		private void FixupDoorStates(ModuleBuildNode rootNode)
		{
		}

		[Token(Token = "0x6002C36")]
		[Address(RVA = "0xE20B60", Offset = "0xE20B60", VA = "0xE20B60")]
		private void TraverseTree(ModuleBuildNode RootNode, VisitTreeNodeDelegate VisitTreeNode)
		{
		}

		[Token(Token = "0x6002C37")]
		[Address(RVA = "0xE21380", Offset = "0xE21380", VA = "0xE21380")]
		private static void CalculateOccupiedBounds(ModuleBuildNode Node, List<Bounds> OccupiedBounds)
		{
		}

		[Token(Token = "0x6002C38")]
		[Address(RVA = "0xE21574", Offset = "0xE21574", VA = "0xE21574")]
		private static Bounds GetBounds(GameObject target)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6002C39")]
		[Address(RVA = "0xE21694", Offset = "0xE21694", VA = "0xE21694")]
		private void FindConnectionTransforms(SnapModuleEntry moduleEntry, out Matrix4x4[] outTransforms, out string[] outCategories)
		{
		}

		[Token(Token = "0x6002C3A")]
		[Address(RVA = "0xE20554", Offset = "0xE20554", VA = "0xE20554")]
		private ModuleInfo GenerateModuleInfo(SnapModuleEntry modulePrefab)
		{
			return null;
		}

		[Token(Token = "0x6002C3B")]
		[Address(RVA = "0xE21A6C", Offset = "0xE21A6C", VA = "0xE21A6C")]
		private void DebugLog(string name, ref Matrix4x4 Transform)
		{
		}

		[Token(Token = "0x6002C3C")]
		[Address(RVA = "0xE21C84", Offset = "0xE21C84", VA = "0xE21C84", Slot = "13")]
		protected virtual Matrix4x4[] FindAttachmentTransforms(ref Matrix4x4 ParentModuleTransform, ref Matrix4x4 IncomingDoorTransform, ref Matrix4x4 AttachmentDoorTransform)
		{
			return null;
		}

		[Token(Token = "0x6002C3D")]
		[Address(RVA = "0xE22104", Offset = "0xE22104", VA = "0xE22104")]
		private bool FindAttachmentConfiguration(ModuleInfo TargetModule, ModuleInfo IncomingModule, ref Matrix4x4 IncomingModuleTransform, int IncomingDoorIndex, HashSet<Bounds> OccupiedBounds, ref SnapAttachmentConfiguration OutAttachmentConfig)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C3E")]
		[Address(RVA = "0xE226C0", Offset = "0xE226C0", VA = "0xE226C0")]
		private int[] FindFilteredModuleList(List<ModuleInfo> ModuleInfoList, string category)
		{
			return null;
		}

		[Token(Token = "0x6002C3F")]
		[Address(RVA = "0xE22840", Offset = "0xE22840", VA = "0xE22840", Slot = "9")]
		public override void DebugDraw()
		{
		}

		[Token(Token = "0x6002C40")]
		[Address(RVA = "0xE205FC", Offset = "0xE205FC", VA = "0xE205FC")]
		private ModuleBuildNode BuildLayoutRecursive(ModuleGrowthNode GrowthNode, ref HashSet<Bounds> _OccupiedBounds, RuntimeGraphNode<GrammarRuntimeGraphNodeData> graphNode, SnapLayoutBuildState RecursiveState)
		{
			return null;
		}

		[Token(Token = "0x6002C41")]
		[Address(RVA = "0xE22B70", Offset = "0xE22B70", VA = "0xE22B70")]
		public SnapBuilder()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007E2")]
	public class SnapModuleEntry
	{
		[Token(Token = "0x4002788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public GameObject module;

		[Token(Token = "0x4002789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public string category;

		[Token(Token = "0x6002C4C")]
		[Address(RVA = "0xE230D8", Offset = "0xE230D8", VA = "0xE230D8")]
		public SnapModuleEntry()
		{
		}
	}
	[Token(Token = "0x20007E3")]
	public class SnapConfig : DungeonConfig
	{
		[Token(Token = "0x400278A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Specify the list of modules here.  These modules would be stitched together to create your level")]
		public SnapModuleEntry[] Modules;

		[Token(Token = "0x400278B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Dungeon flow assets allow you to design layouts for your dungeons using graph grammar")]
		public DungeonFlowAsset dungeonFlow;

		[Token(Token = "0x400278C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Grammar production rule graphs can be built using user specified scripts.  Check this if they should be re-run (and hence regenerate the graph) while processing the graph grammar")]
		public bool runGraphGenerationScripts;

		[Token(Token = "0x400278D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[Tooltip("")]
		public bool RotateModulesToFit;

		[Token(Token = "0x400278E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("When modules are stitched together, the builder makes sure they do not overlap.  This parameter is used to \r\n\t control the tolerance level.  If set to 0, even the slightest overlap with a nearby module would not create an adjacent module\r\n\t Leaving to a small number like 100, would tolerate an overlap with nearby module by 100 unreal units.\r\n\t Adjust this depending on your art asset")]
		public float CollisionTestContraction;

		[Token(Token = "0x400278F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Sometimes, the search space is too large (with billions of possibilities) and if a valid path cannot be easily found\r\n\t(e.g. due to existing occluded geometry) the search would take too long.  This value makes sure the build doesn't\r\n\thang and bails out early with the best result it has found till that point.\r\n\tIncrease the value to have better quality result in those cases. Decrease if you notice the build taking too long\r\n\tor if build speed is a priority (e.g. if you are building during runtime).   A good value is ~1000000")]
		public int MaxProcessingPower;

		[Token(Token = "0x6002C4D")]
		[Address(RVA = "0xE23128", Offset = "0xE23128", VA = "0xE23128")]
		public SnapConfig()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007E4")]
	public class SnapModuleInstance
	{
		[Token(Token = "0x4002790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string InstanceID;

		[Token(Token = "0x4002791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Matrix4x4 WorldTransform;

		[Token(Token = "0x4002792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Bounds WorldBounds;

		[Token(Token = "0x6002C4E")]
		[Address(RVA = "0xE22EE8", Offset = "0xE22EE8", VA = "0xE22EE8")]
		public SnapModuleInstance()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007E5")]
	public class SnapModuleConnection
	{
		[Token(Token = "0x4002793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string ModuleAInstanceID;

		[Token(Token = "0x4002794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int DoorAIndex;

		[Token(Token = "0x4002795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string ModuleBInstanceID;

		[Token(Token = "0x4002796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int DoorBIndex;

		[Token(Token = "0x6002C4F")]
		[Address(RVA = "0xE23008", Offset = "0xE23008", VA = "0xE23008")]
		public SnapModuleConnection()
		{
		}
	}
	[Token(Token = "0x20007E6")]
	public class SnapModel : DungeonModel
	{
		[Token(Token = "0x4002797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public SnapModuleInstance[] modules;

		[Token(Token = "0x4002798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public SnapModuleConnection[] connections;

		[Token(Token = "0x6002C50")]
		[Address(RVA = "0xE23148", Offset = "0xE23148", VA = "0xE23148", Slot = "4")]
		public override void ResetModel()
		{
		}

		[Token(Token = "0x6002C51")]
		[Address(RVA = "0xE231C4", Offset = "0xE231C4", VA = "0xE231C4")]
		public SnapModel()
		{
		}
	}
}
namespace DungeonArchitect.Builders.Snap.SideScroller
{
	[Token(Token = "0x20007E7")]
	public class SnapSideScrollerBuilder : SnapBuilder
	{
		[Token(Token = "0x6002C52")]
		[Address(RVA = "0xE231CC", Offset = "0xE231CC", VA = "0xE231CC", Slot = "13")]
		protected override Matrix4x4[] FindAttachmentTransforms(ref Matrix4x4 ParentModuleTransform, ref Matrix4x4 IncomingDoorTransform, ref Matrix4x4 AttachmentDoorTransform)
		{
			return null;
		}

		[Token(Token = "0x6002C53")]
		[Address(RVA = "0xE23560", Offset = "0xE23560", VA = "0xE23560")]
		public SnapSideScrollerBuilder()
		{
		}
	}
}
namespace DungeonArchitect.Builders.Snap.Impl
{
	[Token(Token = "0x20007E8")]
	internal class ModuleInfo
	{
		[Token(Token = "0x4002799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SnapModuleEntry ModuleTemplate;

		[Token(Token = "0x400279A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Guid ModuleGuid;

		[Token(Token = "0x400279B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Bounds Bounds;

		[Token(Token = "0x400279C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Matrix4x4[] ConnectionTransforms;

		[Token(Token = "0x400279D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string[] ConnectionCategory;

		[Token(Token = "0x6002C54")]
		[Address(RVA = "0xE23568", Offset = "0xE23568", VA = "0xE23568")]
		public ModuleInfo()
		{
		}
	}
	[Token(Token = "0x20007E9")]
	internal class SnapAttachmentConfiguration
	{
		[Token(Token = "0x400279E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ModuleInfo AttachedModule;

		[Token(Token = "0x400279F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int AttachedModuleDoorIndex;

		[Token(Token = "0x40027A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Bounds AttachedModuleWorldBounds;

		[Token(Token = "0x40027A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Matrix4x4 AttachedModuleTransform;

		[Token(Token = "0x6002C55")]
		[Address(RVA = "0xE23570", Offset = "0xE23570", VA = "0xE23570")]
		public SnapAttachmentConfiguration()
		{
		}
	}
	[Token(Token = "0x20007EA")]
	internal class ModuleGrowthNode
	{
		[Token(Token = "0x40027A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Matrix4x4 ModuleTransform;

		[Token(Token = "0x40027A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ModuleInfo IncomingModule;

		[Token(Token = "0x40027A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int IncomingModuleDoorIndex;

		[Token(Token = "0x40027A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool startNode;

		[Token(Token = "0x6002C56")]
		[Address(RVA = "0xE23578", Offset = "0xE23578", VA = "0xE23578")]
		public ModuleGrowthNode()
		{
		}
	}
	[Token(Token = "0x20007EB")]
	internal class ModuleBuildNode
	{
		[Token(Token = "0x40027A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string ModuleInstanceID;

		[Token(Token = "0x40027A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ModuleInfo Module;

		[Token(Token = "0x40027A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int IncomingDoorIndex;

		[Token(Token = "0x40027A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SnapAttachmentConfiguration AttachmentConfig;

		[Token(Token = "0x40027AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int DepthFromLeaf;

		[Token(Token = "0x40027AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<ModuleBuildNode> Extensions;

		[Token(Token = "0x40027AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ModuleBuildNode Parent;

		[Token(Token = "0x40027AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject spawnedModule;

		[Token(Token = "0x6002C57")]
		[Address(RVA = "0xE235E4", Offset = "0xE235E4", VA = "0xE235E4")]
		public static string GenerateModuleInstanceID(Guid ModuleGuid)
		{
			return null;
		}

		[Token(Token = "0x6002C58")]
		[Address(RVA = "0xE2364C", Offset = "0xE2364C", VA = "0xE2364C")]
		public ModuleBuildNode()
		{
		}
	}
	[Token(Token = "0x20007EC")]
	internal class SnapLayoutBuildState
	{
		[Token(Token = "0x40027AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bSafetyBailOut;

		[Token(Token = "0x40027AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int NumTries;

		[Token(Token = "0x40027B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bFoundBestBuild;

		[Token(Token = "0x40027B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<ModuleInfo> ModuleInfoList;

		[Token(Token = "0x6002C59")]
		[Address(RVA = "0xE236EC", Offset = "0xE236EC", VA = "0xE236EC")]
		public SnapLayoutBuildState()
		{
		}
	}
}
namespace DungeonArchitect.Builders.SimpleCity
{
	[Token(Token = "0x20007ED")]
	public enum SimpleCityLandscapeTextureType
	{
		[Token(Token = "0x40027B3")]
		Road,
		[Token(Token = "0x40027B4")]
		Park,
		[Token(Token = "0x40027B5")]
		CityWallPadding
	}
	[Serializable]
	[Token(Token = "0x20007EE")]
	public class SimpleCityLandscapeTexture
	{
		[Token(Token = "0x40027B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SimpleCityLandscapeTextureType textureType;

		[Token(Token = "0x40027B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TerrainLayer terrainLayer;

		[Token(Token = "0x40027B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve curve;

		[Token(Token = "0x6002C5A")]
		[Address(RVA = "0xE23778", Offset = "0xE23778", VA = "0xE23778")]
		public SimpleCityLandscapeTexture()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007EF")]
	public class SimpleCityFoliageEntry
	{
		[Token(Token = "0x40027B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int grassIndex;

		[Token(Token = "0x40027BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float density;

		[Token(Token = "0x6002C5B")]
		[Address(RVA = "0xE23780", Offset = "0xE23780", VA = "0xE23780")]
		public SimpleCityFoliageEntry()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007F0")]
	public class SimpleCityFoliageTheme
	{
		[Token(Token = "0x40027BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SimpleCityLandscapeTextureType textureType;

		[Token(Token = "0x40027BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SimpleCityFoliageEntry[] foliageEntries;

		[Token(Token = "0x40027BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve curve;

		[Token(Token = "0x40027BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float density;

		[Token(Token = "0x6002C5C")]
		[Address(RVA = "0xE23788", Offset = "0xE23788", VA = "0xE23788")]
		public SimpleCityFoliageTheme()
		{
		}
	}
	[Token(Token = "0x20007F1")]
	public class LandscapeTransformerCity : LandscapeTransformerBase
	{
		[Token(Token = "0x40027BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SimpleCityLandscapeTexture[] textures;

		[Token(Token = "0x40027C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SimpleCityFoliageTheme[] foliage;

		[Token(Token = "0x40027C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int roadBlurDistance;

		[Token(Token = "0x40027C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float corridorBlurThreshold;

		[Token(Token = "0x40027C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float roomBlurThreshold;

		[Token(Token = "0x40027C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float flatten;

		[Token(Token = "0x40027C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int blendingUnits;

		[Token(Token = "0x40027C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationCurve smoothingCurve;

		[Token(Token = "0x6002C5D")]
		[Address(RVA = "0xE23798", Offset = "0xE23798", VA = "0xE23798", Slot = "10")]
		protected override void BuildTerrain(DungeonModel model)
		{
		}

		[Token(Token = "0x6002C5E")]
		[Address(RVA = "0xE23AE8", Offset = "0xE23AE8", VA = "0xE23AE8")]
		private void UpdateHeights(SimpleCityDungeonModel model)
		{
		}

		[Token(Token = "0x6002C5F")]
		[Address(RVA = "0xE24030", Offset = "0xE24030", VA = "0xE24030")]
		private void RemoveFoliageFromBaseLayout(SimpleCityDungeonModel model)
		{
		}

		[Token(Token = "0x6002C60")]
		[Address(RVA = "0xE24244", Offset = "0xE24244", VA = "0xE24244", Slot = "11")]
		protected override Rect GetDungeonBounds(DungeonModel model)
		{
			return default(Rect);
		}

		[Token(Token = "0x6002C61")]
		[Address(RVA = "0xE23E84", Offset = "0xE23E84", VA = "0xE23E84")]
		private Rect GetDungeonBounds(DungeonModel model, int extraPadding)
		{
			return default(Rect);
		}

		[Token(Token = "0x6002C62")]
		[Address(RVA = "0xE238B0", Offset = "0xE238B0", VA = "0xE238B0")]
		private void SetupTextures()
		{
		}

		[Token(Token = "0x6002C63")]
		[Address(RVA = "0xE23D4C", Offset = "0xE23D4C", VA = "0xE23D4C")]
		private void UpdateTerrainTextures(SimpleCityDungeonModel model)
		{
		}

		[Token(Token = "0x6002C64")]
		[Address(RVA = "0xE2424C", Offset = "0xE2424C", VA = "0xE2424C")]
		private void UpdateBaseTexture(SimpleCityDungeonModel model, float[,,] map)
		{
		}

		[Token(Token = "0x6002C65")]
		[Address(RVA = "0xE25400", Offset = "0xE25400", VA = "0xE25400")]
		private int GetTextureIndex(SimpleCityLandscapeTextureType textureType)
		{
			return default(int);
		}

		[Token(Token = "0x6002C66")]
		[Address(RVA = "0xE2556C", Offset = "0xE2556C", VA = "0xE2556C")]
		public LandscapeTransformerCity()
		{
		}
	}
	[Token(Token = "0x20007F2")]
	internal class SimpleCityDungeonConstants
	{
		[Token(Token = "0x40027C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string House;

		[Token(Token = "0x40027C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string Park;

		[Token(Token = "0x40027C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string Road_X;

		[Token(Token = "0x40027CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string Road_T;

		[Token(Token = "0x40027CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string Road_Corner;

		[Token(Token = "0x40027CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string Road_S;

		[Token(Token = "0x40027CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly string Road_E;

		[Token(Token = "0x40027CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly string Road;

		[Token(Token = "0x40027CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly string WallMarkerName;

		[Token(Token = "0x40027D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly string DoorMarkerName;

		[Token(Token = "0x40027D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly string GroundMarkerName;

		[Token(Token = "0x40027D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly string CornerTowerMarkerName;

		[Token(Token = "0x40027D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly string WallPaddingMarkerName;

		[Token(Token = "0x6002C67")]
		[Address(RVA = "0xE25590", Offset = "0xE25590", VA = "0xE25590")]
		public SimpleCityDungeonConstants()
		{
		}
	}
	[Token(Token = "0x20007F3")]
	public class SimpleCityDungeonBuilder : DungeonBuilder
	{
		[Token(Token = "0x20007F4")]
		private delegate void InsertHouseDelegate();

		[Token(Token = "0x40027D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private SimpleCityDungeonConfig cityConfig;

		[Token(Token = "0x40027D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SimpleCityDungeonModel cityModel;

		[Token(Token = "0x40027D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private new System.Random random;

		[Token(Token = "0x6002C69")]
		[Address(RVA = "0xE25790", Offset = "0xE25790", VA = "0xE25790", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6002C6A")]
		[Address(RVA = "0xE2617C", Offset = "0xE2617C", VA = "0xE2617C", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6002C6B")]
		[Address(RVA = "0xE258D0", Offset = "0xE258D0", VA = "0xE258D0")]
		private void GenerateCityLayout()
		{
		}

		[Token(Token = "0x6002C6C")]
		[Address(RVA = "0xE270A0", Offset = "0xE270A0", VA = "0xE270A0")]
		private void RemoveRoadEdge(int x, int z)
		{
		}

		[Token(Token = "0x6002C6D")]
		[Address(RVA = "0xE27478", Offset = "0xE27478", VA = "0xE27478")]
		private bool IsStraightRoad(int x, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C6E")]
		[Address(RVA = "0xE26D10", Offset = "0xE26D10", VA = "0xE26D10")]
		private void RemoveRoadEdges()
		{
		}

		[Token(Token = "0x6002C6F")]
		[Address(RVA = "0xE26FAC", Offset = "0xE26FAC", VA = "0xE26FAC")]
		private SimpleCityCell CreateCell(int x, int z, SimpleCityCellType cellType)
		{
			return null;
		}

		[Token(Token = "0x6002C70")]
		[Address(RVA = "0xE27554", Offset = "0xE27554", VA = "0xE27554")]
		private SimpleCityCellType GetCellType(int x, int z)
		{
			return default(SimpleCityCellType);
		}

		[Token(Token = "0x6002C71")]
		[Address(RVA = "0xE26E60", Offset = "0xE26E60", VA = "0xE26E60")]
		private void FaceHouseTowardsRoad(SimpleCityCell cell)
		{
		}

		[Token(Token = "0x6002C72")]
		[Address(RVA = "0xE27624", Offset = "0xE27624", VA = "0xE27624")]
		private bool CanContainBiggerHouse(int x, int z, int w, int h)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C73")]
		[Address(RVA = "0xE27774", Offset = "0xE27774", VA = "0xE27774")]
		private bool IsConnectedToRoad(int x, int z, int w, int h)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C74")]
		[Address(RVA = "0xE27C4C", Offset = "0xE27C4C", VA = "0xE27C4C")]
		private void InsertBiggerHouse(int x, int z, int w, int h, float Angle, string markerName)
		{
		}

		[Token(Token = "0x6002C75")]
		[Address(RVA = "0xE26BBC", Offset = "0xE26BBC", VA = "0xE26BBC")]
		private void MakeRoad(int x, int z, bool horizontal)
		{
		}

		[Token(Token = "0x6002C76")]
		[Address(RVA = "0xE261AC", Offset = "0xE261AC", VA = "0xE261AC")]
		private void EmitCityMarkers()
		{
		}

		[Token(Token = "0x6002C77")]
		[Address(RVA = "0xE26628", Offset = "0xE26628", VA = "0xE26628")]
		private void EmitBoundaryMarkers()
		{
		}

		[Token(Token = "0x6002C78")]
		[Address(RVA = "0xE280D0", Offset = "0xE280D0", VA = "0xE280D0")]
		private void EmitWallMarker(UnityEngine.Vector3 cellSize, float x, float z, float angle)
		{
		}

		[Token(Token = "0x6002C79")]
		[Address(RVA = "0xE28028", Offset = "0xE28028", VA = "0xE28028")]
		private void EmitDoorMarker(UnityEngine.Vector3 cellSize, float x, float z, float angle)
		{
		}

		[Token(Token = "0x6002C7A")]
		[Address(RVA = "0xE28338", Offset = "0xE28338", VA = "0xE28338")]
		private void EmitGroundMarker(int sizeX, int sizeZ, UnityEngine.Vector3 cellSize)
		{
		}

		[Token(Token = "0x6002C7B")]
		[Address(RVA = "0xE28178", Offset = "0xE28178", VA = "0xE28178")]
		private void EmitMarkerAt(UnityEngine.Vector3 cellSize, string markerName, float x, float z, float angle)
		{
		}

		[Token(Token = "0x6002C7C")]
		[Address(RVA = "0xE26B6C", Offset = "0xE26B6C", VA = "0xE26B6C")]
		private Quaternion GetRandomRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002C7D")]
		[Address(RVA = "0xE26CE0", Offset = "0xE26CE0", VA = "0xE26CE0")]
		private int GetRandomBlockSize()
		{
			return default(int);
		}

		[Token(Token = "0x6002C7E")]
		[Address(RVA = "0xE2850C", Offset = "0xE2850C", VA = "0xE2850C")]
		public SimpleCityDungeonBuilder()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20007F8")]
	public struct CityBlockDimension
	{
		[Token(Token = "0x40027DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Tooltip("If this block is inserted, this marker name take from the theme file")]
		public string markerName;

		[Token(Token = "0x40027E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[Tooltip("The width of the block, in grid coordinates.  E.g. 2 would take up 2 blocks")]
		public int sizeX;

		[Token(Token = "0x40027E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[Tooltip("The length of the block, in grid coordinates.  E.g. 2 would take up 2 blocks")]
		public int sizeZ;

		[Token(Token = "0x40027E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("The chance of this block appearing.  0 - No chance, 1 - Every time.   0.5 = 50% chance of appearing")]
		public float probability;
	}
	[Token(Token = "0x20007F9")]
	public class SimpleCityDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x40027E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Vector2 CellSize;

		[Token(Token = "0x40027E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int minSize;

		[Token(Token = "0x40027E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int maxSize;

		[Token(Token = "0x40027E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int minBlockSize;

		[Token(Token = "0x40027E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int maxBlockSize;

		[Token(Token = "0x40027E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float biggerHouseProbability;

		[Token(Token = "0x40027E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int cityWallPadding;

		[Token(Token = "0x40027EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int cityDoorSize;

		[Token(Token = "0x40027EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float roadEdgeRemovalProbability;

		[Token(Token = "0x40027EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CityBlockDimension[] customBlockDimensions;

		[Token(Token = "0x40027ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int roadWidth;

		[Token(Token = "0x6002C88")]
		[Address(RVA = "0xE286B0", Offset = "0xE286B0", VA = "0xE286B0")]
		public SimpleCityDungeonConfig()
		{
		}
	}
	[Token(Token = "0x20007FA")]
	public enum SimpleCityCellType
	{
		[Token(Token = "0x40027EF")]
		Road,
		[Token(Token = "0x40027F0")]
		House,
		[Token(Token = "0x40027F1")]
		Park,
		[Token(Token = "0x40027F2")]
		CityWallPadding,
		[Token(Token = "0x40027F3")]
		UserDefined,
		[Token(Token = "0x40027F4")]
		Empty
	}
	[Token(Token = "0x20007FB")]
	public class SimpleCityCell
	{
		[Token(Token = "0x40027F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntVector Position;

		[Token(Token = "0x40027F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SimpleCityCellType CellType;

		[Token(Token = "0x40027F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion Rotation;

		[Token(Token = "0x40027F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Vector3 BlockSize;

		[Token(Token = "0x40027F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string MarkerNameOverride;

		[Token(Token = "0x6002C89")]
		[Address(RVA = "0xE26B50", Offset = "0xE26B50", VA = "0xE26B50")]
		public SimpleCityCell()
		{
		}
	}
	[Token(Token = "0x20007FC")]
	public class SimpleCityDungeonModel : DungeonModel
	{
		[Token(Token = "0x40027FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public SimpleCityCell[,] Cells;

		[Token(Token = "0x40027FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public SimpleCityCell[] WallPaddingCells;

		[Token(Token = "0x40027FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public SimpleCityDungeonConfig Config;

		[Token(Token = "0x40027FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public int CityWidth;

		[Token(Token = "0x40027FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[HideInInspector]
		public int CityHeight;

		[Token(Token = "0x6002C8A")]
		[Address(RVA = "0xE286E0", Offset = "0xE286E0", VA = "0xE286E0")]
		public SimpleCityDungeonModel()
		{
		}
	}
	[Token(Token = "0x20007FD")]
	public class RoadBeautifier
	{
		[Token(Token = "0x6002C8B")]
		[Address(RVA = "0xE27D94", Offset = "0xE27D94", VA = "0xE27D94")]
		public static string GetRoadMarkerName(int x, int z, SimpleCityCell[,] cells, out float angle)
		{
			return null;
		}

		[Token(Token = "0x6002C8C")]
		[Address(RVA = "0xE28748", Offset = "0xE28748", VA = "0xE28748")]
		private static bool MatchesConfig(int x, int z, SimpleCityCell[,] cells, out float angle, params int[] neighbors)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C8D")]
		[Address(RVA = "0xE289E8", Offset = "0xE289E8", VA = "0xE289E8")]
		private static bool ContainsRoad(int x, int z, SimpleCityCell[,] cells)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C8E")]
		[Address(RVA = "0xE28AA0", Offset = "0xE28AA0", VA = "0xE28AA0")]
		public RoadBeautifier()
		{
		}
	}
	[Token(Token = "0x20007FE")]
	public class StrongholdWallEmitter : DungeonMarkerEmitter
	{
		[Token(Token = "0x40027FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int padding;

		[Token(Token = "0x4002800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int doorSize;

		[Token(Token = "0x4002801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string WallMarkerName;

		[Token(Token = "0x4002802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string DoorMarkerName;

		[Token(Token = "0x4002803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string GroundMarkerName;

		[Token(Token = "0x4002804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string CornerTowerMarkerName;

		[Token(Token = "0x4002805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string WallPaddingMarkerName;

		[Token(Token = "0x6002C8F")]
		[Address(RVA = "0xE28AA8", Offset = "0xE28AA8", VA = "0xE28AA8", Slot = "4")]
		public override void EmitMarkers(DungeonBuilder builder)
		{
		}

		[Token(Token = "0x6002C90")]
		[Address(RVA = "0xE28FB0", Offset = "0xE28FB0", VA = "0xE28FB0")]
		private void EmitWallMarker(DungeonBuilder builder, UnityEngine.Vector3 cellSize, float x, float z, float angle)
		{
		}

		[Token(Token = "0x6002C91")]
		[Address(RVA = "0xE28FA8", Offset = "0xE28FA8", VA = "0xE28FA8")]
		private void EmitDoorMarker(DungeonBuilder builder, UnityEngine.Vector3 cellSize, float x, float z, float angle)
		{
		}

		[Token(Token = "0x6002C92")]
		[Address(RVA = "0xE29194", Offset = "0xE29194", VA = "0xE29194")]
		private void EmitGroundMarker(DungeonBuilder builder, int sizeX, int sizeZ, UnityEngine.Vector3 cellSize)
		{
		}

		[Token(Token = "0x6002C93")]
		[Address(RVA = "0xE28FB8", Offset = "0xE28FB8", VA = "0xE28FB8")]
		private void EmitMarkerAt(DungeonBuilder builder, UnityEngine.Vector3 cellSize, string markerName, float x, float z, float angle)
		{
		}

		[Token(Token = "0x6002C94")]
		[Address(RVA = "0xE2933C", Offset = "0xE2933C", VA = "0xE2933C")]
		public StrongholdWallEmitter()
		{
		}
	}
}
namespace DungeonArchitect.Builders.SimpleCity.SpatialConstraints
{
	[Token(Token = "0x20007FF")]
	public class SpatialConstraintProcessorSimpleCity3D : SpatialConstraintProcessor
	{
		[Token(Token = "0x6002C95")]
		[Address(RVA = "0xE29414", Offset = "0xE29414", VA = "0xE29414", Slot = "4")]
		public override SpatialConstraintRuleDomain GetDomain(SpatialConstraintProcessorContext context)
		{
			return null;
		}

		[Token(Token = "0x6002C96")]
		[Address(RVA = "0xE294BC", Offset = "0xE294BC", VA = "0xE294BC")]
		public SpatialConstraintProcessorSimpleCity3D()
		{
		}
	}
}
namespace DungeonArchitect.Builders.Maze
{
	[Token(Token = "0x2000800")]
	public class MazeDungeonConstants
	{
		[Token(Token = "0x4002806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string GroundBlock;

		[Token(Token = "0x4002807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string WallBlock;

		[Token(Token = "0x6002C97")]
		[Address(RVA = "0xE294C4", Offset = "0xE294C4", VA = "0xE294C4")]
		public MazeDungeonConstants()
		{
		}
	}
	[Token(Token = "0x2000801")]
	public class MazeDungeonBuilder : DungeonBuilder
	{
		[Token(Token = "0x4002808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MazeDungeonConfig MazeConfig;

		[Token(Token = "0x4002809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MazeDungeonModel MazeModel;

		[Token(Token = "0x400280A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private new System.Random random;

		[Token(Token = "0x6002C99")]
		[Address(RVA = "0xE29558", Offset = "0xE29558", VA = "0xE29558", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6002C9A")]
		[Address(RVA = "0xE299D0", Offset = "0xE299D0", VA = "0xE299D0", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6002C9B")]
		[Address(RVA = "0xE29C78", Offset = "0xE29C78", VA = "0xE29C78")]
		private bool IsVisited(bool[,] visited, int x, int y)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C9C")]
		[Address(RVA = "0xE29D2C", Offset = "0xE29D2C", VA = "0xE29D2C")]
		private bool CanDigToPoint(IntVector2 point, bool[,] visited)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C9D")]
		[Address(RVA = "0xE29DD4", Offset = "0xE29DD4", VA = "0xE29DD4")]
		private bool GetNextNeighbor(IntVector2 currentPoint, out IntVector2 nextPoint, bool[,] visited)
		{
			return default(bool);
		}

		[Token(Token = "0x6002C9E")]
		[Address(RVA = "0xE29698", Offset = "0xE29698", VA = "0xE29698")]
		private void GenerateLevelLayout()
		{
		}

		[Token(Token = "0x6002C9F")]
		[Address(RVA = "0xE299F8", Offset = "0xE299F8", VA = "0xE299F8")]
		private void EmitLevelMarkers()
		{
		}

		[Token(Token = "0x6002CA0")]
		[Address(RVA = "0xE2A148", Offset = "0xE2A148", VA = "0xE2A148")]
		public MazeDungeonBuilder()
		{
		}
	}
	[Token(Token = "0x2000802")]
	public class MazeDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x400280B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int mazeWidth;

		[Token(Token = "0x400280C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int mazeHeight;

		[Token(Token = "0x400280D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector2 gridSize;

		[Token(Token = "0x6002CA1")]
		[Address(RVA = "0xE2A150", Offset = "0xE2A150", VA = "0xE2A150")]
		public MazeDungeonConfig()
		{
		}
	}
	[Token(Token = "0x2000803")]
	public enum MazeTileState
	{
		[Token(Token = "0x400280F")]
		Empty,
		[Token(Token = "0x4002810")]
		Blocked
	}
	[Token(Token = "0x2000804")]
	public class MazeDungeonModel : DungeonModel
	{
		[Token(Token = "0x4002811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public MazeDungeonConfig Config;

		[Token(Token = "0x4002812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public MazeTileState[,] tileStates;

		[Token(Token = "0x6002CA2")]
		[Address(RVA = "0xE2A164", Offset = "0xE2A164", VA = "0xE2A164")]
		public MazeDungeonModel()
		{
		}
	}
}
namespace DungeonArchitect.Builders.Mario
{
	[Token(Token = "0x2000805")]
	internal class MarioDungeonConstants
	{
		[Token(Token = "0x4002813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string Ground;

		[Token(Token = "0x4002814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string WallFront;

		[Token(Token = "0x4002815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string WallBack;

		[Token(Token = "0x4002816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string WallSide;

		[Token(Token = "0x4002817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string BackgroundGround;

		[Token(Token = "0x4002818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string BackgroundCeiling;

		[Token(Token = "0x4002819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly string BackgroundWall;

		[Token(Token = "0x400281A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly string Stair;

		[Token(Token = "0x400281B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly string Corridor;

		[Token(Token = "0x6002CA3")]
		[Address(RVA = "0xE2A16C", Offset = "0xE2A16C", VA = "0xE2A16C")]
		public MarioDungeonConstants()
		{
		}
	}
	[Token(Token = "0x2000806")]
	public class MarioDungeonBuilder : DungeonBuilder
	{
		[Token(Token = "0x400281C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MarioDungeonConfig marioConfig;

		[Token(Token = "0x400281D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MarioDungeonModel marioModel;

		[Token(Token = "0x400281E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private new System.Random random;

		[Token(Token = "0x6002CA5")]
		[Address(RVA = "0xE2A2DC", Offset = "0xE2A2DC", VA = "0xE2A2DC", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6002CA6")]
		[Address(RVA = "0xE2AB88", Offset = "0xE2AB88", VA = "0xE2AB88", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6002CA7")]
		[Address(RVA = "0xE2A41C", Offset = "0xE2A41C", VA = "0xE2A41C")]
		private void GenerateLevelLayout()
		{
		}

		[Token(Token = "0x6002CA8")]
		[Address(RVA = "0xE2ABB0", Offset = "0xE2ABB0", VA = "0xE2ABB0")]
		private void EmitLevelMarkers()
		{
		}

		[Token(Token = "0x6002CA9")]
		[Address(RVA = "0xE2C1B8", Offset = "0xE2C1B8", VA = "0xE2C1B8")]
		public MarioDungeonBuilder()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000807")]
	public class MarioDungeonLevelChunkRule
	{
		[Token(Token = "0x400281F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int numTiles;

		[Token(Token = "0x4002820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string markerName;

		[Token(Token = "0x4002821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float probablity;

		[Token(Token = "0x6002CAA")]
		[Address(RVA = "0xE2C1C0", Offset = "0xE2C1C0", VA = "0xE2C1C0")]
		public MarioDungeonLevelChunkRule()
		{
		}
	}
	[Token(Token = "0x2000808")]
	public class MarioDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x4002822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int minLength;

		[Token(Token = "0x4002823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int maxLength;

		[Token(Token = "0x4002824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int minY;

		[Token(Token = "0x4002825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int maxY;

		[Token(Token = "0x4002826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int minDepth;

		[Token(Token = "0x4002827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int maxDepth;

		[Token(Token = "0x4002828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int minGap;

		[Token(Token = "0x4002829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int maxGap;

		[Token(Token = "0x400282A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int minNonGap;

		[Token(Token = "0x400282B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int maxStairHeight;

		[Token(Token = "0x400282C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float heightVariationProbablity;

		[Token(Token = "0x400282D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float gapProbability;

		[Token(Token = "0x400282E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int maxJumpTileDistance;

		[Token(Token = "0x400282F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public UnityEngine.Vector3 gridSize;

		[Token(Token = "0x4002830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public MarioDungeonLevelChunkRule[] chunkMarkers;

		[Token(Token = "0x6002CAB")]
		[Address(RVA = "0xE2C220", Offset = "0xE2C220", VA = "0xE2C220")]
		public MarioDungeonConfig()
		{
		}
	}
	[Token(Token = "0x2000809")]
	public enum MarioTileType
	{
		[Token(Token = "0x4002832")]
		Ground,
		[Token(Token = "0x4002833")]
		Corridor,
		[Token(Token = "0x4002834")]
		Gap
	}
	[Token(Token = "0x200080A")]
	public class MarioTile
	{
		[Token(Token = "0x4002835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntVector position;

		[Token(Token = "0x4002836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MarioTileType tileType;

		[Token(Token = "0x4002837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] chunkMarkers;

		[Token(Token = "0x6002CAC")]
		[Address(RVA = "0xE2C1B0", Offset = "0xE2C1B0", VA = "0xE2C1B0")]
		public MarioTile()
		{
		}
	}
	[Token(Token = "0x200080B")]
	public class MarioDungeonModel : DungeonModel
	{
		[Token(Token = "0x4002838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public MarioDungeonConfig Config;

		[Token(Token = "0x4002839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public MarioTile[] tiles;

		[Token(Token = "0x400283A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public int levelWidth;

		[Token(Token = "0x6002CAD")]
		[Address(RVA = "0xE2C274", Offset = "0xE2C274", VA = "0xE2C274")]
		public MarioDungeonModel()
		{
		}
	}
}
namespace DungeonArchitect.Builders.Isaac
{
	[Token(Token = "0x200080C")]
	public class IsaacDungeonBuilder : DungeonBuilder
	{
		[Token(Token = "0x200080D")]
		private struct LevelGrowthNode
		{
			[Token(Token = "0x4002841")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IsaacRoom room;

			[Token(Token = "0x4002842")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int moveDirection;
		}

		[Token(Token = "0x400283B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private IsaacDungeonConfig isaacConfig;

		[Token(Token = "0x400283C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private IsaacDungeonModel isaacModel;

		[Token(Token = "0x400283D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private new System.Random random;

		[Token(Token = "0x400283E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<IsaacRoom> rooms;

		[Token(Token = "0x400283F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<IsaacDoor> doors;

		[Token(Token = "0x4002840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private IntVector[] directions;

		[Token(Token = "0x6002CAE")]
		[Address(RVA = "0xE2C27C", Offset = "0xE2C27C", VA = "0xE2C27C", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6002CAF")]
		[Address(RVA = "0xE2C9A8", Offset = "0xE2C9A8", VA = "0xE2C9A8", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6002CB0")]
		[Address(RVA = "0xE2C3BC", Offset = "0xE2C3BC", VA = "0xE2C3BC")]
		private void GenerateLevelLayout()
		{
		}

		[Token(Token = "0x6002CB1")]
		[Address(RVA = "0xE2CFC4", Offset = "0xE2CFC4", VA = "0xE2CFC4")]
		private void AddNextRoomNode(IsaacRoomFactory roomFactory, Queue<LevelGrowthNode> queue, HashSet<IntVector> visited, int maxRooms, IsaacRoom parentRoom, int direction, float probability)
		{
		}

		[Token(Token = "0x6002CB2")]
		[Address(RVA = "0xE2D33C", Offset = "0xE2D33C", VA = "0xE2D33C")]
		private void ConnectRoomsWithDoors(IsaacRoom roomA, IsaacRoom roomB)
		{
		}

		[Token(Token = "0x6002CB3")]
		[Address(RVA = "0xE2D468", Offset = "0xE2D468", VA = "0xE2D468")]
		private IsaacRoom GetRoomAt(IntVector position)
		{
			return null;
		}

		[Token(Token = "0x6002CB4")]
		[Address(RVA = "0xE2D614", Offset = "0xE2D614", VA = "0xE2D614")]
		private bool ContainsDoorBetween(int roomA, int roomB)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CB5")]
		[Address(RVA = "0xE2D7A4", Offset = "0xE2D7A4", VA = "0xE2D7A4")]
		private void CreateDoor(IsaacRoom roomA, IsaacRoom roomB, float ratio)
		{
		}

		[Token(Token = "0x6002CB6")]
		[Address(RVA = "0xE2DAD4", Offset = "0xE2DAD4", VA = "0xE2DAD4")]
		private bool IsWall(int x, int z, IsaacRoomLayout layout)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CB7")]
		[Address(RVA = "0xE2D284", Offset = "0xE2D284", VA = "0xE2D284")]
		private void GenerateRoomLayout(IsaacRoomLayoutBuilder layoutBuilder, IsaacRoom room)
		{
		}

		[Token(Token = "0x6002CB8")]
		[Address(RVA = "0xE2DC74", Offset = "0xE2DC74", VA = "0xE2DC74")]
		private IsaacRoomLayout GenerateEmptyRoomLayout()
		{
			return null;
		}

		[Token(Token = "0x6002CB9")]
		[Address(RVA = "0xE2C9D0", Offset = "0xE2C9D0", VA = "0xE2C9D0")]
		private void EmitLevelMarkers()
		{
		}

		[Token(Token = "0x6002CBA")]
		[Address(RVA = "0xE2DF18", Offset = "0xE2DF18", VA = "0xE2DF18")]
		public IsaacDungeonBuilder()
		{
		}
	}
	[Token(Token = "0x200080E")]
	internal class IsaacRoomFactory
	{
		[Token(Token = "0x4002843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int idCounter;

		[Token(Token = "0x6002CBB")]
		[Address(RVA = "0xE2CF40", Offset = "0xE2CF40", VA = "0xE2CF40")]
		public IsaacRoom CreateRoom(IntVector position)
		{
			return null;
		}

		[Token(Token = "0x6002CBC")]
		[Address(RVA = "0xE2CF38", Offset = "0xE2CF38", VA = "0xE2CF38")]
		public IsaacRoomFactory()
		{
		}
	}
	[Token(Token = "0x200080F")]
	public class IsaacDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x4002844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int minRooms;

		[Token(Token = "0x4002845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int maxRooms;

		[Token(Token = "0x4002846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int roomWidth;

		[Token(Token = "0x4002847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int roomHeight;

		[Token(Token = "0x4002848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Vector2 tileSize;

		[Token(Token = "0x4002849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Vector2 roomPadding;

		[Token(Token = "0x400284A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float growForwardProbablity;

		[Token(Token = "0x400284B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float growSidewaysProbablity;

		[Token(Token = "0x400284C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float spawnRoomBranchProbablity;

		[Token(Token = "0x400284D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float cycleProbability;

		[Token(Token = "0x6002CBD")]
		[Address(RVA = "0xE2E1C0", Offset = "0xE2E1C0", VA = "0xE2E1C0")]
		public IsaacDungeonConfig()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000810")]
	public class IsaacRoom
	{
		[Token(Token = "0x400284E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public int roomId;

		[Token(Token = "0x400284F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[HideInInspector]
		public IntVector position;

		[Token(Token = "0x4002850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public IsaacRoomLayout layout;

		[Token(Token = "0x4002851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public List<int> adjacentRooms;

		[Token(Token = "0x4002852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public List<IntVector> doorPositions;

		[Token(Token = "0x6002CBE")]
		[Address(RVA = "0xE2E100", Offset = "0xE2E100", VA = "0xE2E100")]
		public IsaacRoom()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000811")]
	public class IsaacDoor
	{
		[Token(Token = "0x4002853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public int roomA;

		[Token(Token = "0x4002854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[HideInInspector]
		public int roomB;

		[Token(Token = "0x4002855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public float ratio;

		[Token(Token = "0x6002CBF")]
		[Address(RVA = "0xE2DAC4", Offset = "0xE2DAC4", VA = "0xE2DAC4")]
		public IsaacDoor()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000812")]
	public class IsaacRoomLayout
	{
		[Token(Token = "0x4002856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public IsaacRoomTile[,] Tiles;

		[Token(Token = "0x6002CC0")]
		[Address(RVA = "0xE2DD50", Offset = "0xE2DD50", VA = "0xE2DD50")]
		public void InitializeTiles(int width, int height, IsaacRoomTileType tileType)
		{
		}

		[Token(Token = "0x6002CC1")]
		[Address(RVA = "0xE2DCE8", Offset = "0xE2DCE8", VA = "0xE2DCE8")]
		public IsaacRoomLayout()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000813")]
	public class IsaacRoomTile
	{
		[Token(Token = "0x4002857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IsaacRoomTileType tileType;

		[Token(Token = "0x6002CC2")]
		[Address(RVA = "0xE2E1E8", Offset = "0xE2E1E8", VA = "0xE2E1E8")]
		public IsaacRoomTile()
		{
		}
	}
	[Token(Token = "0x2000814")]
	public enum IsaacRoomTileType
	{
		[Token(Token = "0x4002859")]
		Floor,
		[Token(Token = "0x400285A")]
		Door,
		[Token(Token = "0x400285B")]
		Empty
	}
	[Token(Token = "0x2000815")]
	public class IsaacDungeonModel : DungeonModel
	{
		[Token(Token = "0x400285C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public IsaacDungeonConfig config;

		[Token(Token = "0x400285D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public IsaacRoom[] rooms;

		[Token(Token = "0x400285E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public IsaacDoor[] doors;

		[Token(Token = "0x6002CC3")]
		[Address(RVA = "0xE2E1F0", Offset = "0xE2E1F0", VA = "0xE2E1F0")]
		public IsaacDungeonModel()
		{
		}
	}
	[Token(Token = "0x2000816")]
	public abstract class IsaacRoomLayoutBuilder : MonoBehaviour
	{
		[Token(Token = "0x6002CC4")]
		public abstract IsaacRoomLayout GenerateLayout(IsaacRoom room, System.Random random, int roomWidth, int roomHeight);

		[Token(Token = "0x6002CC5")]
		[Address(RVA = "0xE2E1F8", Offset = "0xE2E1F8", VA = "0xE2E1F8")]
		protected IsaacRoomLayoutBuilder()
		{
		}
	}
	[Token(Token = "0x2000817")]
	public class StylizedIsaacRoomLayoutBuilder : IsaacRoomLayoutBuilder
	{
		[Token(Token = "0x400285F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int minBrushSize;

		[Token(Token = "0x4002860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maxBrushSize;

		[Token(Token = "0x6002CC6")]
		[Address(RVA = "0xE2E200", Offset = "0xE2E200", VA = "0xE2E200", Slot = "4")]
		public override IsaacRoomLayout GenerateLayout(IsaacRoom room, System.Random random, int roomWidth, int roomHeight)
		{
			return null;
		}

		[Token(Token = "0x6002CC7")]
		[Address(RVA = "0xE2E400", Offset = "0xE2E400", VA = "0xE2E400")]
		private void ConnectDoors(IsaacRoomLayout layout, IntVector doorA, IntVector doorB, int brushSize)
		{
		}

		[Token(Token = "0x6002CC8")]
		[Address(RVA = "0xE2E558", Offset = "0xE2E558", VA = "0xE2E558")]
		private void PaintTile(IsaacRoomLayout layout, int x, int z, int brushSize, IsaacRoomTileType tileType)
		{
		}

		[Token(Token = "0x6002CC9")]
		[Address(RVA = "0xE2E6DC", Offset = "0xE2E6DC", VA = "0xE2E6DC")]
		private void SetTile(IsaacRoomLayout layout, int x, int z, int width, int height, IsaacRoomTileType tileType)
		{
		}

		[Token(Token = "0x6002CCA")]
		[Address(RVA = "0xE2E74C", Offset = "0xE2E74C", VA = "0xE2E74C")]
		public StylizedIsaacRoomLayoutBuilder()
		{
		}
	}
	[Token(Token = "0x2000818")]
	public class IsaacBuilderUtils
	{
		[Token(Token = "0x6002CCB")]
		[Address(RVA = "0xE2DB78", Offset = "0xE2DB78", VA = "0xE2DB78")]
		public static IsaacRoomTile GetTileAt(int x, int z, IsaacRoomLayout layout)
		{
			return null;
		}

		[Token(Token = "0x6002CCC")]
		[Address(RVA = "0xE2DE78", Offset = "0xE2DE78", VA = "0xE2DE78")]
		public static bool ContainsDoorAt(int x, int z, IsaacRoom room)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CCD")]
		[Address(RVA = "0xE2E760", Offset = "0xE2E760", VA = "0xE2E760")]
		public static IsaacRoom GetRoom(IsaacDungeonModel model, int roomId)
		{
			return null;
		}

		[Token(Token = "0x6002CCE")]
		[Address(RVA = "0xE2E7B4", Offset = "0xE2E7B4", VA = "0xE2E7B4")]
		public IsaacBuilderUtils()
		{
		}
	}
}
namespace DungeonArchitect.Builders.Infinity.Caves
{
	[Token(Token = "0x2000819")]
	public class InfinityCaveChunkConstants
	{
		[Token(Token = "0x4002861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string GroundBlock;

		[Token(Token = "0x4002862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string WallBlock;

		[Token(Token = "0x4002863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string RockBlock;

		[Token(Token = "0x6002CCF")]
		[Address(RVA = "0xE2E7BC", Offset = "0xE2E7BC", VA = "0xE2E7BC")]
		public InfinityCaveChunkConstants()
		{
		}
	}
	[Token(Token = "0x200081A")]
	public class InfinityCaveChunkBuilder : DungeonBuilder
	{
		[Token(Token = "0x4002864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private InfinityCaveChunkConfig chunkConfig;

		[Token(Token = "0x4002865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private InfinityCaveChunkModel chunkModel;

		[Token(Token = "0x6002CD1")]
		[Address(RVA = "0xE2E86C", Offset = "0xE2E86C", VA = "0xE2E86C", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6002CD2")]
		[Address(RVA = "0xE2EF68", Offset = "0xE2EF68", VA = "0xE2EF68", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6002CD3")]
		[Address(RVA = "0xE2E974", Offset = "0xE2E974", VA = "0xE2E974")]
		private void GenerateLevelLayout()
		{
		}

		[Token(Token = "0x6002CD4")]
		[Address(RVA = "0xE2F580", Offset = "0xE2F580", VA = "0xE2F580")]
		private bool[,] ApplyAutomata(bool[,] world)
		{
			return null;
		}

		[Token(Token = "0x6002CD5")]
		[Address(RVA = "0xE2EF90", Offset = "0xE2EF90", VA = "0xE2EF90")]
		private void EmitLevelMarkers()
		{
		}

		[Token(Token = "0x6002CD6")]
		[Address(RVA = "0xE2F718", Offset = "0xE2F718", VA = "0xE2F718")]
		public InfinityCaveChunkBuilder()
		{
		}
	}
	[Token(Token = "0x200081B")]
	public class InfinityCaveChunkConfig : InfinityDungeonConfig
	{
		[Token(Token = "0x4002866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEngine.Vector2 gridSize;

		[Token(Token = "0x4002867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int iterations;

		[Token(Token = "0x4002868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int neighborRocks;

		[Token(Token = "0x6002CD7")]
		[Address(RVA = "0xE2F720", Offset = "0xE2F720", VA = "0xE2F720", Slot = "5")]
		public override UnityEngine.Vector3 GetLogicalCoord(UnityEngine.Vector3 p)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002CD8")]
		[Address(RVA = "0xE2F7B4", Offset = "0xE2F7B4", VA = "0xE2F7B4", Slot = "6")]
		public override bool BuildAlongX()
		{
			return default(bool);
		}

		[Token(Token = "0x6002CD9")]
		[Address(RVA = "0xE2F7BC", Offset = "0xE2F7BC", VA = "0xE2F7BC", Slot = "7")]
		public override bool BuildAlongY()
		{
			return default(bool);
		}

		[Token(Token = "0x6002CDA")]
		[Address(RVA = "0xE2F7C4", Offset = "0xE2F7C4", VA = "0xE2F7C4", Slot = "8")]
		public override bool BuildAlongZ()
		{
			return default(bool);
		}

		[Token(Token = "0x6002CDB")]
		[Address(RVA = "0xE2F7CC", Offset = "0xE2F7CC", VA = "0xE2F7CC")]
		public InfinityCaveChunkConfig()
		{
		}
	}
	[Token(Token = "0x200081C")]
	public enum MazeTileState
	{
		[Token(Token = "0x400286A")]
		Empty,
		[Token(Token = "0x400286B")]
		Rock,
		[Token(Token = "0x400286C")]
		Wall
	}
	[Token(Token = "0x200081D")]
	public class InfinityCaveChunkModel : DungeonModel
	{
		[Token(Token = "0x400286D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public InfinityCaveChunkConfig Config;

		[Token(Token = "0x400286E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public MazeTileState[,] tileStates;

		[Token(Token = "0x6002CDC")]
		[Address(RVA = "0xE2F7E0", Offset = "0xE2F7E0", VA = "0xE2F7E0")]
		public InfinityCaveChunkModel()
		{
		}
	}
}
namespace DungeonArchitect.Builders.GridFlow
{
	[Token(Token = "0x200081E")]
	public class GridFlowDungeonBuilder : DungeonBuilder
	{
		[Token(Token = "0x400286F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GridFlowDungeonConfig gridFlowConfig;

		[Token(Token = "0x4002870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GridFlowDungeonModel gridFlowModel;

		[Token(Token = "0x4002871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GridFlowExecNodeStates execNodeStates;

		[Token(Token = "0x170006CB")]
		public GridFlowExecNodeStates ExecNodeStates
		{
			[Token(Token = "0x6002CDD")]
			[Address(RVA = "0xE2F7E8", Offset = "0xE2F7E8", VA = "0xE2F7E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002CDE")]
		[Address(RVA = "0xE2F7F0", Offset = "0xE2F7F0", VA = "0xE2F7F0", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6002CDF")]
		[Address(RVA = "0xE2FC48", Offset = "0xE2FC48", VA = "0xE2FC48", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6002CE0")]
		[Address(RVA = "0xE2F9FC", Offset = "0xE2F9FC", VA = "0xE2F9FC")]
		private void GenerateLevelLayout()
		{
		}

		[Token(Token = "0x6002CE1")]
		[Address(RVA = "0xE31C44", Offset = "0xE31C44", VA = "0xE31C44")]
		private bool IsCellOfType(GridFlowTilemap tilemap, int x, int y, GridFlowTilemapCellType[] types)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CE2")]
		[Address(RVA = "0xE31CD8", Offset = "0xE31CD8", VA = "0xE31CD8")]
		private Quaternion GetBaseTransform(GridFlowTilemap tilemap, int x, int y)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002CE3")]
		[Address(RVA = "0xE31ECC", Offset = "0xE31ECC", VA = "0xE31ECC")]
		private string GetEdgeMarkerName(GridFlowTilemapEdgeType edgeType)
		{
			return null;
		}

		[Token(Token = "0x6002CE4")]
		[Address(RVA = "0xE31F98", Offset = "0xE31F98", VA = "0xE31F98")]
		private bool CreateLockItemMetadata(GridFlowItem item, ref string doorMarker, out GridFlowItemMetadata lockItemData)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CE5")]
		[Address(RVA = "0xE2FC70", Offset = "0xE2FC70", VA = "0xE2FC70")]
		private void EmitLevelMarkers()
		{
		}

		[Token(Token = "0x6002CE6")]
		[Address(RVA = "0xE32134", Offset = "0xE32134", VA = "0xE32134", Slot = "9")]
		public override void DebugDraw()
		{
		}

		[Token(Token = "0x6002CE7")]
		[Address(RVA = "0xE32138", Offset = "0xE32138", VA = "0xE32138")]
		public GridFlowDungeonBuilder()
		{
		}
	}
	[Token(Token = "0x200081F")]
	public class GridFlowDungeonConstants
	{
		[Token(Token = "0x4002872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string MarkerGround;

		[Token(Token = "0x4002873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string MarkerWall;

		[Token(Token = "0x4002874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string MarkerWallSeparator;

		[Token(Token = "0x4002875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string MarkerFence;

		[Token(Token = "0x4002876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string MarkerFenceSeparator;

		[Token(Token = "0x4002877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string MarkerDoor;

		[Token(Token = "0x4002878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly string MarkerDoorOneWay;

		[Token(Token = "0x6002CE8")]
		[Address(RVA = "0xE32140", Offset = "0xE32140", VA = "0xE32140")]
		public GridFlowDungeonConstants()
		{
		}
	}
	[Token(Token = "0x2000820")]
	public class GridFlowDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x4002879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DungeonGridFlowAsset flowAsset;

		[Token(Token = "0x400287A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector3 gridSize;

		[Token(Token = "0x6002CEA")]
		[Address(RVA = "0xE32270", Offset = "0xE32270", VA = "0xE32270", Slot = "4")]
		public override bool HasValidConfig(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CEB")]
		[Address(RVA = "0xE3230C", Offset = "0xE3230C", VA = "0xE3230C")]
		public GridFlowDungeonConfig()
		{
		}
	}
	[Token(Token = "0x2000821")]
	public class GridFlowDungeonModel : DungeonModel
	{
		[Token(Token = "0x400287B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public GridFlowAbstractGraph abstractGraph;

		[Token(Token = "0x400287C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public GridFlowTilemap tilemap;

		[Token(Token = "0x6002CEC")]
		[Address(RVA = "0xE32324", Offset = "0xE32324", VA = "0xE32324")]
		public GridFlowDungeonModel()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000822")]
	public class DungeonGridFlowAsset : ScriptableObject
	{
		[Token(Token = "0x400287D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		public GridFlowExecGraph execGraph;

		[Token(Token = "0x6002CED")]
		[Address(RVA = "0xE3232C", Offset = "0xE3232C", VA = "0xE3232C")]
		public DungeonGridFlowAsset()
		{
		}
	}
	[Token(Token = "0x2000823")]
	public class GridFlowExecutionContext
	{
		[Token(Token = "0x170006CC")]
		public System.Random Random
		{
			[Token(Token = "0x6002CEE")]
			[Address(RVA = "0xE32334", Offset = "0xE32334", VA = "0xE32334")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CEF")]
			[Address(RVA = "0xE3233C", Offset = "0xE3233C", VA = "0xE3233C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170006CD")]
		public GridFlowExecGraph ExecGraph
		{
			[Token(Token = "0x6002CF0")]
			[Address(RVA = "0xE32344", Offset = "0xE32344", VA = "0xE32344")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CF1")]
			[Address(RVA = "0xE3234C", Offset = "0xE3234C", VA = "0xE3234C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170006CE")]
		public GridFlowExecNodeStates NodeStates
		{
			[Token(Token = "0x6002CF2")]
			[Address(RVA = "0xE32354", Offset = "0xE32354", VA = "0xE32354")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CF3")]
			[Address(RVA = "0xE3235C", Offset = "0xE3235C", VA = "0xE3235C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170006CF")]
		public HashSet<GridFlowExecRuleGraphNode> Visited
		{
			[Token(Token = "0x6002CF4")]
			[Address(RVA = "0xE32364", Offset = "0xE32364", VA = "0xE32364")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002CF5")]
			[Address(RVA = "0xE3236C", Offset = "0xE3236C", VA = "0xE3236C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002CF6")]
		[Address(RVA = "0xE32374", Offset = "0xE32374", VA = "0xE32374")]
		public GridFlowExecutionContext()
		{
		}
	}
	[Token(Token = "0x2000824")]
	public class GridFlowExecutor
	{
		[Token(Token = "0x6002CF7")]
		[Address(RVA = "0xE31A78", Offset = "0xE31A78", VA = "0xE31A78")]
		public bool Execute(GridFlowExecGraph execGraph, System.Random random, int numTries, out GridFlowExecNodeStates nodeStates)
		{
			return default(bool);
		}

		[Token(Token = "0x6002CF8")]
		[Address(RVA = "0xE323F4", Offset = "0xE323F4", VA = "0xE323F4")]
		private GridFlowExecNodeHandlerResultType ExecuteGraph(GridFlowExecutionContext context)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6002CF9")]
		[Address(RVA = "0xE3263C", Offset = "0xE3263C", VA = "0xE3263C")]
		private GridFlowExecNodeHandlerResultType ExecuteNode(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6002CFA")]
		[Address(RVA = "0xE31A70", Offset = "0xE31A70", VA = "0xE31A70")]
		public GridFlowExecutor()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000825")]
	public enum GridFlowGraphItemType
	{
		[Token(Token = "0x4002883")]
		Key,
		[Token(Token = "0x4002884")]
		Lock,
		[Token(Token = "0x4002885")]
		Enemy,
		[Token(Token = "0x4002886")]
		Bonus,
		[Token(Token = "0x4002887")]
		Entrace,
		[Token(Token = "0x4002888")]
		Exit,
		[Token(Token = "0x4002889")]
		Custom
	}
	[Serializable]
	[Token(Token = "0x2000826")]
	public class GridFlowItem
	{
		[Token(Token = "0x400288A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid itemId;

		[Token(Token = "0x400288B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GridFlowGraphItemType type;

		[Token(Token = "0x400288C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string markerName;

		[Token(Token = "0x400288D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<Guid> referencedItemIds;

		[Token(Token = "0x400288E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool editorSelected;

		[Token(Token = "0x400288F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GridFlowGraphItemCustomInfo customInfo;

		[Token(Token = "0x4002890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GridFlowItemPlacementSettings placementSettings;

		[Token(Token = "0x6002CFB")]
		[Address(RVA = "0xE327E8", Offset = "0xE327E8", VA = "0xE327E8")]
		public GridFlowItem Clone()
		{
			return null;
		}

		[Token(Token = "0x6002CFC")]
		[Address(RVA = "0xE328D0", Offset = "0xE328D0", VA = "0xE328D0")]
		public GridFlowItem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000827")]
	public struct GridFlowGraphItemCustomInfo
	{
		[Token(Token = "0x4002891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string itemType;

		[Token(Token = "0x4002892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string text;

		[Token(Token = "0x4002893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Color textColor;

		[Token(Token = "0x4002894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color backgroundColor;

		[Token(Token = "0x4002895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly GridFlowGraphItemCustomInfo Default;

		[Token(Token = "0x6002CFD")]
		[Address(RVA = "0xE32AC0", Offset = "0xE32AC0", VA = "0xE32AC0")]
		public GridFlowGraphItemCustomInfo(string itemType, string text, Color textColor, Color backgroundColor)
		{
		}
	}
	[Token(Token = "0x2000828")]
	public class GridFlowItemMetadataComponent : MonoBehaviour
	{
		[Token(Token = "0x4002896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GridFlowGraphItemType itemType;

		[Token(Token = "0x4002897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string itemId;

		[Token(Token = "0x4002898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] referencedItemIds;

		[Token(Token = "0x6002CFF")]
		[Address(RVA = "0xE32B68", Offset = "0xE32B68", VA = "0xE32B68")]
		public GridFlowItemMetadataComponent()
		{
		}
	}
	[Token(Token = "0x2000829")]
	[SerializeField]
	public class GridFlowItemMetadata
	{
		[Token(Token = "0x4002899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GridFlowGraphItemType itemType;

		[Token(Token = "0x400289A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Guid itemId;

		[Token(Token = "0x400289B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Guid[] referencedItems;

		[Token(Token = "0x6002D00")]
		[Address(RVA = "0xE320B0", Offset = "0xE320B0", VA = "0xE320B0")]
		public GridFlowItemMetadata()
		{
		}
	}
	[Token(Token = "0x200082A")]
	public class GridFlowItemMetadataHandler : DungeonItemSpawnListener
	{
		[Token(Token = "0x6002D01")]
		private T FindOrAddComponent<T>(GameObject gameObject) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6002D02")]
		[Address(RVA = "0xE32BC0", Offset = "0xE32BC0", VA = "0xE32BC0", Slot = "4")]
		public override void SetMetadata(GameObject dungeonItem, DungeonNodeSpawnData spawnData)
		{
		}

		[Token(Token = "0x6002D03")]
		[Address(RVA = "0xE32DC8", Offset = "0xE32DC8", VA = "0xE32DC8")]
		public GridFlowItemMetadataHandler()
		{
		}
	}
	[Token(Token = "0x200082B")]
	public class GridFlowItemPlacementStrategyContext
	{
		[Token(Token = "0x400289C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GridFlowTilemap tilemap;

		[Token(Token = "0x400289D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GridFlowTilemapDistanceField distanceField;

		[Token(Token = "0x400289E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public System.Random random;

		[Token(Token = "0x6002D04")]
		[Address(RVA = "0xE32DD0", Offset = "0xE32DD0", VA = "0xE32DD0")]
		public GridFlowItemPlacementStrategyContext()
		{
		}
	}
	[Token(Token = "0x200082C")]
	public interface IGridFlowItemPlacementStrategy
	{
		[Token(Token = "0x6002D05")]
		bool PlaceItems(GridFlowItem item, GridFlowTilemapCell[] freeCells, GridFlowItemPlacementSettings settings, GridFlowItemPlacementStrategyContext context, ref int outFreeTileIndex, ref string errorMessage);
	}
	[Serializable]
	[Token(Token = "0x200082D")]
	public enum GridFlowItemPlacementMethod
	{
		[Token(Token = "0x40028A0")]
		RandomTile,
		[Token(Token = "0x40028A1")]
		NearEdges,
		[Token(Token = "0x40028A2")]
		Script
	}
	[Serializable]
	[Token(Token = "0x200082E")]
	public class GridFlowItemPlacementSettings
	{
		[Token(Token = "0x40028A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GridFlowItemPlacementMethod placementMethod;

		[Token(Token = "0x40028A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool avoidPlacingNextToDoors;

		[Token(Token = "0x40028A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string placementScriptClass;

		[Token(Token = "0x40028A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool fallbackToRandomPlacement;

		[Token(Token = "0x6002D06")]
		[Address(RVA = "0xE329E8", Offset = "0xE329E8", VA = "0xE329E8")]
		public GridFlowItemPlacementSettings Clone()
		{
			return null;
		}

		[Token(Token = "0x6002D07")]
		[Address(RVA = "0xE32A64", Offset = "0xE32A64", VA = "0xE32A64")]
		public GridFlowItemPlacementSettings()
		{
		}
	}
	[Token(Token = "0x200082F")]
	public class GridFlowItemPlacementStrategyFactory
	{
		[Token(Token = "0x6002D08")]
		[Address(RVA = "0xE32DD8", Offset = "0xE32DD8", VA = "0xE32DD8")]
		public static IGridFlowItemPlacementStrategy Create(GridFlowItemPlacementMethod method)
		{
			return null;
		}

		[Token(Token = "0x6002D09")]
		[Address(RVA = "0xE32E94", Offset = "0xE32E94", VA = "0xE32E94")]
		public GridFlowItemPlacementStrategyFactory()
		{
		}
	}
	[Token(Token = "0x2000830")]
	public class GridFlowItemPlacementStrategyUtils
	{
		[Token(Token = "0x6002D0A")]
		[Address(RVA = "0xE32E9C", Offset = "0xE32E9C", VA = "0xE32E9C")]
		public static bool Validate(GridFlowItemPlacementSettings settings, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D0B")]
		[Address(RVA = "0xE32F18", Offset = "0xE32F18", VA = "0xE32F18")]
		public GridFlowItemPlacementStrategyUtils()
		{
		}
	}
	[Token(Token = "0x2000831")]
	public class GridFlowItemPlacementStrategy_NearEdge : IGridFlowItemPlacementStrategy
	{
		[Token(Token = "0x6002D0C")]
		[Address(RVA = "0xE32F20", Offset = "0xE32F20", VA = "0xE32F20", Slot = "4")]
		public bool PlaceItems(GridFlowItem item, GridFlowTilemapCell[] freeCells, GridFlowItemPlacementSettings settings, GridFlowItemPlacementStrategyContext context, ref int outFreeTileIndex, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D0D")]
		[Address(RVA = "0xE32E7C", Offset = "0xE32E7C", VA = "0xE32E7C")]
		public GridFlowItemPlacementStrategy_NearEdge()
		{
		}
	}
	[Token(Token = "0x2000832")]
	public class GridFlowItemPlacementStrategy_Random : IGridFlowItemPlacementStrategy
	{
		[Token(Token = "0x6002D0E")]
		[Address(RVA = "0xE331D8", Offset = "0xE331D8", VA = "0xE331D8", Slot = "4")]
		public bool PlaceItems(GridFlowItem item, GridFlowTilemapCell[] freeCells, GridFlowItemPlacementSettings settings, GridFlowItemPlacementStrategyContext context, ref int outFreeTileIndex, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D0F")]
		[Address(RVA = "0xE32E8C", Offset = "0xE32E8C", VA = "0xE32E8C")]
		public GridFlowItemPlacementStrategy_Random()
		{
		}
	}
	[Token(Token = "0x2000833")]
	public class GridFlowItemPlacementStrategy_Script : IGridFlowItemPlacementStrategy
	{
		[Token(Token = "0x6002D10")]
		[Address(RVA = "0xE333F8", Offset = "0xE333F8", VA = "0xE333F8", Slot = "4")]
		public bool PlaceItems(GridFlowItem item, GridFlowTilemapCell[] freeCells, GridFlowItemPlacementSettings settings, GridFlowItemPlacementStrategyContext context, ref int outFreeTileIndex, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D11")]
		[Address(RVA = "0xE32E84", Offset = "0xE32E84", VA = "0xE32E84")]
		public GridFlowItemPlacementStrategy_Script()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000834")]
	public enum GridFlowMinimapInitMode
	{
		[Token(Token = "0x40028A8")]
		OnDungeonRebuild,
		[Token(Token = "0x40028A9")]
		OnPlay,
		[Token(Token = "0x40028AA")]
		Manual
	}
	[Serializable]
	[Token(Token = "0x2000835")]
	public struct GridFlowMinimapIcons
	{
		[Token(Token = "0x40028AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture2D iconOneWayDoor;
	}
	[Token(Token = "0x2000836")]
	public class GridFlowMinimap : DungeonMiniMap
	{
		[Token(Token = "0x2000837")]
		private struct FogOfWarItem
		{
			[Token(Token = "0x40028B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UnityEngine.Vector2 position;

			[Token(Token = "0x40028B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float radius;

			[Token(Token = "0x40028B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public float falloffStart;
		}

		[Token(Token = "0x40028AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader tileShader;

		[Token(Token = "0x40028AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GridFlowMinimapInitMode initMode;

		[Token(Token = "0x40028AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GridFlowMinimapIcons icons;

		[Token(Token = "0x40028AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool seeThroughWalls;

		[Token(Token = "0x40028B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GridFlowTilemapRenderResources resources;

		[Token(Token = "0x40028B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GridFlowDungeonModel model;

		[Token(Token = "0x40028B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GridFlowDungeonConfig config;

		[Token(Token = "0x40028B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int tileSize;

		[Token(Token = "0x40028B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private List<GridFlowMinimapTrackedObject> trackedObjects;

		[Token(Token = "0x40028B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Color[] fogMask;

		[Token(Token = "0x170006D0")]
		protected override bool SupportsFogOfWar
		{
			[Token(Token = "0x6002D12")]
			[Address(RVA = "0xE335B0", Offset = "0xE335B0", VA = "0xE335B0", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002D13")]
		[Address(RVA = "0xE335B8", Offset = "0xE335B8", VA = "0xE335B8")]
		private void Reset()
		{
		}

		[Token(Token = "0x6002D14")]
		[Address(RVA = "0xE33638", Offset = "0xE33638", VA = "0xE33638")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002D15")]
		[Address(RVA = "0xE3363C", Offset = "0xE3363C", VA = "0xE3363C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002D16")]
		[Address(RVA = "0xE33654", Offset = "0xE33654", VA = "0xE33654")]
		public void AddTrackedObject(GridFlowMinimapTrackedObject trackedObject)
		{
		}

		[Token(Token = "0x6002D17")]
		[Address(RVA = "0xE336FC", Offset = "0xE336FC", VA = "0xE336FC", Slot = "5")]
		protected override void CreateTextures(IntVector2 desiredSize, out Texture staticImage, out Texture fogOfWar, out Texture overlayImage, out IntVector2 targetTextureSize)
		{
		}

		[Token(Token = "0x6002D18")]
		[Address(RVA = "0xE33AE4", Offset = "0xE33AE4", VA = "0xE33AE4", Slot = "6")]
		protected override void UpdateStaticTexture(Texture texture)
		{
		}

		[Token(Token = "0x6002D19")]
		[Address(RVA = "0xE33CB8", Offset = "0xE33CB8", VA = "0xE33CB8")]
		private IntVector2[] FogOfWarFilterVisibility(IntVector2[] tiles, IntVector2 player)
		{
			return null;
		}

		[Token(Token = "0x6002D1A")]
		[Address(RVA = "0xE3404C", Offset = "0xE3404C", VA = "0xE3404C", Slot = "7")]
		protected override void UpdateFogOfWarTexture(Texture texture)
		{
		}

		[Token(Token = "0x6002D1B")]
		[Address(RVA = "0xE34A08", Offset = "0xE34A08", VA = "0xE34A08", Slot = "8")]
		protected override void UpdateOverlayTexture(Texture texture)
		{
		}

		[Token(Token = "0x6002D1C")]
		[Address(RVA = "0xE351C8", Offset = "0xE351C8", VA = "0xE351C8")]
		private UnityEngine.Vector2 WorldToUVCoord(UnityEngine.Vector3 position, int tilemapWidth, int tilemapHeight, int textureWidth, int textureHeight)
		{
			return default(UnityEngine.Vector2);
		}

		[Token(Token = "0x6002D1D")]
		[Address(RVA = "0xE35260", Offset = "0xE35260", VA = "0xE35260")]
		private void EmitVertex(float cx, float cy, float x, float y, float u, float v, Color color, Quaternion rotation)
		{
		}

		[Token(Token = "0x6002D1E")]
		[Address(RVA = "0xE35304", Offset = "0xE35304", VA = "0xE35304")]
		public GridFlowMinimap()
		{
		}
	}
	[Token(Token = "0x2000839")]
	public class GridFlowMinimapTrackedObject : MonoBehaviour
	{
		[Token(Token = "0x40028BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture2D icon;

		[Token(Token = "0x40028BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float iconScale;

		[Token(Token = "0x40028BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool rotateIcon;

		[Token(Token = "0x40028BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color tint;

		[Token(Token = "0x40028C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool exploresFogOfWar;

		[Token(Token = "0x40028C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float fogOfWarNumTileRadius;

		[Token(Token = "0x40028C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float fogOfWarLightFalloffStart;

		[Token(Token = "0x6002D23")]
		[Address(RVA = "0xE35460", Offset = "0xE35460", VA = "0xE35460")]
		private void Start()
		{
		}

		[Token(Token = "0x6002D24")]
		[Address(RVA = "0xE354FC", Offset = "0xE354FC", VA = "0xE354FC")]
		public GridFlowMinimapTrackedObject()
		{
		}
	}
	[Token(Token = "0x200083A")]
	public class GridFlowDoorKeyComponent : MonoBehaviour
	{
		[Token(Token = "0x40028C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string keyId;

		[Token(Token = "0x40028C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] validLockIds;

		[Token(Token = "0x40028C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GridFlowDoorLockComponent[] lockRefs;

		[Token(Token = "0x6002D25")]
		[Address(RVA = "0xE35520", Offset = "0xE35520", VA = "0xE35520")]
		public GridFlowDoorKeyComponent()
		{
		}
	}
	[Token(Token = "0x200083B")]
	public class GridFlowDoorLockComponent : MonoBehaviour
	{
		[Token(Token = "0x40028C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string lockId;

		[Token(Token = "0x40028C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] validKeyIds;

		[Token(Token = "0x40028C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GridFlowDoorKeyComponent[] validKeyRefs;

		[Token(Token = "0x6002D26")]
		[Address(RVA = "0xE35578", Offset = "0xE35578", VA = "0xE35578")]
		public GridFlowDoorLockComponent()
		{
		}
	}
}
namespace DungeonArchitect.Builders.GridFlow.Tilemap
{
	[Serializable]
	[Token(Token = "0x200083C")]
	public enum GridFlowTilemapCellType
	{
		[Token(Token = "0x40028CA")]
		Empty,
		[Token(Token = "0x40028CB")]
		Floor,
		[Token(Token = "0x40028CC")]
		Wall,
		[Token(Token = "0x40028CD")]
		Door,
		[Token(Token = "0x40028CE")]
		Custom
	}
	[Serializable]
	[Token(Token = "0x200083D")]
	public enum GridFlowTilemapEdgeType
	{
		[Token(Token = "0x40028D0")]
		Empty,
		[Token(Token = "0x40028D1")]
		Wall,
		[Token(Token = "0x40028D2")]
		Fence,
		[Token(Token = "0x40028D3")]
		Door
	}
	[Serializable]
	[Token(Token = "0x200083E")]
	public class GridFlowTilemapCustomCellInfo
	{
		[Token(Token = "0x40028D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40028D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color defaultColor;

		[Token(Token = "0x6002D27")]
		[Address(RVA = "0xE355FC", Offset = "0xE355FC", VA = "0xE355FC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002D28")]
		[Address(RVA = "0xE3562C", Offset = "0xE3562C", VA = "0xE3562C")]
		public GridFlowTilemapCustomCellInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200083F")]
	public enum GridFlowTilemapCellCategory
	{
		[Token(Token = "0x40028D7")]
		Layout,
		[Token(Token = "0x40028D8")]
		Biome,
		[Token(Token = "0x40028D9")]
		Elevation
	}
	[Serializable]
	[Token(Token = "0x2000840")]
	public class GridFlowTilemapCellOverlay
	{
		[Token(Token = "0x40028DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string markerName;

		[Token(Token = "0x40028DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color color;

		[Token(Token = "0x40028DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool tileBlockingOverlay;

		[Token(Token = "0x40028DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GridFlowTilemapCellOverlayMergeConfig mergeConfig;

		[Token(Token = "0x170006D1")]
		public float noiseValue
		{
			[Token(Token = "0x6002D29")]
			[Address(RVA = "0xE3563C", Offset = "0xE3563C", VA = "0xE3563C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002D2A")]
			[Address(RVA = "0xE35644", Offset = "0xE35644", VA = "0xE35644")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002D2B")]
		[Address(RVA = "0xE3564C", Offset = "0xE3564C", VA = "0xE3564C")]
		public GridFlowTilemapCellOverlay Clone()
		{
			return null;
		}

		[Token(Token = "0x6002D2C")]
		[Address(RVA = "0xE356E4", Offset = "0xE356E4", VA = "0xE356E4")]
		public GridFlowTilemapCellOverlay()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000841")]
	public enum GridFlowTilemapCellOverlayMergeWallOverlayRule
	{
		[Token(Token = "0x40028E0")]
		KeepWallAndOverlay,
		[Token(Token = "0x40028E1")]
		KeepWallRemoveOverlay,
		[Token(Token = "0x40028E2")]
		KeepOverlayRemoveWall
	}
	[Serializable]
	[Token(Token = "0x2000842")]
	public class GridFlowTilemapCellOverlayMergeConfig
	{
		[Token(Token = "0x40028E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float minHeight;

		[Token(Token = "0x40028E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maxHeight;

		[Token(Token = "0x40028E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GridFlowTilemapCellOverlayMergeWallOverlayRule wallOverlayRule;

		[Token(Token = "0x40028E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float markerHeightOffsetForLayoutTiles;

		[Token(Token = "0x40028E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float markerHeightOffsetForNonLayoutTiles;

		[Token(Token = "0x40028E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool removeElevationMarker;

		[Token(Token = "0x6002D2D")]
		[Address(RVA = "0xE356F4", Offset = "0xE356F4", VA = "0xE356F4")]
		public GridFlowTilemapCellOverlayMergeConfig Clone()
		{
			return null;
		}

		[Token(Token = "0x6002D2E")]
		[Address(RVA = "0xE3576C", Offset = "0xE3576C", VA = "0xE3576C")]
		public GridFlowTilemapCellOverlayMergeConfig()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000843")]
	public class GridFlowTilemapEdge
	{
		[Token(Token = "0x40028E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GridFlowTilemapEdgeType EdgeType;

		[Token(Token = "0x40028EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Guid Item;

		[Token(Token = "0x40028EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public IntVector2 EdgeCoord;

		[Token(Token = "0x40028EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool HorizontalEdge;

		[Token(Token = "0x40028ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public object Userdata;

		[Token(Token = "0x6002D2F")]
		[Address(RVA = "0xE35774", Offset = "0xE35774", VA = "0xE35774")]
		public GridFlowTilemapEdge Clone()
		{
			return null;
		}

		[Token(Token = "0x6002D30")]
		[Address(RVA = "0xE3589C", Offset = "0xE3589C", VA = "0xE3589C")]
		public GridFlowTilemapEdge()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000844")]
	public class GridFlowTilemapCell
	{
		[Token(Token = "0x40028EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GridFlowTilemapCellType CellType;

		[Token(Token = "0x40028EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GridFlowTilemapCustomCellInfo CustomCellInfo;

		[Token(Token = "0x40028F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Guid Item;

		[Token(Token = "0x40028F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string[] Tags;

		[Token(Token = "0x40028F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GridFlowTilemapCellOverlay Overlay;

		[Token(Token = "0x40028F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IntVector2 NodeCoord;

		[Token(Token = "0x40028F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IntVector2 TileCoord;

		[Token(Token = "0x40028F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool UseCustomColor;

		[Token(Token = "0x40028F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Color CustomColor;

		[Token(Token = "0x40028F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool MainPath;

		[Token(Token = "0x40028F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		public bool LayoutCell;

		[Token(Token = "0x40028F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int DistanceFromMainPath;

		[Token(Token = "0x40028FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float Height;

		[Token(Token = "0x40028FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public object Userdata;

		[Token(Token = "0x6002D31")]
		[Address(RVA = "0xE358FC", Offset = "0xE358FC", VA = "0xE358FC")]
		public GridFlowTilemapCell Clone()
		{
			return null;
		}

		[Token(Token = "0x6002D32")]
		[Address(RVA = "0xE35B70", Offset = "0xE35B70", VA = "0xE35B70")]
		public void Clear()
		{
		}

		[Token(Token = "0x6002D33")]
		[Address(RVA = "0xE35ADC", Offset = "0xE35ADC", VA = "0xE35ADC")]
		public GridFlowTilemapCell()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000845")]
	public class GridFlowTilemapCellDoorInfo : ICloneable
	{
		[Token(Token = "0x40028FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool locked;

		[Token(Token = "0x40028FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool oneWay;

		[Token(Token = "0x40028FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public IntVector2 nodeA;

		[Token(Token = "0x40028FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public IntVector2 nodeB;

		[Token(Token = "0x6002D34")]
		[Address(RVA = "0xE35C04", Offset = "0xE35C04", VA = "0xE35C04", Slot = "4")]
		public object Clone()
		{
			return null;
		}

		[Token(Token = "0x6002D35")]
		[Address(RVA = "0xE35C84", Offset = "0xE35C84", VA = "0xE35C84")]
		public GridFlowTilemapCellDoorInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000846")]
	public class GridFlowTilemapCellWallInfo : ICloneable
	{
		[Token(Token = "0x4002900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<IntVector2> owningNodes;

		[Token(Token = "0x6002D36")]
		[Address(RVA = "0xE35C8C", Offset = "0xE35C8C", VA = "0xE35C8C", Slot = "4")]
		public object Clone()
		{
			return null;
		}

		[Token(Token = "0x6002D37")]
		[Address(RVA = "0xE35D34", Offset = "0xE35D34", VA = "0xE35D34")]
		public GridFlowTilemapCellWallInfo()
		{
		}
	}
	[Token(Token = "0x2000847")]
	public class GridFlowTilemap
	{
		[Token(Token = "0x4002901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Width;

		[Token(Token = "0x4002902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int Height;

		[Token(Token = "0x4002903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		[SerializeField]
		public GridFlowTilemapCellDatabase Cells;

		[Token(Token = "0x4002904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[SerializeField]
		public GridFlowTilemapEdgeDatabase Edges;

		[Token(Token = "0x6002D38")]
		[Address(RVA = "0xE35DB0", Offset = "0xE35DB0", VA = "0xE35DB0")]
		public GridFlowTilemap(int width, int height)
		{
		}

		[Token(Token = "0x6002D39")]
		[Address(RVA = "0xE36164", Offset = "0xE36164", VA = "0xE36164")]
		public GridFlowTilemap Clone()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000848")]
	public class GridFlowTilemapEdgeDatabase : IEnumerable<GridFlowTilemapEdge>, IEnumerable
	{
		[Token(Token = "0x4002905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private GridFlowTilemapEdge[] edgesHorizontal;

		[Token(Token = "0x4002906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GridFlowTilemapEdge[] edgesVertical;

		[Token(Token = "0x4002907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int width;

		[Token(Token = "0x4002908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private int height;

		[Token(Token = "0x6002D3A")]
		[Address(RVA = "0xE35F7C", Offset = "0xE35F7C", VA = "0xE35F7C")]
		public GridFlowTilemapEdgeDatabase(int tilemapWidth, int tilemapHeight)
		{
		}

		[Token(Token = "0x6002D3B")]
		[Address(RVA = "0xE363A0", Offset = "0xE363A0", VA = "0xE363A0")]
		public GridFlowTilemapEdge GetHorizontal(int x, int y)
		{
			return null;
		}

		[Token(Token = "0x6002D3C")]
		[Address(RVA = "0xE36474", Offset = "0xE36474", VA = "0xE36474")]
		public GridFlowTilemapEdge GetVertical(int x, int y)
		{
			return null;
		}

		[Token(Token = "0x6002D3D")]
		[Address(RVA = "0xE363FC", Offset = "0xE363FC", VA = "0xE363FC")]
		public void SetHorizontal(int x, int y, GridFlowTilemapEdge edge)
		{
		}

		[Token(Token = "0x6002D3E")]
		[Address(RVA = "0xE364D0", Offset = "0xE364D0", VA = "0xE364D0")]
		public void SetVertical(int x, int y, GridFlowTilemapEdge edge)
		{
		}

		[Token(Token = "0x6002D3F")]
		[Address(RVA = "0xE36548", Offset = "0xE36548", VA = "0xE36548")]
		private int Index(int x, int y)
		{
			return default(int);
		}

		[Token(Token = "0x6002D40")]
		[Address(RVA = "0xE36554", Offset = "0xE36554", VA = "0xE36554", Slot = "4")]
		private IEnumerator<GridFlowTilemapEdge> System.Collections.Generic.IEnumerable<DungeonArchitect.Builders.GridFlow.Tilemap.GridFlowTilemapEdge>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6002D41")]
		[Address(RVA = "0xE36600", Offset = "0xE36600", VA = "0xE36600", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000849")]
	public class GridFlowTilemapCellDatabase : IEnumerable<GridFlowTilemapCell>, IEnumerable
	{
		[Token(Token = "0x4002909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private GridFlowTilemapCell[] cells;

		[Token(Token = "0x400290A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int width;

		[Token(Token = "0x400290B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int height;

		[Token(Token = "0x170006D2")]
		public GridFlowTilemapCell this[int x, int y]
		{
			[Token(Token = "0x6002D43")]
			[Address(RVA = "0xE362F0", Offset = "0xE362F0", VA = "0xE362F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D44")]
			[Address(RVA = "0xE36328", Offset = "0xE36328", VA = "0xE36328")]
			set
			{
			}
		}

		[Token(Token = "0x6002D42")]
		[Address(RVA = "0xE35E6C", Offset = "0xE35E6C", VA = "0xE35E6C")]
		public GridFlowTilemapCellDatabase(int width, int height)
		{
		}

		[Token(Token = "0x6002D45")]
		[Address(RVA = "0xE36684", Offset = "0xE36684", VA = "0xE36684")]
		public GridFlowTilemapCell GetCell(int x, int y)
		{
			return null;
		}

		[Token(Token = "0x6002D46")]
		[Address(RVA = "0xE36678", Offset = "0xE36678", VA = "0xE36678")]
		private int Index(int x, int y)
		{
			return default(int);
		}

		[Token(Token = "0x6002D47")]
		[Address(RVA = "0xE366B0", Offset = "0xE366B0", VA = "0xE366B0", Slot = "4")]
		private IEnumerator<GridFlowTilemapCell> System.Collections.Generic.IEnumerable<DungeonArchitect.Builders.GridFlow.Tilemap.GridFlowTilemapCell>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6002D48")]
		[Address(RVA = "0xE36750", Offset = "0xE36750", VA = "0xE36750", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x200084A")]
	public class GridFlowTilemapCellDatabaseEnumerator : IEnumerator<GridFlowTilemapCell>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400290C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int position;

		[Token(Token = "0x400290D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GridFlowTilemapCell[] cells;

		[Token(Token = "0x400290E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GridFlowTilemapCell current;

		[Token(Token = "0x170006D3")]
		public GridFlowTilemapCell Current
		{
			[Token(Token = "0x6002D4D")]
			[Address(RVA = "0xE36828", Offset = "0xE36828", VA = "0xE36828", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006D4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002D4E")]
			[Address(RVA = "0xE36830", Offset = "0xE36830", VA = "0xE36830", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002D49")]
		[Address(RVA = "0xE36720", Offset = "0xE36720", VA = "0xE36720")]
		public GridFlowTilemapCellDatabaseEnumerator(GridFlowTilemapCell[] cells)
		{
		}

		[Token(Token = "0x6002D4A")]
		[Address(RVA = "0xE367C0", Offset = "0xE367C0", VA = "0xE367C0", Slot = "5")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002D4B")]
		[Address(RVA = "0xE367C8", Offset = "0xE367C8", VA = "0xE367C8", Slot = "6")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D4C")]
		[Address(RVA = "0xE36818", Offset = "0xE36818", VA = "0xE36818", Slot = "8")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x200084B")]
	public class GridFlowTilemapEdgeDatabaseEnumerator : IEnumerator<GridFlowTilemapEdge>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400290F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int position;

		[Token(Token = "0x4002910")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GridFlowTilemapEdge[] edgesH;

		[Token(Token = "0x4002911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GridFlowTilemapEdge[] edgesV;

		[Token(Token = "0x4002912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GridFlowTilemapEdge current;

		[Token(Token = "0x170006D5")]
		public GridFlowTilemapEdge Current
		{
			[Token(Token = "0x6002D53")]
			[Address(RVA = "0xE368CC", Offset = "0xE368CC", VA = "0xE368CC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006D6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002D54")]
			[Address(RVA = "0xE368D4", Offset = "0xE368D4", VA = "0xE368D4", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002D4F")]
		[Address(RVA = "0xE365CC", Offset = "0xE365CC", VA = "0xE365CC")]
		public GridFlowTilemapEdgeDatabaseEnumerator(GridFlowTilemapEdge[] edgesH, GridFlowTilemapEdge[] edgesV)
		{
		}

		[Token(Token = "0x6002D50")]
		[Address(RVA = "0xE36838", Offset = "0xE36838", VA = "0xE36838", Slot = "5")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002D51")]
		[Address(RVA = "0xE36844", Offset = "0xE36844", VA = "0xE36844", Slot = "6")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002D52")]
		[Address(RVA = "0xE368BC", Offset = "0xE368BC", VA = "0xE368BC", Slot = "8")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x200084C")]
	public class GridFlowTilemapDistanceFieldCell
	{
		[Token(Token = "0x4002913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int DistanceFromEdge;

		[Token(Token = "0x4002914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int DistanceFromDoor;

		[Token(Token = "0x6002D55")]
		[Address(RVA = "0xE368DC", Offset = "0xE368DC", VA = "0xE368DC")]
		public GridFlowTilemapDistanceFieldCell()
		{
		}
	}
	[Token(Token = "0x200084D")]
	public class GridFlowTilemapDistanceField
	{
		[Token(Token = "0x4002915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GridFlowTilemap tilemap;

		[Token(Token = "0x4002916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GridFlowTilemapDistanceFieldCell[,] distanceCells;

		[Token(Token = "0x4002917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int[] childOffsets;

		[Token(Token = "0x6002D56")]
		[Address(RVA = "0xE368EC", Offset = "0xE368EC", VA = "0xE368EC")]
		public GridFlowTilemapDistanceField(GridFlowTilemap tilemap)
		{
		}

		[Token(Token = "0x6002D57")]
		[Address(RVA = "0xE36A3C", Offset = "0xE36A3C", VA = "0xE36A3C")]
		private void Build()
		{
		}

		[Token(Token = "0x6002D58")]
		[Address(RVA = "0xE36A54", Offset = "0xE36A54", VA = "0xE36A54")]
		private void FindDistanceFromEdge()
		{
		}

		[Token(Token = "0x6002D59")]
		[Address(RVA = "0xE36E1C", Offset = "0xE36E1C", VA = "0xE36E1C")]
		private void FindDistanceFromDoor()
		{
		}
	}
	[Token(Token = "0x200084E")]
	public class GridFlowTilemapRenderResources
	{
		[Token(Token = "0x4002918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture2D iconOneWayDoor;

		[Token(Token = "0x4002919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TexturedMaterialInstances materials;

		[Token(Token = "0x6002D5B")]
		[Address(RVA = "0xE371C4", Offset = "0xE371C4", VA = "0xE371C4")]
		public GridFlowTilemapRenderResources()
		{
		}
	}
	[Token(Token = "0x200084F")]
	public class GridFlowTilemapRenderer
	{
		[Token(Token = "0x2000850")]
		private struct TilemapRenderVert
		{
			[Token(Token = "0x400291A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public UnityEngine.Vector2 position;

			[Token(Token = "0x400291B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public UnityEngine.Vector2 uv;

			[Token(Token = "0x6002D64")]
			[Address(RVA = "0xE37E74", Offset = "0xE37E74", VA = "0xE37E74")]
			public TilemapRenderVert(UnityEngine.Vector2 position, UnityEngine.Vector2 uv)
			{
			}

			[Token(Token = "0x6002D65")]
			[Address(RVA = "0xE383E8", Offset = "0xE383E8", VA = "0xE383E8")]
			public TilemapRenderVert Clone()
			{
				return default(TilemapRenderVert);
			}
		}

		[Token(Token = "0x2000851")]
		private struct TilemapRenderQuad
		{
			[Token(Token = "0x400291C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TilemapRenderVert[] verts;

			[Token(Token = "0x400291D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Color color;

			[Token(Token = "0x400291E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float z;

			[Token(Token = "0x400291F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int rotateUV;

			[Token(Token = "0x6002D66")]
			[Address(RVA = "0xE37E80", Offset = "0xE37E80", VA = "0xE37E80")]
			public TilemapRenderQuad(TilemapRenderVert v0, TilemapRenderVert v1, TilemapRenderVert v2, TilemapRenderVert v3, Color color, float z)
			{
			}

			[Token(Token = "0x6002D67")]
			[Address(RVA = "0xE38138", Offset = "0xE38138", VA = "0xE38138")]
			public TilemapRenderQuad Clone()
			{
				return default(TilemapRenderQuad);
			}
		}

		[Token(Token = "0x2000852")]
		private struct TilemapLayerRenderData
		{
			[Token(Token = "0x4002920")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Material material;

			[Token(Token = "0x4002921")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public TilemapRenderQuad[] quads;
		}

		[Token(Token = "0x6002D5C")]
		[Address(RVA = "0xE371E8", Offset = "0xE371E8", VA = "0xE371E8")]
		public static void Render(RenderTexture tilemapTexture, GridFlowTilemap tilemap, int tileSize, GridFlowTilemapRenderResources resources, Func<GridFlowTilemapCell, bool> FuncCellSelected)
		{
		}

		[Token(Token = "0x6002D5D")]
		[Address(RVA = "0xE37D84", Offset = "0xE37D84", VA = "0xE37D84")]
		private static Color GetEdgeColor(GridFlowTilemapEdgeType edgeType)
		{
			return default(Color);
		}

		[Token(Token = "0x6002D5E")]
		[Address(RVA = "0xE3751C", Offset = "0xE3751C", VA = "0xE3751C")]
		private static TilemapLayerRenderData[] BuildQuadData(GridFlowTilemap tilemap, int tileSize, GridFlowTilemapRenderResources resources, Func<GridFlowTilemapCell, bool> FuncCellSelected)
		{
			return null;
		}

		[Token(Token = "0x6002D5F")]
		[Address(RVA = "0xE381FC", Offset = "0xE381FC", VA = "0xE381FC")]
		private static void DrawTileEdge(float x0, float y0, float x1, float y1, GridFlowTilemapEdge edge, GridFlowTilemapRenderResources resources, Color color, Material material, Dictionary<Material, List<TilemapRenderQuad>> quadsByMaterial)
		{
		}

		[Token(Token = "0x6002D60")]
		[Address(RVA = "0xE37FAC", Offset = "0xE37FAC", VA = "0xE37FAC")]
		private static void AddLayerQuad(Dictionary<Material, List<TilemapRenderQuad>> quadsByMaterial, TilemapRenderQuad quad, Material material)
		{
		}

		[Token(Token = "0x6002D61")]
		[Address(RVA = "0xE37DC8", Offset = "0xE37DC8", VA = "0xE37DC8")]
		private static Color GetSelectedCellColor(Color color)
		{
			return default(Color);
		}

		[Token(Token = "0x6002D62")]
		[Address(RVA = "0xE37E24", Offset = "0xE37E24", VA = "0xE37E24")]
		private static Color GetCellColor(GridFlowTilemapCell cell)
		{
			return default(Color);
		}

		[Token(Token = "0x6002D63")]
		[Address(RVA = "0xE383E0", Offset = "0xE383E0", VA = "0xE383E0")]
		public GridFlowTilemapRenderer()
		{
		}
	}
}
namespace DungeonArchitect.Builders.GridFlow.Graphs
{
	[Serializable]
	[Token(Token = "0x2000853")]
	public class GridFlowExecGraphNodePin : GraphPin
	{
		[Token(Token = "0x4002922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEngine.Vector2 Padding;

		[Token(Token = "0x6002D68")]
		[Address(RVA = "0xE383F4", Offset = "0xE383F4", VA = "0xE383F4", Slot = "4")]
		public override bool ContainsPoint(UnityEngine.Vector2 worldPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D69")]
		[Address(RVA = "0xE384BC", Offset = "0xE384BC", VA = "0xE384BC")]
		public GridFlowExecGraphNodePin()
		{
		}
	}
}
namespace DungeonArchitect.Builders.GridFlow.Graphs.Preview.Tilemap
{
	[Token(Token = "0x2000854")]
	public class GridFlowPreviewTilemapGraph : Graph
	{
		[Token(Token = "0x6002D6A")]
		[Address(RVA = "0xE384CC", Offset = "0xE384CC", VA = "0xE384CC", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6002D6B")]
		[Address(RVA = "0xE384F0", Offset = "0xE384F0", VA = "0xE384F0")]
		public GridFlowPreviewTilemapGraph()
		{
		}
	}
	[Token(Token = "0x2000855")]
	public struct GridFlowPreviewTilemapBuildContext
	{
		[Token(Token = "0x4002923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GridFlowTilemap tilemap;

		[Token(Token = "0x4002924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GridFlowAbstractGraph abstractGraph;

		[Token(Token = "0x4002925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GraphBuilder graphBuilder;

		[Token(Token = "0x4002926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GridFlowAbstractNodeState selectedNodeState;

		[Token(Token = "0x4002927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GridFlowItem selectedItem;
	}
	[Token(Token = "0x2000856")]
	public class GridFlowPreviewTilemapGraphBuilder
	{
		[Token(Token = "0x6002D6C")]
		[Address(RVA = "0xE384F8", Offset = "0xE384F8", VA = "0xE384F8")]
		public static void Build(GridFlowPreviewTilemapBuildContext context)
		{
		}

		[Token(Token = "0x6002D6D")]
		[Address(RVA = "0xE38678", Offset = "0xE38678", VA = "0xE38678")]
		public GridFlowPreviewTilemapGraphBuilder()
		{
		}
	}
	[Token(Token = "0x2000857")]
	public class GridFlowPreviewTilemapGraphNode : GraphNode
	{
		[Token(Token = "0x4002928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int tileRenderSize;

		[Token(Token = "0x170006D7")]
		public GridFlowTilemap Tilemap
		{
			[Token(Token = "0x6002D6E")]
			[Address(RVA = "0xE38680", Offset = "0xE38680", VA = "0xE38680")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D6F")]
			[Address(RVA = "0xE38688", Offset = "0xE38688", VA = "0xE38688")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170006D8")]
		public GridFlowAbstractGraph AbstractGraph
		{
			[Token(Token = "0x6002D70")]
			[Address(RVA = "0xE38690", Offset = "0xE38690", VA = "0xE38690")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D71")]
			[Address(RVA = "0xE38698", Offset = "0xE38698", VA = "0xE38698")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170006D9")]
		public GridFlowAbstractNodeState SelectedNodeState
		{
			[Token(Token = "0x6002D72")]
			[Address(RVA = "0xE386A0", Offset = "0xE386A0", VA = "0xE386A0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D73")]
			[Address(RVA = "0xE386A8", Offset = "0xE386A8", VA = "0xE386A8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170006DA")]
		public GridFlowItem SelectedItem
		{
			[Token(Token = "0x6002D74")]
			[Address(RVA = "0xE386B0", Offset = "0xE386B0", VA = "0xE386B0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D75")]
			[Address(RVA = "0xE386B8", Offset = "0xE386B8", VA = "0xE386B8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170006DB")]
		public bool RequestRecreatePreview
		{
			[Token(Token = "0x6002D76")]
			[Address(RVA = "0xE386C0", Offset = "0xE386C0", VA = "0xE386C0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002D77")]
			[Address(RVA = "0xE386C8", Offset = "0xE386C8", VA = "0xE386C8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002D78")]
		[Address(RVA = "0xE386D4", Offset = "0xE386D4", VA = "0xE386D4")]
		public GridFlowPreviewTilemapGraphNode()
		{
		}

		[Token(Token = "0x6002D79")]
		[Address(RVA = "0xE386F8", Offset = "0xE386F8", VA = "0xE386F8", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6002D7A")]
		[Address(RVA = "0xE385D4", Offset = "0xE385D4", VA = "0xE385D4")]
		public void SetTilemap(GridFlowTilemap tilemap)
		{
		}
	}
}
namespace DungeonArchitect.Builders.GridFlow.Graphs.Preview.Abstract
{
	[Token(Token = "0x2000858")]
	public class GridFlowPreviewAbstractGraph : Graph
	{
		[Token(Token = "0x6002D7B")]
		[Address(RVA = "0xE38700", Offset = "0xE38700", VA = "0xE38700", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6002D7C")]
		[Address(RVA = "0xE38724", Offset = "0xE38724", VA = "0xE38724")]
		public GridFlowPreviewAbstractGraph()
		{
		}
	}
	[Token(Token = "0x2000859")]
	public class GridFlowPreviewAbstractGraphBuilder
	{
		[Token(Token = "0x6002D7D")]
		[Address(RVA = "0xE3872C", Offset = "0xE3872C", VA = "0xE3872C")]
		public static void Build(GridFlowAbstractGraph abstractGraph, GraphBuilder graphBuilder)
		{
		}

		[Token(Token = "0x6002D7E")]
		[Address(RVA = "0xE38C78", Offset = "0xE38C78", VA = "0xE38C78")]
		public GridFlowPreviewAbstractGraphBuilder()
		{
		}
	}
	[Token(Token = "0x200085A")]
	public class GridFlowPreviewAbstractGraphUtils
	{
		[Token(Token = "0x6002D7F")]
		[Address(RVA = "0xE38C80", Offset = "0xE38C80", VA = "0xE38C80")]
		public static GridFlowItem[] GetAllItems(GridFlowPreviewAbstractGraph previewGraph)
		{
			return null;
		}

		[Token(Token = "0x6002D80")]
		[Address(RVA = "0xE3936C", Offset = "0xE3936C", VA = "0xE3936C")]
		public GridFlowPreviewAbstractGraphUtils()
		{
		}
	}
	[Token(Token = "0x200085B")]
	public class GridFlowPreviewAbstractGraphLink : GraphLink
	{
		[Token(Token = "0x400292E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GridFlowAbstractGraphLinkState AbstractLinkState;

		[Token(Token = "0x6002D81")]
		[Address(RVA = "0xE39374", Offset = "0xE39374", VA = "0xE39374")]
		public GridFlowPreviewAbstractGraphLink()
		{
		}
	}
	[Token(Token = "0x200085C")]
	public class GridFlowPreviewAbstractGraphNode : GraphNode
	{
		[Token(Token = "0x170006DC")]
		public GridFlowAbstractNodeState AbstractNodeState
		{
			[Token(Token = "0x6002D82")]
			[Address(RVA = "0xE3937C", Offset = "0xE3937C", VA = "0xE3937C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D83")]
			[Address(RVA = "0xE39384", Offset = "0xE39384", VA = "0xE39384")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002D84")]
		[Address(RVA = "0xE3938C", Offset = "0xE3938C", VA = "0xE3938C", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6002D85")]
		[Address(RVA = "0xE394C0", Offset = "0xE394C0", VA = "0xE394C0")]
		public GridFlowPreviewAbstractGraphNode()
		{
		}
	}
	[Token(Token = "0x200085D")]
	public class GridFlowPreviewAbstractGraphNodePin : GraphPin
	{
		[Token(Token = "0x4002930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEngine.Vector2 Padding;

		[Token(Token = "0x6002D86")]
		[Address(RVA = "0xE394C8", Offset = "0xE394C8", VA = "0xE394C8", Slot = "4")]
		public override bool ContainsPoint(UnityEngine.Vector2 worldPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D87")]
		[Address(RVA = "0xE39590", Offset = "0xE39590", VA = "0xE39590")]
		public GridFlowPreviewAbstractGraphNodePin()
		{
		}
	}
}
namespace DungeonArchitect.Builders.GridFlow.Graphs.Exec
{
	[Token(Token = "0x200085E")]
	public class GridFlowExecGraph : Graph
	{
		[Token(Token = "0x4002931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public GridFlowExecResultGraphNode resultNode;

		[Token(Token = "0x6002D88")]
		[Address(RVA = "0xE3959C", Offset = "0xE3959C", VA = "0xE3959C", Slot = "4")]
		public override void OnEnable()
		{
		}

		[Token(Token = "0x6002D89")]
		[Address(RVA = "0xE395C0", Offset = "0xE395C0", VA = "0xE395C0")]
		public GridFlowExecGraph()
		{
		}
	}
	[Token(Token = "0x200085F")]
	public class GridFlowExecGraphUtils
	{
		[Token(Token = "0x6002D8A")]
		[Address(RVA = "0xE395C8", Offset = "0xE395C8", VA = "0xE395C8")]
		public static GridFlowExecRuleGraphNode[] GetIncomingNodes(GridFlowExecRuleGraphNode node)
		{
			return null;
		}

		[Token(Token = "0x6002D8B")]
		[Address(RVA = "0xE397A8", Offset = "0xE397A8", VA = "0xE397A8")]
		public GridFlowExecGraphUtils()
		{
		}
	}
	[Token(Token = "0x2000860")]
	public class GridFlowExecGraphNodeBase : GraphNode
	{
		[Token(Token = "0x6002D8C")]
		[Address(RVA = "0xE397B0", Offset = "0xE397B0", VA = "0xE397B0", Slot = "5")]
		public override void Initialize(string id, Graph graph)
		{
		}

		[Token(Token = "0x6002D8D")]
		[Address(RVA = "0xE3991C", Offset = "0xE3991C", VA = "0xE3991C")]
		public GridFlowExecGraphNodeBase()
		{
		}
	}
	[Token(Token = "0x2000861")]
	public class GridFlowExecResultGraphNode : GridFlowExecRuleGraphNode
	{
		[Token(Token = "0x6002D8E")]
		[Address(RVA = "0xE39924", Offset = "0xE39924", VA = "0xE39924")]
		public GridFlowExecResultGraphNode()
		{
		}
	}
	[Token(Token = "0x2000862")]
	public enum GridFlowGraphNodeExecutionStage
	{
		[Token(Token = "0x4002933")]
		NotExecuted,
		[Token(Token = "0x4002934")]
		WaitingToExecute,
		[Token(Token = "0x4002935")]
		Executed
	}
	[Token(Token = "0x2000863")]
	public class GridFlowGraphNodeExecutionStatus
	{
		[Token(Token = "0x170006DD")]
		public GridFlowGraphNodeExecutionStage ExecutionStage
		{
			[Token(Token = "0x6002D8F")]
			[Address(RVA = "0xE39934", Offset = "0xE39934", VA = "0xE39934")]
			[CompilerGenerated]
			get
			{
				return default(GridFlowGraphNodeExecutionStage);
			}
			[Token(Token = "0x6002D90")]
			[Address(RVA = "0xE3993C", Offset = "0xE3993C", VA = "0xE3993C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170006DE")]
		public GridFlowExecNodeHandlerResultType Success
		{
			[Token(Token = "0x6002D91")]
			[Address(RVA = "0xE39944", Offset = "0xE39944", VA = "0xE39944")]
			[CompilerGenerated]
			get
			{
				return default(GridFlowExecNodeHandlerResultType);
			}
			[Token(Token = "0x6002D92")]
			[Address(RVA = "0xE3994C", Offset = "0xE3994C", VA = "0xE3994C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170006DF")]
		public string ErrorMessage
		{
			[Token(Token = "0x6002D93")]
			[Address(RVA = "0xE39954", Offset = "0xE39954", VA = "0xE39954")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002D94")]
			[Address(RVA = "0xE3995C", Offset = "0xE3995C", VA = "0xE3995C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6002D95")]
		[Address(RVA = "0xE39964", Offset = "0xE39964", VA = "0xE39964")]
		public GridFlowGraphNodeExecutionStatus()
		{
		}
	}
	[Token(Token = "0x2000864")]
	public class GridFlowExecRuleGraphNode : GridFlowExecGraphNodeBase
	{
		[Token(Token = "0x4002939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GridFlowExecNodeHandler nodeHandler;

		[Token(Token = "0x400293A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GridFlowGraphNodeExecutionStatus executionStatus;

		[Token(Token = "0x6002D96")]
		[Address(RVA = "0xE3992C", Offset = "0xE3992C", VA = "0xE3992C")]
		public GridFlowExecRuleGraphNode()
		{
		}
	}
}
namespace DungeonArchitect.Builders.GridFlow.Graphs.Exec.NodeHandlers
{
	[Token(Token = "0x2000865")]
	[GridFlowExecNodeInfo("Create Grid", "Layout Graph/", 1000f)]
	public class GridFlowExecNodeHandler_CreateGrid : GridFlowExecNodeHandler
	{
		[Token(Token = "0x400293B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2Int resolution;

		[Token(Token = "0x6002D97")]
		[Address(RVA = "0xE399C4", Offset = "0xE399C4", VA = "0xE399C4", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6002D98")]
		[Address(RVA = "0xE39C74", Offset = "0xE39C74", VA = "0xE39C74")]
		public GridFlowExecNodeHandler_CreateGrid()
		{
		}
	}
	[Token(Token = "0x2000866")]
	[GridFlowExecNodeInfo("Create Key Lock", "Layout Graph/", 1040f)]
	public class GridFlowExecNodeHandler_CreateKeyLock : GridFlowExecNodeHandler
	{
		[Token(Token = "0x400293C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string keyBranch;

		[Token(Token = "0x400293D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string lockBranch;

		[Token(Token = "0x400293E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string keyMarkerName;

		[Token(Token = "0x400293F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string lockMarkerName;

		[Token(Token = "0x4002940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GridFlowItemPlacementSettings placementSettings;

		[Token(Token = "0x6002D99")]
		[Address(RVA = "0xE39CD4", Offset = "0xE39CD4", VA = "0xE39CD4", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode node, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6002D9A")]
		[Address(RVA = "0xE39F4C", Offset = "0xE39F4C", VA = "0xE39F4C")]
		private bool FindKeyLockNodes(GridFlowExecutionContext context, GridFlowAbstractGraph graph, out GridFlowAbstractGraphNode keyNode, out GridFlowAbstractGraphNode lockNode)
		{
			return default(bool);
		}

		[Token(Token = "0x6002D9B")]
		[Address(RVA = "0xE3A80C", Offset = "0xE3A80C", VA = "0xE3A80C")]
		public GridFlowExecNodeHandler_CreateKeyLock()
		{
		}
	}
	[Token(Token = "0x2000867")]
	[GridFlowExecNodeInfo("Create Main Path", "Layout Graph/", 1010f)]
	public class GridFlowExecNodeHandler_CreateMainPath : GridFlowExecNodeHandler
	{
		[Token(Token = "0x4002941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int pathSize;

		[Token(Token = "0x4002942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string pathName;

		[Token(Token = "0x4002943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color nodeColor;

		[Token(Token = "0x4002944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string startMarkerName;

		[Token(Token = "0x4002945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string goalMarkerName;

		[Token(Token = "0x4002946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string startNodePathName;

		[Token(Token = "0x4002947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string goalNodePathName;

		[Token(Token = "0x4002948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GridFlowItemPlacementSettings startPlacementSettings;

		[Token(Token = "0x4002949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GridFlowItemPlacementSettings goalPlacementSettings;

		[Token(Token = "0x400294A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool drawDebug;

		[Token(Token = "0x6002D9E")]
		[Address(RVA = "0xE3A99C", Offset = "0xE3A99C", VA = "0xE3A99C", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6002D9F")]
		[Address(RVA = "0xE3ACA4", Offset = "0xE3ACA4", VA = "0xE3ACA4")]
		private bool GrowPath(GridFlowAbstractGraph graph, GridFlowAbstractGraphNode currentNode, System.Random random, List<GridFlowAbstractGraphNode> path, HashSet<GridFlowAbstractGraphNode> visited)
		{
			return default(bool);
		}

		[Token(Token = "0x6002DA0")]
		[Address(RVA = "0xE3AF0C", Offset = "0xE3AF0C", VA = "0xE3AF0C")]
		private void FinalizePath(GridFlowAbstractGraph graph, List<GridFlowAbstractGraphNode> path)
		{
		}

		[Token(Token = "0x6002DA1")]
		[Address(RVA = "0xE3B1FC", Offset = "0xE3B1FC", VA = "0xE3B1FC")]
		public GridFlowExecNodeHandler_CreateMainPath()
		{
		}
	}
	[Token(Token = "0x2000868")]
	[GridFlowExecNodeInfo("Create Path", "Layout Graph/", 1020f)]
	public class GridFlowExecNodeHandler_CreatePath : GridFlowExecNodeHandler
	{
		[Token(Token = "0x2000869")]
		private class StaticGrowthState
		{
			[Token(Token = "0x4002952")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GridFlowAbstractGraph graph;

			[Token(Token = "0x4002953")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GridFlowAbstractGraphNode headNode;

			[Token(Token = "0x4002954")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GridFlowAbstractGraphNode[] sinkNodes;

			[Token(Token = "0x4002955")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public System.Random random;

			[Token(Token = "0x6002DA8")]
			[Address(RVA = "0xE3B7A8", Offset = "0xE3B7A8", VA = "0xE3B7A8")]
			public StaticGrowthState()
			{
			}
		}

		[Token(Token = "0x200086A")]
		private class GrowthState
		{
			[Token(Token = "0x4002956")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<GridFlowAbstractGraphNode> path;

			[Token(Token = "0x4002957")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HashSet<GridFlowAbstractGraphNode> visited;

			[Token(Token = "0x4002958")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GridFlowAbstractGraphNode tailNode;

			[Token(Token = "0x6002DA9")]
			[Address(RVA = "0xE3B7A0", Offset = "0xE3B7A0", VA = "0xE3B7A0")]
			public GrowthState()
			{
			}
		}

		[Token(Token = "0x400294B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int minPathSize;

		[Token(Token = "0x400294C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int maxPathSize;

		[Token(Token = "0x400294D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string pathName;

		[Token(Token = "0x400294E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color nodeColor;

		[Token(Token = "0x400294F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string startFromPath;

		[Token(Token = "0x4002950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string endOnPath;

		[Token(Token = "0x4002951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool drawDebug;

		[Token(Token = "0x6002DA2")]
		[Address(RVA = "0xE3B334", Offset = "0xE3B334", VA = "0xE3B334", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6002DA3")]
		[Address(RVA = "0xE3B7B0", Offset = "0xE3B7B0", VA = "0xE3B7B0")]
		private bool GrowPath(GridFlowAbstractGraphNode currentNode, StaticGrowthState staticState, GrowthState state)
		{
			return default(bool);
		}

		[Token(Token = "0x6002DA4")]
		[Address(RVA = "0xE3BB38", Offset = "0xE3BB38", VA = "0xE3BB38")]
		private void FinalizePath(StaticGrowthState staticState, GrowthState state)
		{
		}

		[Token(Token = "0x6002DA5")]
		[Address(RVA = "0xE3BE1C", Offset = "0xE3BE1C", VA = "0xE3BE1C")]
		public GridFlowExecNodeHandler_CreatePath()
		{
		}
	}
	[Token(Token = "0x200086B")]
	[GridFlowExecNodeInfo("Finalize Graph", "Layout Graph/", 1050f)]
	public class GridFlowExecNodeHandler_FinalizeGraph : GridFlowExecNodeHandler
	{
		[Token(Token = "0x200086C")]
		private struct ItemInfo
		{
			[Token(Token = "0x400295E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GridFlowItem item;

			[Token(Token = "0x400295F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public GridFlowAbstractGraphNode node;

			[Token(Token = "0x4002960")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GridFlowAbstractGraphLink link;

			[Token(Token = "0x6002DB0")]
			[Address(RVA = "0xE3CA64", Offset = "0xE3CA64", VA = "0xE3CA64")]
			public ItemInfo(GridFlowItem item, GridFlowAbstractGraphNode node, GridFlowAbstractGraphLink link)
			{
			}

			[Token(Token = "0x6002DB1")]
			[Address(RVA = "0xE3D9F8", Offset = "0xE3D9F8", VA = "0xE3D9F8")]
			public object GetParent()
			{
				return null;
			}
		}

		[Token(Token = "0x4002959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool debugDraw;

		[Token(Token = "0x400295A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int oneWayDoorPromotionWeight;

		[Token(Token = "0x400295B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool generateCaves;

		[Token(Token = "0x400295C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool generateCorridors;

		[Token(Token = "0x400295D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int maxEnemiesPerCaveNode;

		[Token(Token = "0x6002DAA")]
		[Address(RVA = "0xE3BF84", Offset = "0xE3BF84", VA = "0xE3BF84", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6002DAB")]
		[Address(RVA = "0xE3D094", Offset = "0xE3D094", VA = "0xE3D094")]
		private void AssignRoomTypes(GridFlowAbstractGraph graph, System.Random random)
		{
		}

		[Token(Token = "0x6002DAC")]
		[Address(RVA = "0xE3D50C", Offset = "0xE3D50C", VA = "0xE3D50C")]
		private GridFlowAbstractNodeRoomType GetNodeRoomType(GridFlowAbstractGraph graph, GridFlowAbstractGraphNode node)
		{
			return default(GridFlowAbstractNodeRoomType);
		}

		[Token(Token = "0x6002DAD")]
		[Address(RVA = "0xE3CE7C", Offset = "0xE3CE7C", VA = "0xE3CE7C")]
		private void EmitDebugInfo(GridFlowAbstractGraph graph, Dictionary<GridFlowAbstractGraphNode, int> weights)
		{
		}

		[Token(Token = "0x6002DAE")]
		[Address(RVA = "0xE3CA70", Offset = "0xE3CA70", VA = "0xE3CA70")]
		private bool ResolveKeyLocks(GridFlowAbstractGraph graph, ItemInfo keyInfo, ItemInfo lockInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6002DAF")]
		[Address(RVA = "0xE3DA14", Offset = "0xE3DA14", VA = "0xE3DA14")]
		public GridFlowExecNodeHandler_FinalizeGraph()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200086E")]
	public enum GridFlowExecNodeHandler_SpawnItemMethod
	{
		[Token(Token = "0x400296B")]
		RandomRange,
		[Token(Token = "0x400296C")]
		LinearDifficulty,
		[Token(Token = "0x400296D")]
		CurveDifficulty
	}
	[Token(Token = "0x200086F")]
	[GridFlowExecNodeInfo("Spawn Items", "Layout Graph/", 1030f)]
	public class GridFlowExecNodeHandler_SpawnItems : GridFlowExecNodeHandler
	{
		[Token(Token = "0x2000870")]
		private class NodeInfo
		{
			[Token(Token = "0x400297C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GridFlowAbstractGraphNode node;

			[Token(Token = "0x400297D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float weight;

			[Token(Token = "0x6002DC0")]
			[Address(RVA = "0xE3E738", Offset = "0xE3E738", VA = "0xE3E738")]
			public NodeInfo(GridFlowAbstractGraphNode node, float weight)
			{
			}
		}

		[Token(Token = "0x400296E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] paths;

		[Token(Token = "0x400296F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GridFlowGraphItemType itemType;

		[Token(Token = "0x4002970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string markerName;

		[Token(Token = "0x4002971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GridFlowGraphItemCustomInfo customItemInfo;

		[Token(Token = "0x4002972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int minCount;

		[Token(Token = "0x4002973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int maxCount;

		[Token(Token = "0x4002974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GridFlowExecNodeHandler_SpawnItemMethod spawnMethod;

		[Token(Token = "0x4002975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationCurve spawnDistributionCurve;

		[Token(Token = "0x4002976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float spawnDistributionVariance;

		[Token(Token = "0x4002977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float minSpawnDifficulty;

		[Token(Token = "0x4002978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float spawnProbability;

		[Token(Token = "0x4002979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GridFlowItemPlacementSettings placementSettings;

		[Token(Token = "0x400297A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool showDifficulty;

		[Token(Token = "0x400297B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Color difficultyInfoColor;

		[Token(Token = "0x6002DBC")]
		[Address(RVA = "0xE3DB94", Offset = "0xE3DB94", VA = "0xE3DB94", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6002DBD")]
		[Address(RVA = "0xE3E770", Offset = "0xE3E770", VA = "0xE3E770")]
		private int GetSpawnCount(System.Random random, float weight)
		{
			return default(int);
		}

		[Token(Token = "0x6002DBE")]
		[Address(RVA = "0xE3E970", Offset = "0xE3E970", VA = "0xE3E970")]
		private void EmitDebugInfo(NodeInfo[] nodes)
		{
		}

		[Token(Token = "0x6002DBF")]
		[Address(RVA = "0xE3EA88", Offset = "0xE3EA88", VA = "0xE3EA88")]
		public GridFlowExecNodeHandler_SpawnItems()
		{
		}
	}
	[Token(Token = "0x2000872")]
	public enum GridFlowExecNodeHandlerResultType
	{
		[Token(Token = "0x4002981")]
		Success,
		[Token(Token = "0x4002982")]
		FailRetry,
		[Token(Token = "0x4002983")]
		FailHalt
	}
	[Token(Token = "0x2000873")]
	public abstract class GridFlowExecNodeHandler : ScriptableObject
	{
		[Token(Token = "0x4002984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string description;

		[Token(Token = "0x6002DC4")]
		public abstract GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode node, out GridFlowExecNodeState ExecutionState, ref string errorMessage);

		[Token(Token = "0x6002DC5")]
		[Address(RVA = "0xE39C84", Offset = "0xE39C84", VA = "0xE39C84")]
		protected GridFlowExecNodeHandler()
		{
		}
	}
	[Token(Token = "0x2000874")]
	[AttributeUsage(AttributeTargets.Class)]
	public class GridFlowExecNodeInfoAttribute : Attribute
	{
		[Token(Token = "0x170006E0")]
		public string Title
		{
			[Token(Token = "0x6002DC6")]
			[Address(RVA = "0xE3EC9C", Offset = "0xE3EC9C", VA = "0xE3EC9C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DC7")]
			[Address(RVA = "0xE3ECA4", Offset = "0xE3ECA4", VA = "0xE3ECA4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170006E1")]
		public string MenuPrefix
		{
			[Token(Token = "0x6002DC8")]
			[Address(RVA = "0xE3ECAC", Offset = "0xE3ECAC", VA = "0xE3ECAC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DC9")]
			[Address(RVA = "0xE3ECB4", Offset = "0xE3ECB4", VA = "0xE3ECB4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170006E2")]
		public float Weight
		{
			[Token(Token = "0x6002DCA")]
			[Address(RVA = "0xE3ECBC", Offset = "0xE3ECBC", VA = "0xE3ECBC")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6002DCB")]
			[Address(RVA = "0xE3ECC4", Offset = "0xE3ECC4", VA = "0xE3ECC4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6002DCC")]
		[Address(RVA = "0xE3ECCC", Offset = "0xE3ECCC", VA = "0xE3ECCC")]
		public GridFlowExecNodeInfoAttribute(string title)
		{
		}

		[Token(Token = "0x6002DCD")]
		[Address(RVA = "0xE3ED6C", Offset = "0xE3ED6C", VA = "0xE3ED6C")]
		public GridFlowExecNodeInfoAttribute(string title, string menuPrefix)
		{
		}

		[Token(Token = "0x6002DCE")]
		[Address(RVA = "0xE3ED30", Offset = "0xE3ED30", VA = "0xE3ED30")]
		public GridFlowExecNodeInfoAttribute(string title, string menuPrefix, float weight)
		{
		}

		[Token(Token = "0x6002DCF")]
		[Address(RVA = "0xE3ED9C", Offset = "0xE3ED9C", VA = "0xE3ED9C")]
		public static GridFlowExecNodeInfoAttribute GetHandlerAttribute(Type type)
		{
			return null;
		}
	}
	[Token(Token = "0x2000875")]
	public class GridFlowExecNodeStates
	{
		[Token(Token = "0x4002988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<string, GridFlowExecNodeState> stateByNodeId;

		[Token(Token = "0x6002DD0")]
		[Address(RVA = "0xE3EEC8", Offset = "0xE3EEC8", VA = "0xE3EEC8")]
		public void Clear()
		{
		}

		[Token(Token = "0x6002DD1")]
		[Address(RVA = "0xE3EF18", Offset = "0xE3EF18", VA = "0xE3EF18")]
		public void Register(string nodeId, GridFlowExecNodeState state)
		{
		}

		[Token(Token = "0x6002DD2")]
		[Address(RVA = "0xE3EF94", Offset = "0xE3EF94", VA = "0xE3EF94")]
		public GridFlowExecNodeState Get(string nodeId)
		{
			return null;
		}

		[Token(Token = "0x6002DD3")]
		[Address(RVA = "0xE3F028", Offset = "0xE3F028", VA = "0xE3F028")]
		public GridFlowExecNodeStates()
		{
		}
	}
	[Token(Token = "0x2000876")]
	public abstract class GridFlowExecNodeState
	{
		[Token(Token = "0x170006E3")]
		public GridFlowAbstractGraph AbstractGraph
		{
			[Token(Token = "0x6002DD4")]
			[Address(RVA = "0xE3F0A4", Offset = "0xE3F0A4", VA = "0xE3F0A4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DD5")]
			[Address(RVA = "0xE3F0AC", Offset = "0xE3F0AC", VA = "0xE3F0AC")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170006E4")]
		public GridFlowTilemap Tilemap
		{
			[Token(Token = "0x6002DD6")]
			[Address(RVA = "0xE3F0B4", Offset = "0xE3F0B4", VA = "0xE3F0B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002DD7")]
			[Address(RVA = "0xE3F0BC", Offset = "0xE3F0BC", VA = "0xE3F0BC")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6002DD8")]
		[Address(RVA = "0xE3F0C4", Offset = "0xE3F0C4", VA = "0xE3F0C4")]
		protected GridFlowExecNodeState()
		{
		}
	}
	[Token(Token = "0x2000877")]
	public class GridFlowExecNodeState_AbstractGraph : GridFlowExecNodeState
	{
		[Token(Token = "0x6002DD9")]
		[Address(RVA = "0xE39C4C", Offset = "0xE39C4C", VA = "0xE39C4C")]
		public GridFlowExecNodeState_AbstractGraph(GridFlowAbstractGraph graph)
		{
		}
	}
	[Token(Token = "0x2000878")]
	public class GridFlowExecNodeState_Tilemap : GridFlowExecNodeState
	{
		[Token(Token = "0x6002DDA")]
		[Address(RVA = "0xE3F0CC", Offset = "0xE3F0CC", VA = "0xE3F0CC")]
		public GridFlowExecNodeState_Tilemap(GridFlowTilemap tilemap, GridFlowAbstractGraph abstractGraph)
		{
		}
	}
	[Token(Token = "0x2000879")]
	[GridFlowExecNodeInfo("Result", "", 3000f)]
	public class GridFlowExecNodeHandler_Result : GridFlowExecNodeHandler
	{
		[Token(Token = "0x6002DDB")]
		[Address(RVA = "0xE3F0F8", Offset = "0xE3F0F8", VA = "0xE3F0F8", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode node, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6002DDC")]
		[Address(RVA = "0xE3F1DC", Offset = "0xE3F1DC", VA = "0xE3F1DC")]
		public GridFlowExecNodeHandler_Result()
		{
		}
	}
	[Token(Token = "0x200087A")]
	public class GridFlowExecNodeUtils
	{
		[Token(Token = "0x200087B")]
		protected struct NodeWeightAssignInfo
		{
			[Token(Token = "0x400298B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GridFlowAbstractGraphNode node;

			[Token(Token = "0x400298C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int weight;

			[Token(Token = "0x6002DE5")]
			[Address(RVA = "0xE3F668", Offset = "0xE3F668", VA = "0xE3F668")]
			public NodeWeightAssignInfo(GridFlowAbstractGraphNode node, int weight)
			{
			}
		}

		[Token(Token = "0x6002DDD")]
		[Address(RVA = "0xE3F1E0", Offset = "0xE3F1E0", VA = "0xE3F1E0")]
		public static GridFlowExecNodeState[] GetIncomingStates(GridFlowExecRuleGraphNode currentNode, GridFlowExecNodeStates nodeStates)
		{
			return null;
		}

		[Token(Token = "0x6002DDE")]
		[Address(RVA = "0xE39F04", Offset = "0xE39F04", VA = "0xE39F04")]
		public static GridFlowAbstractGraph CloneIncomingAbstractGraph(GridFlowExecRuleGraphNode currentNode, GridFlowExecNodeStates nodeStates)
		{
			return null;
		}

		[Token(Token = "0x6002DDF")]
		[Address(RVA = "0xE3F198", Offset = "0xE3F198", VA = "0xE3F198")]
		public static GridFlowTilemap CloneIncomingTilemap(GridFlowExecRuleGraphNode currentNode, GridFlowExecNodeStates nodeStates)
		{
			return null;
		}

		[Token(Token = "0x6002DE0")]
		[Address(RVA = "0xE3F340", Offset = "0xE3F340", VA = "0xE3F340")]
		public static GridFlowAbstractGraphNode FindNodeWithItemType(GridFlowAbstractGraph graph, GridFlowGraphItemType itemType)
		{
			return null;
		}

		[Token(Token = "0x6002DE1")]
		[Address(RVA = "0xE3A674", Offset = "0xE3A674", VA = "0xE3A674")]
		public static GridFlowAbstractGraphNode[] FilterNodes(GridFlowAbstractGraphNode[] nodes, int minWeight, int maxWeight, Dictionary<GridFlowAbstractGraphNode, int> weights)
		{
			return null;
		}

		[Token(Token = "0x6002DE2")]
		[Address(RVA = "0xE3F614", Offset = "0xE3F614", VA = "0xE3F614")]
		public static bool ContainsItem(GridFlowItem[] items, GridFlowGraphItemType itemType)
		{
			return default(bool);
		}

		[Token(Token = "0x6002DE3")]
		[Address(RVA = "0xE3A2C4", Offset = "0xE3A2C4", VA = "0xE3A2C4")]
		public static Dictionary<GridFlowAbstractGraphNode, int> CalculateWeights(GridFlowAbstractGraph graph, int lockedWeight)
		{
			return null;
		}

		[Token(Token = "0x6002DE4")]
		[Address(RVA = "0xE3F674", Offset = "0xE3F674", VA = "0xE3F674")]
		public GridFlowExecNodeUtils()
		{
		}
	}
	[Token(Token = "0x200087C")]
	[GridFlowExecNodeInfo("Create Tilemap Elevations", "Tilemap/", 2100f)]
	public class GridFlowExecNodeHandler_CreateTilemapElevations : GridFlowExecNodeHandler
	{
		[Token(Token = "0x400298D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string markerName;

		[Token(Token = "0x400298E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int noiseOctaves;

		[Token(Token = "0x400298F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float noiseFrequency;

		[Token(Token = "0x4002990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float noiseValuePower;

		[Token(Token = "0x4002991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int numSteps;

		[Token(Token = "0x4002992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float minHeight;

		[Token(Token = "0x4002993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float maxHeight;

		[Token(Token = "0x4002994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float seaLevel;

		[Token(Token = "0x4002995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color landColor;

		[Token(Token = "0x4002996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Color seaColor;

		[Token(Token = "0x4002997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float minColorMultiplier;

		[Token(Token = "0x6002DE6")]
		[Address(RVA = "0xE3F67C", Offset = "0xE3F67C", VA = "0xE3F67C", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6002DE7")]
		[Address(RVA = "0xE3FA44", Offset = "0xE3FA44", VA = "0xE3FA44")]
		public GridFlowExecNodeHandler_CreateTilemapElevations()
		{
		}
	}
	[Token(Token = "0x200087D")]
	public enum GridFlowExecNodeHandler_CreateTilemapOverlayGenMethod
	{
		[Token(Token = "0x4002999")]
		Noise,
		[Token(Token = "0x400299A")]
		Script
	}
	[Serializable]
	[Token(Token = "0x200087E")]
	public class GridFlowExecNodeTilemapOverlayNoiseSettings
	{
		[Token(Token = "0x400299B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int noiseOctaves;

		[Token(Token = "0x400299C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float noiseFrequency;

		[Token(Token = "0x400299D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float noiseValuePower;

		[Token(Token = "0x400299E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float noiseMinValue;

		[Token(Token = "0x400299F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float noiseMaxValue;

		[Token(Token = "0x40029A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float noiseThreshold;

		[Token(Token = "0x40029A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int minDistFromMainPath;

		[Token(Token = "0x6002DE8")]
		[Address(RVA = "0xE3FAC8", Offset = "0xE3FAC8", VA = "0xE3FAC8")]
		public GridFlowExecNodeTilemapOverlayNoiseSettings()
		{
		}
	}
	[Token(Token = "0x200087F")]
	public interface IGridFlowTilemapOverlayGenerator
	{
		[Token(Token = "0x6002DE9")]
		void Init(System.Random random);

		[Token(Token = "0x6002DEA")]
		bool Generate(GridFlowTilemapCell cell, GridFlowTilemapCell incomingCell, System.Random random, ref float overlayValue);
	}
	[Token(Token = "0x2000880")]
	public class NoiseGridFlowTilemapOverlayGenerator : IGridFlowTilemapOverlayGenerator
	{
		[Token(Token = "0x40029A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GradientNoiseTable noiseTable;

		[Token(Token = "0x40029A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GridFlowExecNodeTilemapOverlayNoiseSettings noiseSettings;

		[Token(Token = "0x6002DEB")]
		[Address(RVA = "0xE3FAF4", Offset = "0xE3FAF4", VA = "0xE3FAF4")]
		public NoiseGridFlowTilemapOverlayGenerator(GridFlowExecNodeTilemapOverlayNoiseSettings noiseSettings)
		{
		}

		[Token(Token = "0x6002DEC")]
		[Address(RVA = "0xE3FB1C", Offset = "0xE3FB1C", VA = "0xE3FB1C", Slot = "4")]
		public void Init(System.Random random)
		{
		}

		[Token(Token = "0x6002DED")]
		[Address(RVA = "0xE3FBC8", Offset = "0xE3FBC8", VA = "0xE3FBC8", Slot = "5")]
		public bool Generate(GridFlowTilemapCell cell, GridFlowTilemapCell incomingCell, System.Random random, ref float overlayValue)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000881")]
	[GridFlowExecNodeInfo("Create Tilemap Overlay", "Tilemap/", 2200f)]
	public class GridFlowExecNodeHandler_CreateTilemapOverlay : GridFlowExecNodeHandler
	{
		[Token(Token = "0x40029A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string markerName;

		[Token(Token = "0x40029A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color color;

		[Token(Token = "0x40029A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool overlayBlocksTile;

		[Token(Token = "0x40029A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public GridFlowExecNodeHandler_CreateTilemapOverlayGenMethod generationMethod;

		[Token(Token = "0x40029A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GridFlowExecNodeTilemapOverlayNoiseSettings noiseSettings;

		[Token(Token = "0x40029A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GridFlowTilemapCellOverlayMergeConfig mergeConfig;

		[Token(Token = "0x40029AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string generatorScriptClass;

		[Token(Token = "0x6002DEE")]
		[Address(RVA = "0xE3FCE0", Offset = "0xE3FCE0", VA = "0xE3FCE0", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6002DEF")]
		[Address(RVA = "0xE4000C", Offset = "0xE4000C", VA = "0xE4000C")]
		private IGridFlowTilemapOverlayGenerator createGeneratorInstance()
		{
			return null;
		}

		[Token(Token = "0x6002DF0")]
		[Address(RVA = "0xE40138", Offset = "0xE40138", VA = "0xE40138")]
		public GridFlowExecNodeHandler_CreateTilemapOverlay()
		{
		}
	}
	[Token(Token = "0x2000882")]
	[GridFlowExecNodeInfo("Finalize Tilemap", "Tilemap/", 2500f)]
	public class GridFlowExecNodeHandler_FinalizeTilemap : GridFlowExecNodeHandler
	{
		[Token(Token = "0x40029AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool debugUnwalkableCells;

		[Token(Token = "0x6002DF1")]
		[Address(RVA = "0xE40228", Offset = "0xE40228", VA = "0xE40228", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode node, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6002DF2")]
		[Address(RVA = "0xE411C8", Offset = "0xE411C8", VA = "0xE411C8")]
		private List<GridFlowTilemapCell> FilterWalkablePath(List<GridFlowTilemapCell> cells)
		{
			return null;
		}

		[Token(Token = "0x6002DF3")]
		[Address(RVA = "0xE40324", Offset = "0xE40324", VA = "0xE40324")]
		private GridFlowExecNodeHandlerResultType AssignItems(GridFlowTilemap tilemap, GridFlowAbstractGraph graph, System.Random random, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6002DF4")]
		[Address(RVA = "0xE419E0", Offset = "0xE419E0", VA = "0xE419E0")]
		public GridFlowExecNodeHandler_FinalizeTilemap()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000883")]
	public enum GridFlowTilemapWallGenerationMethod
	{
		[Token(Token = "0x40029AD")]
		WallAsTiles,
		[Token(Token = "0x40029AE")]
		WallAsEdges
	}
	[Token(Token = "0x2000884")]
	[GridFlowExecNodeInfo("Initialize Tilemap", "Tilemap/", 2000f)]
	public class GridFlowExecNodeHandler_InitializeTilemap : GridFlowExecNodeHandler
	{
		[Token(Token = "0x2000885")]
		private struct DoorInfo
		{
			[Token(Token = "0x170006E5")]
			public GridFlowAbstractGraphLink Link
			{
				[Token(Token = "0x6002E0D")]
				[Address(RVA = "0xE58FC8", Offset = "0xE58FC8", VA = "0xE58FC8")]
				[CompilerGenerated]
				readonly get
				{
					return null;
				}
				[Token(Token = "0x6002E0E")]
				[Address(RVA = "0xE58FD0", Offset = "0xE58FD0", VA = "0xE58FD0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170006E6")]
			public IntVector2 CellCoord
			{
				[Token(Token = "0x6002E0F")]
				[Address(RVA = "0xE58FD8", Offset = "0xE58FD8", VA = "0xE58FD8")]
				[CompilerGenerated]
				readonly get
				{
					return default(IntVector2);
				}
				[Token(Token = "0x6002E10")]
				[Address(RVA = "0xE58FE0", Offset = "0xE58FE0", VA = "0xE58FE0")]
				[CompilerGenerated]
				set
				{
				}
			}

			[Token(Token = "0x170006E7")]
			public bool HorizontalDoorEdge
			{
				[Token(Token = "0x6002E11")]
				[Address(RVA = "0xE58FE8", Offset = "0xE58FE8", VA = "0xE58FE8")]
				[CompilerGenerated]
				readonly get
				{
					return default(bool);
				}
				[Token(Token = "0x6002E12")]
				[Address(RVA = "0xE58FF0", Offset = "0xE58FF0", VA = "0xE58FF0")]
				[CompilerGenerated]
				set
				{
				}
			}
		}

		[Token(Token = "0x40029AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2Int tilemapSizePerNode;

		[Token(Token = "0x40029B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector2 perturbAmount;

		[Token(Token = "0x40029B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float corridorLaneWidth;

		[Token(Token = "0x40029B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int layoutPadding;

		[Token(Token = "0x40029B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GridFlowTilemapWallGenerationMethod wallGenerationMethod;

		[Token(Token = "0x40029B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int caveAutomataNeighbors;

		[Token(Token = "0x40029B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int caveAutomataIterations;

		[Token(Token = "0x40029B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float caveThickness;

		[Token(Token = "0x40029B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float roomColorSaturation;

		[Token(Token = "0x40029B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float roomColorBrightness;

		[Token(Token = "0x40029B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int nodeWidth;

		[Token(Token = "0x40029BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int nodeHeight;

		[Token(Token = "0x6002DF5")]
		[Address(RVA = "0xE419E4", Offset = "0xE419E4", VA = "0xE419E4", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6002DF6")]
		[Address(RVA = "0xE41D34", Offset = "0xE41D34", VA = "0xE41D34")]
		private GridFlowTilemap BuildTilemap(GridFlowTilemap tilemap, GridFlowAbstractGraph graph, System.Random random)
		{
			return null;
		}

		[Token(Token = "0x6002DF7")]
		[Address(RVA = "0xE43CC8", Offset = "0xE43CC8", VA = "0xE43CC8")]
		private GridFlowTilemap CropTilemap(GridFlowTilemap oldTilemap)
		{
			return null;
		}

		[Token(Token = "0x6002DF8")]
		[Address(RVA = "0xE42140", Offset = "0xE42140", VA = "0xE42140")]
		private void PerturbRoomSizes(GridFlowTilemap tilemap, GridFlowAbstractGraph graph, GridFlowTilemapNodeInfo[,] tileNodes, System.Random random)
		{
		}

		[Token(Token = "0x6002DF9")]
		[Address(RVA = "0xE42630", Offset = "0xE42630", VA = "0xE42630")]
		private void FixCorridorSizes(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowAbstractGraph graph)
		{
		}

		[Token(Token = "0x6002DFA")]
		[Address(RVA = "0xE4280C", Offset = "0xE4280C", VA = "0xE4280C")]
		private void RasterizeRoomCorridors(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap)
		{
		}

		[Token(Token = "0x6002DFB")]
		[Address(RVA = "0xE42C7C", Offset = "0xE42C7C", VA = "0xE42C7C")]
		private void RasterizeBaseCaveBlocks(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap, GridFlowAbstractGraph graph)
		{
		}

		[Token(Token = "0x6002DFC")]
		[Address(RVA = "0xE433A0", Offset = "0xE433A0", VA = "0xE433A0")]
		private void BuildCaves(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap, GridFlowAbstractGraph graph, System.Random random)
		{
		}

		[Token(Token = "0x6002DFD")]
		[Address(RVA = "0xE45118", Offset = "0xE45118", VA = "0xE45118")]
		private CaveCellBuildTile[,] GenerateCaveBuildMap(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap, GridFlowAbstractGraph graph)
		{
			return null;
		}

		[Token(Token = "0x6002DFE")]
		[Address(RVA = "0xE45564", Offset = "0xE45564", VA = "0xE45564")]
		private void BuildCaveStep_BuildRocks(CaveCellBuildTile[,] caveMap, GridFlowTilemap tilemap, System.Random random)
		{
		}

		[Token(Token = "0x6002DFF")]
		[Address(RVA = "0xE456C4", Offset = "0xE456C4", VA = "0xE456C4")]
		private void BuildCaveStep_SimulateGrowth(CaveCellBuildTile[,] caveMap, GridFlowTilemap tilemap, System.Random random)
		{
		}

		[Token(Token = "0x6002E00")]
		[Address(RVA = "0xE45A2C", Offset = "0xE45A2C", VA = "0xE45A2C")]
		private void BuildCaveStep_Cleanup(CaveCellBuildTile[,] caveMap, GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap)
		{
		}

		[Token(Token = "0x6002E01")]
		[Address(RVA = "0xE46260", Offset = "0xE46260", VA = "0xE46260")]
		private bool CanCreateEdgeToAdjacentCaveTile(GridFlowTilemap tilemap, CaveCellBuildTile[,] caveMap, int x, int y)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E02")]
		[Address(RVA = "0xE45F7C", Offset = "0xE45F7C", VA = "0xE45F7C")]
		private void BuildCaveStep_UpdateEdges(CaveCellBuildTile[,] caveMap, GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap)
		{
		}

		[Token(Token = "0x6002E03")]
		[Address(RVA = "0xE44DF8", Offset = "0xE44DF8", VA = "0xE44DF8")]
		private void DebugPostProcess(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap, GridFlowAbstractGraph graph)
		{
		}

		[Token(Token = "0x6002E04")]
		[Address(RVA = "0xE44EC0", Offset = "0xE44EC0", VA = "0xE44EC0")]
		private bool ShouldBlockCaveBoundary(GridFlowAbstractGraph graph, GridFlowAbstractGraphNode caveNode, int dx, int dy)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E05")]
		[Address(RVA = "0xE42FF4", Offset = "0xE42FF4", VA = "0xE42FF4")]
		private void GenerateMainPath(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap, GridFlowAbstractGraph graph)
		{
		}

		[Token(Token = "0x6002E06")]
		[Address(RVA = "0xE4487C", Offset = "0xE4487C", VA = "0xE4487C")]
		private void CalculateDistanceFromMainPathOnEmptyArea(GridFlowTilemap tilemap)
		{
		}

		[Token(Token = "0x6002E07")]
		[Address(RVA = "0xE442C4", Offset = "0xE442C4", VA = "0xE442C4")]
		private void CalculateDistanceFromMainPath(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap, GridFlowAbstractNodeRoomType[] allowedRoomTypes)
		{
		}

		[Token(Token = "0x6002E08")]
		[Address(RVA = "0xE43488", Offset = "0xE43488", VA = "0xE43488")]
		private void BuildDoors(GridFlowTilemapNodeInfo[,] tileNodes, GridFlowTilemap tilemap, GridFlowAbstractGraph graph)
		{
		}

		[Token(Token = "0x6002E09")]
		[Address(RVA = "0xE461B4", Offset = "0xE461B4", VA = "0xE461B4")]
		private IntVector2 NodeCoordToTileCoord(IntVector2 nodeCoord)
		{
			return default(IntVector2);
		}

		[Token(Token = "0x6002E0A")]
		[Address(RVA = "0xE41B44", Offset = "0xE41B44", VA = "0xE41B44")]
		private bool GetGraphSize(GridFlowAbstractGraph graph, out IntVector2 size)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E0B")]
		[Address(RVA = "0xE46344", Offset = "0xE46344", VA = "0xE46344")]
		private GridFlowTilemapCellType GetCellType(GridFlowTilemap tilemap, int x, int y)
		{
			return default(GridFlowTilemapCellType);
		}

		[Token(Token = "0x6002E0C")]
		[Address(RVA = "0xE4639C", Offset = "0xE4639C", VA = "0xE4639C")]
		public GridFlowExecNodeHandler_InitializeTilemap()
		{
		}
	}
	[Token(Token = "0x2000887")]
	internal struct NodeTilemapBounds
	{
		[Token(Token = "0x40029C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x0;

		[Token(Token = "0x40029C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y0;

		[Token(Token = "0x40029C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int x1;

		[Token(Token = "0x40029C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int y1;

		[Token(Token = "0x40029C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int mx;

		[Token(Token = "0x40029C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int my;

		[Token(Token = "0x6002E16")]
		[Address(RVA = "0xE59088", Offset = "0xE59088", VA = "0xE59088")]
		public static NodeTilemapBounds Build(GridFlowTilemapNodeInfo tileNode, int tilemapWidth, int tilemapHeight, bool clampToBoundary)
		{
			return default(NodeTilemapBounds);
		}
	}
	[Token(Token = "0x2000888")]
	internal class CaveCellBuildTile
	{
		[Token(Token = "0x40029C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntVector2 tileCoord;

		[Token(Token = "0x40029C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool valid;

		[Token(Token = "0x40029C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool rockTile;

		[Token(Token = "0x6002E17")]
		[Address(RVA = "0xE59380", Offset = "0xE59380", VA = "0xE59380")]
		public CaveCellBuildTile Clone()
		{
			return null;
		}

		[Token(Token = "0x6002E18")]
		[Address(RVA = "0xE593F8", Offset = "0xE593F8", VA = "0xE593F8")]
		public CaveCellBuildTile()
		{
		}
	}
	[Token(Token = "0x2000889")]
	public class GridFlowTilemapNodeInfo
	{
		[Token(Token = "0x40029C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float x0;

		[Token(Token = "0x40029CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float x1;

		[Token(Token = "0x40029CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float y0;

		[Token(Token = "0x40029CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float y1;

		[Token(Token = "0x40029CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float midX;

		[Token(Token = "0x40029CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float midY;

		[Token(Token = "0x40029CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GridFlowAbstractGraphNode node;

		[Token(Token = "0x6002E19")]
		[Address(RVA = "0xE59400", Offset = "0xE59400", VA = "0xE59400")]
		public GridFlowTilemapNodeInfo(float x0, float y0, float x1, float y1)
		{
		}
	}
	[Token(Token = "0x200088A")]
	[GridFlowExecNodeInfo("Merge Tilemaps", "Tilemap/", 2300f)]
	public class GridFlowExecNodeHandler_MergeTilemaps : GridFlowExecNodeHandler
	{
		[Token(Token = "0x6002E1A")]
		[Address(RVA = "0xE59458", Offset = "0xE59458", VA = "0xE59458", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode execNode, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6002E1B")]
		[Address(RVA = "0xE5A018", Offset = "0xE5A018", VA = "0xE5A018")]
		public GridFlowExecNodeHandler_MergeTilemaps()
		{
		}
	}
	[Token(Token = "0x200088B")]
	[GridFlowExecNodeInfo("Optimize Tilemap", "Tilemap/", 2400f)]
	public class GridFlowExecNodeHandler_OptimizeTilemap : GridFlowExecNodeHandler
	{
		[Token(Token = "0x40029D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int discardDistanceFromLayout;

		[Token(Token = "0x6002E1C")]
		[Address(RVA = "0xE5A020", Offset = "0xE5A020", VA = "0xE5A020", Slot = "4")]
		public override GridFlowExecNodeHandlerResultType Execute(GridFlowExecutionContext context, GridFlowExecRuleGraphNode node, out GridFlowExecNodeState ExecutionState, ref string errorMessage)
		{
			return default(GridFlowExecNodeHandlerResultType);
		}

		[Token(Token = "0x6002E1D")]
		[Address(RVA = "0xE5A114", Offset = "0xE5A114", VA = "0xE5A114")]
		private void DiscardDistantTiles(GridFlowTilemap tilemap)
		{
		}

		[Token(Token = "0x6002E1E")]
		[Address(RVA = "0xE5A980", Offset = "0xE5A980", VA = "0xE5A980")]
		public GridFlowExecNodeHandler_OptimizeTilemap()
		{
		}
	}
}
namespace DungeonArchitect.Builders.GridFlow.Graphs.Abstract
{
	[Serializable]
	[Token(Token = "0x200088C")]
	public class GridFlowAbstractGraph
	{
		[Token(Token = "0x40029D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public List<GridFlowAbstractGraphNode> Nodes;

		[Token(Token = "0x40029D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public List<GridFlowAbstractGraphLink> Links;

		[Token(Token = "0x6002E1F")]
		[Address(RVA = "0xE5A990", Offset = "0xE5A990", VA = "0xE5A990")]
		public void RemoveNode(GridFlowAbstractGraphNode node)
		{
		}

		[Token(Token = "0x6002E20")]
		[Address(RVA = "0xE5AAF0", Offset = "0xE5AAF0", VA = "0xE5AAF0")]
		public void AddNode(GridFlowAbstractGraphNode node)
		{
		}

		[Token(Token = "0x6002E21")]
		[Address(RVA = "0xE5AB98", Offset = "0xE5AB98", VA = "0xE5AB98")]
		public void RemoveLink(GridFlowAbstractGraphLink link)
		{
		}

		[Token(Token = "0x6002E22")]
		[Address(RVA = "0xE5ABF0", Offset = "0xE5ABF0", VA = "0xE5ABF0")]
		public GridFlowAbstractGraphNode GetNode(Guid nodeId)
		{
			return null;
		}

		[Token(Token = "0x6002E23")]
		[Address(RVA = "0xE5AD6C", Offset = "0xE5AD6C", VA = "0xE5AD6C")]
		public GridFlowAbstractNodeState GetNodeState(Guid nodeId)
		{
			return null;
		}

		[Token(Token = "0x6002E24")]
		[Address(RVA = "0xE5AD84", Offset = "0xE5AD84", VA = "0xE5AD84")]
		public GridFlowAbstractGraphLink GetLink(GridFlowAbstractGraphNode sourceNode, GridFlowAbstractGraphNode destNode)
		{
			return null;
		}

		[Token(Token = "0x6002E25")]
		[Address(RVA = "0xE5AD8C", Offset = "0xE5AD8C", VA = "0xE5AD8C")]
		public GridFlowAbstractGraphLink GetLink(GridFlowAbstractGraphNode sourceNode, GridFlowAbstractGraphNode destNode, bool ignoreDirection)
		{
			return null;
		}

		[Token(Token = "0x6002E26")]
		[Address(RVA = "0xE5AF78", Offset = "0xE5AF78", VA = "0xE5AF78")]
		public GridFlowAbstractGraphLink MakeLink(GridFlowAbstractGraphNode sourceNode, GridFlowAbstractGraphNode destNode)
		{
			return null;
		}

		[Token(Token = "0x6002E27")]
		[Address(RVA = "0xE5B104", Offset = "0xE5B104", VA = "0xE5B104")]
		public void BreakLink(GridFlowAbstractGraphNode sourceNode, GridFlowAbstractGraphNode destNode)
		{
		}

		[Token(Token = "0x6002E28")]
		[Address(RVA = "0xE5B190", Offset = "0xE5B190", VA = "0xE5B190")]
		public void BreakAllOutgoingLinks(GridFlowAbstractGraphNode node)
		{
		}

		[Token(Token = "0x6002E29")]
		[Address(RVA = "0xE5B278", Offset = "0xE5B278", VA = "0xE5B278")]
		public void BreakAllIncomingLinks(GridFlowAbstractGraphNode node)
		{
		}

		[Token(Token = "0x6002E2A")]
		[Address(RVA = "0xE5A9F4", Offset = "0xE5A9F4", VA = "0xE5A9F4")]
		public void BreakAllLinks(GridFlowAbstractGraphNode node)
		{
		}

		[Token(Token = "0x6002E2B")]
		[Address(RVA = "0xE5B360", Offset = "0xE5B360", VA = "0xE5B360")]
		public void Clear()
		{
		}

		[Token(Token = "0x6002E2C")]
		[Address(RVA = "0xE5B404", Offset = "0xE5B404", VA = "0xE5B404")]
		public GridFlowAbstractGraphNode[] GetOutgoingNodes(GridFlowAbstractGraphNode node)
		{
			return null;
		}

		[Token(Token = "0x6002E2D")]
		[Address(RVA = "0xE5B658", Offset = "0xE5B658", VA = "0xE5B658")]
		public GridFlowAbstractGraphNode[] GetIncomingNodes(GridFlowAbstractGraphNode node)
		{
			return null;
		}

		[Token(Token = "0x6002E2E")]
		[Address(RVA = "0xE5B8AC", Offset = "0xE5B8AC", VA = "0xE5B8AC")]
		public GridFlowAbstractGraphLink[] GetOutgoingLinks(GridFlowAbstractGraphNode node)
		{
			return null;
		}

		[Token(Token = "0x6002E2F")]
		[Address(RVA = "0xE5BAF4", Offset = "0xE5BAF4", VA = "0xE5BAF4")]
		public GridFlowAbstractGraphLink[] GetIncomingLinks(GridFlowAbstractGraphNode node)
		{
			return null;
		}

		[Token(Token = "0x6002E30")]
		[Address(RVA = "0xE5BD3C", Offset = "0xE5BD3C", VA = "0xE5BD3C")]
		public GridFlowAbstractGraphNode[] GetConnectedNodes(GridFlowAbstractGraphNode node)
		{
			return null;
		}

		[Token(Token = "0x6002E31")]
		[Address(RVA = "0xE5C010", Offset = "0xE5C010", VA = "0xE5C010")]
		public GridFlowAbstractGraph Clone()
		{
			return null;
		}

		[Token(Token = "0x6002E32")]
		[Address(RVA = "0xE5C570", Offset = "0xE5C570", VA = "0xE5C570")]
		public GridFlowItem[] GetAllItems()
		{
			return null;
		}

		[Token(Token = "0x6002E33")]
		[Address(RVA = "0xE5C3B0", Offset = "0xE5C3B0", VA = "0xE5C3B0")]
		public GridFlowAbstractGraph()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200088D")]
	public class GridFlowAbstractGraphLinkState
	{
		[Token(Token = "0x40029D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool Directional;

		[Token(Token = "0x40029D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool OneWay;

		[Token(Token = "0x40029D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GridFlowItem> Items;

		[Token(Token = "0x6002E34")]
		[Address(RVA = "0xE5C87C", Offset = "0xE5C87C", VA = "0xE5C87C")]
		public GridFlowAbstractGraphLinkState Clone()
		{
			return null;
		}

		[Token(Token = "0x6002E35")]
		[Address(RVA = "0xE5CA8C", Offset = "0xE5CA8C", VA = "0xE5CA8C")]
		public void AddItem(GridFlowItem item)
		{
		}

		[Token(Token = "0x6002E36")]
		[Address(RVA = "0xE5CA10", Offset = "0xE5CA10", VA = "0xE5CA10")]
		public GridFlowAbstractGraphLinkState()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200088E")]
	public class GridFlowAbstractGraphLink
	{
		[Token(Token = "0x40029D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid LinkId;

		[Token(Token = "0x40029D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Guid Source;

		[Token(Token = "0x40029D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Guid Destination;

		[Token(Token = "0x40029D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GridFlowAbstractGraphLinkState state;

		[Token(Token = "0x6002E37")]
		[Address(RVA = "0xE5B090", Offset = "0xE5B090", VA = "0xE5B090")]
		public GridFlowAbstractGraphLink()
		{
		}

		[Token(Token = "0x6002E38")]
		[Address(RVA = "0xE5C4EC", Offset = "0xE5C4EC", VA = "0xE5C4EC")]
		public GridFlowAbstractGraphLink Clone()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200088F")]
	public enum GridFlowAbstractNodeRoomType
	{
		[Token(Token = "0x40029DB")]
		Unknown,
		[Token(Token = "0x40029DC")]
		Room,
		[Token(Token = "0x40029DD")]
		Corridor,
		[Token(Token = "0x40029DE")]
		Cave
	}
	[Serializable]
	[Token(Token = "0x2000890")]
	public class GridFlowAbstractNodeState
	{
		[Token(Token = "0x40029DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool Active;

		[Token(Token = "0x40029E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Color Color;

		[Token(Token = "0x40029E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public IntVector2 GridCoord;

		[Token(Token = "0x40029E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HashSet<string> Tags;

		[Token(Token = "0x40029E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<GridFlowItem> Items;

		[Token(Token = "0x40029E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GridFlowAbstractNodeRoomType RoomType;

		[Token(Token = "0x6002E39")]
		[Address(RVA = "0xE5CB34", Offset = "0xE5CB34", VA = "0xE5CB34")]
		public GridFlowAbstractNodeState Clone()
		{
			return null;
		}

		[Token(Token = "0x6002E3A")]
		[Address(RVA = "0xE5CF38", Offset = "0xE5CF38", VA = "0xE5CF38")]
		public void AddItem(GridFlowItem item)
		{
		}

		[Token(Token = "0x6002E3B")]
		[Address(RVA = "0xE5CEE0", Offset = "0xE5CEE0", VA = "0xE5CEE0")]
		public void AddTag(string tag)
		{
		}

		[Token(Token = "0x6002E3C")]
		[Address(RVA = "0xE5CFE0", Offset = "0xE5CFE0", VA = "0xE5CFE0")]
		public void AddTags(string[] tags)
		{
		}

		[Token(Token = "0x6002E3D")]
		[Address(RVA = "0xE5CDE0", Offset = "0xE5CDE0", VA = "0xE5CDE0")]
		public GridFlowAbstractNodeState()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000891")]
	public class GridFlowAbstractGraphNode
	{
		[Token(Token = "0x40029E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Guid NodeId;

		[Token(Token = "0x40029E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Vector2 Position;

		[Token(Token = "0x40029E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GridFlowAbstractNodeState state;

		[Token(Token = "0x6002E3E")]
		[Address(RVA = "0xE5D07C", Offset = "0xE5D07C", VA = "0xE5D07C")]
		public GridFlowAbstractGraphNode()
		{
		}

		[Token(Token = "0x6002E3F")]
		[Address(RVA = "0xE5C470", Offset = "0xE5C470", VA = "0xE5C470")]
		public GridFlowAbstractGraphNode Clone()
		{
			return null;
		}
	}
}
namespace DungeonArchitect.Builders.Grid
{
	[Token(Token = "0x2000892")]
	public class GridCellInfo
	{
		[Token(Token = "0x40029E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int CellId;

		[Token(Token = "0x40029E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public CellType CellType;

		[Token(Token = "0x40029EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ContainsDoor;

		[Token(Token = "0x6002E40")]
		[Address(RVA = "0xE5D128", Offset = "0xE5D128", VA = "0xE5D128")]
		public GridCellInfo()
		{
		}

		[Token(Token = "0x6002E41")]
		[Address(RVA = "0xE5D150", Offset = "0xE5D150", VA = "0xE5D150")]
		public GridCellInfo(int pCellId, CellType pCellType)
		{
		}
	}
	[Token(Token = "0x2000893")]
	public class GridBuilderDoorMetadata
	{
		[Token(Token = "0x40029EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int CellA;

		[Token(Token = "0x40029EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int CellB;

		[Token(Token = "0x6002E42")]
		[Address(RVA = "0xE5D180", Offset = "0xE5D180", VA = "0xE5D180")]
		public GridBuilderDoorMetadata(int cellIdA, int cellIdB)
		{
		}
	}
	[Token(Token = "0x2000894")]
	public class CellHeightNode
	{
		[Token(Token = "0x40029ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int CellId;

		[Token(Token = "0x40029EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int Height;

		[Token(Token = "0x40029EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool MarkForIncrease;

		[Token(Token = "0x40029F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool MarkForDecrease;

		[Token(Token = "0x6002E43")]
		[Address(RVA = "0xE5D1AC", Offset = "0xE5D1AC", VA = "0xE5D1AC")]
		public CellHeightNode()
		{
		}
	}
	[Token(Token = "0x2000895")]
	public class StairAdjacencyQueueNode
	{
		[Token(Token = "0x40029F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int cellId;

		[Token(Token = "0x40029F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int depth;

		[Token(Token = "0x6002E44")]
		[Address(RVA = "0xE5D1B4", Offset = "0xE5D1B4", VA = "0xE5D1B4")]
		public StairAdjacencyQueueNode(int pCellId, int pDepth)
		{
		}
	}
	[Token(Token = "0x2000896")]
	public class CellHeightFrameInfo
	{
		[Token(Token = "0x40029F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int CellId;

		[Token(Token = "0x40029F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int CurrentHeight;

		[Token(Token = "0x6002E45")]
		[Address(RVA = "0xE5D1E0", Offset = "0xE5D1E0", VA = "0xE5D1E0")]
		public CellHeightFrameInfo(int pCellId, int pCurrentHeight)
		{
		}
	}
	[Token(Token = "0x2000897")]
	public struct StairEdgeInfo
	{
		[Token(Token = "0x40029F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int CellIdA;

		[Token(Token = "0x40029F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int CellIdB;

		[Token(Token = "0x6002E46")]
		[Address(RVA = "0xE5D20C", Offset = "0xE5D20C", VA = "0xE5D20C")]
		public StairEdgeInfo(int pCellIdA, int pCellIdB)
		{
		}
	}
	[Token(Token = "0x2000898")]
	[ExecuteInEditMode]
	public class GridDungeonBuilder : DungeonBuilder
	{
		[Token(Token = "0x2000899")]
		private class Edge : IComparable<Edge>
		{
			[Token(Token = "0x40029FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int cellA;

			[Token(Token = "0x40029FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int cellB;

			[Token(Token = "0x40029FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float weight;

			[Token(Token = "0x6002E99")]
			[Address(RVA = "0xE640E8", Offset = "0xE640E8", VA = "0xE640E8")]
			public Edge(int cellA, int cellB, float weight)
			{
			}

			[Token(Token = "0x6002E9A")]
			[Address(RVA = "0xE6CCA0", Offset = "0xE6CCA0", VA = "0xE6CCA0", Slot = "4")]
			public int CompareTo(Edge other)
			{
				return default(int);
			}
		}

		[Token(Token = "0x200089A")]
		private class ConnectionPointSorter : IComparer<IntVector>
		{
			[Token(Token = "0x40029FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private UnityEngine.Vector3 center;

			[Token(Token = "0x6002E9B")]
			[Address(RVA = "0xE66690", Offset = "0xE66690", VA = "0xE66690")]
			public ConnectionPointSorter(UnityEngine.Vector3 center)
			{
			}

			[Token(Token = "0x6002E9C")]
			[Address(RVA = "0xE6CCD4", Offset = "0xE6CCD4", VA = "0xE6CCD4", Slot = "4")]
			public int Compare(IntVector x, IntVector y)
			{
				return default(int);
			}
		}

		[Token(Token = "0x200089B")]
		private class StairConnectionWeight
		{
			[Token(Token = "0x40029FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int position;

			[Token(Token = "0x40029FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int weight;

			[Token(Token = "0x6002E9D")]
			[Address(RVA = "0xE68560", Offset = "0xE68560", VA = "0xE68560")]
			public StairConnectionWeight(int position, int weight)
			{
			}
		}

		[Token(Token = "0x200089C")]
		private class StairConnectionWeightComparer : IComparer<StairConnectionWeight>
		{
			[Token(Token = "0x6002E9E")]
			[Address(RVA = "0xE6CD7C", Offset = "0xE6CD7C", VA = "0xE6CD7C", Slot = "4")]
			public int Compare(StairConnectionWeight x, StairConnectionWeight y)
			{
				return default(int);
			}

			[Token(Token = "0x6002E9F")]
			[Address(RVA = "0xE6858C", Offset = "0xE6858C", VA = "0xE6858C")]
			public StairConnectionWeightComparer()
			{
			}
		}

		[Token(Token = "0x40029F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int _CellIdCounter;

		[Token(Token = "0x40029F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GridDungeonModel gridModel;

		[Token(Token = "0x40029F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GridDungeonConfig gridConfig;

		[Token(Token = "0x170006E8")]
		private Dictionary<int, List<StairInfo>> CellStairs
		{
			[Token(Token = "0x6002E47")]
			[Address(RVA = "0xE5D214", Offset = "0xE5D214", VA = "0xE5D214")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006E9")]
		private Dictionary<int, Dictionary<int, GridCellInfo>> GridCellInfoLookup
		{
			[Token(Token = "0x6002E48")]
			[Address(RVA = "0xE5D230", Offset = "0xE5D230", VA = "0xE5D230")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006EA")]
		private UnityEngine.Vector3 GridToMeshScale
		{
			[Token(Token = "0x6002E4A")]
			[Address(RVA = "0xE5D268", Offset = "0xE5D268", VA = "0xE5D268")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x6002E49")]
		[Address(RVA = "0xE5D24C", Offset = "0xE5D24C", VA = "0xE5D24C")]
		private GridCellInfo GetGridCellLookup(int x, int z)
		{
			return null;
		}

		[Token(Token = "0x6002E4B")]
		[Address(RVA = "0xE5D334", Offset = "0xE5D334", VA = "0xE5D334")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002E4C")]
		[Address(RVA = "0xE5D4AC", Offset = "0xE5D4AC", VA = "0xE5D4AC", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6002E4D")]
		[Address(RVA = "0xE61F30", Offset = "0xE61F30", VA = "0xE61F30")]
		private void Initialize()
		{
		}

		[Token(Token = "0x6002E4E")]
		[Address(RVA = "0xE620B8", Offset = "0xE620B8", VA = "0xE620B8", Slot = "5")]
		protected override LevelMarkerList CreateMarkerListObject(DungeonConfig config)
		{
			return null;
		}

		[Token(Token = "0x6002E4F")]
		[Address(RVA = "0xE62184", Offset = "0xE62184", VA = "0xE62184")]
		private bool CanFitDistributionCell(HashSet<IntVector> Occupancy, ref Rectangle bounds)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E50")]
		[Address(RVA = "0xE622D0", Offset = "0xE622D0", VA = "0xE622D0")]
		private void SetDistributionCellOccupied(HashSet<IntVector> Occupancy, ref Rectangle bounds)
		{
		}

		[Token(Token = "0x6002E51")]
		[Address(RVA = "0xE5D690", Offset = "0xE5D690", VA = "0xE5D690")]
		public void BuildCellsWithDistribution()
		{
		}

		[Token(Token = "0x6002E52")]
		[Address(RVA = "0xE5DB1C", Offset = "0xE5DB1C", VA = "0xE5DB1C")]
		public void BuildCellsWithSeparation()
		{
		}

		[Token(Token = "0x6002E53")]
		[Address(RVA = "0xE6240C", Offset = "0xE6240C", VA = "0xE6240C")]
		private IntVector GenerateCellSize()
		{
			return default(IntVector);
		}

		[Token(Token = "0x6002E54")]
		[Address(RVA = "0xE62628", Offset = "0xE62628", VA = "0xE62628")]
		private Cell BuildCell()
		{
			return null;
		}

		[Token(Token = "0x6002E55")]
		[Address(RVA = "0xE6257C", Offset = "0xE6257C", VA = "0xE6257C")]
		private Cell BuildCell(ref Rectangle bounds)
		{
			return null;
		}

		[Token(Token = "0x6002E56")]
		[Address(RVA = "0xE630A0", Offset = "0xE630A0", VA = "0xE630A0")]
		private int GetNextCellId()
		{
			return default(int);
		}

		[Token(Token = "0x6002E57")]
		[Address(RVA = "0xE5DC6C", Offset = "0xE5DC6C", VA = "0xE5DC6C")]
		private void ApplyBaseOffset()
		{
		}

		[Token(Token = "0x6002E58")]
		[Address(RVA = "0xE5F58C", Offset = "0xE5F58C", VA = "0xE5F58C")]
		private void ApplyNegationVolumes()
		{
		}

		[Token(Token = "0x6002E59")]
		[Address(RVA = "0xE630B4", Offset = "0xE630B4", VA = "0xE630B4")]
		private void ApplyNegationVolume(NegationVolume volume)
		{
		}

		[Token(Token = "0x6002E5A")]
		[Address(RVA = "0xE634EC", Offset = "0xE634EC", VA = "0xE634EC")]
		private void GetCellBounds(Cell cell, ref Bounds bounds)
		{
		}

		[Token(Token = "0x6002E5B")]
		[Address(RVA = "0xE5DF04", Offset = "0xE5DF04", VA = "0xE5DF04")]
		private void AddUserDefinedPlatforms()
		{
		}

		[Token(Token = "0x6002E5C")]
		[Address(RVA = "0xE635DC", Offset = "0xE635DC", VA = "0xE635DC")]
		private void AddPlatformVolume(PlatformVolume platform)
		{
		}

		[Token(Token = "0x6002E5D")]
		[Address(RVA = "0xE62C50", Offset = "0xE62C50", VA = "0xE62C50")]
		private int GetRandomRoomSize()
		{
			return default(int);
		}

		[Token(Token = "0x6002E5E")]
		[Address(RVA = "0xE62D74", Offset = "0xE62D74", VA = "0xE62D74")]
		private IntVector GetRandomPointInCircle(float radius)
		{
			return default(IntVector);
		}

		[Token(Token = "0x6002E5F")]
		[Address(RVA = "0xE63874", Offset = "0xE63874", VA = "0xE63874")]
		private static void Shuffle(GridDungeonModel gridModel)
		{
		}

		[Token(Token = "0x6002E60")]
		[Address(RVA = "0xE63A10", Offset = "0xE63A10", VA = "0xE63A10")]
		private static int CompareFromCenter(Cell cellA, Cell cellB)
		{
			return default(int);
		}

		[Token(Token = "0x6002E61")]
		[Address(RVA = "0xE62680", Offset = "0xE62680", VA = "0xE62680")]
		public static bool Seperate(GridDungeonModel gridModel)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E62")]
		[Address(RVA = "0xE5E2C8", Offset = "0xE5E2C8", VA = "0xE5E2C8")]
		public void TriangulateRooms()
		{
		}

		[Token(Token = "0x6002E63")]
		[Address(RVA = "0xE63BD4", Offset = "0xE63BD4", VA = "0xE63BD4")]
		private static void ConnectCells(Cell c1, Cell c2)
		{
		}

		[Token(Token = "0x6002E64")]
		[Address(RVA = "0xE63CA4", Offset = "0xE63CA4", VA = "0xE63CA4")]
		private static List<Cell> GetRooms(List<Cell> cells)
		{
			return null;
		}

		[Token(Token = "0x6002E65")]
		private void AddUnique<T>(List<T> list, T value)
		{
		}

		[Token(Token = "0x6002E66")]
		[Address(RVA = "0xE5E858", Offset = "0xE5E858", VA = "0xE5E858")]
		private void BuildMinimumSpanningTree()
		{
		}

		[Token(Token = "0x6002E67")]
		[Address(RVA = "0xE64124", Offset = "0xE64124", VA = "0xE64124")]
		private bool ContainsLoop(List<Cell> rooms)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E68")]
		[Address(RVA = "0xE642F0", Offset = "0xE642F0", VA = "0xE642F0")]
		private bool CheckLoop(Cell currentNode, Cell comingFrom, HashSet<Cell> visited)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E69")]
		[Address(RVA = "0xE640CC", Offset = "0xE640CC", VA = "0xE640CC")]
		private static float GetDistance(IntVector a, IntVector b)
		{
			return default(float);
		}

		[Token(Token = "0x6002E6A")]
		[Address(RVA = "0xE63EB0", Offset = "0xE63EB0", VA = "0xE63EB0")]
		private List<Cell> GetCellsOfType(CellType cellType)
		{
			return null;
		}

		[Token(Token = "0x6002E6B")]
		[Address(RVA = "0xE5F410", Offset = "0xE5F410", VA = "0xE5F410")]
		private void ConnectCorridors()
		{
		}

		[Token(Token = "0x6002E6C")]
		[Address(RVA = "0xE6450C", Offset = "0xE6450C", VA = "0xE6450C")]
		private void ConnectCooridorRecursive(int incomingRoomId, int currentRoomId, HashSet<int> visited)
		{
		}

		[Token(Token = "0x6002E6D")]
		[Address(RVA = "0xE64C1C", Offset = "0xE64C1C", VA = "0xE64C1C")]
		private bool AreCellsAdjacent(int cellAId, int cellBId)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E6E")]
		[Address(RVA = "0xE64D0C", Offset = "0xE64D0C", VA = "0xE64D0C")]
		private void GetCorners(Rectangle bounds, out HashSet<IntVector> corners)
		{
		}

		[Token(Token = "0x6002E6F")]
		[Address(RVA = "0xE64F38", Offset = "0xE64F38", VA = "0xE64F38")]
		private void ConnectAdjacentCells(int roomA, int roomB)
		{
		}

		[Token(Token = "0x6002E70")]
		[Address(RVA = "0xE6552C", Offset = "0xE6552C", VA = "0xE6552C")]
		private void Swap(ref int A, ref int B)
		{
		}

		[Token(Token = "0x6002E71")]
		[Address(RVA = "0xE65540", Offset = "0xE65540", VA = "0xE65540")]
		private void GetManhattanPathBetween(IntVector start, IntVector end, ref List<IntVector> path)
		{
		}

		[Token(Token = "0x6002E72")]
		[Address(RVA = "0xE657B4", Offset = "0xE657B4", VA = "0xE657B4")]
		private List<IntVector> GetManhattanPath(IntVector start, IntVector mid, IntVector end)
		{
			return null;
		}

		[Token(Token = "0x6002E73")]
		[Address(RVA = "0xE65AE0", Offset = "0xE65AE0", VA = "0xE65AE0")]
		private void RemovePointsInsideBounds(Rectangle bounds, List<IntVector> points)
		{
		}

		[Token(Token = "0x6002E74")]
		[Address(RVA = "0xE65DF8", Offset = "0xE65DF8", VA = "0xE65DF8")]
		private bool ContainsPointInsideBounds(Rectangle bounds, List<IntVector> points)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E75")]
		[Address(RVA = "0xE65F78", Offset = "0xE65F78", VA = "0xE65F78")]
		private bool ContainsPointsInsideRoomCells(Cell[] roomCells, List<IntVector> points)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E76")]
		[Address(RVA = "0xE66008", Offset = "0xE66008", VA = "0xE66008")]
		private List<IntVector> FindConnectionPath(Cell roomA, Cell roomB)
		{
			return null;
		}

		[Token(Token = "0x6002E77")]
		[Address(RVA = "0xE64760", Offset = "0xE64760", VA = "0xE64760")]
		private void ConnectRooms(int roomAId, int roomBId)
		{
		}

		[Token(Token = "0x6002E78")]
		[Address(RVA = "0xE66ABC", Offset = "0xE66ABC", VA = "0xE66ABC")]
		private void ConnectIfRoomCorridor(int cellAX, int cellAZ, int cellBX, int cellBZ)
		{
		}

		[Token(Token = "0x6002E79")]
		[Address(RVA = "0xE66AB4", Offset = "0xE66AB4", VA = "0xE66AB4")]
		private int RegisterCorridorCell(int cellX, int cellZ, int roomA, int roomB)
		{
			return default(int);
		}

		[Token(Token = "0x6002E7A")]
		[Address(RVA = "0xE666CC", Offset = "0xE666CC", VA = "0xE666CC")]
		private int RegisterCorridorCell(int cellX, int cellZ, int roomA, int roomB, bool canRegisterDoors)
		{
			return default(int);
		}

		[Token(Token = "0x6002E7B")]
		[Address(RVA = "0xE63B28", Offset = "0xE63B28", VA = "0xE63B28")]
		private static int GetForceDirectionMultiplier(float a, float b, float a1, float b1)
		{
			return default(int);
		}

		[Token(Token = "0x6002E7C")]
		[Address(RVA = "0xE5FAF8", Offset = "0xE5FAF8", VA = "0xE5FAF8")]
		private void GenerateDungeonHeights()
		{
		}

		[Token(Token = "0x6002E7D")]
		[Address(RVA = "0xE66BCC", Offset = "0xE66BCC", VA = "0xE66BCC")]
		private bool FixDungeonCellHeights(Dictionary<int, CellHeightNode> CellHeightNodes)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E7E")]
		[Address(RVA = "0xE64758", Offset = "0xE64758", VA = "0xE64758")]
		private int HASH(int a, int b)
		{
			return default(int);
		}

		[Token(Token = "0x6002E7F")]
		[Address(RVA = "0xE61C74", Offset = "0xE61C74", VA = "0xE61C74")]
		private void RemoveAdjacentDoors()
		{
		}

		[Token(Token = "0x6002E80")]
		[Address(RVA = "0xE672F8", Offset = "0xE672F8", VA = "0xE672F8")]
		private bool ContainsAdjacencyPath(int cellIdA, int cellIdB, int maxDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E81")]
		[Address(RVA = "0xE68008", Offset = "0xE68008", VA = "0xE68008")]
		private void AddCorridorPadding(int x, int y, int z)
		{
		}

		[Token(Token = "0x6002E82")]
		[Address(RVA = "0xE601D0", Offset = "0xE601D0", VA = "0xE601D0")]
		private void ConnectStairs(int WeightThreshold)
		{
		}

		[Token(Token = "0x6002E83")]
		[Address(RVA = "0xE68594", Offset = "0xE68594", VA = "0xE68594", Slot = "12")]
		public override void OnVolumePositionModified(Volume volume, out IntVector newPositionOnGrid, out IntVector newSizeOnGrid)
		{
		}

		[Token(Token = "0x6002E84")]
		[Address(RVA = "0xE685D0", Offset = "0xE685D0", VA = "0xE685D0")]
		private void CheckAndMarkAdjacent(Cell cell, int otherCellX, int otherCellZ)
		{
		}

		[Token(Token = "0x6002E85")]
		[Address(RVA = "0xE5F6E4", Offset = "0xE5F6E4", VA = "0xE5F6E4")]
		public void GenerateAdjacencyLookup()
		{
		}

		[Token(Token = "0x6002E86")]
		[Address(RVA = "0xE686BC", Offset = "0xE686BC", VA = "0xE686BC", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6002E87")]
		[Address(RVA = "0xE6BFD4", Offset = "0xE6BFD4", VA = "0xE6BFD4")]
		private int GetElevation(Cell baseCell, int x, int z, out int OutYOffset)
		{
			return default(int);
		}

		[Token(Token = "0x6002E88")]
		[Address(RVA = "0xE6C0C0", Offset = "0xE6C0C0", VA = "0xE6C0C0")]
		private void OffsetTransformY(float Y, ref Matrix4x4 OutTransform)
		{
		}

		[Token(Token = "0x6002E89")]
		[Address(RVA = "0xE67C40", Offset = "0xE67C40", VA = "0xE67C40")]
		private bool GetStair(int ownerCell, int connectedToCell, ref StairInfo outStair)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E8A")]
		[Address(RVA = "0xE6815C", Offset = "0xE6815C", VA = "0xE6815C")]
		private bool ContainsStair(int ownerCellId, int connectedToCellId)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E8B")]
		[Address(RVA = "0xE6C0F4", Offset = "0xE6C0F4", VA = "0xE6C0F4")]
		private bool ContainsStair(Cell baseCell, int x, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E8C")]
		[Address(RVA = "0xE6C338", Offset = "0xE6C338", VA = "0xE6C338")]
		public bool V3Equal(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E8D")]
		[Address(RVA = "0xE6C36C", Offset = "0xE6C36C", VA = "0xE6C36C")]
		private bool CanDrawFence(Cell baseCell, int x, int z, out bool isElevatedFence, out bool drawPillar, out int elevationHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E8E")]
		[Address(RVA = "0xE6C468", Offset = "0xE6C468", VA = "0xE6C468")]
		private bool ShouldMakeDoor(int x1, int z1, int x2, int z2, out GridCellInfo cellA, out GridCellInfo cellB)
		{
			return default(bool);
		}

		[Token(Token = "0x6002E8F")]
		[Address(RVA = "0xE688C4", Offset = "0xE688C4", VA = "0xE688C4")]
		private void BuildMesh_Room(Cell cell)
		{
		}

		[Token(Token = "0x6002E90")]
		[Address(RVA = "0xE69D7C", Offset = "0xE69D7C", VA = "0xE69D7C")]
		private void BuildMesh_RoomDecoration(Cell cell)
		{
		}

		[Token(Token = "0x6002E91")]
		[Address(RVA = "0xE6AF70", Offset = "0xE6AF70", VA = "0xE6AF70")]
		private void BuildMesh_Corridor_BlockWalls(Cell cell)
		{
		}

		[Token(Token = "0x6002E92")]
		[Address(RVA = "0xE69D80", Offset = "0xE69D80", VA = "0xE69D80")]
		private void BuildMesh_Corridor(Cell cell)
		{
		}

		[Token(Token = "0x6002E93")]
		[Address(RVA = "0xE6C820", Offset = "0xE6C820", VA = "0xE6C820")]
		private int GetStairHeight(StairInfo stair)
		{
			return default(int);
		}

		[Token(Token = "0x6002E94")]
		[Address(RVA = "0xE6B6E8", Offset = "0xE6B6E8", VA = "0xE6B6E8")]
		private void RemoveOverlappingMarkers()
		{
		}

		[Token(Token = "0x6002E95")]
		[Address(RVA = "0xE6B3BC", Offset = "0xE6B3BC", VA = "0xE6B3BC")]
		private void BuildMesh_Stairs(Cell cell)
		{
		}

		[Token(Token = "0x6002E96")]
		[Address(RVA = "0xE6C518", Offset = "0xE6C518", VA = "0xE6C518")]
		private void BuildMesh_Floor(Cell cell)
		{
		}

		[Token(Token = "0x6002E97")]
		[Address(RVA = "0xE6C8D0", Offset = "0xE6C8D0", VA = "0xE6C8D0", Slot = "9")]
		public override void DebugDraw()
		{
		}

		[Token(Token = "0x6002E98")]
		[Address(RVA = "0xE6CC98", Offset = "0xE6CC98", VA = "0xE6CC98")]
		public GridDungeonBuilder()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200089E")]
	public enum GridDungeonWallType
	{
		[Token(Token = "0x4002A03")]
		WallsAsEdges,
		[Token(Token = "0x4002A04")]
		WallsAsTileBlocks
	}
	[Token(Token = "0x200089F")]
	public class GridDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x4002A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("This dungeon builder works on a grid based system and required modular mesh assets to be placed on each cell (floors, walls, doors etc). This important field specifies the size of the cell to use. This size is determined by the art asset used in the dungeon theme designed by the artist. In the demo, we have a floor mesh that is 400x400. The height of a floor is chosen to be 200 units as the stair mesh is 200 units high. Hence the defaults are set to 400x400x200. You should change this to the dimension of the modular asset your designer has created for the dungeon")]
		public UnityEngine.Vector3 GridCellSize;

		[Token(Token = "0x4002A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Changing this number would completely change the layout of the dungeon. This is the base random number seed that is used to build the dungeon. There is a convenience function to randomize this value (button labeled R)")]
		public int NumCells;

		[Token(Token = "0x4002A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This is how small a cell size can be. While generation, a cell is either converted to a room, corridor or is discarded completely. The Cell width / height is randomly chosen within this range")]
		public int MinCellSize;

		[Token(Token = "0x4002A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("This is how big a cell size can be. While generation, a cell is either converted to a room, corridor or is discarded completely. The Cell width / height is randomly chosen within this range")]
		public int MaxCellSize;

		[Token(Token = "0x4002A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If a cell size exceeds past this limit, it is converted into a room. After cells are promoted to rooms, all rooms are connected to each other through corridors (either directly or indirectly. See spanning tree later)")]
		public int RoomAreaThreshold;

		[Token(Token = "0x4002A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The aspect ratio of the cells (width to height ratio). Keeping this value near 0 would create square rooms. Bringing this close to 1 would create elongated / stretched rooms with a high width to height ratio")]
		public float RoomAspectDelta;

		[Token(Token = "0x4002A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The extra width to apply to one side of a corridor")]
		public int CorridorWidth;

		[Token(Token = "0x4002A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Tweak this value to increase / reduce the height variations (and stairs) in your dungeon. A value close to 0 reduces the height variation and increases as you approach 1. Increasing this value to a higher level might create dungeons  with no place for proper stair placement since there is too much height variation. A value of 0.2 to 0.4 seems good")]
		public float HeightVariationProbability;

		[Token(Token = "0x4002A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The number of logical floor units the dungeon height can vary. This determines how  high the dungeon's height can vary (e.g. max 2 floors high). Set this value depending  on the stair meshes you designer has created. In the sample demo, there are two stair meshes, one 200 units high (1 floor) and another 400 units high (2 floors). So the default is set to 2")]
		public int MaxAllowedStairHeight;

		[Token(Token = "0x4002A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Determines how many loops you would like to have in your dungeon. A value near 0 will create fewer loops creating linear dungeons. A value near 1 would create lots of loops, which would look unoriginal. Its good to allow a few loops so a value close to zero (like 0.2 should be good)")]
		public float SpanningTreeLoopProbability;

		[Token(Token = "0x4002A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The generator would add stairs to make different areas of the dungeon accessible. However, we do not want too many stairs. For e.g., before adding a stair in a particular elevated area, the generator would check if this area is already accessible from a nearby stair. If so, it would not add it. This tolerance parameter determines how far to look for an existing path before we can add a stair. Play with this parameter if you see too many stairs close to each other, or too few")]
		public float StairConnectionTollerance;

		[Token(Token = "0x4002A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Increase this value to remove nearby duplicate doors.  This value determines how many cell we can move to reach the two connected cells of a door if the door was removed")]
		public float DoorProximitySteps;

		[Token(Token = "0x4002A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The random number generator used in the dungeon generator does not use a uniform distribution. Instead it uses a normal distribution to get higher frequency of lower values and fewer higher values (and hence fewer room cells and a lot more corridor cells). Play with these parameters for different results")]
		public float NormalMean;

		[Token(Token = "0x4002A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The random number generator used in the dungeon generator does not use a uniform distribution. Instead it uses a normal distribution to get higher frequency of lower values and fewer higher values (and hence fewer room cells and a lot more corridor cells). Play with these parameters for different results")]
		public float NormalStd;

		[Token(Token = "0x4002A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The radius within which to spawn the initial cells before they are separated. Keep to a low value like 10-15")]
		public float InitialRoomRadius;

		[Token(Token = "0x4002A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Whether to treat walls as edges or as large tile blocks (like ground tiles)")]
		public GridDungeonWallType WallLayoutType;

		[Token(Token = "0x4002A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int FloorHeight;

		[Token(Token = "0x4002A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool UseFastCellDistribution;

		[Token(Token = "0x4002A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int CellDistributionWidth;

		[Token(Token = "0x4002A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int CellDistributionLength;

		[Token(Token = "0x6002EA3")]
		[Address(RVA = "0xE6CE24", Offset = "0xE6CE24", VA = "0xE6CE24")]
		public GridDungeonConfig()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20008A0")]
	public enum CellType
	{
		[Token(Token = "0x4002A1A")]
		Room,
		[Token(Token = "0x4002A1B")]
		Corridor,
		[Token(Token = "0x4002A1C")]
		CorridorPadding,
		[Token(Token = "0x4002A1D")]
		Unknown
	}
	[Serializable]
	[Token(Token = "0x20008A1")]
	public class StairInfo
	{
		[Token(Token = "0x4002A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public int OwnerCell;

		[Token(Token = "0x4002A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		public int ConnectedToCell;

		[Token(Token = "0x4002A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public UnityEngine.Vector3 Position;

		[Token(Token = "0x4002A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public Quaternion Rotation;

		[Token(Token = "0x4002A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		public IntVector IPosition;

		[Token(Token = "0x6002EA4")]
		[Address(RVA = "0xE67C38", Offset = "0xE67C38", VA = "0xE67C38")]
		public StairInfo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20008A2")]
	public class Cell
	{
		[Token(Token = "0x4002A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private int id;

		[Token(Token = "0x4002A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private Rectangle bounds;

		[Token(Token = "0x4002A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private CellType cellType;

		[Token(Token = "0x4002A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool userDefined;

		[Token(Token = "0x4002A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private HashSet<int> connectedRooms;

		[Token(Token = "0x4002A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private HashSet<int> fixedRoomConnections;

		[Token(Token = "0x4002A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private HashSet<int> adjacentCells;

		[Token(Token = "0x170006EB")]
		public int Id
		{
			[Token(Token = "0x6002EA7")]
			[Address(RVA = "0xE6CFC0", Offset = "0xE6CFC0", VA = "0xE6CFC0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002EA8")]
			[Address(RVA = "0xE6CFC8", Offset = "0xE6CFC8", VA = "0xE6CFC8")]
			set
			{
			}
		}

		[Token(Token = "0x170006EC")]
		public Rectangle Bounds
		{
			[Token(Token = "0x6002EA9")]
			[Address(RVA = "0xE6CFD0", Offset = "0xE6CFD0", VA = "0xE6CFD0")]
			get
			{
				return default(Rectangle);
			}
			[Token(Token = "0x6002EAA")]
			[Address(RVA = "0xE6CFE4", Offset = "0xE6CFE4", VA = "0xE6CFE4")]
			set
			{
			}
		}

		[Token(Token = "0x170006ED")]
		public CellType CellType
		{
			[Token(Token = "0x6002EAB")]
			[Address(RVA = "0xE6CFF8", Offset = "0xE6CFF8", VA = "0xE6CFF8")]
			get
			{
				return default(CellType);
			}
			[Token(Token = "0x6002EAC")]
			[Address(RVA = "0xE6D000", Offset = "0xE6D000", VA = "0xE6D000")]
			set
			{
			}
		}

		[Token(Token = "0x170006EE")]
		public bool UserDefined
		{
			[Token(Token = "0x6002EAE")]
			[Address(RVA = "0xE6D0FC", Offset = "0xE6D0FC", VA = "0xE6D0FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002EAF")]
			[Address(RVA = "0xE6D104", Offset = "0xE6D104", VA = "0xE6D104")]
			set
			{
			}
		}

		[Token(Token = "0x170006EF")]
		public HashSet<int> ConnectedRooms
		{
			[Token(Token = "0x6002EB0")]
			[Address(RVA = "0xE6D110", Offset = "0xE6D110", VA = "0xE6D110")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002EB1")]
			[Address(RVA = "0xE6D118", Offset = "0xE6D118", VA = "0xE6D118")]
			set
			{
			}
		}

		[Token(Token = "0x170006F0")]
		public HashSet<int> FixedRoomConnections
		{
			[Token(Token = "0x6002EB2")]
			[Address(RVA = "0xE6D120", Offset = "0xE6D120", VA = "0xE6D120")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002EB3")]
			[Address(RVA = "0xE6D128", Offset = "0xE6D128", VA = "0xE6D128")]
			set
			{
			}
		}

		[Token(Token = "0x170006F1")]
		public HashSet<int> AdjacentCells
		{
			[Token(Token = "0x6002EB4")]
			[Address(RVA = "0xE6D130", Offset = "0xE6D130", VA = "0xE6D130")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002EB5")]
			[Address(RVA = "0xE6D138", Offset = "0xE6D138", VA = "0xE6D138")]
			set
			{
			}
		}

		[Token(Token = "0x170006F2")]
		public IntVector Center
		{
			[Token(Token = "0x6002EB6")]
			[Address(RVA = "0xE63A8C", Offset = "0xE63A8C", VA = "0xE63A8C")]
			get
			{
				return default(IntVector);
			}
		}

		[Token(Token = "0x170006F3")]
		public UnityEngine.Vector3 CenterF
		{
			[Token(Token = "0x6002EB7")]
			[Address(RVA = "0xE63B40", Offset = "0xE63B40", VA = "0xE63B40")]
			get
			{
				return default(UnityEngine.Vector3);
			}
		}

		[Token(Token = "0x6002EA5")]
		[Address(RVA = "0xE62FD0", Offset = "0xE62FD0", VA = "0xE62FD0")]
		public Cell()
		{
		}

		[Token(Token = "0x6002EA6")]
		[Address(RVA = "0xE6CE98", Offset = "0xE6CE98", VA = "0xE6CE98")]
		public Cell(int x, int z, int width, int length)
		{
		}

		[Token(Token = "0x6002EAD")]
		[Address(RVA = "0xE6D008", Offset = "0xE6D008", VA = "0xE6D008")]
		public Bounds GetWorldBounds(UnityEngine.Vector3 gridSize)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6002EB8")]
		[Address(RVA = "0xE6D140", Offset = "0xE6D140", VA = "0xE6D140", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002EB9")]
		[Address(RVA = "0xE6D1CC", Offset = "0xE6D1CC", VA = "0xE6D1CC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20008A3")]
	public class CellDoor
	{
		[Token(Token = "0x4002A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private IntVector[] adjacentTiles;

		[Token(Token = "0x4002A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool enabled;

		[Token(Token = "0x4002A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int[] adjacentCells;

		[Token(Token = "0x170006F4")]
		public IntVector[] AdjacentTiles
		{
			[Token(Token = "0x6002EBA")]
			[Address(RVA = "0xE6D1D4", Offset = "0xE6D1D4", VA = "0xE6D1D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006F5")]
		public bool Enabled
		{
			[Token(Token = "0x6002EBB")]
			[Address(RVA = "0xE6D1DC", Offset = "0xE6D1DC", VA = "0xE6D1DC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002EBC")]
			[Address(RVA = "0xE6D1E4", Offset = "0xE6D1E4", VA = "0xE6D1E4")]
			set
			{
			}
		}

		[Token(Token = "0x170006F6")]
		public int[] AdjacentCells
		{
			[Token(Token = "0x6002EBD")]
			[Address(RVA = "0xE6D1F0", Offset = "0xE6D1F0", VA = "0xE6D1F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002EBE")]
			[Address(RVA = "0xE6D1F8", Offset = "0xE6D1F8", VA = "0xE6D1F8")]
			set
			{
			}
		}

		[Token(Token = "0x6002EBF")]
		[Address(RVA = "0xE6D200", Offset = "0xE6D200", VA = "0xE6D200", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002EC0")]
		[Address(RVA = "0xE6D2C4", Offset = "0xE6D2C4", VA = "0xE6D2C4")]
		public CellDoor()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20008A4")]
	public struct IntVector2Key
	{
		[Token(Token = "0x4002A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public IntVector a;

		[Token(Token = "0x4002A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[SerializeField]
		public IntVector b;

		[Token(Token = "0x6002EC1")]
		[Address(RVA = "0xE6D350", Offset = "0xE6D350", VA = "0xE6D350")]
		public IntVector2Key(IntVector a, IntVector b)
		{
		}

		[Token(Token = "0x6002EC2")]
		[Address(RVA = "0xE6D364", Offset = "0xE6D364", VA = "0xE6D364", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6002EC3")]
		[Address(RVA = "0xE6D474", Offset = "0xE6D474", VA = "0xE6D474", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20008A5")]
	public class DoorManager
	{
		[Token(Token = "0x4002A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Dictionary<IntVector2Key, CellDoor> doorLookupCache;

		[Token(Token = "0x4002A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<CellDoor> doors;

		[Token(Token = "0x170006F7")]
		public CellDoor[] Doors
		{
			[Token(Token = "0x6002EC9")]
			[Address(RVA = "0xE672A8", Offset = "0xE672A8", VA = "0xE672A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002EC4")]
		[Address(RVA = "0xE62024", Offset = "0xE62024", VA = "0xE62024")]
		public void Clear()
		{
		}

		[Token(Token = "0x6002EC5")]
		[Address(RVA = "0xE677D0", Offset = "0xE677D0", VA = "0xE677D0")]
		public void RemoveDoor(CellDoor door)
		{
		}

		[Token(Token = "0x6002EC6")]
		[Address(RVA = "0xE65244", Offset = "0xE65244", VA = "0xE65244")]
		public CellDoor CreateDoor(IntVector p1, IntVector p2, int cellId1, int cellId2)
		{
			return null;
		}

		[Token(Token = "0x6002EC7")]
		[Address(RVA = "0xE67E20", Offset = "0xE67E20", VA = "0xE67E20")]
		public bool ContainsDoorBetweenCells(int cellA, int cellB)
		{
			return default(bool);
		}

		[Token(Token = "0x6002EC8")]
		[Address(RVA = "0xE68334", Offset = "0xE68334", VA = "0xE68334")]
		public bool ContainsDoor(int x1, int z1, int x2, int z2)
		{
			return default(bool);
		}

		[Token(Token = "0x6002ECA")]
		[Address(RVA = "0xE6D4A8", Offset = "0xE6D4A8", VA = "0xE6D4A8")]
		public DoorManager()
		{
		}
	}
	[Token(Token = "0x20008A6")]
	public class GridDungeonModel : DungeonModel
	{
		[Token(Token = "0x4002A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[SerializeField]
		public DoorManager DoorManager;

		[Token(Token = "0x4002A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public GridDungeonConfig Config;

		[Token(Token = "0x4002A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		[SerializeField]
		public List<Cell> Cells;

		[Token(Token = "0x4002A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		public Dictionary<int, List<StairInfo>> CellStairs;

		[Token(Token = "0x4002A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Dictionary<int, Dictionary<int, GridCellInfo>> GridCellInfoLookup;

		[Token(Token = "0x4002A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Dictionary<int, Cell> CellLookup;

		[Token(Token = "0x170006F8")]
		public CellDoor[] Doors
		{
			[Token(Token = "0x6002ECD")]
			[Address(RVA = "0xE6EA5C", Offset = "0xE6EA5C", VA = "0xE6EA5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002ECB")]
		[Address(RVA = "0xE6E568", Offset = "0xE6E568", VA = "0xE6E568")]
		public GridCellInfo GetGridCellLookup(int x, int z)
		{
			return null;
		}

		[Token(Token = "0x6002ECC")]
		[Address(RVA = "0xE6E698", Offset = "0xE6E698", VA = "0xE6E698")]
		public void BuildSpatialCellLookup()
		{
		}

		[Token(Token = "0x6002ECE")]
		[Address(RVA = "0xE6EA78", Offset = "0xE6EA78", VA = "0xE6EA78")]
		public void BuildCellLookup()
		{
		}

		[Token(Token = "0x6002ECF")]
		[Address(RVA = "0xE6EC18", Offset = "0xE6EC18", VA = "0xE6EC18")]
		public Cell GetCell(int Id)
		{
			return null;
		}

		[Token(Token = "0x6002ED0")]
		[Address(RVA = "0xE6ECAC", Offset = "0xE6ECAC", VA = "0xE6ECAC")]
		public Cell FindCellByPosition(IntVector position)
		{
			return null;
		}

		[Token(Token = "0x6002ED1")]
		[Address(RVA = "0xE6EE50", Offset = "0xE6EE50", VA = "0xE6EE50", Slot = "4")]
		public override void ResetModel()
		{
		}

		[Token(Token = "0x6002ED2")]
		[Address(RVA = "0xE6EF14", Offset = "0xE6EF14", VA = "0xE6EF14")]
		public bool ContainsStairAtLocation(int x, int z)
		{
			return default(bool);
		}

		[Token(Token = "0x6002ED3")]
		[Address(RVA = "0xE6F1F8", Offset = "0xE6F1F8", VA = "0xE6F1F8")]
		public StairInfo GetStairAtLocation(int x, int z)
		{
			return null;
		}

		[Token(Token = "0x6002ED4")]
		[Address(RVA = "0xE6F4D8", Offset = "0xE6F4D8", VA = "0xE6F4D8")]
		public bool ContainsStair(int cellA, int cellB)
		{
			return default(bool);
		}

		[Token(Token = "0x6002ED5")]
		[Address(RVA = "0xE6F51C", Offset = "0xE6F51C", VA = "0xE6F51C")]
		private bool CheckContainStair(int cellA, int cellB)
		{
			return default(bool);
		}

		[Token(Token = "0x6002ED6")]
		[Address(RVA = "0xE6F6E4", Offset = "0xE6F6E4", VA = "0xE6F6E4")]
		public GridDungeonModel()
		{
		}
	}
	[Token(Token = "0x20008A7")]
	public class GridDungeonModelUtils
	{
		[Token(Token = "0x20008A8")]
		private struct LongestPathBFSData
		{
			[Token(Token = "0x4002A37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Cell cell;

			[Token(Token = "0x4002A38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int length;
		}

		[Token(Token = "0x6002ED7")]
		[Address(RVA = "0xE6F85C", Offset = "0xE6F85C", VA = "0xE6F85C")]
		public static Cell[] FindFurthestRooms(GridDungeonModel model)
		{
			return null;
		}

		[Token(Token = "0x6002ED8")]
		[Address(RVA = "0xE6FD8C", Offset = "0xE6FD8C", VA = "0xE6FD8C")]
		public GridDungeonModelUtils()
		{
		}
	}
	[Token(Token = "0x20008A9")]
	public class LandscapeTransformerGrid : LandscapeTransformerBase
	{
		[Token(Token = "0x4002A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LandscapeTexture[] textures;

		[Token(Token = "0x4002A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float layoutLevelOffset;

		[Token(Token = "0x4002A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int smoothingDistance;

		[Token(Token = "0x4002A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve roomElevationCurve;

		[Token(Token = "0x4002A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve corridorElevationCurve;

		[Token(Token = "0x4002A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int roadBlurDistance;

		[Token(Token = "0x4002A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float corridorBlurThreshold;

		[Token(Token = "0x4002A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float roomBlurThreshold;

		[Token(Token = "0x6002ED9")]
		[Address(RVA = "0xE6FD94", Offset = "0xE6FD94", VA = "0xE6FD94", Slot = "10")]
		protected override void BuildTerrain(DungeonModel model)
		{
		}

		[Token(Token = "0x6002EDA")]
		[Address(RVA = "0xE70584", Offset = "0xE70584", VA = "0xE70584")]
		private Rectangle EncompassCellBounds(Rectangle cellBounds, Rectangle bounds)
		{
			return default(Rectangle);
		}

		[Token(Token = "0x6002EDB")]
		[Address(RVA = "0xE705E8", Offset = "0xE705E8", VA = "0xE705E8", Slot = "11")]
		protected override Rect GetDungeonBounds(DungeonModel model)
		{
			return default(Rect);
		}

		[Token(Token = "0x6002EDC")]
		[Address(RVA = "0xE6FEAC", Offset = "0xE6FEAC", VA = "0xE6FEAC")]
		private void SetupTextures()
		{
		}

		[Token(Token = "0x6002EDD")]
		[Address(RVA = "0xE700E4", Offset = "0xE700E4", VA = "0xE700E4")]
		private void UpdateHeights(GridDungeonModel model)
		{
		}

		[Token(Token = "0x6002EDE")]
		[Address(RVA = "0xE709F8", Offset = "0xE709F8", VA = "0xE709F8", Slot = "12")]
		protected virtual void ApplySmoothing(GridDungeonModel model, LandscapeDataRasterizer rasterizer)
		{
		}

		[Token(Token = "0x6002EDF")]
		[Address(RVA = "0xE70434", Offset = "0xE70434", VA = "0xE70434")]
		private void UpdateTerrainTextures(GridDungeonModel model)
		{
		}

		[Token(Token = "0x6002EE0")]
		[Address(RVA = "0xE716A0", Offset = "0xE716A0", VA = "0xE716A0")]
		private void RemoveFoliage(GridDungeonModel model)
		{
		}

		[Token(Token = "0x6002EE1")]
		[Address(RVA = "0xE70C84", Offset = "0xE70C84", VA = "0xE70C84")]
		private void UpdateBaseTexture(GridDungeonModel model, float[,,] map)
		{
		}

		[Token(Token = "0x6002EE2")]
		[Address(RVA = "0xE71464", Offset = "0xE71464", VA = "0xE71464")]
		private void UpdateCliffTexture(float[,,] map)
		{
		}

		[Token(Token = "0x6002EE3")]
		[Address(RVA = "0xE71A64", Offset = "0xE71A64", VA = "0xE71A64")]
		private int GetTextureIndex(LandscapeTextureType textureType)
		{
			return default(int);
		}

		[Token(Token = "0x6002EE4")]
		[Address(RVA = "0xE71BD0", Offset = "0xE71BD0", VA = "0xE71BD0")]
		public LandscapeTransformerGrid()
		{
		}
	}
	[Token(Token = "0x20008AA")]
	public class MarkerEmitterCornerBeautifier : DungeonMarkerEmitter
	{
		[Token(Token = "0x20008AB")]
		private class CellSpatialConfig
		{
			[Token(Token = "0x4002A42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string markerName;

			[Token(Token = "0x4002A43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int[] neighborConfig;

			[Token(Token = "0x6002EEB")]
			[Address(RVA = "0xE72CB4", Offset = "0xE72CB4", VA = "0xE72CB4")]
			public CellSpatialConfig(string markerName, int[] neighborConfig)
			{
			}
		}

		[Token(Token = "0x4002A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static CellSpatialConfig[] CornerConfigs;

		[Token(Token = "0x6002EE5")]
		[Address(RVA = "0xE71BF0", Offset = "0xE71BF0", VA = "0xE71BF0", Slot = "4")]
		public override void EmitMarkers(DungeonBuilder builder)
		{
		}

		[Token(Token = "0x6002EE6")]
		[Address(RVA = "0xE71F4C", Offset = "0xE71F4C", VA = "0xE71F4C")]
		private void EmitForPoint(DungeonBuilder builder, GridDungeonModel model, IntVector point)
		{
		}

		[Token(Token = "0x6002EE7")]
		[Address(RVA = "0xE72060", Offset = "0xE72060", VA = "0xE72060")]
		private bool ConfigMatches(GridDungeonModel model, IntVector point, CellSpatialConfig config)
		{
			return default(bool);
		}

		[Token(Token = "0x6002EE8")]
		[Address(RVA = "0xE7216C", Offset = "0xE7216C", VA = "0xE7216C")]
		private void EmitCornerMarker(DungeonBuilder builder, GridDungeonModel model, IntVector point, string markerName)
		{
		}

		[Token(Token = "0x6002EE9")]
		[Address(RVA = "0xE72370", Offset = "0xE72370", VA = "0xE72370")]
		public MarkerEmitterCornerBeautifier()
		{
		}
	}
	[Token(Token = "0x20008AC")]
	public class MarkerEmitterEmptySpace : DungeonMarkerEmitter
	{
		[Token(Token = "0x4002A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int distanceToCover;

		[Token(Token = "0x4002A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string markerName;

		[Token(Token = "0x4002A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string indexedMarkerNamePrefix;

		[Token(Token = "0x4002A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool overrideY;

		[Token(Token = "0x4002A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string overrideYBlackboardKey;

		[Token(Token = "0x6002EEC")]
		[Address(RVA = "0xE72CE0", Offset = "0xE72CE0", VA = "0xE72CE0", Slot = "4")]
		public override void EmitMarkers(DungeonBuilder builder)
		{
		}

		[Token(Token = "0x6002EED")]
		[Address(RVA = "0xE733AC", Offset = "0xE733AC", VA = "0xE733AC")]
		public MarkerEmitterEmptySpace()
		{
		}
	}
	[Token(Token = "0x20008AD")]
	public class MarkerEmitterFindLowestPoint : DungeonMarkerEmitter
	{
		[Token(Token = "0x4002A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string MarkerName;

		[Token(Token = "0x4002A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string BlackboardKeyLowestY;

		[Token(Token = "0x6002EEE")]
		[Address(RVA = "0xE73444", Offset = "0xE73444", VA = "0xE73444", Slot = "4")]
		public override void EmitMarkers(DungeonBuilder builder)
		{
		}

		[Token(Token = "0x6002EEF")]
		[Address(RVA = "0xE739B4", Offset = "0xE739B4", VA = "0xE739B4")]
		public MarkerEmitterFindLowestPoint()
		{
		}
	}
	[Token(Token = "0x20008AE")]
	public class MarkerEmitterFreeSpaceDecorator : DungeonMarkerEmitter
	{
		[Token(Token = "0x4002A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int distanceFromEdge;

		[Token(Token = "0x4002A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string markerName;

		[Token(Token = "0x4002A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float pushDownAmount;

		[Token(Token = "0x4002A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Vector3[] pushDownTestAxis;

		[Token(Token = "0x6002EF0")]
		[Address(RVA = "0xE73A28", Offset = "0xE73A28", VA = "0xE73A28", Slot = "4")]
		public override void EmitMarkers(DungeonBuilder builder)
		{
		}

		[Token(Token = "0x6002EF1")]
		[Address(RVA = "0xE74474", Offset = "0xE74474", VA = "0xE74474")]
		public MarkerEmitterFreeSpaceDecorator()
		{
		}
	}
	[Token(Token = "0x20008AF")]
	public class MarkerEmitterGridWall2D : DungeonMarkerEmitter
	{
		[Token(Token = "0x20008B0")]
		public enum WallPushType
		{
			[Token(Token = "0x4002A52")]
			WallsOutside,
			[Token(Token = "0x4002A53")]
			WallsInside
		}

		[Token(Token = "0x20008B1")]
		private class Wall2DMarkerInfo
		{
			[Token(Token = "0x4002A54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string markerName;

			[Token(Token = "0x4002A55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Matrix4x4 transform;

			[Token(Token = "0x4002A56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public IntVector gridPosition;

			[Token(Token = "0x4002A57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public int cellId;

			[Token(Token = "0x6002EFC")]
			[Address(RVA = "0xE763F0", Offset = "0xE763F0", VA = "0xE763F0")]
			public Wall2DMarkerInfo()
			{
			}
		}

		[Token(Token = "0x4002A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WallPushType wallPushType;

		[Token(Token = "0x4002A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool fixCorners;

		[Token(Token = "0x6002EF2")]
		[Address(RVA = "0xE74500", Offset = "0xE74500", VA = "0xE74500", Slot = "4")]
		public override void EmitMarkers(DungeonBuilder builder)
		{
		}

		[Token(Token = "0x6002EF3")]
		[Address(RVA = "0xE75D84", Offset = "0xE75D84", VA = "0xE75D84")]
		private void AddGround2DMarkers(List<Wall2DMarkerInfo> markerList, Dictionary<string, HashSet<IntVector>> occupied, LevelMarkerList gridMarkers, UnityEngine.Vector3 gridSize)
		{
		}

		[Token(Token = "0x6002EF4")]
		[Address(RVA = "0xE76320", Offset = "0xE76320", VA = "0xE76320")]
		private HashSet<IntVector> GetHashSet(string name, Dictionary<string, HashSet<IntVector>> occupied)
		{
			return null;
		}

		[Token(Token = "0x6002EF5")]
		[Address(RVA = "0xE752DC", Offset = "0xE752DC", VA = "0xE752DC")]
		private void FixCornerWalls(List<Wall2DMarkerInfo> wall2DMarkers, LevelMarkerList gridMarkers, Dictionary<string, HashSet<IntVector>> occupied, UnityEngine.Vector3 gridSize)
		{
		}

		[Token(Token = "0x6002EF6")]
		[Address(RVA = "0xE765A0", Offset = "0xE765A0", VA = "0xE765A0")]
		private void InsertCornerMarker(int cellId, IntVector gridPosition, UnityEngine.Vector3 gridSize, List<Wall2DMarkerInfo> wall2DMarkers, Dictionary<string, HashSet<IntVector>> occupied)
		{
		}

		[Token(Token = "0x6002EF7")]
		[Address(RVA = "0xE767E0", Offset = "0xE767E0", VA = "0xE767E0")]
		private bool ContainsWall2D(HashSet<IntVector> walls, HashSet<IntVector> doors, IntVector position)
		{
			return default(bool);
		}

		[Token(Token = "0x6002EF8")]
		[Address(RVA = "0xE763F8", Offset = "0xE763F8", VA = "0xE763F8")]
		private bool HasValidCornerNeighbors(HashSet<IntVector> walls, HashSet<IntVector> doors, IntVector center, int dx1, int dz1, int dx2, int dz2)
		{
			return default(bool);
		}

		[Token(Token = "0x6002EF9")]
		[Address(RVA = "0xE750F4", Offset = "0xE750F4", VA = "0xE750F4")]
		private void RegisterMarker(Wall2DMarkerInfo markerInfo, List<Wall2DMarkerInfo> markerList, Dictionary<string, HashSet<IntVector>> occupied)
		{
		}

		[Token(Token = "0x6002EFA")]
		[Address(RVA = "0xE74DAC", Offset = "0xE74DAC", VA = "0xE74DAC")]
		private Wall2DMarkerInfo GetMarker2D(PropSocket prop, string markerName, UnityEngine.Vector3 gridSize)
		{
			return null;
		}

		[Token(Token = "0x6002EFB")]
		[Address(RVA = "0xE76880", Offset = "0xE76880", VA = "0xE76880")]
		public MarkerEmitterGridWall2D()
		{
		}
	}
	[Token(Token = "0x20008B2")]
	public class GridItemDoorMetadata : MonoBehaviour
	{
		[Token(Token = "0x4002A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int cellA;

		[Token(Token = "0x4002A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int cellB;

		[Token(Token = "0x6002EFD")]
		[Address(RVA = "0xE76890", Offset = "0xE76890", VA = "0xE76890")]
		public GridItemDoorMetadata()
		{
		}
	}
	[Token(Token = "0x20008B3")]
	public class GridItemMetadataHandler : DungeonItemSpawnListener
	{
		[Token(Token = "0x6002EFE")]
		[Address(RVA = "0xE76898", Offset = "0xE76898", VA = "0xE76898", Slot = "4")]
		public override void SetMetadata(GameObject dungeonItem, DungeonNodeSpawnData spawnData)
		{
		}

		[Token(Token = "0x6002EFF")]
		[Address(RVA = "0xE76A8C", Offset = "0xE76A8C", VA = "0xE76A8C")]
		public GridItemMetadataHandler()
		{
		}
	}
	[Token(Token = "0x20008B4")]
	[ExecuteInEditMode]
	public class DungeonPaintModeGrid : DungeonPaintMode
	{
		[Token(Token = "0x4002A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int cursorLogicalHeight;

		[Token(Token = "0x4002A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float overlayOpacity;

		[Token(Token = "0x4002A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool mode2D;

		[Token(Token = "0x4002A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int brushSize;

		[Token(Token = "0x4002A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GridDungeonModel gridModel;

		[Token(Token = "0x6002F00")]
		[Address(RVA = "0xE76A94", Offset = "0xE76A94", VA = "0xE76A94")]
		public float GetCursorHeight()
		{
			return default(float);
		}

		[Token(Token = "0x6002F01")]
		[Address(RVA = "0xE76B6C", Offset = "0xE76B6C", VA = "0xE76B6C")]
		public void SetElevationDelta(int delta)
		{
		}

		[Token(Token = "0x6002F02")]
		[Address(RVA = "0xE76B7C", Offset = "0xE76B7C", VA = "0xE76B7C")]
		public GridDungeonModel GetDungeonModelGrid()
		{
			return null;
		}

		[Token(Token = "0x6002F03")]
		[Address(RVA = "0xE76D10", Offset = "0xE76D10", VA = "0xE76D10")]
		public DungeonPaintModeGrid()
		{
		}
	}
	[Token(Token = "0x20008B5")]
	public class GridDungeonQuery : DungeonEventListener
	{
		[Token(Token = "0x4002A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public Dictionary<int, GameObject[]> DoorObjectsByCellId;

		[Token(Token = "0x6002F04")]
		[Address(RVA = "0xE76D2C", Offset = "0xE76D2C", VA = "0xE76D2C", Slot = "7")]
		public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x6002F05")]
		[Address(RVA = "0xE77260", Offset = "0xE77260", VA = "0xE77260", Slot = "8")]
		public override void OnPreDungeonDestroy(Dungeon dungeon)
		{
		}

		[Token(Token = "0x6002F06")]
		[Address(RVA = "0xE76D30", Offset = "0xE76D30", VA = "0xE76D30")]
		public void GenerateQuery()
		{
		}

		[Token(Token = "0x6002F07")]
		[Address(RVA = "0xE772B0", Offset = "0xE772B0", VA = "0xE772B0")]
		public void GetDoorsForCell(int cellId, out GameObject[] doorGameObjects)
		{
		}

		[Token(Token = "0x6002F08")]
		[Address(RVA = "0xE7736C", Offset = "0xE7736C", VA = "0xE7736C")]
		public bool GetCellAtPosition(UnityEngine.Vector3 position, out Cell outCell)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F09")]
		[Address(RVA = "0xE7760C", Offset = "0xE7760C", VA = "0xE7760C")]
		public Bounds GetCellBounds(Cell cell)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6002F0A")]
		[Address(RVA = "0xE77704", Offset = "0xE77704", VA = "0xE77704")]
		public Cell GetRandomCell()
		{
			return null;
		}

		[Token(Token = "0x6002F0B")]
		[Address(RVA = "0xE777FC", Offset = "0xE777FC", VA = "0xE777FC")]
		public Cell[] FindFurthestRooms()
		{
			return null;
		}

		[Token(Token = "0x6002F0C")]
		[Address(RVA = "0xE77848", Offset = "0xE77848", VA = "0xE77848")]
		public GridDungeonQuery()
		{
		}
	}
	[Token(Token = "0x20008B6")]
	public class GridBuilderUtils
	{
		[Token(Token = "0x6002F0D")]
		[Address(RVA = "0xE778C4", Offset = "0xE778C4", VA = "0xE778C4")]
		public static bool IsCorridor(CellType type)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F0E")]
		[Address(RVA = "0xE778D4", Offset = "0xE778D4", VA = "0xE778D4")]
		public static bool IsRoomCorridor(CellType typeA, CellType typeB)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F0F")]
		[Address(RVA = "0xE77908", Offset = "0xE77908", VA = "0xE77908")]
		public static void GetRoomConnectionPointsForTiledMode(Rectangle bounds, ref List<IntVector> positions, bool skipCornersOnPathSelection)
		{
		}

		[Token(Token = "0x6002F10")]
		[Address(RVA = "0xE77C90", Offset = "0xE77C90", VA = "0xE77C90")]
		public static bool AreAdjacentCellsReachable(GridDungeonModel gridModel, int cellIdA, int cellIdB)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F11")]
		[Address(RVA = "0xE77D40", Offset = "0xE77D40", VA = "0xE77D40")]
		public static int[] GetCellCluster(GridDungeonModel gridModel, int sampleCellId)
		{
			return null;
		}

		[Token(Token = "0x6002F12")]
		[Address(RVA = "0xE78198", Offset = "0xE78198", VA = "0xE78198")]
		public static void GetAdjacentCorridors(GridDungeonModel gridModel, int startCellId, ref List<int> OutConnectedCorridors, ref List<int> OutConnectedRooms)
		{
		}

		[Token(Token = "0x6002F13")]
		[Address(RVA = "0xE785C8", Offset = "0xE785C8", VA = "0xE785C8")]
		public GridBuilderUtils()
		{
		}
	}
	[Token(Token = "0x20008B7")]
	public class GridDebugDrawUtils
	{
		[Token(Token = "0x6002F14")]
		[Address(RVA = "0xE785D0", Offset = "0xE785D0", VA = "0xE785D0")]
		public static void DrawCell(Cell cell, Color color, UnityEngine.Vector3 gridScale, bool mode2D)
		{
		}

		[Token(Token = "0x6002F15")]
		[Address(RVA = "0xE7860C", Offset = "0xE7860C", VA = "0xE7860C")]
		public static void DrawCellId(Cell cell, UnityEngine.Vector3 gridScale, bool mode2D)
		{
		}

		[Token(Token = "0x6002F16")]
		[Address(RVA = "0xE78784", Offset = "0xE78784", VA = "0xE78784")]
		public static void DrawCellConnectionPoints(Cell cell, GridDungeonModel model, Color color, bool mode2D)
		{
		}

		[Token(Token = "0x6002F17")]
		[Address(RVA = "0xE78A3C", Offset = "0xE78A3C", VA = "0xE78A3C")]
		public static void DrawAdjacentCells(Cell cell, GridDungeonModel model, Color color, bool mode2D)
		{
		}

		[Token(Token = "0x6002F18")]
		[Address(RVA = "0xE78E8C", Offset = "0xE78E8C", VA = "0xE78E8C")]
		public GridDebugDrawUtils()
		{
		}
	}
	[Token(Token = "0x20008B8")]
	public class PlatformVolume : Volume
	{
		[Token(Token = "0x4002A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public CellType cellType;

		[Token(Token = "0x6002F19")]
		[Address(RVA = "0xE78E94", Offset = "0xE78E94", VA = "0xE78E94")]
		public PlatformVolume()
		{
		}
	}
}
namespace DungeonArchitect.Builders.Grid.SpatialConstraints
{
	[Token(Token = "0x20008B9")]
	public class SpatialConstraintProcessorGrid2D : SpatialConstraintProcessor
	{
		[Token(Token = "0x6002F1A")]
		[Address(RVA = "0xE78EA4", Offset = "0xE78EA4", VA = "0xE78EA4", Slot = "4")]
		public override SpatialConstraintRuleDomain GetDomain(SpatialConstraintProcessorContext context)
		{
			return null;
		}

		[Token(Token = "0x6002F1B")]
		[Address(RVA = "0xE78F70", Offset = "0xE78F70", VA = "0xE78F70")]
		public SpatialConstraintProcessorGrid2D()
		{
		}
	}
	[Token(Token = "0x20008BA")]
	public class SpatialConstraintProcessorGrid3D : SpatialConstraintProcessor
	{
		[Token(Token = "0x6002F1C")]
		[Address(RVA = "0xE78F78", Offset = "0xE78F78", VA = "0xE78F78", Slot = "4")]
		public override SpatialConstraintRuleDomain GetDomain(SpatialConstraintProcessorContext context)
		{
			return null;
		}

		[Token(Token = "0x6002F1D")]
		[Address(RVA = "0xE79044", Offset = "0xE79044", VA = "0xE79044")]
		public SpatialConstraintProcessorGrid3D()
		{
		}
	}
	[Token(Token = "0x20008BB")]
	public enum ConstraintRuleHeightDifferenceType
	{
		[Token(Token = "0x4002A62")]
		IsSameHeight,
		[Token(Token = "0x4002A63")]
		IsAboveReferenceNode,
		[Token(Token = "0x4002A64")]
		IsBelowReferenceNode
	}
	[Token(Token = "0x20008BC")]
	[RuleMeta(name = "Common/Height Difference")]
	public class ConstraintRuleHeightDifference : ConstraintRule
	{
		[Token(Token = "0x4002A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public string markerName;

		[Token(Token = "0x4002A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public float markerSearchRadius;

		[Token(Token = "0x4002A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		public float heightCheckTollerance;

		[Token(Token = "0x4002A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public ConstraintRuleHeightDifferenceType heightFunction;

		[Token(Token = "0x6002F1E")]
		[Address(RVA = "0xE7904C", Offset = "0xE7904C", VA = "0xE7904C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002F1F")]
		[Address(RVA = "0xE790AC", Offset = "0xE790AC", VA = "0xE790AC", Slot = "5")]
		public override bool Process(ConstraintRuleContext context)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F20")]
		[Address(RVA = "0xE79160", Offset = "0xE79160", VA = "0xE79160")]
		private PropSocket GetMarkerSearchResult(ConstraintRuleContext context)
		{
			return null;
		}

		[Token(Token = "0x6002F21")]
		[Address(RVA = "0xE79514", Offset = "0xE79514", VA = "0xE79514")]
		public ConstraintRuleHeightDifference()
		{
		}
	}
	[Token(Token = "0x20008BD")]
	[RuleMeta(name = "Common/Marker Exists")]
	public class ConstraintRuleMarkerExists : ConstraintRule
	{
		[Token(Token = "0x4002A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public string markerName;

		[Token(Token = "0x4002A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public float searchRadius;

		[Token(Token = "0x6002F22")]
		[Address(RVA = "0xE79528", Offset = "0xE79528", VA = "0xE79528", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6002F23")]
		[Address(RVA = "0xE79588", Offset = "0xE79588", VA = "0xE79588", Slot = "5")]
		public override bool Process(ConstraintRuleContext context)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F24")]
		[Address(RVA = "0xE79944", Offset = "0xE79944", VA = "0xE79944")]
		public ConstraintRuleMarkerExists()
		{
		}
	}
	[Token(Token = "0x20008BE")]
	public class SpatialConstraintProcessorGridFlow2D : SpatialConstraintProcessor
	{
		[Token(Token = "0x6002F25")]
		[Address(RVA = "0xE79958", Offset = "0xE79958", VA = "0xE79958", Slot = "4")]
		public override SpatialConstraintRuleDomain GetDomain(SpatialConstraintProcessorContext context)
		{
			return null;
		}

		[Token(Token = "0x6002F26")]
		[Address(RVA = "0xE79A24", Offset = "0xE79A24", VA = "0xE79A24")]
		public SpatialConstraintProcessorGridFlow2D()
		{
		}
	}
	[Token(Token = "0x20008BF")]
	public class SpatialConstraintProcessorGridFlow3D : SpatialConstraintProcessor
	{
		[Token(Token = "0x6002F27")]
		[Address(RVA = "0xE79A2C", Offset = "0xE79A2C", VA = "0xE79A2C", Slot = "4")]
		public override SpatialConstraintRuleDomain GetDomain(SpatialConstraintProcessorContext context)
		{
			return null;
		}

		[Token(Token = "0x6002F28")]
		[Address(RVA = "0xE79AF8", Offset = "0xE79AF8", VA = "0xE79AF8")]
		public SpatialConstraintProcessorGridFlow3D()
		{
		}
	}
}
namespace DungeonArchitect.Builders.FloorPlan
{
	[Token(Token = "0x20008C0")]
	public class FloorPlanMarkers
	{
		[Token(Token = "0x4002A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string MARKER_GROUND;

		[Token(Token = "0x4002A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string MARKER_CEILING;

		[Token(Token = "0x4002A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string MARKER_WALL;

		[Token(Token = "0x4002A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string MARKER_DOOR;

		[Token(Token = "0x4002A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string MARKER_BUILDING_WALL;

		[Token(Token = "0x6002F29")]
		[Address(RVA = "0xE79B00", Offset = "0xE79B00", VA = "0xE79B00")]
		public FloorPlanMarkers()
		{
		}
	}
	[Token(Token = "0x20008C1")]
	public class FloorPlanBuilder : DungeonBuilder
	{
		[Token(Token = "0x20008C2")]
		public class FloorIslandNode
		{
			[Token(Token = "0x4002A76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int IslandId;

			[Token(Token = "0x4002A77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FloorChunk Chunk;

			[Token(Token = "0x4002A78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IntVector Location;

			[Token(Token = "0x6002F3C")]
			[Address(RVA = "0xE7D248", Offset = "0xE7D248", VA = "0xE7D248")]
			public FloorIslandNode()
			{
			}
		}

		[Token(Token = "0x20008C3")]
		private class FloorIslandAdjacency
		{
			[Token(Token = "0x4002A79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FloorIslandNode A;

			[Token(Token = "0x4002A7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FloorIslandNode B;

			[Token(Token = "0x6002F3D")]
			[Address(RVA = "0xE7DB70", Offset = "0xE7DB70", VA = "0xE7DB70")]
			public FloorIslandAdjacency()
			{
			}
		}

		[Token(Token = "0x20008C4")]
		private class IslandNodePriorityPredicate : IComparer<int>
		{
			[Token(Token = "0x4002A7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Dictionary<int, FloorChunk> IslandToChunkMap;

			[Token(Token = "0x6002F3E")]
			[Address(RVA = "0xE7D95C", Offset = "0xE7D95C", VA = "0xE7D95C")]
			public IslandNodePriorityPredicate(Dictionary<int, FloorChunk> InIslandToChunkMap)
			{
			}

			[Token(Token = "0x6002F3F")]
			[Address(RVA = "0xE7DF78", Offset = "0xE7DF78", VA = "0xE7DF78", Slot = "4")]
			public int Compare(int IslandA, int IslandB)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4002A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private FloorPlanConfig floorPlanConfig;

		[Token(Token = "0x4002A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private FloorPlanModel floorPlanModel;

		[Token(Token = "0x4002A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private FloorChunkDB ChunkDB;

		[Token(Token = "0x4002A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private FloorDoorManager DoorManager;

		[Token(Token = "0x4002A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private HashSet<int> Visited;

		[Token(Token = "0x4002A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private new System.Random random;

		[Token(Token = "0x6002F2B")]
		[Address(RVA = "0xE79BF0", Offset = "0xE79BF0", VA = "0xE79BF0", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6002F2C")]
		[Address(RVA = "0xE7A56C", Offset = "0xE7A56C", VA = "0xE7A56C", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6002F2D")]
		[Address(RVA = "0xE79D44", Offset = "0xE79D44", VA = "0xE79D44")]
		private void BuildLayout()
		{
		}

		[Token(Token = "0x6002F2E")]
		[Address(RVA = "0xE7B2B8", Offset = "0xE7B2B8", VA = "0xE7B2B8")]
		private void SplitChunk(FloorChunk Chunk, FloorChunk OutLeft, FloorChunk OutRight, FloorChunk OutHallway)
		{
		}

		[Token(Token = "0x6002F2F")]
		[Address(RVA = "0xE7B514", Offset = "0xE7B514", VA = "0xE7B514")]
		private void SplitChunk(FloorChunk Chunk, FloorChunk OutLeft, FloorChunk OutRight)
		{
		}

		[Token(Token = "0x6002F30")]
		[Address(RVA = "0xE7C84C", Offset = "0xE7C84C", VA = "0xE7C84C")]
		private void EmitMarkerAt(UnityEngine.Vector3 WorldLocation, string MarkerName, Quaternion Rotation)
		{
		}

		[Token(Token = "0x6002F31")]
		[Address(RVA = "0xE7C9E4", Offset = "0xE7C9E4", VA = "0xE7C9E4")]
		private void EmitMarkerAt(UnityEngine.Vector3 WorldLocation, string MarkerName, float Angle)
		{
		}

		[Token(Token = "0x6002F32")]
		[Address(RVA = "0xE7CA6C", Offset = "0xE7CA6C", VA = "0xE7CA6C")]
		private bool VolumeEncompassesPoint(Volume volume, IntVector GridPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F33")]
		[Address(RVA = "0xE7CA74", Offset = "0xE7CA74", VA = "0xE7CA74")]
		private void GetVolumeCells(Volume volume, int y, List<IntVector> OutCells)
		{
		}

		[Token(Token = "0x6002F34")]
		[Address(RVA = "0xE7CAC0", Offset = "0xE7CAC0", VA = "0xE7CAC0")]
		private static int GetChunkDoorConnectionScore(FloorChunk Chunk)
		{
			return default(int);
		}

		[Token(Token = "0x6002F35")]
		[Address(RVA = "0xE7CB08", Offset = "0xE7CB08", VA = "0xE7CB08")]
		private void FloodFill(IntVector StartLocation, int IslandId, HashSet<IntVector> Visited, List<FloorIslandNode> IslandNodes, FloorChunkDB ChunkDB)
		{
		}

		[Token(Token = "0x6002F36")]
		[Address(RVA = "0xE7D2C4", Offset = "0xE7D2C4", VA = "0xE7D2C4")]
		private void ConnectIslandRecursive(int IslandId, Dictionary<int, List<FloorIslandAdjacency>> AdjacencyByIslands, HashSet<int> IslandVisited, System.Random random, FloorDoorManager DoorManager, Dictionary<int, FloorChunk> IslandToChunkMap)
		{
		}

		[Token(Token = "0x6002F37")]
		[Address(RVA = "0xE7BB74", Offset = "0xE7BB74", VA = "0xE7BB74")]
		private void CreateDoors(int y)
		{
		}

		[Token(Token = "0x6002F38")]
		[Address(RVA = "0xE7DB78", Offset = "0xE7DB78", VA = "0xE7DB78")]
		private FloorChunk GetPriorityChunk(FloorChunk A, FloorChunk B)
		{
			return null;
		}

		[Token(Token = "0x6002F39")]
		[Address(RVA = "0xE7DBA0", Offset = "0xE7DBA0", VA = "0xE7DBA0")]
		private string GetDoorMarkerName(FloorChunk ChunkA, FloorChunk ChunkB)
		{
			return null;
		}

		[Token(Token = "0x6002F3A")]
		[Address(RVA = "0xE7A594", Offset = "0xE7A594", VA = "0xE7A594")]
		private void EmitBuildingMarkers()
		{
		}

		[Token(Token = "0x6002F3B")]
		[Address(RVA = "0xE7DEFC", Offset = "0xE7DEFC", VA = "0xE7DEFC")]
		public FloorPlanBuilder()
		{
		}
	}
	[Token(Token = "0x20008C5")]
	public class FloorPlanConfig : DungeonConfig
	{
		[Token(Token = "0x4002A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEngine.Vector3 BuildingSize;

		[Token(Token = "0x4002A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public UnityEngine.Vector3 GridSize;

		[Token(Token = "0x4002A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int MinRoomSize;

		[Token(Token = "0x4002A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int MaxRoomSize;

		[Token(Token = "0x4002A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int HallWidth;

		[Token(Token = "0x4002A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int MinRoomChunkArea;

		[Token(Token = "0x4002A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int RoomSplitProbabilityOffset;

		[Token(Token = "0x6002F40")]
		[Address(RVA = "0xE7E0F8", Offset = "0xE7E0F8", VA = "0xE7E0F8")]
		public FloorPlanConfig()
		{
		}
	}
	[Token(Token = "0x20008C6")]
	public class FloorPlanModel : DungeonModel
	{
		[Token(Token = "0x4002A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public FloorPlanConfig Config;

		[Token(Token = "0x4002A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public FloorChunk[] Chunks;

		[Token(Token = "0x6002F41")]
		[Address(RVA = "0xE7E120", Offset = "0xE7E120", VA = "0xE7E120")]
		public FloorPlanModel()
		{
		}
	}
	[Token(Token = "0x20008C7")]
	public enum FloorChunkType
	{
		[Token(Token = "0x4002A86")]
		Room,
		[Token(Token = "0x4002A87")]
		Hall,
		[Token(Token = "0x4002A88")]
		Outside
	}
	[Token(Token = "0x20008C8")]
	public class FloorChunk
	{
		[Token(Token = "0x4002A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Id;

		[Token(Token = "0x4002A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public FloorChunkType ChunkType;

		[Token(Token = "0x4002A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rect r;

		[Token(Token = "0x4002A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rectangle Bounds;

		[Token(Token = "0x4002A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<IntVector> BoundCells;

		[Token(Token = "0x4002A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool bReachable;

		[Token(Token = "0x4002A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float Priority;

		[Token(Token = "0x4002A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool bEmitGroundMarker;

		[Token(Token = "0x4002A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool bEmitCeilingMarker;

		[Token(Token = "0x4002A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool bConnectDoors;

		[Token(Token = "0x4002A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool bCreateWalls;

		[Token(Token = "0x4002A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string WallMarker;

		[Token(Token = "0x4002A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string GroundMarker;

		[Token(Token = "0x4002A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string CeilingMarker;

		[Token(Token = "0x4002A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string DoorMarker;

		[Token(Token = "0x4002A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string CenterMarker;

		[Token(Token = "0x6002F42")]
		[Address(RVA = "0xE7E128", Offset = "0xE7E128", VA = "0xE7E128")]
		public FloorChunk()
		{
		}

		[Token(Token = "0x6002F43")]
		[Address(RVA = "0xE7B2A8", Offset = "0xE7B2A8", VA = "0xE7B2A8")]
		public int Area()
		{
			return default(int);
		}

		[Token(Token = "0x6002F44")]
		[Address(RVA = "0xE7B4EC", Offset = "0xE7B4EC", VA = "0xE7B4EC")]
		public int GetLength()
		{
			return default(int);
		}

		[Token(Token = "0x6002F45")]
		[Address(RVA = "0xE7B500", Offset = "0xE7B500", VA = "0xE7B500")]
		public int GetWidth()
		{
			return default(int);
		}

		[Token(Token = "0x6002F46")]
		[Address(RVA = "0xE7C800", Offset = "0xE7C800", VA = "0xE7C800")]
		public void SetLength(int Length)
		{
		}

		[Token(Token = "0x6002F47")]
		[Address(RVA = "0xE7C820", Offset = "0xE7C820", VA = "0xE7C820")]
		public void OffsetAlongLength(int Offset)
		{
		}
	}
	[Token(Token = "0x20008C9")]
	public class FloorChunkDB
	{
		[Token(Token = "0x20008CA")]
		private class FChunkCacheNode
		{
			[Token(Token = "0x4002A9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int ChunkId;

			[Token(Token = "0x4002A9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float Priority;

			[Token(Token = "0x6002F53")]
			[Address(RVA = "0xE7E564", Offset = "0xE7E564", VA = "0xE7E564")]
			public FChunkCacheNode()
			{
			}

			[Token(Token = "0x6002F54")]
			[Address(RVA = "0xE7E52C", Offset = "0xE7E52C", VA = "0xE7E52C")]
			public FChunkCacheNode(int InChunkId, float InPriority)
			{
			}
		}

		[Token(Token = "0x4002A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<int, FloorChunk> Chunks;

		[Token(Token = "0x4002A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<int, FChunkCacheNode> CachePositionToChunk;

		[Token(Token = "0x4002A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int IdCounter;

		[Token(Token = "0x6002F48")]
		[Address(RVA = "0xE7B0F8", Offset = "0xE7B0F8", VA = "0xE7B0F8")]
		public FloorChunkDB()
		{
		}

		[Token(Token = "0x6002F49")]
		[Address(RVA = "0xE7B23C", Offset = "0xE7B23C", VA = "0xE7B23C")]
		public FloorChunk Create()
		{
			return null;
		}

		[Token(Token = "0x6002F4A")]
		[Address(RVA = "0xE7B454", Offset = "0xE7B454", VA = "0xE7B454")]
		public void Register(FloorChunk Chunk)
		{
		}

		[Token(Token = "0x6002F4B")]
		[Address(RVA = "0xE7DE50", Offset = "0xE7DE50", VA = "0xE7DE50")]
		public void GetChunks(List<FloorChunk> OutChunks)
		{
		}

		[Token(Token = "0x6002F4C")]
		[Address(RVA = "0xE7E1E8", Offset = "0xE7E1E8", VA = "0xE7E1E8")]
		public void GetChunks(List<FloorChunk> OutChunks, FloorChunkType ChunkType)
		{
		}

		[Token(Token = "0x6002F4D")]
		[Address(RVA = "0xE7E44C", Offset = "0xE7E44C", VA = "0xE7E44C")]
		public FloorChunk GetChunk(int Id)
		{
			return null;
		}

		[Token(Token = "0x6002F4E")]
		[Address(RVA = "0xE7DC60", Offset = "0xE7DC60", VA = "0xE7DC60")]
		public FloorChunk GetChunkAt(int x, int y, int z)
		{
			return null;
		}

		[Token(Token = "0x6002F4F")]
		[Address(RVA = "0xE7D23C", Offset = "0xE7D23C", VA = "0xE7D23C")]
		public FloorChunk GetChunkAt(IntVector Location)
		{
			return null;
		}

		[Token(Token = "0x6002F50")]
		[Address(RVA = "0xE7B634", Offset = "0xE7B634", VA = "0xE7B634")]
		public void CacheChunkPositions()
		{
		}

		[Token(Token = "0x6002F51")]
		[Address(RVA = "0xE7E4E0", Offset = "0xE7E4E0", VA = "0xE7E4E0")]
		public int HASH(int x, int y, int z)
		{
			return default(int);
		}

		[Token(Token = "0x6002F52")]
		[Address(RVA = "0xE7C794", Offset = "0xE7C794", VA = "0xE7C794")]
		public FloorChunk[] GetAllChunks()
		{
			return null;
		}
	}
	[Token(Token = "0x20008CB")]
	public class FloorDoorManager
	{
		[Token(Token = "0x4002A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<IntVector, HashSet<IntVector>> DoorMap;

		[Token(Token = "0x6002F55")]
		[Address(RVA = "0xE7D984", Offset = "0xE7D984", VA = "0xE7D984")]
		public void RegisterDoor(IntVector A, IntVector B)
		{
		}

		[Token(Token = "0x6002F56")]
		[Address(RVA = "0xE7E584", Offset = "0xE7E584", VA = "0xE7E584")]
		public bool ContainsDoorVolume(UnityEngine.Vector3 WorldLocation, List<Volume> DoorVolumes)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F57")]
		[Address(RVA = "0xE7DD64", Offset = "0xE7DD64", VA = "0xE7DD64")]
		public bool ContainsDoor(IntVector A, IntVector B)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F58")]
		[Address(RVA = "0xE7E58C", Offset = "0xE7E58C", VA = "0xE7E58C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6002F59")]
		[Address(RVA = "0xE7B1C0", Offset = "0xE7B1C0", VA = "0xE7B1C0")]
		public FloorDoorManager()
		{
		}
	}
}
namespace DungeonArchitect.Builders.CircularCity
{
	[Token(Token = "0x20008CC")]
	internal class CircularCityDungeonConstants
	{
		[Token(Token = "0x4002A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string House;

		[Token(Token = "0x4002AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string WallMarkerName;

		[Token(Token = "0x4002AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly string DoorMarkerName;

		[Token(Token = "0x4002AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly string GroundMarkerName;

		[Token(Token = "0x4002AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly string CornerTowerMarkerName;

		[Token(Token = "0x4002AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly string WallPaddingMarkerName;

		[Token(Token = "0x6002F5A")]
		[Address(RVA = "0xE7E5DC", Offset = "0xE7E5DC", VA = "0xE7E5DC")]
		public CircularCityDungeonConstants()
		{
		}
	}
	[Token(Token = "0x20008CD")]
	public class CircularCityDungeonBuilder : DungeonBuilder
	{
		[Token(Token = "0x20008CE")]
		private delegate void InsertHouseDelegate();

		[Token(Token = "0x20008CF")]
		private class SpatialPartitionCache
		{
			[Token(Token = "0x4002AA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int gridSize;

			[Token(Token = "0x4002AA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Dictionary<IntVector2, List<UnityEngine.Vector3>> occupancyGrid;

			[Token(Token = "0x6002F6C")]
			[Address(RVA = "0xE7F97C", Offset = "0xE7F97C", VA = "0xE7F97C")]
			public SpatialPartitionCache(int gridSize)
			{
			}

			[Token(Token = "0x6002F6D")]
			[Address(RVA = "0xE7FA0C", Offset = "0xE7FA0C", VA = "0xE7FA0C")]
			public void RegisterAsOccupied(UnityEngine.Vector3 position)
			{
			}

			[Token(Token = "0x6002F6E")]
			[Address(RVA = "0xE7FBCC", Offset = "0xE7FBCC", VA = "0xE7FBCC")]
			public bool IsFree(UnityEngine.Vector3 position, float distanceSearch)
			{
				return default(bool);
			}

			[Token(Token = "0x6002F6F")]
			[Address(RVA = "0xE800E4", Offset = "0xE800E4", VA = "0xE800E4")]
			private bool IsFree(UnityEngine.Vector3 sourcePosition, IntVector2 cell, float distanceSearch)
			{
				return default(bool);
			}

			[Token(Token = "0x6002F70")]
			[Address(RVA = "0xE7FF1C", Offset = "0xE7FF1C", VA = "0xE7FF1C")]
			private IntVector2 GetCell(UnityEngine.Vector3 position)
			{
				return default(IntVector2);
			}
		}

		[Token(Token = "0x4002AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CircularCityDungeonConfig cityConfig;

		[Token(Token = "0x4002AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private CircularCityDungeonModel cityModel;

		[Token(Token = "0x4002AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private new System.Random random;

		[Token(Token = "0x6002F5C")]
		[Address(RVA = "0xE7E6F0", Offset = "0xE7E6F0", VA = "0xE7E6F0", Slot = "4")]
		public override void BuildDungeon(DungeonConfig config, DungeonModel model)
		{
		}

		[Token(Token = "0x6002F5D")]
		[Address(RVA = "0xE7EE6C", Offset = "0xE7EE6C", VA = "0xE7EE6C", Slot = "6")]
		public override void OnDestroyed()
		{
		}

		[Token(Token = "0x6002F5E")]
		[Address(RVA = "0xE7EF00", Offset = "0xE7EF00", VA = "0xE7EF00", Slot = "11")]
		public override void EmitMarkers()
		{
		}

		[Token(Token = "0x6002F5F")]
		[Address(RVA = "0xE7F3C8", Offset = "0xE7F3C8", VA = "0xE7F3C8")]
		private Texture2D GetSplatTexture(int index)
		{
			return null;
		}

		[Token(Token = "0x6002F60")]
		[Address(RVA = "0xE7F4D4", Offset = "0xE7F4D4", VA = "0xE7F4D4")]
		private Texture2D GetRoadmap()
		{
			return null;
		}

		[Token(Token = "0x6002F61")]
		[Address(RVA = "0xE7E924", Offset = "0xE7E924", VA = "0xE7E924")]
		private void GenerateCityLayout()
		{
		}

		[Token(Token = "0x6002F62")]
		[Address(RVA = "0xE7F4DC", Offset = "0xE7F4DC", VA = "0xE7F4DC")]
		private void LayoutBuilder_RoadBlockLayoutBuilt(ref UnityEngine.Vector3[] layout)
		{
		}

		[Token(Token = "0x6002F63")]
		[Address(RVA = "0xE7F4E0", Offset = "0xE7F4E0", VA = "0xE7F4E0")]
		private void DebugDrawGraphGizmo(RoadGraph graph, Color edgeColor, Color nodeColor)
		{
		}

		[Token(Token = "0x6002F64")]
		[Address(RVA = "0xE7F754", Offset = "0xE7F754", VA = "0xE7F754", Slot = "10")]
		public override void DebugDrawGizmos()
		{
		}

		[Token(Token = "0x6002F65")]
		[Address(RVA = "0xE7EF28", Offset = "0xE7EF28", VA = "0xE7EF28")]
		private void EmitCityMarkers()
		{
		}

		[Token(Token = "0x6002F66")]
		[Address(RVA = "0xE7FCD8", Offset = "0xE7FCD8", VA = "0xE7FCD8")]
		private void EmitMarkerAt(string markerName, UnityEngine.Vector3 worldPosition, Quaternion rotation)
		{
		}

		[Token(Token = "0x6002F67")]
		[Address(RVA = "0xE7FE3C", Offset = "0xE7FE3C", VA = "0xE7FE3C")]
		public CircularCityDungeonBuilder()
		{
		}
	}
	[Token(Token = "0x20008D0")]
	public class CircularCityDungeonConfig : DungeonConfig
	{
		[Token(Token = "0x4002AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int numRings;

		[Token(Token = "0x4002AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int numRays;

		[Token(Token = "0x4002AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float startRadius;

		[Token(Token = "0x4002AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int endRadius;

		[Token(Token = "0x4002AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float mainRoadStrength;

		[Token(Token = "0x4002AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float sideRoadStrength;

		[Token(Token = "0x4002AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float mainRoadRemovalProbability;

		[Token(Token = "0x4002AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sideRoadRemovalProbability;

		[Token(Token = "0x4002AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float randomSideLaneOffsetAngle;

		[Token(Token = "0x4002AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float interNodeDistance;

		[Token(Token = "0x4002AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float buildingSize;

		[Token(Token = "0x4002AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public MeshFilter roadMesh;

		[Token(Token = "0x6002F71")]
		[Address(RVA = "0xE802D8", Offset = "0xE802D8", VA = "0xE802D8")]
		public CircularCityDungeonConfig()
		{
		}
	}
	[Token(Token = "0x20008D1")]
	public enum CircularCityCellType
	{
		[Token(Token = "0x4002AB7")]
		Road,
		[Token(Token = "0x4002AB8")]
		House,
		[Token(Token = "0x4002AB9")]
		Park,
		[Token(Token = "0x4002ABA")]
		CityWallPadding,
		[Token(Token = "0x4002ABB")]
		UserDefined,
		[Token(Token = "0x4002ABC")]
		Empty
	}
	[Token(Token = "0x20008D2")]
	public class CircularCityCell
	{
		[Token(Token = "0x4002ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntVector Position;

		[Token(Token = "0x4002ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public CircularCityCellType CellType;

		[Token(Token = "0x4002ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion Rotation;

		[Token(Token = "0x4002AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Vector3 BlockSize;

		[Token(Token = "0x4002AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string MarkerNameOverride;

		[Token(Token = "0x6002F72")]
		[Address(RVA = "0xE80318", Offset = "0xE80318", VA = "0xE80318")]
		public CircularCityCell()
		{
		}
	}
	[Token(Token = "0x20008D3")]
	public class CircularCityDungeonModel : DungeonModel
	{
		[Token(Token = "0x4002AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public CircularCityDungeonConfig Config;

		[Token(Token = "0x4002AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RoadGraph roadGraph;

		[Token(Token = "0x4002AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RoadGraph layoutGraph;

		[Token(Token = "0x6002F73")]
		[Address(RVA = "0xE80334", Offset = "0xE80334", VA = "0xE80334")]
		public CircularCityDungeonModel()
		{
		}
	}
	[Token(Token = "0x20008D4")]
	public enum CircularCityLandscapeTextureType
	{
		[Token(Token = "0x4002AC6")]
		Fill,
		[Token(Token = "0x4002AC7")]
		Road,
		[Token(Token = "0x4002AC8")]
		Park,
		[Token(Token = "0x4002AC9")]
		CityWallPadding
	}
	[Serializable]
	[Token(Token = "0x20008D5")]
	public class CircularCityLandscapeTexture
	{
		[Token(Token = "0x4002ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CircularCityLandscapeTextureType textureType;

		[Token(Token = "0x4002ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture2D diffuse;

		[Token(Token = "0x4002ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Texture2D normal;

		[Token(Token = "0x4002ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float metallic;

		[Token(Token = "0x4002ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public UnityEngine.Vector2 size;

		[Token(Token = "0x4002ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public UnityEngine.Vector2 offset;

		[Token(Token = "0x4002AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve curve;

		[Token(Token = "0x6002F74")]
		[Address(RVA = "0xE8033C", Offset = "0xE8033C", VA = "0xE8033C")]
		public CircularCityLandscapeTexture()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20008D6")]
	public class CircularCityFoliageEntry
	{
		[Token(Token = "0x4002AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int grassIndex;

		[Token(Token = "0x4002AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float density;

		[Token(Token = "0x6002F75")]
		[Address(RVA = "0xE8039C", Offset = "0xE8039C", VA = "0xE8039C")]
		public CircularCityFoliageEntry()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20008D7")]
	public class CircularCityFoliageTheme
	{
		[Token(Token = "0x4002AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CircularCityLandscapeTextureType textureType;

		[Token(Token = "0x4002AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CircularCityFoliageEntry[] foliageEntries;

		[Token(Token = "0x4002AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve curve;

		[Token(Token = "0x4002AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float density;

		[Token(Token = "0x6002F76")]
		[Address(RVA = "0xE803A4", Offset = "0xE803A4", VA = "0xE803A4")]
		public CircularCityFoliageTheme()
		{
		}
	}
	[Token(Token = "0x20008D8")]
	public class LandscapeTransformerCity : LandscapeTransformerBase
	{
		[Token(Token = "0x4002AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CircularCityLandscapeTexture[] textures;

		[Token(Token = "0x4002AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CircularCityFoliageTheme[] foliage;

		[Token(Token = "0x4002AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int roadBlurDistance;

		[Token(Token = "0x4002ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float corridorBlurThreshold;

		[Token(Token = "0x4002ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float roomBlurThreshold;

		[Token(Token = "0x6002F77")]
		[Address(RVA = "0xE803B4", Offset = "0xE803B4", VA = "0xE803B4", Slot = "10")]
		protected override void BuildTerrain(DungeonModel model)
		{
		}

		[Token(Token = "0x6002F78")]
		[Address(RVA = "0xE80468", Offset = "0xE80468", VA = "0xE80468")]
		public LandscapeTransformerCity()
		{
		}
	}
}
namespace DungeonArchitect.Samples
{
	[Token(Token = "0x20008D9")]
	public class SampleFindRoomDoorsController : MonoBehaviour
	{
		[Token(Token = "0x4002ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x4002ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform player;

		[Token(Token = "0x4002ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GridDungeonConfig config;

		[Token(Token = "0x4002ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private GridDungeonQuery dungeonQuery;

		[Token(Token = "0x4002AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject[] trackedDoorObjects;

		[Token(Token = "0x6002F79")]
		[Address(RVA = "0xE80480", Offset = "0xE80480", VA = "0xE80480")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002F7A")]
		[Address(RVA = "0xE80540", Offset = "0xE80540", VA = "0xE80540")]
		private void Start()
		{
		}

		[Token(Token = "0x6002F7B")]
		[Address(RVA = "0xE80638", Offset = "0xE80638", VA = "0xE80638")]
		private void Update()
		{
		}

		[Token(Token = "0x6002F7C")]
		[Address(RVA = "0xE80734", Offset = "0xE80734", VA = "0xE80734")]
		private void ProcessDoorObjects(GameObject[] doorObjects)
		{
		}

		[Token(Token = "0x6002F7D")]
		[Address(RVA = "0xE80904", Offset = "0xE80904", VA = "0xE80904")]
		public SampleFindRoomDoorsController()
		{
		}
	}
}
namespace DungeonArchitect.Samples.Common
{
	[Token(Token = "0x20008DA")]
	public class DAFPSMouseLook : MonoBehaviour
	{
		[Token(Token = "0x4002AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float mouseSensitivity;

		[Token(Token = "0x4002AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform playerBody;

		[Token(Token = "0x4002AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float angleUpDown;

		[Token(Token = "0x6002F7E")]
		[Address(RVA = "0xE8095C", Offset = "0xE8095C", VA = "0xE8095C")]
		public void Start()
		{
		}

		[Token(Token = "0x6002F7F")]
		[Address(RVA = "0xE80968", Offset = "0xE80968", VA = "0xE80968")]
		private void Update()
		{
		}

		[Token(Token = "0x6002F80")]
		[Address(RVA = "0xE80B00", Offset = "0xE80B00", VA = "0xE80B00")]
		public DAFPSMouseLook()
		{
		}
	}
	[Token(Token = "0x20008DB")]
	public class DAFPSMovement : MonoBehaviour
	{
		[Token(Token = "0x4002AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4002AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float gravity;

		[Token(Token = "0x4002AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float jumpHeight;

		[Token(Token = "0x4002AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CharacterController controller;

		[Token(Token = "0x4002AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.Vector3 velocity;

		[Token(Token = "0x6002F81")]
		[Address(RVA = "0xE80B10", Offset = "0xE80B10", VA = "0xE80B10")]
		private void Update()
		{
		}

		[Token(Token = "0x6002F82")]
		[Address(RVA = "0xE80D2C", Offset = "0xE80D2C", VA = "0xE80D2C")]
		public DAFPSMovement()
		{
		}
	}
}
namespace DungeonArchitect.Samples.Navigation
{
	[Token(Token = "0x20008DC")]
	public class NavigationDemoController : MonoBehaviour
	{
		[Token(Token = "0x4002AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x4002AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject player;

		[Token(Token = "0x4002AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject[] npcs;

		[Token(Token = "0x4002AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Vector3 spawnOffset;

		[Token(Token = "0x6002F83")]
		[Address(RVA = "0xE80DA0", Offset = "0xE80DA0", VA = "0xE80DA0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002F84")]
		[Address(RVA = "0xE80E58", Offset = "0xE80E58", VA = "0xE80E58")]
		private void TeleportToValidPlatform(GameObject obj)
		{
		}

		[Token(Token = "0x6002F85")]
		[Address(RVA = "0xE81128", Offset = "0xE81128", VA = "0xE81128")]
		private void Update()
		{
		}

		[Token(Token = "0x6002F86")]
		[Address(RVA = "0xE8112C", Offset = "0xE8112C", VA = "0xE8112C")]
		public NavigationDemoController()
		{
		}
	}
	[Token(Token = "0x20008DD")]
	public class NavigationDemoNPC : MonoBehaviour
	{
		[Token(Token = "0x4002AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NavMeshAgent agent;

		[Token(Token = "0x4002AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CharacterController character;

		[Token(Token = "0x4002AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform target;

		[Token(Token = "0x6002F87")]
		[Address(RVA = "0xE81134", Offset = "0xE81134", VA = "0xE81134")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002F88")]
		[Address(RVA = "0xE811B0", Offset = "0xE811B0", VA = "0xE811B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6002F89")]
		[Address(RVA = "0xE812E4", Offset = "0xE812E4", VA = "0xE812E4")]
		public NavigationDemoNPC()
		{
		}
	}
	[Token(Token = "0x20008DE")]
	public class NavigationDemoPlayer : MonoBehaviour
	{
		[Token(Token = "0x4002AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CharacterController character;

		[Token(Token = "0x4002AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speed;

		[Token(Token = "0x4002AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotateSpeed;

		[Token(Token = "0x6002F8A")]
		[Address(RVA = "0xE812EC", Offset = "0xE812EC", VA = "0xE812EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002F8B")]
		[Address(RVA = "0xE8133C", Offset = "0xE8133C", VA = "0xE8133C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002F8C")]
		[Address(RVA = "0xE81474", Offset = "0xE81474", VA = "0xE81474")]
		public NavigationDemoPlayer()
		{
		}
	}
}
namespace DungeonArchitect.Samples.ShooterGame
{
	[Token(Token = "0x20008DF")]
	public class AIStateBase : StateBase
	{
		[Token(Token = "0x4002AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected AIController controller;

		[Token(Token = "0x6002F8D")]
		[Address(RVA = "0xE81484", Offset = "0xE81484", VA = "0xE81484")]
		public AIStateBase(AIController controller, float updateDelay)
		{
		}

		[Token(Token = "0x6002F8E")]
		[Address(RVA = "0xE814B4", Offset = "0xE814B4", VA = "0xE814B4", Slot = "18")]
		protected virtual void HandleFrameUpdate(float elapsedTime)
		{
		}

		[Token(Token = "0x6002F8F")]
		[Address(RVA = "0xE814B8", Offset = "0xE814B8", VA = "0xE814B8", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x6002F90")]
		[Address(RVA = "0xE817D0", Offset = "0xE817D0", VA = "0xE817D0")]
		protected bool IsWithinPlayerProximity(ref Collider outCollider, float radius)
		{
			return default(bool);
		}

		[Token(Token = "0x6002F91")]
		[Address(RVA = "0xE817D8", Offset = "0xE817D8", VA = "0xE817D8")]
		protected GameObject GetPlayer()
		{
			return null;
		}

		[Token(Token = "0x6002F92")]
		[Address(RVA = "0xE81834", Offset = "0xE81834", VA = "0xE81834")]
		protected bool IsPlayerVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F93")]
		[Address(RVA = "0xE8185C", Offset = "0xE8185C", VA = "0xE8185C")]
		protected bool IsPlayerVisible2D()
		{
			return default(bool);
		}

		[Token(Token = "0x6002F94")]
		[Address(RVA = "0xE81FD0", Offset = "0xE81FD0", VA = "0xE81FD0")]
		protected bool IsPlayerVisible3D()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20008E1")]
	public class AIStateMoveToLastKnownPosition : AIStateBase
	{
		[Token(Token = "0x6002F99")]
		[Address(RVA = "0xE8282C", Offset = "0xE8282C", VA = "0xE8282C")]
		public AIStateMoveToLastKnownPosition(AIController controller)
		{
		}

		[Token(Token = "0x6002F9A")]
		[Address(RVA = "0xE82854", Offset = "0xE82854", VA = "0xE82854", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F9B")]
		[Address(RVA = "0xE829E8", Offset = "0xE829E8", VA = "0xE829E8", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x6002F9C")]
		[Address(RVA = "0xE829EC", Offset = "0xE829EC", VA = "0xE829EC", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x20008E2")]
	public class AIStateWaitAndSearch : AIStateBase
	{
		[Token(Token = "0x4002AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float timeSinceStart;

		[Token(Token = "0x6002F9D")]
		[Address(RVA = "0xE82ADC", Offset = "0xE82ADC", VA = "0xE82ADC")]
		public AIStateWaitAndSearch(AIController controller)
		{
		}

		[Token(Token = "0x6002F9E")]
		[Address(RVA = "0xE82B04", Offset = "0xE82B04", VA = "0xE82B04", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002F9F")]
		[Address(RVA = "0xE82B30", Offset = "0xE82B30", VA = "0xE82B30", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x20008E3")]
	public class AIStatePersuit : AIStateBase
	{
		[Token(Token = "0x4002AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform followTarget;

		[Token(Token = "0x6002FA0")]
		[Address(RVA = "0xE82AB4", Offset = "0xE82AB4", VA = "0xE82AB4")]
		public AIStatePersuit(AIController controller)
		{
		}

		[Token(Token = "0x6002FA1")]
		[Address(RVA = "0xE82CA0", Offset = "0xE82CA0", VA = "0xE82CA0", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FA2")]
		[Address(RVA = "0xE82D40", Offset = "0xE82D40", VA = "0xE82D40", Slot = "15")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002FA3")]
		[Address(RVA = "0xE82D68", Offset = "0xE82D68", VA = "0xE82D68", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x6002FA4")]
		[Address(RVA = "0xE82D6C", Offset = "0xE82D6C", VA = "0xE82D6C", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x20008E4")]
	public class AIStatePatrol : AIStateBase
	{
		[Token(Token = "0x4002AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int currentWaypointIndex;

		[Token(Token = "0x4002AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3[] waypointOffsets;

		[Token(Token = "0x6002FA5")]
		[Address(RVA = "0xE829C0", Offset = "0xE829C0", VA = "0xE829C0")]
		public AIStatePatrol(AIController controller)
		{
		}

		[Token(Token = "0x6002FA6")]
		[Address(RVA = "0xE82E70", Offset = "0xE82E70", VA = "0xE82E70", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FA7")]
		[Address(RVA = "0xE83018", Offset = "0xE83018", VA = "0xE83018")]
		private void MoveToCurrentPoint()
		{
		}

		[Token(Token = "0x6002FA8")]
		[Address(RVA = "0xE83168", Offset = "0xE83168", VA = "0xE83168", Slot = "15")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002FA9")]
		[Address(RVA = "0xE8316C", Offset = "0xE8316C", VA = "0xE8316C", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x6002FAA")]
		[Address(RVA = "0xE83170", Offset = "0xE83170", VA = "0xE83170", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x20008E5")]
	internal enum AIAttackAnimState
	{
		[Token(Token = "0x4002AFC")]
		Requested,
		[Token(Token = "0x4002AFD")]
		Running,
		[Token(Token = "0x4002AFE")]
		InterAttackWait
	}
	[Token(Token = "0x20008E6")]
	public class AIStateDead : AIStateBase
	{
		[Token(Token = "0x6002FAB")]
		[Address(RVA = "0xE815B0", Offset = "0xE815B0", VA = "0xE815B0")]
		public AIStateDead(AIController controller)
		{
		}

		[Token(Token = "0x6002FAC")]
		[Address(RVA = "0xE83244", Offset = "0xE83244", VA = "0xE83244", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FAD")]
		[Address(RVA = "0xE832A8", Offset = "0xE832A8", VA = "0xE832A8", Slot = "15")]
		public override void OnExit()
		{
		}
	}
	[Token(Token = "0x20008E7")]
	public class AIStateIdle : AIStateBase
	{
		[Token(Token = "0x6002FAE")]
		[Address(RVA = "0xE832B0", Offset = "0xE832B0", VA = "0xE832B0")]
		public AIStateIdle(AIController controller)
		{
		}

		[Token(Token = "0x6002FAF")]
		[Address(RVA = "0xE832D8", Offset = "0xE832D8", VA = "0xE832D8", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6002FB0")]
		[Address(RVA = "0xE83318", Offset = "0xE83318", VA = "0xE83318", Slot = "15")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6002FB1")]
		[Address(RVA = "0xE8331C", Offset = "0xE8331C", VA = "0xE8331C", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x20008E8")]
	public class AIController : CharacterControlScript
	{
		[Token(Token = "0x4002AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private NavMeshAgent agent;

		[Token(Token = "0x4002B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PatrolPath patrol;

		[Token(Token = "0x4002B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CapsuleCollider capsule;

		[Token(Token = "0x4002B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private LastPlayerSighting lastSighting;

		[Token(Token = "0x4002B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool hasPatrolling;

		[Token(Token = "0x4002B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float fieldOfView;

		[Token(Token = "0x4002B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float maxViewSight;

		[Token(Token = "0x4002B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float searchWaitTime;

		[Token(Token = "0x4002B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float playerCloseByDistance;

		[Token(Token = "0x4002B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float destinationArriveProximity;

		[Token(Token = "0x4002B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float playerProximityRadius;

		[Token(Token = "0x4002B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool mode2D;

		[Token(Token = "0x170006F9")]
		public NavMeshAgent Agent
		{
			[Token(Token = "0x6002FB2")]
			[Address(RVA = "0xE833A4", Offset = "0xE833A4", VA = "0xE833A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006FA")]
		public CapsuleCollider Capsule
		{
			[Token(Token = "0x6002FB3")]
			[Address(RVA = "0xE833AC", Offset = "0xE833AC", VA = "0xE833AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006FB")]
		public PatrolPath Patrol
		{
			[Token(Token = "0x6002FB4")]
			[Address(RVA = "0xE833B4", Offset = "0xE833B4", VA = "0xE833B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170006FC")]
		public LastPlayerSighting LastSighting
		{
			[Token(Token = "0x6002FB5")]
			[Address(RVA = "0xE833BC", Offset = "0xE833BC", VA = "0xE833BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002FB6")]
		[Address(RVA = "0xE833C4", Offset = "0xE833C4", VA = "0xE833C4", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x6002FB7")]
		[Address(RVA = "0xE834F4", Offset = "0xE834F4", VA = "0xE834F4", Slot = "5")]
		public override bool GetInputJump()
		{
			return default(bool);
		}

		[Token(Token = "0x6002FB8")]
		[Address(RVA = "0xE834FC", Offset = "0xE834FC", VA = "0xE834FC", Slot = "6")]
		public override bool GetInputAttackPrimary()
		{
			return default(bool);
		}

		[Token(Token = "0x6002FB9")]
		[Address(RVA = "0xE83504", Offset = "0xE83504", VA = "0xE83504", Slot = "7")]
		public override bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6002FBA")]
		[Address(RVA = "0xE8350C", Offset = "0xE8350C", VA = "0xE8350C", Slot = "8")]
		public override void ApplyMovement(UnityEngine.Vector3 velocity)
		{
		}

		[Token(Token = "0x6002FBB")]
		[Address(RVA = "0xE83510", Offset = "0xE83510", VA = "0xE83510")]
		public AIController()
		{
		}
	}
	[Token(Token = "0x20008E9")]
	public abstract class CharacterControlScript : MonoBehaviour
	{
		[Token(Token = "0x4002B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected StateMachine stateMachine;

		[Token(Token = "0x6002FBC")]
		[Address(RVA = "0xE83540", Offset = "0xE83540", VA = "0xE83540")]
		private void Start()
		{
		}

		[Token(Token = "0x6002FBD")]
		[Address(RVA = "0xE83624", Offset = "0xE83624", VA = "0xE83624", Slot = "4")]
		protected virtual void Initialize()
		{
		}

		[Token(Token = "0x6002FBE")]
		[Address(RVA = "0xE83628", Offset = "0xE83628", VA = "0xE83628")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002FBF")]
		[Address(RVA = "0xE8362C", Offset = "0xE8362C", VA = "0xE8362C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002FC0")]
		public abstract bool GetInputJump();

		[Token(Token = "0x6002FC1")]
		public abstract bool GetInputAttackPrimary();

		[Token(Token = "0x6002FC2")]
		public abstract bool IsGrounded();

		[Token(Token = "0x6002FC3")]
		public abstract void ApplyMovement(UnityEngine.Vector3 velocity);

		[Token(Token = "0x6002FC4")]
		[Address(RVA = "0xE83538", Offset = "0xE83538", VA = "0xE83538")]
		protected CharacterControlScript()
		{
		}
	}
	[Token(Token = "0x20008EA")]
	public class LastPlayerSighting : MonoBehaviour
	{
		[Token(Token = "0x4002B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly UnityEngine.Vector3 NO_SIGHTING;

		[Token(Token = "0x4002B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityEngine.Vector3 position;

		[Token(Token = "0x170006FD")]
		public UnityEngine.Vector3 Position
		{
			[Token(Token = "0x6002FC5")]
			[Address(RVA = "0xE83728", Offset = "0xE83728", VA = "0xE83728")]
			get
			{
				return default(UnityEngine.Vector3);
			}
			[Token(Token = "0x6002FC6")]
			[Address(RVA = "0xE83734", Offset = "0xE83734", VA = "0xE83734")]
			set
			{
			}
		}

		[Token(Token = "0x6002FC7")]
		[Address(RVA = "0xE82C38", Offset = "0xE82C38", VA = "0xE82C38")]
		public void ClearSighting()
		{
		}

		[Token(Token = "0x6002FC8")]
		[Address(RVA = "0xE82924", Offset = "0xE82924", VA = "0xE82924")]
		public bool HasSighting()
		{
			return default(bool);
		}

		[Token(Token = "0x6002FC9")]
		[Address(RVA = "0xE83740", Offset = "0xE83740", VA = "0xE83740")]
		public LastPlayerSighting()
		{
		}
	}
	[Token(Token = "0x20008EB")]
	public class LevelNpcSpawner : DungeonEventListener
	{
		[Token(Token = "0x4002B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject parentObject;

		[Token(Token = "0x4002B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] npcTemplates;

		[Token(Token = "0x4002B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector3 npcOffset;

		[Token(Token = "0x4002B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float spawnProbability;

		[Token(Token = "0x6002FCB")]
		[Address(RVA = "0xE837A0", Offset = "0xE837A0", VA = "0xE837A0", Slot = "7")]
		public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x6002FCC")]
		[Address(RVA = "0xE837A4", Offset = "0xE837A4", VA = "0xE837A4")]
		public void RebuildNPCs()
		{
		}

		[Token(Token = "0x6002FCD")]
		[Address(RVA = "0xE83CE4", Offset = "0xE83CE4", VA = "0xE83CE4")]
		private UnityEngine.Vector3 GetValidPointOnNavMesh(UnityEngine.Vector3 position)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002FCE")]
		[Address(RVA = "0xE83D60", Offset = "0xE83D60", VA = "0xE83D60", Slot = "9")]
		public override void OnDungeonDestroyed(Dungeon dungeon)
		{
		}

		[Token(Token = "0x6002FCF")]
		[Address(RVA = "0xE83A0C", Offset = "0xE83A0C", VA = "0xE83A0C")]
		private void DestroyOldNpcs()
		{
		}

		[Token(Token = "0x6002FD0")]
		[Address(RVA = "0xE83D64", Offset = "0xE83D64", VA = "0xE83D64")]
		public LevelNpcSpawner()
		{
		}
	}
	[Token(Token = "0x20008EC")]
	public class PatrolPath : MonoBehaviour
	{
		[Token(Token = "0x4002B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int minPathLength;

		[Token(Token = "0x4002B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maxPathLength;

		[Token(Token = "0x4002B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float randomOffset;

		[Token(Token = "0x4002B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float proximityThreshold;

		[Token(Token = "0x4002B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Waypoint[] patrolPoints;

		[Token(Token = "0x4002B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool looped;

		[Token(Token = "0x170006FE")]
		public bool Looped
		{
			[Token(Token = "0x6002FD1")]
			[Address(RVA = "0xE83DC8", Offset = "0xE83DC8", VA = "0xE83DC8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170006FF")]
		public Waypoint[] PatrolPoints
		{
			[Token(Token = "0x6002FD2")]
			[Address(RVA = "0xE83DD0", Offset = "0xE83DD0", VA = "0xE83DD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002FD3")]
		[Address(RVA = "0xE83DD8", Offset = "0xE83DD8", VA = "0xE83DD8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002FD4")]
		[Address(RVA = "0xE83DDC", Offset = "0xE83DDC", VA = "0xE83DDC")]
		public void Build()
		{
		}

		[Token(Token = "0x6002FD5")]
		[Address(RVA = "0xE83E14", Offset = "0xE83E14", VA = "0xE83E14")]
		public void Build(UnityEngine.Vector3 nearestStartingPoint)
		{
		}

		[Token(Token = "0x6002FD6")]
		[Address(RVA = "0xE84548", Offset = "0xE84548", VA = "0xE84548")]
		private Waypoint[] FindNonLoopedPath(Waypoint startingWaypoint)
		{
			return null;
		}

		[Token(Token = "0x6002FD7")]
		[Address(RVA = "0xE8413C", Offset = "0xE8413C", VA = "0xE8413C")]
		private Waypoint[] FindLoopedPath(Waypoint startingWaypoint)
		{
			return null;
		}

		[Token(Token = "0x6002FD8")]
		[Address(RVA = "0xE848A8", Offset = "0xE848A8", VA = "0xE848A8")]
		private Waypoint[] Shuffle(Waypoint[] data)
		{
			return null;
		}

		[Token(Token = "0x6002FD9")]
		[Address(RVA = "0xE84058", Offset = "0xE84058", VA = "0xE84058")]
		private Waypoint FindNearest(Waypoint[] waypoints, UnityEngine.Vector3 startingPoint)
		{
			return null;
		}

		[Token(Token = "0x6002FDA")]
		[Address(RVA = "0xE848B0", Offset = "0xE848B0", VA = "0xE848B0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6002FDB")]
		[Address(RVA = "0xE848B4", Offset = "0xE848B4", VA = "0xE848B4")]
		private void VisualizePath()
		{
		}

		[Token(Token = "0x6002FDC")]
		[Address(RVA = "0xE849D8", Offset = "0xE849D8", VA = "0xE849D8")]
		private void DrawLine(UnityEngine.Vector3 a, UnityEngine.Vector3 b, bool mode2D)
		{
		}

		[Token(Token = "0x6002FDD")]
		[Address(RVA = "0xE84A1C", Offset = "0xE84A1C", VA = "0xE84A1C")]
		private void DrawPoint(UnityEngine.Vector3 p, bool mode2D)
		{
		}

		[Token(Token = "0x6002FDE")]
		[Address(RVA = "0xE84A0C", Offset = "0xE84A0C", VA = "0xE84A0C")]
		private UnityEngine.Vector3 FlipYZ(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6002FDF")]
		[Address(RVA = "0xE84A40", Offset = "0xE84A40", VA = "0xE84A40")]
		public PatrolPath()
		{
		}
	}
	[Token(Token = "0x20008ED")]
	public enum GameMessages
	{

	}
	[Token(Token = "0x20008EE")]
	public interface State
	{
		[Token(Token = "0x17000700")]
		StateMachine StateMachine
		{
			[Token(Token = "0x6002FE6")]
			get;
			[Token(Token = "0x6002FE7")]
			set;
		}

		[Token(Token = "0x6002FE0")]
		void Update();

		[Token(Token = "0x6002FE1")]
		void FixedUpdate();

		[Token(Token = "0x6002FE2")]
		void OnEnter();

		[Token(Token = "0x6002FE3")]
		void OnExit();

		[Token(Token = "0x6002FE4")]
		void TransitionTo(string stateName);

		[Token(Token = "0x6002FE5")]
		void OnMessage(GameMessages messageType, object userdata);
	}
	[Token(Token = "0x20008EF")]
	public abstract class StateBase : State
	{
		[Token(Token = "0x4002B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected StateMachine stateMachine;

		[Token(Token = "0x17000701")]
		public StateMachine StateMachine
		{
			[Token(Token = "0x6002FEE")]
			[Address(RVA = "0xE84ABC", Offset = "0xE84ABC", VA = "0xE84ABC", Slot = "10")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002FEF")]
			[Address(RVA = "0xE84AC4", Offset = "0xE84AC4", VA = "0xE84AC4", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6002FE8")]
		[Address(RVA = "0xE84AAC", Offset = "0xE84AAC", VA = "0xE84AAC", Slot = "12")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6002FE9")]
		[Address(RVA = "0xE84AB0", Offset = "0xE84AB0", VA = "0xE84AB0", Slot = "13")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6002FEA")]
		[Address(RVA = "0xE82B2C", Offset = "0xE82B2C", VA = "0xE82B2C", Slot = "14")]
		public virtual void OnEnter()
		{
		}

		[Token(Token = "0x6002FEB")]
		[Address(RVA = "0xE832AC", Offset = "0xE832AC", VA = "0xE832AC", Slot = "15")]
		public virtual void OnExit()
		{
		}

		[Token(Token = "0x6002FEC")]
		[Address(RVA = "0xE84AB4", Offset = "0xE84AB4", VA = "0xE84AB4", Slot = "16")]
		public virtual void TransitionTo(string stateName)
		{
		}

		[Token(Token = "0x6002FED")]
		[Address(RVA = "0xE84AB8", Offset = "0xE84AB8", VA = "0xE84AB8", Slot = "17")]
		public virtual void OnMessage(GameMessages messageType, object userdata)
		{
		}

		[Token(Token = "0x6002FF0")]
		[Address(RVA = "0xE814AC", Offset = "0xE814AC", VA = "0xE814AC")]
		protected StateBase()
		{
		}
	}
	[Token(Token = "0x20008F0")]
	public class StateMachine
	{
		[Token(Token = "0x4002B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Stack<State> stateStack;

		[Token(Token = "0x17000702")]
		public State ActiveState
		{
			[Token(Token = "0x6002FF1")]
			[Address(RVA = "0xE84ACC", Offset = "0xE84ACC", VA = "0xE84ACC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002FF2")]
		[Address(RVA = "0xE815D8", Offset = "0xE815D8", VA = "0xE815D8")]
		public void MoveTo(State state)
		{
		}

		[Token(Token = "0x6002FF3")]
		[Address(RVA = "0xE84B40", Offset = "0xE84B40", VA = "0xE84B40")]
		public void PushTo(State state)
		{
		}

		[Token(Token = "0x6002FF4")]
		[Address(RVA = "0xE84C6C", Offset = "0xE84C6C", VA = "0xE84C6C")]
		public void Pop()
		{
		}

		[Token(Token = "0x6002FF5")]
		[Address(RVA = "0xE83644", Offset = "0xE83644", VA = "0xE83644")]
		public void Update()
		{
		}

		[Token(Token = "0x6002FF6")]
		[Address(RVA = "0xE84D58", Offset = "0xE84D58", VA = "0xE84D58")]
		public void SendMessage(GameMessages message, object userdata)
		{
		}

		[Token(Token = "0x6002FF7")]
		[Address(RVA = "0xE835A8", Offset = "0xE835A8", VA = "0xE835A8")]
		public StateMachine()
		{
		}
	}
	[Token(Token = "0x20008F1")]
	public class MixLevels : MonoBehaviour
	{
		[Token(Token = "0x4002B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioMixer masterMixer;

		[Token(Token = "0x6002FF8")]
		[Address(RVA = "0xE84E28", Offset = "0xE84E28", VA = "0xE84E28")]
		public void SetSfxLvl(float sfxLvl)
		{
		}

		[Token(Token = "0x6002FF9")]
		[Address(RVA = "0xE84E8C", Offset = "0xE84E8C", VA = "0xE84E8C")]
		public void SetMusicLvl(float musicLvl)
		{
		}

		[Token(Token = "0x6002FFA")]
		[Address(RVA = "0xE84EF0", Offset = "0xE84EF0", VA = "0xE84EF0")]
		public MixLevels()
		{
		}
	}
	[Token(Token = "0x20008F2")]
	public class CameraFollow : MonoBehaviour
	{
		[Token(Token = "0x4002B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4002B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float positionSmoothing;

		[Token(Token = "0x4002B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float lookAtSmoothing;

		[Token(Token = "0x4002B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector3 offset;

		[Token(Token = "0x4002B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private UnityEngine.Vector3 currentLookAt;

		[Token(Token = "0x6002FFB")]
		[Address(RVA = "0xE84EF8", Offset = "0xE84EF8", VA = "0xE84EF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6002FFC")]
		[Address(RVA = "0xE84F24", Offset = "0xE84F24", VA = "0xE84F24")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002FFD")]
		[Address(RVA = "0xE850BC", Offset = "0xE850BC", VA = "0xE850BC")]
		public CameraFollow()
		{
		}
	}
	[Token(Token = "0x20008F3")]
	public class EnemyAttack : MonoBehaviour
	{
		[Token(Token = "0x4002B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float timeBetweenAttacks;

		[Token(Token = "0x4002B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int attackDamage;

		[Token(Token = "0x4002B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator anim;

		[Token(Token = "0x4002B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject player;

		[Token(Token = "0x4002B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PlayerHealth playerHealth;

		[Token(Token = "0x4002B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private EnemyHealth enemyHealth;

		[Token(Token = "0x4002B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool playerInRange;

		[Token(Token = "0x4002B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float timer;

		[Token(Token = "0x6002FFE")]
		[Address(RVA = "0xE850CC", Offset = "0xE850CC", VA = "0xE850CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002FFF")]
		[Address(RVA = "0xE8518C", Offset = "0xE8518C", VA = "0xE8518C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6003000")]
		[Address(RVA = "0xE8521C", Offset = "0xE8521C", VA = "0xE8521C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6003001")]
		[Address(RVA = "0xE852A8", Offset = "0xE852A8", VA = "0xE852A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6003002")]
		[Address(RVA = "0xE8536C", Offset = "0xE8536C", VA = "0xE8536C")]
		private void Attack()
		{
		}

		[Token(Token = "0x6003003")]
		[Address(RVA = "0xE85418", Offset = "0xE85418", VA = "0xE85418")]
		public EnemyAttack()
		{
		}
	}
	[Token(Token = "0x20008F4")]
	public class EnemyHealth : MonoBehaviour
	{
		[Token(Token = "0x20008F5")]
		[CompilerGenerated]
		private sealed class <StartSinkingAnimation>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002B34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002B35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002B36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EnemyHealth <>4__this;

			[Token(Token = "0x17000703")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600300E")]
				[Address(RVA = "0xE85980", Offset = "0xE85980", VA = "0xE85980", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000704")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6003010")]
				[Address(RVA = "0xE859C8", Offset = "0xE859C8", VA = "0xE859C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600300B")]
			[Address(RVA = "0xE857A0", Offset = "0xE857A0", VA = "0xE857A0")]
			[DebuggerHidden]
			public <StartSinkingAnimation>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x600300C")]
			[Address(RVA = "0xE857E8", Offset = "0xE857E8", VA = "0xE857E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600300D")]
			[Address(RVA = "0xE857EC", Offset = "0xE857EC", VA = "0xE857EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600300F")]
			[Address(RVA = "0xE85988", Offset = "0xE85988", VA = "0xE85988", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int startingHealth;

		[Token(Token = "0x4002B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int currentHealth;

		[Token(Token = "0x4002B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sinkSpeed;

		[Token(Token = "0x4002B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int scoreValue;

		[Token(Token = "0x4002B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip deathClip;

		[Token(Token = "0x4002B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator anim;

		[Token(Token = "0x4002B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource enemyAudio;

		[Token(Token = "0x4002B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ParticleSystem hitParticles;

		[Token(Token = "0x4002B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CharacterController character;

		[Token(Token = "0x4002B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool isDead;

		[Token(Token = "0x4002B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool isSinking;

		[Token(Token = "0x6003004")]
		[Address(RVA = "0xE8542C", Offset = "0xE8542C", VA = "0xE8542C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003005")]
		[Address(RVA = "0xE85500", Offset = "0xE85500", VA = "0xE85500")]
		private void Update()
		{
		}

		[Token(Token = "0x6003006")]
		[Address(RVA = "0xE855C8", Offset = "0xE855C8", VA = "0xE855C8")]
		public void TakeDamage(int amount, UnityEngine.Vector3 hitPoint)
		{
		}

		[Token(Token = "0x6003007")]
		[Address(RVA = "0xE85684", Offset = "0xE85684", VA = "0xE85684")]
		private void Death()
		{
		}

		[Token(Token = "0x6003008")]
		[Address(RVA = "0xE85718", Offset = "0xE85718", VA = "0xE85718")]
		public void StartSinking()
		{
		}

		[Token(Token = "0x6003009")]
		[Address(RVA = "0xE85738", Offset = "0xE85738", VA = "0xE85738")]
		[IteratorStateMachine(typeof(<StartSinkingAnimation>d__16))]
		private IEnumerator StartSinkingAnimation()
		{
			return null;
		}

		[Token(Token = "0x600300A")]
		[Address(RVA = "0xE857C8", Offset = "0xE857C8", VA = "0xE857C8")]
		public EnemyHealth()
		{
		}
	}
	[Token(Token = "0x20008F6")]
	public class EnemyMovement : MonoBehaviour
	{
		[Token(Token = "0x4002B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform player;

		[Token(Token = "0x4002B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PlayerHealth playerHealth;

		[Token(Token = "0x4002B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private EnemyHealth enemyHealth;

		[Token(Token = "0x4002B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private NavMeshAgent navAgent;

		[Token(Token = "0x6003011")]
		[Address(RVA = "0xE859D0", Offset = "0xE859D0", VA = "0xE859D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003012")]
		[Address(RVA = "0xE85A9C", Offset = "0xE85A9C", VA = "0xE85A9C")]
		private void Update()
		{
		}

		[Token(Token = "0x6003013")]
		[Address(RVA = "0xE85B10", Offset = "0xE85B10", VA = "0xE85B10")]
		public EnemyMovement()
		{
		}
	}
	[Token(Token = "0x20008F7")]
	public class GameController : MonoBehaviour
	{
		[Token(Token = "0x20008F8")]
		[CompilerGenerated]
		private sealed class <RebuildLevel>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002B44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002B45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002B46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameController <>4__this;

			[Token(Token = "0x4002B47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Dungeon dungeon;

			[Token(Token = "0x17000706")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600301C")]
				[Address(RVA = "0xE862D8", Offset = "0xE862D8", VA = "0xE862D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000707")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600301E")]
				[Address(RVA = "0xE86320", Offset = "0xE86320", VA = "0xE86320", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6003019")]
			[Address(RVA = "0xE85D10", Offset = "0xE85D10", VA = "0xE85D10")]
			[DebuggerHidden]
			public <RebuildLevel>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x600301A")]
			[Address(RVA = "0xE85DAC", Offset = "0xE85DAC", VA = "0xE85DAC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600301B")]
			[Address(RVA = "0xE85DB0", Offset = "0xE85DB0", VA = "0xE85DB0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600301D")]
			[Address(RVA = "0xE862E0", Offset = "0xE862E0", VA = "0xE862E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static GameController instance;

		[Token(Token = "0x4002B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x4002B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject minimap;

		[Token(Token = "0x4002B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject levelLoadingScreen;

		[Token(Token = "0x4002B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text textBuildingLayout;

		[Token(Token = "0x4002B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Text textBuildingNavMesh;

		[Token(Token = "0x4002B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LevelNpcSpawner npcSpawner;

		[Token(Token = "0x4002B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string labelBuildingLayout;

		[Token(Token = "0x4002B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string labelBuildingNavmesh;

		[Token(Token = "0x17000705")]
		public static GameController Instance
		{
			[Token(Token = "0x6003014")]
			[Address(RVA = "0xE85B18", Offset = "0xE85B18", VA = "0xE85B18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6003015")]
		[Address(RVA = "0xE85B60", Offset = "0xE85B60", VA = "0xE85B60")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003016")]
		[Address(RVA = "0xE85BDC", Offset = "0xE85BDC", VA = "0xE85BDC")]
		public void CreateNewLevel()
		{
		}

		[Token(Token = "0x6003017")]
		[Address(RVA = "0xE85C9C", Offset = "0xE85C9C", VA = "0xE85C9C")]
		[IteratorStateMachine(typeof(<RebuildLevel>d__13))]
		private IEnumerator RebuildLevel(Dungeon dungeon)
		{
			return null;
		}

		[Token(Token = "0x6003018")]
		[Address(RVA = "0xE85D38", Offset = "0xE85D38", VA = "0xE85D38")]
		public GameController()
		{
		}
	}
	[Token(Token = "0x20008F9")]
	public class LevelGoal : MonoBehaviour
	{
		[Token(Token = "0x600301F")]
		[Address(RVA = "0xE86328", Offset = "0xE86328", VA = "0xE86328")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6003020")]
		[Address(RVA = "0xE863F8", Offset = "0xE863F8", VA = "0xE863F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6003021")]
		[Address(RVA = "0xE86458", Offset = "0xE86458", VA = "0xE86458")]
		public LevelGoal()
		{
		}
	}
	[Token(Token = "0x20008FA")]
	public class BeautyShot : MonoBehaviour
	{
		[Token(Token = "0x20008FB")]
		public enum Supersample
		{
			[Token(Token = "0x4002B50")]
			None = 1,
			[Token(Token = "0x4002B51")]
			Two = 2,
			[Token(Token = "0x4002B52")]
			Four = 4,
			[Token(Token = "0x4002B53")]
			Eight = 8,
			[Token(Token = "0x4002B54")]
			Sixteen = 0x10,
			[Token(Token = "0x4002B55")]
			Wtf = 0x20
		}

		[Token(Token = "0x4002B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask layerMask;

		[Token(Token = "0x4002B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int frameRate;

		[Token(Token = "0x4002B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x4002B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int frameOffset;

		[Token(Token = "0x4002B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float numFrames;

		[Token(Token = "0x4002B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool captureUsingScreenshot;

		[Token(Token = "0x4002B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Supersample supersampleScreenshot;

		[Token(Token = "0x6003022")]
		[Address(RVA = "0xE86460", Offset = "0xE86460", VA = "0xE86460")]
		public string generateFilename()
		{
			return null;
		}

		[Token(Token = "0x6003023")]
		[Address(RVA = "0xE864F4", Offset = "0xE864F4", VA = "0xE864F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6003024")]
		[Address(RVA = "0xE864FC", Offset = "0xE864FC", VA = "0xE864FC")]
		public BeautyShot()
		{
		}
	}
	[Token(Token = "0x20008FC")]
	public class RandomAnimationPoint : MonoBehaviour
	{
		[Token(Token = "0x4002B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool randomize;

		[Token(Token = "0x4002B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float normalizedTime;

		[Token(Token = "0x6003025")]
		[Address(RVA = "0xE86518", Offset = "0xE86518", VA = "0xE86518")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6003026")]
		[Address(RVA = "0xE865CC", Offset = "0xE865CC", VA = "0xE865CC")]
		public RandomAnimationPoint()
		{
		}
	}
	[Token(Token = "0x20008FD")]
	public class RandomParticlePoint : MonoBehaviour
	{
		[Token(Token = "0x4002B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float normalizedTime;

		[Token(Token = "0x6003027")]
		[Address(RVA = "0xE865D4", Offset = "0xE865D4", VA = "0xE865D4")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6003028")]
		[Address(RVA = "0xE86638", Offset = "0xE86638", VA = "0xE86638")]
		public RandomParticlePoint()
		{
		}
	}
	[Token(Token = "0x20008FE")]
	public class VolumeHandler : MonoBehaviour
	{
		[Token(Token = "0x6003029")]
		[Address(RVA = "0xE86640", Offset = "0xE86640", VA = "0xE86640")]
		private void Start()
		{
		}

		[Token(Token = "0x600302A")]
		[Address(RVA = "0xE86784", Offset = "0xE86784", VA = "0xE86784")]
		private void SetVolume(float volume)
		{
		}

		[Token(Token = "0x600302B")]
		[Address(RVA = "0xE867EC", Offset = "0xE867EC", VA = "0xE867EC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600302C")]
		[Address(RVA = "0xE86930", Offset = "0xE86930", VA = "0xE86930")]
		public VolumeHandler()
		{
		}
	}
	[Token(Token = "0x20008FF")]
	public class EnemyManager : MonoBehaviour
	{
		[Token(Token = "0x4002B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerHealth playerHealth;

		[Token(Token = "0x4002B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject enemy;

		[Token(Token = "0x4002B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float spawnTime;

		[Token(Token = "0x4002B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform[] spawnPoints;

		[Token(Token = "0x600302D")]
		[Address(RVA = "0xE86938", Offset = "0xE86938", VA = "0xE86938")]
		private void Start()
		{
		}

		[Token(Token = "0x600302E")]
		[Address(RVA = "0xE8698C", Offset = "0xE8698C", VA = "0xE8698C")]
		private void Spawn()
		{
		}

		[Token(Token = "0x600302F")]
		[Address(RVA = "0xE86B08", Offset = "0xE86B08", VA = "0xE86B08")]
		public EnemyManager()
		{
		}
	}
	[Token(Token = "0x2000900")]
	public class GameOverManager : MonoBehaviour
	{
		[Token(Token = "0x4002B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerHealth playerHealth;

		[Token(Token = "0x4002B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator anim;

		[Token(Token = "0x6003030")]
		[Address(RVA = "0xE86B18", Offset = "0xE86B18", VA = "0xE86B18")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003031")]
		[Address(RVA = "0xE86B68", Offset = "0xE86B68", VA = "0xE86B68")]
		private void Update()
		{
		}

		[Token(Token = "0x6003032")]
		[Address(RVA = "0xE86BDC", Offset = "0xE86BDC", VA = "0xE86BDC")]
		public GameOverManager()
		{
		}
	}
	[Token(Token = "0x2000901")]
	public class PauseManager : MonoBehaviour
	{
		[Token(Token = "0x4002B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioMixerSnapshot paused;

		[Token(Token = "0x4002B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioMixerSnapshot unpaused;

		[Token(Token = "0x4002B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Canvas canvas;

		[Token(Token = "0x6003033")]
		[Address(RVA = "0xE86BE4", Offset = "0xE86BE4", VA = "0xE86BE4")]
		private void Start()
		{
		}

		[Token(Token = "0x6003034")]
		[Address(RVA = "0xE86C34", Offset = "0xE86C34", VA = "0xE86C34")]
		private void Update()
		{
		}

		[Token(Token = "0x6003035")]
		[Address(RVA = "0xE86C98", Offset = "0xE86C98", VA = "0xE86C98")]
		public void Pause()
		{
		}

		[Token(Token = "0x6003036")]
		[Address(RVA = "0xE86CCC", Offset = "0xE86CCC", VA = "0xE86CCC")]
		private void Lowpass()
		{
		}

		[Token(Token = "0x6003037")]
		[Address(RVA = "0xE86D0C", Offset = "0xE86D0C", VA = "0xE86D0C")]
		public void Quit()
		{
		}

		[Token(Token = "0x6003038")]
		[Address(RVA = "0xE86D14", Offset = "0xE86D14", VA = "0xE86D14")]
		public PauseManager()
		{
		}
	}
	[Token(Token = "0x2000902")]
	public class ScoreManager : MonoBehaviour
	{
		[Token(Token = "0x4002B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int score;

		[Token(Token = "0x4002B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text text;

		[Token(Token = "0x6003039")]
		[Address(RVA = "0xE86D1C", Offset = "0xE86D1C", VA = "0xE86D1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600303A")]
		[Address(RVA = "0xE86D94", Offset = "0xE86D94", VA = "0xE86D94")]
		private void Update()
		{
		}

		[Token(Token = "0x600303B")]
		[Address(RVA = "0xE86E34", Offset = "0xE86E34", VA = "0xE86E34")]
		public ScoreManager()
		{
		}
	}
	[Token(Token = "0x2000903")]
	public class MiniMapCameraTracker : MonoBehaviour
	{
		[Token(Token = "0x4002B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform trackingTransform;

		[Token(Token = "0x4002B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform baseDungeonTransform;

		[Token(Token = "0x4002B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform dotTransform;

		[Token(Token = "0x600303C")]
		[Address(RVA = "0xE86E3C", Offset = "0xE86E3C", VA = "0xE86E3C")]
		private void Start()
		{
		}

		[Token(Token = "0x600303D")]
		[Address(RVA = "0xE86E40", Offset = "0xE86E40", VA = "0xE86E40")]
		private void Update()
		{
		}

		[Token(Token = "0x600303E")]
		[Address(RVA = "0xE86EF4", Offset = "0xE86EF4", VA = "0xE86EF4")]
		public MiniMapCameraTracker()
		{
		}
	}
	[Token(Token = "0x2000904")]
	public class MiniMapEnemyDots : MonoBehaviour
	{
		[Token(Token = "0x4002B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject enemyDotTemplate;

		[Token(Token = "0x4002B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Queue<GameObject> dots;

		[Token(Token = "0x4002B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform baseDungeon;

		[Token(Token = "0x4002B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform miniMapDungeon;

		[Token(Token = "0x4002B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityEngine.Vector3 offset;

		[Token(Token = "0x600303F")]
		[Address(RVA = "0xE86EFC", Offset = "0xE86EFC", VA = "0xE86EFC")]
		private void Start()
		{
		}

		[Token(Token = "0x6003040")]
		[Address(RVA = "0xE86F60", Offset = "0xE86F60", VA = "0xE86F60")]
		private void Update()
		{
		}

		[Token(Token = "0x6003041")]
		[Address(RVA = "0xE87230", Offset = "0xE87230", VA = "0xE87230")]
		private GameObject BuildDot(GameObject enemy)
		{
			return null;
		}

		[Token(Token = "0x6003042")]
		[Address(RVA = "0xE873D8", Offset = "0xE873D8", VA = "0xE873D8")]
		public MiniMapEnemyDots()
		{
		}
	}
	[Token(Token = "0x2000905")]
	public class MiniMapGenerator : MonoBehaviour
	{
		[Token(Token = "0x4002B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Graph> miniMapThemes;

		[Token(Token = "0x4002B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject miniMapDungeonObject;

		[Token(Token = "0x4002B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dungeon minimapDungeon;

		[Token(Token = "0x6003043")]
		[Address(RVA = "0xE87454", Offset = "0xE87454", VA = "0xE87454")]
		public void BuildMiniMap(Dungeon baseDungeon)
		{
		}

		[Token(Token = "0x6003044")]
		[Address(RVA = "0xE87648", Offset = "0xE87648", VA = "0xE87648")]
		public void DestroyDungeon()
		{
		}

		[Token(Token = "0x6003045")]
		private void DisableComponent<T>(GameObject obj) where T : MonoBehaviour
		{
		}

		[Token(Token = "0x6003046")]
		[Address(RVA = "0xE876CC", Offset = "0xE876CC", VA = "0xE876CC")]
		public MiniMapGenerator()
		{
		}
	}
	[Token(Token = "0x2000906")]
	public class MiniMapRebuilder : DungeonEventListener
	{
		[Token(Token = "0x4002B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MiniMapGenerator miniMap;

		[Token(Token = "0x6003047")]
		[Address(RVA = "0xE876D4", Offset = "0xE876D4", VA = "0xE876D4", Slot = "7")]
		public override void OnPostDungeonBuild(Dungeon dungeon, DungeonModel model)
		{
		}

		[Token(Token = "0x6003048")]
		[Address(RVA = "0xE876EC", Offset = "0xE876EC", VA = "0xE876EC", Slot = "9")]
		public override void OnDungeonDestroyed(Dungeon dungeon)
		{
		}

		[Token(Token = "0x6003049")]
		[Address(RVA = "0xE87704", Offset = "0xE87704", VA = "0xE87704")]
		public MiniMapRebuilder()
		{
		}
	}
	[Token(Token = "0x2000907")]
	public class MiniMapRenderer : MonoBehaviour
	{
		[Token(Token = "0x4002B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture miniMapRtt;

		[Token(Token = "0x4002B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material miniMapMat;

		[Token(Token = "0x4002B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int width;

		[Token(Token = "0x4002B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int height;

		[Token(Token = "0x600304A")]
		[Address(RVA = "0xE8770C", Offset = "0xE8770C", VA = "0xE8770C")]
		private void Start()
		{
		}

		[Token(Token = "0x600304B")]
		[Address(RVA = "0xE87710", Offset = "0xE87710", VA = "0xE87710")]
		private void Update()
		{
		}

		[Token(Token = "0x600304C")]
		[Address(RVA = "0xE87714", Offset = "0xE87714", VA = "0xE87714")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600304D")]
		[Address(RVA = "0xE8783C", Offset = "0xE8783C", VA = "0xE8783C")]
		public MiniMapRenderer()
		{
		}
	}
	[Token(Token = "0x2000908")]
	public class PlayerHealth : MonoBehaviour
	{
		[Token(Token = "0x4002B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int startingHealth;

		[Token(Token = "0x4002B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int currentHealth;

		[Token(Token = "0x4002B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Slider healthSlider;

		[Token(Token = "0x4002B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Image damageImage;

		[Token(Token = "0x4002B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip deathClip;

		[Token(Token = "0x4002B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float flashSpeed;

		[Token(Token = "0x4002B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color flashColour;

		[Token(Token = "0x4002B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Animator anim;

		[Token(Token = "0x4002B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource playerAudio;

		[Token(Token = "0x4002B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PlayerMovement playerMovement;

		[Token(Token = "0x4002B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PlayerShooting playerShooting;

		[Token(Token = "0x4002B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool isDead;

		[Token(Token = "0x4002B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool damaged;

		[Token(Token = "0x600304E")]
		[Address(RVA = "0xE8784C", Offset = "0xE8784C", VA = "0xE8784C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600304F")]
		[Address(RVA = "0xE87920", Offset = "0xE87920", VA = "0xE87920")]
		private void Update()
		{
		}

		[Token(Token = "0x6003050")]
		[Address(RVA = "0xE853A4", Offset = "0xE853A4", VA = "0xE853A4")]
		public void TakeDamage(int amount)
		{
		}

		[Token(Token = "0x6003051")]
		[Address(RVA = "0xE87A8C", Offset = "0xE87A8C", VA = "0xE87A8C")]
		private void Death()
		{
		}

		[Token(Token = "0x6003052")]
		[Address(RVA = "0xE87B8C", Offset = "0xE87B8C", VA = "0xE87B8C")]
		public void RestartLevel()
		{
		}

		[Token(Token = "0x6003053")]
		[Address(RVA = "0xE87BFC", Offset = "0xE87BFC", VA = "0xE87BFC")]
		public PlayerHealth()
		{
		}
	}
	[Token(Token = "0x2000909")]
	public class PlayerMovement : MonoBehaviour
	{
		[Token(Token = "0x4002B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4002B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float gravity;

		[Token(Token = "0x4002B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CharacterController character;

		[Token(Token = "0x4002B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3 movement;

		[Token(Token = "0x4002B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator anim;

		[Token(Token = "0x4002B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float camRayLength;

		[Token(Token = "0x6003054")]
		[Address(RVA = "0xE87C24", Offset = "0xE87C24", VA = "0xE87C24")]
		private void Awake()
		{
		}

		[Token(Token = "0x6003055")]
		[Address(RVA = "0xE87CB0", Offset = "0xE87CB0", VA = "0xE87CB0")]
		public void OnTeleportered()
		{
		}

		[Token(Token = "0x6003056")]
		[Address(RVA = "0xE87CD0", Offset = "0xE87CD0", VA = "0xE87CD0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6003057")]
		[Address(RVA = "0xE87D78", Offset = "0xE87D78", VA = "0xE87D78")]
		private void Move(float h, float v)
		{
		}

		[Token(Token = "0x6003058")]
		[Address(RVA = "0xE87EF4", Offset = "0xE87EF4", VA = "0xE87EF4")]
		private void Turning()
		{
		}

		[Token(Token = "0x6003059")]
		[Address(RVA = "0xE87FFC", Offset = "0xE87FFC", VA = "0xE87FFC")]
		private void Animating(float h, float v)
		{
		}

		[Token(Token = "0x600305A")]
		[Address(RVA = "0xE88074", Offset = "0xE88074", VA = "0xE88074")]
		public PlayerMovement()
		{
		}
	}
	[Token(Token = "0x200090A")]
	public class PlayerShooting : MonoBehaviour
	{
		[Token(Token = "0x4002B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int damagePerShot;

		[Token(Token = "0x4002B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float timeBetweenBullets;

		[Token(Token = "0x4002B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float range;

		[Token(Token = "0x4002B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float timer;

		[Token(Token = "0x4002B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Ray shootRay;

		[Token(Token = "0x4002B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RaycastHit shootHit;

		[Token(Token = "0x4002B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ParticleSystem gunParticles;

		[Token(Token = "0x4002B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LineRenderer gunLine;

		[Token(Token = "0x4002B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AudioSource gunAudio;

		[Token(Token = "0x4002B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Light gunLight;

		[Token(Token = "0x4002B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Light faceLight;

		[Token(Token = "0x4002B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float effectsDisplayTime;

		[Token(Token = "0x600305B")]
		[Address(RVA = "0xE88090", Offset = "0xE88090", VA = "0xE88090")]
		private void Awake()
		{
		}

		[Token(Token = "0x600305C")]
		[Address(RVA = "0xE8815C", Offset = "0xE8815C", VA = "0xE8815C")]
		private void Update()
		{
		}

		[Token(Token = "0x600305D")]
		[Address(RVA = "0xE87B40", Offset = "0xE87B40", VA = "0xE87B40")]
		public void DisableEffects()
		{
		}

		[Token(Token = "0x600305E")]
		[Address(RVA = "0xE8821C", Offset = "0xE8821C", VA = "0xE8821C")]
		private void Shoot()
		{
		}

		[Token(Token = "0x600305F")]
		[Address(RVA = "0xE88480", Offset = "0xE88480", VA = "0xE88480")]
		public PlayerShooting()
		{
		}
	}
	[Token(Token = "0x200090B")]
	public class GameTags : MonoBehaviour
	{
		[Token(Token = "0x4002B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string Player;

		[Token(Token = "0x6003060")]
		[Address(RVA = "0xE884A8", Offset = "0xE884A8", VA = "0xE884A8")]
		public GameTags()
		{
		}
	}
	[Token(Token = "0x200090C")]
	public class Waypoint : MonoBehaviour
	{
		[Token(Token = "0x4002B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int id;

		[Token(Token = "0x4002B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Waypoint[] adjacentWaypoints;

		[Token(Token = "0x17000708")]
		public Waypoint[] AdjacentWaypoints
		{
			[Token(Token = "0x6003062")]
			[Address(RVA = "0xE88510", Offset = "0xE88510", VA = "0xE88510")]
			get
			{
				return null;
			}
			[Token(Token = "0x6003063")]
			[Address(RVA = "0xE88518", Offset = "0xE88518", VA = "0xE88518")]
			set
			{
			}
		}

		[Token(Token = "0x6003064")]
		[Address(RVA = "0xE88520", Offset = "0xE88520", VA = "0xE88520", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6003065")]
		[Address(RVA = "0xE885F4", Offset = "0xE885F4", VA = "0xE885F4")]
		public Waypoint()
		{
		}
	}
	[Token(Token = "0x200090D")]
	public class WaypointGenerator : DungeonEventListener
	{
		[Token(Token = "0x4002B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject waypointTemplate;

		[Token(Token = "0x4002B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject waypointParent;

		[Token(Token = "0x4002B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.Vector3 waypointOffset;

		[Token(Token = "0x4002B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool mode2D;

		[Token(Token = "0x6003066")]
		[Address(RVA = "0xE8864C", Offset = "0xE8864C", VA = "0xE8864C", Slot = "5")]
		public override void OnDungeonMarkersEmitted(Dungeon dungeon, DungeonModel model, LevelMarkerList markers)
		{
		}

		[Token(Token = "0x6003067")]
		[Address(RVA = "0xE88658", Offset = "0xE88658", VA = "0xE88658")]
		public void BuildWaypoints(DungeonModel model, LevelMarkerList markers)
		{
		}

		[Token(Token = "0x6003068")]
		[Address(RVA = "0xE888C8", Offset = "0xE888C8", VA = "0xE888C8")]
		private void BuildGridWaypoints(GridDungeonModel gridModel, LevelMarkerList markers)
		{
		}

		[Token(Token = "0x6003069")]
		[Address(RVA = "0xE894DC", Offset = "0xE894DC", VA = "0xE894DC")]
		private void BuildCityWaypoints(SimpleCityDungeonModel model)
		{
		}

		[Token(Token = "0x600306A")]
		[Address(RVA = "0xE89B30", Offset = "0xE89B30", VA = "0xE89B30")]
		private void ConnectAdjacentRoadTiles(SimpleCityDungeonModel model, SimpleCityCell cell, int dx, int dz, Dictionary<SimpleCityCell, Waypoint> cellToWaypoint, Dictionary<Waypoint, List<Waypoint>> adjacentWaypoints)
		{
		}

		[Token(Token = "0x600306B")]
		[Address(RVA = "0xE89AA4", Offset = "0xE89AA4", VA = "0xE89AA4")]
		private int GetHash(int a, int b)
		{
			return default(int);
		}

		[Token(Token = "0x600306C")]
		[Address(RVA = "0xE89AAC", Offset = "0xE89AAC", VA = "0xE89AAC")]
		private bool HasDirectPath(GridDungeonModel gridModel, DungeonArchitect.Builders.Grid.Cell cellA, DungeonArchitect.Builders.Grid.Cell cellB)
		{
			return default(bool);
		}

		[Token(Token = "0x600306D")]
		[Address(RVA = "0xE89D3C", Offset = "0xE89D3C", VA = "0xE89D3C", Slot = "9")]
		public override void OnDungeonDestroyed(Dungeon dungeon)
		{
		}

		[Token(Token = "0x600306E")]
		[Address(RVA = "0xE887CC", Offset = "0xE887CC", VA = "0xE887CC")]
		private void DestroyAllWaypoints()
		{
		}

		[Token(Token = "0x600306F")]
		[Address(RVA = "0xE89A94", Offset = "0xE89A94", VA = "0xE89A94")]
		private UnityEngine.Vector3 FlipYZ(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6003070")]
		[Address(RVA = "0xE89D40", Offset = "0xE89D40", VA = "0xE89D40")]
		public WaypointGenerator()
		{
		}
	}
	[Token(Token = "0x200090E")]
	public class WaypointPathVisualizer : MonoBehaviour
	{
		[Token(Token = "0x4002B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color pathColor;

		[Token(Token = "0x6003071")]
		[Address(RVA = "0xE89DA0", Offset = "0xE89DA0", VA = "0xE89DA0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6003072")]
		[Address(RVA = "0xE89DA4", Offset = "0xE89DA4", VA = "0xE89DA4")]
		private void DrawWaypointPaths()
		{
		}

		[Token(Token = "0x6003073")]
		[Address(RVA = "0xE89F74", Offset = "0xE89F74", VA = "0xE89F74")]
		private void DrawLine(UnityEngine.Vector3 a, UnityEngine.Vector3 b)
		{
		}

		[Token(Token = "0x6003074")]
		[Address(RVA = "0xE89F64", Offset = "0xE89F64", VA = "0xE89F64")]
		private void DrawPoint(UnityEngine.Vector3 p)
		{
		}

		[Token(Token = "0x6003075")]
		[Address(RVA = "0xE89F7C", Offset = "0xE89F7C", VA = "0xE89F7C")]
		private UnityEngine.Vector3 FlipYZ(UnityEngine.Vector3 v)
		{
			return default(UnityEngine.Vector3);
		}

		[Token(Token = "0x6003076")]
		[Address(RVA = "0xE89F8C", Offset = "0xE89F8C", VA = "0xE89F8C")]
		public WaypointPathVisualizer()
		{
		}
	}
	[Token(Token = "0x200090F")]
	public class MMRoomSelector : SelectorRule
	{
		[Token(Token = "0x6003077")]
		[Address(RVA = "0xE89FA0", Offset = "0xE89FA0", VA = "0xE89FA0", Slot = "4")]
		public override bool CanSelect(PropSocket socket, Matrix4x4 propTransform, DungeonModel model, System.Random random)
		{
			return default(bool);
		}

		[Token(Token = "0x6003078")]
		[Address(RVA = "0xE8A044", Offset = "0xE8A044", VA = "0xE8A044")]
		public MMRoomSelector()
		{
		}
	}
}
namespace DungeonArchitect.Samples.ShooterGame.TwoD
{
	[Token(Token = "0x2000910")]
	public class AIStateBase : StateBase
	{
		[Token(Token = "0x4002B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected AIController2D controller;

		[Token(Token = "0x6003079")]
		[Address(RVA = "0xE8A04C", Offset = "0xE8A04C", VA = "0xE8A04C")]
		public AIStateBase(AIController2D controller, float updateDelay)
		{
		}

		[Token(Token = "0x600307A")]
		[Address(RVA = "0xE8A074", Offset = "0xE8A074", VA = "0xE8A074", Slot = "18")]
		protected virtual void HandleFrameUpdate(float elapsedTime)
		{
		}

		[Token(Token = "0x600307B")]
		[Address(RVA = "0xE8A078", Offset = "0xE8A078", VA = "0xE8A078", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x600307C")]
		[Address(RVA = "0xE8A174", Offset = "0xE8A174", VA = "0xE8A174")]
		protected bool IsWithinPlayerProximity(ref Collider outCollider, float radius)
		{
			return default(bool);
		}

		[Token(Token = "0x600307D")]
		[Address(RVA = "0xE8A17C", Offset = "0xE8A17C", VA = "0xE8A17C")]
		protected GameObject GetPlayer()
		{
			return null;
		}

		[Token(Token = "0x600307E")]
		[Address(RVA = "0xE8A1D8", Offset = "0xE8A1D8", VA = "0xE8A1D8")]
		protected bool IsPlayerVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x600307F")]
		[Address(RVA = "0xE8A200", Offset = "0xE8A200", VA = "0xE8A200")]
		protected bool IsPlayerVisible2D()
		{
			return default(bool);
		}

		[Token(Token = "0x6003080")]
		[Address(RVA = "0xE8A978", Offset = "0xE8A978", VA = "0xE8A978")]
		protected bool IsPlayerVisible3D()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000912")]
	public class AIStateMoveToLastKnownPosition : AIStateBase
	{
		[Token(Token = "0x6003085")]
		[Address(RVA = "0xE8B1D4", Offset = "0xE8B1D4", VA = "0xE8B1D4")]
		public AIStateMoveToLastKnownPosition(AIController2D controller)
		{
		}

		[Token(Token = "0x6003086")]
		[Address(RVA = "0xE8B1FC", Offset = "0xE8B1FC", VA = "0xE8B1FC", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003087")]
		[Address(RVA = "0xE8B300", Offset = "0xE8B300", VA = "0xE8B300", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x6003088")]
		[Address(RVA = "0xE8B304", Offset = "0xE8B304", VA = "0xE8B304", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x2000913")]
	public class AIStateWaitAndSearch : AIStateBase
	{
		[Token(Token = "0x4002B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float timeSinceStart;

		[Token(Token = "0x6003089")]
		[Address(RVA = "0xE8B3FC", Offset = "0xE8B3FC", VA = "0xE8B3FC")]
		public AIStateWaitAndSearch(AIController2D controller)
		{
		}

		[Token(Token = "0x600308A")]
		[Address(RVA = "0xE8B424", Offset = "0xE8B424", VA = "0xE8B424", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600308B")]
		[Address(RVA = "0xE8B458", Offset = "0xE8B458", VA = "0xE8B458", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x2000914")]
	public class AIStatePersuit : AIStateBase
	{
		[Token(Token = "0x4002BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform followTarget;

		[Token(Token = "0x600308C")]
		[Address(RVA = "0xE8B3D4", Offset = "0xE8B3D4", VA = "0xE8B3D4")]
		public AIStatePersuit(AIController2D controller)
		{
		}

		[Token(Token = "0x600308D")]
		[Address(RVA = "0xE8B56C", Offset = "0xE8B56C", VA = "0xE8B56C", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600308E")]
		[Address(RVA = "0xE8B60C", Offset = "0xE8B60C", VA = "0xE8B60C", Slot = "15")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600308F")]
		[Address(RVA = "0xE8B634", Offset = "0xE8B634", VA = "0xE8B634", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x6003090")]
		[Address(RVA = "0xE8B638", Offset = "0xE8B638", VA = "0xE8B638", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x2000915")]
	public class AIStatePatrol : AIStateBase
	{
		[Token(Token = "0x4002BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int currentWaypointIndex;

		[Token(Token = "0x4002BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.Vector3[] waypointOffsets;

		[Token(Token = "0x6003091")]
		[Address(RVA = "0xE8B2D8", Offset = "0xE8B2D8", VA = "0xE8B2D8")]
		public AIStatePatrol(AIController2D controller)
		{
		}

		[Token(Token = "0x6003092")]
		[Address(RVA = "0xE8B748", Offset = "0xE8B748", VA = "0xE8B748", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003093")]
		[Address(RVA = "0xE8B8F4", Offset = "0xE8B8F4", VA = "0xE8B8F4")]
		private void MoveToCurrentPoint()
		{
		}

		[Token(Token = "0x6003094")]
		[Address(RVA = "0xE8BA48", Offset = "0xE8BA48", VA = "0xE8BA48", Slot = "15")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x6003095")]
		[Address(RVA = "0xE8BA4C", Offset = "0xE8BA4C", VA = "0xE8BA4C", Slot = "12")]
		public override void Update()
		{
		}

		[Token(Token = "0x6003096")]
		[Address(RVA = "0xE8BA50", Offset = "0xE8BA50", VA = "0xE8BA50", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x2000916")]
	internal enum AIAttackAnimState
	{
		[Token(Token = "0x4002BA4")]
		Requested,
		[Token(Token = "0x4002BA5")]
		Running,
		[Token(Token = "0x4002BA6")]
		InterAttackWait
	}
	[Token(Token = "0x2000917")]
	public class AIStateDead : AIStateBase
	{
		[Token(Token = "0x6003097")]
		[Address(RVA = "0xE8A14C", Offset = "0xE8A14C", VA = "0xE8A14C")]
		public AIStateDead(AIController2D controller)
		{
		}

		[Token(Token = "0x6003098")]
		[Address(RVA = "0xE8BB30", Offset = "0xE8BB30", VA = "0xE8BB30", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x6003099")]
		[Address(RVA = "0xE8BB9C", Offset = "0xE8BB9C", VA = "0xE8BB9C", Slot = "15")]
		public override void OnExit()
		{
		}
	}
	[Token(Token = "0x2000918")]
	public class AIStateIdle : AIStateBase
	{
		[Token(Token = "0x600309A")]
		[Address(RVA = "0xE8BBA4", Offset = "0xE8BBA4", VA = "0xE8BBA4")]
		public AIStateIdle(AIController2D controller)
		{
		}

		[Token(Token = "0x600309B")]
		[Address(RVA = "0xE8BBCC", Offset = "0xE8BBCC", VA = "0xE8BBCC", Slot = "14")]
		public override void OnEnter()
		{
		}

		[Token(Token = "0x600309C")]
		[Address(RVA = "0xE8BC18", Offset = "0xE8BC18", VA = "0xE8BC18", Slot = "15")]
		public override void OnExit()
		{
		}

		[Token(Token = "0x600309D")]
		[Address(RVA = "0xE8BC20", Offset = "0xE8BC20", VA = "0xE8BC20", Slot = "18")]
		protected override void HandleFrameUpdate(float elapsedTime)
		{
		}
	}
	[Token(Token = "0x2000919")]
	public class AIController2D : CharacterControlScript
	{
		[Token(Token = "0x4002BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DungeonNavAgent agent;

		[Token(Token = "0x4002BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PatrolPath patrol;

		[Token(Token = "0x4002BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CapsuleCollider capsule;

		[Token(Token = "0x4002BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private LastPlayerSighting lastSighting;

		[Token(Token = "0x4002BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool hasPatrolling;

		[Token(Token = "0x4002BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float fieldOfView;

		[Token(Token = "0x4002BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float maxViewSight;

		[Token(Token = "0x4002BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float searchWaitTime;

		[Token(Token = "0x4002BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float playerCloseByDistance;

		[Token(Token = "0x4002BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float destinationArriveProximity;

		[Token(Token = "0x4002BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float playerProximityRadius;

		[Token(Token = "0x4002BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool mode2D;

		[Token(Token = "0x17000709")]
		public DungeonNavAgent Agent
		{
			[Token(Token = "0x600309E")]
			[Address(RVA = "0xE8BCAC", Offset = "0xE8BCAC", VA = "0xE8BCAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700070A")]
		public CapsuleCollider Capsule
		{
			[Token(Token = "0x600309F")]
			[Address(RVA = "0xE8BCB4", Offset = "0xE8BCB4", VA = "0xE8BCB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700070B")]
		public PatrolPath Patrol
		{
			[Token(Token = "0x60030A0")]
			[Address(RVA = "0xE8BCBC", Offset = "0xE8BCBC", VA = "0xE8BCBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700070C")]
		public LastPlayerSighting LastSighting
		{
			[Token(Token = "0x60030A1")]
			[Address(RVA = "0xE8BCC4", Offset = "0xE8BCC4", VA = "0xE8BCC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60030A2")]
		[Address(RVA = "0xE8BCCC", Offset = "0xE8BCCC", VA = "0xE8BCCC", Slot = "4")]
		protected override void Initialize()
		{
		}

		[Token(Token = "0x60030A3")]
		[Address(RVA = "0xE8BE00", Offset = "0xE8BE00", VA = "0xE8BE00", Slot = "5")]
		public override bool GetInputJump()
		{
			return default(bool);
		}

		[Token(Token = "0x60030A4")]
		[Address(RVA = "0xE8BE08", Offset = "0xE8BE08", VA = "0xE8BE08", Slot = "6")]
		public override bool GetInputAttackPrimary()
		{
			return default(bool);
		}

		[Token(Token = "0x60030A5")]
		[Address(RVA = "0xE8BE10", Offset = "0xE8BE10", VA = "0xE8BE10", Slot = "7")]
		public override bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x60030A6")]
		[Address(RVA = "0xE8BE18", Offset = "0xE8BE18", VA = "0xE8BE18", Slot = "8")]
		public override void ApplyMovement(UnityEngine.Vector3 velocity)
		{
		}

		[Token(Token = "0x60030A7")]
		[Address(RVA = "0xE8BE1C", Offset = "0xE8BE1C", VA = "0xE8BE1C")]
		public AIController2D()
		{
		}
	}
}
namespace DungeonArchitect.Samples.InfinityCaves
{
	[Token(Token = "0x200091A")]
	public class InfinityCavesDemoController : MonoBehaviour
	{
		[Token(Token = "0x4002BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InfinityDungeon dungeon;

		[Token(Token = "0x60030A8")]
		[Address(RVA = "0xE8BE44", Offset = "0xE8BE44", VA = "0xE8BE44")]
		private void Start()
		{
		}

		[Token(Token = "0x60030A9")]
		[Address(RVA = "0xE8BEC8", Offset = "0xE8BEC8", VA = "0xE8BEC8")]
		public InfinityCavesDemoController()
		{
		}
	}
}
namespace DungeonArchitect.Samples.GridFlow
{
	[Token(Token = "0x200091B")]
	public class LockedDoor : MonoBehaviour
	{
		[Token(Token = "0x4002BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform doorLeft;

		[Token(Token = "0x4002BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform doorRight;

		[Token(Token = "0x4002BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animator animator;

		[Token(Token = "0x4002BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string lockId;

		[Token(Token = "0x4002BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string[] validKeys;

		[Token(Token = "0x60030AA")]
		[Address(RVA = "0xE8BED0", Offset = "0xE8BED0", VA = "0xE8BED0")]
		private void Start()
		{
		}

		[Token(Token = "0x60030AB")]
		[Address(RVA = "0xE8BF98", Offset = "0xE8BF98", VA = "0xE8BF98")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60030AC")]
		[Address(RVA = "0xE8C11C", Offset = "0xE8C11C", VA = "0xE8C11C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60030AD")]
		[Address(RVA = "0xE8BFBC", Offset = "0xE8BFBC", VA = "0xE8BFBC")]
		private bool CanOpenDoor(Collider other)
		{
			return default(bool);
		}

		[Token(Token = "0x60030AE")]
		[Address(RVA = "0xE8C0C4", Offset = "0xE8C0C4", VA = "0xE8C0C4")]
		private void OpenDoor()
		{
		}

		[Token(Token = "0x60030AF")]
		[Address(RVA = "0xE8C120", Offset = "0xE8C120", VA = "0xE8C120")]
		private void CloseDoor()
		{
		}

		[Token(Token = "0x60030B0")]
		[Address(RVA = "0xE8C204", Offset = "0xE8C204", VA = "0xE8C204")]
		public LockedDoor()
		{
		}
	}
	[Token(Token = "0x200091C")]
	public class GridFlowGameController : MonoBehaviour
	{
		[Token(Token = "0x4002BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dungeon dungeon;

		[Token(Token = "0x60030B1")]
		[Address(RVA = "0xE8C25C", Offset = "0xE8C25C", VA = "0xE8C25C")]
		private void Start()
		{
		}

		[Token(Token = "0x60030B2")]
		[Address(RVA = "0xE8C350", Offset = "0xE8C350", VA = "0xE8C350")]
		private void Update()
		{
		}

		[Token(Token = "0x60030B3")]
		[Address(RVA = "0xE8C354", Offset = "0xE8C354", VA = "0xE8C354")]
		public GridFlowGameController()
		{
		}
	}
	[Token(Token = "0x200091D")]
	public class GridFlowPlayerController : MonoBehaviour
	{
		[Token(Token = "0x60030B4")]
		[Address(RVA = "0xE8C35C", Offset = "0xE8C35C", VA = "0xE8C35C")]
		public GridFlowPlayerController()
		{
		}
	}
	[Token(Token = "0x200091E")]
	public enum InventoryItemType
	{
		[Token(Token = "0x4002BBB")]
		None,
		[Token(Token = "0x4002BBC")]
		Key
	}
	[Serializable]
	[Token(Token = "0x200091F")]
	public class InventoryItem
	{
		[Token(Token = "0x4002BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public InventoryItemType itemType;

		[Token(Token = "0x4002BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string itemId;

		[Token(Token = "0x4002BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sprite icon;

		[Token(Token = "0x60030B5")]
		[Address(RVA = "0xE8C364", Offset = "0xE8C364", VA = "0xE8C364")]
		public InventoryItem()
		{
		}
	}
	[Token(Token = "0x2000920")]
	public class Inventory : MonoBehaviour
	{
		[Token(Token = "0x4002BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InventorySlot[] slots;

		[Token(Token = "0x4002BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private InventoryUI inventoryUI;

		[Token(Token = "0x60030B6")]
		[Address(RVA = "0xE8C36C", Offset = "0xE8C36C", VA = "0xE8C36C")]
		private void Awake()
		{
		}

		[Token(Token = "0x60030B7")]
		[Address(RVA = "0xE8C3DC", Offset = "0xE8C3DC", VA = "0xE8C3DC")]
		public bool Add(InventoryItem item)
		{
			return default(bool);
		}

		[Token(Token = "0x60030B8")]
		[Address(RVA = "0xE8C178", Offset = "0xE8C178", VA = "0xE8C178")]
		public bool ContainsItem(string itemId)
		{
			return default(bool);
		}

		[Token(Token = "0x60030B9")]
		[Address(RVA = "0xE8C590", Offset = "0xE8C590", VA = "0xE8C590")]
		public Inventory()
		{
		}
	}
	[Token(Token = "0x2000921")]
	public class InventorySlot : MonoBehaviour
	{
		[Token(Token = "0x4002BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InventoryItem item;

		[Token(Token = "0x60030BA")]
		[Address(RVA = "0xE8C598", Offset = "0xE8C598", VA = "0xE8C598")]
		public InventorySlot()
		{
		}
	}
	[Token(Token = "0x2000922")]
	public class PickableItem : MonoBehaviour
	{
		[Token(Token = "0x4002BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InventoryItemType itemType;

		[Token(Token = "0x4002BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sprite icon;

		[Token(Token = "0x60030BB")]
		[Address(RVA = "0xE8C600", Offset = "0xE8C600", VA = "0xE8C600")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60030BC")]
		[Address(RVA = "0xE8C744", Offset = "0xE8C744", VA = "0xE8C744")]
		private string GetItemId()
		{
			return null;
		}

		[Token(Token = "0x60030BD")]
		[Address(RVA = "0xE8C800", Offset = "0xE8C800", VA = "0xE8C800")]
		public PickableItem()
		{
		}
	}
	[Token(Token = "0x2000923")]
	public class InventoryUI : MonoBehaviour
	{
		[Token(Token = "0x4002BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image[] slotImages;

		[Token(Token = "0x60030BE")]
		[Address(RVA = "0xE8C4AC", Offset = "0xE8C4AC", VA = "0xE8C4AC")]
		public void UpdateUI(Inventory inventory)
		{
		}

		[Token(Token = "0x60030BF")]
		[Address(RVA = "0xE8C808", Offset = "0xE8C808", VA = "0xE8C808")]
		public InventoryUI()
		{
		}
	}
	[Token(Token = "0x2000924")]
	public class RandomTreeTransformRule : TransformationRule
	{
		[Token(Token = "0x60030C0")]
		[Address(RVA = "0xE8C810", Offset = "0xE8C810", VA = "0xE8C810", Slot = "4")]
		public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
		{
		}

		[Token(Token = "0x60030C1")]
		[Address(RVA = "0xE8C8F4", Offset = "0xE8C8F4", VA = "0xE8C8F4")]
		public RandomTreeTransformRule()
		{
		}
	}
	[Token(Token = "0x2000925")]
	public class RestoreRotationTransformRule : TransformationRule
	{
		[Token(Token = "0x60030C2")]
		[Address(RVA = "0xE8C8FC", Offset = "0xE8C8FC", VA = "0xE8C8FC", Slot = "4")]
		public override void GetTransform(PropSocket socket, DungeonModel model, Matrix4x4 propTransform, System.Random random, out UnityEngine.Vector3 outPosition, out Quaternion outRotation, out UnityEngine.Vector3 outScale)
		{
		}

		[Token(Token = "0x60030C3")]
		[Address(RVA = "0xE8C960", Offset = "0xE8C960", VA = "0xE8C960")]
		public RestoreRotationTransformRule()
		{
		}
	}
}
namespace DungeonArchitect.Samples.CircularCity
{
	[Token(Token = "0x2000926")]
	public class CircularCityBuildingHeightModifier : DungeonEventListener
	{
		[Token(Token = "0x4002BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve curve;

		[Token(Token = "0x4002BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxScale;

		[Token(Token = "0x4002BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float minScale;

		[Token(Token = "0x60030C4")]
		[Address(RVA = "0xE8C968", Offset = "0xE8C968", VA = "0xE8C968", Slot = "5")]
		public override void OnDungeonMarkersEmitted(Dungeon dungeon, DungeonModel model, LevelMarkerList markers)
		{
		}

		[Token(Token = "0x60030C5")]
		[Address(RVA = "0xE8CE0C", Offset = "0xE8CE0C", VA = "0xE8CE0C")]
		public CircularCityBuildingHeightModifier()
		{
		}
	}
}
namespace ARRoomMapper
{
	[Token(Token = "0x2000927")]
	public class AROccludee : MonoBehaviour
	{
		[Token(Token = "0x60030C6")]
		[Address(RVA = "0xE8CE20", Offset = "0xE8CE20", VA = "0xE8CE20")]
		private void Start()
		{
		}

		[Token(Token = "0x60030C7")]
		[Address(RVA = "0xE8CEC8", Offset = "0xE8CEC8", VA = "0xE8CEC8")]
		public AROccludee()
		{
		}
	}
	[Token(Token = "0x2000928")]
	public class ARRoom
	{
		[Token(Token = "0x4002BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<PlaceableData> palceables;

		[Token(Token = "0x4002BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int roomNum;

		[Token(Token = "0x60030C8")]
		[Address(RVA = "0xE8CED0", Offset = "0xE8CED0", VA = "0xE8CED0")]
		public void saveData()
		{
		}

		[Token(Token = "0x60030C9")]
		[Address(RVA = "0xE8CF78", Offset = "0xE8CF78", VA = "0xE8CF78")]
		public ARRoom()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000929")]
	public class PlaceableData
	{
		[Serializable]
		[Token(Token = "0x200092A")]
		public enum PlaceableType
		{
			[Token(Token = "0x4002BCE")]
			wall,
			[Token(Token = "0x4002BCF")]
			window,
			[Token(Token = "0x4002BD0")]
			desk
		}

		[Token(Token = "0x4002BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PlaceableType placeableType;

		[Token(Token = "0x4002BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.Vector3[] placedPoints;

		[Token(Token = "0x60030CA")]
		[Address(RVA = "0xE8CFF4", Offset = "0xE8CFF4", VA = "0xE8CFF4")]
		public PlaceableData()
		{
		}
	}
	[Token(Token = "0x200092B")]
	public class ARSurface : MonoBehaviour
	{
		[Token(Token = "0x4002BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ARSurfacePoint[] surfacePoints;

		[Token(Token = "0x4002BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Renderer surfaceRend;

		[Token(Token = "0x60030CB")]
		[Address(RVA = "0xE8CFFC", Offset = "0xE8CFFC", VA = "0xE8CFFC", Slot = "4")]
		public virtual void finishPlacement()
		{
		}

		[Token(Token = "0x60030CC")]
		[Address(RVA = "0xE8D000", Offset = "0xE8D000", VA = "0xE8D000", Slot = "5")]
		public virtual void revealPlacement()
		{
		}

		[Token(Token = "0x60030CD")]
		[Address(RVA = "0xE8D004", Offset = "0xE8D004", VA = "0xE8D004")]
		public ARSurface()
		{
		}
	}
	[Token(Token = "0x200092C")]
	public class ARSurfaceCreator : MonoBehaviour
	{
		[Token(Token = "0x200092D")]
		private enum PlacingState
		{
			[Token(Token = "0x4002BE3")]
			idle,
			[Token(Token = "0x4002BE4")]
			placingPoint1,
			[Token(Token = "0x4002BE5")]
			placingPoint2,
			[Token(Token = "0x4002BE6")]
			placingPoint3,
			[Token(Token = "0x4002BE7")]
			deleting
		}

		[Token(Token = "0x4002BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<ARSurface> surfaces;

		[Token(Token = "0x4002BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<ARSurfacePoint> surfacePoints;

		[Token(Token = "0x4002BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ARWallSurface wallSurfacePrefab;

		[Token(Token = "0x4002BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ARWindowSurface windowSurfacePrefab;

		[Token(Token = "0x4002BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject deskPrefab;

		[Token(Token = "0x4002BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject VRRoom;

		[Token(Token = "0x4002BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool VRRoomEnabled;

		[Token(Token = "0x4002BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject[] hands;

		[Token(Token = "0x4002BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ARSurface currentSurface;

		[Token(Token = "0x4002BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent onObjectPlaced;

		[Token(Token = "0x4002BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ARRoom currentRoom;

		[Token(Token = "0x4002BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int currentRoomID;

		[Token(Token = "0x4002BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int layerMask;

		[Token(Token = "0x4002BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool placeMentsRevealed;

		[Token(Token = "0x4002BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private PlacingState placingState;

		[Token(Token = "0x60030CE")]
		[Address(RVA = "0xE8D00C", Offset = "0xE8D00C", VA = "0xE8D00C")]
		private void Start()
		{
		}

		[Token(Token = "0x60030CF")]
		[Address(RVA = "0xE8D0D4", Offset = "0xE8D0D4", VA = "0xE8D0D4")]
		private void Update()
		{
		}

		[Token(Token = "0x60030D0")]
		[Address(RVA = "0xE8DD38", Offset = "0xE8DD38", VA = "0xE8DD38")]
		public void placeWindow()
		{
		}

		[Token(Token = "0x60030D1")]
		[Address(RVA = "0xE8DFA4", Offset = "0xE8DFA4", VA = "0xE8DFA4")]
		public void placeWall()
		{
		}

		[Token(Token = "0x60030D2")]
		[Address(RVA = "0xE8F298", Offset = "0xE8F298", VA = "0xE8F298")]
		public void placeDesk()
		{
		}

		[Token(Token = "0x60030D3")]
		[Address(RVA = "0xE8F42C", Offset = "0xE8F42C", VA = "0xE8F42C")]
		public void deletePressed()
		{
		}

		[Token(Token = "0x60030D4")]
		[Address(RVA = "0xE8F444", Offset = "0xE8F444", VA = "0xE8F444")]
		public void finishPlacements()
		{
		}

		[Token(Token = "0x60030D5")]
		[Address(RVA = "0xE8F594", Offset = "0xE8F594", VA = "0xE8F594")]
		public void revealPlacements()
		{
		}

		[Token(Token = "0x60030D6")]
		[Address(RVA = "0xE8F6E4", Offset = "0xE8F6E4", VA = "0xE8F6E4")]
		public void EnableVRRoom()
		{
		}

		[Token(Token = "0x60030D7")]
		[Address(RVA = "0xE8F71C", Offset = "0xE8F71C", VA = "0xE8F71C")]
		public void DisableVRRoom()
		{
		}

		[Token(Token = "0x60030D8")]
		[Address(RVA = "0xE8E1D4", Offset = "0xE8E1D4", VA = "0xE8E1D4")]
		public void saveRoom()
		{
		}

		[Token(Token = "0x60030D9")]
		[Address(RVA = "0xE8F748", Offset = "0xE8F748", VA = "0xE8F748")]
		private static string readFile(string path)
		{
			return null;
		}

		[Token(Token = "0x60030DA")]
		[Address(RVA = "0xE8E990", Offset = "0xE8E990", VA = "0xE8E990")]
		public void loadRoom()
		{
		}

		[Token(Token = "0x60030DB")]
		[Address(RVA = "0xE8FB6C", Offset = "0xE8FB6C", VA = "0xE8FB6C")]
		public ARSurfaceCreator()
		{
		}
	}
	[Token(Token = "0x200092E")]
	public class ARSurfacePoint : MonoBehaviour
	{
		[Token(Token = "0x60030DC")]
		[Address(RVA = "0xE8FC90", Offset = "0xE8FC90", VA = "0xE8FC90")]
		public ARSurfacePoint()
		{
		}
	}
	[Token(Token = "0x200092F")]
	public class ARWallSurface : ARSurface
	{
		[Token(Token = "0x4002BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject wallmesh;

		[Token(Token = "0x4002BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Renderer wallMat;

		[Token(Token = "0x4002BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material visibleMat;

		[Token(Token = "0x4002BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material invisibleMat;

		[Token(Token = "0x4002BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Collider col;

		[Token(Token = "0x4002BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float dist;

		[Token(Token = "0x60030DD")]
		[Address(RVA = "0xE8FC98", Offset = "0xE8FC98", VA = "0xE8FC98")]
		private void Update()
		{
		}

		[Token(Token = "0x60030DE")]
		[Address(RVA = "0xE8FE98", Offset = "0xE8FE98", VA = "0xE8FE98", Slot = "4")]
		public override void finishPlacement()
		{
		}

		[Token(Token = "0x60030DF")]
		[Address(RVA = "0xE8FF38", Offset = "0xE8FF38", VA = "0xE8FF38", Slot = "5")]
		public override void revealPlacement()
		{
		}

		[Token(Token = "0x60030E0")]
		[Address(RVA = "0xE8FF70", Offset = "0xE8FF70", VA = "0xE8FF70")]
		public ARWallSurface()
		{
		}
	}
	[Token(Token = "0x2000930")]
	public class ARWindowSurface : ARSurface
	{
		[Token(Token = "0x4002BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject windowmesh;

		[Token(Token = "0x4002BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Renderer windowMat;

		[Token(Token = "0x4002BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material invisibleMat;

		[Token(Token = "0x4002BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Collider col;

		[Token(Token = "0x4002BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float distx;

		[Token(Token = "0x4002BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float disty;

		[Token(Token = "0x60030E1")]
		[Address(RVA = "0xE8FF78", Offset = "0xE8FF78", VA = "0xE8FF78")]
		private void Update()
		{
		}

		[Token(Token = "0x60030E2")]
		[Address(RVA = "0xE901DC", Offset = "0xE901DC", VA = "0xE901DC", Slot = "4")]
		public override void finishPlacement()
		{
		}

		[Token(Token = "0x60030E3")]
		[Address(RVA = "0xE90288", Offset = "0xE90288", VA = "0xE90288", Slot = "5")]
		public override void revealPlacement()
		{
		}

		[Token(Token = "0x60030E4")]
		[Address(RVA = "0xE9028C", Offset = "0xE9028C", VA = "0xE9028C")]
		public ARWindowSurface()
		{
		}
	}
	[Token(Token = "0x2000931")]
	public class DeskMeshGenerator : ARSurface
	{
		[Token(Token = "0x4002BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform[] deskPoints;

		[Token(Token = "0x4002BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject deskMesh;

		[Token(Token = "0x4002BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Renderer deskMat;

		[Token(Token = "0x4002BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Material passthroughMat;

		[Token(Token = "0x4002BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float dist;

		[Token(Token = "0x60030E5")]
		[Address(RVA = "0xE90294", Offset = "0xE90294", VA = "0xE90294")]
		private void Update()
		{
		}

		[Token(Token = "0x60030E6")]
		[Address(RVA = "0xE9045C", Offset = "0xE9045C", VA = "0xE9045C")]
		public void updatePosOfPoints(bool left)
		{
		}

		[Token(Token = "0x60030E7")]
		[Address(RVA = "0xE90568", Offset = "0xE90568", VA = "0xE90568")]
		public void hideDeskScaler()
		{
		}

		[Token(Token = "0x60030E8")]
		[Address(RVA = "0xE90604", Offset = "0xE90604", VA = "0xE90604")]
		public DeskMeshGenerator()
		{
		}
	}
	[Token(Token = "0x2000932")]
	public class UIHandCanvas : MonoBehaviour
	{
		[Token(Token = "0x4002BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject canvasParent;

		[Token(Token = "0x60030E9")]
		[Address(RVA = "0xE9060C", Offset = "0xE9060C", VA = "0xE9060C")]
		private void Update()
		{
		}

		[Token(Token = "0x60030EA")]
		[Address(RVA = "0xE906C8", Offset = "0xE906C8", VA = "0xE906C8")]
		public UIHandCanvas()
		{
		}
	}
}
