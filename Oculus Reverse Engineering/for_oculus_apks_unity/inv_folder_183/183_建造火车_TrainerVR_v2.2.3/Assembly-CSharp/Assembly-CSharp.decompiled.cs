using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using DG.Tweening;
using Il2CppDummyDll;
using NewtonVR;
using Oculus.Platform;
using Oculus.Platform.Models;
using Qiyi.UI.InputField;
using TMPro;
using Trainer;
using Unity.XR.Qiyu;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Networking;
using UnityEngine.Rendering;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using UnityEngine.XR.Interaction.Toolkit;
using UnitySA.Utility;
using ch.sycoforge.Decal;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class Basics : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform cubeA;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform cubeB;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x102B428", Offset = "0x102B428", VA = "0x102B428")]
	private void Start()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x102B698", Offset = "0x102B698", VA = "0x102B698")]
	public Basics()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x102B6A0", Offset = "0x102B6A0", VA = "0x102B6A0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72D5E0", Offset = "0x72D5E0")]
	private Vector3 <Start>b__2_0()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x102B6BC", Offset = "0x102B6BC", VA = "0x102B6BC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72D5F0", Offset = "0x72D5F0")]
	private void <Start>b__2_1(Vector3 x)
	{
	}
}
[Token(Token = "0x2000003")]
public class Sequences : MonoBehaviour
{
	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xAE77D0", Offset = "0xAE77D0", VA = "0xAE77D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xAE794C", Offset = "0xAE794C", VA = "0xAE794C")]
	public Sequences()
	{
	}
}
[Token(Token = "0x2000004")]
public class HandInteractor : MonoBehaviour
{
	[Token(Token = "0x2000005")]
	public enum AnimationType
	{
		[Token(Token = "0x400000A")]
		None,
		[Token(Token = "0x400000B")]
		Hilt,
		[Token(Token = "0x400000C")]
		Pinch,
		[Token(Token = "0x400000D")]
		Sphere,
		[Token(Token = "0x400000E")]
		Gun,
		[Token(Token = "0x400000F")]
		Misc,
		[Token(Token = "0x4000010")]
		Button,
		[Token(Token = "0x4000011")]
		HandPress
	}

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationType PickAnimation;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public AnimationType HoverAnimation;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float squeeze;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform leftHoldPoint;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform rightHoldPoint;

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xE5BE44", Offset = "0xE5BE44", VA = "0xE5BE44")]
	public HandInteractor()
	{
	}
}
[Token(Token = "0x2000006")]
public class HandModel : MonoBehaviour
{
	[Token(Token = "0x2000007")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728180", Offset = "0x728180")]
	private sealed class <EndInteraction>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400001A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400001B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400001C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandModel <>4__this;

		[Token(Token = "0x17000001")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600001E")]
			[Address(RVA = "0x9DC450", Offset = "0x9DC450", VA = "0x9DC450", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000002")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000020")]
			[Address(RVA = "0x9DC498", Offset = "0x9DC498", VA = "0x9DC498", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600001B")]
		[Address(RVA = "0x9DC364", Offset = "0x9DC364", VA = "0x9DC364")]
		[DebuggerHidden]
		public <EndInteraction>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x600001C")]
		[Address(RVA = "0x9DC390", Offset = "0x9DC390", VA = "0x9DC390", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600001D")]
		[Address(RVA = "0x9DC394", Offset = "0x9DC394", VA = "0x9DC394", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600001F")]
		[Address(RVA = "0x9DC458", Offset = "0x9DC458", VA = "0x9DC458", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private HandInteractor m_currentHandController;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool m_bIdle;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private HashSet<HandInteractor> m_hsHandControllersHovering;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Animator m_handAnimator;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_bInitialized;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<HandInteractor.AnimationType, GameObject> m_customColliders;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject m_defaultCollider;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private NVRHand Hand;

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xB10BD0", Offset = "0xB10BD0", VA = "0xB10BD0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xB10FA0", Offset = "0xB10FA0", VA = "0xB10FA0")]
	private void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xB113E0", Offset = "0xB113E0", VA = "0xB113E0")]
	private void OnTriggerExit(Collider collider)
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xB11674", Offset = "0xB11674", VA = "0xB11674")]
	public void BeginInteraction(NVRInteractable interactable)
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xB11754", Offset = "0xB11754", VA = "0xB11754")]
	private void updateInitialPosition(NVRInteractable interactable, HandInteractor handController)
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xB11814", Offset = "0xB11814", VA = "0xB11814")]
	public void EndInteraction(NVRInteractable item)
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xB1185C", Offset = "0xB1185C", VA = "0xB1185C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72D600", Offset = "0x72D600")]
	private IEnumerator EndInteraction(HandInteractor handController, bool bHover)
	{
		return null;
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xB10CBC", Offset = "0xB10CBC", VA = "0xB10CBC")]
	private void initialize()
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xB118D4", Offset = "0xB118D4", VA = "0xB118D4")]
	private void initializeGhostColliders()
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xB119B0", Offset = "0xB119B0", VA = "0xB119B0")]
	private void initializePhysicalColliders()
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xB11CE0", Offset = "0xB11CE0", VA = "0xB11CE0")]
	private void addCustomCollider(HandInteractor.AnimationType type)
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xB1132C", Offset = "0xB1132C", VA = "0xB1132C")]
	private void updateAnimation(HandInteractor handController, bool bHover)
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xB10E74", Offset = "0xB10E74", VA = "0xB10E74")]
	private void setAnimation(HandInteractor.AnimationType animationType, float squeeze)
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xB1225C", Offset = "0xB1225C", VA = "0xB1225C")]
	private void setCustomCollider(HandInteractor.AnimationType type)
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xB111FC", Offset = "0xB111FC", VA = "0xB111FC")]
	private bool isNearer(HandInteractor hc1, HandInteractor hc2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xB11548", Offset = "0xB11548", VA = "0xB11548")]
	private HandInteractor selectNearest()
	{
		return null;
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xB120CC", Offset = "0xB120CC", VA = "0xB120CC")]
	private void ResetAnimator()
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xB125AC", Offset = "0xB125AC", VA = "0xB125AC")]
	private GameObject getChildGameObject(string withName)
	{
		return null;
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xB12730", Offset = "0xB12730", VA = "0xB12730")]
	public HandModel()
	{
	}
}
[Token(Token = "0x2000008")]
public class ButtonAnimator : MonoBehaviour
{
	[Token(Token = "0x2000009")]
	public delegate void PhysicalHandsOnHoldButtonPressed(bool state);

	[Token(Token = "0x200000A")]
	private class ButtonData
	{
		[Token(Token = "0x400002F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform button;

		[Token(Token = "0x4000030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRButtonInputs buttonInput;

		[Token(Token = "0x4000031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 initialPosition;

		[Token(Token = "0x4000032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 pressedPosition;

		[Token(Token = "0x4000033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimatedElementData[] animatedElements;

		[Token(Token = "0x600003E")]
		[Address(RVA = "0x9D6ED4", Offset = "0x9D6ED4", VA = "0x9D6ED4")]
		public ButtonData()
		{
		}
	}

	[Token(Token = "0x200000B")]
	private class AnimatedElementData
	{
		[Token(Token = "0x4000034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 initRotation;

		[Token(Token = "0x4000036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 deltaRotation;

		[Token(Token = "0x600003F")]
		[Address(RVA = "0x9D6ECC", Offset = "0x9D6ECC", VA = "0x9D6ECC")]
		public AnimatedElementData()
		{
		}
	}

	[Token(Token = "0x200000C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728190", Offset = "0x728190")]
	private sealed class <>c__DisplayClass41_0
	{
		[Token(Token = "0x4000037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Renderer renderer;

		[Token(Token = "0x6000040")]
		[Address(RVA = "0x9D6EA4", Offset = "0x9D6EA4", VA = "0x9D6EA4")]
		public <>c__DisplayClass41_0()
		{
		}

		[Token(Token = "0x6000041")]
		[Address(RVA = "0x9D6EAC", Offset = "0x9D6EAC", VA = "0x9D6EAC")]
		internal void <startFailureAnimation>b__0()
		{
		}
	}

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ButtonData[] positionAnimatedButtons;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ButtonData[] rotationAnimatedButtons;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ButtonData[] stickButtons;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private TutorialHelper tutorialHelper;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform elements;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform buttons;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform buttonsPressed;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform elementsPressed;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform failure;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 sphereInitScale;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private NVRHand Hand;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Rigidbody Rigidbody;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private SphereCollider triggerCollider;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Material sphereTriggerMaterial;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Material spherePhysicalMaterial;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool CollisionsEnabled;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float HoldButtonPressedDuration;

	[Token(Token = "0x14000001")]
	public static event PhysicalHandsOnHoldButtonPressed OnPhysicalHandChanged
	{
		[Token(Token = "0x6000021")]
		[Address(RVA = "0x1030620", Offset = "0x1030620", VA = "0x1030620")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72D6B0", Offset = "0x72D6B0")]
		add
		{
		}
		[Token(Token = "0x6000022")]
		[Address(RVA = "0x10306DC", Offset = "0x10306DC", VA = "0x10306DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72D6C0", Offset = "0x72D6C0")]
		remove
		{
		}
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x1030798", Offset = "0x1030798", VA = "0x1030798")]
	private void Start()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x1030B14", Offset = "0x1030B14", VA = "0x1030B14")]
	public void Initialize(NVRHand hand, GameObject model)
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x1031134", Offset = "0x1031134", VA = "0x1031134")]
	private void setSteamVR_ViveButtons(GameObject model, NVRHand hand)
	{
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x1030DA4", Offset = "0x1030DA4", VA = "0x1030DA4")]
	private void setSteamVR_WindowsMRButtons(GameObject model, NVRHand hand)
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x1031484", Offset = "0x1031484", VA = "0x1031484")]
	private void setOculusButtons(GameObject model, NVRHand hand)
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x10319D0", Offset = "0x10319D0", VA = "0x10319D0")]
	private void setPSMoveButtons(GameObject model, NVRHand hand)
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x1031D98", Offset = "0x1031D98", VA = "0x1031D98")]
	private void setDualshockButtons(GameObject model, NVRHand hand)
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x1032894", Offset = "0x1032894", VA = "0x1032894")]
	private ButtonData createPositionButtonData(NVRButtonInputs buttonInput, string buttonName)
	{
		return null;
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x103236C", Offset = "0x103236C", VA = "0x103236C")]
	private ButtonData createRotationButtonData(NVRButtonInputs buttonInput, string buttonName)
	{
		return null;
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x103296C", Offset = "0x103296C", VA = "0x103296C")]
	private ButtonData createStickButtonData(NVRButtonInputs buttonInput, string buttonName, Vector2 direction)
	{
		return null;
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x10329D4", Offset = "0x10329D4", VA = "0x10329D4")]
	private ButtonData createButtonData(NVRButtonInputs buttonInput, string buttonName)
	{
		return null;
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x1032444", Offset = "0x1032444", VA = "0x1032444")]
	private AnimatedElementData[] GetTriggerAnimatedElementsData()
	{
		return null;
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x1032A88", Offset = "0x1032A88", VA = "0x1032A88")]
	private Vector3 getDeltaRotation(Vector3 initialRotation, Vector3 finalRotation)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x1032B00", Offset = "0x1032B00", VA = "0x1032B00")]
	private void Update()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x1032BE4", Offset = "0x1032BE4", VA = "0x1032BE4")]
	private void UpdateHandMode()
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x1032D44", Offset = "0x1032D44", VA = "0x1032D44")]
	public void detectCollisions(bool detectCollisions)
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x1032B04", Offset = "0x1032B04", VA = "0x1032B04")]
	private void UpdateButtons()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x1032E4C", Offset = "0x1032E4C", VA = "0x1032E4C")]
	private void updateButtonRotation(ButtonData buttonData)
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x10330CC", Offset = "0x10330CC", VA = "0x10330CC")]
	private void updateButtonPosition(ButtonData buttonData)
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x103314C", Offset = "0x103314C", VA = "0x103314C")]
	private void updateStickButton(ButtonData buttonData)
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x10331C8", Offset = "0x10331C8", VA = "0x10331C8")]
	public void startFailureAnimation()
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x1030A2C", Offset = "0x1030A2C", VA = "0x1030A2C")]
	public void stopFailureAnimation()
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x10335A0", Offset = "0x10335A0", VA = "0x10335A0")]
	public ButtonAnimator()
	{
	}
}
[Token(Token = "0x200000D")]
public class CustomNVRHand : NVRHand
{
	[Token(Token = "0x200000E")]
	public delegate void HandInitializedEvent(NVRHand hand);

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[HideInInspector]
	public NVRTeleportPointer teleportPointer;

	[Token(Token = "0x14000002")]
	public static event HandInitializedEvent OnHandInitialized
	{
		[Token(Token = "0x6000042")]
		[Address(RVA = "0xE2B7F4", Offset = "0xE2B7F4", VA = "0xE2B7F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72D6D0", Offset = "0x72D6D0")]
		add
		{
		}
		[Token(Token = "0x6000043")]
		[Address(RVA = "0xE2B8B0", Offset = "0xE2B8B0", VA = "0xE2B8B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72D6E0", Offset = "0x72D6E0")]
		remove
		{
		}
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xE2B96C", Offset = "0xE2B96C", VA = "0xE2B96C", Slot = "16")]
	public override void Initialize()
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xE2BA2C", Offset = "0xE2BA2C", VA = "0xE2BA2C")]
	public Transform getTeleportPointer()
	{
		return null;
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xE2BAB4", Offset = "0xE2BAB4", VA = "0xE2BAB4")]
	public CustomNVRHand()
	{
	}
}
[Token(Token = "0x200000F")]
public static class ExtensionMethods
{
	[Token(Token = "0x600004B")]
	[Address(RVA = "0xE4B71C", Offset = "0xE4B71C", VA = "0xE4B71C")]
	public static Transform FindDeepChild(this Transform aParent, string aName)
	{
		return null;
	}
}
[Token(Token = "0x2000010")]
public class LinePainter : MonoBehaviour
{
	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int segmentCount;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x728F78", Offset = "0x728F78")]
	private float thickness;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x728FC4", Offset = "0x728FC4")]
	public float arcDuration;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x728FFC", Offset = "0x728FFC")]
	public float segmentBreak;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729034", Offset = "0x729034")]
	public float arcSpeed;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material material;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public int traceLayerMask;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private LineRenderer[] lineRenderers;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float arcTimeOffset;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float prevThickness;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int prevSegmentCount;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool showArc;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 startPos;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 endPos;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 curvePos;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Vector3 projectileVelocity;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool useGravity;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Transform arcObjectsTransfrom;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool arcInvalid;

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xB1C624", Offset = "0xB1C624", VA = "0xB1C624")]
	private void Start()
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xB1C64C", Offset = "0xB1C64C", VA = "0xB1C64C")]
	private void CreateLineRendererObjects()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xB1CB40", Offset = "0xB1CB40", VA = "0xB1CB40")]
	public void SetArcData(Vector3 startPosition, Vector3 endPosition)
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xB1CBA8", Offset = "0xB1CBA8", VA = "0xB1CBA8")]
	public void SetArcData(Vector3 startPosition, Vector3 endPosition, Vector3 curvePosition)
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xB1CBC8", Offset = "0xB1CBC8", VA = "0xB1CBC8")]
	public void Show()
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xB1CBE0", Offset = "0xB1CBE0", VA = "0xB1CBE0")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xB1CC9C", Offset = "0xB1CC9C", VA = "0xB1CC9C")]
	public bool DrawArc()
	{
		return default(bool);
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xB1D0D8", Offset = "0xB1D0D8", VA = "0xB1D0D8")]
	private void DrawArcSegment(int index, float startTime, float endTime)
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xB1D1C4", Offset = "0xB1D1C4", VA = "0xB1D1C4")]
	public void SetColor(Color color)
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xB1CEAC", Offset = "0xB1CEAC", VA = "0xB1CEAC")]
	private float FindProjectileCollision()
	{
		return default(float);
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xB1CFD4", Offset = "0xB1CFD4", VA = "0xB1CFD4")]
	public Vector3 GetArcPositionAtTime(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xB1CC18", Offset = "0xB1CC18", VA = "0xB1CC18")]
	private void HideLineSegments(int startSegment, int endSegment)
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xB1D2A8", Offset = "0xB1D2A8", VA = "0xB1D2A8")]
	public LinePainter()
	{
	}
}
[Token(Token = "0x2000011")]
public class LoadingTextAnimation : MonoBehaviour
{
	[Token(Token = "0x6000059")]
	[Address(RVA = "0xB1D658", Offset = "0xB1D658", VA = "0xB1D658")]
	private void Update()
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xB1D768", Offset = "0xB1D768", VA = "0xB1D768")]
	public LoadingTextAnimation()
	{
	}
}
[Token(Token = "0x2000012")]
public class LookAt : MonoBehaviour
{
	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool headLookAt;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject objectToLookAt;

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xB2105C", Offset = "0xB2105C", VA = "0xB2105C")]
	private void Start()
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xB2110C", Offset = "0xB2110C", VA = "0xB2110C")]
	private void Update()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xB21164", Offset = "0xB21164", VA = "0xB21164")]
	public LookAt()
	{
	}
}
[Token(Token = "0x2000013")]
public class NVRCircularDrive : NVRDriveInteractable
{
	[Token(Token = "0x2000014")]
	public enum Axis_t
	{
		[Token(Token = "0x4000077")]
		XAxis,
		[Token(Token = "0x4000078")]
		YAxis,
		[Token(Token = "0x4000079")]
		ZAxis
	}

	[Token(Token = "0x2000015")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7281B0", Offset = "0x7281B0")]
	private sealed class <HapticPulses>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400007A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400007B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400007C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NVRHand controller;

		[Token(Token = "0x400007D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public NVRCircularDrive <>4__this;

		[Token(Token = "0x400007E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float flMagnitude;

		[Token(Token = "0x400007F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int nCount;

		[Token(Token = "0x4000080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <nRangeMax>5__2;

		[Token(Token = "0x4000081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private ushort <i>5__3;

		[Token(Token = "0x17000003")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000070")]
			[Address(RVA = "0x9DE71C", Offset = "0x9DE71C", VA = "0x9DE71C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000004")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000072")]
			[Address(RVA = "0x9DE764", Offset = "0x9DE764", VA = "0x9DE764", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600006D")]
		[Address(RVA = "0x9DE544", Offset = "0x9DE544", VA = "0x9DE544")]
		[DebuggerHidden]
		public <HapticPulses>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x600006E")]
		[Address(RVA = "0x9DE570", Offset = "0x9DE570", VA = "0x9DE570", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600006F")]
		[Address(RVA = "0x9DE574", Offset = "0x9DE574", VA = "0x9DE574", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000071")]
		[Address(RVA = "0x9DE724", Offset = "0x9DE724", VA = "0x9DE724", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72907C", Offset = "0x72907C")]
	public Axis_t axisOfRotation;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7290B4", Offset = "0x7290B4")]
	public Collider childCollider;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7290EC", Offset = "0x7290EC")]
	public bool hoverLock;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729124", Offset = "0x729124")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x729124", Offset = "0x729124")]
	public bool limited;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public Vector2 frozenDistanceMinMaxThreshold;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public UnityEvent onFrozenDistanceThreshold;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729184", Offset = "0x729184")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x729184", Offset = "0x729184")]
	public float minAngle;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7291E4", Offset = "0x7291E4")]
	public bool freezeOnMin;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72921C", Offset = "0x72921C")]
	public UnityEvent onMinAngle;

	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x729254", Offset = "0x729254")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729254", Offset = "0x729254")]
	public float maxAngle;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7292B4", Offset = "0x7292B4")]
	public bool freezeOnMax;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7292EC", Offset = "0x7292EC")]
	public UnityEvent onMaxAngle;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729324", Offset = "0x729324")]
	public bool forceStart;

	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72935C", Offset = "0x72935C")]
	public float startAngle;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729394", Offset = "0x729394")]
	public bool rotateGameObject;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7293CC", Offset = "0x7293CC")]
	public bool debugPath;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729404", Offset = "0x729404")]
	public int dbgPathLimit;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72943C", Offset = "0x72943C")]
	public TextMesh debugText;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729474", Offset = "0x729474")]
	public float outAngle;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private Quaternion start;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private Vector3 worldPlaneNormal;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Vector3 localPlaneNormal;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private Vector3 lastHandProjected;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Color red;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private Color green;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private GameObject[] dbgHandObjects;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private GameObject[] dbgProjObjects;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private GameObject dbgObjectsParent;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private int dbgObjectCount;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private int dbgObjectIndex;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private bool driving;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private float minMaxAngularThreshold;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private bool frozen;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private float frozenAngle;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Vector3 frozenHandWorldPos;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	private Vector2 frozenSqDistanceMinMaxThreshold;

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private NVRHand myHand;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public Transform parentTransform;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public float normalize;

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x12330AC", Offset = "0x12330AC", VA = "0x12330AC")]
	private void Freeze(NVRHand hand)
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0x1233114", Offset = "0x1233114", VA = "0x1233114")]
	private void UnFreeze()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0x1233124", Offset = "0x1233124", VA = "0x1233124", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x1233480", Offset = "0x1233480", VA = "0x1233480")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72D700", Offset = "0x72D700")]
	private IEnumerator HapticPulses(NVRHand controller, float flMagnitude, int nCount)
	{
		return null;
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x123352C", Offset = "0x123352C", VA = "0x123352C", Slot = "14")]
	public override void HoveringExit(NVRHand hand)
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x12335E8", Offset = "0x12335E8", VA = "0x12335E8", Slot = "13")]
	public override void HoveringUpdate(NVRHand hand, float forTime)
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x1233A30", Offset = "0x1233A30", VA = "0x1233A30", Slot = "24")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x1233764", Offset = "0x1233764", VA = "0x1233764")]
	private Vector3 ComputeToTransformProjected(Transform xForm)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x1233B88", Offset = "0x1233B88", VA = "0x1233B88")]
	private void DrawDebugPath(Transform xForm, Vector3 toTransformProjected)
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x1234200", Offset = "0x1234200", VA = "0x1234200")]
	private void UpdateGameObject()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x123347C", Offset = "0x123347C", VA = "0x123347C")]
	public void UpdateAll()
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x12342A8", Offset = "0x12342A8", VA = "0x12342A8", Slot = "25")]
	protected virtual void ComputeAngle(NVRHand hand)
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0x1234634", Offset = "0x1234634", VA = "0x1234634")]
	private float RemapNumberClamped(float num, float low1, float high1, float low2, float high2)
	{
		return default(float);
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x12346A8", Offset = "0x12346A8", VA = "0x12346A8")]
	private float RemapNumber(float num, float low1, float high1, float low2, float high2)
	{
		return default(float);
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x12346C4", Offset = "0x12346C4", VA = "0x12346C4")]
	public NVRCircularDrive()
	{
	}
}
[Token(Token = "0x2000016")]
public class NVRDriveInteractable : NVRInteractable
{
	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Action<NVRHand> OnDriveStart;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Action<NVRHand> OnDriveEnd;

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x123633C", Offset = "0x123633C", VA = "0x123633C", Slot = "22")]
	public virtual void DriveStart(NVRHand hand)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x12363A0", Offset = "0x12363A0", VA = "0x12363A0", Slot = "23")]
	public virtual void DriveEnd(NVRHand hand)
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x1234790", Offset = "0x1234790", VA = "0x1234790")]
	public NVRDriveInteractable()
	{
	}
}
[Token(Token = "0x2000017")]
public class NVRLinearDrive : NVRInteractable
{
	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform startPosition;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform endPosition;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool repositionGameObject;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	public bool maintainMomemntum;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float linearMapping;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float momemtumDampenRate;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float initialMappingOffset;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int numMappingChangeSamples;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float[] mappingChangeSamples;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float prevMapping;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private float mappingChangeRate;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int sampleCount;

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xD9C220", Offset = "0xD9C220", VA = "0xD9C220", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xD9C288", Offset = "0xD9C288", VA = "0xD9C288", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xD9C448", Offset = "0xD9C448", VA = "0xD9C448", Slot = "13")]
	public override void HoveringUpdate(NVRHand hand, float forTime)
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0xD9C5FC", Offset = "0xD9C5FC", VA = "0xD9C5FC")]
	private void CalculateMappingChangeRate()
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0xD9C2DC", Offset = "0xD9C2DC", VA = "0xD9C2DC")]
	private void UpdateLinearMapping(Transform tr)
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xD9C504", Offset = "0xD9C504", VA = "0xD9C504")]
	private float CalculateLinearMapping(Transform tr)
	{
		return default(float);
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xD9C698", Offset = "0xD9C698", VA = "0xD9C698")]
	private void Update()
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xD9C7D4", Offset = "0xD9C7D4", VA = "0xD9C7D4")]
	public NVRLinearDrive()
	{
	}
}
[Token(Token = "0x2000018")]
public class NVRManager : MonoBehaviour
{
	[Token(Token = "0x2000019")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7281C0", Offset = "0x7281C0")]
	private sealed class <enableReprojectionCameraCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float seconds;

		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public NVRManager <>4__this;

		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool enable;

		[Token(Token = "0x17000005")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000087")]
			[Address(RVA = "0x9DF2A0", Offset = "0x9DF2A0", VA = "0x9DF2A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000006")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000089")]
			[Address(RVA = "0x9DF2E8", Offset = "0x9DF2E8", VA = "0x9DF2E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000084")]
		[Address(RVA = "0x9DF1B0", Offset = "0x9DF1B0", VA = "0x9DF1B0")]
		[DebuggerHidden]
		public <enableReprojectionCameraCoroutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000085")]
		[Address(RVA = "0x9DF1DC", Offset = "0x9DF1DC", VA = "0x9DF1DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000086")]
		[Address(RVA = "0x9DF1E0", Offset = "0x9DF1E0", VA = "0x9DF1E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000088")]
		[Address(RVA = "0x9DF2A8", Offset = "0x9DF2A8", VA = "0x9DF2A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static NVRManager Instance;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject game;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Camera reprojectionCamera;

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xD9C850", Offset = "0xD9C850", VA = "0xD9C850")]
	public void enableReprojectionCamera(bool enable, float seconds = 0f)
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xD9C8D4", Offset = "0xD9C8D4", VA = "0xD9C8D4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72D7B0", Offset = "0x72D7B0")]
	private IEnumerator enableReprojectionCameraCoroutine(bool enable, float seconds = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xD9C970", Offset = "0xD9C970", VA = "0xD9C970")]
	private void setReprojectionCamera(bool state)
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xD9CA48", Offset = "0xD9CA48", VA = "0xD9CA48")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xD9CC64", Offset = "0xD9CC64", VA = "0xD9CC64")]
	private void Start()
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xD9CC84", Offset = "0xD9CC84", VA = "0xD9CC84")]
	public NVRManager()
	{
	}
}
[Token(Token = "0x200001A")]
public class NVRRenderModelManager : MonoBehaviour
{
	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public NVRRenderModelType DefaultRenderModelType;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<NVRRenderModel> GenericRenderModels;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<NVRRenderModel> OculusRenderModels;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<NVRRenderModel> WindowsMRRenderModels;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<NVRRenderModel> ViveRenderModels;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<NVRRenderModel> PSVRRenderModels;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public List<NVRRenderModel> QiyuRenderModels;

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xDA1DEC", Offset = "0xDA1DEC", VA = "0xDA1DEC")]
	public NVRRenderModelManager()
	{
	}
}
[Serializable]
[Token(Token = "0x200001B")]
public struct NVRRenderModel
{
	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public NVRRenderModelType Type;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public GameObject LeftHand;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GameObject RightHand;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject PhysicalLeftHand;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject PhysicalRightHand;
}
[Token(Token = "0x200001C")]
public enum NVRRenderModelType
{
	[Token(Token = "0x40000A5")]
	Gamepad,
	[Token(Token = "0x40000A6")]
	AlternativeGamepad,
	[Token(Token = "0x40000A7")]
	Hand,
	[Token(Token = "0x40000A8")]
	None
}
[Token(Token = "0x200001D")]
public class NVRReprojectionCamera : MonoBehaviour
{
	[Token(Token = "0x200001E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7281D0", Offset = "0x7281D0")]
	private sealed class <enableReprojectionCameraCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float seconds;

		[Token(Token = "0x40000AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public NVRReprojectionCamera <>4__this;

		[Token(Token = "0x40000AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool enable;

		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string text;

		[Token(Token = "0x17000007")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000094")]
			[Address(RVA = "0x9DFA34", Offset = "0x9DFA34", VA = "0x9DFA34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000008")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000096")]
			[Address(RVA = "0x9DFA7C", Offset = "0x9DFA7C", VA = "0x9DFA7C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000091")]
		[Address(RVA = "0x9DF940", Offset = "0x9DF940", VA = "0x9DF940")]
		[DebuggerHidden]
		public <enableReprojectionCameraCoroutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000092")]
		[Address(RVA = "0x9DF96C", Offset = "0x9DF96C", VA = "0x9DF96C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000093")]
		[Address(RVA = "0x9DF970", Offset = "0x9DF970", VA = "0x9DF970", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000095")]
		[Address(RVA = "0x9DFA3C", Offset = "0x9DFA3C", VA = "0x9DFA3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Camera cam;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TextMesh displayText;

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xDA1DF4", Offset = "0xDA1DF4", VA = "0xDA1DF4")]
	private void init()
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xDA1E80", Offset = "0xDA1E80", VA = "0xDA1E80")]
	public void enableReprojectionCamera(bool enable, float seconds = 0f, string text = "")
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xDA1F4C", Offset = "0xDA1F4C", VA = "0xDA1F4C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72D860", Offset = "0x72D860")]
	private IEnumerator enableReprojectionCameraCoroutine(bool enable, float seconds = 0f, string text = "")
	{
		return null;
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xDA1FFC", Offset = "0xDA1FFC", VA = "0xDA1FFC")]
	public void setReprojectionCamera(bool state, string text)
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xDA2124", Offset = "0xDA2124", VA = "0xDA2124")]
	private void Update()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xDA2128", Offset = "0xDA2128", VA = "0xDA2128")]
	public NVRReprojectionCamera()
	{
	}
}
[Token(Token = "0x200001F")]
public class NVRRotater : MonoBehaviour
{
	[Token(Token = "0x2000020")]
	private enum RotationState
	{
		[Token(Token = "0x40000BE")]
		none,
		[Token(Token = "0x40000BF")]
		left,
		[Token(Token = "0x40000C0")]
		right,
		[Token(Token = "0x40000C1")]
		up,
		[Token(Token = "0x40000C2")]
		down,
		[Token(Token = "0x40000C3")]
		panright,
		[Token(Token = "0x40000C4")]
		panleft
	}

	[Token(Token = "0x2000021")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7281E0", Offset = "0x7281E0")]
	private sealed class <>c__DisplayClass16_0
	{
		[Token(Token = "0x40000C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public NVRRotater <>4__this;

		[Token(Token = "0x40000C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float degrees;

		[Token(Token = "0x40000C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TweenCallback <>9__1;

		[Token(Token = "0x600009F")]
		[Address(RVA = "0x9DFA84", Offset = "0x9DFA84", VA = "0x9DFA84")]
		public <>c__DisplayClass16_0()
		{
		}

		[Token(Token = "0x60000A0")]
		[Address(RVA = "0x9DFA8C", Offset = "0x9DFA8C", VA = "0x9DFA8C")]
		internal void <doRotation>b__0()
		{
		}

		[Token(Token = "0x60000A1")]
		[Address(RVA = "0x9DFB8C", Offset = "0x9DFB8C", VA = "0x9DFB8C")]
		internal void <doRotation>b__1()
		{
		}
	}

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RotationState[] m_rotationState;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private NVRPlayer m_player;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float m_lastTime;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool m_bInitialized;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	private bool m_bThumbStick;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maxSpeed;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float maxRotationAngle;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Renderer fade;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool doRotationFade;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool movementEnabled;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 initialUpPosition;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool rotating;

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xDA2130", Offset = "0xDA2130", VA = "0xDA2130")]
	private void initialize()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xDA2270", Offset = "0xDA2270", VA = "0xDA2270")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xDA2440", Offset = "0xDA2440", VA = "0xDA2440")]
	private void checkRotationState(NVRHand hand, out float speed, out float rotationAngle)
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xDA29CC", Offset = "0xDA29CC", VA = "0xDA29CC")]
	private void doRotation(float degrees)
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xDA3030", Offset = "0xDA3030", VA = "0xDA3030")]
	private void _doRotation(float degrees)
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xDA2B70", Offset = "0xDA2B70", VA = "0xDA2B70")]
	private void doAdvance(float speed)
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xDA2DD0", Offset = "0xDA2DD0", VA = "0xDA2DD0")]
	private void doRight(float speed)
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xDA3274", Offset = "0xDA3274", VA = "0xDA3274")]
	public NVRRotater()
	{
	}
}
[Token(Token = "0x2000022")]
public class NVRTeleportPointer : MonoBehaviour
{
	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xDA5294", Offset = "0xDA5294", VA = "0xDA5294")]
	public NVRTeleportPointer()
	{
	}
}
[Token(Token = "0x2000023")]
public class NVRTeleporter : MonoBehaviour
{
	[Token(Token = "0x2000024")]
	public delegate void OnTeleport();

	[Token(Token = "0x2000025")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7281F0", Offset = "0x7281F0")]
	private sealed class <>c__DisplayClass34_0
	{
		[Token(Token = "0x40000E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public NVRTeleporter <>4__this;

		[Token(Token = "0x40000E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 temp;

		[Token(Token = "0x40000E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public NVRInteractable LHandInteractable;

		[Token(Token = "0x40000E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public NVRInteractable RHandInteractable;

		[Token(Token = "0x40000E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TweenCallback <>9__1;

		[Token(Token = "0x60000BC")]
		[Address(RVA = "0x9DFBE0", Offset = "0x9DFBE0", VA = "0x9DFBE0")]
		public <>c__DisplayClass34_0()
		{
		}

		[Token(Token = "0x60000BD")]
		[Address(RVA = "0x9DFBE8", Offset = "0x9DFBE8", VA = "0x9DFBE8")]
		internal void <doTeleport>b__0()
		{
		}

		[Token(Token = "0x60000BE")]
		[Address(RVA = "0x9E0144", Offset = "0x9E0144", VA = "0x9E0144")]
		internal void <doTeleport>b__1()
		{
		}
	}

	[Token(Token = "0x40000C8")]
	protected const float BEAM_ADJUST_OFFSET = 0.0001f;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7294AC", Offset = "0x7294AC")]
	public Color validCollisionColor;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7294E4", Offset = "0x7294E4")]
	public Color invalidCollisionColor;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72951C", Offset = "0x72951C")]
	private float maximumLength;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729568", Offset = "0x729568")]
	public float scaleFactor;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7295A0", Offset = "0x7295A0")]
	public float cursorScaleMultiplier;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7295D8", Offset = "0x7295D8")]
	public bool cursorMatchTargetRotation;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729610", Offset = "0x729610")]
	public bool cursorDistanceRescale;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729648", Offset = "0x729648")]
	public Vector3 maximumCursorScale;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729680", Offset = "0x729680")]
	public LayerMask layersToAccept;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject m_cursor;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject m_tracer;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameObject m_pointer;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private NVRPlayer m_player;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private NVRHand m_currentHand;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Transform m_currentTeleportPointer;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 m_cursorOriginalScale;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Color m_previusColor;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private NVRTeleportArc teleportArc;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private NVRTeleportPoint currentTeleportPoint;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private NVRTeleportableIF currentTeleportableObj;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private NVRTeleportableIF exitTeleporterAction;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool actionExecuted;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Renderer fade;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private bool firstTeleport;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD9")]
	private bool cursorLocked;

	[Token(Token = "0x14000003")]
	public static event OnTeleport onTeleport
	{
		[Token(Token = "0x60000A3")]
		[Address(RVA = "0xDA529C", Offset = "0xDA529C", VA = "0xDA529C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72D910", Offset = "0x72D910")]
		add
		{
		}
		[Token(Token = "0x60000A4")]
		[Address(RVA = "0xDA5358", Offset = "0xDA5358", VA = "0xDA5358")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72D920", Offset = "0x72D920")]
		remove
		{
		}
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xDA5414", Offset = "0xDA5414", VA = "0xDA5414")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xDA56CC", Offset = "0xDA56CC", VA = "0xDA56CC")]
	private void Update()
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xDA65B8", Offset = "0xDA65B8", VA = "0xDA65B8")]
	private void hidePointer()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xDA5A68", Offset = "0xDA5A68", VA = "0xDA5A68")]
	private void showPointer()
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xDA59FC", Offset = "0xDA59FC", VA = "0xDA59FC")]
	private NVRHand checkHandActive()
	{
		return null;
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xDA6380", Offset = "0xDA6380", VA = "0xDA6380")]
	private void doTeleport(Vector3 endPoint)
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xDA5B18", Offset = "0xDA5B18", VA = "0xDA5B18")]
	private bool renderPointer(out Vector3 endPoint)
	{
		return default(bool);
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xDA68BC", Offset = "0xDA68BC", VA = "0xDA68BC", Slot = "4")]
	protected virtual void SetupMaterialRenderer(GameObject givenObject)
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xDA5574", Offset = "0xDA5574", VA = "0xDA5574")]
	private void createPointer()
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xDA6AD8", Offset = "0xDA6AD8", VA = "0xDA6AD8")]
	private GameObject createTracer()
	{
		return null;
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xDA69F8", Offset = "0xDA69F8", VA = "0xDA69F8")]
	private void createCursor()
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xDA6668", Offset = "0xDA6668", VA = "0xDA6668")]
	private bool checkHandActive(NVRHand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xDA6238", Offset = "0xDA6238", VA = "0xDA6238")]
	private bool checkHandInactive(NVRHand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xDA6828", Offset = "0xDA6828", VA = "0xDA6828")]
	private void ChangeColor(Color givenColor)
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xDA6C2C", Offset = "0xDA6C2C", VA = "0xDA6C2C")]
	private void ChangeMaterial(Color givenColor)
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xDA6D64", Offset = "0xDA6D64", VA = "0xDA6D64", Slot = "5")]
	protected virtual void SetGameObjectColor(GameObject cursorObject, Color color)
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xDA51C8", Offset = "0xDA51C8", VA = "0xDA51C8")]
	public void setCursorPosition(Vector3 position, bool lockPosition)
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xDA6EEC", Offset = "0xDA6EEC", VA = "0xDA6EEC", Slot = "6")]
	protected virtual void SetPointerAppearance(float tracerLength, RaycastHit destinationHit)
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xDA73C4", Offset = "0xDA73C4", VA = "0xDA73C4")]
	public NVRTeleporter()
	{
	}
}
[Token(Token = "0x2000026")]
public interface NVRTeleportableIF
{
	[Token(Token = "0x60000BF")]
	bool OnHoverEnter();

	[Token(Token = "0x60000C0")]
	bool OnHoverExit();

	[Token(Token = "0x60000C1")]
	bool OnTeleportEnter();

	[Token(Token = "0x60000C2")]
	bool OnTeleportExit();
}
[Token(Token = "0x2000027")]
public class NVRTeleportPoint : MonoBehaviour
{
	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool lockPlayerPosition;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected NVRPlayer player;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected NVRTeleporter teleporter;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected NVRRotater rotater;

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xDA504C", Offset = "0xDA504C", VA = "0xDA504C")]
	public void Start()
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xDA512C", Offset = "0xDA512C", VA = "0xDA512C", Slot = "4")]
	public virtual void OnTeleportEnter()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xDA5184", Offset = "0xDA5184", VA = "0xDA5184", Slot = "5")]
	public virtual void OnTeleportExit()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xDA5188", Offset = "0xDA5188", VA = "0xDA5188", Slot = "6")]
	public virtual void OnTeleportHoveringEnter()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xDA5254", Offset = "0xDA5254", VA = "0xDA5254", Slot = "7")]
	public virtual void OnTeleportHoveringUpdate()
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xDA5258", Offset = "0xDA5258", VA = "0xDA5258", Slot = "8")]
	public virtual void OnTeleportHoveringExit()
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xDA528C", Offset = "0xDA528C", VA = "0xDA528C")]
	public NVRTeleportPoint()
	{
	}
}
[Token(Token = "0x2000028")]
public static class ResourceManager
{
	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<string, Texture> textures;

	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<string, Material> materials;

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xADE868", Offset = "0xADE868", VA = "0xADE868")]
	public static Texture getTexture(string textureName)
	{
		return null;
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xADE9FC", Offset = "0xADE9FC", VA = "0xADE9FC")]
	public static Material getMaterial(string materialName)
	{
		return null;
	}
}
[Token(Token = "0x2000029")]
public class Test : MonoBehaviour
{
	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject gameObject1;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject gameObject2;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private LineRenderer line;

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x128F1B4", Offset = "0x128F1B4", VA = "0x128F1B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x128F24C", Offset = "0x128F24C", VA = "0x128F24C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x128F370", Offset = "0x128F370", VA = "0x128F370")]
	public Test()
	{
	}
}
[Token(Token = "0x200002A")]
public class TutorialHelper : MonoBehaviour
{
	[Token(Token = "0x40000F1")]
	private const string HELPER_RESOURCES_PATH = "TutorialHelper/";

	[Token(Token = "0x40000F2")]
	private const string WINDOWSMR_HELPER = "WindowsMRHelper";

	[Token(Token = "0x40000F3")]
	private const string OCULUS_HELPER = "OculusHelper";

	[Token(Token = "0x40000F4")]
	private const string HTC_HELPER = "HTCHelper";

	[Token(Token = "0x40000F5")]
	private const string PSMOVE_HELPER = "PSMoveHelper";

	[Token(Token = "0x40000F6")]
	private const string DUALSHOCK_HELPER = "DualshockHelper";

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool firstMenuButtonInteraction;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool firstGrabInteraction;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	public static bool firstActionPieceInteraction;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private NVRHand hand;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject helper;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material defaultMaterial;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material sphereMaterial;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material menuMaterial;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material teleportMaterial;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Material teleportDefaultMaterialVive;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material teleportMaterialVive;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material grabMaterial;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material actionMaterial;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Material grabSphereMaterial;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Material actionSphereMaterial;

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Renderer menuButton;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Renderer teleportButton;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Renderer grabButton;

	[Token(Token = "0x4000109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Renderer actionButton;

	[Token(Token = "0x400010A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Renderer actionButton2;

	[Token(Token = "0x400010B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Renderer sphere;

	[Token(Token = "0x400010C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private GameObject menuArrow;

	[Token(Token = "0x400010D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private GameObject grabArrow;

	[Token(Token = "0x400010E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private GameObject actionArrow;

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private HelperState m_state;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<NVRHand, TutorialHelper> s_helpers;

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xDE41B4", Offset = "0xDE41B4", VA = "0xDE41B4")]
	public static TutorialHelper getTutorialHelper(NVRHand hand)
	{
		return null;
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xDE42DC", Offset = "0xDE42DC", VA = "0xDE42DC")]
	public static void MenuArrowVisibility(bool state)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xDE44C0", Offset = "0xDE44C0", VA = "0xDE44C0")]
	public static void ActionArrowVisibility(bool state)
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xDE46A4", Offset = "0xDE46A4", VA = "0xDE46A4")]
	public static void GrabArrowVisibility(bool state)
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xDE4888", Offset = "0xDE4888", VA = "0xDE4888")]
	public static void HandState(NVRHand hand, bool grab, bool action, bool teleport, bool menu)
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xDE4C68", Offset = "0xDE4C68", VA = "0xDE4C68")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xDE4EEC", Offset = "0xDE4EEC", VA = "0xDE4EEC")]
	public void removeTutorialHelper()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xDE4DE8", Offset = "0xDE4DE8", VA = "0xDE4DE8")]
	public void initializateTutorialHelper()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xDE5014", Offset = "0xDE5014", VA = "0xDE5014")]
	public void initializateTutorialHelper(NVRHand helperHand, GameObject helperParent)
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xDE63AC", Offset = "0xDE63AC", VA = "0xDE63AC")]
	private void setTutorialHelper(GameObject helperParent, string helperName, string[] components, string[] buttonMapping)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xDE4A90", Offset = "0xDE4A90", VA = "0xDE4A90")]
	private void setHandState(bool bGrab, bool bAction, bool bTeleport, bool bMenu)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xDE6A9C", Offset = "0xDE6A9C", VA = "0xDE6A9C")]
	public void setSphereState(bool action, bool grab)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xDE6A90", Offset = "0xDE6A90", VA = "0xDE6A90")]
	private Material getStateMaterial(bool state, Material activeMaterial, Material defaultMaterial)
	{
		return null;
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xDE6AE4", Offset = "0xDE6AE4", VA = "0xDE6AE4")]
	public TutorialHelper()
	{
	}
}
[Token(Token = "0x200002B")]
internal class HelperState
{
	[Token(Token = "0x4000111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool m_bGrab;

	[Token(Token = "0x4000112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool m_bAction;

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool m_bTeleport;

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
	public bool m_bMenu;

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xB13FF0", Offset = "0xB13FF0", VA = "0xB13FF0")]
	public bool setNewState(bool bGrab, bool bAction, bool bTeleport, bool bMenu)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xB14080", Offset = "0xB14080", VA = "0xB14080")]
	public HelperState()
	{
	}
}
[Token(Token = "0x200002C")]
public class VRPostReprojection : MonoBehaviour
{
	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int currentEye;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RenderTexture postReprojectionTexture;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera cam;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float timeLeftShowingLoadingUI;

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x9CD5BC", Offset = "0x9CD5BC", VA = "0x9CD5BC")]
	public VRPostReprojection()
	{
	}
}
[Token(Token = "0x200002D")]
public class OculusAppEntitlementCheck : MonoBehaviour
{
	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xDAE324", Offset = "0xDAE324", VA = "0xDAE324")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xDAE4FC", Offset = "0xDAE4FC", VA = "0xDAE4FC")]
	private void GetEntitlementCallback(Message msg)
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xDAE5D4", Offset = "0xDAE5D4", VA = "0xDAE5D4")]
	public OculusAppEntitlementCheck()
	{
	}
}
[Token(Token = "0x200002E")]
public class OvrAvatarTestDriver : OvrAvatarDriver
{
	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 headPos;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Quaternion headRot;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float voiceAmplitude;

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xD0DDAC", Offset = "0xD0DDAC", VA = "0xD0DDAC")]
	private ControllerPose GetMalibuControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xD0DF10", Offset = "0xD0DF10", VA = "0xD0DF10")]
	private ControllerPose GetControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xD0E2AC", Offset = "0xD0E2AC", VA = "0xD0E2AC")]
	private void CalculateCurrentPose()
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xD0E450", Offset = "0xD0E450", VA = "0xD0E450", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xD0E47C", Offset = "0xD0E47C", VA = "0xD0E47C")]
	public OvrAvatarTestDriver()
	{
	}
}
[Token(Token = "0x200002F")]
public class PoseEditHelper : MonoBehaviour
{
	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform poseRoot;

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xAD9AE0", Offset = "0xAD9AE0", VA = "0xAD9AE0")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xAD9B68", Offset = "0xAD9B68", VA = "0xAD9B68")]
	private void DrawJoints(Transform joint)
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xAD9CDC", Offset = "0xAD9CDC", VA = "0xAD9CDC")]
	public PoseEditHelper()
	{
	}
}
[Token(Token = "0x2000030")]
public class GazeTargetSpawner : MonoBehaviour
{
	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject GazeTargetPrefab;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int NumberOfDummyTargets;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int RadiusMultiplier;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool isVisible;

	[Token(Token = "0x17000009")]
	public bool IsVisible
	{
		[Token(Token = "0x60000ED")]
		[Address(RVA = "0xE59C38", Offset = "0xE59C38", VA = "0xE59C38")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000EE")]
		[Address(RVA = "0xE59C40", Offset = "0xE59C40", VA = "0xE59C40")]
		set
		{
		}
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xE59D7C", Offset = "0xE59D7C", VA = "0xE59D7C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xE59F44", Offset = "0xE59F44", VA = "0xE59F44")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xE59F4C", Offset = "0xE59F4C", VA = "0xE59F4C")]
	public GazeTargetSpawner()
	{
	}
}
[Token(Token = "0x2000031")]
public class RemoteLoopbackManager : MonoBehaviour
{
	[Token(Token = "0x2000032")]
	private class PacketLatencyPair
	{
		[Token(Token = "0x4000126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte[] PacketData;

		[Token(Token = "0x4000127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float FakeLatency;

		[Token(Token = "0x60000F8")]
		[Address(RVA = "0x1B1CCC0", Offset = "0x1B1CCC0", VA = "0x1B1CCC0")]
		public PacketLatencyPair()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000033")]
	public class SimulatedLatencySettings
	{
		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7296D8", Offset = "0x7296D8")]
		public float FakeLatencyMax;

		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x7296F0", Offset = "0x7296F0")]
		public float FakeLatencyMin;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x729708", Offset = "0x729708")]
		public float LatencyWeight;

		[Token(Token = "0x400012B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x729720", Offset = "0x729720")]
		public int MaxSamples;

		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float AverageWindow;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal float LatencySum;

		[Token(Token = "0x400012E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal LinkedList<float> LatencyValues;

		[Token(Token = "0x60000F9")]
		[Address(RVA = "0x1B1CCC8", Offset = "0x1B1CCC8", VA = "0x1B1CCC8")]
		public float NextValue()
		{
			return default(float);
		}

		[Token(Token = "0x60000FA")]
		[Address(RVA = "0x1B1CE00", Offset = "0x1B1CE00", VA = "0x1B1CE00")]
		public SimulatedLatencySettings()
		{
		}
	}

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OvrAvatar LocalAvatar;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OvrAvatar LoopbackAvatar;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimulatedLatencySettings LatencySettings;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int PacketSequence;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LinkedList<PacketLatencyPair> packetQueue;

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xADDC50", Offset = "0xADDC50", VA = "0xADDC50")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xADDDA8", Offset = "0xADDDA8", VA = "0xADDDA8")]
	private void OnLocalAvatarPacketRecorded(object sender, OvrAvatar.PacketEventArgs args)
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xADE18C", Offset = "0xADE18C", VA = "0xADE18C")]
	private void Update()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xADE0D8", Offset = "0xADE0D8", VA = "0xADE0D8")]
	private void SendPacketData(byte[] data)
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xADE4BC", Offset = "0xADE4BC", VA = "0xADE4BC")]
	private void ReceivePacketData(byte[] data)
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xADE7A4", Offset = "0xADE7A4", VA = "0xADE7A4")]
	public RemoteLoopbackManager()
	{
	}
}
[Token(Token = "0x2000034")]
public class P2PManager
{
	[Token(Token = "0x2000035")]
	private enum MessageType : byte
	{
		[Token(Token = "0x4000130")]
		Update = 1
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xD0EFF0", Offset = "0xD0EFF0", VA = "0xD0EFF0")]
	public P2PManager()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xD0F0D0", Offset = "0xD0F0D0", VA = "0xD0F0D0")]
	public void ConnectTo(ulong userID)
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xD0F1B4", Offset = "0xD0F1B4", VA = "0xD0F1B4")]
	public void Disconnect(ulong userID)
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xD0F234", Offset = "0xD0F234", VA = "0xD0F234")]
	private void PeerConnectRequestCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xD0F3A4", Offset = "0xD0F3A4", VA = "0xD0F3A4")]
	private void ConnectionStateChangedCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xD0F5E4", Offset = "0xD0F5E4", VA = "0xD0F5E4")]
	public void SendAvatarUpdate(ulong userID, Transform rootTransform, uint sequence, byte[] avatarPacket)
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xD0F9D4", Offset = "0xD0F9D4", VA = "0xD0F9D4")]
	public void GetRemotePackets()
	{
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0xD0FC90", Offset = "0xD0FC90", VA = "0xD0FC90")]
	public void processAvatarPacket(RemotePlayer remote, ref byte[] packet, ref int offset)
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xD0F7B0", Offset = "0xD0F7B0", VA = "0xD0F7B0")]
	private void PackByte(byte b, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xD0FBC4", Offset = "0xD0FBC4", VA = "0xD0FBC4")]
	private byte ReadByte(byte[] buf, ref int offset)
	{
		return default(byte);
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xD0F894", Offset = "0xD0F894", VA = "0xD0F894")]
	private void PackFloat(float f, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xD0FEC8", Offset = "0xD0FEC8", VA = "0xD0FEC8")]
	private float ReadFloat(byte[] buf, ref int offset)
	{
		return default(float);
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xD0F7F8", Offset = "0xD0F7F8", VA = "0xD0F7F8")]
	private void PackULong(ulong u, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xD0FC08", Offset = "0xD0FC08", VA = "0xD0FC08")]
	private ulong ReadULong(byte[] buf, ref int offset)
	{
		return default(ulong);
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xD0F938", Offset = "0xD0F938", VA = "0xD0F938")]
	private void PackUInt32(uint u, byte[] buf, ref int offset)
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xD0FF50", Offset = "0xD0FF50", VA = "0xD0FF50")]
	private uint ReadUInt32(byte[] buf, ref int offset)
	{
		return default(uint);
	}
}
[Token(Token = "0x2000036")]
public class PlayerController : SocialPlatformManager
{
	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Camera spyCamera;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameObject cameraRig;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool showUI;

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xAD6C0C", Offset = "0xAD6C0C", VA = "0xAD6C0C", Slot = "5")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0xAD7044", Offset = "0xAD7044", VA = "0xAD7044", Slot = "6")]
	public override void Start()
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xAD7068", Offset = "0xAD7068", VA = "0xAD7068", Slot = "4")]
	public override void Update()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xAD7430", Offset = "0xAD7430", VA = "0xAD7430")]
	private void checkInput()
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xAD75CC", Offset = "0xAD75CC", VA = "0xAD75CC")]
	private void ToggleCamera()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xAD764C", Offset = "0xAD764C", VA = "0xAD764C")]
	private void ToggleUI()
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xAD76A0", Offset = "0xAD76A0", VA = "0xAD76A0")]
	public PlayerController()
	{
	}
}
[Token(Token = "0x2000037")]
public class RemotePlayer
{
	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong remoteUserID;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool stillInRoom;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public PeerConnectionState p2pConnectionState;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PeerConnectionState voipConnectionState;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatar RemoteAvatar;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 receivedRootPosition;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 receivedRootPositionPrior;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Quaternion receivedRootRotation;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Quaternion receivedRootRotationPrior;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public VoipAudioSourceHiLevel voipSource;

	[Token(Token = "0x6000112")]
	[Address(RVA = "0xADE860", Offset = "0xADE860", VA = "0xADE860")]
	public RemotePlayer()
	{
	}
}
[Token(Token = "0x2000038")]
public class RoomManager
{
	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong roomID;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ulong invitedRoomID;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool amIServer;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool startupDone;

	[Token(Token = "0x6000113")]
	[Address(RVA = "0xADEC6C", Offset = "0xADEC6C", VA = "0xADEC6C")]
	public RoomManager()
	{
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0xADED70", Offset = "0xADED70", VA = "0xADED70")]
	private void AcceptingInviteCallback(Message<string> msg)
	{
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0xADF060", Offset = "0xADF060", VA = "0xADF060")]
	public bool CheckForInvite()
	{
		return default(bool);
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0xADF198", Offset = "0xADF198", VA = "0xADF198")]
	public void CreateRoom()
	{
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0xADF26C", Offset = "0xADF26C", VA = "0xADF26C")]
	private void CreateAndJoinPrivateRoomCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0xADF81C", Offset = "0xADF81C", VA = "0xADF81C")]
	private void OnLaunchInviteWorkflowComplete(Message msg)
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0xADF090", Offset = "0xADF090", VA = "0xADF090")]
	public void JoinExistingRoom(ulong roomID)
	{
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0xADF8A0", Offset = "0xADF8A0", VA = "0xADF8A0")]
	private void JoinRoomCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0xAE0024", Offset = "0xAE0024", VA = "0xAE0024")]
	private void RoomUpdateCallback(Message<Room> msg)
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0xAE0370", Offset = "0xAE0370", VA = "0xAE0370")]
	public void LeaveCurrentRoom()
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0xADFBD0", Offset = "0xADFBD0", VA = "0xADFBD0")]
	private void ProcessRoomData(Message<Room> msg)
	{
	}
}
[Token(Token = "0x2000039")]
public class SocialPlatformManager : MonoBehaviour
{
	[Token(Token = "0x200003A")]
	public enum State
	{
		[Token(Token = "0x4000168")]
		INITIALIZING,
		[Token(Token = "0x4000169")]
		CHECKING_LAUNCH_STATE,
		[Token(Token = "0x400016A")]
		CREATING_A_ROOM,
		[Token(Token = "0x400016B")]
		WAITING_IN_A_ROOM,
		[Token(Token = "0x400016C")]
		JOINING_A_ROOM,
		[Token(Token = "0x400016D")]
		CONNECTED_IN_A_ROOM,
		[Token(Token = "0x400016E")]
		LEAVING_A_ROOM,
		[Token(Token = "0x400016F")]
		SHUTDOWN
	}

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Vector3 START_ROTATION_ONE;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static readonly Vector3 START_POSITION_ONE;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly Vector3 START_ROTATION_TWO;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static readonly Vector3 START_POSITION_TWO;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static readonly Vector3 START_ROTATION_THREE;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static readonly Vector3 START_POSITION_THREE;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static readonly Vector3 START_ROTATION_FOUR;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private static readonly Vector3 START_POSITION_FOUR;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static readonly Color BLACK;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static readonly Color WHITE;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static readonly Color CYAN;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static readonly Color BLUE;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static readonly Color GREEN;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float voiceCurrent;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private uint packetSequence;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OvrAvatar localAvatarPrefab;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatar remoteAvatarPrefab;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject helpPanel;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected MeshRenderer helpMesh;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Material riftMaterial;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Material gearMaterial;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected OvrAvatar localAvatar;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected GameObject localTrackingSpace;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected GameObject localPlayerHead;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected Dictionary<ulong, RemotePlayer> remoteUsers;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject roomSphere;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected MeshRenderer sphereMesh;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject roomFloor;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected MeshRenderer floorMesh;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected State currentState;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected static SocialPlatformManager s_instance;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected RoomManager roomManager;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected P2PManager p2pManager;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected VoipManager voipManager;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected ulong myID;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected string myOculusID;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public static readonly float VOIP_SCALE;

	[Token(Token = "0x1700000A")]
	public static State CurrentState
	{
		[Token(Token = "0x600012A")]
		[Address(RVA = "0xAEB248", Offset = "0xAEB248", VA = "0xAEB248")]
		get
		{
			return default(State);
		}
	}

	[Token(Token = "0x1700000B")]
	public static ulong MyID
	{
		[Token(Token = "0x600012B")]
		[Address(RVA = "0xADF398", Offset = "0xADF398", VA = "0xADF398")]
		get
		{
			return default(ulong);
		}
	}

	[Token(Token = "0x1700000C")]
	public static string MyOculusID
	{
		[Token(Token = "0x600012C")]
		[Address(RVA = "0xAEB2B8", Offset = "0xAEB2B8", VA = "0xAEB2B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0xAD708C", Offset = "0xAD708C", VA = "0xAD708C", Slot = "4")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0xAD6C4C", Offset = "0xAD6C4C", VA = "0xAD6C4C", Slot = "5")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0xAEA034", Offset = "0xAEA034", VA = "0xAEA034")]
	private void InitCallback(Message<PlatformInitialize> msg)
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0xAD7064", Offset = "0xAD7064", VA = "0xAD7064", Slot = "6")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0xAEA1DC", Offset = "0xAEA1DC", VA = "0xAEA1DC")]
	private void IsEntitledCallback(Message msg)
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0xAEA2FC", Offset = "0xAEA2FC", VA = "0xAEA2FC")]
	private void GetLoggedInUserCallback(Message<User> msg)
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0xAEAA5C", Offset = "0xAEAA5C", VA = "0xAEAA5C")]
	private void GetLoggedInUserFriendsAndRoomsCallback(Message<UserAndRoomList> msg)
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0xAEAE48", Offset = "0xAEAE48", VA = "0xAEAE48")]
	public void OnLocalAvatarPacketRecorded(object sender, OvrAvatar.PacketEventArgs args)
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xAEB058", Offset = "0xAEB058", VA = "0xAEB058")]
	public void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xAEB1DC", Offset = "0xAEB1DC", VA = "0xAEB1DC")]
	public void AddUser(ulong userID, ref RemotePlayer remoteUser)
	{
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xAE9F80", Offset = "0xAE9F80", VA = "0xAE9F80")]
	public void LogOutputLine(string line)
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xADEEE8", Offset = "0xADEEE8", VA = "0xADEEE8")]
	public static void TerminateWithError(Message msg)
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xADF478", Offset = "0xADF478", VA = "0xADF478")]
	public static void TransitionToState(State newState)
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xAEB3E0", Offset = "0xAEB3E0", VA = "0xAEB3E0")]
	private static void SetSphereColorForState()
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xADF738", Offset = "0xADF738", VA = "0xADF738")]
	public static void SetFloorColorForState(bool host)
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xAE03E4", Offset = "0xAE03E4", VA = "0xAE03E4")]
	public static void MarkAllRemoteUsersAsNotInRoom()
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xAE07E0", Offset = "0xAE07E0", VA = "0xAE07E0")]
	public static void MarkRemoteUserInRoom(ulong userID)
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xAE08C4", Offset = "0xAE08C4", VA = "0xAE08C4")]
	public static void ForgetRemoteUsersNotInRoom()
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xADEFA0", Offset = "0xADEFA0", VA = "0xADEFA0")]
	public static void LogOutput(string line)
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xAE0540", Offset = "0xAE0540", VA = "0xAE0540")]
	public static bool IsUserInRoom(ulong userID)
	{
		return default(bool);
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xAE05D4", Offset = "0xAE05D4", VA = "0xAE05D4")]
	public static void AddRemoteUser(ulong userID)
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xAEB55C", Offset = "0xAEB55C", VA = "0xAEB55C")]
	public static void RemoveRemoteUser(ulong userID)
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xAEB770", Offset = "0xAEB770", VA = "0xAEB770")]
	public void UpdateVoiceData(short[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xAE9EFC", Offset = "0xAE9EFC", VA = "0xAE9EFC")]
	[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x72D930", Offset = "0x72D930")]
	public static void MicFilter(short[] pcmData, UIntPtr pcmDataLength, int frequency, int numChannels)
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xAEB8B4", Offset = "0xAEB8B4", VA = "0xAEB8B4")]
	public static RemotePlayer GetRemoteUser(ulong userID)
	{
		return null;
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xAD7708", Offset = "0xAD7708", VA = "0xAD7708")]
	public SocialPlatformManager()
	{
	}
}
[Token(Token = "0x200003B")]
public class VoipManager
{
	[Token(Token = "0x600013C")]
	[Address(RVA = "0x9CDD54", Offset = "0x9CDD54", VA = "0x9CDD54")]
	public VoipManager()
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x9CDE34", Offset = "0x9CDE34", VA = "0x9CDE34")]
	public void ConnectTo(ulong userID)
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x9CDF18", Offset = "0x9CDF18", VA = "0x9CDF18")]
	public void Disconnect(ulong userID)
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x9CDF98", Offset = "0x9CDF98", VA = "0x9CDF98")]
	private void VoipConnectRequestCallback(Message<NetworkingPeer> msg)
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x9CE108", Offset = "0x9CE108", VA = "0x9CE108")]
	private void VoipStateChangedCallback(Message<NetworkingPeer> msg)
	{
	}
}
[Token(Token = "0x200003C")]
public class GazeTarget : MonoBehaviour
{
	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ovrAvatarGazeTargetType Type;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ovrAvatarGazeTargets RuntimeTargetList;

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xE598F4", Offset = "0xE598F4", VA = "0xE598F4")]
	static GazeTarget()
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xE5997C", Offset = "0xE5997C", VA = "0xE5997C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xE59AF0", Offset = "0xE59AF0", VA = "0xE59AF0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xE59B54", Offset = "0xE59B54", VA = "0xE59B54")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xE599B8", Offset = "0xE599B8", VA = "0xE599B8")]
	private void UpdateGazeTarget()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xE59C18", Offset = "0xE59C18", VA = "0xE59C18")]
	private ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
	{
		return default(ovrAvatarGazeTarget);
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xE59C30", Offset = "0xE59C30", VA = "0xE59C30")]
	public GazeTarget()
	{
	}
}
[Serializable]
[Token(Token = "0x200003D")]
public class AvatarLayer
{
	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int layerIndex;

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x1029BE4", Offset = "0x1029BE4", VA = "0x1029BE4")]
	public AvatarLayer()
	{
	}
}
[Serializable]
[Token(Token = "0x200003E")]
public class PacketRecordSettings
{
	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	internal bool RecordingFrames;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float UpdateRate;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal float AccumulatedTime;

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xD101FC", Offset = "0xD101FC", VA = "0xD101FC")]
	public PacketRecordSettings()
	{
	}
}
[Token(Token = "0x200003F")]
public class OvrAvatar : MonoBehaviour
{
	[Token(Token = "0x2000040")]
	public class PacketEventArgs : EventArgs
	{
		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly OvrAvatarPacket Packet;

		[Token(Token = "0x600017E")]
		[Address(RVA = "0x9E0C90", Offset = "0x9E0C90", VA = "0x9E0C90")]
		public PacketEventArgs(OvrAvatarPacket packet)
		{
		}
	}

	[Token(Token = "0x2000041")]
	public enum HandType
	{
		[Token(Token = "0x40001D1")]
		Right,
		[Token(Token = "0x40001D2")]
		Left,
		[Token(Token = "0x40001D3")]
		Max
	}

	[Token(Token = "0x2000042")]
	public enum HandJoint
	{
		[Token(Token = "0x40001D5")]
		HandBase,
		[Token(Token = "0x40001D6")]
		IndexBase,
		[Token(Token = "0x40001D7")]
		IndexTip,
		[Token(Token = "0x40001D8")]
		ThumbBase,
		[Token(Token = "0x40001D9")]
		ThumbTip,
		[Token(Token = "0x40001DA")]
		Max
	}

	[Token(Token = "0x2000043")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728200", Offset = "0x728200")]
	private sealed class <WaitForMouthAudioSource>d__137 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OvrAvatar <>4__this;

		[Token(Token = "0x1700000D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000182")]
			[Address(RVA = "0x9E0C40", Offset = "0x9E0C40", VA = "0x9E0C40", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000184")]
			[Address(RVA = "0x9E0C88", Offset = "0x9E0C88", VA = "0x9E0C88", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600017F")]
		[Address(RVA = "0x9E0A64", Offset = "0x9E0A64", VA = "0x9E0A64")]
		[DebuggerHidden]
		public <WaitForMouthAudioSource>d__137(int <>1__state)
		{
		}

		[Token(Token = "0x6000180")]
		[Address(RVA = "0x9E0A90", Offset = "0x9E0A90", VA = "0x9E0A90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000181")]
		[Address(RVA = "0x9E0A94", Offset = "0x9E0A94", VA = "0x9E0A94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000183")]
		[Address(RVA = "0x9E0C48", Offset = "0x9E0C48", VA = "0x9E0C48", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x729738", Offset = "0x729738")]
	public IntPtr sdkAvatar;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string oculusUserID;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OvrAvatarDriver Driver;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x729770", Offset = "0x729770")]
	public bool EnableBody;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool EnableHands;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool EnableBase;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public bool EnableExpressive;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7297A8", Offset = "0x7297A8")]
	public bool RecordPackets;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool UseSDKPackets;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PacketRecordSettings PacketSettings;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7297E0", Offset = "0x7297E0")]
	public bool StartWithControllers;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AvatarLayer FirstPersonLayer;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AvatarLayer ThirdPersonLayer;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool ShowFirstPerson;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool ShowThirdPerson;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	internal ovrAvatarCapabilities Capabilities;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x729818", Offset = "0x729818")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729818", Offset = "0x729818")]
	[SerializeField]
	internal ovrAvatarAssetLevelOfDetail LevelOfDetail;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729888", Offset = "0x729888")]
	private bool CombineMeshes;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x7298C0", Offset = "0x7298C0")]
	public bool UseTransparentRenderQueue;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x7298F8", Offset = "0x7298F8")]
	public Shader Monochrome_SurfaceShader;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Shader Monochrome_SurfaceShader_SelfOccluding;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Shader Monochrome_SurfaceShader_PBS;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Shader Skinshaded_SurfaceShader_SingleComponent;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Shader Skinshaded_VertFrag_SingleComponent;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Shader Skinshaded_VertFrag_CombinedMesh;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Shader Skinshaded_Expressive_SurfaceShader_SingleComponent;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Shader Skinshaded_Expressive_VertFrag_SingleComponent;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Shader Skinshaded_Expressive_VertFrag_CombinedMesh;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Shader Loader_VertFrag_CombinedMesh;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Shader EyeLens;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Shader ControllerShader;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x729930", Offset = "0x729930")]
	public bool CanOwnMicrophone;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729968", Offset = "0x729968")]
	public bool EnableLaughter;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject MouthAnchor;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Transform LeftHandCustomPose;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Transform RightHandCustomPose;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private HashSet<ulong> assetLoadingIds;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private bool assetsFinishedLoading;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private OvrAvatarMaterialManager materialManager;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private bool waitingForCombinedMesh;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool doneExpressiveGlobalInit;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private Vector4 clothingAlphaOffset;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private ulong clothingAlphaTexture;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private OVRLipSyncMicInput micInput;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private OVRLipSyncContext lipsyncContext;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private OVRLipSync.Frame currentFrame;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private float[] visemes;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private AudioSource audioSource;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private ONSPAudioSource spatializedSource;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private List<float[]> voiceUpdates;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ovrAvatarVisemes RuntimeVisemes;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Transform cachedLeftHandCustomPose;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Transform[] cachedCustomLeftHandJoints;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private ovrAvatarTransform[] cachedLeftHandTransforms;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private Transform cachedRightHandCustomPose;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private Transform[] cachedCustomRightHandJoints;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private ovrAvatarTransform[] cachedRightHandTransforms;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private bool showLeftController;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
	private bool showRightController;

	[Token(Token = "0x40001B1")]
	private const bool USE_MOBILE_TEXTURE_FORMAT = true;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly Vector3 MOUTH_HEAD_OFFSET;

	[Token(Token = "0x40001B3")]
	private const string MOUTH_HELPER_NAME = "MouthAnchor";

	[Token(Token = "0x40001B4")]
	private const int VISEME_COUNT = 16;

	[Token(Token = "0x40001B5")]
	private const float ACTION_UNIT_ONSET_SPEED = 30f;

	[Token(Token = "0x40001B6")]
	private const float ACTION_UNIT_FALLOFF_SPEED = 20f;

	[Token(Token = "0x40001B7")]
	private const float VISEME_LEVEL_MULTIPLIER = 1.5f;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	internal ulong oculusUserIDInternal;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	internal OvrAvatarBase Base;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	internal OvrAvatarTouchController ControllerLeft;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	internal OvrAvatarTouchController ControllerRight;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	internal OvrAvatarBody Body;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	internal OvrAvatarHand HandLeft;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	internal OvrAvatarHand HandRight;

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	internal ovrAvatarLookAndFeelVersion LookAndFeelVersion;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	internal ovrAvatarLookAndFeelVersion FallbackLookAndFeelVersion;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private OvrAvatarPacket CurrentUnityPacket;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public EventHandler<PacketEventArgs> PacketRecorded;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static string[,] HandJoints;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static Vector3 MOUTH_POSITION_OFFSET;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static string VOICE_PROPERTY;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static string MOUTH_POSITION_PROPERTY;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static string MOUTH_DIRECTION_PROPERTY;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static string MOUTH_SCALE_PROPERTY;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static float MOUTH_SCALE_GLOBAL;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private static float MOUTH_MAX_GLOBAL;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static string NECK_JONT;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public float VoiceAmplitude;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
	public bool EnableMouthVertexAnimation;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static ovrAvatarLights ovrLights;

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xDAE844", Offset = "0xDAE844", VA = "0xDAE844")]
	static OvrAvatar()
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xDAECE4", Offset = "0xDAECE4", VA = "0xDAECE4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xDAED78", Offset = "0xDAED78", VA = "0xDAED78")]
	public void AssetLoadedCallback(OvrAvatarAsset asset)
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xDAEDE0", Offset = "0xDAEDE0", VA = "0xDAEDE0")]
	public void CombinedMeshLoadedCallback(IntPtr assetPtr)
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xDAEF10", Offset = "0xDAEF10", VA = "0xDAEF10")]
	private OvrAvatarSkinnedMeshRenderComponent AddSkinnedMeshRenderComponent(GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender)
	{
		return null;
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xDAEFF0", Offset = "0xDAEFF0", VA = "0xDAEFF0")]
	private OvrAvatarSkinnedMeshRenderPBSComponent AddSkinnedMeshRenderPBSComponent(GameObject gameObject, ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS)
	{
		return null;
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xDAF0CC", Offset = "0xDAF0CC", VA = "0xDAF0CC")]
	private OvrAvatarSkinnedMeshPBSV2RenderComponent AddSkinnedMeshRenderPBSV2Component(IntPtr renderPart, GameObject go, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRenderPBSV2, bool isBodyPartZero, bool isControllerModel)
	{
		return null;
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xDAF2B0", Offset = "0xDAF2B0", VA = "0xDAF2B0")]
	public static IntPtr GetRenderPart(ovrAvatarComponent component, uint renderPartIndex)
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xDAF38C", Offset = "0xDAF38C", VA = "0xDAF38C")]
	private static string GetRenderPartName(ovrAvatarComponent component, uint renderPartIndex)
	{
		return null;
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xDAF404", Offset = "0xDAF404", VA = "0xDAF404")]
	internal static void ConvertTransform(float[] transform, ref ovrAvatarTransform target)
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xDAF4EC", Offset = "0xDAF4EC", VA = "0xDAF4EC")]
	internal static void ConvertTransform(ovrAvatarTransform transform, Transform target)
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xDAF578", Offset = "0xDAF578", VA = "0xDAF578")]
	public static ovrAvatarTransform CreateOvrAvatarTransform(Vector3 position, Quaternion orientation)
	{
		return default(ovrAvatarTransform);
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xDAF600", Offset = "0xDAF600", VA = "0xDAF600")]
	private static ovrAvatarGazeTarget CreateOvrGazeTarget(uint targetId, Vector3 targetPosition, ovrAvatarGazeTargetType targetType)
	{
		return default(ovrAvatarGazeTarget);
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xDAF618", Offset = "0xDAF618", VA = "0xDAF618")]
	private void BuildRenderComponents()
	{
	}

	[Token(Token = "0x6000158")]
	private void AddAvatarComponent<T>(ref T root, ovrAvatarComponent nativeComponent) where T : OvrAvatarComponent
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xDAFAC8", Offset = "0xDAFAC8", VA = "0xDAFAC8")]
	private void UpdateCustomPoses()
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xDAFE48", Offset = "0xDAFE48", VA = "0xDAFE48")]
	private static bool UpdatePoseRoot(Transform poseRoot, ref Transform cachedPoseRoot, ref Transform[] cachedPoseJoints, ref ovrAvatarTransform[] transforms)
	{
		return default(bool);
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xDB0034", Offset = "0xDB0034", VA = "0xDB0034")]
	private static bool UpdateTransforms(Transform[] joints, ovrAvatarTransform[] transforms)
	{
		return default(bool);
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xDB0280", Offset = "0xDB0280", VA = "0xDB0280")]
	private static void OrderJoints(Transform transform, List<Transform> joints)
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xDB0374", Offset = "0xDB0374", VA = "0xDB0374")]
	private void AvatarSpecificationCallback(IntPtr avatarSpecification)
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xDB077C", Offset = "0xDB077C", VA = "0xDB077C")]
	private void Start()
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xDB0AB4", Offset = "0xDB0AB4", VA = "0xDB0AB4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xDB14EC", Offset = "0xDB14EC", VA = "0xDB14EC")]
	public static ovrAvatarHandInputState CreateInputState(ovrAvatarTransform transform, OvrAvatarDriver.ControllerPose pose)
	{
		return default(ovrAvatarHandInputState);
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xDB1540", Offset = "0xDB1540", VA = "0xDB1540")]
	public void ShowControllers(bool show)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xDB0634", Offset = "0xDB0634", VA = "0xDB0634")]
	public void ShowLeftController(bool show)
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xDB06D8", Offset = "0xDB06D8", VA = "0xDB06D8")]
	public void ShowRightController(bool show)
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xDB1570", Offset = "0xDB1570", VA = "0xDB1570")]
	public void UpdateVoiceVisualization(float[] voiceSamples)
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xDB0E8C", Offset = "0xDB0E8C", VA = "0xDB0E8C")]
	private void RecordFrame()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xDB17E4", Offset = "0xDB17E4", VA = "0xDB17E4")]
	private void RecordUnityFrame()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xDB15D4", Offset = "0xDB15D4", VA = "0xDB15D4")]
	private void RecordSDKFrame()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xDB1AB8", Offset = "0xDB1AB8", VA = "0xDB1AB8")]
	private void AddRenderParts(OvrAvatarComponent ovrComponent, ovrAvatarComponent component, Transform parent)
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xDB1F34", Offset = "0xDB1F34", VA = "0xDB1F34")]
	public void RefreshBodyParts()
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xDB21CC", Offset = "0xDB21CC", VA = "0xDB21CC")]
	public ovrAvatarBodyComponent? GetBodyComponent()
	{
		return null;
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xDB2320", Offset = "0xDB2320", VA = "0xDB2320")]
	public Transform GetHandTransform(HandType hand, HandJoint joint)
	{
		return null;
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xDB2504", Offset = "0xDB2504", VA = "0xDB2504")]
	public void GetPointingDirection(HandType hand, ref Vector3 forward, ref Vector3 up)
	{
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xDB106C", Offset = "0xDB106C", VA = "0xDB106C")]
	private void UpdateVoiceBehavior()
	{
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xDB25D8", Offset = "0xDB25D8", VA = "0xDB25D8")]
	private bool IsValidMic()
	{
		return default(bool);
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xDB0E9C", Offset = "0xDB0E9C", VA = "0xDB0E9C")]
	private void InitPostLoad()
	{
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xDB26C8", Offset = "0xDB26C8", VA = "0xDB26C8")]
	private static void ExpressiveGlobalInit()
	{
	}

	[Token(Token = "0x6000171")]
	[Address(RVA = "0xDB2D7C", Offset = "0xDB2D7C", VA = "0xDB2D7C")]
	private static void InitializeLights()
	{
	}

	[Token(Token = "0x6000172")]
	[Address(RVA = "0xDB3260", Offset = "0xDB3260", VA = "0xDB3260")]
	private static ovrAvatarLight CreateLightDirectional(uint id, Vector3 direction, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x6000173")]
	[Address(RVA = "0xDB3288", Offset = "0xDB3288", VA = "0xDB3288")]
	private static ovrAvatarLight CreateLightPoint(uint id, Vector3 position, float range, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x6000174")]
	[Address(RVA = "0xDB32B0", Offset = "0xDB32B0", VA = "0xDB32B0")]
	private static ovrAvatarLight CreateLightSpot(uint id, Vector3 position, Vector3 direction, float spotAngleDeg, float range, float intensity, ref ovrAvatarLight light)
	{
		return default(ovrAvatarLight);
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xDB1378", Offset = "0xDB1378", VA = "0xDB1378")]
	private void UpdateExpressive()
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xDB2798", Offset = "0xDB2798", VA = "0xDB2798")]
	private void ConfigureHelpers()
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xDB36E0", Offset = "0xDB36E0", VA = "0xDB36E0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72D990", Offset = "0x72D990")]
	private IEnumerator WaitForMouthAudioSource()
	{
		return null;
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xDB3758", Offset = "0xDB3758", VA = "0xDB3758")]
	public void DestroyHelperObjects()
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xDB35A0", Offset = "0xDB35A0", VA = "0xDB35A0")]
	public GameObject CreateHelperObject(Transform parent, Vector3 localPositionOffset, string helperName, string helperTag = "")
	{
		return null;
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xDB381C", Offset = "0xDB381C", VA = "0xDB381C")]
	public void UpdateVoiceData(short[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xDB3904", Offset = "0xDB3904", VA = "0xDB3904")]
	public void UpdateVoiceData(float[] pcmData, int numChannels)
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xDB32EC", Offset = "0xDB32EC", VA = "0xDB32EC")]
	private void UpdateFacewave()
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xDB39EC", Offset = "0xDB39EC", VA = "0xDB39EC")]
	public OvrAvatar()
	{
	}
}
[Token(Token = "0x2000044")]
public class OvrAvatarAsset
{
	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong assetID;

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xD009C8", Offset = "0xD009C8", VA = "0xD009C8")]
	public OvrAvatarAsset()
	{
	}
}
[Token(Token = "0x2000045")]
public class OvrAvatarAssetMesh : OvrAvatarAsset
{
	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Mesh mesh;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ovrAvatarSkinnedMeshPose skinnedBindPose;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string[] jointNames;

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xD00A98", Offset = "0xD00A98", VA = "0xD00A98")]
	public OvrAvatarAssetMesh(ulong _assetId, IntPtr asset, ovrAvatarAssetType meshType)
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xD01D50", Offset = "0xD01D50", VA = "0xD01D50")]
	private void LoadSubmeshes(IntPtr asset, IntPtr indexBufferPtr, ulong indexCount)
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xD01924", Offset = "0xD01924", VA = "0xD01924")]
	private void LoadBlendShapes(IntPtr asset, long vertexCount)
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xD016A8", Offset = "0xD016A8", VA = "0xD016A8")]
	private void SetSkinnedBindPose(IntPtr asset, ovrAvatarAssetType meshType)
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xD01790", Offset = "0xD01790", VA = "0xD01790")]
	private void GetVertexAndIndexData(IntPtr asset, ovrAvatarAssetType meshType, out long vertexCount, out IntPtr vertexBuffer, out uint indexCount, out IntPtr indexBuffer)
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xD01FE0", Offset = "0xD01FE0", VA = "0xD01FE0")]
	public SkinnedMeshRenderer CreateSkinnedMeshRendererOnObject(GameObject target)
	{
		return null;
	}
}
[Token(Token = "0x2000046")]
public class OvrAvatarAssetTexture : OvrAvatarAsset
{
	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D texture;

	[Token(Token = "0x40001E3")]
	private const int ASTCHeaderSize = 16;

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xD025A8", Offset = "0xD025A8", VA = "0xD025A8")]
	public OvrAvatarAssetTexture(ulong _assetId, IntPtr asset)
	{
	}
}
[Token(Token = "0x2000047")]
public class OvrAvatarBase : OvrAvatarComponent
{
	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ovrAvatarBaseComponent component;

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xD02824", Offset = "0xD02824", VA = "0xD02824")]
	private void Update()
	{
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xD02C7C", Offset = "0xD02C7C", VA = "0xD02C7C")]
	public OvrAvatarBase()
	{
	}
}
[Token(Token = "0x2000048")]
public class OvrAvatarBody : OvrAvatarComponent
{
	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ovrAvatarBodyComponent component;

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xD02DAC", Offset = "0xD02DAC", VA = "0xD02DAC")]
	public ovrAvatarComponent? GetNativeAvatarComponent()
	{
		return null;
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xD02F1C", Offset = "0xD02F1C", VA = "0xD02F1C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xD0304C", Offset = "0xD0304C", VA = "0xD0304C")]
	public OvrAvatarBody()
	{
	}
}
[Token(Token = "0x2000049")]
public class OvrAvatarComponent : MonoBehaviour
{
	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string[] LayerKeywords;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly string[] LayerSampleModeParameters;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly string[] LayerBlendModeParameters;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly string[] LayerMaskTypeParameters;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static readonly string[] LayerColorParameters;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static readonly string[] LayerSurfaceParameters;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static readonly string[] LayerSampleParametersParameters;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static readonly string[] LayerMaskParametersParameters;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static readonly string[] LayerMaskAxisParameters;

	[Token(Token = "0x40001EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Material, ovrAvatarMaterialState> materialStates;

	[Token(Token = "0x40001F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<OvrAvatarRenderComponent> RenderParts;

	[Token(Token = "0x40001F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected OvrAvatar owner;

	[Token(Token = "0x40001F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected ovrAvatarComponent nativeAvatarComponent;

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xD030AC", Offset = "0xD030AC", VA = "0xD030AC")]
	public void SetOvrAvatarOwner(OvrAvatar ovrAvatarOwner)
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xD02954", Offset = "0xD02954", VA = "0xD02954")]
	public void UpdateAvatar(IntPtr nativeComponent)
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xD036FC", Offset = "0xD036FC", VA = "0xD036FC")]
	protected void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xD0375C", Offset = "0xD0375C", VA = "0xD0375C")]
	public void UpdateAvatarMaterial(Material mat, ovrAvatarMaterialState matState)
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xD03F10", Offset = "0xD03F10", VA = "0xD03F10")]
	public static Texture2D GetLoadedTexture(ulong assetId)
	{
		return null;
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xD02CDC", Offset = "0xD02CDC", VA = "0xD02CDC")]
	public OvrAvatarComponent()
	{
	}
}
[Token(Token = "0x200004A")]
public abstract class OvrAvatarDriver : MonoBehaviour
{
	[Token(Token = "0x200004B")]
	public enum PacketMode
	{
		[Token(Token = "0x40001F7")]
		SDK,
		[Token(Token = "0x40001F8")]
		Unity
	}

	[Token(Token = "0x200004C")]
	public struct ControllerPose
	{
		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ovrAvatarButton buttons;

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ovrAvatarTouch touches;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector2 joystickPosition;

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float indexTrigger;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float handTrigger;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isActive;

		[Token(Token = "0x600019F")]
		[Address(RVA = "0x9E0D10", Offset = "0x9E0D10", VA = "0x9E0D10")]
		public static ControllerPose Interpolate(ControllerPose a, ControllerPose b, float t)
		{
			return default(ControllerPose);
		}
	}

	[Token(Token = "0x200004D")]
	public struct PoseFrame
	{
		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 headPosition;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Quaternion headRotation;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 handLeftPosition;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Quaternion handLeftRotation;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 handRightPosition;

		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Quaternion handRightRotation;

		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float voiceAmplitude;

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ControllerPose controllerLeftPose;

		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public ControllerPose controllerRightPose;

		[Token(Token = "0x60001A0")]
		[Address(RVA = "0x9E0DEC", Offset = "0x9E0DEC", VA = "0x9E0DEC")]
		public static PoseFrame Interpolate(PoseFrame a, PoseFrame b, float t)
		{
			return default(PoseFrame);
		}
	}

	[Token(Token = "0x40001F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PacketMode Mode;

	[Token(Token = "0x40001F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected PoseFrame CurrentPose;

	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private ovrAvatarControllerType ControllerType;

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xD05AB4", Offset = "0xD05AB4", VA = "0xD05AB4")]
	public PoseFrame GetCurrentPose()
	{
		return default(PoseFrame);
	}

	[Token(Token = "0x600019A")]
	public abstract void UpdateTransforms(IntPtr sdkAvatar);

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xD05AC4", Offset = "0xD05AC4", VA = "0xD05AC4")]
	private void Start()
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xD05B4C", Offset = "0xD05B4C", VA = "0xD05B4C")]
	public void UpdateTransformsFromPose(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xD05DC8", Offset = "0xD05DC8", VA = "0xD05DC8")]
	public static bool GetIsTrackedRemote()
	{
		return default(bool);
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xD05DD0", Offset = "0xD05DD0", VA = "0xD05DD0")]
	protected OvrAvatarDriver()
	{
	}
}
[Token(Token = "0x200004E")]
public class OvrAvatarHand : OvrAvatarComponent
{
	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isLeftHand;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ovrAvatarHandComponent component;

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xD05DE0", Offset = "0xD05DE0", VA = "0xD05DE0")]
	private void Update()
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xD05F50", Offset = "0xD05F50", VA = "0xD05F50")]
	public OvrAvatarHand()
	{
	}
}
[Token(Token = "0x200004F")]
public class OvrAvatarLocalDriver : OvrAvatarDriver
{
	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 centerEyePosition;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Quaternion centerEyeRotation;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float voiceAmplitude;

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xD05FB8", Offset = "0xD05FB8", VA = "0xD05FB8")]
	private ControllerPose GetMalibuControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xD0611C", Offset = "0xD0611C", VA = "0xD0611C")]
	private ControllerPose GetControllerPose(OVRInput.Controller controller)
	{
		return default(ControllerPose);
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xD064B8", Offset = "0xD064B8", VA = "0xD064B8")]
	private void CalculateCurrentPose()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xD066DC", Offset = "0xD066DC", VA = "0xD066DC", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xD06708", Offset = "0xD06708", VA = "0xD06708")]
	public OvrAvatarLocalDriver()
	{
	}
}
[Token(Token = "0x2000050")]
public class OvrAvatarMaterialManager : MonoBehaviour
{
	[Token(Token = "0x2000051")]
	public enum TextureType
	{
		[Token(Token = "0x400022E")]
		DiffuseTextures,
		[Token(Token = "0x400022F")]
		NormalMaps,
		[Token(Token = "0x4000230")]
		RoughnessMaps,
		[Token(Token = "0x4000231")]
		Count
	}

	[Token(Token = "0x2000052")]
	public struct AvatarComponentMaterialProperties
	{
		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ovrAvatarBodyPartType TypeIndex;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Color Color;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Texture2D[] Textures;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DiffuseIntensity;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RimIntensity;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ReflectionIntensity;
	}

	[Token(Token = "0x2000053")]
	public struct AvatarTextureArrayProperties
	{
		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture2D[] Textures;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture2DArray TextureArray;
	}

	[Token(Token = "0x2000054")]
	public struct AvatarMaterialPropertyBlock
	{
		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector4[] Colors;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float[] DiffuseIntensities;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] RimIntensities;

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] ReflectionIntensities;
	}

	[Serializable]
	[Token(Token = "0x2000055")]
	public class AvatarMaterialConfig
	{
		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AvatarComponentMaterialProperties[] ComponentMaterialProperties;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AvatarMaterialPropertyBlock MaterialPropertyBlock;

		[Token(Token = "0x60001B7")]
		[Address(RVA = "0x9E1830", Offset = "0x9E1830", VA = "0x9E1830")]
		public AvatarMaterialConfig()
		{
		}
	}

	[Token(Token = "0x2000056")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728210", Offset = "0x728210")]
	private sealed class <RunLoadingAnimation>d__49 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OvrAvatarMaterialManager <>4__this;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action callBack;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <srcBlend>5__2;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int <dstBlend>5__3;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string <lightModeTag>5__4;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string <renderTypeTag>5__5;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string <renderQueueTag>5__6;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string <ignoreProjectorTag>5__7;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int <renderQueue>5__8;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool <transparentQueue>5__9;

		[Token(Token = "0x1700000F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001BB")]
			[Address(RVA = "0x9E17E0", Offset = "0x9E17E0", VA = "0x9E17E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000010")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001BD")]
			[Address(RVA = "0x9E1828", Offset = "0x9E1828", VA = "0x9E1828", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x9E10F0", Offset = "0x9E10F0", VA = "0x9E10F0")]
		[DebuggerHidden]
		public <RunLoadingAnimation>d__49(int <>1__state)
		{
		}

		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x9E111C", Offset = "0x9E111C", VA = "0x9E111C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x9E1120", Offset = "0x9E1120", VA = "0x9E1120", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001BC")]
		[Address(RVA = "0x9E17E8", Offset = "0x9E17E8", VA = "0x9E17E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer TargetRenderer;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AvatarTextureArrayProperties[] TextureArrays;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly string[] TextureTypeToShaderProperties;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AvatarMaterialConfig LocalAvatarConfig;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<ReflectionProbeBlendInfo> ReflectionProbes;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Shader CombinedShader;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string AVATAR_SHADER_LOADER;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string AVATAR_SHADER_MAINTEX;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string AVATAR_SHADER_NORMALMAP;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string AVATAR_SHADER_ROUGHNESSMAP;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string AVATAR_SHADER_COLOR;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string AVATAR_SHADER_DIFFUSEINTENSITY;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string AVATAR_SHADER_RIMINTENSITY;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string AVATAR_SHADER_REFLECTIONINTENSITY;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string AVATAR_SHADER_CUBEMAP;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string AVATAR_SHADER_ALPHA;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string AVATAR_SHADER_LOADING_DIMMER;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string AVATAR_SHADER_IRIS_COLOR;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static string AVATAR_SHADER_LIP_COLOR;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public static string AVATAR_SHADER_BROW_COLOR;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static string AVATAR_SHADER_LASH_COLOR;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static string AVATAR_SHADER_SCLERA_COLOR;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static string AVATAR_SHADER_GUM_COLOR;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static string AVATAR_SHADER_TEETH_COLOR;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static string AVATAR_SHADER_LIP_SMOOTHNESS;

	[Token(Token = "0x4000226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public static float[] DiffuseIntensities;

	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static float[] RimIntensities;

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static float[] ReflectionIntensities;

	[Token(Token = "0x4000229")]
	private const float LOADING_ANIMATION_AMPLITUDE = 0.5f;

	[Token(Token = "0x400022A")]
	private const float LOADING_ANIMATION_PERIOD = 0.35f;

	[Token(Token = "0x400022B")]
	private const float LOADING_ANIMATION_CURVE_SCALE = 0.25f;

	[Token(Token = "0x400022C")]
	private const float LOADING_ANIMATION_DIMMER_MIN = 0.3f;

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xD06754", Offset = "0xD06754", VA = "0xD06754")]
	public void CreateTextureArrays()
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xD06934", Offset = "0xD06934", VA = "0xD06934")]
	public void SetRenderer(Renderer renderer)
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xD06974", Offset = "0xD06974", VA = "0xD06974")]
	public void OnCombinedMeshReady()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xD07108", Offset = "0xD07108", VA = "0xD07108")]
	public void AddTextureIDToTextureManager(ulong assetID, bool isSingleComponent)
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xD073F0", Offset = "0xD073F0", VA = "0xD073F0")]
	private void DeleteTextureSet()
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xD06A10", Offset = "0xD06A10", VA = "0xD06A10")]
	public void InitTextureArrays()
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xD074DC", Offset = "0xD074DC", VA = "0xD074DC")]
	private void ProcessTexturesWithMips(Texture2D[] textures, int texArrayResolution, Texture2DArray texArray)
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xD06E64", Offset = "0xD06E64", VA = "0xD06E64")]
	private void SetMaterialPropertyBlock()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xD0776C", Offset = "0xD0776C", VA = "0xD0776C")]
	private void ApplyMaterialPropertyBlock()
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xD07A10", Offset = "0xD07A10", VA = "0xD07A10")]
	public static ovrAvatarBodyPartType GetComponentType(string objectName)
	{
		return default(ovrAvatarBodyPartType);
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xD07B38", Offset = "0xD07B38", VA = "0xD07B38")]
	private ulong GetTextureIDForType(ovrAvatarPBSMaterialState materialState, TextureType type)
	{
		return default(ulong);
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xD07B70", Offset = "0xD07B70", VA = "0xD07B70")]
	public void ValidateTextures(ovrAvatarPBSMaterialState[] materialStates)
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xD07074", Offset = "0xD07074", VA = "0xD07074")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72DA40", Offset = "0x72DA40")]
	private IEnumerator RunLoadingAnimation(Action callBack)
	{
		return null;
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xD08AD8", Offset = "0xD08AD8", VA = "0xD08AD8")]
	public OvrAvatarMaterialManager()
	{
	}
}
[Token(Token = "0x2000057")]
public class OvrAvatarPacket
{
	[Token(Token = "0x400024C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr ovrNativePacket;

	[Token(Token = "0x400024D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<float> frameTimes;

	[Token(Token = "0x400024E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<OvrAvatarDriver.PoseFrame> frames;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<byte[]> encodedAudioPackets;

	[Token(Token = "0x17000011")]
	public float Duration
	{
		[Token(Token = "0x60001BE")]
		[Address(RVA = "0xD09114", Offset = "0xD09114", VA = "0xD09114")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000012")]
	public OvrAvatarDriver.PoseFrame FinalFrame
	{
		[Token(Token = "0x60001BF")]
		[Address(RVA = "0xD09188", Offset = "0xD09188", VA = "0xD09188")]
		get
		{
			return default(OvrAvatarDriver.PoseFrame);
		}
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xD09218", Offset = "0xD09218", VA = "0xD09218")]
	public OvrAvatarPacket()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xD09344", Offset = "0xD09344", VA = "0xD09344")]
	public OvrAvatarPacket(OvrAvatarDriver.PoseFrame initialPose)
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xD09510", Offset = "0xD09510", VA = "0xD09510")]
	private OvrAvatarPacket(List<float> frameTimes, List<OvrAvatarDriver.PoseFrame> frames, List<byte[]> audioPackets)
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xD0967C", Offset = "0xD0967C", VA = "0xD0967C")]
	public void AddFrame(OvrAvatarDriver.PoseFrame frame, float deltaSeconds)
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xD09754", Offset = "0xD09754", VA = "0xD09754")]
	public OvrAvatarDriver.PoseFrame GetPoseFrame(float seconds)
	{
		return default(OvrAvatarDriver.PoseFrame);
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xD09984", Offset = "0xD09984", VA = "0xD09984")]
	public static OvrAvatarPacket Read(Stream stream)
	{
		return null;
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xD09C60", Offset = "0xD09C60", VA = "0xD09C60")]
	public void Write(Stream stream)
	{
	}
}
[Token(Token = "0x2000058")]
internal static class BinaryWriterExtensions
{
	[Token(Token = "0x60001C7")]
	[Address(RVA = "0x102DCA8", Offset = "0x102DCA8", VA = "0x102DCA8")]
	public static void Write(this BinaryWriter writer, OvrAvatarDriver.PoseFrame frame)
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0x102DDBC", Offset = "0x102DDBC", VA = "0x102DDBC")]
	public static void Write(this BinaryWriter writer, Vector3 vec3)
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0x102DF68", Offset = "0x102DF68", VA = "0x102DF68")]
	public static void Write(this BinaryWriter writer, Vector2 vec2)
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0x102DE2C", Offset = "0x102DE2C", VA = "0x102DE2C")]
	public static void Write(this BinaryWriter writer, Quaternion quat)
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0x102DEC0", Offset = "0x102DEC0", VA = "0x102DEC0")]
	public static void Write(this BinaryWriter writer, OvrAvatarDriver.ControllerPose pose)
	{
	}
}
[Token(Token = "0x2000059")]
internal static class BinaryReaderExtensions
{
	[Token(Token = "0x60001CC")]
	[Address(RVA = "0x102D8A8", Offset = "0x102D8A8", VA = "0x102D8A8")]
	public static OvrAvatarDriver.PoseFrame ReadPoseFrame(this BinaryReader reader)
	{
		return default(OvrAvatarDriver.PoseFrame);
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x102DC4C", Offset = "0x102DC4C", VA = "0x102DC4C")]
	public static Vector2 ReadVector2(this BinaryReader reader)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x102DA48", Offset = "0x102DA48", VA = "0x102DA48")]
	public static Vector3 ReadVector3(this BinaryReader reader)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x102DAC0", Offset = "0x102DAC0", VA = "0x102DAC0")]
	public static Quaternion ReadQuaternion(this BinaryReader reader)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x102DB5C", Offset = "0x102DB5C", VA = "0x102DB5C")]
	public static OvrAvatarDriver.ControllerPose ReadControllerPose(this BinaryReader reader)
	{
		return default(OvrAvatarDriver.ControllerPose);
	}
}
[Token(Token = "0x200005A")]
public class OvrAvatarRemoteDriver : OvrAvatarDriver
{
	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Queue<OvrAvatarPacket> packetQueue;

	[Token(Token = "0x4000251")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private IntPtr CurrentSDKPacket;

	[Token(Token = "0x4000252")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float CurrentPacketTime;

	[Token(Token = "0x4000253")]
	private const int MinPacketQueue = 1;

	[Token(Token = "0x4000254")]
	private const int MaxPacketQueue = 4;

	[Token(Token = "0x4000255")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private int CurrentSequence;

	[Token(Token = "0x4000256")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private bool isStreaming;

	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private OvrAvatarPacket currentPacket;

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xD09E88", Offset = "0xD09E88", VA = "0xD09E88")]
	public void QueuePacket(int sequence, OvrAvatarPacket packet)
	{
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xD09F10", Offset = "0xD09F10", VA = "0xD09F10", Slot = "4")]
	public override void UpdateTransforms(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xD09F2C", Offset = "0xD09F2C", VA = "0xD09F2C")]
	private void UpdateFromSDKPacket(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xD0A0D0", Offset = "0xD0A0D0", VA = "0xD0A0D0")]
	private void UpdateFromUnityPacket(IntPtr sdkAvatar)
	{
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xD0A2BC", Offset = "0xD0A2BC", VA = "0xD0A2BC")]
	public OvrAvatarRemoteDriver()
	{
	}
}
[Token(Token = "0x200005B")]
public class OvrAvatarRenderComponent : MonoBehaviour
{
	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool firstSkinnedUpdate;

	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SkinnedMeshRenderer mesh;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] bones;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isBodyComponent;

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xD0A360", Offset = "0xD0A360", VA = "0xD0A360")]
	protected void UpdateActive(OvrAvatar avatar, ovrAvatarVisibilityFlags mask)
	{
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xD0A444", Offset = "0xD0A444", VA = "0xD0A444")]
	protected SkinnedMeshRenderer CreateSkinnedMesh(ulong assetID, ovrAvatarVisibilityFlags visibilityMask, int thirdPersonLayer, int firstPersonLayer)
	{
		return null;
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xD0A638", Offset = "0xD0A638", VA = "0xD0A638")]
	protected void UpdateSkinnedMesh(OvrAvatar avatar, Transform[] bones, ovrAvatarTransform localTransform, ovrAvatarVisibilityFlags visibilityMask, IntPtr renderPart)
	{
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xD0A9F8", Offset = "0xD0A9F8", VA = "0xD0A9F8")]
	protected Material CreateAvatarMaterial(string name, Shader shader)
	{
		return null;
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xD0AB04", Offset = "0xD0AB04", VA = "0xD0AB04")]
	public OvrAvatarRenderComponent()
	{
	}
}
[Token(Token = "0x200005C")]
[Flags]
public enum ovrAvatarCapabilities
{
	[Token(Token = "0x400025D")]
	Body = 1,
	[Token(Token = "0x400025E")]
	Hands = 2,
	[Token(Token = "0x400025F")]
	Base = 4,
	[Token(Token = "0x4000260")]
	BodyTilt = 0x10,
	[Token(Token = "0x4000261")]
	Expressive = 0x20,
	[Token(Token = "0x4000262")]
	All = -1
}
[Token(Token = "0x200005D")]
public enum ovrAvatarMessageType
{
	[Token(Token = "0x4000264")]
	AvatarSpecification,
	[Token(Token = "0x4000265")]
	AssetLoaded,
	[Token(Token = "0x4000266")]
	Count
}
[Token(Token = "0x200005E")]
public struct ovrAvatarMessage_AvatarSpecification
{
	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public IntPtr avatarSpec;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ulong oculusUserID;
}
[Token(Token = "0x200005F")]
public struct ovrAvatarMessage_AssetLoaded
{
	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ulong assetID;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr asset;
}
[Token(Token = "0x2000060")]
public enum ovrAvatarAssetType
{
	[Token(Token = "0x400026C")]
	Mesh,
	[Token(Token = "0x400026D")]
	Texture,
	[Token(Token = "0x400026E")]
	Pose,
	[Token(Token = "0x400026F")]
	Material,
	[Token(Token = "0x4000270")]
	CombinedMesh,
	[Token(Token = "0x4000271")]
	PBSMaterial,
	[Token(Token = "0x4000272")]
	FailedLoad,
	[Token(Token = "0x4000273")]
	Count
}
[Token(Token = "0x2000061")]
public struct ovrAvatarMeshVertex
{
	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tw;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float u;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float v;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public byte[] blendIndices;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float[] blendWeights;
}
[Token(Token = "0x2000062")]
public struct ovrAvatarMeshVertexV2
{
	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float tw;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float u;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float v;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float r;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float g;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float b;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float a;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public byte[] blendIndices;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float[] blendWeights;
}
[Token(Token = "0x2000063")]
public struct ovrAvatarBlendVertex
{
	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float x;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float y;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float z;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float nx;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float ny;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float nz;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float tx;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ty;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float tz;
}
[Token(Token = "0x2000064")]
public struct ovrAvatarMeshAssetData
{
	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint vertexCount;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr vertexBuffer;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public uint indexCount;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr indexBuffer;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ovrAvatarSkinnedMeshPose skinnedBindPose;
}
[Token(Token = "0x2000065")]
public struct ovrAvatarMeshAssetDataV2
{
	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint vertexCount;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public IntPtr vertexBuffer;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public uint indexCount;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr indexBuffer;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ovrAvatarSkinnedMeshPose skinnedBindPose;
}
[Token(Token = "0x2000066")]
public enum ovrAvatarTextureFormat
{
	[Token(Token = "0x40002A8")]
	RGB24,
	[Token(Token = "0x40002A9")]
	DXT1,
	[Token(Token = "0x40002AA")]
	DXT5,
	[Token(Token = "0x40002AB")]
	ASTC_RGB_6x6,
	[Token(Token = "0x40002AC")]
	ASTC_RGB_6x6_MIPMAPS,
	[Token(Token = "0x40002AD")]
	Count
}
[Token(Token = "0x2000067")]
public struct ovrAvatarTextureAssetData
{
	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTextureFormat format;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint sizeX;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public uint sizeY;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public uint mipCount;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong textureDataSize;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr textureData;
}
[Token(Token = "0x2000068")]
public enum ovrAvatarRenderPartType
{
	[Token(Token = "0x40002B5")]
	SkinnedMeshRender,
	[Token(Token = "0x40002B6")]
	SkinnedMeshRenderPBS,
	[Token(Token = "0x40002B7")]
	ProjectorRender,
	[Token(Token = "0x40002B8")]
	SkinnedMeshRenderPBS_V2,
	[Token(Token = "0x40002B9")]
	Count
}
[Token(Token = "0x2000069")]
public enum ovrAvatarLogLevel
{
	[Token(Token = "0x40002BB")]
	Unknown,
	[Token(Token = "0x40002BC")]
	Default,
	[Token(Token = "0x40002BD")]
	Verbose,
	[Token(Token = "0x40002BE")]
	Debug,
	[Token(Token = "0x40002BF")]
	Info,
	[Token(Token = "0x40002C0")]
	Warn,
	[Token(Token = "0x40002C1")]
	Error,
	[Token(Token = "0x40002C2")]
	Fatal,
	[Token(Token = "0x40002C3")]
	Silent
}
[Token(Token = "0x200006A")]
public struct ovrAvatarTransform
{
	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 position;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Quaternion orientation;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 scale;
}
[Token(Token = "0x200006B")]
[Flags]
public enum ovrAvatarButton
{
	[Token(Token = "0x40002C8")]
	One = 1,
	[Token(Token = "0x40002C9")]
	Two = 2,
	[Token(Token = "0x40002CA")]
	Three = 4,
	[Token(Token = "0x40002CB")]
	Joystick = 8
}
[Token(Token = "0x200006C")]
[Flags]
public enum ovrAvatarTouch
{
	[Token(Token = "0x40002CD")]
	One = 1,
	[Token(Token = "0x40002CE")]
	Two = 2,
	[Token(Token = "0x40002CF")]
	Joystick = 4,
	[Token(Token = "0x40002D0")]
	ThumbRest = 8,
	[Token(Token = "0x40002D1")]
	Index = 0x10,
	[Token(Token = "0x40002D2")]
	Pointing = 0x40,
	[Token(Token = "0x40002D3")]
	ThumbUp = 0x80
}
[Token(Token = "0x200006D")]
public struct ovrAvatarHandInputState
{
	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarButton buttonMask;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public ovrAvatarTouch touchMask;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float joystickX;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float joystickY;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float indexTrigger;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float handTrigger;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool isActive;
}
[Token(Token = "0x200006E")]
public struct ovrAvatarComponent
{
	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uint renderPartCount;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IntPtr renderParts;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string name;
}
[Token(Token = "0x200006F")]
internal struct ovrAvatarComponent_Offsets
{
	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long transform;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int renderPartCount;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static int renderParts;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static int name;
}
[Token(Token = "0x2000070")]
public struct ovrAvatarBaseComponent
{
	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 basePosition;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IntPtr renderComponent;
}
[Token(Token = "0x2000071")]
public struct ovrAvatarBodyComponent
{
	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform leftEyeTransform;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarTransform rightEyeTransform;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ovrAvatarTransform centerEyeTransform;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public IntPtr renderComponent;
}
[Token(Token = "0x2000072")]
public struct ovrAvatarBodyComponent_Offsets
{
	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long leftEyeTransform;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long rightEyeTransform;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long centerEyeTransform;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static long renderComponent;
}
[Token(Token = "0x2000073")]
public struct ovrAvatarControllerComponent
{
	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarHandInputState inputState;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IntPtr renderComponent;
}
[Token(Token = "0x2000074")]
public struct ovrAvatarHandComponent
{
	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarHandInputState inputState;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public IntPtr renderComponent;
}
[Token(Token = "0x2000075")]
public enum ovrAvatarMaterialLayerBlendMode
{
	[Token(Token = "0x40002F3")]
	Add,
	[Token(Token = "0x40002F4")]
	Multiply,
	[Token(Token = "0x40002F5")]
	Count
}
[Token(Token = "0x2000076")]
public enum ovrAvatarMaterialLayerSampleMode
{
	[Token(Token = "0x40002F7")]
	Color,
	[Token(Token = "0x40002F8")]
	Texture,
	[Token(Token = "0x40002F9")]
	TextureSingleChannel,
	[Token(Token = "0x40002FA")]
	Parallax,
	[Token(Token = "0x40002FB")]
	Count
}
[Token(Token = "0x2000077")]
public enum ovrAvatarMaterialMaskType
{
	[Token(Token = "0x40002FD")]
	None,
	[Token(Token = "0x40002FE")]
	Positional,
	[Token(Token = "0x40002FF")]
	ViewReflection,
	[Token(Token = "0x4000300")]
	Fresnel,
	[Token(Token = "0x4000301")]
	Pulse,
	[Token(Token = "0x4000302")]
	Count
}
[Token(Token = "0x2000078")]
public enum ovrAvatarControllerType
{
	[Token(Token = "0x4000304")]
	Touch,
	[Token(Token = "0x4000305")]
	Malibu,
	[Token(Token = "0x4000306")]
	Go,
	[Token(Token = "0x4000307")]
	Quest,
	[Token(Token = "0x4000308")]
	Count
}
[Token(Token = "0x2000079")]
public enum ovrAvatarAssetLevelOfDetail
{
	[Token(Token = "0x400030A")]
	Lowest = 1,
	[Token(Token = "0x400030B")]
	Medium = 3,
	[Token(Token = "0x400030C")]
	Highest = 5
}
[Token(Token = "0x200007A")]
public enum ovrAvatarLookAndFeelVersion
{
	[Token(Token = "0x400030E")]
	Unknown = -1,
	[Token(Token = "0x400030F")]
	One,
	[Token(Token = "0x4000310")]
	Two
}
[Token(Token = "0x200007B")]
public struct ovrAvatarMaterialLayerState
{
	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarMaterialLayerBlendMode blendMode;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ovrAvatarMaterialLayerSampleMode sampleMode;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarMaterialMaskType maskType;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector4 layerColor;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector4 sampleParameters;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong sampleTexture;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector4 sampleScaleOffset;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector4 maskParameters;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 maskAxis;

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0x9D39FC", Offset = "0x9D39FC", VA = "0x9D39FC")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0x9D3A2C", Offset = "0x9D3A2C", VA = "0x9D3A2C", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0x9D3C48", Offset = "0x9D3C48", VA = "0x9D3C48", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x200007C")]
public struct ovrAvatarMaterialState
{
	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 baseColor;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ovrAvatarMaterialMaskType baseMaskType;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector4 baseMaskParameters;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector4 baseMaskAxis;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public ovrAvatarMaterialLayerSampleMode sampleMode;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong alphaMaskTextureID;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector4 alphaMaskScaleOffset;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ulong normalMapTextureID;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 normalMapScaleOffset;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ulong parallaxMapTextureID;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Vector4 parallaxMapScaleOffset;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ulong roughnessMapTextureID;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Vector4 roughnessMapScaleOffset;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public uint layerCount;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public ovrAvatarMaterialLayerState[] layers;

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0x9D3D2C", Offset = "0x9D3D2C", VA = "0x9D3D2C")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0x9D3D5C", Offset = "0x9D3D5C", VA = "0x9D3D5C", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0x9D40F8", Offset = "0x9D40F8", VA = "0x9D40F8", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x200007D")]
public struct ovrAvatarExpressiveParameters
{
	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 irisColor;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector4 scleraColor;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector4 lashColor;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector4 browColor;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector4 lipColor;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector4 teethColor;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector4 gumColor;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float browLashIntensity;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float lipSmoothness;

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0x9D2F8C", Offset = "0x9D2F8C", VA = "0x9D2F8C")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0x9D2FBC", Offset = "0x9D2FBC", VA = "0x9D2FBC", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0x9D324C", Offset = "0x9D324C", VA = "0x9D324C", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x200007E")]
public struct ovrAvatarPBSMaterialState
{
	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector4 baseColor;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ulong albedoTextureID;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector4 albedoMultiplier;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ulong metallicnessTextureID;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float glossinessScale;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong normalTextureID;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ulong heightTextureID;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ulong occlusionTextureID;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public ulong emissionTextureID;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector4 emissionMultiplier;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ulong detailMaskTextureID;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ulong detailAlbedoTextureID;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ulong detailNormalTextureID;

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0x9D4260", Offset = "0x9D4260", VA = "0x9D4260")]
	private static bool VectorEquals(Vector4 a, Vector4 b)
	{
		return default(bool);
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0x9D4290", Offset = "0x9D4290", VA = "0x9D4290", Slot = "0")]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0x9D4480", Offset = "0x9D4480", VA = "0x9D4480", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Token(Token = "0x200007F")]
public class OvrAvatarAssetMaterial : OvrAvatarAsset
{
	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ovrAvatarMaterialState material;

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xD009D0", Offset = "0xD009D0", VA = "0xD009D0")]
	public OvrAvatarAssetMaterial(ulong id, IntPtr mat)
	{
	}
}
[Token(Token = "0x2000080")]
public struct ovrAvatarSkinnedMeshPose
{
	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint jointCount;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarTransform[] jointTransform;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int[] jointParents;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr[] jointNames;
}
[Token(Token = "0x2000081")]
[Flags]
public enum ovrAvatarVisibilityFlags
{
	[Token(Token = "0x4000345")]
	FirstPerson = 1,
	[Token(Token = "0x4000346")]
	ThirdPerson = 2,
	[Token(Token = "0x4000347")]
	SelfOccluding = 4
}
[Token(Token = "0x2000082")]
public struct ovrAvatarRenderPart_SkinnedMeshRender
{
	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarMaterialState materialState;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x2000083")]
public struct ovrAvatarRenderPart_SkinnedMeshRenderPBS
{
	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ulong albedoTextureAssetID;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ulong surfaceTextureAssetID;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x2000084")]
public struct ovrAvatarRenderPart_ProjectorRender
{
	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public uint componentIndex;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public uint renderPartIndex;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ovrAvatarMaterialState materialState;
}
[Token(Token = "0x2000085")]
public struct ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2
{
	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform localTransform;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarVisibilityFlags visibilityMask;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ulong meshAssetID;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ovrAvatarPBSMaterialState materialState;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public ovrAvatarSkinnedMeshPose skinnedPose;
}
[Token(Token = "0x2000086")]
public enum ovrAvatarHandGesture
{
	[Token(Token = "0x400035D")]
	Default,
	[Token(Token = "0x400035E")]
	GripSphere,
	[Token(Token = "0x400035F")]
	GripCube,
	[Token(Token = "0x4000360")]
	Count
}
[Token(Token = "0x2000087")]
public enum ovrAvatarBodyPartType
{
	[Token(Token = "0x4000362")]
	Body,
	[Token(Token = "0x4000363")]
	Clothing,
	[Token(Token = "0x4000364")]
	Eyewear,
	[Token(Token = "0x4000365")]
	Hair,
	[Token(Token = "0x4000366")]
	Beard,
	[Token(Token = "0x4000367")]
	Count
}
[Token(Token = "0x2000088")]
public struct ovrAvatarBlendShapeParams
{
	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint blendShapeParamCount;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] blendShapeParams;
}
[Token(Token = "0x2000089")]
internal struct ovrAvatarBlendShapeParams_Offsets
{
	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int blendShapeParamCount;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long blendShapeParams;
}
[Token(Token = "0x200008A")]
public struct ovrAvatarVisemes
{
	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint visemeParamCount;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] visemeParams;
}
[Token(Token = "0x200008B")]
internal struct ovrAvatarVisemes_Offsets
{
	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int visemeParamCount;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long visemeParams;
}
[Token(Token = "0x200008C")]
public enum ovrAvatarGazeTargetType
{
	[Token(Token = "0x4000371")]
	AvatarHead,
	[Token(Token = "0x4000372")]
	AvatarHand,
	[Token(Token = "0x4000373")]
	Object,
	[Token(Token = "0x4000374")]
	ObjectStatic,
	[Token(Token = "0x4000375")]
	Count
}
[Token(Token = "0x200008D")]
public struct ovrAvatarGazeTarget
{
	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint id;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public Vector3 worldPosition;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ovrAvatarGazeTargetType type;
}
[Token(Token = "0x200008E")]
internal struct ovrAvatarGazeTarget_Offsets
{
	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int id;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int worldPosition;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int type;
}
[Token(Token = "0x200008F")]
public struct ovrAvatarGazeTargets
{
	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint targetCount;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarGazeTarget[] targets;
}
[Token(Token = "0x2000090")]
internal struct ovrAvatarGazeTargets_Offsets
{
	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int targetCount;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long targets;
}
[Token(Token = "0x2000091")]
public enum ovrAvatarLightType
{
	[Token(Token = "0x4000381")]
	Point,
	[Token(Token = "0x4000382")]
	Direction,
	[Token(Token = "0x4000383")]
	Spot,
	[Token(Token = "0x4000384")]
	Count
}
[Token(Token = "0x2000092")]
public struct ovrAvatarLight
{
	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public uint id;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public ovrAvatarLightType type;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float intensity;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 worldDirection;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 worldPosition;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float range;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float spotAngleDeg;
}
[Token(Token = "0x2000093")]
internal struct ovrAvatarLight_Offsets
{
	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long id;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long type;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long intensity;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static long worldDirection;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static long worldPosition;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static long range;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static long spotAngleDeg;
}
[Token(Token = "0x2000094")]
public struct ovrAvatarLights
{
	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public float ambientIntensity;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public uint lightCount;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public ovrAvatarLight[] lights;
}
[Token(Token = "0x2000095")]
internal struct ovrAvatarLights_Offsets
{
	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static long ambientIntensity;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static long lightCount;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static long lights;
}
[Token(Token = "0x2000096")]
[Flags]
public enum ovrAvatarDebugContext : uint
{
	[Token(Token = "0x400039A")]
	None = 0u,
	[Token(Token = "0x400039B")]
	GazeTarget = 1u,
	[Token(Token = "0x400039C")]
	Any = uint.MaxValue
}
[Token(Token = "0x2000097")]
public struct ovrAvatarDebugLine
{
	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 startPoint;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 endPoint;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 color;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public ovrAvatarDebugContext context;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public IntPtr text;
}
[Token(Token = "0x2000098")]
public struct ovrAvatarDebugTransform
{
	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ovrAvatarTransform transform;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ovrAvatarDebugContext context;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IntPtr text;
}
[Token(Token = "0x2000099")]
public delegate void specificationCallback(IntPtr specification);
[Token(Token = "0x200009A")]
public delegate void assetLoadedCallback(OvrAvatarAsset asset);
[Token(Token = "0x200009B")]
public delegate void combinedMeshLoadedCallback(IntPtr asset);
[Token(Token = "0x200009C")]
public class OvrAvatarSDKManager : MonoBehaviour
{
	[Token(Token = "0x200009D")]
	public struct AvatarSpecRequestParams
	{
		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong _userId;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public specificationCallback _callback;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool _useCombinedMesh;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ovrAvatarAssetLevelOfDetail _lod;

		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool _forceMobileTextureFormat;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ovrAvatarLookAndFeelVersion _lookVersion;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ovrAvatarLookAndFeelVersion _fallbackVersion;

		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool _enableExpressive;

		[Token(Token = "0x600020D")]
		[Address(RVA = "0x9E1838", Offset = "0x9E1838", VA = "0x9E1838")]
		public AvatarSpecRequestParams(ulong userId, specificationCallback callback, bool useCombinedMesh, ovrAvatarAssetLevelOfDetail lod, bool forceMobileTextureFormat, ovrAvatarLookAndFeelVersion lookVersion, ovrAvatarLookAndFeelVersion fallbackVersion, bool enableExpressive)
		{
		}
	}

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OvrAvatarSDKManager _instance;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool initialized;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<ulong, HashSet<specificationCallback>> specificationCallbacks;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<ulong, HashSet<assetLoadedCallback>> assetLoadedCallbacks;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<IntPtr, combinedMeshLoadedCallback> combinedMeshLoadedCallbacks;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<ulong, OvrAvatarAsset> assetCache;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OvrAvatarTextureCopyManager textureCopyManager;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ovrAvatarLogLevel LoggingLevel;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Queue<AvatarSpecRequestParams> avatarSpecificationQueue;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<int> loadingAvatars;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool avatarSpecRequestAvailable;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float lastDispatchedAvatarSpecRequestTime;

	[Token(Token = "0x40003B1")]
	private const float AVATAR_SPEC_REQUEST_TIMEOUT = 5f;

	[Token(Token = "0x17000013")]
	public static OvrAvatarSDKManager Instance
	{
		[Token(Token = "0x60001FC")]
		[Address(RVA = "0xD03FA0", Offset = "0xD03FA0", VA = "0xD03FA0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xD0AB14", Offset = "0xD0AB14", VA = "0xD0AB14")]
	private bool Initialize()
	{
		return default(bool);
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0xD0AE64", Offset = "0xD0AE64", VA = "0xD0AE64")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0xD0AED4", Offset = "0xD0AED4", VA = "0xD0AED4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0xD0B8A4", Offset = "0xD0B8A4", VA = "0xD0B8A4")]
	public bool IsAvatarSpecWaiting()
	{
		return default(bool);
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0xD0B8F8", Offset = "0xD0B8F8", VA = "0xD0B8F8")]
	public bool IsAvatarLoading()
	{
		return default(bool);
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0xD0B94C", Offset = "0xD0B94C", VA = "0xD0B94C")]
	public void AddLoadingAvatar(int gameobjectID)
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0xD0B9B0", Offset = "0xD0B9B0", VA = "0xD0B9B0")]
	public void RemoveLoadingAvatar(int gameobjectID)
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0xD0BA14", Offset = "0xD0BA14", VA = "0xD0BA14")]
	public void RequestAvatarSpecification(AvatarSpecRequestParams avatarSpecRequest)
	{
	}

	[Token(Token = "0x6000205")]
	[Address(RVA = "0xD0B6A4", Offset = "0xD0B6A4", VA = "0xD0B6A4")]
	private void DispatchAvatarSpecificationRequest(AvatarSpecRequestParams avatarSpecRequest)
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0xD0BAF0", Offset = "0xD0BAF0", VA = "0xD0BAF0")]
	public void BeginLoadingAsset(ulong assetId, ovrAvatarAssetLevelOfDetail lod, assetLoadedCallback callback)
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xD0BC44", Offset = "0xD0BC44", VA = "0xD0BC44")]
	public void RegisterCombinedMeshCallback(IntPtr sdkAvatar, combinedMeshLoadedCallback callback)
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xD04198", Offset = "0xD04198", VA = "0xD04198")]
	public OvrAvatarAsset GetAsset(ulong assetId)
	{
		return null;
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xD0BD38", Offset = "0xD0BD38", VA = "0xD0BD38")]
	public void DeleteAssetFromCache(ulong assetId)
	{
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0xD0AE18", Offset = "0xD0AE18", VA = "0xD0AE18")]
	public string GetAppId()
	{
		return null;
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0xD07168", Offset = "0xD07168", VA = "0xD07168")]
	public OvrAvatarTextureCopyManager GetTextureCopyManager()
	{
		return null;
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0xD0BE18", Offset = "0xD0BE18", VA = "0xD0BE18")]
	public OvrAvatarSDKManager()
	{
	}
}
[Token(Token = "0x200009E")]
public sealed class OvrAvatarSettings : ScriptableObject
{
	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OvrAvatarSettings instance;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string ovrAppID;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private string ovrGearAppID;

	[Token(Token = "0x17000014")]
	public static string AppID
	{
		[Token(Token = "0x600020E")]
		[Address(RVA = "0xD0BDD8", Offset = "0xD0BDD8", VA = "0xD0BDD8")]
		get
		{
			return null;
		}
		[Token(Token = "0x600020F")]
		[Address(RVA = "0xD0BF88", Offset = "0xD0BF88", VA = "0xD0BF88")]
		set
		{
		}
	}

	[Token(Token = "0x17000015")]
	public static string MobileAppID
	{
		[Token(Token = "0x6000210")]
		[Address(RVA = "0xD0BDF8", Offset = "0xD0BDF8", VA = "0xD0BDF8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000211")]
		[Address(RVA = "0xD0BFB8", Offset = "0xD0BFB8", VA = "0xD0BFB8")]
		set
		{
		}
	}

	[Token(Token = "0x17000016")]
	public static OvrAvatarSettings Instance
	{
		[Token(Token = "0x6000212")]
		[Address(RVA = "0xD0BE30", Offset = "0xD0BE30", VA = "0xD0BE30")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000213")]
		[Address(RVA = "0xD0BFE8", Offset = "0xD0BFE8", VA = "0xD0BFE8")]
		set
		{
		}
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0xD0C03C", Offset = "0xD0C03C", VA = "0xD0C03C")]
	public OvrAvatarSettings()
	{
	}
}
[Token(Token = "0x200009F")]
public class OvrAvatarSkinnedMeshRenderComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Shader surface;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Shader surfaceSelfOccluding;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool previouslyActive;

	[Token(Token = "0x6000215")]
	[Address(RVA = "0xD0D93C", Offset = "0xD0D93C", VA = "0xD0D93C")]
	internal void Initialize(ovrAvatarRenderPart_SkinnedMeshRender skinnedMeshRender, Shader surface, Shader surfaceSelfOccluding, int thirdPersonLayer, int firstPersonLayer)
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0xD030B4", Offset = "0xD030B4", VA = "0xD030B4")]
	public void UpdateSkinnedMeshRender(OvrAvatarComponent component, OvrAvatar avatar, IntPtr renderPart)
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0xD0DAC8", Offset = "0xD0DAC8", VA = "0xD0DAC8")]
	private void UpdateMeshMaterial(ovrAvatarVisibilityFlags visibilityMask, SkinnedMeshRenderer rootMesh)
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xD0DC30", Offset = "0xD0DC30", VA = "0xD0DC30")]
	public OvrAvatarSkinnedMeshRenderComponent()
	{
	}
}
[Token(Token = "0x20000A0")]
public class OvrAvatarSkinnedMeshRenderPBSComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool isMaterialInitilized;

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xD0DC40", Offset = "0xD0DC40", VA = "0xD0DC40")]
	internal void Initialize(ovrAvatarRenderPart_SkinnedMeshRenderPBS skinnedMeshRenderPBS, Shader shader, int thirdPersonLayer, int firstPersonLayer)
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xD032F0", Offset = "0xD032F0", VA = "0xD032F0")]
	internal void UpdateSkinnedMeshRenderPBS(OvrAvatar avatar, IntPtr renderPart, Material mat)
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xD0DD9C", Offset = "0xD0DD9C", VA = "0xD0DD9C")]
	public OvrAvatarSkinnedMeshRenderPBSComponent()
	{
	}
}
[Token(Token = "0x20000A1")]
public class OvrAvatarSkinnedMeshPBSV2RenderComponent : OvrAvatarRenderComponent
{
	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OvrAvatarMaterialManager avatarMaterialManager;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool previouslyActive;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool isCombinedMaterial;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private ovrAvatarExpressiveParameters ExpressiveParameters;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool EnableExpressive;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int blendShapeCount;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private ovrAvatarBlendShapeParams blendShapeParams;

	[Token(Token = "0x40003C8")]
	private const string MAIN_MATERIAL_NAME = "main_material";

	[Token(Token = "0x40003C9")]
	private const string EYE_MATERIAL_NAME = "eye_material";

	[Token(Token = "0x40003CA")]
	private const string DEFAULT_MATERIAL_NAME = "_material";

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xD0C0A8", Offset = "0xD0C0A8", VA = "0xD0C0A8")]
	internal void Initialize(IntPtr renderPart, ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 skinnedMeshRender, OvrAvatarMaterialManager materialManager, int thirdPersonLayer, int firstPersonLayer, bool combinedMesh, ovrAvatarAssetLevelOfDetail lod, bool assignExpressiveParams, OvrAvatar avatar, bool isControllerModel)
	{
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xD034C0", Offset = "0xD034C0", VA = "0xD034C0")]
	public void UpdateSkinnedMeshRender(OvrAvatarComponent component, OvrAvatar avatar, IntPtr renderPart)
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xD0D0C0", Offset = "0xD0D0C0", VA = "0xD0D0C0")]
	private void InitializeSingleComponentMaterial(IntPtr renderPart, int lodIndex)
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xD0C7D8", Offset = "0xD0C7D8", VA = "0xD0C7D8")]
	private void InitializeCombinedMaterial(IntPtr renderPart, int lodIndex)
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xD0C4FC", Offset = "0xD0C4FC", VA = "0xD0C4FC")]
	private void SetMaterialTransparent(Material mat)
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xD0C660", Offset = "0xD0C660", VA = "0xD0C660")]
	private void SetMaterialOpaque(Material mat)
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xD0D92C", Offset = "0xD0D92C", VA = "0xD0D92C")]
	public OvrAvatarSkinnedMeshPBSV2RenderComponent()
	{
	}
}
[Token(Token = "0x20000A2")]
public class OvrAvatarTextureCopyManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20000A3")]
	public struct FallbackTextureSet
	{
		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool Initialized;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture2D DiffuseRoughness;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture2D Normal;
	}

	[Token(Token = "0x20000A4")]
	private struct CopyTextureParams
	{
		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Texture Src;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Texture Dst;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Mip;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int SrcSize;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int DstElement;

		[Token(Token = "0x600022D")]
		[Address(RVA = "0x9E1F34", Offset = "0x9E1F34", VA = "0x9E1F34")]
		public CopyTextureParams(Texture src, Texture dst, int mip, int srcSize, int dstElement)
		{
		}
	}

	[Token(Token = "0x20000A5")]
	public struct TextureSet
	{
		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Dictionary<ulong, bool> TextureIDSingleMeshPair;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool IsProcessed;

		[Token(Token = "0x600022E")]
		[Address(RVA = "0x9E1F90", Offset = "0x9E1F90", VA = "0x9E1F90")]
		public TextureSet(Dictionary<ulong, bool> textureIDSingleMeshPair, bool isProcessed)
		{
		}
	}

	[Token(Token = "0x20000A6")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728290", Offset = "0x728290")]
	private sealed class <DeleteTextureSetCoroutine>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextureSet textureSetToDelete;

		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public OvrAvatarTextureCopyManager <>4__this;

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int gameobjectID;

		[Token(Token = "0x17000017")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000232")]
			[Address(RVA = "0x9E1EE4", Offset = "0x9E1EE4", VA = "0x9E1EE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000018")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000234")]
			[Address(RVA = "0x9E1F2C", Offset = "0x9E1F2C", VA = "0x9E1F2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600022F")]
		[Address(RVA = "0x9E18B4", Offset = "0x9E18B4", VA = "0x9E18B4")]
		[DebuggerHidden]
		public <DeleteTextureSetCoroutine>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x6000230")]
		[Address(RVA = "0x9E18E0", Offset = "0x9E18E0", VA = "0x9E18E0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000231")]
		[Address(RVA = "0x9E18E4", Offset = "0x9E18E4", VA = "0x9E18E4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000233")]
		[Address(RVA = "0x9E1EEC", Offset = "0x9E1EEC", VA = "0x9E1EEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FallbackTextureSet[] FallbackTextureSets;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Queue<CopyTextureParams> texturesToCopy;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<int, TextureSet> textureSets;

	[Token(Token = "0x40003CE")]
	private const int TEXTURES_TO_COPY_QUEUE_CAPACITY = 256;

	[Token(Token = "0x40003CF")]
	private const int COPIES_PER_FRAME = 8;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly string[] FALLBACK_TEXTURE_PATHS_DIFFUSE_ROUGHNESS;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly string[] FALLBACK_TEXTURE_PATHS_NORMAL;

	[Token(Token = "0x40003D2")]
	private const string PATH_HIGHEST_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_2048";

	[Token(Token = "0x40003D3")]
	private const string PATH_MEDIUM_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_1024";

	[Token(Token = "0x40003D4")]
	private const string PATH_LOWEST_DIFFUSE_ROUGHNESS = "FallbackTextures/fallback_diffuse_roughness_256";

	[Token(Token = "0x40003D5")]
	private const string PATH_HIGHEST_NORMAL = "FallbackTextures/fallback_normal_2048";

	[Token(Token = "0x40003D6")]
	private const string PATH_MEDIUM_NORMAL = "FallbackTextures/fallback_normal_1024";

	[Token(Token = "0x40003D7")]
	private const string PATH_LOWEST_NORMAL = "FallbackTextures/fallback_normal_256";

	[Token(Token = "0x40003D8")]
	private const int GPU_TEXTURE_COPY_WAIT_TIME = 10;

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xD0E4C8", Offset = "0xD0E4C8", VA = "0xD0E4C8")]
	public OvrAvatarTextureCopyManager()
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xD0E9A8", Offset = "0xD0E9A8", VA = "0xD0E9A8")]
	public void Update()
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xD0EBA8", Offset = "0xD0EBA8", VA = "0xD0EBA8")]
	public int GetTextureCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xD075C0", Offset = "0xD075C0", VA = "0xD075C0")]
	public void CopyTexture(Texture src, Texture dst, int mipLevel, int mipSize, int dstElement, bool useQueue = true)
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xD0EB1C", Offset = "0xD0EB1C", VA = "0xD0EB1C")]
	private void CopyTexture(CopyTextureParams copyTextureParams)
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0xD071E8", Offset = "0xD071E8", VA = "0xD071E8")]
	public void AddTextureIDToTextureSet(int gameobjectID, ulong textureID, bool isSingleMesh)
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0xD07438", Offset = "0xD07438", VA = "0xD07438")]
	public void DeleteTextureSet(int gameobjectID)
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0xD0EBF4", Offset = "0xD0EBF4", VA = "0xD0EBF4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72DB90", Offset = "0x72DB90")]
	private IEnumerator DeleteTextureSetCoroutine(TextureSet textureSetToDelete, int gameobjectID)
	{
		return null;
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0xD0BAA4", Offset = "0xD0BAA4", VA = "0xD0BAA4")]
	public void CheckFallbackTextureSet(ovrAvatarAssetLevelOfDetail lod)
	{
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xD0ECA0", Offset = "0xD0ECA0", VA = "0xD0ECA0")]
	private void InitFallbackTextureSet(ovrAvatarAssetLevelOfDetail lod)
	{
	}
}
[Token(Token = "0x20000A7")]
public class OvrAvatarTouchController : OvrAvatarComponent
{
	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool isLeftHand;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ovrAvatarControllerComponent component;

	[Token(Token = "0x6000235")]
	[Address(RVA = "0xD0EE18", Offset = "0xD0EE18", VA = "0xD0EE18")]
	private void Update()
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0xD0EF88", Offset = "0xD0EF88", VA = "0xD0EF88")]
	public OvrAvatarTouchController()
	{
	}
}
[Token(Token = "0x20000A8")]
public class DebugUIBuilder : MonoBehaviour
{
	[Token(Token = "0x20000A9")]
	public delegate void OnClick();

	[Token(Token = "0x20000AA")]
	public delegate void OnToggleValueChange(Toggle t);

	[Token(Token = "0x20000AB")]
	public delegate void OnSlider(float f);

	[Token(Token = "0x20000AC")]
	public delegate bool ActiveUpdate();

	[Token(Token = "0x20000AD")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7282A0", Offset = "0x7282A0")]
	private sealed class <>c__DisplayClass36_0
	{
		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnClick handler;

		[Token(Token = "0x6000256")]
		[Address(RVA = "0x9D8164", Offset = "0x9D8164", VA = "0x9D8164")]
		public <>c__DisplayClass36_0()
		{
		}

		[Token(Token = "0x6000257")]
		[Address(RVA = "0x9D816C", Offset = "0x9D816C", VA = "0x9D816C")]
		internal void <AddButton>b__0()
		{
		}
	}

	[Token(Token = "0x20000AE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7282B0", Offset = "0x7282B0")]
	private sealed class <>c__DisplayClass38_0
	{
		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnSlider onValueChanged;

		[Token(Token = "0x6000258")]
		[Address(RVA = "0x9D8390", Offset = "0x9D8390", VA = "0x9D8390")]
		public <>c__DisplayClass38_0()
		{
		}

		[Token(Token = "0x6000259")]
		[Address(RVA = "0x9D8398", Offset = "0x9D8398", VA = "0x9D8398")]
		internal void <AddSlider>b__0(float f)
		{
		}
	}

	[Token(Token = "0x20000AF")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7282C0", Offset = "0x7282C0")]
	private sealed class <>c__DisplayClass40_0
	{
		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnToggleValueChange onValueChanged;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle t;

		[Token(Token = "0x600025A")]
		[Address(RVA = "0x9D85E4", Offset = "0x9D85E4", VA = "0x9D85E4")]
		public <>c__DisplayClass40_0()
		{
		}

		[Token(Token = "0x600025B")]
		[Address(RVA = "0x9D85EC", Offset = "0x9D85EC", VA = "0x9D85EC")]
		internal void <AddToggle>b__0(bool <p0>)
		{
		}
	}

	[Token(Token = "0x20000B0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7282D0", Offset = "0x7282D0")]
	private sealed class <>c__DisplayClass41_0
	{
		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnToggleValueChange onValueChanged;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle t;

		[Token(Token = "0x600025C")]
		[Address(RVA = "0x9D8980", Offset = "0x9D8980", VA = "0x9D8980")]
		public <>c__DisplayClass41_0()
		{
		}

		[Token(Token = "0x600025D")]
		[Address(RVA = "0x9D8988", Offset = "0x9D8988", VA = "0x9D8988")]
		internal void <AddToggle>b__0(bool <p0>)
		{
		}
	}

	[Token(Token = "0x20000B1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7282E0", Offset = "0x7282E0")]
	private sealed class <>c__DisplayClass42_0
	{
		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public OnToggleValueChange handler;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle tb;

		[Token(Token = "0x600025E")]
		[Address(RVA = "0x9D89A8", Offset = "0x9D89A8", VA = "0x9D89A8")]
		public <>c__DisplayClass42_0()
		{
		}

		[Token(Token = "0x600025F")]
		[Address(RVA = "0x9D89B0", Offset = "0x9D89B0", VA = "0x9D89B0")]
		internal void <AddRadio>b__0(bool <p0>)
		{
		}
	}

	[Token(Token = "0x40003EA")]
	public const int DEBUG_PANE_CENTER = 0;

	[Token(Token = "0x40003EB")]
	public const int DEBUG_PANE_RIGHT = 1;

	[Token(Token = "0x40003EC")]
	public const int DEBUG_PANE_LEFT = 2;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform buttonPrefab;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform labelPrefab;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RectTransform sliderPrefab;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private RectTransform dividerPrefab;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private RectTransform togglePrefab;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private RectTransform radioPrefab;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject uiHelpersToInstantiate;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform[] targetContentPanels;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool[] reEnable;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private List<GameObject> toEnable;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private List<GameObject> toDisable;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugUIBuilder instance;

	[Token(Token = "0x40003FA")]
	private const float elementSpacing = 16f;

	[Token(Token = "0x40003FB")]
	private const float marginH = 16f;

	[Token(Token = "0x40003FC")]
	private const float marginV = 16f;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector2[] insertPositions;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private List<RectTransform>[] insertedElements;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 menuOffset;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private OVRCameraRig rig;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Dictionary<string, ToggleGroup> radioGroups;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private LaserPointer lp;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private LineRenderer lr;

	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public LaserPointer.LaserBeamBehavior laserBeamBehavior;

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xE2BE1C", Offset = "0xE2BE1C", VA = "0xE2BE1C")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0xE2C34C", Offset = "0xE2C34C", VA = "0xE2C34C")]
	public void Show()
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0xE2C924", Offset = "0xE2C924", VA = "0xE2C924")]
	public void Hide()
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0xE2C704", Offset = "0xE2C704", VA = "0xE2C704")]
	private void Relayout()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xE2CAE0", Offset = "0xE2CAE0", VA = "0xE2CAE0")]
	private void AddRect(RectTransform r, int targetCanvas)
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xE2CE00", Offset = "0xE2CE00", VA = "0xE2CE00")]
	public RectTransform AddButton(string label, OnClick handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xE2D09C", Offset = "0xE2D09C", VA = "0xE2D09C")]
	public RectTransform AddLabel(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xE2D1A0", Offset = "0xE2D1A0", VA = "0xE2D1A0")]
	public RectTransform AddSlider(string label, float min, float max, OnSlider onValueChanged, bool wholeNumbersOnly = false, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xE2D384", Offset = "0xE2D384", VA = "0xE2D384")]
	public RectTransform AddDivider(int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xE2D428", Offset = "0xE2D428", VA = "0xE2D428")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xE2D618", Offset = "0xE2D618", VA = "0xE2D618")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, bool defaultValue, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xE2D820", Offset = "0xE2D820", VA = "0xE2D820")]
	public RectTransform AddRadio(string label, string group, OnToggleValueChange handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xE2DB24", Offset = "0xE2DB24", VA = "0xE2DB24")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xE2DC20", Offset = "0xE2DC20", VA = "0xE2DC20")]
	public void ToggleLaserPointer(bool isOn)
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xE2DCCC", Offset = "0xE2DCCC", VA = "0xE2DCCC")]
	public DebugUIBuilder()
	{
	}
}
[Token(Token = "0x20000B2")]
public class HandedInputSelector : MonoBehaviour
{
	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRCameraRig m_CameraRig;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRInputModule m_InputModule;

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xB12828", Offset = "0xB12828", VA = "0xB12828")]
	private void Start()
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xB128D8", Offset = "0xB128D8", VA = "0xB128D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xB12998", Offset = "0xB12998", VA = "0xB12998")]
	private void SetActiveController(OVRInput.Controller c)
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xB129D4", Offset = "0xB129D4", VA = "0xB129D4")]
	public HandedInputSelector()
	{
	}
}
[Token(Token = "0x20000B3")]
public class LaserPointer : OVRCursor
{
	[Token(Token = "0x20000B4")]
	public enum LaserBeamBehavior
	{
		[Token(Token = "0x4000419")]
		On,
		[Token(Token = "0x400041A")]
		Off,
		[Token(Token = "0x400041B")]
		OnWhenHitTarget
	}

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cursorVisual;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxLength;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private LaserBeamBehavior _laserBeamBehavior;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_restoreOnInputAcquired;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 _startPoint;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 _forward;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 _endPoint;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _hitTarget;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x17000019")]
	public LaserBeamBehavior laserBeamBehavior
	{
		[Token(Token = "0x6000265")]
		[Address(RVA = "0xB1B3AC", Offset = "0xB1B3AC", VA = "0xB1B3AC")]
		get
		{
			return default(LaserBeamBehavior);
		}
		[Token(Token = "0x6000264")]
		[Address(RVA = "0xB1B368", Offset = "0xB1B368", VA = "0xB1B368")]
		set
		{
		}
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xB1B3B4", Offset = "0xB1B3B4", VA = "0xB1B3B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xB1B410", Offset = "0xB1B410", VA = "0xB1B410")]
	private void Start()
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xB1B554", Offset = "0xB1B554", VA = "0xB1B554", Slot = "5")]
	public override void SetCursorStartDest(Vector3 start, Vector3 dest, Vector3 normal)
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xB1B570", Offset = "0xB1B570", VA = "0xB1B570", Slot = "4")]
	public override void SetCursorRay(Transform t)
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xB1B5C4", Offset = "0xB1B5C4", VA = "0xB1B5C4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xB1B780", Offset = "0xB1B780", VA = "0xB1B780")]
	private void UpdateLaserBeam(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xB1B894", Offset = "0xB1B894", VA = "0xB1B894")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xB1B924", Offset = "0xB1B924", VA = "0xB1B924")]
	public void OnInputFocusLost()
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0xB1B9F0", Offset = "0xB1B9F0", VA = "0xB1B9F0")]
	public void OnInputFocusAcquired()
	{
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0xB1BAA4", Offset = "0xB1BAA4", VA = "0xB1BAA4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xB1BB90", Offset = "0xB1BB90", VA = "0xB1BB90")]
	public LaserPointer()
	{
	}
}
[Token(Token = "0x20000B5")]
public class CharacterCameraConstraint : MonoBehaviour
{
	[Token(Token = "0x400041C")]
	private const float FADE_RAY_LENGTH = 0.25f;

	[Token(Token = "0x400041D")]
	private const float FADE_OVERLAP_MAXIMUM = 0.1f;

	[Token(Token = "0x400041E")]
	private const float FADE_AMOUNT_MAXIMUM = 1f;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729A70", Offset = "0x729A70")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729AA8", Offset = "0x729AA8")]
	public LayerMask CollideLayers;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729AE0", Offset = "0x729AE0")]
	public float HeightOffset;

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729B18", Offset = "0x729B18")]
	public float MinimumHeight;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729B50", Offset = "0x729B50")]
	public float MaximumHeight;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CapsuleCollider _character;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SimpleCapsuleWithStickMovement _simplePlayerController;

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xE25D0C", Offset = "0xE25D0C", VA = "0xE25D0C")]
	private CharacterCameraConstraint()
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xE25D14", Offset = "0xE25D14", VA = "0xE25D14")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xE25DA0", Offset = "0xE25DA0", VA = "0xE25DA0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0xE25E34", Offset = "0xE25E34", VA = "0xE25E34")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0xE25EC8", Offset = "0xE25EC8", VA = "0xE25EC8")]
	private void CameraUpdate()
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xE261F4", Offset = "0xE261F4", VA = "0xE261F4")]
	private bool CheckCameraOverlapped()
	{
		return default(bool);
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xE26424", Offset = "0xE26424", VA = "0xE26424")]
	private bool CheckCameraNearClipping(out float result)
	{
		return default(bool);
	}
}
[Token(Token = "0x20000B6")]
public class LocomotionController : MonoBehaviour
{
	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CapsuleCollider CharacterController;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimpleCapsuleWithStickMovement PlayerController;

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xB1E914", Offset = "0xB1E914", VA = "0xB1E914")]
	private void Start()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xB1E9E0", Offset = "0xB1E9E0", VA = "0xB1E9E0")]
	public LocomotionController()
	{
	}
}
[Token(Token = "0x20000B7")]
public class LocomotionTeleport : MonoBehaviour
{
	[Token(Token = "0x20000B8")]
	public enum States
	{
		[Token(Token = "0x400044C")]
		Ready,
		[Token(Token = "0x400044D")]
		Aim,
		[Token(Token = "0x400044E")]
		CancelAim,
		[Token(Token = "0x400044F")]
		PreTeleport,
		[Token(Token = "0x4000450")]
		CancelTeleport,
		[Token(Token = "0x4000451")]
		Teleporting,
		[Token(Token = "0x4000452")]
		PostTeleport
	}

	[Token(Token = "0x20000B9")]
	public enum TeleportIntentions
	{
		[Token(Token = "0x4000454")]
		None,
		[Token(Token = "0x4000455")]
		Aim,
		[Token(Token = "0x4000456")]
		PreTeleport,
		[Token(Token = "0x4000457")]
		Teleport
	}

	[Token(Token = "0x20000BA")]
	public enum AimCollisionTypes
	{
		[Token(Token = "0x4000459")]
		Point,
		[Token(Token = "0x400045A")]
		Sphere,
		[Token(Token = "0x400045B")]
		Capsule
	}

	[Token(Token = "0x20000BB")]
	public class AimData
	{
		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit TargetHitInfo;

		[Token(Token = "0x400045D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool TargetValid;

		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3? Destination;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float Radius;

		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x729F68", Offset = "0x729F68")]
		private List<Vector3> <Points>k__BackingField;

		[Token(Token = "0x1700001D")]
		public List<Vector3> Points
		{
			[Token(Token = "0x60002AF")]
			[Address(RVA = "0x9DE198", Offset = "0x9DE198", VA = "0x9DE198")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E0B8", Offset = "0x72E0B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002B0")]
			[Address(RVA = "0x9DE1A0", Offset = "0x9DE1A0", VA = "0x9DE1A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E0C8", Offset = "0x72E0C8")]
			private set
			{
			}
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0x9DE114", Offset = "0x9DE114", VA = "0x9DE114")]
		public AimData()
		{
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0x9DE1A8", Offset = "0x9DE1A8", VA = "0x9DE1A8")]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x20000BC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7282F0", Offset = "0x7282F0")]
	private sealed class <ReadyStateCoroutine>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700001E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002B5")]
			[Address(RVA = "0x9DDF60", Offset = "0x9DDF60", VA = "0x9DDF60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002B7")]
			[Address(RVA = "0x9DDFA8", Offset = "0x9DDFA8", VA = "0x9DDFA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0x9DDE24", Offset = "0x9DDE24", VA = "0x9DDE24")]
		[DebuggerHidden]
		public <ReadyStateCoroutine>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0x9DDE50", Offset = "0x9DDE50", VA = "0x9DDE50", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0x9DDE54", Offset = "0x9DDE54", VA = "0x9DDE54", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0x9DDF68", Offset = "0x9DDF68", VA = "0x9DDF68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000BD")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728300", Offset = "0x728300")]
	private sealed class <AimStateCoroutine>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000020")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002BB")]
			[Address(RVA = "0x9DD890", Offset = "0x9DD890", VA = "0x9DD890", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000021")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002BD")]
			[Address(RVA = "0x9DD8D8", Offset = "0x9DD8D8", VA = "0x9DD8D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0x9DD708", Offset = "0x9DD708", VA = "0x9DD708")]
		[DebuggerHidden]
		public <AimStateCoroutine>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0x9DD734", Offset = "0x9DD734", VA = "0x9DD734", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0x9DD738", Offset = "0x9DD738", VA = "0x9DD738", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002BC")]
		[Address(RVA = "0x9DD898", Offset = "0x9DD898", VA = "0x9DD898", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000BE")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728310", Offset = "0x728310")]
	private sealed class <CancelAimStateCoroutine>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000022")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002C1")]
			[Address(RVA = "0x9DD9BC", Offset = "0x9DD9BC", VA = "0x9DD9BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000023")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002C3")]
			[Address(RVA = "0x9DDA04", Offset = "0x9DDA04", VA = "0x9DDA04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002BE")]
		[Address(RVA = "0x9DD8E0", Offset = "0x9DD8E0", VA = "0x9DD8E0")]
		[DebuggerHidden]
		public <CancelAimStateCoroutine>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0x9DD90C", Offset = "0x9DD90C", VA = "0x9DD90C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0x9DD910", Offset = "0x9DD910", VA = "0x9DD910", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0x9DD9C4", Offset = "0x9DD9C4", VA = "0x9DD9C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000BF")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728320", Offset = "0x728320")]
	private sealed class <PreTeleportStateCoroutine>d__72 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000024")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002C7")]
			[Address(RVA = "0x9DDDD4", Offset = "0x9DDDD4", VA = "0x9DDDD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000025")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002C9")]
			[Address(RVA = "0x9DDE1C", Offset = "0x9DDE1C", VA = "0x9DDE1C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0x9DDCB8", Offset = "0x9DDCB8", VA = "0x9DDCB8")]
		[DebuggerHidden]
		public <PreTeleportStateCoroutine>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x9DDCE4", Offset = "0x9DDCE4", VA = "0x9DDCE4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0x9DDCE8", Offset = "0x9DDCE8", VA = "0x9DDCE8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0x9DDDDC", Offset = "0x9DDDDC", VA = "0x9DDDDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000C0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728330", Offset = "0x728330")]
	private sealed class <CancelTeleportStateCoroutine>d__76 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000026")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002CD")]
			[Address(RVA = "0x9DDAE8", Offset = "0x9DDAE8", VA = "0x9DDAE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000027")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002CF")]
			[Address(RVA = "0x9DDB30", Offset = "0x9DDB30", VA = "0x9DDB30", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002CA")]
		[Address(RVA = "0x9DDA0C", Offset = "0x9DDA0C", VA = "0x9DDA0C")]
		[DebuggerHidden]
		public <CancelTeleportStateCoroutine>d__76(int <>1__state)
		{
		}

		[Token(Token = "0x60002CB")]
		[Address(RVA = "0x9DDA38", Offset = "0x9DDA38", VA = "0x9DDA38", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002CC")]
		[Address(RVA = "0x9DDA3C", Offset = "0x9DDA3C", VA = "0x9DDA3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0x9DDAF0", Offset = "0x9DDAF0", VA = "0x9DDAF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000C1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728340", Offset = "0x728340")]
	private sealed class <TeleportingStateCoroutine>d__80 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000028")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002D3")]
			[Address(RVA = "0x9DE0C4", Offset = "0x9DE0C4", VA = "0x9DE0C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000029")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002D5")]
			[Address(RVA = "0x9DE10C", Offset = "0x9DE10C", VA = "0x9DE10C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0x9DDFB0", Offset = "0x9DDFB0", VA = "0x9DDFB0")]
		[DebuggerHidden]
		public <TeleportingStateCoroutine>d__80(int <>1__state)
		{
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0x9DDFDC", Offset = "0x9DDFDC", VA = "0x9DDFDC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0x9DDFE0", Offset = "0x9DDFE0", VA = "0x9DDFE0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x9DE0CC", Offset = "0x9DE0CC", VA = "0x9DE0CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000C2")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728350", Offset = "0x728350")]
	private sealed class <PostTeleportStateCoroutine>d__84 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700002A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002D9")]
			[Address(RVA = "0x9DDC68", Offset = "0x9DDC68", VA = "0x9DDC68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002DB")]
			[Address(RVA = "0x9DDCB0", Offset = "0x9DDCB0", VA = "0x9DDCB0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002D6")]
		[Address(RVA = "0x9DDB38", Offset = "0x9DDB38", VA = "0x9DDB38")]
		[DebuggerHidden]
		public <PostTeleportStateCoroutine>d__84(int <>1__state)
		{
		}

		[Token(Token = "0x60002D7")]
		[Address(RVA = "0x9DDB64", Offset = "0x9DDB64", VA = "0x9DDB64", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002D8")]
		[Address(RVA = "0x9DDB68", Offset = "0x9DDB68", VA = "0x9DDB68", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x9DDC70", Offset = "0x9DDC70", VA = "0x9DDC70", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729B88", Offset = "0x729B88")]
	public bool EnableMovementDuringReady;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729BC0", Offset = "0x729BC0")]
	public bool EnableMovementDuringAim;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729BF8", Offset = "0x729BF8")]
	public bool EnableMovementDuringPreTeleport;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729C30", Offset = "0x729C30")]
	public bool EnableMovementDuringPostTeleport;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729C68", Offset = "0x729C68")]
	public bool EnableRotationDuringReady;

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729CA0", Offset = "0x729CA0")]
	public bool EnableRotationDuringAim;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729CD8", Offset = "0x729CD8")]
	public bool EnableRotationDuringPreTeleport;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729D10", Offset = "0x729D10")]
	public bool EnableRotationDuringPostTeleport;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x729D48", Offset = "0x729D48")]
	private States <CurrentState>k__BackingField;

	[NonSerialized]
	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TeleportAimHandler AimHandler;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729D58", Offset = "0x729D58")]
	public TeleportDestination TeleportDestinationPrefab;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729D90", Offset = "0x729D90")]
	public int TeleportDestinationLayer;

	[NonSerialized]
	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TeleportInputHandler InputHandler;

	[NonSerialized]
	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TeleportIntentions CurrentIntention;

	[NonSerialized]
	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool IsPreTeleportRequested;

	[NonSerialized]
	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool IsTransitioning;

	[NonSerialized]
	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	public bool IsPostTeleportRequested;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TeleportDestination _teleportDestination;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x729DD8", Offset = "0x729DD8")]
	private LocomotionController <LocomotionController>k__BackingField;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729DE8", Offset = "0x729DE8")]
	public AimCollisionTypes AimCollisionType;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729E20", Offset = "0x729E20")]
	public bool UseCharacterCollisionData;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729E58", Offset = "0x729E58")]
	public float AimCollisionRadius;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729E90", Offset = "0x729E90")]
	public float AimCollisionHeight;

	[Token(Token = "0x1700001A")]
	public States CurrentState
	{
		[Token(Token = "0x600027C")]
		[Address(RVA = "0xB1F4BC", Offset = "0xB1F4BC", VA = "0xB1F4BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DC40", Offset = "0x72DC40")]
		get
		{
			return default(States);
		}
		[Token(Token = "0x600027D")]
		[Address(RVA = "0xB1F4C4", Offset = "0xB1F4C4", VA = "0xB1F4C4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DC50", Offset = "0x72DC50")]
		private set
		{
		}
	}

	[Token(Token = "0x1700001B")]
	public Quaternion DestinationRotation
	{
		[Token(Token = "0x6000281")]
		[Address(RVA = "0xB1F6E8", Offset = "0xB1F6E8", VA = "0xB1F6E8")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x1700001C")]
	public LocomotionController LocomotionController
	{
		[Token(Token = "0x6000282")]
		[Address(RVA = "0xB1F710", Offset = "0xB1F710", VA = "0xB1F710")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DC80", Offset = "0x72DC80")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000283")]
		[Address(RVA = "0xB1F718", Offset = "0xB1F718", VA = "0xB1F718")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DC90", Offset = "0x72DC90")]
		private set
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event Action<bool, Vector3?, Quaternion?, Quaternion?> UpdateTeleportDestination
	{
		[Token(Token = "0x600027E")]
		[Address(RVA = "0xB1F4CC", Offset = "0xB1F4CC", VA = "0xB1F4CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DC60", Offset = "0x72DC60")]
		add
		{
		}
		[Token(Token = "0x600027F")]
		[Address(RVA = "0xB1F56C", Offset = "0xB1F56C", VA = "0xB1F56C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DC70", Offset = "0x72DC70")]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action EnterStateReady
	{
		[Token(Token = "0x600028D")]
		[Address(RVA = "0xB1FD58", Offset = "0xB1FD58", VA = "0xB1FD58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DCD8", Offset = "0x72DCD8")]
		add
		{
		}
		[Token(Token = "0x600028E")]
		[Address(RVA = "0xB1FDF8", Offset = "0xB1FDF8", VA = "0xB1FDF8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DCE8", Offset = "0x72DCE8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event Action EnterStateAim
	{
		[Token(Token = "0x6000290")]
		[Address(RVA = "0xB1FE98", Offset = "0xB1FE98", VA = "0xB1FE98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DD58", Offset = "0x72DD58")]
		add
		{
		}
		[Token(Token = "0x6000291")]
		[Address(RVA = "0xB1FF38", Offset = "0xB1FF38", VA = "0xB1FF38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DD68", Offset = "0x72DD68")]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event Action<AimData> UpdateAimData
	{
		[Token(Token = "0x6000292")]
		[Address(RVA = "0xB1FFD8", Offset = "0xB1FFD8", VA = "0xB1FFD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DD78", Offset = "0x72DD78")]
		add
		{
		}
		[Token(Token = "0x6000293")]
		[Address(RVA = "0xB20078", Offset = "0xB20078", VA = "0xB20078")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DD88", Offset = "0x72DD88")]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event Action ExitStateAim
	{
		[Token(Token = "0x6000295")]
		[Address(RVA = "0xB20188", Offset = "0xB20188", VA = "0xB20188")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DD98", Offset = "0x72DD98")]
		add
		{
		}
		[Token(Token = "0x6000296")]
		[Address(RVA = "0xB20228", Offset = "0xB20228", VA = "0xB20228")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DDA8", Offset = "0x72DDA8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event Action EnterStateCancelAim
	{
		[Token(Token = "0x6000298")]
		[Address(RVA = "0xB20340", Offset = "0xB20340", VA = "0xB20340")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DE18", Offset = "0x72DE18")]
		add
		{
		}
		[Token(Token = "0x6000299")]
		[Address(RVA = "0xB203E0", Offset = "0xB203E0", VA = "0xB203E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DE28", Offset = "0x72DE28")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public event Action EnterStatePreTeleport
	{
		[Token(Token = "0x600029B")]
		[Address(RVA = "0xB204F8", Offset = "0xB204F8", VA = "0xB204F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DE98", Offset = "0x72DE98")]
		add
		{
		}
		[Token(Token = "0x600029C")]
		[Address(RVA = "0xB20598", Offset = "0xB20598", VA = "0xB20598")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DEA8", Offset = "0x72DEA8")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event Action EnterStateCancelTeleport
	{
		[Token(Token = "0x600029E")]
		[Address(RVA = "0xB206B0", Offset = "0xB206B0", VA = "0xB206B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DF18", Offset = "0x72DF18")]
		add
		{
		}
		[Token(Token = "0x600029F")]
		[Address(RVA = "0xB20750", Offset = "0xB20750", VA = "0xB20750")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DF28", Offset = "0x72DF28")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000C")]
	public event Action EnterStateTeleporting
	{
		[Token(Token = "0x60002A1")]
		[Address(RVA = "0xB20868", Offset = "0xB20868", VA = "0xB20868")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DF98", Offset = "0x72DF98")]
		add
		{
		}
		[Token(Token = "0x60002A2")]
		[Address(RVA = "0xB20908", Offset = "0xB20908", VA = "0xB20908")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72DFA8", Offset = "0x72DFA8")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public event Action EnterStatePostTeleport
	{
		[Token(Token = "0x60002A4")]
		[Address(RVA = "0xB20A20", Offset = "0xB20A20", VA = "0xB20A20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E018", Offset = "0x72E018")]
		add
		{
		}
		[Token(Token = "0x60002A5")]
		[Address(RVA = "0xB20AC0", Offset = "0xB20AC0", VA = "0xB20AC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E028", Offset = "0x72E028")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public event Action<Transform, Vector3, Quaternion> Teleported
	{
		[Token(Token = "0x60002A7")]
		[Address(RVA = "0xB20BD8", Offset = "0xB20BD8", VA = "0xB20BD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E098", Offset = "0x72E098")]
		add
		{
		}
		[Token(Token = "0x60002A8")]
		[Address(RVA = "0xB20C78", Offset = "0xB20C78", VA = "0xB20C78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E0A8", Offset = "0x72E0A8")]
		remove
		{
		}
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xB1F168", Offset = "0xB1F168", VA = "0xB1F168")]
	public void EnableMovement(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xB1F18C", Offset = "0xB1F18C", VA = "0xB1F18C")]
	public void EnableRotation(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xB1F60C", Offset = "0xB1F60C", VA = "0xB1F60C")]
	public void OnUpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xB1F720", Offset = "0xB1F720", VA = "0xB1F720")]
	public bool AimCollisionTest(Vector3 start, Vector3 end, LayerMask aimCollisionLayerMask, out RaycastHit hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xB1F96C", Offset = "0xB1F96C", VA = "0xB1F96C")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x72DCA0", Offset = "0x72DCA0")]
	protected void LogState(string msg)
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0xB1FA20", Offset = "0xB1FA20", VA = "0xB1FA20")]
	protected void CreateNewTeleportDestination()
	{
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0xB1FB20", Offset = "0xB1FB20", VA = "0xB1FB20")]
	private void DeactivateDestination()
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0xB1FB3C", Offset = "0xB1FB3C", VA = "0xB1FB3C")]
	public void RecycleTeleportDestination(TeleportDestination oldDestination)
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0xB1FC00", Offset = "0xB1FC00", VA = "0xB1FC00")]
	private void EnableMotion(bool enableLinear, bool enableRotation)
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0xB1FC44", Offset = "0xB1FC44", VA = "0xB1FC44")]
	private void Awake()
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0xB1FCA8", Offset = "0xB1FCA8", VA = "0xB1FCA8", Slot = "4")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0xB1FD50", Offset = "0xB1FD50", VA = "0xB1FD50", Slot = "5")]
	public virtual void OnDisable()
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xB1FCD8", Offset = "0xB1FCD8", VA = "0xB1FCD8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72DCF8", Offset = "0x72DCF8")]
	protected IEnumerator ReadyStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xB20118", Offset = "0xB20118", VA = "0xB20118")]
	public void OnUpdateAimData(AimData aimData)
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0xB202C8", Offset = "0xB202C8", VA = "0xB202C8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72DDB8", Offset = "0x72DDB8")]
	protected IEnumerator AimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0xB20480", Offset = "0xB20480", VA = "0xB20480")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72DE38", Offset = "0x72DE38")]
	protected IEnumerator CancelAimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0xB20638", Offset = "0xB20638", VA = "0xB20638")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72DEB8", Offset = "0x72DEB8")]
	protected IEnumerator PreTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0xB207F0", Offset = "0xB207F0", VA = "0xB207F0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72DF38", Offset = "0x72DF38")]
	protected IEnumerator CancelTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0xB209A8", Offset = "0xB209A8", VA = "0xB209A8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72DFB8", Offset = "0x72DFB8")]
	protected IEnumerator TeleportingStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xB20B60", Offset = "0xB20B60", VA = "0xB20B60")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72E038", Offset = "0x72E038")]
	protected IEnumerator PostTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xB20D18", Offset = "0xB20D18", VA = "0xB20D18")]
	public void DoTeleport()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xB20E58", Offset = "0xB20E58", VA = "0xB20E58")]
	public Vector3 GetCharacterPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xB20E8C", Offset = "0xB20E8C", VA = "0xB20E8C")]
	public Quaternion GetHeadRotationY()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xB20F54", Offset = "0xB20F54", VA = "0xB20F54")]
	public void DoWarp(Vector3 startPos, float positionPercent)
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xB2104C", Offset = "0xB2104C", VA = "0xB2104C")]
	public LocomotionTeleport()
	{
	}
}
[Token(Token = "0x20000C3")]
public class SimpleCapsuleWithStickMovement : MonoBehaviour
{
	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool EnableLinearMovement;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool EnableRotation;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool HMDRotatesPlayer;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool RotationEitherThumbstick;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RotationAngle;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Speed;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool ReadyToSnapTurn;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody _rigidbody;

	[Token(Token = "0x1400000F")]
	public event Action CameraUpdated
	{
		[Token(Token = "0x60002DC")]
		[Address(RVA = "0xAE822C", Offset = "0xAE822C", VA = "0xAE822C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E308", Offset = "0x72E308")]
		add
		{
		}
		[Token(Token = "0x60002DD")]
		[Address(RVA = "0xAE82CC", Offset = "0xAE82CC", VA = "0xAE82CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E318", Offset = "0x72E318")]
		remove
		{
		}
	}

	[Token(Token = "0x14000010")]
	public event Action PreCharacterMove
	{
		[Token(Token = "0x60002DE")]
		[Address(RVA = "0xAE836C", Offset = "0xAE836C", VA = "0xAE836C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E328", Offset = "0x72E328")]
		add
		{
		}
		[Token(Token = "0x60002DF")]
		[Address(RVA = "0xAE840C", Offset = "0xAE840C", VA = "0xAE840C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E338", Offset = "0x72E338")]
		remove
		{
		}
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xAE84AC", Offset = "0xAE84AC", VA = "0xAE84AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xAE8598", Offset = "0xAE8598", VA = "0xAE8598")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xAE859C", Offset = "0xAE859C", VA = "0xAE859C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xAE8610", Offset = "0xAE8610", VA = "0xAE8610")]
	private void RotatePlayerToHMD()
	{
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0xAE8734", Offset = "0xAE8734", VA = "0xAE8734")]
	private void StickMovement()
	{
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0xAE891C", Offset = "0xAE891C", VA = "0xAE891C")]
	private void SnapTurn()
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xAE8B24", Offset = "0xAE8B24", VA = "0xAE8B24")]
	public SimpleCapsuleWithStickMovement()
	{
	}
}
[Token(Token = "0x20000C4")]
public abstract class TeleportAimHandler : TeleportSupport
{
	[Token(Token = "0x60002E7")]
	[Address(RVA = "0x128BE04", Offset = "0x128BE04", VA = "0x128BE04", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0x128BEA4", Offset = "0x128BEA4", VA = "0x128BEA4", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x60002E9")]
	public abstract void GetPoints(List<Vector3> points);

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0x128BF94", Offset = "0x128BF94", VA = "0x128BF94")]
	protected TeleportAimHandler()
	{
	}
}
[Token(Token = "0x20000C5")]
public class TeleportAimHandlerLaser : TeleportAimHandler
{
	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729F98", Offset = "0x729F98")]
	public float Range;

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0x128BFA4", Offset = "0x128BFA4", VA = "0x128BFA4", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0x128C0A0", Offset = "0x128C0A0", VA = "0x128C0A0")]
	public TeleportAimHandlerLaser()
	{
	}
}
[Token(Token = "0x20000C6")]
public class TeleportAimHandlerParabolic : TeleportAimHandler
{
	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x729FD0", Offset = "0x729FD0")]
	public float Range;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A008", Offset = "0x72A008")]
	public float MinimumElevation;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A040", Offset = "0x72A040")]
	public float Gravity;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72A078", Offset = "0x72A078")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A078", Offset = "0x72A078")]
	public float AimVelocity;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72A0D4", Offset = "0x72A0D4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A0D4", Offset = "0x72A0D4")]
	public float AimStep;

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0x128C0B0", Offset = "0x128C0B0", VA = "0x128C0B0", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0x128C240", Offset = "0x128C240", VA = "0x128C240")]
	public TeleportAimHandlerParabolic()
	{
	}
}
[Token(Token = "0x20000C7")]
public class TeleportAimVisualLaser : TeleportSupport
{
	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A12C", Offset = "0x72A12C")]
	public LineRenderer LaserPrefab;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _enterAimStateAction;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Action _exitAimStateAction;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LineRenderer _lineRenderer;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] _linePoints;

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0x128C254", Offset = "0x128C254", VA = "0x128C254")]
	public TeleportAimVisualLaser()
	{
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0x128C390", Offset = "0x128C390", VA = "0x128C390")]
	private void EnterAimState()
	{
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0x128C3C0", Offset = "0x128C3C0", VA = "0x128C3C0")]
	private void ExitAimState()
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0x128C3F0", Offset = "0x128C3F0", VA = "0x128C3F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0x128C4A0", Offset = "0x128C4A0", VA = "0x128C4A0", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0x128C50C", Offset = "0x128C50C", VA = "0x128C50C", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0x128C574", Offset = "0x128C574", VA = "0x128C574")]
	private void UpdateAimData(LocomotionTeleport.AimData obj)
	{
	}
}
[Token(Token = "0x20000C8")]
public class TeleportDestination : MonoBehaviour
{
	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72A164", Offset = "0x72A164")]
	private bool <IsValidDestination>k__BackingField;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A174", Offset = "0x72A174")]
	public Transform PositionIndicator;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A1AC", Offset = "0x72A1AC")]
	public Transform OrientationIndicator;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A1E4", Offset = "0x72A1E4")]
	public Quaternion LandingRotation;

	[NonSerialized]
	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LocomotionTeleport LocomotionTeleport;

	[NonSerialized]
	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LocomotionTeleport.States TeleportState;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly Action<bool, Vector3?, Quaternion?, Quaternion?> _updateTeleportDestinationAction;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _eventsActive;

	[Token(Token = "0x1700002C")]
	public bool IsValidDestination
	{
		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x128C698", Offset = "0x128C698", VA = "0x128C698")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E348", Offset = "0x72E348")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x128C6A0", Offset = "0x128C6A0", VA = "0x128C6A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E358", Offset = "0x72E358")]
		private set
		{
		}
	}

	[Token(Token = "0x14000011")]
	public event Action<TeleportDestination> Deactivated
	{
		[Token(Token = "0x60002FC")]
		[Address(RVA = "0x128C85C", Offset = "0x128C85C", VA = "0x128C85C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E368", Offset = "0x72E368")]
		add
		{
		}
		[Token(Token = "0x60002FD")]
		[Address(RVA = "0x128C8FC", Offset = "0x128C8FC", VA = "0x128C8FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E378", Offset = "0x72E378")]
		remove
		{
		}
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0x128C6AC", Offset = "0x128C6AC", VA = "0x128C6AC")]
	private TeleportDestination()
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0x128C744", Offset = "0x128C744", VA = "0x128C744")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0x128C818", Offset = "0x128C818", VA = "0x128C818")]
	private void TryDisableEventHandlers()
	{
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0x128C858", Offset = "0x128C858", VA = "0x128C858")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0x128C99C", Offset = "0x128C99C", VA = "0x128C99C")]
	public void OnDeactivated()
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0x128CA00", Offset = "0x128CA00", VA = "0x128CA00")]
	public void Recycle()
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0x128CA20", Offset = "0x128CA20", VA = "0x128CA20", Slot = "4")]
	public virtual void UpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}
}
[Token(Token = "0x20000C9")]
public abstract class TeleportInputHandler : TeleportSupport
{
	[Token(Token = "0x20000CA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728360", Offset = "0x728360")]
	private sealed class <TeleportReadyCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x1700002D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600030D")]
			[Address(RVA = "0x1B1ECD8", Offset = "0x1B1ECD8", VA = "0x1B1ECD8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600030F")]
			[Address(RVA = "0x1B1ED20", Offset = "0x1B1ED20", VA = "0x1B1ED20", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0x1B1EC10", Offset = "0x1B1EC10", VA = "0x1B1EC10")]
		[DebuggerHidden]
		public <TeleportReadyCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0x1B1EC3C", Offset = "0x1B1EC3C", VA = "0x1B1EC3C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600030C")]
		[Address(RVA = "0x1B1EC40", Offset = "0x1B1EC40", VA = "0x1B1EC40", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0x1B1ECE0", Offset = "0x1B1ECE0", VA = "0x1B1ECE0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728370", Offset = "0x728370")]
	private sealed class <TeleportAimCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400049C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x1700002F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000313")]
			[Address(RVA = "0x1B1EBC0", Offset = "0x1B1EBC0", VA = "0x1B1EBC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000030")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000315")]
			[Address(RVA = "0x1B1EC08", Offset = "0x1B1EC08", VA = "0x1B1EC08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000310")]
		[Address(RVA = "0x1B1EAF4", Offset = "0x1B1EAF4", VA = "0x1B1EAF4")]
		[DebuggerHidden]
		public <TeleportAimCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000311")]
		[Address(RVA = "0x1B1EB20", Offset = "0x1B1EB20", VA = "0x1B1EB20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000312")]
		[Address(RVA = "0x1B1EB24", Offset = "0x1B1EB24", VA = "0x1B1EB24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000314")]
		[Address(RVA = "0x1B1EBC8", Offset = "0x1B1EBC8", VA = "0x1B1EBC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _startReadyAction;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x6000301")]
	[Address(RVA = "0x128CC2C", Offset = "0x128CC2C", VA = "0x128CC2C")]
	protected TeleportInputHandler()
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0x128CD00", Offset = "0x128CD00", VA = "0x128CD00", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0x128CD60", Offset = "0x128CD60", VA = "0x128CD60", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0x128CE20", Offset = "0x128CE20", VA = "0x128CE20")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72E388", Offset = "0x72E388")]
	private IEnumerator TeleportReadyCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0x128CE98", Offset = "0x128CE98", VA = "0x128CE98")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72E3E8", Offset = "0x72E3E8")]
	private IEnumerator TeleportAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000306")]
	public abstract LocomotionTeleport.TeleportIntentions GetIntention();

	[Token(Token = "0x6000307")]
	public abstract void GetAimData(out Ray aimRay);

	[Token(Token = "0x6000308")]
	[Address(RVA = "0x128CF10", Offset = "0x128CF10", VA = "0x128CF10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E448", Offset = "0x72E448")]
	private void <.ctor>b__2_0()
	{
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0x128CF3C", Offset = "0x128CF3C", VA = "0x128CF3C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E458", Offset = "0x72E458")]
	private void <.ctor>b__2_1()
	{
	}
}
[Token(Token = "0x20000CC")]
public class TeleportInputHandlerHMD : TeleportInputHandler
{
	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72A22C", Offset = "0x72A22C")]
	private Transform <Pointer>k__BackingField;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A23C", Offset = "0x72A23C")]
	public OVRInput.RawButton AimButton;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A274", Offset = "0x72A274")]
	public OVRInput.RawButton TeleportButton;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A2AC", Offset = "0x72A2AC")]
	public bool FastTeleport;

	[Token(Token = "0x17000031")]
	public Transform Pointer
	{
		[Token(Token = "0x6000316")]
		[Address(RVA = "0x128CF68", Offset = "0x128CF68", VA = "0x128CF68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E508", Offset = "0x72E508")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000317")]
		[Address(RVA = "0x128CF70", Offset = "0x128CF70", VA = "0x128CF70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E518", Offset = "0x72E518")]
		private set
		{
		}
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0x128CF78", Offset = "0x128CF78", VA = "0x128CF78", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0x128D0D0", Offset = "0x128D0D0", VA = "0x128D0D0", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0x128D188", Offset = "0x128D188", VA = "0x128D188")]
	public TeleportInputHandlerHMD()
	{
	}
}
[Token(Token = "0x20000CD")]
public class TeleportInputHandlerTouch : TeleportInputHandlerHMD
{
	[Token(Token = "0x20000CE")]
	public enum InputModes
	{
		[Token(Token = "0x40004AC")]
		CapacitiveButtonForAimAndTeleport,
		[Token(Token = "0x40004AD")]
		SeparateButtonsForAimAndTeleport,
		[Token(Token = "0x40004AE")]
		ThumbstickTeleport,
		[Token(Token = "0x40004AF")]
		ThumbstickTeleportForwardBackOnly
	}

	[Token(Token = "0x20000CF")]
	public enum AimCapTouchButtons
	{
		[Token(Token = "0x40004B1")]
		A,
		[Token(Token = "0x40004B2")]
		B,
		[Token(Token = "0x40004B3")]
		LeftTrigger,
		[Token(Token = "0x40004B4")]
		LeftThumbstick,
		[Token(Token = "0x40004B5")]
		RightTrigger,
		[Token(Token = "0x40004B6")]
		RightThumbstick,
		[Token(Token = "0x40004B7")]
		X,
		[Token(Token = "0x40004B8")]
		Y
	}

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform LeftHand;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform RightHand;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A2E4", Offset = "0x72A2E4")]
	public InputModes InputMode;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly OVRInput.RawButton[] _rawButtons;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly OVRInput.RawTouch[] _rawTouch;

	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A31C", Offset = "0x72A31C")]
	public OVRInput.Controller AimingController;

	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private OVRInput.Controller InitiatingController;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A354", Offset = "0x72A354")]
	public AimCapTouchButtons CapacitiveAimAndTeleportButton;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A38C", Offset = "0x72A38C")]
	public float ThumbstickTeleportThreshold;

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x128D18C", Offset = "0x128D18C", VA = "0x128D18C")]
	private void Start()
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0x128D190", Offset = "0x128D190", VA = "0x128D190", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0x128D578", Offset = "0x128D578", VA = "0x128D578", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x128D638", Offset = "0x128D638", VA = "0x128D638")]
	public TeleportInputHandlerTouch()
	{
	}
}
[Token(Token = "0x20000D0")]
public abstract class TeleportOrientationHandler : TeleportSupport
{
	[Token(Token = "0x20000D1")]
	public enum OrientationModes
	{
		[Token(Token = "0x40004BD")]
		HeadRelative,
		[Token(Token = "0x40004BE")]
		ForwardFacing
	}

	[Token(Token = "0x20000D2")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728380", Offset = "0x728380")]
	private sealed class <UpdateOrientationCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportOrientationHandler <>4__this;

		[Token(Token = "0x17000032")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600032B")]
			[Address(RVA = "0x1B1EE08", Offset = "0x1B1EE08", VA = "0x1B1EE08", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000033")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600032D")]
			[Address(RVA = "0x1B1EE50", Offset = "0x1B1EE50", VA = "0x1B1EE50", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0x1B1ED28", Offset = "0x1B1ED28", VA = "0x1B1ED28")]
		[DebuggerHidden]
		public <UpdateOrientationCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0x1B1ED54", Offset = "0x1B1ED54", VA = "0x1B1ED54", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600032A")]
		[Address(RVA = "0x1B1ED58", Offset = "0x1B1ED58", VA = "0x1B1ED58", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600032C")]
		[Address(RVA = "0x1B1EE10", Offset = "0x1B1EE10", VA = "0x1B1EE10", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _updateOrientationAction;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected LocomotionTeleport.AimData AimData;

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x128D71C", Offset = "0x128D71C", VA = "0x128D71C")]
	protected TeleportOrientationHandler()
	{
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0x128D810", Offset = "0x128D810", VA = "0x128D810")]
	private void UpdateAimData(LocomotionTeleport.AimData aimData)
	{
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0x128D818", Offset = "0x128D818", VA = "0x128D818", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0x128D864", Offset = "0x128D864", VA = "0x128D864", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0x128D8AC", Offset = "0x128D8AC", VA = "0x128D8AC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72E528", Offset = "0x72E528")]
	private IEnumerator UpdateOrientationCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000324")]
	protected abstract void InitializeTeleportDestination();

	[Token(Token = "0x6000325")]
	protected abstract void UpdateTeleportDestination();

	[Token(Token = "0x6000326")]
	[Address(RVA = "0x128D924", Offset = "0x128D924", VA = "0x128D924")]
	protected Quaternion GetLandingOrientation(OrientationModes mode, Quaternion rotation)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0x128D9E0", Offset = "0x128D9E0", VA = "0x128D9E0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E588", Offset = "0x72E588")]
	private void <.ctor>b__3_0()
	{
	}
}
[Token(Token = "0x20000D3")]
public class TeleportOrientationHandler360 : TeleportOrientationHandler
{
	[Token(Token = "0x600032E")]
	[Address(RVA = "0x128DA0C", Offset = "0x128DA0C", VA = "0x128DA0C", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0x128DA10", Offset = "0x128DA10", VA = "0x128DA10", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0x128DA8C", Offset = "0x128DA8C", VA = "0x128DA8C")]
	public TeleportOrientationHandler360()
	{
	}
}
[Token(Token = "0x20000D4")]
public class TeleportOrientationHandlerHMD : TeleportOrientationHandler
{
	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A3C4", Offset = "0x72A3C4")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A3FC", Offset = "0x72A3FC")]
	public bool UpdateOrientationDuringAim;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A434", Offset = "0x72A434")]
	public float AimDistanceThreshold;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A46C", Offset = "0x72A46C")]
	public float AimDistanceMaxRange;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion _initialRotation;

	[Token(Token = "0x6000331")]
	[Address(RVA = "0x128DA90", Offset = "0x128DA90", VA = "0x128DA90", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0x128DABC", Offset = "0x128DABC", VA = "0x128DABC", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0x128DE6C", Offset = "0x128DE6C", VA = "0x128DE6C")]
	public TeleportOrientationHandlerHMD()
	{
	}
}
[Token(Token = "0x20000D5")]
public class TeleportOrientationHandlerThumbstick : TeleportOrientationHandler
{
	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A4A4", Offset = "0x72A4A4")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A4DC", Offset = "0x72A4DC")]
	public OVRInput.Controller Thumbstick;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A514", Offset = "0x72A514")]
	public float RotateStickThreshold;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion _initialRotation;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion _currentRotation;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector2 _lastValidDirection;

	[Token(Token = "0x6000334")]
	[Address(RVA = "0x128DE70", Offset = "0x128DE70", VA = "0x128DE70", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0x128DEB4", Offset = "0x128DEB4", VA = "0x128DEB4", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0x128E25C", Offset = "0x128E25C", VA = "0x128E25C")]
	public TeleportOrientationHandlerThumbstick()
	{
	}
}
[Token(Token = "0x20000D6")]
public class TeleportPoint : MonoBehaviour
{
	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float dimmingSpeed;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fullIntensity;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lowIntensity;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform destTransform;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastLookAtTime;

	[Token(Token = "0x6000337")]
	[Address(RVA = "0x128E26C", Offset = "0x128E26C", VA = "0x128E26C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0x128E270", Offset = "0x128E270", VA = "0x128E270")]
	public Transform GetDestTransform()
	{
		return null;
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0x128E278", Offset = "0x128E278", VA = "0x128E278")]
	private void Update()
	{
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0x128E334", Offset = "0x128E334", VA = "0x128E334")]
	public void OnLookAt()
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0x128E35C", Offset = "0x128E35C", VA = "0x128E35C")]
	public TeleportPoint()
	{
	}
}
[Token(Token = "0x20000D7")]
public abstract class TeleportSupport : MonoBehaviour
{
	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72A54C", Offset = "0x72A54C")]
	private LocomotionTeleport <LocomotionTeleport>k__BackingField;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _eventsActive;

	[Token(Token = "0x17000034")]
	protected LocomotionTeleport LocomotionTeleport
	{
		[Token(Token = "0x600033C")]
		[Address(RVA = "0x128E374", Offset = "0x128E374", VA = "0x128E374")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E5E8", Offset = "0x72E5E8")]
		get
		{
			return null;
		}
		[Token(Token = "0x600033D")]
		[Address(RVA = "0x128E37C", Offset = "0x128E37C", VA = "0x128E37C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E5F8", Offset = "0x72E5F8")]
		private set
		{
		}
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0x128BE38", Offset = "0x128BE38", VA = "0x128BE38", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x128BF60", Offset = "0x128BF60", VA = "0x128BF60", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0x128E384", Offset = "0x128E384", VA = "0x128E384")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x72E608", Offset = "0x72E608")]
	private void LogEventHandler(string msg)
	{
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0x128C500", Offset = "0x128C500", VA = "0x128C500", Slot = "6")]
	protected virtual void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0x128C56C", Offset = "0x128C56C", VA = "0x128C56C", Slot = "7")]
	protected virtual void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0x128BF9C", Offset = "0x128BF9C", VA = "0x128BF9C")]
	protected TeleportSupport()
	{
	}
}
[Token(Token = "0x20000D8")]
public abstract class TeleportTargetHandler : TeleportSupport
{
	[Token(Token = "0x20000D9")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728390", Offset = "0x728390")]
	private sealed class <TargetAimCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTargetHandler <>4__this;

		[Token(Token = "0x17000035")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600034F")]
			[Address(RVA = "0x1B1F128", Offset = "0x1B1F128", VA = "0x1B1F128", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000036")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000351")]
			[Address(RVA = "0x1B1F170", Offset = "0x1B1F170", VA = "0x1B1F170", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600034C")]
		[Address(RVA = "0x1B1EE58", Offset = "0x1B1EE58", VA = "0x1B1EE58")]
		[DebuggerHidden]
		public <TargetAimCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0x1B1EE84", Offset = "0x1B1EE84", VA = "0x1B1EE84", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0x1B1EE88", Offset = "0x1B1EE88", VA = "0x1B1EE88", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000350")]
		[Address(RVA = "0x1B1F130", Offset = "0x1B1F130", VA = "0x1B1F130", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A55C", Offset = "0x72A55C")]
	public LayerMask AimCollisionLayerMask;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected readonly LocomotionTeleport.AimData AimData;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly List<Vector3> _aimPoints;

	[Token(Token = "0x40004D8")]
	private const float ERROR_MARGIN = 0.1f;

	[Token(Token = "0x6000344")]
	[Address(RVA = "0x128E460", Offset = "0x128E460", VA = "0x128E460")]
	protected TeleportTargetHandler()
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0x128E570", Offset = "0x128E570", VA = "0x128E570", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0x128E59C", Offset = "0x128E59C", VA = "0x128E59C", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0x128E5C4", Offset = "0x128E5C4", VA = "0x128E5C4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72E640", Offset = "0x72E640")]
	private IEnumerator TargetAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0x128E63C", Offset = "0x128E63C", VA = "0x128E63C", Slot = "8")]
	protected virtual void ResetAimData()
	{
	}

	[Token(Token = "0x6000349")]
	protected abstract bool ConsiderTeleport(Vector3 start, ref Vector3 end);

	[Token(Token = "0x600034A")]
	[Address(RVA = "0x128E658", Offset = "0x128E658", VA = "0x128E658", Slot = "10")]
	public virtual Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0x128E778", Offset = "0x128E778", VA = "0x128E778")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E6A0", Offset = "0x72E6A0")]
	private void <.ctor>b__3_0()
	{
	}
}
[Token(Token = "0x20000DA")]
public class TeleportTargetHandlerNavMesh : TeleportTargetHandler
{
	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int NavMeshAreaMask;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NavMeshPath _path;

	[Token(Token = "0x6000352")]
	[Address(RVA = "0x128E7A4", Offset = "0x128E7A4", VA = "0x128E7A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0x128E808", Offset = "0x128E808", VA = "0x128E808", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0x128E900", Offset = "0x128E900", VA = "0x128E900", Slot = "10")]
	public override Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0x128E9F8", Offset = "0x128E9F8", VA = "0x128E9F8")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x72E700", Offset = "0x72E700")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0x128E9FC", Offset = "0x128E9FC", VA = "0x128E9FC")]
	public TeleportTargetHandlerNavMesh()
	{
	}
}
[Token(Token = "0x20000DB")]
public class TeleportTargetHandlerNode : TeleportTargetHandler
{
	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A594", Offset = "0x72A594")]
	public float LOSOffset;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A5CC", Offset = "0x72A5CC")]
	public LayerMask TeleportLayerMask;

	[Token(Token = "0x6000357")]
	[Address(RVA = "0x128EA08", Offset = "0x128EA08", VA = "0x128EA08", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0x128EC14", Offset = "0x128EC14", VA = "0x128EC14")]
	public TeleportTargetHandlerNode()
	{
	}
}
[Token(Token = "0x20000DC")]
public class TeleportTargetHandlerPhysical : TeleportTargetHandler
{
	[Token(Token = "0x6000359")]
	[Address(RVA = "0x128EC20", Offset = "0x128EC20", VA = "0x128EC20", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0x128ED18", Offset = "0x128ED18", VA = "0x128ED18")]
	public TeleportTargetHandlerPhysical()
	{
	}
}
[Token(Token = "0x20000DD")]
public abstract class TeleportTransition : TeleportSupport
{
	[Token(Token = "0x600035B")]
	[Address(RVA = "0x128ED1C", Offset = "0x128ED1C", VA = "0x128ED1C", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x600035C")]
	[Address(RVA = "0x128EDB0", Offset = "0x128EDB0", VA = "0x128EDB0", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x600035D")]
	protected abstract void LocomotionTeleportOnEnterStateTeleporting();

	[Token(Token = "0x600035E")]
	[Address(RVA = "0x128EE40", Offset = "0x128EE40", VA = "0x128EE40")]
	protected TeleportTransition()
	{
	}
}
[Token(Token = "0x20000DE")]
public class TeleportTransitionBlink : TeleportTransition
{
	[Token(Token = "0x20000DF")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7283A0", Offset = "0x7283A0")]
	private sealed class <BlinkCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionBlink <>4__this;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <teleportTime>5__3;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <teleported>5__4;

		[Token(Token = "0x17000037")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000365")]
			[Address(RVA = "0x1B1F2B0", Offset = "0x1B1F2B0", VA = "0x1B1F2B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000038")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000367")]
			[Address(RVA = "0x1B1F2F8", Offset = "0x1B1F2F8", VA = "0x1B1F2F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0x1B1F178", Offset = "0x1B1F178", VA = "0x1B1F178")]
		[DebuggerHidden]
		public <BlinkCoroutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000363")]
		[Address(RVA = "0x1B1F1A4", Offset = "0x1B1F1A4", VA = "0x1B1F1A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000364")]
		[Address(RVA = "0x1B1F1A8", Offset = "0x1B1F1A8", VA = "0x1B1F1A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000366")]
		[Address(RVA = "0x1B1F2B8", Offset = "0x1B1F2B8", VA = "0x1B1F2B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72A604", Offset = "0x72A604")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A604", Offset = "0x72A604")]
	public float TransitionDuration;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A65C", Offset = "0x72A65C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72A65C", Offset = "0x72A65C")]
	public float TeleportDelay;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A6B0", Offset = "0x72A6B0")]
	public AnimationCurve FadeLevels;

	[Token(Token = "0x600035F")]
	[Address(RVA = "0x128EE48", Offset = "0x128EE48", VA = "0x128EE48", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0x128EE74", Offset = "0x128EE74", VA = "0x128EE74")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72E738", Offset = "0x72E738")]
	protected IEnumerator BlinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0x128EEEC", Offset = "0x128EEEC", VA = "0x128EEEC")]
	public TeleportTransitionBlink()
	{
	}
}
[Token(Token = "0x20000E0")]
public class TeleportTransitionInstant : TeleportTransition
{
	[Token(Token = "0x6000368")]
	[Address(RVA = "0x128F098", Offset = "0x128F098", VA = "0x128F098", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0x128F0B4", Offset = "0x128F0B4", VA = "0x128F0B4")]
	public TeleportTransitionInstant()
	{
	}
}
[Token(Token = "0x20000E1")]
public class TeleportTransitionWarp : TeleportTransition
{
	[Token(Token = "0x20000E2")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7283B0", Offset = "0x7283B0")]
	private sealed class <DoWarp>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionWarp <>4__this;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <startPosition>5__2;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <elapsedTime>5__3;

		[Token(Token = "0x17000039")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000370")]
			[Address(RVA = "0x1B1F46C", Offset = "0x1B1F46C", VA = "0x1B1F46C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000372")]
			[Address(RVA = "0x1B1F4B4", Offset = "0x1B1F4B4", VA = "0x1B1F4B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600036D")]
		[Address(RVA = "0x1B1F300", Offset = "0x1B1F300", VA = "0x1B1F300")]
		[DebuggerHidden]
		public <DoWarp>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0x1B1F32C", Offset = "0x1B1F32C", VA = "0x1B1F32C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0x1B1F330", Offset = "0x1B1F330", VA = "0x1B1F330", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0x1B1F474", Offset = "0x1B1F474", VA = "0x1B1F474", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A6E8", Offset = "0x72A6E8")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72A6E8", Offset = "0x72A6E8")]
	public float TransitionDuration;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public AnimationCurve PositionLerp;

	[Token(Token = "0x600036A")]
	[Address(RVA = "0x128F0BC", Offset = "0x128F0BC", VA = "0x128F0BC", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0x128F0E8", Offset = "0x128F0E8", VA = "0x128F0E8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72E7E8", Offset = "0x72E7E8")]
	private IEnumerator DoWarp()
	{
		return null;
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x128F160", Offset = "0x128F160", VA = "0x128F160")]
	public TeleportTransitionWarp()
	{
	}
}
[Token(Token = "0x20000E3")]
public static class NativeVideoPlayer
{
	[Token(Token = "0x20000E4")]
	public enum PlabackState
	{
		[Token(Token = "0x4000508")]
		Idle = 1,
		[Token(Token = "0x4000509")]
		Preparing,
		[Token(Token = "0x400050A")]
		Buffering,
		[Token(Token = "0x400050B")]
		Ready,
		[Token(Token = "0x400050C")]
		Ended
	}

	[Token(Token = "0x20000E5")]
	public enum StereoMode
	{
		[Token(Token = "0x400050E")]
		Unknown = -1,
		[Token(Token = "0x400050F")]
		Mono,
		[Token(Token = "0x4000510")]
		TopBottom,
		[Token(Token = "0x4000511")]
		LeftRight,
		[Token(Token = "0x4000512")]
		Mesh
	}

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IntPtr? _Activity;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static IntPtr? _VideoPlayerClass;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly jvalue[] EmptyParams;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static IntPtr getIsPlayingMethodId;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static IntPtr getCurrentPlaybackStateMethodId;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static IntPtr getDurationMethodId;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static IntPtr getStereoModeMethodId;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static IntPtr getWidthMethodId;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static IntPtr getHeightMethodId;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static IntPtr getPlaybackPositionMethodId;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static IntPtr setPlaybackPositionMethodId;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static jvalue[] setPlaybackPositionParams;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static IntPtr playVideoMethodId;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static jvalue[] playVideoParams;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static IntPtr stopMethodId;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static IntPtr resumeMethodId;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static IntPtr pauseMethodId;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static IntPtr setPlaybackSpeedMethodId;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static jvalue[] setPlaybackSpeedParams;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static IntPtr setLoopingMethodId;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private static jvalue[] setLoopingParams;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static IntPtr setListenerRotationQuaternionMethodId;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private static jvalue[] setListenerRotationQuaternionParams;

	[Token(Token = "0x1700003B")]
	private static IntPtr VideoPlayerClass
	{
		[Token(Token = "0x6000373")]
		[Address(RVA = "0xDA7A1C", Offset = "0xDA7A1C", VA = "0xDA7A1C")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700003C")]
	private static IntPtr Activity
	{
		[Token(Token = "0x6000374")]
		[Address(RVA = "0xDA7D4C", Offset = "0xDA7D4C", VA = "0xDA7D4C")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x1700003D")]
	public static bool IsAvailable
	{
		[Token(Token = "0x6000375")]
		[Address(RVA = "0xDA801C", Offset = "0xDA801C", VA = "0xDA801C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700003E")]
	public static bool IsPlaying
	{
		[Token(Token = "0x6000376")]
		[Address(RVA = "0xDA808C", Offset = "0xDA808C", VA = "0xDA808C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700003F")]
	public static PlabackState CurrentPlaybackState
	{
		[Token(Token = "0x6000377")]
		[Address(RVA = "0xDA819C", Offset = "0xDA819C", VA = "0xDA819C")]
		get
		{
			return default(PlabackState);
		}
	}

	[Token(Token = "0x17000040")]
	public static long Duration
	{
		[Token(Token = "0x6000378")]
		[Address(RVA = "0xDA82B0", Offset = "0xDA82B0", VA = "0xDA82B0")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x17000041")]
	public static StereoMode VideoStereoMode
	{
		[Token(Token = "0x6000379")]
		[Address(RVA = "0xDA83C4", Offset = "0xDA83C4", VA = "0xDA83C4")]
		get
		{
			return default(StereoMode);
		}
	}

	[Token(Token = "0x17000042")]
	public static int VideoWidth
	{
		[Token(Token = "0x600037A")]
		[Address(RVA = "0xDA84D8", Offset = "0xDA84D8", VA = "0xDA84D8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000043")]
	public static int VideoHeight
	{
		[Token(Token = "0x600037B")]
		[Address(RVA = "0xDA85EC", Offset = "0xDA85EC", VA = "0xDA85EC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000044")]
	public static long PlaybackPosition
	{
		[Token(Token = "0x600037C")]
		[Address(RVA = "0xDA8700", Offset = "0xDA8700", VA = "0xDA8700")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x600037D")]
		[Address(RVA = "0xDA8814", Offset = "0xDA8814", VA = "0xDA8814")]
		set
		{
		}
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xDA8988", Offset = "0xDA8988", VA = "0xDA8988")]
	public static void PlayVideo(string path, string drmLicenseUrl, IntPtr surfaceObj)
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0xDA8BB4", Offset = "0xDA8BB4", VA = "0xDA8BB4")]
	public static void Stop()
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0xDA8CC8", Offset = "0xDA8CC8", VA = "0xDA8CC8")]
	public static void Play()
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0xDA8DDC", Offset = "0xDA8DDC", VA = "0xDA8DDC")]
	public static void Pause()
	{
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xDA8EF0", Offset = "0xDA8EF0", VA = "0xDA8EF0")]
	public static void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0xDA906C", Offset = "0xDA906C", VA = "0xDA906C")]
	public static void SetLooping(bool looping)
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0xDA91E4", Offset = "0xDA91E4", VA = "0xDA91E4")]
	public static void SetListenerRotation(Quaternion rotation)
	{
	}
}
[Token(Token = "0x20000E6")]
public class ButtonDownListener : MonoBehaviour, IPointerDownHandler, IEventSystemHandler
{
	[Token(Token = "0x14000012")]
	public event Action onButtonDown
	{
		[Token(Token = "0x6000386")]
		[Address(RVA = "0xE17934", Offset = "0xE17934", VA = "0xE17934")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E898", Offset = "0x72E898")]
		add
		{
		}
		[Token(Token = "0x6000387")]
		[Address(RVA = "0xE179D4", Offset = "0xE179D4", VA = "0xE179D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E8A8", Offset = "0x72E8A8")]
		remove
		{
		}
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0xE17A74", Offset = "0xE17A74", VA = "0xE17A74", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0xE17A88", Offset = "0xE17A88", VA = "0xE17A88")]
	public ButtonDownListener()
	{
	}
}
[Token(Token = "0x20000E7")]
public class MediaPlayerImage : Image
{
	[Token(Token = "0x20000E8")]
	public enum ButtonType
	{
		[Token(Token = "0x4000516")]
		Play,
		[Token(Token = "0x4000517")]
		Pause,
		[Token(Token = "0x4000518")]
		FastForward,
		[Token(Token = "0x4000519")]
		Rewind,
		[Token(Token = "0x400051A")]
		SkipForward,
		[Token(Token = "0x400051B")]
		SkipBack,
		[Token(Token = "0x400051C")]
		Stop
	}

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private ButtonType m_ButtonType;

	[Token(Token = "0x17000045")]
	public ButtonType buttonType
	{
		[Token(Token = "0x600038A")]
		[Address(RVA = "0xB22198", Offset = "0xB22198", VA = "0xB22198")]
		get
		{
			return default(ButtonType);
		}
		[Token(Token = "0x600038B")]
		[Address(RVA = "0xB221A0", Offset = "0xB221A0", VA = "0xB221A0")]
		set
		{
		}
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0xB221C4", Offset = "0xB221C4", VA = "0xB221C4", Slot = "44")]
	protected override void OnPopulateMesh(VertexHelper toFill)
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xB2365C", Offset = "0xB2365C", VA = "0xB2365C")]
	public MediaPlayerImage()
	{
	}
}
[Token(Token = "0x20000E9")]
public class MoviePlayerSample : MonoBehaviour
{
	[Token(Token = "0x20000EA")]
	public enum VideoShape
	{
		[Token(Token = "0x4000531")]
		_360,
		[Token(Token = "0x4000532")]
		_180,
		[Token(Token = "0x4000533")]
		Quad
	}

	[Token(Token = "0x20000EB")]
	public enum VideoStereo
	{
		[Token(Token = "0x4000535")]
		Mono,
		[Token(Token = "0x4000536")]
		TopBottom,
		[Token(Token = "0x4000537")]
		LeftRight,
		[Token(Token = "0x4000538")]
		BottomTop
	}

	[Token(Token = "0x20000EC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7283C0", Offset = "0x7283C0")]
	private sealed class <Start>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		[Token(Token = "0x17000049")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003A4")]
			[Address(RVA = "0x9DE4F4", Offset = "0x9DE4F4", VA = "0x9DE4F4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003A6")]
			[Address(RVA = "0x9DE53C", Offset = "0x9DE53C", VA = "0x9DE53C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x9DE300", Offset = "0x9DE300", VA = "0x9DE300")]
		[DebuggerHidden]
		public <Start>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0x9DE32C", Offset = "0x9DE32C", VA = "0x9DE32C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0x9DE330", Offset = "0x9DE330", VA = "0x9DE330", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003A5")]
		[Address(RVA = "0x9DE4FC", Offset = "0x9DE4FC", VA = "0x9DE4FC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000ED")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7283D0", Offset = "0x7283D0")]
	private sealed class <>c__DisplayClass34_0
	{
		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string moviePath;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string drmLicencesUrl;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		[Token(Token = "0x60003A7")]
		[Address(RVA = "0x9DE208", Offset = "0x9DE208", VA = "0x9DE208")]
		public <>c__DisplayClass34_0()
		{
		}

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0x9DE210", Offset = "0x9DE210", VA = "0x9DE210")]
		internal void <Play>b__0()
		{
		}
	}

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool videoPausedBeforeAppPause;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VideoPlayer videoPlayer;

	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVROverlay overlay;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer mediaRenderer;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72A770", Offset = "0x72A770")]
	private bool <IsPlaying>k__BackingField;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72A780", Offset = "0x72A780")]
	private long <Duration>k__BackingField;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72A790", Offset = "0x72A790")]
	private long <PlaybackPosition>k__BackingField;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RenderTexture copyTexture;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material externalTex2DMaterial;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string MovieName;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string DrmLicenseUrl;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool LoopVideo;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public VideoShape Shape;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public VideoStereo Stereo;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool AutoDetectStereoLayout;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool DisplayMono;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private VideoShape _LastShape;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private VideoStereo _LastStereo;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _LastDisplayMono;

	[Token(Token = "0x17000046")]
	public bool IsPlaying
	{
		[Token(Token = "0x600038E")]
		[Address(RVA = "0xB2483C", Offset = "0xB2483C", VA = "0xB2483C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E8B8", Offset = "0x72E8B8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600038F")]
		[Address(RVA = "0xB24844", Offset = "0xB24844", VA = "0xB24844")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E8C8", Offset = "0x72E8C8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000047")]
	public long Duration
	{
		[Token(Token = "0x6000390")]
		[Address(RVA = "0xB24850", Offset = "0xB24850", VA = "0xB24850")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E8D8", Offset = "0x72E8D8")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x6000391")]
		[Address(RVA = "0xB24858", Offset = "0xB24858", VA = "0xB24858")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E8E8", Offset = "0x72E8E8")]
		private set
		{
		}
	}

	[Token(Token = "0x17000048")]
	public long PlaybackPosition
	{
		[Token(Token = "0x6000392")]
		[Address(RVA = "0xB24860", Offset = "0xB24860", VA = "0xB24860")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E8F8", Offset = "0x72E8F8")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x6000393")]
		[Address(RVA = "0xB24868", Offset = "0xB24868", VA = "0xB24868")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E908", Offset = "0x72E908")]
		private set
		{
		}
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xB24870", Offset = "0xB24870", VA = "0xB24870")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0xB24B1C", Offset = "0xB24B1C", VA = "0xB24B1C")]
	private bool IsLocalVideo(string movieName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0xB24B80", Offset = "0xB24B80", VA = "0xB24B80")]
	private void UpdateShapeAndStereo()
	{
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0xB24EB8", Offset = "0xB24EB8", VA = "0xB24EB8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72E918", Offset = "0x72E918")]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0xB24F30", Offset = "0xB24F30", VA = "0xB24F30")]
	public void Play(string moviePath, string drmLicencesUrl)
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0xB25218", Offset = "0xB25218", VA = "0xB25218")]
	public void Play()
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xB252AC", Offset = "0xB252AC", VA = "0xB252AC")]
	public void Pause()
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0xB2533C", Offset = "0xB2533C", VA = "0xB2533C")]
	public void SeekTo(long position)
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0xB25440", Offset = "0xB25440", VA = "0xB25440")]
	private void Update()
	{
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0xB25A08", Offset = "0xB25A08", VA = "0xB25A08")]
	public void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0xB25AC0", Offset = "0xB25AC0", VA = "0xB25AC0")]
	public void Stop()
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0xB25B50", Offset = "0xB25B50", VA = "0xB25B50")]
	private void OnApplicationPause(bool appWasPaused)
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0xB25C3C", Offset = "0xB25C3C", VA = "0xB25C3C")]
	public MoviePlayerSample()
	{
	}
}
[Token(Token = "0x20000EE")]
public class MoviePlayerSampleControls : MonoBehaviour
{
	[Token(Token = "0x20000EF")]
	private enum PlaybackState
	{
		[Token(Token = "0x4000555")]
		Playing,
		[Token(Token = "0x4000556")]
		Paused,
		[Token(Token = "0x4000557")]
		Rewinding,
		[Token(Token = "0x4000558")]
		FastForwarding
	}

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MoviePlayerSample Player;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRInputModule InputModule;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRGazePointer GazePointer;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject LeftHand;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject RightHand;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Canvas Canvas;

	[Token(Token = "0x4000545")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ButtonDownListener PlayPause;

	[Token(Token = "0x4000546")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MediaPlayerImage PlayPauseImage;

	[Token(Token = "0x4000547")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.UI.Slider ProgressBar;

	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ButtonDownListener FastForward;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MediaPlayerImage FastForwardImage;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ButtonDownListener Rewind;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public MediaPlayerImage RewindImage;

	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float TimeoutTime;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool _isVisible;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _lastButtonTime;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool _didSeek;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private long _seekPreviousPosition;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private long _rewindStartPosition;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float _rewindStartTime;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private PlaybackState _state;

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0xB25C4C", Offset = "0xB25C4C", VA = "0xB25C4C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0xB25FA0", Offset = "0xB25FA0", VA = "0xB25FA0")]
	private void OnPlayPauseClicked()
	{
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0xB2617C", Offset = "0xB2617C", VA = "0xB2617C")]
	private void OnFastForwardClicked()
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0xB262B0", Offset = "0xB262B0", VA = "0xB262B0")]
	private void OnRewindClicked()
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0xB263B8", Offset = "0xB263B8", VA = "0xB263B8")]
	private void OnSeekBarMoved(float value)
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0xB26284", Offset = "0xB26284", VA = "0xB26284")]
	private void Seek(long pos)
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0xB26418", Offset = "0xB26418", VA = "0xB26418")]
	private void Update()
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xB25E8C", Offset = "0xB25E8C", VA = "0xB25E8C")]
	private void SetVisible(bool visible)
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xB2677C", Offset = "0xB2677C", VA = "0xB2677C")]
	public MoviePlayerSampleControls()
	{
	}
}
[Token(Token = "0x20000F0")]
public static class VectorUtil
{
	[Token(Token = "0x60003B2")]
	[Address(RVA = "0x9CDCC0", Offset = "0x9CDCC0", VA = "0x9CDCC0")]
	public static Vector4 ToVector(this Rect rect)
	{
		return default(Vector4);
	}
}
[Token(Token = "0x20000F1")]
public class AppDeeplinkUI : MonoBehaviour
{
	[Token(Token = "0x4000559")]
	private const ulong UNITY_COMPANION_APP_ID = 3535750239844224uL;

	[Token(Token = "0x400055A")]
	private const ulong UNREAL_COMPANION_APP_ID = 4055411724486843uL;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform deeplinkAppId;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform deeplinkMessage;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform uiLaunchType;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RectTransform uiLaunchSource;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RectTransform uiDeepLinkMessage;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool inMenu;

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0x1023B3C", Offset = "0x1023B3C", VA = "0x1023B3C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0x1023F38", Offset = "0x1023F38", VA = "0x1023F38")]
	private void Update()
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0x10241C4", Offset = "0x10241C4", VA = "0x10241C4")]
	private void LaunchUnrealDeeplinkSample()
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0x102432C", Offset = "0x102432C", VA = "0x102432C")]
	private void LaunchSelf()
	{
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0x1024498", Offset = "0x1024498", VA = "0x1024498")]
	private void LaunchOtherApp()
	{
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0x1024628", Offset = "0x1024628", VA = "0x1024628")]
	public AppDeeplinkUI()
	{
	}
}
[Token(Token = "0x20000F2")]
public class CustomDebugUI : MonoBehaviour
{
	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CustomDebugUI instance;

	[Token(Token = "0x4000563")]
	private const BindingFlags privateFlags = BindingFlags.Instance | BindingFlags.NonPublic;

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0xE281EC", Offset = "0xE281EC", VA = "0xE281EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0xE28240", Offset = "0xE28240", VA = "0xE28240")]
	private void Start()
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0xE28244", Offset = "0xE28244", VA = "0xE28244")]
	private void Update()
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xE28248", Offset = "0xE28248", VA = "0xE28248")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xE284BC", Offset = "0xE284BC", VA = "0xE284BC")]
	public void RemoveFromCanvas(RectTransform element, int targetCanvas = 0)
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xE286EC", Offset = "0xE286EC", VA = "0xE286EC")]
	public CustomDebugUI()
	{
	}
}
[Token(Token = "0x20000F3")]
public class DebugUISample : MonoBehaviour
{
	[Token(Token = "0x4000564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool inMenu;

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text sliderText;

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xE2DD50", Offset = "0xE2DD50", VA = "0xE2DD50")]
	private void Start()
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xE2E264", Offset = "0xE2E264", VA = "0xE2E264")]
	public void TogglePressed(Toggle t)
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xE2E324", Offset = "0xE2E324", VA = "0xE2E324")]
	public void RadioPressed(string radioLabel, string group, Toggle t)
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xE2E5A4", Offset = "0xE2E5A4", VA = "0xE2E5A4")]
	public void SliderPressed(float f)
	{
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xE2E684", Offset = "0xE2E684", VA = "0xE2E684")]
	private void Update()
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xE2E768", Offset = "0xE2E768", VA = "0xE2E768")]
	private void LogButtonPressed()
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xE2E7DC", Offset = "0xE2E7DC", VA = "0xE2E7DC")]
	public DebugUISample()
	{
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xE2E7E4", Offset = "0xE2E7E4", VA = "0xE2E7E4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E9D8", Offset = "0x72E9D8")]
	private void <Start>b__2_0(Toggle t)
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xE2E848", Offset = "0xE2E848", VA = "0xE2E848")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E9E8", Offset = "0x72E9E8")]
	private void <Start>b__2_1(Toggle t)
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xE2E8AC", Offset = "0xE2E8AC", VA = "0xE2E8AC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72E9F8", Offset = "0x72E9F8")]
	private void <Start>b__2_2(Toggle t)
	{
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xE2E910", Offset = "0xE2E910", VA = "0xE2E910")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72EA08", Offset = "0x72EA08")]
	private void <Start>b__2_3(Toggle t)
	{
	}
}
[Token(Token = "0x20000F4")]
public class AnalyticsUI : MonoBehaviour
{
	[Token(Token = "0x60003CA")]
	[Address(RVA = "0x1021A58", Offset = "0x1021A58", VA = "0x1021A58")]
	public AnalyticsUI()
	{
	}
}
[Token(Token = "0x20000F5")]
public class SampleUI : MonoBehaviour
{
	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform collectionButton;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform inputText;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform valueText;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool inMenu;

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xAE39E4", Offset = "0xAE39E4", VA = "0xAE39E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xAE3A88", Offset = "0xAE3A88", VA = "0xAE3A88")]
	private void Update()
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0xAE3B74", Offset = "0xAE3B74", VA = "0xAE3B74")]
	private string GetText()
	{
		return null;
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0xAE3BD4", Offset = "0xAE3BD4", VA = "0xAE3BD4")]
	public SampleUI()
	{
	}
}
[Token(Token = "0x20000F6")]
public class StartCrashlytics : MonoBehaviour
{
	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xAEC5C0", Offset = "0xAEC5C0", VA = "0xAEC5C0")]
	public StartCrashlytics()
	{
	}
}
[Token(Token = "0x20000F7")]
public class HandsActiveChecker : MonoBehaviour
{
	[Token(Token = "0x20000F8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7283F0", Offset = "0x7283F0")]
	private sealed class <GetCenterEye>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandsActiveChecker <>4__this;

		[Token(Token = "0x1700004B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003D7")]
			[Address(RVA = "0x9DC61C", Offset = "0x9DC61C", VA = "0x9DC61C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003D9")]
			[Address(RVA = "0x9DC664", Offset = "0x9DC664", VA = "0x9DC664", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x9DC4A0", Offset = "0x9DC4A0", VA = "0x9DC4A0")]
		[DebuggerHidden]
		public <GetCenterEye>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x60003D5")]
		[Address(RVA = "0x9DC4CC", Offset = "0x9DC4CC", VA = "0x9DC4CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003D6")]
		[Address(RVA = "0x9DC4D0", Offset = "0x9DC4D0", VA = "0x9DC4D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003D8")]
		[Address(RVA = "0x9DC624", Offset = "0x9DC624", VA = "0x9DC624", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _notificationPrefab;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _notification;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRCameraRig _cameraRig;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _centerEye;

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xB129DC", Offset = "0xB129DC", VA = "0xB129DC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0xB12AF8", Offset = "0xB12AF8", VA = "0xB12AF8")]
	private void Update()
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0xB12A80", Offset = "0xB12A80", VA = "0xB12A80")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72EA18", Offset = "0x72EA18")]
	private IEnumerator GetCenterEye()
	{
		return null;
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0xB12CA4", Offset = "0xB12CA4", VA = "0xB12CA4")]
	public HandsActiveChecker()
	{
	}
}
[Token(Token = "0x20000F9")]
[ExecuteInEditMode]
public class CharacterCapsule : MonoBehaviour
{
	[Token(Token = "0x4000571")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CharacterController _character;

	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter _meshFilter;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _height;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _radius;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72A7C0", Offset = "0x72A7C0")]
	public int SubdivisionsU;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72A7DC", Offset = "0x72A7DC")]
	public int SubdivisionsV;

	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _subdivisionU;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int _subdivisionV;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3[] _vertices;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int[] _triangles;

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xE268F0", Offset = "0xE268F0", VA = "0xE268F0")]
	private void Update()
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xE27338", Offset = "0xE27338", VA = "0xE27338")]
	public CharacterCapsule()
	{
	}
}
[Token(Token = "0x20000FA")]
public class LocomotionSampleSupport : MonoBehaviour
{
	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LocomotionController lc;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool inMenu;

	[Token(Token = "0x1700004D")]
	private LocomotionTeleport TeleportController
	{
		[Token(Token = "0x60003DC")]
		[Address(RVA = "0xB1E9E8", Offset = "0xB1E9E8", VA = "0xB1E9E8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xB1EA3C", Offset = "0xB1EA3C", VA = "0xB1EA3C")]
	public void Start()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xB1EE44", Offset = "0xB1EE44", VA = "0xB1EE44")]
	public void Update()
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xB1EF30", Offset = "0xB1EF30", VA = "0xB1EF30")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x72EAC8", Offset = "0x72EAC8")]
	private static void Log(string msg)
	{
	}

	[Token(Token = "0x60003E0")]
	public static TActivate ActivateCategory<TCategory, TActivate>(GameObject target) where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x60003E1")]
	protected void ActivateHandlers<TInput, TAim, TTarget, TOrientation, TTransition>() where TInput : TeleportInputHandler where TAim : TeleportAimHandler where TTarget : TeleportTargetHandler where TOrientation : TeleportOrientationHandler where TTransition : TeleportTransition
	{
	}

	[Token(Token = "0x60003E2")]
	protected void ActivateInput<TActivate>() where TActivate : TeleportInputHandler
	{
	}

	[Token(Token = "0x60003E3")]
	protected void ActivateAim<TActivate>() where TActivate : TeleportAimHandler
	{
	}

	[Token(Token = "0x60003E4")]
	protected void ActivateTarget<TActivate>() where TActivate : TeleportTargetHandler
	{
	}

	[Token(Token = "0x60003E5")]
	protected void ActivateOrientation<TActivate>() where TActivate : TeleportOrientationHandler
	{
	}

	[Token(Token = "0x60003E6")]
	protected void ActivateTransition<TActivate>() where TActivate : TeleportTransition
	{
	}

	[Token(Token = "0x60003E7")]
	protected TActivate ActivateCategory<TCategory, TActivate>() where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xB1EF94", Offset = "0xB1EF94", VA = "0xB1EF94")]
	protected void UpdateToggle(Toggle toggle, bool enabled)
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xB1EFD0", Offset = "0xB1EFD0", VA = "0xB1EFD0")]
	private void SetupNonCap()
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xB1F040", Offset = "0xB1F040", VA = "0xB1F040")]
	private void SetupTeleportDefaults()
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xB1F1B0", Offset = "0xB1F1B0", VA = "0xB1F1B0")]
	protected GameObject AddInstance(GameObject template, string label)
	{
		return null;
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0xB1F28C", Offset = "0xB1F28C", VA = "0xB1F28C")]
	private void SetupNodeTeleport()
	{
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0xB1ED3C", Offset = "0xB1ED3C", VA = "0xB1ED3C")]
	private void SetupTwoStickTeleport()
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0xB1F354", Offset = "0xB1F354", VA = "0xB1F354")]
	private void SetupWalkOnly()
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0xB1F3BC", Offset = "0xB1F3BC", VA = "0xB1F3BC")]
	private void SetupLeftStrafeRightTeleport()
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xB1F4B4", Offset = "0xB1F4B4", VA = "0xB1F4B4")]
	public LocomotionSampleSupport()
	{
	}
}
[Token(Token = "0x20000FB")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0x728410", Offset = "0x728410")]
public class OVROverlayCanvas : MonoBehaviour
{
	[Token(Token = "0x20000FC")]
	public enum DrawMode
	{
		[Token(Token = "0x4000592")]
		Opaque,
		[Token(Token = "0x4000593")]
		OpaqueWithClip,
		[Token(Token = "0x4000594")]
		TransparentDefaultAlpha,
		[Token(Token = "0x4000595")]
		TransparentCorrectAlpha
	}

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[HideInInspector]
	private Shader _transparentShader;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[HideInInspector]
	private Shader _opaqueShader;

	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform _rectTransform;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Canvas _canvas;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera _camera;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OVROverlay _overlay;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture _renderTexture;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshRenderer _meshRenderer;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Mesh _quad;

	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material _defaultMat;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int MaxTextureSize;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int MinTextureSize;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float PixelsPerUnit;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int DrawRate;

	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int DrawFrameOffset;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool Expensive;

	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int Layer;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public DrawMode Opacity;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool ScaleViewport;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Plane[] _FrustumPlanes;

	[Token(Token = "0x1700004E")]
	public bool overlayEnabled
	{
		[Token(Token = "0x60003F7")]
		[Address(RVA = "0xDAA9CC", Offset = "0xDAA9CC", VA = "0xDAA9CC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003F8")]
		[Address(RVA = "0xDAAA5C", Offset = "0xDAAA5C", VA = "0xDAAA5C")]
		set
		{
		}
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xDA9448", Offset = "0xDA9448", VA = "0xDA9448")]
	private void Start()
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xDAA038", Offset = "0xDAA038", VA = "0xDAA038")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0xDAA0B8", Offset = "0xDAA0B8", VA = "0xDAA0B8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xDAA1A8", Offset = "0xDAA1A8", VA = "0xDAA1A8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0xDAA298", Offset = "0xDAA298", VA = "0xDAA298", Slot = "4")]
	protected virtual bool ShouldRender()
	{
		return default(bool);
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xDAA4A4", Offset = "0xDAA4A4", VA = "0xDAA4A4")]
	private void Update()
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xDAAB28", Offset = "0xDAAB28", VA = "0xDAAB28")]
	public OVROverlayCanvas()
	{
	}
}
[Token(Token = "0x20000FD")]
public class AugmentedObject : MonoBehaviour
{
	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform shadow;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool groundShadow;

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0x102985C", Offset = "0x102985C", VA = "0x102985C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0x1029A44", Offset = "0x1029A44", VA = "0x1029A44")]
	private void Update()
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0x1029BCC", Offset = "0x1029BCC", VA = "0x1029BCC")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0x1029BD4", Offset = "0x1029BD4", VA = "0x1029BD4")]
	public void Release()
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0x1029BBC", Offset = "0x1029BBC", VA = "0x1029BBC")]
	private void ToggleShadowType()
	{
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0x1029BDC", Offset = "0x1029BDC", VA = "0x1029BDC")]
	public AugmentedObject()
	{
	}
}
[Token(Token = "0x20000FE")]
public class BrushController : MonoBehaviour
{
	[Token(Token = "0x20000FF")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728470", Offset = "0x728470")]
	private sealed class <FadeCameraClearColor>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fadeTime;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color newColor;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <timer>5__2;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color <currentColor>5__3;

		[Token(Token = "0x1700004F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600040B")]
			[Address(RVA = "0x9D6C4C", Offset = "0x9D6C4C", VA = "0x9D6C4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000050")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600040D")]
			[Address(RVA = "0x9D6C94", Offset = "0x9D6C94", VA = "0x9D6C94", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000408")]
		[Address(RVA = "0x9D6B1C", Offset = "0x9D6B1C", VA = "0x9D6B1C")]
		[DebuggerHidden]
		public <FadeCameraClearColor>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0x9D6B48", Offset = "0x9D6B48", VA = "0x9D6B48", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600040A")]
		[Address(RVA = "0x9D6B4C", Offset = "0x9D6B4C", VA = "0x9D6B4C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0x9D6C54", Offset = "0x9D6C54", VA = "0x9D6C54", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000100")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728480", Offset = "0x728480")]
	private sealed class <FadeSphere>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BrushController <>4__this;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool disableOnFinish;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x17000051")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000411")]
			[Address(RVA = "0x9D6E54", Offset = "0x9D6E54", VA = "0x9D6E54", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000052")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000413")]
			[Address(RVA = "0x9D6E9C", Offset = "0x9D6E9C", VA = "0x9D6E9C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600040E")]
		[Address(RVA = "0x9D6C9C", Offset = "0x9D6C9C", VA = "0x9D6C9C")]
		[DebuggerHidden]
		public <FadeSphere>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x9D6CC8", Offset = "0x9D6CC8", VA = "0x9D6CC8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x9D6CCC", Offset = "0x9D6CCC", VA = "0x9D6CCC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000412")]
		[Address(RVA = "0x9D6E5C", Offset = "0x9D6E5C", VA = "0x9D6E5C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PassthroughBrush brush;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer backgroundSphere;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator grabRoutine;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator releaseRoutine;

	[Token(Token = "0x6000401")]
	[Address(RVA = "0x102F788", Offset = "0x102F788", VA = "0x102F788")]
	private void Start()
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0x102FA5C", Offset = "0x102FA5C", VA = "0x102FA5C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0x102FAB8", Offset = "0x102FAB8", VA = "0x102FAB8")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0x102FC38", Offset = "0x102FC38", VA = "0x102FC38")]
	public void Release()
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0x102FD0C", Offset = "0x102FD0C", VA = "0x102FD0C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72EB00", Offset = "0x72EB00")]
	private IEnumerator FadeCameraClearColor(Color newColor, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0x102FB74", Offset = "0x102FB74", VA = "0x102FB74")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72EB60", Offset = "0x72EB60")]
	private IEnumerator FadeSphere(Color newColor, float fadeTime, bool disableOnFinish = false)
	{
		return null;
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0x102FDA8", Offset = "0x102FDA8", VA = "0x102FDA8")]
	public BrushController()
	{
	}
}
[Token(Token = "0x2000101")]
public class EnableUnpremultipliedAlpha : MonoBehaviour
{
	[Token(Token = "0x6000414")]
	[Address(RVA = "0xE4F240", Offset = "0xE4F240", VA = "0xE4F240")]
	private void Start()
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0xE4F2A0", Offset = "0xE4F2A0", VA = "0xE4F2A0")]
	public EnableUnpremultipliedAlpha()
	{
	}
}
[Token(Token = "0x2000102")]
public class Flashlight : MonoBehaviour
{
	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject lightVolume;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light spotlight;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject bulbGlow;

	[Token(Token = "0x6000416")]
	[Address(RVA = "0xE5226C", Offset = "0xE5226C", VA = "0xE5226C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xE523A0", Offset = "0xE523A0", VA = "0xE523A0")]
	public void ToggleFlashlight()
	{
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xE52434", Offset = "0xE52434", VA = "0xE52434")]
	public void EnableFlashlight(bool doEnable)
	{
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0xE5249C", Offset = "0xE5249C", VA = "0xE5249C")]
	public Flashlight()
	{
	}
}
[Token(Token = "0x2000103")]
public class FlashlightController : MonoBehaviour
{
	[Token(Token = "0x2000104")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728490", Offset = "0x728490")]
	private sealed class <FadeLighting>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FlashlightController <>4__this;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sceneLightIntensity;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <currentLight>5__4;

		[Token(Token = "0x17000053")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000426")]
			[Address(RVA = "0x9DA74C", Offset = "0x9DA74C", VA = "0x9DA74C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000054")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000428")]
			[Address(RVA = "0x9DA794", Offset = "0x9DA794", VA = "0x9DA794", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000423")]
		[Address(RVA = "0x9DA540", Offset = "0x9DA540", VA = "0x9DA540")]
		[DebuggerHidden]
		public <FadeLighting>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0x9DA56C", Offset = "0x9DA56C", VA = "0x9DA56C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0x9DA570", Offset = "0x9DA570", VA = "0x9DA570", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0x9DA754", Offset = "0x9DA754", VA = "0x9DA754", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light sceneLight;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform flashlightRoot;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 localPosition;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Quaternion localRotation;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMesh infoText;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GrabObject externalController;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private OVRSkeleton[] skeletons;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private OVRHand[] hands;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int handIndex;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool pinching;

	[Token(Token = "0x600041A")]
	[Address(RVA = "0xE524A4", Offset = "0xE524A4", VA = "0xE524A4")]
	private void Start()
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xE52788", Offset = "0xE52788", VA = "0xE52788")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xE52AD8", Offset = "0xE52AD8", VA = "0xE52AD8")]
	private void FindHands()
	{
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xE52E34", Offset = "0xE52E34", VA = "0xE52E34")]
	private void AlignWithHand(OVRHand hand, OVRSkeleton skeleton)
	{
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0xE53138", Offset = "0xE53138", VA = "0xE53138")]
	private void AlignWithController(OVRInput.Controller controller)
	{
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xE5322C", Offset = "0xE5322C", VA = "0xE5322C")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xE533F8", Offset = "0xE533F8", VA = "0xE533F8")]
	public void Release()
	{
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0xE53344", Offset = "0xE53344", VA = "0xE53344")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72EC60", Offset = "0x72EC60")]
	private IEnumerator FadeLighting(Color newColor, float sceneLightIntensity, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0xE534E0", Offset = "0xE534E0", VA = "0xE534E0")]
	public FlashlightController()
	{
	}
}
[Token(Token = "0x2000105")]
public class GrabObject : MonoBehaviour
{
	[Token(Token = "0x2000106")]
	public enum ManipulationType
	{
		[Token(Token = "0x40005CA")]
		Default,
		[Token(Token = "0x40005CB")]
		ForcedHand,
		[Token(Token = "0x40005CC")]
		DollyHand,
		[Token(Token = "0x40005CD")]
		DollyAttached,
		[Token(Token = "0x40005CE")]
		HorizontalScaled,
		[Token(Token = "0x40005CF")]
		VerticalScaled,
		[Token(Token = "0x40005D0")]
		Menu
	}

	[Token(Token = "0x2000107")]
	public delegate void GrabbedObject(OVRInput.Controller grabHand);

	[Token(Token = "0x2000108")]
	public delegate void ReleasedObject();

	[Token(Token = "0x2000109")]
	public delegate void SetCursorPosition(Vector3 cursorPosition);

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0x72A868", Offset = "0x72A868")]
	public string ObjectName;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "TextAreaAttribute", RVA = "0x72A878", Offset = "0x72A878")]
	public string ObjectInstructions;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ManipulationType objectManipulationType;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool showLaserWhileGrabbed;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Quaternion grabbedRotation;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GrabbedObject GrabbedObjectDelegate;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ReleasedObject ReleasedObjectDelegate;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SetCursorPosition CursorPositionDelegate;

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xE5A0D8", Offset = "0xE5A0D8", VA = "0xE5A0D8")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0xE5A134", Offset = "0xE5A134", VA = "0xE5A134")]
	public void Release()
	{
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0xE5A148", Offset = "0xE5A148", VA = "0xE5A148")]
	public void CursorPos(Vector3 cursorPos)
	{
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0xE5A15C", Offset = "0xE5A15C", VA = "0xE5A15C")]
	public GrabObject()
	{
	}
}
[Token(Token = "0x200010A")]
public class HandMeshMask : MonoBehaviour
{
	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRSkeleton referenceHand;

	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material maskMaterial;

	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A898", Offset = "0x72A898")]
	public int radialDivisions;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A8D0", Offset = "0x72A8D0")]
	public float borderSize;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A908", Offset = "0x72A908")]
	public float fingerTaper;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A940", Offset = "0x72A940")]
	public float fingerTipLength;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A978", Offset = "0x72A978")]
	public float webOffset;

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float handScale;

	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject maskMeshObject;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Mesh maskMesh;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] handVertices;

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector2[] handUVs;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color32[] handColors;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int[] handTriangles;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int vertCounter;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int triCounter;

	[Token(Token = "0x6000439")]
	[Address(RVA = "0xE5BEB0", Offset = "0xE5BEB0", VA = "0xE5BEB0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0xE5C0B0", Offset = "0xE5C0B0", VA = "0xE5C0B0")]
	private void Update()
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0xE5C2BC", Offset = "0xE5C2BC", VA = "0xE5C2BC")]
	private void CreateHandMesh()
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0xE5C940", Offset = "0xE5C940", VA = "0xE5C940")]
	private void AddKnuckleMesh(int knuckleVerts, float point1scale, float point2scale, Vector3 point1, Vector3 point2)
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0xE5CF70", Offset = "0xE5CF70", VA = "0xE5CF70")]
	private void AddPalmMesh(int knuckleVerts)
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xE5F5EC", Offset = "0xE5F5EC", VA = "0xE5F5EC")]
	private void AddVertex(Vector3 position, Vector2 uv, Color color)
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0xE5F6A8", Offset = "0xE5F6A8", VA = "0xE5F6A8")]
	public HandMeshMask()
	{
	}
}
[Token(Token = "0x200010B")]
public class HandMeshUI : MonoBehaviour
{
	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SphereCollider[] knobs;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh[] readouts;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int rightHeldKnob;

	[Token(Token = "0x40005E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int leftHeldKnob;

	[Token(Token = "0x40005E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public OVRSkeleton leftHand;

	[Token(Token = "0x40005E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public OVRSkeleton rightHand;

	[Token(Token = "0x40005E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HandMeshMask leftMask;

	[Token(Token = "0x40005E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public HandMeshMask rightMask;

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xB0FFA8", Offset = "0xB0FFA8", VA = "0xB0FFA8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xB102E0", Offset = "0xB102E0", VA = "0xB102E0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0xB10050", Offset = "0xB10050", VA = "0xB10050")]
	private void SetSliderValue(int sliderID, float value, bool isNormalized)
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0xB106D0", Offset = "0xB106D0", VA = "0xB106D0")]
	private void CheckForHands()
	{
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0xB10BC0", Offset = "0xB10BC0", VA = "0xB10BC0")]
	public HandMeshUI()
	{
	}
}
[Token(Token = "0x200010C")]
public class ObjectManipulator : MonoBehaviour
{
	[Token(Token = "0x200010D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7284A0", Offset = "0x7284A0")]
	private sealed class <StartDemo>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectManipulator <>4__this;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timer>5__2;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <fadeTime>5__3;

		[Token(Token = "0x17000055")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000454")]
			[Address(RVA = "0x9E0A14", Offset = "0x9E0A14", VA = "0x9E0A14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000056")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000456")]
			[Address(RVA = "0x9E0A5C", Offset = "0x9E0A5C", VA = "0x9E0A5C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0x9E0744", Offset = "0x9E0744", VA = "0x9E0744")]
		[DebuggerHidden]
		public <StartDemo>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0x9E0770", Offset = "0x9E0770", VA = "0x9E0770", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0x9E0774", Offset = "0x9E0774", VA = "0x9E0774", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000455")]
		[Address(RVA = "0x9E0A1C", Offset = "0x9E0A1C", VA = "0x9E0A1C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRInput.Controller controller;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject hoverObject;

	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject grabObject;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float grabTime;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 localGrabOffset;

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Quaternion localGrabRotation;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 camGrabPosition;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion camGrabRotation;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 handGrabPosition;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion handGrabRotation;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 cursorPosition;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float rotationOffset;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public LineRenderer laser;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform objectInfo;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public TextMesh objectNameLabel;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public TextMesh objectInstructionsLabel;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Image objectInfoBG;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject demoObjects;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public OVRPassthroughLayer passthrough;

	[Token(Token = "0x6000445")]
	[Address(RVA = "0xDAC048", Offset = "0xDAC048", VA = "0xDAC048")]
	private void Start()
	{
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0xDAC280", Offset = "0xDAC280", VA = "0xDAC280")]
	private void Update()
	{
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0xDACED0", Offset = "0xDACED0", VA = "0xDACED0")]
	private void GrabHoverObject(GameObject grbObj, Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0xDADAD8", Offset = "0xDADAD8", VA = "0xDADAD8")]
	private void ReleaseObject()
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0xDAC208", Offset = "0xDAC208", VA = "0xDAC208")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72ED10", Offset = "0x72ED10")]
	private IEnumerator StartDemo()
	{
		return null;
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0xDAC4EC", Offset = "0xDAC4EC", VA = "0xDAC4EC")]
	private void FindHoverObject(Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0xDAD194", Offset = "0xDAD194", VA = "0xDAD194")]
	private void ManipulateObject(GameObject obj, Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0xDADD9C", Offset = "0xDADD9C", VA = "0xDADD9C")]
	private void ClampGrabOffset(ref Vector3 localOffset, float thumbY)
	{
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0xDADE28", Offset = "0xDADE28", VA = "0xDADE28")]
	private Vector3 ClampScale(Vector3 localScale, Vector2 thumb)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0xDADE58", Offset = "0xDADE58", VA = "0xDADE58")]
	private void CheckForDominantHand()
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0xDADC64", Offset = "0xDADC64", VA = "0xDADC64")]
	private void AssignInstructions(GrabObject targetObject)
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0xDADF7C", Offset = "0xDADF7C", VA = "0xDADF7C")]
	public ObjectManipulator()
	{
	}
}
[Token(Token = "0x200010E")]
public class OverlayPassthrough : MonoBehaviour
{
	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x6000457")]
	[Address(RVA = "0xDAE5DC", Offset = "0xDAE5DC", VA = "0xDAE5DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0xDAE774", Offset = "0xDAE774", VA = "0xDAE774")]
	private void Update()
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0xDAE83C", Offset = "0xDAE83C", VA = "0xDAE83C")]
	public OverlayPassthrough()
	{
	}
}
[Token(Token = "0x200010F")]
public class PassthroughBrush : MonoBehaviour
{
	[Token(Token = "0x2000110")]
	public enum BrushState
	{
		[Token(Token = "0x400060D")]
		Idle,
		[Token(Token = "0x400060E")]
		Inking
	}

	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject lineSegmentPrefab;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject lineContainer;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool forceActive;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LineRenderer currentLineSegment;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Vector3> inkPositions;

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float minInkDist;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float strokeWidth;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float strokeLength;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private BrushState brushStatus;

	[Token(Token = "0x600045A")]
	[Address(RVA = "0xD114A0", Offset = "0xD114A0", VA = "0xD114A0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0xD114A8", Offset = "0xD114A8", VA = "0xD114A8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0xD11790", Offset = "0xD11790", VA = "0xD11790")]
	private void StartLine(Vector3 inkPos)
	{
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0xD11988", Offset = "0xD11988", VA = "0xD11988")]
	private void UpdateLine(Vector3 inkPos)
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0xD11B30", Offset = "0xD11B30", VA = "0xD11B30")]
	public void ClearLines()
	{
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0xD1169C", Offset = "0xD1169C", VA = "0xD1169C")]
	public void UndoInkLine()
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0xD11C0C", Offset = "0xD11C0C", VA = "0xD11C0C")]
	public PassthroughBrush()
	{
	}
}
[Token(Token = "0x2000111")]
public class PassthroughController : MonoBehaviour
{
	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x6000461")]
	[Address(RVA = "0xD11CA4", Offset = "0xD11CA4", VA = "0xD11CA4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0xD11E3C", Offset = "0xD11E3C", VA = "0xD11E3C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0xD11FA0", Offset = "0xD11FA0", VA = "0xD11FA0")]
	public PassthroughController()
	{
	}
}
[Token(Token = "0x2000112")]
public class PassthroughProjectionSurface : MonoBehaviour
{
	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshRenderer quadOutline;

	[Token(Token = "0x6000464")]
	[Address(RVA = "0xD11FA8", Offset = "0xD11FA8", VA = "0xD11FA8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0xD121BC", Offset = "0xD121BC", VA = "0xD121BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0xD1238C", Offset = "0xD1238C", VA = "0xD1238C")]
	public PassthroughProjectionSurface()
	{
	}
}
[Token(Token = "0x2000113")]
public class PassthroughStyler : MonoBehaviour
{
	[Token(Token = "0x2000114")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7284B0", Offset = "0x7284B0")]
	private sealed class <FadeToCurrentStyle>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <brightness>5__3;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <contrast>5__4;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <posterize>5__5;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Color <edgeCol>5__6;

		[Token(Token = "0x17000057")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000479")]
			[Address(RVA = "0x9E2504", Offset = "0x9E2504", VA = "0x9E2504", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000058")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600047B")]
			[Address(RVA = "0x9E254C", Offset = "0x9E254C", VA = "0x9E254C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0x9E2320", Offset = "0x9E2320", VA = "0x9E2320")]
		[DebuggerHidden]
		public <FadeToCurrentStyle>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000477")]
		[Address(RVA = "0x9E234C", Offset = "0x9E234C", VA = "0x9E234C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x9E2350", Offset = "0x9E2350", VA = "0x9E2350", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x9E250C", Offset = "0x9E250C", VA = "0x9E250C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000115")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7284C0", Offset = "0x7284C0")]
	private sealed class <FadeToDefaultPassthrough>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <brightness>5__3;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <contrast>5__4;

		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <posterize>5__5;

		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Color <edgeCol>5__6;

		[Token(Token = "0x17000059")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600047F")]
			[Address(RVA = "0x9E2778", Offset = "0x9E2778", VA = "0x9E2778", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000481")]
			[Address(RVA = "0x9E27C0", Offset = "0x9E27C0", VA = "0x9E27C0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0x9E2554", Offset = "0x9E2554", VA = "0x9E2554")]
		[DebuggerHidden]
		public <FadeToDefaultPassthrough>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x9E2580", Offset = "0x9E2580", VA = "0x9E2580", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0x9E2584", Offset = "0x9E2584", VA = "0x9E2584", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0x9E2780", Offset = "0x9E2780", VA = "0x9E2780", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator fadeIn;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator fadeOut;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RectTransform[] menuOptions;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RectTransform colorWheel;

	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture2D colorTexture;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 cursorPosition;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool settingColor;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color savedColor;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float savedBrightness;

	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float savedContrast;

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float savedPosterize;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public CanvasGroup mainCanvas;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject[] compactObjects;

	[Token(Token = "0x6000467")]
	[Address(RVA = "0xD12394", Offset = "0xD12394", VA = "0xD12394")]
	private void Start()
	{
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xD126CC", Offset = "0xD126CC", VA = "0xD126CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xD12924", Offset = "0xD12924", VA = "0xD12924")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xD12AA8", Offset = "0xD12AA8", VA = "0xD12AA8")]
	public void Release()
	{
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0xD12A20", Offset = "0xD12A20", VA = "0xD12A20")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72EDC0", Offset = "0x72EDC0")]
	private IEnumerator FadeToCurrentStyle(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0xD12B98", Offset = "0xD12B98", VA = "0xD12B98")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72EE20", Offset = "0x72EE20")]
	private IEnumerator FadeToDefaultPassthrough(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0xD12C20", Offset = "0xD12C20", VA = "0xD12C20")]
	public void OnBrightnessChanged(float newValue)
	{
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0xD12C40", Offset = "0xD12C40", VA = "0xD12C40")]
	public void OnContrastChanged(float newValue)
	{
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0xD12C60", Offset = "0xD12C60", VA = "0xD12C60")]
	public void OnPosterizeChanged(float newValue)
	{
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0xD12C80", Offset = "0xD12C80", VA = "0xD12C80")]
	public void OnAlphaChanged(float newValue)
	{
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xD12650", Offset = "0xD12650", VA = "0xD12650")]
	private void ShowFullMenu(bool doShow)
	{
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xD12CE4", Offset = "0xD12CE4", VA = "0xD12CE4")]
	public void Cursor(Vector3 cP)
	{
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xD12CF0", Offset = "0xD12CF0", VA = "0xD12CF0")]
	public void DoColorDrag(bool doDrag)
	{
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xD126E4", Offset = "0xD126E4", VA = "0xD126E4")]
	public void GetColorFromWheel()
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xD12CFC", Offset = "0xD12CFC", VA = "0xD12CFC")]
	public PassthroughStyler()
	{
	}
}
[Token(Token = "0x2000116")]
public class PassthroughSurface : MonoBehaviour
{
	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x6000482")]
	[Address(RVA = "0xD12D40", Offset = "0xD12D40", VA = "0xD12D40")]
	private void Start()
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0xD12E00", Offset = "0xD12E00", VA = "0xD12E00")]
	public PassthroughSurface()
	{
	}
}
[Token(Token = "0x2000117")]
public class SPPquad : MonoBehaviour
{
	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRInput.Controller controllerHand;

	[Token(Token = "0x6000484")]
	[Address(RVA = "0xAE36F4", Offset = "0xAE36F4", VA = "0xAE36F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0xAE3938", Offset = "0xAE3938", VA = "0xAE3938")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0xAE3990", Offset = "0xAE3990", VA = "0xAE3990")]
	public void Release()
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0xAE39DC", Offset = "0xAE39DC", VA = "0xAE39DC")]
	public SPPquad()
	{
	}
}
[Token(Token = "0x2000118")]
public class SceneSampler : MonoBehaviour
{
	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int currentSceneIndex;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject displayText;

	[Token(Token = "0x6000488")]
	[Address(RVA = "0xAE65C4", Offset = "0xAE65C4", VA = "0xAE65C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0xAE663C", Offset = "0xAE663C", VA = "0xAE663C")]
	private void Update()
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0xAE6960", Offset = "0xAE6960", VA = "0xAE6960")]
	public SceneSampler()
	{
	}
}
[Token(Token = "0x2000119")]
public class SelectivePassthroughExperience : MonoBehaviour
{
	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject leftMaskObject;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject rightMaskObject;

	[Token(Token = "0x600048B")]
	[Address(RVA = "0xAE7340", Offset = "0xAE7340", VA = "0xAE7340")]
	private void Update()
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0xAE77C8", Offset = "0xAE77C8", VA = "0xAE77C8")]
	public SelectivePassthroughExperience()
	{
	}
}
[Token(Token = "0x200011A")]
public class StartMenu : MonoBehaviour
{
	[Token(Token = "0x200011B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7284D0", Offset = "0x7284D0")]
	private sealed class <>c__DisplayClass3_0
	{
		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int sceneIndex;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public StartMenu <>4__this;

		[Token(Token = "0x6000490")]
		[Address(RVA = "0x1B1E7F0", Offset = "0x1B1E7F0", VA = "0x1B1E7F0")]
		public <>c__DisplayClass3_0()
		{
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0x1B1E7F8", Offset = "0x1B1E7F8", VA = "0x1B1E7F8")]
		internal void <Start>b__0()
		{
		}
	}

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVROverlay overlay;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVROverlay text;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig vrRig;

	[Token(Token = "0x600048D")]
	[Address(RVA = "0xAEC5C8", Offset = "0xAEC5C8", VA = "0xAEC5C8")]
	private void Start()
	{
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0xAEC7DC", Offset = "0xAEC7DC", VA = "0xAEC7DC")]
	private void LoadScene(int idx)
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0xAEC8EC", Offset = "0xAEC8EC", VA = "0xAEC8EC")]
	public StartMenu()
	{
	}
}
[Token(Token = "0x200011C")]
public class ButtonTest : MonoBehaviour
{
	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private InputDevice contrllerR;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private InputDevice headController;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private InputDevice contrllerL;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float m_AxisToPressThreshold;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject dbugGameObj;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Dictionary<string, DebugText> DebugText_Dic;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform headInfoRoot;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform leftControllerInfoRoot;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform rightControllerInfoRoot;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float delte;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private int flag;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int[] amplit;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int time;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool lastState_trigger;

	[Token(Token = "0x6000492")]
	[Address(RVA = "0xE17A90", Offset = "0xE17A90", VA = "0xE17A90")]
	public void Start()
	{
	}

	[Token(Token = "0x6000493")]
	[Address(RVA = "0xE17EF8", Offset = "0xE17EF8", VA = "0xE17EF8")]
	public void AddDebugText(string name, string info, Transform root)
	{
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0xE1819C", Offset = "0xE1819C", VA = "0xE1819C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0xE19A7C", Offset = "0xE19A7C", VA = "0xE19A7C")]
	public ButtonTest()
	{
	}
}
[Token(Token = "0x200011D")]
public class DebugText : MonoBehaviour
{
	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text text;

	[Token(Token = "0x6000496")]
	[Address(RVA = "0xE2BD7C", Offset = "0xE2BD7C", VA = "0xE2BD7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0xE2BE0C", Offset = "0xE2BE0C", VA = "0xE2BE0C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0xE18110", Offset = "0xE18110", VA = "0xE18110")]
	public void SetText(string info)
	{
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0xE2BE10", Offset = "0xE2BE10", VA = "0xE2BE10")]
	private void Update()
	{
	}

	[Token(Token = "0x600049A")]
	[Address(RVA = "0xE2BE14", Offset = "0xE2BE14", VA = "0xE2BE14")]
	public DebugText()
	{
	}
}
[Token(Token = "0x200011E")]
public class ImeDelegateImpl : ImeDelegateBase, IDragHandler, IEventSystemHandler, IPointerDownHandler, IPointerUpHandler
{
	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text mText;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject mPanel;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ImeManager mManager;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Texture2D mTexture;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector2 mTextureSize;

	[Token(Token = "0x600049B")]
	[Address(RVA = "0xB14A68", Offset = "0xB14A68", VA = "0xB14A68", Slot = "4")]
	public override void OnIMEShow(Vector2 vSize)
	{
	}

	[Token(Token = "0x600049C")]
	[Address(RVA = "0xB14BDC", Offset = "0xB14BDC", VA = "0xB14BDC", Slot = "5")]
	public override void OnIMEHide()
	{
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0xB14C6C", Offset = "0xB14C6C", VA = "0xB14C6C", Slot = "6")]
	public override void OnIMECommit(string strCommit)
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0xB14CC8", Offset = "0xB14CC8", VA = "0xB14CC8", Slot = "7")]
	public override void OnIMEKey(SGImeKey key)
	{
	}

	[Token(Token = "0x600049F")]
	[Address(RVA = "0xB14D9C", Offset = "0xB14D9C", VA = "0xB14D9C", Slot = "8")]
	public override void OnIMEError(SGImeError nType, string strErr)
	{
	}

	[Token(Token = "0x60004A0")]
	[Address(RVA = "0xB14DA0", Offset = "0xB14DA0", VA = "0xB14DA0")]
	private void Start()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0xB14F4C", Offset = "0xB14F4C", VA = "0xB14F4C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0xB14DA4", Offset = "0xB14DA4", VA = "0xB14DA4")]
	private void CreateTexture()
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0xB14FD8", Offset = "0xB14FD8", VA = "0xB14FD8")]
	private void CorrectPos(ref float x, ref float y)
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0xB1507C", Offset = "0xB1507C", VA = "0xB1507C")]
	private void DispatchMessageToAndroid(SGImeMotionEventType type, PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0xB15218", Offset = "0xB15218", VA = "0xB15218")]
	private void LogEvent(string prefix, PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0xB154FC", Offset = "0xB154FC", VA = "0xB154FC")]
	public void OnBeginDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0xB15548", Offset = "0xB15548", VA = "0xB15548", Slot = "11")]
	public void OnDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0xB155B0", Offset = "0xB155B0", VA = "0xB155B0")]
	public void OnEndDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0xB155FC", Offset = "0xB155FC", VA = "0xB155FC")]
	public void OnPointerClick(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xB15648", Offset = "0xB15648", VA = "0xB15648", Slot = "12")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xB156B0", Offset = "0xB156B0", VA = "0xB156B0")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xB156FC", Offset = "0xB156FC", VA = "0xB156FC")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xB15770", Offset = "0xB15770", VA = "0xB15770", Slot = "13")]
	public void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xB157D8", Offset = "0xB157D8", VA = "0xB157D8", Slot = "9")]
	public override void SetPose(Action<Transform> fun)
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xB157DC", Offset = "0xB157DC", VA = "0xB157DC", Slot = "10")]
	public override Transform GetTransform()
	{
		return null;
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xB157E4", Offset = "0xB157E4", VA = "0xB157E4")]
	public ImeDelegateImpl()
	{
	}
}
[Token(Token = "0x200011F")]
public class SGViewGather
{
	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject[] mViews;

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xAE3484", Offset = "0xAE3484", VA = "0xAE3484")]
	public SGViewGather(GameObject[] param)
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xAE34B8", Offset = "0xAE34B8", VA = "0xAE34B8")]
	public void SetActive(bool bActive)
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0xAE35A0", Offset = "0xAE35A0", VA = "0xAE35A0")]
	public bool FindName(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xAE3634", Offset = "0xAE3634", VA = "0xAE3634")]
	public void SetTexture(Texture2D tex)
	{
	}
}
[Token(Token = "0x2000120")]
public class SGMouseTracker
{
	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool mDownOld;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Vector2 mPtOld;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private SGImeMotionEventType mEvent;

	[Token(Token = "0x400065A")]
	private const float mTrackRadius = 10f;

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private long mTimeDown;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool mLongPressed;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private long mIntervelLongPress;

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0xAE31D4", Offset = "0xAE31D4", VA = "0xAE31D4")]
	public bool Track(Vector2 pt, bool bDown)
	{
		return default(bool);
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0xAE3448", Offset = "0xAE3448", VA = "0xAE3448")]
	public bool TrackOuter()
	{
		return default(bool);
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0xAE3464", Offset = "0xAE3464", VA = "0xAE3464")]
	public Vector2 GetPoint()
	{
		return default(Vector2);
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0xAE346C", Offset = "0xAE346C", VA = "0xAE346C")]
	public SGImeMotionEventType GetEvent()
	{
		return default(SGImeMotionEventType);
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0xAE3380", Offset = "0xAE3380", VA = "0xAE3380")]
	private float PointDist(Vector2 ptNew, Vector2 ptOld)
	{
		return default(float);
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0xAE3474", Offset = "0xAE3474", VA = "0xAE3474")]
	public SGMouseTracker()
	{
	}
}
[Token(Token = "0x2000121")]
public class ImeDelegateImpl_kbd : ImeDelegateBase
{
	[Token(Token = "0x400065E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static IVrInputField _inputField;

	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] mKbdViews;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SGViewGather mKbdView;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ImeManager mManager;

	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Texture2D mTexture;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector2 mTextureSize;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector2 mPtKbd;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SGMouseTracker mTracker;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float fixDistance;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 posOffSet;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform tr;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Action<Transform> setPoseAction;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public XRRayInteractor leftXRRayInteractor;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public XRRayInteractor rightXRRayInteractor;

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0xB157F8", Offset = "0xB157F8", VA = "0xB157F8")]
	public void Awake()
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0xB15868", Offset = "0xB15868", VA = "0xB15868")]
	public void SetPos()
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xB159E0", Offset = "0xB159E0", VA = "0xB159E0", Slot = "9")]
	public override void SetPose(Action<Transform> fun)
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xB159E8", Offset = "0xB159E8", VA = "0xB159E8", Slot = "10")]
	public override Transform GetTransform()
	{
		return null;
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xB15A04", Offset = "0xB15A04", VA = "0xB15A04", Slot = "4")]
	public override void OnIMEShow(Vector2 vSize)
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xB15D0C", Offset = "0xB15D0C", VA = "0xB15D0C", Slot = "5")]
	public override void OnIMEHide()
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xB15F04", Offset = "0xB15F04", VA = "0xB15F04", Slot = "6")]
	public override void OnIMECommit(string strCommit)
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xB160F4", Offset = "0xB160F4", VA = "0xB160F4", Slot = "7")]
	public override void OnIMEKey(SGImeKey key)
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xB15D9C", Offset = "0xB15D9C", VA = "0xB15D9C")]
	public void FinishInput()
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xB1611C", Offset = "0xB1611C", VA = "0xB1611C", Slot = "8")]
	public override void OnIMEError(SGImeError nType, string strErr)
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xB15F7C", Offset = "0xB15F7C", VA = "0xB15F7C")]
	public void KeyPressEvent(KeyCode code, char c, EventModifiers modifiers)
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0xB16120", Offset = "0xB16120", VA = "0xB16120")]
	private void Start()
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xB161AC", Offset = "0xB161AC", VA = "0xB161AC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0xB161B0", Offset = "0xB161B0", VA = "0xB161B0")]
	private void Update()
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0xB1622C", Offset = "0xB1622C", VA = "0xB1622C")]
	private void RaycastHitCheck(XRRayInteractor xRRayInteractor, InputDevice inputDevice)
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0xB15B78", Offset = "0xB15B78", VA = "0xB15B78")]
	private void CreateTexture(Vector2 vSize)
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0xB16568", Offset = "0xB16568", VA = "0xB16568")]
	private void DispatchMessageToAndroid(SGImeMotionEventType type, Vector2 pt)
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xB16624", Offset = "0xB16624", VA = "0xB16624")]
	private void LogEvent(string prefix, PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0xB164C8", Offset = "0xB164C8", VA = "0xB164C8")]
	private void CheckMouseEvent(RaycastHit hit, bool isDown, bool isValid)
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xB16908", Offset = "0xB16908", VA = "0xB16908")]
	private bool Point2UV(RaycastHit hitInfo, ref Vector2 ptUV)
	{
		return default(bool);
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xB16A44", Offset = "0xB16A44", VA = "0xB16A44")]
	public ImeDelegateImpl_kbd()
	{
	}
}
[Token(Token = "0x2000122")]
internal class UnderlineProperty
{
	[Token(Token = "0x400066C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Color _color;

	[Token(Token = "0x400066D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 _position;

	[Token(Token = "0x400066E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float _width;

	[Token(Token = "0x400066F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float _height;

	[Token(Token = "0x4000670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector2 _privot;

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xDE8A00", Offset = "0xDE8A00", VA = "0xDE8A00")]
	public UnderlineProperty()
	{
	}
}
[Token(Token = "0x2000123")]
public class MultipleLinkButton : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
{
	[Token(Token = "0x4000671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text _text;

	[Token(Token = "0x4000672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int _curCharacterCount;

	[Token(Token = "0x4000673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Image> _lines;

	[Token(Token = "0x4000674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Action _clickEvent;

	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool _isInitUnderline;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool m_bNeedPaint;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string m_strLastText;

	[Token(Token = "0x1700005B")]
	public Action ClickEvent
	{
		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x122CF8C", Offset = "0x122CF8C", VA = "0x122CF8C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x122CF94", Offset = "0x122CF94", VA = "0x122CF94")]
		set
		{
		}
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0x122CF9C", Offset = "0x122CF9C", VA = "0x122CF9C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0x122D0A4", Offset = "0x122D0A4", VA = "0x122D0A4")]
	private void Update()
	{
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0x122D2A8", Offset = "0x122D2A8", VA = "0x122D2A8")]
	private List<UnderlineProperty> GetUnderlinePropertys()
	{
		return null;
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0x122DF2C", Offset = "0x122DF2C", VA = "0x122DF2C")]
	private float GetWidth(int idx, IList<UICharInfo> info)
	{
		return default(float);
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0x122E2AC", Offset = "0x122E2AC", VA = "0x122E2AC")]
	private Vector2 GetTextAnchorPivot(TextAnchor anchor)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0x122D79C", Offset = "0x122D79C", VA = "0x122D79C")]
	private void CreateUnderLines(List<UnderlineProperty> list)
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0x122E2E8", Offset = "0x122E2E8", VA = "0x122E2E8")]
	public void CleanUnderLines()
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0x122E3F0", Offset = "0x122E3F0", VA = "0x122E3F0", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0x122E5CC", Offset = "0x122E5CC", VA = "0x122E5CC", Slot = "5")]
	public void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0x122E7A8", Offset = "0x122E7A8", VA = "0x122E7A8")]
	public void SetPaintUnderLine(bool p_bNeedPaint)
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0x122E864", Offset = "0x122E864", VA = "0x122E864")]
	public void SetUnderLineText(string p_strPaintText, string p_strLastText)
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0x122EA14", Offset = "0x122EA14", VA = "0x122EA14")]
	public MultipleLinkButton()
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0x122EA98", Offset = "0x122EA98", VA = "0x122EA98")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72EF20", Offset = "0x72EF20")]
	private void <Start>b__10_0()
	{
	}
}
[Token(Token = "0x2000124")]
public class TextHandler : MonoBehaviour, IPointerUpHandler, IEventSystemHandler, IPointerDownHandler
{
	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ImeManager mManager;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SGImeInputType mInputType;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public SGImeTextType mTextType;

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0x128F788", Offset = "0x128F788", VA = "0x128F788")]
	private void Start()
	{
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0x128F78C", Offset = "0x128F78C", VA = "0x128F78C")]
	private void Update()
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0x128F790", Offset = "0x128F790", VA = "0x128F790", Slot = "5")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0x128F794", Offset = "0x128F794", VA = "0x128F794", Slot = "4")]
	public void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0x128F850", Offset = "0x128F850", VA = "0x128F850")]
	private void LogEvent(string prefix, PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0x128FB34", Offset = "0x128FB34", VA = "0x128FB34")]
	public TextHandler()
	{
	}
}
[Token(Token = "0x2000125")]
internal interface ImeBase
{
	[Token(Token = "0x60004E6")]
	bool Create(ImeDelegateBase pDelegate);

	[Token(Token = "0x60004E7")]
	void GetSize(ref Vector2 size);

	[Token(Token = "0x60004E8")]
	void Draw(Texture2D tex);

	[Token(Token = "0x60004E9")]
	void OnTouch(float x, float y, SGImeMotionEventType type);

	[Token(Token = "0x60004EA")]
	void UpdateData();

	[Token(Token = "0x60004EB")]
	void Show(SGImeInputType typeInput, SGImeTextType typeText);

	[Token(Token = "0x60004EC")]
	void Hide();

	[Token(Token = "0x60004ED")]
	bool IsShow();
}
[Token(Token = "0x2000126")]
public enum SGImeError
{
	[Token(Token = "0x400067C")]
	UNKNOWN,
	[Token(Token = "0x400067D")]
	SERVICE_NOT_CONNECTED
}
[Token(Token = "0x2000127")]
public enum SGImeKey
{
	[Token(Token = "0x400067F")]
	KEYCODE_COMMIT = -1,
	[Token(Token = "0x4000680")]
	KEYCODE_UNKNOWN = 0,
	[Token(Token = "0x4000681")]
	KEYCODE_ENTER = 66,
	[Token(Token = "0x4000682")]
	KEYCODE_DEL = 67,
	[Token(Token = "0x4000683")]
	KEYCODE_VOICE_START = 1000,
	[Token(Token = "0x4000684")]
	KEYCODE_VOICE_END = 1001
}
[Token(Token = "0x2000128")]
public enum SGImeInputType
{
	[Token(Token = "0x4000686")]
	TYPE_CLASS_TEXT = 1,
	[Token(Token = "0x4000687")]
	TYPE_CLASS_NUMBER,
	[Token(Token = "0x4000688")]
	TYPE_CLASS_PHONE,
	[Token(Token = "0x4000689")]
	TYPE_CLASS_DATETIME,
	[Token(Token = "0x400068A")]
	TYPE_CLASS_MUTE_TEXT
}
[Token(Token = "0x2000129")]
public enum SGImeTextType
{
	[Token(Token = "0x400068C")]
	TYPE_TEXT_VARIATION_NORMAL = 0,
	[Token(Token = "0x400068D")]
	TYPE_TEXT_VARIATION_URI = 16,
	[Token(Token = "0x400068E")]
	TYPE_TEXT_VARIATION_EMAIL_ADDRESS = 32,
	[Token(Token = "0x400068F")]
	TYPE_TEXT_VARIATION_EMAIL_SUBJECT = 48,
	[Token(Token = "0x4000690")]
	TYPE_TEXT_VARIATION_SHORT_MESSAGE = 64,
	[Token(Token = "0x4000691")]
	TYPE_TEXT_VARIATION_LONG_MESSAGE = 80,
	[Token(Token = "0x4000692")]
	TYPE_TEXT_VARIATION_PERSON_NAME = 96,
	[Token(Token = "0x4000693")]
	TYPE_TEXT_VARIATION_POSTAL_ADDRESS = 112,
	[Token(Token = "0x4000694")]
	TYPE_TEXT_VARIATION_PASSWORD = 128,
	[Token(Token = "0x4000695")]
	TYPE_TEXT_VARIATION_VISIBLE_PASSWORD = 144,
	[Token(Token = "0x4000696")]
	TYPE_TEXT_VARIATION_WEB_EDIT_TEXT = 160,
	[Token(Token = "0x4000697")]
	TYPE_TEXT_VARIATION_FILTER = 176,
	[Token(Token = "0x4000698")]
	TYPE_TEXT_VARIATION_PHONETIC = 192,
	[Token(Token = "0x4000699")]
	TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS = 208,
	[Token(Token = "0x400069A")]
	TYPE_TEXT_VARIATION_WEB_PASSWORD = 224
}
[Token(Token = "0x200012A")]
public enum SGImeMotionEventType
{
	[Token(Token = "0x400069C")]
	ACTION_DOWN = 0,
	[Token(Token = "0x400069D")]
	ACTION_UP = 1,
	[Token(Token = "0x400069E")]
	ACTION_MOVE = 2,
	[Token(Token = "0x400069F")]
	ACTION_CANCEL = 3,
	[Token(Token = "0x40006A0")]
	ACTION_OUTSIDE = 4,
	[Token(Token = "0x40006A1")]
	ACTION_POINTER_DOWN = 5,
	[Token(Token = "0x40006A2")]
	ACTION_POINTER_UP = 6,
	[Token(Token = "0x40006A3")]
	ACTION_HOVER_MOVE = 7,
	[Token(Token = "0x40006A4")]
	ACTION_SCROLL = 8,
	[Token(Token = "0x40006A5")]
	ACTION_HOVER_ENTER = 9,
	[Token(Token = "0x40006A6")]
	ACTION_HOVER_EXIT = 10,
	[Token(Token = "0x40006A7")]
	ACTION_BUTTON_PRESS = 11,
	[Token(Token = "0x40006A8")]
	ACTION_BUTTON_RELEASE = 12,
	[Token(Token = "0x40006A9")]
	ACTION_LONGPRESS = 100
}
[Token(Token = "0x200012B")]
public abstract class ImeDelegateBase : MonoBehaviour
{
	[Token(Token = "0x60004EE")]
	public abstract void OnIMEShow(Vector2 vSize);

	[Token(Token = "0x60004EF")]
	public abstract void OnIMEHide();

	[Token(Token = "0x60004F0")]
	public abstract void OnIMECommit(string strCommit);

	[Token(Token = "0x60004F1")]
	public abstract void OnIMEKey(SGImeKey key);

	[Token(Token = "0x60004F2")]
	public abstract void OnIMEError(SGImeError nType, string strErr);

	[Token(Token = "0x60004F3")]
	public abstract void SetPose(Action<Transform> fun);

	[Token(Token = "0x60004F4")]
	public abstract Transform GetTransform();

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xB14A60", Offset = "0xB14A60", VA = "0xB14A60")]
	protected ImeDelegateBase()
	{
	}
}
[Token(Token = "0x200012C")]
public class DummyIme : ImeBase
{
	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private ImeDelegateBase mDelegate;

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0xE4D1B4", Offset = "0xE4D1B4", VA = "0xE4D1B4", Slot = "4")]
	public bool Create(ImeDelegateBase pDelegate)
	{
		return default(bool);
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xE4D250", Offset = "0xE4D250", VA = "0xE4D250", Slot = "5")]
	public void GetSize(ref Vector2 size)
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xE4D2F8", Offset = "0xE4D2F8", VA = "0xE4D2F8", Slot = "6")]
	public void Draw(Texture2D tex)
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xE4D2FC", Offset = "0xE4D2FC", VA = "0xE4D2FC", Slot = "7")]
	public void OnTouch(float x, float y, SGImeMotionEventType type)
	{
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xE4D300", Offset = "0xE4D300", VA = "0xE4D300", Slot = "8")]
	public void UpdateData()
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xE4D304", Offset = "0xE4D304", VA = "0xE4D304", Slot = "9")]
	public void Show(SGImeInputType typeInput, SGImeTextType typeText)
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0xE4D478", Offset = "0xE4D478", VA = "0xE4D478", Slot = "10")]
	public void Hide()
	{
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xE4D508", Offset = "0xE4D508", VA = "0xE4D508", Slot = "11")]
	public bool IsShow()
	{
		return default(bool);
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xE4D510", Offset = "0xE4D510", VA = "0xE4D510")]
	public DummyIme()
	{
	}
}
[Token(Token = "0x200012D")]
public class SGIme : ImeBase
{
	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool mUseAndroid;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AndroidJavaObject javaIme;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ImeDelegateBase mDelegate;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector2 mTextureSize;

	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string mStrCommit;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool mShow;

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0xAE1AD0", Offset = "0xAE1AD0", VA = "0xAE1AD0", Slot = "4")]
	public bool Create(ImeDelegateBase pDelegate)
	{
		return default(bool);
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0xAE2144", Offset = "0xAE2144", VA = "0xAE2144", Slot = "5")]
	public void GetSize(ref Vector2 size)
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0xAE2250", Offset = "0xAE2250", VA = "0xAE2250", Slot = "6")]
	public void Draw(Texture2D tex)
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0xAE25DC", Offset = "0xAE25DC", VA = "0xAE25DC", Slot = "9")]
	public void Show(SGImeInputType typeInput, SGImeTextType typeText)
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0xAE1F98", Offset = "0xAE1F98", VA = "0xAE1F98", Slot = "10")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0xAE28A0", Offset = "0xAE28A0", VA = "0xAE28A0", Slot = "7")]
	public void OnTouch(float x, float y, SGImeMotionEventType type)
	{
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0xAE2AC0", Offset = "0xAE2AC0", VA = "0xAE2AC0", Slot = "8")]
	public void UpdateData()
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xAE1B7C", Offset = "0xAE1B7C", VA = "0xAE1B7C")]
	private void JavaInit()
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xAE241C", Offset = "0xAE241C", VA = "0xAE241C")]
	private bool IsInited()
	{
		return default(bool);
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0xAE249C", Offset = "0xAE249C", VA = "0xAE249C")]
	private bool IsNeedUpdate()
	{
		return default(bool);
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0xAE2E00", Offset = "0xAE2E00", VA = "0xAE2E00")]
	private int GetCommitCode()
	{
		return default(int);
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0xAE2F40", Offset = "0xAE2F40", VA = "0xAE2F40")]
	private string GetCommitString()
	{
		return null;
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0xAE3080", Offset = "0xAE3080", VA = "0xAE3080", Slot = "11")]
	public bool IsShow()
	{
		return default(bool);
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0xAE31C0", Offset = "0xAE31C0", VA = "0xAE31C0")]
	public SGIme()
	{
	}
}
[Token(Token = "0x200012E")]
public class ImeManager : MonoBehaviour
{
	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ImeManager Instance;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ImeDelegateBase mDelegate;

	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ImeBase mIme;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector2 mSize;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool mIsPaused;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool mIsFocus;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public InputDevice RightHand;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public InputDevice Head;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public InputDevice LeftHand;

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xB16ACC", Offset = "0xB16ACC", VA = "0xB16ACC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xB16B28", Offset = "0xB16B28", VA = "0xB16B28")]
	private void InitInputDevices()
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xB16E54", Offset = "0xB16E54", VA = "0xB16E54")]
	private void Start()
	{
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xB16F90", Offset = "0xB16F90", VA = "0xB16F90")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xB17058", Offset = "0xB17058", VA = "0xB17058")]
	private void Update()
	{
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0xB17110", Offset = "0xB17110", VA = "0xB17110")]
	public void Show(SGImeInputType typeInput, SGImeTextType typeText)
	{
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0xB16F94", Offset = "0xB16F94", VA = "0xB16F94")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0xB17254", Offset = "0xB17254", VA = "0xB17254")]
	public bool IsShow()
	{
		return default(bool);
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0xB17304", Offset = "0xB17304", VA = "0xB17304")]
	public void SetPose(Action<Transform> fun)
	{
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0xB17324", Offset = "0xB17324", VA = "0xB17324")]
	public Transform GetTransform()
	{
		return null;
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0xB14B1C", Offset = "0xB14B1C", VA = "0xB14B1C")]
	public void Draw(Texture2D tex)
	{
	}

	[Token(Token = "0x6000519")]
	[Address(RVA = "0xB15140", Offset = "0xB15140", VA = "0xB15140")]
	public void OnTouch(float x, float y, SGImeMotionEventType type)
	{
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xB17344", Offset = "0xB17344", VA = "0xB17344")]
	private void OnApplicationFocus(bool hasFocus)
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0xB17350", Offset = "0xB17350", VA = "0xB17350")]
	private void OnApplicationPause(bool pauseStatus)
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0xB17384", Offset = "0xB17384", VA = "0xB17384")]
	public ImeManager()
	{
	}
}
[Token(Token = "0x200012F")]
public class testClick : MonoBehaviour
{
	[Token(Token = "0x600051D")]
	[Address(RVA = "0x9D4DF0", Offset = "0x9D4DF0", VA = "0x9D4DF0")]
	private void Start()
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0x9D4DF4", Offset = "0x9D4DF4", VA = "0x9D4DF4")]
	private void Update()
	{
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0x9D5458", Offset = "0x9D5458", VA = "0x9D5458")]
	public void Click()
	{
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0x9D54CC", Offset = "0x9D54CC", VA = "0x9D54CC")]
	private void LogEvent(string prefix, PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0x9D57B0", Offset = "0x9D57B0", VA = "0x9D57B0")]
	public testClick()
	{
	}
}
[Token(Token = "0x2000130")]
public class BoundaryTest : MonoBehaviour
{
	[Token(Token = "0x40006BA")]
	private const string TAG = "BoundaryTest";

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject primitivePrefab;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text textField;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private QiyuBoundary boundary;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private QiyuBoundary.BoundaryTestResult result_play;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<GameObject> points;

	[Token(Token = "0x6000522")]
	[Address(RVA = "0x102E840", Offset = "0x102E840", VA = "0x102E840")]
	private void Start()
	{
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0x102E914", Offset = "0x102E914", VA = "0x102E914")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0x102E9E8", Offset = "0x102E9E8", VA = "0x102E9E8")]
	private void ClearPoints()
	{
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0x102EB20", Offset = "0x102EB20", VA = "0x102EB20")]
	private void Subsystem_boundaryChanged(XRInputSubsystem obj)
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0x102EF58", Offset = "0x102EF58", VA = "0x102EF58")]
	public void OnClickButton(GameObject btn)
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0x102EC44", Offset = "0x102EC44", VA = "0x102EC44")]
	private void CreateGeometry(Vector3[] geometryList)
	{
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0x102F10C", Offset = "0x102F10C", VA = "0x102F10C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0x102F6CC", Offset = "0x102F6CC", VA = "0x102F6CC")]
	public BoundaryTest()
	{
	}
}
[Token(Token = "0x2000131")]
public class ChangeFoveation : MonoBehaviour
{
	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Button btn;

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text btnText;

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int foveationLevel;

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xE257C4", Offset = "0xE257C4", VA = "0xE257C4")]
	private void Start()
	{
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xE259B0", Offset = "0xE259B0", VA = "0xE259B0")]
	private void ShowTest()
	{
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xE25AAC", Offset = "0xE25AAC", VA = "0xE25AAC")]
	public ChangeFoveation()
	{
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xE25ABC", Offset = "0xE25ABC", VA = "0xE25ABC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72EF30", Offset = "0x72EF30")]
	private void <Start>b__3_0()
	{
	}
}
[Token(Token = "0x2000132")]
public class ChangeQXRManager : MonoBehaviour
{
	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text trackingPosition;

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xE25BD0", Offset = "0xE25BD0", VA = "0xE25BD0")]
	private void Start()
	{
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xE25BD4", Offset = "0xE25BD4", VA = "0xE25BD4")]
	public void OnClickButton(GameObject btn)
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xE25C34", Offset = "0xE25C34", VA = "0xE25C34")]
	public ChangeQXRManager()
	{
	}
}
[Token(Token = "0x2000133")]
public class ChangeScene : MonoBehaviour
{
	[Token(Token = "0x6000531")]
	[Address(RVA = "0xE25C3C", Offset = "0xE25C3C", VA = "0xE25C3C")]
	public void GoScene(string sceneName)
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0xE25D04", Offset = "0xE25D04", VA = "0xE25D04")]
	public ChangeScene()
	{
	}
}
[Token(Token = "0x2000134")]
public class DebugShow : MonoBehaviour
{
	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugShow Instance;

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text _showText;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<string> _showList;

	[Token(Token = "0x6000533")]
	[Address(RVA = "0xE2BAC4", Offset = "0xE2BAC4", VA = "0xE2BAC4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0xE2BB58", Offset = "0xE2BB58", VA = "0xE2BB58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0xE2BB5C", Offset = "0xE2BB5C", VA = "0xE2BB5C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0xE2BB60", Offset = "0xE2BB60", VA = "0xE2BB60")]
	private void Update()
	{
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0xE2BB64", Offset = "0xE2BB64", VA = "0xE2BB64")]
	private void Add(string info)
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0xE2BCF8", Offset = "0xE2BCF8", VA = "0xE2BCF8")]
	public DebugShow()
	{
	}
}
[Token(Token = "0x2000135")]
public class FPS : MonoBehaviour
{
	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Text textField;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float m_LastUpdateShowTime;

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float m_UpdateShowDeltaTime;

	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int m_FrameUpdate;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float m_FPS;

	[Token(Token = "0x6000539")]
	[Address(RVA = "0xE50E5C", Offset = "0xE50E5C", VA = "0xE50E5C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0xE50F68", Offset = "0xE50F68", VA = "0xE50F68")]
	private void Start()
	{
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xE50F90", Offset = "0xE50F90", VA = "0xE50F90")]
	private void Update()
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xE51144", Offset = "0xE51144", VA = "0xE51144")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xE51528", Offset = "0xE51528", VA = "0xE51528")]
	public FPS()
	{
	}
}
[Token(Token = "0x2000136")]
public class QVRDemo : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000137")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7284E0", Offset = "0x7284E0")]
	private sealed class <>c
	{
		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly <>c <>9;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static QiyuMessageListener.EventCallBack <>9__6_0;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Action<QiyuPlugin.MessageResult<QiyuPlugin.AppUpdateInfo>> <>9__6_2;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static QiyuMessageListener.EventCallBack <>9__6_1;

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x1B1C6C8", Offset = "0x1B1C6C8", VA = "0x1B1C6C8")]
		public <>c()
		{
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0x1B1C6D0", Offset = "0x1B1C6D0", VA = "0x1B1C6D0")]
		internal void <Start>b__6_0(object[] ret)
		{
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0x1B1C77C", Offset = "0x1B1C77C", VA = "0x1B1C77C")]
		internal void <Start>b__6_1(object[] ret)
		{
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0x1B1C97C", Offset = "0x1B1C97C", VA = "0x1B1C97C")]
		internal void <Start>b__6_2(QiyuPlugin.MessageResult<QiyuPlugin.AppUpdateInfo> msg1)
		{
		}
	}

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text uid;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public new Text name;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Text pic;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public VrInputField targetAppID;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform btnListGO;

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xAD9D9C", Offset = "0xAD9D9C", VA = "0xAD9D9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xAD9FC8", Offset = "0xAD9FC8", VA = "0xAD9FC8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xADA320", Offset = "0xADA320", VA = "0xADA320")]
	public void GetDeeplinkCallBack(QiyuPlugin.MessageResult<QiyuPlugin.DeepLinkParam> ret)
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xADA3C0", Offset = "0xADA3C0", VA = "0xADA3C0")]
	public void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0xADA48C", Offset = "0xADA48C", VA = "0xADA48C")]
	public void GoHomeLogin()
	{
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0xADA4EC", Offset = "0xADA4EC", VA = "0xADA4EC")]
	public void GetIQIYIAccountInfo()
	{
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0xADA5E4", Offset = "0xADA5E4", VA = "0xADA5E4")]
	public void OpenApp()
	{
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0xADA688", Offset = "0xADA688", VA = "0xADA688")]
	private void TestQiyuPrefs()
	{
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0xADA99C", Offset = "0xADA99C", VA = "0xADA99C")]
	public QVRDemo()
	{
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0xADA9A4", Offset = "0xADA9A4", VA = "0xADA9A4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72EF40", Offset = "0x72EF40")]
	private void <GetIQIYIAccountInfo>b__10_0(QiyuPlugin.MessageResult<QiyuPlugin.QiyuAccountInfo> msg)
	{
	}
}
[Token(Token = "0x2000138")]
public class QiyuScreenFade : MonoBehaviour
{
	[Token(Token = "0x2000139")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7284F0", Offset = "0x7284F0")]
	private sealed class <FadeIn>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public QiyuScreenFade <>4__this;

		[Token(Token = "0x1700005D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600055B")]
			[Address(RVA = "0x1B1CC70", Offset = "0x1B1CC70", VA = "0x1B1CC70", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600055D")]
			[Address(RVA = "0x1B1CCB8", Offset = "0x1B1CCB8", VA = "0x1B1CCB8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0x1B1CB80", Offset = "0x1B1CB80", VA = "0x1B1CB80")]
		[DebuggerHidden]
		public <FadeIn>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0x1B1CBAC", Offset = "0x1B1CBAC", VA = "0x1B1CBAC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0x1B1CBB0", Offset = "0x1B1CBB0", VA = "0x1B1CBB0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0x1B1CC78", Offset = "0x1B1CC78", VA = "0x1B1CC78", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200013A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728500", Offset = "0x728500")]
	private sealed class <Fade>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public QiyuScreenFade <>4__this;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float startAlpha;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float endAlpha;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float _fadeTime;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x1700005F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000561")]
			[Address(RVA = "0x1B1CB30", Offset = "0x1B1CB30", VA = "0x1B1CB30", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000060")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000563")]
			[Address(RVA = "0x1B1CB78", Offset = "0x1B1CB78", VA = "0x1B1CB78", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0x1B1C9D0", Offset = "0x1B1C9D0", VA = "0x1B1C9D0")]
		[DebuggerHidden]
		public <Fade>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x1B1C9FC", Offset = "0x1B1C9FC", VA = "0x1B1C9FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x1B1CA00", Offset = "0x1B1CA00", VA = "0x1B1CA00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x1B1CB38", Offset = "0x1B1CB38", VA = "0x1B1CB38", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A9B0", Offset = "0x72A9B0")]
	public float fadeTime;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72A9E8", Offset = "0x72A9E8")]
	public Color fadeColor;

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool fadeOnStart;

	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int renderQueue;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float explicitFadeAlpha;

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float animatedFadeAlpha;

	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float uiFadeAlpha;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MeshRenderer fadeRenderer;

	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private MeshFilter fadeMesh;

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material fadeMaterial;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isFading;

	[Token(Token = "0x1700005C")]
	public float currentAlpha
	{
		[Token(Token = "0x600054D")]
		[Address(RVA = "0xADAA84", Offset = "0xADAA84", VA = "0xADAA84")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0xADAB1C", Offset = "0xADAB1C", VA = "0xADAB1C")]
	private void Start()
	{
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xADAF14", Offset = "0xADAF14", VA = "0xADAF14")]
	public void ScreenFadeIn()
	{
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0xADAF40", Offset = "0xADAF40", VA = "0xADAF40")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72EF50", Offset = "0x72EF50")]
	private IEnumerator FadeIn()
	{
		return null;
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xADAFB8", Offset = "0xADAFB8", VA = "0xADAFB8")]
	public void ScreenFadeOut()
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0xADB08C", Offset = "0xADB08C", VA = "0xADB08C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xADB0A4", Offset = "0xADB0A4", VA = "0xADB0A4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xADAFF0", Offset = "0xADAFF0", VA = "0xADAFF0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72EFB0", Offset = "0x72EFB0")]
	private IEnumerator Fade(float startAlpha, float endAlpha, float _fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xADB204", Offset = "0xADB204", VA = "0xADB204")]
	private void SetMaterialAlpha()
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xADB318", Offset = "0xADB318", VA = "0xADB318")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xADB34C", Offset = "0xADB34C", VA = "0xADB34C")]
	public QiyuScreenFade()
	{
	}
}
[Token(Token = "0x200013B")]
public class UIDepth : MonoBehaviour
{
	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int order;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isUI;

	[Token(Token = "0x6000564")]
	[Address(RVA = "0xDE6C08", Offset = "0xDE6C08", VA = "0xDE6C08")]
	private void Start()
	{
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0xDE6D88", Offset = "0xDE6D88", VA = "0xDE6D88")]
	public UIDepth()
	{
	}
}
[Token(Token = "0x200013C")]
public class ScreenFadeControl : MonoBehaviour
{
	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material fadeMaterial;

	[Token(Token = "0x6000566")]
	[Address(RVA = "0xAE6968", Offset = "0xAE6968", VA = "0xAE6968")]
	private void OnCustomPostRender()
	{
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0xAE6A3C", Offset = "0xAE6A3C", VA = "0xAE6A3C")]
	public ScreenFadeControl()
	{
	}
}
[Token(Token = "0x200013D")]
public class ScreenFader : MonoBehaviour
{
	[Token(Token = "0x200013E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728510", Offset = "0x728510")]
	private sealed class <FadeOut>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ScreenFader <>4__this;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Color <color>5__3;

		[Token(Token = "0x17000061")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000572")]
			[Address(RVA = "0x1B1DF84", Offset = "0x1B1DF84", VA = "0x1B1DF84", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000062")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000574")]
			[Address(RVA = "0x1B1DFCC", Offset = "0x1B1DFCC", VA = "0x1B1DFCC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0x1B1DE08", Offset = "0x1B1DE08", VA = "0x1B1DE08")]
		[DebuggerHidden]
		public <FadeOut>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x1B1DE34", Offset = "0x1B1DE34", VA = "0x1B1DE34", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0x1B1DE38", Offset = "0x1B1DE38", VA = "0x1B1DE38", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x1B1DF8C", Offset = "0x1B1DF8C", VA = "0x1B1DF8C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200013F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728520", Offset = "0x728520")]
	private sealed class <FadeIn>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ScreenFader <>4__this;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Color <color>5__3;

		[Token(Token = "0x17000063")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000578")]
			[Address(RVA = "0x1B1DDB8", Offset = "0x1B1DDB8", VA = "0x1B1DDB8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000064")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600057A")]
			[Address(RVA = "0x1B1DE00", Offset = "0x1B1DE00", VA = "0x1B1DE00", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x1B1DC1C", Offset = "0x1B1DC1C", VA = "0x1B1DC1C")]
		[DebuggerHidden]
		public <FadeIn>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x1B1DC48", Offset = "0x1B1DC48", VA = "0x1B1DC48", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x1B1DC4C", Offset = "0x1B1DC4C", VA = "0x1B1DC4C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x1B1DDC0", Offset = "0x1B1DDC0", VA = "0x1B1DDC0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000140")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728530", Offset = "0x728530")]
	private sealed class <DoFade>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ScreenFader <>4__this;

		[Token(Token = "0x17000065")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600057E")]
			[Address(RVA = "0x1B1DBCC", Offset = "0x1B1DBCC", VA = "0x1B1DBCC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000066")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000580")]
			[Address(RVA = "0x1B1DC14", Offset = "0x1B1DC14", VA = "0x1B1DC14", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x1B1D8B8", Offset = "0x1B1D8B8", VA = "0x1B1D8B8")]
		[DebuggerHidden]
		public <DoFade>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x1B1D8E4", Offset = "0x1B1D8E4", VA = "0x1B1D8E4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x1B1D8E8", Offset = "0x1B1D8E8", VA = "0x1B1D8E8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x1B1DBD4", Offset = "0x1B1DBD4", VA = "0x1B1DBD4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool fadeIn;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fadeTime;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color fadeColor;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material fadeMaterial;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool faded;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool lastFadeIn;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<ScreenFadeControl> fadeControls;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ScreenFader Instance;

	[Token(Token = "0x6000568")]
	[Address(RVA = "0xAE6A44", Offset = "0xAE6A44", VA = "0xAE6A44")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0xAE6A98", Offset = "0xAE6A98", VA = "0xAE6A98")]
	private void SetFadersEnabled(bool value)
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0xAE6BC4", Offset = "0xAE6BC4", VA = "0xAE6BC4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72F0B0", Offset = "0x72F0B0")]
	public IEnumerator FadeOut()
	{
		return null;
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0xAE6C3C", Offset = "0xAE6C3C", VA = "0xAE6C3C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72F110", Offset = "0x72F110")]
	public IEnumerator FadeIn()
	{
		return null;
	}

	[Token(Token = "0x600056C")]
	[Address(RVA = "0xAE6CB4", Offset = "0xAE6CB4", VA = "0xAE6CB4")]
	public void Update()
	{
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0xAE6D10", Offset = "0xAE6D10", VA = "0xAE6D10")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72F170", Offset = "0x72F170")]
	public IEnumerator DoFade()
	{
		return null;
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0xAE6D88", Offset = "0xAE6D88", VA = "0xAE6D88")]
	public ScreenFader()
	{
	}
}
[Token(Token = "0x2000141")]
public class AnimalBehaviour : MonoBehaviour
{
	[Token(Token = "0x2000142")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728540", Offset = "0x728540")]
	private sealed class <startAnimation>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimalBehaviour <>4__this;

		[Token(Token = "0x17000067")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000589")]
			[Address(RVA = "0x9D5AC0", Offset = "0x9D5AC0", VA = "0x9D5AC0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000068")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600058B")]
			[Address(RVA = "0x9D5B08", Offset = "0x9D5B08", VA = "0x9D5B08", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0x9D5964", Offset = "0x9D5964", VA = "0x9D5964")]
		[DebuggerHidden]
		public <startAnimation>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0x9D5990", Offset = "0x9D5990", VA = "0x9D5990", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0x9D5994", Offset = "0x9D5994", VA = "0x9D5994", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0x9D5AC8", Offset = "0x9D5AC8", VA = "0x9D5AC8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator animator;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool empty;

	[Token(Token = "0x6000581")]
	[Address(RVA = "0x102280C", Offset = "0x102280C", VA = "0x102280C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0x10228B0", Offset = "0x10228B0", VA = "0x10228B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0x1022948", Offset = "0x1022948", VA = "0x1022948")]
	private bool isStand()
	{
		return default(bool);
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0x1022A7C", Offset = "0x1022A7C", VA = "0x1022A7C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72F2C0", Offset = "0x72F2C0")]
	private IEnumerator startAnimation()
	{
		return null;
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0x1022AF4", Offset = "0x1022AF4", VA = "0x1022AF4")]
	public AnimalBehaviour()
	{
	}
}
[Token(Token = "0x2000143")]
public class AnimatedRagDollControll : MonoBehaviour
{
	[Token(Token = "0x2000144")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728550", Offset = "0x728550")]
	private sealed class <EnableCatchedAnimation>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimatedRagDollControll <>4__this;

		[Token(Token = "0x17000069")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000599")]
			[Address(RVA = "0x9D6ACC", Offset = "0x9D6ACC", VA = "0x9D6ACC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600059B")]
			[Address(RVA = "0x9D6B14", Offset = "0x9D6B14", VA = "0x9D6B14", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0x9D68E0", Offset = "0x9D68E0", VA = "0x9D68E0")]
		[DebuggerHidden]
		public <EnableCatchedAnimation>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0x9D690C", Offset = "0x9D690C", VA = "0x9D690C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0x9D6910", Offset = "0x9D6910", VA = "0x9D6910", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0x9D6AD4", Offset = "0x9D6AD4", VA = "0x9D6AD4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000145")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728560", Offset = "0x728560")]
	private sealed class <DisableCatchedAnimation>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimatedRagDollControll <>4__this;

		[Token(Token = "0x1700006B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600059F")]
			[Address(RVA = "0x9D6890", Offset = "0x9D6890", VA = "0x9D6890", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005A1")]
			[Address(RVA = "0x9D68D8", Offset = "0x9D68D8", VA = "0x9D68D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0x9D5F6C", Offset = "0x9D5F6C", VA = "0x9D5F6C")]
		[DebuggerHidden]
		public <DisableCatchedAnimation>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x9D5F98", Offset = "0x9D5F98", VA = "0x9D5F98", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x9D5F9C", Offset = "0x9D5F9C", VA = "0x9D5F9C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x9D6898", Offset = "0x9D6898", VA = "0x9D6898", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Piece piece;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animator anim;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Collider> collisionColliders;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool animated;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 previousPosition;

	[Token(Token = "0x600058C")]
	[Address(RVA = "0x1023328", Offset = "0x1023328", VA = "0x1023328")]
	private void Start()
	{
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0x10234FC", Offset = "0x10234FC", VA = "0x10234FC")]
	public void OnBeginInteractionRagDoll()
	{
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0x1023528", Offset = "0x1023528", VA = "0x1023528")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72F370", Offset = "0x72F370")]
	private IEnumerator EnableCatchedAnimation()
	{
		return null;
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0x10235A0", Offset = "0x10235A0", VA = "0x10235A0")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0x1023704", Offset = "0x1023704", VA = "0x1023704")]
	private void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0x102377C", Offset = "0x102377C", VA = "0x102377C")]
	private void OnEndInteractionRagDoll()
	{
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0x1023838", Offset = "0x1023838", VA = "0x1023838")]
	private void OnStopMoving()
	{
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0x1023878", Offset = "0x1023878", VA = "0x1023878")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72F3D0", Offset = "0x72F3D0")]
	private IEnumerator DisableCatchedAnimation()
	{
		return null;
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0x10238F0", Offset = "0x10238F0", VA = "0x10238F0")]
	private void checkMovement()
	{
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0x10239A4", Offset = "0x10239A4", VA = "0x10239A4")]
	public AnimatedRagDollControll()
	{
	}
}
[Token(Token = "0x2000146")]
public class Blink : MonoBehaviour
{
	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Renderer renderer;

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0x102DFBC", Offset = "0x102DFBC", VA = "0x102DFBC")]
	private void Start()
	{
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0x102E03C", Offset = "0x102E03C", VA = "0x102E03C")]
	private void Update()
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0x102E0A0", Offset = "0x102E0A0", VA = "0x102E0A0")]
	public void blink()
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0x102E16C", Offset = "0x102E16C", VA = "0x102E16C")]
	public Blink()
	{
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0x102E174", Offset = "0x102E174", VA = "0x102E174")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72F4D0", Offset = "0x72F4D0")]
	private void <blink>b__3_0()
	{
	}
}
[Token(Token = "0x2000147")]
public class CameraScreenshot : MonoBehaviour
{
	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Camera m_camera;

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0xE21B20", Offset = "0xE21B20", VA = "0xE21B20")]
	public void takeScreenShot(string filename)
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0xE21DE4", Offset = "0xE21DE4", VA = "0xE21DE4")]
	private Texture2D getSquareImage()
	{
		return null;
	}

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0xE21FA4", Offset = "0xE21FA4", VA = "0xE21FA4")]
	private Texture2D getImage()
	{
		return null;
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0xE22108", Offset = "0xE22108", VA = "0xE22108")]
	public CameraScreenshot()
	{
	}
}
[Token(Token = "0x2000148")]
public class SoundController : NVRCollisionSoundController
{
	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool mute;

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0xAEBB80", Offset = "0xAEBB80", VA = "0xAEBB80")]
	public SoundController()
	{
	}
}
[Token(Token = "0x2000149")]
public class SoundObject : NVRCollisionSoundObject
{
	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Collider collisionCollider;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Train train;

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0xAEBB8C", Offset = "0xAEBB8C", VA = "0xAEBB8C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0xAEBBE8", Offset = "0xAEBBE8", VA = "0xAEBBE8", Slot = "6")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0xAEBDF0", Offset = "0xAEBDF0", VA = "0xAEBDF0")]
	private void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0xAEBEA8", Offset = "0xAEBEA8", VA = "0xAEBEA8")]
	public SoundObject()
	{
	}
}
[Token(Token = "0x200014A")]
public class SoundObjectTrain : NVRCollisionSoundObject
{
	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Train train;

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0xAEBF0C", Offset = "0xAEBF0C", VA = "0xAEBF0C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0xAEBF68", Offset = "0xAEBF68", VA = "0xAEBF68", Slot = "6")]
	protected override void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0xAEC0D4", Offset = "0xAEC0D4", VA = "0xAEC0D4")]
	public SoundObjectTrain()
	{
	}
}
[Token(Token = "0x200014B")]
public class Explosion : MonoBehaviour
{
	[Token(Token = "0x200014C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728570", Offset = "0x728570")]
	private sealed class <DetonateCoroutine>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float detonationDelay;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Explosion <>4__this;

		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform explosionTransform;

		[Token(Token = "0x4000724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float radius;

		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float power;

		[Token(Token = "0x4000726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float upForce;

		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int explosionId;

		[Token(Token = "0x1700006D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005C1")]
			[Address(RVA = "0x9D9CE0", Offset = "0x9D9CE0", VA = "0x9D9CE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005C3")]
			[Address(RVA = "0x9D9D28", Offset = "0x9D9D28", VA = "0x9D9D28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x9D8F60", Offset = "0x9D8F60", VA = "0x9D8F60")]
		[DebuggerHidden]
		public <DetonateCoroutine>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x9D8F8C", Offset = "0x9D8F8C", VA = "0x9D8F8C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x9D8F90", Offset = "0x9D8F90", VA = "0x9D8F90", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x9D9CE8", Offset = "0x9D9CE8", VA = "0x9D9CE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static HashSet<Piece> unlockPieces;

	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int lastExplosionId;

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject explosionEffect;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioSource explosionSound;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioSource ticTacSound;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float chainedDetonationsDelay;

	[Token(Token = "0x400071E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float maxPieceMass;

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0xE4F2A8", Offset = "0xE4F2A8", VA = "0xE4F2A8")]
	public void Detonate(Vector3 explosionPosition, float power, float radius, float upForce, int explosionId)
	{
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0xE4F338", Offset = "0xE4F338", VA = "0xE4F338")]
	public void Detonate(Transform explosionTransform, float power, float radius, float upForce, int explosionId)
	{
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0xE4D898", Offset = "0xE4D898", VA = "0xE4D898")]
	public void Detonate(Transform explosionTransform, float detonationDelay, float power, float radius, float upForce, int explosionId)
	{
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0xE4F34C", Offset = "0xE4F34C", VA = "0xE4F34C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72F4E0", Offset = "0x72F4E0")]
	private IEnumerator DetonateCoroutine(Transform explosionTransform, float detonationDelay, float power, float radius, float upForce, int explosionId)
	{
		return null;
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0xE4F414", Offset = "0xE4F414", VA = "0xE4F414")]
	private void addExplosionForce(Piece piece, float power, float radius, float upForce)
	{
	}

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0xE4F65C", Offset = "0xE4F65C", VA = "0xE4F65C")]
	private void getPieces(Collider[] colliders, out List<Piece> explodePieces, out List<Piece> contactPieces)
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0xE4FEA8", Offset = "0xE4FEA8", VA = "0xE4FEA8")]
	private bool isValidContactPiece(Piece piece)
	{
		return default(bool);
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0xE4F5B0", Offset = "0xE4F5B0", VA = "0xE4F5B0")]
	private float getScaledValue(float value)
	{
		return default(float);
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0xE4FFDC", Offset = "0xE4FFDC", VA = "0xE4FFDC")]
	public Explosion()
	{
	}
}
[Token(Token = "0x200014D")]
public class FPSDisplay : MonoBehaviour
{
	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float deltaTime;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh textMesh;

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static FPSDisplay fpsDisplay;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool log;

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0xE5153C", Offset = "0xE5153C", VA = "0xE5153C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0xE515B4", Offset = "0xE515B4", VA = "0xE515B4")]
	private void Update()
	{
	}

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0xE516F8", Offset = "0xE516F8", VA = "0xE516F8")]
	public FPSDisplay()
	{
	}
}
[Token(Token = "0x200014E")]
public class FoamScale : MonoBehaviour
{
	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float anim_duration;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float anim_delay;

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0xE5352C", Offset = "0xE5352C", VA = "0xE5352C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0xE53628", Offset = "0xE53628", VA = "0xE53628")]
	private void Update()
	{
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0xE5362C", Offset = "0xE5362C", VA = "0xE5362C")]
	public FoamScale()
	{
	}
}
[Token(Token = "0x200014F")]
public class Follow : MonoBehaviour
{
	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 targetLastPos;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Tweener tween;

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0xE5363C", Offset = "0xE5363C", VA = "0xE5363C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0xE536F4", Offset = "0xE536F4", VA = "0xE536F4")]
	private void Update()
	{
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0xE537FC", Offset = "0xE537FC", VA = "0xE537FC")]
	public Follow()
	{
	}
}
[Token(Token = "0x2000150")]
public class FollowGameobject : MonoBehaviour
{
	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform gameObjectToFollow;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 followPositionAxes;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 followRotationAxes;

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0xE53804", Offset = "0xE53804", VA = "0xE53804")]
	private void Update()
	{
	}

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0xE5386C", Offset = "0xE5386C", VA = "0xE5386C")]
	private Vector3 getNewPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0xE53948", Offset = "0xE53948", VA = "0xE53948")]
	private Vector3 getNewRotation()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0xE53A24", Offset = "0xE53A24", VA = "0xE53A24")]
	public FollowGameobject()
	{
	}
}
[Token(Token = "0x2000151")]
public class FollowTrain : MonoBehaviour
{
	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 targetLastPos;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Tweener tween;

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0xE53A2C", Offset = "0xE53A2C", VA = "0xE53A2C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0xE53AE4", Offset = "0xE53AE4", VA = "0xE53AE4")]
	private void Update()
	{
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0xE53BEC", Offset = "0xE53BEC", VA = "0xE53BEC")]
	public FollowTrain()
	{
	}
}
[Token(Token = "0x2000152")]
public class HexagonTile : ActionTexture_Piece
{
	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float outerRadius;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static float innerRadius;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	public int xCoord;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
	public int zCoord;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<HexagonTile> hexagons;

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0xB14088", Offset = "0xB14088", VA = "0xB14088", Slot = "30")]
	public override void init()
	{
	}

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0xB14128", Offset = "0xB14128", VA = "0xB14128", Slot = "10")]
	public override void BeginInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0xB1422C", Offset = "0xB1422C", VA = "0xB1422C", Slot = "21")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0xB1431C", Offset = "0xB1431C", VA = "0xB1431C")]
	private void OnStopMovingPiece()
	{
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0xB148D8", Offset = "0xB148D8", VA = "0xB148D8")]
	public static void Neighbors(int xCoord, int zCoord)
	{
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0xB14750", Offset = "0xB14750", VA = "0xB14750")]
	public static bool hasHexagonTile(int xCoord, int zCoord)
	{
		return default(bool);
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0xB148DC", Offset = "0xB148DC", VA = "0xB148DC")]
	public HexagonTile()
	{
	}
}
[Token(Token = "0x2000153")]
public class LightManager : MonoBehaviour
{
	[Token(Token = "0x2000154")]
	public delegate void LightChangeEvent(bool state);

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isDayMode;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static LightManager instance;

	[Token(Token = "0x1700006F")]
	public bool isDay
	{
		[Token(Token = "0x60005E4")]
		[Address(RVA = "0xB1C600", Offset = "0xB1C600", VA = "0xB1C600")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x14000013")]
	public event LightChangeEvent OnLightChange
	{
		[Token(Token = "0x60005DC")]
		[Address(RVA = "0xB1BFA0", Offset = "0xB1BFA0", VA = "0xB1BFA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72F590", Offset = "0x72F590")]
		add
		{
		}
		[Token(Token = "0x60005DD")]
		[Address(RVA = "0xB1C160", Offset = "0xB1C160", VA = "0xB1C160")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72F5A0", Offset = "0x72F5A0")]
		remove
		{
		}
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0xB1C368", Offset = "0xB1C368", VA = "0xB1C368")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0xB1C3D4", Offset = "0xB1C3D4", VA = "0xB1C3D4")]
	public static LightManager getInstance()
	{
		return null;
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0xB1C438", Offset = "0xB1C438", VA = "0xB1C438")]
	private void Start()
	{
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0xB1C5E0", Offset = "0xB1C5E0", VA = "0xB1C5E0")]
	public void toggleDayNight()
	{
	}

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0xB1C440", Offset = "0xB1C440", VA = "0xB1C440")]
	public void sceneDayMode(bool state)
	{
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0xB1C5F8", Offset = "0xB1C5F8", VA = "0xB1C5F8")]
	public void ResetSkyBox()
	{
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0xB1C608", Offset = "0xB1C608", VA = "0xB1C608")]
	public LightManager()
	{
	}
}
[Serializable]
[Token(Token = "0x2000155")]
public class LocalizationData
{
	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public LocalizationItem[] items;

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0xB1D770", Offset = "0xB1D770", VA = "0xB1D770")]
	public LocalizationData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000156")]
public class LocalizationItem
{
	[Token(Token = "0x4000740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string key;

	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string value;

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0xB1D780", Offset = "0xB1D780", VA = "0xB1D780")]
	public LocalizationItem()
	{
	}
}
[Serializable]
[Token(Token = "0x2000157")]
public class LocalizationDataLegacy
{
	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public LocalizationItemLegacy[] localization;

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0xB1D778", Offset = "0xB1D778", VA = "0xB1D778")]
	public LocalizationDataLegacy()
	{
	}
}
[Serializable]
[Token(Token = "0x2000158")]
public class LocalizationItemLegacy
{
	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string StringIdentifier;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string English;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string Chinese;

	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string Japanese;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string Korean;

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0xB1D788", Offset = "0xB1D788", VA = "0xB1D788")]
	public LocalizationItemLegacy()
	{
	}
}
[Token(Token = "0x2000159")]
public class LocalizationManager : MonoBehaviour
{
	[Token(Token = "0x200015A")]
	public delegate void LocalizationEventHandler();

	[Token(Token = "0x200015B")]
	public enum Language
	{
		[Token(Token = "0x4000750")]
		off,
		[Token(Token = "0x4000751")]
		en,
		[Token(Token = "0x4000752")]
		es,
		[Token(Token = "0x4000753")]
		cn
	}

	[Token(Token = "0x4000748")]
	private const string LOCALIZATION_PATH = "Localization/";

	[Token(Token = "0x4000749")]
	private const string LOCALIZATION_FILE_PATTERN = "localization_";

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LocalizationManager Instance;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Language language;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<string, string> localizedText;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool isReady;

	[Token(Token = "0x14000014")]
	public event LocalizationEventHandler OnLocalizationChanged
	{
		[Token(Token = "0x60005EF")]
		[Address(RVA = "0xB1D790", Offset = "0xB1D790", VA = "0xB1D790")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72F5B0", Offset = "0x72F5B0")]
		add
		{
		}
		[Token(Token = "0x60005F0")]
		[Address(RVA = "0xB1D830", Offset = "0xB1D830", VA = "0xB1D830")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72F5C0", Offset = "0x72F5C0")]
		remove
		{
		}
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0xB1D8D0", Offset = "0xB1D8D0", VA = "0xB1D8D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0xB1DA0C", Offset = "0xB1DA0C", VA = "0xB1DA0C")]
	private void LoadLocalizedText(string fileName)
	{
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0xB1AFCC", Offset = "0xB1AFCC", VA = "0xB1AFCC")]
	public void SetLocalization(Language language)
	{
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0xB1B12C", Offset = "0xB1B12C", VA = "0xB1B12C")]
	public string GetLocalizedValue(string key)
	{
		return null;
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0xB1DE34", Offset = "0xB1DE34", VA = "0xB1DE34")]
	public bool GetIsReady()
	{
		return default(bool);
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0xB1DE3C", Offset = "0xB1DE3C", VA = "0xB1DE3C")]
	public LocalizationManager()
	{
	}
}
[Token(Token = "0x200015C")]
public class LocalizedGameObject : MonoBehaviour
{
	[Token(Token = "0x60005FB")]
	[Address(RVA = "0xB1DE4C", Offset = "0xB1DE4C", VA = "0xB1DE4C")]
	private void Start()
	{
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0xB1E314", Offset = "0xB1E314", VA = "0xB1E314")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0xB1DF00", Offset = "0xB1DF00", VA = "0xB1DF00")]
	private void OnLocalizationChanged()
	{
	}

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0xB1E3C0", Offset = "0xB1E3C0", VA = "0xB1E3C0")]
	public LocalizedGameObject()
	{
	}
}
[Token(Token = "0x200015D")]
public class LocalizedText : MonoBehaviour
{
	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string key;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int layer;

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0xB1E3C8", Offset = "0xB1E3C8", VA = "0xB1E3C8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000600")]
	[Address(RVA = "0xB1E82C", Offset = "0xB1E82C", VA = "0xB1E82C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0xB1E5BC", Offset = "0xB1E5BC", VA = "0xB1E5BC")]
	private void OnLocalizationChanged()
	{
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0xB1E8D8", Offset = "0xB1E8D8", VA = "0xB1E8D8")]
	public void UpdateText()
	{
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0xB1E8DC", Offset = "0xB1E8DC", VA = "0xB1E8DC")]
	public void UpdateKey(string key)
	{
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0xB1E904", Offset = "0xB1E904", VA = "0xB1E904")]
	public LocalizedText()
	{
	}
}
[Token(Token = "0x200015E")]
public sealed class Mathfx
{
	[Token(Token = "0x6000605")]
	[Address(RVA = "0xB215C8", Offset = "0xB215C8", VA = "0xB215C8")]
	public static float Hermite(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0xB215E4", Offset = "0xB215E4", VA = "0xB215E4")]
	public static Vector2 Hermite(Vector2 start, Vector2 end, float value)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000607")]
	[Address(RVA = "0xB21650", Offset = "0xB21650", VA = "0xB21650")]
	public static Vector3 Hermite(Vector3 start, Vector3 end, float value)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0xB216E8", Offset = "0xB216E8", VA = "0xB216E8")]
	public static float Sinerp(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0xB21730", Offset = "0xB21730", VA = "0xB21730")]
	public static Vector2 Sinerp(Vector2 start, Vector2 end, float value)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600060A")]
	[Address(RVA = "0xB217C0", Offset = "0xB217C0", VA = "0xB217C0")]
	public static Vector3 Sinerp(Vector3 start, Vector3 end, float value)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0xB21884", Offset = "0xB21884", VA = "0xB21884")]
	public static float Coserp(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0xB218D0", Offset = "0xB218D0", VA = "0xB218D0")]
	public static Vector2 Coserp(Vector2 start, Vector2 end, float value)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0xB21964", Offset = "0xB21964", VA = "0xB21964")]
	public static Vector3 Coserp(Vector3 start, Vector3 end, float value)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600060E")]
	[Address(RVA = "0xB21A2C", Offset = "0xB21A2C", VA = "0xB21A2C")]
	public static float Berp(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600060F")]
	[Address(RVA = "0xB21AE0", Offset = "0xB21AE0", VA = "0xB21AE0")]
	public static Vector2 Berp(Vector2 start, Vector2 end, float value)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000610")]
	[Address(RVA = "0xB21B34", Offset = "0xB21B34", VA = "0xB21B34")]
	public static Vector3 Berp(Vector3 start, Vector3 end, float value)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0xB21BB0", Offset = "0xB21BB0", VA = "0xB21BB0")]
	public static float SmoothStep(float x, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0xB21C04", Offset = "0xB21C04", VA = "0xB21C04")]
	public static Vector2 SmoothStep(Vector2 vec, float min, float max)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0xB21CA0", Offset = "0xB21CA0", VA = "0xB21CA0")]
	public static Vector3 SmoothStep(Vector3 vec, float min, float max)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0xB21D90", Offset = "0xB21D90", VA = "0xB21D90")]
	public static float Lerp(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0xB21DA8", Offset = "0xB21DA8", VA = "0xB21DA8")]
	public static Vector3 NearestPoint(Vector3 lineStart, Vector3 lineEnd, Vector3 point)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000616")]
	[Address(RVA = "0xB21E30", Offset = "0xB21E30", VA = "0xB21E30")]
	public static Vector3 NearestPointStrict(Vector3 lineStart, Vector3 lineEnd, Vector3 point)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0xB21F7C", Offset = "0xB21F7C", VA = "0xB21F7C")]
	public static float Bounce(float x)
	{
		return default(float);
	}

	[Token(Token = "0x6000618")]
	[Address(RVA = "0xB21FC0", Offset = "0xB21FC0", VA = "0xB21FC0")]
	public static Vector2 Bounce(Vector2 vec)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0xB22030", Offset = "0xB22030", VA = "0xB22030")]
	public static Vector3 Bounce(Vector3 vec)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600061A")]
	[Address(RVA = "0xB220CC", Offset = "0xB220CC", VA = "0xB220CC")]
	public static bool Approx(float val, float about, float range)
	{
		return default(bool);
	}

	[Token(Token = "0x600061B")]
	[Address(RVA = "0xB220DC", Offset = "0xB220DC", VA = "0xB220DC")]
	public static bool Approx(Vector3 val, Vector3 about, float range)
	{
		return default(bool);
	}

	[Token(Token = "0x600061C")]
	[Address(RVA = "0xB2212C", Offset = "0xB2212C", VA = "0xB2212C")]
	public static float Clerp(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0xB22190", Offset = "0xB22190", VA = "0xB22190")]
	public Mathfx()
	{
	}
}
[Token(Token = "0x200015F")]
public class AppMenu : MonoBehaviour
{
	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool m_bMenuShown;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool m_bMenuPressed;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private NVRHand m_currentHand;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_bPlayMainTheme;

	[Token(Token = "0x600061E")]
	[Address(RVA = "0x1024638", Offset = "0x1024638", VA = "0x1024638")]
	private void Start()
	{
	}

	[Token(Token = "0x600061F")]
	[Address(RVA = "0x10247A0", Offset = "0x10247A0", VA = "0x10247A0")]
	public void clearMenuPieces()
	{
	}

	[Token(Token = "0x6000620")]
	[Address(RVA = "0x1024840", Offset = "0x1024840", VA = "0x1024840")]
	private void Update()
	{
	}

	[Token(Token = "0x6000621")]
	[Address(RVA = "0x10249DC", Offset = "0x10249DC", VA = "0x10249DC")]
	public void onMenuPressed(NVRHand hand)
	{
	}

	[Token(Token = "0x6000622")]
	[Address(RVA = "0x1024AF4", Offset = "0x1024AF4", VA = "0x1024AF4")]
	public void onMenuUp()
	{
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0x1024A9C", Offset = "0x1024A9C", VA = "0x1024A9C")]
	public void showMenu()
	{
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0x1024B74", Offset = "0x1024B74", VA = "0x1024B74")]
	public void closeMenu()
	{
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0x1024C34", Offset = "0x1024C34", VA = "0x1024C34")]
	public void enableMenu(bool bValue)
	{
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0x1024CA0", Offset = "0x1024CA0", VA = "0x1024CA0")]
	public AppMenu()
	{
	}
}
[Token(Token = "0x2000160")]
public class CloseMenu : NVRInteractable
{
	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private AppMenu menuUI;

	[Token(Token = "0x6000627")]
	[Address(RVA = "0xE27340", Offset = "0xE27340", VA = "0xE27340", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0xE273A8", Offset = "0xE273A8", VA = "0xE273A8", Slot = "12")]
	public override void HoveringEnter(NVRHand hand)
	{
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0xE27438", Offset = "0xE27438", VA = "0xE27438", Slot = "14")]
	public override void HoveringExit(NVRHand hand)
	{
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0xE274C8", Offset = "0xE274C8", VA = "0xE274C8", Slot = "13")]
	public override void HoveringUpdate(NVRHand hand, float forTime)
	{
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0xE27520", Offset = "0xE27520", VA = "0xE27520")]
	public CloseMenu()
	{
	}
}
[Token(Token = "0x2000161")]
public class GameControl : MonoBehaviour
{
	[Token(Token = "0x2000162")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728580", Offset = "0x728580")]
	private sealed class <saveToSlotCoroutine>d__16 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int iSlot;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameControl <>4__this;

		[Token(Token = "0x17000070")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600064C")]
			[Address(RVA = "0x9DB9F8", Offset = "0x9DB9F8", VA = "0x9DB9F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000071")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600064E")]
			[Address(RVA = "0x9DBA40", Offset = "0x9DBA40", VA = "0x9DBA40", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0x9DB048", Offset = "0x9DB048", VA = "0x9DB048")]
		[DebuggerHidden]
		public <saveToSlotCoroutine>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0x9DB074", Offset = "0x9DB074", VA = "0x9DB074", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0x9DB078", Offset = "0x9DB078", VA = "0x9DB078", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0x9DBA00", Offset = "0x9DBA00", VA = "0x9DBA00", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000163")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728590", Offset = "0x728590")]
	private sealed class <loadFromSlotCoroutine>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int iSlot;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameControl <>4__this;

		[Token(Token = "0x17000072")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000652")]
			[Address(RVA = "0x9DAAE4", Offset = "0x9DAAE4", VA = "0x9DAAE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000073")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000654")]
			[Address(RVA = "0x9DAB2C", Offset = "0x9DAB2C", VA = "0x9DAB2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0x9DA974", Offset = "0x9DA974", VA = "0x9DA974")]
		[DebuggerHidden]
		public <loadFromSlotCoroutine>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0x9DA9A0", Offset = "0x9DA9A0", VA = "0x9DA9A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0x9DA9A4", Offset = "0x9DA9A4", VA = "0x9DA9A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0x9DAAEC", Offset = "0x9DAAEC", VA = "0x9DAAEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000164")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7285A0", Offset = "0x7285A0")]
	private sealed class <>c__DisplayClass29_0
	{
		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GameControl <>4__this;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string dataFile;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string persistentScreenshotFile;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityWebRequest imageReq;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string persistentDataFile;

		[Token(Token = "0x6000655")]
		[Address(RVA = "0x9DA79C", Offset = "0x9DA79C", VA = "0x9DA79C")]
		public <>c__DisplayClass29_0()
		{
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0x9DA7A4", Offset = "0x9DA7A4", VA = "0x9DA7A4")]
		internal void <loadSlot>b__0(AsyncOperation aop)
		{
		}
	}

	[Token(Token = "0x2000165")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7285B0", Offset = "0x7285B0")]
	private sealed class <>c__DisplayClass29_1
	{
		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UnityWebRequest dataReq;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public <>c__DisplayClass29_0 CS$<>8__locals1;

		[Token(Token = "0x6000657")]
		[Address(RVA = "0x9DA8C0", Offset = "0x9DA8C0", VA = "0x9DA8C0")]
		public <>c__DisplayClass29_1()
		{
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0x9DA8C8", Offset = "0x9DA8C8", VA = "0x9DA8C8")]
		internal void <loadSlot>b__1(AsyncOperation _aop)
		{
		}
	}

	[Token(Token = "0x2000166")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7285C0", Offset = "0x7285C0")]
	private sealed class <loadNewGameCoroutine>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameControl <>4__this;

		[Token(Token = "0x17000074")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600065C")]
			[Address(RVA = "0x9DAFF8", Offset = "0x9DAFF8", VA = "0x9DAFF8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000075")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600065E")]
			[Address(RVA = "0x9DB040", Offset = "0x9DB040", VA = "0x9DB040", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0x9DAB34", Offset = "0x9DAB34", VA = "0x9DAB34")]
		[DebuggerHidden]
		public <loadNewGameCoroutine>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0x9DAB60", Offset = "0x9DAB60", VA = "0x9DAB60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0x9DAB64", Offset = "0x9DAB64", VA = "0x9DAB64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0x9DB000", Offset = "0x9DB000", VA = "0x9DB000", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float DISABLE_REPROJECTION_CAMERA_DELAY;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static bool LoadingGame;

	[Token(Token = "0x400075D")]
	private const int PLAYER_ID = -1;

	[Token(Token = "0x400075E")]
	private const int GLOBAL_LIGHT_ID = -2;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SaveSlot[] m_lSlots;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool m_bSaveState;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool m_bLoadState;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private NVRPlayer m_player;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CameraScreenshot m_screenShot;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform photoMarquee;

	[Token(Token = "0x600062C")]
	[Address(RVA = "0xE53BF4", Offset = "0xE53BF4", VA = "0xE53BF4")]
	public void Initialize()
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0xE541C0", Offset = "0xE541C0", VA = "0xE541C0")]
	public void saveToSlot(int iSlot)
	{
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0xE54374", Offset = "0xE54374", VA = "0xE54374")]
	private void savePlayer(List<SerializablePiece> data)
	{
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0xE544B8", Offset = "0xE544B8", VA = "0xE544B8")]
	private void saveGlobalLight(List<SerializablePiece> data)
	{
	}

	[Token(Token = "0x6000630")]
	[Address(RVA = "0xE545EC", Offset = "0xE545EC", VA = "0xE545EC")]
	private void savePieces(List<SerializablePiece> data, PieceData[] pieces)
	{
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0xE54B34", Offset = "0xE54B34", VA = "0xE54B34")]
	private string parsePieceName(string name)
	{
		return null;
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0xE542EC", Offset = "0xE542EC", VA = "0xE542EC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72F5D0", Offset = "0x72F5D0")]
	private IEnumerator saveToSlotCoroutine(int iSlot)
	{
		return null;
	}

	[Token(Token = "0x6000633")]
	[Address(RVA = "0xE54F54", Offset = "0xE54F54", VA = "0xE54F54")]
	private void saveData(List<SerializableScenario> scenariosData, int iSlot)
	{
	}

	[Token(Token = "0x6000634")]
	[Address(RVA = "0xE55114", Offset = "0xE55114", VA = "0xE55114")]
	private void loadFromSlotImpl(Stream ms)
	{
	}

	[Token(Token = "0x6000635")]
	[Address(RVA = "0xE57E9C", Offset = "0xE57E9C", VA = "0xE57E9C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72F630", Offset = "0x72F630")]
	private IEnumerator loadFromSlotCoroutine(int iSlot)
	{
		return null;
	}

	[Token(Token = "0x6000636")]
	[Address(RVA = "0xE55E30", Offset = "0xE55E30", VA = "0xE55E30")]
	private void setGridValues(Scenario scenario, ScenarioGridData gridData)
	{
	}

	[Token(Token = "0x6000637")]
	[Address(RVA = "0xE57F24", Offset = "0xE57F24", VA = "0xE57F24")]
	public void loadFromSlot(int iSlot)
	{
	}

	[Token(Token = "0x6000638")]
	[Address(RVA = "0xE559B8", Offset = "0xE559B8", VA = "0xE559B8")]
	private void loadGrid(GridData gridData)
	{
	}

	[Token(Token = "0x6000639")]
	[Address(RVA = "0xE55ED0", Offset = "0xE55ED0", VA = "0xE55ED0")]
	private void loadPieces(List<SerializablePiece> data, Scenario scenario)
	{
	}

	[Token(Token = "0x600063A")]
	[Address(RVA = "0xE58610", Offset = "0xE58610", VA = "0xE58610")]
	private void initalizeJoints(AttachablePiece piece, Dictionary<string, CustomNVRAttachJoint> jointsDictionary, Dictionary<string, SerializableJoint> jointsDataDictionary)
	{
	}

	[Token(Token = "0x600063B")]
	[Address(RVA = "0xE57FB4", Offset = "0xE57FB4", VA = "0xE57FB4")]
	private void loadPlayer(SerializablePiece player)
	{
	}

	[Token(Token = "0x600063C")]
	[Address(RVA = "0xE58240", Offset = "0xE58240", VA = "0xE58240")]
	private void loadGlobalLight(SerializablePiece light)
	{
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0xE55BA0", Offset = "0xE55BA0", VA = "0xE55BA0")]
	public void deleteAllPieces()
	{
	}

	[Token(Token = "0x600063E")]
	[Address(RVA = "0xE582FC", Offset = "0xE582FC", VA = "0xE582FC")]
	private void doWeld(Piece piece, Dictionary<int, Piece> pieces)
	{
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0xE53CDC", Offset = "0xE53CDC", VA = "0xE53CDC")]
	public string loadSlot(int i)
	{
		return null;
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0xE58848", Offset = "0xE58848", VA = "0xE58848")]
	private void createSlot(int iIndex, string file)
	{
	}

	[Token(Token = "0x6000641")]
	[Address(RVA = "0xE58930", Offset = "0xE58930", VA = "0xE58930")]
	public void activateSaveState(bool bValue)
	{
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0xE5893C", Offset = "0xE5893C", VA = "0xE5893C")]
	public bool isSaveState()
	{
		return default(bool);
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0xE58944", Offset = "0xE58944", VA = "0xE58944")]
	public void loadNewGame()
	{
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0xE589C4", Offset = "0xE589C4", VA = "0xE589C4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72F690", Offset = "0x72F690")]
	private IEnumerator loadNewGameCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0xE54BB8", Offset = "0xE54BB8", VA = "0xE54BB8")]
	private List<SerializableJoint> getJoints(AttachablePiece piece)
	{
		return null;
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0xE58A3C", Offset = "0xE58A3C", VA = "0xE58A3C")]
	private GridData getGridData()
	{
		return null;
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0xE58BD0", Offset = "0xE58BD0", VA = "0xE58BD0")]
	public GameControl()
	{
	}
}
[Token(Token = "0x2000167")]
public class TransformStore
{
	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3 position;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Quaternion rotation;

	[Token(Token = "0x600065F")]
	[Address(RVA = "0xDDC314", Offset = "0xDDC314", VA = "0xDDC314")]
	public TransformStore()
	{
	}
}
[Serializable]
[Token(Token = "0x2000168")]
internal class GridData
{
	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool gridEnabled;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public QuaternionSerializable baseAngle;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float baseRotationY;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3Serializable basePosition;

	[Token(Token = "0x6000660")]
	[Address(RVA = "0xE58BC8", Offset = "0xE58BC8", VA = "0xE58BC8")]
	public GridData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000169")]
internal class ScenarioGridData
{
	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public QuaternionSerializable baseAngle;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float baseRotationY;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3Serializable basePosition;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool gridEstablished;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool gridEnabled;

	[Token(Token = "0x6000661")]
	[Address(RVA = "0xAE5764", Offset = "0xAE5764", VA = "0xAE5764")]
	public ScenarioGridData()
	{
	}
}
[Serializable]
[Token(Token = "0x200016A")]
internal class SerializableScenario
{
	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string scenarioId;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool active;

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<SerializablePiece> pieces;

	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ScenarioGridData gridData;

	[Token(Token = "0x6000662")]
	[Address(RVA = "0xAE7964", Offset = "0xAE7964", VA = "0xAE7964")]
	public SerializableScenario()
	{
	}
}
[Serializable]
[Token(Token = "0x200016B")]
internal class SerializablePiece
{
	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int id;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string name;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3Serializable position;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public QuaternionSerializable rotation;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool mirrored;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<int> weldIds;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<SerializableJoint> joints;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int textureId;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "OptionalFieldAttribute", RVA = "0x72AA40", Offset = "0x72AA40")]
	public int pathPosition;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "OptionalFieldAttribute", RVA = "0x72AA50", Offset = "0x72AA50")]
	public List<int> linkedIds;

	[Token(Token = "0x6000663")]
	[Address(RVA = "0xAE795C", Offset = "0xAE795C", VA = "0xAE795C")]
	public SerializablePiece()
	{
	}
}
[Serializable]
[Token(Token = "0x200016C")]
internal class SerializableJoint
{
	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string id;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string idJoint;

	[Token(Token = "0x6000664")]
	[Address(RVA = "0xAE7954", Offset = "0xAE7954", VA = "0xAE7954")]
	public SerializableJoint()
	{
	}
}
[Serializable]
[Token(Token = "0x200016D")]
internal class Vector3Serializable
{
	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float x;

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float y;

	[Token(Token = "0x4000794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float z;

	[Token(Token = "0x6000665")]
	[Address(RVA = "0x9CDC18", Offset = "0x9CDC18", VA = "0x9CDC18")]
	public static Vector3 Convert(Vector3Serializable ser)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0x9CDC34", Offset = "0x9CDC34", VA = "0x9CDC34")]
	public static Vector3Serializable Convert(Vector3 ser)
	{
		return null;
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0x9CDCB8", Offset = "0x9CDCB8", VA = "0x9CDCB8")]
	public Vector3Serializable()
	{
	}
}
[Serializable]
[Token(Token = "0x200016E")]
internal class QuaternionSerializable
{
	[Token(Token = "0x4000795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float x;

	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float y;

	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float z;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float w;

	[Token(Token = "0x6000668")]
	[Address(RVA = "0xADB3C0", Offset = "0xADB3C0", VA = "0xADB3C0")]
	public static Quaternion Convert(QuaternionSerializable ser)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000669")]
	[Address(RVA = "0xADB3DC", Offset = "0xADB3DC", VA = "0xADB3DC")]
	public static QuaternionSerializable Convert(Quaternion ser)
	{
		return null;
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0xADB464", Offset = "0xADB464", VA = "0xADB464")]
	public QuaternionSerializable()
	{
	}
}
[Token(Token = "0x200016F")]
public class MenuUIButton : NVRInteractable
{
	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public NVRButton UIButton;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string IdButton;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	public List<GameObject> MenuUIList;

	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected GameObject menuUIGameObject;

	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject buttons;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Transform halo;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Transform model;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Color defaultHaloColor;

	[Token(Token = "0x40007A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Color highlightHaloColor;

	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Quaternion initialRotation;

	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float speed;

	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public bool defaultMenuOption;

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public string s_defaultHaloColor;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public string s_highlightHaloColor;

	[Token(Token = "0x600066B")]
	[Address(RVA = "0xB236C0", Offset = "0xB236C0", VA = "0xB236C0", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0xB23BAC", Offset = "0xB23BAC", VA = "0xB23BAC", Slot = "12")]
	public override void HoveringEnter(NVRHand hand)
	{
	}

	[Token(Token = "0x600066D")]
	[Address(RVA = "0xB23C48", Offset = "0xB23C48", VA = "0xB23C48", Slot = "14")]
	public override void HoveringExit(NVRHand hand)
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0xB23D08", Offset = "0xB23D08", VA = "0xB23D08")]
	public void checkMovement()
	{
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0xB23EF0", Offset = "0xB23EF0", VA = "0xB23EF0", Slot = "13")]
	public override void HoveringUpdate(NVRHand hand, float forTime)
	{
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0xB23FDC", Offset = "0xB23FDC", VA = "0xB23FDC")]
	public void activateAssocitedButtonMenu()
	{
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0xB24698", Offset = "0xB24698", VA = "0xB24698")]
	public MenuUIButton()
	{
	}
}
[Token(Token = "0x2000170")]
public class NVRAppMenuListener : MonoBehaviour
{
	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AppMenu menu;

	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private NVRButtons[] menuButtons;

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public NVRHand m_currentHand;

	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public NVRButtons[] m_currentButton;

	[Token(Token = "0x40007AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private NVRPlayer m_player;

	[Token(Token = "0x6000672")]
	[Address(RVA = "0x122EACC", Offset = "0x122EACC", VA = "0x122EACC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000673")]
	[Address(RVA = "0x122EB58", Offset = "0x122EB58", VA = "0x122EB58")]
	private void Update()
	{
	}

	[Token(Token = "0x6000674")]
	[Address(RVA = "0x122EB60", Offset = "0x122EB60", VA = "0x122EB60")]
	private void checkButtonAction(NVRButtons[] buttons)
	{
	}

	[Token(Token = "0x6000675")]
	[Address(RVA = "0x122ECA4", Offset = "0x122ECA4", VA = "0x122ECA4")]
	private bool buttonPressed(NVRHand hand, NVRButtons[] buttons)
	{
		return default(bool);
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0x122EE54", Offset = "0x122EE54", VA = "0x122EE54")]
	private bool buttonUp(NVRHand hand, NVRButtons[] buttons)
	{
		return default(bool);
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0x122F174", Offset = "0x122F174", VA = "0x122F174")]
	public NVRAppMenuListener()
	{
	}
}
[Token(Token = "0x2000171")]
public class SaveSlot : NVRInteractable
{
	[Token(Token = "0x2000172")]
	public delegate void Function();

	[Token(Token = "0x2000173")]
	private class LoadSaveListener : IDialogListener
	{
		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SaveSlot m_parent;

		[Token(Token = "0x6000697")]
		[Address(RVA = "0x1B1D3F8", Offset = "0x1B1D3F8", VA = "0x1B1D3F8")]
		public LoadSaveListener(SaveSlot parent)
		{
		}

		[Token(Token = "0x6000698")]
		[Address(RVA = "0x1B1D42C", Offset = "0x1B1D42C", VA = "0x1B1D42C", Slot = "4")]
		public void actionPerformed(string action)
		{
		}
	}

	[Token(Token = "0x2000174")]
	private class NewGameListener : IDialogListener
	{
		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SaveSlot m_parent;

		[Token(Token = "0x6000699")]
		[Address(RVA = "0x1B1D500", Offset = "0x1B1D500", VA = "0x1B1D500")]
		public NewGameListener(SaveSlot parent)
		{
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0x1B1D534", Offset = "0x1B1D534", VA = "0x1B1D534", Slot = "4")]
		public void actionPerformed(string action)
		{
		}
	}

	[Token(Token = "0x2000175")]
	private class ErrorListener : IDialogListener
	{
		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private SaveSlot m_parent;

		[Token(Token = "0x600069B")]
		[Address(RVA = "0x1B1D35C", Offset = "0x1B1D35C", VA = "0x1B1D35C")]
		public ErrorListener(SaveSlot parent)
		{
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0x1B1D390", Offset = "0x1B1D390", VA = "0x1B1D390", Slot = "4")]
		public void actionPerformed(string action)
		{
		}
	}

	[Token(Token = "0x2000176")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7285D0", Offset = "0x7285D0")]
	private sealed class <loadSlotDelayed>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SaveSlot <>4__this;

		[Token(Token = "0x17000076")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006A0")]
			[Address(RVA = "0x1B1D30C", Offset = "0x1B1D30C", VA = "0x1B1D30C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000077")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006A2")]
			[Address(RVA = "0x1B1D354", Offset = "0x1B1D354", VA = "0x1B1D354", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0x1B1D194", Offset = "0x1B1D194", VA = "0x1B1D194")]
		[DebuggerHidden]
		public <loadSlotDelayed>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0x1B1D1C0", Offset = "0x1B1D1C0", VA = "0x1B1D1C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0x1B1D1C4", Offset = "0x1B1D1C4", VA = "0x1B1D1C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x1B1D314", Offset = "0x1B1D314", VA = "0x1B1D314", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000177")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7285E0", Offset = "0x7285E0")]
	private sealed class <_InvokeNextFrame>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Function function;

		[Token(Token = "0x17000078")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006A6")]
			[Address(RVA = "0x1B1D144", Offset = "0x1B1D144", VA = "0x1B1D144", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000079")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006A8")]
			[Address(RVA = "0x1B1D18C", Offset = "0x1B1D18C", VA = "0x1B1D18C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x1B1CE9C", Offset = "0x1B1CE9C", VA = "0x1B1CE9C")]
		[DebuggerHidden]
		public <_InvokeNextFrame>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x1B1CEC8", Offset = "0x1B1CEC8", VA = "0x1B1CEC8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x1B1CECC", Offset = "0x1B1CECC", VA = "0x1B1CECC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x1B1D14C", Offset = "0x1B1D14C", VA = "0x1B1D14C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007AC")]
	private const string SLOT_KEY = "menu_saveslot";

	[Token(Token = "0x40007AD")]
	private const string SAVE_ERROR_MESSAGE_KEY = "menu_dialog_errorsaving";

	[Token(Token = "0x40007AE")]
	private const string LOAD_ERROR_MESSAGE_KEY = "menu_dialog_errorloading";

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public TextMeshPro slotName;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private string m_strImage;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int m_iIndex;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private NVRPlayer m_player;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameControl m_gc;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool m_bExecuteSave;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private UIDialog m_dialog;

	[Token(Token = "0x40007B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Transform photoMarquee;

	[Token(Token = "0x40007B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Texture greenTexture;

	[Token(Token = "0x40007B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Texture imageTexture;

	[Token(Token = "0x6000678")]
	[Address(RVA = "0xAE3BDC", Offset = "0xAE3BDC", VA = "0xAE3BDC", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0xAE3CC8", Offset = "0xAE3CC8", VA = "0xAE3CC8")]
	private void initPlayer()
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0xAE3D74", Offset = "0xAE3D74", VA = "0xAE3D74")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0xAE3E98", Offset = "0xAE3E98", VA = "0xAE3E98")]
	private void Update()
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0xAE42DC", Offset = "0xAE42DC", VA = "0xAE42DC")]
	public void setIndex(int iIndex)
	{
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0xAE42E4", Offset = "0xAE42E4", VA = "0xAE42E4")]
	public void setImage(string image)
	{
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0xAE44A8", Offset = "0xAE44A8", VA = "0xAE44A8")]
	public void setImage(Texture2D image)
	{
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0xAE430C", Offset = "0xAE430C", VA = "0xAE430C")]
	private void loadSlotImage()
	{
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0xAE45D4", Offset = "0xAE45D4", VA = "0xAE45D4")]
	private Texture2D getSquareImage(Texture2D originalTex)
	{
		return null;
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0xAE41D8", Offset = "0xAE41D8", VA = "0xAE41D8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72F7E0", Offset = "0x72F7E0")]
	private IEnumerator loadSlotDelayed()
	{
		return null;
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0xAE487C", Offset = "0xAE487C", VA = "0xAE487C")]
	private void setHandsEnabled(bool bValue)
	{
	}

	[Token(Token = "0x6000683")]
	[Address(RVA = "0xAE4958", Offset = "0xAE4958", VA = "0xAE4958", Slot = "13")]
	public override void HoveringUpdate(NVRHand hand, float forTime)
	{
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0xAE470C", Offset = "0xAE470C", VA = "0xAE470C")]
	private void setColor(Texture colorTexture)
	{
	}

	[Token(Token = "0x6000685")]
	[Address(RVA = "0xAE4CDC", Offset = "0xAE4CDC", VA = "0xAE4CDC")]
	public void save()
	{
	}

	[Token(Token = "0x6000686")]
	[Address(RVA = "0xAE4B9C", Offset = "0xAE4B9C", VA = "0xAE4B9C")]
	public void InvokeNextFrame(Function function)
	{
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0xAE4D58", Offset = "0xAE4D58", VA = "0xAE4D58")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72F840", Offset = "0x72F840")]
	private IEnumerator _InvokeNextFrame(Function function)
	{
		return null;
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0xAE4DD0", Offset = "0xAE4DD0", VA = "0xAE4DD0")]
	private void prepareSaveState()
	{
	}

	[Token(Token = "0x6000689")]
	[Address(RVA = "0xAE416C", Offset = "0xAE416C", VA = "0xAE416C")]
	private void cancelSaveState()
	{
	}

	[Token(Token = "0x600068A")]
	[Address(RVA = "0xAE41B8", Offset = "0xAE41B8", VA = "0xAE41B8")]
	public void cancelActionState()
	{
	}

	[Token(Token = "0x600068B")]
	[Address(RVA = "0xAE4E80", Offset = "0xAE4E80", VA = "0xAE4E80")]
	private void showDialogLoadSave()
	{
	}

	[Token(Token = "0x600068C")]
	[Address(RVA = "0xAE4F68", Offset = "0xAE4F68", VA = "0xAE4F68")]
	private void showDialogNewGame()
	{
	}

	[Token(Token = "0x600068D")]
	[Address(RVA = "0xAE4250", Offset = "0xAE4250", VA = "0xAE4250")]
	private void showDialogError(string errorMessage)
	{
	}

	[Token(Token = "0x600068E")]
	[Address(RVA = "0xAE4EFC", Offset = "0xAE4EFC", VA = "0xAE4EFC")]
	private void showDialog(string dialogName, IDialogListener listener)
	{
	}

	[Token(Token = "0x600068F")]
	[Address(RVA = "0xAE4FE4", Offset = "0xAE4FE4", VA = "0xAE4FE4")]
	private void showDialog(string dialogName, string dialogMessage, IDialogListener listener)
	{
	}

	[Token(Token = "0x6000690")]
	[Address(RVA = "0xAE5280", Offset = "0xAE5280", VA = "0xAE5280")]
	public void load()
	{
	}

	[Token(Token = "0x6000691")]
	[Address(RVA = "0xAE53EC", Offset = "0xAE53EC", VA = "0xAE53EC")]
	public void loadNewGame()
	{
	}

	[Token(Token = "0x6000692")]
	[Address(RVA = "0xAE5420", Offset = "0xAE5420", VA = "0xAE5420")]
	public SaveSlot()
	{
	}
}
[Token(Token = "0x2000178")]
public class SubMenuBehaviour : MonoBehaviour
{
	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool defaultMenuOption;

	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool firstPressed;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int current_subMenu;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<MenuUIButton> buttonsList;

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0x128B280", Offset = "0x128B280", VA = "0x128B280")]
	private void Start()
	{
	}

	[Token(Token = "0x60006AA")]
	[Address(RVA = "0x128B36C", Offset = "0x128B36C", VA = "0x128B36C")]
	public void activateMenu()
	{
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0x128B448", Offset = "0x128B448", VA = "0x128B448")]
	public void deactivateMenu()
	{
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0x128B508", Offset = "0x128B508", VA = "0x128B508")]
	public void updateCurrent_subMenu(string button_id)
	{
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0x128B724", Offset = "0x128B724", VA = "0x128B724")]
	public SubMenuBehaviour()
	{
	}
}
[Token(Token = "0x2000179")]
public class Trash : MonoBehaviour
{
	[Token(Token = "0x200017A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7285F0", Offset = "0x7285F0")]
	private sealed class <DeletePiece>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Trash <>4__this;

		[Token(Token = "0x1700007A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006BA")]
			[Address(RVA = "0x1B20654", Offset = "0x1B20654", VA = "0x1B20654", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006BC")]
			[Address(RVA = "0x1B2069C", Offset = "0x1B2069C", VA = "0x1B2069C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x1B20504", Offset = "0x1B20504", VA = "0x1B20504")]
		[DebuggerHidden]
		public <DeletePiece>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x1B20530", Offset = "0x1B20530", VA = "0x1B20530", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x1B20534", Offset = "0x1B20534", VA = "0x1B20534", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x1B2065C", Offset = "0x1B2065C", VA = "0x1B2065C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200017B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728600", Offset = "0x728600")]
	private sealed class <deletePieceImpl>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Piece pieceToDelete;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Trash <>4__this;

		[Token(Token = "0x1700007C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60006C0")]
			[Address(RVA = "0x1B20890", Offset = "0x1B20890", VA = "0x1B20890", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60006C2")]
			[Address(RVA = "0x1B208D8", Offset = "0x1B208D8", VA = "0x1B208D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x1B206A4", Offset = "0x1B206A4", VA = "0x1B206A4")]
		[DebuggerHidden]
		public <deletePieceImpl>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x1B206D0", Offset = "0x1B206D0", VA = "0x1B206D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x1B206D4", Offset = "0x1B206D4", VA = "0x1B206D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x1B20898", Offset = "0x1B20898", VA = "0x1B20898", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float m_fHoverTimeToRemove;

	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform trashTop;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 trashTopOpen;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Quaternion trashTopOpenRotation;

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Quaternion trashTopClosedRotation;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private HashSet<Collider> colliders;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Piece pieceToDelete;

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0xDDC31C", Offset = "0xDDC31C", VA = "0xDDC31C")]
	protected void Start()
	{
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0xDDC38C", Offset = "0xDDC38C", VA = "0xDDC38C")]
	protected void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0xDDC594", Offset = "0xDDC594", VA = "0xDDC594")]
	protected void OnTriggerStay(Collider other)
	{
	}

	[Token(Token = "0x60006B1")]
	[Address(RVA = "0xDDC9F8", Offset = "0xDDC9F8", VA = "0xDDC9F8")]
	protected void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0xDDC784", Offset = "0xDDC784", VA = "0xDDC784")]
	private void deletePieceNow()
	{
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0xDDC51C", Offset = "0xDDC51C", VA = "0xDDC51C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72F940", Offset = "0x72F940")]
	private IEnumerator DeletePiece()
	{
		return null;
	}

	[Token(Token = "0x60006B4")]
	[Address(RVA = "0xDDCB4C", Offset = "0xDDCB4C", VA = "0xDDCB4C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72F9A0", Offset = "0x72F9A0")]
	private IEnumerator deletePieceImpl(Piece pieceToDelete)
	{
		return null;
	}

	[Token(Token = "0x60006B5")]
	[Address(RVA = "0xDDC69C", Offset = "0xDDC69C", VA = "0xDDC69C")]
	private void resetTrash()
	{
	}

	[Token(Token = "0x60006B6")]
	[Address(RVA = "0xDDCBE0", Offset = "0xDDCBE0", VA = "0xDDCBE0")]
	public Trash()
	{
	}
}
[Token(Token = "0x200017C")]
public static class MonoBehaviourExtensions
{
	[Token(Token = "0x60006C3")]
	[Address(RVA = "0xB2478C", Offset = "0xB2478C", VA = "0xB2478C")]
	public static void Invoke(this MonoBehaviour me, Action theDelegate, float time)
	{
	}

	[Token(Token = "0x60006C4")]
	[Address(RVA = "0xB247EC", Offset = "0xB247EC", VA = "0xB247EC")]
	public static void CancelInvoke(this MonoBehaviour me, Action theDelegate)
	{
	}
}
[Token(Token = "0x200017D")]
public class ObjectPoolManager
{
	[Token(Token = "0x40007D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject pooledObject;

	[Token(Token = "0x40007D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool grow;

	[Token(Token = "0x40007D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<GameObject> pooledObjects;

	[Token(Token = "0x60006C5")]
	[Address(RVA = "0xDAE018", Offset = "0xDAE018", VA = "0xDAE018")]
	public void initialise(GameObject pooledObject, int poolSize, bool grow)
	{
	}

	[Token(Token = "0x60006C6")]
	[Address(RVA = "0xDAE178", Offset = "0xDAE178", VA = "0xDAE178")]
	public GameObject getPooledObject()
	{
		return null;
	}

	[Token(Token = "0x60006C7")]
	[Address(RVA = "0xDAE31C", Offset = "0xDAE31C", VA = "0xDAE31C")]
	public ObjectPoolManager()
	{
	}
}
[Token(Token = "0x200017E")]
public class TrainerVR_PoolManager : MonoBehaviour
{
	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject explosionPrefab;

	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int explosionPoolSize;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static TrainerVR_PoolManager instance;

	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ObjectPoolManager explosionPool;

	[Token(Token = "0x60006C8")]
	[Address(RVA = "0xDDC104", Offset = "0xDDC104", VA = "0xDDC104")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006C9")]
	[Address(RVA = "0xDDC1BC", Offset = "0xDDC1BC", VA = "0xDDC1BC")]
	public static TrainerVR_PoolManager getInstance()
	{
		return null;
	}

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0xDDC208", Offset = "0xDDC208", VA = "0xDDC208")]
	public GameObject getExplosion()
	{
		return null;
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0xDDC224", Offset = "0xDDC224", VA = "0xDDC224")]
	public TrainerVR_PoolManager()
	{
	}
}
[Token(Token = "0x200017F")]
public class PS4LoadSave : MonoBehaviour
{
	[Token(Token = "0x40007DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string SCE_SAVE_DATA_ERROR_PARAMETER;

	[Token(Token = "0x40007DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static string SCE_SAVE_DATA_ERROR_NOT_INITIALIZED;

	[Token(Token = "0x40007DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static string SCE_SAVE_DATA_ERROR_OUT_OF_MEMORY;

	[Token(Token = "0x40007DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static string SCE_SAVE_DATA_ERROR_BUSY;

	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static string SCE_SAVE_DATA_ERROR_FINGERPRINT_MISMATCH;

	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static string SCE_SAVE_DATA_ERROR_NOT_FOUND;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static string SCE_SAVE_DATA_ERROR_INTERNAL;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static string SCE_SAVE_DATA_ERROR_BROKEN;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string SCE_SAVE_DATA_ERROR_INVALID_LOGIN_USER;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string SCE_SAVE_DATA_ERROR_BACKUP_BUSY;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string SCE_USER_SERVICE_ERROR_NOT_INITIALIZED;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static string SCE_OK;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityAction<bool, byte[]> OnLoadGameAction;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public UnityAction<bool> OnSaveGameAction;

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityAction<bool> OnDeleteGameAction;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static PS4LoadSave Instance;

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0xD0FFD8", Offset = "0xD0FFD8", VA = "0xD0FFD8")]
	public PS4LoadSave()
	{
	}
}
[Token(Token = "0x2000180")]
public class ActionTrackButton_Piece : AttachablePiece
{
	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ActionTrackButton_Piece trackButtonPiece;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public NVRHand actionHand;

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private Dictionary<ActionPiece, LinePainter> linkedPieces;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private TrackButton trackButton;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private LinePainter linePainter;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	private bool showingLinks;

	[Token(Token = "0x60006CE")]
	[Address(RVA = "0x101F920", Offset = "0x101F920", VA = "0x101F920", Slot = "30")]
	public override void init()
	{
	}

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0x101F9B8", Offset = "0x101F9B8", VA = "0x101F9B8", Slot = "28")]
	public override void enablePiece(bool enable)
	{
	}

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0x101F9C4", Offset = "0x101F9C4", VA = "0x101F9C4", Slot = "38")]
	public override Piece clonePiece(bool bAnimation, int iId)
	{
		return null;
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0x101FA0C", Offset = "0x101FA0C", VA = "0x101FA0C", Slot = "42")]
	public override void actionButtonDown()
	{
	}

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0x101E7B0", Offset = "0x101E7B0", VA = "0x101E7B0")]
	public void linkPiece(ActionPiece piece)
	{
	}

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0x101FB44", Offset = "0x101FB44", VA = "0x101FB44")]
	public List<int> getLinkedIds()
	{
		return null;
	}

	[Token(Token = "0x60006D4")]
	[Address(RVA = "0x101FD58", Offset = "0x101FD58", VA = "0x101FD58")]
	private void Update()
	{
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0x101FF7C", Offset = "0x101FF7C", VA = "0x101FF7C")]
	private void showLinePainters()
	{
	}

	[Token(Token = "0x60006D6")]
	[Address(RVA = "0x1020504", Offset = "0x1020504", VA = "0x1020504")]
	private void hideLinePainters()
	{
	}

	[Token(Token = "0x60006D7")]
	[Address(RVA = "0x102063C", Offset = "0x102063C", VA = "0x102063C")]
	public void doLinkedPiecesActions()
	{
	}

	[Token(Token = "0x60006D8")]
	[Address(RVA = "0x1020998", Offset = "0x1020998", VA = "0x1020998")]
	public ActionTrackButton_Piece()
	{
	}
}
[Token(Token = "0x2000181")]
public class ActionTrafficLight_Piece : AttachablePiece
{
	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private LightInteractor redLight;

	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private LightInteractor greenLight;

	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private Transform barrier;

	[Token(Token = "0x40007F4")]
	private const float BARRIER_CLOSE_ANGLE = 0f;

	[Token(Token = "0x40007F5")]
	private const float BARRIER_OPEN_ANGLE = -40f;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private Quaternion barrierCloseRotation;

	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	private Quaternion barrierOpenRotation;

	[Token(Token = "0x40007F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	private TrainCollisionAction trainCollisionAction;

	[Token(Token = "0x40007F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	public bool open;

	[Token(Token = "0x40007FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
	private int initState;

	[Token(Token = "0x60006DA")]
	[Address(RVA = "0x1020A1C", Offset = "0x1020A1C", VA = "0x1020A1C", Slot = "30")]
	public override void init()
	{
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0x1020DFC", Offset = "0x1020DFC", VA = "0x1020DFC", Slot = "42")]
	public override void actionButtonDown()
	{
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0x1021040", Offset = "0x1021040", VA = "0x1021040", Slot = "15")]
	public override void EndInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0x10210D8", Offset = "0x10210D8", VA = "0x10210D8")]
	private void openBarrier()
	{
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0x1021310", Offset = "0x1021310", VA = "0x1021310")]
	private void closeBarrier()
	{
	}

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0x10214FC", Offset = "0x10214FC", VA = "0x10214FC")]
	public int getState()
	{
		return default(int);
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0x1021524", Offset = "0x1021524", VA = "0x1021524")]
	public void setState(int state)
	{
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0x1020CC4", Offset = "0x1020CC4", VA = "0x1020CC4")]
	public void updateState()
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0x102152C", Offset = "0x102152C", VA = "0x102152C")]
	public ActionTrafficLight_Piece()
	{
	}
}
[Token(Token = "0x2000182")]
public class BuildingLights : MonoBehaviour
{
	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<GameObject> lights;

	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ActionPiece piece;

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0x102FDB0", Offset = "0x102FDB0", VA = "0x102FDB0")]
	private void Start()
	{
	}

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0x1030180", Offset = "0x1030180", VA = "0x1030180")]
	private void ChangeLight(bool state)
	{
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0x10303FC", Offset = "0x10303FC", VA = "0x10303FC")]
	private void LightsOut()
	{
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0x103004C", Offset = "0x103004C", VA = "0x103004C")]
	private void LightsOn()
	{
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0x10303D4", Offset = "0x10303D4", VA = "0x10303D4")]
	private bool lightState()
	{
		return default(bool);
	}

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0x1030518", Offset = "0x1030518", VA = "0x1030518")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0x1030618", Offset = "0x1030618", VA = "0x1030618")]
	public BuildingLights()
	{
	}
}
[Token(Token = "0x2000183")]
public class CargoItem : MonoBehaviour
{
	[Token(Token = "0x2000184")]
	private class RigidBodyValues
	{
		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float mass;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float drag;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float angularDrag;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool useGravity;

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x9D7DA4", Offset = "0x9D7DA4", VA = "0x9D7DA4")]
		public RigidBodyValues()
		{
		}
	}

	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Piece m_piece;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CargoLoad m_cargoLoad;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Rigidbody m_rigidbody;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RigidBodyValues m_rigidBodyValues;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool fixedPositionEnabled;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform m_noTrack;

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0xE24840", Offset = "0xE24840", VA = "0xE24840")]
	private void Start()
	{
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0xE2494C", Offset = "0xE2494C", VA = "0xE2494C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0xE24A84", Offset = "0xE24A84", VA = "0xE24A84")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0xE24A18", Offset = "0xE24A18", VA = "0xE24A18")]
	private void invokeCargoLoad()
	{
	}

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0xE24C88", Offset = "0xE24C88", VA = "0xE24C88")]
	private void setCargoLoad()
	{
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0xE24F14", Offset = "0xE24F14", VA = "0xE24F14")]
	public void goToSleep()
	{
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0xE250F4", Offset = "0xE250F4", VA = "0xE250F4")]
	public void goToAwake()
	{
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0xE24B7C", Offset = "0xE24B7C", VA = "0xE24B7C")]
	private void disableCargoMode()
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0xE2535C", Offset = "0xE2535C", VA = "0xE2535C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0xE2540C", Offset = "0xE2540C", VA = "0xE2540C")]
	public CargoItem()
	{
	}
}
[Token(Token = "0x2000185")]
public class CargoLoad : MonoBehaviour
{
	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 m_currentPosition;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 m_lastPosition;

	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject cargoPosition;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<CargoItem> cargoItem;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool acceptCargo;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Train train;

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0xE25414", Offset = "0xE25414", VA = "0xE25414")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0xE25460", Offset = "0xE25460", VA = "0xE25460")]
	public bool isInMovement()
	{
		return default(bool);
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0xE25498", Offset = "0xE25498", VA = "0xE25498")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60006F8")]
	[Address(RVA = "0xE25688", Offset = "0xE25688", VA = "0xE25688")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0xE25738", Offset = "0xE25738", VA = "0xE25738")]
	public CargoLoad()
	{
	}
}
[Token(Token = "0x2000186")]
public class DemolitionBallPiece : Piece
{
	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private Transform m_myHandSphere;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private Vector3 m_oldPosition;

	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private Vector3 m_lastPosition;

	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private float m_fRadius;

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	private bool m_bCheckMovement;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Piece s_clonedBall;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19D")]
	private bool m_bForceUnlock;

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0xE2F3B0", Offset = "0xE2F3B0", VA = "0xE2F3B0", Slot = "10")]
	public override void BeginInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0xE2F4E4", Offset = "0xE2F4E4", VA = "0xE2F4E4", Slot = "38")]
	public override Piece clonePiece(bool bAnimation, int iId)
	{
		return null;
	}

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0xE2F6A4", Offset = "0xE2F6A4", VA = "0xE2F6A4", Slot = "15")]
	public override void EndInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x60006FD")]
	[Address(RVA = "0xE2F744", Offset = "0xE2F744", VA = "0xE2F744")]
	private void Update()
	{
	}

	[Token(Token = "0x60006FE")]
	[Address(RVA = "0xE2FB40", Offset = "0xE2FB40", VA = "0xE2FB40")]
	public void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60006FF")]
	[Address(RVA = "0xE2F930", Offset = "0xE2F930", VA = "0xE2F930")]
	private void unlockAroundPieces()
	{
	}

	[Token(Token = "0x6000700")]
	[Address(RVA = "0xE2F884", Offset = "0xE2F884", VA = "0xE2F884")]
	private float getScaledValue(float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000701")]
	[Address(RVA = "0xE2FCCC", Offset = "0xE2FCCC", VA = "0xE2FCCC", Slot = "34")]
	protected override void finishCheckMovement()
	{
	}

	[Token(Token = "0x6000702")]
	[Address(RVA = "0xE2FD98", Offset = "0xE2FD98", VA = "0xE2FD98")]
	public DemolitionBallPiece()
	{
	}
}
[Token(Token = "0x2000187")]
public class Dynamite : ActionPiece
{
	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	public float power;

	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public float radius;

	[Token(Token = "0x4000816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	public float upForce;

	[Token(Token = "0x4000817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public float detonationDelay;

	[Token(Token = "0x4000818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private Transform radius_sphere;

	[Token(Token = "0x4000819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private bool exploding;

	[Token(Token = "0x6000704")]
	[Address(RVA = "0xE4D518", Offset = "0xE4D518", VA = "0xE4D518", Slot = "30")]
	public override void init()
	{
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0xE4D748", Offset = "0xE4D748", VA = "0xE4D748", Slot = "42")]
	public override void actionButtonDown()
	{
	}

	[Token(Token = "0x6000706")]
	[Address(RVA = "0xE4D95C", Offset = "0xE4D95C", VA = "0xE4D95C", Slot = "10")]
	public override void BeginInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x6000707")]
	[Address(RVA = "0xE4D9A0", Offset = "0xE4D9A0", VA = "0xE4D9A0", Slot = "15")]
	public override void EndInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0xE4D9E4", Offset = "0xE4D9E4", VA = "0xE4D9E4")]
	private void hideDynamite()
	{
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0xE4DA88", Offset = "0xE4DA88", VA = "0xE4DA88")]
	private void destroyDynamite()
	{
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0xE4D69C", Offset = "0xE4D69C", VA = "0xE4D69C")]
	private float getScaledValue(float value)
	{
		return default(float);
	}

	[Token(Token = "0x600070B")]
	[Address(RVA = "0xE4DB00", Offset = "0xE4DB00", VA = "0xE4DB00")]
	public Dynamite()
	{
	}
}
[Token(Token = "0x2000188")]
public class LightBulb : MonoBehaviour
{
	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LightManager globalLight;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject localLight;

	[Token(Token = "0x600070C")]
	[Address(RVA = "0xB1BE00", Offset = "0xB1BE00", VA = "0xB1BE00")]
	private void Start()
	{
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0xB1C040", Offset = "0xB1C040", VA = "0xB1C040")]
	private void ChangeLight(bool state)
	{
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0xB1C064", Offset = "0xB1C064", VA = "0xB1C064")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0xB1C200", Offset = "0xB1C200", VA = "0xB1C200")]
	public LightBulb()
	{
	}
}
[Token(Token = "0x2000189")]
public class LightInteractor
{
	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameObject lightOn;

	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject lightOff;

	[Token(Token = "0x6000710")]
	[Address(RVA = "0xB1C208", Offset = "0xB1C208", VA = "0xB1C208")]
	public LightInteractor(GameObject lightOn, GameObject lightOff)
	{
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0xB1C258", Offset = "0xB1C258", VA = "0xB1C258")]
	public void turnOn()
	{
	}

	[Token(Token = "0x6000712")]
	[Address(RVA = "0xB1C29C", Offset = "0xB1C29C", VA = "0xB1C29C")]
	public void turnOff()
	{
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0xB1C2E0", Offset = "0xB1C2E0", VA = "0xB1C2E0")]
	public bool isLightOn()
	{
		return default(bool);
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0xB1C2FC", Offset = "0xB1C2FC", VA = "0xB1C2FC")]
	public void toggle()
	{
	}
}
[Token(Token = "0x200018A")]
public class Piece : NVRInteractableItem
{
	[Token(Token = "0x200018B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728620", Offset = "0x728620")]
	private sealed class <startInteraction>d__30 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Piece <>4__this;

		[Token(Token = "0x1700007E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600073B")]
			[Address(RVA = "0x9E29FC", Offset = "0x9E29FC", VA = "0x9E29FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700007F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600073D")]
			[Address(RVA = "0x9E2A44", Offset = "0x9E2A44", VA = "0x9E2A44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0x9E2904", Offset = "0x9E2904", VA = "0x9E2904")]
		[DebuggerHidden]
		public <startInteraction>d__30(int <>1__state)
		{
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0x9E2930", Offset = "0x9E2930", VA = "0x9E2930", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0x9E2934", Offset = "0x9E2934", VA = "0x9E2934", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0x9E2A04", Offset = "0x9E2A04", VA = "0x9E2A04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200018C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728630", Offset = "0x728630")]
	private sealed class <removeInteraction>d__31 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Piece <>4__this;

		[Token(Token = "0x17000080")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000741")]
			[Address(RVA = "0x9E28B4", Offset = "0x9E28B4", VA = "0x9E28B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000081")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000743")]
			[Address(RVA = "0x9E28FC", Offset = "0x9E28FC", VA = "0x9E28FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0x9E27C8", Offset = "0x9E27C8", VA = "0x9E27C8")]
		[DebuggerHidden]
		public <removeInteraction>d__31(int <>1__state)
		{
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0x9E27F4", Offset = "0x9E27F4", VA = "0x9E27F4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000740")]
		[Address(RVA = "0x9E27F8", Offset = "0x9E27F8", VA = "0x9E27F8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0x9E28BC", Offset = "0x9E28BC", VA = "0x9E28BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float lastPieceTime;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float Weight;

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public float MaxWeight;

	[Token(Token = "0x4000821")]
	public const float SCALE_CLONE = 0.05f;

	[Token(Token = "0x4000822")]
	private const float MIN_POSITION_CHANGED = 0.001f;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public bool cloned;

	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
	public bool isMoving;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEA")]
	public bool mirrored;

	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEB")]
	public bool deletable;

	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public bool lockEnabled;

	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	protected GameObject m_collisionCollider;

	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	protected GameObject m_cloneCollider;

	[Token(Token = "0x400082A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	protected GameObject explosionCollider;

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Vector3 previousPosition;

	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Coroutine startInteractionCoroutine;

	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private Coroutine removeInteractionCoroutine;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private Coroutine waitForFinalPositionCoroutine;

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private float waitTime;

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private PieceData m_pieceData;

	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private TransformStore initialTransform;

	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public UnityEvent OnStopMoving;

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public UnityEvent OnDestroyPiece;

	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public bool garbageCollector;

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public List<Piece> testPieces;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public List<Piece> piecesInCloneTrigger;

	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public int triggeredPieces;

	[Token(Token = "0x6000715")]
	[Address(RVA = "0xD1498C", Offset = "0xD1498C", VA = "0xD1498C")]
	public bool isInitiated()
	{
		return default(bool);
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0xD149F8", Offset = "0xD149F8", VA = "0xD149F8")]
	public GameObject getCollisionCollider()
	{
		return null;
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0xD14A00", Offset = "0xD14A00", VA = "0xD14A00", Slot = "28")]
	public virtual void enablePiece(bool enable)
	{
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0xD14A20", Offset = "0xD14A20", VA = "0xD14A20", Slot = "29")]
	protected virtual void setKinematicState(bool bValue)
	{
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0xD14B44", Offset = "0xD14B44", VA = "0xD14B44", Slot = "30")]
	public virtual void init()
	{
	}

	[Token(Token = "0x600071A")]
	[Address(RVA = "0xD15288", Offset = "0xD15288", VA = "0xD15288", Slot = "10")]
	public override void BeginInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0xD15728", Offset = "0xD15728", VA = "0xD15728", Slot = "15")]
	public override void EndInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x600071C")]
	[Address(RVA = "0xD159B0", Offset = "0xD159B0", VA = "0xD159B0")]
	public void enableExplosionCollider(bool enable)
	{
	}

	[Token(Token = "0x600071D")]
	[Address(RVA = "0xD156B0", Offset = "0xD156B0", VA = "0xD156B0")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72FAC0", Offset = "0x72FAC0")]
	private IEnumerator startInteraction()
	{
		return null;
	}

	[Token(Token = "0x600071E")]
	[Address(RVA = "0xD15938", Offset = "0xD15938", VA = "0xD15938")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72FB20", Offset = "0x72FB20")]
	private IEnumerator removeInteraction()
	{
		return null;
	}

	[Token(Token = "0x600071F")]
	[Address(RVA = "0xD15B20", Offset = "0xD15B20", VA = "0xD15B20", Slot = "31")]
	protected virtual void startInteractionImpl()
	{
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0xD15B24", Offset = "0xD15B24", VA = "0xD15B24", Slot = "32")]
	protected virtual void removeInteractionImpl()
	{
	}

	[Token(Token = "0x6000721")]
	[Address(RVA = "0xD158AC", Offset = "0xD158AC", VA = "0xD158AC")]
	public void checkPieceMovement()
	{
	}

	[Token(Token = "0x6000722")]
	[Address(RVA = "0xD15B28", Offset = "0xD15B28", VA = "0xD15B28", Slot = "33")]
	protected virtual void checkMovement()
	{
	}

	[Token(Token = "0x6000723")]
	[Address(RVA = "0xD15C30", Offset = "0xD15C30", VA = "0xD15C30")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000724")]
	[Address(RVA = "0xD15CC4", Offset = "0xD15CC4", VA = "0xD15CC4", Slot = "34")]
	protected virtual void finishCheckMovement()
	{
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0xD163C4", Offset = "0xD163C4", VA = "0xD163C4", Slot = "35")]
	protected virtual void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0xD164F0", Offset = "0xD164F0", VA = "0xD164F0", Slot = "36")]
	protected virtual void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000727")]
	[Address(RVA = "0xD165E0", Offset = "0xD165E0", VA = "0xD165E0")]
	public List<Piece> getContactPieces()
	{
		return null;
	}

	[Token(Token = "0x6000728")]
	[Address(RVA = "0xD165E8", Offset = "0xD165E8", VA = "0xD165E8", Slot = "37")]
	public virtual void setPositionRotation(Vector3 pos, Quaternion rot, CustomNVRAttachPoint point)
	{
	}

	[Token(Token = "0x6000729")]
	[Address(RVA = "0xD15698", Offset = "0xD15698", VA = "0xD15698")]
	public Piece clonePiece(bool bAnimation)
	{
		return null;
	}

	[Token(Token = "0x600072A")]
	[Address(RVA = "0xD16AA8", Offset = "0xD16AA8", VA = "0xD16AA8", Slot = "38")]
	public virtual Piece clonePiece(bool bAnimation, int iId)
	{
		return null;
	}

	[Token(Token = "0x600072B")]
	[Address(RVA = "0xD17250", Offset = "0xD17250", VA = "0xD17250")]
	private void ChangeMenuLightLayer(GameObject go, int layerNumber)
	{
	}

	[Token(Token = "0x600072C")]
	[Address(RVA = "0xD14FC8", Offset = "0xD14FC8", VA = "0xD14FC8")]
	protected void moveToLayer(Transform root, int layer)
	{
	}

	[Token(Token = "0x600072D")]
	[Address(RVA = "0xD173AC", Offset = "0xD173AC", VA = "0xD173AC")]
	public int getId()
	{
		return default(int);
	}

	[Token(Token = "0x600072E")]
	[Address(RVA = "0xD171C4", Offset = "0xD171C4", VA = "0xD171C4")]
	public PieceData getPieceData()
	{
		return null;
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0xD173CC", Offset = "0xD173CC", VA = "0xD173CC", Slot = "39")]
	public virtual void setLockState(bool bState)
	{
	}

	[Token(Token = "0x6000730")]
	[Address(RVA = "0xD174F4", Offset = "0xD174F4", VA = "0xD174F4")]
	public TransformStore getInitialTransform()
	{
		return null;
	}

	[Token(Token = "0x6000731")]
	[Address(RVA = "0xD174FC", Offset = "0xD174FC", VA = "0xD174FC", Slot = "12")]
	public override void HoveringEnter(NVRHand hand)
	{
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0xD17538", Offset = "0xD17538", VA = "0xD17538", Slot = "14")]
	public override void HoveringExit(NVRHand hand)
	{
	}

	[Token(Token = "0x6000733")]
	[Address(RVA = "0xD17574", Offset = "0xD17574", VA = "0xD17574", Slot = "40")]
	protected virtual void setHandState(NVRHand hand)
	{
	}

	[Token(Token = "0x6000734")]
	[Address(RVA = "0xD175F8", Offset = "0xD175F8", VA = "0xD175F8", Slot = "41")]
	protected virtual void setDefaultHandState(NVRHand hand)
	{
	}

	[Token(Token = "0x6000735")]
	[Address(RVA = "0xD1766C", Offset = "0xD1766C", VA = "0xD1766C", Slot = "21")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000736")]
	[Address(RVA = "0xD176AC", Offset = "0xD176AC", VA = "0xD176AC")]
	public Piece()
	{
	}
}
[Token(Token = "0x200018D")]
public class PieceData : MonoBehaviour
{
	[Token(Token = "0x400083E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int id;

	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<int> weldIds;

	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool cloned;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool mirrored;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int s_currentId;

	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Dictionary<int, WeldData> weldPiecesData;

	[Token(Token = "0x6000744")]
	[Address(RVA = "0xAD48C8", Offset = "0xAD48C8", VA = "0xAD48C8")]
	public PieceData()
	{
	}
}
[Token(Token = "0x200018E")]
public class PiecesLockListener : MonoBehaviour
{
	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PiecesLockListener instance;

	[Token(Token = "0x6000746")]
	[Address(RVA = "0xAD5478", Offset = "0xAD5478", VA = "0xAD5478")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0xAD54E4", Offset = "0xAD54E4", VA = "0xAD54E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000748")]
	[Address(RVA = "0xAD54E8", Offset = "0xAD54E8", VA = "0xAD54E8")]
	public static PiecesLockListener getInstance()
	{
		return null;
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0xAD554C", Offset = "0xAD554C", VA = "0xAD554C")]
	public void lockPieces()
	{
	}

	[Token(Token = "0x600074A")]
	[Address(RVA = "0xAD57A4", Offset = "0xAD57A4", VA = "0xAD57A4")]
	public void unlockPieces()
	{
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0xAD55C8", Offset = "0xAD55C8", VA = "0xAD55C8")]
	private void piecesLockState(bool state)
	{
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0xAD57AC", Offset = "0xAD57AC", VA = "0xAD57AC")]
	public PiecesLockListener()
	{
	}
}
[Token(Token = "0x200018F")]
public class ScaleTo : MonoBehaviour
{
	[Token(Token = "0x4000845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float animationSeconds;

	[Token(Token = "0x600074E")]
	[Address(RVA = "0xAE5484", Offset = "0xAE5484", VA = "0xAE5484")]
	public void scaleTo(float fTargetScale)
	{
	}

	[Token(Token = "0x600074F")]
	[Address(RVA = "0xAE54C0", Offset = "0xAE54C0", VA = "0xAE54C0")]
	public void scaleTo(float fTargetScale, float fSeconds)
	{
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0xAE54FC", Offset = "0xAE54FC", VA = "0xAE54FC")]
	public ScaleTo()
	{
	}
}
[Token(Token = "0x2000190")]
public class Sign_Piece : Piece
{
	[Token(Token = "0x2000191")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728640", Offset = "0x728640")]
	private sealed class <StopSound>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sign_Piece <>4__this;

		[Token(Token = "0x17000082")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600075C")]
			[Address(RVA = "0x1B1E2F8", Offset = "0x1B1E2F8", VA = "0x1B1E2F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000083")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600075E")]
			[Address(RVA = "0x1B1E340", Offset = "0x1B1E340", VA = "0x1B1E340", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0x1B1E184", Offset = "0x1B1E184", VA = "0x1B1E184")]
		[DebuggerHidden]
		public <StopSound>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0x1B1E1B0", Offset = "0x1B1E1B0", VA = "0x1B1E1B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0x1B1E1B4", Offset = "0x1B1E1B4", VA = "0x1B1E1B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0x1B1E300", Offset = "0x1B1E300", VA = "0x1B1E300", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000192")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728650", Offset = "0x728650")]
	private sealed class <PlaySound>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sign_Piece <>4__this;

		[Token(Token = "0x17000084")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000762")]
			[Address(RVA = "0x1B1E134", Offset = "0x1B1E134", VA = "0x1B1E134", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000085")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000764")]
			[Address(RVA = "0x1B1E17C", Offset = "0x1B1E17C", VA = "0x1B1E17C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0x1B1DFD4", Offset = "0x1B1DFD4", VA = "0x1B1DFD4")]
		[DebuggerHidden]
		public <PlaySound>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0x1B1E000", Offset = "0x1B1E000", VA = "0x1B1E000", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0x1B1E004", Offset = "0x1B1E004", VA = "0x1B1E004", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0x1B1E13C", Offset = "0x1B1E13C", VA = "0x1B1E13C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000846")]
	private const string LIGHTS_CONTAINER_NAME = "lights";

	[Token(Token = "0x4000847")]
	private const string LIGHTON_1_NAME = "LightOn_1";

	[Token(Token = "0x4000848")]
	private const string LIGHTON_2_NAME = "LightOn_2";

	[Token(Token = "0x4000849")]
	private const string LIGHTOFF_1_NAME = "LightOff_1";

	[Token(Token = "0x400084A")]
	private const string LIGHTOFF_2_NAME = "LightOff_2";

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private LightInteractor light_1;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private LightInteractor light_2;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private AudioSource signSound;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private bool working;

	[Token(Token = "0x6000751")]
	[Address(RVA = "0xAE7C24", Offset = "0xAE7C24", VA = "0xAE7C24", Slot = "30")]
	public override void init()
	{
	}

	[Token(Token = "0x6000752")]
	[Address(RVA = "0xAE7E50", Offset = "0xAE7E50", VA = "0xAE7E50", Slot = "35")]
	protected override void OnTriggerEnter(Collider collider)
	{
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0xAE801C", Offset = "0xAE801C", VA = "0xAE801C", Slot = "36")]
	protected override void OnTriggerExit(Collider collider)
	{
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0xAE810C", Offset = "0xAE810C", VA = "0xAE810C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72FC20", Offset = "0x72FC20")]
	private IEnumerator StopSound()
	{
		return null;
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0xAE7FA4", Offset = "0xAE7FA4", VA = "0xAE7FA4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72FC80", Offset = "0x72FC80")]
	private IEnumerator PlaySound()
	{
		return null;
	}

	[Token(Token = "0x6000756")]
	[Address(RVA = "0xAE8184", Offset = "0xAE8184", VA = "0xAE8184")]
	private void toggleLights()
	{
	}

	[Token(Token = "0x6000757")]
	[Address(RVA = "0xAE81C0", Offset = "0xAE81C0", VA = "0xAE81C0", Slot = "21")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0xAE81C8", Offset = "0xAE81C8", VA = "0xAE81C8")]
	public Sign_Piece()
	{
	}
}
[Token(Token = "0x2000193")]
public class TrackButton : MonoBehaviour
{
	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float BUTTON_DOWN;

	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static float BUTTON_UP;

	[Token(Token = "0x4000857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ActionTrackButton_Piece trackButtonPiece;

	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool buttonDown;

	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float buttonDownTime;

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Rigidbody rb;

	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Piece> unlockedPieces;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int collisions;

	[Token(Token = "0x6000765")]
	[Address(RVA = "0x1290270", Offset = "0x1290270", VA = "0x1290270")]
	public void init(ActionTrackButton_Piece trackButtonPiece)
	{
	}

	[Token(Token = "0x6000766")]
	[Address(RVA = "0x12903AC", Offset = "0x12903AC", VA = "0x12903AC")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6000767")]
	[Address(RVA = "0x12907AC", Offset = "0x12907AC", VA = "0x12907AC")]
	private void OnCollisionExit(Collision other)
	{
	}

	[Token(Token = "0x6000768")]
	[Address(RVA = "0x12909E4", Offset = "0x12909E4", VA = "0x12909E4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000769")]
	[Address(RVA = "0x1290A7C", Offset = "0x1290A7C", VA = "0x1290A7C")]
	public TrackButton()
	{
	}
}
[Token(Token = "0x2000194")]
public class Volcano : Piece
{
	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public PieceTriggerDetector trigger;

	[Token(Token = "0x400085E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public Transform explosionPosition;

	[Token(Token = "0x400085F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private List<Piece> piecesToExpulse;

	[Token(Token = "0x600076B")]
	[Address(RVA = "0x9CE348", Offset = "0x9CE348", VA = "0x9CE348", Slot = "30")]
	public override void init()
	{
	}

	[Token(Token = "0x600076C")]
	[Address(RVA = "0x9CE45C", Offset = "0x9CE45C", VA = "0x9CE45C", Slot = "38")]
	public override Piece clonePiece(bool bAnimation, int iId)
	{
		return null;
	}

	[Token(Token = "0x600076D")]
	[Address(RVA = "0x9CE4B4", Offset = "0x9CE4B4", VA = "0x9CE4B4", Slot = "10")]
	public override void BeginInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x600076E")]
	[Address(RVA = "0x9CE4BC", Offset = "0x9CE4BC", VA = "0x9CE4BC")]
	private void OnTopEnterPiece(Piece piece)
	{
	}

	[Token(Token = "0x600076F")]
	[Address(RVA = "0x9CE5F8", Offset = "0x9CE5F8", VA = "0x9CE5F8")]
	private void OnTopExitPiece(Piece piece)
	{
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0x9CE8C0", Offset = "0x9CE8C0", VA = "0x9CE8C0")]
	private bool isInside(Piece piece)
	{
		return default(bool);
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0x9CEA44", Offset = "0x9CEA44", VA = "0x9CEA44")]
	public Volcano()
	{
	}
}
[Token(Token = "0x2000195")]
public class WeldData
{
	[Token(Token = "0x4000860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<CustomNVRAttachJoint> joints;

	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<CustomNVRAttachPoint> points;

	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Collider> colliders;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool actionable;

	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool mirrorable;

	[Token(Token = "0x4000865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float rigidbodyMass;

	[Token(Token = "0x4000866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Trainer.Path[] paths;

	[Token(Token = "0x4000867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int priority;

	[Token(Token = "0x6000772")]
	[Address(RVA = "0x9D169C", Offset = "0x9D169C", VA = "0x9D169C")]
	public WeldData()
	{
	}
}
[Token(Token = "0x2000196")]
public class WindTurbineRotate : MonoBehaviour
{
	[Token(Token = "0x4000868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform blade;

	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Piece piece;

	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float speed;

	[Token(Token = "0x6000773")]
	[Address(RVA = "0x9D17D0", Offset = "0x9D17D0", VA = "0x9D17D0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000774")]
	[Address(RVA = "0x9D1848", Offset = "0x9D1848", VA = "0x9D1848")]
	private void Update()
	{
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0x9D18B0", Offset = "0x9D18B0", VA = "0x9D18B0")]
	public WindTurbineRotate()
	{
	}
}
[Token(Token = "0x2000197")]
public class centerOfMass : MonoBehaviour
{
	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 centerPoint;

	[Token(Token = "0x6000776")]
	[Address(RVA = "0x9D25D8", Offset = "0x9D25D8", VA = "0x9D25D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000777")]
	[Address(RVA = "0x9D263C", Offset = "0x9D263C", VA = "0x9D263C")]
	public centerOfMass()
	{
	}
}
[Token(Token = "0x2000198")]
public class PieceGarbageCollector : MonoBehaviour
{
	[Token(Token = "0x2000199")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728660", Offset = "0x728660")]
	private sealed class <disableHandsCoroutine>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PieceGarbageCollector <>4__this;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NVRHand[] <hands>5__2;

		[Token(Token = "0x17000086")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000782")]
			[Address(RVA = "0x9E2F50", Offset = "0x9E2F50", VA = "0x9E2F50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000087")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000784")]
			[Address(RVA = "0x9E2F98", Offset = "0x9E2F98", VA = "0x9E2F98", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0x9E2A4C", Offset = "0x9E2A4C", VA = "0x9E2A4C")]
		[DebuggerHidden]
		public <disableHandsCoroutine>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0x9E2A78", Offset = "0x9E2A78", VA = "0x9E2A78", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0x9E2A7C", Offset = "0x9E2A7C", VA = "0x9E2A7C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0x9E2F58", Offset = "0x9E2F58", VA = "0x9E2F58", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PieceGarbageCollector Instance;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Piece> takePieces;

	[Token(Token = "0x400086E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Ufo[] ufos;

	[Token(Token = "0x400086F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool handsDisabled;

	[Token(Token = "0x6000778")]
	[Address(RVA = "0xAD4968", Offset = "0xAD4968", VA = "0xAD4968")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000779")]
	[Address(RVA = "0xAD49BC", Offset = "0xAD49BC", VA = "0xAD49BC")]
	public static PieceGarbageCollector getInstance()
	{
		return null;
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0xAD4A08", Offset = "0xAD4A08", VA = "0xAD4A08")]
	public void addPiece(Piece piece)
	{
	}

	[Token(Token = "0x600077B")]
	[Address(RVA = "0xAD4BF8", Offset = "0xAD4BF8", VA = "0xAD4BF8")]
	private void disableHands()
	{
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0xAD4C38", Offset = "0xAD4C38", VA = "0xAD4C38")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72FD80", Offset = "0x72FD80")]
	private IEnumerator disableHandsCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0xAD4CB0", Offset = "0xAD4CB0", VA = "0xAD4CB0")]
	public void resetUfos()
	{
	}

	[Token(Token = "0x600077E")]
	[Address(RVA = "0xAD4D1C", Offset = "0xAD4D1C", VA = "0xAD4D1C")]
	public PieceGarbageCollector()
	{
	}
}
[Token(Token = "0x200019A")]
public class PieceTriggerDetector : MonoBehaviour
{
	[Token(Token = "0x200019B")]
	public delegate void PieceTriggerDetectorEvent(Piece piece);

	[Token(Token = "0x4000876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<Piece, List<Collider>> pieceColliders;

	[Token(Token = "0x14000015")]
	public event PieceTriggerDetectorEvent OnTriggerEnterPiece
	{
		[Token(Token = "0x6000785")]
		[Address(RVA = "0xAD4DA0", Offset = "0xAD4DA0", VA = "0xAD4DA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72FE30", Offset = "0x72FE30")]
		add
		{
		}
		[Token(Token = "0x6000786")]
		[Address(RVA = "0xAD4E40", Offset = "0xAD4E40", VA = "0xAD4E40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72FE40", Offset = "0x72FE40")]
		remove
		{
		}
	}

	[Token(Token = "0x14000016")]
	public event PieceTriggerDetectorEvent OnTriggerExitPiece
	{
		[Token(Token = "0x6000787")]
		[Address(RVA = "0xAD4EE0", Offset = "0xAD4EE0", VA = "0xAD4EE0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72FE50", Offset = "0x72FE50")]
		add
		{
		}
		[Token(Token = "0x6000788")]
		[Address(RVA = "0xAD4F80", Offset = "0xAD4F80", VA = "0xAD4F80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72FE60", Offset = "0x72FE60")]
		remove
		{
		}
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0xAD5020", Offset = "0xAD5020", VA = "0xAD5020")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600078A")]
	[Address(RVA = "0xAD51E4", Offset = "0xAD51E4", VA = "0xAD51E4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600078B")]
	[Address(RVA = "0xAD5384", Offset = "0xAD5384", VA = "0xAD5384")]
	public List<Piece> getTriggeredPieces()
	{
		return null;
	}

	[Token(Token = "0x600078C")]
	[Address(RVA = "0xAD53F4", Offset = "0xAD53F4", VA = "0xAD53F4")]
	public PieceTriggerDetector()
	{
	}
}
[Token(Token = "0x200019C")]
public class Playlist : MonoBehaviour
{
	[Token(Token = "0x200019D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728670", Offset = "0x728670")]
	private sealed class <PlayCoroutine>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Playlist <>4__this;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioInfo audioInfo;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool loop;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <volume>5__2;

		[Token(Token = "0x17000088")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600079F")]
			[Address(RVA = "0x1B1C614", Offset = "0x1B1C614", VA = "0x1B1C614", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000089")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007A1")]
			[Address(RVA = "0x1B1C65C", Offset = "0x1B1C65C", VA = "0x1B1C65C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0x1B1C384", Offset = "0x1B1C384", VA = "0x1B1C384")]
		[DebuggerHidden]
		public <PlayCoroutine>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0x1B1C3B0", Offset = "0x1B1C3B0", VA = "0x1B1C3B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0x1B1C3B4", Offset = "0x1B1C3B4", VA = "0x1B1C3B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x1B1C61C", Offset = "0x1B1C61C", VA = "0x1B1C61C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000877")]
	private const string METADATA_SEPARATOR = "\n";

	[Token(Token = "0x4000878")]
	private const char METADATA_ATTRIBUTE_SEPARATOR = ';';

	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Playlist Instance;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<AudioClip> clips;

	[Token(Token = "0x400087B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextAsset metadataFile;

	[Token(Token = "0x400087C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMesh audioInfoText;

	[Token(Token = "0x400087D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool mute;

	[Token(Token = "0x400087E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private AudioSource audioSource;

	[Token(Token = "0x400087F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioInfo currentAudioInfo;

	[Token(Token = "0x4000880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<AudioInfo> audioInfoList;

	[Token(Token = "0x4000881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<AudioInfo> currentPlaylist;

	[Token(Token = "0x6000791")]
	[Address(RVA = "0xAD8390", Offset = "0xAD8390", VA = "0xAD8390")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000792")]
	[Address(RVA = "0xAD83E4", Offset = "0xAD83E4", VA = "0xAD83E4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000793")]
	[Address(RVA = "0xAD929C", Offset = "0xAD929C", VA = "0xAD929C")]
	public void UpdatePlaylist()
	{
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0xAD966C", Offset = "0xAD966C", VA = "0xAD966C")]
	public void Play(bool loop = false)
	{
	}

	[Token(Token = "0x6000795")]
	[Address(RVA = "0xAD9534", Offset = "0xAD9534", VA = "0xAD9534")]
	public void Play(Ambient ambient, bool loop = false)
	{
	}

	[Token(Token = "0x6000796")]
	[Address(RVA = "0xAD9708", Offset = "0xAD9708", VA = "0xAD9708")]
	private void Play(AudioInfo audioInfo, bool loop = false)
	{
	}

	[Token(Token = "0x6000797")]
	[Address(RVA = "0xAD9758", Offset = "0xAD9758", VA = "0xAD9758")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72FE70", Offset = "0x72FE70")]
	private IEnumerator PlayCoroutine(AudioInfo audioInfo, bool loop = false)
	{
		return null;
	}

	[Token(Token = "0x6000798")]
	[Address(RVA = "0xAD84F0", Offset = "0xAD84F0", VA = "0xAD84F0")]
	private void loadClips()
	{
	}

	[Token(Token = "0x6000799")]
	[Address(RVA = "0xAD97F8", Offset = "0xAD97F8", VA = "0xAD97F8")]
	private List<string> skipComments(string[] metadata)
	{
		return null;
	}

	[Token(Token = "0x600079A")]
	[Address(RVA = "0xAD9918", Offset = "0xAD9918", VA = "0xAD9918")]
	private void setAudioInfoText(AudioInfo audioInfo)
	{
	}

	[Token(Token = "0x600079B")]
	[Address(RVA = "0xAD9A24", Offset = "0xAD9A24", VA = "0xAD9A24")]
	public Playlist()
	{
	}
}
[Token(Token = "0x200019E")]
internal class AudioInfo
{
	[Token(Token = "0x4000888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x4000889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string author;

	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string license;

	[Token(Token = "0x400088B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Ambient ambient;

	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public ScenariosManager.ScenarioName scenario;

	[Token(Token = "0x400088D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AudioClip clip;

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0x1029854", Offset = "0x1029854", VA = "0x1029854")]
	public AudioInfo()
	{
	}
}
[Token(Token = "0x200019F")]
public enum Ambient
{
	[Token(Token = "0x400088F")]
	Day,
	[Token(Token = "0x4000890")]
	Night,
	[Token(Token = "0x4000891")]
	MainTheme,
	[Token(Token = "0x4000892")]
	All
}
[Token(Token = "0x20001A0")]
public class RandomIdleBehaviour : StateMachineBehaviour
{
	[Token(Token = "0x4000893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxIdleElementsIDs;

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0xADB46C", Offset = "0xADB46C", VA = "0xADB46C", Slot = "9")]
	public override void OnStateMachineEnter(Animator animator, int stateMachinePathHash)
	{
	}

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0xADB4E4", Offset = "0xADB4E4", VA = "0xADB4E4", Slot = "10")]
	public override void OnStateMachineExit(Animator animator, int stateMachinePathHash)
	{
	}

	[Token(Token = "0x60007A5")]
	[Address(RVA = "0xADB4E8", Offset = "0xADB4E8", VA = "0xADB4E8")]
	public RandomIdleBehaviour()
	{
	}
}
[Token(Token = "0x20001A1")]
public class ScenarioTeleportPoint : NVRTeleportPoint
{
	[Token(Token = "0x4000894")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public UnityEvent OnTeleport;

	[Token(Token = "0x4000895")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ScenariosManager.ScenarioName scenario;

	[Token(Token = "0x4000896")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform destinationPos;

	[Token(Token = "0x4000897")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject fx;

	[Token(Token = "0x60007A6")]
	[Address(RVA = "0xAE576C", Offset = "0xAE576C", VA = "0xAE576C", Slot = "4")]
	public override void OnTeleportEnter()
	{
	}

	[Token(Token = "0x60007A7")]
	[Address(RVA = "0xAE59A4", Offset = "0xAE59A4", VA = "0xAE59A4")]
	private void setPlayerPosition(Transform _destinationPos)
	{
	}

	[Token(Token = "0x60007A8")]
	[Address(RVA = "0xAE5A80", Offset = "0xAE5A80", VA = "0xAE5A80", Slot = "6")]
	public override void OnTeleportHoveringEnter()
	{
	}

	[Token(Token = "0x60007A9")]
	[Address(RVA = "0xAE5B4C", Offset = "0xAE5B4C", VA = "0xAE5B4C", Slot = "8")]
	public override void OnTeleportHoveringExit()
	{
	}

	[Token(Token = "0x60007AA")]
	[Address(RVA = "0xAE5C24", Offset = "0xAE5C24", VA = "0xAE5C24")]
	public ScenarioTeleportPoint()
	{
	}
}
[Serializable]
[Token(Token = "0x20001A2")]
public class AxleInfo
{
	[Token(Token = "0x4000898")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public WheelCollider leftWheel;

	[Token(Token = "0x4000899")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public WheelCollider rightWheel;

	[Token(Token = "0x400089A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool motor;

	[Token(Token = "0x400089B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool steering;

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0x1029EDC", Offset = "0x1029EDC", VA = "0x1029EDC")]
	public AxleInfo()
	{
	}
}
[Token(Token = "0x20001A3")]
public class SimpleCarController : MonoBehaviour
{
	[Token(Token = "0x400089C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<AxleInfo> axleInfos;

	[Token(Token = "0x400089D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxMotorTorque;

	[Token(Token = "0x400089E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maxSteeringAngle;

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0xAE8B44", Offset = "0xAE8B44", VA = "0xAE8B44")]
	public void ApplyLocalPositionToVisuals(WheelCollider collider)
	{
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0xAE8C10", Offset = "0xAE8C10", VA = "0xAE8C10")]
	public void FixedUpdate()
	{
	}

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0xAE8E38", Offset = "0xAE8E38", VA = "0xAE8E38")]
	public SimpleCarController()
	{
	}
}
[Token(Token = "0x20001A4")]
public class FlareLookAt : MonoBehaviour
{
	[Token(Token = "0x400089F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool canCompute;

	[Token(Token = "0x40008A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform cam;

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0xE521B0", Offset = "0xE521B0", VA = "0xE521B0")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0xE521BC", Offset = "0xE521BC", VA = "0xE521BC")]
	private void Start()
	{
	}

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0xE521FC", Offset = "0xE521FC", VA = "0xE521FC")]
	private void Update()
	{
	}

	[Token(Token = "0x60007B2")]
	[Address(RVA = "0xE5225C", Offset = "0xE5225C", VA = "0xE5225C")]
	private void OnBecameInVisible()
	{
	}

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0xE52264", Offset = "0xE52264", VA = "0xE52264")]
	public FlareLookAt()
	{
	}
}
[Token(Token = "0x20001A5")]
public class ShaftVolume : MonoBehaviour
{
	[Token(Token = "0x40008A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform target;

	[Token(Token = "0x40008A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Material mat;

	[Token(Token = "0x40008A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Color mainColor;

	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float multiplier;

	[Token(Token = "0x40008A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float MaxDistance;

	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float distance;

	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 eulerAngleOffset;

	[Token(Token = "0x40008A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool canCompute;

	[Token(Token = "0x60007B4")]
	[Address(RVA = "0xAE79BC", Offset = "0xAE79BC", VA = "0xAE79BC")]
	private void Start()
	{
	}

	[Token(Token = "0x60007B5")]
	[Address(RVA = "0xAE7A84", Offset = "0xAE7A84", VA = "0xAE7A84")]
	private void Update()
	{
	}

	[Token(Token = "0x60007B6")]
	[Address(RVA = "0xAE7BFC", Offset = "0xAE7BFC", VA = "0xAE7BFC")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x60007B7")]
	[Address(RVA = "0xAE7C08", Offset = "0xAE7C08", VA = "0xAE7C08")]
	private void OnBecameInvisible()
	{
	}

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0xAE7C10", Offset = "0xAE7C10", VA = "0xAE7C10")]
	public ShaftVolume()
	{
	}
}
[Token(Token = "0x20001A6")]
public enum FlareType
{
	[Token(Token = "0x40008AA")]
	Negative,
	[Token(Token = "0x40008AB")]
	Positive
}
[Token(Token = "0x20001A7")]
public enum Axis
{
	[Token(Token = "0x40008AD")]
	X,
	[Token(Token = "0x40008AE")]
	Y,
	[Token(Token = "0x40008AF")]
	XY
}
[Token(Token = "0x20001A8")]
public class SimpleFlare : MonoBehaviour
{
	[Token(Token = "0x20001A9")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728680", Offset = "0x728680")]
	private sealed class <RayCast>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SimpleFlare <>4__this;

		[Token(Token = "0x1700008A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007C2")]
			[Address(RVA = "0x1B1E4C4", Offset = "0x1B1E4C4", VA = "0x1B1E4C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007C4")]
			[Address(RVA = "0x1B1E50C", Offset = "0x1B1E50C", VA = "0x1B1E50C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x1B1E348", Offset = "0x1B1E348", VA = "0x1B1E348")]
		[DebuggerHidden]
		public <RayCast>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x1B1E374", Offset = "0x1B1E374", VA = "0x1B1E374", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x1B1E378", Offset = "0x1B1E378", VA = "0x1B1E378", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x1B1E4CC", Offset = "0x1B1E4CC", VA = "0x1B1E4CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x72AA90", Offset = "0x72AA90")]
	[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x72AA90", Offset = "0x72AA90")]
	public FlareType flareType;

	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Axis axis;

	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float multiplier;

	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float distance;

	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float updateInterval;

	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool Raycast;

	[Token(Token = "0x40008B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	private bool canCompute;

	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	private bool canFade;

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float Dist;

	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform cam;

	[Token(Token = "0x40008BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject target;

	[Token(Token = "0x40008BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 temp;

	[Token(Token = "0x40008BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool positive;

	[Token(Token = "0x40008BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private MeshRenderer renderM;

	[Token(Token = "0x60007B9")]
	[Address(RVA = "0xAE8E40", Offset = "0xAE8E40", VA = "0xAE8E40")]
	private void Start()
	{
	}

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0xAE908C", Offset = "0xAE908C", VA = "0xAE908C")]
	private void Update()
	{
	}

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0xAE9398", Offset = "0xAE9398", VA = "0xAE9398")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0xAE93A4", Offset = "0xAE93A4", VA = "0xAE93A4")]
	private void OnBecameInvisible()
	{
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0xAE9014", Offset = "0xAE9014", VA = "0xAE9014")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72FF20", Offset = "0x72FF20")]
	private IEnumerator RayCast()
	{
		return null;
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0xAE93AC", Offset = "0xAE93AC", VA = "0xAE93AC")]
	public SimpleFlare()
	{
	}
}
[Token(Token = "0x20001AA")]
public class SmokeCollisionDetector : MonoBehaviour
{
	[Token(Token = "0x60007C5")]
	[Address(RVA = "0xAE9E24", Offset = "0xAE9E24", VA = "0xAE9E24")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60007C6")]
	[Address(RVA = "0xAE9E80", Offset = "0xAE9E80", VA = "0xAE9E80")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60007C7")]
	[Address(RVA = "0xAE9EF4", Offset = "0xAE9EF4", VA = "0xAE9EF4")]
	public SmokeCollisionDetector()
	{
	}
}
[Token(Token = "0x20001AB")]
public class SteamVR_CustomSettings : MonoBehaviour
{
	[Token(Token = "0x40008C1")]
	private const string BILDBOARD = "ScaleObjects/Scenarios/base/Welcome_Bilboard/model/Plane";

	[Token(Token = "0x40008C2")]
	private const string SETTINGS_CONTROLLER = "NVRPlayer/MenuUI/Settings/Graphics/Controllers Image";

	[Token(Token = "0x40008C3")]
	private const string BILDBOARD_HTC_TEXTURE = "Atlas_Bildboard_HTC";

	[Token(Token = "0x40008C4")]
	private const string BILDBOARD_WMR_TEXTURE = "Atlas_Bildboard_WMR";

	[Token(Token = "0x40008C5")]
	private const string BILDBOARD_OCULUS_TEXTURE = "Atlas_Bildboard_Oculus";

	[Token(Token = "0x40008C6")]
	private const string SETTINGS_CONTROLLER_HTC_TEXTURE = "Setting_Controller_HTC";

	[Token(Token = "0x40008C7")]
	private const string SETTINGS_CONTROLLER_WMR_TEXTURE = "Setting_Controller_WMR";

	[Token(Token = "0x40008C8")]
	private const string SETTINGS_CONTROLLER_OCULUS_TEXTURE = "Setting_Controller_Oculus";

	[Token(Token = "0x60007C8")]
	[Address(RVA = "0x128AB8C", Offset = "0x128AB8C", VA = "0x128AB8C")]
	private void Start()
	{
	}

	[Token(Token = "0x60007C9")]
	[Address(RVA = "0x128B060", Offset = "0x128B060", VA = "0x128B060")]
	private void OnHandInitialized(NVRHand hand)
	{
	}

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0x128B1F8", Offset = "0x128B1F8", VA = "0x128B1F8")]
	private void OnOculusInitialize()
	{
	}

	[Token(Token = "0x60007CB")]
	[Address(RVA = "0x128B1FC", Offset = "0x128B1FC", VA = "0x128B1FC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0x128ACE4", Offset = "0x128ACE4", VA = "0x128ACE4")]
	private void setTexture(string gameobject, string texture)
	{
	}

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0x128B278", Offset = "0x128B278", VA = "0x128B278")]
	public SteamVR_CustomSettings()
	{
	}
}
[Token(Token = "0x20001AC")]
public class TestAttraction : MonoBehaviour
{
	[Token(Token = "0x40008C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float strength;

	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Collider> attraction;

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0x128F378", Offset = "0x128F378", VA = "0x128F378")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0x128F480", Offset = "0x128F480", VA = "0x128F480")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0x128F520", Offset = "0x128F520", VA = "0x128F520")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60007D1")]
	[Address(RVA = "0x128F6FC", Offset = "0x128F6FC", VA = "0x128F6FC")]
	public TestAttraction()
	{
	}
}
[Token(Token = "0x20001AD")]
public class TiledFloor : MonoBehaviour
{
	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject tilemodelBase;

	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int max_tiles;

	[Token(Token = "0x40008CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int tile_separation;

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0x128FCB8", Offset = "0x128FCB8", VA = "0x128FCB8")]
	private void Start()
	{
	}

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0x128FECC", Offset = "0x128FECC", VA = "0x128FECC")]
	public TiledFloor()
	{
	}
}
[Token(Token = "0x20001AE")]
public class Lever : NVRInteractableItem
{
	[Token(Token = "0x40008CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Train train;

	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject speedometer;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private float trainMaxSpeed;

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0xB1BC28", Offset = "0xB1BC28", VA = "0xB1BC28", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0xB1BCA8", Offset = "0xB1BCA8", VA = "0xB1BCA8")]
	private void setLeverPosition()
	{
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0xB1BD54", Offset = "0xB1BD54", VA = "0xB1BD54", Slot = "10")]
	public override void BeginInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0xB1BDA0", Offset = "0xB1BDA0", VA = "0xB1BDA0", Slot = "11")]
	public override void InteractingUpdate(NVRHand hand)
	{
	}

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0xB1BDA8", Offset = "0xB1BDA8", VA = "0xB1BDA8")]
	private void updateSpeedometer()
	{
	}

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0xB1BDAC", Offset = "0xB1BDAC", VA = "0xB1BDAC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0xB1BDB0", Offset = "0xB1BDB0", VA = "0xB1BDB0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0xB1BDF8", Offset = "0xB1BDF8", VA = "0xB1BDF8")]
	public Lever()
	{
	}
}
[Token(Token = "0x20001AF")]
public class TrackIgnore : MonoBehaviour
{
	[Token(Token = "0x60007DC")]
	[Address(RVA = "0x1290B68", Offset = "0x1290B68", VA = "0x1290B68")]
	private void Start()
	{
	}

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0x1290B6C", Offset = "0x1290B6C", VA = "0x1290B6C")]
	private void Update()
	{
	}

	[Token(Token = "0x60007DE")]
	[Address(RVA = "0x1290B70", Offset = "0x1290B70", VA = "0x1290B70")]
	public TrackIgnore()
	{
	}
}
[Token(Token = "0x20001B0")]
public class TrackSwitcher : NVRInteractableItem
{
	[Token(Token = "0x20001B1")]
	public class LinearMapping : MonoBehaviour
	{
		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float value;

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x1B1F6E4", Offset = "0x1B1F6E4", VA = "0x1B1F6E4")]
		public LinearMapping()
		{
		}
	}

	[Token(Token = "0x20001B2")]
	public enum SwitcherPosition
	{
		[Token(Token = "0x40008FD")]
		Left,
		[Token(Token = "0x40008FE")]
		Center,
		[Token(Token = "0x40008FF")]
		Right
	}

	[Token(Token = "0x20001B3")]
	public enum Axis_t
	{
		[Token(Token = "0x4000901")]
		XAxis,
		[Token(Token = "0x4000902")]
		YAxis,
		[Token(Token = "0x4000903")]
		ZAxis
	}

	[Token(Token = "0x20001B4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728690", Offset = "0x728690")]
	private sealed class <HapticPulses>d__55 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NVRHand controller;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TrackSwitcher <>4__this;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float flMagnitude;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int nCount;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <nRangeMax>5__2;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private ushort <i>5__3;

		[Token(Token = "0x1700008C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007FA")]
			[Address(RVA = "0x1B1F694", Offset = "0x1B1F694", VA = "0x1B1F694", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007FC")]
			[Address(RVA = "0x1B1F6DC", Offset = "0x1B1F6DC", VA = "0x1B1F6DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x1B1F4BC", Offset = "0x1B1F4BC", VA = "0x1B1F4BC")]
		[DebuggerHidden]
		public <HapticPulses>d__55(int <>1__state)
		{
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x1B1F4E8", Offset = "0x1B1F4E8", VA = "0x1B1F4E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x1B1F4EC", Offset = "0x1B1F4EC", VA = "0x1B1F4EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x1B1F69C", Offset = "0x1B1F69C", VA = "0x1B1F69C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public SwitcherPosition switcherPosition;

	[Token(Token = "0x40008D2")]
	private const float LEFT_ANGLE = 130f;

	[Token(Token = "0x40008D3")]
	private const float CENTER_ANGLE = 90f;

	[Token(Token = "0x40008D4")]
	private const float RIGHT_ANGLE = 50f;

	[Token(Token = "0x40008D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public Quaternion rotation;

	[Token(Token = "0x40008D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72AAE0", Offset = "0x72AAE0")]
	public Axis_t axisOfRotation;

	[Token(Token = "0x40008D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72AB18", Offset = "0x72AB18")]
	public Collider childCollider;

	[Token(Token = "0x40008D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72AB50", Offset = "0x72AB50")]
	public LinearMapping linearMapping;

	[Token(Token = "0x40008D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72AB88", Offset = "0x72AB88")]
	public bool hoverLock;

	[Token(Token = "0x40008DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x72ABC0", Offset = "0x72ABC0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72ABC0", Offset = "0x72ABC0")]
	public bool limited;

	[Token(Token = "0x40008DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public Vector2 frozenDistanceMinMaxThreshold;

	[Token(Token = "0x40008DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public UnityEvent onFrozenDistanceThreshold;

	[Token(Token = "0x40008DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72AC20", Offset = "0x72AC20")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x72AC20", Offset = "0x72AC20")]
	public float minAngle;

	[Token(Token = "0x40008DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72AC80", Offset = "0x72AC80")]
	public bool freezeOnMin;

	[Token(Token = "0x40008DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72ACB8", Offset = "0x72ACB8")]
	public UnityEvent onMinAngle;

	[Token(Token = "0x40008E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x72ACF0", Offset = "0x72ACF0")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72ACF0", Offset = "0x72ACF0")]
	public float maxAngle;

	[Token(Token = "0x40008E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72AD50", Offset = "0x72AD50")]
	public bool freezeOnMax;

	[Token(Token = "0x40008E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72AD88", Offset = "0x72AD88")]
	public UnityEvent onMaxAngle;

	[Token(Token = "0x40008E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72ADC0", Offset = "0x72ADC0")]
	public bool forceStart;

	[Token(Token = "0x40008E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72ADF8", Offset = "0x72ADF8")]
	public float startAngle;

	[Token(Token = "0x40008E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72AE30", Offset = "0x72AE30")]
	public bool rotateGameObject;

	[Token(Token = "0x40008E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72AE68", Offset = "0x72AE68")]
	public bool debugPath;

	[Token(Token = "0x40008E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72AEA0", Offset = "0x72AEA0")]
	public int dbgPathLimit;

	[Token(Token = "0x40008E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72AED8", Offset = "0x72AED8")]
	public TextMesh debugText;

	[Token(Token = "0x40008E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72AF10", Offset = "0x72AF10")]
	public float outAngle;

	[Token(Token = "0x40008EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private Quaternion start;

	[Token(Token = "0x40008EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	private Vector3 worldPlaneNormal;

	[Token(Token = "0x40008EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private Vector3 localPlaneNormal;

	[Token(Token = "0x40008ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private Vector3 lastHandProjected;

	[Token(Token = "0x40008EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private Color red;

	[Token(Token = "0x40008EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private Color green;

	[Token(Token = "0x40008F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private GameObject[] dbgHandObjects;

	[Token(Token = "0x40008F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private GameObject[] dbgProjObjects;

	[Token(Token = "0x40008F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private GameObject dbgObjectsParent;

	[Token(Token = "0x40008F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private int dbgObjectCount;

	[Token(Token = "0x40008F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
	private int dbgObjectIndex;

	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private bool driving;

	[Token(Token = "0x40008F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
	private float minMaxAngularThreshold;

	[Token(Token = "0x40008F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private bool frozen;

	[Token(Token = "0x40008F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
	private float frozenAngle;

	[Token(Token = "0x40008F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private Vector3 frozenHandWorldPos;

	[Token(Token = "0x40008FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
	private Vector2 frozenSqDistanceMinMaxThreshold;

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0x1291BE8", Offset = "0x1291BE8", VA = "0x1291BE8", Slot = "10")]
	public override void BeginInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0x1291C80", Offset = "0x1291C80", VA = "0x1291C80", Slot = "15")]
	public override void EndInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0x1291CA8", Offset = "0x1291CA8", VA = "0x1291CA8")]
	private void setSwitcherPosition()
	{
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0x1292064", Offset = "0x1292064", VA = "0x1292064")]
	public void animateSwitcherPosition()
	{
	}

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0x1291DAC", Offset = "0x1291DAC", VA = "0x1291DAC")]
	private void updateBifurcationPieces()
	{
	}

	[Token(Token = "0x60007E4")]
	[Address(RVA = "0x12922D4", Offset = "0x12922D4", VA = "0x12922D4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007E5")]
	[Address(RVA = "0x12922D8", Offset = "0x12922D8", VA = "0x12922D8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60007E6")]
	[Address(RVA = "0x1292330", Offset = "0x1292330", VA = "0x1292330")]
	private void Freeze(NVRHand hand)
	{
	}

	[Token(Token = "0x60007E7")]
	[Address(RVA = "0x129239C", Offset = "0x129239C", VA = "0x129239C")]
	private void UnFreeze()
	{
	}

	[Token(Token = "0x60007E8")]
	[Address(RVA = "0x12923AC", Offset = "0x12923AC", VA = "0x12923AC")]
	private new void Start()
	{
	}

	[Token(Token = "0x60007E9")]
	[Address(RVA = "0x129278C", Offset = "0x129278C", VA = "0x129278C")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x72FFD0", Offset = "0x72FFD0")]
	private IEnumerator HapticPulses(NVRHand controller, float flMagnitude, int nCount)
	{
		return null;
	}

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0x1292838", Offset = "0x1292838", VA = "0x1292838", Slot = "14")]
	public override void HoveringExit(NVRHand hand)
	{
	}

	[Token(Token = "0x60007EB")]
	[Address(RVA = "0x1292890", Offset = "0x1292890", VA = "0x1292890", Slot = "13")]
	public override void HoveringUpdate(NVRHand hand, float forTime)
	{
	}

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0x1292924", Offset = "0x1292924", VA = "0x1292924")]
	private Vector3 ComputeToTransformProjected(Transform xForm)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0x1292E4C", Offset = "0x1292E4C", VA = "0x1292E4C")]
	private void DrawDebugPath(Transform xForm, Vector3 toTransformProjected)
	{
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0x12934C4", Offset = "0x12934C4", VA = "0x12934C4")]
	private void UpdateLinearMapping()
	{
	}

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0x1293638", Offset = "0x1293638", VA = "0x1293638")]
	private void UpdateGameObject()
	{
	}

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0x1293528", Offset = "0x1293528", VA = "0x1293528")]
	private void UpdateDebugText()
	{
	}

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0x1292760", Offset = "0x1292760", VA = "0x1292760")]
	private void UpdateAll()
	{
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0x12936EC", Offset = "0x12936EC", VA = "0x12936EC")]
	private float RemapNumber(float num, float low1, float high1, float low2, float high2)
	{
		return default(float);
	}

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0x1293708", Offset = "0x1293708", VA = "0x1293708")]
	private float RemapNumberClamped(float num, float low1, float high1, float low2, float high2)
	{
		return default(float);
	}

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0x1292B60", Offset = "0x1292B60", VA = "0x1292B60")]
	private void ComputeAngle(NVRHand hand)
	{
	}

	[Token(Token = "0x60007F5")]
	[Address(RVA = "0x129377C", Offset = "0x129377C", VA = "0x129377C")]
	public TrackSwitcher()
	{
	}
}
[Token(Token = "0x20001B5")]
public class TrainActionButtonControl : MonoBehaviour
{
	[Token(Token = "0x400090C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Train train;

	[Token(Token = "0x400090D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public NVRButton button;

	[Token(Token = "0x400090E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform actionableIcon;

	[Token(Token = "0x400090F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float speed;

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0x1299ADC", Offset = "0x1299ADC", VA = "0x1299ADC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0x1299BDC", Offset = "0x1299BDC", VA = "0x1299BDC")]
	private void Update()
	{
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0x1299D68", Offset = "0x1299D68", VA = "0x1299D68")]
	public TrainActionButtonControl()
	{
	}
}
[Token(Token = "0x20001B6")]
public class TrainBoiler : MonoBehaviour
{
	[Token(Token = "0x4000910")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float charcoalQuantity;

	[Token(Token = "0x6000800")]
	[Address(RVA = "0x1299D78", Offset = "0x1299D78", VA = "0x1299D78")]
	public TrainBoiler()
	{
	}
}
[Token(Token = "0x20001B7")]
public class TrainCollisionAction : MonoBehaviour
{
	[Token(Token = "0x4000911")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TrainAction trainAction;

	[Token(Token = "0x6000801")]
	[Address(RVA = "0x129ACDC", Offset = "0x129ACDC", VA = "0x129ACDC")]
	public TrainCollisionAction()
	{
	}
}
[Token(Token = "0x20001B8")]
public enum TrainAction
{
	[Token(Token = "0x4000913")]
	None,
	[Token(Token = "0x4000914")]
	Stop,
	[Token(Token = "0x4000915")]
	Whistle,
	[Token(Token = "0x4000916")]
	StopStation,
	[Token(Token = "0x4000917")]
	Collision,
	[Token(Token = "0x4000918")]
	CollisionOther
}
[Token(Token = "0x20001B9")]
public class TrainSpeedLever : NVRCircularDrive
{
	[Token(Token = "0x4000919")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private Train train;

	[Token(Token = "0x400091A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public Transform speedometer;

	[Token(Token = "0x400091B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public Transform revolutionmeter;

	[Token(Token = "0x400091C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public float trainSpeed;

	[Token(Token = "0x6000802")]
	[Address(RVA = "0x129C060", Offset = "0x129C060", VA = "0x129C060", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0x129C400", Offset = "0x129C400", VA = "0x129C400", Slot = "25")]
	protected override void ComputeAngle(NVRHand hand)
	{
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0x129C2C4", Offset = "0x129C2C4", VA = "0x129C2C4")]
	private void updateSpeedometer()
	{
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0x129C334", Offset = "0x129C334", VA = "0x129C334")]
	private void updateRevolutionmeter()
	{
	}

	[Token(Token = "0x6000806")]
	[Address(RVA = "0x129C55C", Offset = "0x129C55C", VA = "0x129C55C", Slot = "24")]
	protected override void Update()
	{
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0x129C58C", Offset = "0x129C58C", VA = "0x129C58C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0x129C2A8", Offset = "0x129C2A8", VA = "0x129C2A8")]
	private float RemapNumber(float num, float low1, float high1, float low2, float high2)
	{
		return default(float);
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0x129C644", Offset = "0x129C644", VA = "0x129C644")]
	public TrainSpeedLever()
	{
	}
}
[Token(Token = "0x20001BA")]
public class TrainTrackSwitcher : NVRCircularDrive
{
	[Token(Token = "0x20001BB")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7286A0", Offset = "0x7286A0")]
	private sealed class <moveToCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float finalAngle;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TrainTrackSwitcher <>4__this;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <fDelta>5__2;

		[Token(Token = "0x1700008E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000812")]
			[Address(RVA = "0x1B204B4", Offset = "0x1B204B4", VA = "0x1B204B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700008F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000814")]
			[Address(RVA = "0x1B204FC", Offset = "0x1B204FC", VA = "0x1B204FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0x1B20084", Offset = "0x1B20084", VA = "0x1B20084")]
		[DebuggerHidden]
		public <moveToCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0x1B200B0", Offset = "0x1B200B0", VA = "0x1B200B0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0x1B200B4", Offset = "0x1B200B4", VA = "0x1B200B4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0x1B204BC", Offset = "0x1B204BC", VA = "0x1B204BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400091D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private Train train;

	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public int position;

	[Token(Token = "0x600080A")]
	[Address(RVA = "0x129C98C", Offset = "0x129C98C", VA = "0x129C98C", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0x129CA48", Offset = "0x129CA48", VA = "0x129CA48", Slot = "23")]
	public override void DriveEnd(NVRHand hand)
	{
	}

	[Token(Token = "0x600080C")]
	[Address(RVA = "0x129CAB4", Offset = "0x129CAB4", VA = "0x129CAB4")]
	public void moveTo(float angle)
	{
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0x129CB60", Offset = "0x129CB60", VA = "0x129CB60")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x730080", Offset = "0x730080")]
	private IEnumerator moveToCoroutine(float finalAngle)
	{
		return null;
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0x129CBE8", Offset = "0x129CBE8", VA = "0x129CBE8")]
	public TrainTrackSwitcher()
	{
	}
}
[Token(Token = "0x20001BC")]
public class TrainVelocityControl : NVRInteractableItem
{
	[Token(Token = "0x4000924")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Train train;

	[Token(Token = "0x4000925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public NVRCircularDrive speedLever;

	[Token(Token = "0x4000926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public NVRCircularDrive speedIndicator;

	[Token(Token = "0x4000927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public TrainBoiler boiler;

	[Token(Token = "0x4000928")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public GameObject speedometer;

	[Token(Token = "0x4000929")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Vector3 initialPosition;

	[Token(Token = "0x400092A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private Quaternion initialRotation;

	[Token(Token = "0x400092B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private bool isInteracting;

	[Token(Token = "0x400092C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private float trainMaxSpeed;

	[Token(Token = "0x6000815")]
	[Address(RVA = "0x129CBF0", Offset = "0x129CBF0", VA = "0x129CBF0", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0x129CCAC", Offset = "0x129CCAC", VA = "0x129CCAC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0x129CCB0", Offset = "0x129CCB0", VA = "0x129CCB0", Slot = "10")]
	public override void BeginInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x6000818")]
	[Address(RVA = "0x129CD9C", Offset = "0x129CD9C", VA = "0x129CD9C", Slot = "15")]
	public override void EndInteraction(NVRHand hand)
	{
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0x129CDC4", Offset = "0x129CDC4", VA = "0x129CDC4")]
	private void setHandgripRotation(float trainSpeed)
	{
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0x129CECC", Offset = "0x129CECC", VA = "0x129CECC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600081B")]
	[Address(RVA = "0x129CF40", Offset = "0x129CF40", VA = "0x129CF40")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600081C")]
	[Address(RVA = "0x129CFEC", Offset = "0x129CFEC", VA = "0x129CFEC")]
	public TrainVelocityControl()
	{
	}
}
[Token(Token = "0x20001BD")]
public class TrainWhistleControl : NVRDriveInteractable
{
	[Token(Token = "0x400092D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Train train;

	[Token(Token = "0x400092E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform fixedPoint;

	[Token(Token = "0x400092F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Transform fixedPointWishtle;

	[Token(Token = "0x4000930")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float animationDuration;

	[Token(Token = "0x4000931")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private NVRHand myHand;

	[Token(Token = "0x4000932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector3 lastHandY;

	[Token(Token = "0x4000933")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private bool driving;

	[Token(Token = "0x4000934")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Tweener twenning;

	[Token(Token = "0x600081D")]
	[Address(RVA = "0x129CFF4", Offset = "0x129CFF4", VA = "0x129CFF4", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0x129D05C", Offset = "0x129D05C", VA = "0x129D05C", Slot = "13")]
	public override void HoveringUpdate(NVRHand hand, float forTime)
	{
	}

	[Token(Token = "0x600081F")]
	[Address(RVA = "0x129D1F0", Offset = "0x129D1F0", VA = "0x129D1F0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0x129D370", Offset = "0x129D370", VA = "0x129D370")]
	private void ComputePosition()
	{
	}

	[Token(Token = "0x6000821")]
	[Address(RVA = "0x129D860", Offset = "0x129D860", VA = "0x129D860", Slot = "23")]
	public override void DriveEnd(NVRHand hand)
	{
	}

	[Token(Token = "0x6000822")]
	[Address(RVA = "0x129D960", Offset = "0x129D960", VA = "0x129D960")]
	private void EndTweening()
	{
	}

	[Token(Token = "0x6000823")]
	[Address(RVA = "0x129D848", Offset = "0x129D848", VA = "0x129D848")]
	private void whistle()
	{
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0x129D96C", Offset = "0x129D96C", VA = "0x129D96C")]
	public TrainWhistleControl()
	{
	}
}
[Token(Token = "0x20001BE")]
public class PadPositionRotation : MonoBehaviour
{
	[Token(Token = "0x4000935")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshPro rh_posX;

	[Token(Token = "0x4000936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshPro rh_posY;

	[Token(Token = "0x4000937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TextMeshPro rh_posZ;

	[Token(Token = "0x4000938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshPro rh_rotX;

	[Token(Token = "0x4000939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshPro rh_rotY;

	[Token(Token = "0x400093A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshPro rh_rotZ;

	[Token(Token = "0x400093B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshPro lh_posX;

	[Token(Token = "0x400093C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TextMeshPro lh_posY;

	[Token(Token = "0x400093D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public TextMeshPro lh_posZ;

	[Token(Token = "0x400093E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public TextMeshPro lh_rotX;

	[Token(Token = "0x400093F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public TextMeshPro lh_rotY;

	[Token(Token = "0x4000940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public TextMeshPro lh_rotZ;

	[Token(Token = "0x6000825")]
	[Address(RVA = "0xD10210", Offset = "0xD10210", VA = "0xD10210")]
	private void Update()
	{
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0xD106DC", Offset = "0xD106DC", VA = "0xD106DC")]
	public PadPositionRotation()
	{
	}
}
[Token(Token = "0x20001BF")]
public class PadPositionRotationButton : NVRInteractable
{
	[Token(Token = "0x4000941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Vector3 position;

	[Token(Token = "0x4000942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Vector3 rotation;

	[Token(Token = "0x4000943")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float delta;

	[Token(Token = "0x6000827")]
	[Address(RVA = "0xD106E4", Offset = "0xD106E4", VA = "0xD106E4", Slot = "13")]
	public override void HoveringUpdate(NVRHand hand, float forTime)
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0xD10738", Offset = "0xD10738", VA = "0xD10738")]
	private void SetPositionRotation(NVRHand hand)
	{
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0xD10D40", Offset = "0xD10D40", VA = "0xD10D40")]
	public PadPositionRotationButton()
	{
	}
}
[Serializable]
[Token(Token = "0x20001C0")]
public class UfoEvent : UnityEvent<Ufo>
{
	[Token(Token = "0x600082A")]
	[Address(RVA = "0xDE89A0", Offset = "0xDE89A0", VA = "0xDE89A0")]
	public UfoEvent()
	{
	}
}
[Token(Token = "0x20001C1")]
public class Ufo : MonoBehaviour
{
	[Token(Token = "0x20001C2")]
	public enum State
	{
		[Token(Token = "0x4000962")]
		Idle,
		[Token(Token = "0x4000963")]
		XZMoveToPiece,
		[Token(Token = "0x4000964")]
		YMoveToPiece,
		[Token(Token = "0x4000965")]
		OpenDoors,
		[Token(Token = "0x4000966")]
		MovePiece,
		[Token(Token = "0x4000967")]
		PieceTaken
	}

	[Token(Token = "0x20001C3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7286B0", Offset = "0x7286B0")]
	private sealed class <TargetPieceDestroyed>d__38 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Ufo <>4__this;

		[Token(Token = "0x17000090")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000845")]
			[Address(RVA = "0x1B21994", Offset = "0x1B21994", VA = "0x1B21994", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000091")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000847")]
			[Address(RVA = "0x1B219DC", Offset = "0x1B219DC", VA = "0x1B219DC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x1B21704", Offset = "0x1B21704", VA = "0x1B21704")]
		[DebuggerHidden]
		public <TargetPieceDestroyed>d__38(int <>1__state)
		{
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x1B21730", Offset = "0x1B21730", VA = "0x1B21730", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0x1B21734", Offset = "0x1B21734", VA = "0x1B21734", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0x1B2199C", Offset = "0x1B2199C", VA = "0x1B2199C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7286C0", Offset = "0x7286C0")]
	private sealed class <XZMoveToPiece>d__39 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Ufo <>4__this;

		[Token(Token = "0x17000092")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600084B")]
			[Address(RVA = "0x1B21C8C", Offset = "0x1B21C8C", VA = "0x1B21C8C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000093")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600084D")]
			[Address(RVA = "0x1B21CD4", Offset = "0x1B21CD4", VA = "0x1B21CD4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x1B219E4", Offset = "0x1B219E4", VA = "0x1B219E4")]
		[DebuggerHidden]
		public <XZMoveToPiece>d__39(int <>1__state)
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x1B21A10", Offset = "0x1B21A10", VA = "0x1B21A10", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0x1B21A14", Offset = "0x1B21A14", VA = "0x1B21A14", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0x1B21C94", Offset = "0x1B21C94", VA = "0x1B21C94", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7286D0", Offset = "0x7286D0")]
	private sealed class <YMoveToPiece>d__40 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Ufo <>4__this;

		[Token(Token = "0x17000094")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000851")]
			[Address(RVA = "0x1B21FB8", Offset = "0x1B21FB8", VA = "0x1B21FB8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000095")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000853")]
			[Address(RVA = "0x1B22000", Offset = "0x1B22000", VA = "0x1B22000", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0x1B21CDC", Offset = "0x1B21CDC", VA = "0x1B21CDC")]
		[DebuggerHidden]
		public <YMoveToPiece>d__40(int <>1__state)
		{
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0x1B21D08", Offset = "0x1B21D08", VA = "0x1B21D08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0x1B21D0C", Offset = "0x1B21D0C", VA = "0x1B21D0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0x1B21FC0", Offset = "0x1B21FC0", VA = "0x1B21FC0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C6")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7286E0", Offset = "0x7286E0")]
	private sealed class <openDoors>d__41 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Ufo <>4__this;

		[Token(Token = "0x17000096")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000857")]
			[Address(RVA = "0x1B221F8", Offset = "0x1B221F8", VA = "0x1B221F8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000097")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000859")]
			[Address(RVA = "0x1B22240", Offset = "0x1B22240", VA = "0x1B22240", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0x1B22008", Offset = "0x1B22008", VA = "0x1B22008")]
		[DebuggerHidden]
		public <openDoors>d__41(int <>1__state)
		{
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0x1B22034", Offset = "0x1B22034", VA = "0x1B22034", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0x1B22038", Offset = "0x1B22038", VA = "0x1B22038", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0x1B22200", Offset = "0x1B22200", VA = "0x1B22200", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C7")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7286F0", Offset = "0x7286F0")]
	private sealed class <MovePiece>d__42 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Ufo <>4__this;

		[Token(Token = "0x17000098")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600085D")]
			[Address(RVA = "0x1B20F34", Offset = "0x1B20F34", VA = "0x1B20F34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000099")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600085F")]
			[Address(RVA = "0x1B20F7C", Offset = "0x1B20F7C", VA = "0x1B20F7C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0x1B20C34", Offset = "0x1B20C34", VA = "0x1B20C34")]
		[DebuggerHidden]
		public <MovePiece>d__42(int <>1__state)
		{
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0x1B20C60", Offset = "0x1B20C60", VA = "0x1B20C60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0x1B20C64", Offset = "0x1B20C64", VA = "0x1B20C64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0x1B20F3C", Offset = "0x1B20F3C", VA = "0x1B20F3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728700", Offset = "0x728700")]
	private sealed class <PieceTaken>d__43 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Ufo <>4__this;

		[Token(Token = "0x1700009A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000863")]
			[Address(RVA = "0x1B212B4", Offset = "0x1B212B4", VA = "0x1B212B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000865")]
			[Address(RVA = "0x1B212FC", Offset = "0x1B212FC", VA = "0x1B212FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0x1B20F84", Offset = "0x1B20F84", VA = "0x1B20F84")]
		[DebuggerHidden]
		public <PieceTaken>d__43(int <>1__state)
		{
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0x1B20FB0", Offset = "0x1B20FB0", VA = "0x1B20FB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0x1B20FB4", Offset = "0x1B20FB4", VA = "0x1B20FB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0x1B212BC", Offset = "0x1B212BC", VA = "0x1B212BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001C9")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728710", Offset = "0x728710")]
	private sealed class <DeletePiece>d__44 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Ufo <>4__this;

		[Token(Token = "0x1700009C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000869")]
			[Address(RVA = "0x1B20BE4", Offset = "0x1B20BE4", VA = "0x1B20BE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600086B")]
			[Address(RVA = "0x1B20C2C", Offset = "0x1B20C2C", VA = "0x1B20C2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0x1B20918", Offset = "0x1B20918", VA = "0x1B20918")]
		[DebuggerHidden]
		public <DeletePiece>d__44(int <>1__state)
		{
		}

		[Token(Token = "0x6000867")]
		[Address(RVA = "0x1B20944", Offset = "0x1B20944", VA = "0x1B20944", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0x1B20948", Offset = "0x1B20948", VA = "0x1B20948", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0x1B20BEC", Offset = "0x1B20BEC", VA = "0x1B20BEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001CA")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728720", Offset = "0x728720")]
	private sealed class <Reset>d__46 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Ufo <>4__this;

		[Token(Token = "0x1700009E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600086F")]
			[Address(RVA = "0x1B216B4", Offset = "0x1B216B4", VA = "0x1B216B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000871")]
			[Address(RVA = "0x1B216FC", Offset = "0x1B216FC", VA = "0x1B216FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0x1B21304", Offset = "0x1B21304", VA = "0x1B21304")]
		[DebuggerHidden]
		public <Reset>d__46(int <>1__state)
		{
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0x1B21330", Offset = "0x1B21330", VA = "0x1B21330", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0x1B21334", Offset = "0x1B21334", VA = "0x1B21334", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0x1B216BC", Offset = "0x1B216BC", VA = "0x1B216BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000944")]
	private const string DOOR1_MODEL_PATH = "model/Puerta1";

	[Token(Token = "0x4000945")]
	private const string DOOR2_MODEL_PATH = "model/Puerta2";

	[Token(Token = "0x4000946")]
	private const string HALO_MODEL_PATH = "model/halo";

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float openDoorDuration;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float takePieceDuration;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float takePieceMaxHeight;

	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float takePieceMinHeight;

	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float maxPathDuration;

	[Token(Token = "0x400094D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float idleHeight;

	[Token(Token = "0x400094E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Piece targetPiece;

	[Token(Token = "0x400094F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform door1;

	[Token(Token = "0x4000950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform door2;

	[Token(Token = "0x4000951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform halo;

	[Token(Token = "0x4000952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform haloPiecePosition;

	[Token(Token = "0x4000953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float door1close_zScale;

	[Token(Token = "0x4000954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float door2close_zScale;

	[Token(Token = "0x4000955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public State currentState;

	[Token(Token = "0x4000956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Piece piece;

	[Token(Token = "0x4000957")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Tweener xzMoveToPieceTween;

	[Token(Token = "0x4000958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Tweener yMoveToPieceTween;

	[Token(Token = "0x4000959")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Tweener targetPieceTween;

	[Token(Token = "0x400095A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Tweener pieceTakenTween;

	[Token(Token = "0x400095B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Vector3 targetPieceLastPosition;

	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private GameObject model;

	[Token(Token = "0x400095D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private bool testReset;

	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
	private bool resetPosition;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
	private bool resetRotation;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Tweener yMoveToPieceTween2;

	[Token(Token = "0x600082B")]
	[Address(RVA = "0xDE7408", Offset = "0xDE7408", VA = "0xDE7408")]
	private void Update()
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0xDE765C", Offset = "0xDE765C", VA = "0xDE765C")]
	protected void Awake()
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0xDE79CC", Offset = "0xDE79CC", VA = "0xDE79CC")]
	public void BeginInteraction()
	{
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0xDE7A7C", Offset = "0xDE7A7C", VA = "0xDE7A7C")]
	public void EndInteraction()
	{
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0xDE7ABC", Offset = "0xDE7ABC", VA = "0xDE7ABC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0xDE7BF4", Offset = "0xDE7BF4", VA = "0xDE7BF4")]
	protected void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0xDE7D74", Offset = "0xDE7D74", VA = "0xDE7D74")]
	public void takePiece(Piece pieceToTake)
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0xDE8004", Offset = "0xDE8004", VA = "0xDE8004")]
	private void takePiece()
	{
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0xDE8124", Offset = "0xDE8124", VA = "0xDE8124")]
	private void TargetPieceBeginInteraction()
	{
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0xDE816C", Offset = "0xDE816C", VA = "0xDE816C")]
	public void OnDestroyTargetPieceExternally()
	{
	}

	[Token(Token = "0x6000835")]
	[Address(RVA = "0xDE8208", Offset = "0xDE8208", VA = "0xDE8208")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x730130", Offset = "0x730130")]
	private IEnumerator TargetPieceDestroyed()
	{
		return null;
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0xDE80AC", Offset = "0xDE80AC", VA = "0xDE80AC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x730190", Offset = "0x730190")]
	private IEnumerator XZMoveToPiece()
	{
		return null;
	}

	[Token(Token = "0x6000837")]
	[Address(RVA = "0xDE8280", Offset = "0xDE8280", VA = "0xDE8280")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7301F0", Offset = "0x7301F0")]
	private IEnumerator YMoveToPiece()
	{
		return null;
	}

	[Token(Token = "0x6000838")]
	[Address(RVA = "0xDE7CFC", Offset = "0xDE7CFC", VA = "0xDE7CFC")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x730250", Offset = "0x730250")]
	private IEnumerator openDoors()
	{
		return null;
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0xDE82F8", Offset = "0xDE82F8", VA = "0xDE82F8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7302B0", Offset = "0x7302B0")]
	private IEnumerator MovePiece()
	{
		return null;
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0xDE8370", Offset = "0xDE8370", VA = "0xDE8370")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x730310", Offset = "0x730310")]
	private IEnumerator PieceTaken()
	{
		return null;
	}

	[Token(Token = "0x600083B")]
	[Address(RVA = "0xDE83E8", Offset = "0xDE83E8", VA = "0xDE83E8")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x730370", Offset = "0x730370")]
	private IEnumerator DeletePiece()
	{
		return null;
	}

	[Token(Token = "0x600083C")]
	[Address(RVA = "0xDE7A04", Offset = "0xDE7A04", VA = "0xDE7A04")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7303D0", Offset = "0x7303D0")]
	private IEnumerator Reset()
	{
		return null;
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0xDE8460", Offset = "0xDE8460", VA = "0xDE8460")]
	private void dropPiece()
	{
	}

	[Token(Token = "0x600083E")]
	[Address(RVA = "0xDE8640", Offset = "0xDE8640", VA = "0xDE8640")]
	protected void moveToLayer(Transform root, int layer)
	{
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0xDE75B0", Offset = "0xDE75B0", VA = "0xDE75B0")]
	private float getPathDuration(Vector3 targetPosition)
	{
		return default(float);
	}

	[Token(Token = "0x6000840")]
	[Address(RVA = "0xDE8900", Offset = "0xDE8900", VA = "0xDE8900")]
	public Ufo()
	{
	}

	[Token(Token = "0x6000841")]
	[Address(RVA = "0xDE892C", Offset = "0xDE892C", VA = "0xDE892C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730430", Offset = "0x730430")]
	private void <XZMoveToPiece>b__39_0()
	{
	}
}
[Token(Token = "0x20001CB")]
public class UfoHalo : MonoBehaviour
{
	[Token(Token = "0x4000980")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool ignorePieces;

	[Token(Token = "0x6000872")]
	[Address(RVA = "0xDE89EC", Offset = "0xDE89EC", VA = "0xDE89EC")]
	public void setIgnorePieces(bool ignorePieces)
	{
	}

	[Token(Token = "0x6000873")]
	[Address(RVA = "0xDE89F0", Offset = "0xDE89F0", VA = "0xDE89F0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000874")]
	[Address(RVA = "0xDE89F4", Offset = "0xDE89F4", VA = "0xDE89F4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000875")]
	[Address(RVA = "0xDE89F8", Offset = "0xDE89F8", VA = "0xDE89F8")]
	public UfoHalo()
	{
	}
}
[Token(Token = "0x20001CC")]
public enum PlayerView
{
	[Token(Token = "0x4000982")]
	STREET,
	[Token(Token = "0x4000983")]
	NORMAL
}
[Token(Token = "0x20001CD")]
public class PlayerViewControl : MonoBehaviour
{
	[Token(Token = "0x4000984")]
	public const float GRAVITY = -9.81f;

	[Token(Token = "0x4000985")]
	public const float STREETVIEW_SCALE = 35f;

	[Token(Token = "0x4000986")]
	public const float NORMALVIEW_SCALE = 20f;

	[Token(Token = "0x4000987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlayerView currentView;

	[Token(Token = "0x4000988")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static PlayerViewControl Instance;

	[Token(Token = "0x4000989")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject piecesContainer;

	[Token(Token = "0x400098A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 lastPlayerPosition;

	[Token(Token = "0x400098B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Quaternion lastPlayerRotation;

	[Token(Token = "0x400098C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private NVRPlayer player;

	[Token(Token = "0x400098D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AppMenu menuUI;

	[Token(Token = "0x6000876")]
	[Address(RVA = "0xAD7860", Offset = "0xAD7860", VA = "0xAD7860")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000877")]
	[Address(RVA = "0xAD7984", Offset = "0xAD7984", VA = "0xAD7984")]
	public void setLastPlayerRotation(Quaternion lastPlayerRotation)
	{
	}

	[Token(Token = "0x6000878")]
	[Address(RVA = "0xAD7990", Offset = "0xAD7990", VA = "0xAD7990")]
	public void ChangePlayerView(PlayerView newPlayerView)
	{
	}

	[Token(Token = "0x6000879")]
	[Address(RVA = "0xAD7994", Offset = "0xAD7994", VA = "0xAD7994")]
	public void ChangePlayerView(PlayerView newPlayerView, NVRTeleportableIF teleportable)
	{
	}

	[Token(Token = "0x600087A")]
	[Address(RVA = "0xAD7CA0", Offset = "0xAD7CA0", VA = "0xAD7CA0")]
	private void SetStreetView()
	{
	}

	[Token(Token = "0x600087B")]
	[Address(RVA = "0xAD7A74", Offset = "0xAD7A74", VA = "0xAD7A74")]
	private void SetNormalView()
	{
	}

	[Token(Token = "0x600087C")]
	[Address(RVA = "0xAD7E58", Offset = "0xAD7E58", VA = "0xAD7E58")]
	private void setView(float scale, float mass, bool canAttach)
	{
	}

	[Token(Token = "0x600087D")]
	[Address(RVA = "0xAD7FEC", Offset = "0xAD7FEC", VA = "0xAD7FEC")]
	private void setView(Piece[] pieces, bool kinematic, bool gravity, bool collidersActive, float mass, bool canAttach)
	{
	}

	[Token(Token = "0x600087E")]
	[Address(RVA = "0xAD81E8", Offset = "0xAD81E8", VA = "0xAD81E8")]
	private void updateTrains(Piece[] pieces)
	{
	}

	[Token(Token = "0x600087F")]
	[Address(RVA = "0xAD8338", Offset = "0xAD8338", VA = "0xAD8338")]
	public PlayerViewControl()
	{
	}
}
[Token(Token = "0x20001CE")]
public interface IDialogListener
{
	[Token(Token = "0x6000881")]
	void actionPerformed(string action);
}
[Token(Token = "0x20001CF")]
public class UIDialog : MonoBehaviour
{
	[Token(Token = "0x400098E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string dialogName;

	[Token(Token = "0x400098F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh message;

	[Token(Token = "0x4000990")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IDialogListener m_listener;

	[Token(Token = "0x4000991")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_bHidden;

	[Token(Token = "0x4000992")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private UIDialogButton currentbutton;

	[Token(Token = "0x6000882")]
	[Address(RVA = "0xDE6D98", Offset = "0xDE6D98", VA = "0xDE6D98")]
	public void actionPerformed(UIDialogButton button)
	{
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0xDE6FE8", Offset = "0xDE6FE8", VA = "0xDE6FE8")]
	public void showDialog()
	{
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0xDE6F68", Offset = "0xDE6F68", VA = "0xDE6F68")]
	public void hideDialog()
	{
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0xDE7154", Offset = "0xDE7154", VA = "0xDE7154")]
	public void setListener(IDialogListener listener)
	{
	}

	[Token(Token = "0x6000886")]
	[Address(RVA = "0xDE715C", Offset = "0xDE715C", VA = "0xDE715C")]
	public UIDialog()
	{
	}
}
[Token(Token = "0x20001D0")]
public class UIDialogButton : NVRInteractable
{
	[Token(Token = "0x4000993")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private UIDialog m_dialog;

	[Token(Token = "0x4000994")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string command;

	[Token(Token = "0x4000995")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Color defaultHaloColor;

	[Token(Token = "0x4000996")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Color highlightHaloColor;

	[Token(Token = "0x4000997")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private MeshRenderer haloMesh;

	[Token(Token = "0x6000887")]
	[Address(RVA = "0xDE716C", Offset = "0xDE716C", VA = "0xDE716C", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0xDE72B4", Offset = "0xDE72B4", VA = "0xDE72B4")]
	protected void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0xDE72F4", Offset = "0xDE72F4", VA = "0xDE72F4")]
	protected void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0xDE70B4", Offset = "0xDE70B4", VA = "0xDE70B4")]
	public void resetColor()
	{
	}

	[Token(Token = "0x600088B")]
	[Address(RVA = "0xDE7334", Offset = "0xDE7334", VA = "0xDE7334", Slot = "13")]
	public override void HoveringUpdate(NVRHand hand, float forTime)
	{
	}

	[Token(Token = "0x600088C")]
	[Address(RVA = "0xDE7380", Offset = "0xDE7380", VA = "0xDE7380")]
	public UIDialogButton()
	{
	}
}
[Token(Token = "0x20001D1")]
public class GameSettings : MonoBehaviour
{
	[Token(Token = "0x4000998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static GameSettings Instance;

	[Token(Token = "0x4000999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Playlist playlist;

	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public NewtonVR.Slider musicSlider;

	[Token(Token = "0x400099B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public NewtonVR.Slider soundSlider;

	[Token(Token = "0x400099C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public NewtonVR.Slider heightSlider;

	[Token(Token = "0x400099D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Switch comfortSwitch;

	[Token(Token = "0x400099E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float minHeight;

	[Token(Token = "0x400099F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float maxHeight;

	[Token(Token = "0x40009A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isSafeConstructionMode;

	[Token(Token = "0x40009A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	public bool isComfortMode;

	[Token(Token = "0x40009A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform player;

	[Token(Token = "0x40009A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private SettingsSerializable currentSettings;

	[Token(Token = "0x600088D")]
	[Address(RVA = "0xE58C34", Offset = "0xE58C34", VA = "0xE58C34")]
	public void Initialize()
	{
	}

	[Token(Token = "0x600088E")]
	[Address(RVA = "0xE590E0", Offset = "0xE590E0", VA = "0xE590E0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600088F")]
	[Address(RVA = "0xE59374", Offset = "0xE59374", VA = "0xE59374")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000890")]
	[Address(RVA = "0xE59378", Offset = "0xE59378", VA = "0xE59378")]
	private void OnMusicSliderChange(float value)
	{
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0xE59424", Offset = "0xE59424", VA = "0xE59424")]
	private void OnSoundSliderChange(float value)
	{
	}

	[Token(Token = "0x6000892")]
	[Address(RVA = "0xE594E8", Offset = "0xE594E8", VA = "0xE594E8")]
	private void OnHeightSliderChange(float value)
	{
	}

	[Token(Token = "0x6000893")]
	[Address(RVA = "0xE59618", Offset = "0xE59618", VA = "0xE59618")]
	private void OnComfortSwitchChange(bool bValue)
	{
	}

	[Token(Token = "0x6000894")]
	[Address(RVA = "0xE594EC", Offset = "0xE594EC", VA = "0xE594EC")]
	public void setPlayerPosition()
	{
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0xE59638", Offset = "0xE59638", VA = "0xE59638")]
	private float getScaledValue(float rawValue)
	{
		return default(float);
	}

	[Token(Token = "0x6000896")]
	[Address(RVA = "0xE59624", Offset = "0xE59624", VA = "0xE59624")]
	public float getRawValue(float scaledValue)
	{
		return default(float);
	}

	[Token(Token = "0x6000897")]
	[Address(RVA = "0xE58E20", Offset = "0xE58E20", VA = "0xE58E20")]
	private void loadSettings()
	{
	}

	[Token(Token = "0x6000898")]
	[Address(RVA = "0xE59694", Offset = "0xE59694", VA = "0xE59694")]
	public void loadSettings(byte[] bytes)
	{
	}

	[Token(Token = "0x6000899")]
	[Address(RVA = "0xE590E4", Offset = "0xE590E4", VA = "0xE590E4")]
	private void saveSettings()
	{
	}

	[Token(Token = "0x600089A")]
	[Address(RVA = "0xE5964C", Offset = "0xE5964C", VA = "0xE5964C")]
	private LocalizationManager.Language GetSystemLanguage()
	{
		return default(LocalizationManager.Language);
	}

	[Token(Token = "0x600089B")]
	[Address(RVA = "0xE5987C", Offset = "0xE5987C", VA = "0xE5987C")]
	public GameSettings()
	{
	}
}
[Serializable]
[Token(Token = "0x20001D2")]
internal class SettingsSerializable
{
	[Token(Token = "0x40009A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float height;

	[Token(Token = "0x40009A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float musicVolume;

	[Token(Token = "0x40009A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float soundsVolume;

	[Token(Token = "0x40009A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "OptionalFieldAttribute", RVA = "0x72AF48", Offset = "0x72AF48")]
	public int pieceAttached;

	[Token(Token = "0x40009A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "OptionalFieldAttribute", RVA = "0x72AF58", Offset = "0x72AF58")]
	public int language;

	[Token(Token = "0x600089C")]
	[Address(RVA = "0xAE79B4", Offset = "0xAE79B4", VA = "0xAE79B4")]
	public SettingsSerializable()
	{
	}
}
[Token(Token = "0x20001D3")]
public class Switch : NVRInteractable
{
	[Token(Token = "0x20001D4")]
	public delegate void SwitchEvent(bool state);

	[Token(Token = "0x40009AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject switchOn;

	[Token(Token = "0x40009AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject switchOff;

	[Token(Token = "0x40009AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public NewtonVR.Slider sliderAssociated;

	[Token(Token = "0x40009AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public bool state;

	[Token(Token = "0x14000017")]
	public event SwitchEvent OnSwitch
	{
		[Token(Token = "0x600089D")]
		[Address(RVA = "0x128B7A8", Offset = "0x128B7A8", VA = "0x128B7A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7306C0", Offset = "0x7306C0")]
		add
		{
		}
		[Token(Token = "0x600089E")]
		[Address(RVA = "0x128B848", Offset = "0x128B848", VA = "0x128B848")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7306D0", Offset = "0x7306D0")]
		remove
		{
		}
	}

	[Token(Token = "0x600089F")]
	[Address(RVA = "0x128B8E8", Offset = "0x128B8E8", VA = "0x128B8E8", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60008A0")]
	[Address(RVA = "0x128B9DC", Offset = "0x128B9DC", VA = "0x128B9DC", Slot = "12")]
	public override void HoveringEnter(NVRHand hand)
	{
	}

	[Token(Token = "0x60008A1")]
	[Address(RVA = "0x128BA6C", Offset = "0x128BA6C", VA = "0x128BA6C", Slot = "14")]
	public override void HoveringExit(NVRHand hand)
	{
	}

	[Token(Token = "0x60008A2")]
	[Address(RVA = "0x128BAFC", Offset = "0x128BAFC", VA = "0x128BAFC", Slot = "13")]
	public override void HoveringUpdate(NVRHand hand, float forTime)
	{
	}

	[Token(Token = "0x60008A3")]
	[Address(RVA = "0x128BCBC", Offset = "0x128BCBC", VA = "0x128BCBC")]
	private void OnSliderValueChange(float newValue)
	{
	}

	[Token(Token = "0x60008A4")]
	[Address(RVA = "0x128BD6C", Offset = "0x128BD6C", VA = "0x128BD6C")]
	public void SetState(bool state)
	{
	}

	[Token(Token = "0x60008A5")]
	[Address(RVA = "0x128BBC0", Offset = "0x128BBC0", VA = "0x128BBC0")]
	private void DoSwitch()
	{
	}

	[Token(Token = "0x60008A6")]
	[Address(RVA = "0x128BDA0", Offset = "0x128BDA0", VA = "0x128BDA0")]
	public Switch()
	{
	}
}
[Token(Token = "0x20001D5")]
public class StaticHandController : MonoBehaviour
{
	[Token(Token = "0x40009AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator m_handAnimator;

	[Token(Token = "0x40009AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float squeeze;

	[Token(Token = "0x60008AB")]
	[Address(RVA = "0xAEC8F4", Offset = "0xAEC8F4", VA = "0xAEC8F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008AC")]
	[Address(RVA = "0xAEC954", Offset = "0xAEC954", VA = "0xAEC954")]
	private void Start()
	{
	}

	[Token(Token = "0x60008AD")]
	[Address(RVA = "0xAEC958", Offset = "0xAEC958", VA = "0xAEC958")]
	private void Update()
	{
	}

	[Token(Token = "0x60008AE")]
	[Address(RVA = "0xAEC95C", Offset = "0xAEC95C", VA = "0xAEC95C")]
	public void ResetHand()
	{
	}

	[Token(Token = "0x60008AF")]
	[Address(RVA = "0xAECB18", Offset = "0xAECB18", VA = "0xAECB18")]
	public void CloseHand()
	{
	}

	[Token(Token = "0x60008B0")]
	[Address(RVA = "0xAEC968", Offset = "0xAEC968", VA = "0xAEC968")]
	private void setAnimation(HandInteractor.AnimationType animationType, float squeeze)
	{
	}

	[Token(Token = "0x60008B1")]
	[Address(RVA = "0xAECB24", Offset = "0xAECB24", VA = "0xAECB24")]
	public void ResetAnimator()
	{
	}

	[Token(Token = "0x60008B2")]
	[Address(RVA = "0xAECCE0", Offset = "0xAECCE0", VA = "0xAECCE0")]
	public StaticHandController()
	{
	}
}
[Token(Token = "0x20001D6")]
public class StaticHandsInteraction : MonoBehaviour
{
	[Token(Token = "0x40009B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject rightHand;

	[Token(Token = "0x40009B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject leftHand;

	[Token(Token = "0x40009B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public NVRDriveInteractable driveInteractable;

	[Token(Token = "0x60008B3")]
	[Address(RVA = "0xAECCE8", Offset = "0xAECCE8", VA = "0xAECCE8")]
	private void Start()
	{
	}

	[Token(Token = "0x60008B4")]
	[Address(RVA = "0xAECE40", Offset = "0xAECE40", VA = "0xAECE40")]
	private void Update()
	{
	}

	[Token(Token = "0x60008B5")]
	[Address(RVA = "0xAECE44", Offset = "0xAECE44", VA = "0xAECE44")]
	private void OnDriveStart(NVRHand hand)
	{
	}

	[Token(Token = "0x60008B6")]
	[Address(RVA = "0xAECFB4", Offset = "0xAECFB4", VA = "0xAECFB4")]
	private void OnDriveEnd(NVRHand hand)
	{
	}

	[Token(Token = "0x60008B7")]
	[Address(RVA = "0xAED12C", Offset = "0xAED12C", VA = "0xAED12C")]
	public StaticHandsInteraction()
	{
	}
}
[Token(Token = "0x20001D7")]
public class destroyMe : MonoBehaviour
{
	[Token(Token = "0x40009B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float timer;

	[Token(Token = "0x40009B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float deathtimer;

	[Token(Token = "0x60008B8")]
	[Address(RVA = "0x9D29B8", Offset = "0x9D29B8", VA = "0x9D29B8")]
	private void Start()
	{
	}

	[Token(Token = "0x60008B9")]
	[Address(RVA = "0x9D29BC", Offset = "0x9D29BC", VA = "0x9D29BC")]
	private void Update()
	{
	}

	[Token(Token = "0x60008BA")]
	[Address(RVA = "0x9D2A6C", Offset = "0x9D2A6C", VA = "0x9D2A6C")]
	public destroyMe()
	{
	}
}
[Token(Token = "0x20001D8")]
[ExecuteInEditMode]
public class particleEasyConfig : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20001D9")]
	public class colorChange
	{
		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ParticleSystem[] colored_ParticleSystem;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Gradient Gradient_custom;

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x1B2260C", Offset = "0x1B2260C", VA = "0x1B2260C")]
		public colorChange()
		{
		}
	}

	[Token(Token = "0x40009B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Speed_custom;

	[Token(Token = "0x40009B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public colorChange[] colorChangeList;

	[Token(Token = "0x40009B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool applyChanges;

	[Token(Token = "0x40009B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool Keep_applyChanges;

	[Token(Token = "0x60008BB")]
	[Address(RVA = "0x9D4704", Offset = "0x9D4704", VA = "0x9D4704")]
	private void Start()
	{
	}

	[Token(Token = "0x60008BC")]
	[Address(RVA = "0x9D4708", Offset = "0x9D4708", VA = "0x9D4708")]
	private void Update()
	{
	}

	[Token(Token = "0x60008BD")]
	[Address(RVA = "0x9D48AC", Offset = "0x9D48AC", VA = "0x9D48AC")]
	public particleEasyConfig()
	{
	}
}
[Token(Token = "0x20001DA")]
public class AnimateTiledTextureOnTrail : MonoBehaviour
{
	[Token(Token = "0x20001DB")]
	public delegate void VoidEvent();

	[Token(Token = "0x20001DC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728740", Offset = "0x728740")]
	private sealed class <updateTiling>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimateTiledTextureOnTrail <>4__this;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <checkAgainst>5__2;

		[Token(Token = "0x170000A0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60008D2")]
			[Address(RVA = "0x9D5CC4", Offset = "0x9D5CC4", VA = "0x9D5CC4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60008D4")]
			[Address(RVA = "0x9D5D0C", Offset = "0x9D5D0C", VA = "0x9D5D0C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x9D5B10", Offset = "0x9D5B10", VA = "0x9D5B10")]
		[DebuggerHidden]
		public <updateTiling>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x9D5B3C", Offset = "0x9D5B3C", VA = "0x9D5B3C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x9D5B40", Offset = "0x9D5B40", VA = "0x9D5B40", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x9D5CCC", Offset = "0x9D5CCC", VA = "0x9D5CCC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int _columns;

	[Token(Token = "0x40009BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int _rows;

	[Token(Token = "0x40009BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 _scale;

	[Token(Token = "0x40009BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 _offset;

	[Token(Token = "0x40009C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 _buffer;

	[Token(Token = "0x40009C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float _framesPerSecond;

	[Token(Token = "0x40009C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool _playOnce;

	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool _disableUponCompletion;

	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	public bool _enableEvents;

	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
	public bool _playOnEnable;

	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool _newMaterialInstance;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int _index;

	[Token(Token = "0x40009C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector2 _textureSize;

	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material _materialInstance;

	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _hasMaterialInstance;

	[Token(Token = "0x40009CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool _isPlaying;

	[Token(Token = "0x40009CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<VoidEvent> _voidEventCallbackList;

	[Token(Token = "0x60008BF")]
	[Address(RVA = "0x1022AFC", Offset = "0x1022AFC", VA = "0x1022AFC")]
	public void RegisterCallback(VoidEvent cbFunction)
	{
	}

	[Token(Token = "0x60008C0")]
	[Address(RVA = "0x1022BC0", Offset = "0x1022BC0", VA = "0x1022BC0")]
	public void UnRegisterCallback(VoidEvent cbFunction)
	{
	}

	[Token(Token = "0x60008C1")]
	[Address(RVA = "0x1022C84", Offset = "0x1022C84", VA = "0x1022C84")]
	public void Play()
	{
	}

	[Token(Token = "0x60008C2")]
	[Address(RVA = "0x1022DAC", Offset = "0x1022DAC", VA = "0x1022DAC")]
	public void ChangeMaterial(Material newMaterial, bool newInstance = false)
	{
	}

	[Token(Token = "0x60008C3")]
	[Address(RVA = "0x1022F80", Offset = "0x1022F80", VA = "0x1022F80")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008C4")]
	[Address(RVA = "0x1023040", Offset = "0x1023040", VA = "0x1023040")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60008C5")]
	[Address(RVA = "0x10230EC", Offset = "0x10230EC", VA = "0x10230EC")]
	private void HandleCallbacks(List<VoidEvent> cbList)
	{
	}

	[Token(Token = "0x60008C6")]
	[Address(RVA = "0x1023184", Offset = "0x1023184", VA = "0x1023184")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008C7")]
	[Address(RVA = "0x1022F5C", Offset = "0x1022F5C", VA = "0x1022F5C")]
	private void CalcTextureSize()
	{
	}

	[Token(Token = "0x60008C8")]
	[Address(RVA = "0x1022D34", Offset = "0x1022D34", VA = "0x1022D34")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7306E0", Offset = "0x7306E0")]
	private IEnumerator updateTiling()
	{
		return null;
	}

	[Token(Token = "0x60008C9")]
	[Address(RVA = "0x10231B4", Offset = "0x10231B4", VA = "0x10231B4")]
	private void ApplyOffset()
	{
	}

	[Token(Token = "0x60008CA")]
	[Address(RVA = "0x10232C4", Offset = "0x10232C4", VA = "0x10232C4")]
	public AnimateTiledTextureOnTrail()
	{
	}
}
[Token(Token = "0x20001DD")]
public class AnimatedUVs : MonoBehaviour
{
	[Token(Token = "0x40009D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speedY;

	[Token(Token = "0x40009D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speedx;

	[Token(Token = "0x40009D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float offsety;

	[Token(Token = "0x40009D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float offsetx;

	[Token(Token = "0x40009D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Renderer rend;

	[Token(Token = "0x60008D5")]
	[Address(RVA = "0x1023A28", Offset = "0x1023A28", VA = "0x1023A28")]
	private void Start()
	{
	}

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0x1023A84", Offset = "0x1023A84", VA = "0x1023A84")]
	private void Update()
	{
	}

	[Token(Token = "0x60008D7")]
	[Address(RVA = "0x1023B2C", Offset = "0x1023B2C", VA = "0x1023B2C")]
	public AnimatedUVs()
	{
	}
}
[Token(Token = "0x20001DE")]
public class BillBoard : MonoBehaviour
{
	[Token(Token = "0x60008D8")]
	[Address(RVA = "0x102D848", Offset = "0x102D848", VA = "0x102D848")]
	private void Start()
	{
	}

	[Token(Token = "0x60008D9")]
	[Address(RVA = "0x102D84C", Offset = "0x102D84C", VA = "0x102D84C")]
	private void Update()
	{
	}

	[Token(Token = "0x60008DA")]
	[Address(RVA = "0x102D8A0", Offset = "0x102D8A0", VA = "0x102D8A0")]
	public BillBoard()
	{
	}
}
[Token(Token = "0x20001DF")]
public class button_target : MonoBehaviour
{
	[Token(Token = "0x40009D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject MY_target;

	[Token(Token = "0x40009D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject temp_target;

	[Token(Token = "0x40009D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject[] ALL_target;

	[Token(Token = "0x60008DB")]
	[Address(RVA = "0x9D23C8", Offset = "0x9D23C8", VA = "0x9D23C8")]
	private void Start()
	{
	}

	[Token(Token = "0x60008DC")]
	[Address(RVA = "0x9D24F8", Offset = "0x9D24F8", VA = "0x9D24F8")]
	private void Update()
	{
	}

	[Token(Token = "0x60008DD")]
	[Address(RVA = "0x9D24FC", Offset = "0x9D24FC", VA = "0x9D24FC")]
	public void ShowTarget()
	{
	}

	[Token(Token = "0x60008DE")]
	[Address(RVA = "0x9D25D0", Offset = "0x9D25D0", VA = "0x9D25D0")]
	public button_target()
	{
	}
}
[Token(Token = "0x20001E0")]
public class demo : MonoBehaviour
{
	[Token(Token = "0x60008DF")]
	[Address(RVA = "0x9D2918", Offset = "0x9D2918", VA = "0x9D2918")]
	private void Start()
	{
	}

	[Token(Token = "0x60008E0")]
	[Address(RVA = "0x9D291C", Offset = "0x9D291C", VA = "0x9D291C")]
	private void Update()
	{
	}

	[Token(Token = "0x60008E1")]
	[Address(RVA = "0x9D2920", Offset = "0x9D2920", VA = "0x9D2920")]
	public void GoURL_FX()
	{
	}

	[Token(Token = "0x60008E2")]
	[Address(RVA = "0x9D2968", Offset = "0x9D2968", VA = "0x9D2968")]
	public void GoURL_Free()
	{
	}

	[Token(Token = "0x60008E3")]
	[Address(RVA = "0x9D29B0", Offset = "0x9D29B0", VA = "0x9D29B0")]
	public demo()
	{
	}
}
[Token(Token = "0x20001E1")]
public class tazo_UVScroller : MonoBehaviour
{
	[Token(Token = "0x40009D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int targetMaterialSlot;

	[Token(Token = "0x40009DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer myrender;

	[Token(Token = "0x40009DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speedY;

	[Token(Token = "0x40009DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speedX;

	[Token(Token = "0x40009DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float timeWentX;

	[Token(Token = "0x40009DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float timeWentY;

	[Token(Token = "0x60008E4")]
	[Address(RVA = "0x9D4B90", Offset = "0x9D4B90", VA = "0x9D4B90")]
	private void Start()
	{
	}

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0x9D4BEC", Offset = "0x9D4BEC", VA = "0x9D4BEC")]
	private void Update()
	{
	}

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0x9D4C94", Offset = "0x9D4C94", VA = "0x9D4C94")]
	public tazo_UVScroller()
	{
	}
}
[Token(Token = "0x20001E2")]
public class tazo_UVScroller_r : MonoBehaviour
{
	[Token(Token = "0x40009DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int targetMaterialSlot;

	[Token(Token = "0x40009E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer myrender;

	[Token(Token = "0x40009E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float speedY;

	[Token(Token = "0x40009E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speedX;

	[Token(Token = "0x40009E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float timeWentX;

	[Token(Token = "0x40009E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float timeWentY;

	[Token(Token = "0x60008E7")]
	[Address(RVA = "0x9D4CA4", Offset = "0x9D4CA4", VA = "0x9D4CA4")]
	private void Start()
	{
	}

	[Token(Token = "0x60008E8")]
	[Address(RVA = "0x9D4D00", Offset = "0x9D4D00", VA = "0x9D4D00")]
	private void Update()
	{
	}

	[Token(Token = "0x60008E9")]
	[Address(RVA = "0x9D4DE0", Offset = "0x9D4DE0", VA = "0x9D4DE0")]
	public tazo_UVScroller_r()
	{
	}
}
[Token(Token = "0x20001E3")]
public class HideRenderer : MonoBehaviour
{
	[Token(Token = "0x60008EA")]
	[Address(RVA = "0xB1499C", Offset = "0xB1499C", VA = "0xB1499C")]
	public void Hide(bool state = true)
	{
	}

	[Token(Token = "0x60008EB")]
	[Address(RVA = "0xB14A58", Offset = "0xB14A58", VA = "0xB14A58")]
	public HideRenderer()
	{
	}
}
[Token(Token = "0x20001E4")]
public class PlayerFollower : MonoBehaviour
{
	[Token(Token = "0x60008EC")]
	[Address(RVA = "0xAD778C", Offset = "0xAD778C", VA = "0xAD778C")]
	public void Update()
	{
	}

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0xAD7858", Offset = "0xAD7858", VA = "0xAD7858")]
	public PlayerFollower()
	{
	}
}
[Token(Token = "0x20001E5")]
public class Scenario : MonoBehaviour
{
	[Token(Token = "0x40009E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material skyboxDay;

	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material skyboxNight;

	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject scenarioLightDay;

	[Token(Token = "0x40009E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject scenarioLightNight;

	[Token(Token = "0x40009E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool available;

	[Token(Token = "0x40009EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public Quaternion baseAngle;

	[Token(Token = "0x40009EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[HideInInspector]
	public float baseRotationY;

	[Token(Token = "0x40009EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[HideInInspector]
	public Vector3 basePosition;

	[Token(Token = "0x40009ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[HideInInspector]
	public bool gridEnabled;

	[Token(Token = "0x40009EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	[HideInInspector]
	public bool gridEstablished;

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ScenariosManager.ScenarioName scenarioName;

	[Token(Token = "0x60008EE")]
	[Address(RVA = "0xAE5510", Offset = "0xAE5510", VA = "0xAE5510")]
	public PieceData[] getPieces()
	{
		return null;
	}

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0xAE5560", Offset = "0xAE5560", VA = "0xAE5560")]
	public bool isAvailable()
	{
		return default(bool);
	}

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0xAE5568", Offset = "0xAE5568", VA = "0xAE5568")]
	public bool isActive()
	{
		return default(bool);
	}

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0xAE558C", Offset = "0xAE558C", VA = "0xAE558C")]
	public void saveBaseGridValues(bool gridEnable)
	{
	}

	[Token(Token = "0x60008F2")]
	[Address(RVA = "0xAE5598", Offset = "0xAE5598", VA = "0xAE5598")]
	public void saveBaseGridValues(Quaternion baseAngle, float baseRotationY, Vector3 basePosition, bool gridEstablished, bool gridEnable)
	{
	}

	[Token(Token = "0x60008F3")]
	[Address(RVA = "0xAE55BC", Offset = "0xAE55BC", VA = "0xAE55BC")]
	public void saveBaseGridValues()
	{
	}

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0xAE5660", Offset = "0xAE5660", VA = "0xAE5660")]
	public void setBaseGridValues()
	{
	}

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0xAE5718", Offset = "0xAE5718", VA = "0xAE5718")]
	public Scenario()
	{
	}
}
[Token(Token = "0x20001E6")]
public class ScenariosManager : MonoBehaviour
{
	[Token(Token = "0x20001E7")]
	public enum ScenarioName
	{
		[Token(Token = "0x40009F4")]
		All,
		[Token(Token = "0x40009F5")]
		Base,
		[Token(Token = "0x40009F6")]
		Farwest
	}

	[Token(Token = "0x20001E8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728750", Offset = "0x728750")]
	private sealed class <ShowScenarioCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ScenariosManager <>4__this;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ScenarioName scenario;

		[Token(Token = "0x170000A2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000906")]
			[Address(RVA = "0x1B1D868", Offset = "0x1B1D868", VA = "0x1B1D868", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000908")]
			[Address(RVA = "0x1B1D8B0", Offset = "0x1B1D8B0", VA = "0x1B1D8B0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0x1B1D5C4", Offset = "0x1B1D5C4", VA = "0x1B1D5C4")]
		[DebuggerHidden]
		public <ShowScenarioCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0x1B1D5F0", Offset = "0x1B1D5F0", VA = "0x1B1D5F0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0x1B1D5F4", Offset = "0x1B1D5F4", VA = "0x1B1D5F4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0x1B1D870", Offset = "0x1B1D870", VA = "0x1B1D870", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static ScenariosManager instance;

	[Token(Token = "0x40009F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Scenario currentScenario;

	[Token(Token = "0x40009F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Scenario[] scenarios;

	[Token(Token = "0x60008F6")]
	[Address(RVA = "0xAE5C2C", Offset = "0xAE5C2C", VA = "0xAE5C2C")]
	public static ScenariosManager getInstance()
	{
		return null;
	}

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0xAE5C90", Offset = "0xAE5C90", VA = "0xAE5C90")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0xAE5D98", Offset = "0xAE5D98", VA = "0xAE5D98")]
	public void ShowScenario(string scenarioId)
	{
	}

	[Token(Token = "0x60008F9")]
	[Address(RVA = "0xAE5918", Offset = "0xAE5918", VA = "0xAE5918")]
	public void ShowScenario(ScenarioName scenario)
	{
	}

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0xAE5EC4", Offset = "0xAE5EC4", VA = "0xAE5EC4")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x730790", Offset = "0x730790")]
	public IEnumerator ShowScenarioCoroutine(ScenarioName scenario)
	{
		return null;
	}

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0xAE5F4C", Offset = "0xAE5F4C", VA = "0xAE5F4C")]
	public void changeScenearioDayMode(bool state)
	{
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0xAE6090", Offset = "0xAE6090", VA = "0xAE6090")]
	public Scenario getScenario(string scenarioId)
	{
		return null;
	}

	[Token(Token = "0x60008FD")]
	[Address(RVA = "0xAE61B8", Offset = "0xAE61B8", VA = "0xAE61B8")]
	public Scenario getScenario(ScenarioName scenarioId)
	{
		return null;
	}

	[Token(Token = "0x60008FE")]
	[Address(RVA = "0xAE6220", Offset = "0xAE6220", VA = "0xAE6220")]
	public List<Scenario> getAvailableScenarios()
	{
		return null;
	}

	[Token(Token = "0x60008FF")]
	[Address(RVA = "0xAE6334", Offset = "0xAE6334", VA = "0xAE6334")]
	public void enableScenarios(bool enable)
	{
	}

	[Token(Token = "0x6000900")]
	[Address(RVA = "0xAE64B4", Offset = "0xAE64B4", VA = "0xAE64B4")]
	public void setAvailableScenario(Scenario newAvailableScenario)
	{
	}

	[Token(Token = "0x6000901")]
	[Address(RVA = "0xAE65B8", Offset = "0xAE65B8", VA = "0xAE65B8")]
	public ScenariosManager()
	{
	}
}
[Token(Token = "0x20001E9")]
public class TrainerVR_Trophies
{
	[Token(Token = "0x40009FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int GRAB_PIECE;

	[Token(Token = "0x40009FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int ACTION_PIECE;

	[Token(Token = "0x40009FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int TELEPORT;

	[Token(Token = "0x40009FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static int FIRST_TRACKS;

	[Token(Token = "0x40009FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static int TRAIN_ENGINEON;

	[Token(Token = "0x4000A00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static int WELDABLE_PIECE;

	[Token(Token = "0x4000A01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static int NIGHT_MODE;

	[Token(Token = "0x4000A02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static int ATTACH_PIECE_100;

	[Token(Token = "0x4000A03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static int FARWEST;

	[Token(Token = "0x4000A04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public static int ATTACH_PIECE_1000;

	[Token(Token = "0x4000A05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static int EXPLOSION;

	[Token(Token = "0x4000A06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public static int ATTACH_PIECE_10000;

	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static int attachCount;

	[Token(Token = "0x6000909")]
	[Address(RVA = "0xDDC22C", Offset = "0xDDC22C", VA = "0xDDC22C")]
	public TrainerVR_Trophies()
	{
	}
}
[Token(Token = "0x20001EA")]
public static class Bezier
{
	[Token(Token = "0x600090B")]
	[Address(RVA = "0x102B6D8", Offset = "0x102B6D8", VA = "0x102B6D8")]
	public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600090C")]
	[Address(RVA = "0x102B798", Offset = "0x102B798", VA = "0x102B798")]
	public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600090D")]
	[Address(RVA = "0x102B7F4", Offset = "0x102B7F4", VA = "0x102B7F4")]
	public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600090E")]
	[Address(RVA = "0x102B8F4", Offset = "0x102B8F4", VA = "0x102B8F4")]
	public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x20001EB")]
public enum BezierControlPointMode
{
	[Token(Token = "0x4000A09")]
	Free,
	[Token(Token = "0x4000A0A")]
	Aligned,
	[Token(Token = "0x4000A0B")]
	Mirrored
}
[Token(Token = "0x20001EC")]
public class BezierCurve : MonoBehaviour
{
	[Token(Token = "0x4000A0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3[] points;

	[Token(Token = "0x600090F")]
	[Address(RVA = "0x102BA04", Offset = "0x102BA04", VA = "0x102BA04")]
	public Vector3 GetPoint(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000910")]
	[Address(RVA = "0x102BAB8", Offset = "0x102BAB8", VA = "0x102BAB8")]
	public Vector3 GetVelocity(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000911")]
	[Address(RVA = "0x102BBA8", Offset = "0x102BBA8", VA = "0x102BBA8")]
	public Vector3 GetDirection(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000912")]
	[Address(RVA = "0x102BBD8", Offset = "0x102BBD8", VA = "0x102BBD8")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000913")]
	[Address(RVA = "0x102BCA8", Offset = "0x102BCA8", VA = "0x102BCA8")]
	public BezierCurve()
	{
	}
}
[Token(Token = "0x20001ED")]
public class BezierSpline : MonoBehaviour
{
	[Token(Token = "0x4000A0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Vector3[] points;

	[Token(Token = "0x4000A0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private BezierControlPointMode[] modes;

	[Token(Token = "0x4000A0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool loop;

	[Token(Token = "0x170000A4")]
	public bool Loop
	{
		[Token(Token = "0x6000914")]
		[Address(RVA = "0x102BCB8", Offset = "0x102BCB8", VA = "0x102BCB8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000915")]
		[Address(RVA = "0x102BCC0", Offset = "0x102BCC0", VA = "0x102BCC0")]
		set
		{
		}
	}

	[Token(Token = "0x170000A5")]
	public int ControlPointCount
	{
		[Token(Token = "0x6000916")]
		[Address(RVA = "0x102BF7C", Offset = "0x102BF7C", VA = "0x102BF7C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000A6")]
	public int CurveCount
	{
		[Token(Token = "0x600091C")]
		[Address(RVA = "0x102C2EC", Offset = "0x102C2EC", VA = "0x102C2EC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0x102BF98", Offset = "0x102BF98", VA = "0x102BF98")]
	public Vector3 GetControlPoint(int index)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000918")]
	[Address(RVA = "0x102BD34", Offset = "0x102BD34", VA = "0x102BD34")]
	public void SetControlPoint(int index, Vector3 point)
	{
	}

	[Token(Token = "0x6000919")]
	[Address(RVA = "0x102C1EC", Offset = "0x102C1EC", VA = "0x102C1EC")]
	public BezierControlPointMode GetControlPointMode(int index)
	{
		return default(BezierControlPointMode);
	}

	[Token(Token = "0x600091A")]
	[Address(RVA = "0x102C244", Offset = "0x102C244", VA = "0x102C244")]
	public void SetControlPointMode(int index, BezierControlPointMode mode)
	{
	}

	[Token(Token = "0x600091B")]
	[Address(RVA = "0x102BFE0", Offset = "0x102BFE0", VA = "0x102BFE0")]
	private void EnforceMode(int index)
	{
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0x102C324", Offset = "0x102C324", VA = "0x102C324")]
	public Vector3 GetPoint(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0x102C49C", Offset = "0x102C49C", VA = "0x102C49C")]
	public Vector3 GetVelocity(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600091F")]
	[Address(RVA = "0x102C658", Offset = "0x102C658", VA = "0x102C658")]
	public Vector3 GetDirection(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000920")]
	[Address(RVA = "0x102C688", Offset = "0x102C688", VA = "0x102C688")]
	public void AddCurve()
	{
	}

	[Token(Token = "0x6000921")]
	[Address(RVA = "0x102C8CC", Offset = "0x102C8CC", VA = "0x102C8CC")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000922")]
	[Address(RVA = "0x102C9CC", Offset = "0x102C9CC", VA = "0x102C9CC")]
	public BezierSpline()
	{
	}
}
[Token(Token = "0x20001EE")]
public class Line : MonoBehaviour
{
	[Token(Token = "0x4000A10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 p0;

	[Token(Token = "0x4000A11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 p1;

	[Token(Token = "0x6000923")]
	[Address(RVA = "0xB1C61C", Offset = "0xB1C61C", VA = "0xB1C61C")]
	public Line()
	{
	}
}
[Token(Token = "0x20001EF")]
public class SplineDecorator : MonoBehaviour
{
	[Token(Token = "0x4000A12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BezierSpline spline;

	[Token(Token = "0x4000A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int frequency;

	[Token(Token = "0x4000A14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool lookForward;

	[Token(Token = "0x4000A15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] items;

	[Token(Token = "0x6000924")]
	[Address(RVA = "0xAEC214", Offset = "0xAEC214", VA = "0xAEC214")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000925")]
	[Address(RVA = "0xAEC444", Offset = "0xAEC444", VA = "0xAEC444")]
	public SplineDecorator()
	{
	}
}
[Token(Token = "0x20001F0")]
public class SplineWalker : MonoBehaviour
{
	[Token(Token = "0x4000A16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public BezierSpline spline;

	[Token(Token = "0x4000A17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float duration;

	[Token(Token = "0x4000A18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool lookForward;

	[Token(Token = "0x4000A19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SplineWalkerMode mode;

	[Token(Token = "0x4000A1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float progress;

	[Token(Token = "0x4000A1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool goingForward;

	[Token(Token = "0x6000926")]
	[Address(RVA = "0xAEC44C", Offset = "0xAEC44C", VA = "0xAEC44C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000927")]
	[Address(RVA = "0xAEC5B0", Offset = "0xAEC5B0", VA = "0xAEC5B0")]
	public SplineWalker()
	{
	}
}
[Token(Token = "0x20001F1")]
public enum SplineWalkerMode
{
	[Token(Token = "0x4000A1D")]
	Once,
	[Token(Token = "0x4000A1E")]
	Loop,
	[Token(Token = "0x4000A1F")]
	PingPong
}
[Token(Token = "0x20001F2")]
public class InfoBubble : MonoBehaviour
{
	[Token(Token = "0x4000A20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 WobbleAxis;

	[Token(Token = "0x4000A21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float WobbleFrequency;

	[Token(Token = "0x4000A22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float WobbleAmplitude;

	[Token(Token = "0x4000A23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform TrackTarget;

	[Token(Token = "0x4000A24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 startOffsetTarget;

	[Token(Token = "0x6000928")]
	[Address(RVA = "0xB1738C", Offset = "0xB1738C", VA = "0xB1738C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000929")]
	[Address(RVA = "0xB17400", Offset = "0xB17400", VA = "0xB17400")]
	private void Update()
	{
	}

	[Token(Token = "0x600092A")]
	[Address(RVA = "0xB174D0", Offset = "0xB174D0", VA = "0xB174D0")]
	public InfoBubble()
	{
	}
}
[Token(Token = "0x20001F3")]
public class RuntimeDecalCombiner
{
	[Token(Token = "0x600092B")]
	[Address(RVA = "0xAE0BF8", Offset = "0xAE0BF8", VA = "0xAE0BF8")]
	public static List<GameObject> Combine(IList<EasyDecal> decals)
	{
		return null;
	}

	[Token(Token = "0x600092C")]
	[Address(RVA = "0xAE1014", Offset = "0xAE1014", VA = "0xAE1014")]
	private static List<GameObject> Combine(Dictionary<DecalTextureAtlas, List<EasyDecal>> mappings)
	{
		return null;
	}

	[Token(Token = "0x600092D")]
	[Address(RVA = "0xAE1560", Offset = "0xAE1560", VA = "0xAE1560")]
	private static GameObject Combine(IList<EasyDecal> decals, DecalTextureAtlas atlas)
	{
		return null;
	}

	[Token(Token = "0x600092E")]
	[Address(RVA = "0xAE1AC8", Offset = "0xAE1AC8", VA = "0xAE1AC8")]
	public RuntimeDecalCombiner()
	{
	}
}
[Token(Token = "0x20001F4")]
public class SparksExecutioner : MonoBehaviour
{
	[Token(Token = "0x4000A25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Lifetime;

	[Token(Token = "0x600092F")]
	[Address(RVA = "0xAEC138", Offset = "0xAEC138", VA = "0xAEC138")]
	private void Start()
	{
	}

	[Token(Token = "0x6000930")]
	[Address(RVA = "0xAEC18C", Offset = "0xAEC18C", VA = "0xAEC18C")]
	private void Kill()
	{
	}

	[Token(Token = "0x6000931")]
	[Address(RVA = "0xAEC204", Offset = "0xAEC204", VA = "0xAEC204")]
	public SparksExecutioner()
	{
	}
}
namespace UnitySA.Characters.FirstPerson
{
	[Token(Token = "0x20001F5")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x728760", Offset = "0x728760")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x728760", Offset = "0x728760")]
	public class FPCtrl : MonoBehaviour
	{
		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_IsWalking;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float m_WalkSpeed;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float m_RunSpeed;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B028", Offset = "0x72B028")]
		[SerializeField]
		private float m_RunstepLenghten;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float m_JumpSpeed;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float m_StickToGroundForce;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float m_GravityMultiplier;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private MLook m_MouseLook;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private bool m_UseFovKick;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private FOVZoom m_FovKick;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private bool m_UseHeadBob;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private CurveCtrlBob m_HeadBob;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private LerpCtrlBob m_JumpBob;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float m_StepInterval;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Camera m_Camera;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool m_Jump;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float m_YRotation;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector2 m_Input;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 m_MoveDir;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private CharacterController m_CharacterController;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private CollisionFlags m_CollisionFlags;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool m_PreviouslyGrounded;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float m_StepCycle;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float m_NextStep;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private bool m_Jumping;

		[Token(Token = "0x6000932")]
		[Address(RVA = "0xE502D8", Offset = "0xE502D8", VA = "0xE502D8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0xE503E4", Offset = "0xE503E4", VA = "0xE503E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0xE5052C", Offset = "0xE5052C", VA = "0xE5052C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0xE50958", Offset = "0xE50958", VA = "0xE50958")]
		private void ProgressStepCycle(float speed)
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0xE50A54", Offset = "0xE50A54", VA = "0xE50A54")]
		private void UpdateCameraPosition(float speed)
		{
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xE507CC", Offset = "0xE507CC", VA = "0xE507CC")]
		private void GetInput(out float speed)
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0xE504D4", Offset = "0xE504D4", VA = "0xE504D4")]
		private void RotateView()
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0xE50C1C", Offset = "0xE50C1C", VA = "0xE50C1C")]
		private void OnControllerColliderHit(ControllerColliderHit hit)
		{
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0xE50D58", Offset = "0xE50D58", VA = "0xE50D58")]
		public FPCtrl()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001F6")]
	public class MLook
	{
		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float XSensitivity;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float YSensitivity;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool clampVerticalRotation;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MinimumX;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaximumX;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool smooth;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float smoothTime;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Quaternion m_CharacterTargetRot;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion m_CameraTargetRot;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_cursorIsLocked;

		[Token(Token = "0x600093B")]
		[Address(RVA = "0xB2116C", Offset = "0xB2116C", VA = "0xB2116C")]
		public void Init(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0xB211C0", Offset = "0xB211C0", VA = "0xB211C0")]
		public void LookRotation(Transform character, Transform camera)
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0xB214E4", Offset = "0xB214E4", VA = "0xB214E4")]
		public void SetCursorLock(bool value)
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0xB214D4", Offset = "0xB214D4", VA = "0xB214D4")]
		public void UpdateCursorLock()
		{
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0xB21518", Offset = "0xB21518", VA = "0xB21518")]
		private void InternalLockUpdate()
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0xB2146C", Offset = "0xB2146C", VA = "0xB2146C")]
		private Quaternion ClampRotationAroundXAxis(Quaternion q)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0xB21594", Offset = "0xB21594", VA = "0xB21594")]
		public MLook()
		{
		}
	}
}
namespace UnitySA.Utility
{
	[Serializable]
	[Token(Token = "0x20001F7")]
	public class CurveCtrlBob
	{
		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float HorizontalBobRange;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float VerticalBobRange;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve Bobcurve;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float VerticaltoHorizontalRatio;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float m_CyclePositionX;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_CyclePositionY;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float m_BobBaseInterval;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_OriginalCameraPosition;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float m_Time;

		[Token(Token = "0x6000942")]
		[Address(RVA = "0xE27DF8", Offset = "0xE27DF8", VA = "0xE27DF8")]
		public void Setup(Camera camera, float bobBaseInterval)
		{
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0xE27E9C", Offset = "0xE27E9C", VA = "0xE27E9C")]
		public Vector3 DoHeadBob(float speed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0xE27F98", Offset = "0xE27F98", VA = "0xE27F98")]
		public CurveCtrlBob()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001F8")]
	public class FOVZoom
	{
		[Token(Token = "0x20001F9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7287F4", Offset = "0x7287F4")]
		private sealed class <FOVKickUp>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FOVZoom <>4__this;

			[Token(Token = "0x4000A5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x170000A7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600094E")]
				[Address(RVA = "0x9DA06C", Offset = "0x9DA06C", VA = "0x9DA06C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000A8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000950")]
				[Address(RVA = "0x9DA0B4", Offset = "0x9DA0B4", VA = "0x9DA0B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600094B")]
			[Address(RVA = "0x9D9F00", Offset = "0x9D9F00", VA = "0x9D9F00")]
			[DebuggerHidden]
			public <FOVKickUp>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x600094C")]
			[Address(RVA = "0x9D9F2C", Offset = "0x9D9F2C", VA = "0x9D9F2C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600094D")]
			[Address(RVA = "0x9D9F30", Offset = "0x9D9F30", VA = "0x9D9F30", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600094F")]
			[Address(RVA = "0x9DA074", Offset = "0x9DA074", VA = "0x9DA074", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001FA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728804", Offset = "0x728804")]
		private sealed class <FOVKickDown>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FOVZoom <>4__this;

			[Token(Token = "0x4000A61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x170000A9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000954")]
				[Address(RVA = "0x9D9EB0", Offset = "0x9D9EB0", VA = "0x9D9EB0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000AA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000956")]
				[Address(RVA = "0x9D9EF8", Offset = "0x9D9EF8", VA = "0x9D9EF8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000951")]
			[Address(RVA = "0x9D9D30", Offset = "0x9D9D30", VA = "0x9D9D30")]
			[DebuggerHidden]
			public <FOVKickDown>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6000952")]
			[Address(RVA = "0x9D9D5C", Offset = "0x9D9D5C", VA = "0x9D9D5C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000953")]
			[Address(RVA = "0x9D9D60", Offset = "0x9D9D60", VA = "0x9D9D60", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000955")]
			[Address(RVA = "0x9D9EB8", Offset = "0x9D9EB8", VA = "0x9D9EB8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Camera Camera;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public float originalFov;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float FOVIncrease;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float TimeToIncrease;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float TimeToDecrease;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve IncreaseCurve;

		[Token(Token = "0x6000945")]
		[Address(RVA = "0xE5008C", Offset = "0xE5008C", VA = "0xE5008C")]
		public void Setup(Camera camera)
		{
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0xE500D8", Offset = "0xE500D8", VA = "0xE500D8")]
		private void CheckStatus(Camera camera)
		{
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xE501C4", Offset = "0xE501C4", VA = "0xE501C4")]
		public void ChangeCamera(Camera camera)
		{
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xE501CC", Offset = "0xE501CC", VA = "0xE501CC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x730840", Offset = "0x730840")]
		public IEnumerator FOVKickUp()
		{
			return null;
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0xE50244", Offset = "0xE50244", VA = "0xE50244")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7308A0", Offset = "0x7308A0")]
		public IEnumerator FOVKickDown()
		{
			return null;
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0xE502BC", Offset = "0xE502BC", VA = "0xE502BC")]
		public FOVZoom()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001FB")]
	public class LerpCtrlBob
	{
		[Token(Token = "0x20001FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728814", Offset = "0x728814")]
		private sealed class <DoBobCycle>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LerpCtrlBob <>4__this;

			[Token(Token = "0x4000A68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <t>5__2;

			[Token(Token = "0x170000AB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600095D")]
				[Address(RVA = "0x9DD188", Offset = "0x9DD188", VA = "0x9DD188", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000AC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600095F")]
				[Address(RVA = "0x9DD1D0", Offset = "0x9DD1D0", VA = "0x9DD1D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600095A")]
			[Address(RVA = "0x9DCFB4", Offset = "0x9DCFB4", VA = "0x9DCFB4")]
			[DebuggerHidden]
			public <DoBobCycle>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x600095B")]
			[Address(RVA = "0x9DCFE0", Offset = "0x9DCFE0", VA = "0x9DCFE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600095C")]
			[Address(RVA = "0x9DCFE4", Offset = "0x9DCFE4", VA = "0x9DCFE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600095E")]
			[Address(RVA = "0x9DD190", Offset = "0x9DD190", VA = "0x9DD190", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float BobDuration;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float BobAmount;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float m_Offset;

		[Token(Token = "0x6000957")]
		[Address(RVA = "0xB1BBA0", Offset = "0xB1BBA0", VA = "0xB1BBA0")]
		public float Offset()
		{
			return default(float);
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0xB1BBA8", Offset = "0xB1BBA8", VA = "0xB1BBA8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7309A0", Offset = "0x7309A0")]
		public IEnumerator DoBobCycle()
		{
			return null;
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xB1BC20", Offset = "0xB1BC20", VA = "0xB1BC20")]
		public LerpCtrlBob()
		{
		}
	}
}
namespace ch.sycoforge.Decal.Demo
{
	[Token(Token = "0x20001FD")]
	public class AdvancedBulletHoles : MonoBehaviour
	{
		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EasyDecal DecalPrefab;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ImpactParticles;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float CastRadius;

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x1021530", Offset = "0x1021530", VA = "0x1021530")]
		private void Start()
		{
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x1021628", Offset = "0x1021628", VA = "0x1021628")]
		private void Update()
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0x1021A48", Offset = "0x1021A48", VA = "0x1021A48")]
		public AdvancedBulletHoles()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public class BasicBulletHoles : MonoBehaviour
	{
		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EasyDecal DecalPrefab;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool t;

		[Token(Token = "0x6000963")]
		[Address(RVA = "0x102B108", Offset = "0x102B108", VA = "0x102B108")]
		public void Start()
		{
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0x102B1D0", Offset = "0x102B1D0", VA = "0x102B1D0")]
		public void Update()
		{
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x102B420", Offset = "0x102B420", VA = "0x102B420")]
		public BasicBulletHoles()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public static class BezierUtil
	{
		[Token(Token = "0x6000966")]
		[Address(RVA = "0x102C9D4", Offset = "0x102C9D4", VA = "0x102C9D4")]
		public static List<Vector3> InterpolatePath(List<Vector3> path, int segments, float radius, float angleThreshold)
		{
			return null;
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x102CD68", Offset = "0x102CD68", VA = "0x102CD68")]
		public static Vector3[] GetBezierApproximation(Vector3[] controlPoints, int outputSegmentCount)
		{
			return null;
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x102CE44", Offset = "0x102CE44", VA = "0x102CE44")]
		public static Vector3 GetBezierPoint(float t, Vector3[] controlPoints, int index, int count)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000200")]
	public static class LineUtil
	{
		[Token(Token = "0x6000969")]
		[Address(RVA = "0xB1D2FC", Offset = "0xB1D2FC", VA = "0xB1D2FC")]
		public static void DrawPath(float thickness, Material material, List<Vector3> path)
		{
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xB1D49C", Offset = "0xB1D49C", VA = "0xB1D49C")]
		private static void DrawLine(float thickness, Vector3 start, Vector3 end)
		{
		}
	}
	[Token(Token = "0x2000201")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x728824", Offset = "0x728824")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x728824", Offset = "0x728824")]
	public class PathAgent : MonoBehaviour
	{
		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float PathThickness;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B118", Offset = "0x72B118")]
		public float NormalPathOffset;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B150", Offset = "0x72B150")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B150", Offset = "0x72B150")]
		public float Radius;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B1A8", Offset = "0x72B1A8")]
		public float AngleThreshold;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool DrawGizmos;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EasyDecal TargetAimDecal;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject TargetPointDecalPrefab;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Vector3> path;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private NavMeshAgent agent;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private LineRenderer lineRenderer;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 decalOffset;

		[Token(Token = "0x4000A79")]
		private const int MAXDISTANCE = 50;

		[Token(Token = "0x600096B")]
		[Address(RVA = "0xD13D7C", Offset = "0xD13D7C", VA = "0xD13D7C")]
		private void Start()
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0xD13E2C", Offset = "0xD13E2C", VA = "0xD13E2C")]
		private void Update()
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0xD142CC", Offset = "0xD142CC", VA = "0xD142CC")]
		private void SetTarget(Ray mouseRay)
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0xD13EC8", Offset = "0xD13EC8", VA = "0xD13EC8")]
		private void CreatePath(Ray mouseRay)
		{
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0xD14450", Offset = "0xD14450", VA = "0xD14450")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0xD14594", Offset = "0xD14594", VA = "0xD14594")]
		public PathAgent()
		{
		}
	}
	[Token(Token = "0x2000202")]
	public class ProxyRegister : MonoBehaviour
	{
		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public StaticProxyCollection ProxyCollection;

		[Token(Token = "0x6000971")]
		[Address(RVA = "0xAD9CE4", Offset = "0xAD9CE4", VA = "0xAD9CE4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0xAD9D94", Offset = "0xAD9D94", VA = "0xAD9D94")]
		public ProxyRegister()
		{
		}
	}
	[Token(Token = "0x2000203")]
	public class Sinoid : MonoBehaviour
	{
		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float AngularVelocity;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float SineFreq;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Amplitude;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float accuTime;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 startPos;

		[Token(Token = "0x6000973")]
		[Address(RVA = "0xAE940C", Offset = "0xAE940C", VA = "0xAE940C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0xAE9448", Offset = "0xAE9448", VA = "0xAE9448")]
		private void Update()
		{
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0xAE9594", Offset = "0xAE9594", VA = "0xAE9594")]
		public Sinoid()
		{
		}
	}
}
namespace Sigtrap.VrTunnellingPro
{
	[Token(Token = "0x2000204")]
	public class Tunnelling : TunnellingImageBase
	{
		[Token(Token = "0x170000AD")]
		protected override CameraEvent _maskCmdEvt
		{
			[Token(Token = "0x6000976")]
			[Address(RVA = "0xDDCCBC", Offset = "0xDDCCBC", VA = "0xDDCCBC", Slot = "9")]
			get
			{
				return default(CameraEvent);
			}
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0xDDCCC4", Offset = "0xDDCCC4", VA = "0xDDCCC4")]
		private void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0xDDD1AC", Offset = "0xDDD1AC", VA = "0xDDD1AC")]
		public Tunnelling()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public abstract class TunnellingBase : MonoBehaviour
	{
		[Token(Token = "0x2000206")]
		public enum BackgroundMode
		{
			[Token(Token = "0x4000ADF")]
			COLOR,
			[Token(Token = "0x4000AE0")]
			SKYBOX,
			[Token(Token = "0x4000AE1")]
			CAGE_COLOR,
			[Token(Token = "0x4000AE2")]
			CAGE_SKYBOX,
			[Token(Token = "0x4000AE3")]
			CAGE_ONLY,
			[Token(Token = "0x4000AE4")]
			BLUR
		}

		[Token(Token = "0x2000207")]
		public enum MaskMode
		{
			[Token(Token = "0x4000AE6")]
			OFF,
			[Token(Token = "0x4000AE7")]
			MASK,
			[Token(Token = "0x4000AE8")]
			WINDOW,
			[Token(Token = "0x4000AE9")]
			PORTAL
		}

		[Token(Token = "0x2000208")]
		public enum MSAA
		{
			[Token(Token = "0x4000AEB")]
			AUTO,
			[Token(Token = "0x4000AEC")]
			OFF,
			[Token(Token = "0x4000AED")]
			X2,
			[Token(Token = "0x4000AEE")]
			X4,
			[Token(Token = "0x4000AEF")]
			X8
		}

		[Token(Token = "0x4000A80")]
		public const string VRTP_VERSION = "1.2.1";

		[Token(Token = "0x4000A81")]
		public const int VRTP_VERSION_MAJOR = 1;

		[Token(Token = "0x4000A82")]
		public const int VRTP_VERSION_MINOR = 2;

		[Token(Token = "0x4000A83")]
		public const int VRTP_VERSION_PATCH = 1;

		[Token(Token = "0x4000A84")]
		public const string VRTP_VERSION_BETA = "";

		[Token(Token = "0x4000A85")]
		public const string GLOBAL_PROP_FOGCOLOR = "_VRTP_Cage_FogColor";

		[Token(Token = "0x4000A86")]
		public const string GLOBAL_PROP_FOGDENSITY = "_VRTP_Cage_FogDensity";

		[Token(Token = "0x4000A87")]
		public const string GLOBAL_PROP_FOGPOWER = "_VRTP_Cage_FogPower";

		[Token(Token = "0x4000A88")]
		public const string GLOBAL_PROP_FOGBLEND = "_VRTP_Cage_FogBlend";

		[Token(Token = "0x4000A89")]
		protected const string PATH_SHADERS = "Hidden/VrTunnellingPro/";

		[Token(Token = "0x4000A8A")]
		protected const string PATH_MESHES = "Meshes/";

		[Token(Token = "0x4000A8B")]
		protected const string PATH_IRISMESH = "Iris";

		[Token(Token = "0x4000A8C")]
		protected const string PROP_OUTER = "_FxOuter";

		[Token(Token = "0x4000A8D")]
		protected const string PROP_INNER = "_FxInner";

		[Token(Token = "0x4000A8E")]
		protected const string PROP_COLOR = "_Color";

		[Token(Token = "0x4000A8F")]
		protected const string PROP_SKYBOX = "_Skybox";

		[Token(Token = "0x4000A90")]
		protected const string PROP_EYEPRJ = "_EyeProjection";

		[Token(Token = "0x4000A91")]
		protected const string PROP_EYEMAT = "_EyeToWorld";

		[Token(Token = "0x4000A92")]
		protected const string KEYWORD_BKG = "TUNNEL_BKG";

		[Token(Token = "0x4000A93")]
		protected const string KEYWORD_SKYBOX = "TUNNEL_SKYBOX";

		[Token(Token = "0x4000A94")]
		protected const string KEYWORD_OVERLAY = "TUNNEL_OVERLAY";

		[Token(Token = "0x4000A95")]
		public const float FEATHER_MAX = 0.5f;

		[Token(Token = "0x4000A96")]
		public const float MOTION_STRENGTH_MAX = 2f;

		[Token(Token = "0x4000A97")]
		public const float COUNTER_STRENGTH_MAX = 2f;

		[Token(Token = "0x4000A98")]
		public const int FPSDIV_MAX = 60;

		[Token(Token = "0x4000A99")]
		private const float COVERAGE_MIN = 0f;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int _propFxInner;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected int _propFxOuter;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _propEyeProjection;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _propEyeToWorld;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected int _globPropFogColor;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected int _globPropFogDensity;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected int _globPropFogPower;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected int _globPropFogBlend;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Matrix4x4[] _eyeToWorld;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Matrix4x4[] _eyeProjection;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B1E0", Offset = "0x72B1E0")]
		public Transform motionTarget;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B218", Offset = "0x72B218")]
		public Color effectColor;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B250", Offset = "0x72B250")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B250", Offset = "0x72B250")]
		public float effectCoverage;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B2A4", Offset = "0x72B2A4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B2A4", Offset = "0x72B2A4")]
		public float effectFeather;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float effectDelta;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Cubemap effectSkybox;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool applyColorToBackground;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B2F8", Offset = "0x72B2F8")]
		public bool useAngularVelocity;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B330", Offset = "0x72B330")]
		public float angularVelocityStrength;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float angularVelocityMin;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float angularVelocityMax;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float angularVelocitySmoothing;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B348", Offset = "0x72B348")]
		public bool useAcceleration;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B380", Offset = "0x72B380")]
		public float accelerationStrength;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float accelerationMin;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float accelerationMax;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float accelerationSmoothing;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B398", Offset = "0x72B398")]
		public bool useVelocity;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B3D0", Offset = "0x72B3D0")]
		public float velocityStrength;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float velocityMin;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float velocityMax;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float velocitySmoothing;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B3E8", Offset = "0x72B3E8")]
		public Transform motionEffectTarget;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B420", Offset = "0x72B420")]
		public bool useCounterMotion;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B458", Offset = "0x72B458")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B458", Offset = "0x72B458")]
		public float counterRotationStrength;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B4AC", Offset = "0x72B4AC")]
		public Vector3 counterRotationPerAxis;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B4E4", Offset = "0x72B4E4")]
		public bool useArtificialTilt;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B51C", Offset = "0x72B51C")]
		public float tiltStrength;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B554", Offset = "0x72B554")]
		public Vector2 tiltMaxAngles;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B58C", Offset = "0x72B58C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B58C", Offset = "0x72B58C")]
		public float tiltSmoothTime;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B5E0", Offset = "0x72B5E0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B5E0", Offset = "0x72B5E0")]
		public int framerateDivision;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public bool divideTranslation;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xED")]
		public bool divideRotation;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Quaternion _lastRot;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Vector3 _lastFwd;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private Vector3 _lastPos;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float _lastSpeed;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Vector3 _lastVel;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Quaternion _cmRot;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float _avSmoothed;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private float _avSlew;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private float _speedSmoothed;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private float _speedSlew;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private float _accelSmoothed;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private float _accelSlew;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Transform _prevMotionEffectTarget;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private bool _prevUseTilt;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private Vector3 _tiltAccelSmoothed;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Vector3 _tiltAccelSlew;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private Angle3 _tiltInit;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private int _lastFpsDivision;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private Vector3 _mfxTgtLocalPosInit;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Quaternion _mfxTgtLocalRotInit;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		protected Camera _cam;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		protected bool _hasDrawnThisFrame;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private Vector3 _fpsPosition;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private Quaternion _fpsRotation;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private float _lastFx;

		[Token(Token = "0x170000AE")]
		public bool usingMotionEffectTarget
		{
			[Token(Token = "0x6000979")]
			[Address(RVA = "0xDDD358", Offset = "0xDDD358", VA = "0xDDD358")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0xDDD378", Offset = "0xDDD378", VA = "0xDDD378", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0xDDD4F8", Offset = "0xDDD4F8", VA = "0xDDD4F8", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0xDDD56C", Offset = "0xDDD56C", VA = "0xDDD56C")]
		protected void ApplyPresetBase(TunnellingPresetBase p)
		{
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0xDDD98C", Offset = "0xDDD98C", VA = "0xDDD98C")]
		protected void FillMaskBuffer(CommandBuffer cb, List<Renderer> rs, Material m)
		{
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0xDDD4FC", Offset = "0xDDD4FC", VA = "0xDDD4FC")]
		protected void ResetMotion()
		{
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0xDDDB5C", Offset = "0xDDDB5C", VA = "0xDDDB5C", Slot = "6")]
		public virtual void ResetCounterMotion()
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0xDDDBAC", Offset = "0xDDDBAC", VA = "0xDDDBAC")]
		private float RemapRadius(float radius)
		{
			return default(float);
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xDDDBC0", Offset = "0xDDDBC0", VA = "0xDDDBC0")]
		protected float CalculateMotion(float dT)
		{
			return default(float);
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0xDDE528", Offset = "0xDDE528", VA = "0xDDE528")]
		public static Vector3 SmoothDampAngle(Vector3 current, Vector3 target, ref Vector3 vel, float smoothTime, float maxSpeed, float dT)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xDDE628", Offset = "0xDDE628", VA = "0xDDE628", Slot = "7")]
		protected virtual void UpdateCounterMotion(Vector3 deltaPos, Quaternion deltaRot)
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xDDE68C", Offset = "0xDDE68C", VA = "0xDDE68C")]
		protected Quaternion GetCounterRotationDelta(Quaternion deltaRot)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0xDDE728", Offset = "0xDDE728", VA = "0xDDE728")]
		protected void UpdateEyeMatrices()
		{
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0xDDEC44", Offset = "0xDDEC44", VA = "0xDDEC44", Slot = "8")]
		protected virtual void CorrectEyeMatrices(Matrix4x4[] eyePrj, Matrix4x4[] eyeToWorld)
		{
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xDDEC48", Offset = "0xDDEC48", VA = "0xDDEC48")]
		protected void ApplyEyeMatrices(Material m)
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0xDDEC94", Offset = "0xDDEC94", VA = "0xDDEC94")]
		protected TunnellingBase()
		{
		}
	}
	[Token(Token = "0x2000209")]
	public struct Angle
	{
		[Token(Token = "0x200020A")]
		public enum AngleType
		{
			[Token(Token = "0x4000AF2")]
			ANGLE,
			[Token(Token = "0x4000AF3")]
			ACUTE,
			[Token(Token = "0x4000AF4")]
			REFLEX
		}

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float _angle;

		[Token(Token = "0x170000AF")]
		public float angle
		{
			[Token(Token = "0x6000989")]
			[Address(RVA = "0x1021A60", Offset = "0x1021A60", VA = "0x1021A60")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000B0")]
		public float acute
		{
			[Token(Token = "0x600098A")]
			[Address(RVA = "0x1021A68", Offset = "0x1021A68", VA = "0x1021A68")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000B1")]
		public float reflex
		{
			[Token(Token = "0x600098B")]
			[Address(RVA = "0x1021B20", Offset = "0x1021B20", VA = "0x1021B20")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x1021B60", Offset = "0x1021B60", VA = "0x1021B60")]
		public Angle(float a)
		{
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x1021B90", Offset = "0x1021B90", VA = "0x1021B90")]
		public Angle(Angle a)
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x1021BC0", Offset = "0x1021BC0", VA = "0x1021BC0")]
		public float ToFloat(AngleType type)
		{
			return default(float);
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0x1021AA8", Offset = "0x1021AA8", VA = "0x1021AA8")]
		public static float ToAngle(float a, AngleType type)
		{
			return default(float);
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0x1021BCC", Offset = "0x1021BCC", VA = "0x1021BCC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0x1021C54", Offset = "0x1021C54", VA = "0x1021C54")]
		public static bool operator <(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0x1021C60", Offset = "0x1021C60", VA = "0x1021C60")]
		public static bool operator >(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0x1021C6C", Offset = "0x1021C6C", VA = "0x1021C6C")]
		public static bool operator <=(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x1021C78", Offset = "0x1021C78", VA = "0x1021C78")]
		public static bool operator >=(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x1021C84", Offset = "0x1021C84", VA = "0x1021C84")]
		public static Angle operator +(Angle a, Angle b)
		{
			return default(Angle);
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x1021C9C", Offset = "0x1021C9C", VA = "0x1021C9C")]
		public static Angle operator -(Angle a, Angle b)
		{
			return default(Angle);
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x1021CB4", Offset = "0x1021CB4", VA = "0x1021CB4")]
		public static bool operator ==(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0x1021CC0", Offset = "0x1021CC0", VA = "0x1021CC0")]
		public static bool operator !=(Angle a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x1021CCC", Offset = "0x1021CCC", VA = "0x1021CCC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0x1021D90", Offset = "0x1021D90", VA = "0x1021D90", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0x1021D98", Offset = "0x1021D98", VA = "0x1021D98")]
		public static bool operator <(Angle a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0x1021DD4", Offset = "0x1021DD4", VA = "0x1021DD4")]
		public static bool operator >(Angle a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0x1021E10", Offset = "0x1021E10", VA = "0x1021E10")]
		public static bool operator <=(Angle a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0x1021E4C", Offset = "0x1021E4C", VA = "0x1021E4C")]
		public static bool operator >=(Angle a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0x1021E88", Offset = "0x1021E88", VA = "0x1021E88")]
		public static Angle operator +(Angle a, float b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x1021EC8", Offset = "0x1021EC8", VA = "0x1021EC8")]
		public static Angle operator -(Angle a, float b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x1021F08", Offset = "0x1021F08", VA = "0x1021F08")]
		public static Angle operator *(Angle a, float b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x1021F20", Offset = "0x1021F20", VA = "0x1021F20")]
		public static Angle operator /(Angle a, float b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x1021F38", Offset = "0x1021F38", VA = "0x1021F38")]
		public static bool operator <(float a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x1021F5C", Offset = "0x1021F5C", VA = "0x1021F5C")]
		public static bool operator >(float a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x1021F80", Offset = "0x1021F80", VA = "0x1021F80")]
		public static bool operator <=(float a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x1021FA4", Offset = "0x1021FA4", VA = "0x1021FA4")]
		public static bool operator >=(float a, Angle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x1021FC8", Offset = "0x1021FC8", VA = "0x1021FC8")]
		public static Angle operator +(float a, Angle b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x1022004", Offset = "0x1022004", VA = "0x1022004")]
		public static Angle operator -(float a, Angle b)
		{
			return default(Angle);
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x1022040", Offset = "0x1022040", VA = "0x1022040")]
		public static implicit operator Angle(float f)
		{
			return default(Angle);
		}
	}
	[Token(Token = "0x200020B")]
	public struct Angle3
	{
		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Angle x;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Angle y;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Angle z;

		[Token(Token = "0x170000B2")]
		public Vector3 eulerAngles
		{
			[Token(Token = "0x60009AA")]
			[Address(RVA = "0x1022050", Offset = "0x1022050", VA = "0x1022050")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000B3")]
		public Vector3 eulerAcute
		{
			[Token(Token = "0x60009AB")]
			[Address(RVA = "0x102205C", Offset = "0x102205C", VA = "0x102205C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000B4")]
		public Vector3 eulerReflex
		{
			[Token(Token = "0x60009AC")]
			[Address(RVA = "0x102210C", Offset = "0x102210C", VA = "0x102210C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000B5")]
		public Angle angle
		{
			[Token(Token = "0x60009AD")]
			[Address(RVA = "0x10221BC", Offset = "0x10221BC", VA = "0x10221BC")]
			get
			{
				return default(Angle);
			}
		}

		[Token(Token = "0x170000B6")]
		public Vector3 axis
		{
			[Token(Token = "0x60009AE")]
			[Address(RVA = "0x1022264", Offset = "0x1022264", VA = "0x1022264")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x102229C", Offset = "0x102229C", VA = "0x102229C")]
		public Angle3(float x, float y, float z)
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x1022310", Offset = "0x1022310", VA = "0x1022310")]
		public Angle3(Angle x, Angle y, Angle z)
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x1022314", Offset = "0x1022314", VA = "0x1022314")]
		public Angle3(Vector3 euler)
		{
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0x1022318", Offset = "0x1022318", VA = "0x1022318")]
		public Angle3(Quaternion rotation)
		{
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x10221F0", Offset = "0x10221F0", VA = "0x10221F0")]
		public void ToAxisAngle(out Vector3 axis, out Angle angle)
		{
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x1022358", Offset = "0x1022358", VA = "0x1022358")]
		public Vector3 ToEuler(Angle.AngleType type)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x10223C0", Offset = "0x10223C0", VA = "0x10223C0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x1022488", Offset = "0x1022488", VA = "0x1022488")]
		public static Angle3 operator +(Angle3 a, Angle3 b)
		{
			return default(Angle3);
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x102252C", Offset = "0x102252C", VA = "0x102252C")]
		public static Angle3 operator -(Angle3 a, Angle3 b)
		{
			return default(Angle3);
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x10225D0", Offset = "0x10225D0", VA = "0x10225D0")]
		public static Angle3 operator *(Angle3 a, float b)
		{
			return default(Angle3);
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x1022670", Offset = "0x1022670", VA = "0x1022670")]
		public static bool operator ==(Angle3 a, Angle3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x1022694", Offset = "0x1022694", VA = "0x1022694")]
		public static bool operator !=(Angle3 a, Angle3 b)
		{
			return default(bool);
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x10226B8", Offset = "0x10226B8", VA = "0x10226B8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0x10227A8", Offset = "0x10227A8", VA = "0x10227A8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0x10227DC", Offset = "0x10227DC", VA = "0x10227DC")]
		public static implicit operator Angle3(Vector3 v)
		{
			return default(Angle3);
		}
	}
	[Token(Token = "0x200020C")]
	public abstract class TunnellingImageBase : TunnellingBase
	{
		[Token(Token = "0x200020D")]
		public enum BlurKernel
		{
			[Token(Token = "0x4000B54")]
			FIVE,
			[Token(Token = "0x4000B55")]
			NINE,
			[Token(Token = "0x4000B56")]
			THIRTEEN
		}

		[Token(Token = "0x200020E")]
		public enum CounterVelocityMode
		{
			[Token(Token = "0x4000B58")]
			OFF,
			[Token(Token = "0x4000B59")]
			SHADER,
			[Token(Token = "0x4000B5A")]
			REAL
		}

		[Token(Token = "0x4000AF8")]
		private const string KEYWORD_MASK = "TUNNEL_MASK";

		[Token(Token = "0x4000AF9")]
		private const string KEYWORD_CONSTANT = "TUNNEL_CONSTANT";

		[Token(Token = "0x4000AFA")]
		private const string KEYWORD_INVERT = "TUNNEL_INVERT_MASK";

		[Token(Token = "0x4000AFB")]
		private const string KEYWORD_BLUR = "TUNNEL_BLUR";

		[Token(Token = "0x4000AFC")]
		private const string PATH_TUNNELSHADER = "Tunnelling";

		[Token(Token = "0x4000AFD")]
		private const string PATH_MASKSHADER = "Mask";

		[Token(Token = "0x4000AFE")]
		private const string PATH_WINDOWSHADER = "Window";

		[Token(Token = "0x4000AFF")]
		private const string PATH_COPYSHADER = "BlitA";

		[Token(Token = "0x4000B00")]
		private const string PATH_BLURSHADER = "SeparableBlur";

		[Token(Token = "0x4000B01")]
		private const string PATH_IRISSHADER = "TunnellingVertexZ";

		[Token(Token = "0x4000B02")]
		private const string PATH_SKYSPHERESHADER = "Skysphere";

		[Token(Token = "0x4000B03")]
		private const string PATH_SKYSPHEREMESH = "Skysphere";

		[Token(Token = "0x4000B04")]
		private const string PROP_FEATHER = "_Feather";

		[Token(Token = "0x4000B05")]
		private const string PROP_BKGRT = "_BkgTex";

		[Token(Token = "0x4000B06")]
		private const string PROP_MASKRT = "_MaskTex";

		[Token(Token = "0x4000B07")]
		private const string PROP_BLUR = "_Blur";

		[Token(Token = "0x4000B08")]
		private const string PROP_OVERLAY = "_Overlay";

		[Token(Token = "0x4000B09")]
		private const string PROP_BLUR_OFFSETS = "_Offsets";

		[Token(Token = "0x4000B0A")]
		private const float BLUR_OFFSET_1 = 1.3333334f;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float[] BLUR_OFFSETS_9;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly float[] BLUR_OFFSETS_13;

		[Token(Token = "0x4000B0D")]
		public const string GLOBAL_PROP_WORLD2CAGE = "_VRTP_WorldToCage";

		[Token(Token = "0x4000B0E")]
		public const string GLOBAL_PROP_WORLD2CAGE_NORMAL = "_VRTP_WorldToCageNormal";

		[Token(Token = "0x4000B0F")]
		public const string GLOBAL_PROP_CAGEPOS = "_VRTP_CagePos";

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72B638", Offset = "0x72B638")]
		private static TunnellingImageBase <instance>k__BackingField;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B648", Offset = "0x72B648")]
		public BackgroundMode backgroundMode;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B680", Offset = "0x72B680")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B680", Offset = "0x72B680")]
		public float effectOverlay;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[SerializeField]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B6D4", Offset = "0x72B6D4")]
		private GameObject _cageParent;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B720", Offset = "0x72B720")]
		public int cageDownsample;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public MSAA cageAntiAliasing;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public bool cageUpdateEveryFrame;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B738", Offset = "0x72B738")]
		public float cageFogDensity;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B758", Offset = "0x72B758")]
		public float cageFogPower;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B770", Offset = "0x72B770")]
		public float cageFogBlend;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public MaskMode maskMode;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B788", Offset = "0x72B788")]
		public int blurDownsample;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B7A0", Offset = "0x72B7A0")]
		public float blurDistance;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B7B8", Offset = "0x72B7B8")]
		public int blurPasses;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public BlurKernel blurSamples;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B7D0", Offset = "0x72B7D0")]
		public bool irisZRejection;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public CounterVelocityMode counterVelocityMode;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B808", Offset = "0x72B808")]
		public float counterVelocityResetDistance;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B840", Offset = "0x72B840")]
		public float counterVelocityResetTime;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B878", Offset = "0x72B878")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B878", Offset = "0x72B878")]
		public float counterVelocityStrength;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B8CC", Offset = "0x72B8CC")]
		public Vector3 counterVelocityPerAxis;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private CommandBuffer _maskCmd;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private Material _matTunnel;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private Material _matMask;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private Material _matWindow;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private Material _matCopyAlpha;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private Material _matBlur;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private Material _matSkysphere;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private Mesh _meshSkysphere;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private MeshRenderer[] _cageMrs;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private List<MeshFilter> _cageMfs;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private List<Renderer> _maskObjects;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private RenderTexture _cageRt;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private RenderTexture _maskRt;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private RenderTexture _blurRt0;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private RenderTexture _blurRt1;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private int _rtX;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		private int _rtY;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private int _rtA;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private CommandBuffer _irisCmd;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		private Material _matIris;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private Mesh _meshIris;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private Vector4[] _blurOffsets;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private MaskMode _lastMaskMode;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
		private MSAA _lastCageMsaa;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private bool _camHasMaskBuffer;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E4")]
		private int _lastCageDownsample;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		private int _lastBlurDownsample;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
		private float _lastBlurRadius;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		private BlurKernel _lastBlurKernel;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F4")]
		private bool _wasDrawingIrisEarly;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F5")]
		private bool _camHasIrisBuffer;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		private CounterVelocityMode _lastCvMode;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2FC")]
		private Vector3 _cmPos;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private Vector3 _cageInitialPosLocal;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
		private float _timeToResetCounterVelocity;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private int _propColor;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		private int _propBkgRt;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private int _propMaskRt;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x324")]
		private int _propSkybox;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		private int _propOverlay;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
		private int _propBlur;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		private int _propBlurOffsets;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x334")]
		private int _globPropWorld2Cage;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		private int _globPropWorld2CageNormal;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33C")]
		private int _globPropCagePos;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private float lastMotion;

		[Token(Token = "0x170000B7")]
		public static TunnellingImageBase instance
		{
			[Token(Token = "0x60009BE")]
			[Address(RVA = "0xDDEDB0", Offset = "0xDDEDB0", VA = "0xDDEDB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730A50", Offset = "0x730A50")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009BF")]
			[Address(RVA = "0xDDEE14", Offset = "0xDDEE14", VA = "0xDDEE14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730A60", Offset = "0x730A60")]
			private set
			{
			}
		}

		[Token(Token = "0x170000B8")]
		public bool usingMask
		{
			[Token(Token = "0x60009C0")]
			[Address(RVA = "0xDDEE80", Offset = "0xDDEE80", VA = "0xDDEE80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B9")]
		public bool usingCage
		{
			[Token(Token = "0x60009C1")]
			[Address(RVA = "0xDDEE90", Offset = "0xDDEE90", VA = "0xDDEE90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BA")]
		private bool _usingCageRt
		{
			[Token(Token = "0x60009C2")]
			[Address(RVA = "0xDDEEB4", Offset = "0xDDEEB4", VA = "0xDDEEB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BB")]
		private bool _canDrawIris
		{
			[Token(Token = "0x60009C3")]
			[Address(RVA = "0xDDEEC8", Offset = "0xDDEEC8", VA = "0xDDEEC8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BC")]
		private bool _drawIris
		{
			[Token(Token = "0x60009C4")]
			[Address(RVA = "0xDDEEFC", Offset = "0xDDEEFC", VA = "0xDDEEFC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BD")]
		protected abstract CameraEvent _maskCmdEvt
		{
			[Token(Token = "0x60009C5")]
			get;
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0xDDEF38", Offset = "0xDDEF38", VA = "0xDDEF38", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xDDF91C", Offset = "0xDDF91C", VA = "0xDDF91C", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0xDDFCE8", Offset = "0xDDFCE8", VA = "0xDDFCE8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0xDDFD6C", Offset = "0xDDFD6C", VA = "0xDDFD6C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0xDDFF8C", Offset = "0xDDFF8C", VA = "0xDDFF8C")]
		private void ReleaseRT(ref RenderTexture rt)
		{
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0xDE002C", Offset = "0xDE002C", VA = "0xDE002C")]
		public void AddObjectToMask(Renderer r, bool includeChildren = false)
		{
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0xDE0310", Offset = "0xDE0310", VA = "0xDE0310")]
		public void RemoveObjectFromMask(Renderer r, bool includeChildren = false)
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0xDDF9AC", Offset = "0xDDF9AC", VA = "0xDDF9AC")]
		public void UpdateCage()
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0xDE0408", Offset = "0xDE0408", VA = "0xDE0408", Slot = "6")]
		public override void ResetCounterMotion()
		{
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xDE04CC", Offset = "0xDE04CC", VA = "0xDE04CC")]
		public void ApplyPreset(TunnellingPreset p)
		{
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0xDE0900", Offset = "0xDE0900", VA = "0xDE0900")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0xDE0F74", Offset = "0xDE0F74", VA = "0xDE0F74")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xDDCCC8", Offset = "0xDDCCC8", VA = "0xDDCCC8")]
		protected void Draw(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xDE1774", Offset = "0xDE1774", VA = "0xDE1774", Slot = "8")]
		protected override void CorrectEyeMatrices(Matrix4x4[] eyePrj, Matrix4x4[] eyeToWorld)
		{
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0xDE17F4", Offset = "0xDE17F4", VA = "0xDE17F4", Slot = "7")]
		protected override void UpdateCounterMotion(Vector3 deltaPos, Quaternion deltaRot)
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0xDDF644", Offset = "0xDDF644", VA = "0xDDF644")]
		private void UpdateKeywords()
		{
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xDE0C88", Offset = "0xDE0C88", VA = "0xDE0C88")]
		private void UpdateBlurKernel()
		{
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xDE19BC", Offset = "0xDE19BC", VA = "0xDE19BC")]
		private int GetMsaa(MSAA m, int srcMsaa)
		{
			return default(int);
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0xDE1114", Offset = "0xDE1114", VA = "0xDE1114")]
		private void UpdateRenderTextures(int srcX, int srcY, int srcMsaa)
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xDE0124", Offset = "0xDE0124", VA = "0xDE0124")]
		private void ResetMaskCommandBuffer()
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0xDDFC20", Offset = "0xDDFC20", VA = "0xDDFC20")]
		private void ToggleMaskCommandBuffer(bool on)
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xDDFC90", Offset = "0xDDFC90", VA = "0xDDFC90")]
		private void ToggleIrisCommandBuffer(bool on)
		{
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xDDD20C", Offset = "0xDDD20C", VA = "0xDDD20C")]
		protected TunnellingImageBase()
		{
		}
	}
	[Token(Token = "0x200020F")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x7288B8", Offset = "0x7288B8")]
	public class TunnellingMaskObject : MonoBehaviour
	{
		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool autoAddChildren;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer _r;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _started;

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xDE1AD0", Offset = "0xDE1AD0", VA = "0xDE1AD0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xDE1B2C", Offset = "0xDE1B2C", VA = "0xDE1B2C")]
		private void Start()
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0xDE1B38", Offset = "0xDE1B38", VA = "0xDE1B38")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xDE1CF8", Offset = "0xDE1CF8", VA = "0xDE1CF8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xDE1EA0", Offset = "0xDE1EA0", VA = "0xDE1EA0")]
		public TunnellingMaskObject()
		{
		}
	}
	[Token(Token = "0x2000210")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x728918", Offset = "0x728918")]
	public class TunnellingMaskObjectMobile : MonoBehaviour
	{
		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool autoAddChildren;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Renderer _r;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _started;

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xDE1EA8", Offset = "0xDE1EA8", VA = "0xDE1EA8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xDE1F04", Offset = "0xDE1F04", VA = "0xDE1F04")]
		private void Start()
		{
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xDE1F10", Offset = "0xDE1F10", VA = "0xDE1F10")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xDE249C", Offset = "0xDE249C", VA = "0xDE249C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xDE2784", Offset = "0xDE2784", VA = "0xDE2784")]
		public TunnellingMaskObjectMobile()
		{
		}
	}
	[Token(Token = "0x2000211")]
	public class TunnellingMobile : TunnellingBase
	{
		[Token(Token = "0x4000B61")]
		public const string GLOBAL_PROP_STENCILREF = "_VRTP_Stencil_Ref";

		[Token(Token = "0x4000B62")]
		public const string GLOBAL_PROP_STENCILMASK = "_VRTP_Stencil_Mask";

		[Token(Token = "0x4000B63")]
		public const string GLOBAL_PROP_STENCILBIAS = "_VRTP_Stencil_Bias";

		[Token(Token = "0x4000B64")]
		private const string PROP_WRITEZ = "_WriteZ";

		[Token(Token = "0x4000B65")]
		private const string PATH_SHADER = "TunnellingVertex";

		[Token(Token = "0x4000B66")]
		private const string PATH_STENCILSHADER = "TunnellingMobileStencil";

		[Token(Token = "0x4000B67")]
		private const CameraEvent CEVENT_FX = CameraEvent.BeforeImageEffects;

		[Token(Token = "0x4000B68")]
		private const CameraEvent CEVENT_Z = CameraEvent.BeforeForwardOpaque;

		[Token(Token = "0x4000B69")]
		private const int RQUEUE_FIRST = 1;

		[Token(Token = "0x4000B6A")]
		private const int RQUEUE_MASK = 2499;

		[Token(Token = "0x4000B6B")]
		private const int RQUEUE_OPAQUE = 2501;

		[Token(Token = "0x4000B6C")]
		private const int RQUEUE_LAST = 5000;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72B904", Offset = "0x72B904")]
		private static TunnellingMobile <instance>k__BackingField;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material _stencilMat;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B914", Offset = "0x72B914")]
		public bool drawSkybox;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CD")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B94C", Offset = "0x72B94C")]
		public bool useMask;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CE")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B984", Offset = "0x72B984")]
		public bool drawBeforeTransparent;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72B9BC", Offset = "0x72B9BC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72B9BC", Offset = "0x72B9BC")]
		public int stencilReference;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72BA14", Offset = "0x72BA14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72BA14", Offset = "0x72BA14")]
		public int stencilMask;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72BA6C", Offset = "0x72BA6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72BA6C", Offset = "0x72BA6C")]
		public float stencilBias;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private int _propColor;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private int _propSkybox;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private int _propWriteZ;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private int _globPropStencilRef;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private int _globPropStencilMask;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private int _globPropStencilBias;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Material _irisMatOuter;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Material _irisMatInner;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Mesh _irisMesh;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Dictionary<Renderer, MeshFilter> _maskObjects;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Stack<Mesh> _skinnedMeshPool;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Stack<Mesh> _skinnedMeshesRendering;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private List<UnityEngine.Object> _toDestroy;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private List<MeshRenderer> _tempMeshChildren;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private List<SkinnedMeshRenderer> _tempSkinnedMeshChildren;

		[Token(Token = "0x170000BE")]
		public static TunnellingMobile instance
		{
			[Token(Token = "0x60009E8")]
			[Address(RVA = "0xDE278C", Offset = "0xDE278C", VA = "0xDE278C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730A70", Offset = "0x730A70")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009E9")]
			[Address(RVA = "0xDE27D8", Offset = "0xDE27D8", VA = "0xDE27D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730A80", Offset = "0x730A80")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BF")]
		public static Material stencilMat
		{
			[Token(Token = "0x60009EA")]
			[Address(RVA = "0xDE282C", Offset = "0xDE282C", VA = "0xDE282C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C0")]
		public bool irisZRejectionEnabled
		{
			[Token(Token = "0x60009EB")]
			[Address(RVA = "0xDE2934", Offset = "0xDE2934", VA = "0xDE2934")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xDE2954", Offset = "0xDE2954", VA = "0xDE2954")]
		public void ApplyPreset(TunnellingPresetMobile p)
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xDE2060", Offset = "0xDE2060", VA = "0xDE2060")]
		public void AddObjectToMask(Renderer r, bool includeChildren = false)
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xDE25D4", Offset = "0xDE25D4", VA = "0xDE25D4")]
		public void RemoveObjectFromMask(Renderer r, bool includeChildren = false)
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xDE2A0C", Offset = "0xDE2A0C", VA = "0xDE2A0C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xDE2DD4", Offset = "0xDE2DD4", VA = "0xDE2DD4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xDE31D4", Offset = "0xDE31D4", VA = "0xDE31D4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xDE395C", Offset = "0xDE395C", VA = "0xDE395C")]
		private void DrawIris(Material m, int submesh, int opaqueQueue, int camLayer)
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xDE3BEC", Offset = "0xDE3BEC", VA = "0xDE3BEC")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xDE3C20", Offset = "0xDE3C20", VA = "0xDE3C20")]
		public TunnellingMobile()
		{
		}
	}
	[Token(Token = "0x2000212")]
	public class TunnellingOpaque : TunnellingImageBase
	{
		[Token(Token = "0x170000C1")]
		protected override CameraEvent _maskCmdEvt
		{
			[Token(Token = "0x60009F5")]
			[Address(RVA = "0xDE3E10", Offset = "0xDE3E10", VA = "0xDE3E10", Slot = "9")]
			get
			{
				return default(CameraEvent);
			}
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0xDE3E18", Offset = "0xDE3E18", VA = "0xDE3E18")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture src, RenderTexture dest)
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xDE3E1C", Offset = "0xDE3E1C", VA = "0xDE3E1C")]
		public TunnellingOpaque()
		{
		}
	}
	[Token(Token = "0x2000213")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x728978", Offset = "0x728978")]
	public class TunnellingPreset : TunnellingPresetBase
	{
		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72BAC0", Offset = "0x72BAC0")]
		[SerializeField]
		private float _effectOverlay;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		private bool _overrideEffectOverlay;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private TunnellingBase.BackgroundMode _backgroundMode;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		private bool _overrideBackgroundMode;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72BB30", Offset = "0x72BB30")]
		private int _cageDownsample;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		private bool _overrideCageDownsample;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private TunnellingBase.MSAA _cageAntiAliasing;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		private bool _overrideCageAntiAliasing;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
		[SerializeField]
		private bool _cageUpdateEveryFrame;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBE")]
		[SerializeField]
		private bool _overrideCageUpdateEveryFrame;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72BBC0", Offset = "0x72BBC0")]
		private float _cageFogDensity;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private bool _overrideCageFogDensity;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72BC18", Offset = "0x72BC18")]
		[SerializeField]
		private float _cageFogPower;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private bool _overrideCageFogPower;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72BC68", Offset = "0x72BC68")]
		private float _cageFogBlend;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		private bool _overrideCageFogBlend;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TunnellingBase.MaskMode _maskMode;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private bool _overrideMaskMode;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72BCD8", Offset = "0x72BCD8")]
		private int _blurDownsample;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private bool _overrideBlurDownsample;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72BD28", Offset = "0x72BD28")]
		[SerializeField]
		private float _blurDistance;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		private bool _overrideBlurDistance;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72BD78", Offset = "0x72BD78")]
		private int _blurPasses;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		private bool _overrideBlurPasses;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private TunnellingImageBase.BlurKernel _blurSamples;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		private bool _overrideBlurSamples;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private TunnellingImageBase.CounterVelocityMode _counterVelocityMode;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		private bool _overrideCounterVelocityMode;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private float _counterVelocityResetDistance;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[SerializeField]
		private bool _overrideCounterVelocityResetDistance;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private float _counterVelocityResetTime;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[SerializeField]
		private bool _overrideCounterVelocityResetTime;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72BE48", Offset = "0x72BE48")]
		private float _counterVelocityStrength;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		private bool _overrideCounterVelocityStrength;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private Vector3 _counterVelocityPerAxis;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[SerializeField]
		private bool _overrideCounterVelocityPerAxis;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12D")]
		[SerializeField]
		private bool _irisZRejection;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12E")]
		[SerializeField]
		private bool _overrideIrisZRejection;

		[Token(Token = "0x170000C2")]
		public float effectOverlay
		{
			[Token(Token = "0x60009F8")]
			[Address(RVA = "0xDE3E7C", Offset = "0xDE3E7C", VA = "0xDE3E7C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000C3")]
		public bool overrideEffectOverlay
		{
			[Token(Token = "0x60009F9")]
			[Address(RVA = "0xDE3E84", Offset = "0xDE3E84", VA = "0xDE3E84")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C4")]
		public TunnellingBase.BackgroundMode backgroundMode
		{
			[Token(Token = "0x60009FA")]
			[Address(RVA = "0xDE3E8C", Offset = "0xDE3E8C", VA = "0xDE3E8C")]
			get
			{
				return default(TunnellingBase.BackgroundMode);
			}
		}

		[Token(Token = "0x170000C5")]
		public bool overrideBackgroundMode
		{
			[Token(Token = "0x60009FB")]
			[Address(RVA = "0xDE06C0", Offset = "0xDE06C0", VA = "0xDE06C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C6")]
		public int cageDownsample
		{
			[Token(Token = "0x60009FC")]
			[Address(RVA = "0xDE3E94", Offset = "0xDE3E94", VA = "0xDE3E94")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000C7")]
		public bool overrideCageDownsample
		{
			[Token(Token = "0x60009FD")]
			[Address(RVA = "0xDE06E0", Offset = "0xDE06E0", VA = "0xDE06E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C8")]
		public TunnellingBase.MSAA cageAntiAliasing
		{
			[Token(Token = "0x60009FE")]
			[Address(RVA = "0xDE3E9C", Offset = "0xDE3E9C", VA = "0xDE3E9C")]
			get
			{
				return default(TunnellingBase.MSAA);
			}
		}

		[Token(Token = "0x170000C9")]
		public bool overrideCageAntiAliasing
		{
			[Token(Token = "0x60009FF")]
			[Address(RVA = "0xDE0700", Offset = "0xDE0700", VA = "0xDE0700")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CA")]
		public bool cageUpdateEveryFrame
		{
			[Token(Token = "0x6000A00")]
			[Address(RVA = "0xDE3EA4", Offset = "0xDE3EA4", VA = "0xDE3EA4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CB")]
		public bool overrideCageUpdateEveryFrame
		{
			[Token(Token = "0x6000A01")]
			[Address(RVA = "0xDE0720", Offset = "0xDE0720", VA = "0xDE0720")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CC")]
		public float cageFogDensity
		{
			[Token(Token = "0x6000A02")]
			[Address(RVA = "0xDE3EAC", Offset = "0xDE3EAC", VA = "0xDE3EAC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000CD")]
		public bool overrideCageFogDensity
		{
			[Token(Token = "0x6000A03")]
			[Address(RVA = "0xDE0740", Offset = "0xDE0740", VA = "0xDE0740")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000CE")]
		public float cageFogPower
		{
			[Token(Token = "0x6000A04")]
			[Address(RVA = "0xDE3EB4", Offset = "0xDE3EB4", VA = "0xDE3EB4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000CF")]
		public bool overrideCageFogPower
		{
			[Token(Token = "0x6000A05")]
			[Address(RVA = "0xDE0760", Offset = "0xDE0760", VA = "0xDE0760")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D0")]
		public float cageFogBlend
		{
			[Token(Token = "0x6000A06")]
			[Address(RVA = "0xDE3EBC", Offset = "0xDE3EBC", VA = "0xDE3EBC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000D1")]
		public bool overrideCageFogBlend
		{
			[Token(Token = "0x6000A07")]
			[Address(RVA = "0xDE0780", Offset = "0xDE0780", VA = "0xDE0780")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D2")]
		public TunnellingBase.MaskMode maskMode
		{
			[Token(Token = "0x6000A08")]
			[Address(RVA = "0xDE3EC4", Offset = "0xDE3EC4", VA = "0xDE3EC4")]
			get
			{
				return default(TunnellingBase.MaskMode);
			}
		}

		[Token(Token = "0x170000D3")]
		public bool overrideMaskMode
		{
			[Token(Token = "0x6000A09")]
			[Address(RVA = "0xDE07A0", Offset = "0xDE07A0", VA = "0xDE07A0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D4")]
		public int blurDownsample
		{
			[Token(Token = "0x6000A0A")]
			[Address(RVA = "0xDE3ECC", Offset = "0xDE3ECC", VA = "0xDE3ECC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000D5")]
		public bool overrideBlurDownsample
		{
			[Token(Token = "0x6000A0B")]
			[Address(RVA = "0xDE07C0", Offset = "0xDE07C0", VA = "0xDE07C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D6")]
		public float blurDistance
		{
			[Token(Token = "0x6000A0C")]
			[Address(RVA = "0xDE3ED4", Offset = "0xDE3ED4", VA = "0xDE3ED4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000D7")]
		public bool overrideBlurDistance
		{
			[Token(Token = "0x6000A0D")]
			[Address(RVA = "0xDE07E0", Offset = "0xDE07E0", VA = "0xDE07E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D8")]
		public int blurPasses
		{
			[Token(Token = "0x6000A0E")]
			[Address(RVA = "0xDE3EDC", Offset = "0xDE3EDC", VA = "0xDE3EDC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000D9")]
		public bool overrideBlurPasses
		{
			[Token(Token = "0x6000A0F")]
			[Address(RVA = "0xDE0800", Offset = "0xDE0800", VA = "0xDE0800")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DA")]
		public TunnellingImageBase.BlurKernel blurSamples
		{
			[Token(Token = "0x6000A10")]
			[Address(RVA = "0xDE3EE4", Offset = "0xDE3EE4", VA = "0xDE3EE4")]
			get
			{
				return default(TunnellingImageBase.BlurKernel);
			}
		}

		[Token(Token = "0x170000DB")]
		public bool overrideBlurSamples
		{
			[Token(Token = "0x6000A11")]
			[Address(RVA = "0xDE0820", Offset = "0xDE0820", VA = "0xDE0820")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DC")]
		public TunnellingImageBase.CounterVelocityMode counterVelocityMode
		{
			[Token(Token = "0x6000A12")]
			[Address(RVA = "0xDE3EEC", Offset = "0xDE3EEC", VA = "0xDE3EEC")]
			get
			{
				return default(TunnellingImageBase.CounterVelocityMode);
			}
		}

		[Token(Token = "0x170000DD")]
		public bool overrideCounterVelocityMode
		{
			[Token(Token = "0x6000A13")]
			[Address(RVA = "0xDE0840", Offset = "0xDE0840", VA = "0xDE0840")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DE")]
		public float counterVelocityResetDistance
		{
			[Token(Token = "0x6000A14")]
			[Address(RVA = "0xDE3EF4", Offset = "0xDE3EF4", VA = "0xDE3EF4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000DF")]
		public bool overrideCounterVelocityResetDistance
		{
			[Token(Token = "0x6000A15")]
			[Address(RVA = "0xDE0860", Offset = "0xDE0860", VA = "0xDE0860")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E0")]
		public float counterVelocityResetTime
		{
			[Token(Token = "0x6000A16")]
			[Address(RVA = "0xDE3EFC", Offset = "0xDE3EFC", VA = "0xDE3EFC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E1")]
		public bool overrideCounterVelocityResetTime
		{
			[Token(Token = "0x6000A17")]
			[Address(RVA = "0xDE0880", Offset = "0xDE0880", VA = "0xDE0880")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E2")]
		public float counterVelocityStrength
		{
			[Token(Token = "0x6000A18")]
			[Address(RVA = "0xDE3F04", Offset = "0xDE3F04", VA = "0xDE3F04")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000E3")]
		public bool overrideCounterVelocityStrength
		{
			[Token(Token = "0x6000A19")]
			[Address(RVA = "0xDE08A0", Offset = "0xDE08A0", VA = "0xDE08A0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E4")]
		public Vector3 counterVelocityPerAxis
		{
			[Token(Token = "0x6000A1A")]
			[Address(RVA = "0xDE3F0C", Offset = "0xDE3F0C", VA = "0xDE3F0C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000E5")]
		public bool overrideCounterVelocityPerAxis
		{
			[Token(Token = "0x6000A1B")]
			[Address(RVA = "0xDE08C0", Offset = "0xDE08C0", VA = "0xDE08C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E6")]
		public bool irisZRejection
		{
			[Token(Token = "0x6000A1C")]
			[Address(RVA = "0xDE3F1C", Offset = "0xDE3F1C", VA = "0xDE3F1C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E7")]
		public bool overrideIrisZRejection
		{
			[Token(Token = "0x6000A1D")]
			[Address(RVA = "0xDE08E0", Offset = "0xDE08E0", VA = "0xDE08E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xDE3F24", Offset = "0xDE3F24", VA = "0xDE3F24")]
		public TunnellingPreset()
		{
		}
	}
	[Token(Token = "0x2000214")]
	public abstract class TunnellingPresetBase : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x2000215")]
		public class MotionSettings
		{
			[Token(Token = "0x4000BC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			private bool _use;

			[Token(Token = "0x4000BCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[SerializeField]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72C19C", Offset = "0x72C19C")]
			private float _strength;

			[Token(Token = "0x4000BCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private float _min;

			[Token(Token = "0x4000BCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[SerializeField]
			private float _max;

			[Token(Token = "0x4000BCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private float _smoothing;

			[Token(Token = "0x17000107")]
			public bool use
			{
				[Token(Token = "0x6000A3F")]
				[Address(RVA = "0x1B208E0", Offset = "0x1B208E0", VA = "0x1B208E0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000108")]
			public float strength
			{
				[Token(Token = "0x6000A40")]
				[Address(RVA = "0x1B208E8", Offset = "0x1B208E8", VA = "0x1B208E8")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000109")]
			public float min
			{
				[Token(Token = "0x6000A41")]
				[Address(RVA = "0x1B208F0", Offset = "0x1B208F0", VA = "0x1B208F0")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700010A")]
			public float max
			{
				[Token(Token = "0x6000A42")]
				[Address(RVA = "0x1B208F8", Offset = "0x1B208F8", VA = "0x1B208F8")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700010B")]
			public float smoothing
			{
				[Token(Token = "0x6000A43")]
				[Address(RVA = "0x1B20900", Offset = "0x1B20900", VA = "0x1B20900")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6000A44")]
			[Address(RVA = "0x1B20908", Offset = "0x1B20908", VA = "0x1B20908")]
			public MotionSettings()
			{
			}
		}

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool _overrideAll;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72BEE8", Offset = "0x72BEE8")]
		[SerializeField]
		private float _effectCoverage;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool _overrideEffectCoverage;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Color _effectColor;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private bool _overrideEffectColor;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72BF58", Offset = "0x72BF58")]
		[SerializeField]
		private float _effectFeather;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private bool _overrideEffectFeather;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[SerializeField]
		private bool _applyColorToBackground;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		[SerializeField]
		private bool _overrideApplyColorToBackground;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Cubemap _skybox;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private bool _overrideSkybox;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private MotionSettings _angularVelocity;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private bool _overrideAngularVelocity;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private MotionSettings _acceleration;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private bool _overrideAcceleration;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private MotionSettings _velocity;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _overrideVelocity;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[SerializeField]
		private bool _useCounterMotion;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		[SerializeField]
		private bool _overrideUseCounterMotion;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72C068", Offset = "0x72C068")]
		private float _counterRotationStrength;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private bool _overrideCounterRotationStrength;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[SerializeField]
		private Vector3 _counterRotationPerAxis;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private bool _overrideCounterRotationPerAxis;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		[SerializeField]
		private bool _useArtificialTilt;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		[SerializeField]
		private bool _overrideUseArtificialTilt;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72C0F8", Offset = "0x72C0F8")]
		private int _framerateDivision;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private bool _overrideFramerateDivision;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		[SerializeField]
		private bool _divideTranslation;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9A")]
		[SerializeField]
		private bool _overrideDivideTranslation;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9B")]
		[SerializeField]
		private bool _divideRotation;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[SerializeField]
		private bool _overrideDivideRotation;

		[Token(Token = "0x170000E8")]
		protected bool overrideAll
		{
			[Token(Token = "0x6000A1F")]
			[Address(RVA = "0xDE4084", Offset = "0xDE4084", VA = "0xDE4084")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E9")]
		public float effectCoverage
		{
			[Token(Token = "0x6000A20")]
			[Address(RVA = "0xDE408C", Offset = "0xDE408C", VA = "0xDE408C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000EA")]
		public bool overrideEffectCoverage
		{
			[Token(Token = "0x6000A21")]
			[Address(RVA = "0xDDD7CC", Offset = "0xDDD7CC", VA = "0xDDD7CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000EB")]
		public Color effectColor
		{
			[Token(Token = "0x6000A22")]
			[Address(RVA = "0xDE4094", Offset = "0xDE4094", VA = "0xDE4094")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x170000EC")]
		public bool overrideEffectColor
		{
			[Token(Token = "0x6000A23")]
			[Address(RVA = "0xDDD7EC", Offset = "0xDDD7EC", VA = "0xDDD7EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000ED")]
		public float effectFeather
		{
			[Token(Token = "0x6000A24")]
			[Address(RVA = "0xDE40A0", Offset = "0xDE40A0", VA = "0xDE40A0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000EE")]
		public bool overrideEffectFeather
		{
			[Token(Token = "0x6000A25")]
			[Address(RVA = "0xDDD80C", Offset = "0xDDD80C", VA = "0xDDD80C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000EF")]
		public bool applyColorToBackground
		{
			[Token(Token = "0x6000A26")]
			[Address(RVA = "0xDE40A8", Offset = "0xDE40A8", VA = "0xDE40A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F0")]
		public bool overrideApplyColorToBackground
		{
			[Token(Token = "0x6000A27")]
			[Address(RVA = "0xDDD82C", Offset = "0xDDD82C", VA = "0xDDD82C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F1")]
		public Cubemap skybox
		{
			[Token(Token = "0x6000A28")]
			[Address(RVA = "0xDE40B0", Offset = "0xDE40B0", VA = "0xDE40B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F2")]
		public bool overrideSkybox
		{
			[Token(Token = "0x6000A29")]
			[Address(RVA = "0xDDD84C", Offset = "0xDDD84C", VA = "0xDDD84C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F3")]
		public MotionSettings angularVelocity
		{
			[Token(Token = "0x6000A2A")]
			[Address(RVA = "0xDE40B8", Offset = "0xDE40B8", VA = "0xDE40B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F4")]
		public bool overrideAngularVelocity
		{
			[Token(Token = "0x6000A2B")]
			[Address(RVA = "0xDDD86C", Offset = "0xDDD86C", VA = "0xDDD86C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F5")]
		public MotionSettings acceleration
		{
			[Token(Token = "0x6000A2C")]
			[Address(RVA = "0xDE40C0", Offset = "0xDE40C0", VA = "0xDE40C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F6")]
		public bool overrideAcceleration
		{
			[Token(Token = "0x6000A2D")]
			[Address(RVA = "0xDDD88C", Offset = "0xDDD88C", VA = "0xDDD88C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F7")]
		public MotionSettings velocity
		{
			[Token(Token = "0x6000A2E")]
			[Address(RVA = "0xDE40C8", Offset = "0xDE40C8", VA = "0xDE40C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F8")]
		public bool overrideVelocity
		{
			[Token(Token = "0x6000A2F")]
			[Address(RVA = "0xDDD8AC", Offset = "0xDDD8AC", VA = "0xDDD8AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F9")]
		public bool useCounterMotion
		{
			[Token(Token = "0x6000A30")]
			[Address(RVA = "0xDE40D0", Offset = "0xDE40D0", VA = "0xDE40D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FA")]
		public bool overrideUseCounterMotion
		{
			[Token(Token = "0x6000A31")]
			[Address(RVA = "0xDDD8CC", Offset = "0xDDD8CC", VA = "0xDDD8CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FB")]
		public float counterRotationStrength
		{
			[Token(Token = "0x6000A32")]
			[Address(RVA = "0xDE40D8", Offset = "0xDE40D8", VA = "0xDE40D8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000FC")]
		public bool overrideCounterRotationStrength
		{
			[Token(Token = "0x6000A33")]
			[Address(RVA = "0xDE40E0", Offset = "0xDE40E0", VA = "0xDE40E0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FD")]
		public Vector3 counterRotationPerAxis
		{
			[Token(Token = "0x6000A34")]
			[Address(RVA = "0xDE4100", Offset = "0xDE4100", VA = "0xDE4100")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000FE")]
		public bool overrideCounterRotationPerAxis
		{
			[Token(Token = "0x6000A35")]
			[Address(RVA = "0xDDD8EC", Offset = "0xDDD8EC", VA = "0xDDD8EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FF")]
		public bool useArtificialTilt
		{
			[Token(Token = "0x6000A36")]
			[Address(RVA = "0xDE410C", Offset = "0xDE410C", VA = "0xDE410C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000100")]
		public bool overrideUseArtificialTilt
		{
			[Token(Token = "0x6000A37")]
			[Address(RVA = "0xDDD90C", Offset = "0xDDD90C", VA = "0xDDD90C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000101")]
		public int framerateDivision
		{
			[Token(Token = "0x6000A38")]
			[Address(RVA = "0xDE4114", Offset = "0xDE4114", VA = "0xDE4114")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000102")]
		public bool overrideFramerateDivision
		{
			[Token(Token = "0x6000A39")]
			[Address(RVA = "0xDDD92C", Offset = "0xDDD92C", VA = "0xDDD92C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000103")]
		public bool divideTranslation
		{
			[Token(Token = "0x6000A3A")]
			[Address(RVA = "0xDE411C", Offset = "0xDE411C", VA = "0xDE411C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000104")]
		public bool overrideDivideTranslation
		{
			[Token(Token = "0x6000A3B")]
			[Address(RVA = "0xDDD94C", Offset = "0xDDD94C", VA = "0xDDD94C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000105")]
		public bool divideRotation
		{
			[Token(Token = "0x6000A3C")]
			[Address(RVA = "0xDE4124", Offset = "0xDE4124", VA = "0xDE4124")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000106")]
		public bool overrideDividerotation
		{
			[Token(Token = "0x6000A3D")]
			[Address(RVA = "0xDDD96C", Offset = "0xDDD96C", VA = "0xDDD96C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xDE3FDC", Offset = "0xDE3FDC", VA = "0xDE3FDC")]
		protected TunnellingPresetBase()
		{
		}
	}
	[Token(Token = "0x2000216")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0x7289C4", Offset = "0x7289C4")]
	public class TunnellingPresetMobile : TunnellingPresetBase
	{
		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		[SerializeField]
		private bool _drawSkybox;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
		[SerializeField]
		private bool _overrideDrawSkybox;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9F")]
		[SerializeField]
		private bool _drawBeforeTransparent;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private bool _overrideDrawBeforeTransparent;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		[SerializeField]
		private bool _useMask;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		[SerializeField]
		private bool _overrideUseMask;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72C26C", Offset = "0x72C26C")]
		private int _stencilReference;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private bool _overrideStencilReference;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72C2C0", Offset = "0x72C2C0")]
		private int _stencilMask;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private bool _overrideStencilMask;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72C314", Offset = "0x72C314")]
		private int _stencilBias;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private bool _overrideStencilBias;

		[Token(Token = "0x1700010C")]
		public bool drawSkybox
		{
			[Token(Token = "0x6000A45")]
			[Address(RVA = "0xDE412C", Offset = "0xDE412C", VA = "0xDE412C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010D")]
		public bool overrideDrawSkybox
		{
			[Token(Token = "0x6000A46")]
			[Address(RVA = "0xDE29EC", Offset = "0xDE29EC", VA = "0xDE29EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010E")]
		public bool drawBeforeTransparent
		{
			[Token(Token = "0x6000A47")]
			[Address(RVA = "0xDE4134", Offset = "0xDE4134", VA = "0xDE4134")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010F")]
		public bool overrideDrawBeforeTransparent
		{
			[Token(Token = "0x6000A48")]
			[Address(RVA = "0xDE413C", Offset = "0xDE413C", VA = "0xDE413C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000110")]
		public bool useMask
		{
			[Token(Token = "0x6000A49")]
			[Address(RVA = "0xDE4144", Offset = "0xDE4144", VA = "0xDE4144")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000111")]
		public bool overrideUseMask
		{
			[Token(Token = "0x6000A4A")]
			[Address(RVA = "0xDE414C", Offset = "0xDE414C", VA = "0xDE414C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000112")]
		public int stencilReference
		{
			[Token(Token = "0x6000A4B")]
			[Address(RVA = "0xDE4154", Offset = "0xDE4154", VA = "0xDE4154")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000113")]
		public bool overrideStencilReference
		{
			[Token(Token = "0x6000A4C")]
			[Address(RVA = "0xDE415C", Offset = "0xDE415C", VA = "0xDE415C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000114")]
		public int stencilMask
		{
			[Token(Token = "0x6000A4D")]
			[Address(RVA = "0xDE4164", Offset = "0xDE4164", VA = "0xDE4164")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000115")]
		public bool overrideStencilMask
		{
			[Token(Token = "0x6000A4E")]
			[Address(RVA = "0xDE416C", Offset = "0xDE416C", VA = "0xDE416C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000116")]
		public int stencilBias
		{
			[Token(Token = "0x6000A4F")]
			[Address(RVA = "0xDE4174", Offset = "0xDE4174", VA = "0xDE4174")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000117")]
		public bool overrideStencilBias
		{
			[Token(Token = "0x6000A50")]
			[Address(RVA = "0xDE417C", Offset = "0xDE417C", VA = "0xDE417C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xDE4184", Offset = "0xDE4184", VA = "0xDE4184")]
		public TunnellingPresetMobile()
		{
		}
	}
}
namespace Sigtrap.VrTunnellingPro.Examples
{
	[Token(Token = "0x2000217")]
	public class VRTP_ExampleMovement : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000218")]
		private struct Preset
		{
			[Token(Token = "0x4000BEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public KeyCode key;

			[Token(Token = "0x4000BED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public GameObject[] worldObjects;

			[Token(Token = "0x4000BEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TunnellingPreset postPreset;
		}

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool _disableModes;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _rotSensitivity;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _movSensitivity;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Cubemap[] _skyboxes;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject[] _cages;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Preset[] _modePresets;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int _currentMode;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool _hasWarnedInput;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Tunnelling _tunnelling;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CharacterController _char;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int _currentSkybox;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int _currentCage;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 _speedCurrent;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 _speedSlew;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private float _speedSmoothing;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float _rotCurrent;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float _rotSlew;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[SerializeField]
		private float _rotSmoothing;

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x9CD5C4", Offset = "0x9CD5C4", VA = "0x9CD5C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x9CD650", Offset = "0x9CD650", VA = "0x9CD650")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x9CDAAC", Offset = "0x9CDAAC", VA = "0x9CDAAC")]
		private void SetPreset(int i)
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x9CDC04", Offset = "0x9CDC04", VA = "0x9CDC04")]
		public VRTP_ExampleMovement()
		{
		}
	}
}
namespace Wilberforce.VAO
{
	[Token(Token = "0x2000219")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x728A14", Offset = "0x728A14")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x728A14", Offset = "0x728A14")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0x728A14", Offset = "0x728A14")]
	public class VAOEffect : VAOEffectCommandBuffer
	{
		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xDE8A08", Offset = "0xDE8A08", VA = "0xDE8A08")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xDE9864", Offset = "0xDE9864", VA = "0xDE9864")]
		public VAOEffect()
		{
		}
	}
	[Token(Token = "0x200021A")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0x728ACC", Offset = "0x728ACC")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x728ACC", Offset = "0x728ACC")]
	[ExecuteInEditMode]
	public class VAOEffectCommandBuffer : MonoBehaviour
	{
		[Token(Token = "0x200021B")]
		public enum EffectMode
		{
			[Token(Token = "0x4000C86")]
			Simple = 1,
			[Token(Token = "0x4000C87")]
			ColorTint,
			[Token(Token = "0x4000C88")]
			ColorBleed
		}

		[Token(Token = "0x200021C")]
		public enum LuminanceModeType
		{
			[Token(Token = "0x4000C8A")]
			Luma = 1,
			[Token(Token = "0x4000C8B")]
			HSVValue
		}

		[Token(Token = "0x200021D")]
		public enum GiBlurAmmount
		{
			[Token(Token = "0x4000C8D")]
			Auto = 1,
			[Token(Token = "0x4000C8E")]
			Less,
			[Token(Token = "0x4000C8F")]
			More
		}

		[Token(Token = "0x200021E")]
		public enum CullingPrepassModeType
		{
			[Token(Token = "0x4000C91")]
			Off,
			[Token(Token = "0x4000C92")]
			Greedy,
			[Token(Token = "0x4000C93")]
			Careful
		}

		[Token(Token = "0x200021F")]
		public enum AdaptiveSamplingType
		{
			[Token(Token = "0x4000C95")]
			Disabled,
			[Token(Token = "0x4000C96")]
			EnabledAutomatic,
			[Token(Token = "0x4000C97")]
			EnabledManual
		}

		[Token(Token = "0x2000220")]
		public enum BlurModeType
		{
			[Token(Token = "0x4000C99")]
			Disabled,
			[Token(Token = "0x4000C9A")]
			Basic,
			[Token(Token = "0x4000C9B")]
			Enhanced
		}

		[Token(Token = "0x2000221")]
		public enum BlurQualityType
		{
			[Token(Token = "0x4000C9D")]
			Fast,
			[Token(Token = "0x4000C9E")]
			Precise
		}

		[Token(Token = "0x2000222")]
		public enum ColorBleedSelfOcclusionFixLevelType
		{
			[Token(Token = "0x4000CA0")]
			Off,
			[Token(Token = "0x4000CA1")]
			Soft,
			[Token(Token = "0x4000CA2")]
			Hard
		}

		[Token(Token = "0x2000223")]
		public enum ScreenTextureFormat
		{
			[Token(Token = "0x4000CA4")]
			Auto,
			[Token(Token = "0x4000CA5")]
			ARGB32,
			[Token(Token = "0x4000CA6")]
			ARGBHalf,
			[Token(Token = "0x4000CA7")]
			ARGBFloat,
			[Token(Token = "0x4000CA8")]
			Default,
			[Token(Token = "0x4000CA9")]
			DefaultHDR
		}

		[Token(Token = "0x2000224")]
		public enum FarPlaneSourceType
		{
			[Token(Token = "0x4000CAB")]
			ProjectionParams,
			[Token(Token = "0x4000CAC")]
			Camera
		}

		[Token(Token = "0x2000225")]
		public enum DistanceFalloffModeType
		{
			[Token(Token = "0x4000CAE")]
			Off,
			[Token(Token = "0x4000CAF")]
			Absolute,
			[Token(Token = "0x4000CB0")]
			Relative
		}

		[Token(Token = "0x2000226")]
		public enum VAOCameraEventType
		{
			[Token(Token = "0x4000CB2")]
			AfterLighting,
			[Token(Token = "0x4000CB3")]
			BeforeReflections,
			[Token(Token = "0x4000CB4")]
			BeforeImageEffectsOpaque
		}

		[Token(Token = "0x2000227")]
		public enum HierarchicalBufferStateType
		{
			[Token(Token = "0x4000CB6")]
			Off,
			[Token(Token = "0x4000CB7")]
			On,
			[Token(Token = "0x4000CB8")]
			Auto
		}

		[Token(Token = "0x2000228")]
		public enum NormalsSourceType
		{
			[Token(Token = "0x4000CBA")]
			GBuffer = 1,
			[Token(Token = "0x4000CBB")]
			Calculate
		}

		[Token(Token = "0x2000229")]
		public enum DetailQualityType
		{
			[Token(Token = "0x4000CBD")]
			Medium = 1,
			[Token(Token = "0x4000CBE")]
			High
		}

		[Token(Token = "0x200022A")]
		public enum AlgorithmType
		{
			[Token(Token = "0x4000CC0")]
			StandardVAO = 1,
			[Token(Token = "0x4000CC1")]
			RaycastAO
		}

		[Token(Token = "0x200022B")]
		private enum ShaderPass
		{
			[Token(Token = "0x4000CC3")]
			CullingPrepass,
			[Token(Token = "0x4000CC4")]
			MainPass,
			[Token(Token = "0x4000CC5")]
			MainPassDoubleRadius,
			[Token(Token = "0x4000CC6")]
			MainPassTripleRadius,
			[Token(Token = "0x4000CC7")]
			MainPassDoubleRadiusHQ,
			[Token(Token = "0x4000CC8")]
			MainPassTripleRadiusHQ
		}

		[Token(Token = "0x200022C")]
		private enum ShaderFinalPass
		{
			[Token(Token = "0x4000CCA")]
			StandardBlurUniform,
			[Token(Token = "0x4000CCB")]
			StandardBlurUniformMultiplyBlend,
			[Token(Token = "0x4000CCC")]
			StandardBlurUniformFast,
			[Token(Token = "0x4000CCD")]
			StandardBlurUniformFastMultiplyBlend,
			[Token(Token = "0x4000CCE")]
			EnhancedBlurFirstPass,
			[Token(Token = "0x4000CCF")]
			EnhancedBlurSecondPass,
			[Token(Token = "0x4000CD0")]
			EnhancedBlurSecondPassMultiplyBlend,
			[Token(Token = "0x4000CD1")]
			Mixing,
			[Token(Token = "0x4000CD2")]
			MixingMultiplyBlend,
			[Token(Token = "0x4000CD3")]
			DownscaleDepthNormalsPass,
			[Token(Token = "0x4000CD4")]
			Copy,
			[Token(Token = "0x4000CD5")]
			BlendAfterLightingLog,
			[Token(Token = "0x4000CD6")]
			TexCopyImageEffectSPSR,
			[Token(Token = "0x4000CD7")]
			CalculateNormals,
			[Token(Token = "0x4000CD8")]
			TexCopyTemporalSPSR
		}

		[Token(Token = "0x200022D")]
		private enum ShaderBeforeReflectionsBlendPass
		{
			[Token(Token = "0x4000CDA")]
			BlendBeforeReflections,
			[Token(Token = "0x4000CDB")]
			BlendBeforeReflectionsLog
		}

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Radius;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Power;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Presence;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Thickness;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float BordersIntensity;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float DetailAmountVAO;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public DetailQualityType DetailQuality;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float DetailAmountRaycast;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int Quality;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float SSAOBias;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool MaxRadiusEnabled;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MaxRadius;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AlgorithmType Algorithm;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public DistanceFalloffModeType DistanceFalloffMode;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float DistanceFalloffStartAbsolute;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float DistanceFalloffStartRelative;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float DistanceFalloffSpeedAbsolute;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float DistanceFalloffSpeedRelative;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AdaptiveSamplingType AdaptiveType;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float AdaptiveQualityCoefficient;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public CullingPrepassModeType CullingPrepassMode;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int Downsampling;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public HierarchicalBufferStateType HierarchicalBufferState;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool CommandBufferEnabled;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		public bool UseGBuffer;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x76")]
		public bool UsePreciseDepthBuffer;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x77")]
		public bool EnableTemporalFiltering;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public VAOCameraEventType VaoCameraEvent;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public FarPlaneSourceType FarPlaneSource;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool IsLumaSensitive;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public LuminanceModeType LuminanceMode;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float LumaThreshold;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float LumaKneeWidth;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float LumaKneeLinearity;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public EffectMode Mode;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color ColorTint;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float ColorBleedPower;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float ColorBleedPresence;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public ScreenTextureFormat IntermediateScreenTextureFormat;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool ColorbleedHueSuppresionEnabled;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float ColorBleedHueSuppresionThreshold;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float ColorBleedHueSuppresionWidth;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float ColorBleedHueSuppresionSaturationThreshold;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float ColorBleedHueSuppresionSaturationWidth;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float ColorBleedHueSuppresionBrightness;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public int ColorBleedQuality;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public ColorBleedSelfOcclusionFixLevelType ColorBleedSelfOcclusionFixLevel;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public bool GiBackfaces;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public BlurQualityType BlurQuality;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public BlurModeType BlurMode;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public int EnhancedBlurSize;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float EnhancedBlurDeviation;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public bool OutputAOOnly;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public NormalsSourceType NormalsSource;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float HierarchicalBufferPixelsPerLevel;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private int CullingPrepassDownsamplingFactor;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float AdaptiveQuality;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float AdaptiveMin;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float AdaptiveMax;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public bool lumaFoldout;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
		public bool colorBleedFoldout;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x106")]
		public bool optimizationFoldout;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x107")]
		public bool radiusLimitsFoldout;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public bool pipelineFoldout;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
		public bool blurFoldout;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10A")]
		public bool aboutFoldout;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Dictionary<CameraEvent, CommandBuffer> cameraEventsRegistered;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool isCommandBufferAlive;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Mesh screenQuad;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private int destinationWidth;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private int destinationHeight;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private bool onDestroyCalled;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public Shader vaoMainShader;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public Shader vaoMainColorbleedShader;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public Shader raycastMainShader;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public Shader raycastMainColorbleedShader;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public Shader vaoFinalPassShader;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public Shader vaoBeforeReflectionsBlendShader;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Camera myCamera;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool isSupported;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private Material VAOMaterial;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Material VAOColorbleedMaterial;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Material VAOFinalPassMaterial;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Material RaycastMaterial;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private Material RaycastColorbleedMaterial;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private Material BeforeReflectionsBlendMaterial;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public bool ForcedSwitchPerformed;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A9")]
		public bool ForcedSwitchPerformedSinglePassStereo;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AA")]
		public bool ForcedSwitchPerformedSinglePassStereoGBuffer;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private int lastDownsampling;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private int lastAlgorithm;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private AdaptiveSamplingType lastAdaptiveType;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private CameraEvent? lastOverrideCameraEvent;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private bool lastEnableTemporalFiltering;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private int? lastOverrideWidth;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private int? lastOverrideHeight;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private int lastQuality;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private CullingPrepassModeType lastcullingPrepassType;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private int lastCullingPrepassDownsamplingFactor;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private BlurModeType lastBlurMode;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private BlurQualityType lastBlurQuality;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private int lastMainPass;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private EffectMode lastMode;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private bool lastUseGBuffer;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F1")]
		private bool lastOutputAOOnly;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		private CameraEvent lastCameraEvent;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private bool lastIsHDR;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F9")]
		private bool lastIsSPSR;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FA")]
		private bool lastIsMPSR;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		private int lastScreenTextureWidth;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private int lastScreenTextureHeight;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private bool isHDR;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x205")]
		public bool isSPSR;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x206")]
		public bool isMPSR;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private ScreenTextureFormat lastIntermediateScreenTextureFormat;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		private int lastCmdBufferEnhancedBlurSize;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private bool lastHierarchicalBufferEnabled;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x211")]
		public bool historyReady;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private Matrix4x4 previousCameraToWorldMatrix;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		private Matrix4x4 previousProjectionMatrix;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		private Matrix4x4 previousCameraToWorldMatrixLeft;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
		private Matrix4x4 previousProjectionMatrixLeft;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		private Texture2D noiseTexture;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private Texture2D temporalSamplesTexture;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		private int frameNumber;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
		private bool isEvenFrame;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		private Vector4[] adaptiveSamples;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		private Vector4[] carefulCache;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private RenderTexture[] aoHistory;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		private int aoHistoryCurrentIdx;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		private Vector4[] gaussian;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		private Vector4[] gaussianBuffer;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		private Vector4[] samplesLarge;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		private int lastSamplesLength;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36C")]
		private int lastEnhancedBlurSize;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		private float gaussianWeight;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x374")]
		private float lastDeviation;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		public CameraEvent? OverrideCameraEvent;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		public int? OverrideWidth;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x388")]
		public int? OverrideHeight;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		private Vector4[] samplesPacked;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Color[] noiseSamples;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector4[] samp2;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Vector4[] samp4;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Vector4[] samp8;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Vector4[] samp16;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Vector4[] samp32;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static Vector4[] samp64;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Vector4[] packedSamples;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Color[] temporalSamplesPacked;

		[Token(Token = "0x17000118")]
		public bool HierarchicalBufferEnabled
		{
			[Token(Token = "0x6000A7F")]
			[Address(RVA = "0xDEE8AC", Offset = "0xDEE8AC", VA = "0xDEE8AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xDE9AA0", Offset = "0xDE9AA0", VA = "0xDE9AA0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xDEADD0", Offset = "0xDEADD0", VA = "0xDEADD0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xDEB234", Offset = "0xDEB234", VA = "0xDEB234")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xDEB298", Offset = "0xDEB298", VA = "0xDEB298")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xDEE338", Offset = "0xDEE338", VA = "0xDEE338")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xDEE6F8", Offset = "0xDEE6F8", VA = "0xDEE6F8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xDEE6FC", Offset = "0xDEE6FC", VA = "0xDEE6FC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xDEE724", Offset = "0xDEE724", VA = "0xDEE724")]
		private ShaderPass GetMainPass(AlgorithmType algorithm, bool doQuarterRadius, bool doHalfRadius)
		{
			return default(ShaderPass);
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xDEE768", Offset = "0xDEE768", VA = "0xDEE768")]
		private Material getAlgorithmMaterial()
		{
			return null;
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xDE8A0C", Offset = "0xDE8A0C", VA = "0xDE8A0C")]
		protected void PerformOnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0xDEE228", Offset = "0xDEE228", VA = "0xDEE228")]
		private void EnsureCommandBuffer(bool settingsDirty = false)
		{
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0xDEEB60", Offset = "0xDEEB60", VA = "0xDEEB60")]
		private void CreateCommandBuffer()
		{
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xDEAE4C", Offset = "0xDEAE4C", VA = "0xDEAE4C")]
		private void TeardownCommandBuffer()
		{
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xDF1620", Offset = "0xDF1620", VA = "0xDF1620")]
		protected Mesh GetScreenQuad()
		{
			return null;
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xDF14DC", Offset = "0xDF14DC", VA = "0xDF14DC")]
		private CameraEvent GetCameraEvent(VAOCameraEventType vaoCameraEvent)
		{
			return default(CameraEvent);
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xDEE8D4", Offset = "0xDEE8D4", VA = "0xDEE8D4")]
		private void DoShaderBlitCopy(Texture sourceTexture, RenderTexture destinationTexture)
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xDF184C", Offset = "0xDF184C", VA = "0xDF184C")]
		protected void DoMixingBlit(CommandBuffer commandBuffer, int? source, int? primaryTarget, RenderTargetIdentifier secondaryTarget, int pass, Material material)
		{
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xDF1928", Offset = "0xDF1928", VA = "0xDF1928")]
		protected void DoBlit(CommandBuffer commandBuffer, int? source, int target, int pass, Material material)
		{
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xDF1A98", Offset = "0xDF1A98", VA = "0xDF1A98")]
		protected void DoBlit(CommandBuffer commandBuffer, int? source, RenderTargetIdentifier target, int pass, Material material)
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xDEB7F0", Offset = "0xDEB7F0", VA = "0xDEB7F0")]
		private void TrySetUniforms()
		{
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xDEE9D4", Offset = "0xDEE9D4", VA = "0xDEE9D4")]
		private void prepareAoHistory(int screenTextureWidth, int screenTextureHeight)
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xDEE7AC", Offset = "0xDEE7AC", VA = "0xDEE7AC")]
		private void releaseAoHistory()
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xDF1FF8", Offset = "0xDF1FF8", VA = "0xDF1FF8")]
		private Vector4[] GetCombinedSamples(Vector4[] a, Vector4[] b, [Optional] Vector4[] c, [Optional] Vector4[] d)
		{
			return null;
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0xDF2184", Offset = "0xDF2184", VA = "0xDF2184")]
		private Vector4[] selectSampleSet(int samplesCount)
		{
			return null;
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xDF231C", Offset = "0xDF231C", VA = "0xDF231C")]
		private int getAdaptiveSamplesOffset(int samplesCount)
		{
			return default(int);
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xDF1CF0", Offset = "0xDF1CF0", VA = "0xDF1CF0")]
		private void SetKeywords(Material material, string offState, string onState, bool state)
		{
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xDEA37C", Offset = "0xDEA37C", VA = "0xDEA37C")]
		private void EnsureMaterials()
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xDF2364", Offset = "0xDF2364", VA = "0xDF2364")]
		private static Material CreateMaterial(Shader shader)
		{
			return null;
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xDF241C", Offset = "0xDF241C", VA = "0xDF241C")]
		private static void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xDF1D5C", Offset = "0xDF1D5C", VA = "0xDF1D5C")]
		private void SetVectorArrayNoBuffer(string name, Material material, Vector4[] samples)
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xDF1F68", Offset = "0xDF1F68", VA = "0xDF1F68")]
		private void SetVectorArray(string name, Material Material, Vector4[] samples, ref Vector4[] samplesBuffer, ref int lastBufferLength, bool needsUpdate)
		{
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xDF24B4", Offset = "0xDF24B4", VA = "0xDF24B4")]
		private void SetSampleSet(string name, Material material, Vector4[] samples)
		{
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xDF2624", Offset = "0xDF2624", VA = "0xDF2624")]
		private Vector4[] GetAdaptiveSamples()
		{
			return null;
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xDEAC98", Offset = "0xDEAC98", VA = "0xDEAC98")]
		private Vector4[] GenerateAdaptiveSamples()
		{
			return null;
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xDEA9CC", Offset = "0xDEA9CC", VA = "0xDEA9CC")]
		private void EnsureNoiseTexture()
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xDEAB2C", Offset = "0xDEAB2C", VA = "0xDEAB2C")]
		private void EnsureTemporalSamplesTexture()
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xDF1D7C", Offset = "0xDF1D7C", VA = "0xDF1D7C")]
		private static Vector4[] GenerateGaussian(int size, float d, out float weight, bool normalize = true)
		{
			return null;
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xDF1BE4", Offset = "0xDF1BE4", VA = "0xDF1BE4")]
		private float GetDepthForScreenSize(Camera camera, float sizeOnScreen)
		{
			return default(float);
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xDF2668", Offset = "0xDF2668", VA = "0xDF2668")]
		public bool ShouldUseHierarchicalBuffer()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xDF1C38", Offset = "0xDF1C38", VA = "0xDF1C38")]
		public bool ShouldUseGBuffer()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xDEB4BC", Offset = "0xDEB4BC", VA = "0xDEB4BC")]
		protected void EnsureVAOVersion()
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xDEDDB4", Offset = "0xDEDDB4", VA = "0xDEDDB4")]
		private bool CheckSettingsChanges()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xDF15F0", Offset = "0xDF15F0", VA = "0xDF15F0")]
		private RenderTextureFormat GetRenderTextureFormat(ScreenTextureFormat format, bool isHDR)
		{
			return default(RenderTextureFormat);
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xDEA2BC", Offset = "0xDEA2BC", VA = "0xDEA2BC")]
		private void ReportError(string error)
		{
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xDF2ABC", Offset = "0xDF2ABC", VA = "0xDF2ABC")]
		private void ReportWarning(string error)
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xDEB184", Offset = "0xDEB184", VA = "0xDEB184")]
		private bool isCameraSPSR(Camera camera)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xDF2A2C", Offset = "0xDF2A2C", VA = "0xDF2A2C")]
		private bool isCameraHDR(Camera camera)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xDF1C30", Offset = "0xDF1C30", VA = "0xDF1C30")]
		private bool MustForceFlip(Camera camera)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xDF277C", Offset = "0xDF277C", VA = "0xDF277C")]
		protected List<KeyValuePair<FieldInfo, object>> GetParameters()
		{
			return null;
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xDF28E8", Offset = "0xDF28E8", VA = "0xDF28E8")]
		protected void SetParameters(List<KeyValuePair<FieldInfo, object>> parameters)
		{
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0xDE98C4", Offset = "0xDE98C4", VA = "0xDE98C4")]
		public VAOEffectCommandBuffer()
		{
		}
	}
}
namespace TrainerVR
{
	[Token(Token = "0x200022E")]
	public class LanguageButton : NVRInteractable
	{
		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string ENGLISH;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string CHINESE;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static string SPANISH;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform model;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public TextMeshPro text;

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0xB1AD7C", Offset = "0xB1AD7C", VA = "0xB1AD7C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0xB1AED0", Offset = "0xB1AED0", VA = "0xB1AED0", Slot = "13")]
		public override void HoveringUpdate(NVRHand hand, float forTime)
		{
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xB1AF3C", Offset = "0xB1AF3C", VA = "0xB1AF3C")]
		private void PressButton()
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0xB1AD80", Offset = "0xB1AD80", VA = "0xB1AD80")]
		private void UpdateText()
		{
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0xB1B250", Offset = "0xB1B250", VA = "0xB1B250")]
		public LanguageButton()
		{
		}
	}
}
namespace Trainer
{
	[Token(Token = "0x200022F")]
	public class PathData
	{
		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 position;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float speedModifier;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 node;

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xD13B4C", Offset = "0xD13B4C", VA = "0xD13B4C")]
		public PathData()
		{
		}
	}
	[Token(Token = "0x2000230")]
	public class BezierInfo
	{
		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] distance;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int nearestNode;

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x102BCB0", Offset = "0x102BCB0", VA = "0x102BCB0")]
		public BezierInfo()
		{
		}
	}
	[Token(Token = "0x2000231")]
	public class Path : MonoBehaviour
	{
		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool enabledPath;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PathNode[] nodes;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 m_lastPosition;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion m_lastRotation;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float m_lastScale;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BezierSpline m_spline;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3[] m_bezierNodes;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int bezierNodes;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool m_bReset;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BezierInfo m_tmpBezierInfo;

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xD12E08", Offset = "0xD12E08", VA = "0xD12E08")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xD12FA8", Offset = "0xD12FA8", VA = "0xD12FA8")]
		public void resetCache()
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xD13018", Offset = "0xD13018", VA = "0xD13018")]
		public PathData getPathDataAtPoint(Vector3 forward, int forwardModifier, Vector3 point)
		{
			return null;
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xD13B80", Offset = "0xD13B80", VA = "0xD13B80")]
		private void recalculateBezierNodes()
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xD13604", Offset = "0xD13604", VA = "0xD13604")]
		private PathData getPathDataFromSpline(Vector3 forward, Vector3 point)
		{
			return null;
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xD1393C", Offset = "0xD1393C", VA = "0xD1393C")]
		private bool calculateDirection(Vector3 forward, PathNode node)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xD13860", Offset = "0xD13860", VA = "0xD13860")]
		private PathNode getNearestNode(Vector3 point)
		{
			return null;
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xD13C40", Offset = "0xD13C40", VA = "0xD13C40")]
		private BezierInfo getNearestBezierNode(Vector3 point)
		{
			return null;
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xD13D34", Offset = "0xD13D34", VA = "0xD13D34")]
		public Path()
		{
		}
	}
	[Token(Token = "0x2000232")]
	public class PathNode : MonoBehaviour
	{
		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PathNode previous;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PathNode next;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Path path;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 directionVectorTrue;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 directionVectorFalse;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool directionVectorTrueAvailable;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool directionVectorFalseAvailable;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float distance;

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xD1464C", Offset = "0xD1464C", VA = "0xD1464C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xD139C4", Offset = "0xD139C4", VA = "0xD139C4")]
		public PathNode getNext(bool bDirection)
		{
			return null;
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xD139AC", Offset = "0xD139AC", VA = "0xD139AC")]
		public PathNode getPrevious(bool bDirection)
		{
			return null;
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xD139DC", Offset = "0xD139DC", VA = "0xD139DC")]
		public Vector3 getDirectionVector(bool bDirection)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xD13010", Offset = "0xD13010", VA = "0xD13010")]
		public void resetCache()
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xD14834", Offset = "0xD14834", VA = "0xD14834")]
		public PathNode()
		{
		}
	}
	[Token(Token = "0x2000233")]
	public class Train : ActionPiece, NVRTeleportableIF
	{
		[Token(Token = "0x2000234")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728B60", Offset = "0x728B60")]
		private sealed class <trainCollision>d__104 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 collisionPoint;

			[Token(Token = "0x4000D34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Train <>4__this;

			[Token(Token = "0x17000119")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000ADB")]
				[Address(RVA = "0x1B1F894", Offset = "0x1B1F894", VA = "0x1B1F894", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700011A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000ADD")]
				[Address(RVA = "0x1B1F8DC", Offset = "0x1B1F8DC", VA = "0x1B1F8DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AD8")]
			[Address(RVA = "0x1B1F6EC", Offset = "0x1B1F6EC", VA = "0x1B1F6EC")]
			[DebuggerHidden]
			public <trainCollision>d__104(int <>1__state)
			{
			}

			[Token(Token = "0x6000AD9")]
			[Address(RVA = "0x1B1F718", Offset = "0x1B1F718", VA = "0x1B1F718", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000ADA")]
			[Address(RVA = "0x1B1F71C", Offset = "0x1B1F71C", VA = "0x1B1F71C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000ADC")]
			[Address(RVA = "0x1B1F89C", Offset = "0x1B1F89C", VA = "0x1B1F89C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CF9")]
		private const float MAX_ANIMATION_SPEED = 5f;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float POSITION_DISTANCE;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public AttachablePiece m_currentPiece;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private AttachablePiece m_lastPiece;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private float m_lastPieceTime;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private Vector3 m_lastPosition;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public bool hasEngine;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		public float trainAcceleration;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public float maxSpeed;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public float maxSpeedOnTrainTeleport;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public float maxAccdOnTrainTeleport;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private TrainJoint joint1;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private TrainJoint joint2;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public bool isMainEngine;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		public int forwardModifier;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public TrainData trainData;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private TrainData oldTrainDataAux;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Collider m_size;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Animation trainAnimation;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Dictionary<AttachablePiece, HashSet<Collider>> m_currentPieces;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Transform m_trackPoint;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private AudioSource trainSound;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private float nextWhistleTime;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		public float trainCollisionTime;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private bool trainTrackMode;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Material defaultMaterial;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private float m_fLastHandTime;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		public Transform train_model;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public Transform train_model_interior;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static bool m_bPov;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public float tracksForceConstant;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private AudioSource m_whistle;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		protected bool m_bDerrailActive;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		public float debugSpeedModifier;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public float debugDistanceJoint;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public string debugParentTrain;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private Transform m_noTrack;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private Transform m_noRun;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private Transform m_run;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private Transform m_trackModeCollider;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private Collider m_trackDetector;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private Collider m_wheel1;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		private Collider m_wheel2;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private PhysicMaterial[] m_wheelMaterials;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private PhysicMaterial m_ice_no;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		private PhysicMaterial m_ice_break;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private int m_iCurrentMaterial;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int ICE;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static int ICE_NO;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int ICE_BREAK;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public ParticleSystem smoke;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Train s_teleport;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private bool m_bEnginePaused;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
		private int frameCount;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Transform s_playerTeleportParent;

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private bool TrainExplosion;

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0x1293858", Offset = "0x1293858", VA = "0x1293858", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x1293904", Offset = "0x1293904", VA = "0x1293904", Slot = "30")]
		public override void init()
		{
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x1294134", Offset = "0x1294134", VA = "0x1294134")]
		private void initializeJoints()
		{
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x129422C", Offset = "0x129422C", VA = "0x129422C", Slot = "38")]
		public override Piece clonePiece(bool bAnimation, int iId)
		{
			return null;
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x12944A8", Offset = "0x12944A8", VA = "0x12944A8", Slot = "15")]
		public override void EndInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x12944D8", Offset = "0x12944D8", VA = "0x12944D8", Slot = "22")]
		protected override void FixedUpdate()
		{
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x12954A0", Offset = "0x12954A0", VA = "0x12954A0")]
		private void updateMaxSpeed()
		{
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x1295600", Offset = "0x1295600", VA = "0x1295600")]
		private void setWheelMaterial(int iMaterial)
		{
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x1295354", Offset = "0x1295354", VA = "0x1295354")]
		private void updateWheelMaterials()
		{
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x1295098", Offset = "0x1295098", VA = "0x1295098")]
		private void checkTerminatePause()
		{
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x1295198", Offset = "0x1295198", VA = "0x1295198")]
		public void checkIgnoreColliders()
		{
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x12945DC", Offset = "0x12945DC", VA = "0x12945DC")]
		private void updateTrainPosition()
		{
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x1294DF8", Offset = "0x1294DF8", VA = "0x1294DF8")]
		public void updateEngineAnimation()
		{
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x12961BC", Offset = "0x12961BC", VA = "0x12961BC")]
		public void whistle()
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x129627C", Offset = "0x129627C", VA = "0x129627C")]
		private void calculateForwardModifier(TrainJoint currentJoint)
		{
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x1296374", Offset = "0x1296374", VA = "0x1296374")]
		public AttachablePiece getCurrentPiece()
		{
			return null;
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x129637C", Offset = "0x129637C", VA = "0x129637C")]
		private void OnTriggerEnterPiece(AttachablePiece piece, Collider collider)
		{
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0x12945D4", Offset = "0x12945D4", VA = "0x12945D4")]
		public void stopEngine()
		{
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x1296AA8", Offset = "0x1296AA8", VA = "0x1296AA8")]
		private void startStopEngine(bool bStart)
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x1296D58", Offset = "0x1296D58", VA = "0x1296D58", Slot = "35")]
		protected override void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x1296E58", Offset = "0x1296E58", VA = "0x1296E58")]
		private void stopStation()
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x1296EB8", Offset = "0x1296EB8", VA = "0x1296EB8", Slot = "36")]
		protected override void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x1297458", Offset = "0x1297458", VA = "0x1297458")]
		private bool pieceIsUnderTrain(AttachablePiece piece)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x129575C", Offset = "0x129575C", VA = "0x129575C")]
		private void updatePathPosition()
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x12956B8", Offset = "0x12956B8", VA = "0x12956B8")]
		public bool isTrainPOV()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x129783C", Offset = "0x129783C", VA = "0x129783C")]
		private float calculateAngle(float fAngle1, float fAngle2)
		{
			return default(float);
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x1297880", Offset = "0x1297880", VA = "0x1297880")]
		private float calculateAngle2(float fAngle1, float fAngle2)
		{
			return default(float);
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x1297820", Offset = "0x1297820", VA = "0x1297820")]
		private Vector3 getPathPosition(Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x12978BC", Offset = "0x12978BC", VA = "0x12978BC")]
		private Vector3 getTrainPosition(Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0x129794C", Offset = "0x129794C", VA = "0x129794C", Slot = "42")]
		public override void actionButtonDown()
		{
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x12956B0", Offset = "0x12956B0", VA = "0x12956B0")]
		public void startEngine()
		{
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0x1294360", Offset = "0x1294360", VA = "0x1294360")]
		public void toggleAnimation(bool state)
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x1297C60", Offset = "0x1297C60", VA = "0x1297C60")]
		public static void buildTrain(Train train)
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x1298170", Offset = "0x1298170", VA = "0x1298170")]
		public static Train findFirst(Train train, TrainJoint joint)
		{
			return null;
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0x1296C68", Offset = "0x1296C68", VA = "0x1296C68")]
		public TrainJoint getNextJoint(TrainJoint previous)
		{
			return null;
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x129834C", Offset = "0x129834C", VA = "0x129834C")]
		public bool hasWagons()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x1298418", Offset = "0x1298418", VA = "0x1298418")]
		private static float getScaledValue(float value)
		{
			return default(float);
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x12984D0", Offset = "0x12984D0", VA = "0x12984D0", Slot = "43")]
		public bool OnHoverEnter()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x12985E8", Offset = "0x12985E8", VA = "0x12985E8", Slot = "44")]
		public bool OnHoverExit()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x12986A8", Offset = "0x12986A8", VA = "0x12986A8")]
		private float calculatePOVAcceleration()
		{
			return default(float);
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0x12986F0", Offset = "0x12986F0", VA = "0x12986F0")]
		private int getNumWagons()
		{
			return default(int);
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x1298850", Offset = "0x1298850", VA = "0x1298850", Slot = "45")]
		public bool OnTeleportEnter()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x12990D0", Offset = "0x12990D0", VA = "0x12990D0", Slot = "46")]
		public bool OnTeleportExit()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x1299414", Offset = "0x1299414", VA = "0x1299414")]
		private void deregisterInteractables()
		{
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x1299470", Offset = "0x1299470", VA = "0x1299470")]
		public void setTrainStreetView()
		{
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x1299474", Offset = "0x1299474", VA = "0x1299474")]
		public void setTrainNormalView()
		{
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x1299478", Offset = "0x1299478", VA = "0x1299478")]
		public void clear()
		{
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x12994DC", Offset = "0x12994DC", VA = "0x12994DC")]
		public void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x1299888", Offset = "0x1299888", VA = "0x1299888")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x730AB0", Offset = "0x730AB0")]
		private IEnumerator trainCollision(Vector3 collisionPoint)
		{
			return null;
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0x1290710", Offset = "0x1290710", VA = "0x1290710")]
		public bool isEngineOn()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0x1299924", Offset = "0x1299924", VA = "0x1299924")]
		public Train()
		{
		}
	}
	[Token(Token = "0x2000235")]
	public class TrainData
	{
		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Train firstTrain;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Train lastTrain;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float acc;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxSpeed;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float currentSpeed;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Train engineOn;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool hasEngine;

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x1297BB0", Offset = "0x1297BB0", VA = "0x1297BB0")]
		public void toogleTrain()
		{
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x129B288", Offset = "0x129B288", VA = "0x129B288")]
		private void toggleForwardModifier(Train train)
		{
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x1294224", Offset = "0x1294224", VA = "0x1294224")]
		public TrainData()
		{
		}
	}
	[Token(Token = "0x2000236")]
	public class TrainJoint : MonoBehaviour
	{
		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Train parent;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TrainJoint attachedJoint;

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x129B3AC", Offset = "0x129B3AC", VA = "0x129B3AC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x129B3D4", Offset = "0x129B3D4", VA = "0x129B3D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x129B44C", Offset = "0x129B44C", VA = "0x129B44C")]
		public void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x129B5EC", Offset = "0x129B5EC", VA = "0x129B5EC")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x129B790", Offset = "0x129B790", VA = "0x129B790")]
		public TrainJoint()
		{
		}
	}
}
namespace Qiyi.UI.InputField
{
	[Token(Token = "0x2000237")]
	public abstract class AbstractInputField : IVrInputField
	{
		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ICaret _caret;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IInputEventProcessor _inputEventProcessor;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITextComponentWrapper _editableText;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IInputFieldController _controller;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color _selectionColor;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Color _defaultColor;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool _interactive;

		[Token(Token = "0x1700011B")]
		protected virtual ITextComponentWrapper EditableText
		{
			[Token(Token = "0x6000AE6")]
			[Address(RVA = "0x101BC2C", Offset = "0x101BC2C", VA = "0x101BC2C", Slot = "14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011C")]
		protected virtual IInputFieldController InputFieldController
		{
			[Token(Token = "0x6000AE7")]
			[Address(RVA = "0x101BC34", Offset = "0x101BC34", VA = "0x101BC34", Slot = "15")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011D")]
		public virtual Color SelectionColor
		{
			[Token(Token = "0x6000AE8")]
			[Address(RVA = "0x101BC3C", Offset = "0x101BC3C", VA = "0x101BC3C", Slot = "16")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000AE9")]
			[Address(RVA = "0x101BC48", Offset = "0x101BC48", VA = "0x101BC48", Slot = "17")]
			set
			{
			}
		}

		[Token(Token = "0x1700011E")]
		public virtual Color DefaultColor
		{
			[Token(Token = "0x6000AEA")]
			[Address(RVA = "0x101BC54", Offset = "0x101BC54", VA = "0x101BC54", Slot = "18")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000AEB")]
			[Address(RVA = "0x101BC60", Offset = "0x101BC60", VA = "0x101BC60", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x1700011F")]
		public virtual string TextValue
		{
			[Token(Token = "0x6000AEC")]
			[Address(RVA = "0x101BC6C", Offset = "0x101BC6C", VA = "0x101BC6C", Slot = "20")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AED")]
			[Address(RVA = "0x101BD1C", Offset = "0x101BD1C", VA = "0x101BD1C", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x17000120")]
		public string text
		{
			[Token(Token = "0x6000AEE")]
			[Address(RVA = "0x101BE5C", Offset = "0x101BE5C", VA = "0x101BE5C", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AEF")]
			[Address(RVA = "0x101BE6C", Offset = "0x101BE6C", VA = "0x101BE6C", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000121")]
		protected virtual ICaret Caret
		{
			[Token(Token = "0x6000AF0")]
			[Address(RVA = "0x101BE7C", Offset = "0x101BE7C", VA = "0x101BE7C", Slot = "22")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AF1")]
			[Address(RVA = "0x101BE84", Offset = "0x101BE84", VA = "0x101BE84", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x101BF68", Offset = "0x101BF68", VA = "0x101BF68")]
		protected AbstractInputField(ICaret caret, IInputEventProcessor inputEventProcessor, IInputFieldController controller, ITextComponentWrapper text)
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x101C06C", Offset = "0x101C06C", VA = "0x101C06C", Slot = "24")]
		public virtual void DrawCaretOrSelection(ITextComponentWrapper text)
		{
		}

		[Token(Token = "0x6000AF4")]
		protected abstract void DrawSelection(ICaret caret, Color color, ITextComponentWrapper text, Vector2 offset);

		[Token(Token = "0x6000AF5")]
		protected abstract void DrawCaret(ICaret caret, Color color, ITextComponentWrapper text, Vector2 offset);

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x101C374", Offset = "0x101C374", VA = "0x101C374", Slot = "27")]
		public virtual void ProcessEvent(Event evt)
		{
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x101C5AC", Offset = "0x101C5AC", VA = "0x101C5AC", Slot = "28")]
		public virtual void ActivateInputField()
		{
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0x101C68C", Offset = "0x101C68C", VA = "0x101C68C", Slot = "29")]
		public virtual void DeactivateInputField()
		{
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0x101C754", Offset = "0x101C754", VA = "0x101C754", Slot = "30")]
		public virtual void FinishInput()
		{
		}

		[Token(Token = "0x6000AFA")]
		protected abstract string ProcessText(ITextComponentWrapper text, ICaret caret);

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x101C820", Offset = "0x101C820", VA = "0x101C820", Slot = "32")]
		public virtual void UpdateText()
		{
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x101C9D8", Offset = "0x101C9D8", VA = "0x101C9D8", Slot = "33")]
		public virtual bool IsInteractive()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFD")]
		public abstract void OnPointerDown(PointerEventData eventData);

		[Token(Token = "0x6000AFE")]
		public abstract void OnDrag(PointerEventData eventData);
	}
	[Token(Token = "0x2000238")]
	public class BaseTextProcessor : IInputEventProcessor
	{
		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private StringBuilder _processedText;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ICaretNavigator _caretNavigator;

		[Token(Token = "0x17000122")]
		private static string _clipboard
		{
			[Token(Token = "0x6000AFF")]
			[Address(RVA = "0x1029EE4", Offset = "0x1029EE4", VA = "0x1029EE4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B00")]
			[Address(RVA = "0x1029EEC", Offset = "0x1029EEC", VA = "0x1029EEC")]
			set
			{
			}
		}

		[Token(Token = "0x17000123")]
		public string TextValue
		{
			[Token(Token = "0x6000B01")]
			[Address(RVA = "0x1029EF4", Offset = "0x1029EF4", VA = "0x1029EF4", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B02")]
			[Address(RVA = "0x1029F14", Offset = "0x1029F14", VA = "0x1029F14", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x1029F88", Offset = "0x1029F88", VA = "0x1029F88")]
		public BaseTextProcessor(StringBuilder textToProcess, ICaretNavigator receiver)
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x1029FD8", Offset = "0x1029FD8", VA = "0x1029FD8", Slot = "4")]
		public bool ProcessEvent(Event keyEvent, int caretIndex, int selectionIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x102ADC0", Offset = "0x102ADC0", VA = "0x102ADC0")]
		private bool HasSelection(int index, int selectionIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x102ADCC", Offset = "0x102ADCC", VA = "0x102ADCC", Slot = "8")]
		protected virtual bool HandleInputChar(StringBuilder text, int index, int selectionIndex, char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x102A2A4", Offset = "0x102A2A4", VA = "0x102A2A4")]
		private bool Ctrl(Event evt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x102A320", Offset = "0x102A320", VA = "0x102A320")]
		private bool Shift(Event evt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x102A2F8", Offset = "0x102A2F8", VA = "0x102A2F8")]
		private bool Alt(Event evt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x102A574", Offset = "0x102A574", VA = "0x102A574", Slot = "7")]
		public void SelectAll()
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x102A348", Offset = "0x102A348", VA = "0x102A348")]
		private void Backspace(StringBuilder text, int caretIndex, int selectionIndex)
		{
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x102AE48", Offset = "0x102AE48", VA = "0x102AE48")]
		private void Delete(StringBuilder text, int start, int end)
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x102A370", Offset = "0x102A370", VA = "0x102A370")]
		private void ForwardSpace(StringBuilder text, int caretIndex, int selectionIndex)
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x102B02C", Offset = "0x102B02C", VA = "0x102B02C")]
		private void Append(char c, int index)
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x102A3E0", Offset = "0x102A3E0", VA = "0x102A3E0")]
		private void MoveTextStart(bool shift)
		{
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x102A4A0", Offset = "0x102A4A0", VA = "0x102A4A0")]
		private void MoveTextEnd(bool shift)
		{
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x102A700", Offset = "0x102A700", VA = "0x102A700")]
		private string Copy(StringBuilder text, int start, int end)
		{
			return null;
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x102A6B4", Offset = "0x102A6B4", VA = "0x102A6B4")]
		private void Cut(StringBuilder text, int start, int end)
		{
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x102A778", Offset = "0x102A778", VA = "0x102A778")]
		private void Paste(StringBuilder text, int start, int end)
		{
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x102AF40", Offset = "0x102AF40", VA = "0x102AF40")]
		private void Insert(StringBuilder text, char insert, int start)
		{
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x102A988", Offset = "0x102A988", VA = "0x102A988")]
		private void MoveRight(int index, int selectionIndex, bool shift)
		{
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x102A814", Offset = "0x102A814", VA = "0x102A814")]
		private void MoveLeft(int index, int selectionIndex, bool shift)
		{
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x102AAF0", Offset = "0x102AAF0", VA = "0x102AAF0")]
		private void MoveUp(int index, int selectionIndex, bool shift)
		{
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0x102AC58", Offset = "0x102AC58", VA = "0x102AC58")]
		private void MoveDown(int index, int selectionIndex, bool shift)
		{
		}
	}
	[Token(Token = "0x2000239")]
	public class CaretNavigator : ICaretNavigator
	{
		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ICaret _caret;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ITextComponentWrapper _textWrapper;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IVrInputField _inputField;

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xE2421C", Offset = "0xE2421C", VA = "0xE2421C")]
		public CaretNavigator(ICaret caret, ITextComponentWrapper text, IVrInputField inputField)
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xE24280", Offset = "0xE24280", VA = "0xE24280", Slot = "4")]
		public void MoveCaretTo(int index, bool withSelection)
		{
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xE243E0", Offset = "0xE243E0", VA = "0xE243E0", Slot = "7")]
		public void MoveDown(bool goToLastChar, bool withSelection)
		{
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0xE24544", Offset = "0xE24544", VA = "0xE24544", Slot = "5")]
		public void MoveLeft(bool withSelection)
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0xE24610", Offset = "0xE24610", VA = "0xE24610", Slot = "6")]
		public void MoveRight(bool withSelection)
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0xE246DC", Offset = "0xE246DC", VA = "0xE246DC", Slot = "8")]
		public void MoveUp(bool goToFirstChar, bool withSelection)
		{
		}
	}
	[Token(Token = "0x200023A")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x728B70", Offset = "0x728B70")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x728B70", Offset = "0x728B70")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x728B70", Offset = "0x728B70")]
	public class DefaultCaret : MonoBehaviour, ICaret
	{
		[Token(Token = "0x200023B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728C38", Offset = "0x728C38")]
		private sealed class <CaretBlink>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DefaultCaret <>4__this;

			[Token(Token = "0x4000D54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <timer>5__2;

			[Token(Token = "0x17000126")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000B36")]
				[Address(RVA = "0x9D8F10", Offset = "0x9D8F10", VA = "0x9D8F10", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000127")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B38")]
				[Address(RVA = "0x9D8F58", Offset = "0x9D8F58", VA = "0x9D8F58", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B33")]
			[Address(RVA = "0x9D8D8C", Offset = "0x9D8D8C", VA = "0x9D8D8C")]
			[DebuggerHidden]
			public <CaretBlink>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6000B34")]
			[Address(RVA = "0x9D8DB8", Offset = "0x9D8DB8", VA = "0x9D8DB8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B35")]
			[Address(RVA = "0x9D8DBC", Offset = "0x9D8DBC", VA = "0x9D8DBC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B37")]
			[Address(RVA = "0x9D8F18", Offset = "0x9D8F18", VA = "0x9D8F18", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Mesh _mesh;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _selectionAnchorIndex;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _index;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _isVisible;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool _isVisibleTmp;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Coroutine _blinkCoroutine;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C3E4", Offset = "0x72C3E4")]
		private IInputFieldController <InputFieldController>k__BackingField;

		[Token(Token = "0x17000124")]
		public IInputFieldController InputFieldController
		{
			[Token(Token = "0x6000B20")]
			[Address(RVA = "0xE2E97C", Offset = "0xE2E97C", VA = "0xE2E97C", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730B70", Offset = "0x730B70")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B1F")]
			[Address(RVA = "0xE2E974", Offset = "0xE2E974", VA = "0xE2E974", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730B60", Offset = "0x730B60")]
			set
			{
			}
		}

		[Token(Token = "0x17000125")]
		public CanvasRenderer CaretRenderer
		{
			[Token(Token = "0x6000B24")]
			[Address(RVA = "0xE2EC14", Offset = "0xE2EC14", VA = "0xE2EC14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0xE2E984", Offset = "0xE2E984", VA = "0xE2E984")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0xE2EC60", Offset = "0xE2EC60", VA = "0xE2EC60")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0xE2ECF4", Offset = "0xE2ECF4", VA = "0xE2ECF4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xE2EDC4", Offset = "0xE2EDC4", VA = "0xE2EDC4", Slot = "6")]
		public void ActivateCaret()
		{
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0xE2EE80", Offset = "0xE2EE80", VA = "0xE2EE80", Slot = "7")]
		public void DeactivateCaret()
		{
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xE2EC64", Offset = "0xE2EC64", VA = "0xE2EC64", Slot = "11")]
		public void DestroyCaret()
		{
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0xE2EF58", Offset = "0xE2EF58", VA = "0xE2EF58")]
		private bool HasSelection()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0xE2EF68", Offset = "0xE2EF68", VA = "0xE2EF68", Slot = "9")]
		public int GetIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0xE2EF70", Offset = "0xE2EF70", VA = "0xE2EF70", Slot = "13")]
		public void MoveTo(int index, bool withSelection)
		{
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xE2EF98", Offset = "0xE2EF98", VA = "0xE2EF98")]
		private void SetupCursorVertsPositions(ref UIVertex[] verts, Rect drawRect)
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xE2F0BC", Offset = "0xE2F0BC", VA = "0xE2F0BC", Slot = "12")]
		public bool IsVisible()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xE2F0DC", Offset = "0xE2F0DC", VA = "0xE2F0DC", Slot = "8")]
		public void Draw(Rect drawRect, Color color, VertexHelper helper)
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0xE2F1D4", Offset = "0xE2F1D4", VA = "0xE2F1D4")]
		private void GenerateCursorOrSelection(VertexHelper helper, Rect drawRect, Color color)
		{
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0xE2EB2C", Offset = "0xE2EB2C", VA = "0xE2EB2C")]
		private void AlignPosition(RectTransform textTransform, RectTransform caretTransform)
		{
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0xE2EE08", Offset = "0xE2EE08", VA = "0xE2EE08")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x730B80", Offset = "0x730B80")]
		private IEnumerator CaretBlink()
		{
			return null;
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0xE2F3A0", Offset = "0xE2F3A0", VA = "0xE2F3A0", Slot = "10")]
		public int GetSelectionIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0xE2F3A8", Offset = "0xE2F3A8", VA = "0xE2F3A8")]
		public DefaultCaret()
		{
		}
	}
	[Token(Token = "0x200023C")]
	public class EditableText : ITextComponentWrapper
	{
		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Text _textComponent;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextGenerator _rawTextGenerator;

		[Token(Token = "0x17000128")]
		private TextGenerator DisplayedTextGenerator
		{
			[Token(Token = "0x6000B39")]
			[Address(RVA = "0xE4DB74", Offset = "0xE4DB74", VA = "0xE4DB74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000129")]
		private TextGenerator RawTextGenerator
		{
			[Token(Token = "0x6000B3A")]
			[Address(RVA = "0xE4DB90", Offset = "0xE4DB90", VA = "0xE4DB90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012A")]
		public Rect DisplayRect
		{
			[Token(Token = "0x6000B3C")]
			[Address(RVA = "0xE4DC54", Offset = "0xE4DC54", VA = "0xE4DC54", Slot = "5")]
			get
			{
				return default(Rect);
			}
		}

		[Token(Token = "0x1700012B")]
		public int DisplayedTextLength
		{
			[Token(Token = "0x6000B3D")]
			[Address(RVA = "0xE4DC80", Offset = "0xE4DC80", VA = "0xE4DC80", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700012C")]
		public int LineCount
		{
			[Token(Token = "0x6000B3E")]
			[Address(RVA = "0xE4DCB4", Offset = "0xE4DCB4", VA = "0xE4DCB4", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0xE4DC04", Offset = "0xE4DC04", VA = "0xE4DC04")]
		public EditableText(Text text, TextGenerator generator)
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xE4DCD4", Offset = "0xE4DCD4", VA = "0xE4DCD4", Slot = "4")]
		public Vector2 MousePositionInTextRect(PointerEventData eventData)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xE4DD9C", Offset = "0xE4DD9C", VA = "0xE4DD9C", Slot = "12")]
		public void Populate(string text, GameObject context)
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xE4DEEC", Offset = "0xE4DEEC", VA = "0xE4DEEC", Slot = "14")]
		public Vector2 CursorPositionAt(int relativeIndex)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xE4E034", Offset = "0xE4E034", VA = "0xE4E034", Slot = "13")]
		public float CharWidth(int index)
		{
			return default(float);
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xE4E10C", Offset = "0xE4E10C", VA = "0xE4E10C")]
		private Vector2 RoundedTextPivotLocalPosition(Text textComponent)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0xE4E298", Offset = "0xE4E298", VA = "0xE4E298")]
		private int LineFromPosition(Vector2 pos, TextGenerator generator)
		{
			return default(int);
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xE4E4B0", Offset = "0xE4E4B0", VA = "0xE4E4B0", Slot = "18")]
		public int RelativeIndexFromPosition(Vector2 pos)
		{
			return default(int);
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0xE4E794", Offset = "0xE4E794", VA = "0xE4E794", Slot = "10")]
		public int LineEndIndex(int line)
		{
			return default(int);
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0xE4E934", Offset = "0xE4E934", VA = "0xE4E934", Slot = "11")]
		public int LineStartIndex(int line)
		{
			return default(int);
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0xE4EAB0", Offset = "0xE4EAB0", VA = "0xE4EAB0", Slot = "8")]
		public float LineHeight(int line)
		{
			return default(float);
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0xE4EBAC", Offset = "0xE4EBAC", VA = "0xE4EBAC", Slot = "9")]
		public float LineTop(int line)
		{
			return default(float);
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xE4EC84", Offset = "0xE4EC84", VA = "0xE4EC84", Slot = "15")]
		public Vector2 CaretOffset()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xE4EC8C", Offset = "0xE4EC8C", VA = "0xE4EC8C", Slot = "17")]
		public int GetLineByCharIndex(int caretIndex)
		{
			return default(int);
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0xE4EDB4", Offset = "0xE4EDB4", VA = "0xE4EDB4", Slot = "19")]
		public int LineDownIndex(bool goToLastChar, int index)
		{
			return default(int);
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0xE4F048", Offset = "0xE4F048", VA = "0xE4F048", Slot = "20")]
		public int LineUpIndex(bool goToFirstChar, int index)
		{
			return default(int);
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xE4F21C", Offset = "0xE4F21C", VA = "0xE4F21C", Slot = "16")]
		public void UpdateDisplayText(string text)
		{
		}
	}
	[Token(Token = "0x200023D")]
	public interface ICaret
	{
		[Token(Token = "0x1700012D")]
		IInputFieldController InputFieldController
		{
			[Token(Token = "0x6000B4F")]
			get;
			[Token(Token = "0x6000B50")]
			set;
		}

		[Token(Token = "0x6000B51")]
		void ActivateCaret();

		[Token(Token = "0x6000B52")]
		void DeactivateCaret();

		[Token(Token = "0x6000B53")]
		void Draw(Rect drawRect, Color color, VertexHelper helper);

		[Token(Token = "0x6000B54")]
		int GetIndex();

		[Token(Token = "0x6000B55")]
		int GetSelectionIndex();

		[Token(Token = "0x6000B56")]
		void DestroyCaret();

		[Token(Token = "0x6000B57")]
		bool IsVisible();

		[Token(Token = "0x6000B58")]
		void MoveTo(int index, bool withSelection);
	}
	[Token(Token = "0x200023E")]
	public interface ICaretNavigator
	{
		[Token(Token = "0x6000B59")]
		void MoveCaretTo(int index, bool withSelection);

		[Token(Token = "0x6000B5A")]
		void MoveLeft(bool withSelection);

		[Token(Token = "0x6000B5B")]
		void MoveRight(bool withSelection);

		[Token(Token = "0x6000B5C")]
		void MoveDown(bool goToLastChar, bool withSelection);

		[Token(Token = "0x6000B5D")]
		void MoveUp(bool goToFistChar, bool withSelection);
	}
	[Token(Token = "0x200023F")]
	public interface IInputEventProcessor
	{
		[Token(Token = "0x1700012E")]
		string TextValue
		{
			[Token(Token = "0x6000B60")]
			get;
			[Token(Token = "0x6000B5F")]
			set;
		}

		[Token(Token = "0x6000B5E")]
		bool ProcessEvent(Event keyEvent, int caretIndex, int selectionIndex);

		[Token(Token = "0x6000B61")]
		void SelectAll();
	}
	[Token(Token = "0x2000240")]
	public interface IInputFieldController
	{
		[Token(Token = "0x6000B62")]
		void MarkGeometryAsDirty();

		[Token(Token = "0x6000B63")]
		void OnEndInput(string text);

		[Token(Token = "0x6000B64")]
		void UpdateDisplayText(string text);

		[Token(Token = "0x6000B65")]
		void PopulateText(string text);
	}
	[Token(Token = "0x2000241")]
	public interface ITextComponentWrapper
	{
		[Token(Token = "0x1700012F")]
		Rect DisplayRect
		{
			[Token(Token = "0x6000B67")]
			get;
		}

		[Token(Token = "0x17000130")]
		int DisplayedTextLength
		{
			[Token(Token = "0x6000B68")]
			get;
		}

		[Token(Token = "0x17000131")]
		int LineCount
		{
			[Token(Token = "0x6000B69")]
			get;
		}

		[Token(Token = "0x6000B66")]
		Vector2 MousePositionInTextRect(PointerEventData eventData);

		[Token(Token = "0x6000B6A")]
		float LineHeight(int line);

		[Token(Token = "0x6000B6B")]
		float LineTop(int line);

		[Token(Token = "0x6000B6C")]
		int LineEndIndex(int line);

		[Token(Token = "0x6000B6D")]
		int LineStartIndex(int line);

		[Token(Token = "0x6000B6E")]
		void Populate(string text, GameObject context);

		[Token(Token = "0x6000B6F")]
		float CharWidth(int index);

		[Token(Token = "0x6000B70")]
		Vector2 CursorPositionAt(int relativeIndex);

		[Token(Token = "0x6000B71")]
		Vector2 CaretOffset();

		[Token(Token = "0x6000B72")]
		void UpdateDisplayText(string text);

		[Token(Token = "0x6000B73")]
		int GetLineByCharIndex(int index);

		[Token(Token = "0x6000B74")]
		int RelativeIndexFromPosition(Vector2 position);

		[Token(Token = "0x6000B75")]
		int LineDownIndex(bool goToLastChar, int currentIndex);

		[Token(Token = "0x6000B76")]
		int LineUpIndex(bool goToFirstChar, int currentIndex);
	}
	[Token(Token = "0x2000242")]
	public interface IVrInputField
	{
		[Token(Token = "0x17000132")]
		string TextValue
		{
			[Token(Token = "0x6000B77")]
			get;
			[Token(Token = "0x6000B78")]
			set;
		}

		[Token(Token = "0x17000133")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0x732190", Offset = "0x732190")]
		string text
		{
			[Token(Token = "0x6000B79")]
			get;
			[Token(Token = "0x6000B7A")]
			set;
		}

		[Token(Token = "0x6000B7B")]
		void ProcessEvent(Event evt);

		[Token(Token = "0x6000B7C")]
		void ActivateInputField();

		[Token(Token = "0x6000B7D")]
		void DeactivateInputField();

		[Token(Token = "0x6000B7E")]
		void FinishInput();

		[Token(Token = "0x6000B7F")]
		void UpdateText();

		[Token(Token = "0x6000B80")]
		bool IsInteractive();
	}
	[Token(Token = "0x2000243")]
	public class MultiLineInputFieldImpl : AbstractInputField
	{
		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Color _selectionColor;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int _drawStart;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int _drawEnd;

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x122A9B8", Offset = "0x122A9B8", VA = "0x122A9B8")]
		public MultiLineInputFieldImpl(ICaret caret, IInputEventProcessor inputEventProcessor, IInputFieldController controller, ITextComponentWrapper text)
		{
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x122AA4C", Offset = "0x122AA4C", VA = "0x122AA4C", Slot = "31")]
		protected override string ProcessText(ITextComponentWrapper text, ICaret caret)
		{
			return null;
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x122B41C", Offset = "0x122B41C", VA = "0x122B41C", Slot = "25")]
		protected override void DrawSelection(ICaret caret, Color color, ITextComponentWrapper text, Vector2 offset)
		{
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0x122BFB0", Offset = "0x122BFB0", VA = "0x122BFB0", Slot = "26")]
		protected override void DrawCaret(ICaret caret, Color color, ITextComponentWrapper text, Vector2 offset)
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x122B738", Offset = "0x122B738", VA = "0x122B738")]
		private List<Rect> CalculateSelectionRects(ICaret caret, ITextComponentWrapper text, Vector2 offset)
		{
			return null;
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x122C45C", Offset = "0x122C45C", VA = "0x122C45C")]
		private Rect HightedLineRect(int startIndex, int endIndex, float height, ITextComponentWrapper text)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x122C658", Offset = "0x122C658", VA = "0x122C658", Slot = "34")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0x122C880", Offset = "0x122C880", VA = "0x122C880", Slot = "35")]
		public override void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x122C274", Offset = "0x122C274", VA = "0x122C274")]
		private Rect CalculateCaretDrawRect(ITextComponentWrapper text, Vector2 offset, int relativeIndex)
		{
			return default(Rect);
		}
	}
	[Token(Token = "0x2000244")]
	internal static class SetPropertyUtility
	{
		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xAE796C", Offset = "0xAE796C", VA = "0xAE796C")]
		public static bool SetColor(ref Color currentValue, Color newValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8B")]
		public static bool SetStruct<T>(ref T currentValue, T newValue) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8C")]
		public static bool SetClass<T>(ref T currentValue, T newValue) where T : class
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000245")]
	public class SingleLineInputProcessor : BaseTextProcessor
	{
		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xAE93D4", Offset = "0xAE93D4", VA = "0xAE93D4")]
		public SingleLineInputProcessor(StringBuilder textToProcess, ICaretNavigator receiver)
		{
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xAE93DC", Offset = "0xAE93DC", VA = "0xAE93DC", Slot = "8")]
		protected override bool HandleInputChar(StringBuilder text, int index, int selectionIndex, char c)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000246")]
	public class VrInputField : Selectable, IVrInputField, ICanvasElement, IUpdateSelectedHandler, IEventSystemHandler, IInputFieldController, IDragHandler, ISelectHandler, IDeselectHandler, IPointerClickHandler
	{
		[Token(Token = "0x2000247")]
		private enum LineType
		{
			[Token(Token = "0x4000D67")]
			SingleLine,
			[Token(Token = "0x4000D68")]
			MultiLine
		}

		[Serializable]
		[Token(Token = "0x2000248")]
		public class OnValueChangedEvent : UnityEvent<string>
		{
			[Token(Token = "0x6000BB7")]
			[Address(RVA = "0x1B22248", Offset = "0x1B22248", VA = "0x1B22248")]
			public OnValueChangedEvent()
			{
			}
		}

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string ReginFormat_Num;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private Text _textComponent;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private GameObject _placeHolder;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private Color _selectionColor;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private LineType _lineType;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		private int _characterLimit;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private SGImeInputType sgImeInputType;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		private SGImeTextType sgImeTextType;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private string _regexFormat;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public OnValueChangedEvent onValueChanged;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AbstractInputField _impl;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private ITextComponentWrapper _editableText;

		[Token(Token = "0x17000134")]
		public int CharacterLimit
		{
			[Token(Token = "0x6000B8F")]
			[Address(RVA = "0x9CEAF4", Offset = "0x9CEAF4", VA = "0x9CEAF4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000B90")]
			[Address(RVA = "0x9CEAFC", Offset = "0x9CEAFC", VA = "0x9CEAFC")]
			set
			{
			}
		}

		[Token(Token = "0x17000135")]
		public string RegexFormat
		{
			[Token(Token = "0x6000B91")]
			[Address(RVA = "0x9CEB98", Offset = "0x9CEB98", VA = "0x9CEB98")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B92")]
			[Address(RVA = "0x9CEBA0", Offset = "0x9CEBA0", VA = "0x9CEBA0")]
			set
			{
			}
		}

		[Token(Token = "0x17000136")]
		private AbstractInputField Impl
		{
			[Token(Token = "0x6000B93")]
			[Address(RVA = "0x9CEBB0", Offset = "0x9CEBB0", VA = "0x9CEBB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000137")]
		public string TextValue
		{
			[Token(Token = "0x6000B94")]
			[Address(RVA = "0x9CEE5C", Offset = "0x9CEE5C", VA = "0x9CEE5C", Slot = "39")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B95")]
			[Address(RVA = "0x9CEEA0", Offset = "0x9CEEA0", VA = "0x9CEEA0", Slot = "40")]
			set
			{
			}
		}

		[Token(Token = "0x17000138")]
		public string text
		{
			[Token(Token = "0x6000B96")]
			[Address(RVA = "0x9CEF4C", Offset = "0x9CEF4C", VA = "0x9CEF4C", Slot = "41")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B97")]
			[Address(RVA = "0x9CEF50", Offset = "0x9CEF50", VA = "0x9CEF50", Slot = "42")]
			set
			{
			}
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x9CEF54", Offset = "0x9CEF54", VA = "0x9CEF54", Slot = "36")]
		public override void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0x9CF0E0", Offset = "0x9CF0E0", VA = "0x9CF0E0", Slot = "37")]
		public override void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x9CEF7C", Offset = "0x9CEF7C", VA = "0x9CEF7C", Slot = "44")]
		public void ActivateInputField()
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x9CF0E8", Offset = "0x9CF0E8", VA = "0x9CF0E8", Slot = "45")]
		public void DeactivateInputField()
		{
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x9CF104", Offset = "0x9CF104", VA = "0x9CF104", Slot = "5")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x9CF1C8", Offset = "0x9CF1C8", VA = "0x9CF1C8", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x9CF2E4", Offset = "0x9CF2E4", VA = "0x9CF2E4", Slot = "48")]
		public bool IsInteractive()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x9CF34C", Offset = "0x9CF34C", VA = "0x9CF34C", Slot = "46")]
		public void FinishInput()
		{
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x9CF390", Offset = "0x9CF390", VA = "0x9CF390", Slot = "43")]
		public void ProcessEvent(Event evt)
		{
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x9CEBE0", Offset = "0x9CEBE0", VA = "0x9CEBE0")]
		private void initialize()
		{
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x9CF4D0", Offset = "0x9CF4D0", VA = "0x9CF4D0")]
		private ICaret CreateCaret()
		{
			return null;
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x9CF140", Offset = "0x9CF140", VA = "0x9CF140")]
		public void RegisterTextComponentDirtyCallbacks(Text textComponent)
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x9CF25C", Offset = "0x9CF25C", VA = "0x9CF25C")]
		public void UnregisterTextComponentDirtyCallbacks(Text textComponent)
		{
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x9CF85C", Offset = "0x9CF85C", VA = "0x9CF85C", Slot = "55")]
		public void MarkGeometryAsDirty()
		{
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x9CF8C0", Offset = "0x9CF8C0", VA = "0x9CF8C0", Slot = "49")]
		public void Rebuild(CanvasUpdate executing)
		{
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x9CF91C", Offset = "0x9CF91C", VA = "0x9CF91C", Slot = "51")]
		public void LayoutComplete()
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x9CF920", Offset = "0x9CF920", VA = "0x9CF920", Slot = "52")]
		public void GraphicUpdateComplete()
		{
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x9CF924", Offset = "0x9CF924", VA = "0x9CF924", Slot = "47")]
		public void UpdateText()
		{
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x9CF968", Offset = "0x9CF968", VA = "0x9CF968", Slot = "58")]
		public void PopulateText(string text)
		{
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x9CFA44", Offset = "0x9CFA44", VA = "0x9CFA44", Slot = "54")]
		public void OnUpdateSelected(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x9CFA48", Offset = "0x9CFA48", VA = "0x9CFA48", Slot = "57")]
		public void UpdateDisplayText(string text)
		{
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x9CFC78", Offset = "0x9CFC78", VA = "0x9CFC78", Slot = "56")]
		public void OnEndInput(string text)
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x9CFC7C", Offset = "0x9CFC7C", VA = "0x9CFC7C")]
		public void RegisterTextComponentDirtyCallbacks()
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x9CFC84", Offset = "0x9CFC84", VA = "0x9CFC84", Slot = "32")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x9CFD64", Offset = "0x9CFD64", VA = "0x9CFD64", Slot = "26")]
		protected override void DoStateTransition(SelectionState state, bool instant)
		{
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x9CFCFC", Offset = "0x9CFCFC", VA = "0x9CFCFC")]
		private bool AcceptPointerEvent(PointerEventData eventData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x9CFEC0", Offset = "0x9CFEC0", VA = "0x9CFEC0", Slot = "59")]
		public void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x9CFF20", Offset = "0x9CFF20", VA = "0x9CFF20", Slot = "60")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x9CFF30", Offset = "0x9CFF30", VA = "0x9CFF30")]
		public VrInputField()
		{
		}

		[SpecialName]
		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x9D0044", Offset = "0x9D0044", VA = "0x9D0044", Slot = "50")]
		private Transform UnityEngine.UI.ICanvasElement.get_transform()
		{
			return null;
		}
	}
	[Token(Token = "0x2000249")]
	public class VrInputFieldImpl : AbstractInputField
	{
		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int _drawStart;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int _drawEnd;

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x9CF854", Offset = "0x9CF854", VA = "0x9CF854")]
		public VrInputFieldImpl(ICaret caret, IInputEventProcessor inputEventProcessor, IInputFieldController controller, ITextComponentWrapper editableText)
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x9D004C", Offset = "0x9D004C", VA = "0x9D004C", Slot = "31")]
		protected override string ProcessText(ITextComponentWrapper editableText, ICaret caret)
		{
			return null;
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x9D05DC", Offset = "0x9D05DC", VA = "0x9D05DC")]
		private Rect CalculateCaretDrawRect(ITextComponentWrapper text, Vector2 offset, int index, int selectionIndex)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x9D07EC", Offset = "0x9D07EC", VA = "0x9D07EC")]
		private int LocalIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x9D08BC", Offset = "0x9D08BC", VA = "0x9D08BC")]
		private int LocalSelectionIndex(ITextComponentWrapper text)
		{
			return default(int);
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x9D0A28", Offset = "0x9D0A28", VA = "0x9D0A28", Slot = "25")]
		protected override void DrawSelection(ICaret caret, Color color, ITextComponentWrapper text, Vector2 offset)
		{
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x9D0CB8", Offset = "0x9D0CB8", VA = "0x9D0CB8", Slot = "26")]
		protected override void DrawCaret(ICaret caret, Color color, ITextComponentWrapper text, Vector2 offset)
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0x9D0F48", Offset = "0x9D0F48", VA = "0x9D0F48", Slot = "34")]
		public override void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0x9D11EC", Offset = "0x9D11EC", VA = "0x9D11EC", Slot = "35")]
		public override void OnDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x9D10E0", Offset = "0x9D10E0", VA = "0x9D10E0")]
		private void MoveCaretWithinBounds(int index, bool withSelection)
		{
		}
	}
}
namespace Qiyi.InputMethod
{
	[Token(Token = "0x200024A")]
	public sealed class CandidateInfo
	{
		[Token(Token = "0x200024B")]
		public class Builder
		{
			[Token(Token = "0x4000D71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private string _word;

			[Token(Token = "0x4000D72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private string _pinyin;

			[Token(Token = "0x4000D73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int _pageNumber;

			[Token(Token = "0x4000D74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private int _indexInPage;

			[Token(Token = "0x4000D75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int _matchLength;

			[Token(Token = "0x6000BCE")]
			[Address(RVA = "0x9D75E8", Offset = "0x9D75E8", VA = "0x9D75E8")]
			public Builder Word(string word)
			{
				return null;
			}

			[Token(Token = "0x6000BCF")]
			[Address(RVA = "0x9D7610", Offset = "0x9D7610", VA = "0x9D7610")]
			public Builder Pinyin(string pinyin)
			{
				return null;
			}

			[Token(Token = "0x6000BD0")]
			[Address(RVA = "0x9D7638", Offset = "0x9D7638", VA = "0x9D7638")]
			public Builder PageNumber(int pageNumber)
			{
				return null;
			}

			[Token(Token = "0x6000BD1")]
			[Address(RVA = "0x9D7640", Offset = "0x9D7640", VA = "0x9D7640")]
			public Builder IndexInPage(int index)
			{
				return null;
			}

			[Token(Token = "0x6000BD2")]
			[Address(RVA = "0x9D7648", Offset = "0x9D7648", VA = "0x9D7648")]
			public Builder MatchLength(int matchLength)
			{
				return null;
			}

			[Token(Token = "0x6000BD3")]
			[Address(RVA = "0x9D7650", Offset = "0x9D7650", VA = "0x9D7650")]
			public CandidateInfo Build()
			{
				return null;
			}

			[Token(Token = "0x6000BD4")]
			[Address(RVA = "0x9D76EC", Offset = "0x9D76EC", VA = "0x9D76EC")]
			public Builder()
			{
			}
		}

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static CandidateInfo NONE;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C474", Offset = "0x72C474")]
		private string <Word>k__BackingField;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C484", Offset = "0x72C484")]
		private string <Pinyin>k__BackingField;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C494", Offset = "0x72C494")]
		private int <PageNumber>k__BackingField;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C4A4", Offset = "0x72C4A4")]
		private int <IndexInPage>k__BackingField;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C4B4", Offset = "0x72C4B4")]
		private int <MatchLength>k__BackingField;

		[Token(Token = "0x17000139")]
		public string Word
		{
			[Token(Token = "0x6000BC3")]
			[Address(RVA = "0xE22118", Offset = "0xE22118", VA = "0xE22118")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730C40", Offset = "0x730C40")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BC2")]
			[Address(RVA = "0xE22110", Offset = "0xE22110", VA = "0xE22110")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730C30", Offset = "0x730C30")]
			private set
			{
			}
		}

		[Token(Token = "0x1700013A")]
		public string Pinyin
		{
			[Token(Token = "0x6000BC5")]
			[Address(RVA = "0xE22128", Offset = "0xE22128", VA = "0xE22128")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730C60", Offset = "0x730C60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BC4")]
			[Address(RVA = "0xE22120", Offset = "0xE22120", VA = "0xE22120")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730C50", Offset = "0x730C50")]
			private set
			{
			}
		}

		[Token(Token = "0x1700013B")]
		public int PageNumber
		{
			[Token(Token = "0x6000BC7")]
			[Address(RVA = "0xE22138", Offset = "0xE22138", VA = "0xE22138")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730C80", Offset = "0x730C80")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000BC6")]
			[Address(RVA = "0xE22130", Offset = "0xE22130", VA = "0xE22130")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730C70", Offset = "0x730C70")]
			private set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public int IndexInPage
		{
			[Token(Token = "0x6000BC9")]
			[Address(RVA = "0xE22148", Offset = "0xE22148", VA = "0xE22148")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730CA0", Offset = "0x730CA0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000BC8")]
			[Address(RVA = "0xE22140", Offset = "0xE22140", VA = "0xE22140")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730C90", Offset = "0x730C90")]
			private set
			{
			}
		}

		[Token(Token = "0x1700013D")]
		public int MatchLength
		{
			[Token(Token = "0x6000BCB")]
			[Address(RVA = "0xE22158", Offset = "0xE22158", VA = "0xE22158")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730CC0", Offset = "0x730CC0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000BCA")]
			[Address(RVA = "0xE22150", Offset = "0xE22150", VA = "0xE22150")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730CB0", Offset = "0x730CB0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xE22160", Offset = "0xE22160", VA = "0xE22160")]
		private CandidateInfo()
		{
		}
	}
	[Token(Token = "0x200024C")]
	internal class CandidateSource : ICandidateSource
	{
		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _globalIndex;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Page> _pages;

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xE23EB4", Offset = "0xE23EB4", VA = "0xE23EB4", Slot = "7")]
		public List<Page> GetPages()
		{
			return null;
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0xE23EBC", Offset = "0xE23EBC", VA = "0xE23EBC", Slot = "4")]
		public CandidateInfo GetNextCandidate(Func<CandidateInfo> RequestMorePage)
		{
			return null;
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0xE2407C", Offset = "0xE2407C", VA = "0xE2407C", Slot = "6")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0xE240D4", Offset = "0xE240D4", VA = "0xE240D4", Slot = "5")]
		public bool AddPage(Page page)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xE24198", Offset = "0xE24198", VA = "0xE24198")]
		public CandidateSource()
		{
		}
	}
	[Token(Token = "0x200024D")]
	internal class DummyIMProvider : IInputMethodProvider
	{
		[Token(Token = "0x4000D78")]
		private const uint PAGE_SIZE = 48u;

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0xE4CA44", Offset = "0xE4CA44", VA = "0xE4CA44", Slot = "4")]
		public void Initialize(Action OnSuccess, Action OnFail, MonoBehaviour monoObject)
		{
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0xE4CA60", Offset = "0xE4CA60", VA = "0xE4CA60", Slot = "5")]
		public void ShutDown()
		{
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0xE4CA64", Offset = "0xE4CA64", VA = "0xE4CA64", Slot = "6")]
		public Page Convert(string input)
		{
			return null;
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0xE4CCBC", Offset = "0xE4CCBC", VA = "0xE4CCBC", Slot = "7")]
		public Page HandleSelection(string compositionString, int pageNumber, int selectedIndexInPage)
		{
			return null;
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0xE4D0C4", Offset = "0xE4D0C4", VA = "0xE4D0C4", Slot = "8")]
		public Page PageDown()
		{
			return null;
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0xE4CD1C", Offset = "0xE4CD1C", VA = "0xE4CD1C")]
		private Page WordPrediction(int pageNumber, int indexInPage)
		{
			return null;
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0xE4CB54", Offset = "0xE4CB54", VA = "0xE4CB54")]
		private List<CandidateInfo> GetCandidates(int count, int pageNumber, string pinyin)
		{
			return null;
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0xE4D1AC", Offset = "0xE4D1AC", VA = "0xE4D1AC")]
		public DummyIMProvider()
		{
		}
	}
	[Token(Token = "0x200024E")]
	internal interface ICandidateSource
	{
		[Token(Token = "0x6000BE2")]
		CandidateInfo GetNextCandidate(Func<CandidateInfo> OnRunOut);

		[Token(Token = "0x6000BE3")]
		bool AddPage(Page page);

		[Token(Token = "0x6000BE4")]
		void Clear();

		[Token(Token = "0x6000BE5")]
		List<Page> GetPages();
	}
	[Token(Token = "0x200024F")]
	internal interface IInputMethodProvider
	{
		[Token(Token = "0x6000BE6")]
		void Initialize(Action OnSuccess, Action OnFail, MonoBehaviour monoObject);

		[Token(Token = "0x6000BE7")]
		void ShutDown();

		[Token(Token = "0x6000BE8")]
		Page Convert(string input);

		[Token(Token = "0x6000BE9")]
		Page HandleSelection(string compositionString, int pageNumber, int selectedIndexInPage);

		[Token(Token = "0x6000BEA")]
		Page PageDown();
	}
	[Token(Token = "0x2000250")]
	public interface IInputMethodView
	{
		[Token(Token = "0x6000BEB")]
		MonoBehaviour GetMonoContext();

		[Token(Token = "0x6000BEC")]
		void InitFail();

		[Token(Token = "0x6000BED")]
		void InitSuccess();
	}
	[Token(Token = "0x2000251")]
	internal class InputMethod : MonoBehaviour, IInputMethodView
	{
		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int MAX_INPUT_LENGTH;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static InputMethod _instance;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C4C4", Offset = "0x72C4C4")]
		private InputMethodImpl <Impl>k__BackingField;

		[Token(Token = "0x1700013E")]
		private InputMethodImpl Impl
		{
			[Token(Token = "0x6000BEF")]
			[Address(RVA = "0xB17518", Offset = "0xB17518", VA = "0xB17518")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730CE0", Offset = "0x730CE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BEE")]
			[Address(RVA = "0xB17510", Offset = "0xB17510", VA = "0xB17510")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730CD0", Offset = "0x730CD0")]
			set
			{
			}
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0xB17520", Offset = "0xB17520", VA = "0xB17520")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0xB1785C", Offset = "0xB1785C", VA = "0xB1785C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0xB17988", Offset = "0xB17988", VA = "0xB17988", Slot = "4")]
		public MonoBehaviour GetMonoContext()
		{
			return null;
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0xB1798C", Offset = "0xB1798C", VA = "0xB1798C", Slot = "5")]
		public void InitFail()
		{
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0xB17990", Offset = "0xB17990", VA = "0xB17990", Slot = "6")]
		public void InitSuccess()
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0xB179FC", Offset = "0xB179FC", VA = "0xB179FC")]
		public static bool HandleInput(string input)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0xB17CFC", Offset = "0xB17CFC", VA = "0xB17CFC")]
		public static bool HandleSelection(string compositionString, int pageNumber, int indexInPage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0xB18030", Offset = "0xB18030", VA = "0xB18030")]
		public static CandidateInfo GetCandidate()
		{
			return null;
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0xB18278", Offset = "0xB18278", VA = "0xB18278")]
		public static string GetPinyinSep(int page, int index)
		{
			return null;
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0xB18624", Offset = "0xB18624", VA = "0xB18624")]
		public InputMethod()
		{
		}
	}
	[Token(Token = "0x2000252")]
	internal class InputMethodImpl
	{
		[Token(Token = "0x2000253")]
		private static class IMComponentFactory
		{
			[Token(Token = "0x6000C05")]
			[Address(RVA = "0x9DC950", Offset = "0x9DC950", VA = "0x9DC950")]
			internal static IInputMethodProvider CreateIMProvider()
			{
				return null;
			}

			[Token(Token = "0x6000C06")]
			[Address(RVA = "0x9DC9A8", Offset = "0x9DC9A8", VA = "0x9DC9A8")]
			internal static ICandidateSource CreateCandidateSource()
			{
				return null;
			}
		}

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IInputMethodProvider _imProvider;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ICandidateSource _candidateSource;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private IInputMethodView _view;

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0xB17664", Offset = "0xB17664", VA = "0xB17664")]
		public InputMethodImpl(IInputMethodView view)
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0xB1867C", Offset = "0xB1867C", VA = "0xB1867C")]
		private void OnInitSuccess()
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0xB1879C", Offset = "0xB1879C", VA = "0xB1879C")]
		private void OnInitFail()
		{
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0xB18898", Offset = "0xB18898", VA = "0xB18898")]
		private CandidateInfo OnRunOut()
		{
			return null;
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0xB1891C", Offset = "0xB1891C", VA = "0xB1891C")]
		private bool PageDown()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0xB178D8", Offset = "0xB178D8", VA = "0xB178D8")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0xB183E8", Offset = "0xB183E8", VA = "0xB183E8")]
		public string GetPinyinSep(int page, int index)
		{
			return null;
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0xB17B48", Offset = "0xB17B48", VA = "0xB17B48")]
		public bool HandleInput(string input)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0xB17E64", Offset = "0xB17E64", VA = "0xB17E64")]
		public bool HandleSelection(string compositionString, int pageNumber, int indexInPage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0xB18168", Offset = "0xB18168", VA = "0xB18168")]
		public CandidateInfo GetCandidate()
		{
			return null;
		}
	}
	[Token(Token = "0x2000254")]
	internal class Page
	{
		[Token(Token = "0x2000255")]
		public class Builder
		{
			[Token(Token = "0x4000D86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int _pageSize;

			[Token(Token = "0x4000D87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private bool _hasNextPage;

			[Token(Token = "0x4000D88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			private bool _hasPrevPage;

			[Token(Token = "0x4000D89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private string _input;

			[Token(Token = "0x4000D8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int _pageNumber;

			[Token(Token = "0x4000D8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<CandidateInfo> _candidates;

			[Token(Token = "0x6000C16")]
			[Address(RVA = "0x9E1FC0", Offset = "0x9E1FC0", VA = "0x9E1FC0")]
			public Builder PageSize(int pageSize)
			{
				return null;
			}

			[Token(Token = "0x6000C17")]
			[Address(RVA = "0x9E1FC8", Offset = "0x9E1FC8", VA = "0x9E1FC8")]
			public Builder HasNextPage(bool hasNextPage)
			{
				return null;
			}

			[Token(Token = "0x6000C18")]
			[Address(RVA = "0x9E1FD4", Offset = "0x9E1FD4", VA = "0x9E1FD4")]
			public Builder HasPrevPage(bool hasPrevPage)
			{
				return null;
			}

			[Token(Token = "0x6000C19")]
			[Address(RVA = "0x9E1FE0", Offset = "0x9E1FE0", VA = "0x9E1FE0")]
			public Builder Input(string input)
			{
				return null;
			}

			[Token(Token = "0x6000C1A")]
			[Address(RVA = "0x9E2008", Offset = "0x9E2008", VA = "0x9E2008")]
			public Builder Candidates(List<CandidateInfo> candidates)
			{
				return null;
			}

			[Token(Token = "0x6000C1B")]
			[Address(RVA = "0x9E2030", Offset = "0x9E2030", VA = "0x9E2030")]
			public Builder PageNumber(int num)
			{
				return null;
			}

			[Token(Token = "0x6000C1C")]
			[Address(RVA = "0x9E2038", Offset = "0x9E2038", VA = "0x9E2038")]
			public Page Build()
			{
				return null;
			}

			[Token(Token = "0x6000C1D")]
			[Address(RVA = "0x9E20DC", Offset = "0x9E20DC", VA = "0x9E20DC")]
			public Builder()
			{
			}
		}

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Page EMPTY;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C4D4", Offset = "0x72C4D4")]
		private int <PageSize>k__BackingField;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C4E4", Offset = "0x72C4E4")]
		private bool <HasNextPage>k__BackingField;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C4F4", Offset = "0x72C4F4")]
		private bool <HasPrevPage>k__BackingField;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C504", Offset = "0x72C504")]
		private string <Input>k__BackingField;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C514", Offset = "0x72C514")]
		private int <PageNumber>k__BackingField;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C524", Offset = "0x72C524")]
		private List<CandidateInfo> <Candidates>k__BackingField;

		[Token(Token = "0x1700013F")]
		public int PageSize
		{
			[Token(Token = "0x6000C08")]
			[Address(RVA = "0xD10DAC", Offset = "0xD10DAC", VA = "0xD10DAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730D00", Offset = "0x730D00")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C07")]
			[Address(RVA = "0xD10DA4", Offset = "0xD10DA4", VA = "0xD10DA4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730CF0", Offset = "0x730CF0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000140")]
		public bool HasNextPage
		{
			[Token(Token = "0x6000C0A")]
			[Address(RVA = "0xD10DC0", Offset = "0xD10DC0", VA = "0xD10DC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730D20", Offset = "0x730D20")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C09")]
			[Address(RVA = "0xD10DB4", Offset = "0xD10DB4", VA = "0xD10DB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730D10", Offset = "0x730D10")]
			private set
			{
			}
		}

		[Token(Token = "0x17000141")]
		public bool HasPrevPage
		{
			[Token(Token = "0x6000C0C")]
			[Address(RVA = "0xD10DD4", Offset = "0xD10DD4", VA = "0xD10DD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730D40", Offset = "0x730D40")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C0B")]
			[Address(RVA = "0xD10DC8", Offset = "0xD10DC8", VA = "0xD10DC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730D30", Offset = "0x730D30")]
			private set
			{
			}
		}

		[Token(Token = "0x17000142")]
		public string Input
		{
			[Token(Token = "0x6000C0E")]
			[Address(RVA = "0xD10DE4", Offset = "0xD10DE4", VA = "0xD10DE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730D60", Offset = "0x730D60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C0D")]
			[Address(RVA = "0xD10DDC", Offset = "0xD10DDC", VA = "0xD10DDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730D50", Offset = "0x730D50")]
			private set
			{
			}
		}

		[Token(Token = "0x17000143")]
		public int PageNumber
		{
			[Token(Token = "0x6000C10")]
			[Address(RVA = "0xD10DF4", Offset = "0xD10DF4", VA = "0xD10DF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730D80", Offset = "0x730D80")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C0F")]
			[Address(RVA = "0xD10DEC", Offset = "0xD10DEC", VA = "0xD10DEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730D70", Offset = "0x730D70")]
			private set
			{
			}
		}

		[Token(Token = "0x17000144")]
		public List<CandidateInfo> Candidates
		{
			[Token(Token = "0x6000C12")]
			[Address(RVA = "0xD10E04", Offset = "0xD10E04", VA = "0xD10E04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730DA0", Offset = "0x730DA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C11")]
			[Address(RVA = "0xD10DFC", Offset = "0xD10DFC", VA = "0xD10DFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730D90", Offset = "0x730D90")]
			private set
			{
			}
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0xD10E0C", Offset = "0xD10E0C", VA = "0xD10E0C")]
		private Page()
		{
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0xD10E14", Offset = "0xD10E14", VA = "0xD10E14", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000256")]
	internal class PinyinIMProvider : IInputMethodProvider
	{
		[Token(Token = "0x2000257")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728C48", Offset = "0x728C48")]
		private sealed class <InitPinyinIme>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public string fromPath;

			[Token(Token = "0x4000D98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string toPath;

			[Token(Token = "0x4000D99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public PinyinIMProvider <>4__this;

			[Token(Token = "0x4000D9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private string[] <>7__wrap1;

			[Token(Token = "0x4000D9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <>7__wrap2;

			[Token(Token = "0x4000D9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private string <file>5__4;

			[Token(Token = "0x4000D9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private WWW <www>5__5;

			[Token(Token = "0x17000145")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C32")]
				[Address(RVA = "0x9E452C", Offset = "0x9E452C", VA = "0x9E452C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000146")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C34")]
				[Address(RVA = "0x9E4574", Offset = "0x9E4574", VA = "0x9E4574", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C2F")]
			[Address(RVA = "0x9E3344", Offset = "0x9E3344", VA = "0x9E3344")]
			[DebuggerHidden]
			public <InitPinyinIme>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6000C30")]
			[Address(RVA = "0x9E3370", Offset = "0x9E3370", VA = "0x9E3370", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C31")]
			[Address(RVA = "0x9E3374", Offset = "0x9E3374", VA = "0x9E3374", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C33")]
			[Address(RVA = "0x9E4534", Offset = "0x9E4534", VA = "0x9E4534", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D8C")]
		private const int MAX_INPUT_LEGNTH = 20;

		[Token(Token = "0x4000D8D")]
		private const int WORD_BUFFER_SIZE = 24;

		[Token(Token = "0x4000D8E")]
		private const uint PAGE_SIZE = 48u;

		[Token(Token = "0x4000D8F")]
		private const string DLL_NAME = "sogou_ime";

		[Token(Token = "0x4000D90")]
		private const string DICT_FOLDER_NAME = "Dict";

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Action _onSuccess;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Action _onFail;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string _currentInput;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private MonoBehaviour _monoContext;

		[PreserveSig]
		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0xAD5B18", Offset = "0xAD5B18", VA = "0xAD5B18")]
		private static extern bool InitPinyinNative(string dictPath, uint fuzzy, uint pageSize = 0u);

		[PreserveSig]
		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0xAD5BC4", Offset = "0xAD5BC4", VA = "0xAD5BC4")]
		private static extern int ConvertNative(string input, StringBuilder pinyinSep, out bool hasNextPage);

		[PreserveSig]
		[Token(Token = "0x6000C20")]
		[Address(RVA = "0xAD5CB0", Offset = "0xAD5CB0", VA = "0xAD5CB0")]
		private static extern int NextWordNative(StringBuilder builder, int index);

		[PreserveSig]
		[Token(Token = "0x6000C21")]
		[Address(RVA = "0xAD5D68", Offset = "0xAD5D68", VA = "0xAD5D68")]
		private static extern int WordPredictionNative(int pageNumber, int selected, out bool hasNextPage);

		[PreserveSig]
		[Token(Token = "0x6000C22")]
		[Address(RVA = "0xAD5E18", Offset = "0xAD5E18", VA = "0xAD5E18")]
		private static extern void DeactiveInputMethodNative();

		[PreserveSig]
		[Token(Token = "0x6000C23")]
		[Address(RVA = "0xAD5E8C", Offset = "0xAD5E8C", VA = "0xAD5E8C")]
		private static extern int PageDownNative(out bool hasNextPage, out int nativePageNumber);

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0xAD5F34", Offset = "0xAD5F34", VA = "0xAD5F34", Slot = "4")]
		public void Initialize(Action OnSuccess, Action OnFail, MonoBehaviour monoObject)
		{
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0xAD6110", Offset = "0xAD6110", VA = "0xAD6110", Slot = "5")]
		public void ShutDown()
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0xAD6134", Offset = "0xAD6134", VA = "0xAD6134", Slot = "6")]
		public Page Convert(string input)
		{
			return null;
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0xAD65C0", Offset = "0xAD65C0", VA = "0xAD65C0", Slot = "8")]
		public Page PageDown()
		{
			return null;
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xAD67C0", Offset = "0xAD67C0", VA = "0xAD67C0", Slot = "7")]
		public Page HandleSelection(string compositionString, int pageNumber, int selectedIndexInPage)
		{
			return null;
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0xAD6824", Offset = "0xAD6824", VA = "0xAD6824")]
		private Page WordPrediction(int pageNumber, int selectedIndexInPage)
		{
			return null;
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xAD6BB4", Offset = "0xAD6BB4", VA = "0xAD6BB4")]
		private void ResetBuffer(StringBuilder builder)
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0xAD6068", Offset = "0xAD6068", VA = "0xAD6068")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x730DB0", Offset = "0x730DB0")]
		private IEnumerator InitPinyinIme(string fromPath, string toPath)
		{
			return null;
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0xAD63DC", Offset = "0xAD63DC", VA = "0xAD63DC")]
		private List<CandidateInfo> GetCandidates(int count, int pageNumber, string pinyin)
		{
			return null;
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xAD6A20", Offset = "0xAD6A20", VA = "0xAD6A20")]
		private List<CandidateInfo> GetPredictionCandidates(int count, int pageNumber)
		{
			return null;
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0xAD6C04", Offset = "0xAD6C04", VA = "0xAD6C04")]
		public PinyinIMProvider()
		{
		}
	}
}
namespace Qiyi.InputMethod.Keyboard
{
	[Token(Token = "0x2000258")]
	public class CandidateItemPool
	{
		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameObject pooledItem;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<GameObject> pool;

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xE221CC", Offset = "0xE221CC", VA = "0xE221CC")]
		public CandidateItemPool(GameObject pooledItem)
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xE2226C", Offset = "0xE2226C", VA = "0xE2226C")]
		public GameObject GetPooledObject(Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0xE22540", Offset = "0xE22540", VA = "0xE22540")]
		public void RecycleObject(GameObject obj)
		{
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0xE2258C", Offset = "0xE2258C", VA = "0xE2258C")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x2000259")]
	public class CandidatePager : MonoBehaviour, ICandidatePager
	{
		[Token(Token = "0x200025A")]
		private class CandidateItem
		{
			[Token(Token = "0x4000DBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C5F4", Offset = "0x72C5F4")]
			private CandidateInfo <Info>k__BackingField;

			[Token(Token = "0x4000DBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C604", Offset = "0x72C604")]
			private float <ItemWidth>k__BackingField;

			[Token(Token = "0x17000149")]
			public CandidateInfo Info
			{
				[Token(Token = "0x6000C5A")]
				[Address(RVA = "0x9D7D44", Offset = "0x9D7D44", VA = "0x9D7D44")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730FD0", Offset = "0x730FD0")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000C59")]
				[Address(RVA = "0x9D7D3C", Offset = "0x9D7D3C", VA = "0x9D7D3C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730FC0", Offset = "0x730FC0")]
				private set
				{
				}
			}

			[Token(Token = "0x1700014A")]
			public float ItemWidth
			{
				[Token(Token = "0x6000C5C")]
				[Address(RVA = "0x9D7D54", Offset = "0x9D7D54", VA = "0x9D7D54")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730FF0", Offset = "0x730FF0")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000C5B")]
				[Address(RVA = "0x9D7D4C", Offset = "0x9D7D4C", VA = "0x9D7D4C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730FE0", Offset = "0x730FE0")]
				private set
				{
				}
			}

			[Token(Token = "0x6000C5D")]
			[Address(RVA = "0x9D7D5C", Offset = "0x9D7D5C", VA = "0x9D7D5C")]
			public CandidateItem(CandidateInfo info, float width)
			{
			}
		}

		[Token(Token = "0x200025B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728C58", Offset = "0x728C58")]
		private sealed class <ExpandPanelAnimation>d__44 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CandidatePager <>4__this;

			[Token(Token = "0x4000DC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <timer>5__2;

			[Token(Token = "0x1700014B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C61")]
				[Address(RVA = "0x9D7900", Offset = "0x9D7900", VA = "0x9D7900", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C63")]
				[Address(RVA = "0x9D7948", Offset = "0x9D7948", VA = "0x9D7948", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C5E")]
			[Address(RVA = "0x9D775C", Offset = "0x9D775C", VA = "0x9D775C")]
			[DebuggerHidden]
			public <ExpandPanelAnimation>d__44(int <>1__state)
			{
			}

			[Token(Token = "0x6000C5F")]
			[Address(RVA = "0x9D7788", Offset = "0x9D7788", VA = "0x9D7788", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C60")]
			[Address(RVA = "0x9D778C", Offset = "0x9D778C", VA = "0x9D778C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C62")]
			[Address(RVA = "0x9D7908", Offset = "0x9D7908", VA = "0x9D7908", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200025C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728C68", Offset = "0x728C68")]
		private sealed class <FoldPanelAnimation>d__45 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CandidatePager <>4__this;

			[Token(Token = "0x4000DC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <timer>5__2;

			[Token(Token = "0x1700014D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C67")]
				[Address(RVA = "0x9D7AF4", Offset = "0x9D7AF4", VA = "0x9D7AF4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C69")]
				[Address(RVA = "0x9D7B3C", Offset = "0x9D7B3C", VA = "0x9D7B3C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C64")]
			[Address(RVA = "0x9D7950", Offset = "0x9D7950", VA = "0x9D7950")]
			[DebuggerHidden]
			public <FoldPanelAnimation>d__45(int <>1__state)
			{
			}

			[Token(Token = "0x6000C65")]
			[Address(RVA = "0x9D797C", Offset = "0x9D797C", VA = "0x9D797C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C66")]
			[Address(RVA = "0x9D7980", Offset = "0x9D7980", VA = "0x9D7980", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C68")]
			[Address(RVA = "0x9D7AFC", Offset = "0x9D7AFC", VA = "0x9D7AFC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200025D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728C78", Offset = "0x728C78")]
		private sealed class <>c__DisplayClass53_0
		{
			[Token(Token = "0x4000DC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Action<CandidateInfo> onclick;

			[Token(Token = "0x4000DC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public CandidateItem data;

			[Token(Token = "0x6000C6A")]
			[Address(RVA = "0x9D76F4", Offset = "0x9D76F4", VA = "0x9D76F4")]
			public <>c__DisplayClass53_0()
			{
			}

			[Token(Token = "0x6000C6B")]
			[Address(RVA = "0x9D76FC", Offset = "0x9D76FC", VA = "0x9D76FC")]
			internal void <BindCandidateObject>b__0()
			{
			}
		}

		[Token(Token = "0x200025E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728C88", Offset = "0x728C88")]
		private sealed class <TranslateXBy>d__60 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CandidatePager <>4__this;

			[Token(Token = "0x4000DCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float offset;

			[Token(Token = "0x4000DCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform t;

			[Token(Token = "0x4000DCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Vector3 <currentPosition>5__2;

			[Token(Token = "0x4000DCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <speed>5__3;

			[Token(Token = "0x4000DD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <delta>5__4;

			[Token(Token = "0x1700014F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C6F")]
				[Address(RVA = "0x9D7CEC", Offset = "0x9D7CEC", VA = "0x9D7CEC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000150")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C71")]
				[Address(RVA = "0x9D7D34", Offset = "0x9D7D34", VA = "0x9D7D34", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C6C")]
			[Address(RVA = "0x9D7B44", Offset = "0x9D7B44", VA = "0x9D7B44")]
			[DebuggerHidden]
			public <TranslateXBy>d__60(int <>1__state)
			{
			}

			[Token(Token = "0x6000C6D")]
			[Address(RVA = "0x9D7B70", Offset = "0x9D7B70", VA = "0x9D7B70", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C6E")]
			[Address(RVA = "0x9D7B74", Offset = "0x9D7B74", VA = "0x9D7B74", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C70")]
			[Address(RVA = "0x9D7CF4", Offset = "0x9D7CF4", VA = "0x9D7CF4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Button m_PageUpButton;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Button m_PageDownButton;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject m_CandidateItemPrefab;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_LinePrefab;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private RectTransform m_ContentRect;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Text m_InputPinyinText;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float m_LineWidth;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Button m_ExpandButton;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Button m_FoldButton;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private float m_ItemMinWidth;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private int m_RowCount;

		[Token(Token = "0x4000DAB")]
		private const int UNIT_WORD_LENGTH = 3;

		[Token(Token = "0x4000DAC")]
		private const float ANIMATION_DURATION = 0.2f;

		[Token(Token = "0x4000DAD")]
		private const float PAGING_DURATION = 0.7f;

		[Token(Token = "0x4000DAE")]
		private const int CANDIDATE_QUEUE_SIZE = 5;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_InitialRectWidth;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float m_FoldedHeight;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_ExpandedHeight;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float m_PagerScrolledOffset;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CandidateItemPool m_CandidateItemPool;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private List<CandidateItem> m_CandidateBindingQueue;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool m_HasMoreCandidates;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool m_HasPreviousPage;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8A")]
		private bool m_IsExpanded;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int m_CurrentDisplayPage;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int m_TotalPage;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private RectTransform _rect;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool _isAnimating;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C5E4", Offset = "0x72C5E4")]
		private Action<CandidateInfo> <OnCandidateClickDelegate>k__BackingField;

		[Token(Token = "0x17000147")]
		private RectTransform CachedRect
		{
			[Token(Token = "0x6000C39")]
			[Address(RVA = "0xE22664", Offset = "0xE22664", VA = "0xE22664")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C3A")]
			[Address(RVA = "0xE22718", Offset = "0xE22718", VA = "0xE22718")]
			set
			{
			}
		}

		[Token(Token = "0x17000148")]
		public Action<CandidateInfo> OnCandidateClickDelegate
		{
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0xE22964", Offset = "0xE22964", VA = "0xE22964", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730E60", Offset = "0x730E60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C40")]
			[Address(RVA = "0xE2296C", Offset = "0xE2296C", VA = "0xE2296C", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730E70", Offset = "0x730E70")]
			set
			{
			}
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xE22720", Offset = "0xE22720", VA = "0xE22720", Slot = "7")]
		public void Hide()
		{
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0xE22794", Offset = "0xE22794", VA = "0xE22794", Slot = "6")]
		public void Show()
		{
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0xE227BC", Offset = "0xE227BC", VA = "0xE227BC", Slot = "8")]
		public bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xE227E0", Offset = "0xE227E0", VA = "0xE227E0", Slot = "9")]
		public void UpdateWords()
		{
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0xE22974", Offset = "0xE22974", VA = "0xE22974")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0xE229E4", Offset = "0xE229E4", VA = "0xE229E4", Slot = "10")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0xE22B78", Offset = "0xE22B78", VA = "0xE22B78")]
		private void SetupViews()
		{
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0xE22C8C", Offset = "0xE22C8C", VA = "0xE22C8C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0xE22DA0", Offset = "0xE22DA0", VA = "0xE22DA0")]
		private void ExpandPanel(bool animate = true)
		{
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0xE22E4C", Offset = "0xE22E4C", VA = "0xE22E4C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x730E80", Offset = "0x730E80")]
		private IEnumerator ExpandPanelAnimation()
		{
			return null;
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0xE22F60", Offset = "0xE22F60", VA = "0xE22F60")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x730EE0", Offset = "0x730EE0")]
		private IEnumerator FoldPanelAnimation()
		{
			return null;
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0xE22FD8", Offset = "0xE22FD8", VA = "0xE22FD8")]
		private void FoldPanel(bool animate = true)
		{
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0xE2307C", Offset = "0xE2307C", VA = "0xE2307C")]
		private void HandlePageDown()
		{
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0xE23388", Offset = "0xE23388", VA = "0xE23388")]
		private void HandlePageUp()
		{
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0xE23450", Offset = "0xE23450", VA = "0xE23450")]
		private CandidateItem GetNextCandidateData()
		{
			return null;
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0xE23158", Offset = "0xE23158", VA = "0xE23158")]
		private void PopulatePage(Action<CandidateInfo> onItemClick)
		{
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0xE235D0", Offset = "0xE235D0", VA = "0xE235D0")]
		private bool PopulateLine(Transform line, Action<CandidateInfo> onItemClick)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0xE23594", Offset = "0xE23594", VA = "0xE23594")]
		private float CalculateItemWidth(int wordLength, int unitWordLength, float unitWidth)
		{
			return default(float);
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0xE23894", Offset = "0xE23894", VA = "0xE23894")]
		private GameObject BindCandidateObject(Transform parent, Action<CandidateInfo> onclick, CandidateItem data)
		{
			return null;
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0xE23AB4", Offset = "0xE23AB4", VA = "0xE23AB4")]
		private void UpdateDisplayPinyin(string pinyin)
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0xE22814", Offset = "0xE22814", VA = "0xE22814")]
		private void PopulateFirstPage(Action<CandidateInfo> onclick)
		{
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0xE22EC4", Offset = "0xE22EC4", VA = "0xE22EC4")]
		private void UpdatePagerButtonsVisibility()
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0xE23AD8", Offset = "0xE23AD8", VA = "0xE23AD8")]
		private void ClearContent()
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xE22D10", Offset = "0xE22D10", VA = "0xE22D10")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xE232E4", Offset = "0xE232E4", VA = "0xE232E4")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x730F40", Offset = "0x730F40")]
		private IEnumerator TranslateXBy(Transform t, float offset)
		{
			return null;
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0xE23E10", Offset = "0xE23E10", VA = "0xE23E10")]
		public CandidatePager()
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0xE23EA4", Offset = "0xE23EA4", VA = "0xE23EA4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730FA0", Offset = "0x730FA0")]
		private void <Start>b__40_0()
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0xE23EAC", Offset = "0xE23EAC", VA = "0xE23EAC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x730FB0", Offset = "0x730FB0")]
		private void <Start>b__40_1()
		{
		}
	}
	[Token(Token = "0x200025F")]
	public interface ICandidatePager
	{
		[Token(Token = "0x17000151")]
		Action<CandidateInfo> OnCandidateClickDelegate
		{
			[Token(Token = "0x6000C72")]
			get;
			[Token(Token = "0x6000C73")]
			set;
		}

		[Token(Token = "0x6000C74")]
		void Show();

		[Token(Token = "0x6000C75")]
		void Hide();

		[Token(Token = "0x6000C76")]
		bool IsActive();

		[Token(Token = "0x6000C77")]
		void UpdateWords();
	}
	[Token(Token = "0x2000260")]
	public class TextHoverEffect : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text _text;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Color _highlightedColor;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Color _normalColor;

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x128FB3C", Offset = "0x128FB3C", VA = "0x128FB3C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x128FB98", Offset = "0x128FB98", VA = "0x128FB98")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x128FBC8", Offset = "0x128FBC8", VA = "0x128FBC8", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x128FBF8", Offset = "0x128FBF8", VA = "0x128FBF8", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x128FC28", Offset = "0x128FC28", VA = "0x128FC28")]
		public TextHoverEffect()
		{
		}
	}
}
namespace Sumalab_Hands
{
	[Token(Token = "0x2000261")]
	public class HandController : MonoBehaviour
	{
		[Token(Token = "0x2000262")]
		private class TransformStore
		{
			[Token(Token = "0x4000DDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000DDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 localPosition;

			[Token(Token = "0x4000DE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Vector3 localRotation;

			[Token(Token = "0x6000C8B")]
			[Address(RVA = "0x9DC35C", Offset = "0x9DC35C", VA = "0x9DC35C")]
			public TransformStore()
			{
			}
		}

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float ANIMATION_SPEED;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandInteractor.AnimationType defaultAnimation;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HandInteractor m_currentHandController;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HashSet<HandInteractor> m_hsHandControllersHovering;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator m_handAnimator;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private NVRHand Hand;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float lastInput;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform handTransformRoot;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<string, TransformStore> handTransforms;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float scale;

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0xE5B0DC", Offset = "0xE5B0DC", VA = "0xE5B0DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0xE5B378", Offset = "0xE5B378", VA = "0xE5B378")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0xE5B668", Offset = "0xE5B668", VA = "0xE5B668")]
		public void BeginInteraction(NVRInteractable interactable)
		{
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0xE5B7F0", Offset = "0xE5B7F0", VA = "0xE5B7F0")]
		public void EndInteraction(NVRInteractable item)
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0xE5B73C", Offset = "0xE5B73C", VA = "0xE5B73C")]
		private void updateAnimation(HandInteractor handController, bool bHover)
		{
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0xE5B4B8", Offset = "0xE5B4B8", VA = "0xE5B4B8")]
		private void setAnimation(HandInteractor.AnimationType animationType, float squeeze)
		{
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0xE5B82C", Offset = "0xE5B82C", VA = "0xE5B82C")]
		private HandInteractor selectNearest()
		{
			return null;
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0xE5BB14", Offset = "0xE5BB14", VA = "0xE5BB14")]
		private bool isNearer(HandInteractor hc1, HandInteractor hc2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xE5B958", Offset = "0xE5B958", VA = "0xE5B958")]
		private void ResetAnimator()
		{
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xE5BC44", Offset = "0xE5BC44", VA = "0xE5BC44")]
		public void deactivate()
		{
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xE5BC90", Offset = "0xE5BC90", VA = "0xE5BC90")]
		public void activate()
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xE5BCDC", Offset = "0xE5BCDC", VA = "0xE5BCDC")]
		public void showHand(bool bShow)
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0xE5BD18", Offset = "0xE5BD18", VA = "0xE5BD18")]
		public HandController()
		{
		}
	}
	[Token(Token = "0x2000263")]
	public class HandInteractor : NVRInteractable
	{
		[Token(Token = "0x2000264")]
		public enum AnimationType
		{
			[Token(Token = "0x4000DE5")]
			None,
			[Token(Token = "0x4000DE6")]
			Grab,
			[Token(Token = "0x4000DE7")]
			Hilt,
			[Token(Token = "0x4000DE8")]
			Pinch,
			[Token(Token = "0x4000DE9")]
			Sphere,
			[Token(Token = "0x4000DEA")]
			Gun,
			[Token(Token = "0x4000DEB")]
			Misc,
			[Token(Token = "0x4000DEC")]
			Button,
			[Token(Token = "0x4000DED")]
			HandPress
		}

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public AnimationType PickAnimation;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationType HoverAnimation;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float squeeze;

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xE5BE4C", Offset = "0xE5BE4C", VA = "0xE5BE4C")]
		public HandInteractor()
		{
		}
	}
}
namespace OculusSampleFramework
{
	[Token(Token = "0x2000265")]
	public class ColorGrabbable : OVRGrabbable
	{
		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color COLOR_GRAB;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Color COLOR_HIGHLIGHT;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color m_color;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshRenderer[] m_meshRenderers;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_highlight;

		[Token(Token = "0x17000152")]
		public bool Highlight
		{
			[Token(Token = "0x6000C8D")]
			[Address(RVA = "0xE27584", Offset = "0xE27584", VA = "0xE27584")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C8E")]
			[Address(RVA = "0xE2758C", Offset = "0xE2758C", VA = "0xE2758C")]
			set
			{
			}
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0xE27598", Offset = "0xE27598", VA = "0xE27598")]
		protected void UpdateColor()
		{
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xE27760", Offset = "0xE27760", VA = "0xE27760", Slot = "4")]
		public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xE27788", Offset = "0xE27788", VA = "0xE27788", Slot = "5")]
		public override void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0xE277B0", Offset = "0xE277B0", VA = "0xE277B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0xE27660", Offset = "0xE27660", VA = "0xE27660")]
		private void SetColor(Color color)
		{
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0xE27A84", Offset = "0xE27A84", VA = "0xE27A84")]
		public ColorGrabbable()
		{
		}
	}
	[Token(Token = "0x2000266")]
	public class DistanceGrabbable : OVRGrabbable
	{
		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_materialColorField;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabbableCrosshair m_crosshair;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabManager m_crosshairManager;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Renderer m_renderer;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MaterialPropertyBlock m_mpb;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_inRange;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool m_targeted;

		[Token(Token = "0x17000153")]
		public bool InRange
		{
			[Token(Token = "0x6000C96")]
			[Address(RVA = "0xE2FE08", Offset = "0xE2FE08", VA = "0xE2FE08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C97")]
			[Address(RVA = "0xE2FE10", Offset = "0xE2FE10", VA = "0xE2FE10")]
			set
			{
			}
		}

		[Token(Token = "0x17000154")]
		public bool Targeted
		{
			[Token(Token = "0x6000C98")]
			[Address(RVA = "0xE2FF8C", Offset = "0xE2FF8C", VA = "0xE2FF8C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C99")]
			[Address(RVA = "0xE2FF94", Offset = "0xE2FF94", VA = "0xE2FF94")]
			set
			{
			}
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0xE2FFA0", Offset = "0xE2FFA0", VA = "0xE2FFA0", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xE2FE1C", Offset = "0xE2FE1C", VA = "0xE2FE1C")]
		private void RefreshCrosshair()
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0xE3010C", Offset = "0xE3010C", VA = "0xE3010C")]
		public DistanceGrabbable()
		{
		}
	}
	[Token(Token = "0x2000267")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x728C98", Offset = "0x728C98")]
	public class DistanceGrabber : OVRGrabber
	{
		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private float m_spherecastRadius;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private float m_noSnapThreshhold;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private bool m_useSpherecast;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[SerializeField]
		public bool m_preventGrabThroughWalls;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float m_objectPullVelocity;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float m_objectPullMaxRotationRate;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool m_movingObjectToHand;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private float m_maxGrabDistance;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private int m_grabObjectsInLayer;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private int m_obstructionLayer;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private DistanceGrabber m_otherHand;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected DistanceGrabbable m_target;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Collider m_targetCollider;

		[Token(Token = "0x17000155")]
		public bool UseSpherecast
		{
			[Token(Token = "0x6000C9D")]
			[Address(RVA = "0xE49940", Offset = "0xE49940", VA = "0xE49940")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C9E")]
			[Address(RVA = "0xE49948", Offset = "0xE49948", VA = "0xE49948")]
			set
			{
			}
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0xE49964", Offset = "0xE49964", VA = "0xE49964", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0xE49BA4", Offset = "0xE49BA4", VA = "0xE49BA4", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xE4A4BC", Offset = "0xE4A4BC", VA = "0xE4A4BC", Slot = "7")]
		protected override void GrabBegin()
		{
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xE4A950", Offset = "0xE4A950", VA = "0xE4A950", Slot = "8")]
		protected override void MoveGrabbedObject(Vector3 pos, Quaternion rot, bool forceTeleport = false)
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xE4AC10", Offset = "0xE4AC10", VA = "0xE4AC10")]
		private static DistanceGrabbable HitInfoToGrabbable(RaycastHit hitInfo)
		{
			return null;
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xE49E18", Offset = "0xE49E18", VA = "0xE49E18")]
		protected bool FindTarget(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0xE4AD00", Offset = "0xE4AD00", VA = "0xE4AD00")]
		protected bool FindTargetWithSpherecast(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0xE4B15C", Offset = "0xE4B15C", VA = "0xE4B15C", Slot = "9")]
		protected override void GrabVolumeEnable(bool enabled)
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0xE4B174", Offset = "0xE4B174", VA = "0xE4B174", Slot = "10")]
		protected override void OffhandGrabbed(OVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0xE4B17C", Offset = "0xE4B17C", VA = "0xE4B17C")]
		public DistanceGrabber()
		{
		}
	}
	[Token(Token = "0x2000268")]
	public class GrabManager : MonoBehaviour
	{
		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Collider m_grabVolume;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color OutlineColorInRange;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color OutlineColorHighlighted;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color OutlineColorOutOfRange;

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0xE59F60", Offset = "0xE59F60", VA = "0xE59F60")]
		private void OnTriggerEnter(Collider otherCollider)
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xE5A018", Offset = "0xE5A018", VA = "0xE5A018")]
		private void OnTriggerExit(Collider otherCollider)
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0xE5A0D0", Offset = "0xE5A0D0", VA = "0xE5A0D0")]
		public GrabManager()
		{
		}
	}
	[Token(Token = "0x2000269")]
	public class GrabbableCrosshair : MonoBehaviour
	{
		[Token(Token = "0x200026A")]
		public enum CrosshairState
		{
			[Token(Token = "0x4000E10")]
			Disabled,
			[Token(Token = "0x4000E11")]
			Enabled,
			[Token(Token = "0x4000E12")]
			Targeted
		}

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CrosshairState m_state;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_centerEyeAnchor;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject m_targetedCrosshair;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_enabledCrosshair;

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0xE5A190", Offset = "0xE5A190", VA = "0xE5A190")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0xE5A1FC", Offset = "0xE5A1FC", VA = "0xE5A1FC")]
		public void SetState(CrosshairState cs)
		{
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0xE5A298", Offset = "0xE5A298", VA = "0xE5A298")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0xE5A2E0", Offset = "0xE5A2E0", VA = "0xE5A2E0")]
		public GrabbableCrosshair()
		{
		}
	}
	[Token(Token = "0x200026B")]
	public class PauseOnInputLoss : MonoBehaviour
	{
		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0xD14880", Offset = "0xD14880", VA = "0xD14880")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0xD1496C", Offset = "0xD1496C", VA = "0xD1496C")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0xD14978", Offset = "0xD14978", VA = "0xD14978")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0xD14984", Offset = "0xD14984", VA = "0xD14984")]
		public PauseOnInputLoss()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class BoneCapsuleTriggerLogic : MonoBehaviour
	{
		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableToolTags ToolTags;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HashSet<ColliderZone> CollidersTouchingUs;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ColliderZone> _elementsToCleanUp;

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x102E1A8", Offset = "0x102E1A8", VA = "0x102E1A8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x102E1FC", Offset = "0x102E1FC", VA = "0x102E1FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x102E568", Offset = "0x102E568", VA = "0x102E568")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x102E66C", Offset = "0x102E66C", VA = "0x102E66C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x102E200", Offset = "0x102E200", VA = "0x102E200")]
		private void CleanUpDeadColliders()
		{
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x102E770", Offset = "0x102E770", VA = "0x102E770")]
		public BoneCapsuleTriggerLogic()
		{
		}
	}
	[Token(Token = "0x200026D")]
	public class ButtonController : Interactable
	{
		[Token(Token = "0x200026E")]
		public enum ContactTest
		{
			[Token(Token = "0x4000E25")]
			PerpenTest,
			[Token(Token = "0x4000E26")]
			BackwardsPress
		}

		[Token(Token = "0x4000E16")]
		private const float ENTRY_DOT_THRESHOLD = 0.8f;

		[Token(Token = "0x4000E17")]
		private const float PERP_DOT_THRESHOLD = 0.5f;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject _proximityZone;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _contactZone;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _actionZone;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ContactTest[] _contactTests;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform _buttonPlaneCenter;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _makeSureToolIsOnPositiveSide;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private Vector3 _localButtonDirection;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private InteractableToolTags[] _allValidToolsTags;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _toolTagsMask;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private bool _allowMultipleNearFieldInteraction;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C744", Offset = "0x72C744")]
		private InteractableState <CurrentButtonState>k__BackingField;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Dictionary<InteractableTool, InteractableState> _toolToState;

		[Token(Token = "0x17000156")]
		public override int ValidToolTagsMask
		{
			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0xE16C7C", Offset = "0xE16C7C", VA = "0xE16C7C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000157")]
		public Vector3 LocalButtonDirection
		{
			[Token(Token = "0x6000CBB")]
			[Address(RVA = "0xE16C84", Offset = "0xE16C84", VA = "0xE16C84")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000158")]
		public InteractableState CurrentButtonState
		{
			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0xE16C90", Offset = "0xE16C90", VA = "0xE16C90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7310F0", Offset = "0x7310F0")]
			get
			{
				return default(InteractableState);
			}
			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0xE16C98", Offset = "0xE16C98", VA = "0xE16C98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731100", Offset = "0x731100")]
			private set
			{
			}
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0xE16CA0", Offset = "0xE16CA0", VA = "0xE16CA0", Slot = "9")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0xE16DB4", Offset = "0xE16DB4", VA = "0xE16DB4")]
		private void FireInteractionEventsOnDepth(InteractableCollisionDepth oldDepth, InteractableTool collidingTool, InteractionType interactionType)
		{
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0xE16FCC", Offset = "0xE16FCC", VA = "0xE16FCC", Slot = "8")]
		public override void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth)
		{
		}

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0xE17580", Offset = "0xE17580", VA = "0xE17580")]
		private InteractableState GetUpcomingStateNearField(InteractableState oldState, InteractableCollisionDepth newCollisionDepth, bool toolIsInActionZone, bool toolIsInContactZone, bool toolIsInProximity, bool validContact, bool onPositiveSideOfInteractable)
		{
			return default(InteractableState);
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0xE1762C", Offset = "0xE1762C", VA = "0xE1762C")]
		public void ForceResetButton()
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0xE17498", Offset = "0xE17498", VA = "0xE17498")]
		private bool IsValidContact(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xE17734", Offset = "0xE17734", VA = "0xE17734")]
		private bool PassEntryTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xE177B8", Offset = "0xE177B8", VA = "0xE177B8")]
		private bool PassPerpTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xE17844", Offset = "0xE17844", VA = "0xE17844")]
		public ButtonController()
		{
		}
	}
	[Token(Token = "0x200026F")]
	public class ButtonTriggerZone : MonoBehaviour, ColliderZone
	{
		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _parentInteractableObj;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C764", Offset = "0x72C764")]
		private Collider <Collider>k__BackingField;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C774", Offset = "0x72C774")]
		private Interactable <ParentInteractable>k__BackingField;

		[Token(Token = "0x17000159")]
		public Collider Collider
		{
			[Token(Token = "0x6000CC7")]
			[Address(RVA = "0xE19B5C", Offset = "0xE19B5C", VA = "0xE19B5C", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731110", Offset = "0x731110")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CC8")]
			[Address(RVA = "0xE19B64", Offset = "0xE19B64", VA = "0xE19B64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731120", Offset = "0x731120")]
			private set
			{
			}
		}

		[Token(Token = "0x1700015A")]
		public Interactable ParentInteractable
		{
			[Token(Token = "0x6000CC9")]
			[Address(RVA = "0xE19B6C", Offset = "0xE19B6C", VA = "0xE19B6C", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731130", Offset = "0x731130")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CCA")]
			[Address(RVA = "0xE19B74", Offset = "0xE19B74", VA = "0xE19B74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731140", Offset = "0x731140")]
			private set
			{
			}
		}

		[Token(Token = "0x1700015B")]
		public InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6000CCB")]
			[Address(RVA = "0xE19B7C", Offset = "0xE19B7C", VA = "0xE19B7C", Slot = "6")]
			get
			{
				return default(InteractableCollisionDepth);
			}
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xE19BCC", Offset = "0xE19BCC", VA = "0xE19BCC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xE19C60", Offset = "0xE19C60", VA = "0xE19C60")]
		public ButtonTriggerZone()
		{
		}
	}
	[Token(Token = "0x2000270")]
	public interface ColliderZone
	{
		[Token(Token = "0x1700015C")]
		Collider Collider
		{
			[Token(Token = "0x6000CCE")]
			get;
		}

		[Token(Token = "0x1700015D")]
		Interactable ParentInteractable
		{
			[Token(Token = "0x6000CCF")]
			get;
		}

		[Token(Token = "0x1700015E")]
		InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6000CD0")]
			get;
		}
	}
	[Token(Token = "0x2000271")]
	public class ColliderZoneArgs : EventArgs
	{
		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ColliderZone Collider;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float FrameTime;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableTool CollidingTool;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly InteractionType InteractionT;

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xE16F14", Offset = "0xE16F14", VA = "0xE16F14")]
		public ColliderZoneArgs(ColliderZone collider, float frameTime, InteractableTool collidingTool, InteractionType interactionType)
		{
		}
	}
	[Token(Token = "0x2000272")]
	public enum InteractionType
	{
		[Token(Token = "0x4000E2F")]
		Enter,
		[Token(Token = "0x4000E30")]
		Stay,
		[Token(Token = "0x4000E31")]
		Exit
	}
	[Token(Token = "0x2000273")]
	public class HandsManager : MonoBehaviour
	{
		[Token(Token = "0x2000274")]
		public enum HandsVisualMode
		{
			[Token(Token = "0x4000E43")]
			Mesh,
			[Token(Token = "0x4000E44")]
			Skeleton,
			[Token(Token = "0x4000E45")]
			Both
		}

		[Token(Token = "0x2000275")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728CF8", Offset = "0x728CF8")]
		private sealed class <FindSkeletonVisualGameObjects>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandsManager <>4__this;

			[Token(Token = "0x1700016A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CF3")]
				[Address(RVA = "0x9DC900", Offset = "0x9DC900", VA = "0x9DC900", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CF5")]
				[Address(RVA = "0x9DC948", Offset = "0x9DC948", VA = "0x9DC948", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CF0")]
			[Address(RVA = "0x9DC66C", Offset = "0x9DC66C", VA = "0x9DC66C")]
			[DebuggerHidden]
			public <FindSkeletonVisualGameObjects>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6000CF1")]
			[Address(RVA = "0x9DC698", Offset = "0x9DC698", VA = "0x9DC698", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CF2")]
			[Address(RVA = "0x9DC69C", Offset = "0x9DC69C", VA = "0x9DC69C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CF4")]
			[Address(RVA = "0x9DC908", Offset = "0x9DC908", VA = "0x9DC908", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E32")]
		private const string SKELETON_VISUALIZER_NAME = "SkeletonRenderer";

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _leftHand;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _rightHand;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HandsVisualMode VisualMode;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private OVRHand[] _hand;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OVRSkeleton[] _handSkeleton;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRSkeletonRenderer[] _handSkeletonRenderer;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OVRMesh[] _handMesh;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private OVRMeshRenderer[] _handMeshRenderer;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SkinnedMeshRenderer _leftMeshRenderer;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SkinnedMeshRenderer _rightMeshRenderer;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject _leftSkeletonVisual;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject _rightSkeletonVisual;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _currentHandAlpha;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int HandAlphaId;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C7A4", Offset = "0x72C7A4")]
		private static HandsManager <Instance>k__BackingField;

		[Token(Token = "0x1700015F")]
		public OVRHand RightHand
		{
			[Token(Token = "0x6000CD2")]
			[Address(RVA = "0xB12CAC", Offset = "0xB12CAC", VA = "0xB12CAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CD3")]
			[Address(RVA = "0xB12CE4", Offset = "0xB12CE4", VA = "0xB12CE4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000160")]
		public OVRSkeleton RightHandSkeleton
		{
			[Token(Token = "0x6000CD4")]
			[Address(RVA = "0xB12D54", Offset = "0xB12D54", VA = "0xB12D54")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CD5")]
			[Address(RVA = "0xB12D8C", Offset = "0xB12D8C", VA = "0xB12D8C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000161")]
		public OVRSkeletonRenderer RightHandSkeletonRenderer
		{
			[Token(Token = "0x6000CD6")]
			[Address(RVA = "0xB12DFC", Offset = "0xB12DFC", VA = "0xB12DFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CD7")]
			[Address(RVA = "0xB12E34", Offset = "0xB12E34", VA = "0xB12E34")]
			private set
			{
			}
		}

		[Token(Token = "0x17000162")]
		public OVRMesh RightHandMesh
		{
			[Token(Token = "0x6000CD8")]
			[Address(RVA = "0xB12EA4", Offset = "0xB12EA4", VA = "0xB12EA4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CD9")]
			[Address(RVA = "0xB12EDC", Offset = "0xB12EDC", VA = "0xB12EDC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000163")]
		public OVRMeshRenderer RightHandMeshRenderer
		{
			[Token(Token = "0x6000CDA")]
			[Address(RVA = "0xB12F4C", Offset = "0xB12F4C", VA = "0xB12F4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CDB")]
			[Address(RVA = "0xB12F84", Offset = "0xB12F84", VA = "0xB12F84")]
			private set
			{
			}
		}

		[Token(Token = "0x17000164")]
		public OVRHand LeftHand
		{
			[Token(Token = "0x6000CDC")]
			[Address(RVA = "0xB12FF4", Offset = "0xB12FF4", VA = "0xB12FF4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CDD")]
			[Address(RVA = "0xB13028", Offset = "0xB13028", VA = "0xB13028")]
			private set
			{
			}
		}

		[Token(Token = "0x17000165")]
		public OVRSkeleton LeftHandSkeleton
		{
			[Token(Token = "0x6000CDE")]
			[Address(RVA = "0xB13094", Offset = "0xB13094", VA = "0xB13094")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CDF")]
			[Address(RVA = "0xB130C8", Offset = "0xB130C8", VA = "0xB130C8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000166")]
		public OVRSkeletonRenderer LeftHandSkeletonRenderer
		{
			[Token(Token = "0x6000CE0")]
			[Address(RVA = "0xB13134", Offset = "0xB13134", VA = "0xB13134")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CE1")]
			[Address(RVA = "0xB13168", Offset = "0xB13168", VA = "0xB13168")]
			private set
			{
			}
		}

		[Token(Token = "0x17000167")]
		public OVRMesh LeftHandMesh
		{
			[Token(Token = "0x6000CE2")]
			[Address(RVA = "0xB131D4", Offset = "0xB131D4", VA = "0xB131D4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CE3")]
			[Address(RVA = "0xB13208", Offset = "0xB13208", VA = "0xB13208")]
			private set
			{
			}
		}

		[Token(Token = "0x17000168")]
		public OVRMeshRenderer LeftHandMeshRenderer
		{
			[Token(Token = "0x6000CE4")]
			[Address(RVA = "0xB13274", Offset = "0xB13274", VA = "0xB13274")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CE5")]
			[Address(RVA = "0xB132A8", Offset = "0xB132A8", VA = "0xB132A8")]
			private set
			{
			}
		}

		[Token(Token = "0x17000169")]
		public static HandsManager Instance
		{
			[Token(Token = "0x6000CE6")]
			[Address(RVA = "0xB13314", Offset = "0xB13314", VA = "0xB13314")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731150", Offset = "0x731150")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CE7")]
			[Address(RVA = "0xB13360", Offset = "0xB13360", VA = "0xB13360")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731160", Offset = "0x731160")]
			private set
			{
			}
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xB133B4", Offset = "0xB133B4", VA = "0xB133B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xB13788", Offset = "0xB13788", VA = "0xB13788")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0xB13710", Offset = "0xB13710", VA = "0xB13710")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x731170", Offset = "0x731170")]
		private IEnumerator FindSkeletonVisualGameObjects()
		{
			return null;
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0xB13810", Offset = "0xB13810", VA = "0xB13810")]
		public void SwitchVisualization()
		{
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0xB138F4", Offset = "0xB138F4", VA = "0xB138F4")]
		private void SetToCurrentVisualMode()
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0xB13AD4", Offset = "0xB13AD4", VA = "0xB13AD4")]
		public static List<OVRBoneCapsule> GetCapsulesPerBone(OVRSkeleton skeleton, OVRSkeleton.BoneId boneId)
		{
			return null;
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0xB13D10", Offset = "0xB13D10", VA = "0xB13D10")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0xB13E9C", Offset = "0xB13E9C", VA = "0xB13E9C")]
		public HandsManager()
		{
		}
	}
	[Token(Token = "0x2000276")]
	public abstract class Interactable : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000277")]
		public class InteractableStateArgsEvent : UnityEvent<InteractableStateArgs>
		{
			[Token(Token = "0x6000D07")]
			[Address(RVA = "0x9DCA00", Offset = "0x9DCA00", VA = "0x9DCA00")]
			public InteractableStateArgsEvent()
			{
			}
		}

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ColliderZone _proximityZoneCollider;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ColliderZone _contactZoneCollider;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ColliderZone _actionZoneCollider;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractableStateArgsEvent InteractableStateChanged;

		[Token(Token = "0x1700016C")]
		public ColliderZone ProximityCollider
		{
			[Token(Token = "0x6000CF6")]
			[Address(RVA = "0xB18A54", Offset = "0xB18A54", VA = "0xB18A54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016D")]
		public ColliderZone ContactCollider
		{
			[Token(Token = "0x6000CF7")]
			[Address(RVA = "0xB18A5C", Offset = "0xB18A5C", VA = "0xB18A5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016E")]
		public ColliderZone ActionCollider
		{
			[Token(Token = "0x6000CF8")]
			[Address(RVA = "0xB18A64", Offset = "0xB18A64", VA = "0xB18A64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016F")]
		public virtual int ValidToolTagsMask
		{
			[Token(Token = "0x6000CF9")]
			[Address(RVA = "0xB18A6C", Offset = "0xB18A6C", VA = "0xB18A6C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000018")]
		public event Action<ColliderZoneArgs> ProximityZoneEvent
		{
			[Token(Token = "0x6000CFA")]
			[Address(RVA = "0xB18A74", Offset = "0xB18A74", VA = "0xB18A74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731220", Offset = "0x731220")]
			add
			{
			}
			[Token(Token = "0x6000CFB")]
			[Address(RVA = "0xB18B14", Offset = "0xB18B14", VA = "0xB18B14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731230", Offset = "0x731230")]
			remove
			{
			}
		}

		[Token(Token = "0x14000019")]
		public event Action<ColliderZoneArgs> ContactZoneEvent
		{
			[Token(Token = "0x6000CFD")]
			[Address(RVA = "0xB18C24", Offset = "0xB18C24", VA = "0xB18C24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731240", Offset = "0x731240")]
			add
			{
			}
			[Token(Token = "0x6000CFE")]
			[Address(RVA = "0xB18CC4", Offset = "0xB18CC4", VA = "0xB18CC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731250", Offset = "0x731250")]
			remove
			{
			}
		}

		[Token(Token = "0x1400001A")]
		public event Action<ColliderZoneArgs> ActionZoneEvent
		{
			[Token(Token = "0x6000D00")]
			[Address(RVA = "0xB18DD4", Offset = "0xB18DD4", VA = "0xB18DD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731260", Offset = "0x731260")]
			add
			{
			}
			[Token(Token = "0x6000D01")]
			[Address(RVA = "0xB18E74", Offset = "0xB18E74", VA = "0xB18E74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731270", Offset = "0x731270")]
			remove
			{
			}
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0xB18BB4", Offset = "0xB18BB4", VA = "0xB18BB4", Slot = "5")]
		protected virtual void OnProximityZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0xB18D64", Offset = "0xB18D64", VA = "0xB18D64", Slot = "6")]
		protected virtual void OnContactZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0xB18F14", Offset = "0xB18F14", VA = "0xB18F14", Slot = "7")]
		protected virtual void OnActionZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6000D03")]
		public abstract void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth);

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0xB18F84", Offset = "0xB18F84", VA = "0xB18F84", Slot = "9")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0xB190B0", Offset = "0xB190B0", VA = "0xB190B0", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0xB191DC", Offset = "0xB191DC", VA = "0xB191DC")]
		protected Interactable()
		{
		}
	}
	[Token(Token = "0x2000278")]
	public enum InteractableCollisionDepth
	{
		[Token(Token = "0x4000E51")]
		None,
		[Token(Token = "0x4000E52")]
		Proximity,
		[Token(Token = "0x4000E53")]
		Contact,
		[Token(Token = "0x4000E54")]
		Action
	}
	[Token(Token = "0x2000279")]
	public enum InteractableState
	{
		[Token(Token = "0x4000E56")]
		Default,
		[Token(Token = "0x4000E57")]
		ProximityState,
		[Token(Token = "0x4000E58")]
		ContactState,
		[Token(Token = "0x4000E59")]
		ActionState
	}
	[Token(Token = "0x200027A")]
	public class InteractableStateArgs : EventArgs
	{
		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Interactable Interactable;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly InteractableTool Tool;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableState OldInteractableState;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly InteractableState NewInteractableState;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ColliderZoneArgs ColliderArgs;

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0xB19334", Offset = "0xB19334", VA = "0xB19334")]
		public InteractableStateArgs(Interactable interactable, InteractableTool tool, InteractableState newInteractableState, InteractableState oldState, ColliderZoneArgs colliderArgs)
		{
		}
	}
	[Token(Token = "0x200027B")]
	public class InteractableRegistry : MonoBehaviour
	{
		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<Interactable> _interactables;

		[Token(Token = "0x17000170")]
		public static HashSet<Interactable> Interactables
		{
			[Token(Token = "0x6000D09")]
			[Address(RVA = "0xB1923C", Offset = "0xB1923C", VA = "0xB1923C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0xB18FE4", Offset = "0xB18FE4", VA = "0xB18FE4")]
		public static void RegisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0xB19110", Offset = "0xB19110", VA = "0xB19110")]
		public static void UnregisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0xB192A0", Offset = "0xB192A0", VA = "0xB192A0")]
		public InteractableRegistry()
		{
		}
	}
	[Token(Token = "0x200027C")]
	public class InteractableToolsCreator : MonoBehaviour
	{
		[Token(Token = "0x200027D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728D08", Offset = "0x728D08")]
		private sealed class <AttachToolsToHands>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform[] toolObjects;

			[Token(Token = "0x4000E65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isRightHand;

			[Token(Token = "0x4000E66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public InteractableToolsCreator <>4__this;

			[Token(Token = "0x4000E67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private HandsManager <handsManagerObj>5__2;

			[Token(Token = "0x4000E68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private HashSet<Transform>.Enumerator <>7__wrap2;

			[Token(Token = "0x4000E69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Transform <toolObject>5__4;

			[Token(Token = "0x4000E6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private OVRSkeleton <handSkeletonToAttachTo>5__5;

			[Token(Token = "0x17000171")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D16")]
				[Address(RVA = "0x9DCF64", Offset = "0x9DCF64", VA = "0x9DCF64", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000172")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D18")]
				[Address(RVA = "0x9DCFAC", Offset = "0x9DCFAC", VA = "0x9DCFAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D12")]
			[Address(RVA = "0x9DCA4C", Offset = "0x9DCA4C", VA = "0x9DCA4C")]
			[DebuggerHidden]
			public <AttachToolsToHands>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6000D13")]
			[Address(RVA = "0x9DCA78", Offset = "0x9DCA78", VA = "0x9DCA78", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D14")]
			[Address(RVA = "0x9DCAE8", Offset = "0x9DCAE8", VA = "0x9DCAE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D15")]
			[Address(RVA = "0x9DCA94", Offset = "0x9DCA94", VA = "0x9DCA94")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6000D17")]
			[Address(RVA = "0x9DCF6C", Offset = "0x9DCF6C", VA = "0x9DCF6C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform[] LeftHandTools;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform[] RightHandTools;

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0xB1A0B8", Offset = "0xB1A0B8", VA = "0xB1A0B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0xB1A134", Offset = "0xB1A134", VA = "0xB1A134")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x731280", Offset = "0x731280")]
		private IEnumerator AttachToolsToHands(Transform[] toolObjects, bool isRightHand)
		{
			return null;
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0xB1A1D4", Offset = "0xB1A1D4", VA = "0xB1A1D4")]
		private void AttachToolToHandTransform(Transform tool, bool isRightHanded)
		{
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xB1A2BC", Offset = "0xB1A2BC", VA = "0xB1A2BC")]
		public InteractableToolsCreator()
		{
		}
	}
	[Token(Token = "0x200027E")]
	public class InteractableToolsInputRouter : MonoBehaviour
	{
		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InteractableToolsInputRouter _instance;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _leftPinch;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _rightPinch;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<InteractableTool> _leftHandNearTools;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<InteractableTool> _leftHandFarTools;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HashSet<InteractableTool> _rightHandNearTools;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HashSet<InteractableTool> _rightHandFarTools;

		[Token(Token = "0x17000173")]
		public static InteractableToolsInputRouter Instance
		{
			[Token(Token = "0x6000D19")]
			[Address(RVA = "0xB1A2C4", Offset = "0xB1A2C4", VA = "0xB1A2C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xB1A444", Offset = "0xB1A444", VA = "0xB1A444")]
		public void RegisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0xB1A4EC", Offset = "0xB1A4EC", VA = "0xB1A4EC")]
		public void UnregisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0xB1A594", Offset = "0xB1A594", VA = "0xB1A594")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0xB1A840", Offset = "0xB1A840", VA = "0xB1A840")]
		private bool UpdateToolsAndEnableState(HashSet<InteractableTool> tools, bool toolsAreEnabledThisFrame)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0xB1A888", Offset = "0xB1A888", VA = "0xB1A888")]
		private bool UpdateTools(HashSet<InteractableTool> tools, bool resetCollisionData = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0xB1AB38", Offset = "0xB1AB38", VA = "0xB1AB38")]
		private void ToggleToolsEnableState(HashSet<InteractableTool> tools, bool enableState)
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0xB1AC84", Offset = "0xB1AC84", VA = "0xB1AC84")]
		public InteractableToolsInputRouter()
		{
		}
	}
	[Token(Token = "0x200027F")]
	public class FingerTipPokeTool : InteractableTool
	{
		[Token(Token = "0x2000280")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728D18", Offset = "0x728D18")]
		private sealed class <AttachTriggerLogic>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FingerTipPokeTool <>4__this;

			[Token(Token = "0x17000178")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D32")]
				[Address(RVA = "0x9DA4F0", Offset = "0x9DA4F0", VA = "0x9DA4F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000179")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D34")]
				[Address(RVA = "0x9DA538", Offset = "0x9DA538", VA = "0x9DA538", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D2F")]
			[Address(RVA = "0x9DA0BC", Offset = "0x9DA0BC", VA = "0x9DA0BC")]
			[DebuggerHidden]
			public <AttachTriggerLogic>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000D30")]
			[Address(RVA = "0x9DA0E8", Offset = "0x9DA0E8", VA = "0x9DA0E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D31")]
			[Address(RVA = "0x9DA0EC", Offset = "0x9DA0EC", VA = "0x9DA0EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D33")]
			[Address(RVA = "0x9DA4F8", Offset = "0x9DA4F8", VA = "0x9DA4F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E72")]
		private const int NUM_VELOCITY_FRAMES = 10;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private FingerTipPokeToolView _fingerTipPokeToolView;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private OVRPlugin.HandFinger _fingerToFollow;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] _velocityFrames;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _currVelocityFrame;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool _sampledMaxFramesAlready;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 _position;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BoneCapsuleTriggerLogic[] _boneCapsuleTriggerLogic;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _lastScale;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _isInitialized;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private OVRBoneCapsule _capsuleToTrack;

		[Token(Token = "0x17000174")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6000D21")]
			[Address(RVA = "0xE51700", Offset = "0xE51700", VA = "0xE51700", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x17000175")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6000D22")]
			[Address(RVA = "0xE51708", Offset = "0xE51708", VA = "0xE51708", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x17000176")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6000D23")]
			[Address(RVA = "0xE51710", Offset = "0xE51710", VA = "0xE51710", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000177")]
		public override bool EnableState
		{
			[Token(Token = "0x6000D24")]
			[Address(RVA = "0xE51718", Offset = "0xE51718", VA = "0xE51718", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D25")]
			[Address(RVA = "0xE51744", Offset = "0xE51744", VA = "0xE51744", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0xE51780", Offset = "0xE51780", VA = "0xE51780", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0xE51838", Offset = "0xE51838", VA = "0xE51838")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x731330", Offset = "0x731330")]
		private IEnumerator AttachTriggerLogic()
		{
			return null;
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0xE518B0", Offset = "0xE518B0", VA = "0xE518B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0xE51B50", Offset = "0xE51B50", VA = "0xE51B50")]
		private void UpdateAverageVelocity()
		{
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xE51CDC", Offset = "0xE51CDC", VA = "0xE51CDC")]
		private void CheckAndUpdateScale()
		{
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0xE51DD4", Offset = "0xE51DD4", VA = "0xE51DD4", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0xE520CC", Offset = "0xE520CC", VA = "0xE520CC", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xE520D0", Offset = "0xE520D0", VA = "0xE520D0", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xE520D4", Offset = "0xE520D4", VA = "0xE520D4")]
		public FingerTipPokeTool()
		{
		}
	}
	[Token(Token = "0x2000281")]
	public class FingerTipPokeToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _sphereMeshRenderer;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C834", Offset = "0x72C834")]
		private InteractableTool <InteractableTool>k__BackingField;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C844", Offset = "0x72C844")]
		private bool <ToolActivateState>k__BackingField;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C854", Offset = "0x72C854")]
		private float <SphereRadius>k__BackingField;

		[Token(Token = "0x1700017A")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6000D35")]
			[Address(RVA = "0xE520EC", Offset = "0xE520EC", VA = "0xE520EC", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7313E0", Offset = "0x7313E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D36")]
			[Address(RVA = "0xE520F4", Offset = "0xE520F4", VA = "0xE520F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7313F0", Offset = "0x7313F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		public bool EnableState
		{
			[Token(Token = "0x6000D37")]
			[Address(RVA = "0xE520FC", Offset = "0xE520FC", VA = "0xE520FC", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D38")]
			[Address(RVA = "0xE52118", Offset = "0xE52118", VA = "0xE52118", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700017C")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6000D39")]
			[Address(RVA = "0xE52138", Offset = "0xE52138", VA = "0xE52138", Slot = "8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731400", Offset = "0x731400")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D3A")]
			[Address(RVA = "0xE52140", Offset = "0xE52140", VA = "0xE52140", Slot = "9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731410", Offset = "0x731410")]
			set
			{
			}
		}

		[Token(Token = "0x1700017D")]
		public float SphereRadius
		{
			[Token(Token = "0x6000D3B")]
			[Address(RVA = "0xE5214C", Offset = "0xE5214C", VA = "0xE5214C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731420", Offset = "0x731420")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D3C")]
			[Address(RVA = "0xE52154", Offset = "0xE52154", VA = "0xE52154")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731430", Offset = "0x731430")]
			private set
			{
			}
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xE5215C", Offset = "0xE5215C", VA = "0xE5215C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0xE521A4", Offset = "0xE521A4", VA = "0xE521A4", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0xE521A8", Offset = "0xE521A8", VA = "0xE521A8")]
		public FingerTipPokeToolView()
		{
		}
	}
	[Token(Token = "0x2000282")]
	[Flags]
	public enum InteractableToolTags
	{
		[Token(Token = "0x4000E85")]
		None = 0,
		[Token(Token = "0x4000E86")]
		Ray = 1,
		[Token(Token = "0x4000E87")]
		Poke = 4,
		[Token(Token = "0x4000E88")]
		All = -1
	}
	[Token(Token = "0x2000283")]
	public enum ToolInputState
	{
		[Token(Token = "0x4000E8A")]
		Inactive,
		[Token(Token = "0x4000E8B")]
		PrimaryInputDown,
		[Token(Token = "0x4000E8C")]
		PrimaryInputDownStay,
		[Token(Token = "0x4000E8D")]
		PrimaryInputUp
	}
	[Token(Token = "0x2000284")]
	public class InteractableCollisionInfo
	{
		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ColliderZone InteractableCollider;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableCollisionDepth CollisionDepth;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractableTool CollidingTool;

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xB191E4", Offset = "0xB191E4", VA = "0xB191E4")]
		public InteractableCollisionInfo(ColliderZone collider, InteractableCollisionDepth collisionDepth, InteractableTool collidingTool)
		{
		}
	}
	[Token(Token = "0x2000285")]
	public abstract class InteractableTool : MonoBehaviour
	{
		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C864", Offset = "0x72C864")]
		private bool <IsRightHandedTool>k__BackingField;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C874", Offset = "0x72C874")]
		private Vector3 <Velocity>k__BackingField;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C884", Offset = "0x72C884")]
		private Vector3 <InteractionPosition>k__BackingField;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<InteractableCollisionInfo> _currentIntersectingObjects;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Interactable> _addedInteractables;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Interactable> _removedInteractables;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Interactable> _remainingInteractables;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Interactable, InteractableCollisionInfo> _currInteractableToCollisionInfos;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Interactable, InteractableCollisionInfo> _prevInteractableToCollisionInfos;

		[Token(Token = "0x1700017E")]
		public Transform ToolTransform
		{
			[Token(Token = "0x6000D41")]
			[Address(RVA = "0xB193F8", Offset = "0xB193F8", VA = "0xB193F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017F")]
		public bool IsRightHandedTool
		{
			[Token(Token = "0x6000D42")]
			[Address(RVA = "0xB19400", Offset = "0xB19400", VA = "0xB19400")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731440", Offset = "0x731440")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D43")]
			[Address(RVA = "0xB19408", Offset = "0xB19408", VA = "0xB19408")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731450", Offset = "0x731450")]
			set
			{
			}
		}

		[Token(Token = "0x17000180")]
		public abstract InteractableToolTags ToolTags
		{
			[Token(Token = "0x6000D44")]
			get;
		}

		[Token(Token = "0x17000181")]
		public abstract ToolInputState ToolInputState
		{
			[Token(Token = "0x6000D45")]
			get;
		}

		[Token(Token = "0x17000182")]
		public abstract bool IsFarFieldTool
		{
			[Token(Token = "0x6000D46")]
			get;
		}

		[Token(Token = "0x17000183")]
		public Vector3 Velocity
		{
			[Token(Token = "0x6000D47")]
			[Address(RVA = "0xB19414", Offset = "0xB19414", VA = "0xB19414")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731460", Offset = "0x731460")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000D48")]
			[Address(RVA = "0xB19420", Offset = "0xB19420", VA = "0xB19420")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731470", Offset = "0x731470")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000184")]
		public Vector3 InteractionPosition
		{
			[Token(Token = "0x6000D49")]
			[Address(RVA = "0xB1942C", Offset = "0xB1942C", VA = "0xB1942C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731480", Offset = "0x731480")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000D4A")]
			[Address(RVA = "0xB19438", Offset = "0xB19438", VA = "0xB19438")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731490", Offset = "0x731490")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000185")]
		public abstract bool EnableState
		{
			[Token(Token = "0x6000D4F")]
			get;
			[Token(Token = "0x6000D50")]
			set;
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xB19444", Offset = "0xB19444", VA = "0xB19444")]
		public List<InteractableCollisionInfo> GetCurrentIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6000D4C")]
		public abstract List<InteractableCollisionInfo> GetNextIntersectingObjects();

		[Token(Token = "0x6000D4D")]
		public abstract void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone);

		[Token(Token = "0x6000D4E")]
		public abstract void DeFocus();

		[Token(Token = "0x6000D51")]
		public abstract void Initialize();

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xB1944C", Offset = "0xB1944C", VA = "0xB1944C")]
		public KeyValuePair<Interactable, InteractableCollisionInfo> GetFirstCurrentCollisionInfo()
		{
			return default(KeyValuePair<Interactable, InteractableCollisionInfo>);
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xB19498", Offset = "0xB19498", VA = "0xB19498")]
		public void ClearAllCurrentCollisionInfos()
		{
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xB194EC", Offset = "0xB194EC", VA = "0xB194EC", Slot = "13")]
		public virtual void UpdateCurrentCollisionsBasedOnDepth()
		{
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0xB1979C", Offset = "0xB1979C", VA = "0xB1979C", Slot = "14")]
		public virtual void UpdateLatestCollisionData()
		{
		}

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0xB19F28", Offset = "0xB19F28", VA = "0xB19F28")]
		protected InteractableTool()
		{
		}
	}
	[Token(Token = "0x2000286")]
	public interface InteractableToolView
	{
		[Token(Token = "0x17000186")]
		InteractableTool InteractableTool
		{
			[Token(Token = "0x6000D57")]
			get;
		}

		[Token(Token = "0x17000187")]
		bool EnableState
		{
			[Token(Token = "0x6000D59")]
			get;
			[Token(Token = "0x6000D5A")]
			set;
		}

		[Token(Token = "0x17000188")]
		bool ToolActivateState
		{
			[Token(Token = "0x6000D5B")]
			get;
			[Token(Token = "0x6000D5C")]
			set;
		}

		[Token(Token = "0x6000D58")]
		void SetFocusedInteractable(Interactable interactable);
	}
	[Token(Token = "0x2000287")]
	public class PinchStateModule
	{
		[Token(Token = "0x2000288")]
		private enum PinchState
		{
			[Token(Token = "0x4000E9E")]
			None,
			[Token(Token = "0x4000E9F")]
			PinchDown,
			[Token(Token = "0x4000EA0")]
			PinchStay,
			[Token(Token = "0x4000EA1")]
			PinchUp
		}

		[Token(Token = "0x4000E9A")]
		private const float PINCH_STRENGTH_THRESHOLD = 1f;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PinchState _currPinchState;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Interactable _firstFocusedInteractable;

		[Token(Token = "0x17000189")]
		public bool PinchUpAndDownOnFocusedObject
		{
			[Token(Token = "0x6000D5D")]
			[Address(RVA = "0xAD57B8", Offset = "0xAD57B8", VA = "0xAD57B8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018A")]
		public bool PinchSteadyOnFocusedObject
		{
			[Token(Token = "0x6000D5E")]
			[Address(RVA = "0xAD5840", Offset = "0xAD5840", VA = "0xAD5840")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018B")]
		public bool PinchDownOnFocusedObject
		{
			[Token(Token = "0x6000D5F")]
			[Address(RVA = "0xAD58C8", Offset = "0xAD58C8", VA = "0xAD58C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0xAD5950", Offset = "0xAD5950", VA = "0xAD5950")]
		public PinchStateModule()
		{
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0xAD5984", Offset = "0xAD5984", VA = "0xAD5984")]
		public void UpdateState(OVRHand hand, Interactable currFocusedInteractable)
		{
		}
	}
	[Token(Token = "0x2000289")]
	public class RayTool : InteractableTool
	{
		[Token(Token = "0x4000EA2")]
		private const float MINIMUM_RAY_CAST_DISTANCE = 0.8f;

		[Token(Token = "0x4000EA3")]
		private const float COLLIDER_RADIUS = 0.01f;

		[Token(Token = "0x4000EA4")]
		private const int NUM_MAX_PRIMARY_HITS = 10;

		[Token(Token = "0x4000EA5")]
		private const int NUM_MAX_SECONDARY_HITS = 25;

		[Token(Token = "0x4000EA6")]
		private const int NUM_COLLIDERS_TO_TEST = 20;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private RayToolView _rayToolView;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72C8A4", Offset = "0x72C8A4")]
		[SerializeField]
		private float _coneAngleDegrees;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float _farFieldMaxDistance;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PinchStateModule _pinchStateModule;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Interactable _focusedInteractable;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Collider[] _collidersOverlapped;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Interactable _currInteractableCastedAgainst;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _coneAngleReleaseDegrees;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RaycastHit[] _primaryHits;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider[] _secondaryOverlapResults;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _initialized;

		[Token(Token = "0x1700018C")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6000D62")]
			[Address(RVA = "0xADC1CC", Offset = "0xADC1CC", VA = "0xADC1CC", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x1700018D")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6000D63")]
			[Address(RVA = "0xADC1D4", Offset = "0xADC1D4", VA = "0xADC1D4", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x1700018E")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6000D64")]
			[Address(RVA = "0xADC23C", Offset = "0xADC23C", VA = "0xADC23C", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018F")]
		public override bool EnableState
		{
			[Token(Token = "0x6000D65")]
			[Address(RVA = "0xADC244", Offset = "0xADC244", VA = "0xADC244", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D66")]
			[Address(RVA = "0xADC288", Offset = "0xADC288", VA = "0xADC288", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xADC2FC", Offset = "0xADC2FC", VA = "0xADC2FC", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xADC364", Offset = "0xADC364", VA = "0xADC364")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xADC408", Offset = "0xADC408", VA = "0xADC408")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0xADC6C0", Offset = "0xADC6C0", VA = "0xADC6C0")]
		private Vector3 GetRayCastOrigin()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0xADC748", Offset = "0xADC748", VA = "0xADC748", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0xADCB18", Offset = "0xADCB18", VA = "0xADCB18")]
		private bool HasRayReleasedInteractable(Interactable focusedInteractable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0xADCC28", Offset = "0xADCC28", VA = "0xADCC28")]
		private Interactable FindTargetInteractable()
		{
			return null;
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xADCD4C", Offset = "0xADCD4C", VA = "0xADCD4C")]
		private Interactable FindPrimaryRaycastHit(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0xADD050", Offset = "0xADD050", VA = "0xADD050")]
		private Interactable FindInteractableViaConeTest(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xADD3E4", Offset = "0xADD3E4", VA = "0xADD3E4", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0xADD4CC", Offset = "0xADD4CC", VA = "0xADD4CC", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xADD508", Offset = "0xADD508", VA = "0xADD508")]
		public RayTool()
		{
		}
	}
	[Token(Token = "0x200028A")]
	public class RayToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x4000EB2")]
		private const int NUM_RAY_LINE_POSITIONS = 25;

		[Token(Token = "0x4000EB3")]
		private const float DEFAULT_RAY_CAST_DISTANCE = 3f;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _targetTransform;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private LineRenderer _lineRenderer;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _toolActivateState;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _focusedTransform;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] linePositions;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Gradient _oldColorGradient;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Gradient _highLightColorGradient;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C918", Offset = "0x72C918")]
		private InteractableTool <InteractableTool>k__BackingField;

		[Token(Token = "0x17000190")]
		public bool EnableState
		{
			[Token(Token = "0x6000D73")]
			[Address(RVA = "0xADC26C", Offset = "0xADC26C", VA = "0xADC26C", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D74")]
			[Address(RVA = "0xADC2A4", Offset = "0xADC2A4", VA = "0xADC2A4", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x17000191")]
		public bool ToolActivateState
		{
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0xADD614", Offset = "0xADD614", VA = "0xADD614", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D76")]
			[Address(RVA = "0xADC684", Offset = "0xADC684", VA = "0xADC684", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x17000192")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x6000D78")]
			[Address(RVA = "0xADD874", Offset = "0xADD874", VA = "0xADD874", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7314A0", Offset = "0x7314A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D79")]
			[Address(RVA = "0xADD87C", Offset = "0xADD87C", VA = "0xADD87C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7314B0", Offset = "0x7314B0")]
			set
			{
			}
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0xADD61C", Offset = "0xADD61C", VA = "0xADD61C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0xADD420", Offset = "0xADD420", VA = "0xADD420", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0xADD884", Offset = "0xADD884", VA = "0xADD884")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0xADDAF8", Offset = "0xADDAF8", VA = "0xADDAF8")]
		public static Vector3 GetPointOnBezierCurve(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0xADDBE8", Offset = "0xADDBE8", VA = "0xADDBE8")]
		public RayToolView()
		{
		}
	}
	[Token(Token = "0x200028B")]
	public class DistanceGrabberSample : MonoBehaviour
	{
		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool useSpherecast;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool allowGrabThroughWalls;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DistanceGrabber[] m_grabbers;

		[Token(Token = "0x17000193")]
		public bool UseSpherecast
		{
			[Token(Token = "0x6000D7E")]
			[Address(RVA = "0xE4B19C", Offset = "0xE4B19C", VA = "0xE4B19C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D7F")]
			[Address(RVA = "0xE4B1A4", Offset = "0xE4B1A4", VA = "0xE4B1A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000194")]
		public bool AllowGrabThroughWalls
		{
			[Token(Token = "0x6000D80")]
			[Address(RVA = "0xE4B22C", Offset = "0xE4B22C", VA = "0xE4B22C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0xE4B234", Offset = "0xE4B234", VA = "0xE4B234")]
			set
			{
			}
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0xE4B2A0", Offset = "0xE4B2A0", VA = "0xE4B2A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0xE4B564", Offset = "0xE4B564", VA = "0xE4B564")]
		public void ToggleSphereCasting(Toggle t)
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0xE4B574", Offset = "0xE4B574", VA = "0xE4B574")]
		public void ToggleGrabThroughWalls(Toggle t)
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0xE4B584", Offset = "0xE4B584", VA = "0xE4B584")]
		public DistanceGrabberSample()
		{
		}
	}
	[Token(Token = "0x200028C")]
	public class ControllerBoxController : MonoBehaviour
	{
		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TrainLocomotive _locomotive;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private CowController _cowController;

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0xE27B6C", Offset = "0xE27B6C", VA = "0xE27B6C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0xE27B70", Offset = "0xE27B70", VA = "0xE27B70")]
		public void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xE27BA8", Offset = "0xE27BA8", VA = "0xE27BA8")]
		public void DecreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xE27BE0", Offset = "0xE27BE0", VA = "0xE27BE0")]
		public void IncreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xE27C18", Offset = "0xE27C18", VA = "0xE27C18")]
		public void SmokeButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xE27C50", Offset = "0xE27C50", VA = "0xE27C50")]
		public void WhistleButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0xE27C88", Offset = "0xE27C88", VA = "0xE27C88")]
		public void ReverseButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xE27CC0", Offset = "0xE27CC0", VA = "0xE27CC0")]
		public void SwitchVisualization(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xE27D34", Offset = "0xE27D34", VA = "0xE27D34")]
		public void GoMoo(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xE27DA4", Offset = "0xE27DA4", VA = "0xE27DA4")]
		public ControllerBoxController()
		{
		}
	}
	[Token(Token = "0x200028D")]
	public class CowController : MonoBehaviour
	{
		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Animation _cowAnimation;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource _mooCowAudioSource;

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xE27DAC", Offset = "0xE27DAC", VA = "0xE27DAC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xE27DB0", Offset = "0xE27DB0", VA = "0xE27DB0")]
		public void PlayMooSound()
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xE27D68", Offset = "0xE27D68", VA = "0xE27D68")]
		public void GoMooCowGo()
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xE27DF0", Offset = "0xE27DF0", VA = "0xE27DF0")]
		public CowController()
		{
		}
	}
	[Token(Token = "0x200028E")]
	public class PanelHMDFollower : MonoBehaviour
	{
		[Token(Token = "0x200028F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728D38", Offset = "0x728D38")]
		private sealed class <LerpToHMD>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000ECD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000ECE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000ECF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PanelHMDFollower <>4__this;

			[Token(Token = "0x4000ED0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <newPanelPosition>5__2;

			[Token(Token = "0x4000ED1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <startTime>5__3;

			[Token(Token = "0x4000ED2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <endTime>5__4;

			[Token(Token = "0x17000195")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D9C")]
				[Address(RVA = "0x9E22D0", Offset = "0x9E22D0", VA = "0x9E22D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000196")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D9E")]
				[Address(RVA = "0x9E2318", Offset = "0x9E2318", VA = "0x9E2318", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D99")]
			[Address(RVA = "0x9E20E4", Offset = "0x9E20E4", VA = "0x9E20E4")]
			[DebuggerHidden]
			public <LerpToHMD>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0x9E2110", Offset = "0x9E2110", VA = "0x9E2110", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D9B")]
			[Address(RVA = "0x9E2114", Offset = "0x9E2114", VA = "0x9E2114", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0x9E22D8", Offset = "0x9E22D8", VA = "0x9E22D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EC3")]
		private const float TOTAL_DURATION = 3f;

		[Token(Token = "0x4000EC4")]
		private const float HMD_MOVEMENT_THRESHOLD = 0.3f;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _maxDistance;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _minDistance;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _minZDistance;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRCameraRig _cameraRig;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _panelInitialPosition;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _coroutine;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _prevPos;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 _lastMovedToPos;

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0xD110EC", Offset = "0xD110EC", VA = "0xD110EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0xD11198", Offset = "0xD11198", VA = "0xD11198")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0xD113E8", Offset = "0xD113E8", VA = "0xD113E8")]
		private Vector3 CalculateIdealAnchorPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0xD11370", Offset = "0xD11370", VA = "0xD11370")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7314C0", Offset = "0x7314C0")]
		private IEnumerator LerpToHMD()
		{
			return null;
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0xD11434", Offset = "0xD11434", VA = "0xD11434")]
		public PanelHMDFollower()
		{
		}
	}
	[Token(Token = "0x2000290")]
	public class SelectionCylinder : MonoBehaviour
	{
		[Token(Token = "0x2000291")]
		public enum SelectionState
		{
			[Token(Token = "0x4000EDA")]
			Off,
			[Token(Token = "0x4000EDB")]
			Selected,
			[Token(Token = "0x4000EDC")]
			Highlighted
		}

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _selectionMeshRenderer;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _colorId;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material[] _selectionMaterials;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color[] _defaultSelectionColors;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color[] _highlightColors;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SelectionState _currSelectionState;

		[Token(Token = "0x17000197")]
		public SelectionState CurrSelectionState
		{
			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0xAE6E50", Offset = "0xAE6E50", VA = "0xAE6E50")]
			get
			{
				return default(SelectionState);
			}
			[Token(Token = "0x6000DA0")]
			[Address(RVA = "0xAE6E58", Offset = "0xAE6E58", VA = "0xAE6E58")]
			set
			{
			}
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0xAE6FDC", Offset = "0xAE6FDC", VA = "0xAE6FDC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0xAE71E0", Offset = "0xAE71E0", VA = "0xAE71E0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xAE6EE0", Offset = "0xAE6EE0", VA = "0xAE6EE0")]
		private void AffectSelectionColor(Color[] newColors)
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0xAE72CC", Offset = "0xAE72CC", VA = "0xAE72CC")]
		public SelectionCylinder()
		{
		}
	}
	[Token(Token = "0x2000292")]
	public class TrackSegment : MonoBehaviour
	{
		[Token(Token = "0x2000293")]
		public enum SegmentType
		{
			[Token(Token = "0x4000EEB")]
			Straight,
			[Token(Token = "0x4000EEC")]
			LeftTurn,
			[Token(Token = "0x4000EED")]
			RightTurn,
			[Token(Token = "0x4000EEE")]
			Switch
		}

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SegmentType _segmentType;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshFilter _straight;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshFilter _leftTurn;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshFilter _rightTurn;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _gridSize;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int _subDivCount;

		[Token(Token = "0x4000EE3")]
		private const float _originalGridSize = 0.8f;

		[Token(Token = "0x4000EE4")]
		private const float _trackWidth = 0.15f;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject _mesh;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72C9F8", Offset = "0x72C9F8")]
		private float <StartDistance>k__BackingField;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Pose _p1;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Pose _p2;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Pose _endPose;

		[Token(Token = "0x17000198")]
		public float StartDistance
		{
			[Token(Token = "0x6000DA6")]
			[Address(RVA = "0x1290B78", Offset = "0x1290B78", VA = "0x1290B78")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731570", Offset = "0x731570")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DA7")]
			[Address(RVA = "0x1290B80", Offset = "0x1290B80", VA = "0x1290B80")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731580", Offset = "0x731580")]
			set
			{
			}
		}

		[Token(Token = "0x17000199")]
		public float GridSize
		{
			[Token(Token = "0x6000DA8")]
			[Address(RVA = "0x1290B88", Offset = "0x1290B88", VA = "0x1290B88")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DA9")]
			[Address(RVA = "0x1290B90", Offset = "0x1290B90", VA = "0x1290B90")]
			private set
			{
			}
		}

		[Token(Token = "0x1700019A")]
		public int SubDivCount
		{
			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0x1290B98", Offset = "0x1290B98", VA = "0x1290B98")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0x1290BA0", Offset = "0x1290BA0", VA = "0x1290BA0")]
			set
			{
			}
		}

		[Token(Token = "0x1700019B")]
		public SegmentType Type
		{
			[Token(Token = "0x6000DAC")]
			[Address(RVA = "0x1290BA8", Offset = "0x1290BA8", VA = "0x1290BA8")]
			get
			{
				return default(SegmentType);
			}
		}

		[Token(Token = "0x1700019C")]
		public Pose EndPose
		{
			[Token(Token = "0x6000DAD")]
			[Address(RVA = "0x1290BB0", Offset = "0x1290BB0", VA = "0x1290BB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019D")]
		public float Radius
		{
			[Token(Token = "0x6000DAE")]
			[Address(RVA = "0x1290F0C", Offset = "0x1290F0C", VA = "0x1290F0C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700019E")]
		public float SegmentLength
		{
			[Token(Token = "0x6000DB0")]
			[Address(RVA = "0x1290C18", Offset = "0x1290C18", VA = "0x1290C18")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0x1290F1C", Offset = "0x1290F1C", VA = "0x1290F1C")]
		public float setGridSize(float size)
		{
			return default(float);
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0x1290F34", Offset = "0x1290F34", VA = "0x1290F34")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x1290C58", Offset = "0x1290C58", VA = "0x1290C58")]
		public void UpdatePose(float distanceIntoSegment, Pose pose)
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x1290F38", Offset = "0x1290F38", VA = "0x1290F38")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x1290F3C", Offset = "0x1290F3C", VA = "0x1290F3C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x1290FA4", Offset = "0x1290FA4", VA = "0x1290FA4")]
		private void DrawDebugLines()
		{
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x129186C", Offset = "0x129186C", VA = "0x129186C")]
		public void RegenerateTrackAndMesh()
		{
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x1291B18", Offset = "0x1291B18", VA = "0x1291B18")]
		public TrackSegment()
		{
		}
	}
	[Token(Token = "0x2000294")]
	public class TrainButtonVisualController : MonoBehaviour
	{
		[Token(Token = "0x2000295")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728D48", Offset = "0x728D48")]
		private sealed class <ResetPosition>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainButtonVisualController <>4__this;

			[Token(Token = "0x4000F03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x4000F04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <endTime>5__3;

			[Token(Token = "0x1700019F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DC6")]
				[Address(RVA = "0x1B1FA88", Offset = "0x1B1FA88", VA = "0x1B1FA88", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DC8")]
				[Address(RVA = "0x1B1FAD0", Offset = "0x1B1FAD0", VA = "0x1B1FAD0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DC3")]
			[Address(RVA = "0x1B1F8E4", Offset = "0x1B1F8E4", VA = "0x1B1F8E4")]
			[DebuggerHidden]
			public <ResetPosition>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6000DC4")]
			[Address(RVA = "0x1B1F910", Offset = "0x1B1F910", VA = "0x1B1F910", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DC5")]
			[Address(RVA = "0x1B1F914", Offset = "0x1B1F914", VA = "0x1B1F914", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DC7")]
			[Address(RVA = "0x1B1FA90", Offset = "0x1B1FA90", VA = "0x1B1FA90", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EEF")]
		private const float LERP_TO_OLD_POS_DURATION = 1f;

		[Token(Token = "0x4000EF0")]
		private const float LOCAL_SIZE_HALVED = 0.5f;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _meshRenderer;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshRenderer _glowRenderer;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ButtonController _buttonController;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color _buttonContactColor;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color _buttonActionColor;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip _actionSoundEffect;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform _buttonContactTransform;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float _contactMaxDisplacementDistance;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material _buttonMaterial;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Color _buttonDefaultColor;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _materialColorId;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool _buttonInContactOrActionStates;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine _lerpToOldPositionCr;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 _oldPosition;

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x1299D88", Offset = "0x1299D88", VA = "0x1299D88")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x1299E44", Offset = "0x1299E44", VA = "0x1299E44")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x1299EF4", Offset = "0x1299EF4", VA = "0x1299EF4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x129A06C", Offset = "0x129A06C", VA = "0x129A06C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x129A234", Offset = "0x129A234", VA = "0x129A234")]
		private void ActionOrInContactZoneStayEvent(ColliderZoneArgs collisionArgs)
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x129A31C", Offset = "0x129A31C", VA = "0x129A31C")]
		private void InteractableStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x129A530", Offset = "0x129A530", VA = "0x129A530")]
		private void PlaySound(AudioClip clip)
		{
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x129A430", Offset = "0x129A430", VA = "0x129A430")]
		private void StopResetLerping()
		{
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0x129A444", Offset = "0x129A444", VA = "0x129A444")]
		private void LerpToOldPosition()
		{
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0x129A588", Offset = "0x129A588", VA = "0x129A588")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x731590", Offset = "0x731590")]
		private IEnumerator ResetPosition()
		{
			return null;
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0x129A600", Offset = "0x129A600", VA = "0x129A600")]
		public TrainButtonVisualController()
		{
		}
	}
	[Token(Token = "0x2000296")]
	public class TrainCar : TrainCarBase
	{
		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TrainCarBase _parentLocomotive;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected float _distanceBehindParent;

		[Token(Token = "0x170001A1")]
		public float DistanceBehindParentScaled
		{
			[Token(Token = "0x6000DC9")]
			[Address(RVA = "0x129A6B0", Offset = "0x129A6B0", VA = "0x129A6B0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x129A6C0", Offset = "0x129A6C0", VA = "0x129A6C0", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x129A6C8", Offset = "0x129A6C8", VA = "0x129A6C8", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x129AA0C", Offset = "0x129AA0C", VA = "0x129AA0C")]
		public TrainCar()
		{
		}
	}
	[Token(Token = "0x2000297")]
	public abstract class TrainCarBase : MonoBehaviour
	{
		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 OFFSET;

		[Token(Token = "0x4000F08")]
		private const float WHEEL_RADIUS = 0.027f;

		[Token(Token = "0x4000F09")]
		private const float TWO_PI = (float)Math.PI * 2f;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Transform _frontWheels;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Transform _rearWheels;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected TrainTrack _trainTrack;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Transform[] _individualWheels;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72CAF8", Offset = "0x72CAF8")]
		private float <Distance>k__BackingField;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float scale;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Pose _frontPose;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Pose _rearPose;

		[Token(Token = "0x170001A2")]
		public float Distance
		{
			[Token(Token = "0x6000DCD")]
			[Address(RVA = "0x129AB1C", Offset = "0x129AB1C", VA = "0x129AB1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731640", Offset = "0x731640")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DCE")]
			[Address(RVA = "0x129AB24", Offset = "0x129AB24", VA = "0x129AB24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731650", Offset = "0x731650")]
			protected set
			{
			}
		}

		[Token(Token = "0x170001A3")]
		public float Scale
		{
			[Token(Token = "0x6000DCF")]
			[Address(RVA = "0x129AB2C", Offset = "0x129AB2C", VA = "0x129AB2C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0x129AB34", Offset = "0x129AB34", VA = "0x129AB34")]
			set
			{
			}
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x129A6C4", Offset = "0x129A6C4", VA = "0x129A6C4", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x129AB3C", Offset = "0x129AB3C", VA = "0x129AB3C")]
		public void UpdatePose(float distance, TrainCarBase train, Pose pose)
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x129A710", Offset = "0x129A710", VA = "0x129A710")]
		protected void UpdateCarPosition()
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x129A934", Offset = "0x129A934", VA = "0x129A934")]
		protected void RotateCarWheels()
		{
		}

		[Token(Token = "0x6000DD5")]
		public abstract void UpdatePosition();

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x129AA78", Offset = "0x129AA78", VA = "0x129AA78")]
		protected TrainCarBase()
		{
		}
	}
	[Token(Token = "0x2000298")]
	public class TrainCrossingController : MonoBehaviour
	{
		[Token(Token = "0x2000299")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728D58", Offset = "0x728D58")]
		private sealed class <AnimateCrossing>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainCrossingController <>4__this;

			[Token(Token = "0x4000F1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float animationLength;

			[Token(Token = "0x4000F20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <animationEndTime>5__2;

			[Token(Token = "0x4000F21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <lightBlinkDuration>5__3;

			[Token(Token = "0x4000F22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <lightBlinkStartTime>5__4;

			[Token(Token = "0x4000F23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <lightBlinkEndTime>5__5;

			[Token(Token = "0x4000F24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Material <lightToBlinkOn>5__6;

			[Token(Token = "0x4000F25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Material <lightToBlinkOff>5__7;

			[Token(Token = "0x4000F26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Color <onColor>5__8;

			[Token(Token = "0x4000F27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Color <offColor>5__9;

			[Token(Token = "0x170001A4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DE4")]
				[Address(RVA = "0x1B1FD70", Offset = "0x1B1FD70", VA = "0x1B1FD70", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DE6")]
				[Address(RVA = "0x1B1FDB8", Offset = "0x1B1FDB8", VA = "0x1B1FDB8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DE1")]
			[Address(RVA = "0x1B1FAD8", Offset = "0x1B1FAD8", VA = "0x1B1FAD8")]
			[DebuggerHidden]
			public <AnimateCrossing>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6000DE2")]
			[Address(RVA = "0x1B1FB04", Offset = "0x1B1FB04", VA = "0x1B1FB04", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DE3")]
			[Address(RVA = "0x1B1FB08", Offset = "0x1B1FB08", VA = "0x1B1FB08", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DE5")]
			[Address(RVA = "0x1B1FD78", Offset = "0x1B1FD78", VA = "0x1B1FD78", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip[] _crossingSounds;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshRenderer _lightSide1Renderer;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshRenderer _lightSide2Renderer;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material _lightsSide1Mat;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material _lightsSide2Mat;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _colorId;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine _xingAnimationCr;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0x129ACE4", Offset = "0x129ACE4", VA = "0x129ACE4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0x129AD44", Offset = "0x129AD44", VA = "0x129AD44")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0x129AE4C", Offset = "0x129AE4C", VA = "0x129AE4C")]
		public void CrossingButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0x129AFBC", Offset = "0x129AFBC", VA = "0x129AFBC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x129AEAC", Offset = "0x129AEAC", VA = "0x129AEAC")]
		private void ActivateTrainCrossing()
		{
		}

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0x129B098", Offset = "0x129B098", VA = "0x129B098")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x731660", Offset = "0x731660")]
		private IEnumerator AnimateCrossing(float animationLength)
		{
			return null;
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0x129B120", Offset = "0x129B120", VA = "0x129B120")]
		private void AffectMaterials(Material[] materials, Color newColor)
		{
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x129B1CC", Offset = "0x129B1CC", VA = "0x129B1CC")]
		private void ToggleLightObjects(bool enableState)
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x129B22C", Offset = "0x129B22C", VA = "0x129B22C")]
		public TrainCrossingController()
		{
		}
	}
	[Token(Token = "0x200029A")]
	public class TrainLocomotive : TrainCarBase
	{
		[Token(Token = "0x200029B")]
		private enum EngineSoundState
		{
			[Token(Token = "0x4000F46")]
			Start,
			[Token(Token = "0x4000F47")]
			AccelerateOrSetProperSpeed,
			[Token(Token = "0x4000F48")]
			Stop
		}

		[Token(Token = "0x200029C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728D68", Offset = "0x728D68")]
		private sealed class <StartStopTrain>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool startTrain;

			[Token(Token = "0x4000F4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrainLocomotive <>4__this;

			[Token(Token = "0x4000F4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <endSpeed>5__2;

			[Token(Token = "0x4000F4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <timePeriodForSpeedChange>5__3;

			[Token(Token = "0x4000F4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__4;

			[Token(Token = "0x4000F50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <endTime>5__5;

			[Token(Token = "0x4000F51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <startSpeed>5__6;

			[Token(Token = "0x170001A6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DF9")]
				[Address(RVA = "0x1B20034", Offset = "0x1B20034", VA = "0x1B20034", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DFB")]
				[Address(RVA = "0x1B2007C", Offset = "0x1B2007C", VA = "0x1B2007C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DF6")]
			[Address(RVA = "0x1B1FDC0", Offset = "0x1B1FDC0", VA = "0x1B1FDC0")]
			[DebuggerHidden]
			public <StartStopTrain>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x6000DF7")]
			[Address(RVA = "0x1B1FDEC", Offset = "0x1B1FDEC", VA = "0x1B1FDEC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DF8")]
			[Address(RVA = "0x1B1FDF0", Offset = "0x1B1FDF0", VA = "0x1B1FDF0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DFA")]
			[Address(RVA = "0x1B2003C", Offset = "0x1B2003C", VA = "0x1B2003C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F28")]
		private const float MIN_SPEED = 0.2f;

		[Token(Token = "0x4000F29")]
		private const float MAX_SPEED = 2.7f;

		[Token(Token = "0x4000F2A")]
		private const float SMOKE_SPEED_MULTIPLIER = 8f;

		[Token(Token = "0x4000F2B")]
		private const int MAX_PARTICLES_MULTIPLIER = 3;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72CB58", Offset = "0x72CB58")]
		protected float _initialSpeed;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _decreaseSpeedButton;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject _increaseSpeedButton;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject _smokeButton;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject _whistleButton;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject _reverseButton;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private AudioSource _whistleAudioSource;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private AudioClip _whistleSound;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private AudioSource _engineAudioSource;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private AudioClip[] _accelerationSounds;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private AudioClip[] _decelerationSounds;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private AudioClip _startUpSound;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private AudioSource _smokeStackAudioSource;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private AudioClip _smokeSound;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private ParticleSystem _smoke1;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private ParticleSystem _smoke2;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TrainCarBase[] _childCars;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool _isMoving;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool _reverse;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _currentSpeed;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _speedDiv;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _standardRateOverTimeMultiplier;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int _standardMaxParticles;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Coroutine _startStopTrainCr;

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x129B798", Offset = "0x129B798", VA = "0x129B798")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x129B904", Offset = "0x129B904", VA = "0x129B904")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x129B910", Offset = "0x129B910", VA = "0x129B910", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x129BA60", Offset = "0x129BA60", VA = "0x129BA60")]
		public void StartStopStateChanged()
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x129B878", Offset = "0x129B878", VA = "0x129B878")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x731710", Offset = "0x731710")]
		private IEnumerator StartStopTrain(bool startTrain)
		{
			return null;
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x129BAC0", Offset = "0x129BAC0", VA = "0x129BAC0")]
		private float PlayEngineSound(EngineSoundState engineSoundState)
		{
			return default(float);
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x129B9FC", Offset = "0x129B9FC", VA = "0x129B9FC")]
		private void UpdateDistance()
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x129BCDC", Offset = "0x129BCDC", VA = "0x129BCDC")]
		public void DecreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x129BE18", Offset = "0x129BE18", VA = "0x129BE18")]
		public void IncreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x129BD48", Offset = "0x129BD48", VA = "0x129BD48")]
		private void UpdateSmokeEmissionBasedOnSpeed()
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x129BE84", Offset = "0x129BE84", VA = "0x129BE84")]
		private float GetCurrentSmokeEmission()
		{
			return default(float);
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x129BEA4", Offset = "0x129BEA4", VA = "0x129BEA4")]
		public void SmokeButtonStateChanged()
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x129BF30", Offset = "0x129BF30", VA = "0x129BF30")]
		public void WhistleButtonStateChanged()
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x129BFE8", Offset = "0x129BFE8", VA = "0x129BFE8")]
		public void ReverseButtonStateChanged()
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x129BFF8", Offset = "0x129BFF8", VA = "0x129BFF8")]
		public TrainLocomotive()
		{
		}
	}
	[Token(Token = "0x200029D")]
	public class TrainTrack : MonoBehaviour
	{
		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _gridSize;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int _subDivCount;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform _segmentParent;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _trainParent;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _regnerateTrackMeshOnAwake;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _trainLength;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TrackSegment[] _trackSegments;

		[Token(Token = "0x170001A8")]
		public float TrackLength
		{
			[Token(Token = "0x6000DFC")]
			[Address(RVA = "0x129C64C", Offset = "0x129C64C", VA = "0x129C64C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DFD")]
			[Address(RVA = "0x129C654", Offset = "0x129C654", VA = "0x129C654")]
			private set
			{
			}
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x129C65C", Offset = "0x129C65C", VA = "0x129C65C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x129ABBC", Offset = "0x129ABBC", VA = "0x129ABBC")]
		public TrackSegment GetSegment(float distance)
		{
			return null;
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x129C660", Offset = "0x129C660", VA = "0x129C660")]
		public void Regenerate()
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x129C874", Offset = "0x129C874", VA = "0x129C874")]
		private void SetScale(float ratio)
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x129C970", Offset = "0x129C970", VA = "0x129C970")]
		public TrainTrack()
		{
		}
	}
	[Token(Token = "0x200029E")]
	public class Pose
	{
		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xAD9A2C", Offset = "0xAD9A2C", VA = "0xAD9A2C")]
		public Pose()
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xAD9A70", Offset = "0xAD9A70", VA = "0xAD9A70")]
		public Pose(Vector3 position, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x200029F")]
	public class WindmillBladesController : MonoBehaviour
	{
		[Token(Token = "0x20002A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728D78", Offset = "0x728D78")]
		private sealed class <LerpToSpeed>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4000F69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float goalSpeed;

			[Token(Token = "0x4000F6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <totalTime>5__2;

			[Token(Token = "0x4000F6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startSpeed>5__3;

			[Token(Token = "0x170001AA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E11")]
				[Address(RVA = "0x1B22464", Offset = "0x1B22464", VA = "0x1B22464", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E13")]
				[Address(RVA = "0x1B224AC", Offset = "0x1B224AC", VA = "0x1B224AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0x1B22294", Offset = "0x1B22294", VA = "0x1B22294")]
			[DebuggerHidden]
			public <LerpToSpeed>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6000E0F")]
			[Address(RVA = "0x1B222C0", Offset = "0x1B222C0", VA = "0x1B222C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E10")]
			[Address(RVA = "0x1B222C4", Offset = "0x1B222C4", VA = "0x1B222C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E12")]
			[Address(RVA = "0x1B2246C", Offset = "0x1B2246C", VA = "0x1B2246C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002A1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728D88", Offset = "0x728D88")]
		private sealed class <PlaySoundDelayed>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x4000F6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioClip initial;

			[Token(Token = "0x4000F70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float timeDelayAfterInitial;

			[Token(Token = "0x4000F71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AudioClip clip;

			[Token(Token = "0x170001AC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E17")]
				[Address(RVA = "0x1B225BC", Offset = "0x1B225BC", VA = "0x1B225BC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E19")]
				[Address(RVA = "0x1B22604", Offset = "0x1B22604", VA = "0x1B22604", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E14")]
			[Address(RVA = "0x1B224B4", Offset = "0x1B224B4", VA = "0x1B224B4")]
			[DebuggerHidden]
			public <PlaySoundDelayed>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6000E15")]
			[Address(RVA = "0x1B224E0", Offset = "0x1B224E0", VA = "0x1B224E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E16")]
			[Address(RVA = "0x1B224E4", Offset = "0x1B224E4", VA = "0x1B224E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E18")]
			[Address(RVA = "0x1B225C4", Offset = "0x1B225C4", VA = "0x1B225C4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F5B")]
		private const float MAX_TIME = 1f;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip _windMillRotationSound;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip _windMillStartSound;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip _windMillStopSound;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72CD40", Offset = "0x72CD40")]
		private bool <IsMoving>k__BackingField;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _currentSpeed;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _lerpSpeedCoroutine;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine _audioChangeCr;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion _originalRotation;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _rotAngle;

		[Token(Token = "0x170001A9")]
		public bool IsMoving
		{
			[Token(Token = "0x6000E05")]
			[Address(RVA = "0x9D18B8", Offset = "0x9D18B8", VA = "0x9D18B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7317C0", Offset = "0x7317C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E06")]
			[Address(RVA = "0x9D18C0", Offset = "0x9D18C0", VA = "0x9D18C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7317D0", Offset = "0x7317D0")]
			private set
			{
			}
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0x9D18CC", Offset = "0x9D18CC", VA = "0x9D18CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0x9D1908", Offset = "0x9D1908", VA = "0x9D1908")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x9D19EC", Offset = "0x9D19EC", VA = "0x9D19EC")]
		public void SetMoveState(bool newMoveState, float goalSpeed)
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x9D1A60", Offset = "0x9D1A60", VA = "0x9D1A60")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x7317E0", Offset = "0x7317E0")]
		private IEnumerator LerpToSpeed(float goalSpeed)
		{
			return null;
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x9D1AE8", Offset = "0x9D1AE8", VA = "0x9D1AE8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x731840", Offset = "0x731840")]
		private IEnumerator PlaySoundDelayed(AudioClip initial, AudioClip clip, float timeDelayAfterInitial)
		{
			return null;
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x9D1BA0", Offset = "0x9D1BA0", VA = "0x9D1BA0")]
		private void PlaySound(AudioClip clip, bool loop = false)
		{
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0x9D1C0C", Offset = "0x9D1C0C", VA = "0x9D1C0C")]
		public WindmillBladesController()
		{
		}
	}
	[Token(Token = "0x20002A2")]
	public class WindmillController : MonoBehaviour
	{
		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _maxSpeed;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WindmillBladesController _bladesRotation;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0x9D1C14", Offset = "0x9D1C14", VA = "0x9D1C14")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x9D1C88", Offset = "0x9D1C88", VA = "0x9D1C88")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0x9D1D6C", Offset = "0x9D1D6C", VA = "0x9D1D6C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x9D1EA4", Offset = "0x9D1EA4", VA = "0x9D1EA4")]
		private void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x9D1F24", Offset = "0x9D1F24", VA = "0x9D1F24")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x9D2000", Offset = "0x9D2000", VA = "0x9D2000")]
		public WindmillController()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	public enum EUiDisplayType
	{
		[Token(Token = "0x4000F78")]
		EUDT_WorldGeoQuad,
		[Token(Token = "0x4000F79")]
		EUDT_OverlayQuad,
		[Token(Token = "0x4000F7A")]
		EUDT_None,
		[Token(Token = "0x4000F7B")]
		EUDT_MaxDislayTypes
	}
	[Token(Token = "0x20002A4")]
	public class OVROverlaySample : MonoBehaviour
	{
		[Token(Token = "0x20002A5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728D98", Offset = "0x728D98")]
		private sealed class <WaitforOVROverlay>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OVROverlaySample <>4__this;

			[Token(Token = "0x170001AE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E33")]
				[Address(RVA = "0x9E06F4", Offset = "0x9E06F4", VA = "0x9E06F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E35")]
				[Address(RVA = "0x9E073C", Offset = "0x9E073C", VA = "0x9E073C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E30")]
			[Address(RVA = "0x9E04C4", Offset = "0x9E04C4", VA = "0x9E04C4")]
			[DebuggerHidden]
			public <WaitforOVROverlay>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6000E31")]
			[Address(RVA = "0x9E04F0", Offset = "0x9E04F0", VA = "0x9E04F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E32")]
			[Address(RVA = "0x9E04F4", Offset = "0x9E04F4", VA = "0x9E04F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E34")]
			[Address(RVA = "0x9E06FC", Offset = "0x9E06FC", VA = "0x9E06FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inMenu;

		[Token(Token = "0x4000F7D")]
		private const string ovrOverlayID = "OVROverlayID";

		[Token(Token = "0x4000F7E")]
		private const string applicationID = "ApplicationID";

		[Token(Token = "0x4000F7F")]
		private const string noneID = "NoneID";

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Toggle applicationRadioButton;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Toggle noneRadioButton;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x72CD80", Offset = "0x72CD80")]
		public GameObject mainCamera;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject uiCamera;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject uiGeoParent;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject worldspaceGeoParent;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OVROverlay cameraRenderOverlay;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OVROverlay renderingLabelOverlay;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture applicationLabelTexture;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture compositorLabelTexture;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0x72CDB8", Offset = "0x72CDB8")]
		public GameObject prefabForLevelLoadSim;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public OVROverlay cubemapOverlay;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public OVROverlay loadingTextQuadOverlay;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float distanceFromCamToLoadText;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cubeSpawnRadius;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float heightBetweenItems;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int numObjectsPerLevel;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int numLevels;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int numLoopsTrigger;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<GameObject> spawnedCubes;

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0xDAABF0", Offset = "0xDAABF0", VA = "0xDAABF0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0xDAB43C", Offset = "0xDAB43C", VA = "0xDAB43C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0xDAB584", Offset = "0xDAB584", VA = "0xDAB584")]
		private void ActivateWorldGeo()
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0xDAB6C0", Offset = "0xDAB6C0", VA = "0xDAB6C0")]
		private void ActivateOVROverlay()
		{
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0xDAB7FC", Offset = "0xDAB7FC", VA = "0xDAB7FC")]
		private void ActivateNone()
		{
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0xDAB558", Offset = "0xDAB558", VA = "0xDAB558")]
		private void TriggerLoad()
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0xDAB8DC", Offset = "0xDAB8DC", VA = "0xDAB8DC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x731940", Offset = "0x731940")]
		private IEnumerator WaitforOVROverlay()
		{
			return null;
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0xDAB954", Offset = "0xDAB954", VA = "0xDAB954")]
		private void TriggerUnload()
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xDAB048", Offset = "0xDAB048", VA = "0xDAB048")]
		private void CameraAndRenderTargetSetup()
		{
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xDABAA8", Offset = "0xDABAA8", VA = "0xDABAA8")]
		private void SimulateLevelLoad()
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xDAB988", Offset = "0xDAB988", VA = "0xDAB988")]
		private void ClearObjects()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xDABDC0", Offset = "0xDABDC0", VA = "0xDABDC0")]
		public void RadioPressed(string radioLabel, string group, Toggle t)
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xDABEB0", Offset = "0xDABEB0", VA = "0xDABEB0")]
		public OVROverlaySample()
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xDABF40", Offset = "0xDABF40", VA = "0xDABF40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7319A0", Offset = "0x7319A0")]
		private void <Start>b__24_0(Toggle t)
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xDABF98", Offset = "0xDABF98", VA = "0xDABF98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7319B0", Offset = "0x7319B0")]
		private void <Start>b__24_1(Toggle t)
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xDABFF0", Offset = "0xDABFF0", VA = "0xDABFF0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x7319C0", Offset = "0x7319C0")]
		private void <Start>b__24_2(Toggle t)
		{
		}
	}
}
namespace OVRTouchSample
{
	[Token(Token = "0x20002A6")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x728DA8", Offset = "0x728DA8")]
	public class Hand : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002A7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728E08", Offset = "0x728E08")]
		private sealed class <>c
		{
			[Token(Token = "0x4000FB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000FB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<Collider, bool> <>9__28_0;

			[Token(Token = "0x6000E43")]
			[Address(RVA = "0x9DC328", Offset = "0x9DC328", VA = "0x9DC328")]
			public <>c()
			{
			}

			[Token(Token = "0x6000E44")]
			[Address(RVA = "0x9DC330", Offset = "0x9DC330", VA = "0x9DC330")]
			internal bool <Start>b__28_0(Collider childCollider)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000F97")]
		public const string ANIM_LAYER_NAME_POINT = "Point Layer";

		[Token(Token = "0x4000F98")]
		public const string ANIM_LAYER_NAME_THUMB = "Thumb Layer";

		[Token(Token = "0x4000F99")]
		public const string ANIM_PARAM_NAME_FLEX = "Flex";

		[Token(Token = "0x4000F9A")]
		public const string ANIM_PARAM_NAME_POSE = "Pose";

		[Token(Token = "0x4000F9B")]
		public const float THRESH_COLLISION_FLEX = 0.9f;

		[Token(Token = "0x4000F9C")]
		public const float INPUT_RATE_CHANGE = 20f;

		[Token(Token = "0x4000F9D")]
		public const float COLLIDER_SCALE_MIN = 0.01f;

		[Token(Token = "0x4000F9E")]
		public const float COLLIDER_SCALE_MAX = 1f;

		[Token(Token = "0x4000F9F")]
		public const float COLLIDER_SCALE_PER_SECOND = 1f;

		[Token(Token = "0x4000FA0")]
		public const float TRIGGER_DEBOUNCE_TIME = 0.05f;

		[Token(Token = "0x4000FA1")]
		public const float THUMB_DEBOUNCE_TIME = 0.15f;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HandPose m_defaultGrabPose;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] m_colliders;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_collisionEnabled;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRGrabber m_grabber;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Renderer> m_showAfterInputFocusAcquired;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_animLayerIndexThumb;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_animLayerIndexPoint;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_animParamIndexFlex;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_animParamIndexPose;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_isPointing;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool m_isGivingThumbsUp;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_pointBlend;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_thumbsUpBlend;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_collisionScaleCurrent;

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0xE5A2E8", Offset = "0xE5A2E8", VA = "0xE5A2E8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0xE5A344", Offset = "0xE5A344", VA = "0xE5A344")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0xE5A7D8", Offset = "0xE5A7D8", VA = "0xE5A7D8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0xE5A8C4", Offset = "0xE5A8C4", VA = "0xE5A8C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0xE5AA28", Offset = "0xE5AA28", VA = "0xE5AA28")]
		private void UpdateCapTouchStates()
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0xE5AD30", Offset = "0xE5AD30", VA = "0xE5AD30")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0xE5AE28", Offset = "0xE5AE28", VA = "0xE5AE28")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xE5AF88", Offset = "0xE5AF88", VA = "0xE5AF88")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0xE5AAC0", Offset = "0xE5AAC0", VA = "0xE5AAC0")]
		private float InputValueRateChange(bool isDown, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0xE5AB14", Offset = "0xE5AB14", VA = "0xE5AB14")]
		private void UpdateAnimStates()
		{
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0xE5A67C", Offset = "0xE5A67C", VA = "0xE5A67C")]
		private void CollisionEnable(bool enabled)
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0xE5B0C4", Offset = "0xE5B0C4", VA = "0xE5B0C4")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x20002A8")]
	public enum HandPoseId
	{
		[Token(Token = "0x4000FB6")]
		Default,
		[Token(Token = "0x4000FB7")]
		Generic,
		[Token(Token = "0x4000FB8")]
		PingPongBall,
		[Token(Token = "0x4000FB9")]
		Controller
	}
	[Token(Token = "0x20002A9")]
	public class HandPose : MonoBehaviour
	{
		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_allowPointing;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		private bool m_allowThumbsUp;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private HandPoseId m_poseId;

		[Token(Token = "0x170001B0")]
		public bool AllowPointing
		{
			[Token(Token = "0x6000E45")]
			[Address(RVA = "0xB12808", Offset = "0xB12808", VA = "0xB12808")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B1")]
		public bool AllowThumbsUp
		{
			[Token(Token = "0x6000E46")]
			[Address(RVA = "0xB12810", Offset = "0xB12810", VA = "0xB12810")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B2")]
		public HandPoseId PoseId
		{
			[Token(Token = "0x6000E47")]
			[Address(RVA = "0xB12818", Offset = "0xB12818", VA = "0xB12818")]
			get
			{
				return default(HandPoseId);
			}
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xB12820", Offset = "0xB12820", VA = "0xB12820")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x20002AA")]
	public class TouchController : MonoBehaviour
	{
		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x128FEE0", Offset = "0x128FEE0", VA = "0x128FEE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0x12901C8", Offset = "0x12901C8", VA = "0x12901C8")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0x1290224", Offset = "0x1290224", VA = "0x1290224")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x1290268", Offset = "0x1290268", VA = "0x1290268")]
		public TouchController()
		{
		}
	}
}
namespace Oculus.Avatar
{
	[Token(Token = "0x20002AB")]
	public static class AvatarLogger
	{
		[Token(Token = "0x4000FC0")]
		public const string LogAvatar = "[Avatars] - ";

		[Token(Token = "0x4000FC1")]
		public const string Tab = "    ";

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x1029BEC", Offset = "0x1029BEC", VA = "0x1029BEC")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x731A20", Offset = "0x731A20")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x731A20", Offset = "0x731A20")]
		public static void Log(string logMsg)
		{
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x1029C7C", Offset = "0x1029C7C", VA = "0x1029C7C")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x731A80", Offset = "0x731A80")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x731A80", Offset = "0x731A80")]
		public static void Log(string logMsg, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x1029D1C", Offset = "0x1029D1C", VA = "0x1029D1C")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x731AE0", Offset = "0x731AE0")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x731AE0", Offset = "0x731AE0")]
		public static void LogWarning(string logMsg)
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x1029DAC", Offset = "0x1029DAC", VA = "0x1029DAC")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x731B40", Offset = "0x731B40")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x731B40", Offset = "0x731B40")]
		public static void LogError(string logMsg)
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x1029E3C", Offset = "0x1029E3C", VA = "0x1029E3C")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x731BA0", Offset = "0x731BA0")]
		[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0x731BA0", Offset = "0x731BA0")]
		public static void LogError(string logMsg, UnityEngine.Object context)
		{
		}
	}
	[Token(Token = "0x20002AC")]
	public class CAPI
	{
		[Token(Token = "0x20002AD")]
		public delegate void LoggingDelegate(IntPtr str);

		[Token(Token = "0x20002AE")]
		public enum Result
		{
			[Token(Token = "0x4000FCD")]
			Success = 0,
			[Token(Token = "0x4000FCE")]
			Failure = -1000,
			[Token(Token = "0x4000FCF")]
			Failure_InvalidParameter = -1001,
			[Token(Token = "0x4000FD0")]
			Failure_NotInitialized = -1002,
			[Token(Token = "0x4000FD1")]
			Failure_InvalidOperation = -1003,
			[Token(Token = "0x4000FD2")]
			Failure_Unsupported = -1004,
			[Token(Token = "0x4000FD3")]
			Failure_NotYetImplemented = -1005,
			[Token(Token = "0x4000FD4")]
			Failure_OperationFailed = -1006,
			[Token(Token = "0x4000FD5")]
			Failure_InsufficientSize = -1007
		}

		[Token(Token = "0x20002AF")]
		private static class OVRP_1_30_0
		{
			[Token(Token = "0x4000FD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly Version version;

			[PreserveSig]
			[Token(Token = "0x6000EE6")]
			[Address(RVA = "0x9D7488", Offset = "0x9D7488", VA = "0x9D7488")]
			public static extern Result ovrp_SendEvent2(string name, string param, string source);
		}

		[Token(Token = "0x4000FC2")]
		private const string LibFile = "ovravatarloader";

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IntPtr nativeVisemeData;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IntPtr nativeGazeTargetsData;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static IntPtr nativeAvatarLightsData;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static IntPtr DebugLineCountData;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static float[] scratchBufferFloat;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static GameObject debugLineGo;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static string SDKRuntimePrefix;

		[Token(Token = "0x4000FCA")]
		private const string ovrPluginDLL = "OVRPlugin";

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Version ovrPluginVersion;

		[PreserveSig]
		[Token(Token = "0x6000E52")]
		[Address(RVA = "0xE19CCC", Offset = "0xE19CCC", VA = "0xE19CCC")]
		public static extern void ovrAvatar_InitializeAndroidUnity(string appID);

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0xE19D5C", Offset = "0xE19D5C", VA = "0xE19D5C")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0xE19F80", Offset = "0xE19F80", VA = "0xE19F80")]
		public static void Shutdown()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000E55")]
		[Address(RVA = "0xE1A06C", Offset = "0xE1A06C", VA = "0xE1A06C")]
		public static extern void ovrAvatar_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6000E56")]
		[Address(RVA = "0xE1A0DC", Offset = "0xE1A0DC", VA = "0xE1A0DC")]
		public static extern IntPtr ovrAvatarMessage_Pop();

		[PreserveSig]
		[Token(Token = "0x6000E57")]
		[Address(RVA = "0xE1A150", Offset = "0xE1A150", VA = "0xE1A150")]
		public static extern ovrAvatarMessageType ovrAvatarMessage_GetType(IntPtr msg);

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0xE1A1D0", Offset = "0xE1A1D0", VA = "0xE1A1D0")]
		public static ovrAvatarMessage_AvatarSpecification ovrAvatarMessage_GetAvatarSpecification(IntPtr msg)
		{
			return default(ovrAvatarMessage_AvatarSpecification);
		}

		[PreserveSig]
		[Token(Token = "0x6000E59")]
		[Address(RVA = "0xE1A314", Offset = "0xE1A314", VA = "0xE1A314")]
		private static extern IntPtr ovrAvatarMessage_GetAvatarSpecification_Native(IntPtr msg);

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0xE1A394", Offset = "0xE1A394", VA = "0xE1A394")]
		public static ovrAvatarMessage_AssetLoaded ovrAvatarMessage_GetAssetLoaded(IntPtr msg)
		{
			return default(ovrAvatarMessage_AssetLoaded);
		}

		[PreserveSig]
		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0xE1A4D8", Offset = "0xE1A4D8", VA = "0xE1A4D8")]
		private static extern IntPtr ovrAvatarMessage_GetAssetLoaded_Native(IntPtr msg);

		[PreserveSig]
		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0xE1A558", Offset = "0xE1A558", VA = "0xE1A558")]
		public static extern void ovrAvatarMessage_Free(IntPtr msg);

		[PreserveSig]
		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0xE1A5D8", Offset = "0xE1A5D8", VA = "0xE1A5D8")]
		public static extern IntPtr ovrAvatarSpecificationRequest_Create(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0xE1A658", Offset = "0xE1A658", VA = "0xE1A658")]
		public static extern void ovrAvatarSpecificationRequest_Destroy(IntPtr specificationRequest);

		[PreserveSig]
		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0xE1A6D8", Offset = "0xE1A6D8", VA = "0xE1A6D8")]
		public static extern void ovrAvatarSpecificationRequest_SetCombineMeshes(IntPtr specificationRequest, bool useCombinedMesh);

		[PreserveSig]
		[Token(Token = "0x6000E60")]
		[Address(RVA = "0xE1A768", Offset = "0xE1A768", VA = "0xE1A768")]
		public static extern void ovrAvatarSpecificationRequest_SetLookAndFeelVersion(IntPtr specificationRequest, ovrAvatarLookAndFeelVersion version);

		[PreserveSig]
		[Token(Token = "0x6000E61")]
		[Address(RVA = "0xE1A7F8", Offset = "0xE1A7F8", VA = "0xE1A7F8")]
		public static extern void ovrAvatarSpecificationRequest_SetLevelOfDetail(IntPtr specificationRequest, ovrAvatarAssetLevelOfDetail lod);

		[PreserveSig]
		[Token(Token = "0x6000E62")]
		[Address(RVA = "0xE1A888", Offset = "0xE1A888", VA = "0xE1A888")]
		public static extern void ovrAvatar_RequestAvatarSpecification(ulong userID);

		[PreserveSig]
		[Token(Token = "0x6000E63")]
		[Address(RVA = "0xE1A908", Offset = "0xE1A908", VA = "0xE1A908")]
		public static extern void ovrAvatar_RequestAvatarSpecificationFromSpecRequest(IntPtr specificationRequest);

		[PreserveSig]
		[Token(Token = "0x6000E64")]
		[Address(RVA = "0xE1A988", Offset = "0xE1A988", VA = "0xE1A988")]
		public static extern void ovrAvatarSpecificationRequest_SetFallbackLookAndFeelVersion(IntPtr specificationRequest, ovrAvatarLookAndFeelVersion version);

		[PreserveSig]
		[Token(Token = "0x6000E65")]
		[Address(RVA = "0xE1AA18", Offset = "0xE1AA18", VA = "0xE1AA18")]
		public static extern void ovrAvatarSpecificationRequest_SetExpressiveFlag(IntPtr specificationRequest, bool enable);

		[PreserveSig]
		[Token(Token = "0x6000E66")]
		[Address(RVA = "0xE1AAA8", Offset = "0xE1AAA8", VA = "0xE1AAA8")]
		public static extern IntPtr ovrAvatar_Create(IntPtr avatarSpecification, ovrAvatarCapabilities capabilities);

		[PreserveSig]
		[Token(Token = "0x6000E67")]
		[Address(RVA = "0xE1AB38", Offset = "0xE1AB38", VA = "0xE1AB38")]
		public static extern void ovrAvatar_Destroy(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000E68")]
		[Address(RVA = "0xE1ABB8", Offset = "0xE1ABB8", VA = "0xE1ABB8")]
		public static extern void ovrAvatarPose_UpdateBody(IntPtr avatar, ovrAvatarTransform headPose);

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0xE1AC58", Offset = "0xE1AC58", VA = "0xE1AC58")]
		public static void ovrAvatarPose_UpdateVoiceVisualization(IntPtr avatar, float[] pcmData)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0xE1ACD4", Offset = "0xE1ACD4", VA = "0xE1ACD4")]
		private static extern void ovrAvatarPose_UpdateVoiceVisualization_Native(IntPtr avatar, uint pcmDataSize, [In] float[] pcmData);

		[PreserveSig]
		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0xE1AD74", Offset = "0xE1AD74", VA = "0xE1AD74")]
		public static extern void ovrAvatarPose_UpdateHands(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight);

		[PreserveSig]
		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0xE1AE34", Offset = "0xE1AE34", VA = "0xE1AE34")]
		public static extern void ovrAvatarPose_UpdateHandsWithType(IntPtr avatar, ovrAvatarHandInputState inputStateLeft, ovrAvatarHandInputState inputStateRight, ovrAvatarControllerType type);

		[PreserveSig]
		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0xE1AF04", Offset = "0xE1AF04", VA = "0xE1AF04")]
		public static extern void ovrAvatarPose_Finalize(IntPtr avatar, float elapsedSeconds);

		[PreserveSig]
		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0xE1AF94", Offset = "0xE1AF94", VA = "0xE1AF94")]
		public static extern void ovrAvatar_SetLeftControllerVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0xE1B024", Offset = "0xE1B024", VA = "0xE1B024")]
		public static extern void ovrAvatar_SetRightControllerVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6000E70")]
		[Address(RVA = "0xE1B0B4", Offset = "0xE1B0B4", VA = "0xE1B0B4")]
		public static extern void ovrAvatar_SetLeftHandVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6000E71")]
		[Address(RVA = "0xE1B144", Offset = "0xE1B144", VA = "0xE1B144")]
		public static extern void ovrAvatar_SetRightHandVisibility(IntPtr avatar, bool show);

		[PreserveSig]
		[Token(Token = "0x6000E72")]
		[Address(RVA = "0xE1B1D4", Offset = "0xE1B1D4", VA = "0xE1B1D4")]
		public static extern uint ovrAvatarComponent_Count(IntPtr avatar);

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0xE1B254", Offset = "0xE1B254", VA = "0xE1B254")]
		public static void ovrAvatarComponent_Get(IntPtr avatar, uint index, bool includeName, ref ovrAvatarComponent component)
		{
		}

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0xE1B370", Offset = "0xE1B370", VA = "0xE1B370")]
		public static void ovrAvatarComponent_Get(IntPtr componentPtr, bool includeName, ref ovrAvatarComponent component)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000E75")]
		[Address(RVA = "0xE1B2E0", Offset = "0xE1B2E0", VA = "0xE1B2E0")]
		public static extern IntPtr ovrAvatarComponent_Get_Native(IntPtr avatar, uint index);

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0xE1B590", Offset = "0xE1B590", VA = "0xE1B590")]
		public static bool ovrAvatarPose_GetBaseComponent(IntPtr avatar, ref ovrAvatarBaseComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000E77")]
		[Address(RVA = "0xE1B700", Offset = "0xE1B700", VA = "0xE1B700")]
		private static extern IntPtr ovrAvatarPose_GetBaseComponent_Native(IntPtr avatar);

		[Token(Token = "0x6000E78")]
		public static IntPtr MarshalRenderComponent<T>(IntPtr ptr) where T : struct
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0xE1B780", Offset = "0xE1B780", VA = "0xE1B780")]
		public static bool ovrAvatarPose_GetBodyComponent(IntPtr avatar, ref ovrAvatarBodyComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0xE1BA28", Offset = "0xE1BA28", VA = "0xE1BA28")]
		private static extern IntPtr ovrAvatarPose_GetBodyComponent_Native(IntPtr avatar);

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0xE1BAA8", Offset = "0xE1BAA8", VA = "0xE1BAA8")]
		public static bool ovrAvatarPose_GetLeftControllerComponent(IntPtr avatar, ref ovrAvatarControllerComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0xE1BC18", Offset = "0xE1BC18", VA = "0xE1BC18")]
		private static extern IntPtr ovrAvatarPose_GetLeftControllerComponent_Native(IntPtr avatar);

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0xE1BC98", Offset = "0xE1BC98", VA = "0xE1BC98")]
		public static bool ovrAvatarPose_GetRightControllerComponent(IntPtr avatar, ref ovrAvatarControllerComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0xE1BE08", Offset = "0xE1BE08", VA = "0xE1BE08")]
		private static extern IntPtr ovrAvatarPose_GetRightControllerComponent_Native(IntPtr avatar);

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0xE1BE88", Offset = "0xE1BE88", VA = "0xE1BE88")]
		public static bool ovrAvatarPose_GetLeftHandComponent(IntPtr avatar, ref ovrAvatarHandComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000E80")]
		[Address(RVA = "0xE1BFF8", Offset = "0xE1BFF8", VA = "0xE1BFF8")]
		private static extern IntPtr ovrAvatarPose_GetLeftHandComponent_Native(IntPtr avatar);

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0xE1C078", Offset = "0xE1C078", VA = "0xE1C078")]
		public static bool ovrAvatarPose_GetRightHandComponent(IntPtr avatar, ref ovrAvatarHandComponent component)
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000E82")]
		[Address(RVA = "0xE1C1E8", Offset = "0xE1C1E8", VA = "0xE1C1E8")]
		private static extern IntPtr ovrAvatarPose_GetRightHandComponent_Native(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000E83")]
		[Address(RVA = "0xE1C268", Offset = "0xE1C268", VA = "0xE1C268")]
		public static extern void ovrAvatarAsset_BeginLoading(ulong assetID);

		[PreserveSig]
		[Token(Token = "0x6000E84")]
		[Address(RVA = "0xE1C2E8", Offset = "0xE1C2E8", VA = "0xE1C2E8")]
		public static extern bool ovrAvatarAsset_BeginLoadingLOD(ulong assetId, ovrAvatarAssetLevelOfDetail lod);

		[PreserveSig]
		[Token(Token = "0x6000E85")]
		[Address(RVA = "0xE1C380", Offset = "0xE1C380", VA = "0xE1C380")]
		public static extern ovrAvatarAssetType ovrAvatarAsset_GetType(IntPtr assetHandle);

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0xE1C400", Offset = "0xE1C400", VA = "0xE1C400")]
		public static ovrAvatarMeshAssetData ovrAvatarAsset_GetMeshData(IntPtr assetPtr)
		{
			return default(ovrAvatarMeshAssetData);
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0xE1C5D8", Offset = "0xE1C5D8", VA = "0xE1C5D8")]
		public static ovrAvatarMeshAssetDataV2 ovrAvatarAsset_GetCombinedMeshData(IntPtr assetPtr)
		{
			return default(ovrAvatarMeshAssetDataV2);
		}

		[PreserveSig]
		[Token(Token = "0x6000E88")]
		[Address(RVA = "0xE1C730", Offset = "0xE1C730", VA = "0xE1C730")]
		private static extern IntPtr ovrAvatarAsset_GetCombinedMeshData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000E89")]
		[Address(RVA = "0xE1C558", Offset = "0xE1C558", VA = "0xE1C558")]
		private static extern IntPtr ovrAvatarAsset_GetMeshData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0xE1C7B0", Offset = "0xE1C7B0", VA = "0xE1C7B0")]
		public static extern uint ovrAvatarAsset_GetMeshBlendShapeCount(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0xE1C830", Offset = "0xE1C830", VA = "0xE1C830")]
		public static extern IntPtr ovrAvatarAsset_GetMeshBlendShapeName(IntPtr assetPtr, uint index);

		[PreserveSig]
		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0xE1C8C0", Offset = "0xE1C8C0", VA = "0xE1C8C0")]
		public static extern uint ovrAvatarAsset_GetSubmeshCount(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0xE1C940", Offset = "0xE1C940", VA = "0xE1C940")]
		public static extern uint ovrAvatarAsset_GetSubmeshLastIndex(IntPtr assetPtr, uint index);

		[PreserveSig]
		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0xE1C9D0", Offset = "0xE1C9D0", VA = "0xE1C9D0")]
		public static extern IntPtr ovrAvatarAsset_GetMeshBlendShapeVertices(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xE1CA50", Offset = "0xE1CA50", VA = "0xE1CA50")]
		public static extern IntPtr ovrAvatarAsset_GetAvatar(IntPtr assetHandle);

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xE1CAD0", Offset = "0xE1CAD0", VA = "0xE1CAD0")]
		public static ulong[] ovrAvatarAsset_GetCombinedMeshIDs(IntPtr assetHandle)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000E91")]
		[Address(RVA = "0xE1CD5C", Offset = "0xE1CD5C", VA = "0xE1CD5C")]
		public static extern IntPtr ovrAvatarAsset_GetCombinedMeshIDs_Native(IntPtr assetHandle, IntPtr count);

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0xE1CDEC", Offset = "0xE1CDEC", VA = "0xE1CDEC")]
		public static void ovrAvatar_GetCombinedMeshAlphaData(IntPtr avatar, ref ulong textureID, ref Vector4 offset)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000E93")]
		[Address(RVA = "0xE1D01C", Offset = "0xE1D01C", VA = "0xE1D01C")]
		public static extern IntPtr ovrAvatar_GetCombinedMeshAlphaData_Native(IntPtr avatar, IntPtr textureIDPtr, IntPtr offsetPtr);

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0xE1D0B4", Offset = "0xE1D0B4", VA = "0xE1D0B4")]
		public static ovrAvatarTextureAssetData ovrAvatarAsset_GetTextureData(IntPtr assetPtr)
		{
			return default(ovrAvatarTextureAssetData);
		}

		[PreserveSig]
		[Token(Token = "0x6000E95")]
		[Address(RVA = "0xE1D204", Offset = "0xE1D204", VA = "0xE1D204")]
		private static extern IntPtr ovrAvatarAsset_GetTextureData_Native(IntPtr assetPtr);

		[PreserveSig]
		[Token(Token = "0x6000E96")]
		[Address(RVA = "0xE1D284", Offset = "0xE1D284", VA = "0xE1D284")]
		private static extern IntPtr ovrAvatarAsset_GetMaterialData_Native(IntPtr assetPtr);

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0xE1D304", Offset = "0xE1D304", VA = "0xE1D304")]
		public static ovrAvatarMaterialState ovrAvatarAsset_GetMaterialState(IntPtr assetPtr)
		{
			return default(ovrAvatarMaterialState);
		}

		[PreserveSig]
		[Token(Token = "0x6000E98")]
		[Address(RVA = "0xE1D458", Offset = "0xE1D458", VA = "0xE1D458")]
		public static extern ovrAvatarRenderPartType ovrAvatarRenderPart_GetType(IntPtr renderPart);

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0xE1D4D8", Offset = "0xE1D4D8", VA = "0xE1D4D8")]
		public static ovrAvatarRenderPart_SkinnedMeshRender ovrAvatarRenderPart_GetSkinnedMeshRender(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRender);
		}

		[PreserveSig]
		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0xE1D62C", Offset = "0xE1D62C", VA = "0xE1D62C")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRender_Native(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0xE1D6AC", Offset = "0xE1D6AC", VA = "0xE1D6AC")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRender_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xE1D73C", Offset = "0xE1D73C", VA = "0xE1D73C")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBS_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xE1D7CC", Offset = "0xE1D7CC", VA = "0xE1D7CC")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBSV2_GetTransform(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xE1D85C", Offset = "0xE1D85C", VA = "0xE1D85C")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRender_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0xE1D8DC", Offset = "0xE1D8DC", VA = "0xE1D8DC")]
		public static extern bool ovrAvatarSkinnedMeshRender_MaterialStateChanged(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0xE1D964", Offset = "0xE1D964", VA = "0xE1D964")]
		public static extern bool ovrAvatarSkinnedMeshRenderPBSV2_MaterialStateChanged(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0xE1D9EC", Offset = "0xE1D9EC", VA = "0xE1D9EC")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRenderPBS_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0xE1DA6C", Offset = "0xE1DA6C", VA = "0xE1DA6C")]
		public static extern ovrAvatarVisibilityFlags ovrAvatarSkinnedMeshRenderPBSV2_GetVisibilityMask(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xE1DAEC", Offset = "0xE1DAEC", VA = "0xE1DAEC")]
		public static extern ovrAvatarMaterialState ovrAvatarSkinnedMeshRender_GetMaterialState(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0xE1DBA0", Offset = "0xE1DBA0", VA = "0xE1DBA0")]
		public static extern ovrAvatarPBSMaterialState ovrAvatarSkinnedMeshRenderPBSV2_GetPBSMaterialState(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0xE1DC30", Offset = "0xE1DC30", VA = "0xE1DC30")]
		public static extern ovrAvatarExpressiveParameters ovrAvatar_GetExpressiveParameters(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0xE1DCC0", Offset = "0xE1DCC0", VA = "0xE1DCC0")]
		public static extern ulong ovrAvatarSkinnedMeshRender_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0xE1DD40", Offset = "0xE1DD40", VA = "0xE1DD40")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0xE1DDC0", Offset = "0xE1DDC0", VA = "0xE1DDC0")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBSV2_GetDirtyJoints(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0xE1DE40", Offset = "0xE1DE40", VA = "0xE1DE40")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRender_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0xE1DED8", Offset = "0xE1DED8", VA = "0xE1DED8")]
		public static extern void ovrAvatar_SetActionUnitOnsetSpeed(IntPtr avatar, float onsetSpeed);

		[PreserveSig]
		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0xE1DF68", Offset = "0xE1DF68", VA = "0xE1DF68")]
		public static extern void ovrAvatar_SetActionUnitFalloffSpeed(IntPtr avatar, float falloffSpeed);

		[PreserveSig]
		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0xE1DFF8", Offset = "0xE1DFF8", VA = "0xE1DFF8")]
		public static extern void ovrAvatar_SetVisemeMultiplier(IntPtr avatar, float visemeMultiplier);

		[PreserveSig]
		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0xE1E088", Offset = "0xE1E088", VA = "0xE1E088")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBS_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0xE1E120", Offset = "0xE1E120", VA = "0xE1E120")]
		public static extern ovrAvatarTransform ovrAvatarSkinnedMeshRenderPBSV2_GetJointTransform(IntPtr renderPart, uint jointIndex);

		[PreserveSig]
		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0xE1E1B8", Offset = "0xE1E1B8", VA = "0xE1E1B8")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetAlbedoTextureAssetID(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0xE1E238", Offset = "0xE1E238", VA = "0xE1E238")]
		public static extern ulong ovrAvatarSkinnedMeshRenderPBS_GetSurfaceTextureAssetID(IntPtr renderPart);

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0xE1E2B8", Offset = "0xE1E2B8", VA = "0xE1E2B8")]
		public static ovrAvatarRenderPart_SkinnedMeshRenderPBS ovrAvatarRenderPart_GetSkinnedMeshRenderPBS(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRenderPBS);
		}

		[PreserveSig]
		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0xE1E40C", Offset = "0xE1E40C", VA = "0xE1E40C")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRenderPBS_Native(IntPtr renderPart);

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0xE1E48C", Offset = "0xE1E48C", VA = "0xE1E48C")]
		public static ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2 ovrAvatarRenderPart_GetSkinnedMeshRenderPBSV2(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_SkinnedMeshRenderPBS_V2);
		}

		[PreserveSig]
		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0xE1E5E0", Offset = "0xE1E5E0", VA = "0xE1E5E0")]
		private static extern IntPtr ovrAvatarRenderPart_GetSkinnedMeshRenderPBSV2_Native(IntPtr renderPart);

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0xE1E660", Offset = "0xE1E660", VA = "0xE1E660")]
		public static void ovrAvatarSkinnedMeshRender_GetBlendShapeParams(IntPtr renderPart, ref ovrAvatarBlendShapeParams blendParams)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0xE1E79C", Offset = "0xE1E79C", VA = "0xE1E79C")]
		private static extern IntPtr ovrAvatarSkinnedMeshRender_GetBlendShapeParams_Native(IntPtr renderPart);

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0xE1E81C", Offset = "0xE1E81C", VA = "0xE1E81C")]
		public static ovrAvatarRenderPart_ProjectorRender ovrAvatarRenderPart_GetProjectorRender(IntPtr renderPart)
		{
			return default(ovrAvatarRenderPart_ProjectorRender);
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0xE1E9F0", Offset = "0xE1E9F0", VA = "0xE1E9F0")]
		public static ovrAvatarPBSMaterialState[] ovrAvatar_GetBodyPBSMaterialStates(IntPtr renderPart)
		{
			return null;
		}

		[PreserveSig]
		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0xE1ECD0", Offset = "0xE1ECD0", VA = "0xE1ECD0")]
		private static extern IntPtr ovrAvatar_GetBodyPBSMaterialStates_Native(IntPtr avatar, IntPtr count);

		[PreserveSig]
		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0xE1E970", Offset = "0xE1E970", VA = "0xE1E970")]
		private static extern IntPtr ovrAvatarRenderPart_GetProjectorRender_Native(IntPtr renderPart);

		[PreserveSig]
		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0xE1ED60", Offset = "0xE1ED60", VA = "0xE1ED60")]
		public static extern uint ovrAvatar_GetReferencedAssetCount(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0xE1EDE0", Offset = "0xE1EDE0", VA = "0xE1EDE0")]
		public static extern ulong ovrAvatar_GetReferencedAsset(IntPtr avatar, uint index);

		[PreserveSig]
		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xE1EE70", Offset = "0xE1EE70", VA = "0xE1EE70")]
		public static extern void ovrAvatar_SetLeftHandGesture(IntPtr avatar, ovrAvatarHandGesture gesture);

		[PreserveSig]
		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xE1EF00", Offset = "0xE1EF00", VA = "0xE1EF00")]
		public static extern void ovrAvatar_SetRightHandGesture(IntPtr avatar, ovrAvatarHandGesture gesture);

		[PreserveSig]
		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0xE1EF90", Offset = "0xE1EF90", VA = "0xE1EF90")]
		public static extern void ovrAvatar_SetLeftHandCustomGesture(IntPtr avatar, uint jointCount, [In] ovrAvatarTransform[] customJointTransforms);

		[PreserveSig]
		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0xE1F030", Offset = "0xE1F030", VA = "0xE1F030")]
		public static extern void ovrAvatar_SetRightHandCustomGesture(IntPtr avatar, uint jointCount, [In] ovrAvatarTransform[] customJointTransforms);

		[PreserveSig]
		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0xE1F0D0", Offset = "0xE1F0D0", VA = "0xE1F0D0")]
		public static extern void ovrAvatar_UpdatePoseFromPacket(IntPtr avatar, IntPtr packet, float secondsFromStart);

		[PreserveSig]
		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xE1F170", Offset = "0xE1F170", VA = "0xE1F170")]
		public static extern void ovrAvatarPacket_BeginRecording(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0xE1F1F0", Offset = "0xE1F1F0", VA = "0xE1F1F0")]
		public static extern IntPtr ovrAvatarPacket_EndRecording(IntPtr avatar);

		[PreserveSig]
		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xE1F270", Offset = "0xE1F270", VA = "0xE1F270")]
		public static extern uint ovrAvatarPacket_GetSize(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xE1F2F0", Offset = "0xE1F2F0", VA = "0xE1F2F0")]
		public static extern float ovrAvatarPacket_GetDurationSeconds(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0xE1F370", Offset = "0xE1F370", VA = "0xE1F370")]
		public static extern void ovrAvatarPacket_Free(IntPtr packet);

		[PreserveSig]
		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0xE1F3F0", Offset = "0xE1F3F0", VA = "0xE1F3F0")]
		public static extern bool ovrAvatarPacket_Write(IntPtr packet, uint bufferSize, [Out] byte[] buffer);

		[PreserveSig]
		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0xE1F518", Offset = "0xE1F518", VA = "0xE1F518")]
		public static extern IntPtr ovrAvatarPacket_Read(uint bufferSize, [In] byte[] buffer);

		[PreserveSig]
		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0xE1F5B0", Offset = "0xE1F5B0", VA = "0xE1F5B0")]
		private static extern void ovrAvatar_SetInternalForceASTCTextures(bool value);

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0xE1F630", Offset = "0xE1F630", VA = "0xE1F630")]
		public static void ovrAvatar_SetForceASTCTextures(bool value)
		{
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0xE1F690", Offset = "0xE1F690", VA = "0xE1F690")]
		public static void ovrAvatar_OverrideExpressiveLogic(IntPtr avatar, ovrAvatarBlendShapeParams blendParams)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0xE1F7D8", Offset = "0xE1F7D8", VA = "0xE1F7D8")]
		private static extern void ovrAvatar_OverrideExpressiveLogic_Native(IntPtr avatar, IntPtr state);

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0xE1F868", Offset = "0xE1F868", VA = "0xE1F868")]
		public static void ovrAvatar_SetVisemes(IntPtr avatar, ovrAvatarVisemes visemes)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0xE1F9C0", Offset = "0xE1F9C0", VA = "0xE1F9C0")]
		private static extern void ovrAvatar_SetVisemes_Native(IntPtr avatar, IntPtr visemes);

		[PreserveSig]
		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0xE1FA50", Offset = "0xE1FA50", VA = "0xE1FA50")]
		public static extern void ovrAvatar_UpdateWorldTransform(IntPtr avatar, ovrAvatarTransform transform);

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0xE1FAF0", Offset = "0xE1FAF0", VA = "0xE1FAF0")]
		public static void ovrAvatar_UpdateGazeTargets(ovrAvatarGazeTargets targets)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0xE1FEC0", Offset = "0xE1FEC0", VA = "0xE1FEC0")]
		private static extern void ovrAvatar_UpdateGazeTargets_Native(IntPtr targets);

		[PreserveSig]
		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0xE1FF40", Offset = "0xE1FF40", VA = "0xE1FF40")]
		public static extern void ovrAvatar_RemoveGazeTargets(uint targetCount, uint[] ids);

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0xE1FFD8", Offset = "0xE1FFD8", VA = "0xE1FFD8")]
		public static void ovrAvatar_UpdateLights(ovrAvatarLights lights)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0xE20838", Offset = "0xE20838", VA = "0xE20838")]
		private static extern void ovrAvatar_UpdateLights_Native(IntPtr lights);

		[PreserveSig]
		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0xE208B8", Offset = "0xE208B8", VA = "0xE208B8")]
		public static extern void ovrAvatar_RemoveLights(uint lightCount, uint[] ids);

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0xE19C68", Offset = "0xE19C68", VA = "0xE19C68")]
		[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0x731C00", Offset = "0x731C00")]
		public static void LoggingCallback(IntPtr str)
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0xE20950", Offset = "0xE20950", VA = "0xE20950")]
		public static extern void ovrAvatar_RegisterLoggingCallback(LoggingDelegate callback);

		[PreserveSig]
		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0xE209D4", Offset = "0xE209D4", VA = "0xE209D4")]
		public static extern void ovrAvatar_SetLoggingLevel(ovrAvatarLogLevel level);

		[PreserveSig]
		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0xE20A54", Offset = "0xE20A54", VA = "0xE20A54")]
		public static extern IntPtr ovrAvatar_GetDebugTransforms_Native(IntPtr count);

		[PreserveSig]
		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0xE20AD4", Offset = "0xE20AD4", VA = "0xE20AD4")]
		public static extern IntPtr ovrAvatar_GetDebugLines_Native(IntPtr count);

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0xE20B54", Offset = "0xE20B54", VA = "0xE20B54")]
		public static void ovrAvatar_DrawDebugLines()
		{
		}

		[PreserveSig]
		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xE21518", Offset = "0xE21518", VA = "0xE21518")]
		public static extern void ovrAvatar_SetDebugDrawContext(uint context);

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0xE21598", Offset = "0xE21598", VA = "0xE21598")]
		public static bool SendEvent(string name, string param = "", string source = "")
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xE219D4", Offset = "0xE219D4", VA = "0xE219D4")]
		private static extern IntPtr _ovrp_GetVersion();

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0xE2193C", Offset = "0xE2193C", VA = "0xE2193C")]
		public static string ovrp_GetVersion()
		{
			return null;
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0xE21A48", Offset = "0xE21A48", VA = "0xE21A48")]
		public CAPI()
		{
		}
	}
}
namespace NewtonVR
{
	[Token(Token = "0x20002B0")]
	public class NVRCustomInteractableItem : NVRInteractableItem
	{
		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x12360A0", Offset = "0x12360A0", VA = "0x12360A0")]
		public void adjustPositionAndRotation(NVRHand hand, Vector3 position, Vector3 rotation)
		{
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x123622C", Offset = "0x123622C", VA = "0x123622C")]
		public NVRCustomInteractableItem()
		{
		}
	}
	[Token(Token = "0x20002B1")]
	public class NVRCollisionSoundController : MonoBehaviour
	{
		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static NVRCollisionSoundController Instance;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72CE70", Offset = "0x72CE70")]
		public int SoundPoolSize;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72CEA8", Offset = "0x72CEA8")]
		public bool PitchModulationEnabled;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0x72CEE0", Offset = "0x72CEE0")]
		public float PitchModulationRange;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72CEF8", Offset = "0x72CEF8")]
		public float MinCollisionVolume;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MaxCollisionVelocity;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[HideInInspector]
		public NVRCollisionSoundProviders SoundEngine;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static NVRCollisionSoundProvider Provider;

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x12347F0", Offset = "0x12347F0", VA = "0x12347F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x123488C", Offset = "0x123488C", VA = "0x123488C")]
		public static void Play(NVRCollisionSoundMaterials material, Vector3 position, float impactVolume)
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0x123498C", Offset = "0x123498C", VA = "0x123498C")]
		public NVRCollisionSoundController()
		{
		}
	}
	[Token(Token = "0x20002B2")]
	public enum NVRCollisionSoundProviders
	{
		[Token(Token = "0x4000FE0")]
		None,
		[Token(Token = "0x4000FE1")]
		Unity,
		[Token(Token = "0x4000FE2")]
		FMOD
	}
	[Token(Token = "0x20002B3")]
	public enum NVRCollisionSoundMaterials
	{
		[Token(Token = "0x4000FE4")]
		none = 0,
		[Token(Token = "0x4000FE5")]
		_default = 1,
		[Token(Token = "0x4000FE6")]
		carpet = 2,
		[Token(Token = "0x4000FE7")]
		wood = 3,
		[Token(Token = "0x4000FE8")]
		metal = 4,
		[Token(Token = "0x4000FE9")]
		glass = 5,
		[Token(Token = "0x4000FEA")]
		plastic = 6,
		[Token(Token = "0x4000FEB")]
		cardboard = 7,
		[Token(Token = "0x4000FEC")]
		EndNewtonVRMaterials = 50,
		[Token(Token = "0x4000FED")]
		attach = 51,
		[Token(Token = "0x4000FEE")]
		trainvintage = 52,
		[Token(Token = "0x4000FEF")]
		trash = 53
	}
	[Token(Token = "0x20002B4")]
	public class NVRCollisionSoundMaterialsList
	{
		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Type typeCache;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static NVRCollisionSoundMaterials[] list;

		[Token(Token = "0x170001B3")]
		public static Type TypeCache
		{
			[Token(Token = "0x6000EED")]
			[Address(RVA = "0x12349BC", Offset = "0x12349BC", VA = "0x12349BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B4")]
		public static NVRCollisionSoundMaterials[] List
		{
			[Token(Token = "0x6000EEE")]
			[Address(RVA = "0x1234AB0", Offset = "0x1234AB0", VA = "0x1234AB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0x1234E90", Offset = "0x1234E90", VA = "0x1234E90")]
		public static NVRCollisionSoundMaterials? Parse(string materialString)
		{
			return null;
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0x1234FD0", Offset = "0x1234FD0", VA = "0x1234FD0")]
		public NVRCollisionSoundMaterialsList()
		{
		}
	}
	[Token(Token = "0x20002B5")]
	public class NVRCollisionSoundObject : MonoBehaviour
	{
		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Collider, NVRCollisionSoundObject> SoundObjects;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRCollisionSoundMaterials Material;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Collider[] Colliders;

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x1234FD8", Offset = "0x1234FD8", VA = "0x1234FD8", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x12350FC", Offset = "0x12350FC", VA = "0x12350FC", Slot = "5")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0x1235214", Offset = "0x1235214", VA = "0x1235214", Slot = "6")]
		protected virtual void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0x12353E4", Offset = "0x12353E4", VA = "0x12353E4")]
		private float CalculateImpactVolume(Collision collision)
		{
			return default(float);
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0x1235494", Offset = "0x1235494", VA = "0x1235494")]
		public static float CubicEaseOut(float velocity, float startingValue = 0f, float changeInValue = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0x123552C", Offset = "0x123552C", VA = "0x123552C")]
		public NVRCollisionSoundObject()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	public abstract class NVRCollisionSoundProvider : MonoBehaviour
	{
		[Token(Token = "0x6000EF8")]
		public abstract void Awake();

		[Token(Token = "0x6000EF9")]
		public abstract void Play(NVRCollisionSoundMaterials material, Vector3 position, float impactVolume);

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x12355C0", Offset = "0x12355C0", VA = "0x12355C0")]
		protected NVRCollisionSoundProvider()
		{
		}
	}
	[Token(Token = "0x20002B7")]
	public class NVRCollisionSoundProviderFMOD : NVRCollisionSoundProvider
	{
		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x12355C8", Offset = "0x12355C8", VA = "0x12355C8", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x12355CC", Offset = "0x12355CC", VA = "0x12355CC", Slot = "5")]
		public override void Play(NVRCollisionSoundMaterials material, Vector3 position, float impactVolume)
		{
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x12355D0", Offset = "0x12355D0", VA = "0x12355D0")]
		public NVRCollisionSoundProviderFMOD()
		{
		}
	}
	[Token(Token = "0x20002B8")]
	public class NVRCollisionSoundProviderUnity : NVRCollisionSoundProvider
	{
		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string AudioSourcePrefabPath;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string CollisionSoundsPath;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject AudioSourcePrefab;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource[] AudioPool;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int CurrentPoolIndex;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<NVRCollisionSoundMaterials, List<AudioClip>> Clips;

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x12355D8", Offset = "0x12355D8", VA = "0x12355D8", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x1235B58", Offset = "0x1235B58", VA = "0x1235B58", Slot = "5")]
		public override void Play(NVRCollisionSoundMaterials material, Vector3 position, float impactVolume)
		{
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x1235DF4", Offset = "0x1235DF4", VA = "0x1235DF4")]
		private AudioClip GetClip(NVRCollisionSoundMaterials material)
		{
			return null;
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x123600C", Offset = "0x123600C", VA = "0x123600C")]
		public NVRCollisionSoundProviderUnity()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	public class CustomNVRPhysicalController : MonoBehaviour
	{
		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xE2BABC", Offset = "0xE2BABC", VA = "0xE2BABC")]
		public CustomNVRPhysicalController()
		{
		}
	}
	[Token(Token = "0x20002BA")]
	public class NVRScaler : MonoBehaviour
	{
		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static float scale;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected static NVRScaler instance;

		[Token(Token = "0x170001B5")]
		public static float WorldScale
		{
			[Token(Token = "0x6000F04")]
			[Address(RVA = "0xDA3300", Offset = "0xDA3300", VA = "0xDA3300")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0xDA3364", Offset = "0xDA3364", VA = "0xDA3364")]
		public static NVRScaler getInstance()
		{
			return null;
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xDA33C8", Offset = "0xDA33C8", VA = "0xDA33C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0xDA3458", Offset = "0xDA3458", VA = "0xDA3458")]
		public void setScale(float newScale)
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xDA3520", Offset = "0xDA3520", VA = "0xDA3520")]
		public NVRScaler()
		{
		}
	}
	[Token(Token = "0x20002BB")]
	public class NVRTeleportArc : MonoBehaviour
	{
		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int segmentCount;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72CF40", Offset = "0x72CF40")]
		[SerializeField]
		private float thickness;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72CF8C", Offset = "0x72CF8C")]
		public float arcDuration;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72CFC4", Offset = "0x72CFC4")]
		public float segmentBreak;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72CFFC", Offset = "0x72CFFC")]
		public float arcSpeed;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material material;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public int traceLayerMask;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LineRenderer[] lineRenderers;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float arcTimeOffset;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float prevThickness;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int prevSegmentCount;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool showArc;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 startPos;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 projectileVelocity;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useGravity;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform arcObjectsTransfrom;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool arcInvalid;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public NVRTeleportPoint teleportPoint;

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xDA423C", Offset = "0xDA423C", VA = "0xDA423C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xDA4264", Offset = "0xDA4264", VA = "0xDA4264")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xDA42B0", Offset = "0xDA42B0", VA = "0xDA42B0")]
		private void CreateLineRendererObjects()
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xDA47A4", Offset = "0xDA47A4", VA = "0xDA47A4")]
		public void SetArcData(Vector3 position, Vector3 velocity, bool gravity, bool pointerAtBadAngle)
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xDA47F8", Offset = "0xDA47F8", VA = "0xDA47F8")]
		public void Show()
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xDA4810", Offset = "0xDA4810", VA = "0xDA4810")]
		public void Hide()
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xDA48CC", Offset = "0xDA48CC", VA = "0xDA48CC")]
		public bool DrawArc(out RaycastHit hitInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xDA4E54", Offset = "0xDA4E54", VA = "0xDA4E54")]
		private void DrawArcSegment(int index, float startTime, float endTime)
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xDA4F40", Offset = "0xDA4F40", VA = "0xDA4F40")]
		public void SetColor(Color color)
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0xDA4AE4", Offset = "0xDA4AE4", VA = "0xDA4AE4")]
		private float FindProjectileCollision(out RaycastHit hitInfo)
		{
			return default(float);
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xDA4DCC", Offset = "0xDA4DCC", VA = "0xDA4DCC")]
		public Vector3 GetArcPositionAtTime(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0xDA4848", Offset = "0xDA4848", VA = "0xDA4848")]
		private void HideLineSegments(int startSegment, int endSegment)
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0xDA5024", Offset = "0xDA5024", VA = "0xDA5024")]
		public NVRTeleportArc()
		{
		}
	}
	[Token(Token = "0x20002BC")]
	internal struct EnumEqualityComparer<TEnum> : IEqualityComparer<TEnum> where TEnum : struct
	{
		[Token(Token = "0x20002BD")]
		private static class BoxAvoidance
		{
			[Token(Token = "0x400100F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Func<TEnum, int> _wrapper;

			[Token(Token = "0x6000F19")]
			public static int ToInt(TEnum enu)
			{
				return default(int);
			}

			[Token(Token = "0x6000F1A")]
			static BoxAvoidance()
			{
			}
		}

		[Token(Token = "0x6000F17")]
		public bool Equals(TEnum firstEnum, TEnum secondEnum)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F18")]
		public int GetHashCode(TEnum firstEnum)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002BE")]
	public class NVRAttachJoint : MonoBehaviour
	{
		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRInteractableItem AttachedItem;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NVRAttachPoint AttachedPoint;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float PullRange;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float AttachRange;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float DropDistance;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool MatchRotation;

		[Token(Token = "0x170001B6")]
		public bool IsAttached
		{
			[Token(Token = "0x6000F1B")]
			[Address(RVA = "0x122F210", Offset = "0x122F210", VA = "0x122F210")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0x122F27C", Offset = "0x122F27C", VA = "0x122F27C", Slot = "4")]
		protected virtual void OnTriggerStay(Collider col)
		{
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x122F408", Offset = "0x122F408", VA = "0x122F408", Slot = "5")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x122F444", Offset = "0x122F444", VA = "0x122F444", Slot = "6")]
		protected virtual void FixedUpdateAttached()
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x122F514", Offset = "0x122F514", VA = "0x122F514", Slot = "7")]
		protected virtual void Attach(NVRAttachPoint point)
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x122F56C", Offset = "0x122F56C", VA = "0x122F56C", Slot = "8")]
		protected virtual void Detach()
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x122F5C4", Offset = "0x122F5C4", VA = "0x122F5C4")]
		public NVRAttachJoint()
		{
		}
	}
	[Token(Token = "0x20002BF")]
	public class NVRAttachPoint : MonoBehaviour
	{
		[Token(Token = "0x4001016")]
		private const float MaxVelocityChange = 5f;

		[Token(Token = "0x4001017")]
		private const float MaxAngularVelocityChange = 10f;

		[Token(Token = "0x4001018")]
		private const float VelocityMagic = 3000f;

		[Token(Token = "0x4001019")]
		private const float AngularVelocityMagic = 25f;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public Rigidbody Rigidbody;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public NVRInteractableItem Item;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool IsAttached;

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x122F5EC", Offset = "0x122F5EC", VA = "0x122F5EC", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x122F8B8", Offset = "0x122F8B8", VA = "0x122F8B8", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x122F78C", Offset = "0x122F78C", VA = "0x122F78C")]
		private NVRInteractableItem FindNVRItem(GameObject gameobject)
		{
			return null;
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x122F8D8", Offset = "0x122F8D8", VA = "0x122F8D8", Slot = "6")]
		public virtual void Attached(NVRAttachJoint joint)
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x122FA30", Offset = "0x122FA30", VA = "0x122FA30", Slot = "7")]
		public virtual void Detached(NVRAttachJoint joint)
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x122FA70", Offset = "0x122FA70", VA = "0x122FA70", Slot = "8")]
		public virtual void PullTowards(NVRAttachJoint joint)
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x122FD24", Offset = "0x122FD24", VA = "0x122FD24")]
		public NVRAttachPoint()
		{
		}
	}
	[Token(Token = "0x20002C0")]
	public class AttachPointMapper
	{
		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Collider, NVRAttachPoint> Colliders;

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0x1024CB4", Offset = "0x1024CB4", VA = "0x1024CB4")]
		public static void Register(Collider col, NVRAttachPoint point)
		{
		}

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0x1024D50", Offset = "0x1024D50", VA = "0x1024D50")]
		public static void Deregister(Collider col)
		{
		}

		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0x1024DDC", Offset = "0x1024DDC", VA = "0x1024DDC")]
		public static NVRAttachPoint GetAttachPoint(Collider col)
		{
			return null;
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x1024E80", Offset = "0x1024E80", VA = "0x1024E80")]
		public AttachPointMapper()
		{
		}
	}
	[Token(Token = "0x20002C1")]
	public class NVRButton : MonoBehaviour
	{
		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody Rigidbody;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D064", Offset = "0x72D064")]
		public float DistanceToEngage;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D09C", Offset = "0x72D09C")]
		public bool ButtonDown;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D0D4", Offset = "0x72D0D4")]
		public bool ButtonUp;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D10C", Offset = "0x72D10C")]
		public bool ButtonIsPushed;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D144", Offset = "0x72D144")]
		public bool ButtonWasPushed;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Transform InitialPosition;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected float MinDistance;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected float PositionMagic;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected float CurrentDistance;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 InitialLocalPosition;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 ConstrainedPosition;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Quaternion InitialLocalRotation;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion ConstrainedRotation;

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0x122FD2C", Offset = "0x122FD2C", VA = "0x122FD2C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x122FFC8", Offset = "0x122FFC8", VA = "0x122FFC8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0x12301D4", Offset = "0x12301D4", VA = "0x12301D4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x1230160", Offset = "0x1230160", VA = "0x1230160")]
		private void ConstrainPosition()
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x1230214", Offset = "0x1230214", VA = "0x1230214")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x1230218", Offset = "0x1230218", VA = "0x1230218")]
		public NVRButton()
		{
		}
	}
	[Token(Token = "0x20002C2")]
	public class NVRButtonInputs
	{
		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool Enable;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool PressDownCached;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		private bool PressDownExpired;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		private bool PressUpCached;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		private bool PressUpExpired;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool IsPressedCached;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		private bool IsPressedExpired;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		private bool TouchDownCached;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		private bool TouchDownExpired;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool TouchUpCached;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool TouchUpExpired;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private bool IsTouchedCached;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		private bool IsTouchedExpired;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool NearTouchDownCached;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool NearTouchDownExpired;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		private bool NearTouchUpCached;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		private bool NearTouchUpExpired;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool IsNearTouchedCached;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool IsNearTouchedExpired;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector2 AxisCached;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool AxisExpired;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float SingleAxisCached;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool SingleAxisExpired;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private NVRInputDevice InputDevice;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private NVRButtons NVRbutton;

		[Token(Token = "0x170001B7")]
		public bool PressDown
		{
			[Token(Token = "0x6000F34")]
			[Address(RVA = "0x122F004", Offset = "0x122F004", VA = "0x122F004")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B8")]
		public bool PressUp
		{
			[Token(Token = "0x6000F35")]
			[Address(RVA = "0x122F0BC", Offset = "0x122F0BC", VA = "0x122F0BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B9")]
		public bool IsPressed
		{
			[Token(Token = "0x6000F36")]
			[Address(RVA = "0x1230240", Offset = "0x1230240", VA = "0x1230240")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BA")]
		public bool TouchDown
		{
			[Token(Token = "0x6000F37")]
			[Address(RVA = "0x12302F8", Offset = "0x12302F8", VA = "0x12302F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BB")]
		public bool TouchUp
		{
			[Token(Token = "0x6000F38")]
			[Address(RVA = "0x12303B0", Offset = "0x12303B0", VA = "0x12303B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BC")]
		public bool IsTouched
		{
			[Token(Token = "0x6000F39")]
			[Address(RVA = "0x1230468", Offset = "0x1230468", VA = "0x1230468")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BD")]
		public bool NearTouchDown
		{
			[Token(Token = "0x6000F3A")]
			[Address(RVA = "0x1230520", Offset = "0x1230520", VA = "0x1230520")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BE")]
		public bool NearTouchUp
		{
			[Token(Token = "0x6000F3B")]
			[Address(RVA = "0x12305D8", Offset = "0x12305D8", VA = "0x12305D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BF")]
		public bool IsNearTouched
		{
			[Token(Token = "0x6000F3C")]
			[Address(RVA = "0x1230690", Offset = "0x1230690", VA = "0x1230690")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C0")]
		public Vector2 Axis
		{
			[Token(Token = "0x6000F3D")]
			[Address(RVA = "0x1230748", Offset = "0x1230748", VA = "0x1230748")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x170001C1")]
		public float SingleAxis
		{
			[Token(Token = "0x6000F3E")]
			[Address(RVA = "0x12307F8", Offset = "0x12307F8", VA = "0x12307F8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0x12308A0", Offset = "0x12308A0", VA = "0x12308A0")]
		public void FrameReset(NVRInputDevice inputDevice, NVRButtons button)
		{
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0x1230900", Offset = "0x1230900", VA = "0x1230900")]
		public NVRButtonInputs()
		{
		}
	}
	[Token(Token = "0x20002C3")]
	public enum NVRButtons
	{
		[Token(Token = "0x4001046")]
		System,
		[Token(Token = "0x4001047")]
		ApplicationMenu,
		[Token(Token = "0x4001048")]
		Grip,
		[Token(Token = "0x4001049")]
		DPad_Left,
		[Token(Token = "0x400104A")]
		DPad_Up,
		[Token(Token = "0x400104B")]
		DPad_Right,
		[Token(Token = "0x400104C")]
		DPad_Down,
		[Token(Token = "0x400104D")]
		A,
		[Token(Token = "0x400104E")]
		B,
		[Token(Token = "0x400104F")]
		X,
		[Token(Token = "0x4001050")]
		Y,
		[Token(Token = "0x4001051")]
		Axis0,
		[Token(Token = "0x4001052")]
		Axis1,
		[Token(Token = "0x4001053")]
		Axis2,
		[Token(Token = "0x4001054")]
		Axis3,
		[Token(Token = "0x4001055")]
		Axis4,
		[Token(Token = "0x4001056")]
		Touchpad,
		[Token(Token = "0x4001057")]
		Trigger,
		[Token(Token = "0x4001058")]
		Back,
		[Token(Token = "0x4001059")]
		Stick,
		[Token(Token = "0x400105A")]
		None
	}
	[Token(Token = "0x20002C4")]
	public class NVRButtonsHelper
	{
		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static NVRButtons[] array;

		[Token(Token = "0x170001C2")]
		public static NVRButtons[] Array
		{
			[Token(Token = "0x6000F42")]
			[Address(RVA = "0x123096C", Offset = "0x123096C", VA = "0x123096C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0x1230B04", Offset = "0x1230B04", VA = "0x1230B04")]
		public NVRButtonsHelper()
		{
		}
	}
	[Token(Token = "0x20002C5")]
	public struct NVRButtonsComparer : IEqualityComparer<NVRButtons>
	{
		[Token(Token = "0x6000F45")]
		[Address(RVA = "0x1230958", Offset = "0x1230958", VA = "0x1230958", Slot = "4")]
		public bool Equals(NVRButtons x, NVRButtons y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0x1230964", Offset = "0x1230964", VA = "0x1230964", Slot = "5")]
		public int GetHashCode(NVRButtons obj)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002C6")]
	public class NVRCanvasInput : BaseInputModule
	{
		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool GeometryBlocksLaser;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LayerMask LayersThatBlockLaser;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Sprite CursorSprite;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Material CursorMaterial;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float NormalCursorScale;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool LaserEnabled;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color LaserColor;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float LaserStartWidth;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float LaserEndWidth;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool OnCanvas;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool CanvasUsed;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RectTransform[] Cursors;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private LineRenderer[] Lasers;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject[] CurrentPoint;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private GameObject[] CurrentPressed;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GameObject[] CurrentDragging;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private PointerEventData[] PointEvents;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool Initialized;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		private bool DelayedInitialized;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Camera ControllerCamera;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private NVRPlayer Player;

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x1230B10", Offset = "0x1230B10", VA = "0x1230B10", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x12313B8", Offset = "0x12313B8", VA = "0x12313B8")]
		protected void DelayedCameraInit()
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x12314D4", Offset = "0x12314D4", VA = "0x12314D4")]
		private bool GetLookPointerEventData(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x12317DC", Offset = "0x12317DC", VA = "0x12317DC")]
		private bool UpdateCursor(int index, PointerEventData pointData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x1231D74", Offset = "0x1231D74", VA = "0x1231D74")]
		public void ClearSelection()
		{
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0x1231E0C", Offset = "0x1231E0C", VA = "0x1231E0C")]
		private void Select(GameObject go)
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0x1231F04", Offset = "0x1231F04", VA = "0x1231F04")]
		private bool SendUpdateEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0x1232068", Offset = "0x1232068", VA = "0x1232068")]
		private void UpdateCameraPosition(int index)
		{
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0x1232140", Offset = "0x1232140", VA = "0x1232140", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0x1232144", Offset = "0x1232144", VA = "0x1232144")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0x1232F04", Offset = "0x1232F04", VA = "0x1232F04")]
		private bool ButtonDown(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x1232FA4", Offset = "0x1232FA4", VA = "0x1232FA4")]
		private bool ButtonUp(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x1233044", Offset = "0x1233044", VA = "0x1233044")]
		public NVRCanvasInput()
		{
		}
	}
	[Token(Token = "0x20002C7")]
	public class NVRHand : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002C8")]
		public class NVRInteractableEvent : UnityEvent<NVRInteractable>
		{
			[Token(Token = "0x6000F83")]
			[Address(RVA = "0x9DEE7C", Offset = "0x9DEE7C", VA = "0x9DEE7C")]
			public NVRInteractableEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20002C9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728E18", Offset = "0x728E18")]
		private sealed class <>c
		{
			[Token(Token = "0x400108D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x400108E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<KeyValuePair<NVRInteractable, List<Collider>>, bool> <>9__46_0;

			[Token(Token = "0x6000F85")]
			[Address(RVA = "0x9DECE0", Offset = "0x9DECE0", VA = "0x9DECE0")]
			public <>c()
			{
			}

			[Token(Token = "0x6000F86")]
			[Address(RVA = "0x9DECE8", Offset = "0x9DECE8", VA = "0x9DECE8")]
			internal bool <get_IsHovering>b__46_0(KeyValuePair<NVRInteractable, List<Collider>> kvp)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20002CA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728E28", Offset = "0x728E28")]
		private sealed class <DoLongHapticPulse>d__65 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400108F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001090")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001091")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float seconds;

			[Token(Token = "0x4001092")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public NVRHand <>4__this;

			[Token(Token = "0x4001093")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public NVRButtons button;

			[Token(Token = "0x4001094")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <endTime>5__2;

			[Token(Token = "0x170001D1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F8A")]
				[Address(RVA = "0x9DEE2C", Offset = "0x9DEE2C", VA = "0x9DEE2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F8C")]
				[Address(RVA = "0x9DEE74", Offset = "0x9DEE74", VA = "0x9DEE74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F87")]
			[Address(RVA = "0x9DED44", Offset = "0x9DED44", VA = "0x9DED44")]
			[DebuggerHidden]
			public <DoLongHapticPulse>d__65(int <>1__state)
			{
			}

			[Token(Token = "0x6000F88")]
			[Address(RVA = "0x9DED70", Offset = "0x9DED70", VA = "0x9DED70", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F89")]
			[Address(RVA = "0x9DED74", Offset = "0x9DED74", VA = "0x9DED74", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F8B")]
			[Address(RVA = "0x9DEE34", Offset = "0x9DEE34", VA = "0x9DEE34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRButtons HoldButton;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public NVRButtons UseButton;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool IsRight;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[HideInInspector]
		public bool IsLeft;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public NVRPlayer Player;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<NVRButtons, NVRButtonInputs> Inputs;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public InterationStyle CurrentInteractionStyle;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Rigidbody Rigidbody;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<NVRRenderModel> CustomModels;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private VisibilityLevel CurrentVisibility;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool VisibilityLocked;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public HandState CurrentHandState;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<NVRInteractable, List<Collider>> CurrentlyHoveringOver;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public NVRInteractable CurrentlyInteracting;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public NVRInteractableEvent OnBeginInteraction;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public NVRInteractableEvent OnEndInteraction;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int EstimationSampleIndex;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3[] LastPositions;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion[] LastRotations;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float[] LastDeltas;

		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int EstimationSamples;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		public NVRPhysicalController PhysicalController;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Collider[] GhostColliders;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Renderer[] GhostRenderers;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private NVRInputDevice InputDevice;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject RenderModel;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public NVRRenderModelType RenderModelType;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Dictionary<NVRRenderModelType, GameObject> RenderModels;

		[Token(Token = "0x170001C3")]
		public bool HoldButtonDown
		{
			[Token(Token = "0x6000F54")]
			[Address(RVA = "0x1233704", Offset = "0x1233704", VA = "0x1233704")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C4")]
		public bool HoldButtonUp
		{
			[Token(Token = "0x6000F55")]
			[Address(RVA = "0x1233B28", Offset = "0x1233B28", VA = "0x1233B28")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C5")]
		public bool HoldButtonPressed
		{
			[Token(Token = "0x6000F56")]
			[Address(RVA = "0x12382F0", Offset = "0x12382F0", VA = "0x12382F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C6")]
		public float HoldButtonAxis
		{
			[Token(Token = "0x6000F57")]
			[Address(RVA = "0x1238350", Offset = "0x1238350", VA = "0x1238350")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001C7")]
		public bool UseButtonDown
		{
			[Token(Token = "0x6000F58")]
			[Address(RVA = "0x12383B0", Offset = "0x12383B0", VA = "0x12383B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C8")]
		public bool UseButtonUp
		{
			[Token(Token = "0x6000F59")]
			[Address(RVA = "0x1238410", Offset = "0x1238410", VA = "0x1238410")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001C9")]
		public bool UseButtonPressed
		{
			[Token(Token = "0x6000F5A")]
			[Address(RVA = "0x1238470", Offset = "0x1238470", VA = "0x1238470")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CA")]
		public float UseButtonAxis
		{
			[Token(Token = "0x6000F5B")]
			[Address(RVA = "0x12384D0", Offset = "0x12384D0", VA = "0x12384D0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001CB")]
		public bool IsHovering
		{
			[Token(Token = "0x6000F5C")]
			[Address(RVA = "0x1238530", Offset = "0x1238530", VA = "0x1238530")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CC")]
		public bool IsInteracting
		{
			[Token(Token = "0x6000F5D")]
			[Address(RVA = "0x1238654", Offset = "0x1238654", VA = "0x1238654")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CD")]
		public bool HasCustomModel
		{
			[Token(Token = "0x6000F5E")]
			[Address(RVA = "0x12386C0", Offset = "0x12386C0", VA = "0x12386C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CE")]
		public bool IsCurrentlyTracked
		{
			[Token(Token = "0x6000F5F")]
			[Address(RVA = "0x1232E6C", Offset = "0x1232E6C", VA = "0x1232E6C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001CF")]
		public Vector3 CurrentForward
		{
			[Token(Token = "0x6000F60")]
			[Address(RVA = "0x1231CC4", Offset = "0x1231CC4", VA = "0x1231CC4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001D0")]
		public Vector3 CurrentPosition
		{
			[Token(Token = "0x6000F61")]
			[Address(RVA = "0x1231C14", Offset = "0x1231C14", VA = "0x1231C14")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0x1238714", Offset = "0x1238714", VA = "0x1238714", Slot = "4")]
		public virtual void PreInitialize(NVRPlayer player)
		{
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0x1239588", Offset = "0x1239588", VA = "0x1239588", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000F64")]
		[Address(RVA = "0x1239968", Offset = "0x1239968", VA = "0x1239968")]
		protected void UpdateHovering()
		{
		}

		[Token(Token = "0x6000F65")]
		[Address(RVA = "0x1239660", Offset = "0x1239660", VA = "0x1239660")]
		protected void UpdateButtonStates()
		{
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0x12397B0", Offset = "0x12397B0", VA = "0x12397B0")]
		protected void UpdateInteractions()
		{
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0x123A088", Offset = "0x123A088", VA = "0x123A088", Slot = "6")]
		protected virtual void UpdateVisibilityAndColliders()
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0x1236FA0", Offset = "0x1236FA0", VA = "0x1236FA0")]
		public void TriggerHapticPulse(ushort durationMicroSec = 500, NVRButtons button = NVRButtons.Grip)
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0x123A548", Offset = "0x123A548", VA = "0x123A548")]
		public void LongHapticPulse(float seconds, NVRButtons button = NVRButtons.Grip)
		{
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0x123A574", Offset = "0x123A574", VA = "0x123A574")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x731C60", Offset = "0x731C60")]
		private IEnumerator DoLongHapticPulse(float seconds, NVRButtons button)
		{
			return null;
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x123A60C", Offset = "0x123A60C", VA = "0x123A60C")]
		public Vector3 GetVelocityEstimation()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x123A6D0", Offset = "0x123A6D0", VA = "0x123A6D0")]
		public Vector3 GetAngularVelocityEstimation()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0x123A80C", Offset = "0x123A80C", VA = "0x123A80C")]
		public Vector3 GetPositionDelta()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0x123A8A8", Offset = "0x123A8A8", VA = "0x123A8A8")]
		public Quaternion GetRotationDelta()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0x123A970", Offset = "0x123A970", VA = "0x123A970", Slot = "7")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0x123AA70", Offset = "0x123AA70", VA = "0x123AA70", Slot = "8")]
		public virtual void BeginInteraction(NVRInteractable interactable)
		{
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0x123AB90", Offset = "0x123AB90", VA = "0x123AB90", Slot = "9")]
		public virtual void EndInteraction(NVRInteractable item)
		{
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0x1239DAC", Offset = "0x1239DAC", VA = "0x1239DAC")]
		private bool PickupClosest()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x123AD70", Offset = "0x123AD70", VA = "0x123AD70", Slot = "10")]
		protected virtual void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0x123B094", Offset = "0x123B094", VA = "0x123B094", Slot = "11")]
		protected virtual void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0x123B288", Offset = "0x123B288", VA = "0x123B288", Slot = "12")]
		public virtual void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0x123B45C", Offset = "0x123B45C", VA = "0x123B45C")]
		private bool checkCollidersEnabled(List<Collider> colliders)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0x123ACF0", Offset = "0x123ACF0", VA = "0x123ACF0")]
		private void RemoveHoveringOver(NVRInteractable interactable)
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0x123B5DC", Offset = "0x123B5DC", VA = "0x123B5DC")]
		public string GetDeviceName()
		{
			return null;
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0x123B674", Offset = "0x123B674", VA = "0x123B674")]
		public Collider[] SetupDefaultPhysicalColliders(Transform ModelParent)
		{
			return null;
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0x123B694", Offset = "0x123B694", VA = "0x123B694")]
		public void DeregisterInteractable(NVRInteractable interactable)
		{
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0x123B78C", Offset = "0x123B78C", VA = "0x123B78C")]
		public void DeregisterInteractables()
		{
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0x123A24C", Offset = "0x123A24C", VA = "0x123A24C")]
		protected void SetVisibility(VisibilityLevel visibility)
		{
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0x123B908", Offset = "0x123B908", VA = "0x123B908", Slot = "13")]
		public virtual void InitializeRenderModel()
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0x123B93C", Offset = "0x123B93C", VA = "0x123B93C", Slot = "14")]
		public virtual void InitializeRenderModel(NVRRenderModelType type)
		{
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0x123BF00", Offset = "0x123BF00", VA = "0x123BF00", Slot = "15")]
		public virtual void SetRenderModel(NVRRenderModelType type)
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0x123C028", Offset = "0x123C028", VA = "0x123C028", Slot = "16")]
		public virtual void Initialize()
		{
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0x123C6A8", Offset = "0x123C6A8", VA = "0x123C6A8")]
		public void ForceGhost()
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0x123C6DC", Offset = "0x123C6DC", VA = "0x123C6DC")]
		public NVRHand()
		{
		}
	}
	[Token(Token = "0x20002CB")]
	public enum VisibilityLevel
	{
		[Token(Token = "0x4001096")]
		Invisible = 0,
		[Token(Token = "0x4001097")]
		Ghost = 70,
		[Token(Token = "0x4001098")]
		Visible = 100
	}
	[Token(Token = "0x20002CC")]
	public enum HandState
	{
		[Token(Token = "0x400109A")]
		Uninitialized,
		[Token(Token = "0x400109B")]
		Idle,
		[Token(Token = "0x400109C")]
		GripDownNotInteracting,
		[Token(Token = "0x400109D")]
		GripDownInteracting,
		[Token(Token = "0x400109E")]
		GripToggleOnNotInteracting,
		[Token(Token = "0x400109F")]
		GripToggleOnInteracting,
		[Token(Token = "0x40010A0")]
		GripToggleOff
	}
	[Token(Token = "0x20002CD")]
	public enum InterationStyle
	{
		[Token(Token = "0x40010A2")]
		Hold,
		[Token(Token = "0x40010A3")]
		Toggle,
		[Token(Token = "0x40010A4")]
		ByScript
	}
	[Token(Token = "0x20002CE")]
	public class NVRHead : MonoBehaviour
	{
		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0x123C7E0", Offset = "0x123C7E0", VA = "0x123C7E0")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0x123C7E4", Offset = "0x123C7E4", VA = "0x123C7E4")]
		public NVRHead()
		{
		}
	}
	[Token(Token = "0x20002CF")]
	public class NVRHelpers
	{
		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Shader standardShader;

		[Token(Token = "0x170001D3")]
		private static Shader StandardShader
		{
			[Token(Token = "0x6000F8F")]
			[Address(RVA = "0x123C7EC", Offset = "0x123C7EC", VA = "0x123C7EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0x123C3E0", Offset = "0x123C3E0", VA = "0x123C3E0")]
		public static void SetTransparent(Material material, [Optional] Color? newcolor)
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0x123C8BC", Offset = "0x123C8BC", VA = "0x123C8BC")]
		public static void SetOpaque(Material material)
		{
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0x123CAD0", Offset = "0x123CAD0", VA = "0x123CAD0")]
		public static void SetProperty(object obj, string propertyName, object value, bool isPublic)
		{
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0x123CB4C", Offset = "0x123CB4C", VA = "0x123CB4C")]
		public static void SetField(object obj, string fieldName, object value, bool isPublic)
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0x1231310", Offset = "0x1231310", VA = "0x1231310")]
		public static void LineRendererSetColor(LineRenderer lineRenderer, Color startColor, Color endColor)
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0x1231374", Offset = "0x1231374", VA = "0x1231374")]
		public static void LineRendererSetWidth(LineRenderer lineRenderer, float startWidth, float endWidth)
		{
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0x123CBC4", Offset = "0x123CBC4", VA = "0x123CBC4")]
		public static Quaternion AverageQuaternion(ref Vector4 cumulative, Quaternion newRotation, Quaternion firstRotation, int addAmount)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x123CCD4", Offset = "0x123CCD4", VA = "0x123CCD4")]
		public static Quaternion NormalizeQuaternion(float x, float y, float z, float w)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0x123CC94", Offset = "0x123CC94", VA = "0x123CC94")]
		public static Quaternion InverseSignQuaternion(Quaternion q)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x123CC74", Offset = "0x123CC74", VA = "0x123CC74")]
		public static bool AreQuaternionsClose(Quaternion q1, Quaternion q2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0x123CD38", Offset = "0x123CD38", VA = "0x123CD38")]
		public NVRHelpers()
		{
		}
	}
	[Token(Token = "0x20002D0")]
	public abstract class NVRInputDevice : MonoBehaviour
	{
		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NVRHand _hand;

		[Token(Token = "0x170001D4")]
		protected NVRHand Hand
		{
			[Token(Token = "0x6000F9B")]
			[Address(RVA = "0x123CD40", Offset = "0x123CD40", VA = "0x123CD40")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F9C")]
			[Address(RVA = "0x123CD48", Offset = "0x123CD48", VA = "0x123CD48")]
			set
			{
			}
		}

		[Token(Token = "0x170001D5")]
		public abstract bool IsCurrentlyTracked
		{
			[Token(Token = "0x6000F9E")]
			get;
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0x123CD50", Offset = "0x123CD50", VA = "0x123CD50", Slot = "4")]
		public virtual void Initialize(NVRHand hand)
		{
		}

		[Token(Token = "0x6000F9F")]
		public abstract Collider[] SetupDefaultPhysicalColliders(Transform ModelParent);

		[Token(Token = "0x6000FA0")]
		public abstract GameObject SetupDefaultRenderModel();

		[Token(Token = "0x6000FA1")]
		public abstract bool ReadyToInitialize();

		[Token(Token = "0x6000FA2")]
		public abstract Collider[] SetupDefaultColliders();

		[Token(Token = "0x6000FA3")]
		public abstract string GetDeviceName();

		[Token(Token = "0x6000FA4")]
		public abstract void TriggerHapticPulse(ushort durationMicroSec = 500, NVRButtons button = NVRButtons.Touchpad);

		[Token(Token = "0x6000FA5")]
		public abstract float GetAxis1D(NVRButtons button);

		[Token(Token = "0x6000FA6")]
		public abstract Vector2 GetAxis2D(NVRButtons button);

		[Token(Token = "0x6000FA7")]
		public abstract bool GetPressDown(NVRButtons button);

		[Token(Token = "0x6000FA8")]
		public abstract bool GetPressUp(NVRButtons button);

		[Token(Token = "0x6000FA9")]
		public abstract bool GetPress(NVRButtons button);

		[Token(Token = "0x6000FAA")]
		public abstract bool GetTouchDown(NVRButtons button);

		[Token(Token = "0x6000FAB")]
		public abstract bool GetTouchUp(NVRButtons button);

		[Token(Token = "0x6000FAC")]
		public abstract bool GetTouch(NVRButtons button);

		[Token(Token = "0x6000FAD")]
		public abstract bool GetNearTouchDown(NVRButtons button);

		[Token(Token = "0x6000FAE")]
		public abstract bool GetNearTouchUp(NVRButtons button);

		[Token(Token = "0x6000FAF")]
		public abstract bool GetNearTouch(NVRButtons button);

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x123CD58", Offset = "0x123CD58", VA = "0x123CD58")]
		protected NVRInputDevice()
		{
		}
	}
	[Token(Token = "0x20002D1")]
	public abstract class NVRIntegration
	{
		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected NVRPlayer Player;

		[Token(Token = "0x6000FB1")]
		public abstract void Initialize(NVRPlayer player);

		[Token(Token = "0x6000FB2")]
		public abstract Vector3 GetPlayspaceBounds();

		[Token(Token = "0x6000FB3")]
		public abstract bool IsHmdPresent();

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0x123CD60", Offset = "0x123CD60", VA = "0x123CD60")]
		protected NVRIntegration()
		{
		}
	}
	[Token(Token = "0x20002D2")]
	public abstract class NVRInteractable : MonoBehaviour
	{
		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int Max_InteractionPriority;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int InteractionPriority;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody Rigidbody;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool CanAttach;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool AllowTwoHanded;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool DisableKinematicOnAttach;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool EnableKinematicOnDetach;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		protected float DropDistance;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool EnableGravityOnDetach;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<NVRHand> AttachedHands;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool HoveringEnabled;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<NVRHand> HoveringHands;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Collider[] Colliders;

		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Vector3 ClosestHeldPoint;

		[Token(Token = "0x170001D6")]
		public NVRHand AttachedHand
		{
			[Token(Token = "0x6000FB5")]
			[Address(RVA = "0x1236F34", Offset = "0x1236F34", VA = "0x1236F34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D7")]
		public NVRHand HoveringHand
		{
			[Token(Token = "0x6000FB6")]
			[Address(RVA = "0x123CD68", Offset = "0x123CD68", VA = "0x123CD68")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D8")]
		public virtual bool IsAttached
		{
			[Token(Token = "0x6000FB7")]
			[Address(RVA = "0x123CDD4", Offset = "0x123CDD4", VA = "0x123CDD4", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0x123CE4C", Offset = "0x123CE4C", VA = "0x123CE4C", Slot = "5")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0x1233470", Offset = "0x1233470", VA = "0x1233470", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0x123CFBC", Offset = "0x123CFBC", VA = "0x123CFBC", Slot = "7")]
		public virtual void ResetInteractable()
		{
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0x123D030", Offset = "0x123D030", VA = "0x123D030", Slot = "8")]
		public virtual void UpdateColliders()
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x123D320", Offset = "0x123D320", VA = "0x123D320", Slot = "9")]
		protected virtual bool CheckForDrop()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x123D5CC", Offset = "0x123D5CC", VA = "0x123D5CC", Slot = "10")]
		public virtual void BeginInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0x1236C0C", Offset = "0x1236C0C", VA = "0x1236C0C", Slot = "11")]
		public virtual void InteractingUpdate(NVRHand hand)
		{
		}

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0x123D65C", Offset = "0x123D65C", VA = "0x123D65C", Slot = "12")]
		public virtual void HoveringEnter(NVRHand hand)
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0x1233700", Offset = "0x1233700", VA = "0x1233700", Slot = "13")]
		public virtual void HoveringUpdate(NVRHand hand, float forTime)
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x1233584", Offset = "0x1233584", VA = "0x1233584", Slot = "14")]
		public virtual void HoveringExit(NVRHand hand)
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x123D6C0", Offset = "0x123D6C0", VA = "0x123D6C0")]
		public void ForceDetach([Optional] NVRHand hand)
		{
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0x123D820", Offset = "0x123D820", VA = "0x123D820", Slot = "15")]
		public virtual void EndInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0x123D8DC", Offset = "0x123D8DC", VA = "0x123D8DC", Slot = "16")]
		protected virtual void DroppedBecauseOfDistance(NVRHand hand)
		{
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x123D904", Offset = "0x123D904", VA = "0x123D904", Slot = "17")]
		public virtual void UseButtonUp()
		{
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0x123D908", Offset = "0x123D908", VA = "0x123D908", Slot = "18")]
		public virtual void UseButtonDown()
		{
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0x123D90C", Offset = "0x123D90C", VA = "0x123D90C", Slot = "19")]
		public virtual void AddExternalVelocity(Vector3 velocity)
		{
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x123D92C", Offset = "0x123D92C", VA = "0x123D92C", Slot = "20")]
		public virtual void AddExternalAngularVelocity(Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x123D94C", Offset = "0x123D94C", VA = "0x123D94C", Slot = "21")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x1236404", Offset = "0x1236404", VA = "0x1236404")]
		protected NVRInteractable()
		{
		}
	}
	[Token(Token = "0x20002D3")]
	public class NVRInteractableItem : NVRInteractable
	{
		[Token(Token = "0x40010B6")]
		private const float MaxVelocityChange = 10f;

		[Token(Token = "0x40010B7")]
		private const float MaxAngularVelocityChange = 20f;

		[Token(Token = "0x40010B8")]
		private const float VelocityMagic = 6000f;

		[Token(Token = "0x40010B9")]
		private const float AngularVelocityMagic = 50f;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D1EC", Offset = "0x72D1EC")]
		public Transform InteractionPoint;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent OnUseButtonDown;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent OnUseButtonUp;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent OnHovering;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent OnBeginInteraction;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEvent OnEndInteraction;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Dictionary<NVRHand, Transform> PickupTransforms;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected Vector3 ExternalVelocity;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		protected Vector3 ExternalAngularVelocity;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Vector3?[] VelocityHistory;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Vector3?[] AngularVelocityHistory;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected int CurrentVelocityHistoryStep;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		protected float StartingDrag;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected float StartingAngularDrag;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected Dictionary<Collider, PhysicMaterial> MaterialCache;

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x123DE40", Offset = "0x123DE40", VA = "0x123DE40", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x123DE78", Offset = "0x123DE78", VA = "0x123DE78", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x123DF84", Offset = "0x123DF84", VA = "0x123DF84", Slot = "22")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x123DFE8", Offset = "0x123DFE8", VA = "0x123DFE8", Slot = "23")]
		protected virtual void GetTargetValues(out Vector3 targetHandPosition, out Quaternion targetHandRotation, out Vector3 targetItemPosition, out Quaternion targetItemRotation)
		{
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x123E5DC", Offset = "0x123E5DC", VA = "0x123E5DC", Slot = "24")]
		protected virtual void UpdateVelocities()
		{
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x123EAB0", Offset = "0x123EAB0", VA = "0x123EAB0", Slot = "25")]
		protected virtual void AddExternalVelocities()
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x123EC38", Offset = "0x123EC38", VA = "0x123EC38", Slot = "19")]
		public override void AddExternalVelocity(Vector3 velocity)
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x123ECF4", Offset = "0x123ECF4", VA = "0x123ECF4", Slot = "20")]
		public override void AddExternalAngularVelocity(Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0x123EDB0", Offset = "0x123EDB0", VA = "0x123EDB0", Slot = "10")]
		public override void BeginInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0x123F0F4", Offset = "0x123F0F4", VA = "0x123F0F4", Slot = "15")]
		public override void EndInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0x123F538", Offset = "0x123F538", VA = "0x123F538", Slot = "13")]
		public override void HoveringUpdate(NVRHand hand, float forTime)
		{
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0x123F54C", Offset = "0x123F54C", VA = "0x123F54C", Slot = "7")]
		public override void ResetInteractable()
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x1236F20", Offset = "0x1236F20", VA = "0x1236F20", Slot = "18")]
		public override void UseButtonDown()
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x123F580", Offset = "0x123F580", VA = "0x123F580", Slot = "17")]
		public override void UseButtonUp()
		{
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x123F594", Offset = "0x123F594", VA = "0x123F594", Slot = "26")]
		protected virtual void ApplyVelocityHistory()
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x123F7F0", Offset = "0x123F7F0", VA = "0x123F7F0", Slot = "27")]
		protected virtual void ResetVelocityHistory()
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0x123F66C", Offset = "0x123F66C", VA = "0x123F66C")]
		protected Vector3? GetMeanVector(Vector3?[] positions)
		{
			return null;
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0x123EFA8", Offset = "0x123EFA8", VA = "0x123EFA8")]
		protected void DisablePhysicalMaterials()
		{
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0x123F3D8", Offset = "0x123F3D8", VA = "0x123F3D8")]
		protected void EnablePhysicalMaterials()
		{
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0x1236C7C", Offset = "0x1236C7C", VA = "0x1236C7C", Slot = "8")]
		public override void UpdateColliders()
		{
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0x1236230", Offset = "0x1236230", VA = "0x1236230")]
		public NVRInteractableItem()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public class NVRInteractableItemAutoAttach : NVRInteractableItem
	{
		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float PickupAfterSeconds;

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0x123F8A0", Offset = "0x123F8A0", VA = "0x123F8A0", Slot = "13")]
		public override void HoveringUpdate(NVRHand hand, float forTime)
		{
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0x123F924", Offset = "0x123F924", VA = "0x123F924")]
		public NVRInteractableItemAutoAttach()
		{
		}
	}
	[Token(Token = "0x20002D5")]
	public class NVRInteractableItemClippable : NVRInteractableItem
	{
		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0x123F930", Offset = "0x123F930", VA = "0x123F930", Slot = "24")]
		protected override void UpdateVelocities()
		{
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0x123F9C0", Offset = "0x123F9C0", VA = "0x123F9C0", Slot = "10")]
		public override void BeginInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0x123F9F4", Offset = "0x123F9F4", VA = "0x123F9F4", Slot = "15")]
		public override void EndInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0x123FA28", Offset = "0x123FA28", VA = "0x123FA28")]
		public NVRInteractableItemClippable()
		{
		}
	}
	[Token(Token = "0x20002D6")]
	public class NVRInteractableRotator : NVRInteractable
	{
		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float CurrentAngle;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected Transform InitialAttachPoint;

		[Token(Token = "0x170001D9")]
		protected virtual float DeltaMagic
		{
			[Token(Token = "0x6000FE7")]
			[Address(RVA = "0x123FA2C", Offset = "0x123FA2C", VA = "0x123FA2C", Slot = "22")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0x123FA34", Offset = "0x123FA34", VA = "0x123FA34", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0x123FA6C", Offset = "0x123FA6C", VA = "0x123FA6C", Slot = "23")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0x123FBFC", Offset = "0x123FBFC", VA = "0x123FBFC", Slot = "10")]
		public override void BeginInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0x123FD88", Offset = "0x123FD88", VA = "0x123FD88", Slot = "15")]
		public override void EndInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0x123FE60", Offset = "0x123FE60", VA = "0x123FE60")]
		public NVRInteractableRotator()
		{
		}
	}
	[Token(Token = "0x20002D7")]
	public class NVRInteractables : MonoBehaviour
	{
		[Token(Token = "0x20002D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728E38", Offset = "0x728E38")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x40010D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public NVRInteractable interactable;

			[Token(Token = "0x6000FF4")]
			[Address(RVA = "0x9DEFB4", Offset = "0x9DEFB4", VA = "0x9DEFB4")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6000FF5")]
			[Address(RVA = "0x9DEFBC", Offset = "0x9DEFBC", VA = "0x9DEFBC")]
			internal bool <Deregister>b__0(KeyValuePair<Collider, NVRInteractable> mapping)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x20002D9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728E48", Offset = "0x728E48")]
		private sealed class <>c
		{
			[Token(Token = "0x40010D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x40010D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<KeyValuePair<Collider, NVRInteractable>, Collider> <>9__6_1;

			[Token(Token = "0x40010D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<KeyValuePair<Collider, NVRInteractable>, NVRInteractable> <>9__6_2;

			[Token(Token = "0x6000FF7")]
			[Address(RVA = "0x9DEF2C", Offset = "0x9DEF2C", VA = "0x9DEF2C")]
			public <>c()
			{
			}

			[Token(Token = "0x6000FF8")]
			[Address(RVA = "0x9DEF34", Offset = "0x9DEF34", VA = "0x9DEF34")]
			internal Collider <Deregister>b__6_1(KeyValuePair<Collider, NVRInteractable> mapping)
			{
				return null;
			}

			[Token(Token = "0x6000FF9")]
			[Address(RVA = "0x9DEF74", Offset = "0x9DEF74", VA = "0x9DEF74")]
			internal NVRInteractable <Deregister>b__6_2(KeyValuePair<Collider, NVRInteractable> mapping)
			{
				return null;
			}
		}

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Collider, NVRInteractable> ColliderMapping;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<NVRInteractable, Collider[]> NVRInteractableMapping;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<NVRInteractable> NVRInteractableList;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static bool Initialized;

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0x123FEC0", Offset = "0x123FEC0", VA = "0x123FEC0")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0x123D0C8", Offset = "0x123D0C8", VA = "0x123D0C8")]
		public static void Register(NVRInteractable interactable, Collider[] colliders)
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0x123D9B8", Offset = "0x123D9B8", VA = "0x123D9B8")]
		public static void Deregister(NVRInteractable interactable)
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0x123AF7C", Offset = "0x123AF7C", VA = "0x123AF7C")]
		public static NVRInteractable GetInteractable(Collider collider)
		{
			return null;
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x1240018", Offset = "0x1240018", VA = "0x1240018")]
		public static List<NVRInteractable> GetAllInteractables()
		{
			return null;
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0x124007C", Offset = "0x124007C", VA = "0x124007C")]
		public NVRInteractables()
		{
		}
	}
	[Token(Token = "0x20002DA")]
	public class NVRLetterSpinner : NVRInteractableRotator
	{
		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string LETTERLIST;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float SnapDistance;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float RungAngleInterval;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 LastAngularVelocity;

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0x1240088", Offset = "0x1240088", VA = "0x1240088", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x1240118", Offset = "0x1240118", VA = "0x1240118", Slot = "23")]
		protected override void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0x12402BC", Offset = "0x12402BC", VA = "0x12402BC", Slot = "10")]
		public override void BeginInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x12376C4", Offset = "0x12376C4", VA = "0x12376C4")]
		public string GetLetter()
		{
			return null;
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0x12402FC", Offset = "0x12402FC", VA = "0x12402FC")]
		public NVRLetterSpinner()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	public class NVRLever : NVRInteractableItem
	{
		[Token(Token = "0x20002DC")]
		public enum LeverPosition
		{
			[Token(Token = "0x40010E6")]
			Off,
			[Token(Token = "0x40010E7")]
			Mid,
			[Token(Token = "0x40010E8")]
			On
		}

		[Token(Token = "0x20002DD")]
		public enum RotationAxis
		{
			[Token(Token = "0x40010EA")]
			XAxis,
			[Token(Token = "0x40010EB")]
			YAxis,
			[Token(Token = "0x40010EC")]
			ZAxis
		}

		[Token(Token = "0x20002DE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728E58", Offset = "0x728E58")]
		private sealed class <HoldPosition>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NVRLever <>4__this;

			[Token(Token = "0x40010F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x170001DB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600100D")]
				[Address(RVA = "0x9DF160", Offset = "0x9DF160", VA = "0x9DF160", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600100F")]
				[Address(RVA = "0x9DF1A8", Offset = "0x9DF1A8", VA = "0x9DF1A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600100A")]
			[Address(RVA = "0x9DF040", Offset = "0x9DF040", VA = "0x9DF040")]
			[DebuggerHidden]
			public <HoldPosition>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x600100B")]
			[Address(RVA = "0x9DF06C", Offset = "0x9DF06C", VA = "0x9DF06C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600100C")]
			[Address(RVA = "0x9DF070", Offset = "0x9DF070", VA = "0x9DF070", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600100E")]
			[Address(RVA = "0x9DF168", Offset = "0x9DF168", VA = "0x9DF168", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float LastValue;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float CurrentValue;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public LeverPosition LastLeverPosition;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public LeverPosition CurrentLeverPosition;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool LeverEngaged;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float EngageWaitTime;

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Transform InitialAttachPoint;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected HingeJoint HingeJoint;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected bool UseMotor;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		protected Quaternion Max;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		protected Quaternion Mid;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		protected Quaternion Min;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		protected float AngleRange;

		[Token(Token = "0x170001DA")]
		protected virtual float DeltaMagic
		{
			[Token(Token = "0x6001000")]
			[Address(RVA = "0x1240398", Offset = "0x1240398", VA = "0x1240398", Slot = "28")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0x12403A0", Offset = "0x12403A0", VA = "0x12403A0", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0x1240760", Offset = "0x1240760", VA = "0x1240760")]
		protected void Update()
		{
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0x12408E0", Offset = "0x12408E0", VA = "0x12408E0", Slot = "29")]
		protected virtual void Engage()
		{
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0x124099C", Offset = "0x124099C", VA = "0x124099C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x731D10", Offset = "0x731D10")]
		private IEnumerator HoldPosition(float time)
		{
			return null;
		}

		[Token(Token = "0x6001005")]
		[Address(RVA = "0x1240A24", Offset = "0x1240A24", VA = "0x1240A24", Slot = "10")]
		public override void BeginInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0x1240BC4", Offset = "0x1240BC4", VA = "0x1240BC4", Slot = "15")]
		public override void EndInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0x12407FC", Offset = "0x12407FC", VA = "0x12407FC")]
		private float GetValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0x12408A8", Offset = "0x12408A8", VA = "0x12408A8")]
		private LeverPosition GetPosition()
		{
			return default(LeverPosition);
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0x1240CB0", Offset = "0x1240CB0", VA = "0x1240CB0")]
		public NVRLever()
		{
		}
	}
	[Token(Token = "0x20002DF")]
	public class NVRPhysicalController : MonoBehaviour
	{
		[Token(Token = "0x20002E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728E68", Offset = "0x728E68")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x40010FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Type componentType;

			[Token(Token = "0x600101C")]
			[Address(RVA = "0x9DF4AC", Offset = "0x9DF4AC", VA = "0x9DF4AC")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x600101D")]
			[Address(RVA = "0x9DF4B4", Offset = "0x9DF4B4", VA = "0x9DF4B4")]
			internal bool <Initialize>b__0(Type keepType)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private NVRHand Hand;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool State;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody Rigidbody;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public GameObject PhysicalController;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 ClosestHeldPoint;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected float AttachedRotationMagic;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected float AttachedPositionMagic;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Type[] KeepTypes;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject RenderModel;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<NVRRenderModelType, GameObject> RenderModels;

		[Token(Token = "0x170001DD")]
		protected float DropDistance
		{
			[Token(Token = "0x6001010")]
			[Address(RVA = "0xD9ECC0", Offset = "0xD9ECC0", VA = "0xD9ECC0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0xD9ECC8", Offset = "0xD9ECC8", VA = "0xD9ECC8")]
		public void Initialize(NVRHand trackingHand, bool initialState)
		{
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0xD9FA60", Offset = "0xD9FA60", VA = "0xD9FA60")]
		public void Kill()
		{
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0xD9FAD4", Offset = "0xD9FAD4", VA = "0xD9FAD4")]
		private bool CheckForDrop()
		{
			return default(bool);
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0xD9FB8C", Offset = "0xD9FB8C", VA = "0xD9FB8C")]
		private void UpdatePosition()
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0xD9FD88", Offset = "0xD9FD88", VA = "0xD9FD88", Slot = "4")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0xD9FDC4", Offset = "0xD9FDC4", VA = "0xD9FDC4", Slot = "5")]
		protected virtual void DroppedBecauseOfDistance()
		{
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0xD9F99C", Offset = "0xD9F99C", VA = "0xD9F99C")]
		public void On()
		{
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0xD9F94C", Offset = "0xD9F94C", VA = "0xD9F94C")]
		public void Off()
		{
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0xD9FDE0", Offset = "0xD9FDE0", VA = "0xD9FDE0")]
		public void UpdateRenderModel()
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0xD9F378", Offset = "0xD9F378", VA = "0xD9F378")]
		protected void SetupCustomModel()
		{
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0xD9FEB0", Offset = "0xD9FEB0", VA = "0xD9FEB0")]
		public NVRPhysicalController()
		{
		}
	}
	[Token(Token = "0x20002E1")]
	public class NVRPlayer : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20002E2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728E78", Offset = "0x728E78")]
		private sealed class <>c
		{
			[Token(Token = "0x4001121")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4001122")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<NVRPlayer, bool> <>9__4_0;

			[Token(Token = "0x600102F")]
			[Address(RVA = "0x9DF5C8", Offset = "0x9DF5C8", VA = "0x9DF5C8")]
			public <>c()
			{
			}

			[Token(Token = "0x6001030")]
			[Address(RVA = "0x9DF5D0", Offset = "0x9DF5D0", VA = "0x9DF5D0")]
			internal bool <get_Instance>b__4_0(NVRPlayer player)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x20002E3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728E88", Offset = "0x728E88")]
		private sealed class <RecenterNextFrame>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001123")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001124")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001125")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NVRPlayer <>4__this;

			[Token(Token = "0x170001E0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001034")]
				[Address(RVA = "0x9DF8F0", Offset = "0x9DF8F0", VA = "0x9DF8F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001036")]
				[Address(RVA = "0x9DF938", Offset = "0x9DF938", VA = "0x9DF938", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001031")]
			[Address(RVA = "0x9DF690", Offset = "0x9DF690", VA = "0x9DF690")]
			[DebuggerHidden]
			public <RecenterNextFrame>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6001032")]
			[Address(RVA = "0x9DF6BC", Offset = "0x9DF6BC", VA = "0x9DF6BC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001033")]
			[Address(RVA = "0x9DF6C0", Offset = "0x9DF6C0", VA = "0x9DF6C0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001035")]
			[Address(RVA = "0x9DF8F8", Offset = "0x9DF8F8", VA = "0x9DF8F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[AttributeAttribute(Name = "DecimalConstantAttribute", RVA = "0x72D234", Offset = "0x72D234")]
		public static readonly decimal NewtonVRVersion;

		[Token(Token = "0x40010FD")]
		public const float NewtonVRExpectedDeltaTime = 0.0111f;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static List<NVRPlayer> Instances;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public bool SteamVREnabled;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[HideInInspector]
		public bool OculusSDKEnabled;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[HideInInspector]
		public bool WindowsMREnabled;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[HideInInspector]
		public bool PSVREnabled;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public bool QiyuVREnabled;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InterationStyle InteractionStyle;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool PhysicalHands;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool MakeControllerInvisibleOnInteraction;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		public bool AutomaticallySetControllerTransparency;

		[Token(Token = "0x4001108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
		public bool AlwaysPhysicalHands;

		[Token(Token = "0x4001109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool VibrateOnHover;

		[Token(Token = "0x400110A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int VelocityHistorySteps;

		[Token(Token = "0x400110B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent OnInitialized;

		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x72D2A8", Offset = "0x72D2A8")]
		public bool EnableEditorPlayerPreview;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Mesh EditorPlayerPreview;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Mesh EditorPlayspacePreview;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool EditorPlayspaceOverride;

		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector2 EditorPlayspaceDefault;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x72D2B8", Offset = "0x72D2B8")]
		public NVRRenderModelManager RenderModelManager;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x72D2C8", Offset = "0x72D2C8")]
		public NVRHead Head;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public NVRHand LeftHand;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public NVRHand RightHand;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public NVRHand[] Hands;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public NVRSDKIntegrations CurrentIntegrationType;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private NVRIntegration Integration;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Dictionary<Collider, NVRHand> ColliderToHandMapping;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0x72D2F8", Offset = "0x72D2F8")]
		public bool DEBUGEnableFallback2D;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		public bool DEBUGDropFrames;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public int DEBUGSleepPerFrame;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool AutoSetFixedDeltaTime;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		public bool NotifyOnVersionUpdate;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private string headName;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Vector3 defaultRecenterPosition;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public Vector3 defaultRecenterRotation;

		[Token(Token = "0x170001DE")]
		public static NVRPlayer Instance
		{
			[Token(Token = "0x600101E")]
			[Address(RVA = "0xDA012C", Offset = "0xDA012C", VA = "0xDA012C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DF")]
		public Vector3 PlayspaceSize
		{
			[Token(Token = "0x600101F")]
			[Address(RVA = "0xDA0284", Offset = "0xDA0284", VA = "0xDA0284")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0xDA058C", Offset = "0xDA058C", VA = "0xDA058C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0xDA0914", Offset = "0xDA0914", VA = "0xDA0914")]
		private void SetupIntegration(bool logOutput = true)
		{
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0xDA0AEC", Offset = "0xDA0AEC", VA = "0xDA0AEC")]
		private NVRSDKIntegrations DetermineCurrentIntegration(bool logOutput = true)
		{
			return default(NVRSDKIntegrations);
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0xDA0D90", Offset = "0xDA0D90", VA = "0xDA0D90")]
		public void setPostReprojectionCamera(bool enable, string text)
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0xDA0EF4", Offset = "0xDA0EF4", VA = "0xDA0EF4")]
		public void RegisterHand(NVRHand hand)
		{
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0xDA1010", Offset = "0xDA1010", VA = "0xDA1010")]
		public NVRHand GetHand(Collider collider)
		{
			return null;
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0xDA1074", Offset = "0xDA1074", VA = "0xDA1074")]
		public static void DeregisterInteractable(NVRInteractable interactable)
		{
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0xDA1384", Offset = "0xDA1384", VA = "0xDA1384")]
		public static void DeregisterInteractables()
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0xDA1684", Offset = "0xDA1684", VA = "0xDA1684")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0xDA1710", Offset = "0xDA1710", VA = "0xDA1710")]
		private void Update()
		{
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0xDA17A0", Offset = "0xDA17A0", VA = "0xDA17A0")]
		public void Recenter()
		{
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0xDA17CC", Offset = "0xDA17CC", VA = "0xDA17CC")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x731DC0", Offset = "0x731DC0")]
		private IEnumerator RecenterNextFrame()
		{
			return null;
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0xDA1844", Offset = "0xDA1844", VA = "0xDA1844")]
		public NVRPlayer()
		{
		}
	}
	[Token(Token = "0x20002E4")]
	public enum NVRSDKIntegrations
	{
		[Token(Token = "0x4001127")]
		None,
		[Token(Token = "0x4001128")]
		FallbackNonVR,
		[Token(Token = "0x4001129")]
		SteamVR,
		[Token(Token = "0x400112A")]
		Oculus,
		[Token(Token = "0x400112B")]
		WindowsMR,
		[Token(Token = "0x400112C")]
		PSVR,
		[Token(Token = "0x400112D")]
		QiyuVR
	}
	[Token(Token = "0x20002E5")]
	public class NVRSlider : NVRInteractable
	{
		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BoxCollider trackCollider;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D308", Offset = "0x72D308")]
		public float CurrentValue;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D340", Offset = "0x72D340")]
		public Transform StartPoint;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D378", Offset = "0x72D378")]
		public Transform EndPoint;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected float AttachedPositionMagic;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected Transform PickupTransform;

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Vector3 SliderPath;

		[Token(Token = "0x6001037")]
		[Address(RVA = "0xDA3588", Offset = "0xDA3588", VA = "0xDA3588", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0xDA37B4", Offset = "0xDA37B4", VA = "0xDA37B4", Slot = "22")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0xDA3990", Offset = "0xDA3990", VA = "0xDA3990", Slot = "10")]
		public override void BeginInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0xDA3AF4", Offset = "0xDA3AF4", VA = "0xDA3AF4", Slot = "15")]
		public override void EndInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0xDA3988", Offset = "0xDA3988", VA = "0xDA3988")]
		protected Vector3 ProjectVelocityOnPath(Vector3 velocity, Vector3 path)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0xDA3BD0", Offset = "0xDA3BD0", VA = "0xDA3BD0")]
		public NVRSlider()
		{
		}
	}
	[Token(Token = "0x20002E6")]
	public class NVRSwitch : MonoBehaviour
	{
		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool CurrentState;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool LastState;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		private bool FixedState;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform OnButton;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Renderer OnButtonRenderer;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform OffButton;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Renderer OffButtonRenderer;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody Rigidbody;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float ForceMagic;

		[Token(Token = "0x600103D")]
		[Address(RVA = "0xDA3E9C", Offset = "0xDA3E9C", VA = "0xDA3E9C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0xDA4058", Offset = "0xDA4058", VA = "0xDA4058")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0xDA4208", Offset = "0xDA4208", VA = "0xDA4208")]
		private void Update()
		{
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0xDA3F04", Offset = "0xDA3F04", VA = "0xDA3F04")]
		private void SetRotation(bool forState)
		{
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0xDA421C", Offset = "0xDA421C", VA = "0xDA421C")]
		public NVRSwitch()
		{
		}
	}
	[Token(Token = "0x20002E7")]
	public class NVRUIIgnoreRaycast : MonoBehaviour, ICanvasRaycastFilter
	{
		[Token(Token = "0x6001042")]
		[Address(RVA = "0xDA7444", Offset = "0xDA7444", VA = "0xDA7444", Slot = "4")]
		public bool IsRaycastLocationValid(Vector2 sp, Camera eventCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0xDA744C", Offset = "0xDA744C", VA = "0xDA744C")]
		public NVRUIIgnoreRaycast()
		{
		}
	}
	[Token(Token = "0x20002E8")]
	public class NVROculusInputDevice : NVRInputDevice
	{
		[Token(Token = "0x20002E9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728E98", Offset = "0x728E98")]
		private sealed class <DoHapticPulse>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001145")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001146")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001147")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NVROculusInputDevice <>4__this;

			[Token(Token = "0x4001148")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ushort durationMicroSec;

			[Token(Token = "0x4001149")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <endTime>5__2;

			[Token(Token = "0x170001E3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001062")]
				[Address(RVA = "0x9DF45C", Offset = "0x9DF45C", VA = "0x9DF45C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001064")]
				[Address(RVA = "0x9DF4A4", Offset = "0x9DF4A4", VA = "0x9DF4A4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600105F")]
			[Address(RVA = "0x9DF2F0", Offset = "0x9DF2F0", VA = "0x9DF2F0")]
			[DebuggerHidden]
			public <DoHapticPulse>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6001060")]
			[Address(RVA = "0x9DF31C", Offset = "0x9DF31C", VA = "0x9DF31C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001061")]
			[Address(RVA = "0x9DF320", Offset = "0x9DF320", VA = "0x9DF320", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001063")]
			[Address(RVA = "0x9DF464", Offset = "0x9DF464", VA = "0x9DF464", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GameObject RenderModel;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRInput.Controller Controller;

		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<NVRButtons, OVRInput.Button> ButtonMapping;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<NVRButtons, OVRInput.Touch> TouchMapping;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Dictionary<NVRButtons, OVRInput.NearTouch> NearTouchMapping;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Dictionary<NVRButtons, OVRInput.Axis1D> TriggerMapping;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<NVRButtons, OVRInput.Axis2D> StickMapping;

		[Token(Token = "0x170001E2")]
		public override bool IsCurrentlyTracked
		{
			[Token(Token = "0x6001058")]
			[Address(RVA = "0xD9DA10", Offset = "0xD9DA10", VA = "0xD9DA10", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0xD9CC8C", Offset = "0xD9CC8C", VA = "0xD9CC8C", Slot = "4")]
		public override void Initialize(NVRHand hand)
		{
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0xD9CD50", Offset = "0xD9CD50", VA = "0xD9CD50", Slot = "23")]
		protected virtual void SetupButtonMapping()
		{
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0xD9D024", Offset = "0xD9D024", VA = "0xD9D024")]
		private OVRInput.Button GetButtonMap(NVRButtons button)
		{
			return default(OVRInput.Button);
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0xD9D0C8", Offset = "0xD9D0C8", VA = "0xD9D0C8")]
		private OVRInput.Touch GetTouchMap(NVRButtons button)
		{
			return default(OVRInput.Touch);
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0xD9D16C", Offset = "0xD9D16C", VA = "0xD9D16C")]
		private OVRInput.NearTouch GetNearTouchMap(NVRButtons button)
		{
			return default(OVRInput.NearTouch);
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0xD9D210", Offset = "0xD9D210", VA = "0xD9D210")]
		private OVRInput.Axis1D GetTriggerMap(NVRButtons button)
		{
			return default(OVRInput.Axis1D);
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0xD9D2B4", Offset = "0xD9D2B4", VA = "0xD9D2B4")]
		private OVRInput.Axis2D GetStickMap(NVRButtons button)
		{
			return default(OVRInput.Axis2D);
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0xD9D358", Offset = "0xD9D358", VA = "0xD9D358", Slot = "12")]
		public override float GetAxis1D(NVRButtons button)
		{
			return default(float);
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0xD9D3E4", Offset = "0xD9D3E4", VA = "0xD9D3E4", Slot = "13")]
		public override Vector2 GetAxis2D(NVRButtons button)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0xD9D470", Offset = "0xD9D470", VA = "0xD9D470", Slot = "14")]
		public override bool GetPressDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0xD9D4FC", Offset = "0xD9D4FC", VA = "0xD9D4FC", Slot = "15")]
		public override bool GetPressUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0xD9D588", Offset = "0xD9D588", VA = "0xD9D588", Slot = "16")]
		public override bool GetPress(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xD9D614", Offset = "0xD9D614", VA = "0xD9D614", Slot = "17")]
		public override bool GetTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0xD9D6A0", Offset = "0xD9D6A0", VA = "0xD9D6A0", Slot = "18")]
		public override bool GetTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0xD9D72C", Offset = "0xD9D72C", VA = "0xD9D72C", Slot = "19")]
		public override bool GetTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0xD9D7B8", Offset = "0xD9D7B8", VA = "0xD9D7B8", Slot = "20")]
		public override bool GetNearTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0xD9D844", Offset = "0xD9D844", VA = "0xD9D844", Slot = "21")]
		public override bool GetNearTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001055")]
		[Address(RVA = "0xD9D8D0", Offset = "0xD9D8D0", VA = "0xD9D8D0", Slot = "22")]
		public override bool GetNearTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0xD9D95C", Offset = "0xD9D95C", VA = "0xD9D95C", Slot = "11")]
		public override void TriggerHapticPulse(ushort durationMicroSec = 500, NVRButtons button = NVRButtons.Touchpad)
		{
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0xD9D988", Offset = "0xD9D988", VA = "0xD9D988")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x731E70", Offset = "0x731E70")]
		private IEnumerator DoHapticPulse(ushort durationMicroSec)
		{
			return null;
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0xD9DA78", Offset = "0xD9DA78", VA = "0xD9DA78", Slot = "7")]
		public override GameObject SetupDefaultRenderModel()
		{
			return null;
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0xD9DC98", Offset = "0xD9DC98", VA = "0xD9DC98", Slot = "8")]
		public override bool ReadyToInitialize()
		{
			return default(bool);
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0xD9DCA0", Offset = "0xD9DCA0", VA = "0xD9DCA0", Slot = "10")]
		public override string GetDeviceName()
		{
			return null;
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0xD9DDD0", Offset = "0xD9DDD0", VA = "0xD9DDD0", Slot = "6")]
		public override Collider[] SetupDefaultPhysicalColliders(Transform ModelParent)
		{
			return null;
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0xD9E00C", Offset = "0xD9E00C", VA = "0xD9E00C", Slot = "9")]
		public override Collider[] SetupDefaultColliders()
		{
			return null;
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0xD9E134", Offset = "0xD9E134", VA = "0xD9E134")]
		public NVROculusInputDevice()
		{
		}
	}
	[Token(Token = "0x20002EA")]
	public class NVROculusIntegration : NVRIntegration
	{
		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private OVRBoundary boundary;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private OVRDisplay display;

		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRTracker tracker;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 PlayspaceBounds;

		[Token(Token = "0x170001E5")]
		private OVRBoundary Boundary
		{
			[Token(Token = "0x6001065")]
			[Address(RVA = "0xD9E39C", Offset = "0xD9E39C", VA = "0xD9E39C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E6")]
		private OVRDisplay Display
		{
			[Token(Token = "0x6001066")]
			[Address(RVA = "0xD9E410", Offset = "0xD9E410", VA = "0xD9E410")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E7")]
		private OVRTracker Tracker
		{
			[Token(Token = "0x6001067")]
			[Address(RVA = "0xD9E484", Offset = "0xD9E484", VA = "0xD9E484")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0xD9E4F8", Offset = "0xD9E4F8", VA = "0xD9E4F8", Slot = "4")]
		public override void Initialize(NVRPlayer player)
		{
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0xD9E804", Offset = "0xD9E804", VA = "0xD9E804")]
		private void PlayGame()
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0xD9E890", Offset = "0xD9E890", VA = "0xD9E890")]
		private void PauseGame()
		{
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0xD9E91C", Offset = "0xD9E91C", VA = "0xD9E91C", Slot = "5")]
		public override Vector3 GetPlayspaceBounds()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0xD9E97C", Offset = "0xD9E97C", VA = "0xD9E97C", Slot = "6")]
		public override bool IsHmdPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xD9EA28", Offset = "0xD9EA28", VA = "0xD9EA28")]
		public NVROculusIntegration()
		{
		}
	}
	[Token(Token = "0x20002EB")]
	public class NVRPSVRInputDevice : NVRInputDevice
	{
		[Token(Token = "0x170001E8")]
		public override bool IsCurrentlyTracked
		{
			[Token(Token = "0x600106E")]
			[Address(RVA = "0xD9EA5C", Offset = "0xD9EA5C", VA = "0xD9EA5C", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0xD9EAE8", Offset = "0xD9EAE8", VA = "0xD9EAE8", Slot = "12")]
		public override float GetAxis1D(NVRButtons button)
		{
			return default(float);
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0xD9EB00", Offset = "0xD9EB00", VA = "0xD9EB00", Slot = "13")]
		public override Vector2 GetAxis2D(NVRButtons button)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0xD9EB18", Offset = "0xD9EB18", VA = "0xD9EB18", Slot = "10")]
		public override string GetDeviceName()
		{
			return null;
		}

		[Token(Token = "0x6001072")]
		[Address(RVA = "0xD9EB60", Offset = "0xD9EB60", VA = "0xD9EB60", Slot = "22")]
		public override bool GetNearTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xD9EB78", Offset = "0xD9EB78", VA = "0xD9EB78", Slot = "20")]
		public override bool GetNearTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xD9EB90", Offset = "0xD9EB90", VA = "0xD9EB90", Slot = "21")]
		public override bool GetNearTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xD9EBA8", Offset = "0xD9EBA8", VA = "0xD9EBA8", Slot = "16")]
		public override bool GetPress(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xD9EBC0", Offset = "0xD9EBC0", VA = "0xD9EBC0", Slot = "14")]
		public override bool GetPressDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xD9EBD8", Offset = "0xD9EBD8", VA = "0xD9EBD8", Slot = "15")]
		public override bool GetPressUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xD9EBF0", Offset = "0xD9EBF0", VA = "0xD9EBF0", Slot = "19")]
		public override bool GetTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xD9EC08", Offset = "0xD9EC08", VA = "0xD9EC08", Slot = "17")]
		public override bool GetTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xD9EC20", Offset = "0xD9EC20", VA = "0xD9EC20", Slot = "18")]
		public override bool GetTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xD9EC38", Offset = "0xD9EC38", VA = "0xD9EC38", Slot = "8")]
		public override bool ReadyToInitialize()
		{
			return default(bool);
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xD9EC50", Offset = "0xD9EC50", VA = "0xD9EC50", Slot = "9")]
		public override Collider[] SetupDefaultColliders()
		{
			return null;
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xD9EC68", Offset = "0xD9EC68", VA = "0xD9EC68", Slot = "6")]
		public override Collider[] SetupDefaultPhysicalColliders(Transform ModelParent)
		{
			return null;
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xD9EC80", Offset = "0xD9EC80", VA = "0xD9EC80", Slot = "7")]
		public override GameObject SetupDefaultRenderModel()
		{
			return null;
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xD9EC98", Offset = "0xD9EC98", VA = "0xD9EC98", Slot = "11")]
		public override void TriggerHapticPulse(ushort durationMicroSec = 500, NVRButtons button = NVRButtons.Touchpad)
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xD9EA74", Offset = "0xD9EA74", VA = "0xD9EA74")]
		private void PrintNotEnabledError()
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0xD9EC9C", Offset = "0xD9EC9C", VA = "0xD9EC9C")]
		public NVRPSVRInputDevice()
		{
		}
	}
	[Token(Token = "0x20002EC")]
	public class NVRPSVRIntegration : NVRIntegration
	{
		[Token(Token = "0x6001082")]
		[Address(RVA = "0xD9ECA4", Offset = "0xD9ECA4", VA = "0xD9ECA4", Slot = "4")]
		public override void Initialize(NVRPlayer player)
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xD9ECA8", Offset = "0xD9ECA8", VA = "0xD9ECA8", Slot = "5")]
		public override Vector3 GetPlayspaceBounds()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xD9ECB0", Offset = "0xD9ECB0", VA = "0xD9ECB0", Slot = "6")]
		public override bool IsHmdPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0xD9ECB8", Offset = "0xD9ECB8", VA = "0xD9ECB8")]
		public NVRPSVRIntegration()
		{
		}
	}
	[Token(Token = "0x20002ED")]
	public class NVRQiyuVRInputDevice : NVRInputDevice
	{
		[Token(Token = "0x170001E9")]
		public override bool IsCurrentlyTracked
		{
			[Token(Token = "0x6001086")]
			[Address(RVA = "0xDA1950", Offset = "0xDA1950", VA = "0xDA1950", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0xDA1990", Offset = "0xDA1990", VA = "0xDA1990", Slot = "12")]
		public override float GetAxis1D(NVRButtons button)
		{
			return default(float);
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xDA19D0", Offset = "0xDA19D0", VA = "0xDA19D0", Slot = "13")]
		public override Vector2 GetAxis2D(NVRButtons button)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xDA1A10", Offset = "0xDA1A10", VA = "0xDA1A10", Slot = "10")]
		public override string GetDeviceName()
		{
			return null;
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xDA1A50", Offset = "0xDA1A50", VA = "0xDA1A50", Slot = "22")]
		public override bool GetNearTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xDA1A90", Offset = "0xDA1A90", VA = "0xDA1A90", Slot = "20")]
		public override bool GetNearTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xDA1AD0", Offset = "0xDA1AD0", VA = "0xDA1AD0", Slot = "21")]
		public override bool GetNearTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0xDA1B10", Offset = "0xDA1B10", VA = "0xDA1B10", Slot = "16")]
		public override bool GetPress(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xDA1B50", Offset = "0xDA1B50", VA = "0xDA1B50", Slot = "14")]
		public override bool GetPressDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x600108F")]
		[Address(RVA = "0xDA1B90", Offset = "0xDA1B90", VA = "0xDA1B90", Slot = "15")]
		public override bool GetPressUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xDA1BD0", Offset = "0xDA1BD0", VA = "0xDA1BD0", Slot = "19")]
		public override bool GetTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0xDA1C10", Offset = "0xDA1C10", VA = "0xDA1C10", Slot = "17")]
		public override bool GetTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0xDA1C50", Offset = "0xDA1C50", VA = "0xDA1C50", Slot = "18")]
		public override bool GetTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0xDA1C90", Offset = "0xDA1C90", VA = "0xDA1C90", Slot = "8")]
		public override bool ReadyToInitialize()
		{
			return default(bool);
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0xDA1CD0", Offset = "0xDA1CD0", VA = "0xDA1CD0", Slot = "9")]
		public override Collider[] SetupDefaultColliders()
		{
			return null;
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xDA1D10", Offset = "0xDA1D10", VA = "0xDA1D10", Slot = "6")]
		public override Collider[] SetupDefaultPhysicalColliders(Transform ModelParent)
		{
			return null;
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xDA1D50", Offset = "0xDA1D50", VA = "0xDA1D50", Slot = "7")]
		public override GameObject SetupDefaultRenderModel()
		{
			return null;
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0xDA1D90", Offset = "0xDA1D90", VA = "0xDA1D90", Slot = "11")]
		public override void TriggerHapticPulse(ushort durationMicroSec = 500, NVRButtons button = NVRButtons.Touchpad)
		{
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xDA1DD0", Offset = "0xDA1DD0", VA = "0xDA1DD0")]
		public NVRQiyuVRInputDevice()
		{
		}
	}
	[Token(Token = "0x20002EE")]
	public class NVRQiyuVRIntegration : NVRIntegration
	{
		[Token(Token = "0x6001099")]
		[Address(RVA = "0xDA1DD8", Offset = "0xDA1DD8", VA = "0xDA1DD8", Slot = "4")]
		public override void Initialize(NVRPlayer player)
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xDA1DDC", Offset = "0xDA1DDC", VA = "0xDA1DDC", Slot = "5")]
		public override Vector3 GetPlayspaceBounds()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xDA1DE4", Offset = "0xDA1DE4", VA = "0xDA1DE4", Slot = "6")]
		public override bool IsHmdPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xDA0584", Offset = "0xDA0584", VA = "0xDA0584")]
		public NVRQiyuVRIntegration()
		{
		}
	}
	[Token(Token = "0x20002EF")]
	public class NVRSteamVRInputDevice : NVRInputDevice
	{
		[Token(Token = "0x170001EA")]
		public override bool IsCurrentlyTracked
		{
			[Token(Token = "0x600109D")]
			[Address(RVA = "0xDA3C40", Offset = "0xDA3C40", VA = "0xDA3C40", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xDA3CCC", Offset = "0xDA3CCC", VA = "0xDA3CCC", Slot = "12")]
		public override float GetAxis1D(NVRButtons button)
		{
			return default(float);
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xDA3CE4", Offset = "0xDA3CE4", VA = "0xDA3CE4", Slot = "13")]
		public override Vector2 GetAxis2D(NVRButtons button)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0xDA3CFC", Offset = "0xDA3CFC", VA = "0xDA3CFC", Slot = "10")]
		public override string GetDeviceName()
		{
			return null;
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xDA3D44", Offset = "0xDA3D44", VA = "0xDA3D44", Slot = "22")]
		public override bool GetNearTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0xDA3D5C", Offset = "0xDA3D5C", VA = "0xDA3D5C", Slot = "20")]
		public override bool GetNearTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0xDA3D74", Offset = "0xDA3D74", VA = "0xDA3D74", Slot = "21")]
		public override bool GetNearTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0xDA3D8C", Offset = "0xDA3D8C", VA = "0xDA3D8C", Slot = "16")]
		public override bool GetPress(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0xDA3DA4", Offset = "0xDA3DA4", VA = "0xDA3DA4", Slot = "14")]
		public override bool GetPressDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0xDA3DBC", Offset = "0xDA3DBC", VA = "0xDA3DBC", Slot = "15")]
		public override bool GetPressUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0xDA3DD4", Offset = "0xDA3DD4", VA = "0xDA3DD4", Slot = "19")]
		public override bool GetTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0xDA3DEC", Offset = "0xDA3DEC", VA = "0xDA3DEC", Slot = "17")]
		public override bool GetTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0xDA3E04", Offset = "0xDA3E04", VA = "0xDA3E04", Slot = "18")]
		public override bool GetTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xDA3E1C", Offset = "0xDA3E1C", VA = "0xDA3E1C", Slot = "8")]
		public override bool ReadyToInitialize()
		{
			return default(bool);
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0xDA3E34", Offset = "0xDA3E34", VA = "0xDA3E34", Slot = "9")]
		public override Collider[] SetupDefaultColliders()
		{
			return null;
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0xDA3E4C", Offset = "0xDA3E4C", VA = "0xDA3E4C", Slot = "6")]
		public override Collider[] SetupDefaultPhysicalColliders(Transform ModelParent)
		{
			return null;
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0xDA3E64", Offset = "0xDA3E64", VA = "0xDA3E64", Slot = "7")]
		public override GameObject SetupDefaultRenderModel()
		{
			return null;
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0xDA3E7C", Offset = "0xDA3E7C", VA = "0xDA3E7C", Slot = "11")]
		public override void TriggerHapticPulse(ushort durationMicroSec = 500, NVRButtons button = NVRButtons.Touchpad)
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0xDA3C58", Offset = "0xDA3C58", VA = "0xDA3C58")]
		private void PrintNotEnabledError()
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xDA3E80", Offset = "0xDA3E80", VA = "0xDA3E80")]
		public NVRSteamVRInputDevice()
		{
		}
	}
	[Token(Token = "0x20002F0")]
	public class NVRSteamVRIntegration : NVRIntegration
	{
		[Token(Token = "0x60010B1")]
		[Address(RVA = "0xDA3E88", Offset = "0xDA3E88", VA = "0xDA3E88", Slot = "4")]
		public override void Initialize(NVRPlayer player)
		{
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0xDA3E8C", Offset = "0xDA3E8C", VA = "0xDA3E8C", Slot = "5")]
		public override Vector3 GetPlayspaceBounds()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xDA3E94", Offset = "0xDA3E94", VA = "0xDA3E94", Slot = "6")]
		public override bool IsHmdPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xDA0508", Offset = "0xDA0508", VA = "0xDA0508")]
		public NVRSteamVRIntegration()
		{
		}
	}
	[Token(Token = "0x20002F1")]
	public class NVRWindowsMRInput : NVRInputDevice
	{
		[Token(Token = "0x170001EB")]
		public override bool IsCurrentlyTracked
		{
			[Token(Token = "0x60010B5")]
			[Address(RVA = "0xDA7454", Offset = "0xDA7454", VA = "0xDA7454", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xDA74E0", Offset = "0xDA74E0", VA = "0xDA74E0", Slot = "12")]
		public override float GetAxis1D(NVRButtons button)
		{
			return default(float);
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xDA74F8", Offset = "0xDA74F8", VA = "0xDA74F8", Slot = "13")]
		public override Vector2 GetAxis2D(NVRButtons button)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0xDA7510", Offset = "0xDA7510", VA = "0xDA7510", Slot = "10")]
		public override string GetDeviceName()
		{
			return null;
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0xDA7558", Offset = "0xDA7558", VA = "0xDA7558", Slot = "22")]
		public override bool GetNearTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0xDA7570", Offset = "0xDA7570", VA = "0xDA7570", Slot = "20")]
		public override bool GetNearTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0xDA7588", Offset = "0xDA7588", VA = "0xDA7588", Slot = "21")]
		public override bool GetNearTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0xDA75A0", Offset = "0xDA75A0", VA = "0xDA75A0", Slot = "16")]
		public override bool GetPress(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xDA75B8", Offset = "0xDA75B8", VA = "0xDA75B8", Slot = "14")]
		public override bool GetPressDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xDA75D0", Offset = "0xDA75D0", VA = "0xDA75D0", Slot = "15")]
		public override bool GetPressUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0xDA75E8", Offset = "0xDA75E8", VA = "0xDA75E8", Slot = "19")]
		public override bool GetTouch(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0xDA7600", Offset = "0xDA7600", VA = "0xDA7600", Slot = "17")]
		public override bool GetTouchDown(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xDA7618", Offset = "0xDA7618", VA = "0xDA7618", Slot = "18")]
		public override bool GetTouchUp(NVRButtons button)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0xDA7630", Offset = "0xDA7630", VA = "0xDA7630", Slot = "8")]
		public override bool ReadyToInitialize()
		{
			return default(bool);
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xDA7648", Offset = "0xDA7648", VA = "0xDA7648", Slot = "9")]
		public override Collider[] SetupDefaultColliders()
		{
			return null;
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0xDA7660", Offset = "0xDA7660", VA = "0xDA7660", Slot = "6")]
		public override Collider[] SetupDefaultPhysicalColliders(Transform ModelParent)
		{
			return null;
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0xDA7678", Offset = "0xDA7678", VA = "0xDA7678", Slot = "7")]
		public override GameObject SetupDefaultRenderModel()
		{
			return null;
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0xDA7690", Offset = "0xDA7690", VA = "0xDA7690", Slot = "11")]
		public override void TriggerHapticPulse(ushort durationMicroSec = 500, NVRButtons button = NVRButtons.Touchpad)
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0xDA746C", Offset = "0xDA746C", VA = "0xDA746C")]
		private void PrintNotEnabledError()
		{
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0xDA7694", Offset = "0xDA7694", VA = "0xDA7694")]
		public NVRWindowsMRInput()
		{
		}
	}
	[Token(Token = "0x20002F2")]
	public class NVRWindowsMRIntegration : NVRIntegration
	{
		[Token(Token = "0x20002F3")]
		public enum DisplayType
		{
			[Token(Token = "0x400115A")]
			Opaque,
			[Token(Token = "0x400115B")]
			Transparent
		}

		[Token(Token = "0x20002F4")]
		public delegate void DisplayEventHandler(DisplayType displayType);

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D3B0", Offset = "0x72D3B0")]
		public float NearClipPlane_OpaqueDisplay;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D3E8", Offset = "0x72D3E8")]
		public CameraClearFlags CameraClearFlags_OpaqueDisplay;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D420", Offset = "0x72D420")]
		public Color BackgroundColor_OpaqueDisplay;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D458", Offset = "0x72D458")]
		public int OpaqueQualityLevel;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D490", Offset = "0x72D490")]
		public float NearClipPlane_TransparentDisplay;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D4C8", Offset = "0x72D4C8")]
		public CameraClearFlags CameraClearFlags_TransparentDisplay;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D500", Offset = "0x72D500")]
		public Color BackgroundColor_TransparentDisplay;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0x72D538", Offset = "0x72D538")]
		public int HoloLensQualityLevel;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 PlayspaceBounds;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x72D570", Offset = "0x72D570")]
		private DisplayType <CurrentDisplayType>k__BackingField;

		[Token(Token = "0x170001EC")]
		public DisplayType CurrentDisplayType
		{
			[Token(Token = "0x60010CC")]
			[Address(RVA = "0xDA7720", Offset = "0xDA7720", VA = "0xDA7720")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731F20", Offset = "0x731F20")]
			get
			{
				return default(DisplayType);
			}
			[Token(Token = "0x60010CD")]
			[Address(RVA = "0xDA7728", Offset = "0xDA7728", VA = "0xDA7728")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731F30", Offset = "0x731F30")]
			private set
			{
			}
		}

		[Token(Token = "0x1400001B")]
		public event DisplayEventHandler OnDisplayDetected
		{
			[Token(Token = "0x60010CE")]
			[Address(RVA = "0xDA7730", Offset = "0xDA7730", VA = "0xDA7730")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731F40", Offset = "0x731F40")]
			add
			{
			}
			[Token(Token = "0x60010CF")]
			[Address(RVA = "0xDA77D0", Offset = "0xDA77D0", VA = "0xDA77D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x731F50", Offset = "0x731F50")]
			remove
			{
			}
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xDA769C", Offset = "0xDA769C", VA = "0xDA769C", Slot = "4")]
		public override void Initialize(NVRPlayer player)
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xDA770C", Offset = "0xDA770C", VA = "0xDA770C", Slot = "5")]
		public override Vector3 GetPlayspaceBounds()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xDA7718", Offset = "0xDA7718", VA = "0xDA7718", Slot = "6")]
		public override bool IsHmdPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xDA7870", Offset = "0xDA7870", VA = "0xDA7870")]
		public void ApplySettingsForOpaqueDisplay(Camera cam)
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xDA794C", Offset = "0xDA794C", VA = "0xDA794C")]
		public void ApplySettingsForTransparentDisplay(Camera cam)
		{
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0xDA7940", Offset = "0xDA7940", VA = "0xDA7940")]
		private static void SetQuality(int level)
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0xDA0510", Offset = "0xDA0510", VA = "0xDA0510")]
		public NVRWindowsMRIntegration()
		{
		}
	}
	[Token(Token = "0x20002F5")]
	public class ActionBalloon_Piece : ActionTexture_Piece
	{
		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private float floatStrength;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		private float maxHeight;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private float minHeight;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		private bool goingUp;

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0x101C9E0", Offset = "0x101C9E0", VA = "0x101C9E0", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0x101CA18", Offset = "0x101CA18", VA = "0x101CA18")]
		private void Update()
		{
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0x101CB48", Offset = "0x101CB48", VA = "0x101CB48", Slot = "15")]
		public override void EndInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0x101CBE8", Offset = "0x101CBE8", VA = "0x101CBE8", Slot = "33")]
		protected override void checkMovement()
		{
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0x101CBF0", Offset = "0x101CBF0", VA = "0x101CBF0")]
		public ActionBalloon_Piece()
		{
		}
	}
	[Token(Token = "0x20002F6")]
	public class ActionLevelCrossing_Piece : AttachablePiece
	{
		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public Transform barrera1;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public Transform barrera2;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private bool open;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private Quaternion rotationEnd;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		private Quaternion rotationEnd2;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private Vector3 vectorOpen;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Vector3 vectorOpen2;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		private Vector3 vectorClosed;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private AudioSource barrierSound;

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0x101CCCC", Offset = "0x101CCCC", VA = "0x101CCCC", Slot = "30")]
		public override void init()
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0x101CF3C", Offset = "0x101CF3C", VA = "0x101CF3C", Slot = "42")]
		public override void actionButtonDown()
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0x101CFC8", Offset = "0x101CFC8", VA = "0x101CFC8", Slot = "15")]
		public override void EndInteraction(NVRHand hand)
		{
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0x101D040", Offset = "0x101D040", VA = "0x101D040")]
		public void rotateBarrier()
		{
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0x101D318", Offset = "0x101D318", VA = "0x101D318")]
		public ActionLevelCrossing_Piece()
		{
		}
	}
	[Token(Token = "0x20002F7")]
	public class ActionLight_Piece : AttachablePiece
	{
		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public GameObject localLight;

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0x101D484", Offset = "0x101D484", VA = "0x101D484", Slot = "42")]
		public override void actionButtonDown()
		{
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0x101D52C", Offset = "0x101D52C", VA = "0x101D52C")]
		public ActionLight_Piece()
		{
		}
	}
	[Token(Token = "0x20002F8")]
	public class ActionModel_Piece : ActionPiece
	{
		[Token(Token = "0x20002F9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728EA8", Offset = "0x728EA8")]
		private sealed class <InvokeOnTriggerExitHand>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400116E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400116F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001170")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NVRHand hand;

			[Token(Token = "0x4001171")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Collider[] exitColliders;

			[Token(Token = "0x4001172")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ActionModel_Piece <>4__this;

			[Token(Token = "0x170001ED")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010EF")]
				[Address(RVA = "0x9D5914", Offset = "0x9D5914", VA = "0x9D5914", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001EE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010F1")]
				[Address(RVA = "0x9D595C", Offset = "0x9D595C", VA = "0x9D595C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010EC")]
			[Address(RVA = "0x9D57B8", Offset = "0x9D57B8", VA = "0x9D57B8")]
			[DebuggerHidden]
			public <InvokeOnTriggerExitHand>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60010ED")]
			[Address(RVA = "0x9D57E4", Offset = "0x9D57E4", VA = "0x9D57E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010EE")]
			[Address(RVA = "0x9D57E8", Offset = "0x9D57E8", VA = "0x9D57E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010F0")]
			[Address(RVA = "0x9D591C", Offset = "0x9D591C", VA = "0x9D591C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public List<Transform> modelList;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private int model_count;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		private int currentModel;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private bool firstRandom;

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0x101D530", Offset = "0x101D530", VA = "0x101D530", Slot = "30")]
		public override void init()
		{
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0x101E0B0", Offset = "0x101E0B0", VA = "0x101E0B0", Slot = "42")]
		public override void actionButtonDown()
		{
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0x101DDCC", Offset = "0x101DDCC", VA = "0x101DDCC")]
		private void changeToModel(int modelId)
		{
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0x101E0D0", Offset = "0x101E0D0", VA = "0x101E0D0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x731F60", Offset = "0x731F60")]
		private IEnumerator InvokeOnTriggerExitHand(NVRHand hand, Collider[] exitColliders)
		{
			return null;
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0x101E178", Offset = "0x101E178", VA = "0x101E178", Slot = "38")]
		public override Piece clonePiece(bool bAnimation, int iId)
		{
			return null;
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0x101E22C", Offset = "0x101E22C", VA = "0x101E22C")]
		public int getCurrentModel()
		{
			return default(int);
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0x101E234", Offset = "0x101E234", VA = "0x101E234")]
		public void setCurrentModel(int iModel)
		{
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0x101E23C", Offset = "0x101E23C", VA = "0x101E23C")]
		public ActionModel_Piece()
		{
		}
	}
	[Token(Token = "0x20002FA")]
	public class ActionPiece : Piece
	{
		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ActionPiece locked;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int hoveringLinkedPiece;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		public bool actionable;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x175")]
		public bool forceAction;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x176")]
		public bool linked;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		protected Transform actionableIcon;

		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private float speed;

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0x101DC48", Offset = "0x101DC48", VA = "0x101DC48", Slot = "30")]
		public override void init()
		{
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0x101E318", Offset = "0x101E318", VA = "0x101E318", Slot = "12")]
		public override void HoveringEnter(NVRHand hand)
		{
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0x101E3AC", Offset = "0x101E3AC", VA = "0x101E3AC", Slot = "13")]
		public override void HoveringUpdate(NVRHand hand, float forTime)
		{
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0x101E99C", Offset = "0x101E99C", VA = "0x101E99C", Slot = "14")]
		public override void HoveringExit(NVRHand hand)
		{
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0x101EC68", Offset = "0x101EC68", VA = "0x101EC68", Slot = "42")]
		public virtual void actionButtonDown()
		{
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0x101EC6C", Offset = "0x101EC6C", VA = "0x101EC6C", Slot = "40")]
		protected override void setHandState(NVRHand hand)
		{
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0x101ED18", Offset = "0x101ED18", VA = "0x101ED18", Slot = "41")]
		protected override void setDefaultHandState(NVRHand hand)
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x101EE1C", Offset = "0x101EE1C", VA = "0x101EE1C", Slot = "21")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x101E2AC", Offset = "0x101E2AC", VA = "0x101E2AC")]
		public ActionPiece()
		{
		}
	}
	[Token(Token = "0x20002FB")]
	public class ActionTexture_Piece : AttachablePiece
	{
		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public string textureResource;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public int textureLimit;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		public int texture_count;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public int currentTexture;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Renderer m_renderer;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Renderer m_renderer_lod;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private bool firstRandom;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public Transform custom_model;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public Transform custom_model_lod;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Dictionary<int, Renderer> weldRenderers;

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0x101EEC8", Offset = "0x101EEC8", VA = "0x101EEC8", Slot = "30")]
		public override void init()
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x101F55C", Offset = "0x101F55C", VA = "0x101F55C", Slot = "42")]
		public override void actionButtonDown()
		{
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0x101F244", Offset = "0x101F244", VA = "0x101F244")]
		public void setTexture(int textureId)
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0x101F57C", Offset = "0x101F57C", VA = "0x101F57C")]
		public int getTextureId()
		{
			return default(int);
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0x101F584", Offset = "0x101F584", VA = "0x101F584", Slot = "38")]
		public override Piece clonePiece(bool bAnimation, int iId)
		{
			return null;
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0x101F678", Offset = "0x101F678", VA = "0x101F678", Slot = "44")]
		protected override void customWeldPiece(AttachablePiece weldPiece)
		{
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0x101F858", Offset = "0x101F858", VA = "0x101F858", Slot = "45")]
		protected override AttachablePiece customUnweldPiece(PieceData pieceData)
		{
			return null;
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0x101CC10", Offset = "0x101CC10", VA = "0x101CC10")]
		public ActionTexture_Piece()
		{
		}
	}
	[Token(Token = "0x20002FC")]
	public class AttachablePiece : ActionPiece
	{
		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[HideInInspector]
		public List<CustomNVRAttachPoint> AttachPointsList;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[HideInInspector]
		public List<CustomNVRAttachJoint> AttachJointsList;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[HideInInspector]
		public List<GameObject> NormalObjectsTagList;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		[HideInInspector]
		public List<GameObject> WeldObjectsTagList;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public bool mirrorable;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A9")]
		private bool m_bTrainOnTrack;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		protected Trainer.Path[] m_paths;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Material jointDefaultMat;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Material attachCorrectMat;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Material redMat;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		protected Dictionary<Train, PathPosition> m_hmPathTrain;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private Transform m_meshCollider;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Transform m_defaultCollider;

		[Token(Token = "0x6001104")]
		[Address(RVA = "0x1024F14", Offset = "0x1024F14", VA = "0x1024F14", Slot = "28")]
		public override void enablePiece(bool enable)
		{
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0x101CD30", Offset = "0x101CD30", VA = "0x101CD30", Slot = "30")]
		public override void init()
		{
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0x1025CF8", Offset = "0x1025CF8", VA = "0x1025CF8", Slot = "43")]
		protected virtual void initPaths()
		{
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0x102570C", Offset = "0x102570C", VA = "0x102570C")]
		public void updatePointsJointsLists()
		{
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0x1025D54", Offset = "0x1025D54", VA = "0x1025D54")]
		public bool isTrack()
		{
			return default(bool);
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0x1024F20", Offset = "0x1024F20", VA = "0x1024F20")]
		public void getWeldObjectLists()
		{
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0x101F634", Offset = "0x101F634", VA = "0x101F634", Slot = "38")]
		public override Piece clonePiece(bool bAnimation, int iId)
		{
			return null;
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0x10261B0", Offset = "0x10261B0", VA = "0x10261B0")]
		private void renameJointsPoints()
		{
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0x1026514", Offset = "0x1026514", VA = "0x1026514", Slot = "31")]
		protected override void startInteractionImpl()
		{
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0x102651C", Offset = "0x102651C", VA = "0x102651C", Slot = "11")]
		public override void InteractingUpdate(NVRHand hand)
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0x10266A0", Offset = "0x10266A0", VA = "0x10266A0", Slot = "42")]
		public override void actionButtonDown()
		{
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0x10266B8", Offset = "0x10266B8", VA = "0x10266B8")]
		public void mirrorPiece()
		{
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0x1026794", Offset = "0x1026794", VA = "0x1026794", Slot = "32")]
		protected override void removeInteractionImpl()
		{
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0x102679C", Offset = "0x102679C", VA = "0x102679C")]
		public void setFinalPosition(Vector3 pos, Quaternion rot, CustomNVRAttachPoint point, bool bWeld)
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0x10268DC", Offset = "0x10268DC", VA = "0x10268DC", Slot = "37")]
		public override void setPositionRotation(Vector3 pos, Quaternion rot, CustomNVRAttachPoint point)
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0x10267A4", Offset = "0x10267A4", VA = "0x10267A4")]
		public void setPositionRotation(Vector3 pos, Quaternion rot, CustomNVRAttachPoint point, bool bWeld)
		{
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0x1027494", Offset = "0x1027494", VA = "0x1027494")]
		private void recoverWeldData(AttachablePiece weldPiece, WeldData weldData)
		{
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0x1027A7C", Offset = "0x1027A7C", VA = "0x1027A7C")]
		public List<Piece> unweldPieces()
		{
			return null;
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0x1028310", Offset = "0x1028310", VA = "0x1028310")]
		private void copyWeldData(AttachablePiece weldPiece)
		{
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0x10268E4", Offset = "0x10268E4", VA = "0x10268E4")]
		public void weldPiece(AttachablePiece weldPiece)
		{
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0x1028AF8", Offset = "0x1028AF8", VA = "0x1028AF8", Slot = "44")]
		protected virtual void customWeldPiece(AttachablePiece weldPiece)
		{
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0x1028AFC", Offset = "0x1028AFC", VA = "0x1028AFC", Slot = "45")]
		protected virtual AttachablePiece customUnweldPiece(PieceData pieceData)
		{
			return null;
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0x10289D8", Offset = "0x10289D8", VA = "0x10289D8")]
		private void copyPaths(AttachablePiece weldPiece)
		{
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0x1025D74", Offset = "0x1025D74", VA = "0x1025D74")]
		public void pointsVsJoints(bool state)
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0x10280DC", Offset = "0x10280DC", VA = "0x10280DC")]
		public void normalVsWeld(bool state)
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0x1028B5C", Offset = "0x1028B5C", VA = "0x1028B5C")]
		public bool isTrackCollision(Collider collider)
		{
			return default(bool);
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0x1028CA8", Offset = "0x1028CA8", VA = "0x1028CA8", Slot = "46")]
		public virtual PathData getPathDataAtPoint(Train train, Vector3 forward, int forwardModifier, Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0x1029188", Offset = "0x1029188", VA = "0x1029188", Slot = "47")]
		public virtual void removeTrain(Train train)
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0x1029228", Offset = "0x1029228", VA = "0x1029228")]
		public void checkJoints()
		{
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0x1029340", Offset = "0x1029340", VA = "0x1029340")]
		public CustomNVRAttachJoint getAssociatedJoint(CustomNVRAttachPoint point)
		{
			return null;
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0x1029460", Offset = "0x1029460", VA = "0x1029460")]
		internal void setTeleportTrainActive(bool bTeleportTrainActive, Train train)
		{
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0x102964C", Offset = "0x102964C", VA = "0x102964C", Slot = "48")]
		protected virtual bool switchPaths(Train train)
		{
			return default(bool);
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0x10296C8", Offset = "0x10296C8", VA = "0x10296C8")]
		public CustomNVRAttachPoint getAssociatedPoint(CustomNVRAttachJoint joint)
		{
			return null;
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0x10288A8", Offset = "0x10288A8", VA = "0x10288A8")]
		private bool weldIdNotRepeated(List<int> weldIdList, int currentId)
		{
			return default(bool);
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0x10297E8", Offset = "0x10297E8", VA = "0x10297E8")]
		public bool isAttached()
		{
			return default(bool);
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0x1029840", Offset = "0x1029840", VA = "0x1029840", Slot = "49")]
		public virtual void setTrainOnTrack(bool bValue)
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0x102984C", Offset = "0x102984C", VA = "0x102984C")]
		public bool isTrainOnTrack()
		{
			return default(bool);
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0x101D340", Offset = "0x101D340", VA = "0x101D340")]
		public AttachablePiece()
		{
		}
	}
	[Token(Token = "0x20002FD")]
	public class PathPosition
	{
		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Trainer.Path path;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float time;

		[Token(Token = "0x600112A")]
		[Address(RVA = "0xD14878", Offset = "0xD14878", VA = "0xD14878")]
		public PathPosition()
		{
		}
	}
	[Token(Token = "0x20002FE")]
	public class BifurcationPiece : MultiplePathPiece
	{
		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public GameObject indicationStraight;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public GameObject indicationTurn;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Trainer.Path auxPathStraight;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Trainer.Path auxPathCurve;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Transform pointSwitch;

		[Token(Token = "0x600112B")]
		[Address(RVA = "0x102CF74", Offset = "0x102CF74", VA = "0x102CF74", Slot = "30")]
		public override void init()
		{
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0x102D038", Offset = "0x102D038", VA = "0x102D038", Slot = "42")]
		public override void actionButtonDown()
		{
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0x102D104", Offset = "0x102D104", VA = "0x102D104", Slot = "50")]
		public override void setPathPosition(int pathPosition)
		{
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0x102D03C", Offset = "0x102D03C", VA = "0x102D03C")]
		private void changePaths()
		{
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0x102D10C", Offset = "0x102D10C", VA = "0x102D10C")]
		private void updatePaths()
		{
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0x102D430", Offset = "0x102D430", VA = "0x102D430")]
		public void setStraightPath()
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0x102D444", Offset = "0x102D444", VA = "0x102D444")]
		public void setTurnPath()
		{
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0x102D454", Offset = "0x102D454", VA = "0x102D454", Slot = "48")]
		protected override bool switchPaths(Train train)
		{
			return default(bool);
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0x102D840", Offset = "0x102D840", VA = "0x102D840")]
		public BifurcationPiece()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	public class CustomNVRAttachJoint : MonoBehaviour
	{
		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool ShowWeldableJoints;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static Quaternion BaseAngle;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static float BaseRotationY;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Vector3 BasePosition;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static bool GridEstablished;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public static bool GridEnabled;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static float JOIN_OFF_DISTANCE;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static float FIX_SIZE;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string attachID;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool weldExcusive;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CustomNVRAttachJoint AttachedJoint;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CustomNVRAttachPoint AttachedPoint;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AttachablePiece Item;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MeshRenderer m_meshRenderer;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool m_bWeldableJointsShown;

		[Token(Token = "0x6001134")]
		[Address(RVA = "0xE286F4", Offset = "0xE286F4", VA = "0xE286F4")]
		public static void setBaseGridValues(CustomNVRAttachJoint joint)
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0xE2894C", Offset = "0xE2894C", VA = "0xE2894C")]
		public void resetState()
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0xE289C8", Offset = "0xE289C8", VA = "0xE289C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0xE28A24", Offset = "0xE28A24", VA = "0xE28A24")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0xE28D24", Offset = "0xE28D24", VA = "0xE28D24")]
		private void changeWeldableVisibility()
		{
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0xE28DE8", Offset = "0xE28DE8", VA = "0xE28DE8", Slot = "4")]
		protected virtual void OnTriggerStay(Collider col)
		{
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0xE29864", Offset = "0xE29864", VA = "0xE29864")]
		public void checkJoint()
		{
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0xE28B78", Offset = "0xE28B78", VA = "0xE28B78")]
		public void checkJoint(bool bChangeMat)
		{
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0xE29D40", Offset = "0xE29D40", VA = "0xE29D40")]
		private void log(Vector3 v)
		{
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0xE2986C", Offset = "0xE2986C", VA = "0xE2986C")]
		private bool checkPositionAngle()
		{
			return default(bool);
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0xE2901C", Offset = "0xE2901C", VA = "0xE2901C")]
		protected void Attach(CustomNVRAttachPoint point)
		{
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0xE2985C", Offset = "0xE2985C", VA = "0xE2985C")]
		protected void Detach()
		{
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0xE29AF0", Offset = "0xE29AF0", VA = "0xE29AF0")]
		protected void Detach(bool bChangeMat)
		{
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0xE2A024", Offset = "0xE2A024", VA = "0xE2A024")]
		public string getJointId()
		{
			return null;
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0xE29F7C", Offset = "0xE29F7C", VA = "0xE29F7C")]
		public void updateAttachedPieces()
		{
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0xE2A02C", Offset = "0xE2A02C", VA = "0xE2A02C")]
		public CustomNVRAttachJoint()
		{
		}
	}
	[Token(Token = "0x2000300")]
	public class CustomNVRAttachPoint : MonoBehaviour
	{
		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string attachID;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool weldable;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool weldExclusive;

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AttachablePiece Item;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CustomNVRAttachJoint AttachedJoint;

		[Token(Token = "0x40011AC")]
		private const float MaxVelocityChange = 5f;

		[Token(Token = "0x40011AD")]
		private const float MaxAngularVelocityChange = 10f;

		[Token(Token = "0x40011AE")]
		private const float VelocityMagic = 3000f;

		[Token(Token = "0x40011AF")]
		private const float AngularVelocityMagic = 25f;

		[Token(Token = "0x6001145")]
		[Address(RVA = "0xE2A128", Offset = "0xE2A128", VA = "0xE2A128")]
		private void Start()
		{
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0xE29F74", Offset = "0xE29F74", VA = "0xE29F74")]
		public bool Attached(CustomNVRAttachJoint joint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0xE2A184", Offset = "0xE2A184", VA = "0xE2A184")]
		private bool AttachedImpl(CustomNVRAttachJoint joint, bool bRepeat)
		{
			return default(bool);
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0xE292CC", Offset = "0xE292CC", VA = "0xE292CC")]
		public void PullTowards(CustomNVRAttachJoint joint)
		{
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0xE2B0E4", Offset = "0xE2B0E4", VA = "0xE2B0E4")]
		private float angleDistance(float angle1, float angle2)
		{
			return default(float);
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0xE2A4C8", Offset = "0xE2A4C8", VA = "0xE2A4C8")]
		private void calculateFinalPosition(CustomNVRAttachJoint joint, out Vector3 targetPosition, out Vector3 targetAngle, bool bAdjust, out bool bReposition)
		{
		}

		[Token(Token = "0x600114B")]
		[Address(RVA = "0xE2B574", Offset = "0xE2B574", VA = "0xE2B574")]
		private bool gridAngle(float angle)
		{
			return default(bool);
		}

		[Token(Token = "0x600114C")]
		[Address(RVA = "0xE2B30C", Offset = "0xE2B30C", VA = "0xE2B30C")]
		private Vector3 adjustPosition(Vector3 position, float dAngle)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xE2B164", Offset = "0xE2B164", VA = "0xE2B164")]
		private float adjustAngle(float fAngle)
		{
			return default(float);
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0xE2B5A4", Offset = "0xE2B5A4", VA = "0xE2B5A4")]
		private float calculateFixesDistance(float fPosition, float basePostion, int iAngle)
		{
			return default(float);
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xE2B12C", Offset = "0xE2B12C", VA = "0xE2B12C")]
		private float normalizeAngle(float fAngle)
		{
			return default(float);
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0xE2B710", Offset = "0xE2B710", VA = "0xE2B710")]
		public string getPointId()
		{
			return null;
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0xE2B798", Offset = "0xE2B798", VA = "0xE2B798")]
		public CustomNVRAttachPoint()
		{
		}
	}
	[Token(Token = "0x2000301")]
	public class DoubleBifurcationPiece : MultiplePathPiece
	{
		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public GameObject indication1;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public GameObject indication2;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public GameObject indication3;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Trainer.Path auxPathStraight;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Trainer.Path auxPathCurveRight;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private Trainer.Path auxPathCurveLeft;

		[Token(Token = "0x40011B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Transform point1;

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private Transform point2;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Transform point3;

		[Token(Token = "0x6001152")]
		[Address(RVA = "0xE4B58C", Offset = "0xE4B58C", VA = "0xE4B58C", Slot = "30")]
		public override void init()
		{
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0xE4BA6C", Offset = "0xE4BA6C", VA = "0xE4BA6C", Slot = "50")]
		public override void setPathPosition(int pathPosition)
		{
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0xE4BFF4", Offset = "0xE4BFF4", VA = "0xE4BFF4")]
		private void changePaths()
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xE4BA74", Offset = "0xE4BA74", VA = "0xE4BA74")]
		private void updatePaths()
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xE4C0C8", Offset = "0xE4C0C8", VA = "0xE4C0C8", Slot = "42")]
		public override void actionButtonDown()
		{
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0xE4C0CC", Offset = "0xE4C0CC", VA = "0xE4C0CC", Slot = "48")]
		protected override bool switchPaths(Train train)
		{
			return default(bool);
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0xE4C930", Offset = "0xE4C930", VA = "0xE4C930")]
		private void setStraightPath()
		{
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0xE4C8A8", Offset = "0xE4C8A8", VA = "0xE4C8A8")]
		private void setTurnRightPath()
		{
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0xE4C9B4", Offset = "0xE4C9B4", VA = "0xE4C9B4")]
		private void setTurnLeftPath()
		{
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0xE4CA3C", Offset = "0xE4CA3C", VA = "0xE4CA3C")]
		public DoubleBifurcationPiece()
		{
		}
	}
	[Token(Token = "0x2000302")]
	public class MultiplePathPiece : AttachablePiece
	{
		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		protected int iPos;

		[Token(Token = "0x600115C")]
		[Address(RVA = "0x122EAAC", Offset = "0x122EAAC", VA = "0x122EAAC", Slot = "46")]
		public override PathData getPathDataAtPoint(Train train, Vector3 forward, int forwardModifier, Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0x122EAB4", Offset = "0x122EAB4", VA = "0x122EAB4", Slot = "50")]
		public virtual void setPathPosition(int pathPosition)
		{
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0x122EABC", Offset = "0x122EABC", VA = "0x122EABC", Slot = "51")]
		public virtual int getPathPosition()
		{
			return default(int);
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0x122EAC4", Offset = "0x122EAC4", VA = "0x122EAC4")]
		public MultiplePathPiece()
		{
		}
	}
	[Token(Token = "0x2000303")]
	public class RandomizerPiece : MultiplePathPiece
	{
		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public GameObject indication1;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public GameObject indication2;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public GameObject indication3;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public Transform pointN;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public Transform pointS;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public Transform pointW;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		public Transform pointE;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private bool m_bChangePaths;

		[Token(Token = "0x6001160")]
		[Address(RVA = "0xADB4F8", Offset = "0xADB4F8", VA = "0xADB4F8", Slot = "46")]
		public override PathData getPathDataAtPoint(Train train, Vector3 forward, int forwardModifier, Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0xADB624", Offset = "0xADB624", VA = "0xADB624", Slot = "50")]
		public override void setPathPosition(int pathPosition)
		{
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xADB9C0", Offset = "0xADB9C0", VA = "0xADB9C0")]
		private void changePaths()
		{
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0xADB62C", Offset = "0xADB62C", VA = "0xADB62C")]
		private void updatePaths()
		{
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0xADBABC", Offset = "0xADBABC", VA = "0xADBABC", Slot = "42")]
		public override void actionButtonDown()
		{
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0xADBAC0", Offset = "0xADBAC0", VA = "0xADBAC0", Slot = "48")]
		protected override bool switchPaths(Train train)
		{
			return default(bool);
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0xADC124", Offset = "0xADC124", VA = "0xADC124")]
		private void setStraightPath()
		{
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0xADC09C", Offset = "0xADC09C", VA = "0xADC09C")]
		private void setTurnRightPath()
		{
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0xADC014", Offset = "0xADC014", VA = "0xADC014")]
		private void setTurnLeftPath()
		{
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0xADC1A8", Offset = "0xADC1A8", VA = "0xADC1A8", Slot = "49")]
		public override void setTrainOnTrack(bool bValue)
		{
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0xADC1C4", Offset = "0xADC1C4", VA = "0xADC1C4")]
		public RandomizerPiece()
		{
		}
	}
	[Token(Token = "0x2000304")]
	public class Slider : NVRSlider
	{
		[Token(Token = "0x2000305")]
		public delegate void SliderEvent(float value);

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float LastValue;

		[Token(Token = "0x1400001C")]
		public event SliderEvent OnValueChange
		{
			[Token(Token = "0x600116B")]
			[Address(RVA = "0xAE95B0", Offset = "0xAE95B0", VA = "0xAE95B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x732010", Offset = "0x732010")]
			add
			{
			}
			[Token(Token = "0x600116C")]
			[Address(RVA = "0xAE9650", Offset = "0xAE9650", VA = "0xAE9650")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x732020", Offset = "0x732020")]
			remove
			{
			}
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0xAE96F0", Offset = "0xAE96F0", VA = "0xAE96F0", Slot = "22")]
		protected override void FixedUpdate()
		{
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0xAE99E4", Offset = "0xAE99E4", VA = "0xAE99E4", Slot = "9")]
		protected override bool CheckForDrop()
		{
			return default(bool);
		}

		[Token(Token = "0x600116F")]
		[Address(RVA = "0xAE9B9C", Offset = "0xAE9B9C", VA = "0xAE9B9C", Slot = "13")]
		public override void HoveringUpdate(NVRHand hand, float forTime)
		{
		}

		[Token(Token = "0x6001170")]
		[Address(RVA = "0xAE9C3C", Offset = "0xAE9C3C", VA = "0xAE9C3C")]
		protected void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0xAE9D34", Offset = "0xAE9D34", VA = "0xAE9D34")]
		public void setValue(float newValue)
		{
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0xAE9E1C", Offset = "0xAE9E1C", VA = "0xAE9E1C")]
		public Slider()
		{
		}
	}
}
namespace NewtonVR.Example
{
	[Token(Token = "0x2000306")]
	public class NVRExampleButtonDropSphere : MonoBehaviour
	{
		[Token(Token = "0x6001177")]
		[Address(RVA = "0x1236544", Offset = "0x1236544", VA = "0x1236544")]
		public void DropSphere()
		{
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0x1236620", Offset = "0x1236620", VA = "0x1236620")]
		public NVRExampleButtonDropSphere()
		{
		}
	}
	[Token(Token = "0x2000307")]
	public class NVRExampleButtonResetScene : MonoBehaviour
	{
		[Token(Token = "0x6001179")]
		[Address(RVA = "0x1236628", Offset = "0x1236628", VA = "0x1236628")]
		public void ResetScene()
		{
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x12366A4", Offset = "0x12366A4", VA = "0x12366A4")]
		public NVRExampleButtonResetScene()
		{
		}
	}
	[Token(Token = "0x2000308")]
	public class NVRExampleColorLever : MonoBehaviour
	{
		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color From;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color To;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Renderer Result;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public NVRLever Lever;

		[Token(Token = "0x600117B")]
		[Address(RVA = "0x12366AC", Offset = "0x12366AC", VA = "0x12366AC")]
		private void Update()
		{
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0x123671C", Offset = "0x123671C", VA = "0x123671C")]
		public NVRExampleColorLever()
		{
		}
	}
	[Token(Token = "0x2000309")]
	public class NVRExampleColorSlider : MonoBehaviour
	{
		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color From;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color To;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Renderer Result;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public NVRSlider Slider;

		[Token(Token = "0x600117D")]
		[Address(RVA = "0x1236724", Offset = "0x1236724", VA = "0x1236724")]
		private void Update()
		{
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0x1236794", Offset = "0x1236794", VA = "0x1236794")]
		public NVRExampleColorSlider()
		{
		}
	}
	[Token(Token = "0x200030A")]
	public class NVRExampleDegreeResult : MonoBehaviour
	{
		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRInteractableItem Knob;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMesh Text;

		[Token(Token = "0x600117F")]
		[Address(RVA = "0x123679C", Offset = "0x123679C", VA = "0x123679C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0x12367F8", Offset = "0x12367F8", VA = "0x12367F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x123687C", Offset = "0x123687C", VA = "0x123687C")]
		public NVRExampleDegreeResult()
		{
		}
	}
	[Token(Token = "0x200030B")]
	public class NVRExampleEvent : MonoBehaviour
	{
		[Token(Token = "0x6001182")]
		[Address(RVA = "0x1236884", Offset = "0x1236884", VA = "0x1236884")]
		public void Duplicate()
		{
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0x1236980", Offset = "0x1236980", VA = "0x1236980")]
		public NVRExampleEvent()
		{
		}
	}
	[Token(Token = "0x200030C")]
	public class NVRExampleGrower : NVRInteractableItem
	{
		[Token(Token = "0x6001184")]
		[Address(RVA = "0x1236988", Offset = "0x1236988", VA = "0x1236988", Slot = "11")]
		public override void InteractingUpdate(NVRHand hand)
		{
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0x1236DCC", Offset = "0x1236DCC", VA = "0x1236DCC")]
		public NVRExampleGrower()
		{
		}
	}
	[Token(Token = "0x200030D")]
	public class NVRExampleGun : NVRInteractableItem
	{
		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public GameObject BulletPrefab;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Transform FirePoint;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Vector3 BulletForce;

		[Token(Token = "0x6001186")]
		[Address(RVA = "0x1236DD0", Offset = "0x1236DD0", VA = "0x1236DD0", Slot = "18")]
		public override void UseButtonDown()
		{
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0x12370B4", Offset = "0x12370B4", VA = "0x12370B4")]
		public NVRExampleGun()
		{
		}
	}
	[Token(Token = "0x200030E")]
	public class NVRExampleLaserPointer : MonoBehaviour
	{
		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color LineColor;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LineWidth;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool ForceLineVisible;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool OnlyVisibleOnTrigger;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LineRenderer Line;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private NVRHand Hand;

		[Token(Token = "0x6001188")]
		[Address(RVA = "0x12370C4", Offset = "0x12370C4", VA = "0x12370C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0x1237308", Offset = "0x1237308", VA = "0x1237308")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0x123760C", Offset = "0x123760C", VA = "0x123760C")]
		public NVRExampleLaserPointer()
		{
		}
	}
	[Token(Token = "0x200030F")]
	public class NVRExampleLetterResult : MonoBehaviour
	{
		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRLetterSpinner LetterSpinner;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextMesh Text;

		[Token(Token = "0x600118B")]
		[Address(RVA = "0x1237628", Offset = "0x1237628", VA = "0x1237628")]
		private void Awake()
		{
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0x1237684", Offset = "0x1237684", VA = "0x1237684")]
		private void Update()
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0x12377D8", Offset = "0x12377D8", VA = "0x12377D8")]
		public NVRExampleLetterResult()
		{
		}
	}
	[Token(Token = "0x2000310")]
	public class NVRExampleLeverResultRocket : MonoBehaviour
	{
		[Token(Token = "0x2000311")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728EB8", Offset = "0x728EB8")]
		private sealed class <DoBlastOff>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NVRExampleLeverResultRocket <>4__this;

			[Token(Token = "0x170001EF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001196")]
				[Address(RVA = "0x9DE8A8", Offset = "0x9DE8A8", VA = "0x9DE8A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001198")]
				[Address(RVA = "0x9DE8F0", Offset = "0x9DE8F0", VA = "0x9DE8F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001193")]
			[Address(RVA = "0x9DE76C", Offset = "0x9DE76C", VA = "0x9DE76C")]
			[DebuggerHidden]
			public <DoBlastOff>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6001194")]
			[Address(RVA = "0x9DE798", Offset = "0x9DE798", VA = "0x9DE798", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001195")]
			[Address(RVA = "0x9DE79C", Offset = "0x9DE79C", VA = "0x9DE79C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001197")]
			[Address(RVA = "0x9DE8B0", Offset = "0x9DE8B0", VA = "0x9DE8B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000312")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0x728EC8", Offset = "0x728EC8")]
		private sealed class <DoSpawnShip>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NVRExampleLeverResultRocket <>4__this;

			[Token(Token = "0x40011E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <startScale>5__2;

			[Token(Token = "0x40011E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 <endScale>5__3;

			[Token(Token = "0x40011E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <startTime>5__4;

			[Token(Token = "0x40011E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float <overTime>5__5;

			[Token(Token = "0x40011E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float <stopTime>5__6;

			[Token(Token = "0x170001F1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600119C")]
				[Address(RVA = "0x9DEC2C", Offset = "0x9DEC2C", VA = "0x9DEC2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600119E")]
				[Address(RVA = "0x9DEC74", Offset = "0x9DEC74", VA = "0x9DEC74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001199")]
			[Address(RVA = "0x9DE8F8", Offset = "0x9DE8F8", VA = "0x9DE8F8")]
			[DebuggerHidden]
			public <DoSpawnShip>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x600119A")]
			[Address(RVA = "0x9DE924", Offset = "0x9DE924", VA = "0x9DE924", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600119B")]
			[Address(RVA = "0x9DE928", Offset = "0x9DE928", VA = "0x9DE928", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600119D")]
			[Address(RVA = "0x9DEC34", Offset = "0x9DEC34", VA = "0x9DEC34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject RocketPrefab;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NVRLever Control;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject RocketInstance;

		[Token(Token = "0x600118E")]
		[Address(RVA = "0x12377E0", Offset = "0x12377E0", VA = "0x12377E0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0x1237884", Offset = "0x1237884", VA = "0x1237884")]
		private void Update()
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0x12378D0", Offset = "0x12378D0", VA = "0x12378D0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x732030", Offset = "0x732030")]
		public IEnumerator DoBlastOff()
		{
			return null;
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0x123780C", Offset = "0x123780C", VA = "0x123780C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0x732090", Offset = "0x732090")]
		private IEnumerator DoSpawnShip()
		{
			return null;
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0x1237948", Offset = "0x1237948", VA = "0x1237948")]
		public NVRExampleLeverResultRocket()
		{
		}
	}
	[Token(Token = "0x2000313")]
	public class NVRExampleRGBResult : MonoBehaviour
	{
		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRSlider SliderRed;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public NVRSlider SliderGreen;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public NVRSlider SliderBlue;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Renderer Result;

		[Token(Token = "0x600119F")]
		[Address(RVA = "0x1237950", Offset = "0x1237950", VA = "0x1237950")]
		private void Update()
		{
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0x12379D8", Offset = "0x12379D8", VA = "0x12379D8")]
		public NVRExampleRGBResult()
		{
		}
	}
	[Token(Token = "0x2000314")]
	public class NVRExampleSpawner : MonoBehaviour
	{
		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRButton Button;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ToCopy;

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0x12379E0", Offset = "0x12379E0", VA = "0x12379E0")]
		private void Update()
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0x1237B18", Offset = "0x1237B18", VA = "0x1237B18")]
		public NVRExampleSpawner()
		{
		}
	}
	[Token(Token = "0x2000315")]
	public class NVRExampleSwitchResult : MonoBehaviour
	{
		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public NVRSwitch Switch;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Light SpotLight;

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0x1237B20", Offset = "0x1237B20", VA = "0x1237B20")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0x1237B7C", Offset = "0x1237B7C", VA = "0x1237B7C")]
		private void Update()
		{
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0x1237BA8", Offset = "0x1237BA8", VA = "0x1237BA8")]
		public NVRExampleSwitchResult()
		{
		}
	}
	[Token(Token = "0x2000316")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0x728ED8", Offset = "0x728ED8")]
	public class NVRExampleTeleporter : MonoBehaviour
	{
		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color LineColor;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LineWidth;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LineRenderer Line;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private NVRHand Hand;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private NVRPlayer Player;

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0x1237BB0", Offset = "0x1237BB0", VA = "0x1237BB0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0x1237DF4", Offset = "0x1237DF4", VA = "0x1237DF4")]
		private void Start()
		{
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0x1237E14", Offset = "0x1237E14", VA = "0x1237E14")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0x12382DC", Offset = "0x12382DC", VA = "0x12382DC")]
		public NVRExampleTeleporter()
		{
		}
	}
}
