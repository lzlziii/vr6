using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Xml;
using AssetBundles;
using AssetBundles.LoadOps;
using CriMana;
using CriMana.Detail;
using ICSharpCode.SharpZipLib.Checksums;
using ICSharpCode.SharpZipLib.Zip.Compression.Streams;
using Il2CppDummyDll;
using LitJsonWDD;
using Serialization;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.SocialPlatforms;
using UnityEngine.UI;
using Vectrosity;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public static class AmazonGUIHelpers
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Color foldoutOpenColor;

	[Token(Token = "0x4000002")]
	private const float foldoutButtonWidth = 48f;

	[Token(Token = "0x4000003")]
	private const float foldoutButtonHeight = 48f;

	[Token(Token = "0x4000004")]
	private const float sliderMinMaxValuesLabelWidth = 75f;

	[Token(Token = "0x4000005")]
	private const float uiHeight = 48f;

	[Token(Token = "0x4000006")]
	private const float uiSliderWidth = 48f;

	[Token(Token = "0x4000007")]
	private const float uiSliderHeight = 48f;

	[Token(Token = "0x4000008")]
	private const float uiScrollBarWidth = 48f;

	[Token(Token = "0x4000009")]
	private const float menuPadding = 0.075f;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x19D061C", Offset = "0x19D061C", VA = "0x19D061C")]
	public static void SetGUISkinTouchFriendly(GUISkin skin)
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x19CB654", Offset = "0x19CB654", VA = "0x19CB654")]
	public static void CenteredLabel(string text, params GUILayoutOption[] options)
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x19D0884", Offset = "0x19D0884", VA = "0x19D0884")]
	public static void AnchoredLabel(string text, TextAnchor alignment, params GUILayoutOption[] options)
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x19CAD3C", Offset = "0x19CAD3C", VA = "0x19CAD3C")]
	public static bool FoldoutWithLabel(bool currentValue, string label)
	{
		return default(bool);
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x19D0C94", Offset = "0x19D0C94", VA = "0x19D0C94")]
	public static void BoxedCenteredLabel(string text)
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x19CDE44", Offset = "0x19CDE44", VA = "0x19CDE44")]
	public static float DisplayCenteredSlider(float currentValue, float minValue, float maxValue, string valueDisplayString)
	{
		return default(float);
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x19D0DD8", Offset = "0x19D0DD8", VA = "0x19D0DD8")]
	public static void BeginMenuLayout()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x19D11A8", Offset = "0x19D11A8", VA = "0x19D11A8")]
	public static void EndMenuLayout()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x19D09F0", Offset = "0x19D09F0", VA = "0x19D09F0")]
	private static bool FoldoutButton()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000003")]
public class AmazonJavaWrapper : IDisposable
{
	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private AndroidJavaObject jo;

	[Token(Token = "0x600000B")]
	[Address(RVA = "0x19D78A0", Offset = "0x19D78A0", VA = "0x19D78A0")]
	public AmazonJavaWrapper()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x19D78A8", Offset = "0x19D78A8", VA = "0x19D78A8")]
	public AmazonJavaWrapper(AndroidJavaObject o)
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0x19D78D0", Offset = "0x19D78D0", VA = "0x19D78D0")]
	public AndroidJavaObject getJavaObject()
	{
		return null;
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0x19D78C8", Offset = "0x19D78C8", VA = "0x19D78C8")]
	public void setAndroidJavaObject(AndroidJavaObject o)
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x19D78D8", Offset = "0x19D78D8", VA = "0x19D78D8")]
	public IntPtr GetRawObject()
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0x19D791C", Offset = "0x19D791C", VA = "0x19D791C")]
	public IntPtr GetRawClass()
	{
		return default(IntPtr);
	}

	[Token(Token = "0x6000011")]
	public void Set<FieldType>(string fieldName, FieldType type)
	{
	}

	[Token(Token = "0x6000012")]
	public FieldType Get<FieldType>(string fieldName)
	{
		return (FieldType)null;
	}

	[Token(Token = "0x6000013")]
	public void SetStatic<FieldType>(string fieldName, FieldType type)
	{
	}

	[Token(Token = "0x6000014")]
	public FieldType GetStatic<FieldType>(string fieldName)
	{
		return (FieldType)null;
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x19D7960", Offset = "0x19D7960", VA = "0x19D7960")]
	public void CallStatic(string method, params object[] args)
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x19D7A1C", Offset = "0x19D7A1C", VA = "0x19D7A1C")]
	public void Call(string method, params object[] args)
	{
	}

	[Token(Token = "0x6000017")]
	public ReturnType CallStatic<ReturnType>(string method, params object[] args)
	{
		return (ReturnType)null;
	}

	[Token(Token = "0x6000018")]
	public ReturnType Call<ReturnType>(string method, params object[] args)
	{
		return (ReturnType)null;
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x19D7AD8", Offset = "0x19D7AD8", VA = "0x19D7AD8", Slot = "4")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x2000004")]
public class AmazonLogging
{
	[Token(Token = "0x2000005")]
	public enum AmazonLoggingLevel
	{
		[Token(Token = "0x400000F")]
		Silent,
		[Token(Token = "0x4000010")]
		Critical,
		[Token(Token = "0x4000011")]
		ErrorsAsExceptions,
		[Token(Token = "0x4000012")]
		Errors,
		[Token(Token = "0x4000013")]
		Warnings,
		[Token(Token = "0x4000014")]
		Verbose
	}

	[Token(Token = "0x2000006")]
	public enum SDKLoggingLevel
	{
		[Token(Token = "0x4000016")]
		LogOff,
		[Token(Token = "0x4000017")]
		LogCritical,
		[Token(Token = "0x4000018")]
		LogError,
		[Token(Token = "0x4000019")]
		LogWarning
	}

	[Token(Token = "0x400000B")]
	private const string errorMessage = "{0} error: {1}";

	[Token(Token = "0x400000C")]
	private const string warningMessage = "{0} warning: {1}";

	[Token(Token = "0x400000D")]
	private const string logMessage = "{0}: {1}";

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x19D98B4", Offset = "0x19D98B4", VA = "0x19D98B4")]
	public AmazonLogging()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x19D1AD4", Offset = "0x19D1AD4", VA = "0x19D1AD4")]
	public static void LogError(AmazonLoggingLevel reportLevel, string service, string message)
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x19D1CB4", Offset = "0x19D1CB4", VA = "0x19D1CB4")]
	public static void LogWarning(AmazonLoggingLevel reportLevel, string service, string message)
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x19D1E38", Offset = "0x19D1E38", VA = "0x19D1E38")]
	public static void Log(AmazonLoggingLevel reportLevel, string service, string message)
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x19D98BC", Offset = "0x19D98BC", VA = "0x19D98BC")]
	public static SDKLoggingLevel pluginToSDKLoggingLevel(AmazonLoggingLevel pluginLoggingLevel)
	{
		return default(SDKLoggingLevel);
	}
}
namespace AmazonCommon
{
	[Token(Token = "0x2000007")]
	public class MiniJSON
	{
		[Token(Token = "0x400001A")]
		private const int TOKEN_NONE = 0;

		[Token(Token = "0x400001B")]
		private const int TOKEN_CURLY_OPEN = 1;

		[Token(Token = "0x400001C")]
		private const int TOKEN_CURLY_CLOSE = 2;

		[Token(Token = "0x400001D")]
		private const int TOKEN_SQUARED_OPEN = 3;

		[Token(Token = "0x400001E")]
		private const int TOKEN_SQUARED_CLOSE = 4;

		[Token(Token = "0x400001F")]
		private const int TOKEN_COLON = 5;

		[Token(Token = "0x4000020")]
		private const int TOKEN_COMMA = 6;

		[Token(Token = "0x4000021")]
		private const int TOKEN_STRING = 7;

		[Token(Token = "0x4000022")]
		private const int TOKEN_NUMBER = 8;

		[Token(Token = "0x4000023")]
		private const int TOKEN_TRUE = 9;

		[Token(Token = "0x4000024")]
		private const int TOKEN_FALSE = 10;

		[Token(Token = "0x4000025")]
		private const int TOKEN_NULL = 11;

		[Token(Token = "0x4000026")]
		private const int BUILDER_CAPACITY = 2000;

		[Token(Token = "0x4000027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static int lastErrorIndex;

		[Token(Token = "0x4000028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		protected static string lastDecode;

		[Token(Token = "0x600001F")]
		[Address(RVA = "0x1B894A8", Offset = "0x1B894A8", VA = "0x1B894A8")]
		public MiniJSON()
		{
		}

		[Token(Token = "0x6000020")]
		[Address(RVA = "0x1B894B0", Offset = "0x1B894B0", VA = "0x1B894B0")]
		public static object jsonDecode(string json)
		{
			return null;
		}

		[Token(Token = "0x6000021")]
		[Address(RVA = "0x1B7D774", Offset = "0x1B7D774", VA = "0x1B7D774")]
		public static string jsonEncode(object json)
		{
			return null;
		}

		[Token(Token = "0x6000022")]
		[Address(RVA = "0x1B8A294", Offset = "0x1B8A294", VA = "0x1B8A294")]
		public static bool lastDecodeSuccessful()
		{
			return default(bool);
		}

		[Token(Token = "0x6000023")]
		[Address(RVA = "0x1B8A32C", Offset = "0x1B8A32C", VA = "0x1B8A32C")]
		public static int getLastErrorIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000024")]
		[Address(RVA = "0x1B8A3B8", Offset = "0x1B8A3B8", VA = "0x1B8A3B8")]
		public static string getLastErrorSnippet()
		{
			return null;
		}

		[Token(Token = "0x6000025")]
		[Address(RVA = "0x1B8A5F4", Offset = "0x1B8A5F4", VA = "0x1B8A5F4")]
		protected static Hashtable parseObject(char[] json, ref int index)
		{
			return null;
		}

		[Token(Token = "0x6000026")]
		[Address(RVA = "0x1B8B2DC", Offset = "0x1B8B2DC", VA = "0x1B8B2DC")]
		protected static ArrayList parseArray(char[] json, ref int index)
		{
			return null;
		}

		[Token(Token = "0x6000027")]
		[Address(RVA = "0x1B89660", Offset = "0x1B89660", VA = "0x1B89660")]
		protected static object parseValue(char[] json, ref int index, ref bool success)
		{
			return null;
		}

		[Token(Token = "0x6000028")]
		[Address(RVA = "0x1B8ADA8", Offset = "0x1B8ADA8", VA = "0x1B8ADA8")]
		protected static string parseString(char[] json, ref int index)
		{
			return null;
		}

		[Token(Token = "0x6000029")]
		[Address(RVA = "0x1B8B4F0", Offset = "0x1B8B4F0", VA = "0x1B8B4F0")]
		protected static double parseNumber(char[] json, ref int index)
		{
			return default(double);
		}

		[Token(Token = "0x600002A")]
		[Address(RVA = "0x1B8B6E4", Offset = "0x1B8B6E4", VA = "0x1B8B6E4")]
		protected static int getLastIndexOfNumber(char[] json, int index)
		{
			return default(int);
		}

		[Token(Token = "0x600002B")]
		[Address(RVA = "0x1B8B60C", Offset = "0x1B8B60C", VA = "0x1B8B60C")]
		protected static void eatWhitespace(char[] json, ref int index)
		{
		}

		[Token(Token = "0x600002C")]
		[Address(RVA = "0x1B8AD14", Offset = "0x1B8AD14", VA = "0x1B8AD14")]
		protected static int lookAhead(char[] json, int index)
		{
			return default(int);
		}

		[Token(Token = "0x600002D")]
		[Address(RVA = "0x1B8A8A8", Offset = "0x1B8A8A8", VA = "0x1B8A8A8")]
		protected static int nextToken(char[] json, ref int index)
		{
			return default(int);
		}

		[Token(Token = "0x600002E")]
		[Address(RVA = "0x1B8B7BC", Offset = "0x1B8B7BC", VA = "0x1B8B7BC")]
		protected static bool serializeObjectOrArray(object objectOrArray, StringBuilder builder)
		{
			return default(bool);
		}

		[Token(Token = "0x600002F")]
		[Address(RVA = "0x1B8B9DC", Offset = "0x1B8B9DC", VA = "0x1B8B9DC")]
		protected static bool serializeObject(Hashtable anObject, StringBuilder builder)
		{
			return default(bool);
		}

		[Token(Token = "0x6000030")]
		[Address(RVA = "0x1B8C274", Offset = "0x1B8C274", VA = "0x1B8C274")]
		protected static bool serializeDictionary(Dictionary<string, string> dict, StringBuilder builder)
		{
			return default(bool);
		}

		[Token(Token = "0x6000031")]
		[Address(RVA = "0x1B8C4F4", Offset = "0x1B8C4F4", VA = "0x1B8C4F4")]
		protected static bool serializeDictionary(Dictionary<string, double> dict, StringBuilder builder)
		{
			return default(bool);
		}

		[Token(Token = "0x6000032")]
		[Address(RVA = "0x1B8BD50", Offset = "0x1B8BD50", VA = "0x1B8BD50")]
		protected static bool serializeArray(ArrayList anArray, StringBuilder builder)
		{
			return default(bool);
		}

		[Token(Token = "0x6000033")]
		[Address(RVA = "0x1B899F4", Offset = "0x1B899F4", VA = "0x1B899F4")]
		protected static bool serializeValue(object value, StringBuilder builder)
		{
			return default(bool);
		}

		[Token(Token = "0x6000034")]
		[Address(RVA = "0x1B8BEC8", Offset = "0x1B8BEC8", VA = "0x1B8BEC8")]
		protected static void serializeString(string aString, StringBuilder builder)
		{
		}

		[Token(Token = "0x6000035")]
		[Address(RVA = "0x1B8C7D0", Offset = "0x1B8C7D0", VA = "0x1B8C7D0")]
		protected static void serializeNumber(double number, StringBuilder builder)
		{
		}
	}
	[Token(Token = "0x2000008")]
	public static class MiniJsonExtensions
	{
		[Token(Token = "0x6000037")]
		[Address(RVA = "0x1B8C950", Offset = "0x1B8C950", VA = "0x1B8C950")]
		public static string toJson(this Hashtable obj)
		{
			return null;
		}

		[Token(Token = "0x6000038")]
		[Address(RVA = "0x1B8C9D0", Offset = "0x1B8C9D0", VA = "0x1B8C9D0")]
		public static string toJson(this Dictionary<string, string> obj)
		{
			return null;
		}

		[Token(Token = "0x6000039")]
		[Address(RVA = "0x1B8CA50", Offset = "0x1B8CA50", VA = "0x1B8CA50")]
		public static string toJson(this Dictionary<string, double> obj)
		{
			return null;
		}

		[Token(Token = "0x600003A")]
		[Address(RVA = "0x1B8CAD0", Offset = "0x1B8CAD0", VA = "0x1B8CAD0")]
		public static ArrayList arrayListFromJson(this string json)
		{
			return null;
		}

		[Token(Token = "0x600003B")]
		[Address(RVA = "0x1B7F7A0", Offset = "0x1B7F7A0", VA = "0x1B7F7A0")]
		public static Hashtable hashtableFromJson(this string json)
		{
			return null;
		}
	}
}
[Token(Token = "0x2000009")]
public static class AmazonGameCircleBridge
{
	[Token(Token = "0x200000A")]
	public enum EInitializationStatus
	{
		[Token(Token = "0x400003C")]
		Uninitialized,
		[Token(Token = "0x400003D")]
		InitializationRequested,
		[Token(Token = "0x400003E")]
		Ready,
		[Token(Token = "0x400003F")]
		Unavailable
	}

	[Token(Token = "0x2000505")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE995B8", Offset = "0xE995B8")]
	private sealed class <InitAndWaitForReady>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <startTime>__0;

		[Token(Token = "0x4001961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal object $current;

		[Token(Token = "0x4001962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool $disposing;

		[Token(Token = "0x4001963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int $PC;

		[Token(Token = "0x17000268")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002354")]
			[Address(RVA = "0x1B919A0", Offset = "0x1B919A0", VA = "0x1B919A0", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000269")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002355")]
			[Address(RVA = "0x1B919A8", Offset = "0x1B919A8", VA = "0x1B919A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002352")]
		[Address(RVA = "0x1B8D1F4", Offset = "0x1B8D1F4", VA = "0x1B8D1F4")]
		[DebuggerHidden]
		public <InitAndWaitForReady>c__Iterator0()
		{
		}

		[Token(Token = "0x6002353")]
		[Address(RVA = "0x1B91764", Offset = "0x1B91764", VA = "0x1B91764", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002356")]
		[Address(RVA = "0x1B919B0", Offset = "0x1B919B0", VA = "0x1B919B0", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002357")]
		[Address(RVA = "0x1B919C4", Offset = "0x1B919C4", VA = "0x1B919C4", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000029")]
	private const bool USES_LEADERBOARDS = true;

	[Token(Token = "0x400002A")]
	private const bool USES_ACHIEVEMENTS = true;

	[Token(Token = "0x400002B")]
	private const bool USES_WISPERSYNC = true;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static EInitializationStatus initializationStatus;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9942C", Offset = "0xE9942C")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9942C", Offset = "0xE9942C")]
	private static string <playerAlias>k__BackingField;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE994C8", Offset = "0xE994C8")]
	private static Action <>f__mg$cache0;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE994D8", Offset = "0xE994D8")]
	private static Action<string> <>f__mg$cache1;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE994E8", Offset = "0xE994E8")]
	private static Action <>f__mg$cache2;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE994F8", Offset = "0xE994F8")]
	private static Action<string> <>f__mg$cache3;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE99508", Offset = "0xE99508")]
	private static Action<AGSUpdateAchievementResponse> <>f__mg$cache4;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE99518", Offset = "0xE99518")]
	private static Action<AGSSubmitScoreResponse> <>f__mg$cache5;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE99528", Offset = "0xE99528")]
	private static Action<bool> <>f__mg$cache6;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE99538", Offset = "0xE99538")]
	private static Action <>f__mg$cache7;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE99548", Offset = "0xE99548")]
	private static Action <>f__mg$cache8;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE99558", Offset = "0xE99558")]
	private static Action<AGSUpdateAchievementResponse> <>f__mg$cache9;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE99568", Offset = "0xE99568")]
	private static Action<AGSSubmitScoreResponse> <>f__mg$cacheA;

	[Token(Token = "0x17000001")]
	public static EInitializationStatus InitializationStatus
	{
		[Token(Token = "0x600003C")]
		[Address(RVA = "0x1B8CB9C", Offset = "0x1B8CB9C", VA = "0x1B8CB9C")]
		get
		{
			return default(EInitializationStatus);
		}
	}

	[Token(Token = "0x17000002")]
	public static string playerAlias
	{
		[Token(Token = "0x600003D")]
		[Address(RVA = "0x1B8CC28", Offset = "0x1B8CC28", VA = "0x1B8CC28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE99578", Offset = "0xE99578")]
		get
		{
			return null;
		}
		[Token(Token = "0x600003E")]
		[Address(RVA = "0x1B8CCB4", Offset = "0x1B8CCB4", VA = "0x1B8CCB4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE99588", Offset = "0xE99588")]
		private set
		{
		}
	}

	[Token(Token = "0x14000001")]
	public static event Action OnPotentialConflictEvent
	{
		[Token(Token = "0x600005F")]
		[Address(RVA = "0x1B904E4", Offset = "0x1B904E4", VA = "0x1B904E4")]
		add
		{
		}
		[Token(Token = "0x6000060")]
		[Address(RVA = "0x1B90658", Offset = "0x1B90658", VA = "0x1B90658")]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public static event Action OnFirstSynchronizeEvent
	{
		[Token(Token = "0x6000061")]
		[Address(RVA = "0x1B907CC", Offset = "0x1B907CC", VA = "0x1B907CC")]
		add
		{
		}
		[Token(Token = "0x6000062")]
		[Address(RVA = "0x1B90940", Offset = "0x1B90940", VA = "0x1B90940")]
		remove
		{
		}
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x1B8CD44", Offset = "0x1B8CD44", VA = "0x1B8CD44")]
	public static void Initialize()
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x1B8D188", Offset = "0x1B8D188", VA = "0x1B8D188")]
	[DebuggerHidden]
	public static IEnumerator InitAndWaitForReady()
	{
		return null;
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x1B8D1FC", Offset = "0x1B8D1FC", VA = "0x1B8D1FC")]
	public static bool IsServiceReady()
	{
		return default(bool);
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x1B8D274", Offset = "0x1B8D274", VA = "0x1B8D274")]
	public static void ShowGameCircleOverlay()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x1B8D2EC", Offset = "0x1B8D2EC", VA = "0x1B8D2EC")]
	public static void ShowSignInPage()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x1B8CEDC", Offset = "0x1B8CEDC", VA = "0x1B8CEDC")]
	private static void SubscribeToGameCircleInitializationEvents()
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x1B8D364", Offset = "0x1B8D364", VA = "0x1B8D364")]
	private static void UnsubscribeFromGameCircleInitializationEvents()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x1B8D610", Offset = "0x1B8D610", VA = "0x1B8D610")]
	public static void UnlockAchievement(int achievementIndex, float percentComplete = 100f)
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x1B8D8F8", Offset = "0x1B8D8F8", VA = "0x1B8D8F8")]
	public static void SubmitScore(AmazonGameCircleIDsList.LeaderboardNames leaderboard, long value)
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x1B8DB68", Offset = "0x1B8DB68", VA = "0x1B8DB68")]
	public static void SetString(string key, string value, string firstNestedMap = "", string secondNestedMap = "")
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x1B8DC20", Offset = "0x1B8DC20", VA = "0x1B8DC20")]
	public static void SetInt(string key, int value, string firstNestedMap = "", string secondNestedMap = "")
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x1B8DCD8", Offset = "0x1B8DCD8", VA = "0x1B8DCD8")]
	public static void SetFloat(string key, float value, string firstNestedMap = "", string secondNestedMap = "")
	{
	}

	[Token(Token = "0x600004B")]
	private static void SetValue<T>(string key, T value, string firstNestedMap = "", string secondNestedMap = "")
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x1B8DD90", Offset = "0x1B8DD90", VA = "0x1B8DD90")]
	public static string GetString(string key, string firstNestedMap = "", string secondNestedMap = "")
	{
		return null;
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x1B8DE40", Offset = "0x1B8DE40", VA = "0x1B8DE40")]
	public static int GetInt(string key, string firstNestedMap = "", string secondNestedMap = "")
	{
		return default(int);
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x1B8DEF0", Offset = "0x1B8DEF0", VA = "0x1B8DEF0")]
	public static float GetFloat(string key, string firstNestedMap = "", string secondNestedMap = "")
	{
		return default(float);
	}

	[Token(Token = "0x600004F")]
	private static T GetValue<T>(string key, string firstNestedMap = "", string secondNestedMap = "")
	{
		return (T)null;
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x1B8DFA0", Offset = "0x1B8DFA0", VA = "0x1B8DFA0")]
	public static AGSGameDataMap GetMap(string firstNestedMap = "", string secondNestedMap = "")
	{
		return null;
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0x1B8E308", Offset = "0x1B8E308", VA = "0x1B8E308")]
	public static HashSet<string> GetAllKeys(string firstNestedMapKey = "", string secondNestedMapKey = "")
	{
		return null;
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x1B8E4D8", Offset = "0x1B8E4D8", VA = "0x1B8E4D8")]
	private static void SetDeveloperString(string key, string value, string firstNestedMapKey = "", string secondNestedMapKey = "")
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x1B8E7B8", Offset = "0x1B8E7B8", VA = "0x1B8E7B8")]
	private static string GetDeveloperString(string key, string firstNestedMapKey = "", string secondNestedMapKey = "")
	{
		return null;
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x1B8E9FC", Offset = "0x1B8E9FC", VA = "0x1B8E9FC")]
	public static bool HasKey(this AGSGameDataMap dataMap, string key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0x1B8EC20", Offset = "0x1B8EC20", VA = "0x1B8EC20")]
	public static bool HasKey(string key, string firstNestedMapKey = "", string secondNestedMapKey = "")
	{
		return default(bool);
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0x1B8EE34", Offset = "0x1B8EE34", VA = "0x1B8EE34")]
	public static bool HasMap(string firstNestedMapKey = "", string secondNestedMapKey = "")
	{
		return default(bool);
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0x1B8F168", Offset = "0x1B8F168", VA = "0x1B8F168")]
	public static void DeleteKey(string key, string firstNestedMapKey = "", string secondNestedMapKey = "")
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0x1B8F364", Offset = "0x1B8F364", VA = "0x1B8F364")]
	public static void DeleteKey(AGSGameDataMap map, string key)
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0x1B8F560", Offset = "0x1B8F560", VA = "0x1B8F560")]
	public static void DeleteMap(string firstNestedMapKey = "", string secondNestedMapKey = "")
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x1B8F710", Offset = "0x1B8F710", VA = "0x1B8F710")]
	public static void DeleteAll(AGSGameDataMap dataMap)
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x1B8FB28", Offset = "0x1B8FB28", VA = "0x1B8FB28")]
	public static void DeleteAll()
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0x1B8FCF4", Offset = "0x1B8FCF4", VA = "0x1B8FCF4")]
	public static void Synchronize()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0x1B8FDA4", Offset = "0x1B8FDA4", VA = "0x1B8FDA4")]
	public static void ResolveConflict(AGSGameDataMap dataMap, bool useCloud)
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0x1B9033C", Offset = "0x1B9033C", VA = "0x1B9033C")]
	public static void ResolveConflict(bool useCloud)
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x1B90AB4", Offset = "0x1B90AB4", VA = "0x1B90AB4")]
	private static void ServiceNotReadyHandler(string error)
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x1B90BD8", Offset = "0x1B90BD8", VA = "0x1B90BD8")]
	private static void ServiceReadyHandler()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x1B91028", Offset = "0x1B91028", VA = "0x1B91028")]
	private static void HandleSignedInStateChanged(bool isSignedIn)
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x1B910A0", Offset = "0x1B910A0", VA = "0x1B910A0")]
	private static void HandleFirstSynchronize()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x1B91184", Offset = "0x1B91184", VA = "0x1B91184")]
	private static void HandlePotentialConflict()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x1B91268", Offset = "0x1B91268", VA = "0x1B91268")]
	private static void HandleUpdateAchievementCompleted(AGSUpdateAchievementResponse obj)
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x1B914E4", Offset = "0x1B914E4", VA = "0x1B914E4")]
	private static void HandleSubmitScoreCompleted(AGSSubmitScoreResponse obj)
	{
	}
}
[Token(Token = "0x200000B")]
public class AmazonGameCircleIDsList : MonoBehaviour
{
	[Token(Token = "0x200000C")]
	public enum LeaderboardNames
	{
		[Token(Token = "0x4000045")]
		CompletionTime,
		[Token(Token = "0x4000046")]
		Ep2CompletionTime,
		[Token(Token = "0x4000047")]
		Ep3CompletionTime,
		[Token(Token = "0x4000048")]
		Ep4CompletionTime,
		[Token(Token = "0x4000049")]
		Ep5CompletionTime
	}

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AmazonGameCircleIDsList _instance;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool instanceNotFound;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<string> achievementIDs;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<string> leaderboardIDs;

	[Token(Token = "0x17000003")]
	public static AmazonGameCircleIDsList instance
	{
		[Token(Token = "0x600006C")]
		[Address(RVA = "0x19D0114", Offset = "0x19D0114", VA = "0x19D0114")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x19D0070", Offset = "0x19D0070", VA = "0x19D0070")]
	public AmazonGameCircleIDsList()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x19D0430", Offset = "0x19D0430", VA = "0x19D0430")]
	public string getAchievementID(int achievementIndex)
	{
		return null;
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x19D0524", Offset = "0x19D0524", VA = "0x19D0524")]
	public string getLeaderboardID(LeaderboardNames leaderboardName)
	{
		return null;
	}
}
[Token(Token = "0x200000D")]
public class AmazonIAPDataHolder : MonoBehaviour
{
	[Token(Token = "0x200000E")]
	public enum Identifiers
	{
		[Token(Token = "0x400004E")]
		MakingOfChapter1,
		[Token(Token = "0x400004F")]
		MakingOfChapter2,
		[Token(Token = "0x4000050")]
		MakingOfChapter3,
		[Token(Token = "0x4000051")]
		MakingOfChapter4,
		[Token(Token = "0x4000052")]
		MakingOfChapter5,
		[Token(Token = "0x4000053")]
		Chapter2,
		[Token(Token = "0x4000054")]
		Chapter3,
		[Token(Token = "0x4000055")]
		Chapter4,
		[Token(Token = "0x4000056")]
		Chapter5,
		[Token(Token = "0x4000057")]
		SeasonPass,
		[Token(Token = "0x4000058")]
		SeasonPassMinusOne,
		[Token(Token = "0x4000059")]
		SeasonPassMinusTwo,
		[Token(Token = "0x400005A")]
		SeasonPassMinusThree
	}

	[Token(Token = "0x2000506")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE99618", Offset = "0xE99618")]
	private sealed class <>c__Iterator0 : IEnumerable, IEnumerable<string>, IEnumerator, IDisposable, IEnumerator<string>
	{
		[Token(Token = "0x4001964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal IEnumerator $locvar0;

		[Token(Token = "0x4001965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int <a>__1;

		[Token(Token = "0x4001966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal IDisposable $locvar1;

		[Token(Token = "0x4001967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal AmazonIAPDataHolder $this;

		[Token(Token = "0x4001968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal string $current;

		[Token(Token = "0x4001969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal bool $disposing;

		[Token(Token = "0x400196A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int $PC;

		[Token(Token = "0x1700026A")]
		private string System.Collections.Generic.IEnumerator<string>.Current
		{
			[Token(Token = "0x600235A")]
			[Address(RVA = "0x19D2CFC", Offset = "0x19D2CFC", VA = "0x19D2CFC", Slot = "10")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600235B")]
			[Address(RVA = "0x19D2D04", Offset = "0x19D2D04", VA = "0x19D2D04", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002358")]
		[Address(RVA = "0x19D2460", Offset = "0x19D2460", VA = "0x19D2460")]
		[DebuggerHidden]
		public <>c__Iterator0()
		{
		}

		[Token(Token = "0x6002359")]
		[Address(RVA = "0x19D28F4", Offset = "0x19D28F4", VA = "0x19D28F4", Slot = "7")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600235C")]
		[Address(RVA = "0x19D2D0C", Offset = "0x19D2D0C", VA = "0x19D2D0C", Slot = "9")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600235D")]
		[Address(RVA = "0x19D2E18", Offset = "0x19D2E18", VA = "0x19D2E18", Slot = "8")]
		[DebuggerHidden]
		public void Reset()
		{
		}

		[Token(Token = "0x600235E")]
		[Address(RVA = "0x19D2E9C", Offset = "0x19D2E9C", VA = "0x19D2E9C", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600235F")]
		[Address(RVA = "0x19D2EA0", Offset = "0x19D2EA0", VA = "0x19D2EA0", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AmazonIAPDataHolder _instance;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool instanceNotFound;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<string> identifiers;

	[Token(Token = "0x17000004")]
	public static AmazonIAPDataHolder instance
	{
		[Token(Token = "0x6000071")]
		[Address(RVA = "0x19D1FC0", Offset = "0x19D1FC0", VA = "0x19D1FC0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000005")]
	public IEnumerable<string> AllProductIdentifiers
	{
		[Token(Token = "0x6000073")]
		[Address(RVA = "0x19D23C8", Offset = "0x19D23C8", VA = "0x19D23C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x19D1F34", Offset = "0x19D1F34", VA = "0x19D1F34")]
	public AmazonIAPDataHolder()
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x19D22D4", Offset = "0x19D22D4", VA = "0x19D22D4")]
	public string GetProductIdentifier(Identifiers identifier)
	{
		return null;
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x19D2468", Offset = "0x19D2468", VA = "0x19D2468")]
	public Identifiers GetIdentifierForString(string identifierString)
	{
		return default(Identifiers);
	}
}
[Token(Token = "0x200000F")]
public class AmazonGameCircleExample : MonoBehaviour
{
	[Token(Token = "0x400005B")]
	private const string gameCircleOverlayButtonLabel = "Show GameCircle Overlay";

	[Token(Token = "0x400005C")]
	private const string gameCircleSignInButtonLabel = "Show GameCircle Sign In";

	[Token(Token = "0x400005D")]
	private const string isServiceReadyLabel = "Service ready: {0}";

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private AmazonGameCircleExampleInitialization initializationMenu;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<AmazonGameCircleExampleBase> gameCircleExampleMenus;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool initialized;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector2 scroll;

	[Token(Token = "0x4000062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool uiInitialized;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private GUISkin localGuiSkin;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GUISkin originalGuiSkin;

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x1B91A48", Offset = "0x1B91A48", VA = "0x1B91A48")]
	public AmazonGameCircleExample()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x1B91CC4", Offset = "0x1B91CC4", VA = "0x1B91CC4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x1B91DF8", Offset = "0x1B91DF8", VA = "0x1B91DF8")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0x1B91CC8", Offset = "0x1B91CC8", VA = "0x1B91CC8")]
	private void Initialize()
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0x1B923C0", Offset = "0x1B923C0", VA = "0x1B923C0")]
	private void InitializeUI()
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0x1B924AC", Offset = "0x1B924AC", VA = "0x1B924AC")]
	private void ApplyLocalUISkin()
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0x1B92540", Offset = "0x1B92540", VA = "0x1B92540")]
	private void RevertLocalUISkin()
	{
	}
}
[Token(Token = "0x2000010")]
public class AmazonGameCircleExampleAchievements : AmazonGameCircleExampleBase
{
	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Dictionary<string, string> achievementsSubmissionStatus;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<string, string> achievementsSubmissionStatusMessage;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Dictionary<string, bool> achievementsFoldout;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string requestAchievementsStatus;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private string requestAchievementsStatusMessage;

	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<AGSAchievement> achievementList;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool achievementsReady;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<string, List<string>> achievementsForFriend;

	[Token(Token = "0x400006D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private List<string> friendIds;

	[Token(Token = "0x400006E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string friendStatus;

	[Token(Token = "0x400006F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool showFriendsAchievements;

	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private DateTime achievementsRequestTime;

	[Token(Token = "0x4000071")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AGSAchievement invalidAchievement;

	[Token(Token = "0x4000072")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private readonly Regex addNewlineEveryThirdCommaRegex;

	[Token(Token = "0x4000073")]
	private const int betweenCommaRegexGroup = 2;

	[Token(Token = "0x4000074")]
	private const string achievementsMenuTitle = "Achievements";

	[Token(Token = "0x4000075")]
	private const string displayAchievementOverlayButtonLabel = "Achievements Overlay";

	[Token(Token = "0x4000076")]
	private const string achievementProgressLabel = "Achievement \"{0}\"";

	[Token(Token = "0x4000077")]
	private const string submitAchievementButtonLabel = "Submit Achievement Progress";

	[Token(Token = "0x4000078")]
	private const string achievementFailedLabel = "Achievement \"{0}\" failed with error:";

	[Token(Token = "0x4000079")]
	private const string achievementSucceededLabel = "Achievement \"{0}\" uploaded successfully.";

	[Token(Token = "0x400007A")]
	private const string achievementPercent = "{0}%";

	[Token(Token = "0x400007B")]
	private const string requestAchievementsButtonLabel = "Request Achievements";

	[Token(Token = "0x400007C")]
	private const string requestingAchievementsLabel = "Requesting Achievements...";

	[Token(Token = "0x400007D")]
	private const string requestAchievementsFailedLabel = "Request Achievements failed with error:";

	[Token(Token = "0x400007E")]
	private const string requestAchievementsSucceededLabel = "Available Achievements";

	[Token(Token = "0x400007F")]
	private const string noAchievementsAvailableLabel = "No Achievements Available";

	[Token(Token = "0x4000080")]
	private const string achievementRequestTimeLabel = "{0,5:N1} seconds";

	[Token(Token = "0x4000081")]
	private const string submittingInformationString = "Submitting Achievement...";

	[Token(Token = "0x4000082")]
	private const string noErrorMessageReceived = "MISSING ERROR STRING";

	[Token(Token = "0x4000083")]
	private const float achievementMinValue = -200f;

	[Token(Token = "0x4000084")]
	private const float achievementMaxValue = 200f;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AmazonGameCircleExampleAchievements instance;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE99698", Offset = "0xE99698")]
	private static MatchEvaluator <>f__am$cache0;

	[Token(Token = "0x600007D")]
	[Address(RVA = "0x1B9283C", Offset = "0x1B9283C", VA = "0x1B9283C")]
	private AmazonGameCircleExampleAchievements()
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0x1B92668", Offset = "0x1B92668", VA = "0x1B92668")]
	public static AmazonGameCircleExampleAchievements Instance()
	{
		return null;
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0x1B92BA0", Offset = "0x1B92BA0", VA = "0x1B92BA0", Slot = "4")]
	public override string MenuTitle()
	{
		return null;
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0x1B92BFC", Offset = "0x1B92BFC", VA = "0x1B92BFC", Slot = "5")]
	public override void DrawMenu()
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0x1B93888", Offset = "0x1B93888", VA = "0x1B93888")]
	private void DisplayAchievement(AGSAchievement achievement)
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0x1B940A4", Offset = "0x1B940A4", VA = "0x1B940A4")]
	private string AddNewlineEveryThirdComma(string stringToChange)
	{
		return null;
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x1B94194", Offset = "0x1B94194", VA = "0x1B94194")]
	private void OnRequestAchievementsCompleted(AGSRequestAchievementsResponse response)
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x1B9425C", Offset = "0x1B9425C", VA = "0x1B9425C")]
	private void OnUpdateAchievementCompleted(AGSUpdateAchievementResponse response)
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0x1B9443C", Offset = "0x1B9443C", VA = "0x1B9443C")]
	private void OnRequestFriendsCompleted(AGSRequestFriendIdsResponse response)
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x1B9457C", Offset = "0x1B9457C", VA = "0x1B9457C")]
	private void OnRequestAchievementsForFriendCompleted(AGSRequestAchievementsForPlayerResponse response)
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x1B94874", Offset = "0x1B94874", VA = "0x1B94874")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE996A8", Offset = "0xE996A8")]
	private static string <AddNewlineEveryThirdComma>m__0(Match regexMatchEvaluator)
	{
		return null;
	}
}
[Token(Token = "0x2000011")]
public abstract class AmazonGameCircleExampleBase
{
	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public bool foldoutOpen;

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x1B92B98", Offset = "0x1B92B98", VA = "0x1B92B98")]
	protected AmazonGameCircleExampleBase()
	{
	}

	[Token(Token = "0x6000089")]
	public abstract string MenuTitle();

	[Token(Token = "0x600008A")]
	public abstract void DrawMenu();
}
[Token(Token = "0x2000012")]
public class AmazonGameCircleExampleInitialization : AmazonGameCircleExampleBase
{
	[Token(Token = "0x2000013")]
	public enum EInitializationStatus
	{
		[Token(Token = "0x400009E")]
		Uninitialized,
		[Token(Token = "0x400009F")]
		InitializationRequested,
		[Token(Token = "0x40000A0")]
		Ready,
		[Token(Token = "0x40000A1")]
		Unavailable
	}

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private EInitializationStatus initializationStatus;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private DateTime initRequestTime;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool usesLeaderboards;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool usesAchievements;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	private bool usesWhispersync;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private GameCirclePopupLocation toastLocation;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string[] toastLocations;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool enablePopups;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string gameCircleInitializationStatusLabel;

	[Token(Token = "0x4000091")]
	private const string pluginName = "Amazon GameCircle";

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private readonly string pluginInitializationButton;

	[Token(Token = "0x4000093")]
	private const string initializationmenuTitle = "Initialization";

	[Token(Token = "0x4000094")]
	private const string usesLeaderboardsLabel = "Use Leaderboards";

	[Token(Token = "0x4000095")]
	private const string usesAchievementsLabel = "Use Achievements";

	[Token(Token = "0x4000096")]
	private const string usesWhispersyncLabel = "Use Whispersync";

	[Token(Token = "0x4000097")]
	private const string toastLocationLabel = "Popup Location";

	[Token(Token = "0x4000098")]
	private const string popupsDisabledLabel = "Popups Disabled";

	[Token(Token = "0x4000099")]
	private const string popupsEnabledLabel = "Popups Enabled";

	[Token(Token = "0x400009A")]
	private const string pluginFailedToInitializeLabel = "Failed to initialize: {0}";

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly string pluginInitializedLabel;

	[Token(Token = "0x400009C")]
	private const string loadingTimeLabel = "{0,5:N1} seconds";

	[Token(Token = "0x17000006")]
	public EInitializationStatus InitializationStatus
	{
		[Token(Token = "0x600008C")]
		[Address(RVA = "0x1B92538", Offset = "0x1B92538", VA = "0x1B92538")]
		get
		{
			return default(EInitializationStatus);
		}
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x1B91B44", Offset = "0x1B91B44", VA = "0x1B91B44")]
	public AmazonGameCircleExampleInitialization()
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x1B94988", Offset = "0x1B94988", VA = "0x1B94988", Slot = "4")]
	public override string MenuTitle()
	{
		return null;
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x1B949E4", Offset = "0x1B949E4", VA = "0x1B949E4", Slot = "5")]
	public override void DrawMenu()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x1B94AC0", Offset = "0x1B94AC0", VA = "0x1B94AC0")]
	private void DisplayInitGameCircleMenu()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x1B950B8", Offset = "0x1B950B8", VA = "0x1B950B8")]
	private void DisplayLoadingGameCircleMenu()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x1B95330", Offset = "0x1B95330", VA = "0x1B95330")]
	private void DisplayGameCircleUnavailableMenu()
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x1B9542C", Offset = "0x1B9542C", VA = "0x1B9542C")]
	private void InitializeGameCircle()
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x1B9553C", Offset = "0x1B9553C", VA = "0x1B9553C")]
	private void SubscribeToGameCircleInitializationEvents()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x1B95644", Offset = "0x1B95644", VA = "0x1B95644")]
	private void UnsubscribeFromGameCircleInitializationEvents()
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x1B9574C", Offset = "0x1B9574C", VA = "0x1B9574C")]
	private void ServiceNotReadyHandler(string error)
	{
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x1B957FC", Offset = "0x1B957FC", VA = "0x1B957FC")]
	private void ServiceReadyHandler()
	{
	}
}
[Token(Token = "0x2000014")]
public class AmazonGameCircleExampleLeaderboards : AmazonGameCircleExampleBase
{
	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Dictionary<string, string> leaderboardsSubmissionStatus;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<string, string> leaderboardsSubmissionStatusMessage;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Dictionary<string, string> leaderboardsLocalScoreStatus;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, string> leaderboardsLocalScoreStatusMessage;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Dictionary<string, List<string>> leaderboardsScoresStatus;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, string> leaderboardsScoresStatusMessage;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Dictionary<string, List<string>> leaderboardsPercentilesStatus;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<string, string> leaderboardsPercentilesStatusMessage;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Dictionary<string, bool> showPlayerScoreRequestButtons;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<string, Dictionary<string, string>> scoreForPlayer;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Dictionary<string, bool> showPlayerPercentileRequestButtons;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<string, Dictionary<string, List<string>>> percentilesForPlayer;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Dictionary<string, bool> leaderboardsFoldout;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<string> friendIds;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private string friendStatus;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private long leaderboardScoreValue;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string requestLeaderboardsStatus;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private string requestLeaderboardsStatusMessage;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<AGSLeaderboard> leaderboardList;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool leaderboardsReady;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private DateTime leaderboardsRequestTime;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private LeaderboardScope leaderboardScoreScope;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private AGSLeaderboard invalidLeaderboard;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private readonly Regex addNewlineEverySecondCommaRegex;

	[Token(Token = "0x40000BA")]
	private const int betweenCommaRegexGroup = 2;

	[Token(Token = "0x40000BB")]
	private const string leaderboardsMenuTitle = "Leaderboards";

	[Token(Token = "0x40000BC")]
	private const string DisplayLeaderboardOverlayButtonLabel = "Leaderboards Overlay";

	[Token(Token = "0x40000BD")]
	private const string requestLeaderboardsButtonLabel = "Request Leaderboards";

	[Token(Token = "0x40000BE")]
	private const string requestingLeaderboardsLabel = "Requesting Leaderboards...";

	[Token(Token = "0x40000BF")]
	private const string requestLeaderboardsFailedLabel = "Request Leaderboards failed with error:";

	[Token(Token = "0x40000C0")]
	private const string requestLeaderboardsSucceededLabel = "Available Leaderboards";

	[Token(Token = "0x40000C1")]
	private const string noLeaderboardsAvailableLabel = "No Leaderboards Available";

	[Token(Token = "0x40000C2")]
	private const string leaderboardIDLabel = "Leaderboard \"{0}\"";

	[Token(Token = "0x40000C3")]
	private const string leaderboardRequestTimeLabel = "{0,5:N1} seconds";

	[Token(Token = "0x40000C4")]
	private const string leaderboardScoreDisplayLabel = "{0} score units";

	[Token(Token = "0x40000C5")]
	private const string submitLeaderboardButtonLabel = "Submit Score";

	[Token(Token = "0x40000C6")]
	private const string leaderboardFailed = "Leaderboard \"{0}\" failed with error:";

	[Token(Token = "0x40000C7")]
	private const string leaderboardSucceeded = "Score uploaded to \"{0}\" successfully.";

	[Token(Token = "0x40000C8")]
	private const string requestLeaderboardScoreButtonLabel = "Request Local Player Score";

	[Token(Token = "0x40000C9")]
	private const string leaderboardRankScoreLabel = "Rank {0} with score of {1}.";

	[Token(Token = "0x40000CA")]
	private const string leaderboardScoreFailed = "\"{0}\" score request failed with error:";

	[Token(Token = "0x40000CB")]
	private const string requestTopScoresButtonLabel = "Request Top Scores";

	[Token(Token = "0x40000CC")]
	private const string topScoresFailed = "\"{0}\" top scores request failed with error:";

	[Token(Token = "0x40000CD")]
	private const string topScoreItemLabel = "Player: {0}\nScore: {1:D}, FormattedScore:{2}, Rank: {3:D}";

	[Token(Token = "0x40000CE")]
	private const string requestLeaderboardPercentilesButtonLabel = "Request Leaderboard Percentiles";

	[Token(Token = "0x40000CF")]
	private const string percentilesFailed = "\"{0}\" percentiles request failed with error:";

	[Token(Token = "0x40000D0")]
	private const string percentileRankLabel = "Player: {0}\nPercentile: {1:D}, Score: {2:D}";

	[Token(Token = "0x40000D1")]
	private const string localPlayerIndexLabel = "Local user has an index of {0:D}.";

	[Token(Token = "0x40000D2")]
	private const int leaderboardMinValue = -10000;

	[Token(Token = "0x40000D3")]
	private const int leaderboardMaxValue = 10000;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AmazonGameCircleExampleLeaderboards instance;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE996B8", Offset = "0xE996B8")]
	private static MatchEvaluator <>f__am$cache0;

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x1B958A8", Offset = "0x1B958A8", VA = "0x1B958A8")]
	private AmazonGameCircleExampleLeaderboards()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x1B92704", Offset = "0x1B92704", VA = "0x1B92704")]
	public static AmazonGameCircleExampleLeaderboards Instance()
	{
		return null;
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x1B95E40", Offset = "0x1B95E40", VA = "0x1B95E40", Slot = "4")]
	public override string MenuTitle()
	{
		return null;
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x1B95E9C", Offset = "0x1B95E9C", VA = "0x1B95E9C", Slot = "5")]
	public override void DrawMenu()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x1B964C0", Offset = "0x1B964C0", VA = "0x1B964C0")]
	private void DisplayLeaderboard(AGSLeaderboard leaderboard)
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x1B98684", Offset = "0x1B98684", VA = "0x1B98684")]
	private string AddNewlineEverySecondComma(string stringToChange)
	{
		return null;
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x1B98774", Offset = "0x1B98774", VA = "0x1B98774")]
	private void OnRequestLeaderboardsCompleted(AGSRequestLeaderboardsResponse response)
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x1B9883C", Offset = "0x1B9883C", VA = "0x1B9883C")]
	private void OnSubmitScoreCompleted(AGSSubmitScoreResponse response)
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x1B98A1C", Offset = "0x1B98A1C", VA = "0x1B98A1C")]
	private void OnRequestLocalPlayerScoreCompleted(AGSRequestScoreResponse response)
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x1B98C70", Offset = "0x1B98C70", VA = "0x1B98C70")]
	private void OnRequestScoresCompleted(AGSRequestScoresResponse response)
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x1B992C8", Offset = "0x1B992C8", VA = "0x1B992C8")]
	private void OnRequestPercentileRanksCompleted(AGSRequestPercentilesResponse response)
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x1B99780", Offset = "0x1B99780", VA = "0x1B99780")]
	private void OnRequestFriendsCompleted(AGSRequestFriendIdsResponse response)
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x1B998BC", Offset = "0x1B998BC", VA = "0x1B998BC")]
	private void OnRequestScoreForPlayerCompleted(AGSRequestScoreForPlayerResponse response)
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x1B99BB8", Offset = "0x1B99BB8", VA = "0x1B99BB8")]
	private void OnRequestPercentilesForPlayerCompleted(AGSRequestPercentilesForPlayerResponse response)
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0x1B9A3E4", Offset = "0x1B9A3E4", VA = "0x1B9A3E4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE996C8", Offset = "0xE996C8")]
	private static string <AddNewlineEverySecondComma>m__0(Match regexMatchEvaluator)
	{
		return null;
	}
}
[Token(Token = "0x2000015")]
public class AmazonGameCircleExamplePlayer : AmazonGameCircleExampleBase
{
	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private string playerStatus;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private string playerStatusMessage;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private AGSPlayer player;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private DateTime? lastSignInStateChangeEvent;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool haveGotStateChangeEvent;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool signedInStateChange;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private List<string> friendIds;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string friendsRequestError;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private string friendsStatus;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<AGSPlayer> friends;

	[Token(Token = "0x40000E0")]
	private const string playerMenuTitle = "Player";

	[Token(Token = "0x40000E1")]
	private const string playerReceivedLabel = "Retrieved local player data";

	[Token(Token = "0x40000E2")]
	private const string playerFailedLabel = "Failed to retrieve local player data";

	[Token(Token = "0x40000E3")]
	private const string playerRetrieveButtonLabel = "Retrieve local player data";

	[Token(Token = "0x40000E4")]
	private const string playerLabel = "ID: {0} Alias: {1}\nAvatarUrl: {2}";

	[Token(Token = "0x40000E5")]
	private const string playerRetrievingLabel = "Retrieving local player data...";

	[Token(Token = "0x40000E6")]
	private const string isSignedInLabel = "Signed In: {0}";

	[Token(Token = "0x40000E7")]
	private const string getFriendsButtonLabel = "Get Friend ID's";

	[Token(Token = "0x40000E8")]
	private const string friendsLabel = "Friends ID's:";

	[Token(Token = "0x40000E9")]
	private const string friendsRetrievingLabel = "Retrieving friends...";

	[Token(Token = "0x40000EA")]
	private const string friendsRequestFailedLabel = "Friends request failed: {0}";

	[Token(Token = "0x40000EB")]
	private const string signedInEventLabel = "Player signed in {0,5:N1} seconds ago.";

	[Token(Token = "0x40000EC")]
	private const string signedOutEventLabel = "Player signed out {0,5:N1} seconds ago.";

	[Token(Token = "0x40000ED")]
	private const string nullAsString = "null";

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AmazonGameCircleExamplePlayer instance;

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0x1B9A4F8", Offset = "0x1B9A4F8", VA = "0x1B9A4F8")]
	private AmazonGameCircleExamplePlayer()
	{
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0x1B925CC", Offset = "0x1B925CC", VA = "0x1B925CC")]
	public static AmazonGameCircleExamplePlayer Instance()
	{
		return null;
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0x1B9A704", Offset = "0x1B9A704", VA = "0x1B9A704", Slot = "4")]
	public override string MenuTitle()
	{
		return null;
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0x1B9A760", Offset = "0x1B9A760", VA = "0x1B9A760", Slot = "5")]
	public override void DrawMenu()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0x1B9B478", Offset = "0x1B9B478", VA = "0x1B9B478")]
	private void OnPlayerRequestCompleted(AGSRequestPlayerResponse response)
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0x1B9B544", Offset = "0x1B9B544", VA = "0x1B9B544")]
	private void OnGetFriendIdsCompleted(AGSRequestFriendIdsResponse response)
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0x1B9B62C", Offset = "0x1B9B62C", VA = "0x1B9B62C")]
	private void OnBatchFriendsRequestCompleted(AGSRequestBatchFriendsResponse response)
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0x1B9B758", Offset = "0x1B9B758", VA = "0x1B9B758")]
	private void OnSignedInStateChanged(bool isSignedIn)
	{
	}
}
[Token(Token = "0x2000016")]
public class AmazonGameCircleExampleWhispersync : AmazonGameCircleExampleBase
{
	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private DateTime? lastOnNewCloudData;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private DateTime? lastOnDataUploadedToCloud;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private DateTime? lastOnThrottled;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private DateTime? lastOnDiskWriteComplete;

	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private DateTime? lastOnFirstSynchronize;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private DateTime? lastOnAlreadySynchronized;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private DateTime? lastOnSyncFailed;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private string failReason;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool syncableNumbersFoldout;

	[Token(Token = "0x40000F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBD")]
	private bool accumulatingNumbersFoldout;

	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBE")]
	private bool syncableNumberListsFoldout;

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBF")]
	private bool hashSetsFoldout;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool developerStringFoldout;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private List<AmazonGameCircleExampleWSSyncableNumber> syncableNumbers;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private List<AmazonGameCircleExampleWSAccumulatingNumber> accumulatingNumbers;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private List<AmazonGameCircleExampleWSNumberList> syncableNumberLists;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private AmazonGameCircleExampleWSHashSets hashSets;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private AmazonGameCircleExampleWSDeveloperString developerString;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private AGSGameDataMap dataMap;

	[Token(Token = "0x4000102")]
	private const string whispersyncMenuTitle = "Whispersync";

	[Token(Token = "0x4000103")]
	private const string syncableNumbersLabel = "Syncable Numbers";

	[Token(Token = "0x4000104")]
	private const string accumulatingNumbersLabel = "Accumulating Numbers";

	[Token(Token = "0x4000105")]
	private const string syncDataButtonLabel = "Synchronize";

	[Token(Token = "0x4000106")]
	private const string flushButtonLabel = "Flush";

	[Token(Token = "0x4000107")]
	private const string noCloudDataReceivedLabel = "No cloud data received.";

	[Token(Token = "0x4000108")]
	private const string cloudDataLastReceivedLabel = "Received cloud data {0,5:N1} seconds ago.";

	[Token(Token = "0x4000109")]
	private const string uploadedToCloudLabel = "Uploaded cloud data {0,5:N1} seconds ago.";

	[Token(Token = "0x400010A")]
	private const string lastThrottledLabel = "Throttled {0,5:N1} seconds ago.";

	[Token(Token = "0x400010B")]
	private const string diskWriteCompleteLabel = "Disk write complete {0,5:N1} seconds ago.";

	[Token(Token = "0x400010C")]
	private const string firstSynchronizeLabel = "First synchronize {0,5:N1} seconds ago.";

	[Token(Token = "0x400010D")]
	private const string alreadySychronizedLabel = "Already synchronized called {0,5:N1} seconds ago.";

	[Token(Token = "0x400010E")]
	private const string syncFailedLabel = "Sync failed {0,5:N1} seconds ago. Reason: {1}";

	[Token(Token = "0x400010F")]
	private const string hashSetsLabel = "Hash Sets";

	[Token(Token = "0x4000110")]
	private const string numberListsLabel = "Syncable Number Lists";

	[Token(Token = "0x4000111")]
	private const string developerStringLabel = "Developer String";

	[Token(Token = "0x4000112")]
	private const string whispersyncUnavailableLabel = "No Whispersync data available.";

	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AmazonGameCircleExampleWhispersync instance;

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0x1B9B850", Offset = "0x1B9B850", VA = "0x1B9B850")]
	private AmazonGameCircleExampleWhispersync()
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0x1B927A0", Offset = "0x1B927A0", VA = "0x1B927A0")]
	public static AmazonGameCircleExampleWhispersync Instance()
	{
		return null;
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0x1B9C9D4", Offset = "0x1B9C9D4", VA = "0x1B9C9D4", Slot = "4")]
	public override string MenuTitle()
	{
		return null;
	}

	[Token(Token = "0x60000B1")]
	[Address(RVA = "0x1B9CA30", Offset = "0x1B9CA30", VA = "0x1B9CA30", Slot = "5")]
	public override void DrawMenu()
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0x1B9DBE8", Offset = "0x1B9DBE8", VA = "0x1B9DBE8")]
	private void DrawSyncableNumbers()
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0x1B9DE3C", Offset = "0x1B9DE3C", VA = "0x1B9DE3C")]
	private void DrawAccumulatingNumbers()
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0x1B9E090", Offset = "0x1B9E090", VA = "0x1B9E090")]
	private void DrawSyncableNumberLists()
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0x1B9E2E4", Offset = "0x1B9E2E4", VA = "0x1B9E2E4")]
	private void DrawHashSets()
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0x1B9E460", Offset = "0x1B9E460", VA = "0x1B9E460")]
	private void DrawDeveloperString()
	{
	}

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0x1B9D9A0", Offset = "0x1B9D9A0", VA = "0x1B9D9A0")]
	private void InitializeDataMapIfAvailable()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0x1B9B918", Offset = "0x1B9B918", VA = "0x1B9B918")]
	private void InitSyncableNumbers()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0x1B9C094", Offset = "0x1B9C094", VA = "0x1B9C094")]
	private void InitSyncableNumberLists()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0x1B9C4B8", Offset = "0x1B9C4B8", VA = "0x1B9C4B8")]
	private void InitAccumulatingNumbers()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0x1B9C8DC", Offset = "0x1B9C8DC", VA = "0x1B9C8DC")]
	private void InitHashSets()
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0x1B9C958", Offset = "0x1B9C958", VA = "0x1B9C958")]
	private void InitDeveloperString()
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0x1B9E5DC", Offset = "0x1B9E5DC", VA = "0x1B9E5DC")]
	private void OnNewCloudData()
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0x1B9E6C4", Offset = "0x1B9E6C4", VA = "0x1B9E6C4")]
	private void OnDataUploadedToCloud()
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0x1B9E7AC", Offset = "0x1B9E7AC", VA = "0x1B9E7AC")]
	private void OnThrottled()
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0x1B9E894", Offset = "0x1B9E894", VA = "0x1B9E894")]
	private void OnDiskWriteComplete()
	{
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x1B9E97C", Offset = "0x1B9E97C", VA = "0x1B9E97C")]
	private void OnFirstSynchronize()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x1B9EA64", Offset = "0x1B9EA64", VA = "0x1B9EA64")]
	private void OnAlreadySynchronized()
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x1B9EB4C", Offset = "0x1B9EB4C", VA = "0x1B9EB4C")]
	private void OnSyncFailed()
	{
	}
}
[Token(Token = "0x2000017")]
public class AmazonGameCircleExampleWSAccumulatingNumber
{
	[Token(Token = "0x2000018")]
	public enum AvailableAccumulatingNumberType
	{
		[Token(Token = "0x4000125")]
		Int,
		[Token(Token = "0x4000126")]
		Long,
		[Token(Token = "0x4000127")]
		Double,
		[Token(Token = "0x4000128")]
		String
	}

	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private readonly AvailableAccumulatingNumberType type;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private bool foldoutOpen;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private double? valueAsDouble;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private long? valueAsLong;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int? valueAsInt;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private string valueAsString;

	[Token(Token = "0x400011A")]
	private const string incrementButtonLabel = "Increment";

	[Token(Token = "0x400011B")]
	private const string decrementButtonLabel = "Decrement";

	[Token(Token = "0x400011C")]
	private const string accumulatingNumberValueLabel = "Accumulating number value: {0}";

	[Token(Token = "0x400011D")]
	private const string accumulatingNumberDoubleValueLabel = "Accumulating number value: {0,5:N1}";

	[Token(Token = "0x400011E")]
	private const string noAccumulatingNumberLabel = "No value available.";

	[Token(Token = "0x400011F")]
	private const string unableToParseValueAsStringError = "Unable to parse accumulating number.";

	[Token(Token = "0x4000120")]
	private const double doubleIncrementValue = 0.10000000149011612;

	[Token(Token = "0x4000121")]
	private const int intIncrementValue = 1;

	[Token(Token = "0x4000122")]
	private const long longIncrementValue = 1L;

	[Token(Token = "0x4000123")]
	private const string stringIncrementValue = "1";

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0x19CA9F0", Offset = "0x19CA9F0", VA = "0x19CA9F0")]
	public AmazonGameCircleExampleWSAccumulatingNumber(AvailableAccumulatingNumberType newType)
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0x19CAA10", Offset = "0x19CAA10", VA = "0x19CAA10")]
	public void DrawGUI(AGSGameDataMap dataMap)
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x19CB1CC", Offset = "0x19CB1CC", VA = "0x19CB1CC")]
	private void RetrieveAccumulatingNumberValue(AGSGameDataMap dataMap)
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x19CB6E8", Offset = "0x19CB6E8", VA = "0x19CB6E8")]
	private void IncrementValue(AGSGameDataMap dataMap)
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x19CB868", Offset = "0x19CB868", VA = "0x19CB868")]
	private void DecrementValue(AGSGameDataMap dataMap)
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0x19CB3BC", Offset = "0x19CB3BC", VA = "0x19CB3BC")]
	private string ValueLabel()
	{
		return null;
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x19CB0B0", Offset = "0x19CB0B0", VA = "0x19CB0B0")]
	private bool ValueAvailable()
	{
		return default(bool);
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x19CAC88", Offset = "0x19CAC88", VA = "0x19CAC88")]
	private string SyncableVariableName()
	{
		return null;
	}
}
[Token(Token = "0x2000019")]
public class AmazonGameCircleExampleWSDeveloperString
{
	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private AGSSyncableDeveloperString developerString;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private HashSet<string> developerStringKeys;

	[Token(Token = "0x400012B")]
	private const string nullDataMapLabel = "Missing Whispersync DataMap";

	[Token(Token = "0x400012C")]
	private const string nullDeveloperString = "DeveloperString not yet initialized";

	[Token(Token = "0x400012D")]
	private const string refreshDeveloperStringsButtonLabel = "Refresh Developer String Keys";

	[Token(Token = "0x400012E")]
	private const string cloudTimestampLabel = "Cloud Timestamp {0}";

	[Token(Token = "0x400012F")]
	private const string cloudValueLabel = "Cloud Value {0}";

	[Token(Token = "0x4000130")]
	private const string hashCodeLabel = "HashCode {0}";

	[Token(Token = "0x4000131")]
	private const string timestampLabel = "Timestamp {0}";

	[Token(Token = "0x4000132")]
	private const string valueLabel = "Value {0}";

	[Token(Token = "0x4000133")]
	private const string inConflictLabel = "inConflict {0}";

	[Token(Token = "0x4000134")]
	private const string isSetLabel = "isSet {0}";

	[Token(Token = "0x4000135")]
	private const string setValueButtonLabel = "Set Value to \"{0}\"";

	[Token(Token = "0x4000136")]
	private const string developerStringKey = "DeveloperString";

	[Token(Token = "0x4000137")]
	private const string developerStringValue = "DeveloperStringValue";

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0x19CB9E8", Offset = "0x19CB9E8", VA = "0x19CB9E8")]
	public AmazonGameCircleExampleWSDeveloperString()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0x19CB9F0", Offset = "0x19CB9F0", VA = "0x19CB9F0")]
	public void DrawGUI(AGSGameDataMap dataMap)
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0x19CBFEC", Offset = "0x19CBFEC", VA = "0x19CBFEC")]
	private void InitializeDeveloperString(AGSGameDataMap dataMap)
	{
	}
}
[Token(Token = "0x200001A")]
public class AmazonGameCircleExampleWSHashSet
{
	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private string hashSetTitle;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private HashSet<string> hashSet;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool foldoutOpen;

	[Token(Token = "0x400013C")]
	private const string emptyHashSetLabel = "Key list is empty";

	[Token(Token = "0x400013D")]
	private const string refreshHashSetButtonLabel = "Refresh";

	[Token(Token = "0x14000003")]
	private event Func<HashSet<string>> refreshHashSetFunction
	{
		[Token(Token = "0x60000D0")]
		[Address(RVA = "0x19CC0A8", Offset = "0x19CC0A8", VA = "0x19CC0A8")]
		add
		{
		}
		[Token(Token = "0x60000D1")]
		[Address(RVA = "0x19CC20C", Offset = "0x19CC20C", VA = "0x19CC20C")]
		remove
		{
		}
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0x19CC068", Offset = "0x19CC068", VA = "0x19CC068")]
	public AmazonGameCircleExampleWSHashSet(string title, Func<HashSet<string>> refreshFunction)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0x19CC300", Offset = "0x19CC300", VA = "0x19CC300")]
	public void DrawGUI()
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0x19CC19C", Offset = "0x19CC19C", VA = "0x19CC19C")]
	public void Refresh()
	{
	}
}
[Token(Token = "0x200001B")]
public class AmazonGameCircleExampleWSHashSets
{
	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private List<AmazonGameCircleExampleWSHashSet> hashSets;

	[Token(Token = "0x400013F")]
	private const string nullDataMapLabel = "Missing Whispersync DataMap";

	[Token(Token = "0x4000140")]
	private const string nullHashSets = "HashSets not yet initialized";

	[Token(Token = "0x4000141")]
	private const string refreshAllHashSetsButtonLabel = "Refresh All";

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0x19CC668", Offset = "0x19CC668", VA = "0x19CC668")]
	public AmazonGameCircleExampleWSHashSets()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0x19CC670", Offset = "0x19CC670", VA = "0x19CC670")]
	public void DrawGUI(AGSGameDataMap dataMap)
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x19CC8E8", Offset = "0x19CC8E8", VA = "0x19CC8E8")]
	private void InitializeHashSets(AGSGameDataMap dataMap)
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x19CD004", Offset = "0x19CD004", VA = "0x19CD004")]
	private void RefreshAllHashSets()
	{
	}
}
[Token(Token = "0x200001C")]
public class AmazonGameCircleExampleWSNumberList
{
	[Token(Token = "0x200001D")]
	public enum AvailableListType
	{
		[Token(Token = "0x400015D")]
		HighNumber,
		[Token(Token = "0x400015E")]
		LowNumber,
		[Token(Token = "0x400015F")]
		LatestNumber
	}

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private readonly AvailableListType listType;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private AGSSyncableNumberList syncableNumberList;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private AGSSyncableNumberElement[] syncableNumberElements;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private AmazonGameCircleExampleWSNumberListElementCache[] syncableNumberElementsCache;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isSet;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int intVal;

	[Token(Token = "0x4000148")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private long longVal;

	[Token(Token = "0x4000149")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private double doubleVal;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int? maxSize;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool foldout;

	[Token(Token = "0x400014C")]
	private const string notInitializedLabel = "Syncable number list not yet initialized";

	[Token(Token = "0x400014D")]
	private const string refreshSyncableNumberElementsButtonLabel = "Refresh List";

	[Token(Token = "0x400014E")]
	private const string emptyListLabel = "List is empty";

	[Token(Token = "0x400014F")]
	private const string addValuesButtonLabel = "Add values";

	[Token(Token = "0x4000150")]
	private const string metadataKey = "key";

	[Token(Token = "0x4000151")]
	private const string metadataValue = "value";

	[Token(Token = "0x4000152")]
	private const string maxSizeLabel = "Max Size {0}";

	[Token(Token = "0x4000153")]
	private const string updateMaxSizeButtonLabel = "Update Max Size";

	[Token(Token = "0x4000154")]
	private const string isListSetLabel = "Has list been set yet? {0}";

	[Token(Token = "0x4000155")]
	private const int intIncrement = 1;

	[Token(Token = "0x4000156")]
	private const long longIncrement = -5L;

	[Token(Token = "0x4000157")]
	private const double doubleIncrement = 0.1;

	[Token(Token = "0x4000158")]
	private const int stringMultiplier = 2;

	[Token(Token = "0x4000159")]
	private const int minMaxSize = 3;

	[Token(Token = "0x400015A")]
	private const int maxMaxSize = 8;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private readonly Dictionary<string, string> defaultMetadataDictionary;

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x19CD138", Offset = "0x19CD138", VA = "0x19CD138")]
	public AmazonGameCircleExampleWSNumberList(AvailableListType availableListType)
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x19CD210", Offset = "0x19CD210", VA = "0x19CD210")]
	public void DrawGUI(AGSGameDataMap dataMap)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x19CD888", Offset = "0x19CD888", VA = "0x19CD888")]
	private void InitSyncableNumberList(AGSGameDataMap dataMap)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x19CDAAC", Offset = "0x19CDAAC", VA = "0x19CDAAC")]
	private void RefreshList()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x19CE78C", Offset = "0x19CE78C", VA = "0x19CE78C")]
	private void AddValuesToList()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x19CE8A8", Offset = "0x19CE8A8", VA = "0x19CE8A8")]
	private void AddValuesToListWithMetadata()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x19CE868", Offset = "0x19CE868", VA = "0x19CE868")]
	private void IncrementValues()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0x19CD9F8", Offset = "0x19CD9F8", VA = "0x19CD9F8")]
	private string ListName()
	{
		return null;
	}
}
[Token(Token = "0x200001E")]
public class AmazonGameCircleExampleWSNumberListElementCache
{
	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private int valueAsInt;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private long valueAsLong;

	[Token(Token = "0x4000162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private double valueAsDouble;

	[Token(Token = "0x4000163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string valueAsString;

	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Dictionary<string, string> metadata;

	[Token(Token = "0x4000165")]
	private const string listElementLabel = "Int {0} : Long {1} : Double {2,5:N1} : String {3}";

	[Token(Token = "0x4000166")]
	private const string metadataLabel = "Metadata";

	[Token(Token = "0x4000167")]
	private const string noMetadataAvailableLabel = "No metadata";

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0x19CE9A4", Offset = "0x19CE9A4", VA = "0x19CE9A4")]
	public AmazonGameCircleExampleWSNumberListElementCache(int intVal, long longVal, double doubleVal, string stringVal, Dictionary<string, string> elementMetadata)
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0x19CE1CC", Offset = "0x19CE1CC", VA = "0x19CE1CC")]
	public void DrawElement()
	{
	}
}
[Token(Token = "0x200001F")]
public class AmazonGameCircleExampleWSSyncableNumber
{
	[Token(Token = "0x2000020")]
	public enum SyncableNumberBehavior
	{
		[Token(Token = "0x400017E")]
		Highest,
		[Token(Token = "0x400017F")]
		Lowest,
		[Token(Token = "0x4000180")]
		Latest
	}

	[Token(Token = "0x2000021")]
	public enum AvailableSyncableNumberType
	{
		[Token(Token = "0x4000182")]
		Int,
		[Token(Token = "0x4000183")]
		Long,
		[Token(Token = "0x4000184")]
		Double,
		[Token(Token = "0x4000185")]
		String
	}

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private readonly SyncableNumberBehavior behavior;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private readonly AvailableSyncableNumberType type;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool foldoutOpen;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int intNumber;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private long longNumber;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private double doubleNumber;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string stringNumber;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Dictionary<string, string> metadataDictionary;

	[Token(Token = "0x4000170")]
	private const string behaviorAndTypeLabel = "{0}:{1}";

	[Token(Token = "0x4000171")]
	private const string getValueLabel = "Get {0}";

	[Token(Token = "0x4000172")]
	private const string setValueLabel = "Set {0}";

	[Token(Token = "0x4000173")]
	private const string setWithMetadataValueLabel = "Set {0} with metadata";

	[Token(Token = "0x4000174")]
	private const string numberSliderLabel = "{0}";

	[Token(Token = "0x4000175")]
	private const string unhandledSyncableNumberTypeError = "Whispersync unhandled syncable number type";

	[Token(Token = "0x4000176")]
	private const string metadataKey = "key";

	[Token(Token = "0x4000177")]
	private const string metadataValue = "value";

	[Token(Token = "0x4000178")]
	private const string getMetadataButtonLabel = "Get metadata";

	[Token(Token = "0x4000179")]
	private const string noMetaDataAvailableLabel = "No metadata set.";

	[Token(Token = "0x400017A")]
	private const float lowestSliderValue = -10000f;

	[Token(Token = "0x400017B")]
	private const float highestSlidervalue = 10000f;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Dictionary<string, string> defaultMetadataDictionary;

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0x19CEA0C", Offset = "0x19CEA0C", VA = "0x19CEA0C")]
	public AmazonGameCircleExampleWSSyncableNumber(SyncableNumberBehavior newBehavior, AvailableSyncableNumberType newType)
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0x19CEB0C", Offset = "0x19CEB0C", VA = "0x19CEB0C")]
	public void DrawGUI(AGSGameDataMap dataMap)
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0x19CFE2C", Offset = "0x19CFE2C", VA = "0x19CFE2C")]
	private void DisplayMetadata()
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0x19CF420", Offset = "0x19CF420", VA = "0x19CF420")]
	private string BehaviorAndTypeAsString()
	{
		return null;
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0x19CF598", Offset = "0x19CF598", VA = "0x19CF598")]
	private void DrawSlider()
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0x19CF8F4", Offset = "0x19CF8F4", VA = "0x19CF8F4")]
	private AGSSyncableNumber GetSyncableNumber(AGSGameDataMap dataMap)
	{
		return null;
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0x19CFA18", Offset = "0x19CFA18", VA = "0x19CFA18")]
	private void GetSyncableValue(AGSSyncableNumber syncableNumber)
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0x19CFB54", Offset = "0x19CFB54", VA = "0x19CFB54")]
	private void SetSyncableValue(AGSSyncableNumber syncableNumber)
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0x19CFCAC", Offset = "0x19CFCAC", VA = "0x19CFCAC")]
	private void SetSyncableValueWithMetadata(AGSSyncableNumber syncableNumber)
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0x19CFE14", Offset = "0x19CFE14", VA = "0x19CFE14")]
	private Dictionary<string, string> GetMetadata(AGSSyncableNumber syncableNumber)
	{
		return null;
	}
}
[Token(Token = "0x2000022")]
public class GameCircleSocialAchievementsExample
{
	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private bool achievementsMenuFoldout;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	private bool achievementsFoldout;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private IAchievement[] achievements;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GameCircleSocialExample.AsyncOperationStatus achievementStatus;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool achievementsDescriptionsFoldout;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IAchievementDescription[] achievementDescriptions;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private GameCircleSocialExample.AsyncOperationStatus achievementDescriptionStatus;

	[Token(Token = "0x400018D")]
	private const string achievementMenuLabel = "Achievements Menu";

	[Token(Token = "0x400018E")]
	private const string achievementOverlayLabel = "Achievement Overlay";

	[Token(Token = "0x400018F")]
	private const string achievementsLabel = "Achievements";

	[Token(Token = "0x4000190")]
	private const string achievementDescriptionsLabel = "Achievement Descriptions";

	[Token(Token = "0x4000191")]
	private const string retrieveDataButtonLabel = "Retrieve";

	[Token(Token = "0x4000192")]
	private const string noAchievementsLabel = "No achievements available";

	[Token(Token = "0x4000193")]
	private const string noAchievementDescriptionsLabel = "No achievement descriptions available";

	[Token(Token = "0x4000194")]
	private const string waitingLabel = "Waiting on async operation...";

	[Token(Token = "0x4000195")]
	private const string achievementPercent = "{0,5:N1}% Completed";

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0x19B9140", Offset = "0x19B9140", VA = "0x19B9140")]
	public GameCircleSocialAchievementsExample()
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0x19B9148", Offset = "0x19B9148", VA = "0x19B9148")]
	public void DrawAchievementsMenu()
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0x19B9370", Offset = "0x19B9370", VA = "0x19B9370")]
	private void ShowAchievements()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0x19B99A4", Offset = "0x19B99A4", VA = "0x19B99A4")]
	private void ShowAchievementDescriptions()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0x19BA020", Offset = "0x19BA020", VA = "0x19BA020")]
	private void AchievementsCallback(IAchievement[] achievements)
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0x19BA040", Offset = "0x19BA040", VA = "0x19BA040")]
	private void AchievementDescriptionsCallback(IAchievementDescription[] descriptions)
	{
	}
}
[Token(Token = "0x2000023")]
public class GameCircleSocialExample : MonoBehaviour
{
	[Token(Token = "0x2000024")]
	public enum AsyncOperationStatus
	{
		[Token(Token = "0x40001A3")]
		Inactive,
		[Token(Token = "0x40001A4")]
		Waiting,
		[Token(Token = "0x40001A5")]
		Failed,
		[Token(Token = "0x40001A6")]
		Success
	}

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Vector2 scroll;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool uiInitialized;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GUISkin localGuiSkin;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private GUISkin originalGuiSkin;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AsyncOperationStatus socialInitialization;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private GameCircleSocialAchievementsExample achievementsExample;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameCircleSocialLeaderboardsExample leaderboardsExample;

	[Token(Token = "0x400019D")]
	private const string initializeSocialButtonLabel = "Initialize GameCircle Social API";

	[Token(Token = "0x400019E")]
	private const string waitingForSocialInitialization = "Initializing...";

	[Token(Token = "0x400019F")]
	private const string initializationFailedLabel = "Failed to initialize";

	[Token(Token = "0x40001A0")]
	private const string initializationSuccessfulLabel = "GameCircle Initialized";

	[Token(Token = "0x40001A1")]
	private const string waitingLabel = "Waiting on async operation...";

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0x19BA060", Offset = "0x19BA060", VA = "0x19BA060")]
	public GameCircleSocialExample()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0x19BA158", Offset = "0x19BA158", VA = "0x19BA158")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0x19BA1E0", Offset = "0x19BA1E0", VA = "0x19BA1E0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0x19BA43C", Offset = "0x19BA43C", VA = "0x19BA43C")]
	private void InitializeUI()
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0x19BA528", Offset = "0x19BA528", VA = "0x19BA528")]
	private void ApplyLocalUISkin()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0x19BA94C", Offset = "0x19BA94C", VA = "0x19BA94C")]
	private void RevertLocalUISkin()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0x19BA5B4", Offset = "0x19BA5B4", VA = "0x19BA5B4")]
	private void DrawInitializationMenu()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0x19BA750", Offset = "0x19BA750", VA = "0x19BA750")]
	private void DrawSocialMenu()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0x19BAAFC", Offset = "0x19BAAFC", VA = "0x19BAAFC")]
	private void AuthenticateCallback(bool success)
	{
	}
}
[Token(Token = "0x2000025")]
public class GameCircleSocialLeaderboardsExample
{
	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private bool leaderboardsMenuFoldout;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private long scoreValue;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IScore[] scores;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool? scoreReportSuccessful;

	[Token(Token = "0x40001AB")]
	private const string leaderboardsMenuLabel = "Leaderboards Menu";

	[Token(Token = "0x40001AC")]
	private const string leaderboardsOverlayLabel = "Leaderboards Overlay";

	[Token(Token = "0x40001AD")]
	private const string scoreValueLabel = "{0}";

	[Token(Token = "0x40001AE")]
	private const string reportScoreButtonLabel = "Report Score";

	[Token(Token = "0x40001AF")]
	private const string scoreReportSuccessLabel = "Score Report Success";

	[Token(Token = "0x40001B0")]
	private const string scoreReportFailureLabel = "Score Report Failure";

	[Token(Token = "0x40001B1")]
	private const string retrieveScoresButtonLabel = "Retrieve Scores";

	[Token(Token = "0x40001B2")]
	private const string scoreLeaderboardLabel = "Leaderboard {0}";

	[Token(Token = "0x40001B3")]
	private const string scoreRankLabel = "Rank {0}";

	[Token(Token = "0x40001B4")]
	private const string scoreUserLabel = "User {0}";

	[Token(Token = "0x40001B5")]
	private const string leaderboardExampleID = "Replace with your own Leaderboard ID";

	[Token(Token = "0x40001B6")]
	private const long scoreMinValue = 0L;

	[Token(Token = "0x40001B7")]
	private const long scoreMaxValue = 10000L;

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0x19BA150", Offset = "0x19BA150", VA = "0x19BA150")]
	public GameCircleSocialLeaderboardsExample()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0x19BA9D8", Offset = "0x19BA9D8", VA = "0x19BA9D8")]
	public void DrawLeaderboardsMenu()
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0x19BAB10", Offset = "0x19BAB10", VA = "0x19BAB10")]
	private void DisplayScoreReporter()
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0x19BACA0", Offset = "0x19BACA0", VA = "0x19BACA0")]
	private void DisplayScoreReportResult()
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0x19BADF0", Offset = "0x19BADF0", VA = "0x19BADF0")]
	private void DisplayScoreRetrieval()
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0x19BB498", Offset = "0x19BB498", VA = "0x19BB498")]
	private void ReportScoreCallback(bool success)
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0x19BB51C", Offset = "0x19BB51C", VA = "0x19BB51C")]
	private void RetrieveScoreCallback(IScore[] scores)
	{
	}
}
[Token(Token = "0x2000026")]
public class AGSAchievementsClient : MonoBehaviour
{
	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AmazonJavaWrapper JavaObject;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly string PROXY_CLASS_NAME;

	[Token(Token = "0x14000004")]
	public static event Action<AGSUpdateAchievementResponse> UpdateAchievementCompleted
	{
		[Token(Token = "0x6000104")]
		[Address(RVA = "0x1B6CF00", Offset = "0x1B6CF00", VA = "0x1B6CF00")]
		add
		{
		}
		[Token(Token = "0x6000105")]
		[Address(RVA = "0x1B6D074", Offset = "0x1B6D074", VA = "0x1B6D074")]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public static event Action<AGSRequestAchievementsResponse> RequestAchievementsCompleted
	{
		[Token(Token = "0x6000106")]
		[Address(RVA = "0x1B6D1E8", Offset = "0x1B6D1E8", VA = "0x1B6D1E8")]
		add
		{
		}
		[Token(Token = "0x6000107")]
		[Address(RVA = "0x1B6D35C", Offset = "0x1B6D35C", VA = "0x1B6D35C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public static event Action<AGSRequestAchievementsForPlayerResponse> RequestAchievementsForPlayerCompleted
	{
		[Token(Token = "0x6000108")]
		[Address(RVA = "0x1B6D4D0", Offset = "0x1B6D4D0", VA = "0x1B6D4D0")]
		add
		{
		}
		[Token(Token = "0x6000109")]
		[Address(RVA = "0x1B6D644", Offset = "0x1B6D644", VA = "0x1B6D644")]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE99878", Offset = "0xE99878")]
	public static event Action<string, string> UpdateAchievementFailedEvent
	{
		[Token(Token = "0x6000113")]
		[Address(RVA = "0x1B6FA5C", Offset = "0x1B6FA5C", VA = "0x1B6FA5C")]
		add
		{
		}
		[Token(Token = "0x6000114")]
		[Address(RVA = "0x1B6FBD0", Offset = "0x1B6FBD0", VA = "0x1B6FBD0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE998AC", Offset = "0xE998AC")]
	public static event Action<string> UpdateAchievementSucceededEvent
	{
		[Token(Token = "0x6000115")]
		[Address(RVA = "0x1B6FD44", Offset = "0x1B6FD44", VA = "0x1B6FD44")]
		add
		{
		}
		[Token(Token = "0x6000116")]
		[Address(RVA = "0x1B6FEB8", Offset = "0x1B6FEB8", VA = "0x1B6FEB8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE998E0", Offset = "0xE998E0")]
	public static event Action<List<AGSAchievement>> RequestAchievementsSucceededEvent
	{
		[Token(Token = "0x6000117")]
		[Address(RVA = "0x1B7002C", Offset = "0x1B7002C", VA = "0x1B7002C")]
		add
		{
		}
		[Token(Token = "0x6000118")]
		[Address(RVA = "0x1B701A0", Offset = "0x1B701A0", VA = "0x1B701A0")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE99914", Offset = "0xE99914")]
	public static event Action<string> RequestAchievementsFailedEvent
	{
		[Token(Token = "0x6000119")]
		[Address(RVA = "0x1B70314", Offset = "0x1B70314", VA = "0x1B70314")]
		add
		{
		}
		[Token(Token = "0x600011A")]
		[Address(RVA = "0x1B70488", Offset = "0x1B70488", VA = "0x1B70488")]
		remove
		{
		}
	}

	[Token(Token = "0x6000102")]
	[Address(RVA = "0x1B6CB8C", Offset = "0x1B6CB8C", VA = "0x1B6CB8C")]
	static AGSAchievementsClient()
	{
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0x1B6CEF8", Offset = "0x1B6CEF8", VA = "0x1B6CEF8")]
	public AGSAchievementsClient()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x1B6D7B8", Offset = "0x1B6D7B8", VA = "0x1B6D7B8")]
	public static void UpdateAchievementProgress(string achievementId, float progress, int userData = 0)
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x1B6D9DC", Offset = "0x1B6D9DC", VA = "0x1B6D9DC")]
	public static void RequestAchievements(int userData = 0)
	{
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x1B6DB3C", Offset = "0x1B6DB3C", VA = "0x1B6DB3C")]
	public static void RequestAchievementsForPlayer(string playerId, int userData = 0)
	{
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x1B6DCE8", Offset = "0x1B6DCE8", VA = "0x1B6DCE8")]
	public static void ShowAchievementsOverlay()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x1B6DDC8", Offset = "0x1B6DDC8", VA = "0x1B6DDC8")]
	public static void RequestAchievementsSucceeded(string json)
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x1B6E740", Offset = "0x1B6E740", VA = "0x1B6E740")]
	public static void RequestAchievementsFailed(string json)
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x1B6E918", Offset = "0x1B6E918", VA = "0x1B6E918")]
	public static void UpdateAchievementFailed(string json)
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x1B6EF2C", Offset = "0x1B6EF2C", VA = "0x1B6EF2C")]
	public static void UpdateAchievementSucceeded(string json)
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x1B6F104", Offset = "0x1B6F104", VA = "0x1B6F104")]
	public static void RequestAchievementsForPlayerComplete(string json)
	{
	}
}
[Token(Token = "0x2000027")]
public class AGSAchievement
{
	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string title;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string id;

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string description;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float progress;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int pointValue;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isHidden;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool isUnlocked;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int position;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public DateTime dateUnlocked;

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x1B6BE80", Offset = "0x1B6BE80", VA = "0x1B6BE80")]
	public AGSAchievement()
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0x1B6BE88", Offset = "0x1B6BE88", VA = "0x1B6BE88")]
	public static AGSAchievement fromHashtable(Hashtable hashtable)
	{
		return null;
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0x1B6C5BC", Offset = "0x1B6C5BC", VA = "0x1B6C5BC")]
	public static AGSAchievement GetBlankAchievement()
	{
		return null;
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x1B6C48C", Offset = "0x1B6C48C", VA = "0x1B6C48C")]
	private static DateTime getTimefromEpochTime(long javaTimeStamp)
	{
		return default(DateTime);
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0x1B6C790", Offset = "0x1B6C790", VA = "0x1B6C790", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000028")]
public class AGSRequestAchievementsForPlayerResponse : AGSRequestAchievementsResponse
{
	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string playerId;

	[Token(Token = "0x6000120")]
	[Address(RVA = "0x1B7F790", Offset = "0x1B7F790", VA = "0x1B7F790")]
	public AGSRequestAchievementsForPlayerResponse()
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0x1B6F218", Offset = "0x1B6F218", VA = "0x1B6F218")]
	public new static AGSRequestAchievementsForPlayerResponse FromJSON(string json)
	{
		return null;
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0x1B7F86C", Offset = "0x1B7F86C", VA = "0x1B7F86C")]
	public static AGSRequestAchievementsForPlayerResponse GetBlankResponseWithError(string error, string playerId = "", int userData = 0)
	{
		return null;
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0x1B7F958", Offset = "0x1B7F958", VA = "0x1B7F958")]
	public static AGSRequestAchievementsForPlayerResponse GetPlatformNotSupportedResponse(string playerId, int userData)
	{
		return null;
	}
}
[Token(Token = "0x2000029")]
public class AGSRequestAchievementsResponse : AGSRequestResponse
{
	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<AGSAchievement> achievements;

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x1B7F798", Offset = "0x1B7F798", VA = "0x1B7F798")]
	public AGSRequestAchievementsResponse()
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0x1B6DFA0", Offset = "0x1B6DFA0", VA = "0x1B6DFA0")]
	public static AGSRequestAchievementsResponse FromJSON(string json)
	{
		return null;
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0x1B7F9D4", Offset = "0x1B7F9D4", VA = "0x1B7F9D4")]
	public static AGSRequestAchievementsResponse GetBlankResponseWithError(string error, int userData = 0)
	{
		return null;
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0x1B7FAAC", Offset = "0x1B7FAAC", VA = "0x1B7FAAC")]
	public static AGSRequestAchievementsResponse GetPlatformNotSupportedResponse(int userData)
	{
		return null;
	}
}
[Token(Token = "0x200002A")]
public class AGSUpdateAchievementResponse : AGSRequestResponse
{
	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string achievementId;

	[Token(Token = "0x6000128")]
	[Address(RVA = "0x1B872BC", Offset = "0x1B872BC", VA = "0x1B872BC")]
	public AGSUpdateAchievementResponse()
	{
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x1B6EB08", Offset = "0x1B6EB08", VA = "0x1B6EB08")]
	public static AGSUpdateAchievementResponse FromJSON(string json)
	{
		return null;
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0x1B872C4", Offset = "0x1B872C4", VA = "0x1B872C4")]
	public static AGSUpdateAchievementResponse GetBlankResponseWithError(string error, string achievementId = "", int userData = 0)
	{
		return null;
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x1B87370", Offset = "0x1B87370", VA = "0x1B87370")]
	public static AGSUpdateAchievementResponse GetPlatformNotSupportedResponse(string achievementId, int userData)
	{
		return null;
	}
}
[Token(Token = "0x200002B")]
public enum GameCirclePopupLocation
{
	[Token(Token = "0x40001CE")]
	BOTTOM_LEFT,
	[Token(Token = "0x40001CF")]
	BOTTOM_CENTER,
	[Token(Token = "0x40001D0")]
	BOTTOM_RIGHT,
	[Token(Token = "0x40001D1")]
	TOP_LEFT,
	[Token(Token = "0x40001D2")]
	TOP_CENTER,
	[Token(Token = "0x40001D3")]
	TOP_RIGHT
}
[Token(Token = "0x200002C")]
public class AGSClient : MonoBehaviour
{
	[Token(Token = "0x40001D6")]
	public const string serviceName = "AmazonGameCircle";

	[Token(Token = "0x40001D7")]
	public const AmazonLogging.AmazonLoggingLevel errorLevel = AmazonLogging.AmazonLoggingLevel.Verbose;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool ReinitializeOnFocus;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	private static bool IsReady;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
	private static bool supportsAchievements;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
	private static bool supportsLeaderboards;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static bool supportsWhispersync;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static AmazonJavaWrapper JavaObject;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static readonly string PROXY_CLASS_NAME;

	[Token(Token = "0x1400000B")]
	public static event Action ServiceReadyEvent
	{
		[Token(Token = "0x600012E")]
		[Address(RVA = "0x1B708D4", Offset = "0x1B708D4", VA = "0x1B708D4")]
		add
		{
		}
		[Token(Token = "0x600012F")]
		[Address(RVA = "0x1B70A48", Offset = "0x1B70A48", VA = "0x1B70A48")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000C")]
	public static event Action<string> ServiceNotReadyEvent
	{
		[Token(Token = "0x6000130")]
		[Address(RVA = "0x1B70BBC", Offset = "0x1B70BBC", VA = "0x1B70BBC")]
		add
		{
		}
		[Token(Token = "0x6000131")]
		[Address(RVA = "0x1B70D30", Offset = "0x1B70D30", VA = "0x1B70D30")]
		remove
		{
		}
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x1B705FC", Offset = "0x1B705FC", VA = "0x1B705FC")]
	static AGSClient()
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x1B708CC", Offset = "0x1B708CC", VA = "0x1B708CC")]
	public AGSClient()
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x1B70EA4", Offset = "0x1B70EA4", VA = "0x1B70EA4")]
	public static void Init()
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x1B70F44", Offset = "0x1B70F44", VA = "0x1B70F44")]
	public static void Init(bool supportsLeaderboards, bool supportsAchievements, bool supportsWhispersync)
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x1B711BC", Offset = "0x1B711BC", VA = "0x1B711BC")]
	public static void SetPopUpEnabled(bool enabled)
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x1B7131C", Offset = "0x1B7131C", VA = "0x1B7131C")]
	public static void SetPopUpLocation(GameCirclePopupLocation location)
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x1B714B8", Offset = "0x1B714B8", VA = "0x1B714B8")]
	public static void ServiceReady(string empty)
	{
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0x1B7163C", Offset = "0x1B7163C", VA = "0x1B7163C")]
	public static bool IsServiceReady()
	{
		return default(bool);
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x1B716C8", Offset = "0x1B716C8", VA = "0x1B716C8")]
	public static void release()
	{
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x1B717A8", Offset = "0x1B717A8", VA = "0x1B717A8")]
	public static void Shutdown()
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x1B71888", Offset = "0x1B71888", VA = "0x1B71888")]
	public static void ServiceNotReady(string param)
	{
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x1B7199C", Offset = "0x1B7199C", VA = "0x1B7199C")]
	public static void ShowGameCircleOverlay()
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x1B71A7C", Offset = "0x1B71A7C", VA = "0x1B71A7C")]
	public static void ShowSignInPage()
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x1B6C540", Offset = "0x1B6C540", VA = "0x1B6C540")]
	public static void LogGameCircleError(string errorMessage)
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x1B6CE7C", Offset = "0x1B6CE7C", VA = "0x1B6CE7C")]
	public static void LogGameCircleWarning(string errorMessage)
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x1B715C0", Offset = "0x1B715C0", VA = "0x1B715C0")]
	public static void Log(string message)
	{
	}
}
[Token(Token = "0x200002D")]
public class AGSRequestResponse
{
	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string error;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int userData;

	[Token(Token = "0x40001E1")]
	protected const string PLATFORM_NOT_SUPPORTED_ERROR = "PLATFORM_NOT_SUPPORTED";

	[Token(Token = "0x40001E2")]
	protected const string JSON_PARSE_ERROR = "ERROR_PARSING_JSON";

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x1B7F9CC", Offset = "0x1B7F9CC", VA = "0x1B7F9CC")]
	public AGSRequestResponse()
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x1B6E6B0", Offset = "0x1B6E6B0", VA = "0x1B6E6B0")]
	public bool IsError()
	{
		return default(bool);
	}
}
[Token(Token = "0x200002E")]
public class GameCircleManager : MonoBehaviour
{
	[Token(Token = "0x6000142")]
	[Address(RVA = "0x19B433C", Offset = "0x19B433C", VA = "0x19B433C")]
	public GameCircleManager()
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0x19B4344", Offset = "0x19B4344", VA = "0x19B4344")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x19B442C", Offset = "0x19B442C", VA = "0x19B442C")]
	public void serviceReady(string empty)
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x19B44D0", Offset = "0x19B44D0", VA = "0x19B44D0")]
	public void serviceNotReady(string param)
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x19B4574", Offset = "0x19B4574", VA = "0x19B4574")]
	public void playerReceived(string json)
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x19B4644", Offset = "0x19B4644", VA = "0x19B4644")]
	public void playerFailed(string json)
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x19B4714", Offset = "0x19B4714", VA = "0x19B4714")]
	public void localPlayerFriendRequestComplete(string json)
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x19B47E4", Offset = "0x19B47E4", VA = "0x19B47E4")]
	public void batchFriendsRequestComplete(string json)
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x19B48B4", Offset = "0x19B48B4", VA = "0x19B48B4")]
	public void onSignedInStateChange(string isSignedIn)
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x19B49C4", Offset = "0x19B49C4", VA = "0x19B49C4")]
	public void submitScoreFailed(string json)
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x19B4A94", Offset = "0x19B4A94", VA = "0x19B4A94")]
	public void submitScoreSucceeded(string json)
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x19B4B64", Offset = "0x19B4B64", VA = "0x19B4B64")]
	public void requestLeaderboardsFailed(string json)
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x19B4C34", Offset = "0x19B4C34", VA = "0x19B4C34")]
	public void requestLeaderboardsSucceeded(string json)
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0x19B4D04", Offset = "0x19B4D04", VA = "0x19B4D04")]
	public void requestLocalPlayerScoreFailed(string json)
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x19B4DD4", Offset = "0x19B4DD4", VA = "0x19B4DD4")]
	public void requestLocalPlayerScoreSucceeded(string json)
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x19B4EA4", Offset = "0x19B4EA4", VA = "0x19B4EA4")]
	public void requestPlayerScoreCompleted(string json)
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x19B4F74", Offset = "0x19B4F74", VA = "0x19B4F74")]
	public void requestScoresSucceeded(string json)
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x19B5044", Offset = "0x19B5044", VA = "0x19B5044")]
	public void requestScoresFailed(string json)
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0x19B5114", Offset = "0x19B5114", VA = "0x19B5114")]
	public void requestPercentileRanksSucceeded(string json)
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x19B51E4", Offset = "0x19B51E4", VA = "0x19B51E4")]
	public void requestPercentileRanksFailed(string json)
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0x19B52B4", Offset = "0x19B52B4", VA = "0x19B52B4")]
	public void requestPercentileRanksForPlayerSucceeded(string json)
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0x19B5384", Offset = "0x19B5384", VA = "0x19B5384")]
	public void updateAchievementSucceeded(string json)
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0x19B5454", Offset = "0x19B5454", VA = "0x19B5454")]
	public void updateAchievementFailed(string json)
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0x19B5524", Offset = "0x19B5524", VA = "0x19B5524")]
	public void requestAchievementsSucceeded(string json)
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0x19B55F4", Offset = "0x19B55F4", VA = "0x19B55F4")]
	public void requestAchievementsFailed(string json)
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0x19B56C4", Offset = "0x19B56C4", VA = "0x19B56C4")]
	public void requestAchievementsForPlayerCompleted(string json)
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x19B5794", Offset = "0x19B5794", VA = "0x19B5794")]
	public void onNewCloudData(string empty)
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x19B5814", Offset = "0x19B5814", VA = "0x19B5814")]
	public void onDataUploadedToCloud(string empty)
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x19B5894", Offset = "0x19B5894", VA = "0x19B5894")]
	public void onThrottled(string empty)
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x19B5914", Offset = "0x19B5914", VA = "0x19B5914")]
	public void onDiskWriteComplete(string empty)
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x19B5994", Offset = "0x19B5994", VA = "0x19B5994")]
	public void onFirstSynchronize(string empty)
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x19B5A14", Offset = "0x19B5A14", VA = "0x19B5A14")]
	public void onAlreadySynchronized(string empty)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0x19B5A94", Offset = "0x19B5A94", VA = "0x19B5A94")]
	public void onSyncFailed(string failReason)
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0x19B5B1C", Offset = "0x19B5B1C", VA = "0x19B5B1C")]
	public void OnApplicationFocus(bool focusStatus)
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0x19B5C20", Offset = "0x19B5C20", VA = "0x19B5C20")]
	public void OnAppplicationQuit()
	{
	}
}
[Token(Token = "0x200002F")]
public enum LeaderboardScope
{
	[Token(Token = "0x40001E4")]
	GlobalAllTime,
	[Token(Token = "0x40001E5")]
	GlobalWeek,
	[Token(Token = "0x40001E6")]
	GlobalDay,
	[Token(Token = "0x40001E7")]
	FriendsAllTime
}
[Token(Token = "0x2000030")]
public class AGSLeaderboardsClient : MonoBehaviour
{
	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AmazonJavaWrapper JavaObject;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly string PROXY_CLASS_NAME;

	[Token(Token = "0x1400000D")]
	public static event Action<AGSSubmitScoreResponse> SubmitScoreCompleted
	{
		[Token(Token = "0x6000167")]
		[Address(RVA = "0x1B736C4", Offset = "0x1B736C4", VA = "0x1B736C4")]
		add
		{
		}
		[Token(Token = "0x6000168")]
		[Address(RVA = "0x1B73838", Offset = "0x1B73838", VA = "0x1B73838")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public static event Action<AGSRequestLeaderboardsResponse> RequestLeaderboardsCompleted
	{
		[Token(Token = "0x6000169")]
		[Address(RVA = "0x1B739AC", Offset = "0x1B739AC", VA = "0x1B739AC")]
		add
		{
		}
		[Token(Token = "0x600016A")]
		[Address(RVA = "0x1B73B20", Offset = "0x1B73B20", VA = "0x1B73B20")]
		remove
		{
		}
	}

	[Token(Token = "0x1400000F")]
	public static event Action<AGSRequestScoreResponse> RequestLocalPlayerScoreCompleted
	{
		[Token(Token = "0x600016B")]
		[Address(RVA = "0x1B73C94", Offset = "0x1B73C94", VA = "0x1B73C94")]
		add
		{
		}
		[Token(Token = "0x600016C")]
		[Address(RVA = "0x1B73E08", Offset = "0x1B73E08", VA = "0x1B73E08")]
		remove
		{
		}
	}

	[Token(Token = "0x14000010")]
	public static event Action<AGSRequestScoreForPlayerResponse> RequestScoreForPlayerCompleted
	{
		[Token(Token = "0x600016D")]
		[Address(RVA = "0x1B73F7C", Offset = "0x1B73F7C", VA = "0x1B73F7C")]
		add
		{
		}
		[Token(Token = "0x600016E")]
		[Address(RVA = "0x1B740F0", Offset = "0x1B740F0", VA = "0x1B740F0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000011")]
	public static event Action<AGSRequestScoresResponse> RequestScoresCompleted
	{
		[Token(Token = "0x600016F")]
		[Address(RVA = "0x1B74264", Offset = "0x1B74264", VA = "0x1B74264")]
		add
		{
		}
		[Token(Token = "0x6000170")]
		[Address(RVA = "0x1B743D8", Offset = "0x1B743D8", VA = "0x1B743D8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000012")]
	public static event Action<AGSRequestPercentilesResponse> RequestPercentileRanksCompleted
	{
		[Token(Token = "0x6000171")]
		[Address(RVA = "0x1B7454C", Offset = "0x1B7454C", VA = "0x1B7454C")]
		add
		{
		}
		[Token(Token = "0x6000172")]
		[Address(RVA = "0x1B746C0", Offset = "0x1B746C0", VA = "0x1B746C0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000013")]
	public static event Action<AGSRequestPercentilesForPlayerResponse> RequestPercentileRanksForPlayerCompleted
	{
		[Token(Token = "0x6000173")]
		[Address(RVA = "0x1B74834", Offset = "0x1B74834", VA = "0x1B74834")]
		add
		{
		}
		[Token(Token = "0x6000174")]
		[Address(RVA = "0x1B749A8", Offset = "0x1B749A8", VA = "0x1B749A8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000014")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE99CBC", Offset = "0xE99CBC")]
	public static event Action<string, string> SubmitScoreFailedEvent
	{
		[Token(Token = "0x6000189")]
		[Address(RVA = "0x1B7AA5C", Offset = "0x1B7AA5C", VA = "0x1B7AA5C")]
		add
		{
		}
		[Token(Token = "0x600018A")]
		[Address(RVA = "0x1B7ABD0", Offset = "0x1B7ABD0", VA = "0x1B7ABD0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000015")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE99CF0", Offset = "0xE99CF0")]
	public static event Action<string> SubmitScoreSucceededEvent
	{
		[Token(Token = "0x600018B")]
		[Address(RVA = "0x1B7AD44", Offset = "0x1B7AD44", VA = "0x1B7AD44")]
		add
		{
		}
		[Token(Token = "0x600018C")]
		[Address(RVA = "0x1B7AEB8", Offset = "0x1B7AEB8", VA = "0x1B7AEB8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000016")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE99D24", Offset = "0xE99D24")]
	public static event Action<string> RequestLeaderboardsFailedEvent
	{
		[Token(Token = "0x600018D")]
		[Address(RVA = "0x1B7B02C", Offset = "0x1B7B02C", VA = "0x1B7B02C")]
		add
		{
		}
		[Token(Token = "0x600018E")]
		[Address(RVA = "0x1B7B1A0", Offset = "0x1B7B1A0", VA = "0x1B7B1A0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000017")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE99D58", Offset = "0xE99D58")]
	public static event Action<List<AGSLeaderboard>> RequestLeaderboardsSucceededEvent
	{
		[Token(Token = "0x600018F")]
		[Address(RVA = "0x1B7B314", Offset = "0x1B7B314", VA = "0x1B7B314")]
		add
		{
		}
		[Token(Token = "0x6000190")]
		[Address(RVA = "0x1B7B488", Offset = "0x1B7B488", VA = "0x1B7B488")]
		remove
		{
		}
	}

	[Token(Token = "0x14000018")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE99D8C", Offset = "0xE99D8C")]
	public static event Action<string, string> RequestLocalPlayerScoreFailedEvent
	{
		[Token(Token = "0x6000191")]
		[Address(RVA = "0x1B7B5FC", Offset = "0x1B7B5FC", VA = "0x1B7B5FC")]
		add
		{
		}
		[Token(Token = "0x6000192")]
		[Address(RVA = "0x1B7B770", Offset = "0x1B7B770", VA = "0x1B7B770")]
		remove
		{
		}
	}

	[Token(Token = "0x14000019")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE99DC0", Offset = "0xE99DC0")]
	public static event Action<string, int, long> RequestLocalPlayerScoreSucceededEvent
	{
		[Token(Token = "0x6000193")]
		[Address(RVA = "0x1B7B8E4", Offset = "0x1B7B8E4", VA = "0x1B7B8E4")]
		add
		{
		}
		[Token(Token = "0x6000194")]
		[Address(RVA = "0x1B7BA58", Offset = "0x1B7BA58", VA = "0x1B7BA58")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001A")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE99DF4", Offset = "0xE99DF4")]
	public static event Action<string, string> RequestPercentileRanksFailedEvent
	{
		[Token(Token = "0x6000195")]
		[Address(RVA = "0x1B7BBCC", Offset = "0x1B7BBCC", VA = "0x1B7BBCC")]
		add
		{
		}
		[Token(Token = "0x6000196")]
		[Address(RVA = "0x1B7BD40", Offset = "0x1B7BD40", VA = "0x1B7BD40")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001B")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE99E28", Offset = "0xE99E28")]
	public static event Action<AGSLeaderboard, List<AGSLeaderboardPercentile>, int> RequestPercentileRanksSucceededEvent
	{
		[Token(Token = "0x6000197")]
		[Address(RVA = "0x1B7BEB4", Offset = "0x1B7BEB4", VA = "0x1B7BEB4")]
		add
		{
		}
		[Token(Token = "0x6000198")]
		[Address(RVA = "0x1B7C028", Offset = "0x1B7C028", VA = "0x1B7C028")]
		remove
		{
		}
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0x1B733B8", Offset = "0x1B733B8", VA = "0x1B733B8")]
	static AGSLeaderboardsClient()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0x1B736BC", Offset = "0x1B736BC", VA = "0x1B736BC")]
	public AGSLeaderboardsClient()
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0x1B74B1C", Offset = "0x1B74B1C", VA = "0x1B74B1C")]
	public static void SubmitScore(string leaderboardId, long score, int userData = 0)
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0x1B74D3C", Offset = "0x1B74D3C", VA = "0x1B74D3C")]
	public static void ShowLeaderboardsOverlay()
	{
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0x1B74E1C", Offset = "0x1B74E1C", VA = "0x1B74E1C")]
	public static void RequestLeaderboards(int userData = 0)
	{
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0x1B74F7C", Offset = "0x1B74F7C", VA = "0x1B74F7C")]
	public static void RequestLocalPlayerScore(string leaderboardId, LeaderboardScope scope, int userData = 0)
	{
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0x1B75194", Offset = "0x1B75194", VA = "0x1B75194")]
	public static void RequestScoreForPlayer(string leaderboardId, string playerId, LeaderboardScope scope, int userData = 0)
	{
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0x1B753F8", Offset = "0x1B753F8", VA = "0x1B753F8")]
	public static void RequestScores(string leaderboardId, LeaderboardScope scope, int userData = 0)
	{
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0x1B75610", Offset = "0x1B75610", VA = "0x1B75610")]
	public static void RequestPercentileRanks(string leaderboardId, LeaderboardScope scope, int userData = 0)
	{
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0x1B75828", Offset = "0x1B75828", VA = "0x1B75828")]
	public static void RequestPercentileRanksForPlayer(string leaderboardId, string playerId, LeaderboardScope scope, int userData = 0)
	{
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0x1B75A8C", Offset = "0x1B75A8C", VA = "0x1B75A8C")]
	public static void SubmitScoreFailed(string json)
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0x1B760A0", Offset = "0x1B760A0", VA = "0x1B760A0")]
	public static void SubmitScoreSucceeded(string json)
	{
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0x1B76278", Offset = "0x1B76278", VA = "0x1B76278")]
	public static void RequestLeaderboardsFailed(string json)
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0x1B76B60", Offset = "0x1B76B60", VA = "0x1B76B60")]
	public static void RequestLeaderboardsSucceeded(string json)
	{
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0x1B76D38", Offset = "0x1B76D38", VA = "0x1B76D38")]
	public static void RequestLocalPlayerScoreFailed(string json)
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0x1B77624", Offset = "0x1B77624", VA = "0x1B77624")]
	public static void RequestLocalPlayerScoreSucceeded(string json)
	{
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0x1B7783C", Offset = "0x1B7783C", VA = "0x1B7783C")]
	public static void RequestScoreForPlayerComplete(string json)
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0x1B7812C", Offset = "0x1B7812C", VA = "0x1B7812C")]
	public static void RequestScoresSucceeded(string json)
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0x1B78CD4", Offset = "0x1B78CD4", VA = "0x1B78CD4")]
	public static void RequestScoresFailed(string json)
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0x1B78DE8", Offset = "0x1B78DE8", VA = "0x1B78DE8")]
	public static void RequestPercentileRanksFailed(string json)
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x1B79B14", Offset = "0x1B79B14", VA = "0x1B79B14")]
	public static void RequestPercentileRanksSucceeded(string json)
	{
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x1B79D2C", Offset = "0x1B79D2C", VA = "0x1B79D2C")]
	public static void RequestPercentileRanksForPlayerComplete(string json)
	{
	}
}
[Token(Token = "0x2000031")]
public class AGSLeaderboard
{
	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string name;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string id;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string displayText;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string scoreFormat;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string imageUrl;

	[Token(Token = "0x6000199")]
	[Address(RVA = "0x1B72528", Offset = "0x1B72528", VA = "0x1B72528")]
	public AGSLeaderboard()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0x1B72530", Offset = "0x1B72530", VA = "0x1B72530")]
	public static AGSLeaderboard fromHashtable(Hashtable hashtable)
	{
		return null;
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0x1B727A8", Offset = "0x1B727A8", VA = "0x1B727A8")]
	public static AGSLeaderboard GetBlankLeaderboard()
	{
		return null;
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0x1B72914", Offset = "0x1B72914", VA = "0x1B72914", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000032")]
public class AGSLeaderboardPercentile
{
	[Token(Token = "0x40001FE")]
	private const string percentileKey = "percentile";

	[Token(Token = "0x40001FF")]
	private const string scoreKey = "score";

	[Token(Token = "0x4000200")]
	private const string playerKey = "player";

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public int percentile;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public long score;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AGSPlayer player;

	[Token(Token = "0x600019D")]
	[Address(RVA = "0x1B72B5C", Offset = "0x1B72B5C", VA = "0x1B72B5C")]
	public AGSLeaderboardPercentile()
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0x1B72B64", Offset = "0x1B72B64", VA = "0x1B72B64")]
	public static AGSLeaderboardPercentile fromHashTable(Hashtable percentilesHashtable)
	{
		return null;
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0x1B73298", Offset = "0x1B73298", VA = "0x1B73298", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000033")]
public class AGSScore
{
	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public AGSPlayer player;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int rank;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string scoreString;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public long scoreValue;

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0x1B80BD4", Offset = "0x1B80BD4", VA = "0x1B80BD4")]
	public AGSScore()
	{
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0x1B807F8", Offset = "0x1B807F8", VA = "0x1B807F8")]
	public static AGSScore fromHashtable(Hashtable scoreHashTable)
	{
		return null;
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0x1B80BDC", Offset = "0x1B80BDC", VA = "0x1B80BDC")]
	public static List<AGSScore> fromArrayList(ArrayList list)
	{
		return null;
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0x1B80F44", Offset = "0x1B80F44", VA = "0x1B80F44", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000034")]
public class AGSRequestLeaderboardsResponse : AGSRequestResponse
{
	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<AGSLeaderboard> leaderboards;

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0x1B7FECC", Offset = "0x1B7FECC", VA = "0x1B7FECC")]
	public AGSRequestLeaderboardsResponse()
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0x1B76450", Offset = "0x1B76450", VA = "0x1B76450")]
	public static AGSRequestLeaderboardsResponse FromJSON(string json)
	{
		return null;
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0x1B7FED4", Offset = "0x1B7FED4", VA = "0x1B7FED4")]
	public static AGSRequestLeaderboardsResponse GetBlankResponseWithError(string error, int userData = 0)
	{
		return null;
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0x1B7FFAC", Offset = "0x1B7FFAC", VA = "0x1B7FFAC")]
	public static AGSRequestLeaderboardsResponse GetPlatformNotSupportedResponse(int userData)
	{
		return null;
	}
}
[Token(Token = "0x2000035")]
public class AGSRequestPercentilesForPlayerResponse : AGSRequestPercentilesResponse
{
	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public string playerId;

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0x1B80010", Offset = "0x1B80010", VA = "0x1B80010")]
	public AGSRequestPercentilesForPlayerResponse()
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0x1B79E40", Offset = "0x1B79E40", VA = "0x1B79E40")]
	public new static AGSRequestPercentilesForPlayerResponse FromJSON(string json)
	{
		return null;
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x1B80020", Offset = "0x1B80020", VA = "0x1B80020")]
	public static AGSRequestPercentilesForPlayerResponse GetBlankResponseWithError(string error, string leaderboardId = "", string playerId = "", LeaderboardScope scope = LeaderboardScope.GlobalAllTime, int userData = 0)
	{
		return null;
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x1B80180", Offset = "0x1B80180", VA = "0x1B80180")]
	public static AGSRequestPercentilesForPlayerResponse GetPlatformNotSupportedResponse(string leaderboardId, string playerId, LeaderboardScope scope, int userData)
	{
		return null;
	}
}
[Token(Token = "0x2000036")]
public class AGSRequestPercentilesResponse : AGSRequestResponse
{
	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string leaderboardId;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public AGSLeaderboard leaderboard;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<AGSLeaderboardPercentile> percentiles;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int userIndex;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LeaderboardScope scope;

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0x1B80018", Offset = "0x1B80018", VA = "0x1B80018")]
	public AGSRequestPercentilesResponse()
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x1B78FD8", Offset = "0x1B78FD8", VA = "0x1B78FD8")]
	public static AGSRequestPercentilesResponse FromJSON(string json)
	{
		return null;
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x1B80200", Offset = "0x1B80200", VA = "0x1B80200")]
	public static AGSRequestPercentilesResponse GetBlankResponseWithError(string error, string leaderboardId = "", LeaderboardScope scope = LeaderboardScope.GlobalAllTime, int userData = 0)
	{
		return null;
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0x1B80350", Offset = "0x1B80350", VA = "0x1B80350")]
	public static AGSRequestPercentilesResponse GetPlatformNotSupportedResponse(string leaderboardId, LeaderboardScope scope, int userData)
	{
		return null;
	}
}
[Token(Token = "0x2000037")]
public class AGSRequestScoreForPlayerResponse : AGSRequestScoreResponse
{
	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string playerId;

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x1B804F0", Offset = "0x1B804F0", VA = "0x1B804F0")]
	public AGSRequestScoreForPlayerResponse()
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0x1B77950", Offset = "0x1B77950", VA = "0x1B77950")]
	public new static AGSRequestScoreForPlayerResponse FromJSON(string json)
	{
		return null;
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0x1B80500", Offset = "0x1B80500", VA = "0x1B80500")]
	public static AGSRequestScoreForPlayerResponse GetBlankResponseWithError(string error, string leaderboardId = "", string playerId = "", LeaderboardScope scope = LeaderboardScope.GlobalAllTime, int userData = 0)
	{
		return null;
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0x1B80604", Offset = "0x1B80604", VA = "0x1B80604")]
	public static AGSRequestScoreForPlayerResponse GetPlatformNotSupportedResponse(string leaderboardId, string playerId, LeaderboardScope scope, int userData)
	{
		return null;
	}
}
[Token(Token = "0x2000038")]
public class AGSRequestScoreResponse : AGSRequestResponse
{
	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string leaderboardId;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public LeaderboardScope scope;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int rank;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public long score;

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0x1B804F8", Offset = "0x1B804F8", VA = "0x1B804F8")]
	public AGSRequestScoreResponse()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0x1B76F28", Offset = "0x1B76F28", VA = "0x1B76F28")]
	public static AGSRequestScoreResponse FromJSON(string json)
	{
		return null;
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0x1B80684", Offset = "0x1B80684", VA = "0x1B80684")]
	public static AGSRequestScoreResponse GetBlankResponseWithError(string error, string leaderboardId = "", LeaderboardScope scope = LeaderboardScope.GlobalAllTime, int userData = 0)
	{
		return null;
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0x1B80774", Offset = "0x1B80774", VA = "0x1B80774")]
	public static AGSRequestScoreResponse GetPlatformNotSupportedResponse(string leaderboardId, LeaderboardScope scope, int userData)
	{
		return null;
	}
}
[Token(Token = "0x2000039")]
public class AGSRequestScoresResponse : AGSRequestResponse
{
	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string leaderboardId;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public AGSLeaderboard leaderboard;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LeaderboardScope scope;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public List<AGSScore> scores;

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0x1B807F0", Offset = "0x1B807F0", VA = "0x1B807F0")]
	public AGSRequestScoresResponse()
	{
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0x1B78240", Offset = "0x1B78240", VA = "0x1B78240")]
	public static AGSRequestScoresResponse FromJSON(string json)
	{
		return null;
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0x1B80A58", Offset = "0x1B80A58", VA = "0x1B80A58")]
	public static AGSRequestScoresResponse GetBlankResponseWithError(string error, string leaderboardId = "", LeaderboardScope scope = LeaderboardScope.GlobalAllTime, int userData = 0)
	{
		return null;
	}

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0x1B80B58", Offset = "0x1B80B58", VA = "0x1B80B58")]
	public static AGSRequestScoresResponse GetPlatformNotSupportedResponse(string leaderboardId, LeaderboardScope scope, int userData)
	{
		return null;
	}
}
[Token(Token = "0x200003A")]
public class AGSSubmitScoreResponse : AGSRequestResponse
{
	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string leaderboardId;

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0x1B828A0", Offset = "0x1B828A0", VA = "0x1B828A0")]
	public AGSSubmitScoreResponse()
	{
	}

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0x1B75C7C", Offset = "0x1B75C7C", VA = "0x1B75C7C")]
	public static AGSSubmitScoreResponse FromJSON(string json)
	{
		return null;
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0x1B828A8", Offset = "0x1B828A8", VA = "0x1B828A8")]
	public static AGSSubmitScoreResponse GetBlankResponseWithError(string error, string leaderboardId = "", int userData = 0)
	{
		return null;
	}

	[Token(Token = "0x60001BF")]
	[Address(RVA = "0x1B82954", Offset = "0x1B82954", VA = "0x1B82954")]
	public static AGSSubmitScoreResponse GetPlatformNotSupportedResponse(string leaderboardId, int userData)
	{
		return null;
	}
}
[Token(Token = "0x200003B")]
public class AGSPlayerClient : MonoBehaviour
{
	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AmazonJavaWrapper JavaObject;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly string PROXY_CLASS_NAME;

	[Token(Token = "0x1400001C")]
	public static event Action<AGSRequestPlayerResponse> RequestLocalPlayerCompleted
	{
		[Token(Token = "0x60001C2")]
		[Address(RVA = "0x1B7C708", Offset = "0x1B7C708", VA = "0x1B7C708")]
		add
		{
		}
		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x1B7C87C", Offset = "0x1B7C87C", VA = "0x1B7C87C")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001D")]
	public static event Action<AGSRequestFriendIdsResponse> RequestFriendIdsCompleted
	{
		[Token(Token = "0x60001C4")]
		[Address(RVA = "0x1B7C9F0", Offset = "0x1B7C9F0", VA = "0x1B7C9F0")]
		add
		{
		}
		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x1B7CB64", Offset = "0x1B7CB64", VA = "0x1B7CB64")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001E")]
	public static event Action<AGSRequestBatchFriendsResponse> RequestBatchFriendsCompleted
	{
		[Token(Token = "0x60001C6")]
		[Address(RVA = "0x1B7CCD8", Offset = "0x1B7CCD8", VA = "0x1B7CCD8")]
		add
		{
		}
		[Token(Token = "0x60001C7")]
		[Address(RVA = "0x1B7CE4C", Offset = "0x1B7CE4C", VA = "0x1B7CE4C")]
		remove
		{
		}
	}

	[Token(Token = "0x1400001F")]
	public static event Action<bool> OnSignedInStateChangedEvent
	{
		[Token(Token = "0x60001C8")]
		[Address(RVA = "0x1B7CFC0", Offset = "0x1B7CFC0", VA = "0x1B7CFC0")]
		add
		{
		}
		[Token(Token = "0x60001C9")]
		[Address(RVA = "0x1B7D134", Offset = "0x1B7D134", VA = "0x1B7D134")]
		remove
		{
		}
	}

	[Token(Token = "0x14000020")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE99F94", Offset = "0xE99F94")]
	public static event Action<AGSPlayer> PlayerReceivedEvent
	{
		[Token(Token = "0x60001D3")]
		[Address(RVA = "0x1B7F1C0", Offset = "0x1B7F1C0", VA = "0x1B7F1C0")]
		add
		{
		}
		[Token(Token = "0x60001D4")]
		[Address(RVA = "0x1B7F334", Offset = "0x1B7F334", VA = "0x1B7F334")]
		remove
		{
		}
	}

	[Token(Token = "0x14000021")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE99FC8", Offset = "0xE99FC8")]
	public static event Action<string> PlayerFailedEvent
	{
		[Token(Token = "0x60001D5")]
		[Address(RVA = "0x1B7F4A8", Offset = "0x1B7F4A8", VA = "0x1B7F4A8")]
		add
		{
		}
		[Token(Token = "0x60001D6")]
		[Address(RVA = "0x1B7F61C", Offset = "0x1B7F61C", VA = "0x1B7F61C")]
		remove
		{
		}
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0x1B7C3FC", Offset = "0x1B7C3FC", VA = "0x1B7C3FC")]
	static AGSPlayerClient()
	{
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0x1B7C700", Offset = "0x1B7C700", VA = "0x1B7C700")]
	public AGSPlayerClient()
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0x1B7D2A8", Offset = "0x1B7D2A8", VA = "0x1B7D2A8")]
	public static void RequestLocalPlayer(int userData = 0)
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0x1B7D408", Offset = "0x1B7D408", VA = "0x1B7D408")]
	public static void RequestFriendIds(int userData = 0)
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0x1B7D568", Offset = "0x1B7D568", VA = "0x1B7D568")]
	public static void RequestBatchFriends(List<string> friendIds, int userData = 0)
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0x1B7D848", Offset = "0x1B7D848", VA = "0x1B7D848")]
	public static void LocalPlayerFriendsComplete(string json)
	{
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0x1B7E044", Offset = "0x1B7E044", VA = "0x1B7E044")]
	public static void BatchFriendsRequestComplete(string json)
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0x1B7E86C", Offset = "0x1B7E86C", VA = "0x1B7E86C")]
	public static void PlayerReceived(string json)
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0x1B7EE04", Offset = "0x1B7EE04", VA = "0x1B7EE04")]
	public static void PlayerFailed(string json)
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0x1B7EFDC", Offset = "0x1B7EFDC", VA = "0x1B7EFDC")]
	public static bool IsSignedIn()
	{
		return default(bool);
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0x1B7F0C8", Offset = "0x1B7F0C8", VA = "0x1B7F0C8")]
	public static void OnSignedInStateChanged(bool isSignedIn)
	{
	}
}
[Token(Token = "0x200003C")]
public class AGSPlayer
{
	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public readonly string alias;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public readonly string playerId;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly string avatarUrl;

	[Token(Token = "0x4000224")]
	private const string aliasKey = "alias";

	[Token(Token = "0x4000225")]
	private const string playerIdKey = "playerId";

	[Token(Token = "0x4000226")]
	private const string avatarUrlKey = "avatarUrl";

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0x1B7C19C", Offset = "0x1B7C19C", VA = "0x1B7C19C")]
	private AGSPlayer(string alias, string playerId, string avatarUrl)
	{
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0x1B72E84", Offset = "0x1B72E84", VA = "0x1B72E84")]
	public static AGSPlayer fromHashtable(Hashtable playerDataAsHashtable)
	{
		return null;
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0x1B7C1CC", Offset = "0x1B7C1CC", VA = "0x1B7C1CC")]
	public static AGSPlayer GetBlankPlayer()
	{
		return null;
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0x1B7C288", Offset = "0x1B7C288", VA = "0x1B7C288")]
	public static AGSPlayer BlankPlayerWithID(string playerId)
	{
		return null;
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0x1B7C348", Offset = "0x1B7C348", VA = "0x1B7C348", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x200003D")]
public class AGSRequestBatchFriendsResponse : AGSRequestResponse
{
	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<AGSPlayer> friends;

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0x1B7FB10", Offset = "0x1B7FB10", VA = "0x1B7FB10")]
	public AGSRequestBatchFriendsResponse()
	{
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0x1B7E158", Offset = "0x1B7E158", VA = "0x1B7E158")]
	public static AGSRequestBatchFriendsResponse FromJSON(string json)
	{
		return null;
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0x1B7FB18", Offset = "0x1B7FB18", VA = "0x1B7FB18")]
	public static AGSRequestBatchFriendsResponse GetBlankResponseWithError(string error, [Optional] List<string> friendIdsRequested, int userData = 0)
	{
		return null;
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0x1B7FD14", Offset = "0x1B7FD14", VA = "0x1B7FD14")]
	public static AGSRequestBatchFriendsResponse GetPlatformNotSupportedResponse(List<string> friendIdsRequested, int userData)
	{
		return null;
	}
}
[Token(Token = "0x200003E")]
public class AGSRequestFriendIdsResponse : AGSRequestResponse
{
	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<string> friendIds;

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0x1B7FD88", Offset = "0x1B7FD88", VA = "0x1B7FD88")]
	public AGSRequestFriendIdsResponse()
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0x1B7D95C", Offset = "0x1B7D95C", VA = "0x1B7D95C")]
	public static AGSRequestFriendIdsResponse FromJSON(string json)
	{
		return null;
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0x1B7FD90", Offset = "0x1B7FD90", VA = "0x1B7FD90")]
	public static AGSRequestFriendIdsResponse GetBlankResponseWithError(string error, int userData = 0)
	{
		return null;
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0x1B7FE68", Offset = "0x1B7FE68", VA = "0x1B7FE68")]
	public static AGSRequestFriendIdsResponse GetPlatformNotSupportedResponse(int userData)
	{
		return null;
	}
}
[Token(Token = "0x200003F")]
public class AGSRequestPlayerResponse : AGSRequestResponse
{
	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public AGSPlayer player;

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0x1B803CC", Offset = "0x1B803CC", VA = "0x1B803CC")]
	public AGSRequestPlayerResponse()
	{
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0x1B7EA44", Offset = "0x1B7EA44", VA = "0x1B7EA44")]
	public static AGSRequestPlayerResponse FromJSON(string json)
	{
		return null;
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0x1B803D4", Offset = "0x1B803D4", VA = "0x1B803D4")]
	public static AGSRequestPlayerResponse GetBlankResponseWithError(string error, int userData = 0)
	{
		return null;
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0x1B8048C", Offset = "0x1B8048C", VA = "0x1B8048C")]
	public static AGSRequestPlayerResponse GetPlatformNotSupportedResponse(int userData)
	{
		return null;
	}
}
[Token(Token = "0x2000040")]
public class AGSSocialAchievement : IAchievement, IAchievementDescription
{
	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public readonly AGSAchievement achievement;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE99FFC", Offset = "0xE99FFC")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE99FFC", Offset = "0xE99FFC")]
	private string <id>k__BackingField;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A030", Offset = "0xE9A030")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9A030", Offset = "0xE9A030")]
	private double <percentCompleted>k__BackingField;

	[Token(Token = "0x17000007")]
	public string id
	{
		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x1B812C4", Offset = "0x1B812C4", VA = "0x1B812C4", Slot = "6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A064", Offset = "0xE9A064")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x1B81290", Offset = "0x1B81290", VA = "0x1B81290", Slot = "9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A074", Offset = "0xE9A074")]
		set
		{
		}
	}

	[Token(Token = "0x17000008")]
	public double percentCompleted
	{
		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x1B812CC", Offset = "0x1B812CC", VA = "0x1B812CC", Slot = "5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A084", Offset = "0xE9A084")]
		get
		{
			return default(double);
		}
		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x1B81298", Offset = "0x1B81298", VA = "0x1B81298", Slot = "10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A094", Offset = "0xE9A094")]
		set
		{
		}
	}

	[Token(Token = "0x17000009")]
	public bool completed
	{
		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x1B812D8", Offset = "0x1B812D8", VA = "0x1B812D8", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700000A")]
	public bool hidden
	{
		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x1B812F8", Offset = "0x1B812F8", VA = "0x1B812F8", Slot = "12")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700000B")]
	public DateTime lastReportedDate
	{
		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x1B81318", Offset = "0x1B81318", VA = "0x1B81318", Slot = "13")]
		get
		{
			return default(DateTime);
		}
	}

	[Token(Token = "0x1700000C")]
	public string title
	{
		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x1B8140C", Offset = "0x1B8140C", VA = "0x1B8140C", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000D")]
	public Texture2D image
	{
		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x1B8142C", Offset = "0x1B8142C", VA = "0x1B8142C", Slot = "15")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000E")]
	public string achievedDescription
	{
		[Token(Token = "0x60001F4")]
		[Address(RVA = "0x1B814B8", Offset = "0x1B814B8", VA = "0x1B814B8", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000F")]
	public string unachievedDescription
	{
		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x1B814D8", Offset = "0x1B814D8", VA = "0x1B814D8", Slot = "16")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000010")]
	public int points
	{
		[Token(Token = "0x60001F6")]
		[Address(RVA = "0x1B814F8", Offset = "0x1B814F8", VA = "0x1B814F8", Slot = "17")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0x1B811AC", Offset = "0x1B811AC", VA = "0x1B811AC")]
	public AGSSocialAchievement(AGSAchievement achievement)
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0x1B812A4", Offset = "0x1B812A4", VA = "0x1B812A4")]
	public AGSSocialAchievement()
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0x1B81344", Offset = "0x1B81344", VA = "0x1B81344", Slot = "14")]
	public void ReportProgress(Action<bool> callback)
	{
	}
}
[Token(Token = "0x2000041")]
public class AGSSocialLeaderboard : ILeaderboard
{
	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private readonly AGSLeaderboard leaderboard;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public long localPlayerScore;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int localPlayerRank;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private TimeScope _timeScope;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A0A4", Offset = "0xE9A0A4")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9A0A4", Offset = "0xE9A0A4")]
	private string <id>k__BackingField;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A0D8", Offset = "0xE9A0D8")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9A0D8", Offset = "0xE9A0D8")]
	private UserScope <userScope>k__BackingField;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A10C", Offset = "0xE9A10C")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9A10C", Offset = "0xE9A10C")]
	private Range <range>k__BackingField;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A140", Offset = "0xE9A140")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9A140", Offset = "0xE9A140")]
	private IScore[] <scores>k__BackingField;

	[Token(Token = "0x17000011")]
	public bool loading
	{
		[Token(Token = "0x60001FA")]
		[Address(RVA = "0x1B816B4", Offset = "0x1B816B4", VA = "0x1B816B4", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000012")]
	public string id
	{
		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x1B816F0", Offset = "0x1B816F0", VA = "0x1B816F0", Slot = "6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A174", Offset = "0xE9A174")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x1B81620", Offset = "0x1B81620", VA = "0x1B81620", Slot = "7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A184", Offset = "0xE9A184")]
		set
		{
		}
	}

	[Token(Token = "0x17000013")]
	public UserScope userScope
	{
		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x1B816F8", Offset = "0x1B816F8", VA = "0x1B816F8", Slot = "8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A194", Offset = "0xE9A194")]
		get
		{
			return default(UserScope);
		}
		[Token(Token = "0x60001FE")]
		[Address(RVA = "0x1B81700", Offset = "0x1B81700", VA = "0x1B81700", Slot = "9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A1A4", Offset = "0xE9A1A4")]
		set
		{
		}
	}

	[Token(Token = "0x17000014")]
	public Range range
	{
		[Token(Token = "0x60001FF")]
		[Address(RVA = "0x1B81708", Offset = "0x1B81708", VA = "0x1B81708", Slot = "10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A1B4", Offset = "0xE9A1B4")]
		get
		{
			return default(Range);
		}
		[Token(Token = "0x6000200")]
		[Address(RVA = "0x1B8171C", Offset = "0x1B8171C", VA = "0x1B8171C", Slot = "11")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A1C4", Offset = "0xE9A1C4")]
		set
		{
		}
	}

	[Token(Token = "0x17000015")]
	public TimeScope timeScope
	{
		[Token(Token = "0x6000201")]
		[Address(RVA = "0x1B81728", Offset = "0x1B81728", VA = "0x1B81728", Slot = "12")]
		get
		{
			return default(TimeScope);
		}
		[Token(Token = "0x6000202")]
		[Address(RVA = "0x1B81730", Offset = "0x1B81730", VA = "0x1B81730", Slot = "13")]
		set
		{
		}
	}

	[Token(Token = "0x17000016")]
	public IScore localUserScore
	{
		[Token(Token = "0x6000203")]
		[Address(RVA = "0x1B81904", Offset = "0x1B81904", VA = "0x1B81904", Slot = "14")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000017")]
	public uint maxRange
	{
		[Token(Token = "0x6000204")]
		[Address(RVA = "0x1B81B70", Offset = "0x1B81B70", VA = "0x1B81B70", Slot = "15")]
		get
		{
			return default(uint);
		}
	}

	[Token(Token = "0x17000018")]
	public IScore[] scores
	{
		[Token(Token = "0x6000205")]
		[Address(RVA = "0x1B816AC", Offset = "0x1B816AC", VA = "0x1B816AC", Slot = "16")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A1D4", Offset = "0xE9A1D4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000206")]
		[Address(RVA = "0x1B81628", Offset = "0x1B81628", VA = "0x1B81628")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A1E4", Offset = "0xE9A1E4")]
		set
		{
		}
	}

	[Token(Token = "0x17000019")]
	public string title
	{
		[Token(Token = "0x6000207")]
		[Address(RVA = "0x1B81BFC", Offset = "0x1B81BFC", VA = "0x1B81BFC", Slot = "17")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0x1B81518", Offset = "0x1B81518", VA = "0x1B81518")]
	public AGSSocialLeaderboard(AGSLeaderboard leaderboard)
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0x1B81630", Offset = "0x1B81630", VA = "0x1B81630")]
	public AGSSocialLeaderboard()
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0x1B81668", Offset = "0x1B81668", VA = "0x1B81668")]
	public bool ScoresAvailable()
	{
		return default(bool);
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0x1B81C10", Offset = "0x1B81C10", VA = "0x1B81C10", Slot = "18")]
	public void SetUserFilter(string[] userIDs)
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0x1B81820", Offset = "0x1B81820", VA = "0x1B81820", Slot = "4")]
	public void LoadScores(Action<bool> callback)
	{
	}
}
[Token(Token = "0x2000042")]
public class AGSSocialLeaderboardScore : IScore
{
	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private readonly AGSScore score;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A1F4", Offset = "0xE9A1F4")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9A1F4", Offset = "0xE9A1F4")]
	private string <leaderboardID>k__BackingField;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A228", Offset = "0xE9A228")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9A228", Offset = "0xE9A228")]
	private long <value>k__BackingField;

	[Token(Token = "0x1700001A")]
	public string leaderboardID
	{
		[Token(Token = "0x600020C")]
		[Address(RVA = "0x1B81CD4", Offset = "0x1B81CD4", VA = "0x1B81CD4", Slot = "4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A25C", Offset = "0xE9A25C")]
		get
		{
			return null;
		}
		[Token(Token = "0x600020D")]
		[Address(RVA = "0x1B81C98", Offset = "0x1B81C98", VA = "0x1B81C98", Slot = "8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A26C", Offset = "0xE9A26C")]
		set
		{
		}
	}

	[Token(Token = "0x1700001B")]
	public long value
	{
		[Token(Token = "0x600020E")]
		[Address(RVA = "0x1B81CDC", Offset = "0x1B81CDC", VA = "0x1B81CDC", Slot = "9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A27C", Offset = "0xE9A27C")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x600020F")]
		[Address(RVA = "0x1B81CA0", Offset = "0x1B81CA0", VA = "0x1B81CA0", Slot = "10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A28C", Offset = "0xE9A28C")]
		set
		{
		}
	}

	[Token(Token = "0x1700001C")]
	public DateTime date
	{
		[Token(Token = "0x6000210")]
		[Address(RVA = "0x1B81CE4", Offset = "0x1B81CE4", VA = "0x1B81CE4", Slot = "11")]
		get
		{
			return default(DateTime);
		}
	}

	[Token(Token = "0x1700001D")]
	public string formattedValue
	{
		[Token(Token = "0x6000211")]
		[Address(RVA = "0x1B81DBC", Offset = "0x1B81DBC", VA = "0x1B81DBC", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001E")]
	public string userID
	{
		[Token(Token = "0x6000212")]
		[Address(RVA = "0x1B81DD0", Offset = "0x1B81DD0", VA = "0x1B81DD0", Slot = "6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001F")]
	public int rank
	{
		[Token(Token = "0x6000213")]
		[Address(RVA = "0x1B81E04", Offset = "0x1B81E04", VA = "0x1B81E04", Slot = "7")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0x1B81A68", Offset = "0x1B81A68", VA = "0x1B81A68")]
	public AGSSocialLeaderboardScore(AGSScore score, AGSLeaderboard leaderboard)
	{
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0x1B81CB0", Offset = "0x1B81CB0", VA = "0x1B81CB0")]
	public AGSSocialLeaderboardScore()
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0x1B81E18", Offset = "0x1B81E18", VA = "0x1B81E18", Slot = "12")]
	public void ReportScore(Action<bool> callback)
	{
	}
}
[Token(Token = "0x2000043")]
public class AGSSocialLocalUser : AGSSocialUser, ILocalUser, IUserProfile
{
	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AGSPlayer player;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static List<AGSSocialUser> friendList;

	[Token(Token = "0x17000020")]
	public IUserProfile[] friends
	{
		[Token(Token = "0x6000219")]
		[Address(RVA = "0x1B822A4", Offset = "0x1B822A4", VA = "0x1B822A4", Slot = "13")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000021")]
	public bool authenticated
	{
		[Token(Token = "0x600021A")]
		[Address(RVA = "0x1B82354", Offset = "0x1B82354", VA = "0x1B82354", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000022")]
	public bool underage
	{
		[Token(Token = "0x600021B")]
		[Address(RVA = "0x1B823CC", Offset = "0x1B823CC", VA = "0x1B823CC", Slot = "14")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0x1B81F38", Offset = "0x1B81F38", VA = "0x1B81F38")]
	public AGSSocialLocalUser()
	{
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0x1B81F78", Offset = "0x1B81F78", VA = "0x1B81F78", Slot = "9")]
	public void Authenticate(Action<bool> callback)
	{
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0x1B820BC", Offset = "0x1B820BC", VA = "0x1B820BC", Slot = "10")]
	public void LoadFriends(Action<bool> callback)
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0x1B82160", Offset = "0x1B82160", VA = "0x1B82160", Slot = "12")]
	public void Authenticate(Action<bool, string> callback)
	{
	}
}
[Token(Token = "0x2000044")]
public class AGSSocialUser : IUserProfile
{
	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private AGSPlayer player;

	[Token(Token = "0x17000023")]
	public string userName
	{
		[Token(Token = "0x600021F")]
		[Address(RVA = "0x1B82534", Offset = "0x1B82534", VA = "0x1B82534", Slot = "5")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000024")]
	public string id
	{
		[Token(Token = "0x6000220")]
		[Address(RVA = "0x1B82554", Offset = "0x1B82554", VA = "0x1B82554", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000025")]
	public bool isFriend
	{
		[Token(Token = "0x6000221")]
		[Address(RVA = "0x1B82574", Offset = "0x1B82574", VA = "0x1B82574", Slot = "6")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000026")]
	public UserState state
	{
		[Token(Token = "0x6000222")]
		[Address(RVA = "0x1B82788", Offset = "0x1B82788", VA = "0x1B82788", Slot = "7")]
		get
		{
			return default(UserState);
		}
	}

	[Token(Token = "0x17000027")]
	public Texture2D image
	{
		[Token(Token = "0x6000223")]
		[Address(RVA = "0x1B82814", Offset = "0x1B82814", VA = "0x1B82814", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x1B81F58", Offset = "0x1B81F58", VA = "0x1B81F58")]
	public AGSSocialUser()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x1B824F8", Offset = "0x1B824F8", VA = "0x1B824F8")]
	public AGSSocialUser(AGSPlayer player)
	{
	}
}
[Token(Token = "0x2000045")]
public class GameCircleSocial : ISocialPlatform
{
	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private AGSSocialLocalUser gameCircleLocalUser;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private int requestID;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Action<bool> authenticationCallback;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Action<bool, string> authenticationCallback2;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<int, Action<bool>> simpleCallbacks;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Dictionary<int, Action<bool, string>> simpleCallbacks2;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<int, Action<IAchievementDescription[]>> loadAchievementDescriptionsCallbacks;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Dictionary<int, Action<IAchievement[]>> loadAchievementsCallbacks;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<int, AGSSocialLeaderboard> leaderboardForRequest;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Dictionary<int, Action<IScore[]>> loadScoresCallbacks;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GameCircleSocial socialInstance;

	[Token(Token = "0x17000028")]
	public static GameCircleSocial Instance
	{
		[Token(Token = "0x6000225")]
		[Address(RVA = "0x19B6254", Offset = "0x19B6254", VA = "0x19B6254")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000029")]
	public ILocalUser localUser
	{
		[Token(Token = "0x6000226")]
		[Address(RVA = "0x19B62E0", Offset = "0x19B62E0", VA = "0x19B62E0", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0x19B5CBC", Offset = "0x19B5CBC", VA = "0x19B5CBC")]
	private GameCircleSocial()
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0x19B62E8", Offset = "0x19B62E8", VA = "0x19B62E8", Slot = "16")]
	public void LoadUsers(string[] userIDs, Action<IUserProfile[]> callback)
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x19B6378", Offset = "0x19B6378", VA = "0x19B6378", Slot = "17")]
	public void ReportProgress(string achievementID, double progress, Action<bool> callback)
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0x19B647C", Offset = "0x19B647C", VA = "0x19B647C", Slot = "5")]
	public void LoadAchievementDescriptions(Action<IAchievementDescription[]> callback)
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0x19B659C", Offset = "0x19B659C", VA = "0x19B659C", Slot = "6")]
	public void LoadAchievements(Action<IAchievement[]> callback)
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0x19B66BC", Offset = "0x19B66BC", VA = "0x19B66BC", Slot = "18")]
	public IAchievement CreateAchievement()
	{
		return null;
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0x19B6728", Offset = "0x19B6728", VA = "0x19B6728", Slot = "7")]
	public void ReportScore(long score, string board, Action<bool> callback)
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x19B6818", Offset = "0x19B6818", VA = "0x19B6818", Slot = "8")]
	public void LoadScores(string leaderboardID, Action<IScore[]> callback)
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0x19B68E4", Offset = "0x19B68E4", VA = "0x19B68E4", Slot = "19")]
	public ILeaderboard CreateLeaderboard()
	{
		return null;
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0x19B6950", Offset = "0x19B6950", VA = "0x19B6950", Slot = "9")]
	public void ShowAchievementsUI()
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0x19B69D0", Offset = "0x19B69D0", VA = "0x19B69D0", Slot = "10")]
	public void ShowLeaderboardUI()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0x19B6A50", Offset = "0x19B6A50", VA = "0x19B6A50", Slot = "11")]
	public void Authenticate(ILocalUser user, Action<bool> callback)
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0x19B6AF4", Offset = "0x19B6AF4", VA = "0x19B6AF4", Slot = "12")]
	public void Authenticate(ILocalUser user, Action<bool, string> callback)
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0x19B6B98", Offset = "0x19B6B98", VA = "0x19B6B98", Slot = "13")]
	public void LoadFriends(ILocalUser user, Action<bool> callback)
	{
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0x19B6CB8", Offset = "0x19B6CB8", VA = "0x19B6CB8", Slot = "14")]
	public void LoadScores(ILeaderboard board, Action<bool> callback)
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0x19B6DD8", Offset = "0x19B6DD8", VA = "0x19B6DD8", Slot = "15")]
	public bool GetLoading(ILeaderboard board)
	{
		return default(bool);
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0x19B6EFC", Offset = "0x19B6EFC", VA = "0x19B6EFC")]
	public void RequestScores(AGSSocialLeaderboard leaderboard, Action<bool> callback)
	{
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0x19B7090", Offset = "0x19B7090", VA = "0x19B7090")]
	public void RequestLocalUserScore(AGSSocialLeaderboard leaderboard)
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0x19B71CC", Offset = "0x19B71CC", VA = "0x19B71CC")]
	public void RequestLocalPlayer(Action<bool> callback)
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0x19B7298", Offset = "0x19B7298", VA = "0x19B7298")]
	public void RequestLocalPlayer(Action<bool, string> callback)
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0x19B7364", Offset = "0x19B7364", VA = "0x19B7364")]
	public void RequestFriends(Action<bool> callback)
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0x19B7430", Offset = "0x19B7430", VA = "0x19B7430")]
	private void OnServiceReady()
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0x19B750C", Offset = "0x19B750C", VA = "0x19B750C")]
	private void OnServiceNotReady(string error)
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0x19B75E8", Offset = "0x19B75E8", VA = "0x19B75E8")]
	private void OnUpdateAchievementCompleted(AGSUpdateAchievementResponse response)
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0x19B7810", Offset = "0x19B7810", VA = "0x19B7810")]
	private void OnRequestAchievementsCompleted(AGSRequestAchievementsResponse response)
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0x19B7D54", Offset = "0x19B7D54", VA = "0x19B7D54")]
	private void OnSubmitScoreCompleted(AGSSubmitScoreResponse response)
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0x19B7F7C", Offset = "0x19B7F7C", VA = "0x19B7F7C")]
	private void OnRequestScoresCompleted(AGSRequestScoresResponse response)
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0x19B8638", Offset = "0x19B8638", VA = "0x19B8638")]
	private void OnRequestLocalPlayerScoreCompleted(AGSRequestScoreResponse response)
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0x19B875C", Offset = "0x19B875C", VA = "0x19B875C")]
	private void OnRequestPlayerCompleted(AGSRequestPlayerResponse response)
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0x19B89CC", Offset = "0x19B89CC", VA = "0x19B89CC")]
	private void OnRequestFriendIdsCompleted(AGSRequestFriendIdsResponse response)
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0x19B8C68", Offset = "0x19B8C68", VA = "0x19B8C68")]
	private void OnRequestBatchFriendsCompleted(AGSRequestBatchFriendsResponse response)
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0x19B7070", Offset = "0x19B7070", VA = "0x19B7070")]
	private LeaderboardScope fromTimeScope(TimeScope scope)
	{
		return default(LeaderboardScope);
	}
}
[Token(Token = "0x2000046")]
public class AGSWhispersyncClient : MonoBehaviour
{
	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AmazonJavaWrapper javaObject;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static readonly string PROXY_CLASS_NAME;

	[Token(Token = "0x400024F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public static string failReason;

	[Token(Token = "0x14000022")]
	public static event Action OnNewCloudDataEvent
	{
		[Token(Token = "0x6000249")]
		[Address(RVA = "0x1B876F0", Offset = "0x1B876F0", VA = "0x1B876F0")]
		add
		{
		}
		[Token(Token = "0x600024A")]
		[Address(RVA = "0x1B87864", Offset = "0x1B87864", VA = "0x1B87864")]
		remove
		{
		}
	}

	[Token(Token = "0x14000023")]
	public static event Action OnDataUploadedToCloudEvent
	{
		[Token(Token = "0x600024B")]
		[Address(RVA = "0x1B879D8", Offset = "0x1B879D8", VA = "0x1B879D8")]
		add
		{
		}
		[Token(Token = "0x600024C")]
		[Address(RVA = "0x1B87B4C", Offset = "0x1B87B4C", VA = "0x1B87B4C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000024")]
	public static event Action OnThrottledEvent
	{
		[Token(Token = "0x600024D")]
		[Address(RVA = "0x1B87CC0", Offset = "0x1B87CC0", VA = "0x1B87CC0")]
		add
		{
		}
		[Token(Token = "0x600024E")]
		[Address(RVA = "0x1B87E34", Offset = "0x1B87E34", VA = "0x1B87E34")]
		remove
		{
		}
	}

	[Token(Token = "0x14000025")]
	public static event Action OnDiskWriteCompleteEvent
	{
		[Token(Token = "0x600024F")]
		[Address(RVA = "0x1B87FA8", Offset = "0x1B87FA8", VA = "0x1B87FA8")]
		add
		{
		}
		[Token(Token = "0x6000250")]
		[Address(RVA = "0x1B8811C", Offset = "0x1B8811C", VA = "0x1B8811C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000026")]
	public static event Action OnFirstSynchronizeEvent
	{
		[Token(Token = "0x6000251")]
		[Address(RVA = "0x1B88290", Offset = "0x1B88290", VA = "0x1B88290")]
		add
		{
		}
		[Token(Token = "0x6000252")]
		[Address(RVA = "0x1B88404", Offset = "0x1B88404", VA = "0x1B88404")]
		remove
		{
		}
	}

	[Token(Token = "0x14000027")]
	public static event Action OnAlreadySynchronizedEvent
	{
		[Token(Token = "0x6000253")]
		[Address(RVA = "0x1B88578", Offset = "0x1B88578", VA = "0x1B88578")]
		add
		{
		}
		[Token(Token = "0x6000254")]
		[Address(RVA = "0x1B886EC", Offset = "0x1B886EC", VA = "0x1B886EC")]
		remove
		{
		}
	}

	[Token(Token = "0x14000028")]
	public static event Action OnSyncFailedEvent
	{
		[Token(Token = "0x6000255")]
		[Address(RVA = "0x1B88860", Offset = "0x1B88860", VA = "0x1B88860")]
		add
		{
		}
		[Token(Token = "0x6000256")]
		[Address(RVA = "0x1B889D4", Offset = "0x1B889D4", VA = "0x1B889D4")]
		remove
		{
		}
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0x1B873E4", Offset = "0x1B873E4", VA = "0x1B873E4")]
	static AGSWhispersyncClient()
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0x1B876E8", Offset = "0x1B876E8", VA = "0x1B876E8")]
	public AGSWhispersyncClient()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0x1B88B48", Offset = "0x1B88B48", VA = "0x1B88B48")]
	public static AGSGameDataMap GetGameData()
	{
		return null;
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0x1B88C90", Offset = "0x1B88C90", VA = "0x1B88C90")]
	public static void Synchronize()
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0x1B88D70", Offset = "0x1B88D70", VA = "0x1B88D70")]
	public static void Flush()
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0x1B88E50", Offset = "0x1B88E50", VA = "0x1B88E50")]
	public static void OnNewCloudData()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0x1B88F34", Offset = "0x1B88F34", VA = "0x1B88F34")]
	public static void OnDataUploadedToCloud()
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0x1B89018", Offset = "0x1B89018", VA = "0x1B89018")]
	public static void OnThrottled()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0x1B890FC", Offset = "0x1B890FC", VA = "0x1B890FC")]
	public static void OnDiskWriteComplete()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0x1B891E0", Offset = "0x1B891E0", VA = "0x1B891E0")]
	public static void OnFirstSynchronize()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0x1B892C4", Offset = "0x1B892C4", VA = "0x1B892C4")]
	public static void OnAlreadySynchronized()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0x1B893A8", Offset = "0x1B893A8", VA = "0x1B893A8")]
	public static void OnSyncFailed(string failReason)
	{
	}
}
[Token(Token = "0x2000047")]
public class AGSGameDataMap : AGSSyncable
{
	[Token(Token = "0x6000261")]
	[Address(RVA = "0x1B71B5C", Offset = "0x1B71B5C", VA = "0x1B71B5C")]
	public AGSGameDataMap(AmazonJavaWrapper javaObject)
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0x1B71B9C", Offset = "0x1B71B9C", VA = "0x1B71B9C")]
	public AGSGameDataMap(AndroidJavaObject javaObject)
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0x1B71C24", Offset = "0x1B71C24", VA = "0x1B71C24")]
	public AGSSyncableDeveloperString getDeveloperString(string name)
	{
		return null;
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0x1B71C94", Offset = "0x1B71C94", VA = "0x1B71C94")]
	public HashSet<string> getDeveloperStringKeys()
	{
		return null;
	}

	[Token(Token = "0x6000265")]
	[Address(RVA = "0x1B71FB8", Offset = "0x1B71FB8", VA = "0x1B71FB8")]
	public AGSSyncableNumber GetHighestNumber(string name)
	{
		return null;
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0x1B72028", Offset = "0x1B72028", VA = "0x1B72028")]
	public HashSet<string> GetHighestNumberKeys()
	{
		return null;
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0x1B72030", Offset = "0x1B72030", VA = "0x1B72030")]
	public AGSSyncableNumber GetLowestNumber(string name)
	{
		return null;
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0x1B720A0", Offset = "0x1B720A0", VA = "0x1B720A0")]
	public HashSet<string> GetLowestNumberKeys()
	{
		return null;
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0x1B720A8", Offset = "0x1B720A8", VA = "0x1B720A8")]
	public AGSSyncableNumber GetLatestNumber(string name)
	{
		return null;
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0x1B72118", Offset = "0x1B72118", VA = "0x1B72118")]
	public HashSet<string> GetLatestNumberKeys()
	{
		return null;
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0x1B72120", Offset = "0x1B72120", VA = "0x1B72120")]
	public AGSSyncableNumberList GetHighNumberList(string name)
	{
		return null;
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0x1B72190", Offset = "0x1B72190", VA = "0x1B72190")]
	public HashSet<string> GetHighNumberListKeys()
	{
		return null;
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0x1B72198", Offset = "0x1B72198", VA = "0x1B72198")]
	public AGSSyncableNumberList GetLowNumberList(string name)
	{
		return null;
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0x1B72208", Offset = "0x1B72208", VA = "0x1B72208")]
	public HashSet<string> GetLowNumberListKeys()
	{
		return null;
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0x1B72210", Offset = "0x1B72210", VA = "0x1B72210")]
	public AGSSyncableNumberList GetLatestNumberList(string name)
	{
		return null;
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0x1B72280", Offset = "0x1B72280", VA = "0x1B72280")]
	public HashSet<string> GetLatestNumberListKeys()
	{
		return null;
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0x1B72288", Offset = "0x1B72288", VA = "0x1B72288")]
	public AGSSyncableAccumulatingNumber GetAccumulatingNumber(string name)
	{
		return null;
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0x1B722F8", Offset = "0x1B722F8", VA = "0x1B722F8")]
	public HashSet<string> GetAccumulatingNumberKeys()
	{
		return null;
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0x1B72300", Offset = "0x1B72300", VA = "0x1B72300")]
	public AGSSyncableString GetLatestString(string name)
	{
		return null;
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0x1B72370", Offset = "0x1B72370", VA = "0x1B72370")]
	public HashSet<string> GetLatestStringKeys()
	{
		return null;
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0x1B72378", Offset = "0x1B72378", VA = "0x1B72378")]
	public AGSSyncableStringList GetLatestStringList(string name)
	{
		return null;
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0x1B723E8", Offset = "0x1B723E8", VA = "0x1B723E8")]
	public HashSet<string> GetLatestStringListKeys()
	{
		return null;
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0x1B723F0", Offset = "0x1B723F0", VA = "0x1B723F0")]
	public AGSSyncableStringSet GetStringSet(string name)
	{
		return null;
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0x1B72460", Offset = "0x1B72460", VA = "0x1B72460")]
	public HashSet<string> GetStringSetKeys()
	{
		return null;
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0x1B72468", Offset = "0x1B72468", VA = "0x1B72468")]
	public AGSGameDataMap GetMap(string name)
	{
		return null;
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0x1B724D8", Offset = "0x1B724D8", VA = "0x1B724D8")]
	public HashSet<string> GetMapKeys()
	{
		return null;
	}
}
[Token(Token = "0x2000048")]
public class AGSLatestStringList : AGSSyncableStringList
{
	[Token(Token = "0x600027B")]
	[Address(RVA = "0x1B724E0", Offset = "0x1B724E0", VA = "0x1B724E0")]
	public AGSLatestStringList(AmazonJavaWrapper javaObject)
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0x1B72520", Offset = "0x1B72520", VA = "0x1B72520")]
	public AGSLatestStringList(AndroidJavaObject javaObject)
	{
	}
}
[Token(Token = "0x2000049")]
public class AGSSyncable : IDisposable
{
	[Token(Token = "0x200004A")]
	public enum SyncableMethod
	{
		[Token(Token = "0x4000252")]
		getDeveloperString,
		[Token(Token = "0x4000253")]
		getHighestNumber,
		[Token(Token = "0x4000254")]
		getLowestNumber,
		[Token(Token = "0x4000255")]
		getLatestNumber,
		[Token(Token = "0x4000256")]
		getHighNumberList,
		[Token(Token = "0x4000257")]
		getLowNumberList,
		[Token(Token = "0x4000258")]
		getLatestNumberList,
		[Token(Token = "0x4000259")]
		getAccumulatingNumber,
		[Token(Token = "0x400025A")]
		getLatestString,
		[Token(Token = "0x400025B")]
		getLatestStringList,
		[Token(Token = "0x400025C")]
		getStringSet,
		[Token(Token = "0x400025D")]
		getMap
	}

	[Token(Token = "0x200004B")]
	public enum HashSetMethod
	{
		[Token(Token = "0x400025F")]
		getDeveloperStringKeys,
		[Token(Token = "0x4000260")]
		getHighestNumberKeys,
		[Token(Token = "0x4000261")]
		getLowestNumberKeys,
		[Token(Token = "0x4000262")]
		getLatestNumberKeys,
		[Token(Token = "0x4000263")]
		getHighNumberListKeys,
		[Token(Token = "0x4000264")]
		getLowNumberListKeys,
		[Token(Token = "0x4000265")]
		getLatestNumberListKeys,
		[Token(Token = "0x4000266")]
		getAccumulatingNumberKeys,
		[Token(Token = "0x4000267")]
		getLatestStringKeys,
		[Token(Token = "0x4000268")]
		getLatestStringListKeys,
		[Token(Token = "0x4000269")]
		getStringSetKeys,
		[Token(Token = "0x400026A")]
		getMapKeys
	}

	[Token(Token = "0x4000250")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	protected AmazonJavaWrapper javaObject;

	[Token(Token = "0x600027D")]
	[Address(RVA = "0x1B71B7C", Offset = "0x1B71B7C", VA = "0x1B71B7C")]
	public AGSSyncable(AmazonJavaWrapper jo)
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0x1B71BA0", Offset = "0x1B71BA0", VA = "0x1B71BA0")]
	public AGSSyncable(AndroidJavaObject jo)
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0x1B829C8", Offset = "0x1B829C8", VA = "0x1B829C8", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0x1B829DC", Offset = "0x1B829DC", VA = "0x1B829DC")]
	protected AmazonJavaWrapper DictionaryToAndroidHashMap(Dictionary<string, string> dictionary)
	{
		return null;
	}

	[Token(Token = "0x6000281")]
	protected T GetAGSSyncable<T>(SyncableMethod method)
	{
		return (T)null;
	}

	[Token(Token = "0x6000282")]
	protected T GetAGSSyncable<T>(SyncableMethod method, string key)
	{
		return (T)null;
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0x1B71C9C", Offset = "0x1B71C9C", VA = "0x1B71C9C")]
	protected HashSet<string> GetHashSet(HashSetMethod method)
	{
		return null;
	}
}
[Token(Token = "0x200004C")]
public class AGSSyncableAccumulatingNumber : AGSSyncable
{
	[Token(Token = "0x6000284")]
	[Address(RVA = "0x1B83108", Offset = "0x1B83108", VA = "0x1B83108")]
	public AGSSyncableAccumulatingNumber(AmazonJavaWrapper javaObject)
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0x1B83128", Offset = "0x1B83128", VA = "0x1B83128")]
	public AGSSyncableAccumulatingNumber(AndroidJavaObject javaObject)
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0x1B8312C", Offset = "0x1B8312C", VA = "0x1B8312C")]
	public void Increment(long delta)
	{
	}

	[Token(Token = "0x6000287")]
	[Address(RVA = "0x1B83254", Offset = "0x1B83254", VA = "0x1B83254")]
	public void Increment(double delta)
	{
	}

	[Token(Token = "0x6000288")]
	[Address(RVA = "0x1B83380", Offset = "0x1B83380", VA = "0x1B83380")]
	public void Increment(int delta)
	{
	}

	[Token(Token = "0x6000289")]
	[Address(RVA = "0x1B834A4", Offset = "0x1B834A4", VA = "0x1B834A4")]
	public void Increment(string delta)
	{
	}

	[Token(Token = "0x600028A")]
	[Address(RVA = "0x1B835A0", Offset = "0x1B835A0", VA = "0x1B835A0")]
	public void Decrement(long delta)
	{
	}

	[Token(Token = "0x600028B")]
	[Address(RVA = "0x1B836C8", Offset = "0x1B836C8", VA = "0x1B836C8")]
	public void Decrement(double delta)
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0x1B837F4", Offset = "0x1B837F4", VA = "0x1B837F4")]
	public void Decrement(int delta)
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0x1B83918", Offset = "0x1B83918", VA = "0x1B83918")]
	public void Decrement(string delta)
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0x1B83A14", Offset = "0x1B83A14", VA = "0x1B83A14")]
	public long AsLong()
	{
		return default(long);
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0x1B83AC4", Offset = "0x1B83AC4", VA = "0x1B83AC4")]
	public double AsDouble()
	{
		return default(double);
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0x1B83B74", Offset = "0x1B83B74", VA = "0x1B83B74")]
	public int AsInt()
	{
		return default(int);
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0x1B83C24", Offset = "0x1B83C24", VA = "0x1B83C24")]
	public string AsString()
	{
		return null;
	}
}
[Token(Token = "0x200004D")]
public class AGSSyncableDeveloperString : AGSSyncable
{
	[Token(Token = "0x6000292")]
	[Address(RVA = "0x1B83CD4", Offset = "0x1B83CD4", VA = "0x1B83CD4")]
	public AGSSyncableDeveloperString(AmazonJavaWrapper javaObject)
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0x1B83CF4", Offset = "0x1B83CF4", VA = "0x1B83CF4")]
	public AGSSyncableDeveloperString(AndroidJavaObject javaObject)
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0x1B83CF8", Offset = "0x1B83CF8", VA = "0x1B83CF8")]
	public string getCloudValue()
	{
		return null;
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0x1B83DA8", Offset = "0x1B83DA8", VA = "0x1B83DA8")]
	public string getValue()
	{
		return null;
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0x1B83E58", Offset = "0x1B83E58", VA = "0x1B83E58")]
	public bool inConflict()
	{
		return default(bool);
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0x1B83F08", Offset = "0x1B83F08", VA = "0x1B83F08")]
	public bool isSet()
	{
		return default(bool);
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0x1B83FB8", Offset = "0x1B83FB8", VA = "0x1B83FB8")]
	public void markAsResolved()
	{
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0x1B8405C", Offset = "0x1B8405C", VA = "0x1B8405C")]
	public void setValue(string val)
	{
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0x1B84158", Offset = "0x1B84158", VA = "0x1B84158")]
	public long getCloudTimestamp()
	{
		return default(long);
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0x1B84208", Offset = "0x1B84208", VA = "0x1B84208")]
	public long getTimestamp()
	{
		return default(long);
	}
}
[Token(Token = "0x200004E")]
public class AGSSyncableElement : AGSSyncable
{
	[Token(Token = "0x600029C")]
	[Address(RVA = "0x1B842B8", Offset = "0x1B842B8", VA = "0x1B842B8")]
	public AGSSyncableElement(AmazonJavaWrapper javaObject)
	{
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0x1B842D8", Offset = "0x1B842D8", VA = "0x1B842D8")]
	public AGSSyncableElement(AndroidJavaObject javaObject)
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0x1B842DC", Offset = "0x1B842DC", VA = "0x1B842DC")]
	public long GetTimestamp()
	{
		return default(long);
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0x1B8438C", Offset = "0x1B8438C", VA = "0x1B8438C")]
	public Dictionary<string, string> GetMetadata()
	{
		return null;
	}
}
[Token(Token = "0x200004F")]
public class AGSSyncableList : AGSSyncable
{
	[Token(Token = "0x60002A0")]
	[Address(RVA = "0x1B8486C", Offset = "0x1B8486C", VA = "0x1B8486C")]
	public AGSSyncableList(AmazonJavaWrapper javaObject)
	{
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0x1B8488C", Offset = "0x1B8488C", VA = "0x1B8488C")]
	public AGSSyncableList(AndroidJavaObject javaObject)
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0x1B84890", Offset = "0x1B84890", VA = "0x1B84890")]
	public void SetMaxSize(int size)
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0x1B849B4", Offset = "0x1B849B4", VA = "0x1B849B4")]
	public int GetMaxSize()
	{
		return default(int);
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x1B84A64", Offset = "0x1B84A64", VA = "0x1B84A64")]
	public bool IsSet()
	{
		return default(bool);
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x1B84B14", Offset = "0x1B84B14", VA = "0x1B84B14")]
	public void Add(string val, Dictionary<string, string> metadata)
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x1B84C68", Offset = "0x1B84C68", VA = "0x1B84C68")]
	public void Add(string val)
	{
	}
}
[Token(Token = "0x2000050")]
public class AGSSyncableNumber : AGSSyncableNumberElement
{
	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x1B84D64", Offset = "0x1B84D64", VA = "0x1B84D64")]
	public AGSSyncableNumber(AmazonJavaWrapper javaObject)
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x1B84DA4", Offset = "0x1B84DA4", VA = "0x1B84DA4")]
	public AGSSyncableNumber(AndroidJavaObject javaObject)
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x1B84DAC", Offset = "0x1B84DAC", VA = "0x1B84DAC")]
	public void Set(long val)
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x1B84ED4", Offset = "0x1B84ED4", VA = "0x1B84ED4")]
	public void Set(double val)
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0x1B85000", Offset = "0x1B85000", VA = "0x1B85000")]
	public void Set(int val)
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0x1B85124", Offset = "0x1B85124", VA = "0x1B85124")]
	public void Set(string val)
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0x1B85220", Offset = "0x1B85220", VA = "0x1B85220")]
	public void Set(long val, Dictionary<string, string> metadata)
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0x1B853A0", Offset = "0x1B853A0", VA = "0x1B853A0")]
	public void Set(double val, Dictionary<string, string> metadata)
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0x1B85524", Offset = "0x1B85524", VA = "0x1B85524")]
	public void Set(int val, Dictionary<string, string> metadata)
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x1B856A0", Offset = "0x1B856A0", VA = "0x1B856A0")]
	public void Set(string val, Dictionary<string, string> metadata)
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x1B857F4", Offset = "0x1B857F4", VA = "0x1B857F4")]
	public bool IsSet()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000051")]
public class AGSSyncableNumberElement : AGSSyncableElement
{
	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x1B84D84", Offset = "0x1B84D84", VA = "0x1B84D84")]
	public AGSSyncableNumberElement(AmazonJavaWrapper javaObject)
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0x1B84DA8", Offset = "0x1B84DA8", VA = "0x1B84DA8")]
	public AGSSyncableNumberElement(AndroidJavaObject javaObject)
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0x1B858A4", Offset = "0x1B858A4", VA = "0x1B858A4")]
	public long AsLong()
	{
		return default(long);
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0x1B85954", Offset = "0x1B85954", VA = "0x1B85954")]
	public double AsDouble()
	{
		return default(double);
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0x1B85A04", Offset = "0x1B85A04", VA = "0x1B85A04")]
	public int AsInt()
	{
		return default(int);
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0x1B85AB4", Offset = "0x1B85AB4", VA = "0x1B85AB4")]
	public string AsString()
	{
		return null;
	}
}
[Token(Token = "0x2000052")]
public class AGSSyncableNumberList : AGSSyncableList
{
	[Token(Token = "0x60002B8")]
	[Address(RVA = "0x1B85B64", Offset = "0x1B85B64", VA = "0x1B85B64")]
	public AGSSyncableNumberList(AmazonJavaWrapper javaObject)
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0x1B85B84", Offset = "0x1B85B84", VA = "0x1B85B84")]
	public AGSSyncableNumberList(AndroidJavaObject javaObject)
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0x1B85B88", Offset = "0x1B85B88", VA = "0x1B85B88")]
	public void Add(long val)
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0x1B85CB0", Offset = "0x1B85CB0", VA = "0x1B85CB0")]
	public void Add(double val)
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0x1B85DDC", Offset = "0x1B85DDC", VA = "0x1B85DDC")]
	public void Add(int val)
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0x1B85F00", Offset = "0x1B85F00", VA = "0x1B85F00")]
	public void Add(long val, Dictionary<string, string> metadata)
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0x1B86080", Offset = "0x1B86080", VA = "0x1B86080")]
	public void Add(double val, Dictionary<string, string> metadata)
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0x1B86204", Offset = "0x1B86204", VA = "0x1B86204")]
	public void Add(int val, Dictionary<string, string> metadata)
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0x1B86380", Offset = "0x1B86380", VA = "0x1B86380")]
	public AGSSyncableNumberElement[] GetValues()
	{
		return null;
	}
}
[Token(Token = "0x2000053")]
public class AGSSyncableString : AGSSyncableStringElement
{
	[Token(Token = "0x60002C1")]
	[Address(RVA = "0x1B86558", Offset = "0x1B86558", VA = "0x1B86558")]
	public AGSSyncableString(AmazonJavaWrapper javaObject)
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0x1B86598", Offset = "0x1B86598", VA = "0x1B86598")]
	public AGSSyncableString(AndroidJavaObject javaObject)
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0x1B865A0", Offset = "0x1B865A0", VA = "0x1B865A0")]
	public void Set(string val)
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0x1B8669C", Offset = "0x1B8669C", VA = "0x1B8669C")]
	public void Set(string val, Dictionary<string, string> metadata)
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0x1B867F0", Offset = "0x1B867F0", VA = "0x1B867F0")]
	public bool IsSet()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000054")]
public class AGSSyncableStringElement : AGSSyncableElement
{
	[Token(Token = "0x60002C6")]
	[Address(RVA = "0x1B86578", Offset = "0x1B86578", VA = "0x1B86578")]
	public AGSSyncableStringElement(AmazonJavaWrapper javaObject)
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0x1B8659C", Offset = "0x1B8659C", VA = "0x1B8659C")]
	public AGSSyncableStringElement(AndroidJavaObject javaObject)
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0x1B868A0", Offset = "0x1B868A0", VA = "0x1B868A0")]
	public string GetValue()
	{
		return null;
	}
}
[Token(Token = "0x2000055")]
public class AGSSyncableStringList : AGSSyncableList
{
	[Token(Token = "0x60002C9")]
	[Address(RVA = "0x1B72500", Offset = "0x1B72500", VA = "0x1B72500")]
	public AGSSyncableStringList(AmazonJavaWrapper javaObject)
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0x1B72524", Offset = "0x1B72524", VA = "0x1B72524")]
	public AGSSyncableStringList(AndroidJavaObject javaObject)
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0x1B86950", Offset = "0x1B86950", VA = "0x1B86950")]
	public AGSSyncableString[] GetValues()
	{
		return null;
	}
}
[Token(Token = "0x2000056")]
public class AGSSyncableStringSet : AGSSyncable
{
	[Token(Token = "0x60002CC")]
	[Address(RVA = "0x1B86B28", Offset = "0x1B86B28", VA = "0x1B86B28")]
	public AGSSyncableStringSet(AmazonJavaWrapper javaObject)
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0x1B86B48", Offset = "0x1B86B48", VA = "0x1B86B48")]
	public AGSSyncableStringSet(AndroidJavaObject javaObject)
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0x1B86B4C", Offset = "0x1B86B4C", VA = "0x1B86B4C")]
	public void Add(string val)
	{
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0x1B86C48", Offset = "0x1B86C48", VA = "0x1B86C48")]
	public void Add(string val, Dictionary<string, string> metadata)
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0x1B86D9C", Offset = "0x1B86D9C", VA = "0x1B86D9C")]
	public AGSSyncableStringElement Get(string val)
	{
		return null;
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0x1B86E0C", Offset = "0x1B86E0C", VA = "0x1B86E0C")]
	public bool Contains(string val)
	{
		return default(bool);
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0x1B86F14", Offset = "0x1B86F14", VA = "0x1B86F14")]
	public bool IsSet()
	{
		return default(bool);
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0x1B86FC4", Offset = "0x1B86FC4", VA = "0x1B86FC4")]
	public HashSet<AGSSyncableStringElement> GetValues()
	{
		return null;
	}
}
[Token(Token = "0x2000057")]
public class HeadTrackingDataProvider : GlobalSingletonWrapper<HeadTrackingDataProvider>
{
	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private int _requestCount;

	[Token(Token = "0x400026C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A408", Offset = "0xE9A408")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9A408", Offset = "0xE9A408")]
	private bool <IsFaceDetected>k__BackingField;

	[Token(Token = "0x400026D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A43C", Offset = "0xE9A43C")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9A43C", Offset = "0xE9A43C")]
	private bool <IsTracking>k__BackingField;

	[Token(Token = "0x400026E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A470", Offset = "0xE9A470")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9A470", Offset = "0xE9A470")]
	private float <HeadInclinationAngle>k__BackingField;

	[Token(Token = "0x400026F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 HeadPosition;

	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private bool editorIsFaceDetected;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Vector3 editorHeadPosition;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float editorHeadInclinationAngle;

	[Token(Token = "0x1700002A")]
	public bool IsRunning
	{
		[Token(Token = "0x60002D7")]
		[Address(RVA = "0x19C4760", Offset = "0x19C4760", VA = "0x19C4760")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700002B")]
	public bool IsFaceDetected
	{
		[Token(Token = "0x60002D8")]
		[Address(RVA = "0x19C4774", Offset = "0x19C4774", VA = "0x19C4774")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A4D4", Offset = "0xE9A4D4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002D9")]
		[Address(RVA = "0x19C477C", Offset = "0x19C477C", VA = "0x19C477C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A4E4", Offset = "0xE9A4E4")]
		private set
		{
		}
	}

	[Token(Token = "0x1700002C")]
	public bool IsTracking
	{
		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x19C4784", Offset = "0x19C4784", VA = "0x19C4784")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A4F4", Offset = "0xE9A4F4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002DB")]
		[Address(RVA = "0x19C478C", Offset = "0x19C478C", VA = "0x19C478C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A504", Offset = "0xE9A504")]
		private set
		{
		}
	}

	[Token(Token = "0x1700002D")]
	public float HeadInclinationAngle
	{
		[Token(Token = "0x60002DC")]
		[Address(RVA = "0x19C4794", Offset = "0x19C4794", VA = "0x19C4794")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A514", Offset = "0xE9A514")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60002DD")]
		[Address(RVA = "0x19C479C", Offset = "0x19C479C", VA = "0x19C479C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A524", Offset = "0xE9A524")]
		private set
		{
		}
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0x19C464C", Offset = "0x19C464C", VA = "0x19C464C")]
	public HeadTrackingDataProvider()
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0x19C4700", Offset = "0x19C4700", VA = "0x19C4700", Slot = "4")]
	protected override string GetInstantiatedObjectName()
	{
		return null;
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0x19C475C", Offset = "0x19C475C", VA = "0x19C475C", Slot = "5")]
	protected override void Init()
	{
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0x19C47A4", Offset = "0x19C47A4", VA = "0x19C47A4")]
	public void BeginRequestingData()
	{
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0x19C48B0", Offset = "0x19C48B0", VA = "0x19C48B0")]
	public void EndRequestingData()
	{
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0x19C49F8", Offset = "0x19C49F8", VA = "0x19C49F8")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000058")]
public class AmazonIAP
{
	[Token(Token = "0x4000273")]
	public const AmazonLogging.AmazonLoggingLevel errorLevel = AmazonLogging.AmazonLoggingLevel.Verbose;

	[Token(Token = "0x4000274")]
	private const string serviceName = "Amazon Insights";

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AndroidJavaObject _plugin;

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0x19D1484", Offset = "0x19D1484", VA = "0x19D1484")]
	static AmazonIAP()
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0x19D1644", Offset = "0x19D1644", VA = "0x19D1644")]
	public AmazonIAP()
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0x19D164C", Offset = "0x19D164C", VA = "0x19D164C")]
	public static void initiateItemDataRequest(string[] items)
	{
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0x19D1824", Offset = "0x19D1824", VA = "0x19D1824")]
	public static void initiatePurchaseRequest(string sku)
	{
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0x19D1970", Offset = "0x19D1970", VA = "0x19D1970")]
	public static void initiateGetUserIdRequest()
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0x19D1A64", Offset = "0x19D1A64", VA = "0x19D1A64")]
	public static void LogError(string errorMessage)
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0x19D1C44", Offset = "0x19D1C44", VA = "0x19D1C44")]
	public static void LogWarning(string errorMessage)
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0x19D1DC8", Offset = "0x19D1DC8", VA = "0x19D1DC8")]
	public static void Log(string message)
	{
	}
}
[Token(Token = "0x2000059")]
public class AmazonIAPManager : MonoBehaviour
{
	[Token(Token = "0x14000029")]
	public static event Action itemDataRequestFailedEvent
	{
		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x19D3388", Offset = "0x19D3388", VA = "0x19D3388")]
		add
		{
		}
		[Token(Token = "0x60002EB")]
		[Address(RVA = "0x19D3ECC", Offset = "0x19D3ECC", VA = "0x19D3ECC")]
		remove
		{
		}
	}

	[Token(Token = "0x1400002A")]
	public static event Action<List<string>, List<AmazonItem>> itemDataRequestFinishedEvent
	{
		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x19D34A0", Offset = "0x19D34A0", VA = "0x19D34A0")]
		add
		{
		}
		[Token(Token = "0x60002ED")]
		[Address(RVA = "0x19D3FE4", Offset = "0x19D3FE4", VA = "0x19D3FE4")]
		remove
		{
		}
	}

	[Token(Token = "0x1400002B")]
	public static event Action<string> purchaseFailedEvent
	{
		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x19D35B8", Offset = "0x19D35B8", VA = "0x19D35B8")]
		add
		{
		}
		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x19D40FC", Offset = "0x19D40FC", VA = "0x19D40FC")]
		remove
		{
		}
	}

	[Token(Token = "0x1400002C")]
	public static event Action<AmazonReceipt> purchaseSuccessfulEvent
	{
		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x19D36D0", Offset = "0x19D36D0", VA = "0x19D36D0")]
		add
		{
		}
		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x19D4214", Offset = "0x19D4214", VA = "0x19D4214")]
		remove
		{
		}
	}

	[Token(Token = "0x1400002D")]
	public static event Action purchaseUpdatesRequestFailedEvent
	{
		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x19D37E8", Offset = "0x19D37E8", VA = "0x19D37E8")]
		add
		{
		}
		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x19D432C", Offset = "0x19D432C", VA = "0x19D432C")]
		remove
		{
		}
	}

	[Token(Token = "0x1400002E")]
	public static event Action<List<string>, List<AmazonReceipt>> purchaseUpdatesRequestSuccessfulEvent
	{
		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x19D3900", Offset = "0x19D3900", VA = "0x19D3900")]
		add
		{
		}
		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x19D4444", Offset = "0x19D4444", VA = "0x19D4444")]
		remove
		{
		}
	}

	[Token(Token = "0x1400002F")]
	public static event Action<bool> onSdkAvailableEvent
	{
		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x19D3A18", Offset = "0x19D3A18", VA = "0x19D3A18")]
		add
		{
		}
		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x19D455C", Offset = "0x19D455C", VA = "0x19D455C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000030")]
	public static event Action<string> onGetUserIdResponseEvent
	{
		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x19D3B30", Offset = "0x19D3B30", VA = "0x19D3B30")]
		add
		{
		}
		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x19D4674", Offset = "0x19D4674", VA = "0x19D4674")]
		remove
		{
		}
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0x19D51D0", Offset = "0x19D51D0", VA = "0x19D51D0")]
	public AmazonIAPManager()
	{
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0x19D51D8", Offset = "0x19D51D8", VA = "0x19D51D8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0x19D52C0", Offset = "0x19D52C0", VA = "0x19D52C0")]
	public void itemDataRequestFailed(string empty)
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0x19D5330", Offset = "0x19D5330", VA = "0x19D5330")]
	public void itemDataRequestFinished(string json)
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0x19D5890", Offset = "0x19D5890", VA = "0x19D5890")]
	public void purchaseFailed(string reason)
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0x19D5914", Offset = "0x19D5914", VA = "0x19D5914")]
	public void purchaseSuccessful(string json)
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0x19D5C18", Offset = "0x19D5C18", VA = "0x19D5C18")]
	public void purchaseUpdatesRequestFailed(string empty)
	{
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0x19D5C88", Offset = "0x19D5C88", VA = "0x19D5C88")]
	public void purchaseUpdatesRequestSuccessful(string json)
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0x19D61E8", Offset = "0x19D61E8", VA = "0x19D61E8")]
	public void onSdkAvailable(string param)
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0x19D62BC", Offset = "0x19D62BC", VA = "0x19D62BC")]
	public void onGetUserIdResponse(string param)
	{
	}
}
[Token(Token = "0x200005A")]
public static class ArrayListExtensions
{
	[Token(Token = "0x6000303")]
	public static List<T> ToList<T>(this ArrayList arrayList)
	{
		return null;
	}
}
[Token(Token = "0x200005B")]
public class AmazonItem
{
	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string description;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string type;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string price;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string sku;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string smallIconUrl;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public string title;

	[Token(Token = "0x6000304")]
	[Address(RVA = "0x19D7428", Offset = "0x19D7428", VA = "0x19D7428")]
	public AmazonItem(Hashtable ht)
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0x19D5504", Offset = "0x19D5504", VA = "0x19D5504")]
	public static List<AmazonItem> fromArrayList(ArrayList array)
	{
		return null;
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0x19D7658", Offset = "0x19D7658", VA = "0x19D7658", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x200005C")]
public class AmazonReceipt
{
	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string type;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string token;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string sku;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string subscriptionStartDate;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string subscriptionEndDate;

	[Token(Token = "0x6000307")]
	[Address(RVA = "0x19D59D0", Offset = "0x19D59D0", VA = "0x19D59D0")]
	public AmazonReceipt(Hashtable ht)
	{
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0x19D5E5C", Offset = "0x19D5E5C", VA = "0x19D5E5C")]
	public static List<AmazonReceipt> fromArrayList(ArrayList array)
	{
		return null;
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0x19D98E8", Offset = "0x19D98E8", VA = "0x19D98E8", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x200005D")]
public class AmazonIAPEventListener : MonoBehaviour
{
	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<AmazonItem> availableItems;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static List<string> unavailableSkus;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string userId;

	[Token(Token = "0x1700002E")]
	public static List<AmazonItem> AvailableItems
	{
		[Token(Token = "0x600030B")]
		[Address(RVA = "0x19D2F60", Offset = "0x19D2F60", VA = "0x19D2F60")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700002F")]
	public static List<string> UnavailableSkus
	{
		[Token(Token = "0x600030C")]
		[Address(RVA = "0x19D2FEC", Offset = "0x19D2FEC", VA = "0x19D2FEC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000030")]
	public static string UserId
	{
		[Token(Token = "0x600030D")]
		[Address(RVA = "0x19D3078", Offset = "0x19D3078", VA = "0x19D3078")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0x19D2F58", Offset = "0x19D2F58", VA = "0x19D2F58")]
	public AmazonIAPEventListener()
	{
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0x19D3104", Offset = "0x19D3104", VA = "0x19D3104")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0x19D3C48", Offset = "0x19D3C48", VA = "0x19D3C48")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0x19D478C", Offset = "0x19D478C", VA = "0x19D478C")]
	private void itemDataRequestFailedEvent()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0x19D4814", Offset = "0x19D4814", VA = "0x19D4814")]
	private void itemDataRequestFinishedEvent(List<string> unavailableSkus, List<AmazonItem> availableItems)
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0x19D4B50", Offset = "0x19D4B50", VA = "0x19D4B50")]
	private void purchaseFailedEvent(string reason)
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0x19D4C20", Offset = "0x19D4C20", VA = "0x19D4C20")]
	private void purchaseSuccessfulEvent(AmazonReceipt receipt)
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0x19D4CF0", Offset = "0x19D4CF0", VA = "0x19D4CF0")]
	private void purchaseUpdatesRequestFailedEvent()
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0x19D4D78", Offset = "0x19D4D78", VA = "0x19D4D78")]
	private void purchaseUpdatesRequestSuccessfulEvent(List<string> revokedSkus, List<AmazonReceipt> receipts)
	{
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0x19D4FC0", Offset = "0x19D4FC0", VA = "0x19D4FC0")]
	private void onSdkAvailableEvent(bool isTestMode)
	{
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0x19D50B8", Offset = "0x19D50B8", VA = "0x19D50B8")]
	private void onGetUserIdResponseEvent(string userId)
	{
	}
}
[Token(Token = "0x200005E")]
public class AmazonIAPUIManager : MonoBehaviour
{
	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private string[] buttonClickerSkus;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector2 scroll;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool uiInitialized;

	[Token(Token = "0x400028F")]
	private const string pluginName = "Amazon IAP";

	[Token(Token = "0x4000290")]
	private const string itemDataRequestButtonLabel = "Initiate Item Data Request";

	[Token(Token = "0x4000291")]
	private const string amazonItemsAvailableLabel = "Amazon Items Available";

	[Token(Token = "0x4000292")]
	private const string unavailableAmazonSkusLabel = "Unavailable Skus";

	[Token(Token = "0x4000293")]
	private const string purchaseItemButtonlabel = "Initiate Purchase Request";

	[Token(Token = "0x4000294")]
	private const string initializeUserIdRequestLabel = "Initialize User ID Request";

	[Token(Token = "0x4000295")]
	private const string userIDLabel = "User ID {0}";

	[Token(Token = "0x4000296")]
	private const string itemTitleLabel = "{0}";

	[Token(Token = "0x4000297")]
	private const string itemSkuAndPriceLabel = "Sku: {0}, Price: {1}";

	[Token(Token = "0x4000298")]
	private const string itemDescriptionLabel = "{0}";

	[Token(Token = "0x4000299")]
	private const string itemTypeAndUrlLabel = "Type: {0}, Url: {1}";

	[Token(Token = "0x6000319")]
	[Address(RVA = "0x19D6340", Offset = "0x19D6340", VA = "0x19D6340")]
	public AmazonIAPUIManager()
	{
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0x19D6614", Offset = "0x19D6614", VA = "0x19D6614")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x19D68A8", Offset = "0x19D68A8", VA = "0x19D68A8")]
	private void DisplayIAPMenuHeader()
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0x19D6930", Offset = "0x19D6930", VA = "0x19D6930")]
	private void DisplayAmazonItems()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0x19D7054", Offset = "0x19D7054", VA = "0x19D7054")]
	private void DisplayAmazonItem(AmazonItem item)
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x19D6E30", Offset = "0x19D6E30", VA = "0x19D6E30")]
	private void DisplayAmazonUserID()
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x19D67D8", Offset = "0x19D67D8", VA = "0x19D67D8")]
	private void InitializeUI()
	{
	}
}
[Token(Token = "0x200005F")]
public static class AmazonLinkMaker
{
	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A6F4", Offset = "0xE9A6F4")]
	private static Dictionary<string, int> <>f__switch$map0;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A704", Offset = "0xE9A704")]
	private static Dictionary<string, int> <>f__switch$map1;

	[Token(Token = "0x6000320")]
	[Address(RVA = "0x19D7AEC", Offset = "0x19D7AEC", VA = "0x19D7AEC")]
	private static bool TryGetCartridgeFromID(string id, out string amazonID)
	{
		return default(bool);
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0x19D8A98", Offset = "0x19D8A98", VA = "0x19D8A98")]
	private static bool TryGetBookFromID(string id, out string amazonID)
	{
		return default(bool);
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0x19D9684", Offset = "0x19D9684", VA = "0x19D9684")]
	public static bool TryGetGameCartridgeProductID(string cartridgeID, out string productID)
	{
		return default(bool);
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0x19D979C", Offset = "0x19D979C", VA = "0x19D979C")]
	public static bool TryGetBookProductID(string bookID, out string productID)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000060")]
public class MobileAssociatesWrapper : MonoBehaviour
{
	[Token(Token = "0x2000507")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A714", Offset = "0xE9A714")]
	private sealed class <Initialize>c__AnonStorey0
	{
		[Token(Token = "0x400196B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal AndroidJavaObject unityActivity;

		[Token(Token = "0x6002360")]
		[Address(RVA = "0x1976DA4", Offset = "0x1976DA4", VA = "0x1976DA4")]
		public <Initialize>c__AnonStorey0()
		{
		}

		[Token(Token = "0x6002361")]
		[Address(RVA = "0x1976FC4", Offset = "0x1976FC4", VA = "0x1976FC4")]
		internal void <>m__0()
		{
		}
	}

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AndroidJavaClass AssociatesAPI;

	[Token(Token = "0x6000324")]
	[Address(RVA = "0x1976BB4", Offset = "0x1976BB4", VA = "0x1976BB4")]
	public MobileAssociatesWrapper()
	{
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0x1976BBC", Offset = "0x1976BBC", VA = "0x1976BBC")]
	public static void Initialize()
	{
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0x1976DAC", Offset = "0x1976DAC", VA = "0x1976DAC")]
	public static void OpenLink(string productID)
	{
	}
}
[Token(Token = "0x2000061")]
public class AndroidObbInfo
{
	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AndroidJavaClass detectAndroidJNI;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static string obb_package;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int obb_version;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static List<string> obbDirs;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static string main_file;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static string patch_file;

	[Token(Token = "0x6000327")]
	[Address(RVA = "0x19DAAFC", Offset = "0x19DAAFC", VA = "0x19DAAFC")]
	public AndroidObbInfo()
	{
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0x19DAB04", Offset = "0x19DAB04", VA = "0x19DAB04")]
	public static bool RunningOnAndroid()
	{
		return default(bool);
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0x19DAC80", Offset = "0x19DAC80", VA = "0x19DAC80")]
	public static void PopulateOBBData()
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0x19DB0D0", Offset = "0x19DB0D0", VA = "0x19DB0D0")]
	public static void UpdateTargetObbs()
	{
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0x19DB884", Offset = "0x19DB884", VA = "0x19DB884")]
	public static string GetMainOBBPath()
	{
		return null;
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0x19DB910", Offset = "0x19DB910", VA = "0x19DB910")]
	public static string GetPatchOBBPath()
	{
		return null;
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0x19DB99C", Offset = "0x19DB99C", VA = "0x19DB99C")]
	public static string GetMainOBBName()
	{
		return null;
	}
}
[Token(Token = "0x2000062")]
public static class AutoLogcat
{
	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AndroidJavaObject logcat;

	[Token(Token = "0x600032F")]
	[Address(RVA = "0x19DDB90", Offset = "0x19DDB90", VA = "0x19DDB90")]
	public static void Start(string directory, int numFiles, int fileSizeInKB)
	{
	}
}
[Token(Token = "0x2000063")]
public class HeroWidgetReceiver : MonoBehaviour
{
	[Token(Token = "0x14000031")]
	public static event Action OnInitializationComplete
	{
		[Token(Token = "0x6000331")]
		[Address(RVA = "0x19C4DF4", Offset = "0x19C4DF4", VA = "0x19C4DF4")]
		add
		{
		}
		[Token(Token = "0x6000332")]
		[Address(RVA = "0x19C4F0C", Offset = "0x19C4F0C", VA = "0x19C4F0C")]
		remove
		{
		}
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0x19C4DEC", Offset = "0x19C4DEC", VA = "0x19C4DEC")]
	public HeroWidgetReceiver()
	{
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0x19C5024", Offset = "0x19C5024", VA = "0x19C5024")]
	private void InitializationComplete()
	{
	}
}
[Token(Token = "0x2000064")]
public class HeroWidgetWrapper
{
	[Token(Token = "0x6000334")]
	[Address(RVA = "0x19C5094", Offset = "0x19C5094", VA = "0x19C5094")]
	public HeroWidgetWrapper()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0x19C509C", Offset = "0x19C509C", VA = "0x19C509C")]
	public static void Initialize()
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0x19C50A0", Offset = "0x19C50A0", VA = "0x19C50A0")]
	public static int CreateNewGroup(string name)
	{
		return default(int);
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0x19C50A8", Offset = "0x19C50A8", VA = "0x19C50A8")]
	public static int CreateNewListEntry(string groupName, string[] text, string[] uris)
	{
		return default(int);
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0x19C50B0", Offset = "0x19C50B0", VA = "0x19C50B0")]
	public static void ClearWidget()
	{
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0x19C50B4", Offset = "0x19C50B4", VA = "0x19C50B4")]
	public static int PopulateWidget()
	{
		return default(int);
	}
}
[Token(Token = "0x2000065")]
public class CombinedGestures : FingerGestures
{
	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int maxMouseButtons;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int maxFingers;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Touch nullTouch;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int[] finger2touchMap;

	[Token(Token = "0x17000031")]
	public override int MaxFingers
	{
		[Token(Token = "0x600033C")]
		[Address(RVA = "0x19E2280", Offset = "0x19E2280", VA = "0x19E2280", Slot = "9")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0x19E2158", Offset = "0x19E2158", VA = "0x19E2158")]
	public CombinedGestures()
	{
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0x19E21AC", Offset = "0x19E21AC", VA = "0x19E21AC", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0x19E2290", Offset = "0x19E2290", VA = "0x19E2290", Slot = "10")]
	protected override FingerPhase GetPhase(Finger finger)
	{
		return default(FingerPhase);
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0x19E26F0", Offset = "0x19E26F0", VA = "0x19E26F0", Slot = "11")]
	protected override Vector2 GetPosition(Finger finger)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x19E2840", Offset = "0x19E2840", VA = "0x19E2840")]
	private void UpdateFingerTouchMap()
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0x19E2578", Offset = "0x19E2578", VA = "0x19E2578")]
	private bool HasValidTouch(Finger finger)
	{
		return default(bool);
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0x19E25EC", Offset = "0x19E25EC", VA = "0x19E25EC")]
	private Touch GetTouch(Finger finger)
	{
		return default(Touch);
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0x19E2A08", Offset = "0x19E2A08", VA = "0x19E2A08", Slot = "8")]
	protected override void Update()
	{
	}
}
[Token(Token = "0x2000066")]
public static class AndroidMemoryHelper
{
	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int s_sdk;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static long s_totalMem;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static float s_cacheInterval;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static float s_lastMemCheck;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static long s_lastPss;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static float s_lastDiskCheck;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static long s_lastDiskSpace;

	[Token(Token = "0x17000032")]
	public static int SDK
	{
		[Token(Token = "0x6000344")]
		[Address(RVA = "0x19DA354", Offset = "0x19DA354", VA = "0x19DA354")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000033")]
	public static long TotalMemory
	{
		[Token(Token = "0x6000345")]
		[Address(RVA = "0x19DA3E0", Offset = "0x19DA3E0", VA = "0x19DA3E0")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0x19D999C", Offset = "0x19D999C", VA = "0x19D999C")]
	static AndroidMemoryHelper()
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0x19DA46C", Offset = "0x19DA46C", VA = "0x19DA46C")]
	public static void SetCacheInterval(float interval)
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0x19DA508", Offset = "0x19DA508", VA = "0x19DA508")]
	public static long GetTotalPss()
	{
		return default(long);
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0x19DA514", Offset = "0x19DA514", VA = "0x19DA514")]
	public static long GetAvailableBytes()
	{
		return default(long);
	}
}
[Token(Token = "0x2000067")]
public class AssetBundleManager : MonoBehaviour
{
	[Token(Token = "0x2000068")]
	public enum Mode
	{
		[Token(Token = "0x40002C0")]
		Standard,
		[Token(Token = "0x40002C1")]
		Criware
	}

	[Token(Token = "0x2000069")]
	public class LoadAssetOp
	{
		[Token(Token = "0x2000508")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A788", Offset = "0xE9A788")]
		private sealed class <WaitForDone>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x400196C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal LoadAssetOp $this;

			[Token(Token = "0x400196D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal object $current;

			[Token(Token = "0x400196E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal bool $disposing;

			[Token(Token = "0x400196F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal int $PC;

			[Token(Token = "0x1700026C")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002364")]
				[Address(RVA = "0x19DDAE8", Offset = "0x19DDAE8", VA = "0x19DDAE8", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700026D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002365")]
				[Address(RVA = "0x19DDAF0", Offset = "0x19DDAF0", VA = "0x19DDAF0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002362")]
			[Address(RVA = "0x19DDA4C", Offset = "0x19DDA4C", VA = "0x19DDA4C")]
			[DebuggerHidden]
			public <WaitForDone>c__Iterator0()
			{
			}

			[Token(Token = "0x6002363")]
			[Address(RVA = "0x19DDA54", Offset = "0x19DDA54", VA = "0x19DDA54", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002366")]
			[Address(RVA = "0x19DDAF8", Offset = "0x19DDAF8", VA = "0x19DDAF8", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002367")]
			[Address(RVA = "0x19DDB0C", Offset = "0x19DDB0C", VA = "0x19DDB0C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private AssetBundleLoadAssetOperation abmOp;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private AssetBundleLoadAssetOperationCriware criOp;

		[Token(Token = "0x6000356")]
		[Address(RVA = "0x19DCD90", Offset = "0x19DCD90", VA = "0x19DCD90")]
		public LoadAssetOp(AssetBundleLoadAssetOperation op)
		{
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0x19DCF10", Offset = "0x19DCF10", VA = "0x19DCF10")]
		public LoadAssetOp(AssetBundleLoadAssetOperationCriware op)
		{
		}

		[Token(Token = "0x6000358")]
		public T GetAsset<T>() where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0x19DD97C", Offset = "0x19DD97C", VA = "0x19DD97C")]
		public bool IsDone()
		{
			return default(bool);
		}

		[Token(Token = "0x600035A")]
		[Address(RVA = "0x19DD9CC", Offset = "0x19DD9CC", VA = "0x19DD9CC")]
		[DebuggerHidden]
		public IEnumerator WaitForDone()
		{
			return null;
		}
	}

	[Token(Token = "0x200006A")]
	public class AssetBundleLoadAssetOperationCriware
	{
		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected string m_AssetBundleName;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected string m_AssetName;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected Type m_Type;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected AssetBundleCreateRequest m_Request;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected AssetBundleRequest m_Load;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AssetBundle bundle;

		[Token(Token = "0x600035B")]
		[Address(RVA = "0x19DCDB0", Offset = "0x19DCDB0", VA = "0x19DCDB0")]
		public AssetBundleLoadAssetOperationCriware(string bundleName, string assetName, Type type)
		{
		}

		[Token(Token = "0x600035C")]
		public T GetAsset<T>() where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0x19DC784", Offset = "0x19DC784", VA = "0x19DC784")]
		public void Update()
		{
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0x19DC91C", Offset = "0x19DC91C", VA = "0x19DC91C")]
		public bool IsDone()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Mode ABMode;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private string assetBundleDataPath;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[SerializeField]
	private AssetBundleManagement.LogMode logLevel;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private AssetBundleDataObject dataObj;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, string> sceneToBundleMap;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private List<string> loadedScenes;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<string> resourceAssetBundles;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Dictionary<string, int> assetBundleReferenceCounts;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string resourceRoot;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool _initialized;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<AssetBundleWaitForLoadOperation> prewarmOperations;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private List<AsyncOperation> sceneUnloads;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<AssetBundleLoadAssetOperationCriware> internalLoads;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static AssetBundleManager _inst;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Dictionary<string, AssetBundle> loadedAssetBundles;

	[Token(Token = "0x17000034")]
	private bool useABM
	{
		[Token(Token = "0x600034A")]
		[Address(RVA = "0x19DBE50", Offset = "0x19DBE50", VA = "0x19DBE50")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000035")]
	public static AssetBundleManager Instance
	{
		[Token(Token = "0x600034C")]
		[Address(RVA = "0x19DC14C", Offset = "0x19DC14C", VA = "0x19DC14C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0x19DBCE0", Offset = "0x19DBCE0", VA = "0x19DBCE0")]
	public AssetBundleManager()
	{
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0x19DBEF4", Offset = "0x19DBEF4", VA = "0x19DBEF4")]
	public void Initialize()
	{
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0x19DC454", Offset = "0x19DC454", VA = "0x19DC454")]
	private void Update()
	{
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0x19DC9E0", Offset = "0x19DC9E0", VA = "0x19DC9E0")]
	public LoadAssetOp LoadAssetResourceAsync(string assetPath, Type type)
	{
		return null;
	}

	[Token(Token = "0x600034F")]
	public LoadAssetOp LoadAssetResourceAsync<T>(string assetPath) where T : UnityEngine.Object
	{
		return null;
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0x19DCF30", Offset = "0x19DCF30", VA = "0x19DCF30")]
	public void UnloadAssetBundleForResource(string assetPath)
	{
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0x19DD24C", Offset = "0x19DD24C", VA = "0x19DD24C")]
	public void UnloadAllAssetBundlesForResources(bool force)
	{
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0x19DD5F0", Offset = "0x19DD5F0", VA = "0x19DD5F0")]
	public AssetBundleLoadOperation LoadAssetBundle(string bundle)
	{
		return null;
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0x19DD758", Offset = "0x19DD758", VA = "0x19DD758")]
	public void UnloadAssetBundle(string bundle, bool force)
	{
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0x19DD974", Offset = "0x19DD974", VA = "0x19DD974")]
	public void PrewarmAssetBundle(string bundle)
	{
	}
}
[Token(Token = "0x200006B")]
public class BuildInfo
{
	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string buildInfo;

	[Token(Token = "0x600035F")]
	[Address(RVA = "0x19DF6DC", Offset = "0x19DF6DC", VA = "0x19DF6DC")]
	public BuildInfo()
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0x19DF6E4", Offset = "0x19DF6E4", VA = "0x19DF6E4")]
	public static string GetBuildInfo()
	{
		return null;
	}
}
[Token(Token = "0x200006C")]
public static class AttributeUtil
{
	[Token(Token = "0x6000362")]
	public static T GetAttribute<T>(ICustomAttributeProvider provider) where T : Attribute
	{
		return null;
	}
}
[Token(Token = "0x200006D")]
public static class CommandLineArgsUtil
{
	[Token(Token = "0x6000363")]
	[Address(RVA = "0x19E2A28", Offset = "0x19E2A28", VA = "0x19E2A28")]
	public static string[] GetCommandLineArgs()
	{
		return null;
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0x19E2B24", Offset = "0x19E2B24", VA = "0x19E2B24")]
	public static bool HasArg(string arg)
	{
		return default(bool);
	}
}
[Token(Token = "0x200006E")]
public static class EnumExtensions
{
	[Token(Token = "0x200006F")]
	private enum IntegerEnum
	{

	}

	[Token(Token = "0x6000365")]
	public static T GetAttribute<T>(this Enum value) where T : Attribute
	{
		return null;
	}

	[Token(Token = "0x6000366")]
	public static T GetAttribute<T>(Type enumType, string fieldName) where T : Attribute
	{
		return null;
	}

	[Token(Token = "0x6000367")]
	[Address(RVA = "0x1925CF8", Offset = "0x1925CF8", VA = "0x1925CF8")]
	public static string GetLocalizedName(object value, Type enumType)
	{
		return null;
	}

	[Token(Token = "0x6000368")]
	[Address(RVA = "0x1925D94", Offset = "0x1925D94", VA = "0x1925D94")]
	public static string GetLocalizedFieldName(string fieldName, Type enumType)
	{
		return null;
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0x1925E38", Offset = "0x1925E38", VA = "0x1925E38")]
	public static string[] GetLocalizedNames(Type enumType)
	{
		return null;
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0x1925ECC", Offset = "0x1925ECC", VA = "0x1925ECC")]
	private static string[] GetLocalizedNames(Type enumType, string[] nonLocalized)
	{
		return null;
	}

	[Token(Token = "0x600036B")]
	public static bool[] GetFieldsHaveAttribute<T>(Type enumType) where T : Attribute
	{
		return null;
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x1926018", Offset = "0x1926018", VA = "0x1926018")]
	public static int ToInt(this Enum value)
	{
		return default(int);
	}
}
[Token(Token = "0x2000070")]
public abstract class GlobalSingletonWrapper<T> : MonoBehaviour where T : GlobalSingletonWrapper<T>
{
	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static T _instance;

	[Token(Token = "0x17000036")]
	public static T Instance
	{
		[Token(Token = "0x600036E")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600036D")]
	protected GlobalSingletonWrapper()
	{
	}

	[Token(Token = "0x600036F")]
	public static T CreateInstance()
	{
		return null;
	}

	[Token(Token = "0x6000370")]
	private static T Instantiate()
	{
		return null;
	}

	[Token(Token = "0x6000371")]
	protected abstract string GetInstantiatedObjectName();

	[Token(Token = "0x6000372")]
	protected abstract void Init();

	[Token(Token = "0x6000373")]
	protected virtual void OnDestroy()
	{
	}
}
[Token(Token = "0x2000071")]
public static class HardcodedLocalizedTextManager
{
	[Token(Token = "0x2000509")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A838", Offset = "0xE9A838")]
	private sealed class <RecusiveDirectorySearch>c__Iterator0 : IEnumerable, IEnumerable<string>, IEnumerator, IDisposable, IEnumerator<string>
	{
		[Token(Token = "0x4001970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string directory;

		[Token(Token = "0x4001971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal string[] $locvar0;

		[Token(Token = "0x4001972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int $locvar1;

		[Token(Token = "0x4001973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal string <a>__1;

		[Token(Token = "0x4001974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal string[] $locvar2;

		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $locvar3;

		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal string <b>__2;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal IEnumerator<string> $locvar4;

		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal string <b>__3;

		[Token(Token = "0x4001979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal string $current;

		[Token(Token = "0x400197A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal bool $disposing;

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal int $PC;

		[Token(Token = "0x1700026E")]
		private string System.Collections.Generic.IEnumerator<string>.Current
		{
			[Token(Token = "0x600236A")]
			[Address(RVA = "0x19C440C", Offset = "0x19C440C", VA = "0x19C440C", Slot = "10")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700026F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600236B")]
			[Address(RVA = "0x19C4414", Offset = "0x19C4414", VA = "0x19C4414", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002368")]
		[Address(RVA = "0x19C3818", Offset = "0x19C3818", VA = "0x19C3818")]
		[DebuggerHidden]
		public <RecusiveDirectorySearch>c__Iterator0()
		{
		}

		[Token(Token = "0x6002369")]
		[Address(RVA = "0x19C3EF0", Offset = "0x19C3EF0", VA = "0x19C3EF0", Slot = "7")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600236C")]
		[Address(RVA = "0x19C441C", Offset = "0x19C441C", VA = "0x19C441C", Slot = "9")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600236D")]
		[Address(RVA = "0x19C450C", Offset = "0x19C450C", VA = "0x19C450C", Slot = "8")]
		[DebuggerHidden]
		public void Reset()
		{
		}

		[Token(Token = "0x600236E")]
		[Address(RVA = "0x19C4590", Offset = "0x19C4590", VA = "0x19C4590", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600236F")]
		[Address(RVA = "0x19C4594", Offset = "0x19C4594", VA = "0x19C4594", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x200050A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A8B8", Offset = "0xE9A8B8")]
	private sealed class <GetAllCSFiles>c__Iterator1 : IEnumerable, IEnumerable<string>, IEnumerator, IDisposable, IEnumerator<string>
	{
		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal IEnumerator<string> $locvar0;

		[Token(Token = "0x400197D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal string <a>__1;

		[Token(Token = "0x400197E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal string $current;

		[Token(Token = "0x400197F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal bool $disposing;

		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int $PC;

		[Token(Token = "0x17000270")]
		private string System.Collections.Generic.IEnumerator<string>.Current
		{
			[Token(Token = "0x6002372")]
			[Address(RVA = "0x19C3CCC", Offset = "0x19C3CCC", VA = "0x19C3CCC", Slot = "10")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000271")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002373")]
			[Address(RVA = "0x19C3CD4", Offset = "0x19C3CD4", VA = "0x19C3CD4", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002370")]
		[Address(RVA = "0x19C3820", Offset = "0x19C3820", VA = "0x19C3820")]
		[DebuggerHidden]
		public <GetAllCSFiles>c__Iterator1()
		{
		}

		[Token(Token = "0x6002371")]
		[Address(RVA = "0x19C38C8", Offset = "0x19C38C8", VA = "0x19C38C8", Slot = "7")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002374")]
		[Address(RVA = "0x19C3CDC", Offset = "0x19C3CDC", VA = "0x19C3CDC", Slot = "9")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002375")]
		[Address(RVA = "0x19C3DCC", Offset = "0x19C3DCC", VA = "0x19C3DCC", Slot = "8")]
		[DebuggerHidden]
		public void Reset()
		{
		}

		[Token(Token = "0x6002376")]
		[Address(RVA = "0x19C3E50", Offset = "0x19C3E50", VA = "0x19C3E50", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6002377")]
		[Address(RVA = "0x19C3E54", Offset = "0x19C3E54", VA = "0x19C3E54", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x40002CD")]
	private const string LOC_STRING_ELEMENT_NAME = "LOCString";

	[Token(Token = "0x40002CE")]
	private const string LOC_STRING_ID_PREFIX = " LOCID: ";

	[Token(Token = "0x40002CF")]
	private const string LOC_STRING_COMMENT_PREFIX = "COMMENT";

	[Token(Token = "0x40002D0")]
	public const string HARDCODED_STRINGS_XML_FILE_NAME = "Xml/HardcodedStrings";

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<string, string> cachedStrings;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static XmlDocument xmlDocument;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static LocalizationManager.Languages xmlLanguage;

	[Token(Token = "0x6000374")]
	[Address(RVA = "0x19BE884", Offset = "0x19BE884", VA = "0x19BE884")]
	public static string GetFullXMLFilePath()
	{
		return null;
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0x19BE928", Offset = "0x19BE928", VA = "0x19BE928")]
	public static void UpdateHardcodedStringDatabase()
	{
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0x19C0CC8", Offset = "0x19C0CC8", VA = "0x19C0CC8")]
	private static void LoadExistingXML(out XmlDocument document, out XmlElement rootXMLElement)
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0x19C23B8", Offset = "0x19C23B8", VA = "0x19C23B8")]
	public static string CreateAndAppendNewLocalizedIdentifier(string sectionName, string text)
	{
		return null;
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0x19C1F08", Offset = "0x19C1F08", VA = "0x19C1F08")]
	private static void Append(XmlDocument document, XmlElement root, string sectionName, string identifier, string text, string comment)
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0x19C1328", Offset = "0x19C1328", VA = "0x19C1328")]
	private static void AddUsedIdsFromDocument(XmlElement root, List<string> ids)
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0x19C25C8", Offset = "0x19C25C8", VA = "0x19C25C8")]
	public static string getLocalizedString(string id)
	{
		return null;
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0x19C3594", Offset = "0x19C3594", VA = "0x19C3594")]
	public static string getLocalizedString(string id, string fallback)
	{
		return null;
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0x19C363C", Offset = "0x19C363C", VA = "0x19C363C")]
	public static void TriggerReload(LocalizationManager.Languages newLanguage)
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0x19C36B4", Offset = "0x19C36B4", VA = "0x19C36B4")]
	public static void TriggerReload()
	{
	}

	[Token(Token = "0x600037E")]
	[Address(RVA = "0x19C2660", Offset = "0x19C2660", VA = "0x19C2660")]
	public static bool getLocalizedString(string id, out string xmlString)
	{
		return default(bool);
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0x19C1C10", Offset = "0x19C1C10", VA = "0x19C1C10")]
	private static string getLOCLineText(string line)
	{
		return null;
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0x19C11B8", Offset = "0x19C11B8", VA = "0x19C11B8")]
	private static string getLOCLineID(string line)
	{
		return null;
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0x19C1144", Offset = "0x19C1144", VA = "0x19C1144")]
	private static bool LOCLineHasID(string line)
	{
		return default(bool);
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0x19C1D8C", Offset = "0x19C1D8C", VA = "0x19C1D8C")]
	private static string getLOCLineComment(string line)
	{
		return null;
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0x19C1A78", Offset = "0x19C1A78", VA = "0x19C1A78")]
	private static string GetOriginalID(List<string> takenIDs, string fileName)
	{
		return null;
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0x19C1020", Offset = "0x19C1020", VA = "0x19C1020")]
	private static bool isLineLOCTag(string line)
	{
		return default(bool);
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0x19C3780", Offset = "0x19C3780", VA = "0x19C3780")]
	[DebuggerHidden]
	private static IEnumerable<string> RecusiveDirectorySearch(string directory)
	{
		return null;
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0x19C0FA0", Offset = "0x19C0FA0", VA = "0x19C0FA0")]
	[DebuggerHidden]
	private static IEnumerable<string> GetAllCSFiles()
	{
		return null;
	}
}
[Token(Token = "0x2000072")]
public class HiddenAttribute : Attribute
{
	[Token(Token = "0x6000388")]
	[Address(RVA = "0x19C50BC", Offset = "0x19C50BC", VA = "0x19C50BC")]
	public HiddenAttribute()
	{
	}
}
[Token(Token = "0x2000073")]
public interface ICSVTranslatable
{
	[Token(Token = "0x17000037")]
	string Name
	{
		[Token(Token = "0x6000389")]
		get;
	}

	[Token(Token = "0x600038A")]
	new Type GetType();
}
[Token(Token = "0x2000074")]
public static class LocalizationManager
{
	[Token(Token = "0x2000075")]
	public enum Languages
	{
		[Token(Token = "0x40002D8")]
		English = 0,
		[Token(Token = "0x40002D9")]
		French = 1,
		[Token(Token = "0x40002DA")]
		Spanish = 2,
		[Token(Token = "0x40002DB")]
		German = 3,
		[Token(Token = "0x40002DC")]
		Russian = 5,
		[Token(Token = "0x40002DD")]
		Portuguese = 6,
		[Token(Token = "0x40002DE")]
		[Hidden]
		Asterisk = 7,
		[Token(Token = "0x40002DF")]
		[Hidden]
		Korean = 8,
		[Token(Token = "0x40002E0")]
		Japanese = 9,
		[Token(Token = "0x40002E1")]
		Simplified_Mandarin = 10
	}

	[Token(Token = "0x2000076")]
	public delegate void HandleLanguageChanged(Languages newLanguage);

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Languages? _currentLanguage;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9A96C", Offset = "0xE9A96C")]
	private static Dictionary<string, int> <>f__switch$map2;

	[Token(Token = "0x17000038")]
	public static bool IsOverridingLanguage
	{
		[Token(Token = "0x600038E")]
		[Address(RVA = "0x196E084", Offset = "0x196E084", VA = "0x196E084")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600038F")]
		[Address(RVA = "0x196E0F4", Offset = "0x196E0F4", VA = "0x196E0F4")]
		set
		{
		}
	}

	[Token(Token = "0x17000039")]
	public static Languages OverridingLanguage
	{
		[Token(Token = "0x6000390")]
		[Address(RVA = "0x196E358", Offset = "0x196E358", VA = "0x196E358")]
		get
		{
			return default(Languages);
		}
		[Token(Token = "0x6000391")]
		[Address(RVA = "0x196E53C", Offset = "0x196E53C", VA = "0x196E53C")]
		private set
		{
		}
	}

	[Token(Token = "0x14000032")]
	public static event HandleLanguageChanged OnLanguageChanged
	{
		[Token(Token = "0x600038B")]
		[Address(RVA = "0x196DA7C", Offset = "0x196DA7C", VA = "0x196DA7C")]
		add
		{
		}
		[Token(Token = "0x600038C")]
		[Address(RVA = "0x196DBF0", Offset = "0x196DBF0", VA = "0x196DBF0")]
		remove
		{
		}
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0x196DD64", Offset = "0x196DD64", VA = "0x196DD64")]
	private static void FireOnLanguageChanged(Languages newLanguage)
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0x196E60C", Offset = "0x196E60C", VA = "0x196E60C")]
	public static string GetLanguagesISODesignation(Languages languages)
	{
		return null;
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0x196E67C", Offset = "0x196E67C", VA = "0x196E67C")]
	public static Languages GetCurrentSystemLanguage()
	{
		return default(Languages);
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0x196E708", Offset = "0x196E708", VA = "0x196E708")]
	public static Languages GetLanguage(SystemLanguage language)
	{
		return default(Languages);
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0x196E778", Offset = "0x196E778", VA = "0x196E778")]
	public static Languages GetLanguageFromSteamString(string steamworksLanguageId)
	{
		return default(Languages);
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0x196E1D8", Offset = "0x196E1D8", VA = "0x196E1D8")]
	public static Languages GetCurrentLanguage()
	{
		return default(Languages);
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0x196EB78", Offset = "0x196EB78", VA = "0x196EB78")]
	private static Languages GetDefault()
	{
		return default(Languages);
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0x196EBF0", Offset = "0x196EBF0", VA = "0x196EBF0")]
	public static void SetCurrentLanguage(Languages lang)
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0x196ED0C", Offset = "0x196ED0C", VA = "0x196ED0C")]
	public static void SetOverridingLanguage(Languages lang)
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0x196EE10", Offset = "0x196EE10", VA = "0x196EE10")]
	public static string GetLocalizedVersionOfFileDirectory(string currentFileDirectory)
	{
		return null;
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0x196EE98", Offset = "0x196EE98", VA = "0x196EE98")]
	public static string GetLocalizedVersionOfFileDirectory(string currentFileDirectory, Languages language)
	{
		return null;
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0x196F2B4", Offset = "0x196F2B4", VA = "0x196F2B4")]
	public static CultureInfo GetCultureInfo(Languages language)
	{
		return null;
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0x196F5C0", Offset = "0x196F5C0", VA = "0x196F5C0")]
	public static CultureInfo GetCurrentCultureInfo()
	{
		return null;
	}
}
[Token(Token = "0x2000077")]
public class LocalizedAttribute : BaseLocalizedAttribute
{
	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private string _id;

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0x196F710", Offset = "0x196F710", VA = "0x196F710")]
	public LocalizedAttribute(string id)
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0x196F730", Offset = "0x196F730", VA = "0x196F730", Slot = "6")]
	protected override string GetLocId(FieldInfo fieldInfo, object instance)
	{
		return null;
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0x196F738", Offset = "0x196F738", VA = "0x196F738")]
	public string Localize()
	{
		return null;
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0x196F7C4", Offset = "0x196F7C4", VA = "0x196F7C4")]
	public bool Localize(out string localized)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000078")]
public abstract class BaseLocalizedAttribute : PropertyAttribute
{
	[Token(Token = "0x60003A7")]
	[Address(RVA = "0x19DE260", Offset = "0x19DE260", VA = "0x19DE260")]
	protected BaseLocalizedAttribute()
	{
	}

	[Token(Token = "0x60003A8")]
	public static void LocalizeStrings<T>(T objectToLocalize)
	{
	}

	[Token(Token = "0x60003A9")]
	protected abstract string GetLocId(FieldInfo fieldInfo, object instance);
}
[Token(Token = "0x2000079")]
public class LocIdAttribute : BaseLocalizedAttribute
{
	[Token(Token = "0x60003AA")]
	[Address(RVA = "0x196F858", Offset = "0x196F858", VA = "0x196F858")]
	public LocIdAttribute()
	{
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0x196F860", Offset = "0x196F860", VA = "0x196F860", Slot = "6")]
	protected override string GetLocId(FieldInfo fieldInfo, object instance)
	{
		return null;
	}

	[Token(Token = "0x60003AC")]
	public new static void LocalizeStrings<T>(T objectToLocalize)
	{
	}
}
[Token(Token = "0x200007A")]
public class LogHandler
{
	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static LogHandler _instance;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static bool _quitOnException;

	[Token(Token = "0x1700003A")]
	public static bool QuitOnException
	{
		[Token(Token = "0x60003B0")]
		[Address(RVA = "0x1970B90", Offset = "0x1970B90", VA = "0x1970B90")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003B1")]
		[Address(RVA = "0x1970C1C", Offset = "0x1970C1C", VA = "0x1970C1C")]
		set
		{
		}
	}

	[Token(Token = "0x14000033")]
	private static event Application.LogCallback _clientCallbacks
	{
		[Token(Token = "0x60003AE")]
		[Address(RVA = "0x19708A8", Offset = "0x19708A8", VA = "0x19708A8")]
		add
		{
		}
		[Token(Token = "0x60003AF")]
		[Address(RVA = "0x1970A1C", Offset = "0x1970A1C", VA = "0x1970A1C")]
		remove
		{
		}
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0x1970808", Offset = "0x1970808", VA = "0x1970808")]
	private LogHandler()
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0x1970CAC", Offset = "0x1970CAC", VA = "0x1970CAC")]
	public static void BeginListening()
	{
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0x1970D90", Offset = "0x1970D90", VA = "0x1970D90")]
	private void HandleLog(string condition, string stackTrace, LogType type)
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0x1970F00", Offset = "0x1970F00", VA = "0x1970F00")]
	public static void RegisterLogCallback(Application.LogCallback callback)
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0x1970F80", Offset = "0x1970F80", VA = "0x1970F80")]
	public static void UnregisterLogCallback(Application.LogCallback callback)
	{
	}
}
[Token(Token = "0x200007B")]
public static class CamouflajCriExtension
{
	[Token(Token = "0x60003B7")]
	[Address(RVA = "0x19E0570", Offset = "0x19E0570", VA = "0x19E0570")]
	public static bool GetCueInfo(string cueSheet, string cueName, out CriAtomEx.CueInfo cueInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0x19E09F8", Offset = "0x19E09F8", VA = "0x19E09F8")]
	public static long GetCueLength(string cueSheet, string cueName)
	{
		return default(long);
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0x19E0A50", Offset = "0x19E0A50", VA = "0x19E0A50")]
	public static string GetCueUserData(string cueSheet, string cueName)
	{
		return null;
	}
}
[Token(Token = "0x200007C")]
public static class CriAtomPlugin
{
	[Token(Token = "0x40002E6")]
	public const string criAtomUnityEditorVersion = "Ver.0.21.07";

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int initializationCount;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static float timeSinceStartup;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static CriWare.CpuUsage cpuUsage;

	[Token(Token = "0x1700003B")]
	public static bool isInitialized
	{
		[Token(Token = "0x60003BB")]
		[Address(RVA = "0x1905728", Offset = "0x1905728", VA = "0x1905728")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0x1905724", Offset = "0x1905724", VA = "0x1905724")]
	public static void Log(string log)
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0x19057C0", Offset = "0x19057C0", VA = "0x19057C0")]
	public static void SetConfigParameters(int max_virtual_voices, int max_voice_limit_groups, int max_categories, int num_standard_memory_voices, int num_standard_streaming_voices, int num_hca_mx_memory_voices, int num_hca_mx_streaming_voices, int output_sampling_rate, int num_asr_output_channels, bool uses_in_game_preview, float server_frequency)
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0x19059B8", Offset = "0x19059B8", VA = "0x19059B8")]
	public static void SetConfigAdditionalParameters_PC(long buffering_time_pc)
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0x1905B10", Offset = "0x1905B10", VA = "0x1905B10")]
	public static void SetConfigAdditionalParameters_IOS(uint buffering_time_ios, bool override_ipod_music_ios)
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0x1905C60", Offset = "0x1905C60", VA = "0x1905C60")]
	public static void SetConfigAdditionalParameters_ANDROID(int num_low_delay_memory_voices, int num_low_delay_streaming_voices, int sound_buffering_time, int sound_start_buffering_time)
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0x1905DD4", Offset = "0x1905DD4", VA = "0x1905DD4")]
	public static void SetConfigAdditionalParameters_VITA(int num_atrac9_memory_voices, int num_atrac9_streaming_voices, int num_mana_decoders)
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0x1905DD8", Offset = "0x1905DD8", VA = "0x1905DD8")]
	public static void SetConfigAdditionalParameters_PS4(int num_atrac9_memory_voices, int num_atrac9_streaming_voices, bool use_audio3d, int num_audio3d_memory_voices, int num_audio3d_streaming_voices)
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0x1905DDC", Offset = "0x1905DDC", VA = "0x1905DDC")]
	public static void SetMaxSamplingRateForStandardVoicePool(int sampling_rate_for_memory, int sampling_rate_for_streaming)
	{
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0x1905F2C", Offset = "0x1905F2C", VA = "0x1905F2C")]
	public static int GetRequiredMaxVirtualVoices(CriAtomConfig atomConfig)
	{
		return default(int);
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0x1903A70", Offset = "0x1903A70", VA = "0x1903A70")]
	public static void InitializeLibrary()
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0x1903E68", Offset = "0x1903E68", VA = "0x1903E68")]
	public static void FinalizeLibrary()
	{
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0x19067A0", Offset = "0x19067A0", VA = "0x19067A0")]
	public static void Pause(bool pause)
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0x1906918", Offset = "0x1906918", VA = "0x1906918")]
	public static CriWare.CpuUsage GetCpuUsage()
	{
		return default(CriWare.CpuUsage);
	}

	[PreserveSig]
	[Token(Token = "0x60003C8")]
	[Address(RVA = "0x19058B0", Offset = "0x19058B0", VA = "0x19058B0")]
	private static extern void criAtomUnity_SetConfigParameters(int max_virtual_voices, int max_voice_limit_groups, int max_categories, int num_standard_memory_voices, int num_standard_streaming_voices, int num_hca_mx_memory_voices, int num_hca_mx_streaming_voices, int output_sampling_rate, int num_asr_output_channels, bool uses_in_game_preview, float server_frequency);

	[PreserveSig]
	[Token(Token = "0x60003C9")]
	[Address(RVA = "0x1905A48", Offset = "0x1905A48", VA = "0x1905A48")]
	private static extern void criAtomUnity_SetConfigAdditionalParameters_PC(long buffering_time_pc);

	[PreserveSig]
	[Token(Token = "0x60003CA")]
	[Address(RVA = "0x1905B98", Offset = "0x1905B98", VA = "0x1905B98")]
	private static extern void criAtomUnity_SetConfigAdditionalParameters_IOS(uint buffering_time_ios, bool override_ipod_music_ios);

	[PreserveSig]
	[Token(Token = "0x60003CB")]
	[Address(RVA = "0x1905D00", Offset = "0x1905D00", VA = "0x1905D00")]
	private static extern void criAtomUnity_SetConfigAdditionalParameters_ANDROID(int num_low_delay_memory_voices, int num_low_delay_streaming_voices, int sound_buffering_time, int sound_start_buffering_time);

	[PreserveSig]
	[Token(Token = "0x60003CC")]
	[Address(RVA = "0x1906208", Offset = "0x1906208", VA = "0x1906208")]
	private static extern void criAtomUnity_Initialize();

	[PreserveSig]
	[Token(Token = "0x60003CD")]
	[Address(RVA = "0x1906538", Offset = "0x1906538", VA = "0x1906538")]
	private static extern void criAtomUnity_Finalize();

	[PreserveSig]
	[Token(Token = "0x60003CE")]
	[Address(RVA = "0x1906858", Offset = "0x1906858", VA = "0x1906858")]
	private static extern void criAtomUnity_Pause(bool pause);

	[PreserveSig]
	[Token(Token = "0x60003CF")]
	[Address(RVA = "0x1906B28", Offset = "0x1906B28", VA = "0x1906B28")]
	public static extern uint criAtomUnity_GetAllocatedHeapSize();

	[PreserveSig]
	[Token(Token = "0x60003D0")]
	[Address(RVA = "0x1906BD8", Offset = "0x1906BD8", VA = "0x1906BD8")]
	public static extern void criAtomUnity_ControlDataCompatibility(int code);

	[PreserveSig]
	[Token(Token = "0x60003D1")]
	[Address(RVA = "0x1906C98", Offset = "0x1906C98", VA = "0x1906C98")]
	public static extern void criAtomUnitySeqencer_SetEventCallback(IntPtr cbfunc, string gameobj_name, string func_name, string separator_string);

	[PreserveSig]
	[Token(Token = "0x60003D2")]
	[Address(RVA = "0x1905E64", Offset = "0x1905E64", VA = "0x1905E64")]
	private static extern void criAtomUnity_SetMaxSamplingRateForStandardVoicePool(int sampling_rate_for_memory, int sampling_rate_for_streaming);

	[PreserveSig]
	[Token(Token = "0x60003D3")]
	[Address(RVA = "0x1906DB4", Offset = "0x1906DB4", VA = "0x1906DB4")]
	public static extern void criAtomUnity_BeginLeCompatibleMode();

	[PreserveSig]
	[Token(Token = "0x60003D4")]
	[Address(RVA = "0x1906E64", Offset = "0x1906E64", VA = "0x1906E64")]
	public static extern void criAtomUnity_EndLeCompatibleMode();
}
[Serializable]
[Token(Token = "0x200007D")]
public class CriAtomCueSheet
{
	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string name;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string acbFile;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string awbFile;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public CriAtomExAcb acb;

	[Token(Token = "0x1700003C")]
	public bool IsLoading
	{
		[Token(Token = "0x60003D7")]
		[Address(RVA = "0x19E4344", Offset = "0x19E4344", VA = "0x19E4344")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0x19E5920", Offset = "0x19E5920", VA = "0x19E5920")]
	public CriAtomCueSheet()
	{
	}
}
[Token(Token = "0x200007E")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9A9D0", Offset = "0xE9A9D0")]
public class CriAtom : MonoBehaviour
{
	[Token(Token = "0x200050B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AA58", Offset = "0xE9AA58")]
	private sealed class <MargeCueSheet>c__AnonStorey0
	{
		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal int i;

		[Token(Token = "0x4001982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal CriAtom $this;

		[Token(Token = "0x6002378")]
		[Address(RVA = "0x19E59EC", Offset = "0x19E59EC", VA = "0x19E59EC")]
		public <MargeCueSheet>c__AnonStorey0()
		{
		}

		[Token(Token = "0x6002379")]
		[Address(RVA = "0x19E6058", Offset = "0x19E6058", VA = "0x19E6058")]
		internal bool <>m__0(CriAtomCueSheet sheet)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string acfFile;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public CriAtomCueSheet[] cueSheets;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string dspBusSetting;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool dontDestroyOnLoad;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AA04", Offset = "0xE9AA04")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9AA04", Offset = "0xE9AA04")]
	private static CriAtom <instance>k__BackingField;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static CriAtomExSequencer.EventCbFunc eventUserCbFunc;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Queue<string> eventQueue;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static string alternativeAudioDirectory;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool dontRemoveExistsCueSheet;

	[Token(Token = "0x1700003D")]
	private static CriAtom instance
	{
		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x19E3370", Offset = "0x19E3370", VA = "0x19E3370")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AA38", Offset = "0xE9AA38")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003DA")]
		[Address(RVA = "0x19E33FC", Offset = "0x19E33FC", VA = "0x19E33FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AA48", Offset = "0xE9AA48")]
		set
		{
		}
	}

	[Token(Token = "0x1700003E")]
	public static bool CueSheetsAreLoading
	{
		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x19E425C", Offset = "0x19E425C", VA = "0x19E425C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0x19E328C", Offset = "0x19E328C", VA = "0x19E328C")]
	public CriAtom()
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0x19E348C", Offset = "0x19E348C", VA = "0x19E348C")]
	public static void AttachDspBusSetting(string settingName)
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0x19E35D8", Offset = "0x19E35D8", VA = "0x19E35D8")]
	public static void DetachDspBusSetting()
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0x19E36AC", Offset = "0x19E36AC", VA = "0x19E36AC")]
	public static CriAtomCueSheet GetCueSheet(string name)
	{
		return null;
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0x19E3848", Offset = "0x19E3848", VA = "0x19E3848")]
	public static CriAtomCueSheet AddCueSheet(string name, string acbFile, string awbFile, [Optional] CriFsBinder binder)
	{
		return null;
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0x19E3D1C", Offset = "0x19E3D1C", VA = "0x19E3D1C")]
	public static CriAtomCueSheet AddCueSheet(string name, byte[] acbData, string awbFile, [Optional] CriFsBinder awbBinder)
	{
		return null;
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0x19E3FB4", Offset = "0x19E3FB4", VA = "0x19E3FB4")]
	public static void RemoveCueSheet(string name)
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0x19E066C", Offset = "0x19E066C", VA = "0x19E066C")]
	public static CriAtomExAcb GetAcb(string cueSheetName)
	{
		return null;
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0x19E4358", Offset = "0x19E4358", VA = "0x19E4358")]
	public static void SetCategoryVolume(string name, float volume)
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0x19E4360", Offset = "0x19E4360", VA = "0x19E4360")]
	public static void SetCategoryVolume(int id, float volume)
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0x19E4368", Offset = "0x19E4368", VA = "0x19E4368")]
	public static float GetCategoryVolume(string name)
	{
		return default(float);
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0x19E4370", Offset = "0x19E4370", VA = "0x19E4370")]
	public static float GetCategoryVolume(int id)
	{
		return default(float);
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0x19E4378", Offset = "0x19E4378", VA = "0x19E4378")]
	public static void SetBusAnalyzer(bool sw)
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0x19E4454", Offset = "0x19E4454", VA = "0x19E4454")]
	public static CriAtomExAsr.BusAnalyzerInfo GetBusAnalyzerInfo(int bus)
	{
		return default(CriAtomExAsr.BusAnalyzerInfo);
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0x19E4630", Offset = "0x19E4630", VA = "0x19E4630")]
	public static string AlternativeAudioDirectory()
	{
		return null;
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0x19E47E8", Offset = "0x19E47E8", VA = "0x19E47E8")]
	private string GetFileDirectory(string fileName)
	{
		return null;
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0x19E49A4", Offset = "0x19E49A4", VA = "0x19E49A4")]
	private void Setup()
	{
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0x19E4CC8", Offset = "0x19E4CC8", VA = "0x19E4CC8")]
	private void Shutdown()
	{
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0x19E4E28", Offset = "0x19E4E28", VA = "0x19E4E28")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0x19E5438", Offset = "0x19E5438", VA = "0x19E5438")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0x19E5508", Offset = "0x19E5508", VA = "0x19E5508")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0x19E55D8", Offset = "0x19E55D8", VA = "0x19E55D8")]
	private void Update()
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0x19E3744", Offset = "0x19E3744", VA = "0x19E3744")]
	public CriAtomCueSheet GetCueSheetInternal(string name)
	{
		return null;
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0x19E3980", Offset = "0x19E3980", VA = "0x19E3980")]
	public CriAtomCueSheet AddCueSheetInternal(string name, string acbFile, string awbFile, CriFsBinder binder)
	{
		return null;
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0x19E404C", Offset = "0x19E404C", VA = "0x19E404C")]
	public void RemoveCueSheetInternal(string name)
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0x19E5174", Offset = "0x19E5174", VA = "0x19E5174")]
	private void MargeCueSheet(CriAtomCueSheet[] newCueSheets, bool newDontRemoveExistsCueSheet)
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0x19E3B70", Offset = "0x19E3B70", VA = "0x19E3B70")]
	private CriAtomExAcb LoadAcbFile(CriFsBinder binder, string acbFile, string awbFile)
	{
		return null;
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0x19E3E98", Offset = "0x19E3E98", VA = "0x19E3E98")]
	private CriAtomExAcb LoadAcbData(byte[] acbData, CriFsBinder binder, string awbFile)
	{
		return null;
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0x19E5BB0", Offset = "0x19E5BB0", VA = "0x19E5BB0")]
	public void EventCallbackFromNative(string eventString)
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0x19E5DC8", Offset = "0x19E5DC8", VA = "0x19E5DC8")]
	public static void SetEventCallback(CriAtomExSequencer.EventCbFunc func, string separator)
	{
	}
}
[Token(Token = "0x200007F")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9AA68", Offset = "0xE9AA68")]
public class CriAtomListener : MonoBehaviour
{
	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AA9C", Offset = "0xE9AA9C")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9AA9C", Offset = "0xE9AA9C")]
	private static CriAtomListener <activeListener>k__BackingField;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AAD0", Offset = "0xE9AAD0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9AAD0", Offset = "0xE9AAD0")]
	private static CriAtomEx3dListener <sharedNativeListener>k__BackingField;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool activateListenerOnEnable;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector3 lastPosition;

	[Token(Token = "0x1700003F")]
	public static CriAtomListener activeListener
	{
		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x1904944", Offset = "0x1904944", VA = "0x1904944")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AB04", Offset = "0xE9AB04")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003FC")]
		[Address(RVA = "0x19049A8", Offset = "0x19049A8", VA = "0x19049A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AB14", Offset = "0xE9AB14")]
		private set
		{
		}
	}

	[Token(Token = "0x17000040")]
	public static CriAtomEx3dListener sharedNativeListener
	{
		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x1904A0C", Offset = "0x1904A0C", VA = "0x1904A0C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AB24", Offset = "0xE9AB24")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x1904A70", Offset = "0x1904A70", VA = "0x1904A70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AB34", Offset = "0xE9AB34")]
		private set
		{
		}
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0x190493C", Offset = "0x190493C", VA = "0x190493C")]
	public CriAtomListener()
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0x1904AD4", Offset = "0x1904AD4", VA = "0x1904AD4")]
	public static void CreateSharedNativeListener()
	{
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0x1904BEC", Offset = "0x1904BEC", VA = "0x1904BEC")]
	public static void DestroySharedNativeListener()
	{
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0x1904CB4", Offset = "0x1904CB4", VA = "0x1904CB4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0x19050D4", Offset = "0x19050D4", VA = "0x19050D4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0x19052E4", Offset = "0x19052E4", VA = "0x19052E4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0x1904DB0", Offset = "0x1904DB0", VA = "0x1904DB0")]
	public void ActivateListener()
	{
	}
}
[Token(Token = "0x2000080")]
public class CriAtomAcfInfo
{
	[Token(Token = "0x2000081")]
	public class InfoBase
	{
		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string name;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int id;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string comment;

		[Token(Token = "0x6000408")]
		[Address(RVA = "0x19E6888", Offset = "0x19E6888", VA = "0x19E6888")]
		public InfoBase()
		{
		}
	}

	[Token(Token = "0x2000082")]
	public class AcfInfo : InfoBase
	{
		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public string acfPath;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<AcbInfo> acbInfoList;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private List<AcbInfo> tmpAcbInfoList;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string atomGuid;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public string dspBusSetting;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<string> aisacControlNameList;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public string acfFilePath;

		[Token(Token = "0x6000409")]
		[Address(RVA = "0x19E65C4", Offset = "0x19E65C4", VA = "0x19E65C4")]
		public AcfInfo(string n, int inId, string com, string inAcfPath, string _guid, string _dspBusSetting)
		{
		}
	}

	[Token(Token = "0x2000083")]
	public class AcbInfo : InfoBase
	{
		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public string acbPath;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string awbPath;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public string atomGuid;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<int, CueInfo> cueInfoList;

		[Token(Token = "0x600040A")]
		[Address(RVA = "0x19E6760", Offset = "0x19E6760", VA = "0x19E6760")]
		public AcbInfo(string n, int inId, string com, string inAcbPath, string inAwbPath, string _guid)
		{
		}
	}

	[Token(Token = "0x2000084")]
	public class CueInfo : InfoBase
	{
		[Token(Token = "0x600040B")]
		[Address(RVA = "0x19E693C", Offset = "0x19E693C", VA = "0x19E693C")]
		public CueInfo(string n, int inId, string com)
		{
		}
	}

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AcfInfo acfInfo;

	[Token(Token = "0x6000405")]
	[Address(RVA = "0x19E614C", Offset = "0x19E614C", VA = "0x19E614C")]
	public CriAtomAcfInfo()
	{
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0x19E6154", Offset = "0x19E6154", VA = "0x19E6154")]
	public static bool GetCueInfo(bool forceReload, string searchPath)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000085")]
public class CriAtomServer : MonoBehaviour
{
	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CriAtomServer _instance;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private int pauseCallCount;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int onApplicationPauseCallCount;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Action<bool> onApplicationPausePreProcess;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action<bool> onApplicationPausePostProcess;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool paused;

	[Token(Token = "0x17000041")]
	public static CriAtomServer instance
	{
		[Token(Token = "0x600040D")]
		[Address(RVA = "0x1906F98", Offset = "0x1906F98", VA = "0x1906F98")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0x1906F90", Offset = "0x1906F90", VA = "0x1906F90")]
	public CriAtomServer()
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0x19062B8", Offset = "0x19062B8", VA = "0x19062B8")]
	public static void CreateInstance()
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0x19063E4", Offset = "0x19063E4", VA = "0x19063E4")]
	public static void DestroyInstance()
	{
	}

	[Token(Token = "0x6000410")]
	[Address(RVA = "0x190727C", Offset = "0x190727C", VA = "0x190727C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0x19073D8", Offset = "0x19073D8", VA = "0x19073D8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0x19073DC", Offset = "0x19073DC", VA = "0x19073DC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0x19074FC", Offset = "0x19074FC", VA = "0x19074FC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0x1907578", Offset = "0x1907578", VA = "0x1907578")]
	private bool CheckPauseCount(ref int currentCount, bool pause)
	{
		return default(bool);
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0x1907534", Offset = "0x1907534", VA = "0x1907534")]
	private void OnApplicationPause(bool appPause)
	{
	}

	[Token(Token = "0x6000416")]
	[Address(RVA = "0x19075C0", Offset = "0x19075C0", VA = "0x19075C0")]
	private void ProcessApplicationPause(bool appPause)
	{
	}
}
[Token(Token = "0x2000086")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9AB44", Offset = "0xE9AB44")]
public class CriAtomSource : MonoBehaviour
{
	[Token(Token = "0x2000087")]
	public enum Status
	{
		[Token(Token = "0x400031E")]
		Stop,
		[Token(Token = "0x400031F")]
		Prep,
		[Token(Token = "0x4000320")]
		Playing,
		[Token(Token = "0x4000321")]
		PlayEnd,
		[Token(Token = "0x4000322")]
		Error
	}

	[Token(Token = "0x200050C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9ACC0", Offset = "0xE9ACC0")]
	private sealed class <PlayAsync>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal CriAtomExAcb <acb>__0;

		[Token(Token = "0x4001984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal string cueName;

		[Token(Token = "0x4001985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal CriAtomSource $this;

		[Token(Token = "0x4001986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x4001987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4001988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x17000272")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600237C")]
			[Address(RVA = "0x1908B6C", Offset = "0x1908B6C", VA = "0x1908B6C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000273")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600237D")]
			[Address(RVA = "0x1908B74", Offset = "0x1908B74", VA = "0x1908B74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600237A")]
		[Address(RVA = "0x19086A0", Offset = "0x19086A0", VA = "0x19086A0")]
		[DebuggerHidden]
		public <PlayAsync>c__Iterator0()
		{
		}

		[Token(Token = "0x600237B")]
		[Address(RVA = "0x1908870", Offset = "0x1908870", VA = "0x1908870", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600237E")]
		[Address(RVA = "0x1908B7C", Offset = "0x1908B7C", VA = "0x1908B7C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600237F")]
		[Address(RVA = "0x1908B90", Offset = "0x1908B90", VA = "0x1908B90", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AB78", Offset = "0xE9AB78")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9AB78", Offset = "0xE9AB78")]
	private CriAtomExPlayer <player>k__BackingField;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9ABAC", Offset = "0xE9ABAC")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9ABAC", Offset = "0xE9ABAC")]
	private CriAtomEx3dSource <source>k__BackingField;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Vector3 lastPosition;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool hasValidPosition;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool _playOnStart;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private string _cueName;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string _cueSheet;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private bool _use3dPositioning;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	[SerializeField]
	private bool _loop;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float _volume;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float _pitch;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private bool _androidUseLowLatencyVoicePool;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	[SerializeField]
	private bool need_to_player_update_all;

	[Token(Token = "0x17000042")]
	public CriAtomExPlayer player
	{
		[Token(Token = "0x600041A")]
		[Address(RVA = "0x19077B0", Offset = "0x19077B0", VA = "0x19077B0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AC80", Offset = "0xE9AC80")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000419")]
		[Address(RVA = "0x19077A8", Offset = "0x19077A8", VA = "0x19077A8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AC70", Offset = "0xE9AC70")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000043")]
	public CriAtomEx3dSource source
	{
		[Token(Token = "0x600041C")]
		[Address(RVA = "0x19077C0", Offset = "0x19077C0", VA = "0x19077C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9ACA0", Offset = "0xE9ACA0")]
		get
		{
			return null;
		}
		[Token(Token = "0x600041B")]
		[Address(RVA = "0x19077B8", Offset = "0x19077B8", VA = "0x19077B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AC90", Offset = "0xE9AC90")]
		private set
		{
		}
	}

	[Token(Token = "0x17000044")]
	public bool playOnStart
	{
		[Token(Token = "0x600041D")]
		[Address(RVA = "0x19077C8", Offset = "0x19077C8", VA = "0x19077C8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600041E")]
		[Address(RVA = "0x19077D0", Offset = "0x19077D0", VA = "0x19077D0")]
		set
		{
		}
	}

	[Token(Token = "0x17000045")]
	public string cueName
	{
		[Token(Token = "0x600041F")]
		[Address(RVA = "0x19077D8", Offset = "0x19077D8", VA = "0x19077D8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000420")]
		[Address(RVA = "0x19077E0", Offset = "0x19077E0", VA = "0x19077E0")]
		set
		{
		}
	}

	[Token(Token = "0x17000046")]
	public string cueSheet
	{
		[Token(Token = "0x6000421")]
		[Address(RVA = "0x19077E8", Offset = "0x19077E8", VA = "0x19077E8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000422")]
		[Address(RVA = "0x19077F0", Offset = "0x19077F0", VA = "0x19077F0")]
		set
		{
		}
	}

	[Token(Token = "0x17000047")]
	public bool use3dPositioning
	{
		[Token(Token = "0x6000424")]
		[Address(RVA = "0x1907838", Offset = "0x1907838", VA = "0x1907838")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000423")]
		[Address(RVA = "0x19077F8", Offset = "0x19077F8", VA = "0x19077F8")]
		set
		{
		}
	}

	[Token(Token = "0x17000048")]
	public bool loop
	{
		[Token(Token = "0x6000426")]
		[Address(RVA = "0x1907854", Offset = "0x1907854", VA = "0x1907854")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000425")]
		[Address(RVA = "0x190784C", Offset = "0x190784C", VA = "0x190784C")]
		set
		{
		}
	}

	[Token(Token = "0x17000049")]
	public float volume
	{
		[Token(Token = "0x6000428")]
		[Address(RVA = "0x190788C", Offset = "0x190788C", VA = "0x190788C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000427")]
		[Address(RVA = "0x190785C", Offset = "0x190785C", VA = "0x190785C")]
		set
		{
		}
	}

	[Token(Token = "0x1700004A")]
	public float pitch
	{
		[Token(Token = "0x600042A")]
		[Address(RVA = "0x19078C4", Offset = "0x19078C4", VA = "0x19078C4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000429")]
		[Address(RVA = "0x1907894", Offset = "0x1907894", VA = "0x1907894")]
		set
		{
		}
	}

	[Token(Token = "0x1700004B")]
	public float pan3dAngle
	{
		[Token(Token = "0x600042C")]
		[Address(RVA = "0x1907908", Offset = "0x1907908", VA = "0x1907908")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600042B")]
		[Address(RVA = "0x19078CC", Offset = "0x19078CC", VA = "0x19078CC")]
		set
		{
		}
	}

	[Token(Token = "0x1700004C")]
	public float pan3dDistance
	{
		[Token(Token = "0x600042E")]
		[Address(RVA = "0x1907970", Offset = "0x1907970", VA = "0x1907970")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600042D")]
		[Address(RVA = "0x1907934", Offset = "0x1907934", VA = "0x1907934")]
		set
		{
		}
	}

	[Token(Token = "0x1700004D")]
	public int startTime
	{
		[Token(Token = "0x6000430")]
		[Address(RVA = "0x19079E8", Offset = "0x19079E8", VA = "0x19079E8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600042F")]
		[Address(RVA = "0x190799C", Offset = "0x190799C", VA = "0x190799C")]
		set
		{
		}
	}

	[Token(Token = "0x1700004E")]
	public long time
	{
		[Token(Token = "0x6000431")]
		[Address(RVA = "0x1907A14", Offset = "0x1907A14", VA = "0x1907A14")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x1700004F")]
	public long length
	{
		[Token(Token = "0x6000432")]
		[Address(RVA = "0x1907A30", Offset = "0x1907A30", VA = "0x1907A30")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x17000050")]
	public Status status
	{
		[Token(Token = "0x6000433")]
		[Address(RVA = "0x1907A44", Offset = "0x1907A44", VA = "0x1907A44")]
		get
		{
			return default(Status);
		}
	}

	[Token(Token = "0x17000051")]
	public int voicePriority
	{
		[Token(Token = "0x6000434")]
		[Address(RVA = "0x1907A5C", Offset = "0x1907A5C", VA = "0x1907A5C")]
		set
		{
		}
	}

	[Token(Token = "0x17000052")]
	public bool androidUseLowLatencyVoicePool
	{
		[Token(Token = "0x6000435")]
		[Address(RVA = "0x1907A8C", Offset = "0x1907A8C", VA = "0x1907A8C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000436")]
		[Address(RVA = "0x1907A94", Offset = "0x1907A94", VA = "0x1907A94")]
		set
		{
		}
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0x19076D8", Offset = "0x19076D8", VA = "0x19076D8")]
	public CriAtomSource()
	{
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0x1907840", Offset = "0x1907840", VA = "0x1907840")]
	protected void SetNeedToPlayerUpdateAll()
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0x1907A9C", Offset = "0x1907A9C", VA = "0x1907A9C", Slot = "4")]
	protected virtual void InternalInitialize()
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0x1907B60", Offset = "0x1907B60", VA = "0x1907B60", Slot = "5")]
	protected virtual void InternalFinalize()
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0x1907C20", Offset = "0x1907C20", VA = "0x1907C20")]
	private void Awake()
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0x1907C30", Offset = "0x1907C30", VA = "0x1907C30")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0x1907C64", Offset = "0x1907C64", VA = "0x1907C64")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0x1907C74", Offset = "0x1907C74", VA = "0x1907C74")]
	protected bool SetInitialSourcePosition()
	{
		return default(bool);
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0x1907D00", Offset = "0x1907D00", VA = "0x1907D00", Slot = "6")]
	protected virtual void SetInitialParameters()
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0x1907ED0", Offset = "0x1907ED0", VA = "0x1907ED0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0x1907F94", Offset = "0x1907F94", VA = "0x1907F94")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0x1908184", Offset = "0x1908184", VA = "0x1908184")]
	public void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0x19082A0", Offset = "0x19082A0", VA = "0x19082A0")]
	public CriAtomExPlayback Play()
	{
		return default(CriAtomExPlayback);
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0x19082A8", Offset = "0x19082A8", VA = "0x19082A8")]
	public CriAtomExPlayback Play(string cueName)
	{
		return default(CriAtomExPlayback);
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0x1908458", Offset = "0x1908458", VA = "0x1908458")]
	public CriAtomExPlayback Play(int cueId)
	{
		return default(CriAtomExPlayback);
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0x1907ED4", Offset = "0x1907ED4", VA = "0x1907ED4")]
	private void PlayOnStart()
	{
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0x1908608", Offset = "0x1908608", VA = "0x1908608")]
	[DebuggerHidden]
	private IEnumerator PlayAsync(string cueName)
	{
		return null;
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0x19086A8", Offset = "0x19086A8", VA = "0x19086A8")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0x19086D0", Offset = "0x19086D0", VA = "0x19086D0")]
	public void StopImmediate()
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0x19086FC", Offset = "0x19086FC", VA = "0x19086FC")]
	public void Pause(bool sw)
	{
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0x1908740", Offset = "0x1908740", VA = "0x1908740")]
	public bool IsPaused()
	{
		return default(bool);
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0x1908768", Offset = "0x1908768", VA = "0x1908768")]
	public void SetBusSendLevel(int busId, float level)
	{
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0x1908794", Offset = "0x1908794", VA = "0x1908794")]
	public void SetBusSendLevelOffset(int busId, float levelOffset)
	{
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0x19087C0", Offset = "0x19087C0", VA = "0x19087C0")]
	public void SetAisac(string controlName, float value)
	{
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0x19087EC", Offset = "0x19087EC", VA = "0x19087EC")]
	public void SetAisac(uint controlId, float value)
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0x1908818", Offset = "0x1908818", VA = "0x1908818")]
	public void AttachToAnalyzer(CriAtomExPlayerOutputAnalyzer analyzer)
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0x190884C", Offset = "0x190884C", VA = "0x190884C")]
	public void DetachFromAnalyzer(CriAtomExPlayerOutputAnalyzer analyzer)
	{
	}
}
[Token(Token = "0x2000088")]
public class CriStructMemory<Type> : IDisposable
{
	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AD20", Offset = "0xE9AD20")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9AD20", Offset = "0xE9AD20")]
	private byte[] <bytes>k__BackingField;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private GCHandle gch;

	[Token(Token = "0x17000053")]
	public byte[] bytes
	{
		[Token(Token = "0x6000452")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AD54", Offset = "0xE9AD54")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000453")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AD64", Offset = "0xE9AD64")]
		private set
		{
		}
	}

	[Token(Token = "0x17000054")]
	public IntPtr ptr
	{
		[Token(Token = "0x6000454")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x6000451")]
	public CriStructMemory()
	{
	}

	[Token(Token = "0x6000455")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x2000089")]
public static class CriAtomEx
{
	[Token(Token = "0x200008A")]
	public enum CharacterEncoding
	{
		[Token(Token = "0x4000327")]
		Utf8,
		[Token(Token = "0x4000328")]
		Sjis
	}

	[Token(Token = "0x200008B")]
	public enum SoundRendererType
	{
		[Token(Token = "0x400032A")]
		Default = 0,
		[Token(Token = "0x400032B")]
		Native = 1,
		[Token(Token = "0x400032C")]
		Asr = 2,
		[Token(Token = "0x400032D")]
		Hw1 = 1,
		[Token(Token = "0x400032E")]
		Hw2 = 9
	}

	[Token(Token = "0x200008C")]
	public enum VoiceAllocationMethod
	{
		[Token(Token = "0x4000330")]
		Once,
		[Token(Token = "0x4000331")]
		Retry
	}

	[Token(Token = "0x200008D")]
	public enum BiquadFilterType
	{
		[Token(Token = "0x4000333")]
		Off,
		[Token(Token = "0x4000334")]
		LowPass,
		[Token(Token = "0x4000335")]
		HighPass,
		[Token(Token = "0x4000336")]
		Notch,
		[Token(Token = "0x4000337")]
		LowShelf,
		[Token(Token = "0x4000338")]
		HighShelf,
		[Token(Token = "0x4000339")]
		Peaking
	}

	[Token(Token = "0x200008E")]
	public enum ResumeMode
	{
		[Token(Token = "0x400033B")]
		AllPlayback,
		[Token(Token = "0x400033C")]
		PausedPlayback,
		[Token(Token = "0x400033D")]
		PreparedPlayback
	}

	[Token(Token = "0x200008F")]
	public enum PanType
	{
		[Token(Token = "0x400033F")]
		Pan3d,
		[Token(Token = "0x4000340")]
		Pos3d,
		[Token(Token = "0x4000341")]
		Auto
	}

	[Token(Token = "0x2000090")]
	public enum VoiceControlMethod
	{
		[Token(Token = "0x4000343")]
		PreferLast,
		[Token(Token = "0x4000344")]
		PreferFirst
	}

	[Token(Token = "0x2000091")]
	public enum Parameter
	{
		[Token(Token = "0x4000346")]
		Volume = 0,
		[Token(Token = "0x4000347")]
		Pitch = 1,
		[Token(Token = "0x4000348")]
		Pan3dAngle = 2,
		[Token(Token = "0x4000349")]
		Pan3dDistance = 3,
		[Token(Token = "0x400034A")]
		Pan3dVolume = 4,
		[Token(Token = "0x400034B")]
		BusSendLevel0 = 9,
		[Token(Token = "0x400034C")]
		BusSendLevel1 = 10,
		[Token(Token = "0x400034D")]
		BusSendLevel2 = 11,
		[Token(Token = "0x400034E")]
		BusSendLevel3 = 12,
		[Token(Token = "0x400034F")]
		BusSendLevel4 = 13,
		[Token(Token = "0x4000350")]
		BusSendLevel5 = 14,
		[Token(Token = "0x4000351")]
		BusSendLevel6 = 15,
		[Token(Token = "0x4000352")]
		BusSendLevel7 = 16,
		[Token(Token = "0x4000353")]
		BandPassFilterCofLow = 17,
		[Token(Token = "0x4000354")]
		BandPassFilterCofHigh = 18,
		[Token(Token = "0x4000355")]
		BiquadFilterType = 19,
		[Token(Token = "0x4000356")]
		BiquadFilterFreq = 20,
		[Token(Token = "0x4000357")]
		BiquadFIlterQ = 21,
		[Token(Token = "0x4000358")]
		BiquadFilterGain = 22,
		[Token(Token = "0x4000359")]
		EnvelopeAttackTime = 23,
		[Token(Token = "0x400035A")]
		EnvelopeHoldTime = 24,
		[Token(Token = "0x400035B")]
		EnvelopeDecayTime = 25,
		[Token(Token = "0x400035C")]
		EnvelopeReleaseTime = 26,
		[Token(Token = "0x400035D")]
		EnvelopeSustainLevel = 27,
		[Token(Token = "0x400035E")]
		StartTime = 28,
		[Token(Token = "0x400035F")]
		Priority = 31
	}

	[Token(Token = "0x2000092")]
	public enum Speaker
	{
		[Token(Token = "0x4000361")]
		FrontLeft,
		[Token(Token = "0x4000362")]
		FrontRight,
		[Token(Token = "0x4000363")]
		FrontCenter,
		[Token(Token = "0x4000364")]
		LowFrequency,
		[Token(Token = "0x4000365")]
		SurroundLeft,
		[Token(Token = "0x4000366")]
		SurroundRight,
		[Token(Token = "0x4000367")]
		SurroundBackLeft,
		[Token(Token = "0x4000368")]
		SurroundBackRight
	}

	[Token(Token = "0x2000093")]
	public enum Format : uint
	{
		[Token(Token = "0x400036A")]
		ADX = 1u,
		[Token(Token = "0x400036B")]
		HCA = 3u,
		[Token(Token = "0x400036C")]
		HCA_MX = 4u,
		[Token(Token = "0x400036D")]
		WAVE = 5u
	}

	[Token(Token = "0x2000094")]
	public struct FormatInfo
	{
		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Format format;

		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int samplingRate;

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public long numSamples;

		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public long loopOffset;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public long loopLength;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int numChannels;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint reserved;
	}

	[Token(Token = "0x2000095")]
	public struct AisacControlInfo
	{
		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string name;

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint id;

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x19E80AC", Offset = "0x19E80AC", VA = "0x19E80AC")]
		public AisacControlInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x2000096")]
	public struct CuePos3dInfo
	{
		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float coneInsideAngle;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float coneOutsideAngle;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float minDistance;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float maxDistance;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float dopplerFactor;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ushort distanceAisacControl;

		[Token(Token = "0x400037D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public ushort listenerBaseAngleAisacControl;

		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ushort sourceBaseAngleAisacControl;

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ushort[] reserved;

		[Token(Token = "0x6000479")]
		[Address(RVA = "0x19E8E8C", Offset = "0x19E8E8C", VA = "0x19E8E8C")]
		public CuePos3dInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x2000097")]
	public struct GameVariableInfo
	{
		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly string name;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint id;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float gameValue;

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x19E8E94", Offset = "0x19E8E94", VA = "0x19E8E94")]
		public GameVariableInfo(byte[] data, int startIndex)
		{
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x19E8E9C", Offset = "0x19E8E9C", VA = "0x19E8E9C")]
		public GameVariableInfo(string name, uint id, float gameValue)
		{
		}
	}

	[Token(Token = "0x2000098")]
	public enum CueType
	{
		[Token(Token = "0x4000384")]
		Polyphonic,
		[Token(Token = "0x4000385")]
		Sequential,
		[Token(Token = "0x4000386")]
		Shuffle,
		[Token(Token = "0x4000387")]
		Random,
		[Token(Token = "0x4000388")]
		RandomNoRepeat,
		[Token(Token = "0x4000389")]
		SwitchGameVariable,
		[Token(Token = "0x400038A")]
		ComboSequential,
		[Token(Token = "0x400038B")]
		SwitchSelector,
		[Token(Token = "0x400038C")]
		TrackTransitionBySelector
	}

	[Token(Token = "0x2000099")]
	public struct CueInfo
	{
		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int id;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CueType type;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string name;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly string userData;

		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public long length;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ushort[] categories;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public short numLimits;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public ushort numBlocks;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public byte priority;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public byte headerVisibility;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public byte ignore_player_parameter;

		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public byte probability;

		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public CuePos3dInfo pos3dInfo;

		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public GameVariableInfo gameVariableInfo;

		[Token(Token = "0x600047C")]
		[Address(RVA = "0x19E8E84", Offset = "0x19E8E84", VA = "0x19E8E84")]
		public CueInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x200009A")]
	public struct WaveformInfo
	{
		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int waveId;

		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint format;

		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int samplingRate;

		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int numChannels;

		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public long numSamples;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool streamingFlag;

		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint[] reserved;

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x19E91B0", Offset = "0x19E91B0", VA = "0x19E91B0")]
		public WaveformInfo(byte[] data, int startIndex)
		{
		}
	}

	[Token(Token = "0x200009B")]
	public struct PerformanceInfo
	{
		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint serverProcessCount;

		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint lastServerTime;

		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint maxServerTime;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint averageServerTime;

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint lastServerInterval;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint maxServerInterval;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint averageServerInterval;
	}

	[Token(Token = "0x200009C")]
	public struct ResourceUsage
	{
		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint useCount;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint limit;
	}

	[Token(Token = "0x4000325")]
	public const uint InvalidAisacControlId = 65535u;

	[Token(Token = "0x6000456")]
	[Address(RVA = "0x19E4C40", Offset = "0x19E4C40", VA = "0x19E4C40")]
	public static void RegisterAcf(CriFsBinder binder, string acfPath)
	{
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0x19E6D94", Offset = "0x19E6D94", VA = "0x19E6D94")]
	public static void RegisterAcf(byte[] acfData)
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0x19E5170", Offset = "0x19E5170", VA = "0x19E5170")]
	public static void UnregisterAcf()
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0x19E3570", Offset = "0x19E3570", VA = "0x19E3570")]
	public static void AttachDspBusSetting(string settingName)
	{
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0x19E35D4", Offset = "0x19E35D4", VA = "0x19E35D4")]
	public static void DetachDspBusSetting()
	{
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0x19E713C", Offset = "0x19E713C", VA = "0x19E713C")]
	public static void ApplyDspBusSnapshot(string snapshot_name, int time_ms)
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0x19E7224", Offset = "0x19E7224", VA = "0x19E7224")]
	public static int GetNumGameVariables()
	{
		return default(int);
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0x19E72D8", Offset = "0x19E72D8", VA = "0x19E72D8")]
	public static bool GetGameVariableInfo(ushort index, out GameVariableInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0x19E7744", Offset = "0x19E7744", VA = "0x19E7744")]
	public static float GetGameVariable(uint game_variable_id)
	{
		return default(float);
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0x19E7808", Offset = "0x19E7808", VA = "0x19E7808")]
	public static float GetGameVariable(string game_variable_name)
	{
		return default(float);
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0x19E78F0", Offset = "0x19E78F0", VA = "0x19E78F0")]
	public static void SetGameVariable(uint game_variable_id, float game_variable_value)
	{
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0x19E79BC", Offset = "0x19E79BC", VA = "0x19E79BC")]
	public static void SetGameVariable(string game_variable_name, float game_variable_value)
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0x19E7AA4", Offset = "0x19E7AA4", VA = "0x19E7AA4")]
	public static void SetRandomSeed(uint seed)
	{
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0x19E7B68", Offset = "0x19E7B68", VA = "0x19E7B68")]
	public static void ResetPerformanceMonitor()
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0x19E7C1C", Offset = "0x19E7C1C", VA = "0x19E7C1C")]
	public static void GetPerformanceInfo(out PerformanceInfo info)
	{
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0x19E7D00", Offset = "0x19E7D00", VA = "0x19E7D00")]
	public static void SetOutputVolume_VITA(float volume)
	{
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0x19E7D04", Offset = "0x19E7D04", VA = "0x19E7D04")]
	public static bool IsBgmPortAcquired_VITA()
	{
		return default(bool);
	}

	[PreserveSig]
	[Token(Token = "0x6000467")]
	[Address(RVA = "0x19E6C90", Offset = "0x19E6C90", VA = "0x19E6C90")]
	private static extern bool criAtomEx_RegisterAcfFile(IntPtr binder, string path, IntPtr work, int workSize);

	[PreserveSig]
	[Token(Token = "0x6000468")]
	[Address(RVA = "0x19E6E0C", Offset = "0x19E6E0C", VA = "0x19E6E0C")]
	private static extern bool criAtomEx_RegisterAcfData(byte[] acfData, int acfDataSize, IntPtr work, int workSize);

	[PreserveSig]
	[Token(Token = "0x6000469")]
	[Address(RVA = "0x19E6EF0", Offset = "0x19E6EF0", VA = "0x19E6EF0")]
	private static extern void criAtomEx_UnregisterAcf();

	[PreserveSig]
	[Token(Token = "0x600046A")]
	[Address(RVA = "0x19E6FA0", Offset = "0x19E6FA0", VA = "0x19E6FA0")]
	private static extern void criAtomEx_AttachDspBusSetting(string settingName, IntPtr work, int workSize);

	[PreserveSig]
	[Token(Token = "0x600046B")]
	[Address(RVA = "0x19E708C", Offset = "0x19E708C", VA = "0x19E708C")]
	private static extern void criAtomEx_DetachDspBusSetting();

	[PreserveSig]
	[Token(Token = "0x600046C")]
	[Address(RVA = "0x19E7140", Offset = "0x19E7140", VA = "0x19E7140")]
	private static extern void criAtomEx_ApplyDspBusSnapshot(string snapshot_name, int time_ms);

	[PreserveSig]
	[Token(Token = "0x600046D")]
	[Address(RVA = "0x19E7228", Offset = "0x19E7228", VA = "0x19E7228")]
	private static extern int criAtomEx_GetNumGameVariables();

	[PreserveSig]
	[Token(Token = "0x600046E")]
	[Address(RVA = "0x19E7484", Offset = "0x19E7484", VA = "0x19E7484")]
	private static extern bool criAtomEx_GetGameVariableInfo(ushort index, IntPtr game_variable_info);

	[PreserveSig]
	[Token(Token = "0x600046F")]
	[Address(RVA = "0x19E7748", Offset = "0x19E7748", VA = "0x19E7748")]
	private static extern float criAtomEx_GetGameVariableById(uint game_variable_id);

	[PreserveSig]
	[Token(Token = "0x6000470")]
	[Address(RVA = "0x19E780C", Offset = "0x19E780C", VA = "0x19E780C")]
	private static extern float criAtomEx_GetGameVariableByName(string game_variable_name);

	[PreserveSig]
	[Token(Token = "0x6000471")]
	[Address(RVA = "0x19E78F4", Offset = "0x19E78F4", VA = "0x19E78F4")]
	private static extern void criAtomEx_SetGameVariableById(uint game_variable_id, float game_variable_value);

	[PreserveSig]
	[Token(Token = "0x6000472")]
	[Address(RVA = "0x19E79C0", Offset = "0x19E79C0", VA = "0x19E79C0")]
	private static extern void criAtomEx_SetGameVariableByName(string game_variable_name, float game_variable_value);

	[PreserveSig]
	[Token(Token = "0x6000473")]
	[Address(RVA = "0x19E7AA8", Offset = "0x19E7AA8", VA = "0x19E7AA8")]
	private static extern void criAtomEx_SetRandomSeed(uint seed);

	[PreserveSig]
	[Token(Token = "0x6000474")]
	[Address(RVA = "0x19E7B6C", Offset = "0x19E7B6C", VA = "0x19E7B6C")]
	private static extern void criAtom_ResetPerformanceMonitor();

	[PreserveSig]
	[Token(Token = "0x6000475")]
	[Address(RVA = "0x19E7C20", Offset = "0x19E7C20", VA = "0x19E7C20")]
	private static extern void criAtom_GetPerformanceInfo(out PerformanceInfo info);

	[PreserveSig]
	[Token(Token = "0x6000476")]
	[Address(RVA = "0x19E7D0C", Offset = "0x19E7D0C", VA = "0x19E7D0C")]
	public static extern void criAtom_EnableSlLatencyCheck_ANDROID(bool sw);

	[PreserveSig]
	[Token(Token = "0x6000477")]
	[Address(RVA = "0x19E7DCC", Offset = "0x19E7DCC", VA = "0x19E7DCC")]
	public static extern int criAtom_GetSlBufferConsumptionLatency_ANDROID();
}
[Token(Token = "0x200009D")]
public static class CriAtomExCategory
{
	[Token(Token = "0x600047E")]
	[Address(RVA = "0x19E435C", Offset = "0x19E435C", VA = "0x19E435C")]
	public static void SetVolume(string name, float volume)
	{
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0x19E4364", Offset = "0x19E4364", VA = "0x19E4364")]
	public static void SetVolume(int id, float volume)
	{
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0x19E436C", Offset = "0x19E436C", VA = "0x19E436C")]
	public static float GetVolume(string name)
	{
		return default(float);
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0x19E4374", Offset = "0x19E4374", VA = "0x19E4374")]
	public static float GetVolume(int id)
	{
		return default(float);
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0x19EF31C", Offset = "0x19EF31C", VA = "0x19EF31C")]
	public static void Mute(string name, bool mute)
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0x19EF404", Offset = "0x19EF404", VA = "0x19EF404")]
	public static void Mute(int id, bool mute)
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0x19EF4D0", Offset = "0x19EF4D0", VA = "0x19EF4D0")]
	public static bool IsMuted(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0x19EF5C0", Offset = "0x19EF5C0", VA = "0x19EF5C0")]
	public static bool IsMuted(int id)
	{
		return default(bool);
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0x19EF68C", Offset = "0x19EF68C", VA = "0x19EF68C")]
	public static void Solo(string name, bool solo, float muteVolume)
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0x19EF790", Offset = "0x19EF790", VA = "0x19EF790")]
	public static void Solo(int id, bool solo, float muteVolume)
	{
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0x19EF878", Offset = "0x19EF878", VA = "0x19EF878")]
	public static bool IsSoloed(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0x19EF968", Offset = "0x19EF968", VA = "0x19EF968")]
	public static bool IsSoloed(int id)
	{
		return default(bool);
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0x19EFA34", Offset = "0x19EFA34", VA = "0x19EFA34")]
	public static void Pause(string name, bool pause)
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0x19EFB1C", Offset = "0x19EFB1C", VA = "0x19EFB1C")]
	public static void Pause(int id, bool pause)
	{
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0x19EFBE8", Offset = "0x19EFBE8", VA = "0x19EFBE8")]
	public static bool IsPaused(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0x19EFCD8", Offset = "0x19EFCD8", VA = "0x19EFCD8")]
	public static bool IsPaused(int id)
	{
		return default(bool);
	}

	[Token(Token = "0x600048E")]
	[Address(RVA = "0x19EFDA4", Offset = "0x19EFDA4", VA = "0x19EFDA4")]
	public static void SetAisac(string name, string controlName, float value)
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0x19EFEBC", Offset = "0x19EFEBC", VA = "0x19EFEBC")]
	public static void SetAisac(int id, int controlId, float value)
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000490")]
	[Address(RVA = "0x19EEFCC", Offset = "0x19EEFCC", VA = "0x19EEFCC")]
	private static extern void criAtomExCategory_SetVolumeByName(string name, float volume);

	[PreserveSig]
	[Token(Token = "0x6000491")]
	[Address(RVA = "0x19EF178", Offset = "0x19EF178", VA = "0x19EF178")]
	private static extern float criAtomExCategory_GetVolumeByName(string name);

	[PreserveSig]
	[Token(Token = "0x6000492")]
	[Address(RVA = "0x19EF0B0", Offset = "0x19EF0B0", VA = "0x19EF0B0")]
	private static extern void criAtomExCategory_SetVolumeById(int id, float volume);

	[PreserveSig]
	[Token(Token = "0x6000493")]
	[Address(RVA = "0x19EF25C", Offset = "0x19EF25C", VA = "0x19EF25C")]
	private static extern float criAtomExCategory_GetVolumeById(int id);

	[PreserveSig]
	[Token(Token = "0x6000494")]
	[Address(RVA = "0x19EF408", Offset = "0x19EF408", VA = "0x19EF408")]
	private static extern void criAtomExCategory_MuteById(int id, bool mute);

	[PreserveSig]
	[Token(Token = "0x6000495")]
	[Address(RVA = "0x19EF5C4", Offset = "0x19EF5C4", VA = "0x19EF5C4")]
	private static extern bool criAtomExCategory_IsMutedById(int id);

	[PreserveSig]
	[Token(Token = "0x6000496")]
	[Address(RVA = "0x19EF320", Offset = "0x19EF320", VA = "0x19EF320")]
	private static extern void criAtomExCategory_MuteByName(string name, bool mute);

	[PreserveSig]
	[Token(Token = "0x6000497")]
	[Address(RVA = "0x19EF4D4", Offset = "0x19EF4D4", VA = "0x19EF4D4")]
	private static extern bool criAtomExCategory_IsMutedByName(string name);

	[PreserveSig]
	[Token(Token = "0x6000498")]
	[Address(RVA = "0x19EF7A8", Offset = "0x19EF7A8", VA = "0x19EF7A8")]
	private static extern void criAtomExCategory_SoloById(int id, bool solo, float volume);

	[PreserveSig]
	[Token(Token = "0x6000499")]
	[Address(RVA = "0x19EF96C", Offset = "0x19EF96C", VA = "0x19EF96C")]
	private static extern bool criAtomExCategory_IsSoloedById(int id);

	[PreserveSig]
	[Token(Token = "0x600049A")]
	[Address(RVA = "0x19EF6A4", Offset = "0x19EF6A4", VA = "0x19EF6A4")]
	private static extern void criAtomExCategory_SoloByName(string name, bool solo, float volume);

	[PreserveSig]
	[Token(Token = "0x600049B")]
	[Address(RVA = "0x19EF87C", Offset = "0x19EF87C", VA = "0x19EF87C")]
	private static extern bool criAtomExCategory_IsSoloedByName(string name);

	[PreserveSig]
	[Token(Token = "0x600049C")]
	[Address(RVA = "0x19EFB20", Offset = "0x19EFB20", VA = "0x19EFB20")]
	private static extern void criAtomExCategory_PauseById(int id, bool pause);

	[PreserveSig]
	[Token(Token = "0x600049D")]
	[Address(RVA = "0x19EFCDC", Offset = "0x19EFCDC", VA = "0x19EFCDC")]
	private static extern bool criAtomExCategory_IsPausedById(int id);

	[PreserveSig]
	[Token(Token = "0x600049E")]
	[Address(RVA = "0x19EFA38", Offset = "0x19EFA38", VA = "0x19EFA38")]
	private static extern void criAtomExCategory_PauseByName(string name, bool pause);

	[PreserveSig]
	[Token(Token = "0x600049F")]
	[Address(RVA = "0x19EFBEC", Offset = "0x19EFBEC", VA = "0x19EFBEC")]
	private static extern bool criAtomExCategory_IsPausedByName(string name);

	[PreserveSig]
	[Token(Token = "0x60004A0")]
	[Address(RVA = "0x19EFED8", Offset = "0x19EFED8", VA = "0x19EFED8")]
	private static extern void criAtomExCategory_SetAisacControlById(int id, ushort controlId, float value);

	[PreserveSig]
	[Token(Token = "0x60004A1")]
	[Address(RVA = "0x19EFDBC", Offset = "0x19EFDBC", VA = "0x19EFDBC")]
	private static extern void criAtomExCategory_SetAisacControlByName(string name, string controlName, float value);
}
[Token(Token = "0x200009E")]
public static class CriAtomExSequencer
{
	[Token(Token = "0x200009F")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xE9AD74", Offset = "0xE9AD74")]
	public delegate void EventCbFunc(string eventParamsString);

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0x19034CC", Offset = "0x19034CC", VA = "0x19034CC")]
	public static void SetEventCallback(EventCbFunc func, string separator = "\t")
	{
	}
}
[Token(Token = "0x20000A0")]
public class CriAtomExAsr
{
	[Token(Token = "0x20000A1")]
	private struct BusAnalyzerConfig
	{
		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int interval;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int peakHoldTime;
	}

	[Token(Token = "0x20000A2")]
	public struct BusAnalyzerInfo
	{
		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int numChannels;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float[] rmsLevels;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float[] peakLevels;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float[] peakHoldLevels;

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x19EE828", Offset = "0x19EE828", VA = "0x19EE828")]
		public BusAnalyzerInfo(byte[] data)
		{
		}
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0x19EDD2C", Offset = "0x19EDD2C", VA = "0x19EDD2C")]
	public CriAtomExAsr()
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0x19E43E4", Offset = "0x19E43E4", VA = "0x19E43E4")]
	public static void AttachBusAnalyzer(int interval, int peakHoldTime)
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0x19E4430", Offset = "0x19E4430", VA = "0x19E4430")]
	public static void DetachBusAnalyzer()
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0x19E4498", Offset = "0x19E4498", VA = "0x19E4498")]
	public static void GetBusAnalyzerInfo(int bus, out BusAnalyzerInfo info)
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0x19EE2DC", Offset = "0x19EE2DC", VA = "0x19EE2DC")]
	public static void SetBusVolume(int bus, float volume)
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0x19EE3A8", Offset = "0x19EE3A8", VA = "0x19EE3A8")]
	public static void SetBusSendLevel(int bus, int sendTo, float level)
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0x19EE490", Offset = "0x19EE490", VA = "0x19EE490")]
	public static void SetBusMatrix(int bus, int inputChannels, int outputChannels, float[] matrix)
	{
	}

	[PreserveSig]
	[Token(Token = "0x60004AE")]
	[Address(RVA = "0x19EDD34", Offset = "0x19EDD34", VA = "0x19EDD34")]
	private static extern void criAtomExAsr_AttachBusAnalyzer(int bus_no, ref BusAnalyzerConfig config);

	[PreserveSig]
	[Token(Token = "0x60004AF")]
	[Address(RVA = "0x19EDDFC", Offset = "0x19EDDFC", VA = "0x19EDDFC")]
	private static extern void criAtomExAsr_DetachBusAnalyzer(int bus_no);

	[PreserveSig]
	[Token(Token = "0x60004B0")]
	[Address(RVA = "0x19EDEBC", Offset = "0x19EDEBC", VA = "0x19EDEBC")]
	private static extern void criAtomExAsr_GetBusAnalyzerInfo(int bus_no, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x60004B1")]
	[Address(RVA = "0x19EE2E0", Offset = "0x19EE2E0", VA = "0x19EE2E0")]
	private static extern void criAtomExAsr_SetBusVolume(int bus_no, float volume);

	[PreserveSig]
	[Token(Token = "0x60004B2")]
	[Address(RVA = "0x19EE3C0", Offset = "0x19EE3C0", VA = "0x19EE3C0")]
	private static extern void criAtomExAsr_SetBusSendLevel(int bus_no, int sendto_no, float level);

	[PreserveSig]
	[Token(Token = "0x60004B3")]
	[Address(RVA = "0x19EE4B0", Offset = "0x19EE4B0", VA = "0x19EE4B0")]
	private static extern void criAtomExAsr_SetBusMatrix(int bus_no, int input_channels, int output_channels, float[] matrix);
}
[Token(Token = "0x20000A3")]
public static class CriAtomExLatencyEstimator
{
	[Token(Token = "0x20000A4")]
	public enum Status
	{
		[Token(Token = "0x40003B2")]
		Stop,
		[Token(Token = "0x40003B3")]
		Processing,
		[Token(Token = "0x40003B4")]
		Done,
		[Token(Token = "0x40003B5")]
		Error
	}

	[Token(Token = "0x20000A5")]
	public struct EstimatorInfo
	{
		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Status status;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint estimated_latency;
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0x19F008C", Offset = "0x19F008C", VA = "0x19F008C")]
	public static void InitializeModule()
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0x19F0140", Offset = "0x19F0140", VA = "0x19F0140")]
	public static void FinalizeModule()
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0x19F01F4", Offset = "0x19F01F4", VA = "0x19F01F4")]
	public static EstimatorInfo GetCurrentInfo()
	{
		return default(EstimatorInfo);
	}

	[PreserveSig]
	[Token(Token = "0x60004B8")]
	[Address(RVA = "0x19F0090", Offset = "0x19F0090", VA = "0x19F0090")]
	private static extern void criAtomLatencyEstimator_Initialize_ANDROID();

	[PreserveSig]
	[Token(Token = "0x60004B9")]
	[Address(RVA = "0x19F0144", Offset = "0x19F0144", VA = "0x19F0144")]
	private static extern void criAtomLatencyEstimator_Finalize_ANDROID();

	[PreserveSig]
	[Token(Token = "0x60004BA")]
	[Address(RVA = "0x19F0204", Offset = "0x19F0204", VA = "0x19F0204")]
	private static extern EstimatorInfo criAtomLatencyEstimator_GetCurrentInfo_ANDROID();
}
[Token(Token = "0x20000A6")]
public class CriAtomEx3dListener : IDisposable
{
	[Token(Token = "0x20000A7")]
	public struct Config
	{
		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int reserved;
	}

	[Token(Token = "0x20000A8")]
	private struct CriAtomExVector
	{
		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x40003BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;
	}

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private bool disposed;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private IntPtr handle;

	[Token(Token = "0x17000055")]
	public IntPtr nativeHandle
	{
		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x19E9418", Offset = "0x19E9418", VA = "0x19E9418")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0x19E91B8", Offset = "0x19E91B8", VA = "0x19E91B8")]
	public CriAtomEx3dListener()
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0x19E9308", Offset = "0x19E9308", VA = "0x19E9308", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0x19E9310", Offset = "0x19E9310", VA = "0x19E9310")]
	private void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0x19E9420", Offset = "0x19E9420", VA = "0x19E9420")]
	public void Update()
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0x19E94E8", Offset = "0x19E94E8", VA = "0x19E94E8")]
	public void ResetParameters()
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0x19E95B0", Offset = "0x19E95B0", VA = "0x19E95B0")]
	public void SetPosition(float x, float y, float z)
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0x19E96A8", Offset = "0x19E96A8", VA = "0x19E96A8")]
	public void SetVelocity(float x, float y, float z)
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0x19E97A0", Offset = "0x19E97A0", VA = "0x19E97A0")]
	public void SetOrientation(float fx, float fy, float fz, float ux, float uy, float uz)
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0x19E98C8", Offset = "0x19E98C8", VA = "0x19E98C8")]
	public void SetDistanceFactor(float distanceFactor)
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0x19E999C", Offset = "0x19E999C", VA = "0x19E999C")]
	public void SetFocusPoint(float x, float y, float z)
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0x19E9A94", Offset = "0x19E9A94", VA = "0x19E9A94")]
	public void SetDistanceFocusLevel(float distanceFocusLevel)
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0x19E9B68", Offset = "0x19E9B68", VA = "0x19E9B68")]
	public void SetDirectionFocusLevel(float directionFocusLevel)
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0x19E9C3C", Offset = "0x19E9C3C", VA = "0x19E9C3C", Slot = "1")]
	~CriAtomEx3dListener()
	{
	}

	[PreserveSig]
	[Token(Token = "0x60004C9")]
	[Address(RVA = "0x19E9238", Offset = "0x19E9238", VA = "0x19E9238")]
	private static extern IntPtr criAtomEx3dListener_Create(ref Config config, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x60004CA")]
	[Address(RVA = "0x19E9358", Offset = "0x19E9358", VA = "0x19E9358")]
	private static extern void criAtomEx3dListener_Destroy(IntPtr ex_3d_listener);

	[PreserveSig]
	[Token(Token = "0x60004CB")]
	[Address(RVA = "0x19E9428", Offset = "0x19E9428", VA = "0x19E9428")]
	private static extern void criAtomEx3dListener_Update(IntPtr ex_3d_listener);

	[PreserveSig]
	[Token(Token = "0x60004CC")]
	[Address(RVA = "0x19E94F0", Offset = "0x19E94F0", VA = "0x19E94F0")]
	private static extern void criAtomEx3dListener_ResetParameters(IntPtr ex_3d_listener);

	[PreserveSig]
	[Token(Token = "0x60004CD")]
	[Address(RVA = "0x19E95E0", Offset = "0x19E95E0", VA = "0x19E95E0")]
	private static extern void criAtomEx3dListener_SetPosition(IntPtr ex_3d_listener, ref CriAtomExVector position);

	[PreserveSig]
	[Token(Token = "0x60004CE")]
	[Address(RVA = "0x19E96D8", Offset = "0x19E96D8", VA = "0x19E96D8")]
	private static extern void criAtomEx3dListener_SetVelocity(IntPtr ex_3d_listener, ref CriAtomExVector velocity);

	[PreserveSig]
	[Token(Token = "0x60004CF")]
	[Address(RVA = "0x19E97F8", Offset = "0x19E97F8", VA = "0x19E97F8")]
	private static extern void criAtomEx3dListener_SetOrientation(IntPtr ex_3d_listener, ref CriAtomExVector front, ref CriAtomExVector top);

	[PreserveSig]
	[Token(Token = "0x60004D0")]
	[Address(RVA = "0x19E98D4", Offset = "0x19E98D4", VA = "0x19E98D4")]
	private static extern void criAtomEx3dListener_SetDistanceFactor(IntPtr ex_3d_listener, float distance_factor);

	[PreserveSig]
	[Token(Token = "0x60004D1")]
	[Address(RVA = "0x19E99CC", Offset = "0x19E99CC", VA = "0x19E99CC")]
	private static extern void criAtomEx3dListener_SetFocusPoint(IntPtr ex_3d_listener, ref CriAtomExVector focus_point);

	[PreserveSig]
	[Token(Token = "0x60004D2")]
	[Address(RVA = "0x19E9AA0", Offset = "0x19E9AA0", VA = "0x19E9AA0")]
	private static extern void criAtomEx3dListener_SetDistanceFocusLevel(IntPtr ex_3d_listener, float distance_focus_level);

	[PreserveSig]
	[Token(Token = "0x60004D3")]
	[Address(RVA = "0x19E9B74", Offset = "0x19E9B74", VA = "0x19E9B74")]
	private static extern void criAtomEx3dListener_SetDirectionFocusLevel(IntPtr ex_3d_listener, float direction_focus_level);
}
[Token(Token = "0x20000A9")]
public class CriAtomEx3dSource : IDisposable
{
	[Token(Token = "0x20000AA")]
	public struct Config
	{
		[Token(Token = "0x40003BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int reserved;
	}

	[Token(Token = "0x20000AB")]
	private struct CriAtomExVector
	{
		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x40003C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;
	}

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private IntPtr handle;

	[Token(Token = "0x17000056")]
	public IntPtr nativeHandle
	{
		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x19E9EE8", Offset = "0x19E9EE8", VA = "0x19E9EE8")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0x19E9CB0", Offset = "0x19E9CB0", VA = "0x19E9CB0")]
	public CriAtomEx3dSource()
	{
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0x19E9E00", Offset = "0x19E9E00", VA = "0x19E9E00", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0x19E9EF0", Offset = "0x19E9EF0", VA = "0x19E9EF0")]
	public void Update()
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0x19E9FB8", Offset = "0x19E9FB8", VA = "0x19E9FB8")]
	public void ResetParameters()
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0x19EA080", Offset = "0x19EA080", VA = "0x19EA080")]
	public void SetPosition(float x, float y, float z)
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0x19EA178", Offset = "0x19EA178", VA = "0x19EA178")]
	public void SetVelocity(float x, float y, float z)
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0x19EA270", Offset = "0x19EA270", VA = "0x19EA270")]
	public void SetConeOrientation(float x, float y, float z)
	{
	}

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0x19EA368", Offset = "0x19EA368", VA = "0x19EA368")]
	public void SetConeParameter(float insideAngle, float outsideAngle, float outsideVolume)
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0x19EA46C", Offset = "0x19EA46C", VA = "0x19EA46C")]
	public void SetMinMaxDistance(float minDistance, float maxDistance)
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0x19EA560", Offset = "0x19EA560", VA = "0x19EA560")]
	public void SetDopplerFactor(float dopplerFactor)
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0x19EA634", Offset = "0x19EA634", VA = "0x19EA634")]
	public void SetVolume(float volume)
	{
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0x19EA708", Offset = "0x19EA708", VA = "0x19EA708")]
	public void SetMaxAngleAisacDelta(float maxDelta)
	{
	}

	[Token(Token = "0x60004E1")]
	[Address(RVA = "0x19EA7DC", Offset = "0x19EA7DC", VA = "0x19EA7DC", Slot = "1")]
	~CriAtomEx3dSource()
	{
	}

	[PreserveSig]
	[Token(Token = "0x60004E2")]
	[Address(RVA = "0x19E9D30", Offset = "0x19E9D30", VA = "0x19E9D30")]
	private static extern IntPtr criAtomEx3dSource_Create(ref Config config, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x60004E3")]
	[Address(RVA = "0x19E9E28", Offset = "0x19E9E28", VA = "0x19E9E28")]
	private static extern void criAtomEx3dSource_Destroy(IntPtr ex_3d_source);

	[PreserveSig]
	[Token(Token = "0x60004E4")]
	[Address(RVA = "0x19E9EF8", Offset = "0x19E9EF8", VA = "0x19E9EF8")]
	private static extern void criAtomEx3dSource_Update(IntPtr ex_3d_source);

	[PreserveSig]
	[Token(Token = "0x60004E5")]
	[Address(RVA = "0x19E9FC0", Offset = "0x19E9FC0", VA = "0x19E9FC0")]
	private static extern void criAtomEx3dSource_ResetParameters(IntPtr ex_3d_source);

	[PreserveSig]
	[Token(Token = "0x60004E6")]
	[Address(RVA = "0x19EA0B0", Offset = "0x19EA0B0", VA = "0x19EA0B0")]
	private static extern void criAtomEx3dSource_SetPosition(IntPtr ex_3d_source, ref CriAtomExVector position);

	[PreserveSig]
	[Token(Token = "0x60004E7")]
	[Address(RVA = "0x19EA1A8", Offset = "0x19EA1A8", VA = "0x19EA1A8")]
	private static extern void criAtomEx3dSource_SetVelocity(IntPtr ex_3d_source, ref CriAtomExVector velocity);

	[PreserveSig]
	[Token(Token = "0x60004E8")]
	[Address(RVA = "0x19EA2A0", Offset = "0x19EA2A0", VA = "0x19EA2A0")]
	private static extern void criAtomEx3dSource_SetConeOrientation(IntPtr ex_3d_source, ref CriAtomExVector cone_orient);

	[PreserveSig]
	[Token(Token = "0x60004E9")]
	[Address(RVA = "0x19EA394", Offset = "0x19EA394", VA = "0x19EA394")]
	private static extern void criAtomEx3dSource_SetConeParameter(IntPtr ex_3d_source, float inside_angle, float outside_angle, float outside_volume);

	[PreserveSig]
	[Token(Token = "0x60004EA")]
	[Address(RVA = "0x19EA490", Offset = "0x19EA490", VA = "0x19EA490")]
	private static extern void criAtomEx3dSource_SetMinMaxDistance(IntPtr ex_3d_source, float min_distance, float max_distance);

	[PreserveSig]
	[Token(Token = "0x60004EB")]
	[Address(RVA = "0x19EA56C", Offset = "0x19EA56C", VA = "0x19EA56C")]
	private static extern void criAtomEx3dSource_SetDopplerFactor(IntPtr ex_3d_source, float doppler_factor);

	[PreserveSig]
	[Token(Token = "0x60004EC")]
	[Address(RVA = "0x19EA640", Offset = "0x19EA640", VA = "0x19EA640")]
	private static extern void criAtomEx3dSource_SetVolume(IntPtr ex_3d_source, float volume);

	[PreserveSig]
	[Token(Token = "0x60004ED")]
	[Address(RVA = "0x19EA714", Offset = "0x19EA714", VA = "0x19EA714")]
	private static extern void criAtomEx3dSource_SetMaxAngleAisacDelta(IntPtr ex_3d_source, float max_delta);
}
[Token(Token = "0x20000AC")]
public class CriAtomExAcb : IDisposable
{
	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private IntPtr handle;

	[Token(Token = "0x17000057")]
	public IntPtr nativeHandle
	{
		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x19EA8A8", Offset = "0x19EA8A8", VA = "0x19EA8A8")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0x19EA840", Offset = "0x19EA840", VA = "0x19EA840")]
	internal CriAtomExAcb(IntPtr handle)
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0x19E59F4", Offset = "0x19E59F4", VA = "0x19E59F4")]
	public static CriAtomExAcb LoadAcbFile(CriFsBinder binder, string acbPath, string awbPath)
	{
		return null;
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0x19E5ACC", Offset = "0x19E5ACC", VA = "0x19E5ACC")]
	public static CriAtomExAcb LoadAcbData(byte[] acbData, CriFsBinder awbBinder, string awbPath)
	{
		return null;
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0x19E4E00", Offset = "0x19E4E00", VA = "0x19E4E00", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0x19EAB90", Offset = "0x19EAB90", VA = "0x19EAB90")]
	public bool Exists(string cueName)
	{
		return default(bool);
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0x19EAC90", Offset = "0x19EAC90", VA = "0x19EAC90")]
	public bool Exists(int cueId)
	{
		return default(bool);
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0x19E0840", Offset = "0x19E0840", VA = "0x19E0840")]
	public bool GetCueInfo(string cueName, out CriAtomEx.CueInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0x19EAE68", Offset = "0x19EAE68", VA = "0x19EAE68")]
	public bool GetCueInfo(int cueId, out CriAtomEx.CueInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0x19EB0F8", Offset = "0x19EB0F8", VA = "0x19EB0F8")]
	public bool GetCueInfoByIndex(int index, out CriAtomEx.CueInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0x19EB388", Offset = "0x19EB388", VA = "0x19EB388")]
	public CriAtomEx.CueInfo[] GetCueInfoList()
	{
		return null;
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0x19EB520", Offset = "0x19EB520", VA = "0x19EB520")]
	public bool GetWaveFormInfo(string cueName, out CriAtomEx.WaveformInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0x19EB7D4", Offset = "0x19EB7D4", VA = "0x19EB7D4")]
	public bool GetWaveFormInfo(int cueId, out CriAtomEx.WaveformInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0x19EBA64", Offset = "0x19EBA64", VA = "0x19EBA64")]
	public int GetNumCuePlaying(string name)
	{
		return default(int);
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0x19EBB5C", Offset = "0x19EBB5C", VA = "0x19EBB5C")]
	public int GetNumCuePlaying(int id)
	{
		return default(int);
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0x19EBC30", Offset = "0x19EBC30", VA = "0x19EBC30")]
	public int GetBlockIndex(string cueName, string blockName)
	{
		return default(int);
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0x19EBD5C", Offset = "0x19EBD5C", VA = "0x19EBD5C")]
	public int GetBlockIndex(int cueId, string blockName)
	{
		return default(int);
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0x19EBE74", Offset = "0x19EBE74", VA = "0x19EBE74")]
	public int GetNumUsableAisacControls(string cueName)
	{
		return default(int);
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0x19EBF6C", Offset = "0x19EBF6C", VA = "0x19EBF6C")]
	public int GetNumUsableAisacControls(int cueId)
	{
		return default(int);
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0x19EC040", Offset = "0x19EC040", VA = "0x19EC040")]
	public bool GetUsableAisacControl(string cueName, int index, out CriAtomEx.AisacControlInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0x19EC304", Offset = "0x19EC304", VA = "0x19EC304")]
	public bool GetUsableAisacControl(int cueId, int index, out CriAtomEx.AisacControlInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0x19EC5A0", Offset = "0x19EC5A0", VA = "0x19EC5A0")]
	public CriAtomEx.AisacControlInfo[] GetUsableAisacControlList(string cueName)
	{
		return null;
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0x19EC68C", Offset = "0x19EC68C", VA = "0x19EC68C")]
	public CriAtomEx.AisacControlInfo[] GetUsableAisacControlList(int cueId)
	{
		return null;
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0x19EC778", Offset = "0x19EC778", VA = "0x19EC778")]
	public void ResetCueTypeState(string cueName)
	{
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0x19EC868", Offset = "0x19EC868", VA = "0x19EC868")]
	public void ResetCueTypeState(int cueId)
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0x19EC93C", Offset = "0x19EC93C", VA = "0x19EC93C")]
	public void AttachAwbFile(CriFsBinder awb_binder, string awb_path, string awb_name)
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0x19ECAEC", Offset = "0x19ECAEC", VA = "0x19ECAEC")]
	public void DetachAwbFile(string awb_name)
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0x19ECBDC", Offset = "0x19ECBDC", VA = "0x19ECBDC")]
	public float GetLoadProgress()
	{
		return default(float);
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0x19ECBE4", Offset = "0x19ECBE4", VA = "0x19ECBE4", Slot = "1")]
	~CriAtomExAcb()
	{
	}

	[PreserveSig]
	[Token(Token = "0x600050B")]
	[Address(RVA = "0x19EA8B0", Offset = "0x19EA8B0", VA = "0x19EA8B0")]
	private static extern IntPtr criAtomExAcb_LoadAcbFile(IntPtr acb_binder, string acb_path, IntPtr awb_binder, string awb_path, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x600050C")]
	[Address(RVA = "0x19EA9CC", Offset = "0x19EA9CC", VA = "0x19EA9CC")]
	private static extern IntPtr criAtomExAcb_LoadAcbData(byte[] acb_data, int acb_data_size, IntPtr awb_binder, string awb_path, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x600050D")]
	[Address(RVA = "0x19EAAD0", Offset = "0x19EAAD0", VA = "0x19EAAD0")]
	private static extern void criAtomExAcb_Release(IntPtr acb_hn);

	[PreserveSig]
	[Token(Token = "0x600050E")]
	[Address(RVA = "0x19EB460", Offset = "0x19EB460", VA = "0x19EB460")]
	private static extern int criAtomExAcb_GetNumCues(IntPtr acb_hn);

	[PreserveSig]
	[Token(Token = "0x600050F")]
	[Address(RVA = "0x19EAC9C", Offset = "0x19EAC9C", VA = "0x19EAC9C")]
	private static extern bool criAtomExAcb_ExistsId(IntPtr acb_hn, int id);

	[PreserveSig]
	[Token(Token = "0x6000510")]
	[Address(RVA = "0x19EAB9C", Offset = "0x19EAB9C", VA = "0x19EAB9C")]
	private static extern bool criAtomExAcb_ExistsName(IntPtr acb_hn, string name);

	[PreserveSig]
	[Token(Token = "0x6000511")]
	[Address(RVA = "0x19EBF78", Offset = "0x19EBF78", VA = "0x19EBF78")]
	private static extern int criAtomExAcb_GetNumUsableAisacControlsById(IntPtr acb_hn, int id);

	[PreserveSig]
	[Token(Token = "0x6000512")]
	[Address(RVA = "0x19EBE80", Offset = "0x19EBE80", VA = "0x19EBE80")]
	private static extern int criAtomExAcb_GetNumUsableAisacControlsByName(IntPtr acb_hn, string name);

	[PreserveSig]
	[Token(Token = "0x6000513")]
	[Address(RVA = "0x19EC4C4", Offset = "0x19EC4C4", VA = "0x19EC4C4")]
	private static extern bool criAtomExAcb_GetUsableAisacControlById(IntPtr acb_hn, int id, ushort index, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x6000514")]
	[Address(RVA = "0x19EC200", Offset = "0x19EC200", VA = "0x19EC200")]
	private static extern bool criAtomExAcb_GetUsableAisacControlByName(IntPtr acb_hn, string name, ushort index, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x6000515")]
	[Address(RVA = "0x19EB98C", Offset = "0x19EB98C", VA = "0x19EB98C")]
	private static extern bool criAtomExAcb_GetWaveformInfoById(IntPtr acb_hn, int id, IntPtr waveform_info);

	[PreserveSig]
	[Token(Token = "0x6000516")]
	[Address(RVA = "0x19EB6D8", Offset = "0x19EB6D8", VA = "0x19EB6D8")]
	private static extern bool criAtomExAcb_GetWaveformInfoByName(IntPtr acb_hn, string name, IntPtr waveform_info);

	[PreserveSig]
	[Token(Token = "0x6000517")]
	[Address(RVA = "0x19EAD6C", Offset = "0x19EAD6C", VA = "0x19EAD6C")]
	private static extern bool criAtomExAcb_GetCueInfoByName(IntPtr acb_hn, string name, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x6000518")]
	[Address(RVA = "0x19EB020", Offset = "0x19EB020", VA = "0x19EB020")]
	private static extern bool criAtomExAcb_GetCueInfoById(IntPtr acb_hn, int id, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x6000519")]
	[Address(RVA = "0x19EB2B0", Offset = "0x19EB2B0", VA = "0x19EB2B0")]
	private static extern bool criAtomExAcb_GetCueInfoByIndex(IntPtr acb_hn, int index, IntPtr info);

	[PreserveSig]
	[Token(Token = "0x600051A")]
	[Address(RVA = "0x19EBA70", Offset = "0x19EBA70", VA = "0x19EBA70")]
	private static extern int criAtomExAcb_GetNumCuePlayingCountByName(IntPtr acb_hn, string name);

	[PreserveSig]
	[Token(Token = "0x600051B")]
	[Address(RVA = "0x19EBB68", Offset = "0x19EBB68", VA = "0x19EBB68")]
	private static extern int criAtomExAcb_GetNumCuePlayingCountById(IntPtr acb_hn, int id);

	[PreserveSig]
	[Token(Token = "0x600051C")]
	[Address(RVA = "0x19EBD80", Offset = "0x19EBD80", VA = "0x19EBD80")]
	private static extern int criAtomExAcb_GetBlockIndexById(IntPtr acb_hn, int id, string block_name);

	[PreserveSig]
	[Token(Token = "0x600051D")]
	[Address(RVA = "0x19EBC54", Offset = "0x19EBC54", VA = "0x19EBC54")]
	private static extern int criAtomExAcb_GetBlockIndexByName(IntPtr acb_hn, string name, string block_name);

	[PreserveSig]
	[Token(Token = "0x600051E")]
	[Address(RVA = "0x19EC784", Offset = "0x19EC784", VA = "0x19EC784")]
	private static extern void criAtomExAcb_ResetCueTypeStateByName(IntPtr acb_hn, string name);

	[PreserveSig]
	[Token(Token = "0x600051F")]
	[Address(RVA = "0x19EC874", Offset = "0x19EC874", VA = "0x19EC874")]
	private static extern void criAtomExAcb_ResetCueTypeStateById(IntPtr acb_hn, int id);

	[PreserveSig]
	[Token(Token = "0x6000520")]
	[Address(RVA = "0x19EC9D4", Offset = "0x19EC9D4", VA = "0x19EC9D4")]
	private static extern void criAtomExAcb_AttachAwbFile(IntPtr acb_hn, IntPtr awb_binder, string awb_path, string awb_name, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x6000521")]
	[Address(RVA = "0x19ECAF8", Offset = "0x19ECAF8", VA = "0x19ECAF8")]
	private static extern void criAtomExAcb_DetachAwbFile(IntPtr acb_hn, string awb_name);
}
[Token(Token = "0x20000AD")]
public class CriAtomExAsrRack : IDisposable
{
	[Token(Token = "0x20000AE")]
	public struct Config
	{
		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float serverFrequency;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int numBuses;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int outputChannels;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int outputSamplingRate;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CriAtomEx.SoundRendererType soundRendererType;

		[Token(Token = "0x40003CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int outputRackId;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IntPtr context;
	}

	[Token(Token = "0x20000AF")]
	public struct PlatformConfig
	{
		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte reserved;
	}

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int defaultRackId;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private int _rackId;

	[Token(Token = "0x17000058")]
	public int rackId
	{
		[Token(Token = "0x6000524")]
		[Address(RVA = "0x19EEC4C", Offset = "0x19EEC4C", VA = "0x19EEC4C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000059")]
	public static Config defaultConfig
	{
		[Token(Token = "0x6000525")]
		[Address(RVA = "0x19EEC54", Offset = "0x19EEC54", VA = "0x19EEC54")]
		get
		{
			return default(Config);
		}
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0x19EE830", Offset = "0x19EE830", VA = "0x19EE830")]
	public CriAtomExAsrRack(Config config, PlatformConfig platformConfig)
	{
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0x19EEAB0", Offset = "0x19EEAB0", VA = "0x19EEAB0", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0x19EECCC", Offset = "0x19EECCC", VA = "0x19EECCC", Slot = "1")]
	~CriAtomExAsrRack()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000527")]
	[Address(RVA = "0x19EE9E8", Offset = "0x19EE9E8", VA = "0x19EE9E8")]
	private static extern int criAtomUnityAsrRack_Create([In] ref Config config, [In] ref PlatformConfig platformConfig);

	[PreserveSig]
	[Token(Token = "0x6000528")]
	[Address(RVA = "0x19EEB8C", Offset = "0x19EEB8C", VA = "0x19EEB8C")]
	private static extern void criAtomExAsrRack_Destroy(int rackId);

	[PreserveSig]
	[Token(Token = "0x6000529")]
	[Address(RVA = "0x19EED28", Offset = "0x19EED28", VA = "0x19EED28")]
	private static extern void criAtomExAsrRack_AttachDspBusSetting(int rackId, string setting, IntPtr work, int workSize);

	[PreserveSig]
	[Token(Token = "0x600052A")]
	[Address(RVA = "0x19EEE1C", Offset = "0x19EEE1C", VA = "0x19EEE1C")]
	private static extern void criAtomExAsrRack_DetachDspBusSetting(int rackId);

	[PreserveSig]
	[Token(Token = "0x600052B")]
	[Address(RVA = "0x19EEEDC", Offset = "0x19EEEDC", VA = "0x19EEEDC")]
	private static extern void criAtomExAsrRack_ApplyDspBusSnapshot(int rackId, string snapshotName, int timeMs);
}
[Token(Token = "0x20000B0")]
public struct CriAtomExPlayback
{
	[Token(Token = "0x20000B1")]
	public enum Status
	{
		[Token(Token = "0x40003D0")]
		Prep = 1,
		[Token(Token = "0x40003D1")]
		Playing,
		[Token(Token = "0x40003D2")]
		Removed
	}

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AD88", Offset = "0xE9AD88")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9AD88", Offset = "0xE9AD88")]
	private uint <id>k__BackingField;

	[Token(Token = "0x1700005A")]
	public uint id
	{
		[Token(Token = "0x600053A")]
		[Address(RVA = "0x19F0DB8", Offset = "0x19F0DB8", VA = "0x19F0DB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9ADBC", Offset = "0xE9ADBC")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x600053B")]
		[Address(RVA = "0x19F0DC0", Offset = "0x19F0DC0", VA = "0x19F0DC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9ADCC", Offset = "0xE9ADCC")]
		private set
		{
		}
	}

	[Token(Token = "0x1700005B")]
	public Status status
	{
		[Token(Token = "0x600053C")]
		[Address(RVA = "0x19F0DD0", Offset = "0x19F0DD0", VA = "0x19F0DD0")]
		get
		{
			return default(Status);
		}
	}

	[Token(Token = "0x1700005C")]
	public long time
	{
		[Token(Token = "0x600053D")]
		[Address(RVA = "0x19F0DD8", Offset = "0x19F0DD8", VA = "0x19F0DD8")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x1700005D")]
	public long timeSyncedWithAudio
	{
		[Token(Token = "0x600053E")]
		[Address(RVA = "0x19F0DE0", Offset = "0x19F0DE0", VA = "0x19F0DE0")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0x19F02C0", Offset = "0x19F02C0", VA = "0x19F02C0")]
	public CriAtomExPlayback(uint id)
	{
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0x19F0460", Offset = "0x19F0460", VA = "0x19F0460")]
	public void Stop(bool ignoresReleaseTime)
	{
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0x19F0530", Offset = "0x19F0530", VA = "0x19F0530")]
	public void Pause()
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0x19F0604", Offset = "0x19F0604", VA = "0x19F0604")]
	public void Resume(CriAtomEx.ResumeMode mode)
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0x19F06D8", Offset = "0x19F06D8", VA = "0x19F06D8")]
	public bool IsPaused()
	{
		return default(bool);
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0x19F07D0", Offset = "0x19F07D0", VA = "0x19F07D0")]
	public bool GetFormatInfo(out CriAtomEx.FormatInfo info)
	{
		return default(bool);
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0x19F089C", Offset = "0x19F089C", VA = "0x19F089C")]
	public Status GetStatus()
	{
		return default(Status);
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0x19F0964", Offset = "0x19F0964", VA = "0x19F0964")]
	public long GetTime()
	{
		return default(long);
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0x19F0A2C", Offset = "0x19F0A2C", VA = "0x19F0A2C")]
	public long GetTimeSyncedWithAudio()
	{
		return default(long);
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0x19F0B30", Offset = "0x19F0B30", VA = "0x19F0B30")]
	public bool GetNumPlayedSamples(out long numSamples, out int samplingRate)
	{
		return default(bool);
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0x19F0C14", Offset = "0x19F0C14", VA = "0x19F0C14")]
	public long GetSequencePosition()
	{
		return default(long);
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0x19F0CDC", Offset = "0x19F0CDC", VA = "0x19F0CDC")]
	public int GetCurrentBlockIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0x19F0DAC", Offset = "0x19F0DAC", VA = "0x19F0DAC")]
	public void SetNextBlockIndex(int index)
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0x19F0DE8", Offset = "0x19F0DE8", VA = "0x19F0DE8")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0x19F0DF0", Offset = "0x19F0DF0", VA = "0x19F0DF0")]
	public void StopWithoutReleaseTime()
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0x19F0DF8", Offset = "0x19F0DF8", VA = "0x19F0DF8")]
	public void Pause(bool sw)
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000542")]
	[Address(RVA = "0x19F02E0", Offset = "0x19F02E0", VA = "0x19F02E0")]
	private static extern void criAtomExPlayback_Stop(uint id);

	[PreserveSig]
	[Token(Token = "0x6000543")]
	[Address(RVA = "0x19F03A0", Offset = "0x19F03A0", VA = "0x19F03A0")]
	private static extern void criAtomExPlayback_StopWithoutReleaseTime(uint id);

	[PreserveSig]
	[Token(Token = "0x6000544")]
	[Address(RVA = "0x19F0468", Offset = "0x19F0468", VA = "0x19F0468")]
	private static extern void criAtomExPlayback_Pause(uint id, bool sw);

	[PreserveSig]
	[Token(Token = "0x6000545")]
	[Address(RVA = "0x19F053C", Offset = "0x19F053C", VA = "0x19F053C")]
	private static extern void criAtomExPlayback_Resume(uint id, CriAtomEx.ResumeMode mode);

	[PreserveSig]
	[Token(Token = "0x6000546")]
	[Address(RVA = "0x19F0610", Offset = "0x19F0610", VA = "0x19F0610")]
	private static extern bool criAtomExPlayback_IsPaused(uint id);

	[PreserveSig]
	[Token(Token = "0x6000547")]
	[Address(RVA = "0x19F07DC", Offset = "0x19F07DC", VA = "0x19F07DC")]
	private static extern Status criAtomExPlayback_GetStatus(uint id);

	[PreserveSig]
	[Token(Token = "0x6000548")]
	[Address(RVA = "0x19F06E0", Offset = "0x19F06E0", VA = "0x19F06E0")]
	private static extern bool criAtomExPlayback_GetFormatInfo(uint id, out CriAtomEx.FormatInfo info);

	[PreserveSig]
	[Token(Token = "0x6000549")]
	[Address(RVA = "0x19F08A4", Offset = "0x19F08A4", VA = "0x19F08A4")]
	private static extern long criAtomExPlayback_GetTime(uint id);

	[PreserveSig]
	[Token(Token = "0x600054A")]
	[Address(RVA = "0x19F096C", Offset = "0x19F096C", VA = "0x19F096C")]
	private static extern long criAtomExPlayback_GetTimeSyncedWithAudio(uint id);

	[PreserveSig]
	[Token(Token = "0x600054B")]
	[Address(RVA = "0x19F0A34", Offset = "0x19F0A34", VA = "0x19F0A34")]
	private static extern bool criAtomExPlayback_GetNumPlayedSamples(uint id, out long num_samples, out int sampling_rate);

	[PreserveSig]
	[Token(Token = "0x600054C")]
	[Address(RVA = "0x19F0B54", Offset = "0x19F0B54", VA = "0x19F0B54")]
	private static extern long criAtomExPlayback_GetSequencePosition(uint id);

	[PreserveSig]
	[Token(Token = "0x600054D")]
	[Address(RVA = "0x19F0CE4", Offset = "0x19F0CE4", VA = "0x19F0CE4")]
	private static extern void criAtomExPlayback_SetNextBlockIndex(uint id, int index);

	[PreserveSig]
	[Token(Token = "0x600054E")]
	[Address(RVA = "0x19F0C1C", Offset = "0x19F0C1C", VA = "0x19F0C1C")]
	private static extern int criAtomExPlayback_GetCurrentBlockIndex(uint id);
}
[Token(Token = "0x20000B2")]
public class CriAtomExPlayer : IDisposable
{
	[Token(Token = "0x20000B3")]
	public enum Status
	{
		[Token(Token = "0x40003D5")]
		Stop,
		[Token(Token = "0x40003D6")]
		Prep,
		[Token(Token = "0x40003D7")]
		Playing,
		[Token(Token = "0x40003D8")]
		PlayEnd,
		[Token(Token = "0x40003D9")]
		Error
	}

	[Token(Token = "0x20000B4")]
	private struct Config
	{
		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CriAtomEx.VoiceAllocationMethod voiceAllocationMethod;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int maxPathStrings;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int maxPath;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool updatesTime;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public bool enableAudioSyncedTimer;
	}

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private IntPtr handle;

	[Token(Token = "0x1700005E")]
	public IntPtr nativeHandle
	{
		[Token(Token = "0x6000553")]
		[Address(RVA = "0x19F15A0", Offset = "0x19F15A0", VA = "0x19F15A0")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0x19F1328", Offset = "0x19F1328", VA = "0x19F1328")]
	public CriAtomExPlayer()
	{
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0x19F1430", Offset = "0x19F1430", VA = "0x19F1430")]
	public CriAtomExPlayer(int maxPath, int maxPathStrings)
	{
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0x19F144C", Offset = "0x19F144C", VA = "0x19F144C")]
	public CriAtomExPlayer(bool enableAudioSyncedTimer)
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0x19F134C", Offset = "0x19F134C", VA = "0x19F134C")]
	public CriAtomExPlayer(int maxPath, int maxPathStrings, bool enableAudioSyncedTimer)
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0x19F15A8", Offset = "0x19F15A8", VA = "0x19F15A8", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0x19F1704", Offset = "0x19F1704", VA = "0x19F1704")]
	public void SetCue(CriAtomExAcb acb, string name)
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0x19F1864", Offset = "0x19F1864", VA = "0x19F1864")]
	public void SetCue(CriAtomExAcb acb, int id)
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0x19F19A8", Offset = "0x19F19A8", VA = "0x19F19A8")]
	public void SetCueIndex(CriAtomExAcb acb, int index)
	{
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0x19F1AEC", Offset = "0x19F1AEC", VA = "0x19F1AEC")]
	public void SetContentId(CriFsBinder binder, int contentId)
	{
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0x19F1C44", Offset = "0x19F1C44", VA = "0x19F1C44")]
	public void SetFile(CriFsBinder binder, string path)
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0x19F1DB8", Offset = "0x19F1DB8", VA = "0x19F1DB8")]
	public void SetData(byte[] buffer, int size)
	{
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0x19F1EB4", Offset = "0x19F1EB4", VA = "0x19F1EB4")]
	public void SetFormat(CriAtomEx.Format format)
	{
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0x19F1F88", Offset = "0x19F1F88", VA = "0x19F1F88")]
	public void SetNumChannels(int numChannels)
	{
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0x19F205C", Offset = "0x19F205C", VA = "0x19F205C")]
	public void SetVoicePoolIdentifier(uint identifier)
	{
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0x19F2130", Offset = "0x19F2130", VA = "0x19F2130")]
	public void SetSamplingRate(int samplingRate)
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0x19F2204", Offset = "0x19F2204", VA = "0x19F2204")]
	public CriAtomExPlayback Start()
	{
		return default(CriAtomExPlayback);
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0x19F22CC", Offset = "0x19F22CC", VA = "0x19F22CC")]
	public CriAtomExPlayback Prepare()
	{
		return default(CriAtomExPlayback);
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0x19F2394", Offset = "0x19F2394", VA = "0x19F2394")]
	public void Stop(bool ignoresReleaseTime)
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0x19F252C", Offset = "0x19F252C", VA = "0x19F252C")]
	public void Pause()
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0x19F2600", Offset = "0x19F2600", VA = "0x19F2600")]
	public void Resume(CriAtomEx.ResumeMode mode)
	{
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0x19F26D4", Offset = "0x19F26D4", VA = "0x19F26D4")]
	public bool IsPaused()
	{
		return default(bool);
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0x19F27A4", Offset = "0x19F27A4", VA = "0x19F27A4")]
	public void SetVolume(float volume)
	{
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0x19F2878", Offset = "0x19F2878", VA = "0x19F2878")]
	public void SetPitch(float pitch)
	{
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0x19F294C", Offset = "0x19F294C", VA = "0x19F294C")]
	public void SetPan3dAngle(float angle)
	{
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0x19F2A20", Offset = "0x19F2A20", VA = "0x19F2A20")]
	public void SetPan3dInteriorDistance(float distance)
	{
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0x19F2AF4", Offset = "0x19F2AF4", VA = "0x19F2AF4")]
	public void SetPan3dVolume(float volume)
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0x19F2BC8", Offset = "0x19F2BC8", VA = "0x19F2BC8")]
	public void SetPanType(CriAtomEx.PanType panType)
	{
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0x19F2C9C", Offset = "0x19F2C9C", VA = "0x19F2C9C")]
	public void SetSendLevel(int channel, CriAtomEx.Speaker id, float level)
	{
	}

	[Token(Token = "0x600056C")]
	[Address(RVA = "0x19F2DA0", Offset = "0x19F2DA0", VA = "0x19F2DA0")]
	public void SetBiquadFilterParameters(CriAtomEx.BiquadFilterType type, float frequency, float gain, float q)
	{
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0x19F2EB4", Offset = "0x19F2EB4", VA = "0x19F2EB4")]
	public void SetBandpassFilterParameters(float cofLow, float cofHigh)
	{
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0x19F2FA8", Offset = "0x19F2FA8", VA = "0x19F2FA8")]
	public void SetBusSendLevel(int busId, float level)
	{
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0x19F309C", Offset = "0x19F309C", VA = "0x19F309C")]
	public void SetBusSendLevelOffset(int busId, float levelOffset)
	{
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0x19F3190", Offset = "0x19F3190", VA = "0x19F3190")]
	public void SetAisac(string controlName, float value)
	{
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0x19F32A0", Offset = "0x19F32A0", VA = "0x19F32A0")]
	public void SetAisac(uint controlId, float value)
	{
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0x19F3398", Offset = "0x19F3398", VA = "0x19F3398")]
	public void Set3dSource(CriAtomEx3dSource source)
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0x19F34C4", Offset = "0x19F34C4", VA = "0x19F34C4")]
	public void Set3dListener(CriAtomEx3dListener listener)
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0x19F35F0", Offset = "0x19F35F0", VA = "0x19F35F0")]
	public void SetStartTime(long startTimeMs)
	{
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0x19F36DC", Offset = "0x19F36DC", VA = "0x19F36DC")]
	public void SetFirstBlockIndex(int index)
	{
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0x19F37B0", Offset = "0x19F37B0", VA = "0x19F37B0")]
	public void SetSelectorLabel(string selector, string label)
	{
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0x19F38D4", Offset = "0x19F38D4", VA = "0x19F38D4")]
	public void SetCategory(int categoryId)
	{
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0x19F39A8", Offset = "0x19F39A8", VA = "0x19F39A8")]
	public void SetCategory(string categoryName)
	{
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0x19F3A98", Offset = "0x19F3A98", VA = "0x19F3A98")]
	public void UnsetCategory()
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0x19F3B60", Offset = "0x19F3B60", VA = "0x19F3B60")]
	public void SetCuePriority(int priority)
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0x19F3C34", Offset = "0x19F3C34", VA = "0x19F3C34")]
	public void SetVoicePriority(int priority)
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0x19F3D08", Offset = "0x19F3D08", VA = "0x19F3D08")]
	public void SetVoiceControlMethod(CriAtomEx.VoiceControlMethod method)
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0x19F3DDC", Offset = "0x19F3DDC", VA = "0x19F3DDC")]
	public void SetEnvelopeAttackTime(float time)
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0x19F3EB0", Offset = "0x19F3EB0", VA = "0x19F3EB0")]
	public void SetEnvelopeHoldTime(float time)
	{
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0x19F3F84", Offset = "0x19F3F84", VA = "0x19F3F84")]
	public void SetEnvelopeDecayTime(float time)
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0x19F4058", Offset = "0x19F4058", VA = "0x19F4058")]
	public void SetEnvelopeReleaseTime(float time)
	{
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0x19F412C", Offset = "0x19F412C", VA = "0x19F412C")]
	public void SetEnvelopeSustainLevel(float level)
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0x19F4200", Offset = "0x19F4200", VA = "0x19F4200")]
	public void AttachFader()
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0x19F4340", Offset = "0x19F4340", VA = "0x19F4340")]
	public void DetachFader()
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0x19F4408", Offset = "0x19F4408", VA = "0x19F4408")]
	public void SetFadeOutTime(int ms)
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0x19F44DC", Offset = "0x19F44DC", VA = "0x19F44DC")]
	public void SetFadeInTime(int ms)
	{
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0x19F45B0", Offset = "0x19F45B0", VA = "0x19F45B0")]
	public void SetFadeInStartOffset(int ms)
	{
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0x19F4684", Offset = "0x19F4684", VA = "0x19F4684")]
	public void SetFadeOutEndDelay(int ms)
	{
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0x19F4758", Offset = "0x19F4758", VA = "0x19F4758")]
	public bool IsFading()
	{
		return default(bool);
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0x19F4828", Offset = "0x19F4828", VA = "0x19F4828")]
	public void ResetFaderParameters()
	{
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0x19F48F0", Offset = "0x19F48F0", VA = "0x19F48F0")]
	public void SetGroupNumber(int group_no)
	{
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0x19F49C4", Offset = "0x19F49C4", VA = "0x19F49C4")]
	public void Update(CriAtomExPlayback playback)
	{
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0x19F4A98", Offset = "0x19F4A98", VA = "0x19F4A98")]
	public void UpdateAll()
	{
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0x19F4B60", Offset = "0x19F4B60", VA = "0x19F4B60")]
	public void ResetParameters()
	{
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0x19F4C28", Offset = "0x19F4C28", VA = "0x19F4C28")]
	public long GetTime()
	{
		return default(long);
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0x19F4CF0", Offset = "0x19F4CF0", VA = "0x19F4CF0")]
	public Status GetStatus()
	{
		return default(Status);
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0x19F4DB8", Offset = "0x19F4DB8", VA = "0x19F4DB8")]
	public float GetParameterFloat32(CriAtomEx.Parameter id)
	{
		return default(float);
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0x19F4E8C", Offset = "0x19F4E8C", VA = "0x19F4E8C")]
	public uint GetParameterUint32(CriAtomEx.Parameter id)
	{
		return default(uint);
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0x19F4F60", Offset = "0x19F4F60", VA = "0x19F4F60")]
	public int GetParameterSint32(CriAtomEx.Parameter id)
	{
		return default(int);
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0x19F5034", Offset = "0x19F5034", VA = "0x19F5034")]
	public void SetSoundRendererType(CriAtomEx.SoundRendererType type)
	{
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0x19F5108", Offset = "0x19F5108", VA = "0x19F5108")]
	public void SetRandomSeed(uint seed)
	{
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0x19F51DC", Offset = "0x19F51DC", VA = "0x19F51DC")]
	public void Loop(bool sw)
	{
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0x19F52BC", Offset = "0x19F52BC", VA = "0x19F52BC")]
	public void SetAsrRackId(int asr_rack_id)
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0x19F5390", Offset = "0x19F5390", VA = "0x19F5390")]
	public void SetSequencePrepareTime(uint ms)
	{
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0x19F5464", Offset = "0x19F5464", VA = "0x19F5464")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0x19F546C", Offset = "0x19F546C", VA = "0x19F546C")]
	public void StopWithoutReleaseTime()
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0x19F5474", Offset = "0x19F5474", VA = "0x19F5474")]
	public void Pause(bool sw)
	{
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0x19F5480", Offset = "0x19F5480", VA = "0x19F5480", Slot = "1")]
	~CriAtomExPlayer()
	{
	}

	[PreserveSig]
	[Token(Token = "0x600059C")]
	[Address(RVA = "0x19F1470", Offset = "0x19F1470", VA = "0x19F1470")]
	private static extern IntPtr criAtomExPlayer_Create(ref Config config, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x600059D")]
	[Address(RVA = "0x19F1644", Offset = "0x19F1644", VA = "0x19F1644")]
	private static extern void criAtomExPlayer_Destroy(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x600059E")]
	[Address(RVA = "0x19F18D8", Offset = "0x19F18D8", VA = "0x19F18D8")]
	private static extern void criAtomExPlayer_SetCueId(IntPtr player, IntPtr acb_hn, int id);

	[PreserveSig]
	[Token(Token = "0x600059F")]
	[Address(RVA = "0x19F1778", Offset = "0x19F1778", VA = "0x19F1778")]
	private static extern void criAtomExPlayer_SetCueName(IntPtr player, IntPtr acb_hn, string cue_name);

	[PreserveSig]
	[Token(Token = "0x60005A0")]
	[Address(RVA = "0x19F1A1C", Offset = "0x19F1A1C", VA = "0x19F1A1C")]
	private static extern void criAtomExPlayer_SetCueIndex(IntPtr player, IntPtr acb_hn, int index);

	[PreserveSig]
	[Token(Token = "0x60005A1")]
	[Address(RVA = "0x19F1CCC", Offset = "0x19F1CCC", VA = "0x19F1CCC")]
	private static extern void criAtomExPlayer_SetFile(IntPtr player, IntPtr binder, string path);

	[PreserveSig]
	[Token(Token = "0x60005A2")]
	[Address(RVA = "0x19F1DDC", Offset = "0x19F1DDC", VA = "0x19F1DDC")]
	private static extern void criAtomExPlayer_SetData(IntPtr player, byte[] buffer, int size);

	[PreserveSig]
	[Token(Token = "0x60005A3")]
	[Address(RVA = "0x19F1B74", Offset = "0x19F1B74", VA = "0x19F1B74")]
	private static extern void criAtomExPlayer_SetContentId(IntPtr player, IntPtr binder, int id);

	[PreserveSig]
	[Token(Token = "0x60005A4")]
	[Address(RVA = "0x19F220C", Offset = "0x19F220C", VA = "0x19F220C")]
	private static extern uint criAtomExPlayer_Start(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60005A5")]
	[Address(RVA = "0x19F22D4", Offset = "0x19F22D4", VA = "0x19F22D4")]
	private static extern uint criAtomExPlayer_Prepare(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60005A6")]
	[Address(RVA = "0x19F23AC", Offset = "0x19F23AC", VA = "0x19F23AC")]
	private static extern void criAtomExPlayer_Stop(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60005A7")]
	[Address(RVA = "0x19F246C", Offset = "0x19F246C", VA = "0x19F246C")]
	private static extern void criAtomExPlayer_StopWithoutReleaseTime(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60005A8")]
	[Address(RVA = "0x19F2538", Offset = "0x19F2538", VA = "0x19F2538")]
	private static extern void criAtomExPlayer_Pause(IntPtr player, bool sw);

	[PreserveSig]
	[Token(Token = "0x60005A9")]
	[Address(RVA = "0x19F260C", Offset = "0x19F260C", VA = "0x19F260C")]
	private static extern void criAtomExPlayer_Resume(IntPtr player, CriAtomEx.ResumeMode mode);

	[PreserveSig]
	[Token(Token = "0x60005AA")]
	[Address(RVA = "0x19F26DC", Offset = "0x19F26DC", VA = "0x19F26DC")]
	private static extern bool criAtomExPlayer_IsPaused(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60005AB")]
	[Address(RVA = "0x19F4CF8", Offset = "0x19F4CF8", VA = "0x19F4CF8")]
	private static extern Status criAtomExPlayer_GetStatus(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60005AC")]
	[Address(RVA = "0x19F4C30", Offset = "0x19F4C30", VA = "0x19F4C30")]
	private static extern long criAtomExPlayer_GetTime(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60005AD")]
	[Address(RVA = "0x19F1EC0", Offset = "0x19F1EC0", VA = "0x19F1EC0")]
	private static extern void criAtomExPlayer_SetFormat(IntPtr player, CriAtomEx.Format format);

	[PreserveSig]
	[Token(Token = "0x60005AE")]
	[Address(RVA = "0x19F1F94", Offset = "0x19F1F94", VA = "0x19F1F94")]
	private static extern void criAtomExPlayer_SetNumChannels(IntPtr player, int num_channels);

	[PreserveSig]
	[Token(Token = "0x60005AF")]
	[Address(RVA = "0x19F213C", Offset = "0x19F213C", VA = "0x19F213C")]
	private static extern void criAtomExPlayer_SetSamplingRate(IntPtr player, int sampling_rate);

	[PreserveSig]
	[Token(Token = "0x60005B0")]
	[Address(RVA = "0x19F360C", Offset = "0x19F360C", VA = "0x19F360C")]
	private static extern void criAtomExPlayer_SetStartTime(IntPtr player, long start_time_ms);

	[PreserveSig]
	[Token(Token = "0x60005B1")]
	[Address(RVA = "0x19F539C", Offset = "0x19F539C", VA = "0x19F539C")]
	private static extern void criAtomExPlayer_SetSequencePrepareTime(IntPtr player, uint seq_prep_time_ms);

	[PreserveSig]
	[Token(Token = "0x60005B2")]
	[Address(RVA = "0x19F2068", Offset = "0x19F2068", VA = "0x19F2068")]
	private static extern void criAtomExPlayer_SetVoicePoolIdentifier(IntPtr player, uint identifier);

	[PreserveSig]
	[Token(Token = "0x60005B3")]
	[Address(RVA = "0x19F51F4", Offset = "0x19F51F4", VA = "0x19F51F4")]
	private static extern void criAtomExPlayer_LimitLoopCount(IntPtr player, int count);

	[PreserveSig]
	[Token(Token = "0x60005B4")]
	[Address(RVA = "0x19F49D0", Offset = "0x19F49D0", VA = "0x19F49D0")]
	private static extern void criAtomExPlayer_Update(IntPtr player, uint id);

	[PreserveSig]
	[Token(Token = "0x60005B5")]
	[Address(RVA = "0x19F4AA0", Offset = "0x19F4AA0", VA = "0x19F4AA0")]
	private static extern void criAtomExPlayer_UpdateAll(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60005B6")]
	[Address(RVA = "0x19F4B68", Offset = "0x19F4B68", VA = "0x19F4B68")]
	private static extern void criAtomExPlayer_ResetParameters(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60005B7")]
	[Address(RVA = "0x19F4DC4", Offset = "0x19F4DC4", VA = "0x19F4DC4")]
	private static extern float criAtomExPlayer_GetParameterFloat32(IntPtr player, CriAtomEx.Parameter id);

	[PreserveSig]
	[Token(Token = "0x60005B8")]
	[Address(RVA = "0x19F4E98", Offset = "0x19F4E98", VA = "0x19F4E98")]
	private static extern uint criAtomExPlayer_GetParameterUint32(IntPtr player, CriAtomEx.Parameter id);

	[PreserveSig]
	[Token(Token = "0x60005B9")]
	[Address(RVA = "0x19F4F6C", Offset = "0x19F4F6C", VA = "0x19F4F6C")]
	private static extern int criAtomExPlayer_GetParameterSint32(IntPtr player, CriAtomEx.Parameter id);

	[PreserveSig]
	[Token(Token = "0x60005BA")]
	[Address(RVA = "0x19F27B0", Offset = "0x19F27B0", VA = "0x19F27B0")]
	private static extern void criAtomExPlayer_SetVolume(IntPtr player, float volume);

	[PreserveSig]
	[Token(Token = "0x60005BB")]
	[Address(RVA = "0x19F2884", Offset = "0x19F2884", VA = "0x19F2884")]
	private static extern void criAtomExPlayer_SetPitch(IntPtr player, float pitch);

	[PreserveSig]
	[Token(Token = "0x60005BC")]
	[Address(RVA = "0x19F2958", Offset = "0x19F2958", VA = "0x19F2958")]
	private static extern void criAtomExPlayer_SetPan3dAngle(IntPtr player, float pan3d_angle);

	[PreserveSig]
	[Token(Token = "0x60005BD")]
	[Address(RVA = "0x19F2A2C", Offset = "0x19F2A2C", VA = "0x19F2A2C")]
	private static extern void criAtomExPlayer_SetPan3dInteriorDistance(IntPtr player, float pan3d_interior_distance);

	[PreserveSig]
	[Token(Token = "0x60005BE")]
	[Address(RVA = "0x19F2B00", Offset = "0x19F2B00", VA = "0x19F2B00")]
	private static extern void criAtomExPlayer_SetPan3dVolume(IntPtr player, float pan3d_volume);

	[PreserveSig]
	[Token(Token = "0x60005BF")]
	[Address(RVA = "0x19F2BD4", Offset = "0x19F2BD4", VA = "0x19F2BD4")]
	private static extern void criAtomExPlayer_SetPanType(IntPtr player, CriAtomEx.PanType panType);

	[PreserveSig]
	[Token(Token = "0x60005C0")]
	[Address(RVA = "0x19F2CC8", Offset = "0x19F2CC8", VA = "0x19F2CC8")]
	private static extern void criAtomExPlayer_SetSendLevel(IntPtr player, int channel, CriAtomEx.Speaker id, float level);

	[PreserveSig]
	[Token(Token = "0x60005C1")]
	[Address(RVA = "0x19F2FCC", Offset = "0x19F2FCC", VA = "0x19F2FCC")]
	private static extern void criAtomExPlayer_SetBusSendLevel(IntPtr player, int bus_id, float level);

	[PreserveSig]
	[Token(Token = "0x60005C2")]
	[Address(RVA = "0x19F30C0", Offset = "0x19F30C0", VA = "0x19F30C0")]
	private static extern void criAtomExPlayer_SetBusSendLevelOffset(IntPtr player, int bus_id, float level_offset);

	[PreserveSig]
	[Token(Token = "0x60005C3")]
	[Address(RVA = "0x19F2ED8", Offset = "0x19F2ED8", VA = "0x19F2ED8")]
	private static extern void criAtomExPlayer_SetBandpassFilterParameters(IntPtr player, float cof_low, float cof_high);

	[PreserveSig]
	[Token(Token = "0x60005C4")]
	[Address(RVA = "0x19F2DD4", Offset = "0x19F2DD4", VA = "0x19F2DD4")]
	private static extern void criAtomExPlayer_SetBiquadFilterParameters(IntPtr player, CriAtomEx.BiquadFilterType type, float frequency, float gain, float q);

	[PreserveSig]
	[Token(Token = "0x60005C5")]
	[Address(RVA = "0x19F3C40", Offset = "0x19F3C40", VA = "0x19F3C40")]
	private static extern void criAtomExPlayer_SetVoicePriority(IntPtr player, int priority);

	[PreserveSig]
	[Token(Token = "0x60005C6")]
	[Address(RVA = "0x19F3D14", Offset = "0x19F3D14", VA = "0x19F3D14")]
	private static extern void criAtomExPlayer_SetVoiceControlMethod(IntPtr player, CriAtomEx.VoiceControlMethod method);

	[PreserveSig]
	[Token(Token = "0x60005C7")]
	[Address(RVA = "0x19F32C8", Offset = "0x19F32C8", VA = "0x19F32C8")]
	private static extern void criAtomExPlayer_SetAisacControlById(IntPtr player, ushort control_id, float control_value);

	[PreserveSig]
	[Token(Token = "0x60005C8")]
	[Address(RVA = "0x19F31B4", Offset = "0x19F31B4", VA = "0x19F31B4")]
	private static extern void criAtomExPlayer_SetAisacControlByName(IntPtr player, string control_name, float control_value);

	[PreserveSig]
	[Token(Token = "0x60005C9")]
	[Address(RVA = "0x19F33FC", Offset = "0x19F33FC", VA = "0x19F33FC")]
	private static extern void criAtomExPlayer_Set3dSourceHn(IntPtr player, IntPtr source);

	[PreserveSig]
	[Token(Token = "0x60005CA")]
	[Address(RVA = "0x19F3528", Offset = "0x19F3528", VA = "0x19F3528")]
	private static extern void criAtomExPlayer_Set3dListenerHn(IntPtr player, IntPtr listener);

	[PreserveSig]
	[Token(Token = "0x60005CB")]
	[Address(RVA = "0x19F38E0", Offset = "0x19F38E0", VA = "0x19F38E0")]
	private static extern void criAtomExPlayer_SetCategoryById(IntPtr player, uint category_id);

	[PreserveSig]
	[Token(Token = "0x60005CC")]
	[Address(RVA = "0x19F39B4", Offset = "0x19F39B4", VA = "0x19F39B4")]
	private static extern void criAtomExPlayer_SetCategoryByName(IntPtr player, string category_name);

	[PreserveSig]
	[Token(Token = "0x60005CD")]
	[Address(RVA = "0x19F3AA0", Offset = "0x19F3AA0", VA = "0x19F3AA0")]
	private static extern void criAtomExPlayer_UnsetCategory(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60005CE")]
	[Address(RVA = "0x19F3B6C", Offset = "0x19F3B6C", VA = "0x19F3B6C")]
	private static extern void criAtomExPlayer_SetCuePriority(IntPtr player, int cue_priority);

	[PreserveSig]
	[Token(Token = "0x60005CF")]
	[Address(RVA = "0x19F3DE8", Offset = "0x19F3DE8", VA = "0x19F3DE8")]
	private static extern void criAtomExPlayer_SetEnvelopeAttackTime(IntPtr player, float attack_time_ms);

	[PreserveSig]
	[Token(Token = "0x60005D0")]
	[Address(RVA = "0x19F3EBC", Offset = "0x19F3EBC", VA = "0x19F3EBC")]
	private static extern void criAtomExPlayer_SetEnvelopeHoldTime(IntPtr player, float hold_time_ms);

	[PreserveSig]
	[Token(Token = "0x60005D1")]
	[Address(RVA = "0x19F3F90", Offset = "0x19F3F90", VA = "0x19F3F90")]
	private static extern void criAtomExPlayer_SetEnvelopeDecayTime(IntPtr player, float decay_time_ms);

	[PreserveSig]
	[Token(Token = "0x60005D2")]
	[Address(RVA = "0x19F4064", Offset = "0x19F4064", VA = "0x19F4064")]
	private static extern void criAtomExPlayer_SetEnvelopeReleaseTime(IntPtr player, float release_time_ms);

	[PreserveSig]
	[Token(Token = "0x60005D3")]
	[Address(RVA = "0x19F4138", Offset = "0x19F4138", VA = "0x19F4138")]
	private static extern void criAtomExPlayer_SetEnvelopeSustainLevel(IntPtr player, float susutain_level);

	[PreserveSig]
	[Token(Token = "0x60005D4")]
	[Address(RVA = "0x19F426C", Offset = "0x19F426C", VA = "0x19F426C")]
	private static extern void criAtomExPlayer_AttachFader(IntPtr player, IntPtr config, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x60005D5")]
	[Address(RVA = "0x19F4348", Offset = "0x19F4348", VA = "0x19F4348")]
	private static extern void criAtomExPlayer_DetachFader(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60005D6")]
	[Address(RVA = "0x19F4414", Offset = "0x19F4414", VA = "0x19F4414")]
	private static extern void criAtomExPlayer_SetFadeOutTime(IntPtr player, int ms);

	[PreserveSig]
	[Token(Token = "0x60005D7")]
	[Address(RVA = "0x19F44E8", Offset = "0x19F44E8", VA = "0x19F44E8")]
	private static extern void criAtomExPlayer_SetFadeInTime(IntPtr player, int ms);

	[PreserveSig]
	[Token(Token = "0x60005D8")]
	[Address(RVA = "0x19F45BC", Offset = "0x19F45BC", VA = "0x19F45BC")]
	private static extern void criAtomExPlayer_SetFadeInStartOffset(IntPtr player, int ms);

	[PreserveSig]
	[Token(Token = "0x60005D9")]
	[Address(RVA = "0x19F4690", Offset = "0x19F4690", VA = "0x19F4690")]
	private static extern void criAtomExPlayer_SetFadeOutEndDelay(IntPtr player, int ms);

	[PreserveSig]
	[Token(Token = "0x60005DA")]
	[Address(RVA = "0x19F4760", Offset = "0x19F4760", VA = "0x19F4760")]
	private static extern bool criAtomExPlayer_IsFading(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60005DB")]
	[Address(RVA = "0x19F4830", Offset = "0x19F4830", VA = "0x19F4830")]
	private static extern void criAtomExPlayer_ResetFaderParameters(IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60005DC")]
	[Address(RVA = "0x19F48FC", Offset = "0x19F48FC", VA = "0x19F48FC")]
	private static extern void criAtomExPlayer_SetGroupNumber(IntPtr player, int group_no);

	[PreserveSig]
	[Token(Token = "0x60005DD")]
	[Address(RVA = "0x19F54DC", Offset = "0x19F54DC", VA = "0x19F54DC")]
	private static extern bool criAtomExPlayer_GetAttachedAisacInfo(IntPtr player, int aisac_attached_index, IntPtr aisac_info);

	[PreserveSig]
	[Token(Token = "0x60005DE")]
	[Address(RVA = "0x19F36E8", Offset = "0x19F36E8", VA = "0x19F36E8")]
	private static extern void criAtomExPlayer_SetFirstBlockIndex(IntPtr player, int index);

	[PreserveSig]
	[Token(Token = "0x60005DF")]
	[Address(RVA = "0x19F37D4", Offset = "0x19F37D4", VA = "0x19F37D4")]
	private static extern void criAtomExPlayer_SetSelectorLabel(IntPtr player, string selector, string label);

	[PreserveSig]
	[Token(Token = "0x60005E0")]
	[Address(RVA = "0x19F5040", Offset = "0x19F5040", VA = "0x19F5040")]
	private static extern void criAtomExPlayer_SetSoundRendererType(IntPtr player, CriAtomEx.SoundRendererType type);

	[PreserveSig]
	[Token(Token = "0x60005E1")]
	[Address(RVA = "0x19F5114", Offset = "0x19F5114", VA = "0x19F5114")]
	private static extern void criAtomExPlayer_SetRandomSeed(IntPtr player, uint seed);

	[PreserveSig]
	[Token(Token = "0x60005E2")]
	[Address(RVA = "0x19F55B4", Offset = "0x19F55B4", VA = "0x19F55B4")]
	private static extern void criAtomExPlayer_Loop(IntPtr player, bool sw);

	[PreserveSig]
	[Token(Token = "0x60005E3")]
	[Address(RVA = "0x19F52C8", Offset = "0x19F52C8", VA = "0x19F52C8")]
	private static extern void criAtomExPlayer_SetAsrRackId(IntPtr player, int asr_rack_id);
}
[Token(Token = "0x20000B5")]
public class CriAtomExPlayerOutputAnalyzer : IDisposable
{
	[Token(Token = "0x20000B6")]
	public enum Type
	{
		[Token(Token = "0x40003E3")]
		LevelMeter,
		[Token(Token = "0x40003E4")]
		SpectrumAnalyzer
	}

	[Token(Token = "0x20000B7")]
	public struct Config
	{
		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int num_spectrum_analyzer_bands;

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x19034C4", Offset = "0x19034C4", VA = "0x19034C4")]
		public Config(int num_spectrum_analyzer_bands = 8)
		{
		}
	}

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private IntPtr handle;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private CriAtomExPlayer player;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int numBands;

	[Token(Token = "0x1700005F")]
	public IntPtr nativeHandle
	{
		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x1902BFC", Offset = "0x1902BFC", VA = "0x1902BFC")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0x19029EC", Offset = "0x19029EC", VA = "0x19029EC")]
	public CriAtomExPlayerOutputAnalyzer(Type[] types, [Optional] Config[] configs)
	{
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0x1902C04", Offset = "0x1902C04", VA = "0x1902C04", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0x1902E7C", Offset = "0x1902E7C", VA = "0x1902E7C")]
	public bool AttachExPlayer(CriAtomExPlayer player)
	{
		return default(bool);
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0x1902C8C", Offset = "0x1902C8C", VA = "0x1902C8C")]
	public void DetachExPlayer()
	{
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0x19030D0", Offset = "0x19030D0", VA = "0x19030D0")]
	public float GetRms(int channel)
	{
		return default(float);
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0x190326C", Offset = "0x190326C", VA = "0x190326C")]
	public void GetSpectrumLevels(ref float[] levels)
	{
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0x1903468", Offset = "0x1903468", VA = "0x1903468", Slot = "1")]
	~CriAtomExPlayerOutputAnalyzer()
	{
	}

	[PreserveSig]
	[Token(Token = "0x60005EC")]
	[Address(RVA = "0x1902B1C", Offset = "0x1902B1C", VA = "0x1902B1C")]
	private static extern IntPtr criAtomExPlayerOutputAnalyzer_Create(int numTypes, Type[] types, Config[] configs);

	[PreserveSig]
	[Token(Token = "0x60005ED")]
	[Address(RVA = "0x1902DBC", Offset = "0x1902DBC", VA = "0x1902DBC")]
	private static extern IntPtr criAtomExPlayerOutputAnalyzer_Destroy(IntPtr analyzer);

	[PreserveSig]
	[Token(Token = "0x60005EE")]
	[Address(RVA = "0x1902F40", Offset = "0x1902F40", VA = "0x1902F40")]
	private static extern void criAtomExPlayerOutputAnalyzer_AttachExPlayer(IntPtr analyzer, IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60005EF")]
	[Address(RVA = "0x1903008", Offset = "0x1903008", VA = "0x1903008")]
	private static extern void criAtomExPlayerOutputAnalyzer_DetachExPlayer(IntPtr analyzer, IntPtr player);

	[PreserveSig]
	[Token(Token = "0x60005F0")]
	[Address(RVA = "0x19031A4", Offset = "0x19031A4", VA = "0x19031A4")]
	private static extern float criAtomExPlayerOutputAnalyzer_GetRms(IntPtr analyzer, int channel);

	[PreserveSig]
	[Token(Token = "0x60005F1")]
	[Address(RVA = "0x19033A8", Offset = "0x19033A8", VA = "0x19033A8")]
	private static extern IntPtr criAtomExPlayerOutputAnalyzer_GetSpectrumLevels(IntPtr analyzer);
}
[Token(Token = "0x20000B8")]
public static class CriAtomExSpatializer
{
	[Token(Token = "0x20000B9")]
	public struct SpatializerConfig
	{
		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int samplingRate;

		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int coordinateSystem;
	}

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool initializeModuleHelper;

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0x1903974", Offset = "0x1903974", VA = "0x1903974")]
	public static bool InitializeModule(ref SpatializerConfig config)
	{
		return default(bool);
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0x1903D10", Offset = "0x1903D10", VA = "0x1903D10")]
	public static void FinalizeModule()
	{
	}

	[PreserveSig]
	[Token(Token = "0x60005F5")]
	[Address(RVA = "0x1903C38", Offset = "0x1903C38", VA = "0x1903C38")]
	private static extern bool criAtomExSpatializer_Initialize_OculusAudio(ref SpatializerConfig config, IntPtr work, int work_size);

	[PreserveSig]
	[Token(Token = "0x60005F6")]
	[Address(RVA = "0x1903DB8", Offset = "0x1903DB8", VA = "0x1903DB8")]
	private static extern void criAtomExSpatializer_Finalize_OculusAudio();
}
[Token(Token = "0x20000BA")]
public static class CriAtomExVoicePoolFactory
{
	[Token(Token = "0x20000BB")]
	private class CriAtomExSpatializerVoicePool : CriAtomExVoicePool
	{
		[Token(Token = "0x20000BC")]
		private struct SpatializerVoicePoolConfig
		{
			[Token(Token = "0x40003E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int numSpatializers;
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x19044F0", Offset = "0x19044F0", VA = "0x19044F0")]
		public CriAtomExSpatializerVoicePool(IntPtr nativeHandle, uint identifier, int numSpatializers)
		{
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x19047F8", Offset = "0x19047F8", VA = "0x19047F8", Slot = "5")]
		protected override void DisposeUnmanagedResource()
		{
		}

		[PreserveSig]
		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x1904724", Offset = "0x1904724", VA = "0x1904724")]
		private static extern void criAtomExVoicePool_AttachSpatializer_OculusAudio(IntPtr pool, ref SpatializerVoicePoolConfig config, IntPtr work, int work_size);

		[PreserveSig]
		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x1904818", Offset = "0x1904818", VA = "0x1904818")]
		private static extern void criAtomExVoicePool_DetachSpatializer_OculusAudio(IntPtr pool);
	}

	[Token(Token = "0x20000BE")]
	public struct StandardPlayerConfig
	{
		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int maxChannels;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int maxSamplingRate;

		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool streamingFlag;

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int soundRendererType;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int decodeLatency;
	}

	[Token(Token = "0x20000BF")]
	public struct StandardVoicePoolConfig
	{
		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint identifier;

		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int numVoices;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public StandardPlayerConfig playerConfig;
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0x1904294", Offset = "0x1904294", VA = "0x1904294")]
	public static CriAtomExVoicePool AllocateSpatializerVoicePool(ref StandardVoicePoolConfig config)
	{
		return null;
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0x1904580", Offset = "0x1904580", VA = "0x1904580")]
	public static CriAtomExVoicePool AllocateStandardVoicePool(ref StandardVoicePoolConfig config)
	{
		return null;
	}

	[PreserveSig]
	[Token(Token = "0x60005FA")]
	[Address(RVA = "0x19043B4", Offset = "0x19043B4", VA = "0x19043B4")]
	private static extern IntPtr criAtomExVoicePool_AllocateStandardVoicePool(ref StandardVoicePoolConfig config, IntPtr work, int work_size);
}
[Token(Token = "0x20000BD")]
public class CriAtomExVoicePool : IDisposable
{
	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public readonly IntPtr nativeHandle;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public readonly uint identifier;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool disposed;

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0x190403C", Offset = "0x190403C", VA = "0x190403C")]
	public CriAtomExVoicePool(IntPtr nativeHandle, uint identifier)
	{
	}

	[Token(Token = "0x6000600")]
	[Address(RVA = "0x1904064", Offset = "0x1904064", VA = "0x1904064", Slot = "1")]
	~CriAtomExVoicePool()
	{
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0x190411C", Offset = "0x190411C", VA = "0x190411C", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0x19040E4", Offset = "0x19040E4", VA = "0x19040E4")]
	private void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0x1904164", Offset = "0x1904164", VA = "0x1904164", Slot = "5")]
	protected virtual void DisposeUnmanagedResource()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000604")]
	[Address(RVA = "0x19041D4", Offset = "0x19041D4", VA = "0x19041D4")]
	public static extern void criAtomExVoicePool_Free(IntPtr pool);
}
[Token(Token = "0x20000C0")]
public class CriFsLoader : IDisposable
{
	[Token(Token = "0x20000C1")]
	public enum Status
	{
		[Token(Token = "0x40003F8")]
		Stop,
		[Token(Token = "0x40003F9")]
		Loading,
		[Token(Token = "0x40003FA")]
		Complete,
		[Token(Token = "0x40003FB")]
		Error
	}

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private IntPtr handle;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private GCHandle gch;

	[Token(Token = "0x6000605")]
	[Address(RVA = "0x190E6D8", Offset = "0x190E6D8", VA = "0x190E6D8")]
	public CriFsLoader()
	{
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0x190E8DC", Offset = "0x190E8DC", VA = "0x190E8DC", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x6000607")]
	[Address(RVA = "0x190EA78", Offset = "0x190EA78", VA = "0x190EA78")]
	public void Load(CriFsBinder binder, string path, long fileOffset, long loadSize, byte[] buffer)
	{
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0x190EC88", Offset = "0x190EC88", VA = "0x190EC88")]
	public void LoadById(CriFsBinder binder, int id, long fileOffset, long loadSize, byte[] buffer)
	{
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0x190EE74", Offset = "0x190EE74", VA = "0x190EE74")]
	public void Stop()
	{
	}

	[Token(Token = "0x600060A")]
	[Address(RVA = "0x190EF3C", Offset = "0x190EF3C", VA = "0x190EF3C")]
	public Status GetStatus()
	{
		return default(Status);
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0x190F064", Offset = "0x190F064", VA = "0x190F064")]
	public void SetReadUnitSize(int unit_size)
	{
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0x190F158", Offset = "0x190F158", VA = "0x190F158", Slot = "1")]
	~CriFsLoader()
	{
	}

	[PreserveSig]
	[Token(Token = "0x600060D")]
	[Address(RVA = "0x190E80C", Offset = "0x190E80C", VA = "0x190E80C")]
	private static extern int criFsLoader_Create(out IntPtr loader);

	[PreserveSig]
	[Token(Token = "0x600060E")]
	[Address(RVA = "0x190E9B8", Offset = "0x190E9B8", VA = "0x190E9B8")]
	private static extern int criFsLoader_Destroy(IntPtr loader);

	[PreserveSig]
	[Token(Token = "0x600060F")]
	[Address(RVA = "0x190EB60", Offset = "0x190EB60", VA = "0x190EB60")]
	private static extern int criFsLoader_Load(IntPtr loader, IntPtr binder, string path, long offset, long load_size, IntPtr buffer, long buffer_size);

	[PreserveSig]
	[Token(Token = "0x6000610")]
	[Address(RVA = "0x190ED70", Offset = "0x190ED70", VA = "0x190ED70")]
	private static extern int criFsLoader_LoadById(IntPtr loader, IntPtr binder, int id, long offset, long load_size, IntPtr buffer, long buffer_size);

	[PreserveSig]
	[Token(Token = "0x6000611")]
	[Address(RVA = "0x190EE7C", Offset = "0x190EE7C", VA = "0x190EE7C")]
	private static extern int criFsLoader_Stop(IntPtr loader);

	[PreserveSig]
	[Token(Token = "0x6000612")]
	[Address(RVA = "0x190EF9C", Offset = "0x190EF9C", VA = "0x190EF9C")]
	private static extern int criFsLoader_GetStatus(IntPtr loader, out Status status);

	[PreserveSig]
	[Token(Token = "0x6000613")]
	[Address(RVA = "0x190F088", Offset = "0x190F088", VA = "0x190F088")]
	private static extern int criFsLoader_SetReadUnitSize(IntPtr loader, long unit_size);
}
[Token(Token = "0x20000C2")]
public class CriFsInstaller : IDisposable
{
	[Token(Token = "0x20000C3")]
	public enum Status
	{
		[Token(Token = "0x4000400")]
		Stop,
		[Token(Token = "0x4000401")]
		Busy,
		[Token(Token = "0x4000402")]
		Complete,
		[Token(Token = "0x4000403")]
		Error
	}

	[Token(Token = "0x20000C4")]
	private enum CopyPolicy
	{
		[Token(Token = "0x4000405")]
		Always
	}

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private byte[] installBuffer;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private GCHandle installBufferGch;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private IntPtr handle;

	[Token(Token = "0x6000614")]
	[Address(RVA = "0x190D858", Offset = "0x190D858", VA = "0x190D858")]
	public CriFsInstaller()
	{
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0x190DA68", Offset = "0x190DA68", VA = "0x190DA68", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x6000616")]
	[Address(RVA = "0x190DC00", Offset = "0x190DC00", VA = "0x190DC00")]
	public void Copy(CriFsBinder binder, string srcPath, string dstPath, int installBufferSize)
	{
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0x190DF04", Offset = "0x190DF04", VA = "0x190DF04")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000618")]
	[Address(RVA = "0x190DFCC", Offset = "0x190DFCC", VA = "0x190DFCC")]
	public Status GetStatus()
	{
		return default(Status);
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0x190E0C0", Offset = "0x190E0C0", VA = "0x190E0C0")]
	public float GetProgress()
	{
		return default(float);
	}

	[Token(Token = "0x600061A")]
	[Address(RVA = "0x190E1C4", Offset = "0x190E1C4", VA = "0x190E1C4")]
	public static void ExecuteMain()
	{
	}

	[Token(Token = "0x600061B")]
	[Address(RVA = "0x190E278", Offset = "0x190E278", VA = "0x190E278", Slot = "1")]
	~CriFsInstaller()
	{
	}

	[PreserveSig]
	[Token(Token = "0x600061C")]
	[Address(RVA = "0x190E1C8", Offset = "0x190E1C8", VA = "0x190E1C8")]
	private static extern void criFsInstaller_ExecuteMain();

	[PreserveSig]
	[Token(Token = "0x600061D")]
	[Address(RVA = "0x190D990", Offset = "0x190D990", VA = "0x190D990")]
	private static extern int criFsInstaller_Create(out IntPtr installer, CopyPolicy option);

	[PreserveSig]
	[Token(Token = "0x600061E")]
	[Address(RVA = "0x190DB40", Offset = "0x190DB40", VA = "0x190DB40")]
	private static extern int criFsInstaller_Destroy(IntPtr installer);

	[PreserveSig]
	[Token(Token = "0x600061F")]
	[Address(RVA = "0x190DDDC", Offset = "0x190DDDC", VA = "0x190DDDC")]
	private static extern int criFsInstaller_Copy(IntPtr installer, IntPtr binder, string src_path, string dst_path, IntPtr buffer, long buffer_size);

	[PreserveSig]
	[Token(Token = "0x6000620")]
	[Address(RVA = "0x190DF0C", Offset = "0x190DF0C", VA = "0x190DF0C")]
	private static extern int criFsInstaller_Stop(IntPtr installer);

	[PreserveSig]
	[Token(Token = "0x6000621")]
	[Address(RVA = "0x190DFF8", Offset = "0x190DFF8", VA = "0x190DFF8")]
	private static extern int criFsInstaller_GetStatus(IntPtr installer, out Status status);

	[PreserveSig]
	[Token(Token = "0x6000622")]
	[Address(RVA = "0x190E0EC", Offset = "0x190E0EC", VA = "0x190E0EC")]
	private static extern int criFsInstaller_GetProgress(IntPtr installer, out float progress);
}
[Token(Token = "0x20000C5")]
public class CriFsBinder : IDisposable
{
	[Token(Token = "0x20000C6")]
	public enum Status
	{
		[Token(Token = "0x4000408")]
		None,
		[Token(Token = "0x4000409")]
		Analyze,
		[Token(Token = "0x400040A")]
		Complete,
		[Token(Token = "0x400040B")]
		Unbind,
		[Token(Token = "0x400040C")]
		Removed,
		[Token(Token = "0x400040D")]
		Invalid,
		[Token(Token = "0x400040E")]
		Error
	}

	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private IntPtr handle;

	[Token(Token = "0x17000060")]
	public IntPtr nativeHandle
	{
		[Token(Token = "0x600062E")]
		[Address(RVA = "0x190CA30", Offset = "0x190CA30", VA = "0x190CA30")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0x1909960", Offset = "0x1909960", VA = "0x1909960")]
	public CriFsBinder()
	{
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0x190C6D4", Offset = "0x190C6D4", VA = "0x190C6D4", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0x190C9A4", Offset = "0x190C9A4", VA = "0x190C9A4")]
	public uint BindCpk(CriFsBinder srcBinder, string path)
	{
		return default(uint);
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0x190CB58", Offset = "0x190CB58", VA = "0x190CB58")]
	public uint BindDirectory(CriFsBinder srcBinder, string path)
	{
		return default(uint);
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0x190CD04", Offset = "0x190CD04", VA = "0x190CD04")]
	public uint BindFile(CriFsBinder srcBinder, string path)
	{
		return default(uint);
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0x190AE08", Offset = "0x190AE08", VA = "0x190AE08")]
	public uint BindFileSection(CriFsBinder srcBinder, string path, ulong offset, int size, string sectionName)
	{
		return default(uint);
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0x19094E4", Offset = "0x19094E4", VA = "0x19094E4")]
	public static void Unbind(uint bindId)
	{
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0x190AEB4", Offset = "0x190AEB4", VA = "0x190AEB4")]
	public static Status GetStatus(uint bindId)
	{
		return default(Status);
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0x190D188", Offset = "0x190D188", VA = "0x190D188")]
	public long GetFileSize(string path)
	{
		return default(long);
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0x190C554", Offset = "0x190C554", VA = "0x190C554")]
	public long GetFileSize(int id)
	{
		return default(long);
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0x190D3C0", Offset = "0x190D3C0", VA = "0x190D3C0")]
	public static void SetPriority(uint bindId, int priority)
	{
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0x190D48C", Offset = "0x190D48C", VA = "0x190D48C", Slot = "1")]
	~CriFsBinder()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000630")]
	[Address(RVA = "0x190C814", Offset = "0x190C814", VA = "0x190C814")]
	private static extern uint criFsBinder_Create(out IntPtr binder);

	[PreserveSig]
	[Token(Token = "0x6000631")]
	[Address(RVA = "0x190C8E4", Offset = "0x190C8E4", VA = "0x190C8E4")]
	private static extern uint criFsBinder_Destroy(IntPtr binder);

	[PreserveSig]
	[Token(Token = "0x6000632")]
	[Address(RVA = "0x190CA38", Offset = "0x190CA38", VA = "0x190CA38")]
	private static extern uint criFsBinder_BindCpk(IntPtr binder, IntPtr srcBinder, string path, IntPtr work, int worksize, out uint bindId);

	[PreserveSig]
	[Token(Token = "0x6000633")]
	[Address(RVA = "0x190CBE4", Offset = "0x190CBE4", VA = "0x190CBE4")]
	private static extern uint criFsBinder_BindDirectory(IntPtr binder, IntPtr srcBinder, string path, IntPtr work, int worksize, out uint bindId);

	[PreserveSig]
	[Token(Token = "0x6000634")]
	[Address(RVA = "0x190CD90", Offset = "0x190CD90", VA = "0x190CD90")]
	private static extern uint criFsBinder_BindFile(IntPtr binder, IntPtr srcBinder, string path, IntPtr work, int worksize, out uint bindId);

	[PreserveSig]
	[Token(Token = "0x6000635")]
	[Address(RVA = "0x190CEB0", Offset = "0x190CEB0", VA = "0x190CEB0")]
	private static extern uint criFsBinder_BindFileSection(IntPtr binder, IntPtr srcBinder, string path, ulong offset, int size, string sectionName, IntPtr work, int worksize, out uint bindId);

	[PreserveSig]
	[Token(Token = "0x6000636")]
	[Address(RVA = "0x190D000", Offset = "0x190D000", VA = "0x190D000")]
	private static extern int criFsBinder_Unbind(uint bindId);

	[PreserveSig]
	[Token(Token = "0x6000637")]
	[Address(RVA = "0x190D0C0", Offset = "0x190D0C0", VA = "0x190D0C0")]
	private static extern int criFsBinder_GetStatus(uint bindId, out Status status);

	[PreserveSig]
	[Token(Token = "0x6000638")]
	[Address(RVA = "0x190D1D4", Offset = "0x190D1D4", VA = "0x190D1D4")]
	private static extern int criFsBinder_GetFileSize(IntPtr binder, string path, out long size);

	[PreserveSig]
	[Token(Token = "0x6000639")]
	[Address(RVA = "0x190D2DC", Offset = "0x190D2DC", VA = "0x190D2DC")]
	private static extern int criFsBinder_GetFileSizeById(IntPtr binder, int id, out long size);

	[PreserveSig]
	[Token(Token = "0x600063A")]
	[Address(RVA = "0x190D3C4", Offset = "0x190D3C4", VA = "0x190D3C4")]
	private static extern int criFsBinder_SetPriority(uint bindId, int priority);
}
[Token(Token = "0x20000C7")]
public class CriFsRequest : IDisposable
{
	[Token(Token = "0x20000C8")]
	public delegate void DoneDelegate(CriFsRequest request);

	[Token(Token = "0x200050D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AF3C", Offset = "0xE9AF3C")]
	private sealed class <CheckDone>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal CriFsRequest $this;

		[Token(Token = "0x400198A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal object $current;

		[Token(Token = "0x400198B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool $disposing;

		[Token(Token = "0x400198C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int $PC;

		[Token(Token = "0x17000274")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002382")]
			[Address(RVA = "0x1910974", Offset = "0x1910974", VA = "0x1910974", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000275")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002383")]
			[Address(RVA = "0x191097C", Offset = "0x191097C", VA = "0x191097C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002380")]
		[Address(RVA = "0x191086C", Offset = "0x191086C", VA = "0x191086C")]
		[DebuggerHidden]
		public <CheckDone>c__Iterator0()
		{
		}

		[Token(Token = "0x6002381")]
		[Address(RVA = "0x1910900", Offset = "0x1910900", VA = "0x1910900", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002384")]
		[Address(RVA = "0x1910984", Offset = "0x1910984", VA = "0x1910984", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002385")]
		[Address(RVA = "0x1910998", Offset = "0x1910998", VA = "0x1910998", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9ADDC", Offset = "0xE9ADDC")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9ADDC", Offset = "0xE9ADDC")]
	private DoneDelegate <doneDelegate>k__BackingField;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AE10", Offset = "0xE9AE10")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9AE10", Offset = "0xE9AE10")]
	private bool <isDone>k__BackingField;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AE44", Offset = "0xE9AE44")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9AE44", Offset = "0xE9AE44")]
	private string <error>k__BackingField;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AE78", Offset = "0xE9AE78")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9AE78", Offset = "0xE9AE78")]
	private bool <isDisposed>k__BackingField;

	[Token(Token = "0x17000061")]
	public DoneDelegate doneDelegate
	{
		[Token(Token = "0x600063C")]
		[Address(RVA = "0x1910420", Offset = "0x1910420", VA = "0x1910420")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AEAC", Offset = "0xE9AEAC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600063D")]
		[Address(RVA = "0x190E3D8", Offset = "0x190E3D8", VA = "0x190E3D8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AEBC", Offset = "0xE9AEBC")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000062")]
	public bool isDone
	{
		[Token(Token = "0x600063E")]
		[Address(RVA = "0x190D704", Offset = "0x190D704", VA = "0x190D704")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AECC", Offset = "0xE9AECC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600063F")]
		[Address(RVA = "0x1910428", Offset = "0x1910428", VA = "0x1910428")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AEDC", Offset = "0xE9AEDC")]
		private set
		{
		}
	}

	[Token(Token = "0x17000063")]
	public string error
	{
		[Token(Token = "0x6000640")]
		[Address(RVA = "0x1909AEC", Offset = "0x1909AEC", VA = "0x1909AEC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AEEC", Offset = "0xE9AEEC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000641")]
		[Address(RVA = "0x190D70C", Offset = "0x190D70C", VA = "0x190D70C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AEFC", Offset = "0xE9AEFC")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000064")]
	public bool isDisposed
	{
		[Token(Token = "0x6000642")]
		[Address(RVA = "0x1910430", Offset = "0x1910430", VA = "0x1910430")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AF0C", Offset = "0xE9AF0C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000643")]
		[Address(RVA = "0x1910438", Offset = "0x1910438", VA = "0x1910438")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AF1C", Offset = "0xE9AF1C")]
		protected set
		{
		}
	}

	[Token(Token = "0x600063B")]
	[Address(RVA = "0x190D62C", Offset = "0x190D62C", VA = "0x190D62C")]
	public CriFsRequest()
	{
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0x1909AFC", Offset = "0x1909AFC", VA = "0x1909AFC", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0x1910440", Offset = "0x1910440", VA = "0x1910440", Slot = "5")]
	public virtual void Stop()
	{
	}

	[Token(Token = "0x6000646")]
	[Address(RVA = "0x1909AB8", Offset = "0x1909AB8", VA = "0x1909AB8")]
	public YieldInstruction WaitForDone(MonoBehaviour mb)
	{
		return null;
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0x19104C4", Offset = "0x19104C4", VA = "0x19104C4", Slot = "6")]
	protected virtual void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x6000648")]
	[Address(RVA = "0x19104C8", Offset = "0x19104C8", VA = "0x19104C8", Slot = "7")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0x190D714", Offset = "0x190D714", VA = "0x190D714")]
	protected void Done()
	{
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0x1910444", Offset = "0x1910444", VA = "0x1910444")]
	[DebuggerHidden]
	private IEnumerator CheckDone()
	{
		return null;
	}

	[Token(Token = "0x600064B")]
	[Address(RVA = "0x1910874", Offset = "0x1910874", VA = "0x1910874", Slot = "1")]
	~CriFsRequest()
	{
	}
}
[Token(Token = "0x20000C9")]
public class CriFsLoadFileRequest : CriFsRequest
{
	[Token(Token = "0x20000CA")]
	private enum Phase
	{
		[Token(Token = "0x400041D")]
		Stop,
		[Token(Token = "0x400041E")]
		Bind,
		[Token(Token = "0x400041F")]
		Load,
		[Token(Token = "0x4000420")]
		Done,
		[Token(Token = "0x4000421")]
		Error
	}

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AF9C", Offset = "0xE9AF9C")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9AF9C", Offset = "0xE9AF9C")]
	private string <path>k__BackingField;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9AFD0", Offset = "0xE9AFD0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9AFD0", Offset = "0xE9AFD0")]
	private byte[] <bytes>k__BackingField;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Phase phase;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private CriFsBinder refBinder;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CriFsBinder newBinder;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private uint bindId;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CriFsLoader loader;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int readUnitSize;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private long fileSize;

	[Token(Token = "0x17000065")]
	public string path
	{
		[Token(Token = "0x6000651")]
		[Address(RVA = "0x190F2DC", Offset = "0x190F2DC", VA = "0x190F2DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B004", Offset = "0xE9B004")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000652")]
		[Address(RVA = "0x190F2D4", Offset = "0x190F2D4", VA = "0x190F2D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B014", Offset = "0xE9B014")]
		private set
		{
		}
	}

	[Token(Token = "0x17000066")]
	public byte[] bytes
	{
		[Token(Token = "0x6000653")]
		[Address(RVA = "0x190C544", Offset = "0x190C544", VA = "0x190C544")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B024", Offset = "0xE9B024")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000654")]
		[Address(RVA = "0x190F2E4", Offset = "0x190F2E4", VA = "0x190F2E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B034", Offset = "0xE9B034")]
		private set
		{
		}
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0x190F1B4", Offset = "0x190F1B4", VA = "0x190F1B4")]
	public CriFsLoadFileRequest(CriFsBinder srcBinder, string path, DoneDelegate doneDelegate, int readUnitSize)
	{
	}

	[Token(Token = "0x6000655")]
	[Address(RVA = "0x190F2EC", Offset = "0x190F2EC", VA = "0x190F2EC", Slot = "6")]
	protected override void Dispose(bool disposing)
	{
	}

	[Token(Token = "0x6000656")]
	[Address(RVA = "0x190F334", Offset = "0x190F334", VA = "0x190F334", Slot = "5")]
	public override void Stop()
	{
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0x190F358", Offset = "0x190F358", VA = "0x190F358", Slot = "7")]
	public override void Update()
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0x190F3A4", Offset = "0x190F3A4", VA = "0x190F3A4")]
	private void UpdateBinder()
	{
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0x190F45C", Offset = "0x190F45C", VA = "0x190F45C")]
	private void UpdateLoader()
	{
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0x190F660", Offset = "0x190F660", VA = "0x190F660")]
	private void OnError()
	{
	}
}
[Token(Token = "0x20000CB")]
public class CriFsLoadAssetBundleRequest : CriFsRequest
{
	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B044", Offset = "0xE9B044")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9B044", Offset = "0xE9B044")]
	private string <path>k__BackingField;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B078", Offset = "0xE9B078")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9B078", Offset = "0xE9B078")]
	private AssetBundle <assetBundle>k__BackingField;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CriFsLoadFileRequest loadFileReq;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private AssetBundleCreateRequest assetBundleReq;

	[Token(Token = "0x17000067")]
	public string path
	{
		[Token(Token = "0x600065C")]
		[Address(RVA = "0x190E574", Offset = "0x190E574", VA = "0x190E574")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B0AC", Offset = "0xE9B0AC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600065D")]
		[Address(RVA = "0x190E56C", Offset = "0x190E56C", VA = "0x190E56C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B0BC", Offset = "0xE9B0BC")]
		private set
		{
		}
	}

	[Token(Token = "0x17000068")]
	public AssetBundle assetBundle
	{
		[Token(Token = "0x600065E")]
		[Address(RVA = "0x190E57C", Offset = "0x190E57C", VA = "0x190E57C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B0CC", Offset = "0xE9B0CC")]
		get
		{
			return null;
		}
		[Token(Token = "0x600065F")]
		[Address(RVA = "0x190E584", Offset = "0x190E584", VA = "0x190E584")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B0DC", Offset = "0xE9B0DC")]
		private set
		{
		}
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0x190E528", Offset = "0x190E528", VA = "0x190E528")]
	public CriFsLoadAssetBundleRequest(CriFsBinder binder, string path, int readUnitSize)
	{
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0x190E58C", Offset = "0x190E58C", VA = "0x190E58C", Slot = "7")]
	public override void Update()
	{
	}

	[Token(Token = "0x6000661")]
	[Address(RVA = "0x190E6B0", Offset = "0x190E6B0", VA = "0x190E6B0", Slot = "6")]
	protected override void Dispose(bool disposing)
	{
	}
}
[Token(Token = "0x20000CC")]
public class CriFsInstallRequest : CriFsRequest
{
	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B0EC", Offset = "0xE9B0EC")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9B0EC", Offset = "0xE9B0EC")]
	private string <sourcePath>k__BackingField;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B120", Offset = "0xE9B120")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9B120", Offset = "0xE9B120")]
	private string <destinationPath>k__BackingField;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B154", Offset = "0xE9B154")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9B154", Offset = "0xE9B154")]
	private float <progress>k__BackingField;

	[Token(Token = "0x17000069")]
	public string sourcePath
	{
		[Token(Token = "0x6000663")]
		[Address(RVA = "0x190E2DC", Offset = "0x190E2DC", VA = "0x190E2DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B188", Offset = "0xE9B188")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000664")]
		[Address(RVA = "0x190E2E4", Offset = "0x190E2E4", VA = "0x190E2E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B198", Offset = "0xE9B198")]
		protected set
		{
		}
	}

	[Token(Token = "0x1700006A")]
	public string destinationPath
	{
		[Token(Token = "0x6000665")]
		[Address(RVA = "0x190E2EC", Offset = "0x190E2EC", VA = "0x190E2EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B1A8", Offset = "0xE9B1A8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000666")]
		[Address(RVA = "0x190E2F4", Offset = "0x190E2F4", VA = "0x190E2F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B1B8", Offset = "0xE9B1B8")]
		protected set
		{
		}
	}

	[Token(Token = "0x1700006B")]
	public float progress
	{
		[Token(Token = "0x6000667")]
		[Address(RVA = "0x190E2FC", Offset = "0x190E2FC", VA = "0x190E2FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B1C8", Offset = "0xE9B1C8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000668")]
		[Address(RVA = "0x190E304", Offset = "0x190E304", VA = "0x190E304")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B1D8", Offset = "0xE9B1D8")]
		protected set
		{
		}
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0x190E2D4", Offset = "0x190E2D4", VA = "0x190E2D4")]
	public CriFsInstallRequest()
	{
	}
}
[Token(Token = "0x20000CD")]
public class CriFsInstallRequestLegacy : CriFsInstallRequest
{
	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private CriFsInstaller installer;

	[Token(Token = "0x6000669")]
	[Address(RVA = "0x190E30C", Offset = "0x190E30C", VA = "0x190E30C")]
	public CriFsInstallRequestLegacy(CriFsBinder srcBinder, string srcPath, string dstPath, DoneDelegate doneDelegate, int installBufferSize)
	{
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0x190E3E0", Offset = "0x190E3E0", VA = "0x190E3E0", Slot = "5")]
	public override void Stop()
	{
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0x190E3F4", Offset = "0x190E3F4", VA = "0x190E3F4", Slot = "7")]
	public override void Update()
	{
	}

	[Token(Token = "0x600066C")]
	[Address(RVA = "0x190E500", Offset = "0x190E500", VA = "0x190E500", Slot = "6")]
	protected override void Dispose(bool disposing)
	{
	}
}
[Token(Token = "0x20000CE")]
public class CriFsWebInstallRequest : CriFsInstallRequest
{
	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private CriFsWebInstaller installer;

	[Token(Token = "0x600066D")]
	[Address(RVA = "0x1911718", Offset = "0x1911718", VA = "0x1911718")]
	public CriFsWebInstallRequest(string srcPath, string dstPath, DoneDelegate doneDelegate)
	{
	}

	[Token(Token = "0x600066E")]
	[Address(RVA = "0x19132D0", Offset = "0x19132D0", VA = "0x19132D0", Slot = "5")]
	public override void Stop()
	{
	}

	[Token(Token = "0x600066F")]
	[Address(RVA = "0x19132E4", Offset = "0x19132E4", VA = "0x19132E4", Slot = "7")]
	public override void Update()
	{
	}

	[Token(Token = "0x6000670")]
	[Address(RVA = "0x1913444", Offset = "0x1913444", VA = "0x1913444", Slot = "6")]
	protected override void Dispose(bool disposing)
	{
	}
}
[Token(Token = "0x20000CF")]
public class CriFsBindRequest : CriFsRequest
{
	[Token(Token = "0x20000D0")]
	public enum BindType
	{
		[Token(Token = "0x400042E")]
		Cpk,
		[Token(Token = "0x400042F")]
		Directory,
		[Token(Token = "0x4000430")]
		File
	}

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B1E8", Offset = "0xE9B1E8")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9B1E8", Offset = "0xE9B1E8")]
	private string <path>k__BackingField;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B21C", Offset = "0xE9B21C")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9B21C", Offset = "0xE9B21C")]
	private uint <bindId>k__BackingField;

	[Token(Token = "0x1700006C")]
	public string path
	{
		[Token(Token = "0x6000672")]
		[Address(RVA = "0x190D644", Offset = "0x190D644", VA = "0x190D644")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B250", Offset = "0xE9B250")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000673")]
		[Address(RVA = "0x190D634", Offset = "0x190D634", VA = "0x190D634")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B260", Offset = "0xE9B260")]
		private set
		{
		}
	}

	[Token(Token = "0x1700006D")]
	public uint bindId
	{
		[Token(Token = "0x6000674")]
		[Address(RVA = "0x1909AF4", Offset = "0x1909AF4", VA = "0x1909AF4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B270", Offset = "0xE9B270")]
		get
		{
			return default(uint);
		}
		[Token(Token = "0x6000675")]
		[Address(RVA = "0x190D63C", Offset = "0x190D63C", VA = "0x190D63C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B280", Offset = "0xE9B280")]
		private set
		{
		}
	}

	[Token(Token = "0x6000671")]
	[Address(RVA = "0x190D4E8", Offset = "0x190D4E8", VA = "0x190D4E8")]
	public CriFsBindRequest(BindType type, CriFsBinder targetBinder, CriFsBinder srcBinder, string path)
	{
	}

	[Token(Token = "0x6000676")]
	[Address(RVA = "0x190D64C", Offset = "0x190D64C", VA = "0x190D64C", Slot = "5")]
	public override void Stop()
	{
	}

	[Token(Token = "0x6000677")]
	[Address(RVA = "0x190D650", Offset = "0x190D650", VA = "0x190D650", Slot = "7")]
	public override void Update()
	{
	}

	[Token(Token = "0x6000678")]
	[Address(RVA = "0x190D734", Offset = "0x190D734", VA = "0x190D734", Slot = "6")]
	protected override void Dispose(bool disposing)
	{
	}
}
[Token(Token = "0x20000D1")]
public static class CriFsUtility
{
	[Token(Token = "0x4000431")]
	public const int DefaultReadUnitSize = 1048576;

	[Token(Token = "0x6000679")]
	[Address(RVA = "0x19119F8", Offset = "0x19119F8", VA = "0x19119F8")]
	public static CriFsLoadFileRequest LoadFile(string path, int readUnitSize = 1048576)
	{
		return null;
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0x1911AA8", Offset = "0x1911AA8", VA = "0x1911AA8")]
	public static CriFsLoadFileRequest LoadFile(string path, CriFsRequest.DoneDelegate doneDelegate, int readUnitSize = 1048576)
	{
		return null;
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0x190C490", Offset = "0x190C490", VA = "0x190C490")]
	public static CriFsLoadFileRequest LoadFile(CriFsBinder binder, string path, int readUnitSize = 1048576)
	{
		return null;
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0x1911B5C", Offset = "0x1911B5C", VA = "0x1911B5C")]
	public static CriFsLoadAssetBundleRequest LoadAssetBundle(string path, int readUnitSize = 1048576)
	{
		return null;
	}

	[Token(Token = "0x600067D")]
	[Address(RVA = "0x1911B84", Offset = "0x1911B84", VA = "0x1911B84")]
	public static CriFsLoadAssetBundleRequest LoadAssetBundle(CriFsBinder binder, string path, int readUnitSize = 1048576)
	{
		return null;
	}

	[Token(Token = "0x600067E")]
	[Address(RVA = "0x1911C34", Offset = "0x1911C34", VA = "0x1911C34")]
	public static CriFsInstallRequest Install(string srcPath, string dstPath)
	{
		return null;
	}

	[Token(Token = "0x600067F")]
	[Address(RVA = "0x1911D1C", Offset = "0x1911D1C", VA = "0x1911D1C")]
	public static CriFsInstallRequest Install(string srcPath, string dstPath, CriFsRequest.DoneDelegate doneDeleagate)
	{
		return null;
	}

	[Token(Token = "0x6000680")]
	[Address(RVA = "0x1911D48", Offset = "0x1911D48", VA = "0x1911D48")]
	public static CriFsInstallRequest Install(CriFsBinder srcBinder, string srcPath, string dstPath)
	{
		return null;
	}

	[Token(Token = "0x6000681")]
	[Address(RVA = "0x1911C64", Offset = "0x1911C64", VA = "0x1911C64")]
	public static CriFsInstallRequest Install(CriFsBinder srcBinder, string srcPath, string dstPath, CriFsRequest.DoneDelegate doneDeleagate)
	{
		return null;
	}

	[Token(Token = "0x6000682")]
	[Address(RVA = "0x1911E00", Offset = "0x1911E00", VA = "0x1911E00")]
	public static CriFsInstallRequest WebInstall(string srcPath, string dstPath, CriFsRequest.DoneDelegate doneDeleagate)
	{
		return null;
	}

	[Token(Token = "0x6000683")]
	[Address(RVA = "0x1909A94", Offset = "0x1909A94", VA = "0x1909A94")]
	public static CriFsBindRequest BindCpk(CriFsBinder targetBinder, string srcPath)
	{
		return null;
	}

	[Token(Token = "0x6000684")]
	[Address(RVA = "0x190AFA0", Offset = "0x190AFA0", VA = "0x190AFA0")]
	public static CriFsBindRequest BindCpk(CriFsBinder targetBinder, CriFsBinder srcBinder, string srcPath)
	{
		return null;
	}

	[Token(Token = "0x6000685")]
	[Address(RVA = "0x1911EB0", Offset = "0x1911EB0", VA = "0x1911EB0")]
	public static CriFsBindRequest BindDirectory(CriFsBinder targetBinder, string srcPath)
	{
		return null;
	}

	[Token(Token = "0x6000686")]
	[Address(RVA = "0x1911F5C", Offset = "0x1911F5C", VA = "0x1911F5C")]
	public static CriFsBindRequest BindDirectory(CriFsBinder targetBinder, CriFsBinder srcBinder, string srcPath)
	{
		return null;
	}

	[Token(Token = "0x6000687")]
	[Address(RVA = "0x191200C", Offset = "0x191200C", VA = "0x191200C")]
	public static CriFsBindRequest BindFile(CriFsBinder targetBinder, string srcPath)
	{
		return null;
	}

	[Token(Token = "0x6000688")]
	[Address(RVA = "0x19120B8", Offset = "0x19120B8", VA = "0x19120B8")]
	public static CriFsBindRequest BindFile(CriFsBinder targetBinder, CriFsBinder srcBinder, string srcPath)
	{
		return null;
	}

	[Token(Token = "0x6000689")]
	[Address(RVA = "0x1912168", Offset = "0x1912168", VA = "0x1912168")]
	public static void SetUserAgentString(string userAgentString)
	{
	}

	[Token(Token = "0x600068A")]
	[Address(RVA = "0x19122D8", Offset = "0x19122D8", VA = "0x19122D8")]
	public static void SetProxyServer(string proxyPath, ushort proxyPort)
	{
	}

	[PreserveSig]
	[Token(Token = "0x600068B")]
	[Address(RVA = "0x19121EC", Offset = "0x19121EC", VA = "0x19121EC")]
	private static extern bool criFsUnity_SetUserAgentString(string userAgentString);

	[PreserveSig]
	[Token(Token = "0x600068C")]
	[Address(RVA = "0x1912364", Offset = "0x1912364", VA = "0x1912364")]
	private static extern bool criFsUnity_SetProxyServer(string proxyPath, ushort proxyPort);
}
[Token(Token = "0x20000D2")]
public static class CriFsPlugin
{
	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int initializationCount;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int defaultInstallBufferSize;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int installBufferSize;

	[Token(Token = "0x1700006E")]
	public static bool isInitialized
	{
		[Token(Token = "0x600068D")]
		[Address(RVA = "0x190F720", Offset = "0x190F720", VA = "0x190F720")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600068E")]
	[Address(RVA = "0x190F7B8", Offset = "0x190F7B8", VA = "0x190F7B8")]
	public static void SetConfigParameters(int num_loaders, int num_binders, int num_installers, int argInstallBufferSize, int max_path, bool minimize_file_descriptor_usage)
	{
	}

	[Token(Token = "0x600068F")]
	[Address(RVA = "0x190F954", Offset = "0x190F954", VA = "0x190F954")]
	public static void SetConfigAdditionalParameters_ANDROID(int device_read_bps)
	{
	}

	[Token(Token = "0x6000690")]
	[Address(RVA = "0x190FA94", Offset = "0x190FA94", VA = "0x190FA94")]
	public static void SetMemoryFileSystemThreadPriorityExperimentalAndroid(int prio)
	{
	}

	[Token(Token = "0x6000691")]
	[Address(RVA = "0x190FBD4", Offset = "0x190FBD4", VA = "0x190FBD4")]
	public static void SetDataDecompressionThreadPriorityExperimentalAndroid(int prio)
	{
	}

	[Token(Token = "0x6000692")]
	[Address(RVA = "0x19060A4", Offset = "0x19060A4", VA = "0x19060A4")]
	public static void InitializeLibrary()
	{
	}

	[Token(Token = "0x6000693")]
	[Address(RVA = "0x19065E8", Offset = "0x19065E8", VA = "0x19065E8")]
	public static void FinalizeLibrary()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000694")]
	[Address(RVA = "0x190F878", Offset = "0x190F878", VA = "0x190F878")]
	private static extern void criFsUnity_SetConfigParameters(int num_loaders, int num_binders, int num_installers, int max_path, bool minimize_file_descriptor_usage);

	[PreserveSig]
	[Token(Token = "0x6000695")]
	[Address(RVA = "0x190FD14", Offset = "0x190FD14", VA = "0x190FD14")]
	private static extern void criFsUnity_Initialize();

	[PreserveSig]
	[Token(Token = "0x6000696")]
	[Address(RVA = "0x190FF18", Offset = "0x190FF18", VA = "0x190FF18")]
	private static extern void criFsUnity_Finalize();

	[PreserveSig]
	[Token(Token = "0x6000697")]
	[Address(RVA = "0x190FFC8", Offset = "0x190FFC8", VA = "0x190FFC8")]
	public static extern uint criFsUnity_GetAllocatedHeapSize();

	[PreserveSig]
	[Token(Token = "0x6000698")]
	[Address(RVA = "0x1910078", Offset = "0x1910078", VA = "0x1910078")]
	public static extern uint criFsLoader_GetRetryCount();

	[PreserveSig]
	[Token(Token = "0x6000699")]
	[Address(RVA = "0x1910128", Offset = "0x1910128", VA = "0x1910128")]
	public static extern int criFs_GetNumBinds(ref int cur, ref int max, ref int limit);

	[PreserveSig]
	[Token(Token = "0x600069A")]
	[Address(RVA = "0x19101F8", Offset = "0x19101F8", VA = "0x19101F8")]
	public static extern int criFs_GetNumUsedLoaders(ref int cur, ref int max, ref int limit);

	[PreserveSig]
	[Token(Token = "0x600069B")]
	[Address(RVA = "0x19102C8", Offset = "0x19102C8", VA = "0x19102C8")]
	public static extern int criFs_GetNumUsedInstallers(ref int cur, ref int max, ref int limit);

	[PreserveSig]
	[Token(Token = "0x600069C")]
	[Address(RVA = "0x190F9D4", Offset = "0x190F9D4", VA = "0x190F9D4")]
	private static extern void criFsUnity_SetConfigAdditionalParameters_ANDROID(int device_read_bps);

	[PreserveSig]
	[Token(Token = "0x600069D")]
	[Address(RVA = "0x190FB14", Offset = "0x190FB14", VA = "0x190FB14")]
	public static extern void criFsUnity_SetMemoryFileSystemThreadPriority_ANDROID(int prio);

	[PreserveSig]
	[Token(Token = "0x600069E")]
	[Address(RVA = "0x190FC54", Offset = "0x190FC54", VA = "0x190FC54")]
	public static extern void criFsUnity_SetDataDecompressionThreadPriority_ANDROID(int prio);
}
[Token(Token = "0x20000D3")]
public class CriFsServer : MonoBehaviour
{
	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CriFsServer _instance;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private List<CriFsRequest> requestList;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B290", Offset = "0xE9B290")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9B290", Offset = "0xE9B290")]
	private int <installBufferSize>k__BackingField;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B2C4", Offset = "0xE9B2C4")]
	private static Predicate<CriFsRequest> <>f__am$cache0;

	[Token(Token = "0x1700006F")]
	public static CriFsServer instance
	{
		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x1910A70", Offset = "0x1910A70", VA = "0x1910A70")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000070")]
	public int installBufferSize
	{
		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x1910CC4", Offset = "0x1910CC4", VA = "0x1910CC4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B2D4", Offset = "0xE9B2D4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x1910CCC", Offset = "0x1910CCC", VA = "0x1910CCC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B2E4", Offset = "0xE9B2E4")]
		private set
		{
		}
	}

	[Token(Token = "0x60006A0")]
	[Address(RVA = "0x1910A68", Offset = "0x1910A68", VA = "0x1910A68")]
	public CriFsServer()
	{
	}

	[Token(Token = "0x60006A4")]
	[Address(RVA = "0x1910B00", Offset = "0x1910B00", VA = "0x1910B00")]
	public static void CreateInstance()
	{
	}

	[Token(Token = "0x60006A5")]
	[Address(RVA = "0x190FDC4", Offset = "0x190FDC4", VA = "0x190FDC4")]
	public static void DestroyInstance()
	{
	}

	[Token(Token = "0x60006A6")]
	[Address(RVA = "0x1910CD4", Offset = "0x1910CD4", VA = "0x1910CD4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006A7")]
	[Address(RVA = "0x1910EDC", Offset = "0x1910EDC", VA = "0x1910EDC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60006A8")]
	[Address(RVA = "0x19110EC", Offset = "0x19110EC", VA = "0x19110EC")]
	private void Update()
	{
	}

	[Token(Token = "0x60006A9")]
	[Address(RVA = "0x19113D4", Offset = "0x19113D4", VA = "0x19113D4")]
	public void AddRequest(CriFsRequest request)
	{
	}

	[Token(Token = "0x60006AA")]
	[Address(RVA = "0x1911450", Offset = "0x1911450", VA = "0x1911450")]
	public CriFsLoadFileRequest LoadFile(CriFsBinder binder, string path, CriFsRequest.DoneDelegate doneDelegate, int readUnitSize)
	{
		return null;
	}

	[Token(Token = "0x60006AB")]
	[Address(RVA = "0x19114F0", Offset = "0x19114F0", VA = "0x19114F0")]
	public CriFsLoadAssetBundleRequest LoadAssetBundle(CriFsBinder binder, string path, int readUnitSize)
	{
		return null;
	}

	[Token(Token = "0x60006AC")]
	[Address(RVA = "0x1911598", Offset = "0x1911598", VA = "0x1911598")]
	public CriFsInstallRequest Install(CriFsBinder srcBinder, string srcPath, string dstPath, CriFsRequest.DoneDelegate doneDelegate)
	{
		return null;
	}

	[Token(Token = "0x60006AD")]
	[Address(RVA = "0x1911660", Offset = "0x1911660", VA = "0x1911660")]
	public CriFsInstallRequest WebInstall(string srcPath, string dstPath, CriFsRequest.DoneDelegate doneDelegate)
	{
		return null;
	}

	[Token(Token = "0x60006AE")]
	[Address(RVA = "0x19117E8", Offset = "0x19117E8", VA = "0x19117E8")]
	public CriFsBindRequest BindCpk(CriFsBinder targetBinder, CriFsBinder srcBinder, string path)
	{
		return null;
	}

	[Token(Token = "0x60006AF")]
	[Address(RVA = "0x1911884", Offset = "0x1911884", VA = "0x1911884")]
	public CriFsBindRequest BindDirectory(CriFsBinder targetBinder, CriFsBinder srcBinder, string path)
	{
		return null;
	}

	[Token(Token = "0x60006B0")]
	[Address(RVA = "0x1911920", Offset = "0x1911920", VA = "0x1911920")]
	public CriFsBindRequest BindFile(CriFsBinder targetBinder, CriFsBinder srcBinder, string path)
	{
		return null;
	}

	[Token(Token = "0x60006B2")]
	[Address(RVA = "0x19119C0", Offset = "0x19119C0", VA = "0x19119C0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B2F4", Offset = "0xE9B2F4")]
	private static bool <Update>m__0(CriFsRequest request)
	{
		return default(bool);
	}
}
[Token(Token = "0x20000D4")]
public class CriFsWebInstaller : IDisposable
{
	[Token(Token = "0x20000D5")]
	public enum Status
	{
		[Token(Token = "0x400043F")]
		Stop,
		[Token(Token = "0x4000440")]
		Busy,
		[Token(Token = "0x4000441")]
		Complete,
		[Token(Token = "0x4000442")]
		Error
	}

	[Token(Token = "0x20000D6")]
	public enum Error
	{
		[Token(Token = "0x4000444")]
		None,
		[Token(Token = "0x4000445")]
		Timeout,
		[Token(Token = "0x4000446")]
		Memory,
		[Token(Token = "0x4000447")]
		LocalFs,
		[Token(Token = "0x4000448")]
		DNS,
		[Token(Token = "0x4000449")]
		Connection,
		[Token(Token = "0x400044A")]
		SSL,
		[Token(Token = "0x400044B")]
		HTTP,
		[Token(Token = "0x400044C")]
		Internal
	}

	[Token(Token = "0x20000D7")]
	public struct StatusInfo
	{
		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Status status;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public Error error;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int httpStatusCode;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public long contentsSize;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public long receivedSize;
	}

	[Token(Token = "0x20000D8")]
	public struct ModuleConfig
	{
		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint numInstallers;

		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string proxyHost;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort proxyPort;

		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string userAgent;

		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint inactiveTimeoutSec;

		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool allowInsecureSSL;

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public ModulePlatformConfig platformConfig;
	}

	[Token(Token = "0x20000D9")]
	public struct ModulePlatformConfig
	{
		[Token(Token = "0x17000073")]
		public static ModulePlatformConfig defaultConfig
		{
			[Token(Token = "0x60006C8")]
			[Address(RVA = "0x191269C", Offset = "0x191269C", VA = "0x191269C")]
			get
			{
				return default(ModulePlatformConfig);
			}
		}
	}

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B304", Offset = "0xE9B304")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9B304", Offset = "0xE9B304")]
	private static bool <isInitialized>k__BackingField;

	[Token(Token = "0x400043A")]
	public const int InvalidHttpStatusCode = -1;

	[Token(Token = "0x400043B")]
	public const long InvalidContentsSize = -1L;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private bool disposed;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private IntPtr handle;

	[Token(Token = "0x17000071")]
	public static bool isInitialized
	{
		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x191136C", Offset = "0x191136C", VA = "0x191136C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B338", Offset = "0xE9B338")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x191260C", Offset = "0x191260C", VA = "0x191260C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B348", Offset = "0xE9B348")]
		private set
		{
		}
	}

	[Token(Token = "0x17000072")]
	public static ModuleConfig defaultModuleConfig
	{
		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x1912670", Offset = "0x1912670", VA = "0x1912670")]
		get
		{
			return default(ModuleConfig);
		}
	}

	[Token(Token = "0x60006B3")]
	[Address(RVA = "0x1912458", Offset = "0x1912458", VA = "0x1912458")]
	public CriFsWebInstaller()
	{
	}

	[Token(Token = "0x60006B7")]
	[Address(RVA = "0x19126A0", Offset = "0x19126A0", VA = "0x19126A0", Slot = "1")]
	~CriFsWebInstaller()
	{
	}

	[Token(Token = "0x60006B8")]
	[Address(RVA = "0x1912850", Offset = "0x1912850", VA = "0x1912850", Slot = "4")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60006B9")]
	[Address(RVA = "0x1912878", Offset = "0x1912878", VA = "0x1912878")]
	public void Copy(string url, string dstPath)
	{
	}

	[Token(Token = "0x60006BA")]
	[Address(RVA = "0x19129A4", Offset = "0x19129A4", VA = "0x19129A4")]
	public void Stop()
	{
	}

	[Token(Token = "0x60006BB")]
	[Address(RVA = "0x1912A6C", Offset = "0x1912A6C", VA = "0x1912A6C")]
	public StatusInfo GetStatusInfo()
	{
		return default(StatusInfo);
	}

	[Token(Token = "0x60006BC")]
	[Address(RVA = "0x1912B9C", Offset = "0x1912B9C", VA = "0x1912B9C")]
	public static void InitializeModule(ModuleConfig config)
	{
	}

	[Token(Token = "0x60006BD")]
	[Address(RVA = "0x1912E68", Offset = "0x1912E68", VA = "0x1912E68")]
	public static void FinalizeModule()
	{
	}

	[Token(Token = "0x60006BE")]
	[Address(RVA = "0x19113D0", Offset = "0x19113D0", VA = "0x19113D0")]
	public static void ExecuteMain()
	{
	}

	[Token(Token = "0x60006BF")]
	[Address(RVA = "0x1912700", Offset = "0x1912700", VA = "0x1912700")]
	private void Dispose(bool disposing)
	{
	}

	[PreserveSig]
	[Token(Token = "0x60006C0")]
	[Address(RVA = "0x1912D40", Offset = "0x1912D40", VA = "0x1912D40")]
	private static extern void criFsWebInstaller_Initialize([In] ref ModuleConfig config);

	[PreserveSig]
	[Token(Token = "0x60006C1")]
	[Address(RVA = "0x1912FE4", Offset = "0x1912FE4", VA = "0x1912FE4")]
	private static extern void criFsWebInstaller_Finalize();

	[PreserveSig]
	[Token(Token = "0x60006C2")]
	[Address(RVA = "0x1913094", Offset = "0x1913094", VA = "0x1913094")]
	private static extern void criFsWebInstaller_ExecuteMain();

	[PreserveSig]
	[Token(Token = "0x60006C3")]
	[Address(RVA = "0x1912534", Offset = "0x1912534", VA = "0x1912534")]
	private static extern int criFsWebInstaller_Create(out IntPtr installer, IntPtr option);

	[PreserveSig]
	[Token(Token = "0x60006C4")]
	[Address(RVA = "0x1913144", Offset = "0x1913144", VA = "0x1913144")]
	private static extern int criFsWebInstaller_Destroy(IntPtr installer);

	[PreserveSig]
	[Token(Token = "0x60006C5")]
	[Address(RVA = "0x191289C", Offset = "0x191289C", VA = "0x191289C")]
	private static extern int criFsWebInstaller_Copy(IntPtr installer, string url, string dstPath);

	[PreserveSig]
	[Token(Token = "0x60006C6")]
	[Address(RVA = "0x19129AC", Offset = "0x19129AC", VA = "0x19129AC")]
	private static extern int criFsWebInstaller_Stop(IntPtr installer);

	[PreserveSig]
	[Token(Token = "0x60006C7")]
	[Address(RVA = "0x1912AB4", Offset = "0x1912AB4", VA = "0x1912AB4")]
	private static extern int criFsWebInstaller_GetStatusInfo(IntPtr installer, out StatusInfo status);
}
[Token(Token = "0x20000DA")]
public class CriPcmData
{
	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float[] data;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int numSamples;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int numChannels;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int samplingRate;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int loopStart;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int loopLength;

	[Token(Token = "0x60006C9")]
	[Address(RVA = "0x1913670", Offset = "0x1913670", VA = "0x1913670")]
	public CriPcmData()
	{
	}
}
[Token(Token = "0x20000DB")]
public static class CriHcaDecoder
{
	[Token(Token = "0x60006CA")]
	[Address(RVA = "0x1913484", Offset = "0x1913484", VA = "0x1913484")]
	public static CriPcmData Decode(byte[] data)
	{
		return null;
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0x1913890", Offset = "0x1913890", VA = "0x1913890")]
	public static CriPcmData Decode(string path)
	{
		return null;
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0x1913944", Offset = "0x1913944", VA = "0x1913944")]
	public static AudioClip CreateAudioClip(string name, string path)
	{
		return null;
	}

	[PreserveSig]
	[Token(Token = "0x60006CD")]
	[Address(RVA = "0x1913678", Offset = "0x1913678", VA = "0x1913678")]
	private static extern bool criAtomDecHca_GetInfo(IntPtr data, int nbyte, out int sampling_rate, out int num_channels, out int num_samples, out int loop_start, out int loop_length);

	[PreserveSig]
	[Token(Token = "0x60006CE")]
	[Address(RVA = "0x19139C4", Offset = "0x19139C4", VA = "0x19139C4")]
	private static extern int criAtomDecHca_DecodeShortInterleaved(IntPtr in_data, int inbyte, IntPtr out_buf, int out_nbyte);

	[PreserveSig]
	[Token(Token = "0x60006CF")]
	[Address(RVA = "0x19137BC", Offset = "0x19137BC", VA = "0x19137BC")]
	private static extern int criAtomDecHca_DecodeFloatInterleaved(IntPtr in_data, int in_nbyte, IntPtr out_buf, int out_nbyte);
}
namespace CriMana
{
	[Token(Token = "0x20000DC")]
	public enum CodecType
	{
		[Token(Token = "0x4000460")]
		Unknown = 0,
		[Token(Token = "0x4000461")]
		SofdecPrime = 1,
		[Token(Token = "0x4000462")]
		H264 = 5
	}
	[Token(Token = "0x20000DD")]
	public enum AlphaType
	{
		[Token(Token = "0x4000464")]
		CompoOpaq,
		[Token(Token = "0x4000465")]
		CompoAlphaFull,
		[Token(Token = "0x4000466")]
		CompoAlpha3Step,
		[Token(Token = "0x4000467")]
		CompoAlpha32Bit
	}
	[Token(Token = "0x20000DE")]
	public struct AudioInfo
	{
		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint samplingRate;

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint numChannels;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint totalSamples;
	}
	[StructLayout(0)]
	[Token(Token = "0x20000DF")]
	public class MovieInfo
	{
		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private uint _reserved1;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private uint _hasAlpha;

		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint width;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint height;

		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint dispWidth;

		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint dispHeight;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint framerateN;

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint framerateD;

		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint totalFrames;

		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private uint _codecType;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private uint _alphaCodecType;

		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint numAudioStreams;

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioInfo[] audioPrm;

		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public uint numSubtitleChannels;

		[Token(Token = "0x4000479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public uint maxSubtitleSize;

		[Token(Token = "0x17000074")]
		public bool hasAlpha
		{
			[Token(Token = "0x60006D1")]
			[Address(RVA = "0x1914DD8", Offset = "0x1914DD8", VA = "0x1914DD8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006D2")]
			[Address(RVA = "0x1917AD8", Offset = "0x1917AD8", VA = "0x1917AD8")]
			set
			{
			}
		}

		[Token(Token = "0x17000075")]
		public CodecType codecType
		{
			[Token(Token = "0x60006D3")]
			[Address(RVA = "0x1914180", Offset = "0x1914180", VA = "0x1914180")]
			get
			{
				return default(CodecType);
			}
			[Token(Token = "0x60006D4")]
			[Address(RVA = "0x1917AFC", Offset = "0x1917AFC", VA = "0x1917AFC")]
			set
			{
			}
		}

		[Token(Token = "0x17000076")]
		public CodecType alphaCodecType
		{
			[Token(Token = "0x60006D5")]
			[Address(RVA = "0x1916204", Offset = "0x1916204", VA = "0x1916204")]
			get
			{
				return default(CodecType);
			}
			[Token(Token = "0x60006D6")]
			[Address(RVA = "0x1917B04", Offset = "0x1917B04", VA = "0x1917B04")]
			set
			{
			}
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x1917AD0", Offset = "0x1917AD0", VA = "0x1917AD0")]
		public MovieInfo()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x20000E0")]
	public class FrameInfo
	{
		[Token(Token = "0x400047A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int frameNo;

		[Token(Token = "0x400047B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int frameNoPerFile;

		[Token(Token = "0x400047C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint width;

		[Token(Token = "0x400047D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint height;

		[Token(Token = "0x400047E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint dispWidth;

		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint dispHeight;

		[Token(Token = "0x4000480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint framerateN;

		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint framerateD;

		[Token(Token = "0x4000482")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ulong time;

		[Token(Token = "0x4000483")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ulong tunit;

		[Token(Token = "0x4000484")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint cntConcatenatedMovie;

		[Token(Token = "0x4000485")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private AlphaType alphaType;

		[Token(Token = "0x4000486")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public uint cntSkippedFrames;

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x1914C70", Offset = "0x1914C70", VA = "0x1914C70")]
		public FrameInfo()
		{
		}
	}
	[Token(Token = "0x20000E1")]
	public struct EventPoint
	{
		[Token(Token = "0x4000487")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr cueName;

		[Token(Token = "0x4000488")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint cueNameSize;

		[Token(Token = "0x4000489")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong time;

		[Token(Token = "0x400048A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong tunit;

		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int type;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public IntPtr paramString;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint paramStringSize;

		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint cntCallback;
	}
	[Token(Token = "0x20000E2")]
	public static class Settings
	{
		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x191CA88", Offset = "0x191CA88", VA = "0x191CA88")]
		public static void SetDecodeSkippingEnabled(bool enabled)
		{
		}
	}
}
[Token(Token = "0x20000E3")]
public class CriManaPlugin
{
	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int initializationCount;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool enabledMultithreadedRendering;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int renderingEventOffset;

	[Token(Token = "0x17000077")]
	public static bool isInitialized
	{
		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x191E12C", Offset = "0x191E12C", VA = "0x191E12C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000078")]
	public static bool isMultithreadedRenderingEnabled
	{
		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x191E1C4", Offset = "0x191E1C4", VA = "0x191E1C4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60006D9")]
	[Address(RVA = "0x191E124", Offset = "0x191E124", VA = "0x191E124")]
	public CriManaPlugin()
	{
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0x191E250", Offset = "0x191E250", VA = "0x191E250")]
	public static void SetConfigParameters(bool graphicsMultiThreaded, int num_decoders, int max_num_of_entries)
	{
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0x191E508", Offset = "0x191E508", VA = "0x191E508")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE9B358", Offset = "0xE9B358")]
	public static void SetConfigAdditonalParameters_VITA(bool use_h264_playback, int width, int height)
	{
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0x191E50C", Offset = "0x191E50C", VA = "0x191E50C")]
	public static void SetConfigAdditonalParameters_ANDROID(bool use_h264_playback)
	{
	}

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0x191E774", Offset = "0x191E774", VA = "0x191E774")]
	public static void SetConfigAdditonalParameters_WEBGL(string webworkerPath)
	{
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0x1917DC8", Offset = "0x1917DC8", VA = "0x1917DC8")]
	public static void InitializeLibrary()
	{
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0x191BD9C", Offset = "0x191BD9C", VA = "0x191BD9C")]
	public static void FinalizeLibrary()
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0x191E8D8", Offset = "0x191E8D8", VA = "0x191E8D8")]
	public static void SetDecodeThreadPriorityAndroidExperimental(int prio)
	{
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0x191EA18", Offset = "0x191EA18", VA = "0x191EA18")]
	public static bool ShouldSampleRed(GraphicsDeviceType type, IntPtr tex_ptr)
	{
		return default(bool);
	}

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0x191EB70", Offset = "0x191EB70", VA = "0x191EB70")]
	public static void Lock()
	{
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0x191EC98", Offset = "0x191EC98", VA = "0x191EC98")]
	public static void Unlock()
	{
	}

	[PreserveSig]
	[Token(Token = "0x60006E6")]
	[Address(RVA = "0x191E434", Offset = "0x191E434", VA = "0x191E434")]
	private static extern void criManaUnity_SetConfigParameters(int graphics_api, bool graphics_multi_threaded, int num_decoders, int num_of_max_entries);

	[PreserveSig]
	[Token(Token = "0x60006E7")]
	[Address(RVA = "0x191E778", Offset = "0x191E778", VA = "0x191E778")]
	private static extern void criManaUnity_Initialize();

	[PreserveSig]
	[Token(Token = "0x60006E8")]
	[Address(RVA = "0x191E828", Offset = "0x191E828", VA = "0x191E828")]
	private static extern void criManaUnity_Finalize();

	[PreserveSig]
	[Token(Token = "0x60006E9")]
	[Address(RVA = "0x191CB08", Offset = "0x191CB08", VA = "0x191CB08")]
	public static extern void criManaUnity_SetDecodeSkipFlag(bool flag);

	[PreserveSig]
	[Token(Token = "0x60006EA")]
	[Address(RVA = "0x191EBE8", Offset = "0x191EBE8", VA = "0x191EBE8")]
	public static extern void criManaUnity_Lock();

	[PreserveSig]
	[Token(Token = "0x60006EB")]
	[Address(RVA = "0x191ED10", Offset = "0x191ED10", VA = "0x191ED10")]
	public static extern void criManaUnity_Unlock();

	[PreserveSig]
	[Token(Token = "0x60006EC")]
	[Address(RVA = "0x191EDC0", Offset = "0x191EDC0", VA = "0x191EDC0")]
	public static extern uint criManaUnity_GetAllocatedHeapSize();

	[PreserveSig]
	[Token(Token = "0x60006ED")]
	[Address(RVA = "0x191E958", Offset = "0x191E958", VA = "0x191E958")]
	public static extern void criManaUnity_SetDecodeThreadPriority_ANDROID(int prio);

	[PreserveSig]
	[Token(Token = "0x60006EE")]
	[Address(RVA = "0x191E6B4", Offset = "0x191E6B4", VA = "0x191E6B4")]
	private static extern void criManaUnity_SetConfigAdditionalParameters_ANDROID(bool enable_h264_playback);

	[PreserveSig]
	[Token(Token = "0x60006EF")]
	[Address(RVA = "0x191EE70", Offset = "0x191EE70", VA = "0x191EE70")]
	public static extern void criManaUnity_EnableSwitchTextureSampleColorGLES30_ANDROID();

	[PreserveSig]
	[Token(Token = "0x60006F0")]
	[Address(RVA = "0x191EAA8", Offset = "0x191EAA8", VA = "0x191EAA8")]
	private static extern bool criManaUnity_ShouldSwitchTextureSampleColorToRedGLES30_ANDROID(IntPtr tex_ptr);
}
[Token(Token = "0x20000E4")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9B38C", Offset = "0xE9B38C")]
public class CriManaMovieController : CriManaMovieMaterial
{
	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Renderer target;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool useOriginalMaterial;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material originalMaterial;

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0x191CC88", Offset = "0x191CC88", VA = "0x191CC88")]
	public CriManaMovieController()
	{
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0x191CC98", Offset = "0x191CC98", VA = "0x191CC98", Slot = "10")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0x191D0AC", Offset = "0x191D0AC", VA = "0x191D0AC", Slot = "11")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0x191D294", Offset = "0x191D294", VA = "0x191D294", Slot = "9")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0x191D3DC", Offset = "0x191D3DC", VA = "0x191D3DC", Slot = "4")]
	protected override void OnMaterialAvailableChanged()
	{
	}
}
[Token(Token = "0x20000E5")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9B3C0", Offset = "0xE9B3C0")]
public class CriManaMovieControllerForUI : CriManaMovieMaterial
{
	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Graphic target;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool useOriginalMaterial;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material originalMaterial;

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0x191D494", Offset = "0x191D494", VA = "0x191D494")]
	public CriManaMovieControllerForUI()
	{
	}

	[Token(Token = "0x60006F8")]
	[Address(RVA = "0x191D49C", Offset = "0x191D49C", VA = "0x191D49C", Slot = "10")]
	protected override void Start()
	{
	}

	[Token(Token = "0x60006F9")]
	[Address(RVA = "0x191D6A4", Offset = "0x191D6A4", VA = "0x191D6A4", Slot = "11")]
	protected override void Update()
	{
	}

	[Token(Token = "0x60006FA")]
	[Address(RVA = "0x191D7A0", Offset = "0x191D7A0", VA = "0x191D7A0", Slot = "9")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x60006FB")]
	[Address(RVA = "0x191D8A0", Offset = "0x191D8A0", VA = "0x191D8A0", Slot = "4")]
	protected override void OnMaterialAvailableChanged()
	{
	}
}
[Token(Token = "0x20000E6")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9B3F4", Offset = "0xE9B3F4")]
public class CriManaMovieMaterial : MonoBehaviour
{
	[Token(Token = "0x20000E7")]
	public enum RenderMode
	{
		[Token(Token = "0x40004A5")]
		Always,
		[Token(Token = "0x40004A6")]
		OnVisibility,
		[Token(Token = "0x40004A7")]
		Never
	}

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool playOnStart;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B428", Offset = "0xE9B428")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9B428", Offset = "0xE9B428")]
	private bool <isMaterialAvailable>k__BackingField;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B45C", Offset = "0xE9B45C")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9B45C", Offset = "0xE9B45C")]
	private Player <player>k__BackingField;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public RenderMode renderMode;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Material _material;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private string _moviePath;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool _loop;

	[Token(Token = "0x400049F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	[SerializeField]
	private bool _additiveMode;

	[Token(Token = "0x40004A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	private bool materialOwn;

	[Token(Token = "0x40004A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	private bool isMonoBehaviourStartCalled;

	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool unpauseOnApplicationUnpause;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B4D0", Offset = "0xE9B4D0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9B4D0", Offset = "0xE9B4D0")]
	private bool <HaveRendererOwner>k__BackingField;

	[Token(Token = "0x17000079")]
	public string moviePath
	{
		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x191D958", Offset = "0x191D958", VA = "0x191D958")]
		get
		{
			return null;
		}
		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x191D960", Offset = "0x191D960", VA = "0x191D960")]
		set
		{
		}
	}

	[Token(Token = "0x1700007A")]
	public bool loop
	{
		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x191DA08", Offset = "0x191DA08", VA = "0x191DA08")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000700")]
		[Address(RVA = "0x191DA10", Offset = "0x191DA10", VA = "0x191DA10")]
		set
		{
		}
	}

	[Token(Token = "0x1700007B")]
	public bool additiveMode
	{
		[Token(Token = "0x6000701")]
		[Address(RVA = "0x191DAB8", Offset = "0x191DAB8", VA = "0x191DAB8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000702")]
		[Address(RVA = "0x191DAC0", Offset = "0x191DAC0", VA = "0x191DAC0")]
		set
		{
		}
	}

	[Token(Token = "0x1700007C")]
	public bool isMaterialAvailable
	{
		[Token(Token = "0x6000703")]
		[Address(RVA = "0x191D484", Offset = "0x191D484", VA = "0x191D484")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B504", Offset = "0xE9B504")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000704")]
		[Address(RVA = "0x191DB68", Offset = "0x191DB68", VA = "0x191DB68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B514", Offset = "0xE9B514")]
		private set
		{
		}
	}

	[Token(Token = "0x1700007D")]
	public Player player
	{
		[Token(Token = "0x6000705")]
		[Address(RVA = "0x191D28C", Offset = "0x191D28C", VA = "0x191D28C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B524", Offset = "0xE9B524")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000706")]
		[Address(RVA = "0x191DB70", Offset = "0x191DB70", VA = "0x191DB70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B534", Offset = "0xE9B534")]
		private set
		{
		}
	}

	[Token(Token = "0x1700007E")]
	public Material material
	{
		[Token(Token = "0x6000707")]
		[Address(RVA = "0x191D48C", Offset = "0x191D48C", VA = "0x191D48C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000708")]
		[Address(RVA = "0x191DB78", Offset = "0x191DB78", VA = "0x191DB78")]
		set
		{
		}
	}

	[Token(Token = "0x1700007F")]
	protected bool HaveRendererOwner
	{
		[Token(Token = "0x6000709")]
		[Address(RVA = "0x191D284", Offset = "0x191D284", VA = "0x191D284")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B544", Offset = "0xE9B544")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600070A")]
		[Address(RVA = "0x191DC74", Offset = "0x191DC74", VA = "0x191DC74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B554", Offset = "0xE9B554")]
		private set
		{
		}
	}

	[Token(Token = "0x60006FC")]
	[Address(RVA = "0x191CC90", Offset = "0x191CC90", VA = "0x191CC90")]
	public CriManaMovieMaterial()
	{
	}

	[Token(Token = "0x600070B")]
	[Address(RVA = "0x191DC7C", Offset = "0x191DC7C", VA = "0x191DC7C")]
	public void Play()
	{
	}

	[Token(Token = "0x600070C")]
	[Address(RVA = "0x191DCA0", Offset = "0x191DCA0", VA = "0x191DCA0")]
	public void Stop()
	{
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0x191DCF0", Offset = "0x191DCF0", VA = "0x191DCF0")]
	public void Pause(bool sw)
	{
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0x191DD1C", Offset = "0x191DD1C", VA = "0x191DD1C", Slot = "4")]
	protected virtual void OnMaterialAvailableChanged()
	{
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0x191DD20", Offset = "0x191DD20", VA = "0x191DD20", Slot = "5")]
	protected virtual void OnMaterialUpdated()
	{
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0x191DD24", Offset = "0x191DD24", VA = "0x191DD24", Slot = "6")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0x191DD98", Offset = "0x191DD98", VA = "0x191DD98", Slot = "7")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000712")]
	[Address(RVA = "0x191DD9C", Offset = "0x191DD9C", VA = "0x191DD9C", Slot = "8")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0x191D38C", Offset = "0x191D38C", VA = "0x191D38C", Slot = "9")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0x191CE98", Offset = "0x191CE98", VA = "0x191CE98", Slot = "10")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0x191D1A0", Offset = "0x191D1A0", VA = "0x191D1A0", Slot = "11")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0x191DE64", Offset = "0x191DE64", VA = "0x191DE64", Slot = "12")]
	public virtual void RenderMovie()
	{
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0x191DE88", Offset = "0x191DE88", VA = "0x191DE88", Slot = "13")]
	protected virtual void LateUpdate()
	{
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0x191DEB8", Offset = "0x191DEB8", VA = "0x191DEB8", Slot = "14")]
	protected virtual void OnWillRenderObject()
	{
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0x191DEE8", Offset = "0x191DEE8", VA = "0x191DEE8")]
	private void OnApplicationPause(bool appPause)
	{
	}

	[Token(Token = "0x600071A")]
	[Address(RVA = "0x191DEEC", Offset = "0x191DEEC", VA = "0x191DEEC")]
	private void ProcessApplicationPause(bool appPause)
	{
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0x191DF7C", Offset = "0x191DF7C", VA = "0x191DF7C", Slot = "15")]
	protected virtual void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600071C")]
	[Address(RVA = "0x191DDA0", Offset = "0x191DDA0", VA = "0x191DDA0")]
	private void CreateMaterial()
	{
	}
}
namespace CriMana.Detail
{
	[Token(Token = "0x20000E8")]
	public abstract class RendererResource : IDisposable
	{
		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool disposed;

		[Token(Token = "0x600071D")]
		[Address(RVA = "0x191481C", Offset = "0x191481C", VA = "0x191481C")]
		protected RendererResource()
		{
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0x1914824", Offset = "0x1914824", VA = "0x1914824", Slot = "1")]
		~RendererResource()
		{
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0x19148F8", Offset = "0x19148F8", VA = "0x19148F8", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0x19148A4", Offset = "0x19148A4", VA = "0x19148A4")]
		private void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000721")]
		protected abstract void OnDisposeManaged();

		[Token(Token = "0x6000722")]
		protected abstract void OnDisposeUnmanaged();

		[Token(Token = "0x6000723")]
		public abstract bool IsPrepared();

		[Token(Token = "0x6000724")]
		public abstract bool ContinuePreparing();

		[Token(Token = "0x6000725")]
		public abstract void AttachToPlayer(int playerId);

		[Token(Token = "0x6000726")]
		public abstract bool UpdateFrame(int playerId, FrameInfo frameInfo);

		[Token(Token = "0x6000727")]
		public abstract bool UpdateMaterial(Material material);

		[Token(Token = "0x6000728")]
		public abstract void UpdateTextures();

		[Token(Token = "0x6000729")]
		public abstract bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader);

		[Token(Token = "0x600072A")]
		[Address(RVA = "0x1914954", Offset = "0x1914954", VA = "0x1914954")]
		public static uint NextPowerOfTwo(uint x)
		{
			return default(uint);
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0x1914974", Offset = "0x1914974", VA = "0x1914974")]
		public static int NextPowerOfTwo(int x)
		{
			return default(int);
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0x1914994", Offset = "0x1914994", VA = "0x1914994")]
		public static int CeilingWith(int x, int ceilingValue)
		{
			return default(int);
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0x19149A8", Offset = "0x19149A8", VA = "0x19149A8")]
		public static int Ceiling16(int x)
		{
			return default(int);
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0x19149B4", Offset = "0x19149B4", VA = "0x19149B4")]
		public static int Ceiling32(int x)
		{
			return default(int);
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0x19149C0", Offset = "0x19149C0", VA = "0x19149C0")]
		public static int Ceiling64(int x)
		{
			return default(int);
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0x19149CC", Offset = "0x19149CC", VA = "0x19149CC")]
		public static int Ceiling256(int x)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000731")]
		[Address(RVA = "0x19149D8", Offset = "0x19149D8", VA = "0x19149D8")]
		protected static extern bool criManaUnityPlayer_UpdateFrame(int player_id, int num_textures, IntPtr[] tex_ptrs, [In][Out] FrameInfo frame_info);

		[PreserveSig]
		[Token(Token = "0x6000732")]
		[Address(RVA = "0x1914CF8", Offset = "0x1914CF8", VA = "0x1914CF8")]
		protected static extern bool criManaUnityPlayer_UpdateTextures(int player_id, int num_textures, [In][Out] IntPtr[] tex_ptrs);
	}
	[Token(Token = "0x20000E9")]
	public abstract class RendererResourceFactory : IDisposable
	{
		[Token(Token = "0x40004A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SortedList<int, RendererResourceFactory> factoryList;

		[Token(Token = "0x40004AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool disposed;

		[Token(Token = "0x6000733")]
		[Address(RVA = "0x19140CC", Offset = "0x19140CC", VA = "0x19140CC")]
		protected RendererResourceFactory()
		{
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0x1913F88", Offset = "0x1913F88", VA = "0x1913F88")]
		public static void RegisterFactory(RendererResourceFactory factory, int priority)
		{
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0x1917018", Offset = "0x1917018", VA = "0x1917018")]
		public static void DisposeAllFactories()
		{
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0x19173AC", Offset = "0x19173AC", VA = "0x19173AC")]
		public static RendererResource DispatchAndCreate(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
		{
			return null;
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0x191771C", Offset = "0x191771C", VA = "0x191771C", Slot = "1")]
		~RendererResourceFactory()
		{
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0x1917350", Offset = "0x1917350", VA = "0x1917350", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0x191779C", Offset = "0x191779C", VA = "0x191779C")]
		private void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x600073A")]
		protected abstract void OnDisposeManaged();

		[Token(Token = "0x600073B")]
		protected abstract void OnDisposeUnmanaged();

		[Token(Token = "0x600073C")]
		public abstract RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader);
	}
	[Token(Token = "0x20000EA")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xE9B564", Offset = "0xE9B564")]
	public class RendererResourceFactoryPriorityAttribute : Attribute
	{
		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int priority;

		[Token(Token = "0x600073E")]
		[Address(RVA = "0x1917880", Offset = "0x1917880", VA = "0x1917880")]
		public RendererResourceFactoryPriorityAttribute(int priority)
		{
		}
	}
	[Token(Token = "0x20000EB")]
	public static class AutoResisterRendererResourceFactories
	{
		[Token(Token = "0x20000EC")]
		[AttributeAttribute(Name = "RendererResourceFactoryPriorityAttribute", RVA = "0xE9B578", Offset = "0xE9B578")]
		public class RendererResourceFactoryAndroidH264Rgb : RendererResourceFactory
		{
			[Token(Token = "0x6000740")]
			[Address(RVA = "0x1914048", Offset = "0x1914048", VA = "0x1914048")]
			public RendererResourceFactoryAndroidH264Rgb()
			{
			}

			[Token(Token = "0x6000741")]
			[Address(RVA = "0x19140D4", Offset = "0x19140D4", VA = "0x19140D4", Slot = "7")]
			public override RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
			{
				return null;
			}

			[Token(Token = "0x6000742")]
			[Address(RVA = "0x19143E8", Offset = "0x19143E8", VA = "0x19143E8", Slot = "5")]
			protected override void OnDisposeManaged()
			{
			}

			[Token(Token = "0x6000743")]
			[Address(RVA = "0x19143EC", Offset = "0x19143EC", VA = "0x19143EC", Slot = "6")]
			protected override void OnDisposeUnmanaged()
			{
			}
		}

		[Token(Token = "0x20000EF")]
		[AttributeAttribute(Name = "RendererResourceFactoryPriorityAttribute", RVA = "0xE9B58C", Offset = "0xE9B58C")]
		public class RendererResourceFactoryAndroidSofdecPrimeYuv : RendererResourceFactory
		{
			[Token(Token = "0x6000755")]
			[Address(RVA = "0x19143F0", Offset = "0x19143F0", VA = "0x19143F0")]
			public RendererResourceFactoryAndroidSofdecPrimeYuv()
			{
			}

			[Token(Token = "0x6000756")]
			[Address(RVA = "0x1914474", Offset = "0x1914474", VA = "0x1914474", Slot = "7")]
			public override RendererResource CreateRendererResource(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
			{
				return null;
			}

			[Token(Token = "0x6000757")]
			[Address(RVA = "0x1914814", Offset = "0x1914814", VA = "0x1914814", Slot = "5")]
			protected override void OnDisposeManaged()
			{
			}

			[Token(Token = "0x6000758")]
			[Address(RVA = "0x1914818", Offset = "0x1914818", VA = "0x1914818", Slot = "6")]
			protected override void OnDisposeUnmanaged()
			{
			}
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0x1913A98", Offset = "0x1913A98", VA = "0x1913A98")]
		public static void InvokeAutoRegister()
		{
		}
	}
	[Token(Token = "0x20000ED")]
	public class RendererResourceAndroidH264Rgb : RendererResource
	{
		[Token(Token = "0x20000EE")]
		private struct NativeTexture
		{
			[Token(Token = "0x40004C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IntPtr nativePtrRGB;

			[Token(Token = "0x40004C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public IntPtr nativePtrA;

			[Token(Token = "0x40004C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float[] texCoords;
		}

		[Token(Token = "0x40004AC")]
		private const int RenderEventAction_ATTACH = 769;

		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int playerId;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int width;

		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int height;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool hasAlpha;

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int alphaWidth;

		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int alphaHeight;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool additive;

		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		private bool useUserShader;

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Shader shader;

		[Token(Token = "0x40004B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector4 movieTextureST;

		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector4 alphaTextureST;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Texture2D textureRGB;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Texture2D textureA;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private IntPtr[] nativePtrs;

		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool needsUpdateTexture;

		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Material currentMaterial;

		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int srcBlendMode;

		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int dstBlendMode;

		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool needsToDetachInitTexture;

		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool areTexturesUpdated;

		[Token(Token = "0x6000744")]
		[Address(RVA = "0x1914188", Offset = "0x1914188", VA = "0x1914188")]
		public RendererResourceAndroidH264Rgb(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
		{
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0x1914DE8", Offset = "0x1914DE8", VA = "0x1914DE8", Slot = "5")]
		protected override void OnDisposeManaged()
		{
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0x1914DEC", Offset = "0x1914DEC", VA = "0x1914DEC", Slot = "6")]
		protected override void OnDisposeUnmanaged()
		{
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0x1914F60", Offset = "0x1914F60", VA = "0x1914F60", Slot = "7")]
		public override bool IsPrepared()
		{
			return default(bool);
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0x1914F68", Offset = "0x1914F68", VA = "0x1914F68", Slot = "8")]
		public override bool ContinuePreparing()
		{
			return default(bool);
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0x1914F70", Offset = "0x1914F70", VA = "0x1914F70", Slot = "13")]
		public override bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
		{
			return default(bool);
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0x19150D4", Offset = "0x19150D4", VA = "0x19150D4", Slot = "9")]
		public override void AttachToPlayer(int playerId)
		{
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0x19151C4", Offset = "0x19151C4", VA = "0x19151C4", Slot = "10")]
		public override bool UpdateFrame(int playerId, FrameInfo frameInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0x19152EC", Offset = "0x19152EC", VA = "0x19152EC", Slot = "11")]
		public override bool UpdateMaterial(Material material)
		{
			return default(bool);
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0x1915668", Offset = "0x1915668", VA = "0x1915668")]
		private void UpdateMovieTextureST(float[] texCoords, float dispWidth, float dispHeight)
		{
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0x1915788", Offset = "0x1915788", VA = "0x1915788", Slot = "12")]
		public override void UpdateTextures()
		{
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0x1915D3C", Offset = "0x1915D3C", VA = "0x1915D3C")]
		public static bool IsSupported()
		{
			return default(bool);
		}

		[PreserveSig]
		[Token(Token = "0x6000750")]
		[Address(RVA = "0x1915E1C", Offset = "0x1915E1C", VA = "0x1915E1C")]
		private static extern bool criManaUnity_IsMediaCodecSupported_ANDROID(int device_type);

		[PreserveSig]
		[Token(Token = "0x6000751")]
		[Address(RVA = "0x1915EE4", Offset = "0x1915EE4", VA = "0x1915EE4")]
		private static extern uint criManaUnity_MediaCodecCreateTexture_ANDROID();

		[PreserveSig]
		[Token(Token = "0x6000752")]
		[Address(RVA = "0x1915F94", Offset = "0x1915F94", VA = "0x1915F94")]
		private static extern void criManaUnity_MediaCodecDeleteTexture_ANDROID(uint oes_texture);

		[PreserveSig]
		[Token(Token = "0x6000753")]
		[Address(RVA = "0x19150F4", Offset = "0x19150F4", VA = "0x19150F4")]
		private static extern bool criManaUnityPlayer_MediaCodecAttachTexture_ANDROID(int player_id, uint oes_texture);

		[PreserveSig]
		[Token(Token = "0x6000754")]
		[Address(RVA = "0x1915224", Offset = "0x1915224", VA = "0x1915224")]
		private static extern void criManaUnityPlayer_MediaCodecDetachTexture_ANDROID(int player_id, uint oes_texture);
	}
	[Token(Token = "0x20000F0")]
	public class RendererResourceAndroidSofdecPrimeYuv : RendererResource
	{
		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int width;

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int height;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int chromaWidth;

		[Token(Token = "0x40004C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int chromaHeight;

		[Token(Token = "0x40004C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int alphaWidth;

		[Token(Token = "0x40004C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int alphaHeight;

		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool hasAlpha;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		private bool additive;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
		private bool useUserShader;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CodecType codecType;

		[Token(Token = "0x40004CE")]
		private const TextureFormat format = TextureFormat.R8;

		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Shader shader;

		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector4 movieTextureST;

		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector4 movieChromaTextureST;

		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector4 movieAlphaTextureST;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Texture2D textureY;

		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Texture2D textureU;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Texture2D textureV;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Texture2D textureA;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material currentMaterial;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int SrcBlendMode;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int DstBlendMode;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int playerID;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool areTexturesUpdated;

		[Token(Token = "0x6000759")]
		[Address(RVA = "0x1914520", Offset = "0x1914520", VA = "0x1914520")]
		public RendererResourceAndroidSofdecPrimeYuv(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
		{
		}

		[Token(Token = "0x600075A")]
		[Address(RVA = "0x19163B0", Offset = "0x19163B0", VA = "0x19163B0", Slot = "5")]
		protected override void OnDisposeManaged()
		{
		}

		[Token(Token = "0x600075B")]
		[Address(RVA = "0x19163B4", Offset = "0x19163B4", VA = "0x19163B4", Slot = "6")]
		protected override void OnDisposeUnmanaged()
		{
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0x1916650", Offset = "0x1916650", VA = "0x1916650", Slot = "7")]
		public override bool IsPrepared()
		{
			return default(bool);
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0x1916658", Offset = "0x1916658", VA = "0x1916658", Slot = "8")]
		public override bool ContinuePreparing()
		{
			return default(bool);
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0x1916660", Offset = "0x1916660", VA = "0x1916660", Slot = "13")]
		public override bool IsSuitable(int playerId, MovieInfo movieInfo, bool additive, Shader userShader)
		{
			return default(bool);
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0x19167E4", Offset = "0x19167E4", VA = "0x19167E4", Slot = "9")]
		public override void AttachToPlayer(int playerId)
		{
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0x19167F0", Offset = "0x19167F0", VA = "0x19167F0", Slot = "10")]
		public override bool UpdateFrame(int playerId, FrameInfo frameInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0x1916868", Offset = "0x1916868", VA = "0x1916868", Slot = "11")]
		public override bool UpdateMaterial(Material material)
		{
			return default(bool);
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0x191620C", Offset = "0x191620C", VA = "0x191620C")]
		private void UpdateMovieTextureST(uint dispWidth, uint dispHeight)
		{
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0x1916BDC", Offset = "0x1916BDC", VA = "0x1916BDC", Slot = "12")]
		public override void UpdateTextures()
		{
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0x1916198", Offset = "0x1916198", VA = "0x1916198")]
		private static void CalculateTextureSize(ref int w, ref int h, int videoWidth, int videoHeight, CodecType type, bool isChroma)
		{
		}
	}
}
namespace CriMana
{
	[Token(Token = "0x20000F1")]
	public class Player : IDisposable
	{
		[Token(Token = "0x20000F2")]
		public enum Status
		{
			[Token(Token = "0x40004F2")]
			Stop,
			[Token(Token = "0x40004F3")]
			Dechead,
			[Token(Token = "0x40004F4")]
			WaitPrep,
			[Token(Token = "0x40004F5")]
			Prep,
			[Token(Token = "0x40004F6")]
			Ready,
			[Token(Token = "0x40004F7")]
			Playing,
			[Token(Token = "0x40004F8")]
			PlayEnd,
			[Token(Token = "0x40004F9")]
			Error,
			[Token(Token = "0x40004FA")]
			StopProcessing
		}

		[Token(Token = "0x20000F3")]
		public enum SetMode
		{
			[Token(Token = "0x40004FC")]
			New,
			[Token(Token = "0x40004FD")]
			Append,
			[Token(Token = "0x40004FE")]
			AppendRepeatedly
		}

		[Token(Token = "0x20000F4")]
		public enum AudioTrack
		{
			[Token(Token = "0x4000500")]
			Off,
			[Token(Token = "0x4000501")]
			Auto
		}

		[Token(Token = "0x20000F5")]
		public delegate void CuePointCallback(ref EventPoint eventPoint);

		[Token(Token = "0x20000F6")]
		public delegate Shader ShaderDispatchCallback(MovieInfo movieInfo, bool additiveMode);

		[Token(Token = "0x20000F7")]
		private delegate void CuePointCallbackFromNativeDelegate(IntPtr ptr1, IntPtr ptr2, [In] ref EventPoint eventPoint);

		[Token(Token = "0x20000F8")]
		public enum CriManaUnityPlayer_RenderEventAction
		{
			[Token(Token = "0x4000503")]
			UPDATE = 0,
			[Token(Token = "0x4000504")]
			INITIALIZE = 256,
			[Token(Token = "0x4000505")]
			RENDER = 512,
			[Token(Token = "0x4000506")]
			DESTROY = 768
		}

		[Token(Token = "0x40004DC")]
		private const int InvalidPlayerId = -1;

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Player updatingPlayer;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool disposed;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int playerId;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Status requiredStatus;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Status nativeStatus;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isNativeStartInvoked;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool isNativeInitialized;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private RendererResource rendererResource;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MovieInfo _movieInfo;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private FrameInfo _frameInfo;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool isMovieInfoAvailable;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool isFrameInfoAvailable;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private ShaderDispatchCallback _shaderDispatchCallback;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool enableSubtitle;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int subtitleBufferSize;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public CuePointCallback cuePointCallback;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B5A0", Offset = "0xE9B5A0")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9B5A0", Offset = "0xE9B5A0")]
		private bool <additiveMode>k__BackingField;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B5D4", Offset = "0xE9B5D4")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9B5D4", Offset = "0xE9B5D4")]
		private IntPtr <subtitleBuffer>k__BackingField;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B608", Offset = "0xE9B608")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9B608", Offset = "0xE9B608")]
		private int <subtitleSize>k__BackingField;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B63C", Offset = "0xE9B63C")]
		private static CuePointCallbackFromNativeDelegate <>f__mg$cache0;

		[Token(Token = "0x17000080")]
		public bool additiveMode
		{
			[Token(Token = "0x6000766")]
			[Address(RVA = "0x1918048", Offset = "0x1918048", VA = "0x1918048")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B64C", Offset = "0xE9B64C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000767")]
			[Address(RVA = "0x1918040", Offset = "0x1918040", VA = "0x1918040")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B65C", Offset = "0xE9B65C")]
			set
			{
			}
		}

		[Token(Token = "0x17000081")]
		public bool isFrameAvailable
		{
			[Token(Token = "0x6000768")]
			[Address(RVA = "0x1918050", Offset = "0x1918050", VA = "0x1918050")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000082")]
		public MovieInfo movieInfo
		{
			[Token(Token = "0x6000769")]
			[Address(RVA = "0x1918058", Offset = "0x1918058", VA = "0x1918058")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000083")]
		public FrameInfo frameInfo
		{
			[Token(Token = "0x600076A")]
			[Address(RVA = "0x1918070", Offset = "0x1918070", VA = "0x1918070")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000084")]
		public Status status
		{
			[Token(Token = "0x600076B")]
			[Address(RVA = "0x1918088", Offset = "0x1918088", VA = "0x1918088")]
			get
			{
				return default(Status);
			}
		}

		[Token(Token = "0x17000085")]
		public int numberOfEntries
		{
			[Token(Token = "0x600076C")]
			[Address(RVA = "0x19180F4", Offset = "0x19180F4", VA = "0x19180F4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000086")]
		public IntPtr subtitleBuffer
		{
			[Token(Token = "0x600076D")]
			[Address(RVA = "0x1918238", Offset = "0x1918238", VA = "0x1918238")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B66C", Offset = "0xE9B66C")]
			get
			{
				return default(IntPtr);
			}
			[Token(Token = "0x600076E")]
			[Address(RVA = "0x1918240", Offset = "0x1918240", VA = "0x1918240")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B67C", Offset = "0xE9B67C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000087")]
		public int subtitleSize
		{
			[Token(Token = "0x600076F")]
			[Address(RVA = "0x1918248", Offset = "0x1918248", VA = "0x1918248")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B68C", Offset = "0xE9B68C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000770")]
			[Address(RVA = "0x1918250", Offset = "0x1918250", VA = "0x1918250")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B69C", Offset = "0xE9B69C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0x1917CB4", Offset = "0x1917CB4", VA = "0x1917CB4")]
		public Player()
		{
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0x1918258", Offset = "0x1918258", VA = "0x1918258", Slot = "1")]
		~Player()
		{
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0x19183B8", Offset = "0x19183B8", VA = "0x19183B8", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0x19183E0", Offset = "0x19183E0", VA = "0x19183E0")]
		public void CreateRendererResource(int width, int height, bool alpha)
		{
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0x191899C", Offset = "0x191899C", VA = "0x191899C")]
		public void DisposeRendererResource()
		{
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0x19189C4", Offset = "0x19189C4", VA = "0x19189C4")]
		public void Prepare()
		{
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0x1918CCC", Offset = "0x1918CCC", VA = "0x1918CCC")]
		public void Start()
		{
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0x1918D18", Offset = "0x1918D18", VA = "0x1918D18")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0x1918E84", Offset = "0x1918E84", VA = "0x1918E84")]
		public void Pause(bool sw)
		{
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0x1918FD8", Offset = "0x1918FD8", VA = "0x1918FD8")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0x1919124", Offset = "0x1919124", VA = "0x1919124")]
		public bool SetFile(CriFsBinder binder, string moviePath, SetMode setMode = SetMode.New)
		{
			return default(bool);
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0x1919638", Offset = "0x1919638", VA = "0x1919638")]
		public bool SetContentId(CriFsBinder binder, int contentId, SetMode setMode = SetMode.New)
		{
			return default(bool);
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0x1919938", Offset = "0x1919938", VA = "0x1919938")]
		public bool SetFileRange(string filePath, ulong offset, long range, SetMode setMode = SetMode.New)
		{
			return default(bool);
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0x1919C58", Offset = "0x1919C58", VA = "0x1919C58")]
		public void Loop(bool sw)
		{
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0x1919DAC", Offset = "0x1919DAC", VA = "0x1919DAC")]
		public void SetSeekPosition(int frameNumber)
		{
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0x1919F00", Offset = "0x1919F00", VA = "0x1919F00")]
		public void SetSpeed(float speed)
		{
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0x191A054", Offset = "0x191A054", VA = "0x191A054")]
		public void SetMaxPictureDataSize(uint maxDataSize)
		{
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0x191A1A8", Offset = "0x191A1A8", VA = "0x191A1A8")]
		public void SetBufferingTime(float sec)
		{
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0x191A2FC", Offset = "0x191A2FC", VA = "0x191A2FC")]
		public void SetMinBufferSize(int min_buffer_size)
		{
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0x191A450", Offset = "0x191A450", VA = "0x191A450")]
		public void SetAudioTrack(int track)
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0x191A5A4", Offset = "0x191A5A4", VA = "0x191A5A4")]
		public void SetAudioTrack(AudioTrack track)
		{
		}

		[Token(Token = "0x6000785")]
		[Address(RVA = "0x191A680", Offset = "0x191A680", VA = "0x191A680")]
		public void SetSubAudioTrack(int track)
		{
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0x191A7D4", Offset = "0x191A7D4", VA = "0x191A7D4")]
		public void SetSubAudioTrack(AudioTrack track)
		{
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0x191A8B0", Offset = "0x191A8B0", VA = "0x191A8B0")]
		public void SetVolume(float volume)
		{
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0x191AA04", Offset = "0x191AA04", VA = "0x191AA04")]
		public void SetSubAudioVolume(float volume)
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0x191AB58", Offset = "0x191AB58", VA = "0x191AB58")]
		public void SetBusSendLevel(string bus_name, float level)
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0x191ACE0", Offset = "0x191ACE0", VA = "0x191ACE0")]
		public void SetSubAudioBusSendLevel(string bus_name, float volume)
		{
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0x191AE68", Offset = "0x191AE68", VA = "0x191AE68")]
		public void SetSubtitleChannel(int channel)
		{
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0x191B16C", Offset = "0x191B16C", VA = "0x191B16C")]
		public void SetShaderDispatchCallback(ShaderDispatchCallback shaderDispatchCallback)
		{
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0x191B174", Offset = "0x191B174", VA = "0x191B174")]
		public long GetTime()
		{
			return default(long);
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0x191B2B8", Offset = "0x191B2B8", VA = "0x191B2B8")]
		public void SetAsrRackId(int asrRackId)
		{
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0x191B40C", Offset = "0x191B40C", VA = "0x191B40C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0x191BB7C", Offset = "0x191BB7C", VA = "0x191BB7C")]
		public void OnWillRenderObject(CriManaMovieMaterial sender)
		{
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0x191BBEC", Offset = "0x191BBEC", VA = "0x191BBEC")]
		public bool UpdateMaterial(Material material)
		{
			return default(bool);
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0x191BA98", Offset = "0x191BA98", VA = "0x191BA98")]
		public void IssuePluginEvent(CriManaUnityPlayer_RenderEventAction renderEventAction)
		{
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0x19182B8", Offset = "0x19182B8", VA = "0x19182B8")]
		private void Dispose(bool disposing)
		{
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0x1918CB4", Offset = "0x1918CB4", VA = "0x1918CB4")]
		private void DisableInfos()
		{
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0x19189FC", Offset = "0x19189FC", VA = "0x19189FC")]
		private void PrepareNativePlayer()
		{
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0x1918BA8", Offset = "0x1918BA8", VA = "0x1918BA8")]
		private void UpdateNativePlayer()
		{
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0x191AF3C", Offset = "0x191AF3C", VA = "0x191AF3C")]
		private void AllocateSubtitleBuffer(int size)
		{
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0x191AFEC", Offset = "0x191AFEC", VA = "0x191AFEC")]
		private void DeallocateSubtitleBuffer()
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0x1917B9C", Offset = "0x1917B9C", VA = "0x1917B9C")]
		[AttributeAttribute(Name = "MonoPInvokeCallbackAttribute", RVA = "0xE9B6AC", Offset = "0xE9B6AC")]
		private static void CuePointCallbackFromNative(IntPtr ptr1, IntPtr ptr2, [In] ref EventPoint eventPoint)
		{
		}

		[PreserveSig]
		[Token(Token = "0x600079A")]
		[Address(RVA = "0x1917F90", Offset = "0x1917F90", VA = "0x1917F90")]
		private static extern int criManaUnityPlayer_Create();

		[PreserveSig]
		[Token(Token = "0x600079B")]
		[Address(RVA = "0x191BCDC", Offset = "0x191BCDC", VA = "0x191BCDC")]
		private static extern void criManaUnityPlayer_Destroy(int player_id);

		[PreserveSig]
		[Token(Token = "0x600079C")]
		[Address(RVA = "0x1919448", Offset = "0x1919448", VA = "0x1919448")]
		private static extern void criManaUnityPlayer_SetFile(int player_id, IntPtr binder, string path);

		[PreserveSig]
		[Token(Token = "0x600079D")]
		[Address(RVA = "0x191978C", Offset = "0x191978C", VA = "0x191978C")]
		private static extern void criManaUnityPlayer_SetContentId(int player_id, IntPtr binder, int content_id);

		[PreserveSig]
		[Token(Token = "0x600079E")]
		[Address(RVA = "0x1919A44", Offset = "0x1919A44", VA = "0x1919A44")]
		private static extern void criManaUnityPlayer_SetFileRange(int player_id, string path, ulong offset, long range);

		[PreserveSig]
		[Token(Token = "0x600079F")]
		[Address(RVA = "0x1919534", Offset = "0x1919534", VA = "0x1919534")]
		private static extern bool criManaUnityPlayer_EntryFile(int player_id, IntPtr binder, string path, bool repeat);

		[PreserveSig]
		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x191985C", Offset = "0x191985C", VA = "0x191985C")]
		private static extern bool criManaUnityPlayer_EntryContentId(int player_id, IntPtr binder, int content_id, bool repeat);

		[PreserveSig]
		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x1919B44", Offset = "0x1919B44", VA = "0x1919B44")]
		private static extern bool criManaUnityPlayer_EntryFileRange(int player_id, string path, ulong offset, long range, bool repeat);

		[PreserveSig]
		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x191C414", Offset = "0x191C414", VA = "0x191C414")]
		private static extern void criManaUnityPlayer_ClearEntry(int player_id);

		[PreserveSig]
		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x1918178", Offset = "0x1918178", VA = "0x1918178")]
		private static extern int criManaUnityPlayer_GetNumberOfEntry(int player_id);

		[PreserveSig]
		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x191BF9C", Offset = "0x191BF9C", VA = "0x191BF9C")]
		private static extern void criManaUnityPlayer_SetCuePointCallback(int player_id, CuePointCallbackFromNativeDelegate cbfunc);

		[PreserveSig]
		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x191B8D8", Offset = "0x191B8D8", VA = "0x191B8D8")]
		private static extern void criManaUnityPlayer_GetMovieInfo(int player_id, [Out] MovieInfo movie_info);

		[PreserveSig]
		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x191C134", Offset = "0x191C134", VA = "0x191C134")]
		private static extern int criManaUnityPlayer_Update(int player_id, IntPtr subtitle_buffer, ref uint subtitle_size);

		[PreserveSig]
		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x191C074", Offset = "0x191C074", VA = "0x191C074")]
		private static extern void criManaUnityPlayer_Prepare(int player_id);

		[PreserveSig]
		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x191B9D8", Offset = "0x191B9D8", VA = "0x191B9D8")]
		private static extern void criManaUnityPlayer_Start(int player_id);

		[PreserveSig]
		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x1918DC4", Offset = "0x1918DC4", VA = "0x1918DC4")]
		private static extern void criManaUnityPlayer_Stop(int player_id);

		[PreserveSig]
		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x1919E38", Offset = "0x1919E38", VA = "0x1919E38")]
		private static extern void criManaUnityPlayer_SetSeekPosition(int player_id, int seek_frame_no);

		[PreserveSig]
		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x1918F10", Offset = "0x1918F10", VA = "0x1918F10")]
		private static extern void criManaUnityPlayer_Pause(int player_id, int sw);

		[PreserveSig]
		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x191905C", Offset = "0x191905C", VA = "0x191905C")]
		private static extern bool criManaUnityPlayer_IsPaused(int player_id);

		[PreserveSig]
		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x1919CE4", Offset = "0x1919CE4", VA = "0x1919CE4")]
		private static extern void criManaUnityPlayer_Loop(int player_id, int sw);

		[PreserveSig]
		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x191B1F8", Offset = "0x191B1F8", VA = "0x191B1F8")]
		private static extern long criManaUnityPlayer_GetTime(int player_id);

		[PreserveSig]
		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x191C4D4", Offset = "0x191C4D4", VA = "0x191C4D4")]
		private static extern int criManaUnityPlayer_GetStatus(int player_id);

		[PreserveSig]
		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x191A4DC", Offset = "0x191A4DC", VA = "0x191A4DC")]
		private static extern void criManaUnityPlayer_SetAudioTrack(int player_id, int track);

		[PreserveSig]
		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x191A93C", Offset = "0x191A93C", VA = "0x191A93C")]
		private static extern void criManaUnityPlayer_SetVolume(int player_id, float vol);

		[PreserveSig]
		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x191A70C", Offset = "0x191A70C", VA = "0x191A70C")]
		private static extern void criManaUnityPlayer_SetSubAudioTrack(int player_id, int track);

		[PreserveSig]
		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x191AA90", Offset = "0x191AA90", VA = "0x191AA90")]
		private static extern void criManaUnityPlayer_SetSubAudioVolume(int player_id, float vol);

		[PreserveSig]
		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x191ABF4", Offset = "0x191ABF4", VA = "0x191ABF4")]
		private static extern void criManaUnityPlayer_SetBusSendLevelByName(int player_id, string bus_name, float level);

		[PreserveSig]
		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x191AD7C", Offset = "0x191AD7C", VA = "0x191AD7C")]
		private static extern void criManaUnityPlayer_SetSubAudioBusSendLevelByName(int player_id, string bus_name, float level);

		[PreserveSig]
		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x191B0A4", Offset = "0x191B0A4", VA = "0x191B0A4")]
		private static extern void criManaUnityPlayer_SetSubtitleChannel(int player_id, int channel);

		[PreserveSig]
		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x1919F8C", Offset = "0x1919F8C", VA = "0x1919F8C")]
		private static extern void criManaUnityPlayer_SetSpeed(int player_id, float speed);

		[PreserveSig]
		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x191A0E0", Offset = "0x191A0E0", VA = "0x191A0E0")]
		private static extern void criManaUnityPlayer_SetMaxPictureDataSize(int player_id, uint max_data_size);

		[PreserveSig]
		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x191A234", Offset = "0x191A234", VA = "0x191A234")]
		public static extern void criManaUnityPlayer_SetBufferingTime(int player_id, float sec);

		[PreserveSig]
		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x191A388", Offset = "0x191A388", VA = "0x191A388")]
		public static extern void criManaUnityPlayer_SetMinBufferSize(int player_id, int min_buffer_size);

		[PreserveSig]
		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x191B344", Offset = "0x191B344", VA = "0x191B344")]
		public static extern void criManaUnityPlayer_SetAsrRackId(int player_id, int asr_rack_id);

		[PreserveSig]
		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x191BC2C", Offset = "0x191BC2C", VA = "0x191BC2C")]
		private static extern IntPtr criWareUnity_GetRenderEventFunc();
	}
}
[Token(Token = "0x20000F9")]
public class CriWare
{
	[Token(Token = "0x20000FA")]
	public struct CpuUsage
	{
		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float last;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float average;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float peak;
	}

	[Token(Token = "0x4000507")]
	private const string scriptVersionString = "2.23.01cogr5";

	[Token(Token = "0x4000508")]
	private const int scriptVersionNumber = 35848449;

	[Token(Token = "0x4000509")]
	public const bool supportsCriFsInstaller = true;

	[Token(Token = "0x400050A")]
	public const bool supportsCriFsWebInstaller = true;

	[Token(Token = "0x400050B")]
	public const string pluginName = "cri_ware_unity";

	[Token(Token = "0x400050C")]
	public const CallingConvention pluginCallingConvention = CallingConvention.Winapi;

	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GameObject _managerObject;

	[Token(Token = "0x17000088")]
	public static string streamingAssetsPath
	{
		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x1919398", Offset = "0x1919398", VA = "0x1919398")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000089")]
	public static string installTargetPath
	{
		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x191EF94", Offset = "0x191EF94", VA = "0x191EF94")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700008A")]
	public static GameObject managerObject
	{
		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x1907028", Offset = "0x1907028", VA = "0x1907028")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0x191EF8C", Offset = "0x191EF8C", VA = "0x191EF8C")]
	public CriWare()
	{
	}

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0x19192E0", Offset = "0x19192E0", VA = "0x19192E0")]
	public static bool IsStreamingAssetsPath(string path)
	{
		return default(bool);
	}

	[PreserveSig]
	[Token(Token = "0x60007CF")]
	[Address(RVA = "0x191EFD0", Offset = "0x191EFD0", VA = "0x191EFD0")]
	public static extern int criWareUnity_SetDecryptionKey(ulong key, string authentication_file, bool enable_atom_decryption, bool enable_mana_decryption);

	[PreserveSig]
	[Token(Token = "0x60007D0")]
	[Address(RVA = "0x191F0CC", Offset = "0x191F0CC", VA = "0x191F0CC")]
	public static extern int criWareUnity_GetVersionNumber();

	[PreserveSig]
	[Token(Token = "0x60007D1")]
	[Address(RVA = "0x191E374", Offset = "0x191E374", VA = "0x191E374")]
	public static extern void criWareUnity_SetRenderingEventOffsetForMana(int offset);

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0x191F17C", Offset = "0x191F17C", VA = "0x191F17C")]
	public static string GetScriptVersionString()
	{
		return null;
	}

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0x191F1D8", Offset = "0x191F1D8", VA = "0x191F1D8")]
	public static int GetScriptVersionNumber()
	{
		return default(int);
	}

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0x191F1E4", Offset = "0x191F1E4", VA = "0x191F1E4")]
	public static int GetBinaryVersionNumber()
	{
		return default(int);
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0x191F25C", Offset = "0x191F25C", VA = "0x191F25C")]
	public static int GetRequiredBinaryVersionNumber()
	{
		return default(int);
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0x191F268", Offset = "0x191F268", VA = "0x191F268")]
	public static bool CheckBinaryVersionCompatibility()
	{
		return default(bool);
	}

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0x191F344", Offset = "0x191F344", VA = "0x191F344")]
	public static uint GetFsMemoryUsage()
	{
		return default(uint);
	}

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0x191F3BC", Offset = "0x191F3BC", VA = "0x191F3BC")]
	public static uint GetAtomMemoryUsage()
	{
		return default(uint);
	}

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0x191F434", Offset = "0x191F434", VA = "0x191F434")]
	public static uint GetManaMemoryUsage()
	{
		return default(uint);
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0x191F4AC", Offset = "0x191F4AC", VA = "0x191F4AC")]
	public static CpuUsage GetAtomCpuUsage()
	{
		return default(CpuUsage);
	}
}
[Token(Token = "0x20000FB")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9B724", Offset = "0xE9B724")]
public class CriWareErrorHandler : MonoBehaviour
{
	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool enableDebugPrintOnTerminal;

	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	public bool enableForceCrashOnError;

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
	public bool dontDestroyOnLoad;

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B758", Offset = "0xE9B758")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9B758", Offset = "0xE9B758")]
	private static string <errorMessage>k__BackingField;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int initializationCount;

	[Token(Token = "0x1700008B")]
	public static string errorMessage
	{
		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x191F604", Offset = "0x191F604", VA = "0x191F604")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B78C", Offset = "0xE9B78C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x191F690", Offset = "0x191F690", VA = "0x191F690")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B79C", Offset = "0xE9B79C")]
		set
		{
		}
	}

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0x191F5F4", Offset = "0x191F5F4", VA = "0x191F5F4")]
	public CriWareErrorHandler()
	{
	}

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0x191F720", Offset = "0x191F720", VA = "0x191F720")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0x191FAEC", Offset = "0x191FAEC", VA = "0x191FAEC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0x191FAF0", Offset = "0x191FAF0", VA = "0x191FAF0")]
	private void Start()
	{
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0x191FAF4", Offset = "0x191FAF4", VA = "0x191FAF4")]
	private void Update()
	{
	}

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0x191FD78", Offset = "0x191FD78", VA = "0x191FD78")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60007E4")]
	[Address(RVA = "0x191FB7C", Offset = "0x191FB7C", VA = "0x191FB7C")]
	private static void OutputErrorMessage()
	{
	}

	[Token(Token = "0x60007E5")]
	[Address(RVA = "0x191FFAC", Offset = "0x191FFAC", VA = "0x191FFAC")]
	private static void OutputLog(string errmsg)
	{
	}

	[PreserveSig]
	[Token(Token = "0x60007E6")]
	[Address(RVA = "0x191F8BC", Offset = "0x191F8BC", VA = "0x191F8BC")]
	private static extern void criWareUnity_Initialize();

	[PreserveSig]
	[Token(Token = "0x60007E7")]
	[Address(RVA = "0x191FE4C", Offset = "0x191FE4C", VA = "0x191FE4C")]
	private static extern void criWareUnity_Finalize();

	[PreserveSig]
	[Token(Token = "0x60007E8")]
	[Address(RVA = "0x191FEFC", Offset = "0x191FEFC", VA = "0x191FEFC")]
	private static extern IntPtr criWareUnity_GetFirstError();

	[PreserveSig]
	[Token(Token = "0x60007E9")]
	[Address(RVA = "0x19201F0", Offset = "0x19201F0", VA = "0x19201F0")]
	private static extern void criWareUnity_ResetError();

	[PreserveSig]
	[Token(Token = "0x60007EA")]
	[Address(RVA = "0x191FA2C", Offset = "0x191FA2C", VA = "0x191FA2C")]
	private static extern void criWareUnity_ControlLogOutput(bool sw);

	[PreserveSig]
	[Token(Token = "0x60007EB")]
	[Address(RVA = "0x191F96C", Offset = "0x191F96C", VA = "0x191F96C")]
	private static extern void criWareUnity_SetForceCrashFlagOnError(bool sw);
}
[Serializable]
[Token(Token = "0x20000FC")]
public class CriFsConfig
{
	[Token(Token = "0x4000516")]
	public const int defaultAndroidDeviceReadBitrate = 50000000;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public int numberOfLoaders;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int numberOfBinders;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int numberOfInstallers;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int installBufferSize;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int maxPath;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public string userAgentString;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool minimizeFileDescriptorUsage;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int androidDeviceReadBitrate;

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0x190D738", Offset = "0x190D738", VA = "0x190D738")]
	public CriFsConfig()
	{
	}
}
[Serializable]
[Token(Token = "0x20000FD")]
public class CriAtomConfig
{
	[Serializable]
	[Token(Token = "0x20000FE")]
	public class StandardVoicePoolConfig
	{
		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int memoryVoices;

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int streamingVoices;

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x19E6B24", Offset = "0x19E6B24", VA = "0x19E6B24")]
		public StandardVoicePoolConfig()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000FF")]
	public class HcaMxVoicePoolConfig
	{
		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int memoryVoices;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int streamingVoices;

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x19E6B3C", Offset = "0x19E6B3C", VA = "0x19E6B3C")]
		public HcaMxVoicePoolConfig()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000100")]
	public class AndroidLowLatencyStandardVoicePoolConfig
	{
		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int memoryVoices;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int streamingVoices;

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x19E6B44", Offset = "0x19E6B44", VA = "0x19E6B44")]
		public AndroidLowLatencyStandardVoicePoolConfig()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000101")]
	public class VitaAtrac9VoicePoolConfig
	{
		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int memoryVoices;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int streamingVoices;

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x19E6B4C", Offset = "0x19E6B4C", VA = "0x19E6B4C")]
		public VitaAtrac9VoicePoolConfig()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000102")]
	public class Ps4Atrac9VoicePoolConfig
	{
		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int memoryVoices;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int streamingVoices;

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x19E6B54", Offset = "0x19E6B54", VA = "0x19E6B54")]
		public Ps4Atrac9VoicePoolConfig()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000103")]
	public class Ps4Audio3dConfig
	{
		[Serializable]
		[Token(Token = "0x2000104")]
		public class VoicePoolConfig
		{
			[Token(Token = "0x400053F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int memoryVoices;

			[Token(Token = "0x4000540")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int streamingVoices;

			[Token(Token = "0x60007F5")]
			[Address(RVA = "0x19E6BD8", Offset = "0x19E6BD8", VA = "0x19E6BD8")]
			public VoicePoolConfig()
			{
			}
		}

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool useAudio3D;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public VoicePoolConfig voicePoolConfig;

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x19E6B5C", Offset = "0x19E6B5C", VA = "0x19E6B5C")]
		public Ps4Audio3dConfig()
		{
		}
	}

	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string acfFileName;

	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int maxVirtualVoices;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int maxVoiceLimitGroups;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int maxCategories;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public StandardVoicePoolConfig standardVoicePoolConfig;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public HcaMxVoicePoolConfig hcaMxVoicePoolConfig;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int outputSamplingRate;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool usesInGamePreview;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float serverFrequency;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int asrOutputChannels;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool useRandomSeedWithTime;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int pcBufferingTime;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int iosBufferingTime;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool iosOverrideIPodMusic;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int androidBufferingTime;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int androidStartBufferingTime;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AndroidLowLatencyStandardVoicePoolConfig androidLowLatencyStandardVoicePoolConfig;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public VitaAtrac9VoicePoolConfig vitaAtrac9VoicePoolConfig;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Ps4Atrac9VoicePoolConfig ps4Atrac9VoicePoolConfig;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Ps4Audio3dConfig ps4Audio3dConfig;

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0x19E6968", Offset = "0x19E6968", VA = "0x19E6968")]
	public CriAtomConfig()
	{
	}
}
[Serializable]
[Token(Token = "0x2000105")]
public class CriManaConfig
{
	[Serializable]
	[Token(Token = "0x2000106")]
	public class VitaH264PlaybackConfig
	{
		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool useH264Playback;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int maxWidth;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int maxHeight;

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x191CC70", Offset = "0x191CC70", VA = "0x191CC70")]
		public VitaH264PlaybackConfig()
		{
		}
	}

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public int numberOfDecoders;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int numberOfMaxEntries;

	[Token(Token = "0x4000543")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly bool graphicsMultiThreaded;

	[Token(Token = "0x4000544")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public VitaH264PlaybackConfig vitaH264PlaybackConfig;

	[Token(Token = "0x60007F6")]
	[Address(RVA = "0x191CBC8", Offset = "0x191CBC8", VA = "0x191CBC8")]
	public CriManaConfig()
	{
	}
}
[Serializable]
[Token(Token = "0x2000107")]
public class CriWareDecrypterConfig
{
	[Token(Token = "0x4000548")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public string key;

	[Token(Token = "0x4000549")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string authenticationFile;

	[Token(Token = "0x400054A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool enableAtomDecryption;

	[Token(Token = "0x400054B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool enableManaDecryption;

	[Token(Token = "0x60007F8")]
	[Address(RVA = "0x191F530", Offset = "0x191F530", VA = "0x191F530")]
	public CriWareDecrypterConfig()
	{
	}
}
[Token(Token = "0x2000108")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9B7AC", Offset = "0xE9B7AC")]
public class CriWareInitializer : MonoBehaviour
{
	[Token(Token = "0x400054C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool initializesFileSystem;

	[Token(Token = "0x400054D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public CriFsConfig fileSystemConfig;

	[Token(Token = "0x400054E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool initializesAtom;

	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CriAtomConfig atomConfig;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool initializesMana;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CriManaConfig manaConfig;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool useDecrypter;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CriWareDecrypterConfig decrypterConfig;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool dontInitializeOnAwake;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool dontDestroyOnLoad;

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int initializationCount;

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0x19202A4", Offset = "0x19202A4", VA = "0x19202A4")]
	public CriWareInitializer()
	{
	}

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0x1920390", Offset = "0x1920390", VA = "0x1920390")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0x19211C8", Offset = "0x19211C8", VA = "0x19211C8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0x19211CC", Offset = "0x19211CC", VA = "0x19211CC")]
	private void Start()
	{
	}

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0x19211D0", Offset = "0x19211D0", VA = "0x19211D0")]
	private void Update()
	{
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0x1920420", Offset = "0x1920420", VA = "0x1920420")]
	public void Initialize()
	{
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0x19211D4", Offset = "0x19211D4", VA = "0x19211D4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000800")]
	[Address(RVA = "0x1905FD8", Offset = "0x1905FD8", VA = "0x1905FD8")]
	public static bool IsInitialized()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000109")]
public class CriWarePS4
{
	[Token(Token = "0x200010A")]
	public enum AudioPortType
	{
		[Token(Token = "0x400055A")]
		Main = 0,
		[Token(Token = "0x400055B")]
		Bgm = 1,
		[Token(Token = "0x400055C")]
		Voice = 2,
		[Token(Token = "0x400055D")]
		Personal = 3,
		[Token(Token = "0x400055E")]
		PadSpeaker = 4,
		[Token(Token = "0x400055F")]
		Aux = 127
	}

	[Token(Token = "0x200010B")]
	public enum AudioPortAttribute
	{
		[Token(Token = "0x4000561")]
		Normal = 0,
		[Token(Token = "0x4000562")]
		Restricted = 0x10000,
		[Token(Token = "0x4000563")]
		MixToMain = 0x20000
	}

	[Token(Token = "0x4000557")]
	public const int systemUserID = 255;

	[Token(Token = "0x4000558")]
	public const int bgmRackID = 1;

	[Token(Token = "0x6000802")]
	[Address(RVA = "0x1921394", Offset = "0x1921394", VA = "0x1921394")]
	public CriWarePS4()
	{
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0x192139C", Offset = "0x192139C", VA = "0x192139C")]
	public static bool IsBgmOverridden()
	{
		return default(bool);
	}
}
[Token(Token = "0x200010C")]
public class CriBinderManager : MonoBehaviour
{
	[Token(Token = "0x200010D")]
	private class MainBinderInfo
	{
		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CriFsBinder binder;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint bindId;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string path;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public List<string> contents;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> cpks;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint[] internalBindIds;

		[Token(Token = "0x6000811")]
		[Address(RVA = "0x190AEDC", Offset = "0x190AEDC", VA = "0x190AEDC")]
		public MainBinderInfo()
		{
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0x190C648", Offset = "0x190C648", VA = "0x190C648", Slot = "1")]
		~MainBinderInfo()
		{
		}
	}

	[Token(Token = "0x200010E")]
	private class MasterBinderInfo
	{
		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CriFsBinder binder;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint bindId;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string path;

		[Token(Token = "0x6000813")]
		[Address(RVA = "0x190AD90", Offset = "0x190AD90", VA = "0x190AD90")]
		public MasterBinderInfo()
		{
		}

		[Token(Token = "0x6000814")]
		[Address(RVA = "0x190C78C", Offset = "0x190C78C", VA = "0x190C78C", Slot = "1")]
		~MasterBinderInfo()
		{
		}
	}

	[Token(Token = "0x200010F")]
	private class AssetBundleInfo
	{
		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string bundleName;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public MainBinderInfo binder;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong offset;

		[Token(Token = "0x6000815")]
		[Address(RVA = "0x190C54C", Offset = "0x190C54C", VA = "0x190C54C")]
		public AssetBundleInfo()
		{
		}
	}

	[Token(Token = "0x200050E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B830", Offset = "0xE9B830")]
	private sealed class <InitializeCpk>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400198D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string pathToCpk;

		[Token(Token = "0x400198E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal bool <isAudio>__0;

		[Token(Token = "0x400198F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal CriFsBinder <target>__0;

		[Token(Token = "0x4001990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal CriFsBindRequest <request>__0;

		[Token(Token = "0x4001991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal CriBinderManager $this;

		[Token(Token = "0x4001992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal object $current;

		[Token(Token = "0x4001993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool $disposing;

		[Token(Token = "0x4001994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int $PC;

		[Token(Token = "0x17000276")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002388")]
			[Address(RVA = "0x1909B48", Offset = "0x1909B48", VA = "0x1909B48", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000277")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002389")]
			[Address(RVA = "0x1909B50", Offset = "0x1909B50", VA = "0x1909B50", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002386")]
		[Address(RVA = "0x1908F94", Offset = "0x1908F94", VA = "0x1908F94")]
		[DebuggerHidden]
		public <InitializeCpk>c__Iterator0()
		{
		}

		[Token(Token = "0x6002387")]
		[Address(RVA = "0x19094E8", Offset = "0x19094E8", VA = "0x19094E8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600238A")]
		[Address(RVA = "0x1909B58", Offset = "0x1909B58", VA = "0x1909B58", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600238B")]
		[Address(RVA = "0x1909B6C", Offset = "0x1909B6C", VA = "0x1909B6C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200050F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B890", Offset = "0xE9B890")]
	private sealed class <InitializeObb>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string pathToMainCpk;

		[Token(Token = "0x4001996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal MainBinderInfo <mbi>__0;

		[Token(Token = "0x4001997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal CriFsBindRequest <request>__0;

		[Token(Token = "0x4001998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal CriBinderManager $this;

		[Token(Token = "0x4001999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x400199A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal bool $disposing;

		[Token(Token = "0x400199B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int $PC;

		[Token(Token = "0x17000278")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600238E")]
			[Address(RVA = "0x190B564", Offset = "0x190B564", VA = "0x190B564", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000279")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600238F")]
			[Address(RVA = "0x190B56C", Offset = "0x190B56C", VA = "0x190B56C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600238C")]
		[Address(RVA = "0x1909034", Offset = "0x1909034", VA = "0x1909034")]
		[DebuggerHidden]
		public <InitializeObb>c__Iterator1()
		{
		}

		[Token(Token = "0x600238D")]
		[Address(RVA = "0x190B0F8", Offset = "0x190B0F8", VA = "0x190B0F8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002390")]
		[Address(RVA = "0x190B574", Offset = "0x190B574", VA = "0x190B574", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002391")]
		[Address(RVA = "0x190B588", Offset = "0x190B588", VA = "0x190B588", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000510")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B8F0", Offset = "0xE9B8F0")]
	private sealed class <InitializeObb>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x400199C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal MainBinderInfo mbi;

		[Token(Token = "0x400199D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal CriFsLoadFileRequest <loadRequest>__0;

		[Token(Token = "0x400199E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal Encoding <enc>__0;

		[Token(Token = "0x400199F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal string <data>__0;

		[Token(Token = "0x40019A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal string[] <contents>__0;

		[Token(Token = "0x40019A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int <i>__1;

		[Token(Token = "0x40019A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal CriFsBinder <target>__2;

		[Token(Token = "0x40019A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal CriFsBindRequest <request>__2;

		[Token(Token = "0x40019A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal CriBinderManager $this;

		[Token(Token = "0x40019A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal object $current;

		[Token(Token = "0x40019A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal bool $disposing;

		[Token(Token = "0x40019A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal int $PC;

		[Token(Token = "0x1700027A")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002394")]
			[Address(RVA = "0x190C5A0", Offset = "0x190C5A0", VA = "0x190C5A0", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002395")]
			[Address(RVA = "0x190C5A8", Offset = "0x190C5A8", VA = "0x190C5A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002392")]
		[Address(RVA = "0x19090D4", Offset = "0x19090D4", VA = "0x19090D4")]
		[DebuggerHidden]
		public <InitializeObb>c__Iterator2()
		{
		}

		[Token(Token = "0x6002393")]
		[Address(RVA = "0x190B60C", Offset = "0x190B60C", VA = "0x190B60C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002396")]
		[Address(RVA = "0x190C5B0", Offset = "0x190C5B0", VA = "0x190C5B0", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002397")]
		[Address(RVA = "0x190C5C4", Offset = "0x190C5C4", VA = "0x190C5C4", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000511")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B950", Offset = "0xE9B950")]
	private sealed class <InitializeMasterObb>c__Iterator3 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40019A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal ulong <mainOffset>__0;

		[Token(Token = "0x40019A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal ulong <patchOffset>__0;

		[Token(Token = "0x40019AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int <mainSize>__0;

		[Token(Token = "0x40019AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int <patchSize>__0;

		[Token(Token = "0x40019AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal string pathToMasterObb;

		[Token(Token = "0x40019AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal ulong <sceneOffset>__0;

		[Token(Token = "0x40019AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal AssetBundleCreateRequest <createRequest>__1;

		[Token(Token = "0x40019AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal MasterBinderInfo <mbi>__2;

		[Token(Token = "0x40019B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal CriFsBinder.Status <stat>__2;

		[Token(Token = "0x40019B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal MainBinderInfo <main>__2;

		[Token(Token = "0x40019B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal CriFsBindRequest <request>__2;

		[Token(Token = "0x40019B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal MasterBinderInfo <mbi2>__3;

		[Token(Token = "0x40019B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal CriFsBinder.Status <stat2>__3;

		[Token(Token = "0x40019B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		internal MainBinderInfo <patch>__3;

		[Token(Token = "0x40019B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		internal CriFsBindRequest <request>__3;

		[Token(Token = "0x40019B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		internal CriBinderManager $this;

		[Token(Token = "0x40019B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal object $current;

		[Token(Token = "0x40019B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		internal bool $disposing;

		[Token(Token = "0x40019BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		internal int $PC;

		[Token(Token = "0x1700027C")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600239A")]
			[Address(RVA = "0x190B050", Offset = "0x190B050", VA = "0x190B050", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600239B")]
			[Address(RVA = "0x190B058", Offset = "0x190B058", VA = "0x190B058", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002398")]
		[Address(RVA = "0x1909174", Offset = "0x1909174", VA = "0x1909174")]
		[DebuggerHidden]
		public <InitializeMasterObb>c__Iterator3()
		{
		}

		[Token(Token = "0x6002399")]
		[Address(RVA = "0x1909F04", Offset = "0x1909F04", VA = "0x1909F04", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600239C")]
		[Address(RVA = "0x190B060", Offset = "0x190B060", VA = "0x190B060", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600239D")]
		[Address(RVA = "0x190B074", Offset = "0x190B074", VA = "0x190B074", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000512")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9B9B0", Offset = "0xE9B9B0")]
	private sealed class <InitializeIndependentAllScenesBundle>c__Iterator4 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40019BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string scenesBundlePath;

		[Token(Token = "0x40019BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal AssetBundleCreateRequest <createRequest>__0;

		[Token(Token = "0x40019BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal CriBinderManager $this;

		[Token(Token = "0x40019BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x40019BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x40019C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x1700027E")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60023A0")]
			[Address(RVA = "0x1909E5C", Offset = "0x1909E5C", VA = "0x1909E5C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023A1")]
			[Address(RVA = "0x1909E64", Offset = "0x1909E64", VA = "0x1909E64", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600239E")]
		[Address(RVA = "0x1909214", Offset = "0x1909214", VA = "0x1909214")]
		[DebuggerHidden]
		public <InitializeIndependentAllScenesBundle>c__Iterator4()
		{
		}

		[Token(Token = "0x600239F")]
		[Address(RVA = "0x1909BF0", Offset = "0x1909BF0", VA = "0x1909BF0", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023A2")]
		[Address(RVA = "0x1909E6C", Offset = "0x1909E6C", VA = "0x1909E6C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023A3")]
		[Address(RVA = "0x1909E80", Offset = "0x1909E80", VA = "0x1909E80", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000564")]
	private const string DATA_FILE = "DATA";

	[Token(Token = "0x4000565")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private List<MasterBinderInfo> masterBinders;

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<string, AssetBundleInfo> availableBundles;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Dictionary<string, MainBinderInfo> activeBinders;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<uint> miscBindIds;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private List<string> fullContentList;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CriFsBinder audioBinder;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private CriFsBinder videoBinder;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AssetBundle allScenesBundle;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private string error;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CriBinderManager instance;

	[Token(Token = "0x1700008C")]
	public CriFsBinder AudioBinder
	{
		[Token(Token = "0x6000805")]
		[Address(RVA = "0x1908D70", Offset = "0x1908D70", VA = "0x1908D70")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700008D")]
	public CriFsBinder VideoBinder
	{
		[Token(Token = "0x6000806")]
		[Address(RVA = "0x1908D78", Offset = "0x1908D78", VA = "0x1908D78")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700008E")]
	public string Error
	{
		[Token(Token = "0x6000807")]
		[Address(RVA = "0x1908D80", Offset = "0x1908D80", VA = "0x1908D80")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700008F")]
	public static CriBinderManager Instance
	{
		[Token(Token = "0x6000808")]
		[Address(RVA = "0x1908D88", Offset = "0x1908D88", VA = "0x1908D88")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0x1908C14", Offset = "0x1908C14", VA = "0x1908C14")]
	public CriBinderManager()
	{
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0x1908DEC", Offset = "0x1908DEC", VA = "0x1908DEC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600080A")]
	[Address(RVA = "0x1908EFC", Offset = "0x1908EFC", VA = "0x1908EFC")]
	[DebuggerHidden]
	public IEnumerator InitializeCpk(string pathToCpk)
	{
		return null;
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0x1908F9C", Offset = "0x1908F9C", VA = "0x1908F9C")]
	[DebuggerHidden]
	public IEnumerator InitializeObb(string pathToMainCpk)
	{
		return null;
	}

	[Token(Token = "0x600080C")]
	[Address(RVA = "0x190903C", Offset = "0x190903C", VA = "0x190903C")]
	[DebuggerHidden]
	private IEnumerator InitializeObb(MainBinderInfo mbi)
	{
		return null;
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0x19090DC", Offset = "0x19090DC", VA = "0x19090DC")]
	[DebuggerHidden]
	public IEnumerator InitializeMasterObb(string pathToMasterObb)
	{
		return null;
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0x190917C", Offset = "0x190917C", VA = "0x190917C")]
	[DebuggerHidden]
	public IEnumerator InitializeIndependentAllScenesBundle(string scenesBundlePath)
	{
		return null;
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0x190921C", Offset = "0x190921C", VA = "0x190921C")]
	public AssetBundleCreateRequest RequestAssetBundle(string bundleName)
	{
		return null;
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0x1909324", Offset = "0x1909324", VA = "0x1909324")]
	private void OnDestroy()
	{
	}
}
[Token(Token = "0x2000110")]
public static class CriAtomExDebug
{
	[Token(Token = "0x2000111")]
	public struct ResourcesInfo
	{
		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CriAtomEx.ResourceUsage virtualVoiceUsage;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CriAtomEx.ResourceUsage sequenceUsage;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CriAtomEx.ResourceUsage sequenceTrackUsage;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CriAtomEx.ResourceUsage sequenceTrackItemUsage;
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0x19EFFA8", Offset = "0x19EFFA8", VA = "0x19EFFA8")]
	public static void GetResourcesInfo(out ResourcesInfo resourcesInfo)
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000817")]
	[Address(RVA = "0x19EFFAC", Offset = "0x19EFFAC", VA = "0x19EFFAC")]
	private static extern int criAtomExDebug_GetResourcesInfo(out ResourcesInfo resourcesInfo);
}
[Token(Token = "0x2000112")]
public static class CriAtomExAcfDebug
{
	[Token(Token = "0x2000113")]
	public struct CategoryInfo
	{
		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint groupNo;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint id;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string name;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint numCueLimits;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float volume;
	}

	[Token(Token = "0x2000114")]
	public struct DspBusInfo
	{
		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float volume;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float pan3dVolume;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float pan3dAngle;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float pan3dDistance;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ushort[] fxIndexes;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ushort[] busLinkIndexes;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ushort busNo;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public byte numFxes;

		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public byte numBusLinks;
	}

	[Token(Token = "0x2000115")]
	private struct CategoryInfoForMarshaling
	{
		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint groupNo;

		[Token(Token = "0x400058F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint id;

		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr namePtr;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint numCueLimits;

		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float volume;

		[Token(Token = "0x6000826")]
		[Address(RVA = "0x19ED92C", Offset = "0x19ED92C", VA = "0x19ED92C")]
		public void Convert(out CategoryInfo x)
		{
		}
	}

	[Token(Token = "0x2000116")]
	private struct DspBusInfoForMarshaling
	{
		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr namePtr;

		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float volume;

		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float pan3dVolume;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float pan3dAngle;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float pan3dDistance;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ushort[] fxIndexes;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ushort[] busLinkIndexes;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ushort busNo;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public byte numFxes;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public byte numBusLinks;

		[Token(Token = "0x6000827")]
		[Address(RVA = "0x19EDD24", Offset = "0x19EDD24", VA = "0x19EDD24")]
		public void Convert(out DspBusInfo x)
		{
		}
	}

	[Token(Token = "0x6000818")]
	[Address(RVA = "0x19ECEA4", Offset = "0x19ECEA4", VA = "0x19ECEA4")]
	public static int GetNumCategories()
	{
		return default(int);
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0x19ECF58", Offset = "0x19ECF58", VA = "0x19ECF58")]
	public static bool GetCategoryInfoByIndex(ushort index, out CategoryInfo categoryInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0x19ED0AC", Offset = "0x19ED0AC", VA = "0x19ED0AC")]
	public static bool GetCategoryInfoByName(string name, out CategoryInfo categoryInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x600081B")]
	[Address(RVA = "0x19ED224", Offset = "0x19ED224", VA = "0x19ED224")]
	public static bool GetCategoryInfoById(uint id, out CategoryInfo categoryInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x600081C")]
	[Address(RVA = "0x19ED378", Offset = "0x19ED378", VA = "0x19ED378")]
	public static bool GetDspBusInformation(ushort index, out DspBusInfo dspBusInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x600081D")]
	[Address(RVA = "0x19ED588", Offset = "0x19ED588", VA = "0x19ED588")]
	public static uint GetAisacControlIdByName(string name)
	{
		return default(uint);
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0x19ED670", Offset = "0x19ED670", VA = "0x19ED670")]
	public static string GetAisacControlNameById(uint id)
	{
		return null;
	}

	[PreserveSig]
	[Token(Token = "0x600081F")]
	[Address(RVA = "0x19ECEA8", Offset = "0x19ECEA8", VA = "0x19ECEA8")]
	private static extern int criAtomExAcf_GetNumCategories();

	[PreserveSig]
	[Token(Token = "0x6000820")]
	[Address(RVA = "0x19ECFCC", Offset = "0x19ECFCC", VA = "0x19ECFCC")]
	private static extern int criAtomExAcf_GetCategoryInfo(ushort index, out CategoryInfoForMarshaling categoryInfo);

	[PreserveSig]
	[Token(Token = "0x6000821")]
	[Address(RVA = "0x19ED120", Offset = "0x19ED120", VA = "0x19ED120")]
	private static extern int criAtomExAcf_GetCategoryInfoByName(string name, out CategoryInfoForMarshaling categoryInfo);

	[PreserveSig]
	[Token(Token = "0x6000822")]
	[Address(RVA = "0x19ED298", Offset = "0x19ED298", VA = "0x19ED298")]
	private static extern int criAtomExAcf_GetCategoryInfoById(uint id, out CategoryInfoForMarshaling categoryInfo);

	[PreserveSig]
	[Token(Token = "0x6000823")]
	[Address(RVA = "0x19ED414", Offset = "0x19ED414", VA = "0x19ED414")]
	private static extern int criAtomExAcf_GetDspBusInformation(ushort index, out DspBusInfoForMarshaling dspBusInfo);

	[PreserveSig]
	[Token(Token = "0x6000824")]
	[Address(RVA = "0x19ED58C", Offset = "0x19ED58C", VA = "0x19ED58C")]
	private static extern uint criAtomExAcf_GetAisacControlIdByName(string name);

	[PreserveSig]
	[Token(Token = "0x6000825")]
	[Address(RVA = "0x19ED688", Offset = "0x19ED688", VA = "0x19ED688")]
	private static extern IntPtr criAtomExAcf_GetAisacControlNameById(uint id);
}
[Token(Token = "0x2000117")]
public static class CriAtomExAcbDebug
{
	[Token(Token = "0x2000118")]
	public struct AcbInfo
	{
		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string name;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint size;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint version;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CriAtomEx.CharacterEncoding characterEncoding;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float volume;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int numCues;
	}

	[Token(Token = "0x2000119")]
	private struct AcbInfoForMarshaling
	{
		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr namePtr;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint size;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint version;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CriAtomEx.CharacterEncoding characterEncoding;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float volume;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int numCues;

		[Token(Token = "0x600082A")]
		[Address(RVA = "0x19ECE5C", Offset = "0x19ECE5C", VA = "0x19ECE5C")]
		public void Convert(out AcbInfo x)
		{
		}
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0x19ECC48", Offset = "0x19ECC48", VA = "0x19ECC48")]
	public static bool GetAcbInfo(CriAtomExAcb acb, out AcbInfo acbInfo)
	{
		return default(bool);
	}

	[PreserveSig]
	[Token(Token = "0x6000829")]
	[Address(RVA = "0x19ECCCC", Offset = "0x19ECCCC", VA = "0x19ECCCC")]
	private static extern int criAtomExAcb_GetAcbInfo(IntPtr acbHn, out AcbInfoForMarshaling acbInfo);
}
[Token(Token = "0x200011A")]
public static class CriAtomExPlaybackDebug
{
	[Token(Token = "0x600082B")]
	[Address(RVA = "0x19F0E04", Offset = "0x19F0E04", VA = "0x19F0E04")]
	public static bool GetParameter(CriAtomExPlayback playback, CriAtomEx.Parameter parameterId, out float value)
	{
		return default(bool);
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0x19F0F04", Offset = "0x19F0F04", VA = "0x19F0F04")]
	public static bool GetParameter(CriAtomExPlayback playback, CriAtomEx.Parameter parameterId, out uint value)
	{
		return default(bool);
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0x19F1004", Offset = "0x19F1004", VA = "0x19F1004")]
	public static bool GetParameter(CriAtomExPlayback playback, CriAtomEx.Parameter parameterId, out int value)
	{
		return default(bool);
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0x19F1104", Offset = "0x19F1104", VA = "0x19F1104")]
	public static bool GetAisacControl(CriAtomExPlayback playback, uint controlId, out float value)
	{
		return default(bool);
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0x19F1204", Offset = "0x19F1204", VA = "0x19F1204")]
	public static bool GetAisacControl(CriAtomExPlayback playback, string controlName, out float value)
	{
		return default(bool);
	}

	[PreserveSig]
	[Token(Token = "0x6000830")]
	[Address(RVA = "0x19F0E24", Offset = "0x19F0E24", VA = "0x19F0E24")]
	private static extern int criAtomExPlayback_GetParameterFloat32(uint id, int parameterId, out float value);

	[PreserveSig]
	[Token(Token = "0x6000831")]
	[Address(RVA = "0x19F0F24", Offset = "0x19F0F24", VA = "0x19F0F24")]
	private static extern int criAtomExPlayback_GetParameterUint32(uint id, int parameterId, out uint value);

	[PreserveSig]
	[Token(Token = "0x6000832")]
	[Address(RVA = "0x19F1024", Offset = "0x19F1024", VA = "0x19F1024")]
	private static extern int criAtomExPlayback_GetParameterSint32(uint id, int parameterId, out int value);

	[PreserveSig]
	[Token(Token = "0x6000833")]
	[Address(RVA = "0x19F1124", Offset = "0x19F1124", VA = "0x19F1124")]
	private static extern int criAtomExPlayback_GetAisacControlById(uint id, uint controlId, out float value);

	[PreserveSig]
	[Token(Token = "0x6000834")]
	[Address(RVA = "0x19F1224", Offset = "0x19F1224", VA = "0x19F1224")]
	private static extern int criAtomExPlayback_GetAisacControlByName(uint id, string controlName, out float value);
}
namespace CriAtomDebugDetail
{
	[Token(Token = "0x200011B")]
	public class Utility
	{
		[Token(Token = "0x6000835")]
		[Address(RVA = "0x19E6BE0", Offset = "0x19E6BE0", VA = "0x19E6BE0")]
		public Utility()
		{
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x19E6BE8", Offset = "0x19E6BE8", VA = "0x19E6BE8")]
		public static string PtrToStringAutoOrNull(IntPtr stringPtr)
		{
			return null;
		}
	}
}
[Token(Token = "0x200011C")]
public class DWAlertWrapper : MonoBehaviour
{
	[Token(Token = "0x200011D")]
	public enum ReturnValue
	{
		[Token(Token = "0x40005B3")]
		Positive = 1,
		[Token(Token = "0x40005B4")]
		Negative,
		[Token(Token = "0x40005B5")]
		Canceled,
		[Token(Token = "0x40005B6")]
		Error
	}

	[Token(Token = "0x40005A9")]
	public const int THEME_DEVICE_DEFAULT_DARK = 4;

	[Token(Token = "0x40005AA")]
	public const int THEME_DEVICE_DEFAULT_LIGHT = 5;

	[Token(Token = "0x40005AB")]
	public const int THEME_HOLO_DARK = 2;

	[Token(Token = "0x40005AC")]
	public const int THEME_HOLO_LIGHT = 3;

	[Token(Token = "0x40005AD")]
	public const int THEME_TRADITIONAL = 1;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool _hasInitted;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static AndroidJavaClass _plugin;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static long _counter;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Dictionary<string, object> _callbacks;

	[Token(Token = "0x6000837")]
	[Address(RVA = "0x1924DA0", Offset = "0x1924DA0", VA = "0x1924DA0")]
	static DWAlertWrapper()
	{
	}

	[Token(Token = "0x6000838")]
	[Address(RVA = "0x1924E50", Offset = "0x1924E50", VA = "0x1924E50")]
	public DWAlertWrapper()
	{
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0x1924E58", Offset = "0x1924E58", VA = "0x1924E58")]
	private static void Prepare()
	{
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0x1924FC8", Offset = "0x1924FC8", VA = "0x1924FC8")]
	private static bool CanMakeCalls()
	{
		return default(bool);
	}

	[Token(Token = "0x600083B")]
	[Address(RVA = "0x1925260", Offset = "0x1925260", VA = "0x1925260")]
	private static string RegisterDelegates(object callback)
	{
		return null;
	}

	[Token(Token = "0x600083C")]
	[Address(RVA = "0x192536C", Offset = "0x192536C", VA = "0x192536C")]
	public static void ShowAlert(Action<ReturnValue> callback, string title, string message, string positiveButton, string negativeButton, int theme)
	{
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0x19256C8", Offset = "0x19256C8", VA = "0x19256C8")]
	private void alertButtonClicked(string param)
	{
	}
}
namespace DarkwindMedia
{
	[Token(Token = "0x200011E")]
	public static class Immersive
	{
		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AndroidJavaClass _plugin;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static bool _loggingEnabled;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		private static bool _hasInitted;

		[Token(Token = "0x600083E")]
		[Address(RVA = "0x19213A4", Offset = "0x19213A4", VA = "0x19213A4")]
		private static bool CanMakeCalls()
		{
			return default(bool);
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0x1921644", Offset = "0x1921644", VA = "0x1921644")]
		private static void Log(string msg)
		{
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0x1921768", Offset = "0x1921768", VA = "0x1921768")]
		public static void SetLoggingEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x19218C0", Offset = "0x19218C0", VA = "0x19218C0")]
		public static void SetDelayMillis(long delayMillis)
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x1921A18", Offset = "0x1921A18", VA = "0x1921A18")]
		public static void BeginImmersiveMode()
		{
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x1921B70", Offset = "0x1921B70", VA = "0x1921B70")]
		public static void EndImmersiveMode()
		{
		}
	}
}
[Token(Token = "0x200011F")]
public class EmptyScript : MonoBehaviour
{
	[Token(Token = "0x6000845")]
	[Address(RVA = "0x1925CF0", Offset = "0x1925CF0", VA = "0x1925CF0")]
	public EmptyScript()
	{
	}
}
[Token(Token = "0x2000120")]
public abstract class AveragedGestureRecognizer : GestureRecognizer
{
	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int RequiredFingerCount;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector2 startPos;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector2 pos;

	[Token(Token = "0x17000090")]
	public Vector2 StartPosition
	{
		[Token(Token = "0x6000848")]
		[Address(RVA = "0x19DE220", Offset = "0x19DE220", VA = "0x19DE220")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x6000849")]
		[Address(RVA = "0x19DE234", Offset = "0x19DE234", VA = "0x19DE234")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000091")]
	public Vector2 Position
	{
		[Token(Token = "0x600084A")]
		[Address(RVA = "0x19DE240", Offset = "0x19DE240", VA = "0x19DE240")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x600084B")]
		[Address(RVA = "0x19DE254", Offset = "0x19DE254", VA = "0x19DE254")]
		protected set
		{
		}
	}

	[Token(Token = "0x6000846")]
	[Address(RVA = "0x19DE148", Offset = "0x19DE148", VA = "0x19DE148")]
	protected AveragedGestureRecognizer()
	{
	}

	[Token(Token = "0x6000847")]
	[Address(RVA = "0x19DE218", Offset = "0x19DE218", VA = "0x19DE218", Slot = "16")]
	protected override int GetRequiredFingerCount()
	{
		return default(int);
	}
}
[Token(Token = "0x2000121")]
public abstract class FGComponent : MonoBehaviour
{
	[Token(Token = "0x2000122")]
	public delegate void EventDelegate<T>(T source) where T : FGComponent;

	[Token(Token = "0x600084C")]
	[Address(RVA = "0x1926B10", Offset = "0x1926B10", VA = "0x1926B10")]
	protected FGComponent()
	{
	}

	[Token(Token = "0x600084D")]
	[Address(RVA = "0x1926B18", Offset = "0x1926B18", VA = "0x1926B18", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x600084E")]
	[Address(RVA = "0x1926B1C", Offset = "0x1926B1C", VA = "0x1926B1C", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x600084F")]
	[Address(RVA = "0x1926B20", Offset = "0x1926B20", VA = "0x1926B20", Slot = "6")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000850")]
	[Address(RVA = "0x1926CC4", Offset = "0x1926CC4", VA = "0x1926CC4", Slot = "7")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000851")]
	[Address(RVA = "0x1926E68", Offset = "0x1926E68", VA = "0x1926E68")]
	private void FingerGestures_OnFingersUpdated()
	{
	}

	[Token(Token = "0x6000852")]
	protected abstract void OnUpdate(FingerGestures.IFingerList touches);
}
[Token(Token = "0x2000123")]
public abstract class GestureRecognizer : FGComponent
{
	[Token(Token = "0x2000124")]
	public enum GestureState
	{
		[Token(Token = "0x40005C6")]
		Ready,
		[Token(Token = "0x40005C7")]
		InProgress,
		[Token(Token = "0x40005C8")]
		Failed,
		[Token(Token = "0x40005C9")]
		Recognized
	}

	[Token(Token = "0x2000125")]
	public enum GestureResetMode
	{
		[Token(Token = "0x40005CB")]
		NextFrame,
		[Token(Token = "0x40005CC")]
		EndOfTouchSequence,
		[Token(Token = "0x40005CD")]
		StartOfTouchSequence
	}

	[Token(Token = "0x2000126")]
	public delegate bool CanBeginDelegate(GestureRecognizer gr, FingerGestures.IFingerList touches);

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private GestureState prevState;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private GestureState state;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float startTime;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public GestureResetMode ResetMode;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int lastTouchesCount;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private CanBeginDelegate canBeginDelegate;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private FingerGestures.ITouchFilter touchFilter;

	[Token(Token = "0x17000092")]
	public GestureState PreviousState
	{
		[Token(Token = "0x600085A")]
		[Address(RVA = "0x19BB724", Offset = "0x19BB724", VA = "0x19BB724")]
		get
		{
			return default(GestureState);
		}
	}

	[Token(Token = "0x17000093")]
	public GestureState State
	{
		[Token(Token = "0x600085B")]
		[Address(RVA = "0x19BB72C", Offset = "0x19BB72C", VA = "0x19BB72C")]
		get
		{
			return default(GestureState);
		}
		[Token(Token = "0x600085C")]
		[Address(RVA = "0x19BB734", Offset = "0x19BB734", VA = "0x19BB734")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000094")]
	public bool IsActive
	{
		[Token(Token = "0x600085D")]
		[Address(RVA = "0x19BB7C0", Offset = "0x19BB7C0", VA = "0x19BB7C0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000095")]
	public float StartTime
	{
		[Token(Token = "0x600085E")]
		[Address(RVA = "0x19BB7D0", Offset = "0x19BB7D0", VA = "0x19BB7D0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600085F")]
		[Address(RVA = "0x19BB7D8", Offset = "0x19BB7D8", VA = "0x19BB7D8")]
		protected set
		{
		}
	}

	[Token(Token = "0x17000096")]
	public float ElapsedTime
	{
		[Token(Token = "0x6000860")]
		[Address(RVA = "0x19BB7E0", Offset = "0x19BB7E0", VA = "0x19BB7E0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000097")]
	public FingerGestures.ITouchFilter TouchFilter
	{
		[Token(Token = "0x600086F")]
		[Address(RVA = "0x19BC6AC", Offset = "0x19BC6AC", VA = "0x19BC6AC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000870")]
		[Address(RVA = "0x19BC6B4", Offset = "0x19BC6B4", VA = "0x19BC6B4")]
		set
		{
		}
	}

	[Token(Token = "0x14000034")]
	public event EventDelegate<GestureRecognizer> OnStateChanged
	{
		[Token(Token = "0x6000858")]
		[Address(RVA = "0x19BB53C", Offset = "0x19BB53C", VA = "0x19BB53C")]
		add
		{
		}
		[Token(Token = "0x6000859")]
		[Address(RVA = "0x19BB630", Offset = "0x19BB630", VA = "0x19BB630")]
		remove
		{
		}
	}

	[Token(Token = "0x6000857")]
	[Address(RVA = "0x19BB52C", Offset = "0x19BB52C", VA = "0x19BB52C")]
	protected GestureRecognizer()
	{
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0x19BB80C", Offset = "0x19BB80C", VA = "0x19BB80C", Slot = "9")]
	protected virtual void Reset()
	{
	}

	[Token(Token = "0x6000862")]
	[Address(RVA = "0x19BB814", Offset = "0x19BB814", VA = "0x19BB814", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0x19BB840", Offset = "0x19BB840", VA = "0x19BB840", Slot = "10")]
	protected virtual void OnTouchSequenceStarted()
	{
	}

	[Token(Token = "0x6000864")]
	[Address(RVA = "0x19BB870", Offset = "0x19BB870", VA = "0x19BB870", Slot = "11")]
	protected virtual void OnTouchSequenceEnded()
	{
	}

	[Token(Token = "0x6000865")]
	[Address(RVA = "0x19BB8A0", Offset = "0x19BB8A0", VA = "0x19BB8A0", Slot = "8")]
	protected override void OnUpdate(FingerGestures.IFingerList touches)
	{
	}

	[Token(Token = "0x6000866")]
	[Address(RVA = "0x19BBE48", Offset = "0x19BBE48", VA = "0x19BBE48", Slot = "12")]
	protected virtual GestureState OnReady(FingerGestures.IFingerList touches)
	{
		return default(GestureState);
	}

	[Token(Token = "0x6000867")]
	[Address(RVA = "0x19BBED4", Offset = "0x19BBED4", VA = "0x19BBED4", Slot = "13")]
	protected virtual bool ShouldFailFromReady(FingerGestures.IFingerList touches)
	{
		return default(bool);
	}

	[Token(Token = "0x6000868")]
	[Address(RVA = "0x19BC188", Offset = "0x19BC188", VA = "0x19BC188", Slot = "14")]
	protected virtual bool CanBegin(FingerGestures.IFingerList touches)
	{
		return default(bool);
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0x19BC29C", Offset = "0x19BC29C", VA = "0x19BC29C", Slot = "15")]
	public virtual bool CheckCanBeginDelegate(FingerGestures.IFingerList touches)
	{
		return default(bool);
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0x19BC69C", Offset = "0x19BC69C", VA = "0x19BC69C")]
	public void SetCanBeginDelegate(CanBeginDelegate f)
	{
	}

	[Token(Token = "0x600086B")]
	[Address(RVA = "0x19BC6A4", Offset = "0x19BC6A4", VA = "0x19BC6A4")]
	public CanBeginDelegate GetCanBeginDelegate()
	{
		return null;
	}

	[Token(Token = "0x600086C")]
	protected abstract int GetRequiredFingerCount();

	[Token(Token = "0x600086D")]
	protected abstract void OnBegin(FingerGestures.IFingerList touches);

	[Token(Token = "0x600086E")]
	protected abstract GestureState OnActive(FingerGestures.IFingerList touches);

	[Token(Token = "0x6000871")]
	[Address(RVA = "0x19BC074", Offset = "0x19BC074", VA = "0x19BC074")]
	protected bool Young(FingerGestures.IFingerList touches)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000127")]
public abstract class MultiFingerGestureRecognizer : GestureRecognizer
{
	[Token(Token = "0x40005CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector2[] pos;

	[Token(Token = "0x40005CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector2[] startPos;

	[Token(Token = "0x17000098")]
	protected Vector2[] StartPosition
	{
		[Token(Token = "0x6000877")]
		[Address(RVA = "0x1978000", Offset = "0x1978000", VA = "0x1978000")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000878")]
		[Address(RVA = "0x197869C", Offset = "0x197869C", VA = "0x197869C")]
		set
		{
		}
	}

	[Token(Token = "0x17000099")]
	protected Vector2[] Position
	{
		[Token(Token = "0x6000879")]
		[Address(RVA = "0x1978008", Offset = "0x1978008", VA = "0x1978008")]
		get
		{
			return null;
		}
		[Token(Token = "0x600087A")]
		[Address(RVA = "0x19786A4", Offset = "0x19786A4", VA = "0x19786A4")]
		set
		{
		}
	}

	[Token(Token = "0x1700009A")]
	public int RequiredFingerCount
	{
		[Token(Token = "0x600087D")]
		[Address(RVA = "0x1978778", Offset = "0x1978778", VA = "0x1978778")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000876")]
	[Address(RVA = "0x1978694", Offset = "0x1978694", VA = "0x1978694")]
	protected MultiFingerGestureRecognizer()
	{
	}

	[Token(Token = "0x600087B")]
	[Address(RVA = "0x19786AC", Offset = "0x19786AC", VA = "0x19786AC", Slot = "5")]
	protected override void Start()
	{
	}

	[Token(Token = "0x600087C")]
	[Address(RVA = "0x19786E4", Offset = "0x19786E4", VA = "0x19786E4")]
	protected void OnFingerCountChanged(int fingerCount)
	{
	}

	[Token(Token = "0x600087E")]
	[Address(RVA = "0x1978788", Offset = "0x1978788", VA = "0x1978788")]
	public Vector2 GetPosition(int index)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600087F")]
	[Address(RVA = "0x19787D8", Offset = "0x19787D8", VA = "0x19787D8")]
	public Vector2 GetStartPosition(int index)
	{
		return default(Vector2);
	}
}
[Token(Token = "0x2000128")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9BA44", Offset = "0xE9BA44")]
public class DragGestureRecognizer : AveragedGestureRecognizer
{
	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float MoveTolerance;

	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector2 delta;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector2 lastPos;

	[Token(Token = "0x1700009B")]
	public Vector2 MoveDelta
	{
		[Token(Token = "0x6000887")]
		[Address(RVA = "0x19246A4", Offset = "0x19246A4", VA = "0x19246A4")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x6000888")]
		[Address(RVA = "0x19246B8", Offset = "0x19246B8", VA = "0x19246B8")]
		private set
		{
		}
	}

	[Token(Token = "0x14000035")]
	public event EventDelegate<DragGestureRecognizer> OnDragBegin
	{
		[Token(Token = "0x6000881")]
		[Address(RVA = "0x19240EC", Offset = "0x19240EC", VA = "0x19240EC")]
		add
		{
		}
		[Token(Token = "0x6000882")]
		[Address(RVA = "0x19241E0", Offset = "0x19241E0", VA = "0x19241E0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000036")]
	public event EventDelegate<DragGestureRecognizer> OnDragMove
	{
		[Token(Token = "0x6000883")]
		[Address(RVA = "0x19242D4", Offset = "0x19242D4", VA = "0x19242D4")]
		add
		{
		}
		[Token(Token = "0x6000884")]
		[Address(RVA = "0x19243C8", Offset = "0x19243C8", VA = "0x19243C8")]
		remove
		{
		}
	}

	[Token(Token = "0x14000037")]
	public event EventDelegate<DragGestureRecognizer> OnDragEnd
	{
		[Token(Token = "0x6000885")]
		[Address(RVA = "0x19244BC", Offset = "0x19244BC", VA = "0x19244BC")]
		add
		{
		}
		[Token(Token = "0x6000886")]
		[Address(RVA = "0x19245B0", Offset = "0x19245B0", VA = "0x19245B0")]
		remove
		{
		}
	}

	[Token(Token = "0x6000880")]
	[Address(RVA = "0x1924018", Offset = "0x1924018", VA = "0x1924018")]
	public DragGestureRecognizer()
	{
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0x19246C4", Offset = "0x19246C4", VA = "0x19246C4", Slot = "14")]
	protected override bool CanBegin(FingerGestures.IFingerList touches)
	{
		return default(bool);
	}

	[Token(Token = "0x600088A")]
	[Address(RVA = "0x19247D0", Offset = "0x19247D0", VA = "0x19247D0", Slot = "17")]
	protected override void OnBegin(FingerGestures.IFingerList touches)
	{
	}

	[Token(Token = "0x600088B")]
	[Address(RVA = "0x19249C8", Offset = "0x19249C8", VA = "0x19249C8", Slot = "18")]
	protected override GestureState OnActive(FingerGestures.IFingerList touches)
	{
		return default(GestureState);
	}

	[Token(Token = "0x600088C")]
	[Address(RVA = "0x1924958", Offset = "0x1924958", VA = "0x1924958")]
	protected void RaiseOnDragBegin()
	{
	}

	[Token(Token = "0x600088D")]
	[Address(RVA = "0x1924D30", Offset = "0x1924D30", VA = "0x1924D30")]
	protected void RaiseOnDragMove()
	{
	}

	[Token(Token = "0x600088E")]
	[Address(RVA = "0x1924CC0", Offset = "0x1924CC0", VA = "0x1924CC0")]
	protected void RaiseOnDragEnd()
	{
	}
}
[Token(Token = "0x2000129")]
public class FingerMotionDetector : FGComponent
{
	[Token(Token = "0x200012A")]
	public enum MotionState
	{
		[Token(Token = "0x40005E5")]
		None,
		[Token(Token = "0x40005E6")]
		Stationary,
		[Token(Token = "0x40005E7")]
		Moving
	}

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float MoveThreshold;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private FingerGestures.Finger finger;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private MotionState state;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MotionState prevState;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int moves;

	[Token(Token = "0x40005E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float stationaryStartTime;

	[Token(Token = "0x40005E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector2 anchorPos;

	[Token(Token = "0x40005E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private bool wasDown;

	[Token(Token = "0x1700009C")]
	public virtual FingerGestures.Finger Finger
	{
		[Token(Token = "0x600089C")]
		[Address(RVA = "0x19A42D4", Offset = "0x19A42D4", VA = "0x19A42D4", Slot = "9")]
		get
		{
			return null;
		}
		[Token(Token = "0x600089D")]
		[Address(RVA = "0x19A42DC", Offset = "0x19A42DC", VA = "0x19A42DC", Slot = "10")]
		set
		{
		}
	}

	[Token(Token = "0x1700009D")]
	protected MotionState State
	{
		[Token(Token = "0x600089E")]
		[Address(RVA = "0x19A42E4", Offset = "0x19A42E4", VA = "0x19A42E4")]
		get
		{
			return default(MotionState);
		}
		[Token(Token = "0x600089F")]
		[Address(RVA = "0x19A42EC", Offset = "0x19A42EC", VA = "0x19A42EC")]
		private set
		{
		}
	}

	[Token(Token = "0x1700009E")]
	protected MotionState PreviousState
	{
		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x19A42F4", Offset = "0x19A42F4", VA = "0x19A42F4")]
		get
		{
			return default(MotionState);
		}
		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x19A42FC", Offset = "0x19A42FC", VA = "0x19A42FC")]
		private set
		{
		}
	}

	[Token(Token = "0x1700009F")]
	public int Moves
	{
		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x19A4304", Offset = "0x19A4304", VA = "0x19A4304")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x19A430C", Offset = "0x19A430C", VA = "0x19A430C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000A0")]
	public bool Moved
	{
		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x19A4314", Offset = "0x19A4314", VA = "0x19A4314")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A1")]
	public bool WasMoving
	{
		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x19A4328", Offset = "0x19A4328", VA = "0x19A4328")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A2")]
	public bool Moving
	{
		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x19A433C", Offset = "0x19A433C", VA = "0x19A433C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A3")]
	public float ElapsedStationaryTime
	{
		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x19A4350", Offset = "0x19A4350", VA = "0x19A4350")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000A4")]
	public Vector2 AnchorPos
	{
		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x19A437C", Offset = "0x19A437C", VA = "0x19A437C")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x19A4390", Offset = "0x19A4390", VA = "0x19A4390")]
		private set
		{
		}
	}

	[Token(Token = "0x14000038")]
	public event EventDelegate<FingerMotionDetector> OnMoveBegin
	{
		[Token(Token = "0x6000890")]
		[Address(RVA = "0x19A3764", Offset = "0x19A3764", VA = "0x19A3764")]
		add
		{
		}
		[Token(Token = "0x6000891")]
		[Address(RVA = "0x19A3858", Offset = "0x19A3858", VA = "0x19A3858")]
		remove
		{
		}
	}

	[Token(Token = "0x14000039")]
	public event EventDelegate<FingerMotionDetector> OnMove
	{
		[Token(Token = "0x6000892")]
		[Address(RVA = "0x19A394C", Offset = "0x19A394C", VA = "0x19A394C")]
		add
		{
		}
		[Token(Token = "0x6000893")]
		[Address(RVA = "0x19A3A40", Offset = "0x19A3A40", VA = "0x19A3A40")]
		remove
		{
		}
	}

	[Token(Token = "0x1400003A")]
	public event EventDelegate<FingerMotionDetector> OnMoveEnd
	{
		[Token(Token = "0x6000894")]
		[Address(RVA = "0x19A3B34", Offset = "0x19A3B34", VA = "0x19A3B34")]
		add
		{
		}
		[Token(Token = "0x6000895")]
		[Address(RVA = "0x19A3C28", Offset = "0x19A3C28", VA = "0x19A3C28")]
		remove
		{
		}
	}

	[Token(Token = "0x1400003B")]
	public event EventDelegate<FingerMotionDetector> OnStationaryBegin
	{
		[Token(Token = "0x6000896")]
		[Address(RVA = "0x19A3D1C", Offset = "0x19A3D1C", VA = "0x19A3D1C")]
		add
		{
		}
		[Token(Token = "0x6000897")]
		[Address(RVA = "0x19A3E10", Offset = "0x19A3E10", VA = "0x19A3E10")]
		remove
		{
		}
	}

	[Token(Token = "0x1400003C")]
	public event EventDelegate<FingerMotionDetector> OnStationary
	{
		[Token(Token = "0x6000898")]
		[Address(RVA = "0x19A3F04", Offset = "0x19A3F04", VA = "0x19A3F04")]
		add
		{
		}
		[Token(Token = "0x6000899")]
		[Address(RVA = "0x19A3FF8", Offset = "0x19A3FF8", VA = "0x19A3FF8")]
		remove
		{
		}
	}

	[Token(Token = "0x1400003D")]
	public event EventDelegate<FingerMotionDetector> OnStationaryEnd
	{
		[Token(Token = "0x600089A")]
		[Address(RVA = "0x19A40EC", Offset = "0x19A40EC", VA = "0x19A40EC")]
		add
		{
		}
		[Token(Token = "0x600089B")]
		[Address(RVA = "0x19A41E0", Offset = "0x19A41E0", VA = "0x19A41E0")]
		remove
		{
		}
	}

	[Token(Token = "0x600088F")]
	[Address(RVA = "0x19A36B0", Offset = "0x19A36B0", VA = "0x19A36B0")]
	public FingerMotionDetector()
	{
	}

	[Token(Token = "0x60008AA")]
	[Address(RVA = "0x19A439C", Offset = "0x19A439C", VA = "0x19A439C", Slot = "8")]
	protected override void OnUpdate(FingerGestures.IFingerList touches)
	{
	}

	[Token(Token = "0x60008AB")]
	[Address(RVA = "0x19A45C4", Offset = "0x19A45C4", VA = "0x19A45C4")]
	private void RaiseEvents()
	{
	}

	[Token(Token = "0x60008AC")]
	[Address(RVA = "0x19A4788", Offset = "0x19A4788", VA = "0x19A4788")]
	protected void RaiseOnMoveBegin()
	{
	}

	[Token(Token = "0x60008AD")]
	[Address(RVA = "0x19A48D8", Offset = "0x19A48D8", VA = "0x19A48D8")]
	protected void RaiseOnMove()
	{
	}

	[Token(Token = "0x60008AE")]
	[Address(RVA = "0x19A46A8", Offset = "0x19A46A8", VA = "0x19A46A8")]
	protected void RaiseOnMoveEnd()
	{
	}

	[Token(Token = "0x60008AF")]
	[Address(RVA = "0x19A47F8", Offset = "0x19A47F8", VA = "0x19A47F8")]
	protected void RaiseOnStationaryBegin()
	{
	}

	[Token(Token = "0x60008B0")]
	[Address(RVA = "0x19A4868", Offset = "0x19A4868", VA = "0x19A4868")]
	protected void RaiseOnStationary()
	{
	}

	[Token(Token = "0x60008B1")]
	[Address(RVA = "0x19A4718", Offset = "0x19A4718", VA = "0x19A4718")]
	protected void RaiseOnStationaryEnd()
	{
	}
}
[Token(Token = "0x200012B")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9BC4C", Offset = "0xE9BC4C")]
public class LongPressGestureRecognizer : AveragedGestureRecognizer
{
	[Token(Token = "0x40005E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float Duration;

	[Token(Token = "0x40005EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float MoveTolerance;

	[Token(Token = "0x1400003E")]
	public event EventDelegate<LongPressGestureRecognizer> OnLongPress
	{
		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x1971020", Offset = "0x1971020", VA = "0x1971020")]
		add
		{
		}
		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x1971114", Offset = "0x1971114", VA = "0x1971114")]
		remove
		{
		}
	}

	[Token(Token = "0x60008B2")]
	[Address(RVA = "0x1971004", Offset = "0x1971004", VA = "0x1971004")]
	public LongPressGestureRecognizer()
	{
	}

	[Token(Token = "0x60008B5")]
	[Address(RVA = "0x1971208", Offset = "0x1971208", VA = "0x1971208", Slot = "17")]
	protected override void OnBegin(FingerGestures.IFingerList touches)
	{
	}

	[Token(Token = "0x60008B6")]
	[Address(RVA = "0x197131C", Offset = "0x197131C", VA = "0x197131C", Slot = "18")]
	protected override GestureState OnActive(FingerGestures.IFingerList touches)
	{
		return default(GestureState);
	}

	[Token(Token = "0x60008B7")]
	[Address(RVA = "0x19714D0", Offset = "0x19714D0", VA = "0x19714D0")]
	protected void RaiseOnLongPress()
	{
	}
}
[Token(Token = "0x200012C")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9BCB4", Offset = "0xE9BCB4")]
public class MousePinchGestureRecognizer : PinchGestureRecognizer
{
	[Token(Token = "0x40005EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string axis;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int requiredFingers;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float resetTime;

	[Token(Token = "0x60008B8")]
	[Address(RVA = "0x1977C18", Offset = "0x1977C18", VA = "0x1977C18")]
	public MousePinchGestureRecognizer()
	{
	}

	[Token(Token = "0x60008B9")]
	[Address(RVA = "0x1977C8C", Offset = "0x1977C8C", VA = "0x1977C8C", Slot = "16")]
	protected override int GetRequiredFingerCount()
	{
		return default(int);
	}

	[Token(Token = "0x60008BA")]
	[Address(RVA = "0x1977C94", Offset = "0x1977C94", VA = "0x1977C94", Slot = "14")]
	protected override bool CanBegin(FingerGestures.IFingerList touches)
	{
		return default(bool);
	}

	[Token(Token = "0x60008BB")]
	[Address(RVA = "0x1977DAC", Offset = "0x1977DAC", VA = "0x1977DAC", Slot = "17")]
	protected override void OnBegin(FingerGestures.IFingerList touches)
	{
	}

	[Token(Token = "0x60008BC")]
	[Address(RVA = "0x1978010", Offset = "0x1978010", VA = "0x1978010", Slot = "18")]
	protected override GestureState OnActive(FingerGestures.IFingerList touches)
	{
		return default(GestureState);
	}
}
[Token(Token = "0x200012D")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9BCE8", Offset = "0xE9BCE8")]
public class MultiTapGestureRecognizer : AveragedGestureRecognizer
{
	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int RequiredTaps;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool RaiseEventOnEachTap;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float MaxDelayBetweenTaps;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float MaxDuration;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float MoveTolerance;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int taps;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool down;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
	private bool wasDown;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float lastDownTime;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float lastTapTime;

	[Token(Token = "0x170000A5")]
	public int Taps
	{
		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x1978A2C", Offset = "0x1978A2C", VA = "0x1978A2C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1400003F")]
	public event EventDelegate<MultiTapGestureRecognizer> OnTap
	{
		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x1978844", Offset = "0x1978844", VA = "0x1978844")]
		add
		{
		}
		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x1978938", Offset = "0x1978938", VA = "0x1978938")]
		remove
		{
		}
	}

	[Token(Token = "0x60008BD")]
	[Address(RVA = "0x1978828", Offset = "0x1978828", VA = "0x1978828")]
	public MultiTapGestureRecognizer()
	{
	}

	[Token(Token = "0x60008C1")]
	[Address(RVA = "0x1978A34", Offset = "0x1978A34", VA = "0x1978A34")]
	private bool HasTimedOut()
	{
		return default(bool);
	}

	[Token(Token = "0x60008C2")]
	[Address(RVA = "0x1978ABC", Offset = "0x1978ABC", VA = "0x1978ABC", Slot = "9")]
	protected override void Reset()
	{
	}

	[Token(Token = "0x60008C3")]
	[Address(RVA = "0x1978AD0", Offset = "0x1978AD0", VA = "0x1978AD0", Slot = "17")]
	protected override void OnBegin(FingerGestures.IFingerList touches)
	{
	}

	[Token(Token = "0x60008C4")]
	[Address(RVA = "0x1978BF4", Offset = "0x1978BF4", VA = "0x1978BF4", Slot = "18")]
	protected override GestureState OnActive(FingerGestures.IFingerList touches)
	{
		return default(GestureState);
	}

	[Token(Token = "0x60008C5")]
	[Address(RVA = "0x19790C0", Offset = "0x19790C0", VA = "0x19790C0")]
	protected void RaiseOnTap()
	{
	}
}
[Token(Token = "0x200012E")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9BD50", Offset = "0xE9BD50")]
public class PinchGestureRecognizer : MultiFingerGestureRecognizer
{
	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float MinDOT;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float MinDistance;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float DeltaScale;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected float delta;

	[Token(Token = "0x170000A6")]
	public float Delta
	{
		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x1B17DD0", Offset = "0x1B17DD0", VA = "0x1B17DD0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x14000040")]
	public event EventDelegate<PinchGestureRecognizer> OnPinchBegin
	{
		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x1B17818", Offset = "0x1B17818", VA = "0x1B17818")]
		add
		{
		}
		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x1B1790C", Offset = "0x1B1790C", VA = "0x1B1790C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000041")]
	public event EventDelegate<PinchGestureRecognizer> OnPinchMove
	{
		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x1B17A00", Offset = "0x1B17A00", VA = "0x1B17A00")]
		add
		{
		}
		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x1B17AF4", Offset = "0x1B17AF4", VA = "0x1B17AF4")]
		remove
		{
		}
	}

	[Token(Token = "0x14000042")]
	public event EventDelegate<PinchGestureRecognizer> OnPinchEnd
	{
		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x1B17BE8", Offset = "0x1B17BE8", VA = "0x1B17BE8")]
		add
		{
		}
		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x1B17CDC", Offset = "0x1B17CDC", VA = "0x1B17CDC")]
		remove
		{
		}
	}

	[Token(Token = "0x60008C6")]
	[Address(RVA = "0x1B177F4", Offset = "0x1B177F4", VA = "0x1B177F4")]
	public PinchGestureRecognizer()
	{
	}

	[Token(Token = "0x60008CE")]
	[Address(RVA = "0x1B17DD8", Offset = "0x1B17DD8", VA = "0x1B17DD8", Slot = "16")]
	protected override int GetRequiredFingerCount()
	{
		return default(int);
	}

	[Token(Token = "0x60008CF")]
	[Address(RVA = "0x1B17DE0", Offset = "0x1B17DE0", VA = "0x1B17DE0", Slot = "14")]
	protected override bool CanBegin(FingerGestures.IFingerList touches)
	{
		return default(bool);
	}

	[Token(Token = "0x60008D0")]
	[Address(RVA = "0x1B18294", Offset = "0x1B18294", VA = "0x1B18294", Slot = "17")]
	protected override void OnBegin(FingerGestures.IFingerList touches)
	{
	}

	[Token(Token = "0x60008D1")]
	[Address(RVA = "0x1B18730", Offset = "0x1B18730", VA = "0x1B18730", Slot = "18")]
	protected override GestureState OnActive(FingerGestures.IFingerList touches)
	{
		return default(GestureState);
	}

	[Token(Token = "0x60008D2")]
	[Address(RVA = "0x1B18650", Offset = "0x1B18650", VA = "0x1B18650")]
	protected void RaiseOnPinchBegin()
	{
	}

	[Token(Token = "0x60008D3")]
	[Address(RVA = "0x1B186C0", Offset = "0x1B186C0", VA = "0x1B186C0")]
	protected void RaiseOnPinchMove()
	{
	}

	[Token(Token = "0x60008D4")]
	[Address(RVA = "0x1B18C50", Offset = "0x1B18C50", VA = "0x1B18C50")]
	protected void RaiseOnPinchEnd()
	{
	}

	[Token(Token = "0x60008D5")]
	[Address(RVA = "0x1B1811C", Offset = "0x1B1811C", VA = "0x1B1811C")]
	private bool FingersMovedInOppositeDirections(FingerGestures.Finger finger0, FingerGestures.Finger finger1)
	{
		return default(bool);
	}

	[Token(Token = "0x60008D6")]
	[Address(RVA = "0x1B18144", Offset = "0x1B18144", VA = "0x1B18144")]
	private float ComputeGapDelta(FingerGestures.Finger finger0, FingerGestures.Finger finger1, Vector2 refPos1, Vector2 refPos2)
	{
		return default(float);
	}
}
[Token(Token = "0x200012F")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9BE20", Offset = "0xE9BE20")]
public class RotationGestureRecognizer : MultiFingerGestureRecognizer
{
	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float MinDOT;

	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float MinRotation;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float totalRotation;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float rotationDelta;

	[Token(Token = "0x170000A7")]
	public float TotalRotation
	{
		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x1B40E4C", Offset = "0x1B40E4C", VA = "0x1B40E4C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000A8")]
	public float RotationDelta
	{
		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x1B40E54", Offset = "0x1B40E54", VA = "0x1B40E54")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x14000043")]
	public event EventDelegate<RotationGestureRecognizer> OnRotationBegin
	{
		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x1B40894", Offset = "0x1B40894", VA = "0x1B40894")]
		add
		{
		}
		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x1B40988", Offset = "0x1B40988", VA = "0x1B40988")]
		remove
		{
		}
	}

	[Token(Token = "0x14000044")]
	public event EventDelegate<RotationGestureRecognizer> OnRotationMove
	{
		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x1B40A7C", Offset = "0x1B40A7C", VA = "0x1B40A7C")]
		add
		{
		}
		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x1B40B70", Offset = "0x1B40B70", VA = "0x1B40B70")]
		remove
		{
		}
	}

	[Token(Token = "0x14000045")]
	public event EventDelegate<RotationGestureRecognizer> OnRotationEnd
	{
		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x1B40C64", Offset = "0x1B40C64", VA = "0x1B40C64")]
		add
		{
		}
		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x1B40D58", Offset = "0x1B40D58", VA = "0x1B40D58")]
		remove
		{
		}
	}

	[Token(Token = "0x60008D7")]
	[Address(RVA = "0x1B40878", Offset = "0x1B40878", VA = "0x1B40878")]
	public RotationGestureRecognizer()
	{
	}

	[Token(Token = "0x60008E0")]
	[Address(RVA = "0x1B40E5C", Offset = "0x1B40E5C", VA = "0x1B40E5C")]
	private bool FingersMovedInOppositeDirections(FingerGestures.Finger finger0, FingerGestures.Finger finger1)
	{
		return default(bool);
	}

	[Token(Token = "0x60008E1")]
	[Address(RVA = "0x1B40E84", Offset = "0x1B40E84", VA = "0x1B40E84")]
	private static float SignedAngularGap(FingerGestures.Finger finger0, FingerGestures.Finger finger1, Vector2 refPos0, Vector2 refPos1)
	{
		return default(float);
	}

	[Token(Token = "0x60008E2")]
	[Address(RVA = "0x1B40FF8", Offset = "0x1B40FF8", VA = "0x1B40FF8", Slot = "16")]
	protected override int GetRequiredFingerCount()
	{
		return default(int);
	}

	[Token(Token = "0x60008E3")]
	[Address(RVA = "0x1B41000", Offset = "0x1B41000", VA = "0x1B41000", Slot = "14")]
	protected override bool CanBegin(FingerGestures.IFingerList touches)
	{
		return default(bool);
	}

	[Token(Token = "0x60008E4")]
	[Address(RVA = "0x1B4133C", Offset = "0x1B4133C", VA = "0x1B4133C", Slot = "17")]
	protected override void OnBegin(FingerGestures.IFingerList touches)
	{
	}

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0x1B4173C", Offset = "0x1B4173C", VA = "0x1B4173C", Slot = "18")]
	protected override GestureState OnActive(FingerGestures.IFingerList touches)
	{
		return default(GestureState);
	}
}
[Token(Token = "0x2000130")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9BEF0", Offset = "0xE9BEF0")]
public class SwipeGestureRecognizer : AveragedGestureRecognizer
{
	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public FingerGestures.SwipeDirection ValidDirections;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float MinDistance;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float MinVelocity;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float DirectionTolerance;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector2 move;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private FingerGestures.SwipeDirection direction;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float velocity;

	[Token(Token = "0x170000A9")]
	public Vector2 Move
	{
		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x18FD368", Offset = "0x18FD368", VA = "0x18FD368")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x18FD37C", Offset = "0x18FD37C", VA = "0x18FD37C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000AA")]
	public FingerGestures.SwipeDirection Direction
	{
		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x18FD388", Offset = "0x18FD388", VA = "0x18FD388")]
		get
		{
			return default(FingerGestures.SwipeDirection);
		}
	}

	[Token(Token = "0x170000AB")]
	public float Velocity
	{
		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x18FD390", Offset = "0x18FD390", VA = "0x18FD390")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x14000046")]
	public event EventDelegate<SwipeGestureRecognizer> OnSwipe
	{
		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x18FD180", Offset = "0x18FD180", VA = "0x18FD180")]
		add
		{
		}
		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x18FD274", Offset = "0x18FD274", VA = "0x18FD274")]
		remove
		{
		}
	}

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0x18FD158", Offset = "0x18FD158", VA = "0x18FD158")]
	public SwipeGestureRecognizer()
	{
	}

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0x18FD398", Offset = "0x18FD398", VA = "0x18FD398")]
	public bool IsValidDirection(FingerGestures.SwipeDirection dir)
	{
		return default(bool);
	}

	[Token(Token = "0x60008EE")]
	[Address(RVA = "0x18FD3C0", Offset = "0x18FD3C0", VA = "0x18FD3C0", Slot = "14")]
	protected override bool CanBegin(FingerGestures.IFingerList touches)
	{
		return default(bool);
	}

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0x18FD4D0", Offset = "0x18FD4D0", VA = "0x18FD4D0", Slot = "17")]
	protected override void OnBegin(FingerGestures.IFingerList touches)
	{
	}

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0x18FD5EC", Offset = "0x18FD5EC", VA = "0x18FD5EC", Slot = "18")]
	protected override GestureState OnActive(FingerGestures.IFingerList touches)
	{
		return default(GestureState);
	}
}
[Token(Token = "0x2000131")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9BF58", Offset = "0xE9BF58")]
public class TapGestureRecognizer : AveragedGestureRecognizer
{
	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float MoveTolerance;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float MaxDuration;

	[Token(Token = "0x14000047")]
	public event EventDelegate<TapGestureRecognizer> OnTap
	{
		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x18FDA14", Offset = "0x18FDA14", VA = "0x18FDA14")]
		add
		{
		}
		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x18FDB08", Offset = "0x18FDB08", VA = "0x18FDB08")]
		remove
		{
		}
	}

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0x18FDA00", Offset = "0x18FDA00", VA = "0x18FDA00")]
	public TapGestureRecognizer()
	{
	}

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0x18FDBFC", Offset = "0x18FDBFC", VA = "0x18FDBFC", Slot = "17")]
	protected override void OnBegin(FingerGestures.IFingerList touches)
	{
	}

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0x18FDD10", Offset = "0x18FDD10", VA = "0x18FDD10", Slot = "18")]
	protected override GestureState OnActive(FingerGestures.IFingerList touches)
	{
		return default(GestureState);
	}

	[Token(Token = "0x60008F6")]
	[Address(RVA = "0x18FE030", Offset = "0x18FE030", VA = "0x18FE030")]
	protected void RaiseOnTap()
	{
	}
}
[Token(Token = "0x2000132")]
public abstract class FingerGestures : MonoBehaviour
{
	[Token(Token = "0x2000133")]
	public delegate void FingerDownEventHandler(int fingerIndex, Vector2 fingerPos);

	[Token(Token = "0x2000134")]
	public delegate void FingerUpEventHandler(int fingerIndex, Vector2 fingerPos, float timeHeldDown);

	[Token(Token = "0x2000135")]
	public delegate void FingerStationaryBeginEventHandler(int fingerIndex, Vector2 fingerPos);

	[Token(Token = "0x2000136")]
	public delegate void FingerStationaryEventHandler(int fingerIndex, Vector2 fingerPos, float elapsedTime);

	[Token(Token = "0x2000137")]
	public delegate void FingerStationaryEndEventHandler(int fingerIndex, Vector2 fingerPos, float elapsedTime);

	[Token(Token = "0x2000138")]
	public delegate void FingerMoveEventHandler(int fingerIndex, Vector2 fingerPos);

	[Token(Token = "0x2000139")]
	public delegate void FingerLongPressEventHandler(int fingerIndex, Vector2 fingerPos);

	[Token(Token = "0x200013A")]
	public delegate void FingerTapEventHandler(int fingerIndex, Vector2 fingerPos);

	[Token(Token = "0x200013B")]
	public delegate void FingerSwipeEventHandler(int fingerIndex, Vector2 startPos, SwipeDirection direction, float velocity);

	[Token(Token = "0x200013C")]
	public delegate void FingerDragBeginEventHandler(int fingerIndex, Vector2 fingerPos, Vector2 startPos);

	[Token(Token = "0x200013D")]
	public delegate void FingerDragMoveEventHandler(int fingerIndex, Vector2 fingerPos, Vector2 delta);

	[Token(Token = "0x200013E")]
	public delegate void FingerDragEndEventHandler(int fingerIndex, Vector2 fingerPos);

	[Token(Token = "0x200013F")]
	public delegate void LongPressEventHandler(Vector2 fingerPos);

	[Token(Token = "0x2000140")]
	public delegate void TapEventHandler(Vector2 fingerPos);

	[Token(Token = "0x2000141")]
	public delegate void SwipeEventHandler(Vector2 startPos, SwipeDirection direction, float velocity);

	[Token(Token = "0x2000142")]
	public delegate void DragBeginEventHandler(Vector2 fingerPos, Vector2 startPos);

	[Token(Token = "0x2000143")]
	public delegate void DragMoveEventHandler(Vector2 fingerPos, Vector2 delta);

	[Token(Token = "0x2000144")]
	public delegate void DragEndEventHandler(Vector2 fingerPos);

	[Token(Token = "0x2000145")]
	public delegate void PinchEventHandler(Vector2 fingerPos1, Vector2 fingerPos2);

	[Token(Token = "0x2000146")]
	public delegate void PinchMoveEventHandler(Vector2 fingerPos1, Vector2 fingerPos2, float delta);

	[Token(Token = "0x2000147")]
	public delegate void RotationBeginEventHandler(Vector2 fingerPos1, Vector2 fingerPos2);

	[Token(Token = "0x2000148")]
	public delegate void RotationMoveEventHandler(Vector2 fingerPos1, Vector2 fingerPos2, float rotationAngleDelta);

	[Token(Token = "0x2000149")]
	public delegate void RotationEndEventHandler(Vector2 fingerPos1, Vector2 fingerPos2, float totalRotationAngle);

	[Token(Token = "0x200014A")]
	public enum FingerPhase
	{
		[Token(Token = "0x4000652")]
		None,
		[Token(Token = "0x4000653")]
		Began,
		[Token(Token = "0x4000654")]
		Moved,
		[Token(Token = "0x4000655")]
		Stationary,
		[Token(Token = "0x4000656")]
		Ended
	}

	[Token(Token = "0x200014B")]
	public class Finger
	{
		[Token(Token = "0x200014C")]
		public delegate void FingerEventDelegate(Finger finger);

		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int index;

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool wasDown;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		private bool down;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		private bool filteredOut;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float startTime;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private FingerPhase phase;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector2 startPos;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector2 pos;

		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2 prevPos;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 deltaPos;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float distFromStart;

		[Token(Token = "0x170000B1")]
		public int Index
		{
			[Token(Token = "0x60009FC")]
			[Address(RVA = "0x199CDD0", Offset = "0x199CDD0", VA = "0x199CDD0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000B2")]
		public FingerPhase Phase
		{
			[Token(Token = "0x60009FD")]
			[Address(RVA = "0x199CDD8", Offset = "0x199CDD8", VA = "0x199CDD8")]
			get
			{
				return default(FingerPhase);
			}
		}

		[Token(Token = "0x170000B3")]
		public bool IsDown
		{
			[Token(Token = "0x60009FE")]
			[Address(RVA = "0x199CDE0", Offset = "0x199CDE0", VA = "0x199CDE0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B4")]
		public bool WasDown
		{
			[Token(Token = "0x60009FF")]
			[Address(RVA = "0x199CDE8", Offset = "0x199CDE8", VA = "0x199CDE8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B5")]
		public float StarTime
		{
			[Token(Token = "0x6000A00")]
			[Address(RVA = "0x199CDF0", Offset = "0x199CDF0", VA = "0x199CDF0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000B6")]
		public Vector2 StartPosition
		{
			[Token(Token = "0x6000A01")]
			[Address(RVA = "0x199CDF8", Offset = "0x199CDF8", VA = "0x199CDF8")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x170000B7")]
		public Vector2 Position
		{
			[Token(Token = "0x6000A02")]
			[Address(RVA = "0x199CE0C", Offset = "0x199CE0C", VA = "0x199CE0C")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x170000B8")]
		public Vector2 PreviousPosition
		{
			[Token(Token = "0x6000A03")]
			[Address(RVA = "0x199CE20", Offset = "0x199CE20", VA = "0x199CE20")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x170000B9")]
		public Vector2 DeltaPosition
		{
			[Token(Token = "0x6000A04")]
			[Address(RVA = "0x199CE34", Offset = "0x199CE34", VA = "0x199CE34")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x170000BA")]
		public float DistanceFromStart
		{
			[Token(Token = "0x6000A05")]
			[Address(RVA = "0x199CE48", Offset = "0x199CE48", VA = "0x199CE48")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000BB")]
		public bool Filtered
		{
			[Token(Token = "0x6000A06")]
			[Address(RVA = "0x199CE50", Offset = "0x199CE50", VA = "0x199CE50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1400006B")]
		public event FingerEventDelegate OnDown
		{
			[Token(Token = "0x6000A07")]
			[Address(RVA = "0x199CE58", Offset = "0x199CE58", VA = "0x199CE58")]
			add
			{
			}
			[Token(Token = "0x6000A08")]
			[Address(RVA = "0x199CF4C", Offset = "0x199CF4C", VA = "0x199CF4C")]
			remove
			{
			}
		}

		[Token(Token = "0x1400006C")]
		public event FingerEventDelegate OnUp
		{
			[Token(Token = "0x6000A09")]
			[Address(RVA = "0x199D040", Offset = "0x199D040", VA = "0x199D040")]
			add
			{
			}
			[Token(Token = "0x6000A0A")]
			[Address(RVA = "0x199D134", Offset = "0x199D134", VA = "0x199D134")]
			remove
			{
			}
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x199CCB8", Offset = "0x199CCB8", VA = "0x199CCB8")]
		public Finger(int index)
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x199D228", Offset = "0x199D228", VA = "0x199D228", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x199D2EC", Offset = "0x199D2EC", VA = "0x199D2EC")]
		internal void Update(FingerPhase newPhase, Vector2 newPos)
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x199D9F4", Offset = "0x199D9F4", VA = "0x199D9F4")]
		internal void PostUpdate()
		{
		}
	}

	[Token(Token = "0x200014D")]
	public delegate void FingersUpdatedEventDelegate();

	[Token(Token = "0x200014E")]
	public delegate bool GlobalTouchFilterDelegate(int fingerIndex, Vector2 position);

	[Serializable]
	[Token(Token = "0x200014F")]
	public class DefaultComponentCreationFlags
	{
		[Serializable]
		[Token(Token = "0x2000150")]
		public class PerFinger
		{
			[Token(Token = "0x4000666")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public bool enabled;

			[Token(Token = "0x4000667")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
			public bool touch;

			[Token(Token = "0x4000668")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
			public bool motion;

			[Token(Token = "0x4000669")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
			public bool longPress;

			[Token(Token = "0x400066A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool drag;

			[Token(Token = "0x400066B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool swipe;

			[Token(Token = "0x400066C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			public bool tap;

			[Token(Token = "0x400066D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			public bool doubleTap;

			[Token(Token = "0x6000A1B")]
			[Address(RVA = "0x199C18C", Offset = "0x199C18C", VA = "0x199C18C")]
			public PerFinger()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000151")]
		public class GlobalGestures
		{
			[Token(Token = "0x400066E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public bool enabled;

			[Token(Token = "0x400066F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
			public bool longPress;

			[Token(Token = "0x4000670")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
			public bool drag;

			[Token(Token = "0x4000671")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
			public bool swipe;

			[Token(Token = "0x4000672")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool tap;

			[Token(Token = "0x4000673")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool doubleTap;

			[Token(Token = "0x4000674")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			public bool pinch;

			[Token(Token = "0x4000675")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			public bool rotation;

			[Token(Token = "0x4000676")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool twoFingerLongPress;

			[Token(Token = "0x4000677")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool twoFingerDrag;

			[Token(Token = "0x4000678")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
			public bool twoFingerSwipe;

			[Token(Token = "0x4000679")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
			public bool twoFingerTap;

			[Token(Token = "0x6000A1C")]
			[Address(RVA = "0x199C170", Offset = "0x199C170", VA = "0x199C170")]
			public GlobalGestures()
			{
			}
		}

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PerFinger perFinger;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public GlobalGestures globalGestures;

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x199C168", Offset = "0x199C168", VA = "0x199C168")]
		public DefaultComponentCreationFlags()
		{
		}
	}

	[Token(Token = "0x2000152")]
	public class DefaultComponents
	{
		[Token(Token = "0x2000153")]
		public class FingerComponents
		{
			[Token(Token = "0x4000686")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public FingerMotionDetector Motion;

			[Token(Token = "0x4000687")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public LongPressGestureRecognizer LongPress;

			[Token(Token = "0x4000688")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public DragGestureRecognizer Drag;

			[Token(Token = "0x4000689")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public TapGestureRecognizer Tap;

			[Token(Token = "0x400068A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MultiTapGestureRecognizer DoubleTap;

			[Token(Token = "0x400068B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public SwipeGestureRecognizer Swipe;

			[Token(Token = "0x6000A1F")]
			[Address(RVA = "0x199C2D4", Offset = "0x199C2D4", VA = "0x199C2D4")]
			public FingerComponents()
			{
			}
		}

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private FingerComponents[] fingers;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public LongPressGestureRecognizer LongPress;

		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public DragGestureRecognizer Drag;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TapGestureRecognizer Tap;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MultiTapGestureRecognizer DoubleTap;

		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SwipeGestureRecognizer Swipe;

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PinchGestureRecognizer Pinch;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public RotationGestureRecognizer Rotation;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LongPressGestureRecognizer TwoFingerLongPress;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public DragGestureRecognizer TwoFingerDrag;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TapGestureRecognizer TwoFingerTap;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public SwipeGestureRecognizer TwoFingerSwipe;

		[Token(Token = "0x170000BC")]
		public FingerComponents[] Fingers
		{
			[Token(Token = "0x6000A1E")]
			[Address(RVA = "0x199C2DC", Offset = "0x199C2DC", VA = "0x199C2DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0x199C1A4", Offset = "0x199C1A4", VA = "0x199C1A4")]
		public DefaultComponents(int fingerCount)
		{
		}
	}

	[Token(Token = "0x2000154")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xE9C9B4", Offset = "0xE9C9B4")]
	public interface IFingerList : IEnumerable<Finger>, IEnumerable
	{
		[Token(Token = "0x170000BD")]
		Finger Item
		{
			[Token(Token = "0x6000A20")]
			get;
		}

		[Token(Token = "0x170000BE")]
		int Count
		{
			[Token(Token = "0x6000A21")]
			get;
		}

		[Token(Token = "0x6000A22")]
		Vector2 GetAveragePosition();

		[Token(Token = "0x6000A23")]
		Vector2 GetAveragePreviousPosition();

		[Token(Token = "0x6000A24")]
		float GetAverageDistanceFromStart();

		[Token(Token = "0x6000A25")]
		Finger GetOldest();
	}

	[Token(Token = "0x2000155")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xE9C9E8", Offset = "0xE9C9E8")]
	public class FingerList : IFingerList, IEnumerable<Finger>, IEnumerable
	{
		[Token(Token = "0x2000156")]
		public delegate T FingerPropertyGetterDelegate<T>(Finger finger);

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private List<Finger> list;

		[Token(Token = "0x170000BF")]
		public Finger Item
		{
			[Token(Token = "0x6000A28")]
			[Address(RVA = "0x199ECEC", Offset = "0x199ECEC", VA = "0x199ECEC", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C0")]
		public int Count
		{
			[Token(Token = "0x6000A29")]
			[Address(RVA = "0x199ED68", Offset = "0x199ED68", VA = "0x199ED68", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x199EC40", Offset = "0x199EC40", VA = "0x199EC40")]
		public FingerList()
		{
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x199ECCC", Offset = "0x199ECCC", VA = "0x199ECCC")]
		public FingerList(List<Finger> list)
		{
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0x199EDDC", Offset = "0x199EDDC", VA = "0x199EDDC", Slot = "10")]
		public IEnumerator<Finger> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x199EE84", Offset = "0x199EE84", VA = "0x199EE84", Slot = "11")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x199EE88", Offset = "0x199EE88", VA = "0x199EE88")]
		public void Add(Finger touch)
		{
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x199EF04", Offset = "0x199EF04", VA = "0x199EF04")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x199EF78", Offset = "0x199EF78", VA = "0x199EF78")]
		public Vector2 AverageVector(bool bPreviousPosition)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x199F1E0", Offset = "0x199F1E0", VA = "0x199F1E0")]
		public float AverageFloat()
		{
			return default(float);
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x199F2F0", Offset = "0x199F2F0", VA = "0x199F2F0")]
		private static Vector2 GetFingerPosition(Finger finger)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x199F31C", Offset = "0x199F31C", VA = "0x199F31C")]
		private static Vector2 GetFingerPreviousPosition(Finger finger)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0x199F348", Offset = "0x199F348", VA = "0x199F348")]
		private static float GetFingerDistanceFromStart(Finger finger)
		{
			return default(float);
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x199F368", Offset = "0x199F368", VA = "0x199F368", Slot = "6")]
		public Vector2 GetAveragePosition()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x199F37C", Offset = "0x199F37C", VA = "0x199F37C", Slot = "7")]
		public Vector2 GetAveragePreviousPosition()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0x199F390", Offset = "0x199F390", VA = "0x199F390", Slot = "8")]
		public float GetAverageDistanceFromStart()
		{
			return default(float);
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x199F394", Offset = "0x199F394", VA = "0x199F394", Slot = "9")]
		public Finger GetOldest()
		{
			return null;
		}
	}

	[Token(Token = "0x2000157")]
	[Flags]
	public enum SwipeDirection
	{
		[Token(Token = "0x400068E")]
		Right = 1,
		[Token(Token = "0x400068F")]
		Left = 2,
		[Token(Token = "0x4000690")]
		Up = 4,
		[Token(Token = "0x4000691")]
		Down = 8,
		[Token(Token = "0x4000692")]
		None = 0,
		[Token(Token = "0x4000693")]
		All = 0xF,
		[Token(Token = "0x4000694")]
		Vertical = 0xC,
		[Token(Token = "0x4000695")]
		Horizontal = 3
	}

	[Token(Token = "0x2000158")]
	public interface ITouchFilter
	{
		[Token(Token = "0x6000A3B")]
		IFingerList Apply(IFingerList touches);
	}

	[Token(Token = "0x2000159")]
	public class SingleFingerFilter : ITouchFilter
	{
		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private FingerList fingerList;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private FingerList emptyList;

		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Finger finger;

		[Token(Token = "0x170000C1")]
		public Finger Finger
		{
			[Token(Token = "0x6000A3D")]
			[Address(RVA = "0x19A2BC0", Offset = "0x19A2BC0", VA = "0x19A2BC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0x19A2B10", Offset = "0x19A2B10", VA = "0x19A2B10")]
		public SingleFingerFilter(Finger finger)
		{
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x19A2BC8", Offset = "0x19A2BC8", VA = "0x19A2BC8", Slot = "4")]
		public IFingerList Apply(IFingerList touches)
		{
			return null;
		}
	}

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private static FingerGestures instance;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Finger[] fingers;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private FingerList touches;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private GlobalTouchFilterDelegate globalTouchFilterFunc;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FingerGesturesPrefabs defaultPrefabs;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private Transform globalComponentNode;

	[Token(Token = "0x400063B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform[] fingerComponentNodes;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public DefaultComponentCreationFlags defaultCompFlags;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private DefaultComponents defaultComponents;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C6DC", Offset = "0xE9C6DC")]
	private static FGComponent.EventDelegate<LongPressGestureRecognizer> <>f__am$cache0;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C6EC", Offset = "0xE9C6EC")]
	private static FGComponent.EventDelegate<LongPressGestureRecognizer> <>f__am$cache1;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C6FC", Offset = "0xE9C6FC")]
	private static FGComponent.EventDelegate<DragGestureRecognizer> <>f__am$cache2;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C70C", Offset = "0xE9C70C")]
	private static FGComponent.EventDelegate<DragGestureRecognizer> <>f__am$cache3;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C71C", Offset = "0xE9C71C")]
	private static FGComponent.EventDelegate<DragGestureRecognizer> <>f__am$cache4;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C72C", Offset = "0xE9C72C")]
	private static FGComponent.EventDelegate<DragGestureRecognizer> <>f__am$cache5;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C73C", Offset = "0xE9C73C")]
	private static FGComponent.EventDelegate<DragGestureRecognizer> <>f__am$cache6;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C74C", Offset = "0xE9C74C")]
	private static FGComponent.EventDelegate<DragGestureRecognizer> <>f__am$cache7;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C75C", Offset = "0xE9C75C")]
	private static FGComponent.EventDelegate<SwipeGestureRecognizer> <>f__am$cache8;

	[Token(Token = "0x4000647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C76C", Offset = "0xE9C76C")]
	private static FGComponent.EventDelegate<SwipeGestureRecognizer> <>f__am$cache9;

	[Token(Token = "0x4000648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C77C", Offset = "0xE9C77C")]
	private static FGComponent.EventDelegate<TapGestureRecognizer> <>f__am$cacheA;

	[Token(Token = "0x4000649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C78C", Offset = "0xE9C78C")]
	private static FGComponent.EventDelegate<MultiTapGestureRecognizer> <>f__am$cacheB;

	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C79C", Offset = "0xE9C79C")]
	private static FGComponent.EventDelegate<TapGestureRecognizer> <>f__am$cacheC;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C7AC", Offset = "0xE9C7AC")]
	private static FGComponent.EventDelegate<PinchGestureRecognizer> <>f__am$cacheD;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C7BC", Offset = "0xE9C7BC")]
	private static FGComponent.EventDelegate<PinchGestureRecognizer> <>f__am$cacheE;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C7CC", Offset = "0xE9C7CC")]
	private static FGComponent.EventDelegate<PinchGestureRecognizer> <>f__am$cacheF;

	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C7DC", Offset = "0xE9C7DC")]
	private static FGComponent.EventDelegate<RotationGestureRecognizer> <>f__am$cache10;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C7EC", Offset = "0xE9C7EC")]
	private static FGComponent.EventDelegate<RotationGestureRecognizer> <>f__am$cache11;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C7FC", Offset = "0xE9C7FC")]
	private static FGComponent.EventDelegate<RotationGestureRecognizer> <>f__am$cache12;

	[Token(Token = "0x170000AC")]
	public static FingerGestures Instance
	{
		[Token(Token = "0x600095E")]
		[Address(RVA = "0x192D160", Offset = "0x192D160", VA = "0x192D160")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000AD")]
	public static IFingerList Touches
	{
		[Token(Token = "0x6000960")]
		[Address(RVA = "0x1926E94", Offset = "0x1926E94", VA = "0x1926E94")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000AE")]
	public abstract int MaxFingers
	{
		[Token(Token = "0x6000968")]
		get;
	}

	[Token(Token = "0x170000AF")]
	public static GlobalTouchFilterDelegate GlobalTouchFilter
	{
		[Token(Token = "0x600096D")]
		[Address(RVA = "0x192DD10", Offset = "0x192DD10", VA = "0x192DD10")]
		get
		{
			return null;
		}
		[Token(Token = "0x600096E")]
		[Address(RVA = "0x192DD80", Offset = "0x192DD80", VA = "0x192DD80")]
		set
		{
		}
	}

	[Token(Token = "0x170000B0")]
	public static DefaultComponents Defaults
	{
		[Token(Token = "0x6000973")]
		[Address(RVA = "0x192DE2C", Offset = "0x192DE2C", VA = "0x192DE2C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000048")]
	public static event FingerDownEventHandler OnFingerDown
	{
		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x1927348", Offset = "0x1927348", VA = "0x1927348")]
		add
		{
		}
		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x1927460", Offset = "0x1927460", VA = "0x1927460")]
		remove
		{
		}
	}

	[Token(Token = "0x14000049")]
	public static event FingerUpEventHandler OnFingerUp
	{
		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x1927578", Offset = "0x1927578", VA = "0x1927578")]
		add
		{
		}
		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x1927690", Offset = "0x1927690", VA = "0x1927690")]
		remove
		{
		}
	}

	[Token(Token = "0x1400004A")]
	public static event FingerStationaryBeginEventHandler OnFingerStationaryBegin
	{
		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x19277A8", Offset = "0x19277A8", VA = "0x19277A8")]
		add
		{
		}
		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x19278C0", Offset = "0x19278C0", VA = "0x19278C0")]
		remove
		{
		}
	}

	[Token(Token = "0x1400004B")]
	public static event FingerStationaryEventHandler OnFingerStationary
	{
		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x19279D8", Offset = "0x19279D8", VA = "0x19279D8")]
		add
		{
		}
		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x1927AF0", Offset = "0x1927AF0", VA = "0x1927AF0")]
		remove
		{
		}
	}

	[Token(Token = "0x1400004C")]
	public static event FingerStationaryEndEventHandler OnFingerStationaryEnd
	{
		[Token(Token = "0x6000900")]
		[Address(RVA = "0x1927C08", Offset = "0x1927C08", VA = "0x1927C08")]
		add
		{
		}
		[Token(Token = "0x6000901")]
		[Address(RVA = "0x1927D20", Offset = "0x1927D20", VA = "0x1927D20")]
		remove
		{
		}
	}

	[Token(Token = "0x1400004D")]
	public static event FingerMoveEventHandler OnFingerMoveBegin
	{
		[Token(Token = "0x6000902")]
		[Address(RVA = "0x1927E38", Offset = "0x1927E38", VA = "0x1927E38")]
		add
		{
		}
		[Token(Token = "0x6000903")]
		[Address(RVA = "0x1927F50", Offset = "0x1927F50", VA = "0x1927F50")]
		remove
		{
		}
	}

	[Token(Token = "0x1400004E")]
	public static event FingerMoveEventHandler OnFingerMove
	{
		[Token(Token = "0x6000904")]
		[Address(RVA = "0x1928068", Offset = "0x1928068", VA = "0x1928068")]
		add
		{
		}
		[Token(Token = "0x6000905")]
		[Address(RVA = "0x1928180", Offset = "0x1928180", VA = "0x1928180")]
		remove
		{
		}
	}

	[Token(Token = "0x1400004F")]
	public static event FingerMoveEventHandler OnFingerMoveEnd
	{
		[Token(Token = "0x6000906")]
		[Address(RVA = "0x1928298", Offset = "0x1928298", VA = "0x1928298")]
		add
		{
		}
		[Token(Token = "0x6000907")]
		[Address(RVA = "0x19283B0", Offset = "0x19283B0", VA = "0x19283B0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000050")]
	public static event FingerLongPressEventHandler OnFingerLongPress
	{
		[Token(Token = "0x6000908")]
		[Address(RVA = "0x19284C8", Offset = "0x19284C8", VA = "0x19284C8")]
		add
		{
		}
		[Token(Token = "0x6000909")]
		[Address(RVA = "0x19285E0", Offset = "0x19285E0", VA = "0x19285E0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000051")]
	public static event FingerDragBeginEventHandler OnFingerDragBegin
	{
		[Token(Token = "0x600090A")]
		[Address(RVA = "0x19286F8", Offset = "0x19286F8", VA = "0x19286F8")]
		add
		{
		}
		[Token(Token = "0x600090B")]
		[Address(RVA = "0x1928810", Offset = "0x1928810", VA = "0x1928810")]
		remove
		{
		}
	}

	[Token(Token = "0x14000052")]
	public static event FingerDragMoveEventHandler OnFingerDragMove
	{
		[Token(Token = "0x600090C")]
		[Address(RVA = "0x1928928", Offset = "0x1928928", VA = "0x1928928")]
		add
		{
		}
		[Token(Token = "0x600090D")]
		[Address(RVA = "0x1928A40", Offset = "0x1928A40", VA = "0x1928A40")]
		remove
		{
		}
	}

	[Token(Token = "0x14000053")]
	public static event FingerDragEndEventHandler OnFingerDragEnd
	{
		[Token(Token = "0x600090E")]
		[Address(RVA = "0x1928B58", Offset = "0x1928B58", VA = "0x1928B58")]
		add
		{
		}
		[Token(Token = "0x600090F")]
		[Address(RVA = "0x1928C70", Offset = "0x1928C70", VA = "0x1928C70")]
		remove
		{
		}
	}

	[Token(Token = "0x14000054")]
	public static event FingerTapEventHandler OnFingerTap
	{
		[Token(Token = "0x6000910")]
		[Address(RVA = "0x1928D88", Offset = "0x1928D88", VA = "0x1928D88")]
		add
		{
		}
		[Token(Token = "0x6000911")]
		[Address(RVA = "0x1928EA0", Offset = "0x1928EA0", VA = "0x1928EA0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000055")]
	public static event FingerTapEventHandler OnFingerDoubleTap
	{
		[Token(Token = "0x6000912")]
		[Address(RVA = "0x1928FB8", Offset = "0x1928FB8", VA = "0x1928FB8")]
		add
		{
		}
		[Token(Token = "0x6000913")]
		[Address(RVA = "0x19290D0", Offset = "0x19290D0", VA = "0x19290D0")]
		remove
		{
		}
	}

	[Token(Token = "0x14000056")]
	public static event FingerSwipeEventHandler OnFingerSwipe
	{
		[Token(Token = "0x6000914")]
		[Address(RVA = "0x19291E8", Offset = "0x19291E8", VA = "0x19291E8")]
		add
		{
		}
		[Token(Token = "0x6000915")]
		[Address(RVA = "0x1929300", Offset = "0x1929300", VA = "0x1929300")]
		remove
		{
		}
	}

	[Token(Token = "0x14000057")]
	public static event LongPressEventHandler OnLongPress
	{
		[Token(Token = "0x6000925")]
		[Address(RVA = "0x1929D04", Offset = "0x1929D04", VA = "0x1929D04")]
		add
		{
		}
		[Token(Token = "0x6000926")]
		[Address(RVA = "0x1929E1C", Offset = "0x1929E1C", VA = "0x1929E1C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000058")]
	public static event DragBeginEventHandler OnDragBegin
	{
		[Token(Token = "0x6000927")]
		[Address(RVA = "0x1929F34", Offset = "0x1929F34", VA = "0x1929F34")]
		add
		{
		}
		[Token(Token = "0x6000928")]
		[Address(RVA = "0x192A04C", Offset = "0x192A04C", VA = "0x192A04C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000059")]
	public static event DragMoveEventHandler OnDragMove
	{
		[Token(Token = "0x6000929")]
		[Address(RVA = "0x192A164", Offset = "0x192A164", VA = "0x192A164")]
		add
		{
		}
		[Token(Token = "0x600092A")]
		[Address(RVA = "0x192A27C", Offset = "0x192A27C", VA = "0x192A27C")]
		remove
		{
		}
	}

	[Token(Token = "0x1400005A")]
	public static event DragEndEventHandler OnDragEnd
	{
		[Token(Token = "0x600092B")]
		[Address(RVA = "0x192A394", Offset = "0x192A394", VA = "0x192A394")]
		add
		{
		}
		[Token(Token = "0x600092C")]
		[Address(RVA = "0x192A4AC", Offset = "0x192A4AC", VA = "0x192A4AC")]
		remove
		{
		}
	}

	[Token(Token = "0x1400005B")]
	public static event TapEventHandler OnTap
	{
		[Token(Token = "0x600092D")]
		[Address(RVA = "0x192A5C4", Offset = "0x192A5C4", VA = "0x192A5C4")]
		add
		{
		}
		[Token(Token = "0x600092E")]
		[Address(RVA = "0x192A6DC", Offset = "0x192A6DC", VA = "0x192A6DC")]
		remove
		{
		}
	}

	[Token(Token = "0x1400005C")]
	public static event TapEventHandler OnDoubleTap
	{
		[Token(Token = "0x600092F")]
		[Address(RVA = "0x192A7F4", Offset = "0x192A7F4", VA = "0x192A7F4")]
		add
		{
		}
		[Token(Token = "0x6000930")]
		[Address(RVA = "0x192A90C", Offset = "0x192A90C", VA = "0x192A90C")]
		remove
		{
		}
	}

	[Token(Token = "0x1400005D")]
	public static event SwipeEventHandler OnSwipe
	{
		[Token(Token = "0x6000931")]
		[Address(RVA = "0x192AA24", Offset = "0x192AA24", VA = "0x192AA24")]
		add
		{
		}
		[Token(Token = "0x6000932")]
		[Address(RVA = "0x192AB3C", Offset = "0x192AB3C", VA = "0x192AB3C")]
		remove
		{
		}
	}

	[Token(Token = "0x1400005E")]
	public static event PinchEventHandler OnPinchBegin
	{
		[Token(Token = "0x6000933")]
		[Address(RVA = "0x192AC54", Offset = "0x192AC54", VA = "0x192AC54")]
		add
		{
		}
		[Token(Token = "0x6000934")]
		[Address(RVA = "0x192AD6C", Offset = "0x192AD6C", VA = "0x192AD6C")]
		remove
		{
		}
	}

	[Token(Token = "0x1400005F")]
	public static event PinchMoveEventHandler OnPinchMove
	{
		[Token(Token = "0x6000935")]
		[Address(RVA = "0x192AE84", Offset = "0x192AE84", VA = "0x192AE84")]
		add
		{
		}
		[Token(Token = "0x6000936")]
		[Address(RVA = "0x192AF9C", Offset = "0x192AF9C", VA = "0x192AF9C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000060")]
	public static event PinchEventHandler OnPinchEnd
	{
		[Token(Token = "0x6000937")]
		[Address(RVA = "0x192B0B4", Offset = "0x192B0B4", VA = "0x192B0B4")]
		add
		{
		}
		[Token(Token = "0x6000938")]
		[Address(RVA = "0x192B1CC", Offset = "0x192B1CC", VA = "0x192B1CC")]
		remove
		{
		}
	}

	[Token(Token = "0x14000061")]
	public static event RotationBeginEventHandler OnRotationBegin
	{
		[Token(Token = "0x6000939")]
		[Address(RVA = "0x192B2E4", Offset = "0x192B2E4", VA = "0x192B2E4")]
		add
		{
		}
		[Token(Token = "0x600093A")]
		[Address(RVA = "0x192B3FC", Offset = "0x192B3FC", VA = "0x192B3FC")]
		remove
		{
		}
	}

	[Token(Token = "0x14000062")]
	public static event RotationMoveEventHandler OnRotationMove
	{
		[Token(Token = "0x600093B")]
		[Address(RVA = "0x192B514", Offset = "0x192B514", VA = "0x192B514")]
		add
		{
		}
		[Token(Token = "0x600093C")]
		[Address(RVA = "0x192B62C", Offset = "0x192B62C", VA = "0x192B62C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000063")]
	public static event RotationEndEventHandler OnRotationEnd
	{
		[Token(Token = "0x600093D")]
		[Address(RVA = "0x192B744", Offset = "0x192B744", VA = "0x192B744")]
		add
		{
		}
		[Token(Token = "0x600093E")]
		[Address(RVA = "0x192B85C", Offset = "0x192B85C", VA = "0x192B85C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000064")]
	public static event DragBeginEventHandler OnTwoFingerDragBegin
	{
		[Token(Token = "0x600093F")]
		[Address(RVA = "0x192B974", Offset = "0x192B974", VA = "0x192B974")]
		add
		{
		}
		[Token(Token = "0x6000940")]
		[Address(RVA = "0x192BA8C", Offset = "0x192BA8C", VA = "0x192BA8C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000065")]
	public static event DragMoveEventHandler OnTwoFingerDragMove
	{
		[Token(Token = "0x6000941")]
		[Address(RVA = "0x192BBA4", Offset = "0x192BBA4", VA = "0x192BBA4")]
		add
		{
		}
		[Token(Token = "0x6000942")]
		[Address(RVA = "0x192BCBC", Offset = "0x192BCBC", VA = "0x192BCBC")]
		remove
		{
		}
	}

	[Token(Token = "0x14000066")]
	public static event DragEndEventHandler OnTwoFingerDragEnd
	{
		[Token(Token = "0x6000943")]
		[Address(RVA = "0x192BDD4", Offset = "0x192BDD4", VA = "0x192BDD4")]
		add
		{
		}
		[Token(Token = "0x6000944")]
		[Address(RVA = "0x192BEEC", Offset = "0x192BEEC", VA = "0x192BEEC")]
		remove
		{
		}
	}

	[Token(Token = "0x14000067")]
	public static event TapEventHandler OnTwoFingerTap
	{
		[Token(Token = "0x6000945")]
		[Address(RVA = "0x192C004", Offset = "0x192C004", VA = "0x192C004")]
		add
		{
		}
		[Token(Token = "0x6000946")]
		[Address(RVA = "0x192C11C", Offset = "0x192C11C", VA = "0x192C11C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000068")]
	public static event SwipeEventHandler OnTwoFingerSwipe
	{
		[Token(Token = "0x6000947")]
		[Address(RVA = "0x192C234", Offset = "0x192C234", VA = "0x192C234")]
		add
		{
		}
		[Token(Token = "0x6000948")]
		[Address(RVA = "0x192C34C", Offset = "0x192C34C", VA = "0x192C34C")]
		remove
		{
		}
	}

	[Token(Token = "0x14000069")]
	public static event LongPressEventHandler OnTwoFingerLongPress
	{
		[Token(Token = "0x6000949")]
		[Address(RVA = "0x192C464", Offset = "0x192C464", VA = "0x192C464")]
		add
		{
		}
		[Token(Token = "0x600094A")]
		[Address(RVA = "0x192C57C", Offset = "0x192C57C", VA = "0x192C57C")]
		remove
		{
		}
	}

	[Token(Token = "0x1400006A")]
	public static event FingersUpdatedEventDelegate OnFingersUpdated
	{
		[Token(Token = "0x6000965")]
		[Address(RVA = "0x1926BAC", Offset = "0x1926BAC", VA = "0x1926BAC")]
		add
		{
		}
		[Token(Token = "0x6000966")]
		[Address(RVA = "0x1926D50", Offset = "0x1926D50", VA = "0x1926D50")]
		remove
		{
		}
	}

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0x1927340", Offset = "0x1927340", VA = "0x1927340")]
	protected FingerGestures()
	{
	}

	[Token(Token = "0x6000916")]
	[Address(RVA = "0x1929418", Offset = "0x1929418", VA = "0x1929418")]
	internal static void RaiseOnFingerDown(int fingerIndex, Vector2 fingerPos)
	{
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0x19294AC", Offset = "0x19294AC", VA = "0x19294AC")]
	internal static void RaiseOnFingerUp(int fingerIndex, Vector2 fingerPos, float timeHeldDown)
	{
	}

	[Token(Token = "0x6000918")]
	[Address(RVA = "0x1929548", Offset = "0x1929548", VA = "0x1929548")]
	internal static void RaiseOnFingerStationaryBegin(int fingerIndex, Vector2 fingerPos)
	{
	}

	[Token(Token = "0x6000919")]
	[Address(RVA = "0x19295DC", Offset = "0x19295DC", VA = "0x19295DC")]
	internal static void RaiseOnFingerStationary(int fingerIndex, Vector2 fingerPos, float elapsedTime)
	{
	}

	[Token(Token = "0x600091A")]
	[Address(RVA = "0x1929678", Offset = "0x1929678", VA = "0x1929678")]
	internal static void RaiseOnFingerStationaryEnd(int fingerIndex, Vector2 fingerPos, float elapsedTime)
	{
	}

	[Token(Token = "0x600091B")]
	[Address(RVA = "0x1929714", Offset = "0x1929714", VA = "0x1929714")]
	internal static void RaiseOnFingerMoveBegin(int fingerIndex, Vector2 fingerPos)
	{
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0x19297A8", Offset = "0x19297A8", VA = "0x19297A8")]
	internal static void RaiseOnFingerMove(int fingerIndex, Vector2 fingerPos)
	{
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0x192983C", Offset = "0x192983C", VA = "0x192983C")]
	internal static void RaiseOnFingerMoveEnd(int fingerIndex, Vector2 fingerPos)
	{
	}

	[Token(Token = "0x600091E")]
	[Address(RVA = "0x19298D0", Offset = "0x19298D0", VA = "0x19298D0")]
	internal static void RaiseOnFingerLongPress(int fingerIndex, Vector2 fingerPos)
	{
	}

	[Token(Token = "0x600091F")]
	[Address(RVA = "0x1929964", Offset = "0x1929964", VA = "0x1929964")]
	internal static void RaiseOnFingerDragBegin(int fingerIndex, Vector2 fingerPos, Vector2 startPos)
	{
	}

	[Token(Token = "0x6000920")]
	[Address(RVA = "0x1929A04", Offset = "0x1929A04", VA = "0x1929A04")]
	internal static void RaiseOnFingerDragMove(int fingerIndex, Vector2 fingerPos, Vector2 delta)
	{
	}

	[Token(Token = "0x6000921")]
	[Address(RVA = "0x1929AA4", Offset = "0x1929AA4", VA = "0x1929AA4")]
	internal static void RaiseOnFingerDragEnd(int fingerIndex, Vector2 fingerPos)
	{
	}

	[Token(Token = "0x6000922")]
	[Address(RVA = "0x1929B38", Offset = "0x1929B38", VA = "0x1929B38")]
	internal static void RaiseOnFingerTap(int fingerIndex, Vector2 fingerPos)
	{
	}

	[Token(Token = "0x6000923")]
	[Address(RVA = "0x1929BCC", Offset = "0x1929BCC", VA = "0x1929BCC")]
	internal static void RaiseOnFingerDoubleTap(int fingerIndex, Vector2 fingerPos)
	{
	}

	[Token(Token = "0x6000924")]
	[Address(RVA = "0x1929C60", Offset = "0x1929C60", VA = "0x1929C60")]
	internal static void RaiseOnFingerSwipe(int fingerIndex, Vector2 startPos, SwipeDirection direction, float velocity)
	{
	}

	[Token(Token = "0x600094B")]
	[Address(RVA = "0x192C694", Offset = "0x192C694", VA = "0x192C694")]
	internal static void RaiseOnLongPress(Vector2 fingerPos)
	{
	}

	[Token(Token = "0x600094C")]
	[Address(RVA = "0x192C714", Offset = "0x192C714", VA = "0x192C714")]
	internal static void RaiseOnDragBegin(Vector2 fingerPos, Vector2 startPos)
	{
	}

	[Token(Token = "0x600094D")]
	[Address(RVA = "0x192C7AC", Offset = "0x192C7AC", VA = "0x192C7AC")]
	internal static void RaiseOnDragMove(Vector2 fingerPos, Vector2 delta)
	{
	}

	[Token(Token = "0x600094E")]
	[Address(RVA = "0x192C844", Offset = "0x192C844", VA = "0x192C844")]
	internal static void RaiseOnDragEnd(Vector2 fingerPos)
	{
	}

	[Token(Token = "0x600094F")]
	[Address(RVA = "0x192C8C4", Offset = "0x192C8C4", VA = "0x192C8C4")]
	internal static void RaiseOnTap(Vector2 fingerPos)
	{
	}

	[Token(Token = "0x6000950")]
	[Address(RVA = "0x192C944", Offset = "0x192C944", VA = "0x192C944")]
	internal static void RaiseOnDoubleTap(Vector2 fingerPos)
	{
	}

	[Token(Token = "0x6000951")]
	[Address(RVA = "0x192C9C4", Offset = "0x192C9C4", VA = "0x192C9C4")]
	internal static void RaiseOnSwipe(Vector2 startPos, SwipeDirection direction, float velocity)
	{
	}

	[Token(Token = "0x6000952")]
	[Address(RVA = "0x192CA60", Offset = "0x192CA60", VA = "0x192CA60")]
	internal static void RaiseOnPinchBegin(Vector2 fingerPos1, Vector2 fingerPos2)
	{
	}

	[Token(Token = "0x6000953")]
	[Address(RVA = "0x192CAF8", Offset = "0x192CAF8", VA = "0x192CAF8")]
	internal static void RaiseOnPinchMove(Vector2 fingerPos1, Vector2 fingerPos2, float delta)
	{
	}

	[Token(Token = "0x6000954")]
	[Address(RVA = "0x192CB9C", Offset = "0x192CB9C", VA = "0x192CB9C")]
	internal static void RaiseOnPinchEnd(Vector2 fingerPos1, Vector2 fingerPos2)
	{
	}

	[Token(Token = "0x6000955")]
	[Address(RVA = "0x192CC34", Offset = "0x192CC34", VA = "0x192CC34")]
	internal static void RaiseOnRotationBegin(Vector2 fingerPos1, Vector2 fingerPos2)
	{
	}

	[Token(Token = "0x6000956")]
	[Address(RVA = "0x192CCCC", Offset = "0x192CCCC", VA = "0x192CCCC")]
	internal static void RaiseOnRotationMove(Vector2 fingerPos1, Vector2 fingerPos2, float rotationAngleDelta)
	{
	}

	[Token(Token = "0x6000957")]
	[Address(RVA = "0x192CD70", Offset = "0x192CD70", VA = "0x192CD70")]
	internal static void RaiseOnRotationEnd(Vector2 fingerPos1, Vector2 fingerPos2, float totalRotationAngle)
	{
	}

	[Token(Token = "0x6000958")]
	[Address(RVA = "0x192CE14", Offset = "0x192CE14", VA = "0x192CE14")]
	internal static void RaiseOnTwoFingerLongPress(Vector2 fingerPos)
	{
	}

	[Token(Token = "0x6000959")]
	[Address(RVA = "0x192CE94", Offset = "0x192CE94", VA = "0x192CE94")]
	internal static void RaiseOnTwoFingerDragBegin(Vector2 fingerPos, Vector2 startPos)
	{
	}

	[Token(Token = "0x600095A")]
	[Address(RVA = "0x192CF2C", Offset = "0x192CF2C", VA = "0x192CF2C")]
	internal static void RaiseOnTwoFingerDragMove(Vector2 fingerPos, Vector2 delta)
	{
	}

	[Token(Token = "0x600095B")]
	[Address(RVA = "0x192CFC4", Offset = "0x192CFC4", VA = "0x192CFC4")]
	internal static void RaiseOnTwoFingerDragEnd(Vector2 fingerPos)
	{
	}

	[Token(Token = "0x600095C")]
	[Address(RVA = "0x192D044", Offset = "0x192D044", VA = "0x192D044")]
	internal static void RaiseOnTwoFingerTap(Vector2 fingerPos)
	{
	}

	[Token(Token = "0x600095D")]
	[Address(RVA = "0x192D0C4", Offset = "0x192D0C4", VA = "0x192D0C4")]
	internal static void RaiseOnTwoFingerSwipe(Vector2 startPos, SwipeDirection direction, float velocity)
	{
	}

	[Token(Token = "0x600095F")]
	[Address(RVA = "0x192D1C4", Offset = "0x192D1C4", VA = "0x192D1C4")]
	public static Finger GetFinger(int index)
	{
		return null;
	}

	[Token(Token = "0x6000961")]
	[Address(RVA = "0x192D264", Offset = "0x192D264", VA = "0x192D264", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6000962")]
	[Address(RVA = "0x192D268", Offset = "0x192D268", VA = "0x192D268", Slot = "5")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x6000963")]
	[Address(RVA = "0x192D614", Offset = "0x192D614", VA = "0x192D614", Slot = "6")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x6000964")]
	[Address(RVA = "0x192D618", Offset = "0x192D618", VA = "0x192D618", Slot = "7")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x6000967")]
	[Address(RVA = "0x192D61C", Offset = "0x192D61C", VA = "0x192D61C", Slot = "8")]
	protected virtual void Update()
	{
	}

	[Token(Token = "0x6000969")]
	protected abstract FingerPhase GetPhase(Finger finger);

	[Token(Token = "0x600096A")]
	protected abstract Vector2 GetPosition(Finger finger);

	[Token(Token = "0x600096B")]
	[Address(RVA = "0x192D4CC", Offset = "0x192D4CC", VA = "0x192D4CC")]
	private void InitFingers(int count)
	{
	}

	[Token(Token = "0x600096C")]
	[Address(RVA = "0x192D698", Offset = "0x192D698", VA = "0x192D698")]
	private void UpdateFingers()
	{
	}

	[Token(Token = "0x600096F")]
	[Address(RVA = "0x192DDF4", Offset = "0x192DDF4", VA = "0x192DDF4")]
	protected bool ShouldProcessTouch(int fingerIndex, Vector2 position)
	{
		return default(bool);
	}

	[Token(Token = "0x6000970")]
	private T CreateDefaultComponent<T>(T prefab, Transform parent) where T : FGComponent
	{
		return null;
	}

	[Token(Token = "0x6000971")]
	private T CreateDefaultGlobalComponent<T>(T prefab) where T : FGComponent
	{
		return null;
	}

	[Token(Token = "0x6000972")]
	private T CreateDefaultFingerComponent<T>(Finger finger, T prefab) where T : FGComponent
	{
		return null;
	}

	[Token(Token = "0x6000974")]
	[Address(RVA = "0x192DE9C", Offset = "0x192DE9C", VA = "0x192DE9C")]
	private Transform CreateNode(string name, Transform parent)
	{
		return null;
	}

	[Token(Token = "0x6000975")]
	[Address(RVA = "0x192D8F0", Offset = "0x192D8F0", VA = "0x192D8F0")]
	private void InitDefaultComponents()
	{
	}

	[Token(Token = "0x6000976")]
	[Address(RVA = "0x192DF60", Offset = "0x192DF60", VA = "0x192DF60")]
	private void InitGlobalGestures()
	{
	}

	[Token(Token = "0x6000977")]
	[Address(RVA = "0x192F0CC", Offset = "0x192F0CC", VA = "0x192F0CC")]
	private void InitDefaultComponents(Finger finger)
	{
	}

	[Token(Token = "0x6000978")]
	[Address(RVA = "0x192FADC", Offset = "0x192FADC", VA = "0x192FADC")]
	private static Finger GetFingerFromTouchFilter(GestureRecognizer recognizer)
	{
		return null;
	}

	[Token(Token = "0x6000979")]
	[Address(RVA = "0x192FB90", Offset = "0x192FB90", VA = "0x192FB90")]
	private void PerFinger_OnDown(Finger source)
	{
	}

	[Token(Token = "0x600097A")]
	[Address(RVA = "0x192FBFC", Offset = "0x192FBFC", VA = "0x192FBFC")]
	private void PerFinger_OnUp(Finger source)
	{
	}

	[Token(Token = "0x600097B")]
	[Address(RVA = "0x192FCA4", Offset = "0x192FCA4", VA = "0x192FCA4")]
	private void PerFinger_OnStationaryBegin(FingerMotionDetector source)
	{
	}

	[Token(Token = "0x600097C")]
	[Address(RVA = "0x192FD1C", Offset = "0x192FD1C", VA = "0x192FD1C")]
	private void PerFinger_OnStationary(FingerMotionDetector source)
	{
	}

	[Token(Token = "0x600097D")]
	[Address(RVA = "0x192FDC8", Offset = "0x192FDC8", VA = "0x192FDC8")]
	private void PerFinger_OnStationaryEnd(FingerMotionDetector source)
	{
	}

	[Token(Token = "0x600097E")]
	[Address(RVA = "0x192FE74", Offset = "0x192FE74", VA = "0x192FE74")]
	private void PerFinger_OnMoveBegin(FingerMotionDetector source)
	{
	}

	[Token(Token = "0x600097F")]
	[Address(RVA = "0x192FEEC", Offset = "0x192FEEC", VA = "0x192FEEC")]
	private void PerFinger_OnMove(FingerMotionDetector source)
	{
	}

	[Token(Token = "0x6000980")]
	[Address(RVA = "0x192FF88", Offset = "0x192FF88", VA = "0x192FF88")]
	private void PerFinger_OnMoveEnd(FingerMotionDetector source)
	{
	}

	[Token(Token = "0x6000981")]
	[Address(RVA = "0x1930024", Offset = "0x1930024", VA = "0x1930024")]
	private void PerFinger_OnDragBegin(DragGestureRecognizer source)
	{
	}

	[Token(Token = "0x6000982")]
	[Address(RVA = "0x19300B4", Offset = "0x19300B4", VA = "0x19300B4")]
	private void PerFinger_OnDragMove(DragGestureRecognizer source)
	{
	}

	[Token(Token = "0x6000983")]
	[Address(RVA = "0x1930134", Offset = "0x1930134", VA = "0x1930134")]
	private void PerFinger_OnDragEnd(DragGestureRecognizer source)
	{
	}

	[Token(Token = "0x6000984")]
	[Address(RVA = "0x193019C", Offset = "0x193019C", VA = "0x193019C")]
	private void PerFinger_OnLongPress(LongPressGestureRecognizer source)
	{
	}

	[Token(Token = "0x6000985")]
	[Address(RVA = "0x1930204", Offset = "0x1930204", VA = "0x1930204")]
	private void PerFinger_OnSwipe(SwipeGestureRecognizer source)
	{
	}

	[Token(Token = "0x6000986")]
	[Address(RVA = "0x19302B4", Offset = "0x19302B4", VA = "0x19302B4")]
	private void PerFinger_OnTap(TapGestureRecognizer source)
	{
	}

	[Token(Token = "0x6000987")]
	[Address(RVA = "0x193031C", Offset = "0x193031C", VA = "0x193031C")]
	private void PerFinger_OnDoubleTap(MultiTapGestureRecognizer source)
	{
	}

	[Token(Token = "0x6000988")]
	[Address(RVA = "0x1930384", Offset = "0x1930384", VA = "0x1930384")]
	public static SwipeDirection GetSwipeDirection(Vector3 dir, float tolerance)
	{
		return default(SwipeDirection);
	}

	[Token(Token = "0x6000989")]
	[Address(RVA = "0x1930684", Offset = "0x1930684", VA = "0x1930684")]
	public static bool AllFingersMoving(params Finger[] fingers)
	{
		return default(bool);
	}

	[Token(Token = "0x600098A")]
	[Address(RVA = "0x1930718", Offset = "0x1930718", VA = "0x1930718")]
	public static bool FingersMovedInOppositeDirections(Finger finger0, Finger finger1, float minDOT)
	{
		return default(bool);
	}

	[Token(Token = "0x600098B")]
	[Address(RVA = "0x1930850", Offset = "0x1930850", VA = "0x1930850")]
	public static float SignedAngle(Vector2 from, Vector2 to)
	{
		return default(float);
	}

	[Token(Token = "0x600098C")]
	[Address(RVA = "0x193095C", Offset = "0x193095C", VA = "0x193095C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C81C", Offset = "0xE9C81C")]
	private static void <InitGlobalGestures>m__0(LongPressGestureRecognizer rec)
	{
	}

	[Token(Token = "0x600098D")]
	[Address(RVA = "0x1930998", Offset = "0x1930998", VA = "0x1930998")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C82C", Offset = "0xE9C82C")]
	private static void <InitGlobalGestures>m__1(LongPressGestureRecognizer rec)
	{
	}

	[Token(Token = "0x600098E")]
	[Address(RVA = "0x19309D4", Offset = "0x19309D4", VA = "0x19309D4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C83C", Offset = "0xE9C83C")]
	private static void <InitGlobalGestures>m__2(DragGestureRecognizer rec)
	{
	}

	[Token(Token = "0x600098F")]
	[Address(RVA = "0x1930A38", Offset = "0x1930A38", VA = "0x1930A38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C84C", Offset = "0xE9C84C")]
	private static void <InitGlobalGestures>m__3(DragGestureRecognizer rec)
	{
	}

	[Token(Token = "0x6000990")]
	[Address(RVA = "0x1930A90", Offset = "0x1930A90", VA = "0x1930A90")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C85C", Offset = "0xE9C85C")]
	private static void <InitGlobalGestures>m__4(DragGestureRecognizer rec)
	{
	}

	[Token(Token = "0x6000991")]
	[Address(RVA = "0x1930ACC", Offset = "0x1930ACC", VA = "0x1930ACC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C86C", Offset = "0xE9C86C")]
	private static void <InitGlobalGestures>m__5(DragGestureRecognizer rec)
	{
	}

	[Token(Token = "0x6000992")]
	[Address(RVA = "0x1930B30", Offset = "0x1930B30", VA = "0x1930B30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C87C", Offset = "0xE9C87C")]
	private static void <InitGlobalGestures>m__6(DragGestureRecognizer rec)
	{
	}

	[Token(Token = "0x6000993")]
	[Address(RVA = "0x1930B88", Offset = "0x1930B88", VA = "0x1930B88")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C88C", Offset = "0xE9C88C")]
	private static void <InitGlobalGestures>m__7(DragGestureRecognizer rec)
	{
	}

	[Token(Token = "0x6000994")]
	[Address(RVA = "0x1930BC4", Offset = "0x1930BC4", VA = "0x1930BC4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C89C", Offset = "0xE9C89C")]
	private static void <InitGlobalGestures>m__8(SwipeGestureRecognizer rec)
	{
	}

	[Token(Token = "0x6000995")]
	[Address(RVA = "0x1930C4C", Offset = "0x1930C4C", VA = "0x1930C4C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C8AC", Offset = "0xE9C8AC")]
	private static void <InitGlobalGestures>m__9(SwipeGestureRecognizer rec)
	{
	}

	[Token(Token = "0x6000996")]
	[Address(RVA = "0x1930CD4", Offset = "0x1930CD4", VA = "0x1930CD4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C8BC", Offset = "0xE9C8BC")]
	private static void <InitGlobalGestures>m__A(TapGestureRecognizer rec)
	{
	}

	[Token(Token = "0x6000997")]
	[Address(RVA = "0x1930D10", Offset = "0x1930D10", VA = "0x1930D10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C8CC", Offset = "0xE9C8CC")]
	private static void <InitGlobalGestures>m__B(MultiTapGestureRecognizer rec)
	{
	}

	[Token(Token = "0x6000998")]
	[Address(RVA = "0x1930D4C", Offset = "0x1930D4C", VA = "0x1930D4C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C8DC", Offset = "0xE9C8DC")]
	private static void <InitGlobalGestures>m__C(TapGestureRecognizer rec)
	{
	}

	[Token(Token = "0x6000999")]
	[Address(RVA = "0x1930D88", Offset = "0x1930D88", VA = "0x1930D88")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C8EC", Offset = "0xE9C8EC")]
	private static void <InitGlobalGestures>m__D(PinchGestureRecognizer rec)
	{
	}

	[Token(Token = "0x600099A")]
	[Address(RVA = "0x1930DF4", Offset = "0x1930DF4", VA = "0x1930DF4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C8FC", Offset = "0xE9C8FC")]
	private static void <InitGlobalGestures>m__E(PinchGestureRecognizer rec)
	{
	}

	[Token(Token = "0x600099B")]
	[Address(RVA = "0x1930E90", Offset = "0x1930E90", VA = "0x1930E90")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C90C", Offset = "0xE9C90C")]
	private static void <InitGlobalGestures>m__F(PinchGestureRecognizer rec)
	{
	}

	[Token(Token = "0x600099C")]
	[Address(RVA = "0x1930EFC", Offset = "0x1930EFC", VA = "0x1930EFC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C91C", Offset = "0xE9C91C")]
	private static void <InitGlobalGestures>m__10(RotationGestureRecognizer rec)
	{
	}

	[Token(Token = "0x600099D")]
	[Address(RVA = "0x1930F68", Offset = "0x1930F68", VA = "0x1930F68")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C92C", Offset = "0xE9C92C")]
	private static void <InitGlobalGestures>m__11(RotationGestureRecognizer rec)
	{
	}

	[Token(Token = "0x600099E")]
	[Address(RVA = "0x1931004", Offset = "0x1931004", VA = "0x1931004")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9C93C", Offset = "0xE9C93C")]
	private static void <InitGlobalGestures>m__12(RotationGestureRecognizer rec)
	{
	}
}
[Token(Token = "0x200015A")]
public class FingerGesturesInitializer : MonoBehaviour
{
	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public FingerGestures editorGestures;

	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public FingerGestures desktopGestures;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public FingerGestures iosGestures;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FingerGestures androidGestures;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool makePersistent;

	[Token(Token = "0x6000A3F")]
	[Address(RVA = "0x19A33EC", Offset = "0x19A33EC", VA = "0x19A33EC")]
	public FingerGesturesInitializer()
	{
	}

	[Token(Token = "0x6000A40")]
	[Address(RVA = "0x19A33FC", Offset = "0x19A33FC", VA = "0x19A33FC")]
	private void Awake()
	{
	}
}
[Token(Token = "0x200015B")]
public class FingerGesturesPrefabs : MonoBehaviour
{
	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public FingerMotionDetector fingerMotion;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public DragGestureRecognizer fingerDrag;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public TapGestureRecognizer fingerTap;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MultiTapGestureRecognizer fingerDoubleTap;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public SwipeGestureRecognizer fingerSwipe;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LongPressGestureRecognizer fingerLongPress;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public DragGestureRecognizer drag;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TapGestureRecognizer tap;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public MultiTapGestureRecognizer doubleTap;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SwipeGestureRecognizer swipe;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public LongPressGestureRecognizer longPress;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PinchGestureRecognizer pinch;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public RotationGestureRecognizer rotation;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public DragGestureRecognizer twoFingerDrag;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public TapGestureRecognizer twoFingerTap;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public SwipeGestureRecognizer twoFingerSwipe;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public LongPressGestureRecognizer twoFingerLongPress;

	[Token(Token = "0x6000A41")]
	[Address(RVA = "0x19A36A8", Offset = "0x19A36A8", VA = "0x19A36A8")]
	public FingerGesturesPrefabs()
	{
	}
}
[Token(Token = "0x200015C")]
public class MouseGestures : FingerGestures
{
	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int maxMouseButtons;

	[Token(Token = "0x170000C2")]
	public override int MaxFingers
	{
		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x197742C", Offset = "0x197742C", VA = "0x197742C", Slot = "9")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000A42")]
	[Address(RVA = "0x1977414", Offset = "0x1977414", VA = "0x1977414")]
	public MouseGestures()
	{
	}

	[Token(Token = "0x6000A43")]
	[Address(RVA = "0x1977424", Offset = "0x1977424", VA = "0x1977424", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000A45")]
	[Address(RVA = "0x1977434", Offset = "0x1977434", VA = "0x1977434", Slot = "10")]
	protected override FingerPhase GetPhase(Finger finger)
	{
		return default(FingerPhase);
	}

	[Token(Token = "0x6000A46")]
	[Address(RVA = "0x1977668", Offset = "0x1977668", VA = "0x1977668", Slot = "11")]
	protected override Vector2 GetPosition(Finger finger)
	{
		return default(Vector2);
	}
}
[Token(Token = "0x200015D")]
public class TouchScreenGestures : FingerGestures
{
	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int maxFingers;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Touch nullTouch;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int[] finger2touchMap;

	[Token(Token = "0x170000C3")]
	public override int MaxFingers
	{
		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x18FEB44", Offset = "0x18FEB44", VA = "0x18FEB44", Slot = "9")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000A47")]
	[Address(RVA = "0x18FEAF8", Offset = "0x18FEAF8", VA = "0x18FEAF8")]
	public TouchScreenGestures()
	{
	}

	[Token(Token = "0x6000A49")]
	[Address(RVA = "0x18FEB4C", Offset = "0x18FEB4C", VA = "0x18FEB4C", Slot = "6")]
	protected override void Start()
	{
	}

	[Token(Token = "0x6000A4A")]
	[Address(RVA = "0x18FEBE4", Offset = "0x18FEBE4", VA = "0x18FEBE4", Slot = "10")]
	protected override FingerPhase GetPhase(Finger finger)
	{
		return default(FingerPhase);
	}

	[Token(Token = "0x6000A4B")]
	[Address(RVA = "0x18FEDF8", Offset = "0x18FEDF8", VA = "0x18FEDF8", Slot = "11")]
	protected override Vector2 GetPosition(Finger finger)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000A4C")]
	[Address(RVA = "0x18FEE48", Offset = "0x18FEE48", VA = "0x18FEE48")]
	private void UpdateFingerTouchMap()
	{
	}

	[Token(Token = "0x6000A4D")]
	[Address(RVA = "0x18FEC68", Offset = "0x18FEC68", VA = "0x18FEC68")]
	private bool HasValidTouch(Finger finger)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A4E")]
	[Address(RVA = "0x18FECD0", Offset = "0x18FECD0", VA = "0x18FECD0")]
	private Touch GetTouch(Finger finger)
	{
		return default(Touch);
	}

	[Token(Token = "0x6000A4F")]
	[Address(RVA = "0x18FF010", Offset = "0x18FF010", VA = "0x18FF010", Slot = "8")]
	protected override void Update()
	{
	}
}
[Token(Token = "0x200015E")]
public static class GooglePlayGamesBridge
{
	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CA2C", Offset = "0xE9CA2C")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9CA2C", Offset = "0xE9CA2C")]
	private static string <playerDisplayName>k__BackingField;

	[Token(Token = "0x170000C4")]
	public static string playerDisplayName
	{
		[Token(Token = "0x6000A50")]
		[Address(RVA = "0x19BC740", Offset = "0x19BC740", VA = "0x19BC740")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CA60", Offset = "0xE9CA60")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000A51")]
		[Address(RVA = "0x19BC7A4", Offset = "0x19BC7A4", VA = "0x19BC7A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CA70", Offset = "0xE9CA70")]
		private set
		{
		}
	}

	[Token(Token = "0x6000A52")]
	[Address(RVA = "0x19BC808", Offset = "0x19BC808", VA = "0x19BC808")]
	public static bool isAuthenticated()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A53")]
	[Address(RVA = "0x19BC810", Offset = "0x19BC810", VA = "0x19BC810")]
	public static void AuthenticatePlayer([Optional] Action<bool> onComplete)
	{
	}

	[Token(Token = "0x6000A54")]
	[Address(RVA = "0x19BC814", Offset = "0x19BC814", VA = "0x19BC814")]
	public static void AskToAuthenticatePlayer([Optional] Action<bool> onComplete)
	{
	}

	[Token(Token = "0x6000A55")]
	[Address(RVA = "0x19BC818", Offset = "0x19BC818", VA = "0x19BC818")]
	public static void SignOut()
	{
	}

	[Token(Token = "0x6000A56")]
	[Address(RVA = "0x19BC81C", Offset = "0x19BC81C", VA = "0x19BC81C")]
	public static void UnlockAchievement(int achievementIndex, bool showNotification = true)
	{
	}

	[Token(Token = "0x6000A57")]
	[Address(RVA = "0x19BC820", Offset = "0x19BC820", VA = "0x19BC820")]
	public static void ShowAchievements()
	{
	}

	[Token(Token = "0x6000A58")]
	[Address(RVA = "0x19BC824", Offset = "0x19BC824", VA = "0x19BC824")]
	public static void ShowLeaderboards()
	{
	}

	[Token(Token = "0x6000A59")]
	[Address(RVA = "0x19BC828", Offset = "0x19BC828", VA = "0x19BC828")]
	public static void SubmitScore(GooglePlayGamesIDsList.LeaderboardNames leaderboard, long value)
	{
	}
}
[Token(Token = "0x200015F")]
public class GooglePlayGamesIDsList : MonoBehaviour
{
	[Token(Token = "0x2000160")]
	public enum LeaderboardNames
	{
		[Token(Token = "0x40006B9")]
		CompletionTime,
		[Token(Token = "0x40006BA")]
		Ep2CompletionTime,
		[Token(Token = "0x40006BB")]
		Ep3CompletionTime,
		[Token(Token = "0x40006BC")]
		Ep4CompletionTime,
		[Token(Token = "0x40006BD")]
		Ep5CompletionTime
	}

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GooglePlayGamesIDsList _instance;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool instanceNotFound;

	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<string> achievementIDs;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<string> leaderboardIDs;

	[Token(Token = "0x170000C5")]
	public static GooglePlayGamesIDsList instance
	{
		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x19BC8D0", Offset = "0x19BC8D0", VA = "0x19BC8D0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000A5A")]
	[Address(RVA = "0x19BC82C", Offset = "0x19BC82C", VA = "0x19BC82C")]
	public GooglePlayGamesIDsList()
	{
	}

	[Token(Token = "0x6000A5C")]
	[Address(RVA = "0x19BCBEC", Offset = "0x19BCBEC", VA = "0x19BCBEC")]
	public string getAchievementID(int achievementIndex)
	{
		return null;
	}

	[Token(Token = "0x6000A5D")]
	[Address(RVA = "0x19BCCE0", Offset = "0x19BCCE0", VA = "0x19BCCE0")]
	public string getLeaderboardID(LeaderboardNames leaderboardName)
	{
		return null;
	}
}
[Token(Token = "0x2000161")]
public class GooglePlayIABDataHolder : MonoBehaviour
{
	[Token(Token = "0x2000162")]
	public enum Identifiers
	{
		[Token(Token = "0x40006C2")]
		MakingOfChapter1,
		[Token(Token = "0x40006C3")]
		MakingOfChapter2,
		[Token(Token = "0x40006C4")]
		MakingOfChapter3,
		[Token(Token = "0x40006C5")]
		MakingOfChapter4,
		[Token(Token = "0x40006C6")]
		MakingOfChapter5,
		[Token(Token = "0x40006C7")]
		Chapter2,
		[Token(Token = "0x40006C8")]
		Chapter3,
		[Token(Token = "0x40006C9")]
		Chapter4,
		[Token(Token = "0x40006CA")]
		Chapter5,
		[Token(Token = "0x40006CB")]
		SeasonPass,
		[Token(Token = "0x40006CC")]
		SeasonPassMinusOne,
		[Token(Token = "0x40006CD")]
		SeasonPassMinusTwo,
		[Token(Token = "0x40006CE")]
		SeasonPassMinusThree
	}

	[Token(Token = "0x2000513")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CA80", Offset = "0xE9CA80")]
	private sealed class <>c__Iterator0 : IEnumerable, IEnumerable<string>, IEnumerator, IDisposable, IEnumerator<string>
	{
		[Token(Token = "0x40019C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal IEnumerator $locvar0;

		[Token(Token = "0x40019C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int <a>__1;

		[Token(Token = "0x40019C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal IDisposable $locvar1;

		[Token(Token = "0x40019C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal GooglePlayIABDataHolder $this;

		[Token(Token = "0x40019C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal string $current;

		[Token(Token = "0x40019C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal bool $disposing;

		[Token(Token = "0x40019C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int $PC;

		[Token(Token = "0x17000280")]
		private string System.Collections.Generic.IEnumerator<string>.Current
		{
			[Token(Token = "0x60023A6")]
			[Address(RVA = "0x19BDBA0", Offset = "0x19BDBA0", VA = "0x19BDBA0", Slot = "10")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000281")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023A7")]
			[Address(RVA = "0x19BDBA8", Offset = "0x19BDBA8", VA = "0x19BDBA8", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023A4")]
		[Address(RVA = "0x19BD304", Offset = "0x19BD304", VA = "0x19BD304")]
		[DebuggerHidden]
		public <>c__Iterator0()
		{
		}

		[Token(Token = "0x60023A5")]
		[Address(RVA = "0x19BD798", Offset = "0x19BD798", VA = "0x19BD798", Slot = "7")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023A8")]
		[Address(RVA = "0x19BDBB0", Offset = "0x19BDBB0", VA = "0x19BDBB0", Slot = "9")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023A9")]
		[Address(RVA = "0x19BDCBC", Offset = "0x19BDCBC", VA = "0x19BDCBC", Slot = "8")]
		[DebuggerHidden]
		public void Reset()
		{
		}

		[Token(Token = "0x60023AA")]
		[Address(RVA = "0x19BDD40", Offset = "0x19BDD40", VA = "0x19BDD40", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60023AB")]
		[Address(RVA = "0x19BDD44", Offset = "0x19BDD44", VA = "0x19BDD44", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GooglePlayIABDataHolder _instance;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool instanceNotFound;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<string> identifiers;

	[Token(Token = "0x170000C6")]
	public static GooglePlayIABDataHolder instance
	{
		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x19BCE64", Offset = "0x19BCE64", VA = "0x19BCE64")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C7")]
	public IEnumerable<string> AllProductIdentifiers
	{
		[Token(Token = "0x6000A62")]
		[Address(RVA = "0x19BD26C", Offset = "0x19BD26C", VA = "0x19BD26C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000A5F")]
	[Address(RVA = "0x19BCDD8", Offset = "0x19BCDD8", VA = "0x19BCDD8")]
	public GooglePlayIABDataHolder()
	{
	}

	[Token(Token = "0x6000A61")]
	[Address(RVA = "0x19BD178", Offset = "0x19BD178", VA = "0x19BD178")]
	public string GetProductIdentifier(Identifiers identifier)
	{
		return null;
	}

	[Token(Token = "0x6000A63")]
	[Address(RVA = "0x19BD30C", Offset = "0x19BD30C", VA = "0x19BD30C")]
	public Identifiers GetIdentifierForString(string identifierString)
	{
		return default(Identifiers);
	}
}
[Token(Token = "0x2000163")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xE9CB00", Offset = "0xE9CB00")]
public class CameraFrustrumGizmo : MonoBehaviour
{
	[Token(Token = "0x6000A65")]
	[Address(RVA = "0x19DF974", Offset = "0x19DF974", VA = "0x19DF974")]
	public CameraFrustrumGizmo()
	{
	}

	[Token(Token = "0x6000A66")]
	[Address(RVA = "0x19DF97C", Offset = "0x19DF97C", VA = "0x19DF97C", Slot = "4")]
	public virtual void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000A67")]
	[Address(RVA = "0x19DF9EC", Offset = "0x19DF9EC", VA = "0x19DF9EC")]
	private void DrawFrustum(Camera cam)
	{
	}

	[Token(Token = "0x6000A68")]
	[Address(RVA = "0x19E0068", Offset = "0x19E0068", VA = "0x19E0068")]
	private Vector3 Plane3Intersect(Plane p1, Plane p2, Plane p3)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000164")]
[ExecuteInEditMode]
public class CameraHeadTracking : MonoBehaviour
{
	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Camera cam;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Transform finalCamPos;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Transform lookAt;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float headTrackingScale;

	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float zScale;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Vector3 offset;

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool maintainNearClip;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float _lastNearClipPlane;

	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CB98", Offset = "0xE9CB98")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9CB98", Offset = "0xE9CB98")]
	private bool <IsEnabled>k__BackingField;

	[Token(Token = "0x170000C8")]
	public bool IsEnabled
	{
		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x19E03E4", Offset = "0x19E03E4", VA = "0x19E03E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CBCC", Offset = "0xE9CBCC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x19E03EC", Offset = "0x19E03EC", VA = "0x19E03EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CBDC", Offset = "0xE9CBDC")]
		private set
		{
		}
	}

	[Token(Token = "0x6000A69")]
	[Address(RVA = "0x19E03D0", Offset = "0x19E03D0", VA = "0x19E03D0")]
	public CameraHeadTracking()
	{
	}

	[Token(Token = "0x6000A6C")]
	[Address(RVA = "0x19E03F4", Offset = "0x19E03F4", VA = "0x19E03F4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A6D")]
	[Address(RVA = "0x19E0424", Offset = "0x19E0424", VA = "0x19E0424")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000A6E")]
	[Address(RVA = "0x19E0428", Offset = "0x19E0428", VA = "0x19E0428")]
	public void Begin()
	{
	}

	[Token(Token = "0x6000A6F")]
	[Address(RVA = "0x19E046C", Offset = "0x19E046C", VA = "0x19E046C")]
	public void End()
	{
	}

	[Token(Token = "0x6000A70")]
	[Address(RVA = "0x19E04F8", Offset = "0x19E04F8", VA = "0x19E04F8")]
	private void OnDrawGizmosSelected()
	{
	}
}
[Token(Token = "0x2000165")]
[ExecuteInEditMode]
public class CameraPortalEffect : MonoBehaviour
{
	[Token(Token = "0x6000A71")]
	[Address(RVA = "0x19E0568", Offset = "0x19E0568", VA = "0x19E0568")]
	public CameraPortalEffect()
	{
	}
}
[Token(Token = "0x2000166")]
public class HeadTrackingDebugInfo : MonoBehaviour
{
	[Token(Token = "0x6000A72")]
	[Address(RVA = "0x19C4B58", Offset = "0x19C4B58", VA = "0x19C4B58")]
	public HeadTrackingDebugInfo()
	{
	}

	[Token(Token = "0x6000A73")]
	[Address(RVA = "0x19C4B60", Offset = "0x19C4B60", VA = "0x19C4B60")]
	private void OnGUI()
	{
	}
}
[Token(Token = "0x2000167")]
public class HeadTrackingEditorRuntime
{
	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Vector3 HeadPosition;

	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static bool HasHeadLocation;

	[Token(Token = "0x6000A74")]
	[Address(RVA = "0x19C4D68", Offset = "0x19C4D68", VA = "0x19C4D68")]
	public HeadTrackingEditorRuntime()
	{
	}
}
[Token(Token = "0x2000168")]
public class EffectScriptSample : NcEffectBehaviour
{
	[Token(Token = "0x6000A76")]
	[Address(RVA = "0x1925C54", Offset = "0x1925C54", VA = "0x1925C54")]
	public EffectScriptSample()
	{
	}

	[Token(Token = "0x6000A77")]
	[Address(RVA = "0x1925CD8", Offset = "0x1925CD8", VA = "0x1925CD8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A78")]
	[Address(RVA = "0x1925CDC", Offset = "0x1925CDC", VA = "0x1925CDC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A79")]
	[Address(RVA = "0x1925CE0", Offset = "0x1925CE0", VA = "0x1925CE0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A7A")]
	[Address(RVA = "0x1925CE4", Offset = "0x1925CE4", VA = "0x1925CE4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000A7B")]
	[Address(RVA = "0x1925CE8", Offset = "0x1925CE8", VA = "0x1925CE8")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x6000A7C")]
	[Address(RVA = "0x1925CEC", Offset = "0x1925CEC", VA = "0x1925CEC")]
	private void OnDrawGizmos()
	{
	}
}
[Token(Token = "0x2000169")]
public class NcDetachObject : NcEffectBehaviour
{
	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject m_LinkGameObject;

	[Token(Token = "0x6000A7D")]
	[Address(RVA = "0x93AF5C", Offset = "0x93AF5C", VA = "0x93AF5C")]
	public NcDetachObject()
	{
	}

	[Token(Token = "0x6000A7E")]
	[Address(RVA = "0x93AFE8", Offset = "0x93AFE8", VA = "0x93AFE8")]
	public static void Create(GameObject parentObj, GameObject linkObject)
	{
	}

	[Token(Token = "0x6000A7F")]
	[Address(RVA = "0x93B070", Offset = "0x93B070", VA = "0x93B070", Slot = "5")]
	public override void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}
}
[Token(Token = "0x200016A")]
public class NcDisableDelayActive : MonoBehaviour
{
	[Token(Token = "0x6000A80")]
	[Address(RVA = "0x93C400", Offset = "0x93C400", VA = "0x93C400")]
	public NcDisableDelayActive()
	{
	}
}
[Token(Token = "0x200016B")]
public class NcDontActive : NcEffectBehaviour
{
	[Token(Token = "0x6000A81")]
	[Address(RVA = "0x93C408", Offset = "0x93C408", VA = "0x93C408")]
	public NcDontActive()
	{
	}

	[Token(Token = "0x6000A82")]
	[Address(RVA = "0x93C494", Offset = "0x93C494", VA = "0x93C494")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A83")]
	[Address(RVA = "0x93C52C", Offset = "0x93C52C", VA = "0x93C52C")]
	private void OnEnable()
	{
	}
}
[Token(Token = "0x200016C")]
public class NcEffectAniBehaviour : NcEffectBehaviour
{
	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	protected NcTimerTool m_Timer;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected GameObject m_OnEndAniGameObject;

	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected bool m_bEndAnimation;

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string m_OnEndAniFunction;

	[Token(Token = "0x6000A84")]
	[Address(RVA = "0x935A78", Offset = "0x935A78", VA = "0x935A78")]
	public NcEffectAniBehaviour()
	{
	}

	[Token(Token = "0x6000A85")]
	[Address(RVA = "0x93E9E4", Offset = "0x93E9E4", VA = "0x93E9E4")]
	public void SetCallBackEndAnimation(GameObject callBackGameObj)
	{
	}

	[Token(Token = "0x6000A86")]
	[Address(RVA = "0x93E9EC", Offset = "0x93E9EC", VA = "0x93E9EC")]
	public void SetCallBackEndAnimation(GameObject callBackGameObj, string nameFunction)
	{
	}

	[Token(Token = "0x6000A87")]
	[Address(RVA = "0x935BFC", Offset = "0x935BFC", VA = "0x935BFC")]
	public bool IsEndAnimation()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A88")]
	[Address(RVA = "0x9375D4", Offset = "0x9375D4", VA = "0x9375D4")]
	protected void InitAnimationTimer()
	{
	}

	[Token(Token = "0x6000A89")]
	[Address(RVA = "0x935C44", Offset = "0x935C44", VA = "0x935C44", Slot = "7")]
	public virtual void ResetAnimation()
	{
	}

	[Token(Token = "0x6000A8A")]
	[Address(RVA = "0x93EA5C", Offset = "0x93EA5C", VA = "0x93EA5C", Slot = "8")]
	public virtual void PauseAnimation()
	{
	}

	[Token(Token = "0x6000A8B")]
	[Address(RVA = "0x93EAA4", Offset = "0x93EAA4", VA = "0x93EAA4", Slot = "9")]
	public virtual void ResumeAnimation()
	{
	}

	[Token(Token = "0x6000A8C")]
	[Address(RVA = "0x93EAE8", Offset = "0x93EAE8", VA = "0x93EAE8", Slot = "10")]
	public virtual void MoveAnimation(float fRate)
	{
	}

	[Token(Token = "0x6000A8D")]
	[Address(RVA = "0x93804C", Offset = "0x93804C", VA = "0x93804C")]
	protected void OnEndAnimation()
	{
	}
}
[Token(Token = "0x200016D")]
public class NcEffectBehaviour : MonoBehaviour
{
	[Token(Token = "0x200016E")]
	public class _RuntimeIntance
	{
		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject m_ParentGameObject;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public GameObject m_ChildGameObject;

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x9404E0", Offset = "0x9404E0", VA = "0x9404E0")]
		public _RuntimeIntance(GameObject parentGameObject, GameObject childGameObject)
		{
		}
	}

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool m_bShuttingDown;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float m_fUserTag;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected MeshFilter m_MeshFilter;

	[Token(Token = "0x6000A8E")]
	[Address(RVA = "0x933970", Offset = "0x933970", VA = "0x933970")]
	public NcEffectBehaviour()
	{
	}

	[Token(Token = "0x6000A8F")]
	[Address(RVA = "0x933B60", Offset = "0x933B60", VA = "0x933B60")]
	public static float GetEngineTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000A90")]
	[Address(RVA = "0x935A54", Offset = "0x935A54", VA = "0x935A54")]
	public static float GetEngineDeltaTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000A91")]
	[Address(RVA = "0x93EB1C", Offset = "0x93EB1C", VA = "0x93EB1C", Slot = "4")]
	public virtual int GetAnimationState()
	{
		return default(int);
	}

	[Token(Token = "0x6000A92")]
	[Address(RVA = "0x93BC4C", Offset = "0x93BC4C", VA = "0x93BC4C")]
	public static GameObject GetRootInstanceEffect()
	{
		return null;
	}

	[Token(Token = "0x6000A93")]
	[Address(RVA = "0x93EBBC", Offset = "0x93EBBC", VA = "0x93EBBC")]
	protected static void SetActive(GameObject target, bool bActive)
	{
	}

	[Token(Token = "0x6000A94")]
	[Address(RVA = "0x93EBEC", Offset = "0x93EBEC", VA = "0x93EBEC")]
	protected static void SetActiveRecursively(GameObject target, bool bActive)
	{
	}

	[Token(Token = "0x6000A95")]
	[Address(RVA = "0x933B0C", Offset = "0x933B0C", VA = "0x933B0C")]
	protected static bool IsActive(GameObject target)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A96")]
	[Address(RVA = "0x93E610", Offset = "0x93E610", VA = "0x93E610")]
	protected static void RemoveAllChildObject(GameObject parent, bool bImmediate)
	{
	}

	[Token(Token = "0x6000A97")]
	[Address(RVA = "0x93E58C", Offset = "0x93E58C", VA = "0x93E58C")]
	public static void HideNcDelayActive(GameObject tarObj)
	{
	}

	[Token(Token = "0x6000A98")]
	[Address(RVA = "0x93ED40", Offset = "0x93ED40", VA = "0x93ED40")]
	public static Texture[] PreloadTexture(GameObject tarObj)
	{
		return null;
	}

	[Token(Token = "0x6000A99")]
	[Address(RVA = "0x93EE8C", Offset = "0x93EE8C", VA = "0x93EE8C")]
	private static Texture[] PreloadTexture(GameObject tarObj, List<GameObject> parentPrefabList)
	{
		return null;
	}

	[Token(Token = "0x6000A9A")]
	[Address(RVA = "0x93FA2C", Offset = "0x93FA2C", VA = "0x93FA2C")]
	private static Texture[] PreloadPrefab(GameObject tarObj, List<GameObject> parentPrefabList, bool bCheckDup)
	{
		return null;
	}

	[Token(Token = "0x6000A9B")]
	[Address(RVA = "0x93B108", Offset = "0x93B108", VA = "0x93B108")]
	public static void AdjustSpeedRuntime(GameObject target, float fSpeedRate)
	{
	}

	[Token(Token = "0x6000A9C")]
	[Address(RVA = "0x93473C", Offset = "0x93473C", VA = "0x93473C")]
	public static string GetMaterialColorName(Material mat)
	{
		return null;
	}

	[Token(Token = "0x6000A9D")]
	[Address(RVA = "0x934BE0", Offset = "0x934BE0", VA = "0x934BE0")]
	protected void DisableEmit()
	{
	}

	[Token(Token = "0x6000A9E")]
	[Address(RVA = "0x93EB24", Offset = "0x93EB24", VA = "0x93EB24")]
	public static bool IsSafe()
	{
		return default(bool);
	}

	[Token(Token = "0x6000A9F")]
	[Address(RVA = "0x93FD50", Offset = "0x93FD50", VA = "0x93FD50")]
	protected GameObject CreateEditorGameObject(GameObject srcGameObj)
	{
		return null;
	}

	[Token(Token = "0x6000AA0")]
	[Address(RVA = "0x93FD58", Offset = "0x93FD58", VA = "0x93FD58")]
	public GameObject CreateGameObject(string name)
	{
		return null;
	}

	[Token(Token = "0x6000AA1")]
	[Address(RVA = "0x93E4B8", Offset = "0x93E4B8", VA = "0x93E4B8")]
	public GameObject CreateGameObject(GameObject original)
	{
		return null;
	}

	[Token(Token = "0x6000AA2")]
	[Address(RVA = "0x93FE08", Offset = "0x93FE08", VA = "0x93FE08")]
	public GameObject CreateGameObject(GameObject prefabObj, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x6000AA3")]
	[Address(RVA = "0x93E790", Offset = "0x93E790", VA = "0x93E790")]
	public GameObject CreateGameObject(GameObject parentObj, GameObject prefabObj)
	{
		return null;
	}

	[Token(Token = "0x6000AA4")]
	[Address(RVA = "0x93FF20", Offset = "0x93FF20", VA = "0x93FF20")]
	public GameObject CreateGameObject(GameObject parentObj, Transform parentTrans, GameObject prefabObj)
	{
		return null;
	}

	[Token(Token = "0x6000AA5")]
	[Address(RVA = "0x93BE0C", Offset = "0x93BE0C", VA = "0x93BE0C")]
	protected void ChangeParent(Transform newParent, Transform child, bool bKeepingLocalTransform, Transform addTransform)
	{
	}

	[Token(Token = "0x6000AA6")]
	[Address(RVA = "0x94008C", Offset = "0x94008C", VA = "0x94008C")]
	protected void UpdateMeshColors(Color color)
	{
	}

	[Token(Token = "0x6000AA7")]
	[Address(RVA = "0x940444", Offset = "0x940444", VA = "0x940444")]
	public void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000AA8")]
	[Address(RVA = "0x9404D4", Offset = "0x9404D4", VA = "0x9404D4", Slot = "5")]
	public virtual void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}

	[Token(Token = "0x6000AA9")]
	[Address(RVA = "0x9404D8", Offset = "0x9404D8", VA = "0x9404D8", Slot = "6")]
	public virtual void OnUpdateToolData()
	{
	}
}
[Token(Token = "0x200016F")]
public class NcRandomTimerTool : NcTimerTool
{
	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	protected float m_fRandomTime;

	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected float m_fUpdateTime;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected float m_fMinIntervalTime;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected int m_nRepeatCount;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected int m_nCallCount;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected object m_ArgObject;

	[Token(Token = "0x6000AAC")]
	[Address(RVA = "0x949A30", Offset = "0x949A30", VA = "0x949A30")]
	public NcRandomTimerTool()
	{
	}

	[Token(Token = "0x6000AAD")]
	[Address(RVA = "0x949A38", Offset = "0x949A38", VA = "0x949A38")]
	public bool UpdateRandomTimer(bool bReset)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AAE")]
	[Address(RVA = "0x949A68", Offset = "0x949A68", VA = "0x949A68")]
	public bool UpdateRandomTimer()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AAF")]
	[Address(RVA = "0x949B20", Offset = "0x949B20", VA = "0x949B20")]
	public void ResetUpdateTime()
	{
	}

	[Token(Token = "0x6000AB0")]
	[Address(RVA = "0x949B84", Offset = "0x949B84", VA = "0x949B84")]
	public int GetCallCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000AB1")]
	[Address(RVA = "0x949B8C", Offset = "0x949B8C", VA = "0x949B8C")]
	public object GetArgObject()
	{
		return null;
	}

	[Token(Token = "0x6000AB2")]
	[Address(RVA = "0x949B94", Offset = "0x949B94", VA = "0x949B94")]
	public float GetElipsedRate()
	{
		return default(float);
	}

	[Token(Token = "0x6000AB3")]
	[Address(RVA = "0x949BB8", Offset = "0x949BB8", VA = "0x949BB8")]
	public void SetTimer(float fStartTime, float fRandomTime)
	{
	}

	[Token(Token = "0x6000AB4")]
	[Address(RVA = "0x949C98", Offset = "0x949C98", VA = "0x949C98")]
	public void SetTimer(float fStartTime, float fRandomTime, float fMinIntervalTime)
	{
	}

	[Token(Token = "0x6000AB5")]
	[Address(RVA = "0x949D5C", Offset = "0x949D5C", VA = "0x949D5C")]
	public void SetTimer(float fStartTime, float fRandomTime, float fMinIntervalTime, int nRepeatCount)
	{
	}

	[Token(Token = "0x6000AB6")]
	[Address(RVA = "0x949E2C", Offset = "0x949E2C", VA = "0x949E2C")]
	public void SetTimer(float fStartTime, float fRandomTime, object arg)
	{
	}

	[Token(Token = "0x6000AB7")]
	[Address(RVA = "0x949EE8", Offset = "0x949EE8", VA = "0x949EE8")]
	public void SetTimer(float fStartTime, float fRandomTime, float fMinIntervalTime, object arg)
	{
	}

	[Token(Token = "0x6000AB8")]
	[Address(RVA = "0x949FBC", Offset = "0x949FBC", VA = "0x949FBC")]
	public void SetTimer(float fStartTime, float fRandomTime, float fMinIntervalTime, int nRepeatCount, object arg)
	{
	}

	[Token(Token = "0x6000AB9")]
	[Address(RVA = "0x949C18", Offset = "0x949C18", VA = "0x949C18")]
	public void SetRelTimer(float fStartRelTime, float fRandomTime)
	{
	}

	[Token(Token = "0x6000ABA")]
	[Address(RVA = "0x949CCC", Offset = "0x949CCC", VA = "0x949CCC")]
	public void SetRelTimer(float fStartRelTime, float fRandomTime, float fMinIntervalTime)
	{
	}

	[Token(Token = "0x6000ABB")]
	[Address(RVA = "0x949D98", Offset = "0x949D98", VA = "0x949D98")]
	public void SetRelTimer(float fStartRelTime, float fRandomTime, float fMinIntervalTime, int nRepeatCount)
	{
	}

	[Token(Token = "0x6000ABC")]
	[Address(RVA = "0x949E60", Offset = "0x949E60", VA = "0x949E60")]
	public void SetRelTimer(float fStartRelTime, float fRandomTime, object arg)
	{
	}

	[Token(Token = "0x6000ABD")]
	[Address(RVA = "0x949F24", Offset = "0x949F24", VA = "0x949F24")]
	public void SetRelTimer(float fStartRelTime, float fRandomTime, float fMinIntervalTime, object arg)
	{
	}

	[Token(Token = "0x6000ABE")]
	[Address(RVA = "0x949FFC", Offset = "0x949FFC", VA = "0x949FFC")]
	public void SetRelTimer(float fStartRelTime, float fRandomTime, float fMinIntervalTime, int nRepeatCount, object arg)
	{
	}
}
[Token(Token = "0x2000170")]
public class NcRepeatTimerTool : NcTimerTool
{
	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	protected float m_fUpdateTime;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected float m_fIntervalTime;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected int m_nRepeatCount;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected int m_nCallCount;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected object m_ArgObject;

	[Token(Token = "0x6000ABF")]
	[Address(RVA = "0x94A098", Offset = "0x94A098", VA = "0x94A098")]
	public NcRepeatTimerTool()
	{
	}

	[Token(Token = "0x6000AC0")]
	[Address(RVA = "0x94A0A0", Offset = "0x94A0A0", VA = "0x94A0A0")]
	public bool UpdateTimer()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AC1")]
	[Address(RVA = "0x94A144", Offset = "0x94A144", VA = "0x94A144")]
	public void ResetUpdateTime()
	{
	}

	[Token(Token = "0x6000AC2")]
	[Address(RVA = "0x94A168", Offset = "0x94A168", VA = "0x94A168")]
	public int GetCallCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000AC3")]
	[Address(RVA = "0x94A170", Offset = "0x94A170", VA = "0x94A170")]
	public object GetArgObject()
	{
		return null;
	}

	[Token(Token = "0x6000AC4")]
	[Address(RVA = "0x94A178", Offset = "0x94A178", VA = "0x94A178")]
	public float GetElipsedRate()
	{
		return default(float);
	}

	[Token(Token = "0x6000AC5")]
	[Address(RVA = "0x94A19C", Offset = "0x94A19C", VA = "0x94A19C")]
	public void SetTimer(float fStartTime)
	{
	}

	[Token(Token = "0x6000AC6")]
	[Address(RVA = "0x94A240", Offset = "0x94A240", VA = "0x94A240")]
	public void SetTimer(float fStartTime, float fRepeatTime)
	{
	}

	[Token(Token = "0x6000AC7")]
	[Address(RVA = "0x94A2EC", Offset = "0x94A2EC", VA = "0x94A2EC")]
	public void SetTimer(float fStartTime, float fRepeatTime, int nRepeatCount)
	{
	}

	[Token(Token = "0x6000AC8")]
	[Address(RVA = "0x94A3A0", Offset = "0x94A3A0", VA = "0x94A3A0")]
	public void SetTimer(float fStartTime, object arg)
	{
	}

	[Token(Token = "0x6000AC9")]
	[Address(RVA = "0x94A454", Offset = "0x94A454", VA = "0x94A454")]
	public void SetTimer(float fStartTime, float fRepeatTime, object arg)
	{
	}

	[Token(Token = "0x6000ACA")]
	[Address(RVA = "0x94A510", Offset = "0x94A510", VA = "0x94A510")]
	public void SetTimer(float fStartTime, float fRepeatTime, int nRepeatCount, object arg)
	{
	}

	[Token(Token = "0x6000ACB")]
	[Address(RVA = "0x94A1F8", Offset = "0x94A1F8", VA = "0x94A1F8")]
	public void SetRelTimer(float fStartRelTime)
	{
	}

	[Token(Token = "0x6000ACC")]
	[Address(RVA = "0x94A2A0", Offset = "0x94A2A0", VA = "0x94A2A0")]
	public void SetRelTimer(float fStartRelTime, float fRepeatTime)
	{
	}

	[Token(Token = "0x6000ACD")]
	[Address(RVA = "0x94A350", Offset = "0x94A350", VA = "0x94A350")]
	public void SetRelTimer(float fStartRelTime, float fRepeatTime, int nRepeatCount)
	{
	}

	[Token(Token = "0x6000ACE")]
	[Address(RVA = "0x94A404", Offset = "0x94A404", VA = "0x94A404")]
	public void SetRelTimer(float fStartRelTime, object arg)
	{
	}

	[Token(Token = "0x6000ACF")]
	[Address(RVA = "0x94A4BC", Offset = "0x94A4BC", VA = "0x94A4BC")]
	public void SetRelTimer(float fStartRelTime, float fRepeatTime, object arg)
	{
	}

	[Token(Token = "0x6000AD0")]
	[Address(RVA = "0x94A57C", Offset = "0x94A57C", VA = "0x94A57C")]
	public void SetRelTimer(float fStartRelTime, float fRepeatTime, int nRepeatCount, object arg)
	{
	}
}
[Token(Token = "0x2000171")]
public class NcTimerTool
{
	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	protected bool m_bEnable;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float m_fStartTime;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float m_fPauseTime;

	[Token(Token = "0x6000AD1")]
	[Address(RVA = "0x93E9F8", Offset = "0x93E9F8", VA = "0x93E9F8")]
	public NcTimerTool()
	{
	}

	[Token(Token = "0x6000AD2")]
	[Address(RVA = "0x949BDC", Offset = "0x949BDC", VA = "0x949BDC")]
	public static float GetEngineTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000AD3")]
	[Address(RVA = "0x937834", Offset = "0x937834", VA = "0x937834")]
	public float GetTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000AD4")]
	[Address(RVA = "0x952794", Offset = "0x952794", VA = "0x952794")]
	public float GetDeltaTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000AD5")]
	[Address(RVA = "0x9527B0", Offset = "0x9527B0", VA = "0x9527B0")]
	public bool IsEnable()
	{
		return default(bool);
	}

	[Token(Token = "0x6000AD6")]
	[Address(RVA = "0x93EA00", Offset = "0x93EA00", VA = "0x93EA00")]
	public void Start()
	{
	}

	[Token(Token = "0x6000AD7")]
	[Address(RVA = "0x93EA30", Offset = "0x93EA30", VA = "0x93EA30")]
	public void Reset(float fAdjustTime)
	{
	}

	[Token(Token = "0x6000AD8")]
	[Address(RVA = "0x93EA84", Offset = "0x93EA84", VA = "0x93EA84")]
	public void Pause()
	{
	}

	[Token(Token = "0x6000AD9")]
	[Address(RVA = "0x93EACC", Offset = "0x93EACC", VA = "0x93EACC")]
	public void Resume()
	{
	}
}
[Token(Token = "0x2000172")]
public class NcTransformTool
{
	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Vector3 m_vecPos;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Quaternion m_vecRot;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 m_vecRotHint;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 m_vecScale;

	[Token(Token = "0x6000ADA")]
	[Address(RVA = "0x93B2B8", Offset = "0x93B2B8", VA = "0x93B2B8")]
	public NcTransformTool()
	{
	}

	[Token(Token = "0x6000ADB")]
	[Address(RVA = "0x940064", Offset = "0x940064", VA = "0x940064")]
	public NcTransformTool(Transform val)
	{
	}

	[Token(Token = "0x6000ADC")]
	[Address(RVA = "0x956358", Offset = "0x956358", VA = "0x956358")]
	public static Vector3 GetZeroVector()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000ADD")]
	[Address(RVA = "0x9563E0", Offset = "0x9563E0", VA = "0x9563E0")]
	public static Vector3 GetUnitVector()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000ADE")]
	[Address(RVA = "0x956418", Offset = "0x956418", VA = "0x956418")]
	public static Quaternion GetIdenQuaternion()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000ADF")]
	[Address(RVA = "0x9564A0", Offset = "0x9564A0", VA = "0x9564A0")]
	public static void InitLocalTransform(Transform dst)
	{
	}

	[Token(Token = "0x6000AE0")]
	[Address(RVA = "0x956558", Offset = "0x956558", VA = "0x956558")]
	public static void InitWorldTransform(Transform dst)
	{
	}

	[Token(Token = "0x6000AE1")]
	[Address(RVA = "0x9565D0", Offset = "0x9565D0", VA = "0x9565D0")]
	public static void InitWorldScale(Transform dst)
	{
	}

	[Token(Token = "0x6000AE2")]
	[Address(RVA = "0x9567F4", Offset = "0x9567F4", VA = "0x9567F4")]
	public static void CopyLocalTransform(Transform src, Transform dst)
	{
	}

	[Token(Token = "0x6000AE3")]
	[Address(RVA = "0x948008", Offset = "0x948008", VA = "0x948008")]
	public static void CopyLossyToLocalScale(Vector3 srcLossyScale, Transform dst)
	{
	}

	[Token(Token = "0x6000AE4")]
	[Address(RVA = "0x93C00C", Offset = "0x93C00C", VA = "0x93C00C")]
	public void CopyToLocalTransform(Transform dst)
	{
	}

	[Token(Token = "0x6000AE5")]
	[Address(RVA = "0x9568D4", Offset = "0x9568D4", VA = "0x9568D4")]
	public void CopyToTransform(Transform dst)
	{
	}

	[Token(Token = "0x6000AE6")]
	[Address(RVA = "0x956964", Offset = "0x956964", VA = "0x956964")]
	public void AddLocalTransform(Transform val)
	{
	}

	[Token(Token = "0x6000AE7")]
	[Address(RVA = "0x93BD70", Offset = "0x93BD70", VA = "0x93BD70")]
	public void SetLocalTransform(Transform val)
	{
	}

	[Token(Token = "0x6000AE8")]
	[Address(RVA = "0x956B94", Offset = "0x956B94", VA = "0x956B94")]
	public bool IsLocalEquals(Transform val)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AE9")]
	[Address(RVA = "0x93C1BC", Offset = "0x93C1BC", VA = "0x93C1BC")]
	public void AddTransform(Transform val)
	{
	}

	[Token(Token = "0x6000AEA")]
	[Address(RVA = "0x956D78", Offset = "0x956D78", VA = "0x956D78")]
	public void SetTransform(Transform val)
	{
	}

	[Token(Token = "0x6000AEB")]
	[Address(RVA = "0x956E14", Offset = "0x956E14", VA = "0x956E14")]
	public bool IsEquals(Transform val)
	{
		return default(bool);
	}

	[Token(Token = "0x6000AEC")]
	[Address(RVA = "0x93C154", Offset = "0x93C154", VA = "0x93C154")]
	public void SetTransform(NcTransformTool val)
	{
	}

	[Token(Token = "0x6000AED")]
	[Address(RVA = "0x948274", Offset = "0x948274", VA = "0x948274")]
	public static float GetTransformScaleMeanValue(Transform srcTrans)
	{
		return default(float);
	}

	[Token(Token = "0x6000AEE")]
	[Address(RVA = "0x956FF8", Offset = "0x956FF8", VA = "0x956FF8")]
	public static Vector3 GetTransformScaleMeanVector(Transform srcTrans)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000173")]
public class NcInterpolate
{
	[Token(Token = "0x2000174")]
	public enum EaseType
	{
		[Token(Token = "0x4000713")]
		Linear,
		[Token(Token = "0x4000714")]
		EaseInQuad,
		[Token(Token = "0x4000715")]
		EaseOutQuad,
		[Token(Token = "0x4000716")]
		EaseInOutQuad,
		[Token(Token = "0x4000717")]
		EaseInCubic,
		[Token(Token = "0x4000718")]
		EaseOutCubic,
		[Token(Token = "0x4000719")]
		EaseInOutCubic,
		[Token(Token = "0x400071A")]
		EaseInQuart,
		[Token(Token = "0x400071B")]
		EaseOutQuart,
		[Token(Token = "0x400071C")]
		EaseInOutQuart,
		[Token(Token = "0x400071D")]
		EaseInQuint,
		[Token(Token = "0x400071E")]
		EaseOutQuint,
		[Token(Token = "0x400071F")]
		EaseInOutQuint,
		[Token(Token = "0x4000720")]
		EaseInSine,
		[Token(Token = "0x4000721")]
		EaseOutSine,
		[Token(Token = "0x4000722")]
		EaseInOutSine,
		[Token(Token = "0x4000723")]
		EaseInExpo,
		[Token(Token = "0x4000724")]
		EaseOutExpo,
		[Token(Token = "0x4000725")]
		EaseInOutExpo,
		[Token(Token = "0x4000726")]
		EaseInCirc,
		[Token(Token = "0x4000727")]
		EaseOutCirc,
		[Token(Token = "0x4000728")]
		EaseInOutCirc
	}

	[Token(Token = "0x2000175")]
	public delegate Vector3 ToVector3<T>(T v);

	[Token(Token = "0x2000176")]
	public delegate float Function(float a, float b, float c, float d);

	[Token(Token = "0x2000514")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CE0C", Offset = "0xE9CE0C")]
	private sealed class <NewTimer>c__Iterator0 : IEnumerable, IEnumerable<float>, IEnumerator, IDisposable, IEnumerator<float>
	{
		[Token(Token = "0x40019C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <elapsedTime>__0;

		[Token(Token = "0x40019C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float duration;

		[Token(Token = "0x40019CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal float $current;

		[Token(Token = "0x40019CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal bool $disposing;

		[Token(Token = "0x40019CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int $PC;

		[Token(Token = "0x17000282")]
		private float System.Collections.Generic.IEnumerator<float>.Current
		{
			[Token(Token = "0x60023AE")]
			[Address(RVA = "0x943A84", Offset = "0x943A84", VA = "0x943A84", Slot = "10")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000283")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023AF")]
			[Address(RVA = "0x943A8C", Offset = "0x943A8C", VA = "0x943A8C", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023AC")]
		[Address(RVA = "0x9405F4", Offset = "0x9405F4", VA = "0x9405F4")]
		[DebuggerHidden]
		public <NewTimer>c__Iterator0()
		{
		}

		[Token(Token = "0x60023AD")]
		[Address(RVA = "0x943998", Offset = "0x943998", VA = "0x943998", Slot = "7")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023B0")]
		[Address(RVA = "0x943B00", Offset = "0x943B00", VA = "0x943B00", Slot = "9")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023B1")]
		[Address(RVA = "0x943B14", Offset = "0x943B14", VA = "0x943B14", Slot = "8")]
		[DebuggerHidden]
		public void Reset()
		{
		}

		[Token(Token = "0x60023B2")]
		[Address(RVA = "0x943B98", Offset = "0x943B98", VA = "0x943B98", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60023B3")]
		[Address(RVA = "0x943B9C", Offset = "0x943B9C", VA = "0x943B9C", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator<float> System.Collections.Generic.IEnumerable<float>.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x2000515")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CE8C", Offset = "0xE9CE8C")]
	private sealed class <NewCounter>c__Iterator1 : IEnumerable, IEnumerable<float>, IEnumerator, IDisposable, IEnumerator<float>
	{
		[Token(Token = "0x40019CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal int start;

		[Token(Token = "0x40019CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int <i>__1;

		[Token(Token = "0x40019CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int end;

		[Token(Token = "0x40019D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int step;

		[Token(Token = "0x40019D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float $current;

		[Token(Token = "0x40019D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal bool $disposing;

		[Token(Token = "0x40019D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int $PC;

		[Token(Token = "0x17000284")]
		private float System.Collections.Generic.IEnumerator<float>.Current
		{
			[Token(Token = "0x60023B6")]
			[Address(RVA = "0x943218", Offset = "0x943218", VA = "0x943218", Slot = "10")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000285")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023B7")]
			[Address(RVA = "0x943220", Offset = "0x943220", VA = "0x943220", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023B4")]
		[Address(RVA = "0x9406BC", Offset = "0x9406BC", VA = "0x9406BC")]
		[DebuggerHidden]
		public <NewCounter>c__Iterator1()
		{
		}

		[Token(Token = "0x60023B5")]
		[Address(RVA = "0x94318C", Offset = "0x94318C", VA = "0x94318C", Slot = "7")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023B8")]
		[Address(RVA = "0x943294", Offset = "0x943294", VA = "0x943294", Slot = "9")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023B9")]
		[Address(RVA = "0x9432A8", Offset = "0x9432A8", VA = "0x9432A8", Slot = "8")]
		[DebuggerHidden]
		public void Reset()
		{
		}

		[Token(Token = "0x60023BA")]
		[Address(RVA = "0x94332C", Offset = "0x94332C", VA = "0x94332C", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60023BB")]
		[Address(RVA = "0x943330", Offset = "0x943330", VA = "0x943330", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator<float> System.Collections.Generic.IEnumerable<float>.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x2000516")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CF0C", Offset = "0xE9CF0C")]
	private sealed class <NewEase>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x40019D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal Vector3 end;

		[Token(Token = "0x40019D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal Vector3 start;

		[Token(Token = "0x40019D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Vector3 <distance>__0;

		[Token(Token = "0x40019D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal IEnumerable<float> driver;

		[Token(Token = "0x40019D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal IEnumerator<float> $locvar0;

		[Token(Token = "0x40019D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal float <i>__1;

		[Token(Token = "0x40019DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal Function ease;

		[Token(Token = "0x40019DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal float total;

		[Token(Token = "0x40019DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal object $current;

		[Token(Token = "0x40019DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		internal bool $disposing;

		[Token(Token = "0x40019DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		internal int $PC;

		[Token(Token = "0x17000286")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60023BE")]
			[Address(RVA = "0x943814", Offset = "0x943814", VA = "0x943814", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000287")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023BF")]
			[Address(RVA = "0x94381C", Offset = "0x94381C", VA = "0x94381C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023BC")]
		[Address(RVA = "0x9408A4", Offset = "0x9408A4", VA = "0x9408A4")]
		[DebuggerHidden]
		public <NewEase>c__Iterator2()
		{
		}

		[Token(Token = "0x60023BD")]
		[Address(RVA = "0x94341C", Offset = "0x94341C", VA = "0x94341C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023C0")]
		[Address(RVA = "0x943824", Offset = "0x943824", VA = "0x943824", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023C1")]
		[Address(RVA = "0x943914", Offset = "0x943914", VA = "0x943914", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000517")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CF6C", Offset = "0xE9CF6C")]
	private sealed class <NewBezier>c__Iterator3<T> : IEnumerable, IEnumerable<Vector3>, IEnumerator, IDisposable, IEnumerator<Vector3>
	{
		[Token(Token = "0x40019DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal IList nodes;

		[Token(Token = "0x40019E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal Vector3[] <points>__1;

		[Token(Token = "0x40019E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal IEnumerable<float> steps;

		[Token(Token = "0x40019E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal IEnumerator<float> $locvar0;

		[Token(Token = "0x40019E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal float <step>__2;

		[Token(Token = "0x40019E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal ToVector3<T> toVector3;

		[Token(Token = "0x40019E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal Function ease;

		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal float maxStep;

		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal Vector3 $current;

		[Token(Token = "0x40019E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal bool $disposing;

		[Token(Token = "0x40019E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int $PC;

		[Token(Token = "0x17000288")]
		private Vector3 System.Collections.Generic.IEnumerator<UnityEngine.Vector3>.Current
		{
			[Token(Token = "0x60023C4")]
			[DebuggerHidden]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000289")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023C5")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023C2")]
		[DebuggerHidden]
		public <NewBezier>c__Iterator3()
		{
		}

		[Token(Token = "0x60023C3")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023C6")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023C7")]
		[DebuggerHidden]
		public void Reset()
		{
		}

		[Token(Token = "0x60023C8")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60023C9")]
		[DebuggerHidden]
		private IEnumerator<Vector3> System.Collections.Generic.IEnumerable<UnityEngine.Vector3>.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x2000518")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CFEC", Offset = "0xE9CFEC")]
	private sealed class <NewCatmullRom>c__Iterator4<T> : IEnumerable, IEnumerable<Vector3>, IEnumerator, IDisposable, IEnumerator<Vector3>
	{
		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal IList nodes;

		[Token(Token = "0x40019EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal ToVector3<T> toVector3;

		[Token(Token = "0x40019EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int <last>__1;

		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int <current>__2;

		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal bool loop;

		[Token(Token = "0x40019EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int <previous>__3;

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int <start>__3;

		[Token(Token = "0x40019F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int <end>__3;

		[Token(Token = "0x40019F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int <next>__3;

		[Token(Token = "0x40019F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int slices;

		[Token(Token = "0x40019F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int <stepCount>__3;

		[Token(Token = "0x40019F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int <step>__4;

		[Token(Token = "0x40019F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal Vector3 $current;

		[Token(Token = "0x40019F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal bool $disposing;

		[Token(Token = "0x40019F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int $PC;

		[Token(Token = "0x1700028A")]
		private Vector3 System.Collections.Generic.IEnumerator<UnityEngine.Vector3>.Current
		{
			[Token(Token = "0x60023CC")]
			[DebuggerHidden]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700028B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023CD")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023CA")]
		[DebuggerHidden]
		public <NewCatmullRom>c__Iterator4()
		{
		}

		[Token(Token = "0x60023CB")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023CE")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023CF")]
		[DebuggerHidden]
		public void Reset()
		{
		}

		[Token(Token = "0x60023D0")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60023D1")]
		[DebuggerHidden]
		private IEnumerator<Vector3> System.Collections.Generic.IEnumerable<UnityEngine.Vector3>.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CBFC", Offset = "0xE9CBFC")]
	private static Function <>f__mg$cache0;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CC0C", Offset = "0xE9CC0C")]
	private static Function <>f__mg$cache1;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CC1C", Offset = "0xE9CC1C")]
	private static Function <>f__mg$cache2;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CC2C", Offset = "0xE9CC2C")]
	private static Function <>f__mg$cache3;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CC3C", Offset = "0xE9CC3C")]
	private static Function <>f__mg$cache4;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CC4C", Offset = "0xE9CC4C")]
	private static Function <>f__mg$cache5;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CC5C", Offset = "0xE9CC5C")]
	private static Function <>f__mg$cache6;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CC6C", Offset = "0xE9CC6C")]
	private static Function <>f__mg$cache7;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CC7C", Offset = "0xE9CC7C")]
	private static Function <>f__mg$cache8;

	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CC8C", Offset = "0xE9CC8C")]
	private static Function <>f__mg$cache9;

	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CC9C", Offset = "0xE9CC9C")]
	private static Function <>f__mg$cacheA;

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CCAC", Offset = "0xE9CCAC")]
	private static Function <>f__mg$cacheB;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CCBC", Offset = "0xE9CCBC")]
	private static Function <>f__mg$cacheC;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CCCC", Offset = "0xE9CCCC")]
	private static Function <>f__mg$cacheD;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CCDC", Offset = "0xE9CCDC")]
	private static Function <>f__mg$cacheE;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CCEC", Offset = "0xE9CCEC")]
	private static Function <>f__mg$cacheF;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CCFC", Offset = "0xE9CCFC")]
	private static Function <>f__mg$cache10;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CD0C", Offset = "0xE9CD0C")]
	private static Function <>f__mg$cache11;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CD1C", Offset = "0xE9CD1C")]
	private static Function <>f__mg$cache12;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CD2C", Offset = "0xE9CD2C")]
	private static Function <>f__mg$cache13;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CD3C", Offset = "0xE9CD3C")]
	private static Function <>f__mg$cache14;

	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CD4C", Offset = "0xE9CD4C")]
	private static Function <>f__mg$cache15;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CD5C", Offset = "0xE9CD5C")]
	private static ToVector3<Transform> <>f__mg$cache16;

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CD6C", Offset = "0xE9CD6C")]
	private static ToVector3<Transform> <>f__mg$cache17;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CD7C", Offset = "0xE9CD7C")]
	private static ToVector3<Vector3> <>f__mg$cache18;

	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CD8C", Offset = "0xE9CD8C")]
	private static ToVector3<Vector3> <>f__mg$cache19;

	[Token(Token = "0x4000710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CD9C", Offset = "0xE9CD9C")]
	private static ToVector3<Transform> <>f__mg$cache1A;

	[Token(Token = "0x4000711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9CDAC", Offset = "0xE9CDAC")]
	private static ToVector3<Vector3> <>f__mg$cache1B;

	[Token(Token = "0x6000AEF")]
	[Address(RVA = "0x940508", Offset = "0x940508", VA = "0x940508")]
	public NcInterpolate()
	{
	}

	[Token(Token = "0x6000AF0")]
	[Address(RVA = "0x940510", Offset = "0x940510", VA = "0x940510")]
	private static Vector3 Identity(Vector3 v)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000AF1")]
	[Address(RVA = "0x940520", Offset = "0x940520", VA = "0x940520")]
	private static Vector3 TransformDotPosition(Transform t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000AF2")]
	[Address(RVA = "0x940550", Offset = "0x940550", VA = "0x940550")]
	[DebuggerHidden]
	private static IEnumerable<float> NewTimer(float duration)
	{
		return null;
	}

	[Token(Token = "0x6000AF3")]
	[Address(RVA = "0x9405FC", Offset = "0x9405FC", VA = "0x9405FC")]
	[DebuggerHidden]
	private static IEnumerable<float> NewCounter(int start, int end, int step)
	{
		return null;
	}

	[Token(Token = "0x6000AF4")]
	[Address(RVA = "0x9406C4", Offset = "0x9406C4", VA = "0x9406C4")]
	public static IEnumerator NewEase(Function ease, Vector3 start, Vector3 end, float duration)
	{
		return null;
	}

	[Token(Token = "0x6000AF5")]
	[Address(RVA = "0x940830", Offset = "0x940830", VA = "0x940830")]
	public static IEnumerator NewEase(Function ease, Vector3 start, Vector3 end, int slices)
	{
		return null;
	}

	[Token(Token = "0x6000AF6")]
	[Address(RVA = "0x94072C", Offset = "0x94072C", VA = "0x94072C")]
	[DebuggerHidden]
	private static IEnumerator NewEase(Function ease, Vector3 start, Vector3 end, float total, IEnumerable<float> driver)
	{
		return null;
	}

	[Token(Token = "0x6000AF7")]
	[Address(RVA = "0x9408AC", Offset = "0x9408AC", VA = "0x9408AC")]
	private static Vector3 Ease(Function ease, Vector3 start, Vector3 distance, float elapsedTime, float duration)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000AF8")]
	[Address(RVA = "0x940C1C", Offset = "0x940C1C", VA = "0x940C1C")]
	public static Function Ease(EaseType type)
	{
		return null;
	}

	[Token(Token = "0x6000AF9")]
	[Address(RVA = "0x9417F4", Offset = "0x9417F4", VA = "0x9417F4")]
	public static IEnumerable<Vector3> NewBezier(Function ease, Transform[] nodes, float duration)
	{
		return null;
	}

	[Token(Token = "0x6000AFA")]
	[Address(RVA = "0x941920", Offset = "0x941920", VA = "0x941920")]
	public static IEnumerable<Vector3> NewBezier(Function ease, Transform[] nodes, int slices)
	{
		return null;
	}

	[Token(Token = "0x6000AFB")]
	[Address(RVA = "0x941A54", Offset = "0x941A54", VA = "0x941A54")]
	public static IEnumerable<Vector3> NewBezier(Function ease, Vector3[] points, float duration)
	{
		return null;
	}

	[Token(Token = "0x6000AFC")]
	[Address(RVA = "0x941B80", Offset = "0x941B80", VA = "0x941B80")]
	public static IEnumerable<Vector3> NewBezier(Function ease, Vector3[] points, int slices)
	{
		return null;
	}

	[Token(Token = "0x6000AFD")]
	[DebuggerHidden]
	private static IEnumerable<Vector3> NewBezier<T>(Function ease, IList nodes, ToVector3<T> toVector3, float maxStep, IEnumerable<float> steps)
	{
		return null;
	}

	[Token(Token = "0x6000AFE")]
	[Address(RVA = "0x941CB4", Offset = "0x941CB4", VA = "0x941CB4")]
	private static Vector3 Bezier(Function ease, Vector3[] points, float elapsedTime, float duration)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000AFF")]
	[Address(RVA = "0x941F70", Offset = "0x941F70", VA = "0x941F70")]
	public static IEnumerable<Vector3> NewCatmullRom(Transform[] nodes, int slices, bool loop)
	{
		return null;
	}

	[Token(Token = "0x6000B00")]
	[Address(RVA = "0x942080", Offset = "0x942080", VA = "0x942080")]
	public static IEnumerable<Vector3> NewCatmullRom(Vector3[] points, int slices, bool loop)
	{
		return null;
	}

	[Token(Token = "0x6000B01")]
	[DebuggerHidden]
	private static IEnumerable<Vector3> NewCatmullRom<T>(IList nodes, ToVector3<T> toVector3, int slices, bool loop)
	{
		return null;
	}

	[Token(Token = "0x6000B02")]
	[Address(RVA = "0x942190", Offset = "0x942190", VA = "0x942190")]
	private static Vector3 CatmullRom(Vector3 previous, Vector3 start, Vector3 end, Vector3 next, float elapsedTime, float duration)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000B03")]
	[Address(RVA = "0x9423BC", Offset = "0x9423BC", VA = "0x9423BC")]
	private static float Linear(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B04")]
	[Address(RVA = "0x9423EC", Offset = "0x9423EC", VA = "0x9423EC")]
	private static float EaseInQuad(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B05")]
	[Address(RVA = "0x942428", Offset = "0x942428", VA = "0x942428")]
	private static float EaseOutQuad(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B06")]
	[Address(RVA = "0x942470", Offset = "0x942470", VA = "0x942470")]
	private static float EaseInOutQuad(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B07")]
	[Address(RVA = "0x942508", Offset = "0x942508", VA = "0x942508")]
	private static float EaseInCubic(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B08")]
	[Address(RVA = "0x942548", Offset = "0x942548", VA = "0x942548")]
	private static float EaseOutCubic(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B09")]
	[Address(RVA = "0x9425A0", Offset = "0x9425A0", VA = "0x9425A0")]
	private static float EaseInOutCubic(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B0A")]
	[Address(RVA = "0x942630", Offset = "0x942630", VA = "0x942630")]
	private static float EaseInQuart(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B0B")]
	[Address(RVA = "0x942674", Offset = "0x942674", VA = "0x942674")]
	private static float EaseOutQuart(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B0C")]
	[Address(RVA = "0x9426C8", Offset = "0x9426C8", VA = "0x9426C8")]
	private static float EaseInOutQuart(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B0D")]
	[Address(RVA = "0x942764", Offset = "0x942764", VA = "0x942764")]
	private static float EaseInQuint(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B0E")]
	[Address(RVA = "0x9427AC", Offset = "0x9427AC", VA = "0x9427AC")]
	private static float EaseOutQuint(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B0F")]
	[Address(RVA = "0x94280C", Offset = "0x94280C", VA = "0x94280C")]
	private static float EaseInOutQuint(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B10")]
	[Address(RVA = "0x9428AC", Offset = "0x9428AC", VA = "0x9428AC")]
	private static float EaseInSine(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B11")]
	[Address(RVA = "0x942978", Offset = "0x942978", VA = "0x942978")]
	private static float EaseOutSine(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B12")]
	[Address(RVA = "0x942A40", Offset = "0x942A40", VA = "0x942A40")]
	private static float EaseInOutSine(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B13")]
	[Address(RVA = "0x942B20", Offset = "0x942B20", VA = "0x942B20")]
	private static float EaseInExpo(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B14")]
	[Address(RVA = "0x942BF4", Offset = "0x942BF4", VA = "0x942BF4")]
	private static float EaseOutExpo(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B15")]
	[Address(RVA = "0x942CC8", Offset = "0x942CC8", VA = "0x942CC8")]
	private static float EaseInOutExpo(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B16")]
	[Address(RVA = "0x942E2C", Offset = "0x942E2C", VA = "0x942E2C")]
	private static float EaseInCirc(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B17")]
	[Address(RVA = "0x942F14", Offset = "0x942F14", VA = "0x942F14")]
	private static float EaseOutCirc(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000B18")]
	[Address(RVA = "0x943004", Offset = "0x943004", VA = "0x943004")]
	private static float EaseInOutCirc(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}
}
[Token(Token = "0x2000177")]
public class NsRenderManager : MonoBehaviour
{
	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<Component> m_RenderEventCalls;

	[Token(Token = "0x6000B21")]
	[Address(RVA = "0x1B15838", Offset = "0x1B15838", VA = "0x1B15838")]
	public NsRenderManager()
	{
	}

	[Token(Token = "0x6000B22")]
	[Address(RVA = "0x1B15840", Offset = "0x1B15840", VA = "0x1B15840")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B23")]
	[Address(RVA = "0x1B15844", Offset = "0x1B15844", VA = "0x1B15844")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B24")]
	[Address(RVA = "0x1B15848", Offset = "0x1B15848", VA = "0x1B15848")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B25")]
	[Address(RVA = "0x1B1584C", Offset = "0x1B1584C", VA = "0x1B1584C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B26")]
	[Address(RVA = "0x1B15850", Offset = "0x1B15850", VA = "0x1B15850")]
	private void OnPreRender()
	{
	}

	[Token(Token = "0x6000B27")]
	[Address(RVA = "0x1B159E0", Offset = "0x1B159E0", VA = "0x1B159E0")]
	private void OnRenderObject()
	{
	}

	[Token(Token = "0x6000B28")]
	[Address(RVA = "0x1B159E4", Offset = "0x1B159E4", VA = "0x1B159E4")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000B29")]
	[Address(RVA = "0x1B15B74", Offset = "0x1B15B74", VA = "0x1B15B74")]
	public void AddRenderEventCall(Component tarCom)
	{
	}

	[Token(Token = "0x6000B2A")]
	[Address(RVA = "0x1B15C64", Offset = "0x1B15C64", VA = "0x1B15C64")]
	public void RemoveRenderEventCall(Component tarCom)
	{
	}
}
[Token(Token = "0x2000178")]
public class NcAddForce : NcEffectBehaviour
{
	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 m_AddForce;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 m_RandomRange;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public ForceMode m_ForceMode;

	[Token(Token = "0x6000B2B")]
	[Address(RVA = "0x1979130", Offset = "0x1979130", VA = "0x1979130")]
	public NcAddForce()
	{
	}

	[Token(Token = "0x6000B2C")]
	[Address(RVA = "0x1979230", Offset = "0x1979230", VA = "0x1979230")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B2D")]
	[Address(RVA = "0x1979258", Offset = "0x1979258", VA = "0x1979258")]
	private void AddForce()
	{
	}

	[Token(Token = "0x6000B2E")]
	[Address(RVA = "0x19793F8", Offset = "0x19793F8", VA = "0x19793F8", Slot = "5")]
	public override void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}
}
[Token(Token = "0x2000179")]
public class NcAttachPrefab : NcEffectBehaviour
{
	[Token(Token = "0x200017A")]
	public enum AttachType
	{
		[Token(Token = "0x400073F")]
		Active,
		[Token(Token = "0x4000740")]
		Destroy
	}

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public AttachType m_AttachType;

	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_fDelayTime;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_fRepeatTime;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int m_nRepeatCount;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public GameObject m_AttachPrefab;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_fPrefabSpeed;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_fPrefabLifeTime;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool m_bWorldSpace;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 m_AddStartPos;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 m_AccumStartRot;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public Vector3 m_RandomRange;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public bool m_bDetachParent;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	protected float m_fStartTime;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected int m_nCreateCount;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	protected bool m_bStartAttach;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected GameObject m_CreateGameObject;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	protected bool m_bEnabled;

	[Token(Token = "0x6000B2F")]
	[Address(RVA = "0x19793FC", Offset = "0x19793FC", VA = "0x19793FC")]
	public NcAttachPrefab()
	{
	}

	[Token(Token = "0x6000B30")]
	[Address(RVA = "0x1979518", Offset = "0x1979518", VA = "0x1979518", Slot = "4")]
	public override int GetAnimationState()
	{
		return default(int);
	}

	[Token(Token = "0x6000B31")]
	[Address(RVA = "0x1979688", Offset = "0x1979688", VA = "0x1979688")]
	public void CreateAttachPrefabImmediately()
	{
	}

	[Token(Token = "0x6000B32")]
	[Address(RVA = "0x197986C", Offset = "0x197986C", VA = "0x197986C")]
	public GameObject GetInstanceObject()
	{
		return null;
	}

	[Token(Token = "0x6000B33")]
	[Address(RVA = "0x197990C", Offset = "0x197990C", VA = "0x197990C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B34")]
	[Address(RVA = "0x1979A38", Offset = "0x1979A38", VA = "0x1979A38")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B35")]
	[Address(RVA = "0x197968C", Offset = "0x197968C", VA = "0x197968C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B36")]
	[Address(RVA = "0x197A168", Offset = "0x197A168", VA = "0x197A168")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000B37")]
	[Address(RVA = "0x1979A3C", Offset = "0x1979A3C", VA = "0x1979A3C")]
	private void CreateAttachPrefab()
	{
	}

	[Token(Token = "0x6000B38")]
	[Address(RVA = "0x197A260", Offset = "0x197A260", VA = "0x197A260")]
	private GameObject GetTargetGameObject()
	{
		return null;
	}

	[Token(Token = "0x6000B39")]
	[Address(RVA = "0x197A30C", Offset = "0x197A30C", VA = "0x197A30C", Slot = "5")]
	public override void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}

	[Token(Token = "0x6000B3A")]
	[Address(RVA = "0x197A344", Offset = "0x197A344", VA = "0x197A344")]
	public static void Ng_ChangeLayerWithChild(GameObject rootObj, int nLayer)
	{
	}
}
[Token(Token = "0x200017B")]
public class NcAttachSound : NcEffectBehaviour
{
	[Token(Token = "0x4000741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float m_fDelayTime;

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_fRepeatTime;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int m_nRepeatCount;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioClip m_AudioClip;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int m_nPriority;

	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool m_bLoop;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_fVolume;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_fPitch;

	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected AudioSource m_AudioSource;

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected float m_fStartTime;

	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	protected int m_nCreateCount;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected bool m_bStartAttach;

	[Token(Token = "0x6000B3B")]
	[Address(RVA = "0x9338D0", Offset = "0x9338D0", VA = "0x9338D0")]
	public NcAttachSound()
	{
	}

	[Token(Token = "0x6000B3C")]
	[Address(RVA = "0x933990", Offset = "0x933990", VA = "0x933990", Slot = "4")]
	public override int GetAnimationState()
	{
		return default(int);
	}

	[Token(Token = "0x6000B3D")]
	[Address(RVA = "0x933B9C", Offset = "0x933B9C", VA = "0x933B9C")]
	public void Replay()
	{
	}

	[Token(Token = "0x6000B3E")]
	[Address(RVA = "0x933BA8", Offset = "0x933BA8", VA = "0x933BA8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B3F")]
	[Address(RVA = "0x933D68", Offset = "0x933D68", VA = "0x933D68")]
	private void CreateAttachSound()
	{
	}

	[Token(Token = "0x6000B40")]
	[Address(RVA = "0x933ED8", Offset = "0x933ED8", VA = "0x933ED8", Slot = "5")]
	public override void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}
}
[Token(Token = "0x200017C")]
public class NcAutoDestruct : NcEffectBehaviour
{
	[Token(Token = "0x200017D")]
	public enum CollisionType
	{
		[Token(Token = "0x400075B")]
		NONE,
		[Token(Token = "0x400075C")]
		COLLISION,
		[Token(Token = "0x400075D")]
		WORLD_Y
	}

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float m_fLifeTime;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_fSmoothDestroyTime;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool m_bDisableEmit;

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool m_bSmoothHide;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool m_bMeshFilterOnlySmoothHide;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	protected bool m_bEndNcCurveAnimation;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CollisionType m_CollisionType;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LayerMask m_CollisionLayer;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_fCollisionRadius;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_fDestructPosY;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected float m_fStartTime;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected float m_fStartDestroyTime;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected NcCurveAnimation m_NcCurveAnimation;

	[Token(Token = "0x6000B41")]
	[Address(RVA = "0x933EF8", Offset = "0x933EF8", VA = "0x933EF8")]
	public NcAutoDestruct()
	{
	}

	[Token(Token = "0x6000B42")]
	[Address(RVA = "0x933FBC", Offset = "0x933FBC", VA = "0x933FBC")]
	public static NcAutoDestruct CreateAutoDestruct(GameObject baseGameObject, float fLifeTime, float fDestroyTime, bool bSmoothHide, bool bMeshFilterOnlySmoothHide)
	{
		return null;
	}

	[Token(Token = "0x6000B43")]
	[Address(RVA = "0x934728", Offset = "0x934728", VA = "0x934728")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B44")]
	[Address(RVA = "0x9340FC", Offset = "0x9340FC", VA = "0x9340FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B45")]
	[Address(RVA = "0x9341A4", Offset = "0x9341A4", VA = "0x9341A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B46")]
	[Address(RVA = "0x934AEC", Offset = "0x934AEC", VA = "0x934AEC")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000B47")]
	[Address(RVA = "0x934A34", Offset = "0x934A34", VA = "0x934A34")]
	private void StartDestroy()
	{
	}

	[Token(Token = "0x6000B48")]
	[Address(RVA = "0x934FBC", Offset = "0x934FBC", VA = "0x934FBC", Slot = "5")]
	public override void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}

	[Token(Token = "0x6000B49")]
	[Address(RVA = "0x93499C", Offset = "0x93499C", VA = "0x93499C")]
	private void AutoDestruct()
	{
	}
}
[Token(Token = "0x200017E")]
public class NcBillboard : NcEffectBehaviour
{
	[Token(Token = "0x200017F")]
	public enum AXIS_TYPE
	{
		[Token(Token = "0x4000769")]
		AXIS_FORWARD,
		[Token(Token = "0x400076A")]
		AXIS_BACK,
		[Token(Token = "0x400076B")]
		AXIS_RIGHT,
		[Token(Token = "0x400076C")]
		AXIS_LEFT,
		[Token(Token = "0x400076D")]
		AXIS_UP,
		[Token(Token = "0x400076E")]
		AXIS_DOWN
	}

	[Token(Token = "0x2000180")]
	public enum ROTATION
	{
		[Token(Token = "0x4000770")]
		NONE,
		[Token(Token = "0x4000771")]
		RND,
		[Token(Token = "0x4000772")]
		ROTATE
	}

	[Token(Token = "0x2000181")]
	public enum AXIS
	{
		[Token(Token = "0x4000774")]
		X,
		[Token(Token = "0x4000775")]
		Y,
		[Token(Token = "0x4000776")]
		Z
	}

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool m_bCameraLookAt;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool m_bFixedObjectUp;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	public bool m_bFixedStand;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AXIS_TYPE m_FrontAxis;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public ROTATION m_RatationMode;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AXIS m_RatationAxis;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_fRotationValue;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected float m_fRndValue;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected float m_fTotalRotationValue;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected Quaternion m_qOiginal;

	[Token(Token = "0x6000B4A")]
	[Address(RVA = "0x934FDC", Offset = "0x934FDC", VA = "0x934FDC")]
	public NcBillboard()
	{
	}

	[Token(Token = "0x6000B4B")]
	[Address(RVA = "0x93507C", Offset = "0x93507C", VA = "0x93507C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B4C")]
	[Address(RVA = "0x935080", Offset = "0x935080", VA = "0x935080")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B4D")]
	[Address(RVA = "0x935084", Offset = "0x935084", VA = "0x935084")]
	public void UpdateBillboard()
	{
	}

	[Token(Token = "0x6000B4E")]
	[Address(RVA = "0x935A08", Offset = "0x935A08", VA = "0x935A08")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B4F")]
	[Address(RVA = "0x9350CC", Offset = "0x9350CC", VA = "0x9350CC")]
	private void Update()
	{
	}
}
[Token(Token = "0x2000182")]
public class NcCurveAnimation : NcEffectAniBehaviour
{
	[Token(Token = "0x2000183")]
	private class NcComparerCurve : IComparer<NcInfoCurve>
	{
		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static float m_fEqualRange;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		protected static float m_fHDiv;

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x93936C", Offset = "0x93936C", VA = "0x93936C")]
		public NcComparerCurve()
		{
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x93958C", Offset = "0x93958C", VA = "0x93958C", Slot = "4")]
		public int Compare(NcInfoCurve a, NcInfoCurve b)
		{
			return default(int);
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x939374", Offset = "0x939374", VA = "0x939374")]
		public static int GetSortGroup(NcInfoCurve info)
		{
			return default(int);
		}
	}

	[Serializable]
	[Token(Token = "0x2000184")]
	public class NcInfoCurve
	{
		[Token(Token = "0x2000185")]
		public enum APPLY_TYPE
		{
			[Token(Token = "0x4000796")]
			NONE,
			[Token(Token = "0x4000797")]
			POSITION,
			[Token(Token = "0x4000798")]
			ROTATION,
			[Token(Token = "0x4000799")]
			SCALE,
			[Token(Token = "0x400079A")]
			COLOR,
			[Token(Token = "0x400079B")]
			TEXTUREUV
		}

		[Token(Token = "0x4000785")]
		protected const float m_fOverDraw = 0.2f;

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bEnabled;

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string m_CurveName;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve m_AniCurve;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] m_TypeName;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public APPLY_TYPE m_ApplyType;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool[] m_bApplyOption;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool m_bRecursively;

		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_fValueScale;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector4 m_ToColor;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int m_nTag;

		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int m_nSortGroup;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector4 m_OriginalValue;

		[Token(Token = "0x4000792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector4 m_BeforeValue;

		[Token(Token = "0x4000793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector4[] m_ChildOriginalColorValues;

		[Token(Token = "0x4000794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector4[] m_ChildBeforeColorValues;

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x938D5C", Offset = "0x938D5C", VA = "0x938D5C")]
		public NcInfoCurve()
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x9398E0", Offset = "0x9398E0", VA = "0x9398E0")]
		public bool IsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x9398E8", Offset = "0x9398E8", VA = "0x9398E8")]
		public void SetEnabled(bool bEnable)
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x9398F0", Offset = "0x9398F0", VA = "0x9398F0")]
		public string GetCurveName()
		{
			return null;
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x938454", Offset = "0x938454", VA = "0x938454")]
		public NcInfoCurve GetClone()
		{
			return null;
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x9398F8", Offset = "0x9398F8", VA = "0x9398F8")]
		public void CopyTo(NcInfoCurve target)
		{
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x939AEC", Offset = "0x939AEC", VA = "0x939AEC")]
		public int GetValueCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x939B14", Offset = "0x939B14", VA = "0x939B14")]
		public string GetValueName(int nIndex)
		{
			return null;
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x93A448", Offset = "0x93A448", VA = "0x93A448")]
		public void SetDefaultValueScale()
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x93A4A8", Offset = "0x93A4A8", VA = "0x93A4A8")]
		public Rect GetFixedDrawRange()
		{
			return default(Rect);
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x93A4FC", Offset = "0x93A4FC", VA = "0x93A4FC")]
		public Rect GetVariableDrawRange()
		{
			return default(Rect);
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x93A904", Offset = "0x93A904", VA = "0x93A904")]
		public Rect GetEditRange()
		{
			return default(Rect);
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x93A94C", Offset = "0x93A94C", VA = "0x93A94C")]
		public void NormalizeCurveTime()
		{
		}
	}

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	public List<NcInfoCurve> m_CurveInfoList;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_fDelayTime;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_fDurationTime;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool m_bAutoDestruct;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected float m_fStartTime;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected float m_fElapsedRate;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	protected Transform m_Transform;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected string m_ColorName;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected Material m_MainMaterial;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected string[] m_ChildColorNames;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected Renderer[] m_ChildRenderers;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected NcUvAnimation m_NcUvAnimation;

	[Token(Token = "0x6000B50")]
	[Address(RVA = "0x935A60", Offset = "0x935A60", VA = "0x935A60")]
	public NcCurveAnimation()
	{
	}

	[Token(Token = "0x6000B51")]
	[Address(RVA = "0x935B18", Offset = "0x935B18", VA = "0x935B18", Slot = "4")]
	public override int GetAnimationState()
	{
		return default(int);
	}

	[Token(Token = "0x6000B52")]
	[Address(RVA = "0x935C04", Offset = "0x935C04", VA = "0x935C04", Slot = "7")]
	public override void ResetAnimation()
	{
	}

	[Token(Token = "0x6000B53")]
	[Address(RVA = "0x937480", Offset = "0x937480", VA = "0x937480")]
	public float GetRepeatedRate()
	{
		return default(float);
	}

	[Token(Token = "0x6000B54")]
	[Address(RVA = "0x937488", Offset = "0x937488", VA = "0x937488")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B55")]
	[Address(RVA = "0x93748C", Offset = "0x93748C", VA = "0x93748C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B56")]
	[Address(RVA = "0x937694", Offset = "0x937694", VA = "0x937694")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000B57")]
	[Address(RVA = "0x935C6C", Offset = "0x935C6C", VA = "0x935C6C")]
	private void InitAnimation()
	{
	}

	[Token(Token = "0x6000B58")]
	[Address(RVA = "0x93673C", Offset = "0x93673C", VA = "0x93673C")]
	private void UpdateAnimation(float fElapsedRate)
	{
	}

	[Token(Token = "0x6000B59")]
	[Address(RVA = "0x937CDC", Offset = "0x937CDC", VA = "0x937CDC")]
	private void SetChildMaterialColor(NcInfoCurve curveInfo, float fValue, int arrayIndex)
	{
	}

	[Token(Token = "0x6000B5A")]
	[Address(RVA = "0x938124", Offset = "0x938124", VA = "0x938124")]
	private float GetChildNextColorValue(NcInfoCurve curveInfo, int nIndex, float fValue, int arrayIndex)
	{
		return default(float);
	}

	[Token(Token = "0x6000B5B")]
	[Address(RVA = "0x937B04", Offset = "0x937B04", VA = "0x937B04")]
	private float GetNextValue(NcInfoCurve curveInfo, int nIndex, float fValue)
	{
		return default(float);
	}

	[Token(Token = "0x6000B5C")]
	[Address(RVA = "0x937BD8", Offset = "0x937BD8", VA = "0x937BD8")]
	private float GetNextScale(NcInfoCurve curveInfo, int nIndex, float fValue)
	{
		return default(float);
	}

	[Token(Token = "0x6000B5D")]
	[Address(RVA = "0x934AE4", Offset = "0x934AE4", VA = "0x934AE4")]
	public float GetElapsedRate()
	{
		return default(float);
	}

	[Token(Token = "0x6000B5E")]
	[Address(RVA = "0x938240", Offset = "0x938240", VA = "0x938240")]
	public void CopyTo(NcCurveAnimation target, bool bCurveOnly)
	{
	}

	[Token(Token = "0x6000B5F")]
	[Address(RVA = "0x93867C", Offset = "0x93867C", VA = "0x93867C")]
	public void AppendTo(NcCurveAnimation target, bool bCurveOnly)
	{
	}

	[Token(Token = "0x6000B60")]
	[Address(RVA = "0x93889C", Offset = "0x93889C", VA = "0x93889C")]
	public NcInfoCurve GetCurveInfo(int nIndex)
	{
		return null;
	}

	[Token(Token = "0x6000B61")]
	[Address(RVA = "0x938954", Offset = "0x938954", VA = "0x938954")]
	public NcInfoCurve GetCurveInfo(string curveName)
	{
		return null;
	}

	[Token(Token = "0x6000B62")]
	[Address(RVA = "0x938AFC", Offset = "0x938AFC", VA = "0x938AFC")]
	public NcInfoCurve SetCurveInfo(int nIndex, NcInfoCurve newInfo)
	{
		return null;
	}

	[Token(Token = "0x6000B63")]
	[Address(RVA = "0x938BEC", Offset = "0x938BEC", VA = "0x938BEC")]
	public int AddCurveInfo()
	{
		return default(int);
	}

	[Token(Token = "0x6000B64")]
	[Address(RVA = "0x938ED8", Offset = "0x938ED8", VA = "0x938ED8")]
	public int AddCurveInfo(NcInfoCurve addCurveInfo)
	{
		return default(int);
	}

	[Token(Token = "0x6000B65")]
	[Address(RVA = "0x938FD4", Offset = "0x938FD4", VA = "0x938FD4")]
	public void DeleteCurveInfo(int nIndex)
	{
	}

	[Token(Token = "0x6000B66")]
	[Address(RVA = "0x9390D0", Offset = "0x9390D0", VA = "0x9390D0")]
	public void ClearAllCurveInfo()
	{
	}

	[Token(Token = "0x6000B67")]
	[Address(RVA = "0x93913C", Offset = "0x93913C", VA = "0x93913C")]
	public int GetCurveInfoCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000B68")]
	[Address(RVA = "0x9391B0", Offset = "0x9391B0", VA = "0x9391B0")]
	public void SortCurveInfo()
	{
	}

	[Token(Token = "0x6000B69")]
	[Address(RVA = "0x9394C0", Offset = "0x9394C0", VA = "0x9394C0")]
	public bool CheckInvalidOption()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B6A")]
	[Address(RVA = "0x939558", Offset = "0x939558", VA = "0x939558")]
	public bool CheckInvalidOption(int nSrcIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B6B")]
	[Address(RVA = "0x93956C", Offset = "0x93956C", VA = "0x93956C", Slot = "5")]
	public override void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}

	[Token(Token = "0x6000B6C")]
	[Address(RVA = "0x9378A4", Offset = "0x9378A4", VA = "0x9378A4")]
	public static string Ng_GetMaterialColorName(Material mat)
	{
		return null;
	}
}
[Token(Token = "0x2000186")]
public class NcDelayActive : NcEffectBehaviour
{
	[Token(Token = "0x400079C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string NotAvailable;

	[Token(Token = "0x400079D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_fDelayTime;

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool m_bActiveRecursively;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected float m_fAliveTime;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_fParentDelayTime;

	[Token(Token = "0x40007A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected bool m_bAddedInvoke;

	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected float m_fStartedTime;

	[Token(Token = "0x6000B7F")]
	[Address(RVA = "0x93AEAC", Offset = "0x93AEAC", VA = "0x93AEAC")]
	public NcDelayActive()
	{
	}

	[Token(Token = "0x6000B80")]
	[Address(RVA = "0x93AF54", Offset = "0x93AF54", VA = "0x93AF54")]
	public float GetParentDelayTime(bool bCheckStarted)
	{
		return default(float);
	}
}
[Token(Token = "0x2000187")]
public class NcDetachParent : NcEffectBehaviour
{
	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool m_bFollowParentTransform;

	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool m_bParentHideToStartDestroy;

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_fSmoothDestroyTime;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool m_bDisableEmit;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool m_bSmoothHide;

	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool m_bMeshFilterOnlySmoothHide;

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	protected bool m_bStartDetach;

	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected float m_fStartDestroyTime;

	[Token(Token = "0x40007AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected GameObject m_ParentGameObject;

	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected NcTransformTool m_OriginalPos;

	[Token(Token = "0x6000B81")]
	[Address(RVA = "0x93B1F0", Offset = "0x93B1F0", VA = "0x93B1F0")]
	public NcDetachParent()
	{
	}

	[Token(Token = "0x6000B82")]
	[Address(RVA = "0x93B31C", Offset = "0x93B31C", VA = "0x93B31C")]
	public void SetDestroyValue(bool bParentHideToStart, bool bStartDisableEmit, float fSmoothDestroyTime, bool bSmoothHide, bool bMeshFilterOnlySmoothHide)
	{
	}

	[Token(Token = "0x6000B83")]
	[Address(RVA = "0x93B340", Offset = "0x93B340", VA = "0x93B340")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B84")]
	[Address(RVA = "0x93C0C0", Offset = "0x93C0C0", VA = "0x93C0C0")]
	private void StartDestroy()
	{
	}

	[Token(Token = "0x6000B85")]
	[Address(RVA = "0x93C3EC", Offset = "0x93C3EC", VA = "0x93C3EC", Slot = "5")]
	public override void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}
}
[Token(Token = "0x2000188")]
public class NcDuplicator : NcEffectBehaviour
{
	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float m_fDuplicateTime;

	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_nDuplicateCount;

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_fDuplicateLifeTime;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 m_AddStartPos;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 m_AccumStartRot;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 m_RandomRange;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected int m_nCreateCount;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected float m_fStartTime;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected GameObject m_ClonObject;

	[Token(Token = "0x40007B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected bool m_bInvoke;

	[Token(Token = "0x6000B86")]
	[Address(RVA = "0x93D414", Offset = "0x93D414", VA = "0x93D414")]
	public NcDuplicator()
	{
	}

	[Token(Token = "0x6000B87")]
	[Address(RVA = "0x93D544", Offset = "0x93D544", VA = "0x93D544", Slot = "4")]
	public override int GetAnimationState()
	{
		return default(int);
	}

	[Token(Token = "0x6000B88")]
	[Address(RVA = "0x93D614", Offset = "0x93D614", VA = "0x93D614")]
	public GameObject GetCloneObject()
	{
		return null;
	}

	[Token(Token = "0x6000B89")]
	[Address(RVA = "0x93D61C", Offset = "0x93D61C", VA = "0x93D61C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B8A")]
	[Address(RVA = "0x93DBF4", Offset = "0x93DBF4", VA = "0x93DBF4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000B8B")]
	[Address(RVA = "0x93DCCC", Offset = "0x93DCCC", VA = "0x93DCCC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B8C")]
	[Address(RVA = "0x93E3B0", Offset = "0x93E3B0", VA = "0x93E3B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B8D")]
	[Address(RVA = "0x93D7DC", Offset = "0x93D7DC", VA = "0x93D7DC")]
	private void InitCloneObject()
	{
	}

	[Token(Token = "0x6000B8E")]
	[Address(RVA = "0x93DD90", Offset = "0x93DD90", VA = "0x93DD90")]
	private void CreateCloneObject()
	{
	}

	[Token(Token = "0x6000B8F")]
	[Address(RVA = "0x93E8D4", Offset = "0x93E8D4", VA = "0x93E8D4", Slot = "5")]
	public override void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}
}
[Token(Token = "0x2000189")]
public class NcParticleSpiral : NcEffectBehaviour
{
	[Token(Token = "0x200018A")]
	public struct SpiralSettings
	{
		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int numArms;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int numPPA;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float partSep;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float turnDist;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float vertDist;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float originOffset;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float turnSpeed;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float fade;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float size;
	}

	[Token(Token = "0x40007B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float m_fDelayTime;

	[Token(Token = "0x40007B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected float m_fStartTime;

	[Token(Token = "0x40007B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public GameObject m_ParticlePrefab;

	[Token(Token = "0x40007BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int m_nNumberOfArms;

	[Token(Token = "0x40007BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int m_nParticlesPerArm;

	[Token(Token = "0x40007BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_fParticleSeparation;

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_fTurnDistance;

	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_fVerticalTurnDistance;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float m_fOriginOffset;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float m_fTurnSpeed;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float m_fFadeValue;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float m_fSizeValue;

	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int m_nNumberOfSpawns;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float m_fSpawnRate;

	[Token(Token = "0x40007C5")]
	protected const int Min_numArms = 1;

	[Token(Token = "0x40007C6")]
	protected const int Max_numArms = 10;

	[Token(Token = "0x40007C7")]
	protected const int Min_numPPA = 20;

	[Token(Token = "0x40007C8")]
	protected const int Max_numPPA = 60;

	[Token(Token = "0x40007C9")]
	protected const float Min_partSep = -0.3f;

	[Token(Token = "0x40007CA")]
	protected const float Max_partSep = 0.3f;

	[Token(Token = "0x40007CB")]
	protected const float Min_turnDist = -1.5f;

	[Token(Token = "0x40007CC")]
	protected const float Max_turnDist = 1.5f;

	[Token(Token = "0x40007CD")]
	protected const float Min_vertDist = 0f;

	[Token(Token = "0x40007CE")]
	protected const float Max_vertDist = 0.5f;

	[Token(Token = "0x40007CF")]
	protected const float Min_originOffset = -3f;

	[Token(Token = "0x40007D0")]
	protected const float Max_originOffset = 3f;

	[Token(Token = "0x40007D1")]
	protected const float Min_turnSpeed = -180f;

	[Token(Token = "0x40007D2")]
	protected const float Max_turnSpeed = 180f;

	[Token(Token = "0x40007D3")]
	protected const float Min_fade = -1f;

	[Token(Token = "0x40007D4")]
	protected const float Max_fade = 1f;

	[Token(Token = "0x40007D5")]
	protected const float Min_size = -2f;

	[Token(Token = "0x40007D6")]
	protected const float Max_size = 2f;

	[Token(Token = "0x40007D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float timeOfLastSpawn;

	[Token(Token = "0x40007D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int spawnCount;

	[Token(Token = "0x40007D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int totParticles;

	[Token(Token = "0x40007DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private SpiralSettings defaultSettings;

	[Token(Token = "0x6000B90")]
	[Address(RVA = "0x943D94", Offset = "0x943D94", VA = "0x943D94")]
	public NcParticleSpiral()
	{
	}

	[Token(Token = "0x6000B91")]
	[Address(RVA = "0x943E64", Offset = "0x943E64", VA = "0x943E64", Slot = "4")]
	public override int GetAnimationState()
	{
		return default(int);
	}

	[Token(Token = "0x6000B92")]
	[Address(RVA = "0x943F74", Offset = "0x943F74", VA = "0x943F74")]
	public void RandomizeEditor()
	{
	}

	[Token(Token = "0x6000B93")]
	[Address(RVA = "0x94407C", Offset = "0x94407C", VA = "0x94407C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B94")]
	[Address(RVA = "0x944224", Offset = "0x944224", VA = "0x944224")]
	private void SpawnEffect()
	{
	}

	[Token(Token = "0x6000B95")]
	[Address(RVA = "0x944A0C", Offset = "0x944A0C", VA = "0x944A0C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B96")]
	[Address(RVA = "0x944BE4", Offset = "0x944BE4", VA = "0x944BE4")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000B97")]
	[Address(RVA = "0x9441FC", Offset = "0x9441FC", VA = "0x9441FC")]
	public SpiralSettings getSettings()
	{
		return default(SpiralSettings);
	}

	[Token(Token = "0x6000B98")]
	[Address(RVA = "0x944D20", Offset = "0x944D20", VA = "0x944D20")]
	public SpiralSettings resetEffect(bool killCurrent, SpiralSettings settings)
	{
		return default(SpiralSettings);
	}

	[Token(Token = "0x6000B99")]
	[Address(RVA = "0x945144", Offset = "0x945144", VA = "0x945144")]
	public SpiralSettings resetEffectToDefaults(bool killCurrent)
	{
		return default(SpiralSettings);
	}

	[Token(Token = "0x6000B9A")]
	[Address(RVA = "0x945188", Offset = "0x945188", VA = "0x945188")]
	public SpiralSettings randomizeEffect(bool killCurrent)
	{
		return default(SpiralSettings);
	}

	[Token(Token = "0x6000B9B")]
	[Address(RVA = "0x944E68", Offset = "0x944E68", VA = "0x944E68")]
	private void killCurrentEffects()
	{
	}

	[Token(Token = "0x6000B9C")]
	[Address(RVA = "0x94525C", Offset = "0x94525C", VA = "0x94525C", Slot = "5")]
	public override void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}
}
[Token(Token = "0x200018B")]
public class NcParticleSystem : NcEffectBehaviour
{
	[Token(Token = "0x200018C")]
	public enum ParticleDestruct
	{
		[Token(Token = "0x4000811")]
		NONE,
		[Token(Token = "0x4000812")]
		COLLISION,
		[Token(Token = "0x4000813")]
		WORLD_Y
	}

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	protected bool m_bDisabledEmit;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_fStartDelayTime;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool m_bBurst;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_fBurstRepeatTime;

	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int m_nBurstRepeatCount;

	[Token(Token = "0x40007E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int m_fBurstEmissionCount;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_fEmitTime;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_fSleepTime;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool m_bScaleWithTransform;

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool m_bWorldSpace;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float m_fStartSizeRate;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float m_fStartLifeTimeRate;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float m_fStartEmissionRate;

	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float m_fStartSpeedRate;

	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float m_fRenderLengthRate;

	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float m_fLegacyMinMeshNormalVelocity;

	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float m_fLegacyMaxMeshNormalVelocity;

	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float m_fShurikenSpeedRate;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected bool m_bStart;

	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	protected Vector3 m_OldPos;

	[Token(Token = "0x40007F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected bool m_bLegacyRuntimeScale;

	[Token(Token = "0x40007F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public ParticleDestruct m_ParticleDestruct;

	[Token(Token = "0x40007FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public LayerMask m_CollisionLayer;

	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float m_fCollisionRadius;

	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float m_fDestructPosY;

	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public GameObject m_AttachPrefab;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float m_fPrefabScale;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float m_fPrefabSpeed;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float m_fPrefabLifeTime;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	protected bool m_bSleep;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected float m_fStartTime;

	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	protected float m_fDurationStartTime;

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected float m_fEmitStartTime;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	protected int m_nCreateCount;

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	protected bool m_bScalePreRender;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
	protected bool m_bMeshParticleEmitter;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	protected ParticleSystem m_ps;

	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected ParticleEmitter m_pe;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	protected ParticleAnimator m_pa;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	protected ParticleRenderer m_pr;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	protected ParticleSystem.Particle[] m_BufPsParts;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	protected ParticleSystem.Particle[] m_BufColliderOriParts;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	protected ParticleSystem.Particle[] m_BufColliderConParts;

	[Token(Token = "0x400080F")]
	protected const int m_nAllocBufCount = 50;

	[Token(Token = "0x6000B9D")]
	[Address(RVA = "0x94527C", Offset = "0x94527C", VA = "0x94527C")]
	public NcParticleSystem()
	{
	}

	[Token(Token = "0x6000B9E")]
	[Address(RVA = "0x93FD44", Offset = "0x93FD44", VA = "0x93FD44")]
	public void SetDisableEmit()
	{
	}

	[Token(Token = "0x6000B9F")]
	[Address(RVA = "0x9453E0", Offset = "0x9453E0", VA = "0x9453E0")]
	public bool IsShuriken()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BA0")]
	[Address(RVA = "0x945488", Offset = "0x945488", VA = "0x945488")]
	public bool IsLegacy()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BA1")]
	[Address(RVA = "0x945578", Offset = "0x945578", VA = "0x945578", Slot = "4")]
	public override int GetAnimationState()
	{
		return default(int);
	}

	[Token(Token = "0x6000BA2")]
	[Address(RVA = "0x9456A4", Offset = "0x9456A4", VA = "0x9456A4")]
	public bool IsMeshParticleEmitter()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BA3")]
	[Address(RVA = "0x9456AC", Offset = "0x9456AC", VA = "0x9456AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BA4")]
	[Address(RVA = "0x94581C", Offset = "0x94581C", VA = "0x94581C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000BA5")]
	[Address(RVA = "0x9459AC", Offset = "0x9459AC", VA = "0x9459AC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000BA6")]
	[Address(RVA = "0x945AF0", Offset = "0x945AF0", VA = "0x945AF0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BA7")]
	[Address(RVA = "0x94610C", Offset = "0x94610C", VA = "0x94610C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BA8")]
	[Address(RVA = "0x9464C0", Offset = "0x9464C0", VA = "0x9464C0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000BA9")]
	[Address(RVA = "0x947C9C", Offset = "0x947C9C", VA = "0x947C9C")]
	private void OnPreRender()
	{
	}

	[Token(Token = "0x6000BAA")]
	[Address(RVA = "0x947F6C", Offset = "0x947F6C", VA = "0x947F6C")]
	private void OnPostRender()
	{
	}

	[Token(Token = "0x6000BAB")]
	[Address(RVA = "0x947258", Offset = "0x947258", VA = "0x947258")]
	private void CreateAttachPrefab(Vector3 position, float size)
	{
	}

	[Token(Token = "0x6000BAC")]
	[Address(RVA = "0x94582C", Offset = "0x94582C", VA = "0x94582C")]
	private void AddRenderEventCall()
	{
	}

	[Token(Token = "0x6000BAD")]
	[Address(RVA = "0x9459BC", Offset = "0x9459BC", VA = "0x9459BC")]
	private void RemoveRenderEventCall()
	{
	}

	[Token(Token = "0x6000BAE")]
	[Address(RVA = "0x945FE4", Offset = "0x945FE4", VA = "0x945FE4")]
	private void SetEnableParticle(bool bEnable)
	{
	}

	[Token(Token = "0x6000BAF")]
	[Address(RVA = "0x948228", Offset = "0x948228", VA = "0x948228")]
	public float GetScaleMinMeshNormalVelocity()
	{
		return default(float);
	}

	[Token(Token = "0x6000BB0")]
	[Address(RVA = "0x94830C", Offset = "0x94830C", VA = "0x94830C")]
	public float GetScaleMaxMeshNormalVelocity()
	{
		return default(float);
	}

	[Token(Token = "0x6000BB1")]
	[Address(RVA = "0x945F44", Offset = "0x945F44", VA = "0x945F44")]
	private void LegacyInitParticle()
	{
	}

	[Token(Token = "0x6000BB2")]
	[Address(RVA = "0x948358", Offset = "0x948358", VA = "0x948358")]
	private void LegacySetParticle()
	{
	}

	[Token(Token = "0x6000BB3")]
	[Address(RVA = "0x9490FC", Offset = "0x9490FC", VA = "0x9490FC")]
	private void LegacyParticleSpeed(float fSpeed)
	{
	}

	[Token(Token = "0x6000BB4")]
	[Address(RVA = "0x947E60", Offset = "0x947E60", VA = "0x947E60")]
	private void LegacySetRuntimeParticleScale(bool bScale)
	{
	}

	[Token(Token = "0x6000BB5")]
	[Address(RVA = "0x947670", Offset = "0x947670", VA = "0x947670")]
	public Particle[] LegacyScaleParticle(Particle[] parts, bool bScale, bool bPosUpdate)
	{
		return null;
	}

	[Token(Token = "0x6000BB6")]
	[Address(RVA = "0x945C18", Offset = "0x945C18", VA = "0x945C18")]
	private void ShurikenInitParticle()
	{
	}

	[Token(Token = "0x6000BB7")]
	[Address(RVA = "0x946C2C", Offset = "0x946C2C", VA = "0x946C2C")]
	private void AllocateParticleSystem(ref ParticleSystem.Particle[] tmpPsParts)
	{
	}

	[Token(Token = "0x6000BB8")]
	[Address(RVA = "0x947CF8", Offset = "0x947CF8", VA = "0x947CF8")]
	private void ShurikenSetRuntimeParticleScale(bool bScale)
	{
	}

	[Token(Token = "0x6000BB9")]
	[Address(RVA = "0x946D14", Offset = "0x946D14", VA = "0x946D14")]
	public ParticleSystem.Particle[] ShurikenScaleParticle(ParticleSystem.Particle[] parts, int nCount, bool bScale, bool bPosUpdate)
	{
		return null;
	}

	[Token(Token = "0x6000BBA")]
	[Address(RVA = "0x9499BC", Offset = "0x9499BC", VA = "0x9499BC", Slot = "5")]
	public override void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}

	[Token(Token = "0x6000BBB")]
	[Address(RVA = "0x949828", Offset = "0x949828", VA = "0x949828")]
	public static void Ng_SetProperty(object srcObj, string fieldName, object newValue)
	{
	}

	[Token(Token = "0x6000BBC")]
	[Address(RVA = "0x949678", Offset = "0x949678", VA = "0x949678")]
	public static object Ng_GetProperty(object srcObj, string fieldName)
	{
		return null;
	}
}
[Token(Token = "0x200018D")]
public class NcRotation : NcEffectBehaviour
{
	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool m_bWorldSpace;

	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 m_vRotationValue;

	[Token(Token = "0x6000BBD")]
	[Address(RVA = "0x94A5D4", Offset = "0x94A5D4", VA = "0x94A5D4")]
	public NcRotation()
	{
	}

	[Token(Token = "0x6000BBE")]
	[Address(RVA = "0x94A6A0", Offset = "0x94A6A0", VA = "0x94A6A0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BBF")]
	[Address(RVA = "0x94A7B0", Offset = "0x94A7B0", VA = "0x94A7B0", Slot = "5")]
	public override void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}
}
[Token(Token = "0x200018E")]
public class NcSpriteAnimation : NcEffectAniBehaviour
{
	[Token(Token = "0x200018F")]
	public enum TEXTURE_TYPE
	{
		[Token(Token = "0x4000838")]
		TileTexture,
		[Token(Token = "0x4000839")]
		TrimTexture,
		[Token(Token = "0x400083A")]
		SpriteFactory
	}

	[Token(Token = "0x2000190")]
	public enum PLAYMODE
	{
		[Token(Token = "0x400083C")]
		DEFAULT,
		[Token(Token = "0x400083D")]
		INVERSE,
		[Token(Token = "0x400083E")]
		PINGPONG,
		[Token(Token = "0x400083F")]
		RANDOM,
		[Token(Token = "0x4000840")]
		SELECT
	}

	[Token(Token = "0x4000816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public TEXTURE_TYPE m_TextureType;

	[Token(Token = "0x4000817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PLAYMODE m_PlayMode;

	[Token(Token = "0x4000818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_fDelayTime;

	[Token(Token = "0x4000819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int m_nStartFrame;

	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int m_nFrameCount;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int m_nSelectFrame;

	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool m_bLoop;

	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int m_nLoopStartFrame;

	[Token(Token = "0x400081E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int m_nLoopFrameCount;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int m_nLoopingCount;

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool m_bAutoDestruct;

	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float m_fFps;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public int m_nTilingX;

	[Token(Token = "0x4000823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int m_nTilingY;

	[Token(Token = "0x4000824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public GameObject m_NcSpriteFactoryPrefab;

	[Token(Token = "0x4000825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected NcSpriteFactory m_NcSpriteFactoryCom;

	[Token(Token = "0x4000826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public NcSpriteFactory.NcFrameInfo[] m_NcSpriteFrameInfos;

	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float m_fUvScale;

	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int m_nSpriteFactoryIndex;

	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public NcSpriteFactory.MESH_TYPE m_MeshType;

	[Token(Token = "0x400082A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public NcSpriteFactory.ALIGN_TYPE m_AlignType;

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected bool m_bCreateBuiltInPlane;

	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	[HideInInspector]
	public bool m_bBuildSpriteObj;

	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
	[HideInInspector]
	public bool m_bNeedRebuildAlphaChannel;

	[Token(Token = "0x400082E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[HideInInspector]
	public AnimationCurve m_curveAlphaWeight;

	[Token(Token = "0x400082F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	protected Vector2 m_size;

	[Token(Token = "0x4000830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	protected Renderer m_Renderer;

	[Token(Token = "0x4000831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	protected float m_fStartTime;

	[Token(Token = "0x4000832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected int m_nLastIndex;

	[Token(Token = "0x4000833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	protected int m_nLastSeqIndex;

	[Token(Token = "0x4000834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	protected bool m_bInPartLoop;

	[Token(Token = "0x4000835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
	protected bool m_bBreakLoop;

	[Token(Token = "0x4000836")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	protected Vector2[] m_MeshUVsByTileTexture;

	[Token(Token = "0x6000BC0")]
	[Address(RVA = "0x94B428", Offset = "0x94B428", VA = "0x94B428")]
	public NcSpriteAnimation()
	{
	}

	[Token(Token = "0x6000BC1")]
	[Address(RVA = "0x94B46C", Offset = "0x94B46C", VA = "0x94B46C", Slot = "4")]
	public override int GetAnimationState()
	{
		return default(int);
	}

	[Token(Token = "0x6000BC2")]
	[Address(RVA = "0x94B53C", Offset = "0x94B53C", VA = "0x94B53C")]
	public float GetDurationTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000BC3")]
	[Address(RVA = "0x94B568", Offset = "0x94B568", VA = "0x94B568")]
	public int GetShowIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6000BC4")]
	[Address(RVA = "0x94B578", Offset = "0x94B578", VA = "0x94B578")]
	public void SetBreakLoop()
	{
	}

	[Token(Token = "0x6000BC5")]
	[Address(RVA = "0x94B584", Offset = "0x94B584", VA = "0x94B584")]
	public bool IsInPartLoop()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BC6")]
	[Address(RVA = "0x94B58C", Offset = "0x94B58C", VA = "0x94B58C", Slot = "7")]
	public override void ResetAnimation()
	{
	}

	[Token(Token = "0x6000BC7")]
	[Address(RVA = "0x94B714", Offset = "0x94B714", VA = "0x94B714")]
	public void SetSelectFrame(int nSelFrame)
	{
	}

	[Token(Token = "0x6000BC8")]
	[Address(RVA = "0x94BB10", Offset = "0x94BB10", VA = "0x94BB10")]
	public int GetMaxFrameCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000BC9")]
	[Address(RVA = "0x94BB4C", Offset = "0x94BB4C", VA = "0x94BB4C")]
	public int GetValidFrameCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000BCA")]
	[Address(RVA = "0x94BB98", Offset = "0x94BB98", VA = "0x94BB98")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BCB")]
	[Address(RVA = "0x94BEC8", Offset = "0x94BEC8", VA = "0x94BEC8")]
	private void ResetLocalValue()
	{
	}

	[Token(Token = "0x6000BCC")]
	[Address(RVA = "0x94B5D4", Offset = "0x94B5D4", VA = "0x94B5D4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BCD")]
	[Address(RVA = "0x94BFF0", Offset = "0x94BFF0", VA = "0x94BFF0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BCE")]
	[Address(RVA = "0x94C708", Offset = "0x94C708", VA = "0x94C708")]
	public void SetSpriteFactoryIndex(int nSpriteFactoryIndex, bool bRunImmediate)
	{
	}

	[Token(Token = "0x6000BCF")]
	[Address(RVA = "0x94CA4C", Offset = "0x94CA4C", VA = "0x94CA4C")]
	private int GetPartLoopFrameIndex(int nSeqIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000BD0")]
	[Address(RVA = "0x94CAC4", Offset = "0x94CAC4", VA = "0x94CAC4")]
	private int GetPartLoopCount(int nSeqIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000BD1")]
	[Address(RVA = "0x94CB0C", Offset = "0x94CB0C", VA = "0x94CB0C")]
	private int CalcPartLoopInfo(int nSeqIndex, ref int nLoopCount)
	{
		return default(int);
	}

	[Token(Token = "0x6000BD2")]
	[Address(RVA = "0x94C64C", Offset = "0x94C64C", VA = "0x94C64C")]
	private void UpdateEndAnimation()
	{
	}

	[Token(Token = "0x6000BD3")]
	[Address(RVA = "0x94B71C", Offset = "0x94B71C", VA = "0x94B71C")]
	private void SetIndex(int nSeqIndex)
	{
	}

	[Token(Token = "0x6000BD4")]
	[Address(RVA = "0x94D758", Offset = "0x94D758", VA = "0x94D758")]
	private void UpdateSpriteTexture(int nSelIndex, bool bShowEffect)
	{
	}

	[Token(Token = "0x6000BD5")]
	[Address(RVA = "0x94D7A8", Offset = "0x94D7A8", VA = "0x94D7A8")]
	private void UpdateFactoryTexture(int nSelIndex, bool bShowEffect)
	{
	}

	[Token(Token = "0x6000BD6")]
	[Address(RVA = "0x94DEB4", Offset = "0x94DEB4", VA = "0x94DEB4")]
	public bool UpdateFactoryMaterial()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BD7")]
	[Address(RVA = "0x94DBF4", Offset = "0x94DBF4", VA = "0x94DBF4")]
	private void CreateBuiltInPlane(int nSelIndex)
	{
	}

	[Token(Token = "0x6000BD8")]
	[Address(RVA = "0x94DDE8", Offset = "0x94DDE8", VA = "0x94DDE8")]
	private void UpdateBuiltInPlane(int nSelIndex)
	{
	}

	[Token(Token = "0x6000BD9")]
	[Address(RVA = "0x94CF7C", Offset = "0x94CF7C", VA = "0x94CF7C")]
	private bool UpdateMeshUVsByTileTexture(Rect uv)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BDA")]
	[Address(RVA = "0x94F790", Offset = "0x94F790", VA = "0x94F790", Slot = "5")]
	public override void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}
}
[Token(Token = "0x2000191")]
public class NcSpriteFactory : NcEffectBehaviour
{
	[Serializable]
	[Token(Token = "0x2000192")]
	public class NcFrameInfo
	{
		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nFrameIndex;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nTexWidth;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nTexHeight;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Rect m_TextureUvOffset;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Rect m_FrameUvOffset;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 m_FrameScale;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector2 m_scaleFactor;

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x951530", Offset = "0x951530", VA = "0x951530")]
		public NcFrameInfo()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000193")]
	[SerializeField]
	public class NcSpriteNode
	{
		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bIncludedAtlas;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string m_TextureGUID;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_TextureName;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m_fMaxTextureAlpha;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_SpriteName;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public NcFrameInfo[] m_FrameInfos;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int m_nTilingX;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int m_nTilingY;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int m_nStartFrame;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int m_nFrameCount;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool m_bLoop;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int m_nLoopStartFrame;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int m_nLoopFrameCount;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int m_nLoopingCount;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float m_fFps;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float m_fTime;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int m_nNextSpriteIndex;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int m_nTestMode;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float m_fTestSpeed;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public GameObject m_EffectPrefab;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int m_nEffectFrame;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool m_bEffectOnlyFirst;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool m_bEffectDetach;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float m_fEffectSpeed;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float m_fEffectScale;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector3 m_EffectPos;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 m_EffectRot;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AudioClip m_AudioClip;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int m_nSoundFrame;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool m_bSoundOnlyFirst;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		public bool m_bSoundLoop;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float m_fSoundVolume;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float m_fSoundPitch;

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x94FC0C", Offset = "0x94FC0C", VA = "0x94FC0C")]
		public NcSpriteNode()
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x94FE94", Offset = "0x94FE94", VA = "0x94FE94")]
		public NcSpriteNode GetClone()
		{
			return null;
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x951538", Offset = "0x951538", VA = "0x951538")]
		public int GetStartFrame()
		{
			return default(int);
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x951574", Offset = "0x951574", VA = "0x951574")]
		public void SetEmpty()
		{
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x951610", Offset = "0x951610", VA = "0x951610")]
		public bool IsEmptyTexture()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x9516B4", Offset = "0x9516B4", VA = "0x9516B4")]
		public bool IsUnused()
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000194")]
	[SerializeField]
	public enum MESH_TYPE
	{
		[Token(Token = "0x400087B")]
		BuiltIn_Plane,
		[Token(Token = "0x400087C")]
		BuiltIn_TwosidePlane
	}

	[Token(Token = "0x2000195")]
	public enum ALIGN_TYPE
	{
		[Token(Token = "0x400087E")]
		TOP,
		[Token(Token = "0x400087F")]
		CENTER,
		[Token(Token = "0x4000880")]
		BOTTOM
	}

	[Token(Token = "0x2000196")]
	public enum SPRITE_TYPE
	{
		[Token(Token = "0x4000882")]
		NcSpriteTexture,
		[Token(Token = "0x4000883")]
		NcSpriteAnimation
	}

	[Token(Token = "0x2000197")]
	public enum SHOW_TYPE
	{
		[Token(Token = "0x4000885")]
		NONE,
		[Token(Token = "0x4000886")]
		ALL,
		[Token(Token = "0x4000887")]
		SPRITE,
		[Token(Token = "0x4000888")]
		ANIMATION,
		[Token(Token = "0x4000889")]
		EFFECT
	}

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public SPRITE_TYPE m_SpriteType;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<NcSpriteNode> m_SpriteList;

	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int m_nCurrentIndex;

	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int m_nMaxAtlasTextureSize;

	[Token(Token = "0x4000845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool m_bNeedRebuild;

	[Token(Token = "0x4000846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool m_bTrimBlack;

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	public bool m_bTrimAlpha;

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_fUvScale;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_fTextureRatio;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject m_CurrentEffect;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public NcAttachSound m_CurrentSound;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected bool m_bEndSprite;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public SHOW_TYPE m_ShowType;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool m_bShowEffect;

	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool m_bTestMode;

	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	public bool m_bSequenceMode;

	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
	protected bool m_bbInstance;

	[Token(Token = "0x6000BDB")]
	[Address(RVA = "0x94F7B0", Offset = "0x94F7B0", VA = "0x94F7B0")]
	public NcSpriteFactory()
	{
	}

	[Token(Token = "0x6000BDC")]
	[Address(RVA = "0x94C994", Offset = "0x94C994", VA = "0x94C994")]
	public NcSpriteNode GetSpriteNode(int nIndex)
	{
		return null;
	}

	[Token(Token = "0x6000BDD")]
	[Address(RVA = "0x94F874", Offset = "0x94F874", VA = "0x94F874")]
	public NcSpriteNode GetSpriteNode(string spriteName)
	{
		return null;
	}

	[Token(Token = "0x6000BDE")]
	[Address(RVA = "0x94FA1C", Offset = "0x94FA1C", VA = "0x94FA1C")]
	public NcSpriteNode SetSpriteNode(int nIndex, NcSpriteNode newInfo)
	{
		return null;
	}

	[Token(Token = "0x6000BDF")]
	[Address(RVA = "0x94FB0C", Offset = "0x94FB0C", VA = "0x94FB0C")]
	public int AddSpriteNode()
	{
		return default(int);
	}

	[Token(Token = "0x6000BE0")]
	[Address(RVA = "0x94FD9C", Offset = "0x94FD9C", VA = "0x94FD9C")]
	public int AddSpriteNode(NcSpriteNode addSpriteNode)
	{
		return default(int);
	}

	[Token(Token = "0x6000BE1")]
	[Address(RVA = "0x94FE9C", Offset = "0x94FE9C", VA = "0x94FE9C")]
	public void DeleteSpriteNode(int nIndex)
	{
	}

	[Token(Token = "0x6000BE2")]
	[Address(RVA = "0x94FFA0", Offset = "0x94FFA0", VA = "0x94FFA0")]
	public void ClearAllSpriteNode()
	{
	}

	[Token(Token = "0x6000BE3")]
	[Address(RVA = "0x94E2AC", Offset = "0x94E2AC", VA = "0x94E2AC")]
	public int GetSpriteNodeCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000BE4")]
	[Address(RVA = "0x950014", Offset = "0x950014", VA = "0x950014")]
	public NcSpriteNode GetCurrentSpriteNode()
	{
		return null;
	}

	[Token(Token = "0x6000BE5")]
	[Address(RVA = "0x9500C4", Offset = "0x9500C4", VA = "0x9500C4")]
	public Rect GetSpriteUvRect(int nStriteIndex, int nFrameIndex)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000BE6")]
	[Address(RVA = "0x94E298", Offset = "0x94E298", VA = "0x94E298")]
	public bool IsValidFactory()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BE7")]
	[Address(RVA = "0x9502B0", Offset = "0x9502B0", VA = "0x9502B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BE8")]
	[Address(RVA = "0x9502BC", Offset = "0x9502BC", VA = "0x9502BC")]
	public NcEffectBehaviour SetSprite(int nNodeIndex)
	{
		return null;
	}

	[Token(Token = "0x6000BE9")]
	[Address(RVA = "0x950548", Offset = "0x950548", VA = "0x950548")]
	public NcEffectBehaviour SetSprite(string spriteName)
	{
		return null;
	}

	[Token(Token = "0x6000BEA")]
	[Address(RVA = "0x9502C4", Offset = "0x9502C4", VA = "0x9502C4")]
	public NcEffectBehaviour SetSprite(int nNodeIndex, bool bRunImmediate)
	{
		return null;
	}

	[Token(Token = "0x6000BEB")]
	[Address(RVA = "0x950BFC", Offset = "0x950BFC", VA = "0x950BFC")]
	public int GetCurrentSpriteIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6000BEC")]
	[Address(RVA = "0x950C04", Offset = "0x950C04", VA = "0x950C04")]
	public bool IsEndSprite()
	{
		return default(bool);
	}

	[Token(Token = "0x6000BED")]
	[Address(RVA = "0x950988", Offset = "0x950988", VA = "0x950988")]
	private void CreateEffectObject()
	{
	}

	[Token(Token = "0x6000BEE")]
	[Address(RVA = "0x950CEC", Offset = "0x950CEC", VA = "0x950CEC")]
	public GameObject CreateSpriteEffect(int nSrcSpriteIndex, Transform parentTrans)
	{
		return null;
	}

	[Token(Token = "0x6000BEF")]
	[Address(RVA = "0x950C0C", Offset = "0x950C0C", VA = "0x950C0C")]
	private void DestroyEffectObject()
	{
	}

	[Token(Token = "0x6000BF0")]
	[Address(RVA = "0x951348", Offset = "0x951348", VA = "0x951348")]
	private void CreateSoundObject(NcSpriteNode ncSpriteNode)
	{
	}

	[Token(Token = "0x6000BF1")]
	[Address(RVA = "0x950718", Offset = "0x950718", VA = "0x950718")]
	public void OnChangingSprite(int nOldNodeIndex, int nNewNodeIndex)
	{
	}

	[Token(Token = "0x6000BF2")]
	[Address(RVA = "0x94C408", Offset = "0x94C408", VA = "0x94C408")]
	public void OnAnimationStartFrame(NcSpriteAnimation spriteCom)
	{
	}

	[Token(Token = "0x6000BF3")]
	[Address(RVA = "0x94D824", Offset = "0x94D824", VA = "0x94D824")]
	public void OnAnimationChangingFrame(NcSpriteAnimation spriteCom, int nOldIndex, int nNewIndex, int nLoopCount)
	{
	}

	[Token(Token = "0x6000BF4")]
	[Address(RVA = "0x94C40C", Offset = "0x94C40C", VA = "0x94C40C")]
	public bool OnAnimationLastFrame(NcSpriteAnimation spriteCom, int nLoopCount)
	{
		return default(bool);
	}

	[Token(Token = "0x6000BF5")]
	[Address(RVA = "0x95152C", Offset = "0x95152C", VA = "0x95152C", Slot = "5")]
	public override void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}

	[Token(Token = "0x6000BF6")]
	[Address(RVA = "0x94E320", Offset = "0x94E320", VA = "0x94E320")]
	public static void CreatePlane(MeshFilter meshFilter, float fUvScale, NcFrameInfo ncSpriteFrameInfo, ALIGN_TYPE alignType, MESH_TYPE m_MeshType)
	{
	}

	[Token(Token = "0x6000BF7")]
	[Address(RVA = "0x94F0A4", Offset = "0x94F0A4", VA = "0x94F0A4")]
	public static void UpdatePlane(MeshFilter meshFilter, float fUvScale, NcFrameInfo ncSpriteFrameInfo, ALIGN_TYPE alignType)
	{
	}

	[Token(Token = "0x6000BF8")]
	[Address(RVA = "0x94F4C8", Offset = "0x94F4C8", VA = "0x94F4C8")]
	public static void UpdateMeshUVs(MeshFilter meshFilter, Rect uv)
	{
	}
}
[Token(Token = "0x2000198")]
public class NcSpriteTexture : NcEffectBehaviour
{
	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject m_NcSpriteFactoryPrefab;

	[Token(Token = "0x400088B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected NcSpriteFactory m_NcSpriteFactoryCom;

	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public NcSpriteFactory.NcFrameInfo[] m_NcSpriteFrameInfos;

	[Token(Token = "0x400088D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_fUvScale;

	[Token(Token = "0x400088E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int m_nSpriteFactoryIndex;

	[Token(Token = "0x400088F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int m_nFrameIndex;

	[Token(Token = "0x4000890")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public NcSpriteFactory.MESH_TYPE m_MeshType;

	[Token(Token = "0x4000891")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public NcSpriteFactory.ALIGN_TYPE m_AlignType;

	[Token(Token = "0x4000892")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected GameObject m_EffectObject;

	[Token(Token = "0x6000C00")]
	[Address(RVA = "0x951768", Offset = "0x951768", VA = "0x951768")]
	public NcSpriteTexture()
	{
	}

	[Token(Token = "0x6000C01")]
	[Address(RVA = "0x951804", Offset = "0x951804", VA = "0x951804")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C02")]
	[Address(RVA = "0x951A14", Offset = "0x951A14", VA = "0x951A14")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C03")]
	[Address(RVA = "0x950724", Offset = "0x950724", VA = "0x950724")]
	public void SetSpriteFactoryIndex(int nSpriteFactoryIndex, int nFrameIndex, bool bRunImmediate)
	{
	}

	[Token(Token = "0x6000C04")]
	[Address(RVA = "0x951A1C", Offset = "0x951A1C", VA = "0x951A1C")]
	private void UpdateSpriteTexture(bool bShowEffect)
	{
	}

	[Token(Token = "0x6000C05")]
	[Address(RVA = "0x951CFC", Offset = "0x951CFC", VA = "0x951CFC")]
	public bool UpdateSpriteMaterial()
	{
		return default(bool);
	}

	[Token(Token = "0x6000C06")]
	[Address(RVA = "0x9520E0", Offset = "0x9520E0", VA = "0x9520E0", Slot = "5")]
	public override void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}

	[Token(Token = "0x6000C07")]
	[Address(RVA = "0x9520E4", Offset = "0x9520E4", VA = "0x9520E4", Slot = "6")]
	public override void OnUpdateToolData()
	{
	}
}
[Token(Token = "0x2000199")]
public class NcTilingTexture : NcEffectBehaviour
{
	[Token(Token = "0x4000893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float m_fTilingX;

	[Token(Token = "0x4000894")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_fTilingY;

	[Token(Token = "0x4000895")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_fOffsetX;

	[Token(Token = "0x4000896")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_fOffsetY;

	[Token(Token = "0x4000897")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool m_bFixedTileSize;

	[Token(Token = "0x4000898")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected Vector3 m_OriginalScale;

	[Token(Token = "0x4000899")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected Vector2 m_OriginalTiling;

	[Token(Token = "0x6000C08")]
	[Address(RVA = "0x9522EC", Offset = "0x9522EC", VA = "0x9522EC")]
	public NcTilingTexture()
	{
	}

	[Token(Token = "0x6000C09")]
	[Address(RVA = "0x952390", Offset = "0x952390", VA = "0x952390")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C0A")]
	[Address(RVA = "0x9525B4", Offset = "0x9525B4", VA = "0x9525B4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C0B")]
	[Address(RVA = "0x952738", Offset = "0x952738", VA = "0x952738", Slot = "6")]
	public override void OnUpdateToolData()
	{
	}
}
[Token(Token = "0x200019A")]
public class NcTrailTexture : NcEffectBehaviour
{
	[Token(Token = "0x200019B")]
	public enum AXIS_TYPE
	{
		[Token(Token = "0x40008BB")]
		AXIS_FORWARD,
		[Token(Token = "0x40008BC")]
		AXIS_BACK,
		[Token(Token = "0x40008BD")]
		AXIS_RIGHT,
		[Token(Token = "0x40008BE")]
		AXIS_LEFT,
		[Token(Token = "0x40008BF")]
		AXIS_UP,
		[Token(Token = "0x40008C0")]
		AXIS_DOWN
	}

	[Token(Token = "0x200019C")]
	public class Point
	{
		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float timeCreated;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 basePosition;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 tipPosition;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool lineBreak;

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x956324", Offset = "0x956324", VA = "0x956324")]
		public Point()
		{
		}
	}

	[Token(Token = "0x400089A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float m_fDelayTime;

	[Token(Token = "0x400089B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_fEmitTime;

	[Token(Token = "0x400089C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool m_bSmoothHide;

	[Token(Token = "0x400089D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	protected bool m_bEmit;

	[Token(Token = "0x400089E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected float m_fStartTime;

	[Token(Token = "0x400089F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected float m_fStopTime;

	[Token(Token = "0x40008A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_fLifeTime;

	[Token(Token = "0x40008A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public AXIS_TYPE m_TipAxis;

	[Token(Token = "0x40008A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_fTipSize;

	[Token(Token = "0x40008A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool m_bCenterAlign;

	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool m_UvFlipHorizontal;

	[Token(Token = "0x40008A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool m_UvFlipVirtical;

	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int m_nFadeHeadCount;

	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int m_nFadeTailCount;

	[Token(Token = "0x40008A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Color[] m_Colors;

	[Token(Token = "0x40008A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float[] m_SizeRates;

	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool m_bInterpolation;

	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int m_nMaxSmoothCount;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int m_nSubdivisions;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected List<Point> m_SmoothedPoints;

	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float m_fMinVertexDistance;

	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float m_fMaxVertexDistance;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float m_fMaxAngle;

	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool m_bAutoDestruct;

	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected List<Point> m_Points;

	[Token(Token = "0x40008B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	protected Transform m_base;

	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	protected GameObject m_TrialObject;

	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	protected Mesh m_TrailMesh;

	[Token(Token = "0x40008B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected Vector3 m_LastPosition;

	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	protected Vector3 m_LastCameraPosition1;

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected Vector3 m_LastCameraPosition2;

	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	protected bool m_bLastFrameEmit;

	[Token(Token = "0x6000C0C")]
	[Address(RVA = "0x9527B8", Offset = "0x9527B8", VA = "0x9527B8")]
	public NcTrailTexture()
	{
	}

	[Token(Token = "0x6000C0D")]
	[Address(RVA = "0x9528F4", Offset = "0x9528F4", VA = "0x9528F4")]
	public void SetEmit(bool bEmit)
	{
	}

	[Token(Token = "0x6000C0E")]
	[Address(RVA = "0x952984", Offset = "0x952984", VA = "0x952984", Slot = "4")]
	public override int GetAnimationState()
	{
		return default(int);
	}

	[Token(Token = "0x6000C0F")]
	[Address(RVA = "0x952A94", Offset = "0x952A94", VA = "0x952A94")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000C10")]
	[Address(RVA = "0x952B60", Offset = "0x952B60", VA = "0x952B60")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C11")]
	[Address(RVA = "0x952CF4", Offset = "0x952CF4", VA = "0x952CF4")]
	private void InitTrailObject()
	{
	}

	[Token(Token = "0x6000C12")]
	[Address(RVA = "0x9530E8", Offset = "0x9530E8", VA = "0x9530E8")]
	private Vector3 GetTipPoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000C13")]
	[Address(RVA = "0x9534B8", Offset = "0x9534B8", VA = "0x9534B8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C14")]
	[Address(RVA = "0x95632C", Offset = "0x95632C", VA = "0x95632C", Slot = "5")]
	public override void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}
}
[Token(Token = "0x200019D")]
public class NcUvAnimation : NcEffectAniBehaviour
{
	[Token(Token = "0x40008C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_fScrollSpeedX;

	[Token(Token = "0x40008C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_fScrollSpeedY;

	[Token(Token = "0x40008C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_fTilingX;

	[Token(Token = "0x40008C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_fTilingY;

	[Token(Token = "0x40008C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float m_fOffsetX;

	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float m_fOffsetY;

	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool m_bFixedTileSize;

	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool m_bRepeat;

	[Token(Token = "0x40008CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	public bool m_bAutoDestruct;

	[Token(Token = "0x40008CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected Vector3 m_OriginalScale;

	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected Vector2 m_OriginalTiling;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected Vector2 m_EndOffset;

	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	protected Vector2 m_RepeatOffset;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	protected Renderer m_Renderer;

	[Token(Token = "0x6000C16")]
	[Address(RVA = "0x957040", Offset = "0x957040", VA = "0x957040")]
	public NcUvAnimation()
	{
	}

	[Token(Token = "0x6000C17")]
	[Address(RVA = "0x95707C", Offset = "0x95707C", VA = "0x95707C")]
	public void SetFixedTileSize(bool bFixedTileSize)
	{
	}

	[Token(Token = "0x6000C18")]
	[Address(RVA = "0x957084", Offset = "0x957084", VA = "0x957084", Slot = "4")]
	public override int GetAnimationState()
	{
		return default(int);
	}

	[Token(Token = "0x6000C19")]
	[Address(RVA = "0x957138", Offset = "0x957138", VA = "0x957138", Slot = "7")]
	public override void ResetAnimation()
	{
	}

	[Token(Token = "0x6000C1A")]
	[Address(RVA = "0x957170", Offset = "0x957170", VA = "0x957170")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C1B")]
	[Address(RVA = "0x957464", Offset = "0x957464", VA = "0x957464")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C1C")]
	[Address(RVA = "0x9579B0", Offset = "0x9579B0", VA = "0x9579B0", Slot = "5")]
	public override void OnUpdateEffectSpeed(float fSpeedRate, bool bRuntime)
	{
	}

	[Token(Token = "0x6000C1D")]
	[Address(RVA = "0x9579D0", Offset = "0x9579D0", VA = "0x9579D0", Slot = "6")]
	public override void OnUpdateToolData()
	{
	}
}
[Token(Token = "0x200019E")]
public class NgAnimation
{
	[Token(Token = "0x6000C1E")]
	[Address(RVA = "0x959508", Offset = "0x959508", VA = "0x959508")]
	public NgAnimation()
	{
	}

	[Token(Token = "0x6000C1F")]
	[Address(RVA = "0x959510", Offset = "0x959510", VA = "0x959510")]
	public static AnimationClip SetAnimation(Animation tarAnimation, int tarIndex, AnimationClip srcClip)
	{
		return null;
	}

	[Token(Token = "0x6000C20")]
	[Address(RVA = "0x959A50", Offset = "0x959A50", VA = "0x959A50")]
	public static AnimationState GetAnimationByIndex(Animation anim, int nIndex)
	{
		return null;
	}
}
[Token(Token = "0x200019F")]
public class NgAssembly
{
	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static BindingFlags m_bindingAttr;

	[Token(Token = "0x6000C21")]
	[Address(RVA = "0x959D80", Offset = "0x959D80", VA = "0x959D80")]
	public NgAssembly()
	{
	}

	[Token(Token = "0x6000C22")]
	public static T GetReference<T>(object inObj, string fieldName) where T : class
	{
		return null;
	}

	[Token(Token = "0x6000C23")]
	public static T GetValue<T>(object inObj, string fieldName) where T : struct
	{
		return (T)null;
	}

	[Token(Token = "0x6000C24")]
	[Address(RVA = "0x959D88", Offset = "0x959D88", VA = "0x959D88")]
	public static void SetField(object inObj, string fieldName, object newValue)
	{
	}

	[Token(Token = "0x6000C25")]
	[Address(RVA = "0x959DF0", Offset = "0x959DF0", VA = "0x959DF0")]
	private static object GetField(object inObj, string fieldName)
	{
		return null;
	}

	[Token(Token = "0x6000C26")]
	[Address(RVA = "0x959E60", Offset = "0x959E60", VA = "0x959E60")]
	public static void SetProperty(object srcObj, string fieldName, object newValue)
	{
	}

	[Token(Token = "0x6000C27")]
	[Address(RVA = "0x95A038", Offset = "0x95A038", VA = "0x95A038")]
	public static object GetProperty(object srcObj, string fieldName)
	{
		return null;
	}

	[Token(Token = "0x6000C28")]
	[Address(RVA = "0x95A22C", Offset = "0x95A22C", VA = "0x95A22C")]
	public static void LogFieldsPropertis(UnityEngine.Object srcObj)
	{
	}
}
[Token(Token = "0x20001A0")]
public class NgAtlas
{
	[Token(Token = "0x6000C2A")]
	[Address(RVA = "0x95A870", Offset = "0x95A870", VA = "0x95A870")]
	public NgAtlas()
	{
	}
}
[Token(Token = "0x20001A1")]
public class NgEnum
{
	[Token(Token = "0x20001A2")]
	public enum AXIS
	{
		[Token(Token = "0x40008D7")]
		X,
		[Token(Token = "0x40008D8")]
		Y,
		[Token(Token = "0x40008D9")]
		Z
	}

	[Token(Token = "0x20001A3")]
	public enum TRANSFORM
	{
		[Token(Token = "0x40008DB")]
		POSITION,
		[Token(Token = "0x40008DC")]
		ROTATION,
		[Token(Token = "0x40008DD")]
		SCALE
	}

	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string[] m_TextureSizeStrings;

	[Token(Token = "0x40008D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int[] m_TextureSizeIntters;

	[Token(Token = "0x6000C2B")]
	[Address(RVA = "0x95B770", Offset = "0x95B770", VA = "0x95B770")]
	public NgEnum()
	{
	}
}
[Token(Token = "0x20001A4")]
public class NgFile
{
	[Token(Token = "0x6000C2D")]
	[Address(RVA = "0x95BB80", Offset = "0x95BB80", VA = "0x95BB80")]
	public NgFile()
	{
	}

	[Token(Token = "0x6000C2E")]
	[Address(RVA = "0x95BB88", Offset = "0x95BB88", VA = "0x95BB88")]
	public static string PathSeparatorNormalize(string path)
	{
		return null;
	}

	[Token(Token = "0x6000C2F")]
	[Address(RVA = "0x95BC74", Offset = "0x95BC74", VA = "0x95BC74")]
	public static string CombinePath(string path1, string path2)
	{
		return null;
	}

	[Token(Token = "0x6000C30")]
	[Address(RVA = "0x95BD0C", Offset = "0x95BD0C", VA = "0x95BD0C")]
	public static string CombinePath(string path1, string path2, string path3)
	{
		return null;
	}

	[Token(Token = "0x6000C31")]
	[Address(RVA = "0x95BDBC", Offset = "0x95BDBC", VA = "0x95BDBC")]
	public static string GetSplit(string path, int nIndex)
	{
		return null;
	}

	[Token(Token = "0x6000C32")]
	[Address(RVA = "0x95BF24", Offset = "0x95BF24", VA = "0x95BF24")]
	public static string GetFilename(string path)
	{
		return null;
	}

	[Token(Token = "0x6000C33")]
	[Address(RVA = "0x95C100", Offset = "0x95C100", VA = "0x95C100")]
	public static string GetFilenameExt(string path)
	{
		return null;
	}

	[Token(Token = "0x6000C34")]
	[Address(RVA = "0x95C248", Offset = "0x95C248", VA = "0x95C248")]
	public static string GetFileExt(string path)
	{
		return null;
	}

	[Token(Token = "0x6000C35")]
	[Address(RVA = "0x95C348", Offset = "0x95C348", VA = "0x95C348")]
	public static string TrimFilenameExt(string path)
	{
		return null;
	}

	[Token(Token = "0x6000C36")]
	[Address(RVA = "0x95C07C", Offset = "0x95C07C", VA = "0x95C07C")]
	public static string TrimFileExt(string filename)
	{
		return null;
	}

	[Token(Token = "0x6000C37")]
	[Address(RVA = "0x95C470", Offset = "0x95C470", VA = "0x95C470")]
	public static string TrimLastFolder(string path)
	{
		return null;
	}

	[Token(Token = "0x6000C38")]
	[Address(RVA = "0x95C5CC", Offset = "0x95C5CC", VA = "0x95C5CC")]
	public static string GetLastFolder(string path)
	{
		return null;
	}

	[Token(Token = "0x6000C39")]
	[Address(RVA = "0x95C7A8", Offset = "0x95C7A8", VA = "0x95C7A8")]
	public static bool CompareExtName(string srcPath, string tarLowerExt, bool bCheckCase)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001A5")]
public class NgGUIDraw
{
	[Token(Token = "0x40008DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Texture2D aaHLineTex;

	[Token(Token = "0x40008DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Texture2D aaVLineTex;

	[Token(Token = "0x40008E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Texture2D _aaLineTex;

	[Token(Token = "0x40008E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static Texture2D _lineTex;

	[Token(Token = "0x40008E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Texture2D _whiteTexture;

	[Token(Token = "0x170000C9")]
	private static Texture2D adLineTex
	{
		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0x95C884", Offset = "0x95C884", VA = "0x95C884")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000CA")]
	private static Texture2D lineTex
	{
		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0x95CB88", Offset = "0x95CB88", VA = "0x95CB88")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000CB")]
	public static Texture2D whiteTexture
	{
		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0x95CDA8", Offset = "0x95CDA8", VA = "0x95CDA8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000C3A")]
	[Address(RVA = "0x95C87C", Offset = "0x95C87C", VA = "0x95C87C")]
	public NgGUIDraw()
	{
	}

	[Token(Token = "0x6000C3E")]
	[Address(RVA = "0x95CFC8", Offset = "0x95CFC8", VA = "0x95CFC8")]
	public static void DrawHorizontalLine(Vector2 pointA, int nlen, Color color, float width, bool antiAlias)
	{
	}

	[Token(Token = "0x6000C3F")]
	[Address(RVA = "0x95D6D4", Offset = "0x95D6D4", VA = "0x95D6D4")]
	public static void DrawVerticalLine(Vector2 pointA, int nlen, Color color, float width, bool antiAlias)
	{
	}

	[Token(Token = "0x6000C40")]
	[Address(RVA = "0x95DDD8", Offset = "0x95DDD8", VA = "0x95DDD8")]
	public static void DrawBox(Rect rect, Color color, float width, bool antiAlias)
	{
	}

	[Token(Token = "0x6000C41")]
	[Address(RVA = "0x95E070", Offset = "0x95E070", VA = "0x95E070")]
	public static void DrawLine(Vector2 pointA, Vector2 pointB, Color color, float width, bool antiAlias)
	{
	}

	[Token(Token = "0x6000C42")]
	[Address(RVA = "0x9601A4", Offset = "0x9601A4", VA = "0x9601A4")]
	public static void DrawBezierLine(Vector2 start, Vector2 startTangent, Vector2 end, Vector2 endTangent, Color color, float width, bool antiAlias, int segments)
	{
	}

	[Token(Token = "0x6000C43")]
	[Address(RVA = "0x95F0F8", Offset = "0x95F0F8", VA = "0x95F0F8")]
	private static void DrawLineMac(Vector2 pointA, Vector2 pointB, Color color, float width, bool antiAlias)
	{
	}

	[Token(Token = "0x6000C44")]
	[Address(RVA = "0x95E1D4", Offset = "0x95E1D4", VA = "0x95E1D4")]
	private static void DrawLineWindows(Vector2 pointA, Vector2 pointB, Color color, float width, bool antiAlias)
	{
	}

	[Token(Token = "0x6000C45")]
	[Address(RVA = "0x960388", Offset = "0x960388", VA = "0x960388")]
	private static Vector2 cubeBezier(Vector2 s, Vector2 st, Vector2 e, Vector2 et, float t)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000C46")]
	[Address(RVA = "0x960520", Offset = "0x960520", VA = "0x960520")]
	private static Matrix4x4 translationMatrix(Vector3 v)
	{
		return default(Matrix4x4);
	}
}
[Token(Token = "0x20001A6")]
public class NgLayout
{
	[Token(Token = "0x40008E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static Color m_GuiOldColor;

	[Token(Token = "0x40008E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected static bool m_GuiOldEnable;

	[Token(Token = "0x6000C48")]
	[Address(RVA = "0x1B0D258", Offset = "0x1B0D258", VA = "0x1B0D258")]
	public NgLayout()
	{
	}

	[Token(Token = "0x6000C49")]
	[Address(RVA = "0x1B0D260", Offset = "0x1B0D260", VA = "0x1B0D260")]
	public static Rect GetZeroRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x6000C4A")]
	[Address(RVA = "0x1B0D2A0", Offset = "0x1B0D2A0", VA = "0x1B0D2A0")]
	public static Rect GetSumRect(Rect rect1, Rect rect2)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000C4B")]
	[Address(RVA = "0x1B0D568", Offset = "0x1B0D568", VA = "0x1B0D568")]
	public static Rect GetOffsetRect(Rect rect, float left, float top)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000C4C")]
	[Address(RVA = "0x1B0D48C", Offset = "0x1B0D48C", VA = "0x1B0D48C")]
	public static Rect GetOffsetRect(Rect rect, float left, float top, float right, float bottom)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000C4D")]
	[Address(RVA = "0x1B0D620", Offset = "0x1B0D620", VA = "0x1B0D620")]
	public static Rect GetOffsetRect(Rect rect, float fOffset)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000C4E")]
	[Address(RVA = "0x1B0D6E8", Offset = "0x1B0D6E8", VA = "0x1B0D6E8")]
	public static Rect GetVOffsetRect(Rect rect, float fOffset)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000C4F")]
	[Address(RVA = "0x1B0D7A4", Offset = "0x1B0D7A4", VA = "0x1B0D7A4")]
	public static Rect GetHOffsetRect(Rect rect, float fOffset)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000C50")]
	[Address(RVA = "0x1B0D85C", Offset = "0x1B0D85C", VA = "0x1B0D85C")]
	public static Rect GetOffsetRateRect(Rect rect, float fOffsetRate)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000C51")]
	[Address(RVA = "0x1B0DA00", Offset = "0x1B0DA00", VA = "0x1B0DA00")]
	public static Rect GetZeroStartRect(Rect rect)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000C52")]
	[Address(RVA = "0x1B0DA7C", Offset = "0x1B0DA7C", VA = "0x1B0DA7C")]
	public static Rect GetLeftRect(Rect rect, float width)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000C53")]
	[Address(RVA = "0x1B0DB08", Offset = "0x1B0DB08", VA = "0x1B0DB08")]
	public static Rect GetRightRect(Rect rect, float width)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000C54")]
	[Address(RVA = "0x1B0DBB8", Offset = "0x1B0DBB8", VA = "0x1B0DBB8")]
	public static Rect GetInnerTopRect(Rect rectBase, int topMargin, int nHeight)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000C55")]
	[Address(RVA = "0x1B0DC60", Offset = "0x1B0DC60", VA = "0x1B0DC60")]
	public static Rect GetInnerBottomRect(Rect rectBase, int nHeight)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000C56")]
	[Address(RVA = "0x1B0DD18", Offset = "0x1B0DD18", VA = "0x1B0DD18")]
	public static Vector2 ClampPoint(Rect rect, Vector2 point)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000C57")]
	[Address(RVA = "0x1B0DE10", Offset = "0x1B0DE10", VA = "0x1B0DE10")]
	public static Vector3 ClampPoint(Rect rect, Vector3 point)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000C58")]
	[Address(RVA = "0x1B0DF0C", Offset = "0x1B0DF0C", VA = "0x1B0DF0C")]
	public static Rect ClampWindow(Rect popupRect)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000C59")]
	[Address(RVA = "0x1B0E088", Offset = "0x1B0E088", VA = "0x1B0E088")]
	public static bool GUIToggle(Rect pos, bool bToggle, GUIContent content, bool bEnable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C5A")]
	[Address(RVA = "0x1B0E1DC", Offset = "0x1B0E1DC", VA = "0x1B0E1DC")]
	public static bool GUIButton(Rect pos, string name, bool bEnable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C5B")]
	[Address(RVA = "0x1B0E328", Offset = "0x1B0E328", VA = "0x1B0E328")]
	public static bool GUIButton(Rect pos, GUIContent content, bool bEnable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C5C")]
	[Address(RVA = "0x1B0E474", Offset = "0x1B0E474", VA = "0x1B0E474")]
	public static bool GUIButton(Rect pos, GUIContent content, GUIStyle style, bool bEnable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C5D")]
	[Address(RVA = "0x1B0E5C8", Offset = "0x1B0E5C8", VA = "0x1B0E5C8")]
	public static string GUITextField(Rect pos, string name, bool bEnable)
	{
		return null;
	}

	[Token(Token = "0x6000C5E")]
	[Address(RVA = "0x1B0E714", Offset = "0x1B0E714", VA = "0x1B0E714")]
	public static bool GUIEnableBackup(bool newEnable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C5F")]
	[Address(RVA = "0x1B0E7CC", Offset = "0x1B0E7CC", VA = "0x1B0E7CC")]
	public static void GUIEnableRestore()
	{
	}

	[Token(Token = "0x6000C60")]
	[Address(RVA = "0x1B0E870", Offset = "0x1B0E870", VA = "0x1B0E870")]
	public static Color GUIColorBackup(Color newColor)
	{
		return default(Color);
	}

	[Token(Token = "0x6000C61")]
	[Address(RVA = "0x1B0E95C", Offset = "0x1B0E95C", VA = "0x1B0E95C")]
	public static void GUIColorRestore()
	{
	}

	[Token(Token = "0x6000C62")]
	[Address(RVA = "0x1B0EA10", Offset = "0x1B0EA10", VA = "0x1B0EA10")]
	public static Vector2 GetGUIMousePosition()
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000C63")]
	[Address(RVA = "0x1B0EAF4", Offset = "0x1B0EAF4", VA = "0x1B0EAF4")]
	public static float GetWorldPerScreenPixel(Vector3 worldPoint)
	{
		return default(float);
	}

	[Token(Token = "0x6000C64")]
	[Address(RVA = "0x1B0EE00", Offset = "0x1B0EE00", VA = "0x1B0EE00")]
	public static Vector3 GetScreenToWorld(Vector3 targetWorld, Vector2 screenPos)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000C65")]
	[Address(RVA = "0x1B0F004", Offset = "0x1B0F004", VA = "0x1B0F004")]
	public static Vector3 GetWorldToScreen(Vector3 targetWorld)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x20001A7")]
public class NgMaterial
{
	[Token(Token = "0x6000C66")]
	[Address(RVA = "0x1B0F12C", Offset = "0x1B0F12C", VA = "0x1B0F12C")]
	public NgMaterial()
	{
	}

	[Token(Token = "0x6000C67")]
	[Address(RVA = "0x1B0F134", Offset = "0x1B0F134", VA = "0x1B0F134")]
	public static bool IsMaterialColor(Material mat)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C68")]
	[Address(RVA = "0x1B0F398", Offset = "0x1B0F398", VA = "0x1B0F398")]
	public static string GetMaterialColorName(Material mat)
	{
		return null;
	}

	[Token(Token = "0x6000C69")]
	[Address(RVA = "0x1B0F5F8", Offset = "0x1B0F5F8", VA = "0x1B0F5F8")]
	public static Color GetMaterialColor(Material mat)
	{
		return default(Color);
	}

	[Token(Token = "0x6000C6A")]
	[Address(RVA = "0x1B0F640", Offset = "0x1B0F640", VA = "0x1B0F640")]
	public static Color GetMaterialColor(Material mat, Color defaultColor)
	{
		return default(Color);
	}

	[Token(Token = "0x6000C6B")]
	[Address(RVA = "0x1B0F8E8", Offset = "0x1B0F8E8", VA = "0x1B0F8E8")]
	public static void SetMaterialColor(Material mat, Color color)
	{
	}

	[Token(Token = "0x6000C6C")]
	[Address(RVA = "0x1B0FB8C", Offset = "0x1B0FB8C", VA = "0x1B0FB8C")]
	public static bool IsSameMaterial(Material mat1, Material mat2, bool bCheckAddress)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C6D")]
	[Address(RVA = "0x1B102E8", Offset = "0x1B102E8", VA = "0x1B102E8")]
	public static void CopyMaterialArgument(Material srcMat, Material tarMat)
	{
	}

	[Token(Token = "0x6000C6E")]
	[Address(RVA = "0x1B0FFCC", Offset = "0x1B0FFCC", VA = "0x1B0FFCC")]
	public static bool IsSameColorProperty(Material mat1, Material mat2, string propertyName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C6F")]
	[Address(RVA = "0x1B104CC", Offset = "0x1B104CC", VA = "0x1B104CC")]
	public static void CopyColorProperty(Material srcMat, Material tarMat, string propertyName)
	{
	}

	[Token(Token = "0x6000C70")]
	[Address(RVA = "0x1B100B8", Offset = "0x1B100B8", VA = "0x1B100B8")]
	public static bool IsSameFloatProperty(Material mat1, Material mat2, string propertyName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C71")]
	[Address(RVA = "0x1B10584", Offset = "0x1B10584", VA = "0x1B10584")]
	public static Texture GetTexture(Material mat, bool bMask)
	{
		return null;
	}

	[Token(Token = "0x6000C72")]
	[Address(RVA = "0x1B10680", Offset = "0x1B10680", VA = "0x1B10680")]
	public static void SetMaskTexture(Material mat, bool bMask, Texture newTexture)
	{
	}

	[Token(Token = "0x6000C73")]
	[Address(RVA = "0x1B10180", Offset = "0x1B10180", VA = "0x1B10180")]
	public static bool IsMaskTexture(Material tarMat)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C74")]
	[Address(RVA = "0x1B10450", Offset = "0x1B10450", VA = "0x1B10450")]
	public static void SetMaskTexture(Material tarMat, Texture maskTex)
	{
	}

	[Token(Token = "0x6000C75")]
	[Address(RVA = "0x1B101F4", Offset = "0x1B101F4", VA = "0x1B101F4")]
	public static Texture GetMaskTexture(Material mat)
	{
		return null;
	}
}
[Token(Token = "0x20001A8")]
public class NgObject
{
	[Token(Token = "0x6000C76")]
	[Address(RVA = "0x1B10750", Offset = "0x1B10750", VA = "0x1B10750")]
	public NgObject()
	{
	}

	[Token(Token = "0x6000C77")]
	[Address(RVA = "0x1B10758", Offset = "0x1B10758", VA = "0x1B10758")]
	public static void SetActive(GameObject target, bool bActive)
	{
	}

	[Token(Token = "0x6000C78")]
	[Address(RVA = "0x1B10788", Offset = "0x1B10788", VA = "0x1B10788")]
	public static void SetActiveRecursively(GameObject target, bool bActive)
	{
	}

	[Token(Token = "0x6000C79")]
	[Address(RVA = "0x1B10870", Offset = "0x1B10870", VA = "0x1B10870")]
	public static bool IsActive(GameObject target)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C7A")]
	[Address(RVA = "0x1B108C4", Offset = "0x1B108C4", VA = "0x1B108C4")]
	public static GameObject CreateGameObject(GameObject prefabObj)
	{
		return null;
	}

	[Token(Token = "0x6000C7B")]
	[Address(RVA = "0x1B109C0", Offset = "0x1B109C0", VA = "0x1B109C0")]
	public static GameObject CreateGameObject(GameObject parent, string name)
	{
		return null;
	}

	[Token(Token = "0x6000C7C")]
	[Address(RVA = "0x1B10B68", Offset = "0x1B10B68", VA = "0x1B10B68")]
	public static GameObject CreateGameObject(MonoBehaviour parent, string name)
	{
		return null;
	}

	[Token(Token = "0x6000C7D")]
	[Address(RVA = "0x1B109F8", Offset = "0x1B109F8", VA = "0x1B109F8")]
	public static GameObject CreateGameObject(Transform parent, string name)
	{
		return null;
	}

	[Token(Token = "0x6000C7E")]
	[Address(RVA = "0x1B10BA0", Offset = "0x1B10BA0", VA = "0x1B10BA0")]
	public static GameObject CreateGameObject(GameObject parent, GameObject prefabObj)
	{
		return null;
	}

	[Token(Token = "0x6000C7F")]
	[Address(RVA = "0x1B10DD0", Offset = "0x1B10DD0", VA = "0x1B10DD0")]
	public static GameObject CreateGameObject(MonoBehaviour parent, GameObject prefabObj)
	{
		return null;
	}

	[Token(Token = "0x6000C80")]
	[Address(RVA = "0x1B10BD8", Offset = "0x1B10BD8", VA = "0x1B10BD8")]
	public static GameObject CreateGameObject(Transform parent, GameObject prefabObj)
	{
		return null;
	}

	[Token(Token = "0x6000C81")]
	[Address(RVA = "0x1B10E08", Offset = "0x1B10E08", VA = "0x1B10E08")]
	public static GameObject CreateGameObject(GameObject parent, GameObject prefabObj, Vector3 pos, Quaternion rot)
	{
		return null;
	}

	[Token(Token = "0x6000C82")]
	[Address(RVA = "0x1B11104", Offset = "0x1B11104", VA = "0x1B11104")]
	public static GameObject CreateGameObject(MonoBehaviour parent, GameObject prefabObj, Vector3 pos, Quaternion rot)
	{
		return null;
	}

	[Token(Token = "0x6000C83")]
	[Address(RVA = "0x1B10E80", Offset = "0x1B10E80", VA = "0x1B10E80")]
	public static GameObject CreateGameObject(Transform parent, GameObject prefabObj, Vector3 pos, Quaternion rot)
	{
		return null;
	}

	[Token(Token = "0x6000C84")]
	[Address(RVA = "0x1B1117C", Offset = "0x1B1117C", VA = "0x1B1117C")]
	public static void HideAllChildObject(GameObject parent)
	{
	}

	[Token(Token = "0x6000C85")]
	[Address(RVA = "0x1B11240", Offset = "0x1B11240", VA = "0x1B11240")]
	public static void RemoveAllChildObject(GameObject parent, bool bImmediate)
	{
	}

	[Token(Token = "0x6000C86")]
	[Address(RVA = "0x1B113C0", Offset = "0x1B113C0", VA = "0x1B113C0")]
	public static Component CreateComponent(Transform parent, Type type)
	{
		return null;
	}

	[Token(Token = "0x6000C87")]
	[Address(RVA = "0x1B114D4", Offset = "0x1B114D4", VA = "0x1B114D4")]
	public static Component CreateComponent(MonoBehaviour parent, Type type)
	{
		return null;
	}

	[Token(Token = "0x6000C88")]
	[Address(RVA = "0x1B113F8", Offset = "0x1B113F8", VA = "0x1B113F8")]
	public static Component CreateComponent(GameObject parent, Type type)
	{
		return null;
	}

	[Token(Token = "0x6000C89")]
	[Address(RVA = "0x1B1150C", Offset = "0x1B1150C", VA = "0x1B1150C")]
	public static Transform FindTransform(Transform rootTrans, string name)
	{
		return null;
	}

	[Token(Token = "0x6000C8A")]
	[Address(RVA = "0x1B118E0", Offset = "0x1B118E0", VA = "0x1B118E0")]
	public static bool FindTransform(Transform rootTrans, Transform findTrans)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C8B")]
	[Address(RVA = "0x1B11C58", Offset = "0x1B11C58", VA = "0x1B11C58")]
	public static Material ChangeMeshMaterial(Transform t, Material newMat)
	{
		return null;
	}

	[Token(Token = "0x6000C8C")]
	[Address(RVA = "0x1B11D74", Offset = "0x1B11D74", VA = "0x1B11D74")]
	public static void ChangeSkinnedMeshColor(Transform t, Color color)
	{
	}

	[Token(Token = "0x6000C8D")]
	[Address(RVA = "0x1B11E88", Offset = "0x1B11E88", VA = "0x1B11E88")]
	public static void ChangeMeshColor(Transform t, Color color)
	{
	}

	[Token(Token = "0x6000C8E")]
	[Address(RVA = "0x1B11F9C", Offset = "0x1B11F9C", VA = "0x1B11F9C")]
	public static void ChangeSkinnedMeshAlpha(Transform t, float alpha)
	{
	}

	[Token(Token = "0x6000C8F")]
	[Address(RVA = "0x1B1211C", Offset = "0x1B1211C", VA = "0x1B1211C")]
	public static void ChangeMeshAlpha(Transform t, float alpha)
	{
	}

	[Token(Token = "0x6000C90")]
	[Address(RVA = "0x1B1229C", Offset = "0x1B1229C", VA = "0x1B1229C")]
	public static Transform[] GetChilds(Transform parentObj)
	{
		return null;
	}

	[Token(Token = "0x6000C91")]
	[Address(RVA = "0x1B123FC", Offset = "0x1B123FC", VA = "0x1B123FC")]
	public static SortedList GetChildsSortList(Transform parentObj, bool bSub, bool bOnlyActive)
	{
		return null;
	}

	[Token(Token = "0x6000C92")]
	[Address(RVA = "0x1B125E4", Offset = "0x1B125E4", VA = "0x1B125E4")]
	public static GameObject FindObjectWithTag(GameObject rootObj, string findTag)
	{
		return null;
	}

	[Token(Token = "0x6000C93")]
	[Address(RVA = "0x1B127F8", Offset = "0x1B127F8", VA = "0x1B127F8")]
	public static GameObject FindObjectWithLayer(GameObject rootObj, int nFindLayer)
	{
		return null;
	}

	[Token(Token = "0x6000C94")]
	[Address(RVA = "0x1B129C8", Offset = "0x1B129C8", VA = "0x1B129C8")]
	public static void ChangeLayerWithChild(GameObject rootObj, int nLayer)
	{
	}

	[Token(Token = "0x6000C95")]
	[Address(RVA = "0x1B12B2C", Offset = "0x1B12B2C", VA = "0x1B12B2C")]
	public static void GetMeshInfo(GameObject selObj, bool bInChildren, out int nVertices, out int nTriangles, out int nMeshCount)
	{
	}

	[Token(Token = "0x6000C96")]
	[Address(RVA = "0x1B130F0", Offset = "0x1B130F0", VA = "0x1B130F0")]
	public static void GetMeshInfo(Mesh mesh, out int nVertices, out int nTriangles, out int nMeshCount)
	{
	}
}
[Token(Token = "0x20001A9")]
public class NgSerialized
{
	[Token(Token = "0x6000C97")]
	[Address(RVA = "0x1B13274", Offset = "0x1B13274", VA = "0x1B13274")]
	public NgSerialized()
	{
	}
}
[Token(Token = "0x20001AA")]
public class NgConvert
{
	[Token(Token = "0x6000C98")]
	[Address(RVA = "0x95A878", Offset = "0x95A878", VA = "0x95A878")]
	public NgConvert()
	{
	}

	[Token(Token = "0x6000C99")]
	[Address(RVA = "0x95A880", Offset = "0x95A880", VA = "0x95A880")]
	public static string GetTabSpace(int nTab)
	{
		return null;
	}

	[Token(Token = "0x6000C9A")]
	[Address(RVA = "0x95A97C", Offset = "0x95A97C", VA = "0x95A97C")]
	public static string[] GetIntStrings(int start, int count)
	{
		return null;
	}

	[Token(Token = "0x6000C9B")]
	[Address(RVA = "0x95AA8C", Offset = "0x95AA8C", VA = "0x95AA8C")]
	public static int[] GetIntegers(int start, int count)
	{
		return null;
	}

	[Token(Token = "0x6000C9C")]
	public static ArrayList ToArrayList<TT>(TT[] data)
	{
		return null;
	}

	[Token(Token = "0x6000C9D")]
	public static TT[] ToArray<TT>(ArrayList data)
	{
		return null;
	}

	[Token(Token = "0x6000C9E")]
	public static TT[] ResizeArray<TT>(TT[] src, int nResize)
	{
		return null;
	}

	[Token(Token = "0x6000C9F")]
	public static TT[] ResizeArray<TT>(TT[] src, int nResize, TT defaultValue)
	{
		return null;
	}

	[Token(Token = "0x6000CA0")]
	[Address(RVA = "0x95AB48", Offset = "0x95AB48", VA = "0x95AB48")]
	public static string[] ResizeArray(string[] src, int nResize)
	{
		return null;
	}

	[Token(Token = "0x6000CA1")]
	[Address(RVA = "0x95AC6C", Offset = "0x95AC6C", VA = "0x95AC6C")]
	public static GameObject[] ResizeArray(GameObject[] src, int nResize)
	{
		return null;
	}

	[Token(Token = "0x6000CA2")]
	[Address(RVA = "0x95AD90", Offset = "0x95AD90", VA = "0x95AD90")]
	public static GUIContent[] ResizeArray(GUIContent[] src, int nResize)
	{
		return null;
	}

	[Token(Token = "0x6000CA3")]
	[Address(RVA = "0x95AEB4", Offset = "0x95AEB4", VA = "0x95AEB4")]
	public static GUIContent[] StringsToContents(string[] strings)
	{
		return null;
	}

	[Token(Token = "0x6000CA4")]
	[Address(RVA = "0x95B030", Offset = "0x95B030", VA = "0x95B030")]
	public static string[] ContentsToStrings(GUIContent[] contents)
	{
		return null;
	}

	[Token(Token = "0x6000CA5")]
	[Address(RVA = "0x95B168", Offset = "0x95B168", VA = "0x95B168")]
	public static uint ToUint(string value, uint nDefaultValue)
	{
		return default(uint);
	}

	[Token(Token = "0x6000CA6")]
	[Address(RVA = "0x95B274", Offset = "0x95B274", VA = "0x95B274")]
	public static int ToInt(string value, int nDefaultValue)
	{
		return default(int);
	}

	[Token(Token = "0x6000CA7")]
	[Address(RVA = "0x95B380", Offset = "0x95B380", VA = "0x95B380")]
	public static float ToFloat(string value, float fDefaultValue)
	{
		return default(float);
	}

	[Token(Token = "0x6000CA8")]
	[Address(RVA = "0x95B498", Offset = "0x95B498", VA = "0x95B498")]
	public static string GetVaildFloatString(string strInput, ref float fCompleteValue)
	{
		return null;
	}
}
[Token(Token = "0x20001AB")]
public class NgTexture
{
	[Token(Token = "0x6000CA9")]
	[Address(RVA = "0x1B1327C", Offset = "0x1B1327C", VA = "0x1B1327C")]
	public NgTexture()
	{
	}

	[Token(Token = "0x6000CAA")]
	[Address(RVA = "0x1B13284", Offset = "0x1B13284", VA = "0x1B13284")]
	public static void UnloadTextures(GameObject rootObj)
	{
	}

	[Token(Token = "0x6000CAB")]
	[Address(RVA = "0x1B13594", Offset = "0x1B13594", VA = "0x1B13594")]
	public static Texture2D CopyTexture(Texture2D srcTex, Texture2D tarTex)
	{
		return null;
	}

	[Token(Token = "0x6000CAC")]
	[Address(RVA = "0x1B1360C", Offset = "0x1B1360C", VA = "0x1B1360C")]
	public static Texture2D InverseTexture32(Texture2D srcTex, Texture2D tarTex)
	{
		return null;
	}

	[Token(Token = "0x6000CAD")]
	[Address(RVA = "0x1B136E8", Offset = "0x1B136E8", VA = "0x1B136E8")]
	public static Texture2D CombineTexture(Texture2D baseTexture, Texture2D combineTexture)
	{
		return null;
	}

	[Token(Token = "0x6000CAE")]
	[Address(RVA = "0x1B13A50", Offset = "0x1B13A50", VA = "0x1B13A50")]
	public static bool CompareTexture(Texture2D tex1, Texture2D tex2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000CAF")]
	[Address(RVA = "0x1B13BA8", Offset = "0x1B13BA8", VA = "0x1B13BA8")]
	public static Texture2D FindTexture(List<Texture2D> findList, Texture2D findTex)
	{
		return null;
	}

	[Token(Token = "0x6000CB0")]
	[Address(RVA = "0x1B13CA0", Offset = "0x1B13CA0", VA = "0x1B13CA0")]
	public static int FindTextureIndex(List<Texture2D> findList, Texture2D findTex)
	{
		return default(int);
	}

	[Token(Token = "0x6000CB1")]
	[Address(RVA = "0x1B13D74", Offset = "0x1B13D74", VA = "0x1B13D74")]
	public static Texture2D CopyTexture(Texture2D srcTex, Rect srcRect, Texture2D tarTex, Rect tarRect)
	{
		return null;
	}

	[Token(Token = "0x6000CB2")]
	[Address(RVA = "0x1B13F24", Offset = "0x1B13F24", VA = "0x1B13F24")]
	public static Texture2D CopyTextureHalf(Texture2D srcTexture, Texture2D tarHalfTexture)
	{
		return null;
	}

	[Token(Token = "0x6000CB3")]
	[Address(RVA = "0x1B14424", Offset = "0x1B14424", VA = "0x1B14424")]
	public static Texture2D CopyTextureQuad(Texture2D srcTexture, Texture2D tarQuadTexture)
	{
		return null;
	}

	[Token(Token = "0x6000CB4")]
	[Address(RVA = "0x1B14E78", Offset = "0x1B14E78", VA = "0x1B14E78")]
	public static Texture2D CopyTexture(Texture2D srcTex, Texture2D tarTex, Rect drawRect)
	{
		return null;
	}
}
[Token(Token = "0x20001AC")]
public class NgUtil
{
	[Token(Token = "0x6000CB5")]
	[Address(RVA = "0x1B153A4", Offset = "0x1B153A4", VA = "0x1B153A4")]
	public NgUtil()
	{
	}

	[Token(Token = "0x6000CB6")]
	[Address(RVA = "0x1B153AC", Offset = "0x1B153AC", VA = "0x1B153AC")]
	public static void LogDevelop(object msg)
	{
	}

	[Token(Token = "0x6000CB7")]
	[Address(RVA = "0x1B153B0", Offset = "0x1B153B0", VA = "0x1B153B0")]
	public static void LogMessage(object msg)
	{
	}

	[Token(Token = "0x6000CB8")]
	[Address(RVA = "0x1B15438", Offset = "0x1B15438", VA = "0x1B15438")]
	public static void LogError(object msg)
	{
	}

	[Token(Token = "0x6000CB9")]
	[Address(RVA = "0x1B154C0", Offset = "0x1B154C0", VA = "0x1B154C0")]
	public static float GetArcRadian(float fHeight, float fWidth)
	{
		return default(float);
	}

	[Token(Token = "0x6000CBA")]
	[Address(RVA = "0x1B1557C", Offset = "0x1B1557C", VA = "0x1B1557C")]
	public static float GetArcRadius(float fHeight, float fWidth)
	{
		return default(float);
	}

	[Token(Token = "0x6000CBB")]
	[Address(RVA = "0x1B155AC", Offset = "0x1B155AC", VA = "0x1B155AC")]
	public static float GetArcLength(float fHeight, float fWidth)
	{
		return default(float);
	}

	[Token(Token = "0x6000CBC")]
	[Address(RVA = "0x1B155E8", Offset = "0x1B155E8", VA = "0x1B155E8")]
	public static int NextPowerOf2(int val)
	{
		return default(int);
	}

	[Token(Token = "0x6000CBD")]
	[Address(RVA = "0x1B15684", Offset = "0x1B15684", VA = "0x1B15684")]
	public static void ClearStrings(string[] strings)
	{
	}

	[Token(Token = "0x6000CBE")]
	[Address(RVA = "0x1B15788", Offset = "0x1B15788", VA = "0x1B15788")]
	public static void ClearBools(bool[] bools)
	{
	}

	[Token(Token = "0x6000CBF")]
	[Address(RVA = "0x1B157E0", Offset = "0x1B157E0", VA = "0x1B157E0")]
	public static void ClearObjects(UnityEngine.Object[] objects)
	{
	}
}
[Token(Token = "0x20001AD")]
public class NcDrawFpsRect : MonoBehaviour
{
	[Token(Token = "0x200051B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D0EC", Offset = "0xE9D0EC")]
	private sealed class <FPS>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <fps>__1;

		[Token(Token = "0x4001A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal NcDrawFpsRect $this;

		[Token(Token = "0x4001A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x4001A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal bool $disposing;

		[Token(Token = "0x4001A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int $PC;

		[Token(Token = "0x1700028C")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60023D4")]
			[Address(RVA = "0x93CFD0", Offset = "0x93CFD0", VA = "0x93CFD0", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700028D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023D5")]
			[Address(RVA = "0x93CFD8", Offset = "0x93CFD8", VA = "0x93CFD8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023D2")]
		[Address(RVA = "0x93C758", Offset = "0x93C758", VA = "0x93C758")]
		[DebuggerHidden]
		public <FPS>c__Iterator0()
		{
		}

		[Token(Token = "0x60023D3")]
		[Address(RVA = "0x93CD38", Offset = "0x93CD38", VA = "0x93CD38", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023D6")]
		[Address(RVA = "0x93CFE0", Offset = "0x93CFE0", VA = "0x93CFE0", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023D7")]
		[Address(RVA = "0x93CFF4", Offset = "0x93CFF4", VA = "0x93CFF4", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40008E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool centerTop;

	[Token(Token = "0x40008E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Rect startRect;

	[Token(Token = "0x40008E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool updateColor;

	[Token(Token = "0x40008E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool allowDrag;

	[Token(Token = "0x40008E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float frequency;

	[Token(Token = "0x40008EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int nbDecimal;

	[Token(Token = "0x40008EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float accum;

	[Token(Token = "0x40008EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int frames;

	[Token(Token = "0x40008ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Color color;

	[Token(Token = "0x40008EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private string sFPS;

	[Token(Token = "0x40008EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GUIStyle style;

	[Token(Token = "0x6000CC0")]
	[Address(RVA = "0x93C530", Offset = "0x93C530", VA = "0x93C530")]
	public NcDrawFpsRect()
	{
	}

	[Token(Token = "0x6000CC1")]
	[Address(RVA = "0x93C660", Offset = "0x93C660", VA = "0x93C660")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CC2")]
	[Address(RVA = "0x93C704", Offset = "0x93C704", VA = "0x93C704")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CC3")]
	[Address(RVA = "0x93C684", Offset = "0x93C684", VA = "0x93C684")]
	[DebuggerHidden]
	private IEnumerator FPS()
	{
		return null;
	}

	[Token(Token = "0x6000CC4")]
	[Address(RVA = "0x93C760", Offset = "0x93C760", VA = "0x93C760")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000CC5")]
	[Address(RVA = "0x93CB48", Offset = "0x93CB48", VA = "0x93CB48")]
	private void DoMyWindow(int windowID)
	{
	}
}
[Token(Token = "0x20001AE")]
public class NcDrawFpsText : MonoBehaviour
{
	[Token(Token = "0x40008F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float updateInterval;

	[Token(Token = "0x40008F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private float accum;

	[Token(Token = "0x40008F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int frames;

	[Token(Token = "0x40008F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float timeleft;

	[Token(Token = "0x6000CC6")]
	[Address(RVA = "0x93D078", Offset = "0x93D078", VA = "0x93D078")]
	public NcDrawFpsText()
	{
	}

	[Token(Token = "0x6000CC7")]
	[Address(RVA = "0x93D088", Offset = "0x93D088", VA = "0x93D088")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CC8")]
	[Address(RVA = "0x93D194", Offset = "0x93D194", VA = "0x93D194")]
	private void Update()
	{
	}
}
[Token(Token = "0x20001AF")]
public class NcSafeTool : MonoBehaviour
{
	[Token(Token = "0x40008F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool m_bShuttingDown;

	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public static bool m_bLoadLevel;

	[Token(Token = "0x40008F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static NcSafeTool s_Instance;

	[Token(Token = "0x6000CC9")]
	[Address(RVA = "0x94A87C", Offset = "0x94A87C", VA = "0x94A87C")]
	public NcSafeTool()
	{
	}

	[Token(Token = "0x6000CCA")]
	[Address(RVA = "0x94A884", Offset = "0x94A884", VA = "0x94A884")]
	private static void Instance()
	{
	}

	[Token(Token = "0x6000CCB")]
	[Address(RVA = "0x94ACDC", Offset = "0x94ACDC", VA = "0x94ACDC")]
	public static bool IsSafe()
	{
		return default(bool);
	}

	[Token(Token = "0x6000CCC")]
	[Address(RVA = "0x94ADB8", Offset = "0x94ADB8", VA = "0x94ADB8")]
	public static UnityEngine.Object SafeInstantiate(UnityEngine.Object original)
	{
		return null;
	}

	[Token(Token = "0x6000CCD")]
	[Address(RVA = "0x94AF3C", Offset = "0x94AF3C", VA = "0x94AF3C")]
	public static UnityEngine.Object SafeInstantiate(UnityEngine.Object original, Vector3 position, Quaternion rotation)
	{
		return null;
	}

	[Token(Token = "0x6000CCE")]
	[Address(RVA = "0x94B10C", Offset = "0x94B10C", VA = "0x94B10C")]
	public static void LoadLevel(int nLoadLevel)
	{
	}

	[Token(Token = "0x6000CCF")]
	[Address(RVA = "0x94B394", Offset = "0x94B394", VA = "0x94B394")]
	public void OnApplicationQuit()
	{
	}
}
[Token(Token = "0x20001B0")]
public class NcTickTimerTool
{
	[Token(Token = "0x40008F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	protected int m_nStartTickCount;

	[Token(Token = "0x40008F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	protected int m_nCheckTickCount;

	[Token(Token = "0x6000CD1")]
	[Address(RVA = "0x9520E8", Offset = "0x9520E8", VA = "0x9520E8")]
	public NcTickTimerTool()
	{
	}

	[Token(Token = "0x6000CD2")]
	[Address(RVA = "0x952138", Offset = "0x952138", VA = "0x952138")]
	public static NcTickTimerTool GetTickTimer()
	{
		return null;
	}

	[Token(Token = "0x6000CD3")]
	[Address(RVA = "0x952114", Offset = "0x952114", VA = "0x952114")]
	public void StartTickCount()
	{
	}

	[Token(Token = "0x6000CD4")]
	[Address(RVA = "0x9521B8", Offset = "0x9521B8", VA = "0x9521B8")]
	public int GetStartedTickCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000CD5")]
	[Address(RVA = "0x9521DC", Offset = "0x9521DC", VA = "0x9521DC")]
	public int GetElipsedTickCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000CD6")]
	[Address(RVA = "0x952214", Offset = "0x952214", VA = "0x952214")]
	public void LogElipsedTickCount()
	{
	}
}
[Token(Token = "0x20001B1")]
[ExecuteInEditMode]
public class FXMakerGrayscaleEffect : FXMakerImageEffectBase
{
	[Token(Token = "0x40008F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Texture textureRamp;

	[Token(Token = "0x40008FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float rampOffset;

	[Token(Token = "0x6000CD7")]
	[Address(RVA = "0x19A4948", Offset = "0x19A4948", VA = "0x19A4948")]
	public FXMakerGrayscaleEffect()
	{
	}

	[Token(Token = "0x6000CD8")]
	[Address(RVA = "0x19A4958", Offset = "0x19A4958", VA = "0x19A4958")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}
}
[Token(Token = "0x20001B2")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xE9D15C", Offset = "0xE9D15C")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9D15C", Offset = "0xE9D15C")]
public class FXMakerImageEffectBase : MonoBehaviour
{
	[Token(Token = "0x40008FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Shader shader;

	[Token(Token = "0x40008FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Material m_Material;

	[Token(Token = "0x170000CC")]
	protected Material material
	{
		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x19A4A88", Offset = "0x19A4A88", VA = "0x19A4A88")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000CD9")]
	[Address(RVA = "0x19A4950", Offset = "0x19A4950", VA = "0x19A4950")]
	public FXMakerImageEffectBase()
	{
	}

	[Token(Token = "0x6000CDA")]
	[Address(RVA = "0x19A4B6C", Offset = "0x19A4B6C", VA = "0x19A4B6C")]
	protected void Start()
	{
	}

	[Token(Token = "0x6000CDC")]
	[Address(RVA = "0x19A4C48", Offset = "0x19A4C48", VA = "0x19A4C48")]
	protected void OnDisable()
	{
	}
}
[Token(Token = "0x20001B3")]
public class FxmTestControls : MonoBehaviour
{
	[Token(Token = "0x20001B4")]
	public enum AXIS
	{
		[Token(Token = "0x4000914")]
		X,
		[Token(Token = "0x4000915")]
		Y,
		[Token(Token = "0x4000916")]
		Z
	}

	[Token(Token = "0x40008FD")]
	protected const int m_nRepeatIndex = 3;

	[Token(Token = "0x40008FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool m_bMinimize;

	[Token(Token = "0x40008FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected int m_nTriangles;

	[Token(Token = "0x4000900")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	protected int m_nVertices;

	[Token(Token = "0x4000901")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected int m_nMeshCount;

	[Token(Token = "0x4000902")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	protected int m_nParticleCount;

	[Token(Token = "0x4000903")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected int m_nPlayIndex;

	[Token(Token = "0x4000904")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected int m_nTransIndex;

	[Token(Token = "0x4000905")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected float[] m_fPlayToolbarTimes;

	[Token(Token = "0x4000906")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected AXIS m_nTransAxis;

	[Token(Token = "0x4000907")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected float m_fDelayCreateTime;

	[Token(Token = "0x4000908")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected bool m_bCalledDelayCreate;

	[Token(Token = "0x4000909")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	protected bool m_bStartAliveAnimation;

	[Token(Token = "0x400090A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected float m_fDistPerTime;

	[Token(Token = "0x400090B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	protected int m_nRotateIndex;

	[Token(Token = "0x400090C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected int m_nMultiShotCount;

	[Token(Token = "0x400090D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	protected float m_fTransRate;

	[Token(Token = "0x400090E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected float m_fStartPosition;

	[Token(Token = "0x400090F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float m_fTimeScale;

	[Token(Token = "0x4000910")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected float m_fPlayStartTime;

	[Token(Token = "0x4000911")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected float m_fOldTimeScale;

	[Token(Token = "0x4000912")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	protected float m_fCreateTime;

	[Token(Token = "0x6000CDD")]
	[Address(RVA = "0x19A7DFC", Offset = "0x19A7DFC", VA = "0x19A7DFC")]
	public FxmTestControls()
	{
	}

	[Token(Token = "0x6000CDE")]
	[Address(RVA = "0x19A7ED8", Offset = "0x19A7ED8", VA = "0x19A7ED8")]
	public float GetTimeScale()
	{
		return default(float);
	}

	[Token(Token = "0x6000CDF")]
	[Address(RVA = "0x19A7EE0", Offset = "0x19A7EE0", VA = "0x19A7EE0")]
	public bool IsRepeat()
	{
		return default(bool);
	}

	[Token(Token = "0x6000CE0")]
	[Address(RVA = "0x19A7EF4", Offset = "0x19A7EF4", VA = "0x19A7EF4")]
	public bool IsAutoRepeat()
	{
		return default(bool);
	}

	[Token(Token = "0x6000CE1")]
	[Address(RVA = "0x19A7F08", Offset = "0x19A7F08", VA = "0x19A7F08")]
	public float GetRepeatTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000CE2")]
	[Address(RVA = "0x19A7F48", Offset = "0x19A7F48", VA = "0x19A7F48")]
	public void SetStartTime()
	{
	}

	[Token(Token = "0x6000CE3")]
	[Address(RVA = "0x19A7F68", Offset = "0x19A7F68", VA = "0x19A7F68")]
	private void LoadPrefs()
	{
	}

	[Token(Token = "0x6000CE4")]
	[Address(RVA = "0x19A81CC", Offset = "0x19A81CC", VA = "0x19A81CC")]
	private void SavePrefs()
	{
	}

	[Token(Token = "0x6000CE5")]
	[Address(RVA = "0x19A82D8", Offset = "0x19A82D8", VA = "0x19A82D8")]
	public void SetDefaultSetting()
	{
	}

	[Token(Token = "0x6000CE6")]
	[Address(RVA = "0x19A8310", Offset = "0x19A8310", VA = "0x19A8310")]
	public void AutoSetting(int nPlayIndex, int nTransIndex, AXIS nTransAxis, float fDistPerTime, int nRotateIndex, int nMultiShotCount, float fTransRate, float fStartAdjustRate)
	{
	}

	[Token(Token = "0x6000CE7")]
	[Address(RVA = "0x19A834C", Offset = "0x19A834C", VA = "0x19A834C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000CE8")]
	[Address(RVA = "0x19A83BC", Offset = "0x19A83BC", VA = "0x19A83BC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000CE9")]
	[Address(RVA = "0x19A842C", Offset = "0x19A842C", VA = "0x19A842C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CEA")]
	[Address(RVA = "0x19A8430", Offset = "0x19A8430", VA = "0x19A8430")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CEB")]
	[Address(RVA = "0x19A8850", Offset = "0x19A8850", VA = "0x19A8850")]
	private bool IsAliveAnimation()
	{
		return default(bool);
	}

	[Token(Token = "0x6000CEC")]
	[Address(RVA = "0x19A8FC0", Offset = "0x19A8FC0", VA = "0x19A8FC0")]
	public void OnGUIControl()
	{
	}

	[Token(Token = "0x6000CED")]
	[Address(RVA = "0x19A9198", Offset = "0x19A9198", VA = "0x19A9198")]
	public Rect GetActionToolbarRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x6000CEE")]
	[Address(RVA = "0x19A92E4", Offset = "0x19A92E4", VA = "0x19A92E4")]
	private string NgTooltipTooltip(string str)
	{
		return null;
	}

	[Token(Token = "0x6000CEF")]
	[Address(RVA = "0x19A92EC", Offset = "0x19A92EC", VA = "0x19A92EC")]
	public static GUIContent[] GetHcEffectControls_Play(float fAutoRet, float timeScale, float timeOneShot1, float timeRepeat1, float timeRepeat2, float timeRepeat3, float timeRepeat4, float timeRepeat5)
	{
		return null;
	}

	[Token(Token = "0x6000CF0")]
	[Address(RVA = "0x19A99E0", Offset = "0x19A99E0", VA = "0x19A99E0")]
	public static GUIContent[] GetHcEffectControls_Trans(AXIS nTransAxis)
	{
		return null;
	}

	[Token(Token = "0x6000CF1")]
	[Address(RVA = "0x19AA050", Offset = "0x19AA050", VA = "0x19AA050")]
	public static GUIContent[] GetHcEffectControls_Rotate()
	{
		return null;
	}

	[Token(Token = "0x6000CF2")]
	[Address(RVA = "0x19AA22C", Offset = "0x19AA22C", VA = "0x19AA22C")]
	private void winActionToolbar(int id)
	{
	}

	[Token(Token = "0x6000CF3")]
	[Address(RVA = "0x19AD764", Offset = "0x19AD764", VA = "0x19AD764")]
	private void invokeStopTimer()
	{
	}

	[Token(Token = "0x6000CF4")]
	[Address(RVA = "0x19AD76C", Offset = "0x19AD76C", VA = "0x19AD76C")]
	public void RunActionControl()
	{
	}

	[Token(Token = "0x6000CF5")]
	[Address(RVA = "0x19AD16C", Offset = "0x19AD16C", VA = "0x19AD16C")]
	protected void RunActionControl(int nPlayIndex, int nTransIndex)
	{
	}

	[Token(Token = "0x6000CF6")]
	[Address(RVA = "0x19AE2E8", Offset = "0x19AE2E8", VA = "0x19AE2E8")]
	public void OnActionTransEnd()
	{
	}

	[Token(Token = "0x6000CF7")]
	[Address(RVA = "0x19AE2F0", Offset = "0x19AE2F0", VA = "0x19AE2F0")]
	private void RotateFront(Transform target)
	{
	}

	[Token(Token = "0x6000CF8")]
	[Address(RVA = "0x19A87A0", Offset = "0x19A87A0", VA = "0x19A87A0")]
	private void DelayCreateInstanceEffect(bool bEndMove)
	{
	}

	[Token(Token = "0x6000CF9")]
	[Address(RVA = "0x19AE49C", Offset = "0x19AE49C", VA = "0x19AE49C")]
	private void NextInstanceEffect()
	{
	}

	[Token(Token = "0x6000CFA")]
	[Address(RVA = "0x19ACE40", Offset = "0x19ACE40", VA = "0x19ACE40")]
	private void CreateInstanceEffect()
	{
	}

	[Token(Token = "0x6000CFB")]
	[Address(RVA = "0x19A80D4", Offset = "0x19A80D4", VA = "0x19A80D4")]
	private void SetTimeScale(float timeScale)
	{
	}

	[Token(Token = "0x6000CFC")]
	[Address(RVA = "0x19AD778", Offset = "0x19AD778", VA = "0x19AD778")]
	public void ResumeTimeScale()
	{
	}
}
[Token(Token = "0x20001B5")]
public class FxmTestMain : MonoBehaviour
{
	[Token(Token = "0x4000917")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static FxmTestMain inst;

	[Token(Token = "0x4000918")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GUISkin m_GuiMainSkin;

	[Token(Token = "0x4000919")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public FxmTestMouse m_FXMakerMouse;

	[Token(Token = "0x400091A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public FxmTestControls m_FXMakerControls;

	[Token(Token = "0x400091B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve m_SimulateArcCurve;

	[Token(Token = "0x400091C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public GameObject m_GroupList;

	[Token(Token = "0x400091D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int m_CurrentGroupIndex;

	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public GameObject m_PrefabList;

	[Token(Token = "0x400091F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int m_CurrentPrefabIndex;

	[Token(Token = "0x4000920")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool m_bAutoChange;

	[Token(Token = "0x4000921")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool m_bAutoSetting;

	[Token(Token = "0x4000922")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected GameObject m_OriginalEffectObject;

	[Token(Token = "0x4000923")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	protected GameObject m_InstanceEffectObject;

	[Token(Token = "0x6000CFD")]
	[Address(RVA = "0x19AE6E0", Offset = "0x19AE6E0", VA = "0x19AE6E0")]
	private FxmTestMain()
	{
	}

	[Token(Token = "0x6000CFE")]
	[Address(RVA = "0x19AE758", Offset = "0x19AE758", VA = "0x19AE758")]
	public FxmTestMouse GetFXMakerMouse()
	{
		return null;
	}

	[Token(Token = "0x6000CFF")]
	[Address(RVA = "0x19AE810", Offset = "0x19AE810", VA = "0x19AE810")]
	public FxmTestControls GetFXMakerControls()
	{
		return null;
	}

	[Token(Token = "0x6000D00")]
	[Address(RVA = "0x19AE8C8", Offset = "0x19AE8C8", VA = "0x19AE8C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D01")]
	[Address(RVA = "0x19AE958", Offset = "0x19AE958", VA = "0x19AE958")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000D02")]
	[Address(RVA = "0x19AE9BC", Offset = "0x19AE9BC", VA = "0x19AE9BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D03")]
	[Address(RVA = "0x19AEB80", Offset = "0x19AEB80", VA = "0x19AEB80")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D04")]
	[Address(RVA = "0x19AEB84", Offset = "0x19AEB84", VA = "0x19AEB84")]
	public void OnGUI()
	{
	}

	[Token(Token = "0x6000D05")]
	[Address(RVA = "0x19AE54C", Offset = "0x19AE54C", VA = "0x19AE54C")]
	public void ChangeEffect(bool bNext)
	{
	}

	[Token(Token = "0x6000D06")]
	[Address(RVA = "0x19AF378", Offset = "0x19AF378", VA = "0x19AF378")]
	public bool ChangeGroup(bool bNext)
	{
		return default(bool);
	}

	[Token(Token = "0x6000D07")]
	[Address(RVA = "0x19A924C", Offset = "0x19A924C", VA = "0x19A924C")]
	public bool IsCurrentEffectObject()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D08")]
	[Address(RVA = "0x19A92DC", Offset = "0x19A92DC", VA = "0x19A92DC")]
	public GameObject GetOriginalEffectObject()
	{
		return null;
	}

	[Token(Token = "0x6000D09")]
	[Address(RVA = "0x19AF5EC", Offset = "0x19AF5EC", VA = "0x19AF5EC")]
	public void ChangeRoot_OriginalEffectObject(GameObject newRoot)
	{
	}

	[Token(Token = "0x6000D0A")]
	[Address(RVA = "0x19AD790", Offset = "0x19AD790", VA = "0x19AD790")]
	public void ChangeRoot_InstanceEffectObject(GameObject newRoot)
	{
	}

	[Token(Token = "0x6000D0B")]
	[Address(RVA = "0x19A8798", Offset = "0x19A8798", VA = "0x19A8798")]
	public GameObject GetInstanceEffectObject()
	{
		return null;
	}

	[Token(Token = "0x6000D0C")]
	[Address(RVA = "0x19AF5F4", Offset = "0x19AF5F4", VA = "0x19AF5F4")]
	public void ClearCurrentEffectObject(GameObject effectRoot, bool bClearEventObject)
	{
	}

	[Token(Token = "0x6000D0D")]
	[Address(RVA = "0x19ACEEC", Offset = "0x19ACEEC", VA = "0x19ACEEC")]
	public void CreateCurrentInstanceEffect(bool bRunAction)
	{
	}

	[Token(Token = "0x6000D0E")]
	[Address(RVA = "0x19AF6DC", Offset = "0x19AF6DC", VA = "0x19AF6DC")]
	public GameObject GetInstanceRoot()
	{
		return null;
	}

	[Token(Token = "0x6000D0F")]
	[Address(RVA = "0x19AF75C", Offset = "0x19AF75C", VA = "0x19AF75C")]
	private bool CreateCurrentInstanceEffect(GameObject gameObj)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001B6")]
public class FxmTestMouse : MonoBehaviour
{
	[Token(Token = "0x4000924")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform m_TargetTrans;

	[Token(Token = "0x4000925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Camera m_GrayscaleCamara;

	[Token(Token = "0x4000926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Shader m_GrayscaleShader;

	[Token(Token = "0x4000927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool m_bRaycastHit;

	[Token(Token = "0x4000928")]
	protected const float m_fDefaultDistance = 8f;

	[Token(Token = "0x4000929")]
	protected const float m_fDefaultWheelSpeed = 5f;

	[Token(Token = "0x400092A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_fDistance;

	[Token(Token = "0x400092B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_fXSpeed;

	[Token(Token = "0x400092C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_fYSpeed;

	[Token(Token = "0x400092D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_fWheelSpeed;

	[Token(Token = "0x400092E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_fYMinLimit;

	[Token(Token = "0x400092F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_fYMaxLimit;

	[Token(Token = "0x4000930")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float m_fDistanceMin;

	[Token(Token = "0x4000931")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float m_fDistanceMax;

	[Token(Token = "0x4000932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int m_nMoveInputIndex;

	[Token(Token = "0x4000933")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int m_nRotInputIndex;

	[Token(Token = "0x4000934")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float m_fXRot;

	[Token(Token = "0x4000935")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float m_fYRot;

	[Token(Token = "0x4000936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected bool m_bHandEnable;

	[Token(Token = "0x4000937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected Vector3 m_MovePostion;

	[Token(Token = "0x4000938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	protected Vector3 m_OldMousePos;

	[Token(Token = "0x4000939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected bool m_bLeftClick;

	[Token(Token = "0x400093A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	protected bool m_bRightClick;

	[Token(Token = "0x6000D10")]
	[Address(RVA = "0x19AF980", Offset = "0x19AF980", VA = "0x19AF980")]
	public FxmTestMouse()
	{
	}

	[Token(Token = "0x6000D11")]
	[Address(RVA = "0x19AF9F0", Offset = "0x19AF9F0", VA = "0x19AF9F0")]
	public void ChangeAngle(float angle)
	{
	}

	[Token(Token = "0x6000D12")]
	[Address(RVA = "0x19AFAA4", Offset = "0x19AFAA4", VA = "0x19AFAA4")]
	public void SetHandControl(bool bEnable)
	{
	}

	[Token(Token = "0x6000D13")]
	[Address(RVA = "0x19AF560", Offset = "0x19AF560", VA = "0x19AF560")]
	public void SetDistance(float fDistance)
	{
	}

	[Token(Token = "0x6000D14")]
	[Address(RVA = "0x19B038C", Offset = "0x19B038C", VA = "0x19B038C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000D15")]
	[Address(RVA = "0x19B03FC", Offset = "0x19B03FC", VA = "0x19B03FC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D16")]
	[Address(RVA = "0x19B053C", Offset = "0x19B053C", VA = "0x19B053C")]
	private bool IsGUIMousePosition()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D17")]
	[Address(RVA = "0x19B072C", Offset = "0x19B072C", VA = "0x19B072C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D18")]
	[Address(RVA = "0x19AFAAC", Offset = "0x19AFAAC", VA = "0x19AFAAC")]
	public void UpdateCamera(bool bOnlyZoom)
	{
	}

	[Token(Token = "0x6000D19")]
	[Address(RVA = "0x19B0764", Offset = "0x19B0764", VA = "0x19B0764")]
	public static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x6000D1A")]
	[Address(RVA = "0x19B0840", Offset = "0x19B0840", VA = "0x19B0840")]
	private void UpdatePosition(Transform camera)
	{
	}
}
[Token(Token = "0x20001B7")]
public class FxmTestSetting : MonoBehaviour
{
	[Token(Token = "0x400093B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public int m_nPlayIndex;

	[Token(Token = "0x400093C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int m_nTransIndex;

	[Token(Token = "0x400093D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public FxmTestControls.AXIS m_nTransAxis;

	[Token(Token = "0x400093E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_fTransRate;

	[Token(Token = "0x400093F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_fStartPosition;

	[Token(Token = "0x4000940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_fDistPerTime;

	[Token(Token = "0x4000941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int m_nRotateIndex;

	[Token(Token = "0x4000942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int m_nMultiShotCount;

	[Token(Token = "0x4000943")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected float[] m_fPlayToolbarTimes;

	[Token(Token = "0x6000D1B")]
	[Address(RVA = "0x19B0BE0", Offset = "0x19B0BE0", VA = "0x19B0BE0")]
	public FxmTestSetting()
	{
	}

	[Token(Token = "0x6000D1C")]
	[Address(RVA = "0x19B0CA8", Offset = "0x19B0CA8", VA = "0x19B0CA8")]
	public string[] GetPlayContents()
	{
		return null;
	}
}
[Token(Token = "0x20001B8")]
public class FxmTestSimulate : MonoBehaviour
{
	[Token(Token = "0x20001B9")]
	public enum MODE_TYPE
	{
		[Token(Token = "0x4000956")]
		NONE,
		[Token(Token = "0x4000957")]
		MOVE,
		[Token(Token = "0x4000958")]
		ARC,
		[Token(Token = "0x4000959")]
		ROTATE,
		[Token(Token = "0x400095A")]
		TORNADO,
		[Token(Token = "0x400095B")]
		SCALE
	}

	[Token(Token = "0x4000944")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public MODE_TYPE m_Mode;

	[Token(Token = "0x4000945")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public FxmTestControls.AXIS m_nAxis;

	[Token(Token = "0x4000946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float m_fStartTime;

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 m_StartPos;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 m_EndPos;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_fSpeed;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool m_bRotFront;

	[Token(Token = "0x400094B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float m_fDist;

	[Token(Token = "0x400094C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float m_fRadius;

	[Token(Token = "0x400094D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float m_fArcLenRate;

	[Token(Token = "0x400094E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public AnimationCurve m_Curve;

	[Token(Token = "0x400094F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Component m_FXMakerControls;

	[Token(Token = "0x4000950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int m_nMultiShotIndex;

	[Token(Token = "0x4000951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int m_nMultiShotCount;

	[Token(Token = "0x4000952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public int m_nCircleCount;

	[Token(Token = "0x4000953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Vector3 m_PrevPosition;

	[Token(Token = "0x4000954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static int m_nMultiShotCreate;

	[Token(Token = "0x6000D1D")]
	[Address(RVA = "0x19B0E00", Offset = "0x19B0E00", VA = "0x19B0E00")]
	public FxmTestSimulate()
	{
	}

	[Token(Token = "0x6000D1E")]
	[Address(RVA = "0x19AD798", Offset = "0x19AD798", VA = "0x19AD798")]
	public void Init(Component fxmEffectControls, int nMultiShotCount)
	{
	}

	[Token(Token = "0x6000D1F")]
	[Address(RVA = "0x19AD7A4", Offset = "0x19AD7A4", VA = "0x19AD7A4")]
	public void SimulateMove(FxmTestControls.AXIS nTransAxis, float fHalfDist, float fSpeed, bool bRotFront)
	{
	}

	[Token(Token = "0x6000D20")]
	[Address(RVA = "0x19ADB0C", Offset = "0x19ADB0C", VA = "0x19ADB0C")]
	public void SimulateArc(float fHalfDist, float fSpeed, bool bRotFront)
	{
	}

	[Token(Token = "0x6000D21")]
	[Address(RVA = "0x19ADD40", Offset = "0x19ADD40", VA = "0x19ADD40")]
	public void SimulateFall(float fHeight, float fSpeed, bool bRotFront)
	{
	}

	[Token(Token = "0x6000D22")]
	[Address(RVA = "0x19ADEE0", Offset = "0x19ADEE0", VA = "0x19ADEE0")]
	public void SimulateRaise(float fHeight, float fSpeed, bool bRotFront)
	{
	}

	[Token(Token = "0x6000D23")]
	[Address(RVA = "0x19AE080", Offset = "0x19AE080", VA = "0x19AE080")]
	public void SimulateCircle(float fRadius, float fSpeed, bool bRotFront)
	{
	}

	[Token(Token = "0x6000D24")]
	[Address(RVA = "0x19AE138", Offset = "0x19AE138", VA = "0x19AE138")]
	public void SimulateTornado(float fRadius, float fHeight, float fSpeed, bool bRotFront)
	{
	}

	[Token(Token = "0x6000D25")]
	[Address(RVA = "0x19AD950", Offset = "0x19AD950", VA = "0x19AD950")]
	public void SimulateScale(FxmTestControls.AXIS nTransAxis, float fHalfDist, float fStartPosition, float fSpeed, bool bRotFront)
	{
	}

	[Token(Token = "0x6000D26")]
	[Address(RVA = "0x19B10FC", Offset = "0x19B10FC", VA = "0x19B10FC")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000D27")]
	[Address(RVA = "0x19B0EA8", Offset = "0x19B0EA8", VA = "0x19B0EA8")]
	private void SimulateStart(Vector3 startPos, float fSpeed, bool bRotFront)
	{
	}

	[Token(Token = "0x6000D28")]
	[Address(RVA = "0x19B18D4", Offset = "0x19B18D4", VA = "0x19B18D4")]
	private Vector3 GetArcPos(float fTimeRate)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000D29")]
	[Address(RVA = "0x19B1A00", Offset = "0x19B1A00", VA = "0x19B1A00")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D2A")]
	[Address(RVA = "0x19B1AB4", Offset = "0x19B1AB4", VA = "0x19B1AB4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D2B")]
	[Address(RVA = "0x19B1108", Offset = "0x19B1108", VA = "0x19B1108")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D2C")]
	[Address(RVA = "0x19B1C54", Offset = "0x19B1C54", VA = "0x19B1C54")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000D2D")]
	[Address(RVA = "0x19B1C58", Offset = "0x19B1C58", VA = "0x19B1C58")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x6000D2E")]
	[Address(RVA = "0x19B1AD4", Offset = "0x19B1AD4", VA = "0x19B1AD4")]
	private void OnMoveEnd()
	{
	}
}
[Token(Token = "0x20001BA")]
public class FxmTestSingleMain : MonoBehaviour
{
	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public GameObject[] m_EffectPrefabs;

	[Token(Token = "0x400095D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public GUIText m_EffectGUIText;

	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int m_nIndex;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_fCreateScale;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int m_nCreateCount;

	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_fRandomRange;

	[Token(Token = "0x6000D30")]
	[Address(RVA = "0x19B1C60", Offset = "0x19B1C60", VA = "0x19B1C60")]
	public FxmTestSingleMain()
	{
	}

	[Token(Token = "0x6000D31")]
	[Address(RVA = "0x19B1CF4", Offset = "0x19B1CF4", VA = "0x19B1CF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D32")]
	[Address(RVA = "0x19B1CF8", Offset = "0x19B1CF8", VA = "0x19B1CF8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000D33")]
	[Address(RVA = "0x19B1CFC", Offset = "0x19B1CFC", VA = "0x19B1CFC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D34")]
	[Address(RVA = "0x19B1D74", Offset = "0x19B1D74", VA = "0x19B1D74")]
	private void CreateEffect()
	{
	}

	[Token(Token = "0x6000D35")]
	[Address(RVA = "0x19B23A4", Offset = "0x19B23A4", VA = "0x19B23A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D36")]
	[Address(RVA = "0x19B23A8", Offset = "0x19B23A8", VA = "0x19B23A8")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000D37")]
	[Address(RVA = "0x19B2324", Offset = "0x19B2324", VA = "0x19B2324")]
	public GameObject GetInstanceRoot()
	{
		return null;
	}

	[Token(Token = "0x6000D38")]
	[Address(RVA = "0x19B2620", Offset = "0x19B2620", VA = "0x19B2620")]
	public static Rect GetButtonRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D39")]
	[Address(RVA = "0x19B2510", Offset = "0x19B2510", VA = "0x19B2510")]
	public static Rect GetButtonRect(int nIndex)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D3A")]
	[Address(RVA = "0x19B2728", Offset = "0x19B2728", VA = "0x19B2728")]
	public static void SetActiveRecursively(GameObject target, bool bActive)
	{
	}
}
[Token(Token = "0x20001BB")]
public class FxmTestSingleMouse : MonoBehaviour
{
	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform m_TargetTrans;

	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Camera m_GrayscaleCamara;

	[Token(Token = "0x4000964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Shader m_GrayscaleShader;

	[Token(Token = "0x4000965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected bool m_bRaycastHit;

	[Token(Token = "0x4000966")]
	protected const float m_fDefaultDistance = 8f;

	[Token(Token = "0x4000967")]
	protected const float m_fDefaultWheelSpeed = 5f;

	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float m_fDistance;

	[Token(Token = "0x4000969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float m_fXSpeed;

	[Token(Token = "0x400096A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float m_fYSpeed;

	[Token(Token = "0x400096B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float m_fWheelSpeed;

	[Token(Token = "0x400096C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float m_fYMinLimit;

	[Token(Token = "0x400096D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float m_fYMaxLimit;

	[Token(Token = "0x400096E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float m_fDistanceMin;

	[Token(Token = "0x400096F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float m_fDistanceMax;

	[Token(Token = "0x4000970")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int m_nMoveInputIndex;

	[Token(Token = "0x4000971")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int m_nRotInputIndex;

	[Token(Token = "0x4000972")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float m_fXRot;

	[Token(Token = "0x4000973")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float m_fYRot;

	[Token(Token = "0x4000974")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	protected bool m_bHandEnable;

	[Token(Token = "0x4000975")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	protected Vector3 m_MovePostion;

	[Token(Token = "0x4000976")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	protected Vector3 m_OldMousePos;

	[Token(Token = "0x4000977")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	protected bool m_bLeftClick;

	[Token(Token = "0x4000978")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	protected bool m_bRightClick;

	[Token(Token = "0x6000D3B")]
	[Address(RVA = "0x19B2810", Offset = "0x19B2810", VA = "0x19B2810")]
	public FxmTestSingleMouse()
	{
	}

	[Token(Token = "0x6000D3C")]
	[Address(RVA = "0x19B2880", Offset = "0x19B2880", VA = "0x19B2880")]
	public void ChangeAngle(float angle)
	{
	}

	[Token(Token = "0x6000D3D")]
	[Address(RVA = "0x19B2934", Offset = "0x19B2934", VA = "0x19B2934")]
	public void SetHandControl(bool bEnable)
	{
	}

	[Token(Token = "0x6000D3E")]
	[Address(RVA = "0x19B293C", Offset = "0x19B293C", VA = "0x19B293C")]
	public void SetDistance(float fDistance)
	{
	}

	[Token(Token = "0x6000D3F")]
	[Address(RVA = "0x19B29C0", Offset = "0x19B29C0", VA = "0x19B29C0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000D40")]
	[Address(RVA = "0x19B2A30", Offset = "0x19B2A30", VA = "0x19B2A30")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D41")]
	[Address(RVA = "0x19B2B70", Offset = "0x19B2B70", VA = "0x19B2B70")]
	private bool IsGUIMousePosition()
	{
		return default(bool);
	}

	[Token(Token = "0x6000D42")]
	[Address(RVA = "0x19B2C8C", Offset = "0x19B2C8C", VA = "0x19B2C8C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D43")]
	[Address(RVA = "0x19B2CC0", Offset = "0x19B2CC0", VA = "0x19B2CC0")]
	public void UpdateCamera()
	{
	}

	[Token(Token = "0x6000D44")]
	[Address(RVA = "0x19B35A0", Offset = "0x19B35A0", VA = "0x19B35A0")]
	public static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x6000D45")]
	[Address(RVA = "0x19B367C", Offset = "0x19B367C", VA = "0x19B367C")]
	private void UpdatePosition(Transform camera)
	{
	}

	[Token(Token = "0x6000D46")]
	[Address(RVA = "0x19B3A0C", Offset = "0x19B3A0C", VA = "0x19B3A0C")]
	public float GetWorldPerScreenPixel(Vector3 worldPoint)
	{
		return default(float);
	}
}
[Token(Token = "0x20001BC")]
public class FXMakerLayout : NgLayout
{
	[Token(Token = "0x20001BD")]
	public enum WINDOWID
	{
		[Token(Token = "0x40009A3")]
		NONE = 0,
		[Token(Token = "0x40009A4")]
		TOP_LEFT = 10,
		[Token(Token = "0x40009A5")]
		TOP_CENTER = 11,
		[Token(Token = "0x40009A6")]
		TOP_RIGHT = 12,
		[Token(Token = "0x40009A7")]
		EFFECT_LIST = 13,
		[Token(Token = "0x40009A8")]
		EFFECT_HIERARCHY = 14,
		[Token(Token = "0x40009A9")]
		EFFECT_CONTROLS = 15,
		[Token(Token = "0x40009AA")]
		TOOLIP_CURSOR = 16,
		[Token(Token = "0x40009AB")]
		MODAL_MSG = 17,
		[Token(Token = "0x40009AC")]
		MENUPOPUP = 18,
		[Token(Token = "0x40009AD")]
		SPRITEPOPUP = 19,
		[Token(Token = "0x40009AE")]
		POPUP = 100,
		[Token(Token = "0x40009AF")]
		RESOURCE_START = 200,
		[Token(Token = "0x40009B0")]
		HINTRECT = 300
	}

	[Token(Token = "0x20001BE")]
	public enum MODAL_TYPE
	{
		[Token(Token = "0x40009B2")]
		MODAL_NONE,
		[Token(Token = "0x40009B3")]
		MODAL_MSG,
		[Token(Token = "0x40009B4")]
		MODAL_OK,
		[Token(Token = "0x40009B5")]
		MODAL_YESNO,
		[Token(Token = "0x40009B6")]
		MODAL_OKCANCEL
	}

	[Token(Token = "0x20001BF")]
	public enum MODALRETURN_TYPE
	{
		[Token(Token = "0x40009B8")]
		MODALRETURN_SHOW,
		[Token(Token = "0x40009B9")]
		MODALRETURN_OK,
		[Token(Token = "0x40009BA")]
		MODALRETURN_CANCEL
	}

	[Token(Token = "0x200051C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D1FC", Offset = "0xE9D1FC")]
	private sealed class <ModalWindow>c__AnonStorey0
	{
		[Token(Token = "0x4001A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal GUI.WindowFunction func;

		[Token(Token = "0x60023D8")]
		[Address(RVA = "0x19A761C", Offset = "0x19A761C", VA = "0x19A761C")]
		public <ModalWindow>c__AnonStorey0()
		{
		}

		[Token(Token = "0x60023D9")]
		[Address(RVA = "0x19A7BAC", Offset = "0x19A7BAC", VA = "0x19A7BAC")]
		internal void <>m__0(int id)
		{
		}
	}

	[Token(Token = "0x4000979")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static float m_fFixedWindowWidth;

	[Token(Token = "0x400097A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	protected static float m_fTopMenuHeight;

	[Token(Token = "0x400097B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	protected static bool m_bLastStateTopMenuMini;

	[Token(Token = "0x400097C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	public static bool m_bDevelopState;

	[Token(Token = "0x400097D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
	public static bool m_bDevelopPrefs;

	[Token(Token = "0x400097E")]
	public const string m_CurrentVersion = "v1.2.12";

	[Token(Token = "0x400097F")]
	public const int m_nMaxResourceListCount = 100;

	[Token(Token = "0x4000980")]
	public const int m_nMaxPrefabListCount = 500;

	[Token(Token = "0x4000981")]
	public const int m_nMaxTextureListCount = 500;

	[Token(Token = "0x4000982")]
	public const int m_nMaxMaterialListCount = 1000;

	[Token(Token = "0x4000983")]
	public const float m_fScreenShotEffectZoomRate = 1f;

	[Token(Token = "0x4000984")]
	public const float m_fScreenShotBackZoomRate = 0.6f;

	[Token(Token = "0x4000985")]
	public const float m_fScrollButtonAspect = 0.55f;

	[Token(Token = "0x4000986")]
	public const float m_fReloadPreviewTime = 0.5f;

	[Token(Token = "0x4000987")]
	public const int m_nThumbCaptureSize = 512;

	[Token(Token = "0x4000988")]
	public const int m_nThumbImageSize = 128;

	[Token(Token = "0x4000989")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static Rect m_rectOuterMargin;

	[Token(Token = "0x400098A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static Rect m_rectInnerMargin;

	[Token(Token = "0x400098B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public static int m_nSidewindowWidthCount;

	[Token(Token = "0x400098C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static float m_fButtonMargin;

	[Token(Token = "0x400098D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public static float m_fScrollButtonHeight;

	[Token(Token = "0x400098E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static bool m_bMinimizeTopMenu;

	[Token(Token = "0x400098F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public static bool m_bMinimizeAll;

	[Token(Token = "0x4000990")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public static float m_fMinimizeClickWidth;

	[Token(Token = "0x4000991")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static float m_fMinimizeClickHeight;

	[Token(Token = "0x4000992")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public static float m_fOriActionToolbarHeight;

	[Token(Token = "0x4000993")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static float m_fActionToolbarHeight;

	[Token(Token = "0x4000994")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public static float m_MinimizeHeight;

	[Token(Token = "0x4000995")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static float m_fToolMessageHeight;

	[Token(Token = "0x4000996")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public static float m_fTooltipHeight;

	[Token(Token = "0x4000997")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static float m_fModalMessageWidth;

	[Token(Token = "0x4000998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public static float m_fModalMessageHeight;

	[Token(Token = "0x4000999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static Color m_ColorButtonHover;

	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static Color m_ColorButtonActive;

	[Token(Token = "0x400099B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public static Color m_ColorButtonMatNormal;

	[Token(Token = "0x400099C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static Color m_ColorButtonUnityEngine;

	[Token(Token = "0x400099D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public static Color m_ColorDropFocused;

	[Token(Token = "0x400099E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public static Color m_ColorHelpBox;

	[Token(Token = "0x400099F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	protected static float m_fArrowIntervalStartTime;

	[Token(Token = "0x40009A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	protected static float m_fArrowIntervalRepeatTime;

	[Token(Token = "0x40009A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	protected static float m_fKeyLastTime;

	[Token(Token = "0x6000D47")]
	[Address(RVA = "0x19A4D1C", Offset = "0x19A4D1C", VA = "0x19A4D1C")]
	public FXMakerLayout()
	{
	}

	[Token(Token = "0x6000D48")]
	[Address(RVA = "0x19A4D24", Offset = "0x19A4D24", VA = "0x19A4D24")]
	public static float GetFixedWindowWidth()
	{
		return default(float);
	}

	[Token(Token = "0x6000D49")]
	[Address(RVA = "0x19A4D30", Offset = "0x19A4D30", VA = "0x19A4D30")]
	public static float GetTopMenuHeight()
	{
		return default(float);
	}

	[Token(Token = "0x6000D4A")]
	[Address(RVA = "0x19A4E44", Offset = "0x19A4E44", VA = "0x19A4E44")]
	public static int GetWindowId(WINDOWID id)
	{
		return default(int);
	}

	[Token(Token = "0x6000D4B")]
	[Address(RVA = "0x19A4E4C", Offset = "0x19A4E4C", VA = "0x19A4E4C")]
	public static Rect GetChildTopRect(Rect rectParent, int topMargin, int nHeight)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D4C")]
	[Address(RVA = "0x19A4FD0", Offset = "0x19A4FD0", VA = "0x19A4FD0")]
	public static Rect GetChildBottomRect(Rect rectParent, int nHeight)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D4D")]
	[Address(RVA = "0x19A5164", Offset = "0x19A5164", VA = "0x19A5164")]
	public static Rect GetChildVerticalRect(Rect rectParent, int topMargin, int count, int pos, int sumCount)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D4E")]
	[Address(RVA = "0x19A53E0", Offset = "0x19A53E0", VA = "0x19A53E0")]
	public static Rect GetInnerVerticalRect(Rect rectBase, int count, int pos, int sumCount)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D4F")]
	[Address(RVA = "0x19A5588", Offset = "0x19A5588", VA = "0x19A5588")]
	public static Rect GetChildHorizontalRect(Rect rectParent, int topMargin, int count, int pos, int sumCount)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D50")]
	[Address(RVA = "0x19A5800", Offset = "0x19A5800", VA = "0x19A5800")]
	public static Rect GetInnerHorizontalRect(Rect rectBase, int count, int pos, int sumCount)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D51")]
	[Address(RVA = "0x19A59A4", Offset = "0x19A59A4", VA = "0x19A59A4")]
	public static Rect GetMenuChangeRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D52")]
	[Address(RVA = "0x19A5AA0", Offset = "0x19A5AA0", VA = "0x19A5AA0")]
	public static Rect GetMenuToolbarRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D53")]
	[Address(RVA = "0x19A5CB0", Offset = "0x19A5CB0", VA = "0x19A5CB0")]
	public static Rect GetMenuTopRightRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D54")]
	[Address(RVA = "0x19A5DE0", Offset = "0x19A5DE0", VA = "0x19A5DE0")]
	public static Rect GetResListRect(int nIndex)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D55")]
	[Address(RVA = "0x19A6000", Offset = "0x19A6000", VA = "0x19A6000")]
	public static Rect GetEffectListRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D56")]
	[Address(RVA = "0x19A6200", Offset = "0x19A6200", VA = "0x19A6200")]
	public static Rect GetEffectHierarchyRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D57")]
	[Address(RVA = "0x19A6440", Offset = "0x19A6440", VA = "0x19A6440")]
	public static Rect GetActionToolbarRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D58")]
	[Address(RVA = "0x19A6644", Offset = "0x19A6644", VA = "0x19A6644")]
	public static Rect GetToolMessageRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D59")]
	[Address(RVA = "0x19A67A8", Offset = "0x19A67A8", VA = "0x19A67A8")]
	public static Rect GetTooltipRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D5A")]
	[Address(RVA = "0x19A69B8", Offset = "0x19A69B8", VA = "0x19A69B8")]
	public static Rect GetCursorTooltipRect(Vector2 size)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D5B")]
	[Address(RVA = "0x19A6AF4", Offset = "0x19A6AF4", VA = "0x19A6AF4")]
	public static Rect GetModalMessageRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D5C")]
	[Address(RVA = "0x19A6C30", Offset = "0x19A6C30", VA = "0x19A6C30")]
	public static Rect GetMenuGizmoRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D5D")]
	[Address(RVA = "0x19A6D78", Offset = "0x19A6D78", VA = "0x19A6D78")]
	public static Rect GetClientRect()
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D5E")]
	[Address(RVA = "0x19A6F74", Offset = "0x19A6F74", VA = "0x19A6F74")]
	public static Rect GetScrollViewRect(int nWidth, int nButtonCount, int nColumn)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D5F")]
	[Address(RVA = "0x19A7084", Offset = "0x19A7084", VA = "0x19A7084")]
	public static Rect GetScrollGridRect(int nWidth, int nButtonCount, int nColumn)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D60")]
	[Address(RVA = "0x19A7188", Offset = "0x19A7188", VA = "0x19A7188")]
	public static Rect GetAspectScrollViewRect(int nWidth, float fAspect, int nButtonCount, int nColumn, bool bImageOnly)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D61")]
	[Address(RVA = "0x19A7254", Offset = "0x19A7254", VA = "0x19A7254")]
	public static Rect GetAspectScrollGridRect(int nWidth, float fAspect, int nButtonCount, int nColumn, bool bImageOnly)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000D62")]
	[Address(RVA = "0x19A7314", Offset = "0x19A7314", VA = "0x19A7314")]
	public static KeyCode GetVaildInputKey(KeyCode key, bool bPress)
	{
		return default(KeyCode);
	}

	[Token(Token = "0x6000D63")]
	[Address(RVA = "0x19A74B0", Offset = "0x19A74B0", VA = "0x19A74B0")]
	public static void ModalWindow(Rect rect, GUI.WindowFunction func, string title)
	{
	}

	[Token(Token = "0x6000D64")]
	[Address(RVA = "0x19A7624", Offset = "0x19A7624", VA = "0x19A7624")]
	private static void setHotControl(int id)
	{
	}
}
namespace Prime31
{
	[Token(Token = "0x20001C0")]
	public class GoogleIAB
	{
		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AndroidJavaObject _plugin;

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x1B21694", Offset = "0x1B21694", VA = "0x1B21694")]
		static GoogleIAB()
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x1B21854", Offset = "0x1B21854", VA = "0x1B21854")]
		public GoogleIAB()
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x1B2185C", Offset = "0x1B2185C", VA = "0x1B2185C")]
		public static void enableLogging(bool shouldEnable)
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x1B21A20", Offset = "0x1B21A20", VA = "0x1B21A20")]
		public static void setAutoVerifySignatures(bool shouldVerify)
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x1B21B94", Offset = "0x1B21B94", VA = "0x1B21B94")]
		public static void init(string publicKey, [Optional] bool? allowTestProducts)
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0x1B21DF0", Offset = "0x1B21DF0", VA = "0x1B21DF0")]
		public static void unbindService()
		{
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0x1B21EE4", Offset = "0x1B21EE4", VA = "0x1B21EE4")]
		public static bool areSubscriptionsSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x1B21FF0", Offset = "0x1B21FF0", VA = "0x1B21FF0")]
		public static void queryInventory(string[] skus)
		{
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x1B2213C", Offset = "0x1B2213C", VA = "0x1B2213C")]
		public static void purchaseProduct(string sku)
		{
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x1B22204", Offset = "0x1B22204", VA = "0x1B22204")]
		public static void purchaseProduct(string sku, string developerPayload)
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x1B2239C", Offset = "0x1B2239C", VA = "0x1B2239C")]
		public static void consumeProduct(string sku)
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x1B224E8", Offset = "0x1B224E8", VA = "0x1B224E8")]
		public static void consumeProducts(string[] skus)
		{
		}
	}
	[Token(Token = "0x20001C1")]
	public class GoogleIABManager : AbstractManager
	{
		[Token(Token = "0x1400006D")]
		public static event Action billingSupportedEvent
		{
			[Token(Token = "0x6000D74")]
			[Address(RVA = "0x1B226E0", Offset = "0x1B226E0", VA = "0x1B226E0")]
			add
			{
			}
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0x1B22854", Offset = "0x1B22854", VA = "0x1B22854")]
			remove
			{
			}
		}

		[Token(Token = "0x1400006E")]
		public static event Action<string> billingNotSupportedEvent
		{
			[Token(Token = "0x6000D76")]
			[Address(RVA = "0x1B229C8", Offset = "0x1B229C8", VA = "0x1B229C8")]
			add
			{
			}
			[Token(Token = "0x6000D77")]
			[Address(RVA = "0x1B22B3C", Offset = "0x1B22B3C", VA = "0x1B22B3C")]
			remove
			{
			}
		}

		[Token(Token = "0x1400006F")]
		public static event Action<List<GooglePurchase>, List<GoogleSkuInfo>> queryInventorySucceededEvent
		{
			[Token(Token = "0x6000D78")]
			[Address(RVA = "0x1B22CB0", Offset = "0x1B22CB0", VA = "0x1B22CB0")]
			add
			{
			}
			[Token(Token = "0x6000D79")]
			[Address(RVA = "0x1B22E24", Offset = "0x1B22E24", VA = "0x1B22E24")]
			remove
			{
			}
		}

		[Token(Token = "0x14000070")]
		public static event Action<string> queryInventoryFailedEvent
		{
			[Token(Token = "0x6000D7A")]
			[Address(RVA = "0x1B22F98", Offset = "0x1B22F98", VA = "0x1B22F98")]
			add
			{
			}
			[Token(Token = "0x6000D7B")]
			[Address(RVA = "0x1B2310C", Offset = "0x1B2310C", VA = "0x1B2310C")]
			remove
			{
			}
		}

		[Token(Token = "0x14000071")]
		public static event Action<string, string> purchaseCompleteAwaitingVerificationEvent
		{
			[Token(Token = "0x6000D7C")]
			[Address(RVA = "0x1B23280", Offset = "0x1B23280", VA = "0x1B23280")]
			add
			{
			}
			[Token(Token = "0x6000D7D")]
			[Address(RVA = "0x1B233F4", Offset = "0x1B233F4", VA = "0x1B233F4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000072")]
		public static event Action<GooglePurchase> purchaseSucceededEvent
		{
			[Token(Token = "0x6000D7E")]
			[Address(RVA = "0x1B23568", Offset = "0x1B23568", VA = "0x1B23568")]
			add
			{
			}
			[Token(Token = "0x6000D7F")]
			[Address(RVA = "0x1B236DC", Offset = "0x1B236DC", VA = "0x1B236DC")]
			remove
			{
			}
		}

		[Token(Token = "0x14000073")]
		public static event Action<string, int> purchaseFailedEvent
		{
			[Token(Token = "0x6000D80")]
			[Address(RVA = "0x1B23850", Offset = "0x1B23850", VA = "0x1B23850")]
			add
			{
			}
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0x1B239C4", Offset = "0x1B239C4", VA = "0x1B239C4")]
			remove
			{
			}
		}

		[Token(Token = "0x14000074")]
		public static event Action<GooglePurchase> consumePurchaseSucceededEvent
		{
			[Token(Token = "0x6000D82")]
			[Address(RVA = "0x1B23B38", Offset = "0x1B23B38", VA = "0x1B23B38")]
			add
			{
			}
			[Token(Token = "0x6000D83")]
			[Address(RVA = "0x1B23CAC", Offset = "0x1B23CAC", VA = "0x1B23CAC")]
			remove
			{
			}
		}

		[Token(Token = "0x14000075")]
		public static event Action<string> consumePurchaseFailedEvent
		{
			[Token(Token = "0x6000D84")]
			[Address(RVA = "0x1B23E20", Offset = "0x1B23E20", VA = "0x1B23E20")]
			add
			{
			}
			[Token(Token = "0x6000D85")]
			[Address(RVA = "0x1B23F94", Offset = "0x1B23F94", VA = "0x1B23F94")]
			remove
			{
			}
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x1B22634", Offset = "0x1B22634", VA = "0x1B22634")]
		static GoogleIABManager()
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x1B226D8", Offset = "0x1B226D8", VA = "0x1B226D8")]
		public GoogleIABManager()
		{
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x1B24108", Offset = "0x1B24108", VA = "0x1B24108")]
		public void billingSupported(string empty)
		{
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x1B241A0", Offset = "0x1B241A0", VA = "0x1B241A0")]
		public void billingNotSupported(string error)
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x1B2424C", Offset = "0x1B2424C", VA = "0x1B2424C")]
		public void queryInventorySucceeded(string json)
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x1B24920", Offset = "0x1B24920", VA = "0x1B24920")]
		public void queryInventoryFailed(string error)
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x1B249CC", Offset = "0x1B249CC", VA = "0x1B249CC")]
		public void purchaseCompleteAwaitingVerification(string json)
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x1B24BA0", Offset = "0x1B24BA0", VA = "0x1B24BA0")]
		public void purchaseSucceeded(string json)
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x1B252F8", Offset = "0x1B252F8", VA = "0x1B252F8")]
		public void purchaseFailed(string json)
		{
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0x1B25518", Offset = "0x1B25518", VA = "0x1B25518")]
		public void consumePurchaseSucceeded(string json)
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0x1B25638", Offset = "0x1B25638", VA = "0x1B25638")]
		public void consumePurchaseFailed(string error)
		{
		}
	}
	[Token(Token = "0x20001C2")]
	public class GooglePurchase
	{
		[Token(Token = "0x20001C3")]
		public enum GooglePurchaseState
		{
			[Token(Token = "0x40009D0")]
			Purchased,
			[Token(Token = "0x40009D1")]
			Canceled,
			[Token(Token = "0x40009D2")]
			Refunded
		}

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D3E0", Offset = "0xE9D3E0")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D3E0", Offset = "0xE9D3E0")]
		private string <packageName>k__BackingField;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D414", Offset = "0xE9D414")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D414", Offset = "0xE9D414")]
		private string <orderId>k__BackingField;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D448", Offset = "0xE9D448")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D448", Offset = "0xE9D448")]
		private string <productId>k__BackingField;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D47C", Offset = "0xE9D47C")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D47C", Offset = "0xE9D47C")]
		private string <developerPayload>k__BackingField;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D4B0", Offset = "0xE9D4B0")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D4B0", Offset = "0xE9D4B0")]
		private string <type>k__BackingField;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D4E4", Offset = "0xE9D4E4")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D4E4", Offset = "0xE9D4E4")]
		private long <purchaseTime>k__BackingField;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D518", Offset = "0xE9D518")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D518", Offset = "0xE9D518")]
		private GooglePurchaseState <purchaseState>k__BackingField;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D54C", Offset = "0xE9D54C")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D54C", Offset = "0xE9D54C")]
		private string <purchaseToken>k__BackingField;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D580", Offset = "0xE9D580")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D580", Offset = "0xE9D580")]
		private string <signature>k__BackingField;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D5B4", Offset = "0xE9D5B4")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D5B4", Offset = "0xE9D5B4")]
		private string <originalJson>k__BackingField;

		[Token(Token = "0x170000CD")]
		public string packageName
		{
			[Token(Token = "0x6000D90")]
			[Address(RVA = "0x1B2573C", Offset = "0x1B2573C", VA = "0x1B2573C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D5E8", Offset = "0xE9D5E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D91")]
			[Address(RVA = "0x1B256E4", Offset = "0x1B256E4", VA = "0x1B256E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D5F8", Offset = "0xE9D5F8")]
			private set
			{
			}
		}

		[Token(Token = "0x170000CE")]
		public string orderId
		{
			[Token(Token = "0x6000D92")]
			[Address(RVA = "0x1B25744", Offset = "0x1B25744", VA = "0x1B25744")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D608", Offset = "0xE9D608")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D93")]
			[Address(RVA = "0x1B256EC", Offset = "0x1B256EC", VA = "0x1B256EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D618", Offset = "0xE9D618")]
			private set
			{
			}
		}

		[Token(Token = "0x170000CF")]
		public string productId
		{
			[Token(Token = "0x6000D94")]
			[Address(RVA = "0x1B2574C", Offset = "0x1B2574C", VA = "0x1B2574C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D628", Offset = "0xE9D628")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D95")]
			[Address(RVA = "0x1B256F4", Offset = "0x1B256F4", VA = "0x1B256F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D638", Offset = "0xE9D638")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D0")]
		public string developerPayload
		{
			[Token(Token = "0x6000D96")]
			[Address(RVA = "0x1B25754", Offset = "0x1B25754", VA = "0x1B25754")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D648", Offset = "0xE9D648")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D97")]
			[Address(RVA = "0x1B256FC", Offset = "0x1B256FC", VA = "0x1B256FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D658", Offset = "0xE9D658")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D1")]
		public string type
		{
			[Token(Token = "0x6000D98")]
			[Address(RVA = "0x1B2575C", Offset = "0x1B2575C", VA = "0x1B2575C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D668", Offset = "0xE9D668")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D99")]
			[Address(RVA = "0x1B25704", Offset = "0x1B25704", VA = "0x1B25704")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D678", Offset = "0xE9D678")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D2")]
		public long purchaseTime
		{
			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0x1B25764", Offset = "0x1B25764", VA = "0x1B25764")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D688", Offset = "0xE9D688")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000D9B")]
			[Address(RVA = "0x1B2570C", Offset = "0x1B2570C", VA = "0x1B2570C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D698", Offset = "0xE9D698")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D3")]
		public GooglePurchaseState purchaseState
		{
			[Token(Token = "0x6000D9C")]
			[Address(RVA = "0x1B2576C", Offset = "0x1B2576C", VA = "0x1B2576C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D6A8", Offset = "0xE9D6A8")]
			get
			{
				return default(GooglePurchaseState);
			}
			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0x1B2571C", Offset = "0x1B2571C", VA = "0x1B2571C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D6B8", Offset = "0xE9D6B8")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D4")]
		public string purchaseToken
		{
			[Token(Token = "0x6000D9E")]
			[Address(RVA = "0x1B25774", Offset = "0x1B25774", VA = "0x1B25774")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D6C8", Offset = "0xE9D6C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0x1B25724", Offset = "0x1B25724", VA = "0x1B25724")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D6D8", Offset = "0xE9D6D8")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D5")]
		public string signature
		{
			[Token(Token = "0x6000DA0")]
			[Address(RVA = "0x1B2577C", Offset = "0x1B2577C", VA = "0x1B2577C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D6E8", Offset = "0xE9D6E8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0x1B2572C", Offset = "0x1B2572C", VA = "0x1B2572C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D6F8", Offset = "0xE9D6F8")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D6")]
		public string originalJson
		{
			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0x1B25784", Offset = "0x1B25784", VA = "0x1B25784")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D708", Offset = "0xE9D708")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DA3")]
			[Address(RVA = "0x1B25734", Offset = "0x1B25734", VA = "0x1B25734")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D718", Offset = "0xE9D718")]
			private set
			{
			}
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0x1B24C84", Offset = "0x1B24C84", VA = "0x1B24C84")]
		public GooglePurchase(Dictionary<string, object> dict)
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x1B24470", Offset = "0x1B24470", VA = "0x1B24470")]
		public static List<GooglePurchase> fromList(List<object> items)
		{
			return null;
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x1B2578C", Offset = "0x1B2578C", VA = "0x1B2578C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20001C4")]
	public class GoogleSkuInfo
	{
		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D728", Offset = "0xE9D728")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D728", Offset = "0xE9D728")]
		private string <title>k__BackingField;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D75C", Offset = "0xE9D75C")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D75C", Offset = "0xE9D75C")]
		private string <price>k__BackingField;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D790", Offset = "0xE9D790")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D790", Offset = "0xE9D790")]
		private string <type>k__BackingField;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D7C4", Offset = "0xE9D7C4")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D7C4", Offset = "0xE9D7C4")]
		private string <description>k__BackingField;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D7F8", Offset = "0xE9D7F8")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D7F8", Offset = "0xE9D7F8")]
		private string <productId>k__BackingField;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D82C", Offset = "0xE9D82C")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D82C", Offset = "0xE9D82C")]
		private string <priceCurrencyCode>k__BackingField;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D860", Offset = "0xE9D860")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D860", Offset = "0xE9D860")]
		private long <priceAmountMicros>k__BackingField;

		[Token(Token = "0x170000D7")]
		public string title
		{
			[Token(Token = "0x6000DA7")]
			[Address(RVA = "0x1B260E0", Offset = "0x1B260E0", VA = "0x1B260E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D894", Offset = "0xE9D894")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DA8")]
			[Address(RVA = "0x1B260A0", Offset = "0x1B260A0", VA = "0x1B260A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D8A4", Offset = "0xE9D8A4")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		public string price
		{
			[Token(Token = "0x6000DA9")]
			[Address(RVA = "0x1B260E8", Offset = "0x1B260E8", VA = "0x1B260E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D8B4", Offset = "0xE9D8B4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0x1B260A8", Offset = "0x1B260A8", VA = "0x1B260A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D8C4", Offset = "0xE9D8C4")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D9")]
		public string type
		{
			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0x1B260F0", Offset = "0x1B260F0", VA = "0x1B260F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D8D4", Offset = "0xE9D8D4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DAC")]
			[Address(RVA = "0x1B260B0", Offset = "0x1B260B0", VA = "0x1B260B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D8E4", Offset = "0xE9D8E4")]
			private set
			{
			}
		}

		[Token(Token = "0x170000DA")]
		public string description
		{
			[Token(Token = "0x6000DAD")]
			[Address(RVA = "0x1B260F8", Offset = "0x1B260F8", VA = "0x1B260F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D8F4", Offset = "0xE9D8F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DAE")]
			[Address(RVA = "0x1B260B8", Offset = "0x1B260B8", VA = "0x1B260B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D904", Offset = "0xE9D904")]
			private set
			{
			}
		}

		[Token(Token = "0x170000DB")]
		public string productId
		{
			[Token(Token = "0x6000DAF")]
			[Address(RVA = "0x1B26100", Offset = "0x1B26100", VA = "0x1B26100")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D914", Offset = "0xE9D914")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DB0")]
			[Address(RVA = "0x1B260C0", Offset = "0x1B260C0", VA = "0x1B260C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D924", Offset = "0xE9D924")]
			private set
			{
			}
		}

		[Token(Token = "0x170000DC")]
		public string priceCurrencyCode
		{
			[Token(Token = "0x6000DB1")]
			[Address(RVA = "0x1B26108", Offset = "0x1B26108", VA = "0x1B26108")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D934", Offset = "0xE9D934")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DB2")]
			[Address(RVA = "0x1B260C8", Offset = "0x1B260C8", VA = "0x1B260C8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D944", Offset = "0xE9D944")]
			private set
			{
			}
		}

		[Token(Token = "0x170000DD")]
		public long priceAmountMicros
		{
			[Token(Token = "0x6000DB3")]
			[Address(RVA = "0x1B26110", Offset = "0x1B26110", VA = "0x1B26110")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D954", Offset = "0xE9D954")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0x1B260D0", Offset = "0x1B260D0", VA = "0x1B260D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D964", Offset = "0xE9D964")]
			private set
			{
			}
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0x1B25B2C", Offset = "0x1B25B2C", VA = "0x1B25B2C")]
		public GoogleSkuInfo(Dictionary<string, object> dict)
		{
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x1B246C8", Offset = "0x1B246C8", VA = "0x1B246C8")]
		public static List<GoogleSkuInfo> fromList(List<object> items)
		{
			return null;
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x1B26118", Offset = "0x1B26118", VA = "0x1B26118", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
}
[Token(Token = "0x20001C5")]
public static class EtceteraBridge
{
	[Token(Token = "0x40009DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string CUSTOMER_SERVICE_EMAIL_ADDRESS;

	[Token(Token = "0x40009DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly string CUSTOMER_SERVICE_PURCHASED_EMAIL;

	[Token(Token = "0x170000DE")]
	public static bool isEmailReady
	{
		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x19260F4", Offset = "0x19260F4", VA = "0x19260F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000DB7")]
	[Address(RVA = "0x19260E0", Offset = "0x19260E0", VA = "0x19260E0")]
	public static void CallAppleAlert(string title, string message, params AppleAlertButtonData[] myAlertButtonData)
	{
	}

	[Token(Token = "0x6000DB8")]
	[Address(RVA = "0x19260E4", Offset = "0x19260E4", VA = "0x19260E4")]
	public static void CallRateThisApp(string title, string message)
	{
	}

	[Token(Token = "0x6000DB9")]
	[Address(RVA = "0x19260E8", Offset = "0x19260E8", VA = "0x19260E8")]
	public static void CallRateThisApp(int launchCount, float hoursBetweenPrompts, string title, string message)
	{
	}

	[Token(Token = "0x6000DBA")]
	[Address(RVA = "0x19260EC", Offset = "0x19260EC", VA = "0x19260EC")]
	public static void RegisterForPushNotifications()
	{
	}

	[Token(Token = "0x6000DBB")]
	[Address(RVA = "0x19260F0", Offset = "0x19260F0", VA = "0x19260F0")]
	public static void PlayMessedMovieFile(string fileDirectory)
	{
	}

	[Token(Token = "0x6000DBD")]
	[Address(RVA = "0x19260FC", Offset = "0x19260FC", VA = "0x19260FC")]
	public static void CompileCustomerServiceEmail(string[] attachment, bool usePurchasedEmail)
	{
	}

	[Token(Token = "0x6000DBE")]
	[Address(RVA = "0x19267AC", Offset = "0x19267AC", VA = "0x19267AC")]
	public static void ComposeComlaintEmail()
	{
	}

	[Token(Token = "0x6000DBF")]
	[Address(RVA = "0x19267A4", Offset = "0x19267A4", VA = "0x19267A4")]
	private static void ShowMailComposerWithAttachment(byte[] attachmentData, string attachmentMimeType, string attachmentFilename, string toAddress, string subject, string body, bool isHTML)
	{
	}

	[Token(Token = "0x6000DC0")]
	[Address(RVA = "0x19267A8", Offset = "0x19267A8", VA = "0x19267A8")]
	private static void ShowMailComposer(string toAddress, string subject, string body, bool isHTML)
	{
	}

	[Token(Token = "0x6000DC1")]
	[Address(RVA = "0x1926A88", Offset = "0x1926A88", VA = "0x1926A88")]
	public static void CallAppleTextPrompt(string titleText, string bodyText, string defaultText, bool autoComplete, Action<string> callback, [Optional] Action failureCallback)
	{
	}
}
[Token(Token = "0x20001C6")]
public class AppleAlertButtonData
{
	[Token(Token = "0x40009DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D984", Offset = "0xE9D984")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D984", Offset = "0xE9D984")]
	private string <buttonLabel>k__BackingField;

	[Token(Token = "0x40009DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D9B8", Offset = "0xE9D9B8")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9D9B8", Offset = "0xE9D9B8")]
	private Action<string> <action>k__BackingField;

	[Token(Token = "0x170000DF")]
	internal string buttonLabel
	{
		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0x19DBCD0", Offset = "0x19DBCD0", VA = "0x19DBCD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D9EC", Offset = "0xE9D9EC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0x19DBCC0", Offset = "0x19DBCC0", VA = "0x19DBCC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9D9FC", Offset = "0xE9D9FC")]
		private set
		{
		}
	}

	[Token(Token = "0x170000E0")]
	internal Action<string> action
	{
		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x19DBCD8", Offset = "0x19DBCD8", VA = "0x19DBCD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DA0C", Offset = "0xE9DA0C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x19DBCC8", Offset = "0x19DBCC8", VA = "0x19DBCC8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DA1C", Offset = "0xE9DA1C")]
		private set
		{
		}
	}

	[Token(Token = "0x6000DC3")]
	[Address(RVA = "0x19DBC98", Offset = "0x19DBC98", VA = "0x19DBC98")]
	public AppleAlertButtonData(string myButtonLabel, Action<string> myAction)
	{
	}
}
[Token(Token = "0x20001C7")]
public class GameCenterIDsList : MonoBehaviour
{
	[Token(Token = "0x20001C8")]
	public enum AchievementNames
	{
		[Token(Token = "0x40009E3")]
		listenToAllCh1ZagerTapes,
		[Token(Token = "0x40009E4")]
		scannedAllCh1ScannablePOI,
		[Token(Token = "0x40009E5")]
		foundAllCh1BannedBooksAndGameCartridges,
		[Token(Token = "0x40009E6")]
		lookedIntoEveryRoom,
		[Token(Token = "0x40009E7")]
		completeChapterOne,
		[Token(Token = "0x40009E8")]
		listenToAllCh2ZagerTapes,
		[Token(Token = "0x40009E9")]
		scannedAllCh2ScannablePOI,
		[Token(Token = "0x40009EA")]
		foundAllCh2BannedBooksAndGameCartridges,
		[Token(Token = "0x40009EB")]
		lookedIntoEveryCh2Room,
		[Token(Token = "0x40009EC")]
		completeChapterTwo,
		[Token(Token = "0x40009ED")]
		listenToAllCh3ZagerTapes,
		[Token(Token = "0x40009EE")]
		scannedAllCh3ScannablePOI,
		[Token(Token = "0x40009EF")]
		foundAllCh3BannedBooksAndGameCartridges,
		[Token(Token = "0x40009F0")]
		lookedIntoEveryCh3Room,
		[Token(Token = "0x40009F1")]
		completeChapterThree,
		[Token(Token = "0x40009F2")]
		listenToAllCh4ZagerTapes,
		[Token(Token = "0x40009F3")]
		scannedAllCh4ScannablePOI,
		[Token(Token = "0x40009F4")]
		foundAllCh4BannedBooksAndGameCartridges,
		[Token(Token = "0x40009F5")]
		watchTVAndListenPetri,
		[Token(Token = "0x40009F6")]
		lookedIntoEveryCh4Room,
		[Token(Token = "0x40009F7")]
		completeChapterFour,
		[Token(Token = "0x40009F8")]
		listenToAllCh5ZagerTapes,
		[Token(Token = "0x40009F9")]
		scannedAllCh5ScannablePOI,
		[Token(Token = "0x40009FA")]
		foundAllCh5BannedBooksAndGameCartridges,
		[Token(Token = "0x40009FB")]
		lookedIntoEveryCh5Room,
		[Token(Token = "0x40009FC")]
		completeChapterFive
	}

	[Token(Token = "0x20001C9")]
	public enum LeaderboardNames
	{
		[Token(Token = "0x40009FE")]
		CompletionTime,
		[Token(Token = "0x40009FF")]
		Ep2CompletionTime,
		[Token(Token = "0x4000A00")]
		Ep3CompletionTime,
		[Token(Token = "0x4000A01")]
		Ep4CompletionTime,
		[Token(Token = "0x4000A02")]
		Ep5CompletionTime
	}

	[Token(Token = "0x40009DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GameCenterIDsList _instance;

	[Token(Token = "0x40009DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool instanceNotFound;

	[Token(Token = "0x40009E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<string> achievementIDs;

	[Token(Token = "0x40009E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<string> leaderboardIDs;

	[Token(Token = "0x170000E1")]
	public static GameCenterIDsList instance
	{
		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x19B3DBC", Offset = "0x19B3DBC", VA = "0x19B3DBC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000DC8")]
	[Address(RVA = "0x19B3D18", Offset = "0x19B3D18", VA = "0x19B3D18")]
	public GameCenterIDsList()
	{
	}

	[Token(Token = "0x6000DCA")]
	[Address(RVA = "0x19B40D8", Offset = "0x19B40D8", VA = "0x19B40D8")]
	public string getAchievementID(int achievementIndex)
	{
		return null;
	}

	[Token(Token = "0x6000DCB")]
	[Address(RVA = "0x19B41CC", Offset = "0x19B41CC", VA = "0x19B41CC")]
	public string getLeaderboardID(LeaderboardNames leaderboardName)
	{
		return null;
	}
}
[Token(Token = "0x20001CA")]
public static class GameCenterManagerBridge
{
	[Token(Token = "0x170000E2")]
	public static string PlayerAlias
	{
		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x19B42C8", Offset = "0x19B42C8", VA = "0x19B42C8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000E3")]
	public static bool isAuthenticated
	{
		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x19B4324", Offset = "0x19B4324", VA = "0x19B4324")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000DCD")]
	[Address(RVA = "0x19B42C4", Offset = "0x19B42C4", VA = "0x19B42C4")]
	public static void AskToAuthenticate()
	{
	}

	[Token(Token = "0x6000DD0")]
	[Address(RVA = "0x19B432C", Offset = "0x19B432C", VA = "0x19B432C")]
	public static void AuthenticatePlayer()
	{
	}

	[Token(Token = "0x6000DD1")]
	[Address(RVA = "0x19B4330", Offset = "0x19B4330", VA = "0x19B4330")]
	public static void UnlockAchievement(int achievementIndex, float percentage = 100f)
	{
	}

	[Token(Token = "0x6000DD2")]
	[Address(RVA = "0x19B4334", Offset = "0x19B4334", VA = "0x19B4334")]
	public static void SubmitValueToLeaderboard(GameCenterIDsList.LeaderboardNames leaderboardName, long submitedValue)
	{
	}

	[Token(Token = "0x6000DD3")]
	[Address(RVA = "0x19B4338", Offset = "0x19B4338", VA = "0x19B4338")]
	public static void DisplayGameCenterViewController()
	{
	}
}
[Token(Token = "0x20001CB")]
public static class iCloudDocumentsBackup
{
	[Token(Token = "0x20001CC")]
	private class DirectoryManager
	{
		[Token(Token = "0x20001CD")]
		public class FileSystemEvent
		{
			[Token(Token = "0x4000A11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DAD4", Offset = "0xE9DAD4")]
			[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9DAD4", Offset = "0xE9DAD4")]
			private string <FullPath>k__BackingField;

			[Token(Token = "0x4000A12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DB08", Offset = "0xE9DB08")]
			[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9DB08", Offset = "0xE9DB08")]
			private string <Name>k__BackingField;

			[Token(Token = "0x4000A13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DB3C", Offset = "0xE9DB3C")]
			[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9DB3C", Offset = "0xE9DB3C")]
			private WatcherChangeTypes <ChangeType>k__BackingField;

			[Token(Token = "0x4000A14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DB70", Offset = "0xE9DB70")]
			[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9DB70", Offset = "0xE9DB70")]
			private DateTime <FileWriteTime>k__BackingField;

			[Token(Token = "0x170000E7")]
			public string FullPath
			{
				[Token(Token = "0x6000DF4")]
				[Address(RVA = "0x19C59D4", Offset = "0x19C59D4", VA = "0x19C59D4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DBA4", Offset = "0xE9DBA4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000DF5")]
				[Address(RVA = "0x19C85B4", Offset = "0x19C85B4", VA = "0x19C85B4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DBB4", Offset = "0xE9DBB4")]
				private set
				{
				}
			}

			[Token(Token = "0x170000E8")]
			public string Name
			{
				[Token(Token = "0x6000DF6")]
				[Address(RVA = "0x19C5980", Offset = "0x19C5980", VA = "0x19C5980")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DBC4", Offset = "0xE9DBC4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000DF7")]
				[Address(RVA = "0x19C85BC", Offset = "0x19C85BC", VA = "0x19C85BC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DBD4", Offset = "0xE9DBD4")]
				private set
				{
				}
			}

			[Token(Token = "0x170000E9")]
			public WatcherChangeTypes ChangeType
			{
				[Token(Token = "0x6000DF8")]
				[Address(RVA = "0x19C5978", Offset = "0x19C5978", VA = "0x19C5978")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DBE4", Offset = "0xE9DBE4")]
				get
				{
					return default(WatcherChangeTypes);
				}
				[Token(Token = "0x6000DF9")]
				[Address(RVA = "0x19C85C4", Offset = "0x19C85C4", VA = "0x19C85C4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DBF4", Offset = "0xE9DBF4")]
				private set
				{
				}
			}

			[Token(Token = "0x170000EA")]
			public DateTime FileWriteTime
			{
				[Token(Token = "0x6000DFA")]
				[Address(RVA = "0x19C77C0", Offset = "0x19C77C0", VA = "0x19C77C0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DC04", Offset = "0xE9DC04")]
				get
				{
					return default(DateTime);
				}
				[Token(Token = "0x6000DFB")]
				[Address(RVA = "0x19C85CC", Offset = "0x19C85CC", VA = "0x19C85CC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DC14", Offset = "0xE9DC14")]
				private set
				{
				}
			}

			[Token(Token = "0x6000DF2")]
			[Address(RVA = "0x19C77D4", Offset = "0x19C77D4", VA = "0x19C77D4")]
			public FileSystemEvent(string filePath, WatcherChangeTypes changeType)
			{
			}

			[Token(Token = "0x6000DF3")]
			[Address(RVA = "0x19C85AC", Offset = "0x19C85AC", VA = "0x19C85AC")]
			private FileSystemEvent()
			{
			}

			[Token(Token = "0x6000DFC")]
			[Address(RVA = "0x19C7108", Offset = "0x19C7108", VA = "0x19C7108")]
			public static string Serialize(FileSystemEvent fileSystemEvent)
			{
				return null;
			}

			[Token(Token = "0x6000DFD")]
			[Address(RVA = "0x19C6C5C", Offset = "0x19C6C5C", VA = "0x19C6C5C")]
			public static FileSystemEvent Deserialize(string serializedFileSystemEvent)
			{
				return null;
			}
		}

		[Token(Token = "0x200051D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DC24", Offset = "0xE9DC24")]
		private sealed class <ReconcileFilesCoroutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001A19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Action callback;

			[Token(Token = "0x4001A1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal DirectoryManager $this;

			[Token(Token = "0x4001A1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal object $current;

			[Token(Token = "0x4001A1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal bool $disposing;

			[Token(Token = "0x4001A1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int $PC;

			[Token(Token = "0x1700028E")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60023DC")]
				[Address(RVA = "0x19C8504", Offset = "0x19C8504", VA = "0x19C8504", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700028F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60023DD")]
				[Address(RVA = "0x19C850C", Offset = "0x19C850C", VA = "0x19C850C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60023DA")]
			[Address(RVA = "0x19C67DC", Offset = "0x19C67DC", VA = "0x19C67DC")]
			[DebuggerHidden]
			public <ReconcileFilesCoroutine>c__Iterator0()
			{
			}

			[Token(Token = "0x60023DB")]
			[Address(RVA = "0x19C844C", Offset = "0x19C844C", VA = "0x19C844C", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60023DE")]
			[Address(RVA = "0x19C8514", Offset = "0x19C8514", VA = "0x19C8514", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60023DF")]
			[Address(RVA = "0x19C8528", Offset = "0x19C8528", VA = "0x19C8528", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200051E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DC84", Offset = "0xE9DC84")]
		private sealed class <ReconcileFileList>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001A1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal List<string> <savedFileList>__0;

			[Token(Token = "0x4001A1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal Dictionary<string, DateTime> <timeStamps>__0;

			[Token(Token = "0x4001A20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal bool <needToUpdateCachedFileList>__0;

			[Token(Token = "0x4001A21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal List<string> newFileList;

			[Token(Token = "0x4001A22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int <savedFileIndex>__1;

			[Token(Token = "0x4001A23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal bool <foundNewFile>__2;

			[Token(Token = "0x4001A24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int <newFileIndex>__3;

			[Token(Token = "0x4001A25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal string <savedFileDirectory>__4;

			[Token(Token = "0x4001A26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal string <newFileDirectory>__4;

			[Token(Token = "0x4001A27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal DateTime <newFileChangeTime>__5;

			[Token(Token = "0x4001A28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal FileSystemEvent <fileSystemEvent>__6;

			[Token(Token = "0x4001A29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			internal FileSystemEvent <fileSystemEvent>__7;

			[Token(Token = "0x4001A2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal int <newFileIndex>__8;

			[Token(Token = "0x4001A2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			internal bool <foundCachedFile>__9;

			[Token(Token = "0x4001A2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal FileSystemEvent <fileSystemEvent>__10;

			[Token(Token = "0x4001A2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			internal Action callback;

			[Token(Token = "0x4001A2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal DirectoryManager $this;

			[Token(Token = "0x4001A2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			internal object $current;

			[Token(Token = "0x4001A30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal bool $disposing;

			[Token(Token = "0x4001A31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			internal int $PC;

			[Token(Token = "0x17000290")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60023E2")]
				[Address(RVA = "0x19C83A4", Offset = "0x19C83A4", VA = "0x19C83A4", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000291")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60023E3")]
				[Address(RVA = "0x19C83AC", Offset = "0x19C83AC", VA = "0x19C83AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60023E0")]
			[Address(RVA = "0x19C6890", Offset = "0x19C6890", VA = "0x19C6890")]
			[DebuggerHidden]
			public <ReconcileFileList>c__Iterator1()
			{
			}

			[Token(Token = "0x60023E1")]
			[Address(RVA = "0x19C78A4", Offset = "0x19C78A4", VA = "0x19C78A4", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60023E4")]
			[Address(RVA = "0x19C83B4", Offset = "0x19C83B4", VA = "0x19C83B4", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60023E5")]
			[Address(RVA = "0x19C83C8", Offset = "0x19C83C8", VA = "0x19C83C8", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected string directory;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected MonoBehaviour coroutineSurrogate;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private string playerPrefsKey;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool reconcilingFiles;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private List<FileSystemEvent> cachedIgnoredEvents;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<string, DateTime> cachedDateTimes;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private List<string> cachedFileList;

		[Token(Token = "0x170000E6")]
		public string Name
		{
			[Token(Token = "0x6000DDF")]
			[Address(RVA = "0x19C5E20", Offset = "0x19C5E20", VA = "0x19C5E20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000076")]
		public event Action<FileSystemEvent> fileChangeEvent
		{
			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0x19C5C38", Offset = "0x19C5C38", VA = "0x19C5C38")]
			add
			{
			}
			[Token(Token = "0x6000DDE")]
			[Address(RVA = "0x19C5D2C", Offset = "0x19C5D2C", VA = "0x19C5D2C")]
			remove
			{
			}
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0x19C5AD8", Offset = "0x19C5AD8", VA = "0x19C5AD8")]
		public DirectoryManager(string paramDirectory, string paramPlayerPrefsKey, MonoBehaviour paramCoroutineSurrogate)
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x19C5E28", Offset = "0x19C5E28", VA = "0x19C5E28")]
		private bool CanMonitor()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x19C5988", Offset = "0x19C5988", VA = "0x19C5988")]
		public void DeleteFile(string fileName)
		{
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x19C59DC", Offset = "0x19C59DC", VA = "0x19C59DC")]
		public void WriteFile(string writtenFileName, string readFilePath)
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x19C5A28", Offset = "0x19C5A28", VA = "0x19C5A28")]
		public DateTime GetFileDateTime(string fileName)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x19C6704", Offset = "0x19C6704", VA = "0x19C6704")]
		public void ReconcileFiles(Action callback)
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x19C6744", Offset = "0x19C6744", VA = "0x19C6744", Slot = "4")]
		[DebuggerHidden]
		protected virtual IEnumerator ReconcileFilesCoroutine(Action callback)
		{
			return null;
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x19C67E4", Offset = "0x19C67E4", VA = "0x19C67E4")]
		[DebuggerHidden]
		protected IEnumerator ReconcileFileList(List<string> newFileList, Action callback)
		{
			return null;
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x19C6898", Offset = "0x19C6898", VA = "0x19C6898")]
		private DateTime GetCachedFileTimeStamp(string fileName)
		{
			return default(DateTime);
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x19C64F4", Offset = "0x19C64F4", VA = "0x19C64F4")]
		private void SetCachedFileTimeStamp(string fileName, DateTime dateTime)
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x19C5EC8", Offset = "0x19C5EC8", VA = "0x19C5EC8")]
		private void DeleteCachedFileTimeStamp(string fileName)
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x19C5FD4", Offset = "0x19C5FD4", VA = "0x19C5FD4")]
		private List<string> GetCachedFileList()
		{
			return null;
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x19C6240", Offset = "0x19C6240", VA = "0x19C6240")]
		private void SetCachedFileList(List<string> filePaths)
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x19C6AD4", Offset = "0x19C6AD4", VA = "0x19C6AD4")]
		private List<FileSystemEvent> GetCachedIgnoreEvents()
		{
			return null;
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x19C6FA4", Offset = "0x19C6FA4", VA = "0x19C6FA4")]
		private void AddCachedIgnoreEvents(FileSystemEvent fileSystemEvent)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x19C7334", Offset = "0x19C7334", VA = "0x19C7334")]
		private void RemoveCachedIgnoreEvents(int index)
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x19C7550", Offset = "0x19C7550", VA = "0x19C7550")]
		private bool isEventUsable(FileSystemEvent fileSystemEventArgs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x19C6458", Offset = "0x19C6458", VA = "0x19C6458")]
		private void ApplyIgnoreFileChange(string filePath)
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x19C5E30", Offset = "0x19C5E30", VA = "0x19C5E30")]
		private void ApplyIgnoreFileDelete(string filePath)
		{
		}
	}

	[Token(Token = "0x20001CE")]
	private class iCloudDirManager : DirectoryManager
	{
		[Token(Token = "0x200051F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DCF4", Offset = "0xE9DCF4")]
		private sealed class <ReconcileFilesCoroutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001A32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Action callback;

			[Token(Token = "0x4001A33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal iCloudDirManager $this;

			[Token(Token = "0x4001A34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal object $current;

			[Token(Token = "0x4001A35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal bool $disposing;

			[Token(Token = "0x4001A36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int $PC;

			[Token(Token = "0x17000292")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x60023E8")]
				[Address(RVA = "0x19C9158", Offset = "0x19C9158", VA = "0x19C9158", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000293")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60023E9")]
				[Address(RVA = "0x19C9160", Offset = "0x19C9160", VA = "0x19C9160", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60023E6")]
			[Address(RVA = "0x19C9088", Offset = "0x19C9088", VA = "0x19C9088")]
			[DebuggerHidden]
			public <ReconcileFilesCoroutine>c__Iterator0()
			{
			}

			[Token(Token = "0x60023E7")]
			[Address(RVA = "0x19C90A0", Offset = "0x19C90A0", VA = "0x19C90A0", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60023EA")]
			[Address(RVA = "0x19C9168", Offset = "0x19C9168", VA = "0x19C9168", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x60023EB")]
			[Address(RVA = "0x19C917C", Offset = "0x19C917C", VA = "0x19C917C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly string[] potentialFiles;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool isDownloading;

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x19C85E4", Offset = "0x19C85E4", VA = "0x19C85E4")]
		public iCloudDirManager(string paramDirectory, string paramPlayerPrefsKey, MonoBehaviour paramCoroutineSurrogate)
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x19C8FF0", Offset = "0x19C8FF0", VA = "0x19C8FF0", Slot = "4")]
		[DebuggerHidden]
		protected override IEnumerator ReconcileFilesCoroutine(Action callback)
		{
			return null;
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x19C9090", Offset = "0x19C9090", VA = "0x19C9090")]
		private bool IsFileDownloaded(string file, out bool recognizeFile)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x4000A03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DA2C", Offset = "0xE9DA2C")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9DA2C", Offset = "0xE9DA2C")]
	private static string <localSaveDirectory>k__BackingField;

	[Token(Token = "0x4000A04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static string iCloudDirectory;

	[Token(Token = "0x4000A05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static MonoBehaviour coroutineSurrogate;

	[Token(Token = "0x4000A06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static DirectoryManager iCloudDirectoryManager;

	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static DirectoryManager localDirectoryManager;

	[Token(Token = "0x4000A08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static bool isReconciling;

	[Token(Token = "0x170000E4")]
	public static string localSaveDirectory
	{
		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x19C5374", Offset = "0x19C5374", VA = "0x19C5374")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DA60", Offset = "0xE9DA60")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x19C5400", Offset = "0x19C5400", VA = "0x19C5400")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DA70", Offset = "0xE9DA70")]
		private set
		{
		}
	}

	[Token(Token = "0x170000E5")]
	public static bool IsReconciling
	{
		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x19C5490", Offset = "0x19C5490", VA = "0x19C5490")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000DD7")]
	[Address(RVA = "0x19C551C", Offset = "0x19C551C", VA = "0x19C551C")]
	public static void Init()
	{
	}

	[Token(Token = "0x6000DD8")]
	[Address(RVA = "0x19C5520", Offset = "0x19C5520", VA = "0x19C5520")]
	public static void ReconcileFiles()
	{
	}

	[Token(Token = "0x6000DD9")]
	[Address(RVA = "0x19C5524", Offset = "0x19C5524", VA = "0x19C5524")]
	private static bool HackyChrisMcCarthy_FileExistsAndIsNonEmptyAndNotUsedByOtherThreadOrProcess(string filePath)
	{
		return default(bool);
	}

	[Token(Token = "0x6000DDA")]
	[Address(RVA = "0x19C5710", Offset = "0x19C5710", VA = "0x19C5710")]
	private static void HandleDirectoryChange(DirectoryManager.FileSystemEvent fileSystemEvent, DirectoryManager directoryManagerToWriteTo)
	{
	}
}
[Token(Token = "0x20001CF")]
public static class iCloudPlayerPrefs
{
	[Token(Token = "0x20001D0")]
	private enum iCloudSaveDataTypes
	{
		[Token(Token = "0x4000A1D")]
		saveTypeString,
		[Token(Token = "0x4000A1E")]
		saveTypeInt,
		[Token(Token = "0x4000A1F")]
		saveTypeFloat
	}

	[Token(Token = "0x4000A17")]
	private const string ICloudActivatedSaveKey = "iCloudActivated";

	[Token(Token = "0x4000A18")]
	private const string ICLOUD_SAVE_PREFIX = "iCloudSavePrefix09876";

	[Token(Token = "0x4000A19")]
	private const string ICLOUD_SAVE_KEY_PARSE_DIVIDER = "iCSKPD3578975";

	[Token(Token = "0x4000A1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<iCloudSaveDataTypes, List<string>> localPlayerPrefKeys;

	[Token(Token = "0x170000EB")]
	public static bool iCloudActivated
	{
		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x19C9290", Offset = "0x19C9290", VA = "0x19C9290")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000E03")]
		[Address(RVA = "0x19C9298", Offset = "0x19C9298", VA = "0x19C9298")]
		private set
		{
		}
	}

	[Token(Token = "0x14000077")]
	public static event Action HandlePotentialConflictEvent
	{
		[Token(Token = "0x6000E05")]
		[Address(RVA = "0x19C936C", Offset = "0x19C936C", VA = "0x19C936C")]
		add
		{
		}
		[Token(Token = "0x6000E06")]
		[Address(RVA = "0x19C94E0", Offset = "0x19C94E0", VA = "0x19C94E0")]
		remove
		{
		}
	}

	[Token(Token = "0x6000E01")]
	[Address(RVA = "0x19C9200", Offset = "0x19C9200", VA = "0x19C9200")]
	static iCloudPlayerPrefs()
	{
	}

	[Token(Token = "0x6000E04")]
	[Address(RVA = "0x19C9304", Offset = "0x19C9304", VA = "0x19C9304")]
	public static void DeleteICloudSetting()
	{
	}

	[Token(Token = "0x6000E07")]
	[Address(RVA = "0x19C9654", Offset = "0x19C9654", VA = "0x19C9654")]
	private static void handlePotentialConflict()
	{
	}

	[Token(Token = "0x6000E08")]
	[Address(RVA = "0x19C9738", Offset = "0x19C9738", VA = "0x19C9738")]
	private static void handleKeyValueStoreChange(List<object> obj)
	{
	}

	[Token(Token = "0x6000E09")]
	[Address(RVA = "0x19C97B4", Offset = "0x19C97B4", VA = "0x19C97B4")]
	public static void DeactivateiCloud()
	{
	}

	[Token(Token = "0x6000E0A")]
	[Address(RVA = "0x19C9830", Offset = "0x19C9830", VA = "0x19C9830")]
	public static void ActivateiCloud()
	{
	}

	[Token(Token = "0x6000E0B")]
	[Address(RVA = "0x19C98AC", Offset = "0x19C98AC", VA = "0x19C98AC")]
	public static void DeleteAll()
	{
	}

	[Token(Token = "0x6000E0C")]
	[Address(RVA = "0x19C9C80", Offset = "0x19C9C80", VA = "0x19C9C80")]
	public static void DeleteKey(string key)
	{
	}

	[Token(Token = "0x6000E0D")]
	[Address(RVA = "0x19CA05C", Offset = "0x19CA05C", VA = "0x19CA05C")]
	public static float GetFloat(string key)
	{
		return default(float);
	}

	[Token(Token = "0x6000E0E")]
	[Address(RVA = "0x19CA104", Offset = "0x19CA104", VA = "0x19CA104")]
	public static int GetInt(string key)
	{
		return default(int);
	}

	[Token(Token = "0x6000E0F")]
	[Address(RVA = "0x19CA1AC", Offset = "0x19CA1AC", VA = "0x19CA1AC")]
	public static string GetString(string key)
	{
		return null;
	}

	[Token(Token = "0x6000E10")]
	[Address(RVA = "0x19CA254", Offset = "0x19CA254", VA = "0x19CA254")]
	public static bool HasKey(string key)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E11")]
	[Address(RVA = "0x19CA2FC", Offset = "0x19CA2FC", VA = "0x19CA2FC")]
	public static void Save()
	{
	}

	[Token(Token = "0x6000E12")]
	[Address(RVA = "0x19CA308", Offset = "0x19CA308", VA = "0x19CA308")]
	public static void Synchronize()
	{
	}

	[Token(Token = "0x6000E13")]
	[Address(RVA = "0x19CA380", Offset = "0x19CA380", VA = "0x19CA380")]
	public static void SetFloat(string key, float keyValue)
	{
	}

	[Token(Token = "0x6000E14")]
	[Address(RVA = "0x19CA818", Offset = "0x19CA818", VA = "0x19CA818")]
	public static void SetInt(string key, int keyValue)
	{
	}

	[Token(Token = "0x6000E15")]
	[Address(RVA = "0x19CA900", Offset = "0x19CA900", VA = "0x19CA900")]
	public static void SetString(string key, string keyValue)
	{
	}

	[Token(Token = "0x6000E16")]
	[Address(RVA = "0x19C97B0", Offset = "0x19C97B0", VA = "0x19C97B0")]
	private static void synchronizePlayerPrefsAndiCloud()
	{
	}

	[Token(Token = "0x6000E17")]
	[Address(RVA = "0x19CA9E8", Offset = "0x19CA9E8", VA = "0x19CA9E8")]
	private static bool isThereConflictingUserData()
	{
		return default(bool);
	}

	[Token(Token = "0x6000E18")]
	[Address(RVA = "0x19CA468", Offset = "0x19CA468", VA = "0x19CA468")]
	private static void tryRegisterNewKey(string key, iCloudSaveDataTypes saveDataType)
	{
	}
}
[Token(Token = "0x20001D1")]
public class InAppPurchaseDataHolder : MonoBehaviour
{
	[Token(Token = "0x20001D2")]
	public enum Identifiers
	{
		[Token(Token = "0x4000A25")]
		MakingOfChapter1,
		[Token(Token = "0x4000A26")]
		MakingOfChapter2,
		[Token(Token = "0x4000A27")]
		MakingOfChapter3,
		[Token(Token = "0x4000A28")]
		MakingOfChapter4,
		[Token(Token = "0x4000A29")]
		MakingOfChapter5,
		[Token(Token = "0x4000A2A")]
		FreeMakingOfChapter1,
		[Token(Token = "0x4000A2B")]
		FreeMakingOfChapter2,
		[Token(Token = "0x4000A2C")]
		FreeMakingOfChapter3,
		[Token(Token = "0x4000A2D")]
		FreeMakingOfChapter4,
		[Token(Token = "0x4000A2E")]
		FreeMakingOfChapter5,
		[Token(Token = "0x4000A2F")]
		FreeMakingOfPart0,
		[Token(Token = "0x4000A30")]
		Chapter2,
		[Token(Token = "0x4000A31")]
		Chapter3,
		[Token(Token = "0x4000A32")]
		Chapter4,
		[Token(Token = "0x4000A33")]
		Chapter5,
		[Token(Token = "0x4000A34")]
		FreeChapter2,
		[Token(Token = "0x4000A35")]
		FreeChapter3,
		[Token(Token = "0x4000A36")]
		FreeChapter4,
		[Token(Token = "0x4000A37")]
		FreeChapter5,
		[Token(Token = "0x4000A38")]
		SeasonPass,
		[Token(Token = "0x4000A39")]
		FreeSeasonPass,
		[Token(Token = "0x4000A3A")]
		SeasonPassMinusOne,
		[Token(Token = "0x4000A3B")]
		SeasonPassMinusTwo,
		[Token(Token = "0x4000A3C")]
		SeasonPassMinusThree,
		[Token(Token = "0x4000A3D")]
		SeasonPassExtras
	}

	[Token(Token = "0x4000A20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static InAppPurchaseDataHolder _instance;

	[Token(Token = "0x4000A21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool instanceNotFound;

	[Token(Token = "0x4000A22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string bundleIdentifier;

	[Token(Token = "0x4000A23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<string> identifiers;

	[Token(Token = "0x170000EC")]
	public static InAppPurchaseDataHolder instance
	{
		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0x3BF308", Offset = "0x3BF308", VA = "0x3BF308")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000E19")]
	[Address(RVA = "0x3BF234", Offset = "0x3BF234", VA = "0x3BF234")]
	public InAppPurchaseDataHolder()
	{
	}

	[Token(Token = "0x6000E1B")]
	[Address(RVA = "0x3BF61C", Offset = "0x3BF61C", VA = "0x3BF61C")]
	public string GetProductIdentifier(Identifiers identifier)
	{
		return null;
	}

	[Token(Token = "0x6000E1C")]
	[Address(RVA = "0x3BF778", Offset = "0x3BF778", VA = "0x3BF778")]
	public Identifiers GetIdentifierForString(string identifierString)
	{
		return default(Identifiers);
	}
}
[Token(Token = "0x20001D3")]
public class IOSDataHolder : MonoBehaviour
{
	[Token(Token = "0x4000A3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IOSDataHolder _instance;

	[Token(Token = "0x4000A3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool instanceNotFound;

	[Token(Token = "0x4000A40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string appID;

	[Token(Token = "0x4000A41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string urbanAirshipAppKey;

	[Token(Token = "0x4000A42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string urbanAirshipAppSecret;

	[Token(Token = "0x4000A43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string loggerIPFileURL;

	[Token(Token = "0x170000ED")]
	public static IOSDataHolder instance
	{
		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x3C0A68", Offset = "0x3C0A68", VA = "0x3C0A68")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000E1E")]
	[Address(RVA = "0x3C0A60", Offset = "0x3C0A60", VA = "0x3C0A60")]
	public IOSDataHolder()
	{
	}
}
[Token(Token = "0x20001D4")]
public static class IOSPackageCreator
{
	[Token(Token = "0x20001D5")]
	public struct AssetBundleRequest
	{
		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string outputName;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string[] levels;
	}

	[Token(Token = "0x4000A44")]
	public const string MESS_EXTENTION = ".MESS";

	[Token(Token = "0x4000A45")]
	public const string PAYLOAD_FILE_NAME = "PAYLOAD_REPUBLIQUE";

	[Token(Token = "0x6000E21")]
	[Address(RVA = "0x3C0D84", Offset = "0x3C0D84", VA = "0x3C0D84")]
	public static string unmessFile(string fileDirectory)
	{
		return null;
	}

	[Token(Token = "0x6000E22")]
	[Address(RVA = "0x3C17E8", Offset = "0x3C17E8", VA = "0x3C17E8")]
	public static string messFile(string fileDirectory)
	{
		return null;
	}

	[Token(Token = "0x6000E23")]
	[Address(RVA = "0x3C0F28", Offset = "0x3C0F28", VA = "0x3C0F28")]
	private static void runByteSwap(string fileDirectory)
	{
	}

	[Token(Token = "0x6000E24")]
	[Address(RVA = "0x3C1A0C", Offset = "0x3C1A0C", VA = "0x3C1A0C")]
	public static string getDLCSavePath()
	{
		return null;
	}

	[Token(Token = "0x6000E25")]
	[Address(RVA = "0x3C1AB0", Offset = "0x3C1AB0", VA = "0x3C1AB0")]
	private static string getDLCTempPath()
	{
		return null;
	}
}
[Token(Token = "0x20001D6")]
public static class IOSSandboxFileUtilities
{
	[Token(Token = "0x4000A48")]
	private const string LIBRARY_DIRECTORY_NAME = "Library/";

	[Token(Token = "0x4000A49")]
	private const string DOCUMENTS_DIRECTORY_NAME = "Documents/";

	[Token(Token = "0x6000E26")]
	[Address(RVA = "0x3C1B10", Offset = "0x3C1B10", VA = "0x3C1B10")]
	public static bool GetRelativeSandboxPath(string pathOrURL, out string relativePath)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E27")]
	[Address(RVA = "0x3C1D40", Offset = "0x3C1D40", VA = "0x3C1D40")]
	public static string GetRelativeSandboxPath(string pathOrURL)
	{
		return null;
	}

	[Token(Token = "0x6000E28")]
	[Address(RVA = "0x3C1D68", Offset = "0x3C1D68", VA = "0x3C1D68")]
	public static string GetAbsoluteSandboxPath(string relativePath)
	{
		return null;
	}
}
[Token(Token = "0x20001D7")]
public static class ITunesLinkMaker
{
	[Token(Token = "0x20001D8")]
	private enum AffilateProgram
	{
		[Token(Token = "0x4000A4C")]
		PHG,
		[Token(Token = "0x4000A4D")]
		TradeDoubler,
		[Token(Token = "0x4000A4E")]
		None
	}

	[Token(Token = "0x20001D9")]
	private enum GameCartridge
	{
		[Token(Token = "0x4000A50")]
		InfinityBlade,
		[Token(Token = "0x4000A51")]
		KingdomRush,
		[Token(Token = "0x4000A52")]
		StarCommand,
		[Token(Token = "0x4000A53")]
		RidiculousFishing,
		[Token(Token = "0x4000A54")]
		YearWalk,
		[Token(Token = "0x4000A55")]
		SwordSworcery,
		[Token(Token = "0x4000A56")]
		SuperHexagon,
		[Token(Token = "0x4000A57")]
		WakingMars,
		[Token(Token = "0x4000A58")]
		TheRoom,
		[Token(Token = "0x4000A59")]
		Starbloom,
		[Token(Token = "0x4000A5A")]
		PlagueInc,
		[Token(Token = "0x4000A5B")]
		Curosity,
		[Token(Token = "0x4000A5C")]
		Bastion,
		[Token(Token = "0x4000A5D")]
		PapaSangre,
		[Token(Token = "0x4000A5E")]
		DelversDrop,
		[Token(Token = "0x4000A5F")]
		TheSilentAge,
		[Token(Token = "0x4000A60")]
		Device6,
		[Token(Token = "0x4000A61")]
		Rymdkapsel,
		[Token(Token = "0x4000A62")]
		Home,
		[Token(Token = "0x4000A63")]
		Kami,
		[Token(Token = "0x4000A64")]
		Blueprint3D,
		[Token(Token = "0x4000A65")]
		Hundreds,
		[Token(Token = "0x4000A66")]
		PuzzleJuice,
		[Token(Token = "0x4000A67")]
		Numerity,
		[Token(Token = "0x4000A68")]
		SkullsOfTheShogun,
		[Token(Token = "0x4000A69")]
		HeroAcademy,
		[Token(Token = "0x4000A6A")]
		Hoplite,
		[Token(Token = "0x4000A6B")]
		x10000000,
		[Token(Token = "0x4000A6C")]
		TheRoomTwo,
		[Token(Token = "0x4000A6D")]
		FrozenSynapse,
		[Token(Token = "0x4000A6E")]
		MonumentValley,
		[Token(Token = "0x4000A6F")]
		PunchQuest,
		[Token(Token = "0x4000A70")]
		BosonX,
		[Token(Token = "0x4000A71")]
		ShadowrunReturns,
		[Token(Token = "0x4000A72")]
		TalesOfTheAdventureCompany,
		[Token(Token = "0x4000A73")]
		Badland,
		[Token(Token = "0x4000A74")]
		Spaceteam,
		[Token(Token = "0x4000A75")]
		Osmos,
		[Token(Token = "0x4000A76")]
		GeminiRue,
		[Token(Token = "0x4000A77")]
		VVVVVVV,
		[Token(Token = "0x4000A78")]
		Continue,
		[Token(Token = "0x4000A79")]
		FTL,
		[Token(Token = "0x4000A7A")]
		BrokenAge,
		[Token(Token = "0x4000A7B")]
		MinesOfMars,
		[Token(Token = "0x4000A7C")]
		Duet,
		[Token(Token = "0x4000A7D")]
		TimeSurfer
	}

	[Token(Token = "0x4000A4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DD88", Offset = "0xE9DD88")]
	private static Dictionary<string, int> <>f__switch$map3;

	[Token(Token = "0x6000E29")]
	[Address(RVA = "0x3C1E14", Offset = "0x3C1E14", VA = "0x3C1E14")]
	private static AffilateProgram GetUsedAffilate(string countryCode)
	{
		return default(AffilateProgram);
	}

	[Token(Token = "0x6000E2A")]
	[Address(RVA = "0x3C1E1C", Offset = "0x3C1E1C", VA = "0x3C1E1C")]
	private static bool TryGetCartridgeFromID(string id, out GameCartridge gameCartridge)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E2B")]
	[Address(RVA = "0x3C2DF4", Offset = "0x3C2DF4", VA = "0x3C2DF4")]
	public static bool TryGetGameCartridgeURL(string cartridgeID, string countryCode, out string url)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E2C")]
	[Address(RVA = "0x3C2ECC", Offset = "0x3C2ECC", VA = "0x3C2ECC")]
	private static bool TryGetGameCartridgeURL(GameCartridge gameCartridge, string countryCode, out string url)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001DA")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xE9DD98", Offset = "0xE9DD98")]
public class Logger : MonoBehaviour
{
	[Token(Token = "0x4000A7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Logger _instance;

	[Token(Token = "0x4000A7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static List<string> printTexts;

	[Token(Token = "0x4000A80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DE10", Offset = "0xE9DE10")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9DE10", Offset = "0xE9DE10")]
	private static string <totalPrintTexts>k__BackingField;

	[Token(Token = "0x4000A81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static Vector2 scrollPosition;

	[Token(Token = "0x4000A82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static bool resizeScrollSize;

	[Token(Token = "0x4000A83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Vector2 screenSize;

	[Token(Token = "0x170000EE")]
	public static string totalPrintTexts
	{
		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x1970218", Offset = "0x1970218", VA = "0x1970218")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DE54", Offset = "0xE9DE54")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x1970188", Offset = "0x1970188", VA = "0x1970188")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DE64", Offset = "0xE9DE64")]
		private set
		{
		}
	}

	[Token(Token = "0x6000E2D")]
	[Address(RVA = "0x196F904", Offset = "0x196F904", VA = "0x196F904")]
	public Logger()
	{
	}

	[Token(Token = "0x6000E2E")]
	[Address(RVA = "0x196F90C", Offset = "0x196F90C", VA = "0x196F90C")]
	public static void printToLog(object logText)
	{
	}

	[Token(Token = "0x6000E2F")]
	[Address(RVA = "0x196FD04", Offset = "0x196FD04", VA = "0x196FD04")]
	[RPC]
	private void printToLog(string logText)
	{
	}

	[Token(Token = "0x6000E30")]
	[Address(RVA = "0x19702A4", Offset = "0x19702A4", VA = "0x19702A4")]
	public static void clearLog()
	{
	}

	[Token(Token = "0x6000E31")]
	[Address(RVA = "0x196F9DC", Offset = "0x196F9DC", VA = "0x196F9DC")]
	private static void createInstance()
	{
	}

	[Token(Token = "0x6000E34")]
	[Address(RVA = "0x19703A8", Offset = "0x19703A8", VA = "0x19703A8")]
	public static void drawGUI()
	{
	}
}
[Token(Token = "0x20001DB")]
public class NetworkHandlerClient : MonoBehaviour
{
	[Token(Token = "0x2000520")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DED8", Offset = "0xE9DED8")]
	private sealed class <retrieveLoggingIPs>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal WWW <www>__0;

		[Token(Token = "0x4001A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal string[] <lines>__0;

		[Token(Token = "0x4001A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x4001A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal bool $disposing;

		[Token(Token = "0x4001A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int $PC;

		[Token(Token = "0x17000294")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60023EE")]
			[Address(RVA = "0x958984", Offset = "0x958984", VA = "0x958984", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000295")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023EF")]
			[Address(RVA = "0x95898C", Offset = "0x95898C", VA = "0x95898C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023EC")]
		[Address(RVA = "0x957DCC", Offset = "0x957DCC", VA = "0x957DCC")]
		[DebuggerHidden]
		public <retrieveLoggingIPs>c__Iterator0()
		{
		}

		[Token(Token = "0x60023ED")]
		[Address(RVA = "0x9585D8", Offset = "0x9585D8", VA = "0x9585D8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023F0")]
		[Address(RVA = "0x958994", Offset = "0x958994", VA = "0x958994", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023F1")]
		[Address(RVA = "0x9589A8", Offset = "0x9589A8", VA = "0x9589A8", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000521")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DF38", Offset = "0xE9DF38")]
	private sealed class <>c__Iterator1 : IEnumerable, IEnumerable<string>, IEnumerator, IDisposable, IEnumerator<string>
	{
		[Token(Token = "0x4001A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal Dictionary<string, string>.KeyCollection.Enumerator $locvar0;

		[Token(Token = "0x4001A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal string <a>__1;

		[Token(Token = "0x4001A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal string $current;

		[Token(Token = "0x4001A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x17000296")]
		private string System.Collections.Generic.IEnumerator<string>.Current
		{
			[Token(Token = "0x60023F4")]
			[Address(RVA = "0x958424", Offset = "0x958424", VA = "0x958424", Slot = "10")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000297")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023F5")]
			[Address(RVA = "0x95842C", Offset = "0x95842C", VA = "0x95842C", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023F2")]
		[Address(RVA = "0x957F4C", Offset = "0x957F4C", VA = "0x957F4C")]
		[DebuggerHidden]
		public <>c__Iterator1()
		{
		}

		[Token(Token = "0x60023F3")]
		[Address(RVA = "0x958238", Offset = "0x958238", VA = "0x958238", Slot = "7")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023F6")]
		[Address(RVA = "0x958434", Offset = "0x958434", VA = "0x958434", Slot = "9")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023F7")]
		[Address(RVA = "0x9584B4", Offset = "0x9584B4", VA = "0x9584B4", Slot = "8")]
		[DebuggerHidden]
		public void Reset()
		{
		}

		[Token(Token = "0x60023F8")]
		[Address(RVA = "0x958538", Offset = "0x958538", VA = "0x958538", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60023F9")]
		[Address(RVA = "0x95853C", Offset = "0x95853C", VA = "0x95853C", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x4000A84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DE74", Offset = "0xE9DE74")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9DE74", Offset = "0xE9DE74")]
	private static bool <connected>k__BackingField;

	[Token(Token = "0x4000A85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Dictionary<string, string> ipNames;

	[Token(Token = "0x170000EF")]
	public static bool connected
	{
		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x957A34", Offset = "0x957A34", VA = "0x957A34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DEA8", Offset = "0xE9DEA8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x957AC0", Offset = "0x957AC0", VA = "0x957AC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DEB8", Offset = "0xE9DEB8")]
		private set
		{
		}
	}

	[Token(Token = "0x170000F0")]
	public static IEnumerable<string> ipHostNames
	{
		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x957ECC", Offset = "0x957ECC", VA = "0x957ECC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000E36")]
	[Address(RVA = "0x957A2C", Offset = "0x957A2C", VA = "0x957A2C")]
	public NetworkHandlerClient()
	{
	}

	[Token(Token = "0x6000E39")]
	[Address(RVA = "0x957B50", Offset = "0x957B50", VA = "0x957B50")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E3A")]
	[Address(RVA = "0x957D60", Offset = "0x957D60", VA = "0x957D60")]
	[DebuggerHidden]
	private IEnumerator retrieveLoggingIPs()
	{
		return null;
	}

	[Token(Token = "0x6000E3B")]
	[Address(RVA = "0x957DD4", Offset = "0x957DD4", VA = "0x957DD4")]
	private void OnConnectedToServer()
	{
	}

	[Token(Token = "0x6000E3C")]
	[Address(RVA = "0x957E50", Offset = "0x957E50", VA = "0x957E50")]
	private void OnDisconnectedFromServer(NetworkDisconnection diconnection)
	{
	}

	[Token(Token = "0x6000E3E")]
	[Address(RVA = "0x957F54", Offset = "0x957F54", VA = "0x957F54")]
	public static void connectToHost(string hostName)
	{
	}
}
[Token(Token = "0x20001DC")]
public class NetworkHandlerHost : MonoBehaviour
{
	[Token(Token = "0x4000A86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private string dialogueText;

	[Token(Token = "0x6000E40")]
	[Address(RVA = "0x958A2C", Offset = "0x958A2C", VA = "0x958A2C")]
	public NetworkHandlerHost()
	{
	}

	[Token(Token = "0x6000E41")]
	[Address(RVA = "0x958A34", Offset = "0x958A34", VA = "0x958A34")]
	public void Start()
	{
	}

	[Token(Token = "0x6000E42")]
	[Address(RVA = "0x958AFC", Offset = "0x958AFC", VA = "0x958AFC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000E43")]
	[Address(RVA = "0x9594BC", Offset = "0x9594BC", VA = "0x9594BC")]
	private void OnPlayerConnected(NetworkPlayer newtworkPlayer)
	{
	}
}
[Token(Token = "0x20001DD")]
public static class RedemptionCodesManager
{
	[Token(Token = "0x2000522")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DFF8", Offset = "0xE9DFF8")]
	private sealed class <SendCodeCoroutine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal WWW <www>__0;

		[Token(Token = "0x4001A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal object $current;

		[Token(Token = "0x4001A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool $disposing;

		[Token(Token = "0x4001A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int $PC;

		[Token(Token = "0x17000298")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60023FC")]
			[Address(RVA = "0x1B3C328", Offset = "0x1B3C328", VA = "0x1B3C328", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000299")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60023FD")]
			[Address(RVA = "0x1B3C330", Offset = "0x1B3C330", VA = "0x1B3C330", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60023FA")]
		[Address(RVA = "0x1B3B13C", Offset = "0x1B3B13C", VA = "0x1B3B13C")]
		[DebuggerHidden]
		public <SendCodeCoroutine>c__Iterator0()
		{
		}

		[Token(Token = "0x60023FB")]
		[Address(RVA = "0x1B3B76C", Offset = "0x1B3B76C", VA = "0x1B3B76C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60023FE")]
		[Address(RVA = "0x1B3C338", Offset = "0x1B3C338", VA = "0x1B3C338", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60023FF")]
		[Address(RVA = "0x1B3C34C", Offset = "0x1B3C34C", VA = "0x1B3C34C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000A87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool inUse;

	[Token(Token = "0x4000A88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static MonoBehaviour coroutineSurrogate;

	[Token(Token = "0x4000A89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static string currentCode;

	[Token(Token = "0x4000A8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static RSACryptoServiceProvider appRSA;

	[Token(Token = "0x4000A8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static RSAParameters appRSAParameters;

	[Token(Token = "0x4000A8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static RSACryptoServiceProvider serverRSA;

	[Token(Token = "0x4000A8D")]
	private const string SERVER_MODULUS = "yc+AN4oeUxMUM4ayoXYp/gMsybwkHNlWofo+t8JRjzqfg0/mseztsL1xs2DX8oRQWQf6CIiLFKeXk1SHtN5wfGqlWEgDIxmSC6jGDc11awmoB7xnyE0nggUZTGEPgaVLcMUZ3sfvD7W1W8+LPyRfpZ2zwrS8zcLNJGWq/mGzX5iXVF3NTCP9XmWIzfo75x86Ue2uWIxniWHIi3tXN2E9qWQgKDgDnDSxlrS0lNhzjKS+NCHECoFO5+lAiYGjX6nvN+1vnNR0TLmOjTzOQrEXmrR6vHXwj9R7NUmVXJCSh6B/vOuOQjWhWEng2K9bIjXFArZCTrhHY1iBgn85vsPhVQ==";

	[Token(Token = "0x4000A8E")]
	private const string SERVER_EXPONENT = "AQAB";

	[Token(Token = "0x4000A8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DFB8", Offset = "0xE9DFB8")]
	private static Action<string> <>f__mg$cache0;

	[Token(Token = "0x4000A90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DFC8", Offset = "0xE9DFC8")]
	private static Action <>f__mg$cache1;

	[Token(Token = "0x4000A91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9DFD8", Offset = "0xE9DFD8")]
	private static Action<bool> <>f__mg$cache2;

	[Token(Token = "0x6000E44")]
	[Address(RVA = "0x1B3A93C", Offset = "0x1B3A93C", VA = "0x1B3A93C")]
	public static void Init()
	{
	}

	[Token(Token = "0x6000E45")]
	[Address(RVA = "0x1B3AB3C", Offset = "0x1B3AB3C", VA = "0x1B3AB3C")]
	public static void BeginRedemptionCodeProcess()
	{
	}

	[Token(Token = "0x6000E46")]
	[Address(RVA = "0x1B3AD24", Offset = "0x1B3AD24", VA = "0x1B3AD24")]
	private static void BeginUsage()
	{
	}

	[Token(Token = "0x6000E47")]
	[Address(RVA = "0x1B3ADBC", Offset = "0x1B3ADBC", VA = "0x1B3ADBC")]
	private static void EndUsage()
	{
	}

	[Token(Token = "0x6000E48")]
	[Address(RVA = "0x1B3AE74", Offset = "0x1B3AE74", VA = "0x1B3AE74")]
	private static void HandleRedemptionCodeCancelled()
	{
	}

	[Token(Token = "0x6000E49")]
	[Address(RVA = "0x1B3AE78", Offset = "0x1B3AE78", VA = "0x1B3AE78")]
	private static void HandleRedemptionCodeEntered(string code)
	{
	}

	[Token(Token = "0x6000E4A")]
	[Address(RVA = "0x1B3B0D0", Offset = "0x1B3B0D0", VA = "0x1B3B0D0")]
	[DebuggerHidden]
	private static IEnumerator SendCodeCoroutine(string code)
	{
		return null;
	}

	[Token(Token = "0x6000E4B")]
	[Address(RVA = "0x1B3B144", Offset = "0x1B3B144", VA = "0x1B3B144")]
	private static void HandleProductPurchased(bool purchaseSuccessful)
	{
	}

	[Token(Token = "0x6000E4C")]
	[Address(RVA = "0x1B3B1C8", Offset = "0x1B3B1C8", VA = "0x1B3B1C8")]
	private static WWW SendCodePacket(string url, string code)
	{
		return null;
	}
}
[Token(Token = "0x20001DE")]
public enum ProductPurchaseState
{
	[Token(Token = "0x4000A93")]
	Unavailable = 1,
	[Token(Token = "0x4000A94")]
	Purchasable = 2,
	[Token(Token = "0x4000A95")]
	Purchasing = 3,
	[Token(Token = "0x4000A96")]
	Downloading = 4,
	[Token(Token = "0x4000A97")]
	Ready = 6,
	[Token(Token = "0x4000A98")]
	NeedsRedownloading = 7,
	[Token(Token = "0x4000A99")]
	NeedsAssetUpdate = 8,
	[Token(Token = "0x4000A9A")]
	NeedsBinaryUpdate = 9,
	[Token(Token = "0x4000A9B")]
	ReadyWithOptionalUpdate = 10,
	[Token(Token = "0x4000A9C")]
	CurrentlyCaching = 11
}
[Token(Token = "0x20001DF")]
public static class StorekitBridge
{
	[Token(Token = "0x20001E0")]
	public delegate ProductPurchaseState FileManagerDelegate(InAppPurchaseDataHolder.Identifiers identifier);

	[Token(Token = "0x2000523")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E1EC", Offset = "0xE9E1EC")]
	private sealed class <GetFilesInDirectory>c__Iterator0 : IEnumerable, IEnumerable<string>, IEnumerator, IDisposable, IEnumerator<string>
	{
		[Token(Token = "0x4001A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal InAppPurchaseDataHolder.Identifiers identifier;

		[Token(Token = "0x4001A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal string <key>__0;

		[Token(Token = "0x4001A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal string <directory>__0;

		[Token(Token = "0x4001A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal string <newPath>__0;

		[Token(Token = "0x4001A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal string[] <files>__0;

		[Token(Token = "0x4001A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int <a>__1;

		[Token(Token = "0x4001A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal string $current;

		[Token(Token = "0x4001A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x4001A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x1700029A")]
		private string System.Collections.Generic.IEnumerator<string>.Current
		{
			[Token(Token = "0x6002402")]
			[Address(RVA = "0x18F9770", Offset = "0x18F9770", VA = "0x18F9770", Slot = "10")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002403")]
			[Address(RVA = "0x18F9778", Offset = "0x18F9778", VA = "0x18F9778", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002400")]
		[Address(RVA = "0x18F6E8C", Offset = "0x18F6E8C", VA = "0x18F6E8C")]
		[DebuggerHidden]
		public <GetFilesInDirectory>c__Iterator0()
		{
		}

		[Token(Token = "0x6002401")]
		[Address(RVA = "0x18F949C", Offset = "0x18F949C", VA = "0x18F949C", Slot = "7")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002404")]
		[Address(RVA = "0x18F9780", Offset = "0x18F9780", VA = "0x18F9780", Slot = "9")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002405")]
		[Address(RVA = "0x18F9794", Offset = "0x18F9794", VA = "0x18F9794", Slot = "8")]
		[DebuggerHidden]
		public void Reset()
		{
		}

		[Token(Token = "0x6002406")]
		[Address(RVA = "0x18F9818", Offset = "0x18F9818", VA = "0x18F9818", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6002407")]
		[Address(RVA = "0x18F981C", Offset = "0x18F981C", VA = "0x18F981C", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x2000524")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E26C", Offset = "0xE9E26C")]
	private sealed class <SimulateGetProductData>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <endBreakTime>__0;

		[Token(Token = "0x4001A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal object $current;

		[Token(Token = "0x4001A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool $disposing;

		[Token(Token = "0x4001A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int $PC;

		[Token(Token = "0x1700029C")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600240A")]
			[Address(RVA = "0x18F9A34", Offset = "0x18F9A34", VA = "0x18F9A34", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600240B")]
			[Address(RVA = "0x18F9A3C", Offset = "0x18F9A3C", VA = "0x18F9A3C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002408")]
		[Address(RVA = "0x18F8698", Offset = "0x18F8698", VA = "0x18F8698")]
		[DebuggerHidden]
		public <SimulateGetProductData>c__Iterator1()
		{
		}

		[Token(Token = "0x6002409")]
		[Address(RVA = "0x18F98D4", Offset = "0x18F98D4", VA = "0x18F98D4", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600240C")]
		[Address(RVA = "0x18F9A44", Offset = "0x18F9A44", VA = "0x18F9A44", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600240D")]
		[Address(RVA = "0x18F9A58", Offset = "0x18F9A58", VA = "0x18F9A58", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000525")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E2CC", Offset = "0xE9E2CC")]
	private sealed class <DownloadSimulation>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal InAppPurchaseDataHolder.Identifiers identifier;

		[Token(Token = "0x4001A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <endBreakTime>__0;

		[Token(Token = "0x4001A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int <a>__1;

		[Token(Token = "0x4001A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x4001A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4001A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x1700029E")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002410")]
			[Address(RVA = "0x18F93F4", Offset = "0x18F93F4", VA = "0x18F93F4", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002411")]
			[Address(RVA = "0x18F93FC", Offset = "0x18F93FC", VA = "0x18F93FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600240E")]
		[Address(RVA = "0x18F8748", Offset = "0x18F8748", VA = "0x18F8748")]
		[DebuggerHidden]
		public <DownloadSimulation>c__Iterator2()
		{
		}

		[Token(Token = "0x600240F")]
		[Address(RVA = "0x18F8F30", Offset = "0x18F8F30", VA = "0x18F8F30", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002412")]
		[Address(RVA = "0x18F9404", Offset = "0x18F9404", VA = "0x18F9404", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002413")]
		[Address(RVA = "0x18F9418", Offset = "0x18F9418", VA = "0x18F9418", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000526")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E32C", Offset = "0xE9E32C")]
	private sealed class <VerifyReceiptCoroutine>c__Iterator3 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal Action<bool> completionCallback;

		[Token(Token = "0x4001A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal string identifierString;

		[Token(Token = "0x4001A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x4001A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal bool $disposing;

		[Token(Token = "0x4001A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int $PC;

		[Token(Token = "0x170002A0")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002416")]
			[Address(RVA = "0x18F9C04", Offset = "0x18F9C04", VA = "0x18F9C04", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002417")]
			[Address(RVA = "0x18F9C0C", Offset = "0x18F9C0C", VA = "0x18F9C0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002414")]
		[Address(RVA = "0x18F87E8", Offset = "0x18F87E8", VA = "0x18F87E8")]
		[DebuggerHidden]
		public <VerifyReceiptCoroutine>c__Iterator3()
		{
		}

		[Token(Token = "0x6002415")]
		[Address(RVA = "0x18F9ADC", Offset = "0x18F9ADC", VA = "0x18F9ADC", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002418")]
		[Address(RVA = "0x18F9C14", Offset = "0x18F9C14", VA = "0x18F9C14", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002419")]
		[Address(RVA = "0x18F9C18", Offset = "0x18F9C18", VA = "0x18F9C18", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000A9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E058", Offset = "0xE9E058")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9E058", Offset = "0xE9E058")]
	private static bool <inUse>k__BackingField;

	[Token(Token = "0x4000A9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E08C", Offset = "0xE9E08C")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9E08C", Offset = "0xE9E08C")]
	private static bool <productDataReceived>k__BackingField;

	[Token(Token = "0x4000A9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static MonoBehaviour coroutineSurrogate;

	[Token(Token = "0x4000AA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<InAppPurchaseDataHolder.Identifiers, ProductPurchaseState> currentProductPurchaseState;

	[Token(Token = "0x4000AA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static bool isPurchasingProduct;

	[Token(Token = "0x4000AA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static InAppPurchaseDataHolder.Identifiers currentlyPurchasingProduct;

	[Token(Token = "0x4000AA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static List<InAppPurchaseDataHolder.Identifiers> currentlyDownloadingProducts;

	[Token(Token = "0x4000AA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Action<bool> productPurchaseStateCallback;

	[Token(Token = "0x4000AA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static Dictionary<InAppPurchaseDataHolder.Identifiers, FileManagerDelegate> fileManagers;

	[Token(Token = "0x4000AA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static List<InAppPurchaseDataHolder.Identifiers> productsDownloadedOnRestore;

	[Token(Token = "0x4000AA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static List<InAppPurchaseDataHolder.Identifiers> canceledDownloads;

	[Token(Token = "0x4000AA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static string purchaseCampaignID;

	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private static Dictionary<InAppPurchaseDataHolder.Identifiers, VersionNumber> versionNumberCache;

	[Token(Token = "0x4000AAA")]
	private const string STOREKIT_MANAGER_PREFIX = "STOREKIT_MANAGER_PREFIX_";

	[Token(Token = "0x4000AAB")]
	private const string PURCHASED_PREFIX = "PURCHASED_PREFIX_";

	[Token(Token = "0x4000AAC")]
	private const string QUEUED_DOWNLOAD_PREFIX = "QUED_DOWNLOAD_PREFIX_";

	[Token(Token = "0x4000AAD")]
	private const string PRODUCT_NAME_SUFFIX = "PRODUCT_NAME_SUFFIX";

	[Token(Token = "0x4000AAE")]
	private const string PRODUCT_PRICE_SUFFIX = "PRODUCT_PRICE_SUFFIX";

	[Token(Token = "0x4000AAF")]
	private const string PRODUCT_SIZE_SUFFIX = "PRODUCT_SIZE_SUFFIX";

	[Token(Token = "0x4000AB0")]
	private const string PRODUCT_CURRENCY_CODE_SUFFIX = "PRODUCT_CURRENCY_CODE_SUFFIX";

	[Token(Token = "0x4000AB1")]
	private const string PRODUCT_HAS_DOWNLOAD_SUFFIX = "PRODUCT_HAS_DOWNLOAD_SUFFIX";

	[Token(Token = "0x4000AB2")]
	private const string PRODUCT_DIRECTORY_PREFIX = "PRODUCT_DIRRECTORY_PREFIX_";

	[Token(Token = "0x4000AB3")]
	private const string PRODUCT_VERION_SUFFIX = "PRODUCT_VERION_SUFFIX";

	[Token(Token = "0x4000AB4")]
	private const string SERVER_PRODUCT_VERSION_SUFFIX = "SERVER_PRODUCT_VERSION_SUFFIX";

	[Token(Token = "0x4000AB5")]
	private const string TRANSACTION_IDENTIFIER_PREFIX = "TRANSACTION_IDENTIFIER_PREFIX_";

	[Token(Token = "0x4000AB6")]
	private const string DOWNLOAD_PERCENT_PREFIX = "DOWNLOAD_PERCENT_PREFIX_";

	[Token(Token = "0x4000AB7")]
	private const string PRODUCT_RECEIPT_SUFFIX = "PRODUCT_RECEIPT_SUFFIX";

	[Token(Token = "0x4000AB8")]
	private const string STORE_COUNTRY_CODE_PREFIX = "STORE_COUNTRY_CODE_PREFIX_";

	[Token(Token = "0x4000AB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static int amtRestoredPurchases;

	[Token(Token = "0x170000F1")]
	public static bool inUse
	{
		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x18F5CE0", Offset = "0x18F5CE0", VA = "0x18F5CE0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E15C", Offset = "0xE9E15C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x18F5D6C", Offset = "0x18F5D6C", VA = "0x18F5D6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E16C", Offset = "0xE9E16C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000F2")]
	public static bool productDataReceived
	{
		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x18F5DFC", Offset = "0x18F5DFC", VA = "0x18F5DFC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E17C", Offset = "0xE9E17C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x18F5E88", Offset = "0x18F5E88", VA = "0x18F5E88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E18C", Offset = "0xE9E18C")]
		private set
		{
		}
	}

	[Token(Token = "0x170000F3")]
	private static NetworkReachability InternetReachability
	{
		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0x18F8C74", Offset = "0x18F8C74", VA = "0x18F8C74")]
		get
		{
			return default(NetworkReachability);
		}
	}

	[Token(Token = "0x14000078")]
	public static event Action<InAppPurchaseDataHolder.Identifiers, string, bool> DLCDownloadedAndReady
	{
		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x18F60FC", Offset = "0x18F60FC", VA = "0x18F60FC")]
		add
		{
		}
		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x18F6270", Offset = "0x18F6270", VA = "0x18F6270")]
		remove
		{
		}
	}

	[Token(Token = "0x14000079")]
	public static event Action<InAppPurchaseDataHolder.Identifiers, bool, string> ProductPurchased
	{
		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x18F63E4", Offset = "0x18F63E4", VA = "0x18F63E4")]
		add
		{
		}
		[Token(Token = "0x6000E55")]
		[Address(RVA = "0x18F6558", Offset = "0x18F6558", VA = "0x18F6558")]
		remove
		{
		}
	}

	[Token(Token = "0x1400007A")]
	public static event Action OnRestoreGreaterThanOne
	{
		[Token(Token = "0x6000E56")]
		[Address(RVA = "0x18F66CC", Offset = "0x18F66CC", VA = "0x18F66CC")]
		add
		{
		}
		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x18F6840", Offset = "0x18F6840", VA = "0x18F6840")]
		remove
		{
		}
	}

	[Token(Token = "0x6000E51")]
	[Address(RVA = "0x18F5F18", Offset = "0x18F5F18", VA = "0x18F5F18")]
	private static void CreateCoroutineSurrogate()
	{
	}

	[Token(Token = "0x6000E58")]
	[Address(RVA = "0x18F69B4", Offset = "0x18F69B4", VA = "0x18F69B4")]
	public static void Initialize()
	{
	}

	[Token(Token = "0x6000E59")]
	[Address(RVA = "0x18F69B8", Offset = "0x18F69B8", VA = "0x18F69B8")]
	public static void PurchaseProduct(InAppPurchaseDataHolder.Identifiers identifier, [Optional] Action<bool> callback, [Optional] string campaignID)
	{
	}

	[Token(Token = "0x6000E5A")]
	[Address(RVA = "0x18F6CD8", Offset = "0x18F6CD8", VA = "0x18F6CD8")]
	public static bool IsProductPurchased(InAppPurchaseDataHolder.Identifiers identifier)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E5B")]
	[Address(RVA = "0x18F6DF0", Offset = "0x18F6DF0", VA = "0x18F6DF0")]
	public static void RestoreTransactions()
	{
	}

	[Token(Token = "0x6000E5C")]
	[Address(RVA = "0x18F6DF4", Offset = "0x18F6DF4", VA = "0x18F6DF4")]
	[DebuggerHidden]
	public static IEnumerable<string> GetFilesInDirectory(InAppPurchaseDataHolder.Identifiers identifier)
	{
		return null;
	}

	[Token(Token = "0x6000E5D")]
	[Address(RVA = "0x18F6E94", Offset = "0x18F6E94", VA = "0x18F6E94")]
	public static void DeleteCachedObjects(InAppPurchaseDataHolder.Identifiers identifier)
	{
	}

	[Token(Token = "0x6000E5E")]
	[Address(RVA = "0x18F7198", Offset = "0x18F7198", VA = "0x18F7198")]
	public static string GetProductName(InAppPurchaseDataHolder.Identifiers identifier)
	{
		return null;
	}

	[Token(Token = "0x6000E5F")]
	[Address(RVA = "0x18F7244", Offset = "0x18F7244", VA = "0x18F7244")]
	public static bool GetProductHasDownload(InAppPurchaseDataHolder.Identifiers identifier)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E60")]
	[Address(RVA = "0x18F724C", Offset = "0x18F724C", VA = "0x18F724C")]
	public static bool GetProductHasDownloadFallback(InAppPurchaseDataHolder.Identifiers identifier)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E61")]
	[Address(RVA = "0x18F7254", Offset = "0x18F7254", VA = "0x18F7254")]
	public static VersionNumber GetServerProductVersion(InAppPurchaseDataHolder.Identifiers identifier)
	{
		return null;
	}

	[Token(Token = "0x6000E62")]
	[Address(RVA = "0x18F72C0", Offset = "0x18F72C0", VA = "0x18F72C0")]
	public static VersionNumber GetDownloadedProductVersion(InAppPurchaseDataHolder.Identifiers identifier)
	{
		return null;
	}

	[Token(Token = "0x6000E63")]
	[Address(RVA = "0x18F732C", Offset = "0x18F732C", VA = "0x18F732C")]
	public static string GetProductPrice(InAppPurchaseDataHolder.Identifiers identifier)
	{
		return null;
	}

	[Token(Token = "0x6000E64")]
	[Address(RVA = "0x18F7388", Offset = "0x18F7388", VA = "0x18F7388")]
	public static bool TryGetProductSize(InAppPurchaseDataHolder.Identifiers identifier, out float outFloat)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E65")]
	[Address(RVA = "0x18F739C", Offset = "0x18F739C", VA = "0x18F739C")]
	public static bool IsProductDataAvailable(InAppPurchaseDataHolder.Identifiers identifier)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E66")]
	[Address(RVA = "0x18F753C", Offset = "0x18F753C", VA = "0x18F753C")]
	public static void RequestAllProductData()
	{
	}

	[Token(Token = "0x6000E67")]
	[Address(RVA = "0x18F7694", Offset = "0x18F7694", VA = "0x18F7694")]
	public static ProductPurchaseState GetProductPurchaseState(InAppPurchaseDataHolder.Identifiers identifier, bool checkVersioning = true)
	{
		return default(ProductPurchaseState);
	}

	[Token(Token = "0x6000E68")]
	[Address(RVA = "0x18F7C68", Offset = "0x18F7C68", VA = "0x18F7C68")]
	private static bool IsDownloadedState(ProductPurchaseState state)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E69")]
	[Address(RVA = "0x18F7EA4", Offset = "0x18F7EA4", VA = "0x18F7EA4")]
	public static float GetDownloadProgress(InAppPurchaseDataHolder.Identifiers productionIdentifier)
	{
		return default(float);
	}

	[Token(Token = "0x6000E6A")]
	[Address(RVA = "0x18F7FB4", Offset = "0x18F7FB4", VA = "0x18F7FB4")]
	public static void TryVerifyReceipt(InAppPurchaseDataHolder.Identifiers identifier, Action<bool> completionCallback)
	{
	}

	[Token(Token = "0x6000E6B")]
	[Address(RVA = "0x18F8028", Offset = "0x18F8028", VA = "0x18F8028")]
	public static string GetCurrencyCode()
	{
		return null;
	}

	[Token(Token = "0x6000E6C")]
	[Address(RVA = "0x18F808C", Offset = "0x18F808C", VA = "0x18F808C")]
	public static string GetCountryCode()
	{
		return null;
	}

	[Token(Token = "0x6000E6D")]
	[Address(RVA = "0x18F80E8", Offset = "0x18F80E8", VA = "0x18F80E8")]
	public static void RegisterNewFileManager(InAppPurchaseDataHolder.Identifiers identifier, FileManagerDelegate fileManager)
	{
	}

	[Token(Token = "0x6000E6E")]
	[Address(RVA = "0x18F81A8", Offset = "0x18F81A8", VA = "0x18F81A8")]
	public static void UnregisterNewFileManager(InAppPurchaseDataHolder.Identifiers identifier, FileManagerDelegate fileManager)
	{
	}

	[Token(Token = "0x6000E6F")]
	[Address(RVA = "0x18F8364", Offset = "0x18F8364", VA = "0x18F8364")]
	public static void RegisterProductsDownloadedOnRestore(params InAppPurchaseDataHolder.Identifiers[] identifiers)
	{
	}

	[Token(Token = "0x6000E70")]
	[Address(RVA = "0x18F8474", Offset = "0x18F8474", VA = "0x18F8474")]
	public static void CancelDownload(InAppPurchaseDataHolder.Identifiers identifier)
	{
	}

	[Token(Token = "0x6000E71")]
	[Address(RVA = "0x18F7628", Offset = "0x18F7628", VA = "0x18F7628")]
	[DebuggerHidden]
	private static IEnumerator SimulateGetProductData()
	{
		return null;
	}

	[Token(Token = "0x6000E72")]
	[Address(RVA = "0x18F6B98", Offset = "0x18F6B98", VA = "0x18F6B98")]
	private static void CallPurchaseCallback(bool successfulPurchase)
	{
	}

	[Token(Token = "0x6000E73")]
	[Address(RVA = "0x18F86A0", Offset = "0x18F86A0", VA = "0x18F86A0")]
	private static void ContinuePurchase()
	{
	}

	[Token(Token = "0x6000E74")]
	[Address(RVA = "0x18F8744", Offset = "0x18F8744", VA = "0x18F8744")]
	private static void ContinuePurchase(string buttonString)
	{
	}

	[Token(Token = "0x6000E75")]
	[Address(RVA = "0x18F6B18", Offset = "0x18F6B18", VA = "0x18F6B18")]
	[DebuggerHidden]
	private static IEnumerator DownloadSimulation(InAppPurchaseDataHolder.Identifiers identifier)
	{
		return null;
	}

	[Token(Token = "0x6000E76")]
	[Address(RVA = "0x18F8750", Offset = "0x18F8750", VA = "0x18F8750")]
	[DebuggerHidden]
	private static IEnumerator VerifyReceiptCoroutine(string receipt, Action<bool> completionCallback, string identifierString)
	{
		return null;
	}

	[Token(Token = "0x6000E77")]
	[Address(RVA = "0x18F87F0", Offset = "0x18F87F0", VA = "0x18F87F0")]
	private static string GetReceipt(InAppPurchaseDataHolder.Identifiers identifier)
	{
		return null;
	}

	[Token(Token = "0x6000E78")]
	[Address(RVA = "0x18F8928", Offset = "0x18F8928", VA = "0x18F8928")]
	private static void MarkProductAsPurchased(InAppPurchaseDataHolder.Identifiers identifier, bool isFirstPurchase, [Optional] string campaignID)
	{
	}

	[Token(Token = "0x6000E79")]
	[Address(RVA = "0x18F7B50", Offset = "0x18F7B50", VA = "0x18F7B50")]
	private static bool IsProductQueued(InAppPurchaseDataHolder.Identifiers identifier)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E7A")]
	[Address(RVA = "0x18F8578", Offset = "0x18F8578", VA = "0x18F8578")]
	private static void SetProductQueued(InAppPurchaseDataHolder.Identifiers identifier, bool isQueued)
	{
	}

	[Token(Token = "0x6000E7B")]
	[Address(RVA = "0x18F7E9C", Offset = "0x18F7E9C", VA = "0x18F7E9C")]
	private static bool IsFileDownloadInCache(InAppPurchaseDataHolder.Identifiers identifier)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E7C")]
	[Address(RVA = "0x18F8B54", Offset = "0x18F8B54", VA = "0x18F8B54")]
	private static void SaveDownloadProgress(InAppPurchaseDataHolder.Identifiers identifier, float progress)
	{
	}

	[Token(Token = "0x6000E7E")]
	[Address(RVA = "0x18F8C80", Offset = "0x18F8C80", VA = "0x18F8C80")]
	private static string GetStorekitTransactionIdentifier(string productionIdentifier)
	{
		return null;
	}
}
[Token(Token = "0x20001E1")]
public class VersionNumber
{
	[Token(Token = "0x4000ABD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E38C", Offset = "0xE9E38C")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9E38C", Offset = "0xE9E38C")]
	private int <MajorVersionNumber>k__BackingField;

	[Token(Token = "0x4000ABE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E3C0", Offset = "0xE9E3C0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9E3C0", Offset = "0xE9E3C0")]
	private int <MinorVersionNumber>k__BackingField;

	[Token(Token = "0x4000ABF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E3F4", Offset = "0xE9E3F4")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9E3F4", Offset = "0xE9E3F4")]
	private int <PatchVersionNumber>k__BackingField;

	[Token(Token = "0x4000AC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private decimal versionNumberDecimal;

	[Token(Token = "0x170000F4")]
	public int MajorVersionNumber
	{
		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x21E63D4", Offset = "0x21E63D4", VA = "0x21E63D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E428", Offset = "0xE9E428")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x21E5C50", Offset = "0x21E5C50", VA = "0x21E5C50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E438", Offset = "0xE9E438")]
		private set
		{
		}
	}

	[Token(Token = "0x170000F5")]
	public int MinorVersionNumber
	{
		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x21E63DC", Offset = "0x21E63DC", VA = "0x21E63DC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E448", Offset = "0xE9E448")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x21E5C58", Offset = "0x21E5C58", VA = "0x21E5C58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E458", Offset = "0xE9E458")]
		private set
		{
		}
	}

	[Token(Token = "0x170000F6")]
	public int PatchVersionNumber
	{
		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x21E64C8", Offset = "0x21E64C8", VA = "0x21E64C8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E468", Offset = "0xE9E468")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x21E5C60", Offset = "0x21E5C60", VA = "0x21E5C60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E478", Offset = "0xE9E478")]
		private set
		{
		}
	}

	[Token(Token = "0x6000E84")]
	[Address(RVA = "0x21E5BF4", Offset = "0x21E5BF4", VA = "0x21E5BF4")]
	public VersionNumber()
	{
	}

	[Token(Token = "0x6000E85")]
	[Address(RVA = "0x21E5C68", Offset = "0x21E5C68", VA = "0x21E5C68")]
	public VersionNumber(int majorVersionNumber, int minorVersionNumber, int patchVersionNumber)
	{
	}

	[Token(Token = "0x6000E86")]
	[Address(RVA = "0x21E5F08", Offset = "0x21E5F08", VA = "0x21E5F08")]
	public VersionNumber(decimal version)
	{
	}

	[Token(Token = "0x6000E87")]
	[Address(RVA = "0x21E6288", Offset = "0x21E6288", VA = "0x21E6288")]
	public VersionNumber(string version)
	{
	}

	[Token(Token = "0x6000E88")]
	[Address(RVA = "0x21E5F4C", Offset = "0x21E5F4C", VA = "0x21E5F4C")]
	private void SetVersionNumber(decimal version)
	{
	}

	[Token(Token = "0x6000E89")]
	[Address(RVA = "0x21E634C", Offset = "0x21E634C", VA = "0x21E634C")]
	public VersionNumber CreatePatchless()
	{
		return null;
	}

	[Token(Token = "0x6000E8A")]
	[Address(RVA = "0x21E63E4", Offset = "0x21E63E4", VA = "0x21E63E4")]
	public static bool operator ==(VersionNumber v1, VersionNumber v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E8B")]
	[Address(RVA = "0x21E64D0", Offset = "0x21E64D0", VA = "0x21E64D0", Slot = "0")]
	public override bool Equals(object other)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E8C")]
	[Address(RVA = "0x21E6570", Offset = "0x21E6570", VA = "0x21E6570", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000E8D")]
	[Address(RVA = "0x21E6594", Offset = "0x21E6594", VA = "0x21E6594")]
	public static bool operator !=(VersionNumber v1, VersionNumber v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E8E")]
	[Address(RVA = "0x21E65A8", Offset = "0x21E65A8", VA = "0x21E65A8")]
	public static bool operator >(VersionNumber v1, VersionNumber v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E8F")]
	[Address(RVA = "0x21E668C", Offset = "0x21E668C", VA = "0x21E668C")]
	public static bool operator >=(VersionNumber v1, VersionNumber v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E90")]
	[Address(RVA = "0x21E6770", Offset = "0x21E6770", VA = "0x21E6770")]
	public static bool operator <(VersionNumber v1, VersionNumber v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E91")]
	[Address(RVA = "0x21E6854", Offset = "0x21E6854", VA = "0x21E6854")]
	public static bool operator <=(VersionNumber v1, VersionNumber v2)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E92")]
	[Address(RVA = "0x21E6938", Offset = "0x21E6938", VA = "0x21E6938")]
	public static explicit operator decimal(VersionNumber versionNumber)
	{
		return default(decimal);
	}

	[Token(Token = "0x6000E93")]
	[Address(RVA = "0x21E6964", Offset = "0x21E6964", VA = "0x21E6964", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x20001E2")]
public class iTween : MonoBehaviour
{
	[Token(Token = "0x20001E3")]
	private delegate float EasingFunction(float start, float end, float Value);

	[Token(Token = "0x20001E4")]
	private delegate void ApplyTween();

	[Token(Token = "0x20001E5")]
	public enum EaseType
	{
		[Token(Token = "0x4000AEA")]
		easeInQuad,
		[Token(Token = "0x4000AEB")]
		easeOutQuad,
		[Token(Token = "0x4000AEC")]
		easeInOutQuad,
		[Token(Token = "0x4000AED")]
		easeInCubic,
		[Token(Token = "0x4000AEE")]
		easeOutCubic,
		[Token(Token = "0x4000AEF")]
		easeInOutCubic,
		[Token(Token = "0x4000AF0")]
		easeInQuart,
		[Token(Token = "0x4000AF1")]
		easeOutQuart,
		[Token(Token = "0x4000AF2")]
		easeInOutQuart,
		[Token(Token = "0x4000AF3")]
		easeInQuint,
		[Token(Token = "0x4000AF4")]
		easeOutQuint,
		[Token(Token = "0x4000AF5")]
		easeInOutQuint,
		[Token(Token = "0x4000AF6")]
		easeInSine,
		[Token(Token = "0x4000AF7")]
		easeOutSine,
		[Token(Token = "0x4000AF8")]
		easeInOutSine,
		[Token(Token = "0x4000AF9")]
		easeInExpo,
		[Token(Token = "0x4000AFA")]
		easeOutExpo,
		[Token(Token = "0x4000AFB")]
		easeInOutExpo,
		[Token(Token = "0x4000AFC")]
		easeInCirc,
		[Token(Token = "0x4000AFD")]
		easeOutCirc,
		[Token(Token = "0x4000AFE")]
		easeInOutCirc,
		[Token(Token = "0x4000AFF")]
		linear,
		[Token(Token = "0x4000B00")]
		spring,
		[Token(Token = "0x4000B01")]
		easeInBounce,
		[Token(Token = "0x4000B02")]
		easeOutBounce,
		[Token(Token = "0x4000B03")]
		easeInOutBounce,
		[Token(Token = "0x4000B04")]
		easeInBack,
		[Token(Token = "0x4000B05")]
		easeOutBack,
		[Token(Token = "0x4000B06")]
		easeInOutBack,
		[Token(Token = "0x4000B07")]
		easeInElastic,
		[Token(Token = "0x4000B08")]
		easeOutElastic,
		[Token(Token = "0x4000B09")]
		easeInOutElastic,
		[Token(Token = "0x4000B0A")]
		punch
	}

	[Token(Token = "0x20001E6")]
	public enum LoopType
	{
		[Token(Token = "0x4000B0C")]
		none,
		[Token(Token = "0x4000B0D")]
		loop,
		[Token(Token = "0x4000B0E")]
		pingPong
	}

	[Token(Token = "0x20001E7")]
	public enum NamedValueColor
	{
		[Token(Token = "0x4000B10")]
		_Color,
		[Token(Token = "0x4000B11")]
		_SpecColor,
		[Token(Token = "0x4000B12")]
		_Emission,
		[Token(Token = "0x4000B13")]
		_ReflectColor
	}

	[Token(Token = "0x20001E8")]
	public static class Defaults
	{
		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float time;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float delay;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static NamedValueColor namedColorValue;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static LoopType loopType;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static EaseType easeType;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static float lookSpeed;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static bool isLocal;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static Space space;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static bool orientToPath;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static Color color;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static float updateTimePercentage;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static float updateTime;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static int cameraFadeDepth;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static float lookAhead;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static bool useRealTime;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static Vector3 up;
	}

	[Token(Token = "0x20001E9")]
	private class CRSpline
	{
		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3[] pts;

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0x1947F24", Offset = "0x1947F24", VA = "0x1947F24")]
		public CRSpline(params Vector3[] pts)
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0x1947FEC", Offset = "0x1947FEC", VA = "0x1947FEC")]
		public Vector3 Interp(float t)
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x2000527")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E4E8", Offset = "0xE9E4E8")]
	private sealed class <TweenDelay>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <delayStartedRealTime>__1;

		[Token(Token = "0x4001A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <resumeTimeRealTime>__1;

		[Token(Token = "0x4001A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal iTween $this;

		[Token(Token = "0x4001A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x4001A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4001A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x170002A2")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600241C")]
			[Address(RVA = "0x1947A08", Offset = "0x1947A08", VA = "0x1947A08", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600241D")]
			[Address(RVA = "0x1947A10", Offset = "0x1947A10", VA = "0x1947A10", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600241A")]
		[Address(RVA = "0x19477E0", Offset = "0x19477E0", VA = "0x19477E0")]
		[DebuggerHidden]
		public <TweenDelay>c__Iterator0()
		{
		}

		[Token(Token = "0x600241B")]
		[Address(RVA = "0x19477E8", Offset = "0x19477E8", VA = "0x19477E8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600241E")]
		[Address(RVA = "0x1947A18", Offset = "0x1947A18", VA = "0x1947A18", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600241F")]
		[Address(RVA = "0x1947A2C", Offset = "0x1947A2C", VA = "0x1947A2C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000528")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E548", Offset = "0xE9E548")]
	private sealed class <TweenRestart>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal iTween $this;

		[Token(Token = "0x4001A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal object $current;

		[Token(Token = "0x4001A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool $disposing;

		[Token(Token = "0x4001A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int $PC;

		[Token(Token = "0x170002A4")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002422")]
			[Address(RVA = "0x1947C28", Offset = "0x1947C28", VA = "0x1947C28", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002423")]
			[Address(RVA = "0x1947C30", Offset = "0x1947C30", VA = "0x1947C30", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002420")]
		[Address(RVA = "0x1947AB0", Offset = "0x1947AB0", VA = "0x1947AB0")]
		[DebuggerHidden]
		public <TweenRestart>c__Iterator1()
		{
		}

		[Token(Token = "0x6002421")]
		[Address(RVA = "0x1947AB8", Offset = "0x1947AB8", VA = "0x1947AB8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002424")]
		[Address(RVA = "0x1947C38", Offset = "0x1947C38", VA = "0x1947C38", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002425")]
		[Address(RVA = "0x1947C4C", Offset = "0x1947C4C", VA = "0x1947C4C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000529")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E5A8", Offset = "0xE9E5A8")]
	private sealed class <Start>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal iTween $this;

		[Token(Token = "0x4001A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal object $current;

		[Token(Token = "0x4001A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool $disposing;

		[Token(Token = "0x4001A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int $PC;

		[Token(Token = "0x170002A6")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002428")]
			[Address(RVA = "0x1947738", Offset = "0x1947738", VA = "0x1947738", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002429")]
			[Address(RVA = "0x1947740", Offset = "0x1947740", VA = "0x1947740", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002426")]
		[Address(RVA = "0x1947610", Offset = "0x1947610", VA = "0x1947610")]
		[DebuggerHidden]
		public <Start>c__Iterator2()
		{
		}

		[Token(Token = "0x6002427")]
		[Address(RVA = "0x1947618", Offset = "0x1947618", VA = "0x1947618", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600242A")]
		[Address(RVA = "0x1947748", Offset = "0x1947748", VA = "0x1947748", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600242B")]
		[Address(RVA = "0x194775C", Offset = "0x194775C", VA = "0x194775C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000AC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<Hashtable> tweens;

	[Token(Token = "0x4000AC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static GameObject cameraFade;

	[Token(Token = "0x4000AC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string id;

	[Token(Token = "0x4000AC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string type;

	[Token(Token = "0x4000AC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public string method;

	[Token(Token = "0x4000AC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EaseType easeType;

	[Token(Token = "0x4000AC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float time;

	[Token(Token = "0x4000AC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float delay;

	[Token(Token = "0x4000AC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public LoopType loopType;

	[Token(Token = "0x4000ACA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isRunning;

	[Token(Token = "0x4000ACB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool isPaused;

	[Token(Token = "0x4000ACC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public string _name;

	[Token(Token = "0x4000ACD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float runningTime;

	[Token(Token = "0x4000ACE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float percentage;

	[Token(Token = "0x4000ACF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float delayStarted;

	[Token(Token = "0x4000AD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool kinematic;

	[Token(Token = "0x4000AD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	private bool isLocal;

	[Token(Token = "0x4000AD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
	private bool loop;

	[Token(Token = "0x4000AD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3F")]
	private bool reverse;

	[Token(Token = "0x4000AD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool wasPaused;

	[Token(Token = "0x4000AD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool physics;

	[Token(Token = "0x4000AD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Rigidbody cachedRigidbody;

	[Token(Token = "0x4000AD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Hashtable tweenArguments;

	[Token(Token = "0x4000AD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Space space;

	[Token(Token = "0x4000AD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private EasingFunction ease;

	[Token(Token = "0x4000ADA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private ApplyTween apply;

	[Token(Token = "0x4000ADB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AudioSource audioSource;

	[Token(Token = "0x4000ADC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Vector3[] vector3s;

	[Token(Token = "0x4000ADD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector2[] vector2s;

	[Token(Token = "0x4000ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Color[,] colors;

	[Token(Token = "0x4000ADF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float[] floats;

	[Token(Token = "0x4000AE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Rect[] rects;

	[Token(Token = "0x4000AE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private CRSpline path;

	[Token(Token = "0x4000AE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 preUpdate;

	[Token(Token = "0x4000AE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 postUpdate;

	[Token(Token = "0x4000AE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private NamedValueColor namedcolorvalue;

	[Token(Token = "0x4000AE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float lastRealTime;

	[Token(Token = "0x4000AE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private bool useRealTime;

	[Token(Token = "0x4000AE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Transform thisTransform;

	[Token(Token = "0x4000AE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E488", Offset = "0xE9E488")]
	private static Dictionary<string, int> <>f__switch$map4;

	[Token(Token = "0x6000E9A")]
	[Address(RVA = "0x3C3BA0", Offset = "0x3C3BA0", VA = "0x3C3BA0")]
	private iTween(Hashtable h)
	{
	}

	[Token(Token = "0x6000E9B")]
	[Address(RVA = "0x3C3BC0", Offset = "0x3C3BC0", VA = "0x3C3BC0")]
	public static void Init(GameObject target)
	{
	}

	[Token(Token = "0x6000E9C")]
	[Address(RVA = "0x3C3F18", Offset = "0x3C3F18", VA = "0x3C3F18")]
	public static void CameraFadeFrom(float amount, float time)
	{
	}

	[Token(Token = "0x6000E9D")]
	[Address(RVA = "0x3C43E4", Offset = "0x3C43E4", VA = "0x3C43E4")]
	public static void CameraFadeFrom(Hashtable args)
	{
	}

	[Token(Token = "0x6000E9E")]
	[Address(RVA = "0x3C5500", Offset = "0x3C5500", VA = "0x3C5500")]
	public static void CameraFadeTo(float amount, float time)
	{
	}

	[Token(Token = "0x6000E9F")]
	[Address(RVA = "0x3C584C", Offset = "0x3C584C", VA = "0x3C584C")]
	public static void CameraFadeTo(Hashtable args)
	{
	}

	[Token(Token = "0x6000EA0")]
	[Address(RVA = "0x3C6078", Offset = "0x3C6078", VA = "0x3C6078")]
	public static void ValueTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EA1")]
	[Address(RVA = "0x3C7614", Offset = "0x3C7614", VA = "0x3C7614")]
	public static void FadeFrom(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x6000EA2")]
	[Address(RVA = "0x3C788C", Offset = "0x3C788C", VA = "0x3C788C")]
	public static void FadeFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EA3")]
	[Address(RVA = "0x3C7914", Offset = "0x3C7914", VA = "0x3C7914")]
	public static void FadeTo(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x6000EA4")]
	[Address(RVA = "0x3C7B8C", Offset = "0x3C7B8C", VA = "0x3C7B8C")]
	public static void FadeTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EA5")]
	[Address(RVA = "0x3C7C14", Offset = "0x3C7C14", VA = "0x3C7C14")]
	public static void ColorFrom(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x6000EA6")]
	[Address(RVA = "0x3C4550", Offset = "0x3C4550", VA = "0x3C4550")]
	public static void ColorFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EA7")]
	[Address(RVA = "0x3C7EA4", Offset = "0x3C7EA4", VA = "0x3C7EA4")]
	public static void ColorTo(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x6000EA8")]
	[Address(RVA = "0x3C59B8", Offset = "0x3C59B8", VA = "0x3C59B8")]
	public static void ColorTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EA9")]
	[Address(RVA = "0x3C8134", Offset = "0x3C8134", VA = "0x3C8134")]
	public static void AudioFrom(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x6000EAA")]
	[Address(RVA = "0x3C847C", Offset = "0x3C847C", VA = "0x3C847C")]
	public static void AudioFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EAB")]
	[Address(RVA = "0x3C8A88", Offset = "0x3C8A88", VA = "0x3C8A88")]
	public static void AudioTo(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x6000EAC")]
	[Address(RVA = "0x3C8DD0", Offset = "0x3C8DD0", VA = "0x3C8DD0")]
	public static void AudioTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EAD")]
	[Address(RVA = "0x3C8F80", Offset = "0x3C8F80", VA = "0x3C8F80")]
	public static void Stab(GameObject target, AudioClip audioclip, float delay)
	{
	}

	[Token(Token = "0x6000EAE")]
	[Address(RVA = "0x3C91D4", Offset = "0x3C91D4", VA = "0x3C91D4")]
	public static void Stab(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EAF")]
	[Address(RVA = "0x3C92A8", Offset = "0x3C92A8", VA = "0x3C92A8")]
	public static void LookFrom(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x6000EB0")]
	[Address(RVA = "0x3C9528", Offset = "0x3C9528", VA = "0x3C9528")]
	public static void LookFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EB1")]
	[Address(RVA = "0x3CA0D8", Offset = "0x3CA0D8", VA = "0x3CA0D8")]
	public static void LookTo(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x6000EB2")]
	[Address(RVA = "0x3CA358", Offset = "0x3CA358", VA = "0x3CA358")]
	public static void LookTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EB3")]
	[Address(RVA = "0x3CA82C", Offset = "0x3CA82C", VA = "0x3CA82C")]
	public static void MoveTo(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x6000EB4")]
	[Address(RVA = "0x3CAAAC", Offset = "0x3CAAAC", VA = "0x3CAAAC")]
	public static void MoveTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EB5")]
	[Address(RVA = "0x3CB064", Offset = "0x3CB064", VA = "0x3CB064")]
	public static void MoveFrom(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x6000EB6")]
	[Address(RVA = "0x3CB2E4", Offset = "0x3CB2E4", VA = "0x3CB2E4")]
	public static void MoveFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EB7")]
	[Address(RVA = "0x3CC264", Offset = "0x3CC264", VA = "0x3CC264")]
	public static void MoveAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000EB8")]
	[Address(RVA = "0x3CC4E4", Offset = "0x3CC4E4", VA = "0x3CC4E4")]
	public static void MoveAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EB9")]
	[Address(RVA = "0x3C3C98", Offset = "0x3C3C98", VA = "0x3C3C98")]
	public static void MoveBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000EBA")]
	[Address(RVA = "0x3CC5F8", Offset = "0x3CC5F8", VA = "0x3CC5F8")]
	public static void MoveBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EBB")]
	[Address(RVA = "0x3CC70C", Offset = "0x3CC70C", VA = "0x3CC70C")]
	public static void ScaleTo(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x6000EBC")]
	[Address(RVA = "0x3CC98C", Offset = "0x3CC98C", VA = "0x3CC98C")]
	public static void ScaleTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EBD")]
	[Address(RVA = "0x3CCF44", Offset = "0x3CCF44", VA = "0x3CCF44")]
	public static void ScaleFrom(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x6000EBE")]
	[Address(RVA = "0x3CD1C4", Offset = "0x3CD1C4", VA = "0x3CD1C4")]
	public static void ScaleFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EBF")]
	[Address(RVA = "0x3CD970", Offset = "0x3CD970", VA = "0x3CD970")]
	public static void ScaleAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000EC0")]
	[Address(RVA = "0x3CDBF0", Offset = "0x3CDBF0", VA = "0x3CDBF0")]
	public static void ScaleAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EC1")]
	[Address(RVA = "0x3CDD04", Offset = "0x3CDD04", VA = "0x3CDD04")]
	public static void ScaleBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000EC2")]
	[Address(RVA = "0x3CDF84", Offset = "0x3CDF84", VA = "0x3CDF84")]
	public static void ScaleBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EC3")]
	[Address(RVA = "0x3CE098", Offset = "0x3CE098", VA = "0x3CE098")]
	public static void RotateTo(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x6000EC4")]
	[Address(RVA = "0x3CE318", Offset = "0x3CE318", VA = "0x3CE318")]
	public static void RotateTo(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EC5")]
	[Address(RVA = "0x3CE8D0", Offset = "0x3CE8D0", VA = "0x3CE8D0")]
	public static void RotateFrom(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x6000EC6")]
	[Address(RVA = "0x3CEB50", Offset = "0x3CEB50", VA = "0x3CEB50")]
	public static void RotateFrom(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EC7")]
	[Address(RVA = "0x3CF44C", Offset = "0x3CF44C", VA = "0x3CF44C")]
	public static void RotateAdd(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000EC8")]
	[Address(RVA = "0x3CF6CC", Offset = "0x3CF6CC", VA = "0x3CF6CC")]
	public static void RotateAdd(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000EC9")]
	[Address(RVA = "0x3CF7E0", Offset = "0x3CF7E0", VA = "0x3CF7E0")]
	public static void RotateBy(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000ECA")]
	[Address(RVA = "0x3CFA60", Offset = "0x3CFA60", VA = "0x3CFA60")]
	public static void RotateBy(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000ECB")]
	[Address(RVA = "0x3CFB74", Offset = "0x3CFB74", VA = "0x3CFB74")]
	public static void ShakePosition(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000ECC")]
	[Address(RVA = "0x3CFDF4", Offset = "0x3CFDF4", VA = "0x3CFDF4")]
	public static void ShakePosition(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000ECD")]
	[Address(RVA = "0x3CFF08", Offset = "0x3CFF08", VA = "0x3CFF08")]
	public static void ShakeScale(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000ECE")]
	[Address(RVA = "0x3D0188", Offset = "0x3D0188", VA = "0x3D0188")]
	public static void ShakeScale(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000ECF")]
	[Address(RVA = "0x3D029C", Offset = "0x3D029C", VA = "0x3D029C")]
	public static void ShakeRotation(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000ED0")]
	[Address(RVA = "0x3D051C", Offset = "0x3D051C", VA = "0x3D051C")]
	public static void ShakeRotation(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000ED1")]
	[Address(RVA = "0x3D0630", Offset = "0x3D0630", VA = "0x3D0630")]
	public static void PunchPosition(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000ED2")]
	[Address(RVA = "0x3D08B0", Offset = "0x3D08B0", VA = "0x3D08B0")]
	public static void PunchPosition(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000ED3")]
	[Address(RVA = "0x3D0A24", Offset = "0x3D0A24", VA = "0x3D0A24")]
	public static void PunchRotation(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000ED4")]
	[Address(RVA = "0x3D0CA4", Offset = "0x3D0CA4", VA = "0x3D0CA4")]
	public static void PunchRotation(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000ED5")]
	[Address(RVA = "0x3D0E18", Offset = "0x3D0E18", VA = "0x3D0E18")]
	public static void PunchScale(GameObject target, Vector3 amount, float time)
	{
	}

	[Token(Token = "0x6000ED6")]
	[Address(RVA = "0x3D1098", Offset = "0x3D1098", VA = "0x3D1098")]
	public static void PunchScale(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000ED7")]
	[Address(RVA = "0x3D120C", Offset = "0x3D120C", VA = "0x3D120C")]
	private void GenerateTargets()
	{
	}

	[Token(Token = "0x6000ED8")]
	[Address(RVA = "0x3D30F4", Offset = "0x3D30F4", VA = "0x3D30F4")]
	private void GenerateRectTargets()
	{
	}

	[Token(Token = "0x6000ED9")]
	[Address(RVA = "0x3D2E68", Offset = "0x3D2E68", VA = "0x3D2E68")]
	private void GenerateColorTargets()
	{
	}

	[Token(Token = "0x6000EDA")]
	[Address(RVA = "0x3D2A78", Offset = "0x3D2A78", VA = "0x3D2A78")]
	private void GenerateVector3Targets()
	{
	}

	[Token(Token = "0x6000EDB")]
	[Address(RVA = "0x3D25DC", Offset = "0x3D25DC", VA = "0x3D25DC")]
	private void GenerateVector2Targets()
	{
	}

	[Token(Token = "0x6000EDC")]
	[Address(RVA = "0x3D2268", Offset = "0x3D2268", VA = "0x3D2268")]
	private void GenerateFloatTargets()
	{
	}

	[Token(Token = "0x6000EDD")]
	[Address(RVA = "0x3D3338", Offset = "0x3D3338", VA = "0x3D3338")]
	private void GenerateColorToTargets()
	{
	}

	[Token(Token = "0x6000EDE")]
	[Address(RVA = "0x3D4374", Offset = "0x3D4374", VA = "0x3D4374")]
	private void GenerateAudioToTargets()
	{
	}

	[Token(Token = "0x6000EDF")]
	[Address(RVA = "0x3DD414", Offset = "0x3DD414", VA = "0x3DD414")]
	private void GenerateStabTargets()
	{
	}

	[Token(Token = "0x6000EE0")]
	[Address(RVA = "0x3DC420", Offset = "0x3DC420", VA = "0x3DC420")]
	private void GenerateLookToTargets()
	{
	}

	[Token(Token = "0x6000EE1")]
	[Address(RVA = "0x3D4880", Offset = "0x3D4880", VA = "0x3D4880")]
	private void GenerateMoveToPathTargets()
	{
	}

	[Token(Token = "0x6000EE2")]
	[Address(RVA = "0x3D55C0", Offset = "0x3D55C0", VA = "0x3D55C0")]
	private void GenerateMoveToTargets()
	{
	}

	[Token(Token = "0x6000EE3")]
	[Address(RVA = "0x3D6134", Offset = "0x3D6134", VA = "0x3D6134")]
	private void GenerateMoveByTargets()
	{
	}

	[Token(Token = "0x6000EE4")]
	[Address(RVA = "0x3D6CDC", Offset = "0x3D6CDC", VA = "0x3D6CDC")]
	private void GenerateScaleToTargets()
	{
	}

	[Token(Token = "0x6000EE5")]
	[Address(RVA = "0x3D7640", Offset = "0x3D7640", VA = "0x3D7640")]
	private void GenerateScaleByTargets()
	{
	}

	[Token(Token = "0x6000EE6")]
	[Address(RVA = "0x3D7E38", Offset = "0x3D7E38", VA = "0x3D7E38")]
	private void GenerateScaleAddTargets()
	{
	}

	[Token(Token = "0x6000EE7")]
	[Address(RVA = "0x3D8604", Offset = "0x3D8604", VA = "0x3D8604")]
	private void GenerateRotateToTargets()
	{
	}

	[Token(Token = "0x6000EE8")]
	[Address(RVA = "0x3D919C", Offset = "0x3D919C", VA = "0x3D919C")]
	private void GenerateRotateAddTargets()
	{
	}

	[Token(Token = "0x6000EE9")]
	[Address(RVA = "0x3D99B4", Offset = "0x3D99B4", VA = "0x3D99B4")]
	private void GenerateRotateByTargets()
	{
	}

	[Token(Token = "0x6000EEA")]
	[Address(RVA = "0x3DA254", Offset = "0x3DA254", VA = "0x3DA254")]
	private void GenerateShakePositionTargets()
	{
	}

	[Token(Token = "0x6000EEB")]
	[Address(RVA = "0x3DA7CC", Offset = "0x3DA7CC", VA = "0x3DA7CC")]
	private void GenerateShakeScaleTargets()
	{
	}

	[Token(Token = "0x6000EEC")]
	[Address(RVA = "0x3DACEC", Offset = "0x3DACEC", VA = "0x3DACEC")]
	private void GenerateShakeRotationTargets()
	{
	}

	[Token(Token = "0x6000EED")]
	[Address(RVA = "0x3DB20C", Offset = "0x3DB20C", VA = "0x3DB20C")]
	private void GeneratePunchPositionTargets()
	{
	}

	[Token(Token = "0x6000EEE")]
	[Address(RVA = "0x3DB878", Offset = "0x3DB878", VA = "0x3DB878")]
	private void GeneratePunchRotationTargets()
	{
	}

	[Token(Token = "0x6000EEF")]
	[Address(RVA = "0x3DBE8C", Offset = "0x3DBE8C", VA = "0x3DBE8C")]
	private void GeneratePunchScaleTargets()
	{
	}

	[Token(Token = "0x6000EF0")]
	[Address(RVA = "0x3DDF2C", Offset = "0x3DDF2C", VA = "0x3DDF2C")]
	private void ApplyRectTargets()
	{
	}

	[Token(Token = "0x6000EF1")]
	[Address(RVA = "0x3DE438", Offset = "0x3DE438", VA = "0x3DE438")]
	private void ApplyColorTargets()
	{
	}

	[Token(Token = "0x6000EF2")]
	[Address(RVA = "0x3DEA5C", Offset = "0x3DEA5C", VA = "0x3DEA5C")]
	private void ApplyVector3Targets()
	{
	}

	[Token(Token = "0x6000EF3")]
	[Address(RVA = "0x3DEE18", Offset = "0x3DEE18", VA = "0x3DEE18")]
	private void ApplyVector2Targets()
	{
	}

	[Token(Token = "0x6000EF4")]
	[Address(RVA = "0x3DF118", Offset = "0x3DF118", VA = "0x3DF118")]
	private void ApplyFloatTargets()
	{
	}

	[Token(Token = "0x6000EF5")]
	[Address(RVA = "0x3DF34C", Offset = "0x3DF34C", VA = "0x3DF34C")]
	private void ApplyColorToTargets()
	{
	}

	[Token(Token = "0x6000EF6")]
	[Address(RVA = "0x3DFE4C", Offset = "0x3DFE4C", VA = "0x3DFE4C")]
	private void ApplyAudioToTargets()
	{
	}

	[Token(Token = "0x6000EF7")]
	[Address(RVA = "0x3E0134", Offset = "0x3E0134", VA = "0x3E0134")]
	private void ApplyStabTargets()
	{
	}

	[Token(Token = "0x6000EF8")]
	[Address(RVA = "0x3E0138", Offset = "0x3E0138", VA = "0x3E0138")]
	private void ApplyMoveToPathTargets()
	{
	}

	[Token(Token = "0x6000EF9")]
	[Address(RVA = "0x3E0708", Offset = "0x3E0708", VA = "0x3E0708")]
	private void ApplyMoveToTargets()
	{
	}

	[Token(Token = "0x6000EFA")]
	[Address(RVA = "0x3E0B14", Offset = "0x3E0B14", VA = "0x3E0B14")]
	private void ApplyMoveByTargets()
	{
	}

	[Token(Token = "0x6000EFB")]
	[Address(RVA = "0x3E1120", Offset = "0x3E1120", VA = "0x3E1120")]
	private void ApplyScaleToTargets()
	{
	}

	[Token(Token = "0x6000EFC")]
	[Address(RVA = "0x3E1424", Offset = "0x3E1424", VA = "0x3E1424")]
	private void ApplyLookToTargets()
	{
	}

	[Token(Token = "0x6000EFD")]
	[Address(RVA = "0x3E17D4", Offset = "0x3E17D4", VA = "0x3E17D4")]
	private void ApplyRotateToTargets()
	{
	}

	[Token(Token = "0x6000EFE")]
	[Address(RVA = "0x3E1DE4", Offset = "0x3E1DE4", VA = "0x3E1DE4")]
	private void ApplyRotateAddTargets()
	{
	}

	[Token(Token = "0x6000EFF")]
	[Address(RVA = "0x3E22D4", Offset = "0x3E22D4", VA = "0x3E22D4")]
	private void ApplyShakePositionTargets()
	{
	}

	[Token(Token = "0x6000F00")]
	[Address(RVA = "0x3E29E8", Offset = "0x3E29E8", VA = "0x3E29E8")]
	private void ApplyShakeScaleTargets()
	{
	}

	[Token(Token = "0x6000F01")]
	[Address(RVA = "0x3E2DD4", Offset = "0x3E2DD4", VA = "0x3E2DD4")]
	private void ApplyShakeRotationTargets()
	{
	}

	[Token(Token = "0x6000F02")]
	[Address(RVA = "0x3E3278", Offset = "0x3E3278", VA = "0x3E3278")]
	private void ApplyPunchPositionTargets()
	{
	}

	[Token(Token = "0x6000F03")]
	[Address(RVA = "0x3E3B88", Offset = "0x3E3B88", VA = "0x3E3B88")]
	private void ApplyPunchRotationTargets()
	{
	}

	[Token(Token = "0x6000F04")]
	[Address(RVA = "0x3E4288", Offset = "0x3E4288", VA = "0x3E4288")]
	private void ApplyPunchScaleTargets()
	{
	}

	[Token(Token = "0x6000F05")]
	[Address(RVA = "0x3E47EC", Offset = "0x3E47EC", VA = "0x3E47EC")]
	[DebuggerHidden]
	private IEnumerator TweenDelay()
	{
		return null;
	}

	[Token(Token = "0x6000F06")]
	[Address(RVA = "0x3E486C", Offset = "0x3E486C", VA = "0x3E486C")]
	private void TweenStart()
	{
	}

	[Token(Token = "0x6000F07")]
	[Address(RVA = "0x3E585C", Offset = "0x3E585C", VA = "0x3E585C")]
	[DebuggerHidden]
	private IEnumerator TweenRestart()
	{
		return null;
	}

	[Token(Token = "0x6000F08")]
	[Address(RVA = "0x3E58DC", Offset = "0x3E58DC", VA = "0x3E58DC")]
	private void TweenUpdate()
	{
	}

	[Token(Token = "0x6000F09")]
	[Address(RVA = "0x3E59F4", Offset = "0x3E59F4", VA = "0x3E59F4")]
	private void TweenComplete()
	{
	}

	[Token(Token = "0x6000F0A")]
	[Address(RVA = "0x3E5B38", Offset = "0x3E5B38", VA = "0x3E5B38")]
	private void TweenLoop()
	{
	}

	[Token(Token = "0x6000F0B")]
	[Address(RVA = "0x3E5C04", Offset = "0x3E5C04", VA = "0x3E5C04")]
	public static Rect RectUpdate(Rect currentValue, Rect targetValue, float speed)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000F0C")]
	[Address(RVA = "0x3E5E68", Offset = "0x3E5E68", VA = "0x3E5E68")]
	public static Vector3 Vector3Update(Vector3 currentValue, Vector3 targetValue, float speed)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000F0D")]
	[Address(RVA = "0x3E5FC0", Offset = "0x3E5FC0", VA = "0x3E5FC0")]
	public static Vector2 Vector2Update(Vector2 currentValue, Vector2 targetValue, float speed)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000F0E")]
	[Address(RVA = "0x3E5E24", Offset = "0x3E5E24", VA = "0x3E5E24")]
	public static float FloatUpdate(float currentValue, float targetValue, float speed)
	{
		return default(float);
	}

	[Token(Token = "0x6000F0F")]
	[Address(RVA = "0x3E60E8", Offset = "0x3E60E8", VA = "0x3E60E8")]
	public static void FadeUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000F10")]
	[Address(RVA = "0x3E7384", Offset = "0x3E7384", VA = "0x3E7384")]
	public static void FadeUpdate(GameObject target, float alpha, float time)
	{
	}

	[Token(Token = "0x6000F11")]
	[Address(RVA = "0x3E61D8", Offset = "0x3E61D8", VA = "0x3E61D8")]
	public static void ColorUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000F12")]
	[Address(RVA = "0x3E75FC", Offset = "0x3E75FC", VA = "0x3E75FC")]
	public static void ColorUpdate(GameObject target, Color color, float time)
	{
	}

	[Token(Token = "0x6000F13")]
	[Address(RVA = "0x3E788C", Offset = "0x3E788C", VA = "0x3E788C")]
	public static void AudioUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000F14")]
	[Address(RVA = "0x3E8118", Offset = "0x3E8118", VA = "0x3E8118")]
	public static void AudioUpdate(GameObject target, float volume, float pitch, float time)
	{
	}

	[Token(Token = "0x6000F15")]
	[Address(RVA = "0x3E8460", Offset = "0x3E8460", VA = "0x3E8460")]
	public static void RotateUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000F16")]
	[Address(RVA = "0x3E8FB0", Offset = "0x3E8FB0", VA = "0x3E8FB0")]
	public static void RotateUpdate(GameObject target, Vector3 rotation, float time)
	{
	}

	[Token(Token = "0x6000F17")]
	[Address(RVA = "0x3E9230", Offset = "0x3E9230", VA = "0x3E9230")]
	public static void ScaleUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000F18")]
	[Address(RVA = "0x3E9DD0", Offset = "0x3E9DD0", VA = "0x3E9DD0")]
	public static void ScaleUpdate(GameObject target, Vector3 scale, float time)
	{
	}

	[Token(Token = "0x6000F19")]
	[Address(RVA = "0x3EA050", Offset = "0x3EA050", VA = "0x3EA050")]
	public static void MoveUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000F1A")]
	[Address(RVA = "0x3EC3AC", Offset = "0x3EC3AC", VA = "0x3EC3AC")]
	public static void MoveUpdate(GameObject target, Vector3 position, float time)
	{
	}

	[Token(Token = "0x6000F1B")]
	[Address(RVA = "0x3EB0D0", Offset = "0x3EB0D0", VA = "0x3EB0D0")]
	public static void LookUpdate(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000F1C")]
	[Address(RVA = "0x3EC62C", Offset = "0x3EC62C", VA = "0x3EC62C")]
	public static void LookUpdate(GameObject target, Vector3 looktarget, float time)
	{
	}

	[Token(Token = "0x6000F1D")]
	[Address(RVA = "0x3EC8AC", Offset = "0x3EC8AC", VA = "0x3EC8AC")]
	public static float PathLength(Transform[] path)
	{
		return default(float);
	}

	[Token(Token = "0x6000F1E")]
	[Address(RVA = "0x3DDD54", Offset = "0x3DDD54", VA = "0x3DDD54")]
	public static float PathLength(Vector3[] path)
	{
		return default(float);
	}

	[Token(Token = "0x6000F1F")]
	[Address(RVA = "0x3ED5A8", Offset = "0x3ED5A8", VA = "0x3ED5A8")]
	public static Texture2D CameraTexture(Color color)
	{
		return null;
	}

	[Token(Token = "0x6000F20")]
	[Address(RVA = "0x3ED73C", Offset = "0x3ED73C", VA = "0x3ED73C")]
	public static void PutOnPath(GameObject target, Vector3[] path, float percent)
	{
	}

	[Token(Token = "0x6000F21")]
	[Address(RVA = "0x3ED81C", Offset = "0x3ED81C", VA = "0x3ED81C")]
	public static void PutOnPath(Transform target, Vector3[] path, float percent)
	{
	}

	[Token(Token = "0x6000F22")]
	[Address(RVA = "0x3ED8E0", Offset = "0x3ED8E0", VA = "0x3ED8E0")]
	public static void PutOnPath(GameObject target, Transform[] path, float percent)
	{
	}

	[Token(Token = "0x6000F23")]
	[Address(RVA = "0x3EDAA8", Offset = "0x3EDAA8", VA = "0x3EDAA8")]
	public static void PutOnPath(Transform target, Transform[] path, float percent)
	{
	}

	[Token(Token = "0x6000F24")]
	[Address(RVA = "0x3EDC54", Offset = "0x3EDC54", VA = "0x3EDC54")]
	public static Vector3 PointOnPath(Transform[] path, float percent)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000F25")]
	[Address(RVA = "0x3EDDD4", Offset = "0x3EDDD4", VA = "0x3EDDD4")]
	public static void DrawLine(Vector3[] line)
	{
	}

	[Token(Token = "0x6000F26")]
	[Address(RVA = "0x3EE130", Offset = "0x3EE130", VA = "0x3EE130")]
	public static void DrawLine(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x6000F27")]
	[Address(RVA = "0x3EE200", Offset = "0x3EE200", VA = "0x3EE200")]
	public static void DrawLine(Transform[] line)
	{
	}

	[Token(Token = "0x6000F28")]
	[Address(RVA = "0x3EE3DC", Offset = "0x3EE3DC", VA = "0x3EE3DC")]
	public static void DrawLine(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x6000F29")]
	[Address(RVA = "0x3EE584", Offset = "0x3EE584", VA = "0x3EE584")]
	public static void DrawLineGizmos(Vector3[] line)
	{
	}

	[Token(Token = "0x6000F2A")]
	[Address(RVA = "0x3EE698", Offset = "0x3EE698", VA = "0x3EE698")]
	public static void DrawLineGizmos(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x6000F2B")]
	[Address(RVA = "0x3EE768", Offset = "0x3EE768", VA = "0x3EE768")]
	public static void DrawLineGizmos(Transform[] line)
	{
	}

	[Token(Token = "0x6000F2C")]
	[Address(RVA = "0x3EE944", Offset = "0x3EE944", VA = "0x3EE944")]
	public static void DrawLineGizmos(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x6000F2D")]
	[Address(RVA = "0x3EEAEC", Offset = "0x3EEAEC", VA = "0x3EEAEC")]
	public static void DrawLineHandles(Vector3[] line)
	{
	}

	[Token(Token = "0x6000F2E")]
	[Address(RVA = "0x3EEC00", Offset = "0x3EEC00", VA = "0x3EEC00")]
	public static void DrawLineHandles(Vector3[] line, Color color)
	{
	}

	[Token(Token = "0x6000F2F")]
	[Address(RVA = "0x3EECD0", Offset = "0x3EECD0", VA = "0x3EECD0")]
	public static void DrawLineHandles(Transform[] line)
	{
	}

	[Token(Token = "0x6000F30")]
	[Address(RVA = "0x3EEEAC", Offset = "0x3EEEAC", VA = "0x3EEEAC")]
	public static void DrawLineHandles(Transform[] line, Color color)
	{
	}

	[Token(Token = "0x6000F31")]
	[Address(RVA = "0x3EF054", Offset = "0x3EF054", VA = "0x3EF054")]
	public static Vector3 PointOnPath(Vector3[] path, float percent)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000F32")]
	[Address(RVA = "0x3EF0F8", Offset = "0x3EF0F8", VA = "0x3EF0F8")]
	public static void DrawPath(Vector3[] path)
	{
	}

	[Token(Token = "0x6000F33")]
	[Address(RVA = "0x3EF4E4", Offset = "0x3EF4E4", VA = "0x3EF4E4")]
	public static void DrawPath(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x6000F34")]
	[Address(RVA = "0x3EF5B4", Offset = "0x3EF5B4", VA = "0x3EF5B4")]
	public static void DrawPath(Transform[] path)
	{
	}

	[Token(Token = "0x6000F35")]
	[Address(RVA = "0x3EF790", Offset = "0x3EF790", VA = "0x3EF790")]
	public static void DrawPath(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x6000F36")]
	[Address(RVA = "0x3EF938", Offset = "0x3EF938", VA = "0x3EF938")]
	public static void DrawPathGizmos(Vector3[] path)
	{
	}

	[Token(Token = "0x6000F37")]
	[Address(RVA = "0x3EFA4C", Offset = "0x3EFA4C", VA = "0x3EFA4C")]
	public static void DrawPathGizmos(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x6000F38")]
	[Address(RVA = "0x3EFB1C", Offset = "0x3EFB1C", VA = "0x3EFB1C")]
	public static void DrawPathGizmos(Transform[] path)
	{
	}

	[Token(Token = "0x6000F39")]
	[Address(RVA = "0x3EFCF8", Offset = "0x3EFCF8", VA = "0x3EFCF8")]
	public static void DrawPathGizmos(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x6000F3A")]
	[Address(RVA = "0x3EFEA0", Offset = "0x3EFEA0", VA = "0x3EFEA0")]
	public static void DrawPathHandles(Vector3[] path)
	{
	}

	[Token(Token = "0x6000F3B")]
	[Address(RVA = "0x3EFFB4", Offset = "0x3EFFB4", VA = "0x3EFFB4")]
	public static void DrawPathHandles(Vector3[] path, Color color)
	{
	}

	[Token(Token = "0x6000F3C")]
	[Address(RVA = "0x3F0084", Offset = "0x3F0084", VA = "0x3F0084")]
	public static void DrawPathHandles(Transform[] path)
	{
	}

	[Token(Token = "0x6000F3D")]
	[Address(RVA = "0x3F0260", Offset = "0x3F0260", VA = "0x3F0260")]
	public static void DrawPathHandles(Transform[] path, Color color)
	{
	}

	[Token(Token = "0x6000F3E")]
	[Address(RVA = "0x3F0408", Offset = "0x3F0408", VA = "0x3F0408")]
	public static void Resume(GameObject target)
	{
	}

	[Token(Token = "0x6000F3F")]
	[Address(RVA = "0x3F04DC", Offset = "0x3F04DC", VA = "0x3F04DC")]
	public static void Resume(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x6000F40")]
	[Address(RVA = "0x3F0878", Offset = "0x3F0878", VA = "0x3F0878")]
	public static void Resume(GameObject target, string type)
	{
	}

	[Token(Token = "0x6000F41")]
	[Address(RVA = "0x3F0A58", Offset = "0x3F0A58", VA = "0x3F0A58")]
	public static void Resume(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x6000F42")]
	[Address(RVA = "0x3F0F64", Offset = "0x3F0F64", VA = "0x3F0F64")]
	public static void Resume()
	{
	}

	[Token(Token = "0x6000F43")]
	[Address(RVA = "0x3F1154", Offset = "0x3F1154", VA = "0x3F1154")]
	public static void Resume(string type)
	{
	}

	[Token(Token = "0x6000F44")]
	[Address(RVA = "0x3F14B4", Offset = "0x3F14B4", VA = "0x3F14B4")]
	public static void Pause(GameObject target)
	{
	}

	[Token(Token = "0x6000F45")]
	[Address(RVA = "0x3F15E4", Offset = "0x3F15E4", VA = "0x3F15E4")]
	public static void Pause(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x6000F46")]
	[Address(RVA = "0x3F1980", Offset = "0x3F1980", VA = "0x3F1980")]
	public static void Pause(GameObject target, string type)
	{
	}

	[Token(Token = "0x6000F47")]
	[Address(RVA = "0x3F1BCC", Offset = "0x3F1BCC", VA = "0x3F1BCC")]
	public static void Pause(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x6000F48")]
	[Address(RVA = "0x3F2144", Offset = "0x3F2144", VA = "0x3F2144")]
	public static void Pause()
	{
	}

	[Token(Token = "0x6000F49")]
	[Address(RVA = "0x3F2334", Offset = "0x3F2334", VA = "0x3F2334")]
	public static void Pause(string type)
	{
	}

	[Token(Token = "0x6000F4A")]
	[Address(RVA = "0x3F2694", Offset = "0x3F2694", VA = "0x3F2694")]
	public static int Count()
	{
		return default(int);
	}

	[Token(Token = "0x6000F4B")]
	[Address(RVA = "0x3F2744", Offset = "0x3F2744", VA = "0x3F2744")]
	public static int Count(string type)
	{
		return default(int);
	}

	[Token(Token = "0x6000F4C")]
	[Address(RVA = "0x3F2AD0", Offset = "0x3F2AD0", VA = "0x3F2AD0")]
	public static int Count(GameObject target)
	{
		return default(int);
	}

	[Token(Token = "0x6000F4D")]
	[Address(RVA = "0x3F2B54", Offset = "0x3F2B54", VA = "0x3F2B54")]
	public static int Count(GameObject target, string type)
	{
		return default(int);
	}

	[Token(Token = "0x6000F4E")]
	[Address(RVA = "0x3F2D20", Offset = "0x3F2D20", VA = "0x3F2D20")]
	public static void Stop()
	{
	}

	[Token(Token = "0x6000F4F")]
	[Address(RVA = "0x3F3040", Offset = "0x3F3040", VA = "0x3F3040")]
	public static void Stop(string type)
	{
	}

	[Token(Token = "0x6000F50")]
	[Address(RVA = "0x3F3578", Offset = "0x3F3578", VA = "0x3F3578")]
	public static void StopByName(string name)
	{
	}

	[Token(Token = "0x6000F51")]
	[Address(RVA = "0x3F2F74", Offset = "0x3F2F74", VA = "0x3F2F74")]
	public static void Stop(GameObject target)
	{
	}

	[Token(Token = "0x6000F52")]
	[Address(RVA = "0x3F3A50", Offset = "0x3F3A50", VA = "0x3F3A50")]
	public static void Stop(GameObject target, bool includechildren)
	{
	}

	[Token(Token = "0x6000F53")]
	[Address(RVA = "0x3F33A0", Offset = "0x3F33A0", VA = "0x3F33A0")]
	public static void Stop(GameObject target, string type)
	{
	}

	[Token(Token = "0x6000F54")]
	[Address(RVA = "0x3F38D8", Offset = "0x3F38D8", VA = "0x3F38D8")]
	public static void StopByName(GameObject target, string name)
	{
	}

	[Token(Token = "0x6000F55")]
	[Address(RVA = "0x3F3DEC", Offset = "0x3F3DEC", VA = "0x3F3DEC")]
	public static void Stop(GameObject target, string type, bool includechildren)
	{
	}

	[Token(Token = "0x6000F56")]
	[Address(RVA = "0x3F42F0", Offset = "0x3F42F0", VA = "0x3F42F0")]
	public static void StopByName(GameObject target, string name, bool includechildren)
	{
	}

	[Token(Token = "0x6000F57")]
	[Address(RVA = "0x3C4264", Offset = "0x3C4264", VA = "0x3C4264")]
	public static Hashtable Hash(params object[] args)
	{
		return null;
	}

	[Token(Token = "0x6000F58")]
	[Address(RVA = "0x3F474C", Offset = "0x3F474C", VA = "0x3F474C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F59")]
	[Address(RVA = "0x3F6328", Offset = "0x3F6328", VA = "0x3F6328")]
	[DebuggerHidden]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000F5A")]
	[Address(RVA = "0x3F63A8", Offset = "0x3F63A8", VA = "0x3F63A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F5B")]
	[Address(RVA = "0x3F6400", Offset = "0x3F6400", VA = "0x3F6400")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000F5C")]
	[Address(RVA = "0x3F6454", Offset = "0x3F6454", VA = "0x3F6454")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000F5D")]
	[Address(RVA = "0x3F6640", Offset = "0x3F6640", VA = "0x3F6640")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000F5E")]
	[Address(RVA = "0x3F66DC", Offset = "0x3F66DC", VA = "0x3F66DC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000F5F")]
	[Address(RVA = "0x3EDEE8", Offset = "0x3EDEE8", VA = "0x3EDEE8")]
	private static void DrawLineHelper(Vector3[] line, Color color, string method)
	{
	}

	[Token(Token = "0x6000F60")]
	[Address(RVA = "0x3EF20C", Offset = "0x3EF20C", VA = "0x3EF20C")]
	private static void DrawPathHelper(Vector3[] path, Color color, string method)
	{
	}

	[Token(Token = "0x6000F61")]
	[Address(RVA = "0x3ECB54", Offset = "0x3ECB54", VA = "0x3ECB54")]
	private static Vector3[] PathControlPointGenerator(Vector3[] path)
	{
		return null;
	}

	[Token(Token = "0x6000F62")]
	[Address(RVA = "0x3ED010", Offset = "0x3ED010", VA = "0x3ED010")]
	private static Vector3 Interp(Vector3[] pts, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000F63")]
	[Address(RVA = "0x3C744C", Offset = "0x3C744C", VA = "0x3C744C")]
	private static void Launch(GameObject target, Hashtable args)
	{
	}

	[Token(Token = "0x6000F64")]
	[Address(RVA = "0x3C66FC", Offset = "0x3C66FC", VA = "0x3C66FC")]
	private static Hashtable CleanArgs(Hashtable args)
	{
		return null;
	}

	[Token(Token = "0x6000F65")]
	[Address(RVA = "0x3F66E0", Offset = "0x3F66E0", VA = "0x3F66E0")]
	private static string GenerateID()
	{
		return null;
	}

	[Token(Token = "0x6000F66")]
	[Address(RVA = "0x3F4780", Offset = "0x3F4780", VA = "0x3F4780")]
	private void RetrieveArgs()
	{
	}

	[Token(Token = "0x6000F67")]
	[Address(RVA = "0x3F679C", Offset = "0x3F679C", VA = "0x3F679C")]
	private void GetEasingFunction()
	{
	}

	[Token(Token = "0x6000F68")]
	[Address(RVA = "0x3E5964", Offset = "0x3E5964", VA = "0x3E5964")]
	private void UpdatePercentage()
	{
	}

	[Token(Token = "0x6000F69")]
	[Address(RVA = "0x3E4BF4", Offset = "0x3E4BF4", VA = "0x3E4BF4")]
	private void CallBack(string callbackType)
	{
	}

	[Token(Token = "0x6000F6A")]
	[Address(RVA = "0x3DD964", Offset = "0x3DD964", VA = "0x3DD964")]
	private void Dispose()
	{
	}

	[Token(Token = "0x6000F6B")]
	[Address(RVA = "0x3E5080", Offset = "0x3E5080", VA = "0x3E5080")]
	private void ConflictCheck()
	{
	}

	[Token(Token = "0x6000F6C")]
	[Address(RVA = "0x3E5858", Offset = "0x3E5858", VA = "0x3E5858")]
	private void EnableKinematic()
	{
	}

	[Token(Token = "0x6000F6D")]
	[Address(RVA = "0x3E5C00", Offset = "0x3E5C00", VA = "0x3E5C00")]
	private void DisableKinematic()
	{
	}

	[Token(Token = "0x6000F6E")]
	[Address(RVA = "0x3F6674", Offset = "0x3F6674", VA = "0x3F6674")]
	private void ResumeDelay()
	{
	}

	[Token(Token = "0x6000F6F")]
	[Address(RVA = "0x3F6C2C", Offset = "0x3F6C2C", VA = "0x3F6C2C")]
	private float linear(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F70")]
	[Address(RVA = "0x3DDC5C", Offset = "0x3DDC5C", VA = "0x3DDC5C")]
	private float clerp(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F71")]
	[Address(RVA = "0x3F6CD0", Offset = "0x3F6CD0", VA = "0x3F6CD0")]
	private float spring(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F72")]
	[Address(RVA = "0x3F6E00", Offset = "0x3F6E00", VA = "0x3F6E00")]
	private float easeInQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F73")]
	[Address(RVA = "0x3F6E24", Offset = "0x3F6E24", VA = "0x3F6E24")]
	private float easeOutQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F74")]
	[Address(RVA = "0x3F6E54", Offset = "0x3F6E54", VA = "0x3F6E54")]
	private float easeInOutQuad(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F75")]
	[Address(RVA = "0x3F6ED0", Offset = "0x3F6ED0", VA = "0x3F6ED0")]
	private float easeInCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F76")]
	[Address(RVA = "0x3F6EF8", Offset = "0x3F6EF8", VA = "0x3F6EF8")]
	private float easeOutCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F77")]
	[Address(RVA = "0x3F6F38", Offset = "0x3F6F38", VA = "0x3F6F38")]
	private float easeInOutCubic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F78")]
	[Address(RVA = "0x3F6FB4", Offset = "0x3F6FB4", VA = "0x3F6FB4")]
	private float easeInQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F79")]
	[Address(RVA = "0x3F6FE0", Offset = "0x3F6FE0", VA = "0x3F6FE0")]
	private float easeOutQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F7A")]
	[Address(RVA = "0x3F701C", Offset = "0x3F701C", VA = "0x3F701C")]
	private float easeInOutQuart(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F7B")]
	[Address(RVA = "0x3F709C", Offset = "0x3F709C", VA = "0x3F709C")]
	private float easeInQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F7C")]
	[Address(RVA = "0x3F70CC", Offset = "0x3F70CC", VA = "0x3F70CC")]
	private float easeOutQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F7D")]
	[Address(RVA = "0x3F7114", Offset = "0x3F7114", VA = "0x3F7114")]
	private float easeInOutQuint(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F7E")]
	[Address(RVA = "0x3F71A0", Offset = "0x3F71A0", VA = "0x3F71A0")]
	private float easeInSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F7F")]
	[Address(RVA = "0x3F7258", Offset = "0x3F7258", VA = "0x3F7258")]
	private float easeOutSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F80")]
	[Address(RVA = "0x3F730C", Offset = "0x3F730C", VA = "0x3F730C")]
	private float easeInOutSine(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F81")]
	[Address(RVA = "0x3F73D8", Offset = "0x3F73D8", VA = "0x3F73D8")]
	private float easeInExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F82")]
	[Address(RVA = "0x3F7498", Offset = "0x3F7498", VA = "0x3F7498")]
	private float easeOutExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F83")]
	[Address(RVA = "0x3F7558", Offset = "0x3F7558", VA = "0x3F7558")]
	private float easeInOutExpo(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F84")]
	[Address(RVA = "0x3F769C", Offset = "0x3F769C", VA = "0x3F769C")]
	private float easeInCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F85")]
	[Address(RVA = "0x3F7778", Offset = "0x3F7778", VA = "0x3F7778")]
	private float easeOutCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F86")]
	[Address(RVA = "0x3F7850", Offset = "0x3F7850", VA = "0x3F7850")]
	private float easeInOutCirc(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F87")]
	[Address(RVA = "0x3F79AC", Offset = "0x3F79AC", VA = "0x3F79AC")]
	private float easeInBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F88")]
	[Address(RVA = "0x3F7A08", Offset = "0x3F7A08", VA = "0x3F7A08")]
	private float easeOutBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F89")]
	[Address(RVA = "0x3F7AEC", Offset = "0x3F7AEC", VA = "0x3F7AEC")]
	private float easeInOutBounce(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F8A")]
	[Address(RVA = "0x3F7B9C", Offset = "0x3F7B9C", VA = "0x3F7B9C")]
	private float easeInBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F8B")]
	[Address(RVA = "0x3F7BDC", Offset = "0x3F7BDC", VA = "0x3F7BDC")]
	private float easeOutBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F8C")]
	[Address(RVA = "0x3F7C34", Offset = "0x3F7C34", VA = "0x3F7C34")]
	private float easeInOutBack(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F8D")]
	[Address(RVA = "0x3E3A90", Offset = "0x3E3A90", VA = "0x3E3A90")]
	private float punch(float amplitude, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F8E")]
	[Address(RVA = "0x3F7CD8", Offset = "0x3F7CD8", VA = "0x3F7CD8")]
	private float easeInElastic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F8F")]
	[Address(RVA = "0x3F7DFC", Offset = "0x3F7DFC", VA = "0x3F7DFC")]
	private float easeOutElastic(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000F90")]
	[Address(RVA = "0x3F7F18", Offset = "0x3F7F18", VA = "0x3F7F18")]
	private float easeInOutElastic(float start, float end, float value)
	{
		return default(float);
	}
}
[Token(Token = "0x20001EA")]
public class MoveSample : MonoBehaviour
{
	[Token(Token = "0x6000F9D")]
	[Address(RVA = "0x1978264", Offset = "0x1978264", VA = "0x1978264")]
	public MoveSample()
	{
	}

	[Token(Token = "0x6000F9E")]
	[Address(RVA = "0x197826C", Offset = "0x197826C", VA = "0x197826C")]
	private void Start()
	{
	}
}
[Token(Token = "0x20001EB")]
public class RotateSample : MonoBehaviour
{
	[Token(Token = "0x6000F9F")]
	[Address(RVA = "0x1B4043C", Offset = "0x1B4043C", VA = "0x1B4043C")]
	public RotateSample()
	{
	}

	[Token(Token = "0x6000FA0")]
	[Address(RVA = "0x1B40444", Offset = "0x1B40444", VA = "0x1B40444")]
	private void Start()
	{
	}
}
[Token(Token = "0x20001EC")]
public class SampleInfo : MonoBehaviour
{
	[Token(Token = "0x6000FA1")]
	[Address(RVA = "0x6201B8", Offset = "0x6201B8", VA = "0x6201B8")]
	public SampleInfo()
	{
	}

	[Token(Token = "0x6000FA2")]
	[Address(RVA = "0x6201C0", Offset = "0x6201C0", VA = "0x6201C0")]
	private void OnGUI()
	{
	}
}
[Token(Token = "0x20001ED")]
public class MemoryUsageWrapper
{
	[Token(Token = "0x6000FA3")]
	[Address(RVA = "0x1974D74", Offset = "0x1974D74", VA = "0x1974D74")]
	public MemoryUsageWrapper()
	{
	}

	[Token(Token = "0x6000FA4")]
	[Address(RVA = "0x1974D7C", Offset = "0x1974D7C", VA = "0x1974D7C")]
	public static long GetUsedMemory(out string units, out long rawBytes)
	{
		return default(long);
	}

	[Token(Token = "0x6000FA5")]
	[Address(RVA = "0x19750E0", Offset = "0x19750E0", VA = "0x19750E0")]
	public static long GetFreeDiskSpace(out string units, out long rawBytes)
	{
		return default(long);
	}

	[Token(Token = "0x6000FA6")]
	[Address(RVA = "0x1974E20", Offset = "0x1974E20", VA = "0x1974E20")]
	public static long OptimizeUnits(long bytes, out string units)
	{
		return default(long);
	}
}
namespace ObbUtil
{
	[Token(Token = "0x20001EE")]
	public class ObbMounter : MonoBehaviour
	{
		[Token(Token = "0x20001EF")]
		public delegate void OnObbStateChanged(string path, int state);

		[Token(Token = "0x4000B25")]
		public const int ERROR_ALREADY_MOUNTED = 24;

		[Token(Token = "0x4000B26")]
		public const int ERROR_COULD_NOT_MOUNT = 21;

		[Token(Token = "0x4000B27")]
		public const int ERROR_COULD_NOT_UNMOUNT = 22;

		[Token(Token = "0x4000B28")]
		public const int ERROR_INTERNAL = 20;

		[Token(Token = "0x4000B29")]
		public const int ERROR_NOT_MOUNTED = 23;

		[Token(Token = "0x4000B2A")]
		public const int ERROR_PERMISSION_DENIED = 25;

		[Token(Token = "0x4000B2B")]
		public const int MOUNTED = 1;

		[Token(Token = "0x4000B2C")]
		public const int UNMOUNTED = 2;

		[Token(Token = "0x4000B2D")]
		public const char ARGS_DELIMITER = ',';

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ObbMounter _instance;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private List<ObbProxy> obbProxies;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AndroidJavaObject obbMounting;

		[Token(Token = "0x170000F7")]
		public static ObbMounter Instance
		{
			[Token(Token = "0x6000FA8")]
			[Address(RVA = "0x1B15DE0", Offset = "0x1B15DE0", VA = "0x1B15DE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0x1B15D54", Offset = "0x1B15D54", VA = "0x1B15D54")]
		public ObbMounter()
		{
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0x1B15F4C", Offset = "0x1B15F4C", VA = "0x1B15F4C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0x1B161DC", Offset = "0x1B161DC", VA = "0x1B161DC")]
		public bool MountObb(string rawPath, string key, OnObbStateChanged callback)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x1B166DC", Offset = "0x1B166DC", VA = "0x1B166DC")]
		public bool UnmountObb(string rawPath, bool force, OnObbStateChanged callback)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x1B16948", Offset = "0x1B16948", VA = "0x1B16948")]
		public bool IsObbMounted(string rawPath)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x1B16A94", Offset = "0x1B16A94", VA = "0x1B16A94")]
		public string GetMountedObbPath(string rawPath)
		{
			return null;
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0x1B16BE0", Offset = "0x1B16BE0", VA = "0x1B16BE0")]
		public string GetDebugInfo()
		{
			return null;
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0x1B16404", Offset = "0x1B16404", VA = "0x1B16404")]
		private ObbProxy GetNextProxy(OnObbStateChanged callback)
		{
			return null;
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x1B16F70", Offset = "0x1B16F70", VA = "0x1B16F70")]
		private void OnDestroy()
		{
		}
	}
	[Token(Token = "0x20001F0")]
	public class ObbProxy : MonoBehaviour
	{
		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ObbMounter.OnObbStateChanged callback;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool inUse;

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0x1B174D0", Offset = "0x1B174D0", VA = "0x1B174D0")]
		public ObbProxy()
		{
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0x1B174E0", Offset = "0x1B174E0", VA = "0x1B174E0")]
		public void OnObbStateChangeHandler(string delimString)
		{
		}
	}
}
[Token(Token = "0x20001F1")]
public static class PoolManager
{
	[Token(Token = "0x4000B33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly SpawnPoolsDict Pools;
}
[Token(Token = "0x20001F2")]
public static class PoolManagerUtils
{
	[Token(Token = "0x6000FB8")]
	[Address(RVA = "0x1B1D120", Offset = "0x1B1D120", VA = "0x1B1D120")]
	internal static void SetActive(GameObject obj, bool state)
	{
	}

	[Token(Token = "0x6000FB9")]
	[Address(RVA = "0x1B1D150", Offset = "0x1B1D150", VA = "0x1B1D150")]
	internal static bool activeInHierarchy(GameObject obj)
	{
		return default(bool);
	}
}
[Token(Token = "0x20001F3")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xE9E608", Offset = "0xE9E608")]
public class SpawnPoolsDict : IDictionary<string, SpawnPool>, IEnumerable, ICollection<KeyValuePair<string, SpawnPool>>, IEnumerable<KeyValuePair<string, SpawnPool>>
{
	[Token(Token = "0x4000B34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Dictionary<string, SpawnPool> _pools;

	[Token(Token = "0x170000F8")]
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,SpawnPool>>.IsReadOnly
	{
		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x6A5B84", Offset = "0x6A5B84", VA = "0x6A5B84", Slot = "14")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000F9")]
	public int Count
	{
		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x6A566C", Offset = "0x6A566C", VA = "0x6A566C", Slot = "13")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000FA")]
	public SpawnPool Item
	{
		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x6A57FC", Offset = "0x6A57FC", VA = "0x6A57FC", Slot = "8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x6A59B4", Offset = "0x6A59B4", VA = "0x6A59B4", Slot = "9")]
		set
		{
		}
	}

	[Token(Token = "0x170000FB")]
	public ICollection<string> Keys
	{
		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x6A5A4C", Offset = "0x6A5A4C", VA = "0x6A5A4C", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000FC")]
	public ICollection<SpawnPool> Values
	{
		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x6A5AE4", Offset = "0x6A5AE4", VA = "0x6A5AE4", Slot = "11")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000FD")]
	private bool IsReadOnly
	{
		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x6A5B7C", Offset = "0x6A5B7C", VA = "0x6A5B7C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000FBA")]
	[Address(RVA = "0x6A4B20", Offset = "0x6A4B20", VA = "0x6A4B20")]
	public SpawnPoolsDict()
	{
	}

	[Token(Token = "0x6000FBB")]
	[Address(RVA = "0x6A4BAC", Offset = "0x6A4BAC", VA = "0x6A4BAC")]
	public SpawnPool Create(string poolName)
	{
		return null;
	}

	[Token(Token = "0x6000FBC")]
	[Address(RVA = "0x6A4C90", Offset = "0x6A4C90", VA = "0x6A4C90")]
	public SpawnPool Create(string poolName, GameObject owner)
	{
		return null;
	}

	[Token(Token = "0x6000FBD")]
	[Address(RVA = "0x6A4E08", Offset = "0x6A4E08", VA = "0x6A4E08")]
	private bool assertValidPoolName(string poolName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FBE")]
	[Address(RVA = "0x6A50B4", Offset = "0x6A50B4", VA = "0x6A50B4", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000FBF")]
	[Address(RVA = "0x6A5218", Offset = "0x6A5218", VA = "0x6A5218")]
	public bool Destroy(string poolName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FC0")]
	[Address(RVA = "0x6A53A8", Offset = "0x6A53A8", VA = "0x6A53A8")]
	public void DestroyAll()
	{
	}

	[Token(Token = "0x6000FC1")]
	[Address(RVA = "0x6A0DD8", Offset = "0x6A0DD8", VA = "0x6A0DD8")]
	internal void Add(SpawnPool spawnPool)
	{
	}

	[Token(Token = "0x6000FC2")]
	[Address(RVA = "0x6A553C", Offset = "0x6A553C", VA = "0x6A553C", Slot = "4")]
	public void Add(string key, SpawnPool value)
	{
	}

	[Token(Token = "0x6000FC3")]
	[Address(RVA = "0x6A11C0", Offset = "0x6A11C0", VA = "0x6A11C0")]
	internal bool Remove(SpawnPool spawnPool)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FC4")]
	[Address(RVA = "0x6A55D4", Offset = "0x6A55D4", VA = "0x6A55D4", Slot = "6")]
	public bool Remove(string poolName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FC6")]
	[Address(RVA = "0x6A5038", Offset = "0x6A5038", VA = "0x6A5038", Slot = "5")]
	public bool ContainsKey(string poolName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FC7")]
	[Address(RVA = "0x6A56E0", Offset = "0x6A56E0", VA = "0x6A56E0", Slot = "7")]
	public bool TryGetValue(string poolName, out SpawnPool spawnPool)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FC8")]
	[Address(RVA = "0x6A5764", Offset = "0x6A5764", VA = "0x6A5764", Slot = "17")]
	public bool Contains(KeyValuePair<string, SpawnPool> item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FCF")]
	[Address(RVA = "0x6A5B8C", Offset = "0x6A5B8C", VA = "0x6A5B8C", Slot = "15")]
	public void Add(KeyValuePair<string, SpawnPool> item)
	{
	}

	[Token(Token = "0x6000FD0")]
	[Address(RVA = "0x6A5C24", Offset = "0x6A5C24", VA = "0x6A5C24", Slot = "16")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000FD1")]
	[Address(RVA = "0x6A5CBC", Offset = "0x6A5CBC", VA = "0x6A5CBC")]
	private void CopyTo(KeyValuePair<string, SpawnPool>[] array, int arrayIndex)
	{
	}

	[Token(Token = "0x6000FD2")]
	[Address(RVA = "0x6A5D54", Offset = "0x6A5D54", VA = "0x6A5D54", Slot = "18")]
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,SpawnPool>>.CopyTo(KeyValuePair<string, SpawnPool>[] array, int arrayIndex)
	{
	}

	[Token(Token = "0x6000FD3")]
	[Address(RVA = "0x6A5DEC", Offset = "0x6A5DEC", VA = "0x6A5DEC", Slot = "19")]
	public bool Remove(KeyValuePair<string, SpawnPool> item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FD4")]
	[Address(RVA = "0x6A5E84", Offset = "0x6A5E84", VA = "0x6A5E84", Slot = "20")]
	public IEnumerator<KeyValuePair<string, SpawnPool>> GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6000FD5")]
	[Address(RVA = "0x6A5F2C", Offset = "0x6A5F2C", VA = "0x6A5F2C", Slot = "12")]
	private IEnumerator System.Collections.IEnumerable.GetEnumerator()
	{
		return null;
	}
}
[Token(Token = "0x20001F4")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9E63C", Offset = "0xE9E63C")]
public class PreRuntimePoolItem : MonoBehaviour
{
	[Token(Token = "0x4000B35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string poolName;

	[Token(Token = "0x4000B36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string prefabName;

	[Token(Token = "0x4000B37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool despawnOnStart;

	[Token(Token = "0x4000B38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool doNotReparent;

	[Token(Token = "0x6000FD6")]
	[Address(RVA = "0x1B21108", Offset = "0x1B21108", VA = "0x1B21108")]
	public PreRuntimePoolItem()
	{
	}

	[Token(Token = "0x6000FD7")]
	[Address(RVA = "0x1B211CC", Offset = "0x1B211CC", VA = "0x1B211CC")]
	private void Start()
	{
	}
}
[Token(Token = "0x20001F5")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xE9E670", Offset = "0xE9E670")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xE9E670", Offset = "0xE9E670")]
public sealed class SpawnPool : MonoBehaviour, IList<Transform>, IEnumerable, ICollection<Transform>, IEnumerable<Transform>
{
	[Token(Token = "0x200052A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E784", Offset = "0xE9E784")]
	private sealed class <DoDespawnAfterSeconds>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float seconds;

		[Token(Token = "0x4001A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal Transform instance;

		[Token(Token = "0x4001A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal SpawnPool $this;

		[Token(Token = "0x4001A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x4001A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4001A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x170002A8")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600242E")]
			[Address(RVA = "0x6A3DFC", Offset = "0x6A3DFC", VA = "0x6A3DFC", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002A9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600242F")]
			[Address(RVA = "0x6A3E04", Offset = "0x6A3E04", VA = "0x6A3E04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600242C")]
		[Address(RVA = "0x6A2F5C", Offset = "0x6A2F5C", VA = "0x6A2F5C")]
		[DebuggerHidden]
		public <DoDespawnAfterSeconds>c__Iterator1()
		{
		}

		[Token(Token = "0x600242D")]
		[Address(RVA = "0x6A3D0C", Offset = "0x6A3D0C", VA = "0x6A3D0C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002430")]
		[Address(RVA = "0x6A3E0C", Offset = "0x6A3E0C", VA = "0x6A3E0C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002431")]
		[Address(RVA = "0x6A3E20", Offset = "0x6A3E20", VA = "0x6A3E20", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200052B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E7E4", Offset = "0xE9E7E4")]
	private sealed class <ListenForEmitDespawn>c__Iterator2 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <safetimer>__0;

		[Token(Token = "0x4001A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal ParticleEmitter emitter;

		[Token(Token = "0x4001A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal SpawnPool $this;

		[Token(Token = "0x4001A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x4001A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4001A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x170002AA")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002434")]
			[Address(RVA = "0x6A4418", Offset = "0x6A4418", VA = "0x6A4418", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002435")]
			[Address(RVA = "0x6A4420", Offset = "0x6A4420", VA = "0x6A4420", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002432")]
		[Address(RVA = "0x6A3420", Offset = "0x6A3420", VA = "0x6A3420")]
		[DebuggerHidden]
		public <ListenForEmitDespawn>c__Iterator2()
		{
		}

		[Token(Token = "0x6002433")]
		[Address(RVA = "0x6A414C", Offset = "0x6A414C", VA = "0x6A414C", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002436")]
		[Address(RVA = "0x6A4428", Offset = "0x6A4428", VA = "0x6A4428", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002437")]
		[Address(RVA = "0x6A443C", Offset = "0x6A443C", VA = "0x6A443C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200052C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E844", Offset = "0xE9E844")]
	private sealed class <ListenForEmitDespawn>c__Iterator3 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal ParticleSystem emitter;

		[Token(Token = "0x4001A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal float <safetimer>__0;

		[Token(Token = "0x4001A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal SpawnPool $this;

		[Token(Token = "0x4001A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal object $current;

		[Token(Token = "0x4001A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool $disposing;

		[Token(Token = "0x4001A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int $PC;

		[Token(Token = "0x170002AC")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600243A")]
			[Address(RVA = "0x6A47D0", Offset = "0x6A47D0", VA = "0x6A47D0", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600243B")]
			[Address(RVA = "0x6A47D8", Offset = "0x6A47D8", VA = "0x6A47D8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002438")]
		[Address(RVA = "0x6A3428", Offset = "0x6A3428", VA = "0x6A3428")]
		[DebuggerHidden]
		public <ListenForEmitDespawn>c__Iterator3()
		{
		}

		[Token(Token = "0x6002439")]
		[Address(RVA = "0x6A44C0", Offset = "0x6A44C0", VA = "0x6A44C0", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600243C")]
		[Address(RVA = "0x6A47E0", Offset = "0x6A47E0", VA = "0x6A47E0", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600243D")]
		[Address(RVA = "0x6A47F4", Offset = "0x6A47F4", VA = "0x6A47F4", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200052D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E8A4", Offset = "0xE9E8A4")]
	private sealed class <GetEnumerator>c__Iterator4 : IEnumerator, IDisposable, IEnumerator<Transform>
	{
		[Token(Token = "0x4001A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal List<Transform>.Enumerator $locvar0;

		[Token(Token = "0x4001A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Transform <instance>__1;

		[Token(Token = "0x4001A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal SpawnPool $this;

		[Token(Token = "0x4001A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Transform $current;

		[Token(Token = "0x4001A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x4001A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x170002AE")]
		private Transform System.Collections.Generic.IEnumerator<UnityEngine.Transform>.Current
		{
			[Token(Token = "0x6002440")]
			[Address(RVA = "0x6A4038", Offset = "0x6A4038", VA = "0x6A4038", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002441")]
			[Address(RVA = "0x6A4040", Offset = "0x6A4040", VA = "0x6A4040", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600243E")]
		[Address(RVA = "0x6A3964", Offset = "0x6A3964", VA = "0x6A3964")]
		[DebuggerHidden]
		public <GetEnumerator>c__Iterator4()
		{
		}

		[Token(Token = "0x600243F")]
		[Address(RVA = "0x6A3EA4", Offset = "0x6A3EA4", VA = "0x6A3EA4", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002442")]
		[Address(RVA = "0x6A4048", Offset = "0x6A4048", VA = "0x6A4048", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002443")]
		[Address(RVA = "0x6A40C8", Offset = "0x6A40C8", VA = "0x6A40C8", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x200052E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E904", Offset = "0xE9E904")]
	private sealed class <System_Collections_IEnumerable_GetEnumerator>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal List<Transform>.Enumerator $locvar0;

		[Token(Token = "0x4001A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal Transform <instance>__1;

		[Token(Token = "0x4001A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal SpawnPool $this;

		[Token(Token = "0x4001A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal object $current;

		[Token(Token = "0x4001A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool $disposing;

		[Token(Token = "0x4001A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int $PC;

		[Token(Token = "0x170002B0")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002446")]
			[Address(RVA = "0x6A4A0C", Offset = "0x6A4A0C", VA = "0x6A4A0C", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002447")]
			[Address(RVA = "0x6A4A14", Offset = "0x6A4A14", VA = "0x6A4A14", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002444")]
		[Address(RVA = "0x6A39EC", Offset = "0x6A39EC", VA = "0x6A39EC")]
		[DebuggerHidden]
		public <System_Collections_IEnumerable_GetEnumerator>c__Iterator0()
		{
		}

		[Token(Token = "0x6002445")]
		[Address(RVA = "0x6A4878", Offset = "0x6A4878", VA = "0x6A4878", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002448")]
		[Address(RVA = "0x6A4A1C", Offset = "0x6A4A1C", VA = "0x6A4A1C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002449")]
		[Address(RVA = "0x6A4A9C", Offset = "0x6A4A9C", VA = "0x6A4A9C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000B39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public string poolName;

	[Token(Token = "0x4000B3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool matchPoolScale;

	[Token(Token = "0x4000B3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool matchPoolLayer;

	[Token(Token = "0x4000B3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool dontDestroyOnLoad;

	[Token(Token = "0x4000B3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
	public bool globalInstanceLimit;

	[Token(Token = "0x4000B3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int globalLimit;

	[Token(Token = "0x4000B3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool logMessages;

	[Token(Token = "0x4000B40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public List<PrefabPool> _perPrefabPoolOptions;

	[Token(Token = "0x4000B41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Dictionary<object, bool> prefabsFoldOutStates;

	[Token(Token = "0x4000B42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[HideInInspector]
	public float maxParticleDespawnTime;

	[Token(Token = "0x4000B43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E6E0", Offset = "0xE9E6E0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9E6E0", Offset = "0xE9E6E0")]
	private Transform <group>k__BackingField;

	[Token(Token = "0x4000B44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public PrefabsDict prefabs;

	[Token(Token = "0x4000B45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Dictionary<object, bool> _editorListItemStates;

	[Token(Token = "0x4000B46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private List<PrefabPool> _prefabPools;

	[Token(Token = "0x4000B47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	internal List<Transform> _spawned;

	[Token(Token = "0x170000FE")]
	public Transform group
	{
		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x6A044C", Offset = "0x6A044C", VA = "0x6A044C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E714", Offset = "0xE9E714")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x6A0454", Offset = "0x6A0454", VA = "0x6A0454")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E724", Offset = "0xE9E724")]
		private set
		{
		}
	}

	[Token(Token = "0x170000FF")]
	public Dictionary<string, PrefabPool> prefabPools
	{
		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x6A045C", Offset = "0x6A045C", VA = "0x6A045C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000100")]
	public Transform Item
	{
		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x6A3640", Offset = "0x6A3640", VA = "0x6A3640", Slot = "7")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0x6A36BC", Offset = "0x6A36BC", VA = "0x6A36BC", Slot = "8")]
		set
		{
		}
	}

	[Token(Token = "0x17000101")]
	public int Count
	{
		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0x6A3870", Offset = "0x6A3870", VA = "0x6A3870", Slot = "10")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000102")]
	public bool IsReadOnly
	{
		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0x6A3C04", Offset = "0x6A3C04", VA = "0x6A3C04", Slot = "11")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000FD8")]
	[Address(RVA = "0x6A02B0", Offset = "0x6A02B0", VA = "0x6A02B0")]
	public SpawnPool()
	{
	}

	[Token(Token = "0x6000FDC")]
	[Address(RVA = "0x6A0610", Offset = "0x6A0610", VA = "0x6A0610")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FDD")]
	[Address(RVA = "0x6A0F10", Offset = "0x6A0F10", VA = "0x6A0F10")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000FDE")]
	[Address(RVA = "0x6A0B60", Offset = "0x6A0B60", VA = "0x6A0B60")]
	public void CreatePrefabPool(PrefabPool prefabPool)
	{
	}

	[Token(Token = "0x6000FDF")]
	[Address(RVA = "0x6A1608", Offset = "0x6A1608", VA = "0x6A1608")]
	public void Add(Transform instance, string prefabName, bool despawn, bool parent)
	{
	}

	[Token(Token = "0x6000FE0")]
	[Address(RVA = "0x6A1A80", Offset = "0x6A1A80", VA = "0x6A1A80", Slot = "12")]
	public void Add(Transform item)
	{
	}

	[Token(Token = "0x6000FE1")]
	[Address(RVA = "0x6A1B18", Offset = "0x6A1B18", VA = "0x6A1B18")]
	public void Remove(Transform item)
	{
	}

	[Token(Token = "0x6000FE2")]
	[Address(RVA = "0x6A1BB0", Offset = "0x6A1BB0", VA = "0x6A1BB0")]
	public Transform Spawn(Transform prefab, Vector3 pos, Quaternion rot)
	{
		return null;
	}

	[Token(Token = "0x6000FE3")]
	[Address(RVA = "0x6A22D4", Offset = "0x6A22D4", VA = "0x6A22D4")]
	public Transform Spawn(Transform prefab)
	{
		return null;
	}

	[Token(Token = "0x6000FE4")]
	[Address(RVA = "0x6A23C8", Offset = "0x6A23C8", VA = "0x6A23C8")]
	public ParticleEmitter Spawn(ParticleEmitter prefab, Vector3 pos, Quaternion quat)
	{
		return null;
	}

	[Token(Token = "0x6000FE5")]
	[Address(RVA = "0x6A2654", Offset = "0x6A2654", VA = "0x6A2654")]
	public ParticleSystem Spawn(ParticleSystem prefab, Vector3 pos, Quaternion quat)
	{
		return null;
	}

	[Token(Token = "0x6000FE6")]
	[Address(RVA = "0x6A2834", Offset = "0x6A2834", VA = "0x6A2834")]
	public ParticleEmitter Spawn(ParticleEmitter prefab, Vector3 pos, Quaternion quat, string colorPropertyName, Color color)
	{
		return null;
	}

	[Token(Token = "0x6000FE7")]
	[Address(RVA = "0x6A2AAC", Offset = "0x6A2AAC", VA = "0x6A2AAC")]
	public void Despawn(Transform xform)
	{
	}

	[Token(Token = "0x6000FE8")]
	[Address(RVA = "0x6A2E80", Offset = "0x6A2E80", VA = "0x6A2E80")]
	public void Despawn(Transform instance, float seconds)
	{
	}

	[Token(Token = "0x6000FE9")]
	[Address(RVA = "0x6A2EA4", Offset = "0x6A2EA4", VA = "0x6A2EA4")]
	[DebuggerHidden]
	private IEnumerator DoDespawnAfterSeconds(Transform instance, float seconds)
	{
		return null;
	}

	[Token(Token = "0x6000FEA")]
	[Address(RVA = "0x6A2F64", Offset = "0x6A2F64", VA = "0x6A2F64")]
	public void DespawnAll()
	{
	}

	[Token(Token = "0x6000FEB")]
	[Address(RVA = "0x6A30C8", Offset = "0x6A30C8", VA = "0x6A30C8")]
	public bool IsSpawned(Transform instance)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FEC")]
	[Address(RVA = "0x6A1300", Offset = "0x6A1300", VA = "0x6A1300")]
	public Transform GetPrefab(Transform prefab)
	{
		return null;
	}

	[Token(Token = "0x6000FED")]
	[Address(RVA = "0x6A3144", Offset = "0x6A3144", VA = "0x6A3144")]
	public GameObject GetPrefab(GameObject prefab)
	{
		return null;
	}

	[Token(Token = "0x6000FEE")]
	[Address(RVA = "0x6A25BC", Offset = "0x6A25BC", VA = "0x6A25BC")]
	[DebuggerHidden]
	private IEnumerator ListenForEmitDespawn(ParticleEmitter emitter)
	{
		return null;
	}

	[Token(Token = "0x6000FEF")]
	[Address(RVA = "0x6A279C", Offset = "0x6A279C", VA = "0x6A279C")]
	[DebuggerHidden]
	private IEnumerator ListenForEmitDespawn(ParticleSystem emitter)
	{
		return null;
	}

	[Token(Token = "0x6000FF0")]
	[Address(RVA = "0x6A3430", Offset = "0x6A3430", VA = "0x6A3430", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000FF3")]
	[Address(RVA = "0x6A3754", Offset = "0x6A3754", VA = "0x6A3754", Slot = "14")]
	public bool Contains(Transform item)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FF4")]
	[Address(RVA = "0x6A37EC", Offset = "0x6A37EC", VA = "0x6A37EC", Slot = "15")]
	public void CopyTo(Transform[] array, int arrayIndex)
	{
	}

	[Token(Token = "0x6000FF6")]
	[Address(RVA = "0x6A38E4", Offset = "0x6A38E4", VA = "0x6A38E4", Slot = "17")]
	[DebuggerHidden]
	public IEnumerator<Transform> GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6000FF7")]
	[Address(RVA = "0x6A396C", Offset = "0x6A396C", VA = "0x6A396C", Slot = "9")]
	[DebuggerHidden]
	private IEnumerator System.Collections.IEnumerable.GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6000FF8")]
	[Address(RVA = "0x6A39F4", Offset = "0x6A39F4", VA = "0x6A39F4", Slot = "4")]
	public int IndexOf(Transform item)
	{
		return default(int);
	}

	[Token(Token = "0x6000FF9")]
	[Address(RVA = "0x6A3A78", Offset = "0x6A3A78", VA = "0x6A3A78", Slot = "5")]
	public void Insert(int index, Transform item)
	{
	}

	[Token(Token = "0x6000FFA")]
	[Address(RVA = "0x6A3AFC", Offset = "0x6A3AFC", VA = "0x6A3AFC", Slot = "6")]
	public void RemoveAt(int index)
	{
	}

	[Token(Token = "0x6000FFB")]
	[Address(RVA = "0x6A3B80", Offset = "0x6A3B80", VA = "0x6A3B80", Slot = "13")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000FFD")]
	[Address(RVA = "0x6A3C88", Offset = "0x6A3C88", VA = "0x6A3C88", Slot = "16")]
	private bool System.Collections.Generic.ICollection<UnityEngine.Transform>.Remove(Transform item)
	{
		return default(bool);
	}
}
[Serializable]
[Token(Token = "0x20001F6")]
public class PrefabPool
{
	[Token(Token = "0x200052F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E984", Offset = "0xE9E984")]
	private sealed class <CullDespawned>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal PrefabPool $this;

		[Token(Token = "0x4001A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal object $current;

		[Token(Token = "0x4001A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool $disposing;

		[Token(Token = "0x4001A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int $PC;

		[Token(Token = "0x170002B2")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600244C")]
			[Address(RVA = "0x1B1FE60", Offset = "0x1B1FE60", VA = "0x1B1FE60", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600244D")]
			[Address(RVA = "0x1B1FE68", Offset = "0x1B1FE68", VA = "0x1B1FE68", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600244A")]
		[Address(RVA = "0x1B1DCC8", Offset = "0x1B1DCC8", VA = "0x1B1DCC8")]
		[DebuggerHidden]
		public <CullDespawned>c__Iterator0()
		{
		}

		[Token(Token = "0x600244B")]
		[Address(RVA = "0x1B1F4A0", Offset = "0x1B1F4A0", VA = "0x1B1F4A0", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600244E")]
		[Address(RVA = "0x1B1FE70", Offset = "0x1B1FE70", VA = "0x1B1FE70", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600244F")]
		[Address(RVA = "0x1B1FE84", Offset = "0x1B1FE84", VA = "0x1B1FE84", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000530")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9E9E4", Offset = "0xE9E9E4")]
	private sealed class <PreloadOverTime>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal int <amount>__0;

		[Token(Token = "0x4001A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int <remainder>__0;

		[Token(Token = "0x4001A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int <numPerFrame>__0;

		[Token(Token = "0x4001A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int <i>__1;

		[Token(Token = "0x4001A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int <numThisFrame>__2;

		[Token(Token = "0x4001A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal int <n>__3;

		[Token(Token = "0x4001A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Transform <inst>__4;

		[Token(Token = "0x4001A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal PrefabPool $this;

		[Token(Token = "0x4001A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal object $current;

		[Token(Token = "0x4001A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal bool $disposing;

		[Token(Token = "0x4001A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int $PC;

		[Token(Token = "0x170002B4")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002452")]
			[Address(RVA = "0x1B201FC", Offset = "0x1B201FC", VA = "0x1B201FC", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002453")]
			[Address(RVA = "0x1B20204", Offset = "0x1B20204", VA = "0x1B20204", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002450")]
		[Address(RVA = "0x1B1F498", Offset = "0x1B1F498", VA = "0x1B1F498")]
		[DebuggerHidden]
		public <PreloadOverTime>c__Iterator1()
		{
		}

		[Token(Token = "0x6002451")]
		[Address(RVA = "0x1B1FF08", Offset = "0x1B1FF08", VA = "0x1B1FF08", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6002454")]
		[Address(RVA = "0x1B2020C", Offset = "0x1B2020C", VA = "0x1B2020C", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x6002455")]
		[Address(RVA = "0x1B20220", Offset = "0x1B20220", VA = "0x1B20220", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4000B48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Transform prefab;

	[Token(Token = "0x4000B49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	internal GameObject prefabGO;

	[Token(Token = "0x4000B4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int preloadAmount;

	[Token(Token = "0x4000B4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool preloadTime;

	[Token(Token = "0x4000B4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int preloadFrames;

	[Token(Token = "0x4000B4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float preloadDelay;

	[Token(Token = "0x4000B4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool limitInstances;

	[Token(Token = "0x4000B4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int limitAmount;

	[Token(Token = "0x4000B50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool limitFIFO;

	[Token(Token = "0x4000B51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool cullDespawned;

	[Token(Token = "0x4000B52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int cullAbove;

	[Token(Token = "0x4000B53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int cullDelay;

	[Token(Token = "0x4000B54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int cullMaxPerPass;

	[Token(Token = "0x4000B55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool _logMessages;

	[Token(Token = "0x4000B56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool forceLoggingSilent;

	[Token(Token = "0x4000B57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public SpawnPool spawnPool;

	[Token(Token = "0x4000B58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool cullingActive;

	[Token(Token = "0x4000B59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	internal List<Transform> _spawned;

	[Token(Token = "0x4000B5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	internal List<Transform> _despawned;

	[Token(Token = "0x4000B5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool _preloaded;

	[Token(Token = "0x17000103")]
	public bool logMessages
	{
		[Token(Token = "0x6001000")]
		[Address(RVA = "0x1B1D33C", Offset = "0x1B1D33C", VA = "0x1B1D33C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000104")]
	public List<Transform> spawned
	{
		[Token(Token = "0x6001003")]
		[Address(RVA = "0x1B1D7FC", Offset = "0x1B1D7FC", VA = "0x1B1D7FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000105")]
	public List<Transform> despawned
	{
		[Token(Token = "0x6001004")]
		[Address(RVA = "0x1B1D884", Offset = "0x1B1D884", VA = "0x1B1D884")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000106")]
	public int totalCount
	{
		[Token(Token = "0x6001005")]
		[Address(RVA = "0x1B1D90C", Offset = "0x1B1D90C", VA = "0x1B1D90C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000107")]
	internal bool preloaded
	{
		[Token(Token = "0x6001006")]
		[Address(RVA = "0x1B1D9B0", Offset = "0x1B1D9B0", VA = "0x1B1D9B0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001007")]
		[Address(RVA = "0x1B1D9B8", Offset = "0x1B1D9B8", VA = "0x1B1D9B8")]
		private set
		{
		}
	}

	[Token(Token = "0x6000FFE")]
	[Address(RVA = "0x1B1D178", Offset = "0x1B1D178", VA = "0x1B1D178")]
	public PrefabPool(Transform prefab)
	{
	}

	[Token(Token = "0x6000FFF")]
	[Address(RVA = "0x1B1D26C", Offset = "0x1B1D26C", VA = "0x1B1D26C")]
	public PrefabPool()
	{
	}

	[Token(Token = "0x6001001")]
	[Address(RVA = "0x1B1D39C", Offset = "0x1B1D39C", VA = "0x1B1D39C")]
	internal void inspectorInstanceConstructor()
	{
	}

	[Token(Token = "0x6001002")]
	[Address(RVA = "0x1B1D454", Offset = "0x1B1D454", VA = "0x1B1D454")]
	internal void SelfDestruct()
	{
	}

	[Token(Token = "0x6001008")]
	[Address(RVA = "0x1B1D9C0", Offset = "0x1B1D9C0", VA = "0x1B1D9C0")]
	internal bool DespawnInstance(Transform xform)
	{
		return default(bool);
	}

	[Token(Token = "0x6001009")]
	[Address(RVA = "0x1B1DC48", Offset = "0x1B1DC48", VA = "0x1B1DC48")]
	[DebuggerHidden]
	internal IEnumerator CullDespawned()
	{
		return null;
	}

	[Token(Token = "0x600100A")]
	[Address(RVA = "0x1B1DCD0", Offset = "0x1B1DCD0", VA = "0x1B1DCD0")]
	internal Transform SpawnInstance(Vector3 pos, Quaternion rot)
	{
		return null;
	}

	[Token(Token = "0x600100B")]
	[Address(RVA = "0x1B1E880", Offset = "0x1B1E880", VA = "0x1B1E880")]
	public Transform SpawnNew()
	{
		return null;
	}

	[Token(Token = "0x600100C")]
	[Address(RVA = "0x1B1E2E4", Offset = "0x1B1E2E4", VA = "0x1B1E2E4")]
	public Transform SpawnNew(Vector3 pos, Quaternion rot)
	{
		return null;
	}

	[Token(Token = "0x600100D")]
	[Address(RVA = "0x1B1EA74", Offset = "0x1B1EA74", VA = "0x1B1EA74")]
	private void SetRecursively(Transform xform, int layer)
	{
	}

	[Token(Token = "0x600100E")]
	[Address(RVA = "0x1B1EDB4", Offset = "0x1B1EDB4", VA = "0x1B1EDB4")]
	internal void AddUnpooled(Transform inst, bool despawn)
	{
	}

	[Token(Token = "0x600100F")]
	[Address(RVA = "0x1B1EEA0", Offset = "0x1B1EEA0", VA = "0x1B1EEA0")]
	internal void PreloadInstances()
	{
	}

	[Token(Token = "0x6001010")]
	[Address(RVA = "0x1B1F418", Offset = "0x1B1F418", VA = "0x1B1F418")]
	[DebuggerHidden]
	private IEnumerator PreloadOverTime()
	{
		return null;
	}

	[Token(Token = "0x6001011")]
	[Address(RVA = "0x1B1E968", Offset = "0x1B1E968", VA = "0x1B1E968")]
	private void nameInstance(Transform instance)
	{
	}
}
[Token(Token = "0x20001F7")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xE9EA44", Offset = "0xE9EA44")]
public class PrefabsDict : IDictionary<string, Transform>, IEnumerable, ICollection<KeyValuePair<string, Transform>>, IEnumerable<KeyValuePair<string, Transform>>
{
	[Token(Token = "0x4000B5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Dictionary<string, Transform> _prefabs;

	[Token(Token = "0x17000108")]
	private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,UnityEngine.Transform>>.IsReadOnly
	{
		[Token(Token = "0x6001022")]
		[Address(RVA = "0x1B20CD0", Offset = "0x1B20CD0", VA = "0x1B20CD0", Slot = "14")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000109")]
	public int Count
	{
		[Token(Token = "0x6001017")]
		[Address(RVA = "0x1B20608", Offset = "0x1B20608", VA = "0x1B20608", Slot = "13")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700010A")]
	public Transform Item
	{
		[Token(Token = "0x600101D")]
		[Address(RVA = "0x1B20990", Offset = "0x1B20990", VA = "0x1B20990", Slot = "8")]
		get
		{
			return null;
		}
		[Token(Token = "0x600101E")]
		[Address(RVA = "0x1B20B48", Offset = "0x1B20B48", VA = "0x1B20B48", Slot = "9")]
		set
		{
		}
	}

	[Token(Token = "0x1700010B")]
	public ICollection<string> Keys
	{
		[Token(Token = "0x600101F")]
		[Address(RVA = "0x1B20BE0", Offset = "0x1B20BE0", VA = "0x1B20BE0", Slot = "10")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700010C")]
	public ICollection<Transform> Values
	{
		[Token(Token = "0x6001020")]
		[Address(RVA = "0x1B20C54", Offset = "0x1B20C54", VA = "0x1B20C54", Slot = "11")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700010D")]
	private bool IsReadOnly
	{
		[Token(Token = "0x6001021")]
		[Address(RVA = "0x1B20CC8", Offset = "0x1B20CC8", VA = "0x1B20CC8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001012")]
	[Address(RVA = "0x1B202A4", Offset = "0x1B202A4", VA = "0x1B202A4")]
	public PrefabsDict()
	{
	}

	[Token(Token = "0x6001013")]
	[Address(RVA = "0x1B20330", Offset = "0x1B20330", VA = "0x1B20330", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6001014")]
	[Address(RVA = "0x1B20494", Offset = "0x1B20494", VA = "0x1B20494")]
	internal void _Add(string prefabName, Transform prefab)
	{
	}

	[Token(Token = "0x6001015")]
	[Address(RVA = "0x1B20518", Offset = "0x1B20518", VA = "0x1B20518")]
	internal bool _Remove(string prefabName)
	{
		return default(bool);
	}

	[Token(Token = "0x6001016")]
	[Address(RVA = "0x1B20594", Offset = "0x1B20594", VA = "0x1B20594")]
	internal void _Clear()
	{
	}

	[Token(Token = "0x6001018")]
	[Address(RVA = "0x1B2067C", Offset = "0x1B2067C", VA = "0x1B2067C", Slot = "5")]
	public bool ContainsKey(string prefabName)
	{
		return default(bool);
	}

	[Token(Token = "0x6001019")]
	[Address(RVA = "0x1B206F8", Offset = "0x1B206F8", VA = "0x1B206F8", Slot = "7")]
	public bool TryGetValue(string prefabName, out Transform prefab)
	{
		return default(bool);
	}

	[Token(Token = "0x600101A")]
	[Address(RVA = "0x1B2077C", Offset = "0x1B2077C", VA = "0x1B2077C", Slot = "4")]
	public void Add(string key, Transform value)
	{
	}

	[Token(Token = "0x600101B")]
	[Address(RVA = "0x1B20814", Offset = "0x1B20814", VA = "0x1B20814", Slot = "6")]
	public bool Remove(string prefabName)
	{
		return default(bool);
	}

	[Token(Token = "0x600101C")]
	[Address(RVA = "0x1B208A8", Offset = "0x1B208A8", VA = "0x1B208A8", Slot = "17")]
	public bool Contains(KeyValuePair<string, Transform> item)
	{
		return default(bool);
	}

	[Token(Token = "0x6001023")]
	[Address(RVA = "0x1B20CD8", Offset = "0x1B20CD8", VA = "0x1B20CD8", Slot = "15")]
	public void Add(KeyValuePair<string, Transform> item)
	{
	}

	[Token(Token = "0x6001024")]
	[Address(RVA = "0x1B20D70", Offset = "0x1B20D70", VA = "0x1B20D70", Slot = "16")]
	public void Clear()
	{
	}

	[Token(Token = "0x6001025")]
	[Address(RVA = "0x1B20DF4", Offset = "0x1B20DF4", VA = "0x1B20DF4")]
	private void CopyTo(KeyValuePair<string, Transform>[] array, int arrayIndex)
	{
	}

	[Token(Token = "0x6001026")]
	[Address(RVA = "0x1B20E8C", Offset = "0x1B20E8C", VA = "0x1B20E8C", Slot = "18")]
	private void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string,UnityEngine.Transform>>.CopyTo(KeyValuePair<string, Transform>[] array, int arrayIndex)
	{
	}

	[Token(Token = "0x6001027")]
	[Address(RVA = "0x1B20F24", Offset = "0x1B20F24", VA = "0x1B20F24", Slot = "19")]
	public bool Remove(KeyValuePair<string, Transform> item)
	{
		return default(bool);
	}

	[Token(Token = "0x6001028")]
	[Address(RVA = "0x1B20FB8", Offset = "0x1B20FB8", VA = "0x1B20FB8", Slot = "20")]
	public IEnumerator<KeyValuePair<string, Transform>> GetEnumerator()
	{
		return null;
	}

	[Token(Token = "0x6001029")]
	[Address(RVA = "0x1B21060", Offset = "0x1B21060", VA = "0x1B21060", Slot = "12")]
	private IEnumerator System.Collections.IEnumerable.GetEnumerator()
	{
		return null;
	}
}
[Token(Token = "0x20001F8")]
public class PlaystationNetworkIABDataHolder : MonoBehaviour
{
	[Token(Token = "0x20001F9")]
	public enum Identifiers
	{
		[Token(Token = "0x4000B61")]
		MakingOfChapter1,
		[Token(Token = "0x4000B62")]
		MakingOfChapter2,
		[Token(Token = "0x4000B63")]
		MakingOfChapter3,
		[Token(Token = "0x4000B64")]
		MakingOfChapter4,
		[Token(Token = "0x4000B65")]
		MakingOfChapter5,
		[Token(Token = "0x4000B66")]
		Chapter2,
		[Token(Token = "0x4000B67")]
		Chapter3,
		[Token(Token = "0x4000B68")]
		Chapter4,
		[Token(Token = "0x4000B69")]
		Chapter5,
		[Token(Token = "0x4000B6A")]
		SeasonPass,
		[Token(Token = "0x4000B6B")]
		SeasonPassMinusOne,
		[Token(Token = "0x4000B6C")]
		SeasonPassMinusTwo
	}

	[Token(Token = "0x2000531")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9EA78", Offset = "0xE9EA78")]
	private sealed class <>c__Iterator0 : IEnumerable, IEnumerable<string>, IEnumerator, IDisposable, IEnumerator<string>
	{
		[Token(Token = "0x4001A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal IEnumerator $locvar0;

		[Token(Token = "0x4001A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int <a>__1;

		[Token(Token = "0x4001A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal IDisposable $locvar1;

		[Token(Token = "0x4001A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal PlaystationNetworkIABDataHolder $this;

		[Token(Token = "0x4001A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal string $current;

		[Token(Token = "0x4001A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal bool $disposing;

		[Token(Token = "0x4001A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int $PC;

		[Token(Token = "0x170002B6")]
		private string System.Collections.Generic.IEnumerator<string>.Current
		{
			[Token(Token = "0x6002458")]
			[Address(RVA = "0x1B1C8F8", Offset = "0x1B1C8F8", VA = "0x1B1C8F8", Slot = "10")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002459")]
			[Address(RVA = "0x1B1C900", Offset = "0x1B1C900", VA = "0x1B1C900", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002456")]
		[Address(RVA = "0x1B1C05C", Offset = "0x1B1C05C", VA = "0x1B1C05C")]
		[DebuggerHidden]
		public <>c__Iterator0()
		{
		}

		[Token(Token = "0x6002457")]
		[Address(RVA = "0x1B1C4F0", Offset = "0x1B1C4F0", VA = "0x1B1C4F0", Slot = "7")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600245A")]
		[Address(RVA = "0x1B1C908", Offset = "0x1B1C908", VA = "0x1B1C908", Slot = "9")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600245B")]
		[Address(RVA = "0x1B1CA14", Offset = "0x1B1CA14", VA = "0x1B1CA14", Slot = "8")]
		[DebuggerHidden]
		public void Reset()
		{
		}

		[Token(Token = "0x600245C")]
		[Address(RVA = "0x1B1CA98", Offset = "0x1B1CA98", VA = "0x1B1CA98", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600245D")]
		[Address(RVA = "0x1B1CA9C", Offset = "0x1B1CA9C", VA = "0x1B1CA9C", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x4000B5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PlaystationNetworkIABDataHolder _instance;

	[Token(Token = "0x4000B5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool instanceNotFound;

	[Token(Token = "0x4000B5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<string> identifiers;

	[Token(Token = "0x1700010E")]
	public static PlaystationNetworkIABDataHolder instance
	{
		[Token(Token = "0x600102B")]
		[Address(RVA = "0x1B1BBBC", Offset = "0x1B1BBBC", VA = "0x1B1BBBC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700010F")]
	public IEnumerable<string> AllProductIdentifiers
	{
		[Token(Token = "0x600102D")]
		[Address(RVA = "0x1B1BFC4", Offset = "0x1B1BFC4", VA = "0x1B1BFC4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600102A")]
	[Address(RVA = "0x1B1BB30", Offset = "0x1B1BB30", VA = "0x1B1BB30")]
	public PlaystationNetworkIABDataHolder()
	{
	}

	[Token(Token = "0x600102C")]
	[Address(RVA = "0x1B1BED0", Offset = "0x1B1BED0", VA = "0x1B1BED0")]
	public string GetProductIdentifier(Identifiers identifier)
	{
		return null;
	}

	[Token(Token = "0x600102E")]
	[Address(RVA = "0x1B1C064", Offset = "0x1B1C064", VA = "0x1B1C064")]
	public Identifiers GetIdentifierForString(string identifierString)
	{
		return default(Identifiers);
	}
}
[Token(Token = "0x20001FA")]
public class PlaystationNetworkIDsList : MonoBehaviour
{
	[Token(Token = "0x20001FB")]
	public enum LeaderboardNames
	{
		[Token(Token = "0x4000B72")]
		CompletionTime,
		[Token(Token = "0x4000B73")]
		Ep2CompletionTime,
		[Token(Token = "0x4000B74")]
		Ep3CompletionTime
	}

	[Token(Token = "0x4000B6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PlaystationNetworkIDsList _instance;

	[Token(Token = "0x4000B6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool instanceNotFound;

	[Token(Token = "0x4000B6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<string> achievementIDs;

	[Token(Token = "0x4000B70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public List<string> leaderboardIDs;

	[Token(Token = "0x17000110")]
	public static PlaystationNetworkIDsList instance
	{
		[Token(Token = "0x6001031")]
		[Address(RVA = "0x1B1CBF8", Offset = "0x1B1CBF8", VA = "0x1B1CBF8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001030")]
	[Address(RVA = "0x1B1CB54", Offset = "0x1B1CB54", VA = "0x1B1CB54")]
	public PlaystationNetworkIDsList()
	{
	}

	[Token(Token = "0x6001032")]
	[Address(RVA = "0x1B1CF14", Offset = "0x1B1CF14", VA = "0x1B1CF14")]
	public int getAchievementID(int achievementIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6001033")]
	[Address(RVA = "0x1B1CFD8", Offset = "0x1B1CFD8", VA = "0x1B1CFD8")]
	public int getLeaderboardID(LeaderboardNames leaderboardName)
	{
		return default(int);
	}
}
namespace Prime31
{
	[Token(Token = "0x20001FC")]
	public class CubeRotator : MonoBehaviour
	{
		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float speed;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform cube;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool shouldRotate;

		[Token(Token = "0x6001035")]
		[Address(RVA = "0x1B21448", Offset = "0x1B21448", VA = "0x1B21448")]
		public CubeRotator()
		{
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0x1B21464", Offset = "0x1B21464", VA = "0x1B21464")]
		private void Start()
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0x1B214CC", Offset = "0x1B214CC", VA = "0x1B214CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0x1B215B4", Offset = "0x1B215B4", VA = "0x1B215B4")]
		public void togglePauseRotation()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public class EtceteraEventListener : MonoBehaviour
	{
		[Token(Token = "0x6001039")]
		[Address(RVA = "0x1B2165C", Offset = "0x1B2165C", VA = "0x1B2165C")]
		public EtceteraEventListener()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public class EtceteraGUIManager : MonoBehaviourGUI
	{
		[Token(Token = "0x600103A")]
		[Address(RVA = "0x1B21664", Offset = "0x1B21664", VA = "0x1B21664")]
		public EtceteraGUIManager()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class EtceteraGUIManagerThree : MonoBehaviourGUI
	{
		[Token(Token = "0x600103B")]
		[Address(RVA = "0x1B2166C", Offset = "0x1B2166C", VA = "0x1B2166C")]
		public EtceteraGUIManagerThree()
		{
		}
	}
	[Token(Token = "0x2000200")]
	public class EtceteraGUIManagerTwo : MonoBehaviourGUI
	{
		[Token(Token = "0x600103C")]
		[Address(RVA = "0x1B21674", Offset = "0x1B21674", VA = "0x1B21674")]
		public EtceteraGUIManagerTwo()
		{
		}
	}
	[Token(Token = "0x2000201")]
	public class Etcetera2GUIManager : MonoBehaviourGUI
	{
		[Token(Token = "0x600103D")]
		[Address(RVA = "0x1B21654", Offset = "0x1B21654", VA = "0x1B21654")]
		public Etcetera2GUIManager()
		{
		}
	}
	[Token(Token = "0x2000202")]
	public class EtceteraTwoEventListener : MonoBehaviour
	{
		[Token(Token = "0x600103E")]
		[Address(RVA = "0x1B2167C", Offset = "0x1B2167C", VA = "0x1B2167C")]
		public EtceteraTwoEventListener()
		{
		}
	}
	[Token(Token = "0x2000203")]
	public class GameCenterEventListener : MonoBehaviour
	{
		[Token(Token = "0x600103F")]
		[Address(RVA = "0x1B21684", Offset = "0x1B21684", VA = "0x1B21684")]
		public GameCenterEventListener()
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class GameCenterGUIManager : MonoBehaviourGUI
	{
		[Token(Token = "0x6001040")]
		[Address(RVA = "0x1B2168C", Offset = "0x1B2168C", VA = "0x1B2168C")]
		public GameCenterGUIManager()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class iCloudEventListener : MonoBehaviour
	{
		[Token(Token = "0x6001041")]
		[Address(RVA = "0x1B263AC", Offset = "0x1B263AC", VA = "0x1B263AC")]
		public iCloudEventListener()
		{
		}
	}
	[Token(Token = "0x2000206")]
	public class iCloudGUIManager : MonoBehaviourGUI
	{
		[Token(Token = "0x6001042")]
		[Address(RVA = "0x1B263B4", Offset = "0x1B263B4", VA = "0x1B263B4")]
		public iCloudGUIManager()
		{
		}
	}
	[Token(Token = "0x2000207")]
	public class P31Prefs
	{
		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool shouldOnlyGetFromCloudWhenKeyExists;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static bool _iCloudDocumentStoreAvailable;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		private static bool _iCloudIsAvailable;

		[Token(Token = "0x17000111")]
		public static bool iCloudDocumentStoreAvailable
		{
			[Token(Token = "0x6001044")]
			[Address(RVA = "0x1B263C4", Offset = "0x1B263C4", VA = "0x1B263C4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000112")]
		public static bool iCloudIsAvailable
		{
			[Token(Token = "0x6001045")]
			[Address(RVA = "0x1B26450", Offset = "0x1B26450", VA = "0x1B26450")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0x1B263BC", Offset = "0x1B263BC", VA = "0x1B263BC")]
		public P31Prefs()
		{
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0x1B264DC", Offset = "0x1B264DC", VA = "0x1B264DC")]
		public static bool synchronize()
		{
			return default(bool);
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0x1B264F8", Offset = "0x1B264F8", VA = "0x1B264F8")]
		public static bool hasKey(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0x1B26504", Offset = "0x1B26504", VA = "0x1B26504")]
		public static List<object> allKeys()
		{
			return null;
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0x1B26580", Offset = "0x1B26580", VA = "0x1B26580")]
		public static void removeObjectForKey(string key)
		{
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0x1B2658C", Offset = "0x1B2658C", VA = "0x1B2658C")]
		public static void removeAll()
		{
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0x1B26598", Offset = "0x1B26598", VA = "0x1B26598")]
		public static void setInt(string key, int val)
		{
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0x1B265A4", Offset = "0x1B265A4", VA = "0x1B265A4")]
		public static int getInt(string key)
		{
			return default(int);
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0x1B265B0", Offset = "0x1B265B0", VA = "0x1B265B0")]
		public static void setFloat(string key, float val)
		{
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0x1B265BC", Offset = "0x1B265BC", VA = "0x1B265BC")]
		public static float getFloat(string key)
		{
			return default(float);
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0x1B265C8", Offset = "0x1B265C8", VA = "0x1B265C8")]
		public static void setString(string key, string val)
		{
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0x1B265D4", Offset = "0x1B265D4", VA = "0x1B265D4")]
		public static string getString(string key)
		{
			return null;
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0x1B265E0", Offset = "0x1B265E0", VA = "0x1B265E0")]
		public static void setBool(string key, bool val)
		{
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x1B265EC", Offset = "0x1B265EC", VA = "0x1B265EC")]
		public static bool getBool(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0x1B26610", Offset = "0x1B26610", VA = "0x1B26610")]
		public static void setDictionary(string key, Dictionary<string, object> val)
		{
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0x1B266B0", Offset = "0x1B266B0", VA = "0x1B266B0")]
		public static IDictionary getDictionary(string key)
		{
			return null;
		}
	}
	[Token(Token = "0x2000208")]
	public class StoreKitEventListener : MonoBehaviour
	{
		[Token(Token = "0x6001056")]
		[Address(RVA = "0x1B266E4", Offset = "0x1B266E4", VA = "0x1B266E4")]
		public StoreKitEventListener()
		{
		}
	}
	[Token(Token = "0x2000209")]
	public class StoreKitGUIManager : MonoBehaviourGUI
	{
		[Token(Token = "0x6001057")]
		[Address(RVA = "0x1B266EC", Offset = "0x1B266EC", VA = "0x1B266EC")]
		public StoreKitGUIManager()
		{
		}
	}
	[Token(Token = "0x200020A")]
	public class StoreKitAppReceipt
	{
		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int status;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string environment;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public StoreKitReceipt receipt;

		[Token(Token = "0x6001058")]
		[Address(RVA = "0x1B266DC", Offset = "0x1B266DC", VA = "0x1B266DC")]
		public StoreKitAppReceipt()
		{
		}
	}
	[Token(Token = "0x200020B")]
	public class StoreKitReceipt
	{
		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string receipt_type;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int adam_id;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int app_item_id;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public string bundle_id;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string application_version;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int download_id;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int version_external_identifier;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public string receipt_creation_date;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string receipt_creation_date_ms;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public string receipt_creation_date_pst;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string request_date;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public string request_date_ms;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string request_date_pst;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public string original_purchase_date;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string original_purchase_date_ms;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public string original_purchase_date_pst;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string original_application_version;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public List<StoreKitReceiptInAppItem> in_app;

		[Token(Token = "0x6001059")]
		[Address(RVA = "0x1B266F4", Offset = "0x1B266F4", VA = "0x1B266F4")]
		public StoreKitReceipt()
		{
		}
	}
	[Token(Token = "0x200020C")]
	public class StoreKitReceiptInAppItem
	{
		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string quantity;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string product_id;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string transaction_id;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public string original_transaction_id;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string purchase_date;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public string purchase_date_ms;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string purchase_date_pst;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public string original_purchase_date;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string original_purchase_date_ms;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public string original_purchase_date_pst;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string is_trial_period;

		[Token(Token = "0x600105A")]
		[Address(RVA = "0x1B26780", Offset = "0x1B26780", VA = "0x1B26780")]
		public StoreKitReceiptInAppItem()
		{
		}
	}
}
namespace SimpleJSON
{
	[Token(Token = "0x200020D")]
	public enum JSONBinaryTag
	{
		[Token(Token = "0x4000B9C")]
		Array = 1,
		[Token(Token = "0x4000B9D")]
		Class,
		[Token(Token = "0x4000B9E")]
		Value,
		[Token(Token = "0x4000B9F")]
		IntValue,
		[Token(Token = "0x4000BA0")]
		DoubleValue,
		[Token(Token = "0x4000BA1")]
		BoolValue,
		[Token(Token = "0x4000BA2")]
		FloatValue
	}
	[Token(Token = "0x200020E")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xE9EAF8", Offset = "0xE9EAF8")]
	public class JSONNode
	{
		[Token(Token = "0x2000532")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9EB3C", Offset = "0xE9EB3C")]
		private sealed class <>c__Iterator0 : IEnumerable, IEnumerable<JSONNode>, IEnumerator, IDisposable, IEnumerator<JSONNode>
		{
			[Token(Token = "0x4001A9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal JSONNode $current;

			[Token(Token = "0x4001AA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal bool $disposing;

			[Token(Token = "0x4001AA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int $PC;

			[Token(Token = "0x170002B8")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002460")]
				[Address(RVA = "0x68FCE0", Offset = "0x68FCE0", VA = "0x68FCE0", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002B9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002461")]
				[Address(RVA = "0x68FCE8", Offset = "0x68FCE8", VA = "0x68FCE8", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600245E")]
			[Address(RVA = "0x68E640", Offset = "0x68E640", VA = "0x68E640")]
			[DebuggerHidden]
			public <>c__Iterator0()
			{
			}

			[Token(Token = "0x600245F")]
			[Address(RVA = "0x68FCD0", Offset = "0x68FCD0", VA = "0x68FCD0", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002462")]
			[Address(RVA = "0x68FCF0", Offset = "0x68FCF0", VA = "0x68FCF0", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002463")]
			[Address(RVA = "0x68FCF4", Offset = "0x68FCF4", VA = "0x68FCF4", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x6002464")]
			[Address(RVA = "0x68FD78", Offset = "0x68FD78", VA = "0x68FD78", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002465")]
			[Address(RVA = "0x68FD7C", Offset = "0x68FD7C", VA = "0x68FD7C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000533")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9EBBC", Offset = "0xE9EBBC")]
		private sealed class <>c__Iterator1 : IEnumerable, IEnumerable<JSONNode>, IEnumerator, IDisposable, IEnumerator<JSONNode>
		{
			[Token(Token = "0x4001AA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal IEnumerator<JSONNode> $locvar0;

			[Token(Token = "0x4001AA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal JSONNode <C>__1;

			[Token(Token = "0x4001AA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal IEnumerator<JSONNode> $locvar1;

			[Token(Token = "0x4001AA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal JSONNode <D>__2;

			[Token(Token = "0x4001AA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal JSONNode $this;

			[Token(Token = "0x4001AA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal JSONNode $current;

			[Token(Token = "0x4001AA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal bool $disposing;

			[Token(Token = "0x4001AA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal int $PC;

			[Token(Token = "0x170002BA")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x6002468")]
				[Address(RVA = "0x69044C", Offset = "0x69044C", VA = "0x69044C", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002469")]
				[Address(RVA = "0x690454", Offset = "0x690454", VA = "0x690454", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002466")]
			[Address(RVA = "0x68E6E0", Offset = "0x68E6E0", VA = "0x68E6E0")]
			[DebuggerHidden]
			public <>c__Iterator1()
			{
			}

			[Token(Token = "0x6002467")]
			[Address(RVA = "0x68FE18", Offset = "0x68FE18", VA = "0x68FE18", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600246A")]
			[Address(RVA = "0x69045C", Offset = "0x69045C", VA = "0x69045C", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600246B")]
			[Address(RVA = "0x690604", Offset = "0x690604", VA = "0x690604", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x600246C")]
			[Address(RVA = "0x690688", Offset = "0x690688", VA = "0x690688", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600246D")]
			[Address(RVA = "0x69068C", Offset = "0x69068C", VA = "0x69068C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000534")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9EC3C", Offset = "0xE9EC3C")]
		private sealed class <Parse>c__AnonStorey3
		{
			[Token(Token = "0x4001AAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal JSONNode node;

			[Token(Token = "0x600246E")]
			[Address(RVA = "0x68ED2C", Offset = "0x68ED2C", VA = "0x68ED2C")]
			public <Parse>c__AnonStorey3()
			{
			}

			[Token(Token = "0x600246F")]
			[Address(RVA = "0x690744", Offset = "0x690744", VA = "0x690744")]
			internal void <>m__0(JSONNode callbackNode)
			{
			}
		}

		[Token(Token = "0x2000535")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9EC4C", Offset = "0xE9EC4C")]
		private sealed class <ParseAsynch>c__Iterator2 : IEnumerable, IEnumerable<object>, IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001AAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Stack<JSONNode> <stack>__0;

			[Token(Token = "0x4001AAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal JSONNode <ctx>__0;

			[Token(Token = "0x4001AAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int <i>__0;

			[Token(Token = "0x4001AAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal string aJSON;

			[Token(Token = "0x4001AAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal int <pauseParseStep>__0;

			[Token(Token = "0x4001AB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal int <pauseParseReturnIndex>__0;

			[Token(Token = "0x4001AB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal StringBuilder <Token>__0;

			[Token(Token = "0x4001AB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal string <TokenString>__0;

			[Token(Token = "0x4001AB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal string <TokenName>__0;

			[Token(Token = "0x4001AB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal bool <QuoteMode>__0;

			[Token(Token = "0x4001AB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal Action<JSONNode> callback;

			[Token(Token = "0x4001AB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal object $current;

			[Token(Token = "0x4001AB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal bool $disposing;

			[Token(Token = "0x4001AB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal int $PC;

			[Token(Token = "0x170002BC")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002472")]
				[Address(RVA = "0x691ACC", Offset = "0x691ACC", VA = "0x691ACC", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002473")]
				[Address(RVA = "0x691AD4", Offset = "0x691AD4", VA = "0x691AD4", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002470")]
			[Address(RVA = "0x68EDE0", Offset = "0x68EDE0", VA = "0x68EDE0")]
			[DebuggerHidden]
			public <ParseAsynch>c__Iterator2()
			{
			}

			[Token(Token = "0x6002471")]
			[Address(RVA = "0x69074C", Offset = "0x69074C", VA = "0x69074C", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002474")]
			[Address(RVA = "0x691ADC", Offset = "0x691ADC", VA = "0x691ADC", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002475")]
			[Address(RVA = "0x691AF0", Offset = "0x691AF0", VA = "0x691AF0", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x6002476")]
			[Address(RVA = "0x691B74", Offset = "0x691B74", VA = "0x691B74", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6002477")]
			[Address(RVA = "0x691B78", Offset = "0x691B78", VA = "0x691B78", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<object> System.Collections.Generic.IEnumerable<object>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x17000113")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x600105D")]
			[Address(RVA = "0x68E44C", Offset = "0x68E44C", VA = "0x68E44C", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x600105E")]
			[Address(RVA = "0x68E454", Offset = "0x68E454", VA = "0x68E454", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000114")]
		public virtual JSONNode Item
		{
			[Token(Token = "0x600105F")]
			[Address(RVA = "0x68E458", Offset = "0x68E458", VA = "0x68E458", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001060")]
			[Address(RVA = "0x68E460", Offset = "0x68E460", VA = "0x68E460", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000115")]
		public virtual string Value
		{
			[Token(Token = "0x6001061")]
			[Address(RVA = "0x68E464", Offset = "0x68E464", VA = "0x68E464", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001062")]
			[Address(RVA = "0x68E4F0", Offset = "0x68E4F0", VA = "0x68E4F0", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x17000116")]
		public virtual int Count
		{
			[Token(Token = "0x6001063")]
			[Address(RVA = "0x68E4F4", Offset = "0x68E4F4", VA = "0x68E4F4", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000117")]
		public virtual IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6001068")]
			[Address(RVA = "0x68E5C0", Offset = "0x68E5C0", VA = "0x68E5C0", Slot = "16")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000118")]
		public IEnumerable<JSONNode> DeepChilds
		{
			[Token(Token = "0x6001069")]
			[Address(RVA = "0x68E648", Offset = "0x68E648", VA = "0x68E648")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000119")]
		public virtual int AsInt
		{
			[Token(Token = "0x600106C")]
			[Address(RVA = "0x68E7A0", Offset = "0x68E7A0", VA = "0x68E7A0", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600106D")]
			[Address(RVA = "0x68E7EC", Offset = "0x68E7EC", VA = "0x68E7EC", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x1700011A")]
		public virtual float AsFloat
		{
			[Token(Token = "0x600106E")]
			[Address(RVA = "0x68E82C", Offset = "0x68E82C", VA = "0x68E82C", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600106F")]
			[Address(RVA = "0x68E884", Offset = "0x68E884", VA = "0x68E884", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x1700011B")]
		public virtual double AsDouble
		{
			[Token(Token = "0x6001070")]
			[Address(RVA = "0x68E8C8", Offset = "0x68E8C8", VA = "0x68E8C8", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001071")]
			[Address(RVA = "0x68E928", Offset = "0x68E928", VA = "0x68E928", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x1700011C")]
		public virtual bool AsBool
		{
			[Token(Token = "0x6001072")]
			[Address(RVA = "0x68E96C", Offset = "0x68E96C", VA = "0x68E96C", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001073")]
			[Address(RVA = "0x68EA90", Offset = "0x68EA90", VA = "0x68EA90", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x1700011D")]
		public virtual JSONArray AsArray
		{
			[Token(Token = "0x6001074")]
			[Address(RVA = "0x68EB24", Offset = "0x68EB24", VA = "0x68EB24", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011E")]
		public virtual JSONClass AsObject
		{
			[Token(Token = "0x6001075")]
			[Address(RVA = "0x68EBB8", Offset = "0x68EBB8", VA = "0x68EBB8", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0x6899B4", Offset = "0x6899B4", VA = "0x6899B4")]
		public JSONNode()
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0x68E448", Offset = "0x68E448", VA = "0x68E448", Slot = "4")]
		public virtual void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0x68E4FC", Offset = "0x68E4FC", VA = "0x68E4FC", Slot = "12")]
		public virtual void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0x68E5A8", Offset = "0x68E5A8", VA = "0x68E5A8", Slot = "13")]
		public virtual JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0x68E5B0", Offset = "0x68E5B0", VA = "0x68E5B0", Slot = "14")]
		public virtual JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6001067")]
		[Address(RVA = "0x68E5B8", Offset = "0x68E5B8", VA = "0x68E5B8", Slot = "15")]
		public virtual JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0x68E6E8", Offset = "0x68E6E8", VA = "0x68E6E8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0x68E744", Offset = "0x68E744", VA = "0x68E744", Slot = "17")]
		public virtual string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0x68EC4C", Offset = "0x68EC4C", VA = "0x68EC4C")]
		public static implicit operator JSONNode(string s)
		{
			return null;
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0x68ECC0", Offset = "0x68ECC0", VA = "0x68ECC0")]
		public static implicit operator string(JSONNode d)
		{
			return null;
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0x68D10C", Offset = "0x68D10C", VA = "0x68D10C")]
		public static bool operator ==(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0x68ED04", Offset = "0x68ED04", VA = "0x68ED04")]
		public static bool operator !=(JSONNode a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0x68ED18", Offset = "0x68ED18", VA = "0x68ED18", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0x68DD60", Offset = "0x68DD60", VA = "0x68DD60", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0x68BE5C", Offset = "0x68BE5C", VA = "0x68BE5C")]
		internal static string Escape(string aText)
		{
			return null;
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0x689710", Offset = "0x689710", VA = "0x689710")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0x68ED34", Offset = "0x68ED34", VA = "0x68ED34")]
		[DebuggerHidden]
		public static IEnumerable ParseAsynch(string aJSON, Action<JSONNode> callback)
		{
			return null;
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0x68EDE8", Offset = "0x68EDE8", VA = "0x68EDE8", Slot = "28")]
		public virtual void Serialize(BinaryWriter aWriter)
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0x68EDEC", Offset = "0x68EDEC", VA = "0x68EDEC")]
		public void SaveToStream(Stream aData)
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0x68EE78", Offset = "0x68EE78", VA = "0x68EE78")]
		public void SaveToCompressedStream(Stream aData)
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0x68EF10", Offset = "0x68EF10", VA = "0x68EF10")]
		public void SaveToCompressedFile(string aFileName)
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0x68EFA8", Offset = "0x68EFA8", VA = "0x68EFA8")]
		public string SaveToCompressedBase64()
		{
			return null;
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x68F040", Offset = "0x68F040", VA = "0x68F040")]
		public void SaveToFile(string aFileName)
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0x68F1D8", Offset = "0x68F1D8", VA = "0x68F1D8")]
		public string SaveToBase64()
		{
			return null;
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0x68F398", Offset = "0x68F398", VA = "0x68F398")]
		public static JSONNode Deserialize(BinaryReader aReader)
		{
			return null;
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0x68F7AC", Offset = "0x68F7AC", VA = "0x68F7AC")]
		public static JSONNode LoadFromCompressedFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0x68F844", Offset = "0x68F844", VA = "0x68F844")]
		public static JSONNode LoadFromCompressedStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0x68F8DC", Offset = "0x68F8DC", VA = "0x68F8DC")]
		public static JSONNode LoadFromCompressedBase64(string aBase64)
		{
			return null;
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0x68F974", Offset = "0x68F974", VA = "0x68F974")]
		public static JSONNode LoadFromStream(Stream aData)
		{
			return null;
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0x68FAB4", Offset = "0x68FAB4", VA = "0x68FAB4")]
		public static JSONNode LoadFromFile(string aFileName)
		{
			return null;
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0x68FBE4", Offset = "0x68FBE4", VA = "0x68FBE4")]
		public static JSONNode LoadFromBase64(string aBase64)
		{
			return null;
		}
	}
	[Token(Token = "0x200020F")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xE9ECCC", Offset = "0xE9ECCC")]
	public class JSONArray : JSONNode, IEnumerable
	{
		[Token(Token = "0x2000536")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9ED10", Offset = "0xE9ED10")]
		private sealed class <>c__Iterator0 : IEnumerable, IEnumerable<JSONNode>, IEnumerator, IDisposable, IEnumerator<JSONNode>
		{
			[Token(Token = "0x4001AB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal List<JSONNode>.Enumerator $locvar0;

			[Token(Token = "0x4001ABA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal JSONNode <N>__1;

			[Token(Token = "0x4001ABB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal JSONArray $this;

			[Token(Token = "0x4001ABC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal JSONNode $current;

			[Token(Token = "0x4001ABD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal bool $disposing;

			[Token(Token = "0x4001ABE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal int $PC;

			[Token(Token = "0x170002BE")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x600247A")]
				[Address(RVA = "0x68A8D4", Offset = "0x68A8D4", VA = "0x68A8D4", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002BF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600247B")]
				[Address(RVA = "0x68A8DC", Offset = "0x68A8DC", VA = "0x68A8DC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002478")]
			[Address(RVA = "0x689FA8", Offset = "0x689FA8", VA = "0x689FA8")]
			[DebuggerHidden]
			public <>c__Iterator0()
			{
			}

			[Token(Token = "0x6002479")]
			[Address(RVA = "0x68A740", Offset = "0x68A740", VA = "0x68A740", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600247C")]
			[Address(RVA = "0x68A8E4", Offset = "0x68A8E4", VA = "0x68A8E4", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600247D")]
			[Address(RVA = "0x68A964", Offset = "0x68A964", VA = "0x68A964", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x600247E")]
			[Address(RVA = "0x68A9E8", Offset = "0x68A9E8", VA = "0x68A9E8", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600247F")]
			[Address(RVA = "0x68A9EC", Offset = "0x68A9EC", VA = "0x68A9EC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x2000537")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9ED90", Offset = "0xE9ED90")]
		private sealed class <GetEnumerator>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001ABF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal List<JSONNode>.Enumerator $locvar0;

			[Token(Token = "0x4001AC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal JSONNode <N>__1;

			[Token(Token = "0x4001AC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal JSONArray $this;

			[Token(Token = "0x4001AC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal object $current;

			[Token(Token = "0x4001AC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal bool $disposing;

			[Token(Token = "0x4001AC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal int $PC;

			[Token(Token = "0x170002C0")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002482")]
				[Address(RVA = "0x68AC38", Offset = "0x68AC38", VA = "0x68AC38", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002483")]
				[Address(RVA = "0x68AC40", Offset = "0x68AC40", VA = "0x68AC40", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002480")]
			[Address(RVA = "0x68A030", Offset = "0x68A030", VA = "0x68A030")]
			[DebuggerHidden]
			public <GetEnumerator>c__Iterator1()
			{
			}

			[Token(Token = "0x6002481")]
			[Address(RVA = "0x68AAA4", Offset = "0x68AAA4", VA = "0x68AAA4", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002484")]
			[Address(RVA = "0x68AC48", Offset = "0x68AC48", VA = "0x68AC48", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002485")]
			[Address(RVA = "0x68ACC8", Offset = "0x68ACC8", VA = "0x68ACC8", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private List<JSONNode> m_List;

		[Token(Token = "0x1700011F")]
		public override JSONNode Item
		{
			[Token(Token = "0x600108E")]
			[Address(RVA = "0x6899BC", Offset = "0x6899BC", VA = "0x6899BC", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x600108F")]
			[Address(RVA = "0x689ACC", Offset = "0x689ACC", VA = "0x689ACC", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000120")]
		public override JSONNode Item
		{
			[Token(Token = "0x6001090")]
			[Address(RVA = "0x689BB8", Offset = "0x689BB8", VA = "0x689BB8", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001091")]
			[Address(RVA = "0x689C34", Offset = "0x689C34", VA = "0x689C34", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000121")]
		public override int Count
		{
			[Token(Token = "0x6001092")]
			[Address(RVA = "0x689CB0", Offset = "0x689CB0", VA = "0x689CB0", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000122")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x6001096")]
			[Address(RVA = "0x689F10", Offset = "0x689F10", VA = "0x689F10", Slot = "16")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0x689928", Offset = "0x689928", VA = "0x689928")]
		public JSONArray()
		{
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0x689D24", Offset = "0x689D24", VA = "0x689D24", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0x689DA0", Offset = "0x689DA0", VA = "0x689DA0", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0x689E90", Offset = "0x689E90", VA = "0x689E90", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0x689FB0", Offset = "0x689FB0", VA = "0x689FB0", Slot = "29")]
		[DebuggerHidden]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0x68A038", Offset = "0x68A038", VA = "0x68A038", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0x68A2C8", Offset = "0x68A2C8", VA = "0x68A2C8", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0x68A5F8", Offset = "0x68A5F8", VA = "0x68A5F8", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x2000210")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xE9EDF0", Offset = "0xE9EDF0")]
	public class JSONClass : JSONNode, IEnumerable
	{
		[Token(Token = "0x2000538")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9EE34", Offset = "0xE9EE34")]
		private sealed class <Remove>c__AnonStorey2
		{
			[Token(Token = "0x4001AC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal JSONNode aNode;

			[Token(Token = "0x6002486")]
			[Address(RVA = "0x68B824", Offset = "0x68B824", VA = "0x68B824")]
			public <Remove>c__AnonStorey2()
			{
			}

			[Token(Token = "0x6002487")]
			[Address(RVA = "0x68D090", Offset = "0x68D090", VA = "0x68D090")]
			internal bool <>m__0(KeyValuePair<string, JSONNode> k)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000539")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9EE44", Offset = "0xE9EE44")]
		private sealed class <>c__Iterator0 : IEnumerable, IEnumerable<JSONNode>, IEnumerator, IDisposable, IEnumerator<JSONNode>
		{
			[Token(Token = "0x4001AC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Dictionary<string, JSONNode>.Enumerator $locvar0;

			[Token(Token = "0x4001AC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal KeyValuePair<string, JSONNode> <N>__1;

			[Token(Token = "0x4001AC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal JSONClass $this;

			[Token(Token = "0x4001AC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal JSONNode $current;

			[Token(Token = "0x4001ACA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal bool $disposing;

			[Token(Token = "0x4001ACB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal int $PC;

			[Token(Token = "0x170002C2")]
			private JSONNode System.Collections.Generic.IEnumerator<SimpleJSON.JSONNode>.Current
			{
				[Token(Token = "0x600248A")]
				[Address(RVA = "0x68CBE4", Offset = "0x68CBE4", VA = "0x68CBE4", Slot = "10")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600248B")]
				[Address(RVA = "0x68CBEC", Offset = "0x68CBEC", VA = "0x68CBEC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002488")]
			[Address(RVA = "0x68B8C4", Offset = "0x68B8C4", VA = "0x68B8C4")]
			[DebuggerHidden]
			public <>c__Iterator0()
			{
			}

			[Token(Token = "0x6002489")]
			[Address(RVA = "0x68CA28", Offset = "0x68CA28", VA = "0x68CA28", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600248C")]
			[Address(RVA = "0x68CBF4", Offset = "0x68CBF4", VA = "0x68CBF4", Slot = "9")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x600248D")]
			[Address(RVA = "0x68CC74", Offset = "0x68CC74", VA = "0x68CC74", Slot = "8")]
			[DebuggerHidden]
			public void Reset()
			{
			}

			[Token(Token = "0x600248E")]
			[Address(RVA = "0x68CCF8", Offset = "0x68CCF8", VA = "0x68CCF8", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x600248F")]
			[Address(RVA = "0x68CCFC", Offset = "0x68CCFC", VA = "0x68CCFC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator<JSONNode> System.Collections.Generic.IEnumerable<SimpleJSON.JSONNode>.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x200053A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9EEC4", Offset = "0xE9EEC4")]
		private sealed class <GetEnumerator>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
		{
			[Token(Token = "0x4001ACC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Dictionary<string, JSONNode>.Enumerator $locvar0;

			[Token(Token = "0x4001ACD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			internal KeyValuePair<string, JSONNode> <N>__1;

			[Token(Token = "0x4001ACE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal JSONClass $this;

			[Token(Token = "0x4001ACF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal object $current;

			[Token(Token = "0x4001AD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			internal bool $disposing;

			[Token(Token = "0x4001AD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal int $PC;

			[Token(Token = "0x170002C4")]
			private object System.Collections.Generic.IEnumerator<object>.Current
			{
				[Token(Token = "0x6002492")]
				[Address(RVA = "0x68CF7C", Offset = "0x68CF7C", VA = "0x68CF7C", Slot = "8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002493")]
				[Address(RVA = "0x68CF84", Offset = "0x68CF84", VA = "0x68CF84", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002490")]
			[Address(RVA = "0x68B94C", Offset = "0x68B94C", VA = "0x68B94C")]
			[DebuggerHidden]
			public <GetEnumerator>c__Iterator1()
			{
			}

			[Token(Token = "0x6002491")]
			[Address(RVA = "0x68CDB4", Offset = "0x68CDB4", VA = "0x68CDB4", Slot = "5")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002494")]
			[Address(RVA = "0x68CF8C", Offset = "0x68CF8C", VA = "0x68CF8C", Slot = "7")]
			[DebuggerHidden]
			public void Dispose()
			{
			}

			[Token(Token = "0x6002495")]
			[Address(RVA = "0x68D00C", Offset = "0x68D00C", VA = "0x68D00C", Slot = "6")]
			[DebuggerHidden]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Dictionary<string, JSONNode> m_Dict;

		[Token(Token = "0x17000123")]
		public override JSONNode Item
		{
			[Token(Token = "0x600109C")]
			[Address(RVA = "0x68ADD8", Offset = "0x68ADD8", VA = "0x68ADD8", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x600109D")]
			[Address(RVA = "0x68AEE0", Offset = "0x68AEE0", VA = "0x68AEE0", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x17000124")]
		public override JSONNode Item
		{
			[Token(Token = "0x600109E")]
			[Address(RVA = "0x68AFC0", Offset = "0x68AFC0", VA = "0x68AFC0", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x600109F")]
			[Address(RVA = "0x68B0AC", Offset = "0x68B0AC", VA = "0x68B0AC", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000125")]
		public override int Count
		{
			[Token(Token = "0x60010A0")]
			[Address(RVA = "0x68B1C8", Offset = "0x68B1C8", VA = "0x68B1C8", Slot = "11")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000126")]
		public override IEnumerable<JSONNode> Childs
		{
			[Token(Token = "0x60010A5")]
			[Address(RVA = "0x68B82C", Offset = "0x68B82C", VA = "0x68B82C", Slot = "16")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0x68AD4C", Offset = "0x68AD4C", VA = "0x68AD4C")]
		public JSONClass()
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0x68B23C", Offset = "0x68B23C", VA = "0x68B23C", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0x68B3FC", Offset = "0x68B3FC", VA = "0x68B3FC", Slot = "13")]
		public override JSONNode Remove(string aKey)
		{
			return null;
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x68B4E4", Offset = "0x68B4E4", VA = "0x68B4E4", Slot = "14")]
		public override JSONNode Remove(int aIndex)
		{
			return null;
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0x68B618", Offset = "0x68B618", VA = "0x68B618", Slot = "15")]
		public override JSONNode Remove(JSONNode aNode)
		{
			return null;
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0x68B8CC", Offset = "0x68B8CC", VA = "0x68B8CC", Slot = "29")]
		[DebuggerHidden]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0x68B954", Offset = "0x68B954", VA = "0x68B954", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0x68C240", Offset = "0x68C240", VA = "0x68C240", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0x68C7F8", Offset = "0x68C7F8", VA = "0x68C7F8", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x2000211")]
	public class JSONData : JSONNode
	{
		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private string m_Data;

		[Token(Token = "0x17000127")]
		public override string Value
		{
			[Token(Token = "0x60010AF")]
			[Address(RVA = "0x68D2C0", Offset = "0x68D2C0", VA = "0x68D2C0", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010B0")]
			[Address(RVA = "0x68D2C8", Offset = "0x68D2C8", VA = "0x68D2C8", Slot = "10")]
			set
			{
			}
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0x68D1BC", Offset = "0x68D1BC", VA = "0x68D1BC")]
		public JSONData(string aData)
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x68D1DC", Offset = "0x68D1DC", VA = "0x68D1DC")]
		public JSONData(float aData)
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x68D210", Offset = "0x68D210", VA = "0x68D210")]
		public JSONData(double aData)
		{
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x68D258", Offset = "0x68D258", VA = "0x68D258")]
		public JSONData(bool aData)
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x68D28C", Offset = "0x68D28C", VA = "0x68D28C")]
		public JSONData(int aData)
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x68D2D0", Offset = "0x68D2D0", VA = "0x68D2D0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x68D384", Offset = "0x68D384", VA = "0x68D384", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x68D438", Offset = "0x68D438", VA = "0x68D438", Slot = "28")]
		public override void Serialize(BinaryWriter aWriter)
		{
		}
	}
	[Token(Token = "0x2000212")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xE9EF24", Offset = "0xE9EF24")]
	internal class JSONLazyCreator : JSONNode
	{
		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private JSONNode m_Node;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private string m_Key;

		[Token(Token = "0x17000128")]
		public override JSONNode Item
		{
			[Token(Token = "0x60010B7")]
			[Address(RVA = "0x68D95C", Offset = "0x68D95C", VA = "0x68D95C", Slot = "5")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010B8")]
			[Address(RVA = "0x68D9D8", Offset = "0x68D9D8", VA = "0x68D9D8", Slot = "6")]
			set
			{
			}
		}

		[Token(Token = "0x17000129")]
		public override JSONNode Item
		{
			[Token(Token = "0x60010B9")]
			[Address(RVA = "0x68DA74", Offset = "0x68DA74", VA = "0x68DA74", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x60010BA")]
			[Address(RVA = "0x68DAF0", Offset = "0x68DAF0", VA = "0x68DAF0", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700012A")]
		public override int AsInt
		{
			[Token(Token = "0x60010C3")]
			[Address(RVA = "0x68DE80", Offset = "0x68DE80", VA = "0x68DE80", Slot = "18")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60010C4")]
			[Address(RVA = "0x68DF14", Offset = "0x68DF14", VA = "0x68DF14", Slot = "19")]
			set
			{
			}
		}

		[Token(Token = "0x1700012B")]
		public override float AsFloat
		{
			[Token(Token = "0x60010C5")]
			[Address(RVA = "0x68DFA8", Offset = "0x68DFA8", VA = "0x68DFA8", Slot = "20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60010C6")]
			[Address(RVA = "0x68E03C", Offset = "0x68E03C", VA = "0x68E03C", Slot = "21")]
			set
			{
			}
		}

		[Token(Token = "0x1700012C")]
		public override double AsDouble
		{
			[Token(Token = "0x60010C7")]
			[Address(RVA = "0x68E0D0", Offset = "0x68E0D0", VA = "0x68E0D0", Slot = "22")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x60010C8")]
			[Address(RVA = "0x68E188", Offset = "0x68E188", VA = "0x68E188", Slot = "23")]
			set
			{
			}
		}

		[Token(Token = "0x1700012D")]
		public override bool AsBool
		{
			[Token(Token = "0x60010C9")]
			[Address(RVA = "0x68E230", Offset = "0x68E230", VA = "0x68E230", Slot = "24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60010CA")]
			[Address(RVA = "0x68E2C4", Offset = "0x68E2C4", VA = "0x68E2C4", Slot = "25")]
			set
			{
			}
		}

		[Token(Token = "0x1700012E")]
		public override JSONArray AsArray
		{
			[Token(Token = "0x60010CB")]
			[Address(RVA = "0x68E358", Offset = "0x68E358", VA = "0x68E358", Slot = "26")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012F")]
		public override JSONClass AsObject
		{
			[Token(Token = "0x60010CC")]
			[Address(RVA = "0x68E3D0", Offset = "0x68E3D0", VA = "0x68E3D0", Slot = "27")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0x689AA4", Offset = "0x689AA4", VA = "0x689AA4")]
		public JSONLazyCreator(JSONNode aNode)
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x68AEB8", Offset = "0x68AEB8", VA = "0x68AEB8")]
		public JSONLazyCreator(JSONNode aNode, string aKey)
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0x68D8E0", Offset = "0x68D8E0", VA = "0x68D8E0")]
		private void Set(JSONNode aVal)
		{
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x68DB94", Offset = "0x68DB94", VA = "0x68DB94", Slot = "12")]
		public override void Add(JSONNode aItem)
		{
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x68DC30", Offset = "0x68DC30", VA = "0x68DC30", Slot = "4")]
		public override void Add(string aKey, JSONNode aItem)
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0x68DCD4", Offset = "0x68DCD4", VA = "0x68DCD4")]
		public static bool operator ==(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0x68DCFC", Offset = "0x68DCFC", VA = "0x68DCFC")]
		public static bool operator !=(JSONLazyCreator a, object b)
		{
			return default(bool);
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0x68DD28", Offset = "0x68DD28", VA = "0x68DD28", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0x68DD58", Offset = "0x68DD58", VA = "0x68DD58", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0x68DD68", Offset = "0x68DD68", VA = "0x68DD68", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0x68DDF4", Offset = "0x68DDF4", VA = "0x68DDF4", Slot = "17")]
		public override string ToString(string aPrefix)
		{
			return null;
		}
	}
	[Token(Token = "0x2000213")]
	public static class JSON
	{
		[Token(Token = "0x60010CD")]
		[Address(RVA = "0x68970C", Offset = "0x68970C", VA = "0x68970C")]
		public static JSONNode Parse(string aJSON)
		{
			return null;
		}
	}
}
namespace Snapshots
{
	[Token(Token = "0x2000214")]
	public class DataOrConflictSnapshot : SnapshotsBase
	{
		[Token(Token = "0x60010CE")]
		[Address(RVA = "0x691C6C", Offset = "0x691C6C", VA = "0x691C6C")]
		public DataOrConflictSnapshot(AndroidJavaObject obj)
		{
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0x691E4C", Offset = "0x691E4C", VA = "0x691E4C")]
		public static DataOrConflictSnapshot Construct(AndroidJavaObject obj)
		{
			return null;
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0x691F48", Offset = "0x691F48", VA = "0x691F48")]
		public bool isConflict()
		{
			return default(bool);
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0x692060", Offset = "0x692060", VA = "0x692060")]
		public Snapshot getData()
		{
			return null;
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0x6922EC", Offset = "0x6922EC", VA = "0x6922EC")]
		public SnapshotConflict getConflict()
		{
			return null;
		}
	}
	[Token(Token = "0x2000215")]
	public sealed class Gravity
	{
		[Token(Token = "0x4000BA8")]
		public const int BOTTOM = 80;

		[Token(Token = "0x4000BA9")]
		public const int CENTER = 17;

		[Token(Token = "0x4000BAA")]
		public const int CENTER_HORIZONTAL = 1;

		[Token(Token = "0x4000BAB")]
		public const int CENTER_VERTICAL = 16;

		[Token(Token = "0x4000BAC")]
		public const int LEFT = 3;

		[Token(Token = "0x4000BAD")]
		public const int RIGHT = 5;

		[Token(Token = "0x4000BAE")]
		public const int TOP = 48;

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0x692578", Offset = "0x692578", VA = "0x692578")]
		private Gravity()
		{
		}
	}
	[Token(Token = "0x2000216")]
	public class Player : SnapshotsBase
	{
		[Token(Token = "0x4000BAF")]
		public const long CURRENT_XP_UNKNOWN = -1L;

		[Token(Token = "0x4000BB0")]
		public const long TIMESTAMP_UNKNOWN = -1L;

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0x692580", Offset = "0x692580", VA = "0x692580")]
		public Player(AndroidJavaObject obj)
		{
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0x692680", Offset = "0x692680", VA = "0x692680")]
		public static Player Construct(AndroidJavaObject obj)
		{
			return null;
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0x69277C", Offset = "0x69277C", VA = "0x69277C")]
		public string getDisplayName()
		{
			return null;
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0x69288C", Offset = "0x69288C", VA = "0x69288C")]
		public string getPlayerId()
		{
			return null;
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0x69299C", Offset = "0x69299C", VA = "0x69299C")]
		public string getTitle()
		{
			return null;
		}
	}
	[Token(Token = "0x2000217")]
	public class Snapshot : SnapshotsBase
	{
		[Token(Token = "0x60010D9")]
		[Address(RVA = "0x6921EC", Offset = "0x6921EC", VA = "0x6921EC")]
		public Snapshot(AndroidJavaObject obj)
		{
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0x692AAC", Offset = "0x692AAC", VA = "0x692AAC")]
		public bool isClosed()
		{
			return default(bool);
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0x692CE8", Offset = "0x692CE8", VA = "0x692CE8")]
		public SnapshotMetadata getMetadata()
		{
			return null;
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0x692F20", Offset = "0x692F20", VA = "0x692F20")]
		public bool hasContents()
		{
			return default(bool);
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0x6930C0", Offset = "0x6930C0", VA = "0x6930C0")]
		public SnapshotStream getStream()
		{
			return null;
		}
	}
	[Token(Token = "0x2000218")]
	public class SnapshotConflict : SnapshotsBase
	{
		[Token(Token = "0x60010DE")]
		[Address(RVA = "0x692478", Offset = "0x692478", VA = "0x692478")]
		public SnapshotConflict(AndroidJavaObject obj)
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0x69354C", Offset = "0x69354C", VA = "0x69354C")]
		public static SnapshotConflict Construct(AndroidJavaObject obj)
		{
			return null;
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0x693648", Offset = "0x693648", VA = "0x693648")]
		public string getConflictId()
		{
			return null;
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0x693758", Offset = "0x693758", VA = "0x693758")]
		public Snapshot getSnapshot()
		{
			return null;
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0x693890", Offset = "0x693890", VA = "0x693890")]
		public Snapshot getConflictingSnapshot()
		{
			return null;
		}
	}
	[Token(Token = "0x2000219")]
	public class SnapshotMetadata : SnapshotsBase
	{
		[Token(Token = "0x4000BB1")]
		public const long PLAYED_TIME_UNKNOWN = -1L;

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0x692E20", Offset = "0x692E20", VA = "0x692E20")]
		public SnapshotMetadata(AndroidJavaObject obj)
		{
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0x6939C8", Offset = "0x6939C8", VA = "0x6939C8")]
		public static SnapshotMetadata Construct(AndroidJavaObject obj)
		{
			return null;
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0x693AC4", Offset = "0x693AC4", VA = "0x693AC4")]
		public string getDescription()
		{
			return null;
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0x693BD4", Offset = "0x693BD4", VA = "0x693BD4")]
		public long getLastModifiedTimestamp()
		{
			return default(long);
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0x693CE4", Offset = "0x693CE4", VA = "0x693CE4")]
		public long getPlayedTime()
		{
			return default(long);
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0x693DF4", Offset = "0x693DF4", VA = "0x693DF4")]
		public string getUniqueName()
		{
			return null;
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0x693F04", Offset = "0x693F04", VA = "0x693F04")]
		public Player getOwner()
		{
			return null;
		}
	}
	[Token(Token = "0x200021A")]
	public class SnapshotMetadataBuffer : SnapshotsBase
	{
		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool disposed;

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0x69403C", Offset = "0x69403C", VA = "0x69403C")]
		public SnapshotMetadataBuffer(AndroidJavaObject obj)
		{
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0x69413C", Offset = "0x69413C", VA = "0x69413C")]
		public static SnapshotMetadataBuffer Construct(AndroidJavaObject obj)
		{
			return null;
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0x694238", Offset = "0x694238", VA = "0x694238")]
		public int getCount()
		{
			return default(int);
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0x694348", Offset = "0x694348", VA = "0x694348")]
		public SnapshotMetadata get(int position)
		{
			return null;
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0x694500", Offset = "0x694500", VA = "0x694500", Slot = "5")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200021B")]
	public class SnapshotMetadataChange : SnapshotsBase
	{
		[Token(Token = "0x200021C")]
		public class Builder : SnapshotsBase
		{
			[Token(Token = "0x4000BB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private bool hasBuilt;

			[Token(Token = "0x60010F1")]
			[Address(RVA = "0x6948AC", Offset = "0x6948AC", VA = "0x6948AC")]
			public Builder()
			{
			}

			[Token(Token = "0x60010F2")]
			[Address(RVA = "0x69496C", Offset = "0x69496C", VA = "0x69496C")]
			public Builder FromMetadata(SnapshotMetadata metadata)
			{
				return null;
			}

			[Token(Token = "0x60010F3")]
			[Address(RVA = "0x694B88", Offset = "0x694B88", VA = "0x694B88")]
			public Builder SetCoverImage(string path)
			{
				return null;
			}

			[Token(Token = "0x60010F4")]
			[Address(RVA = "0x694E98", Offset = "0x694E98", VA = "0x694E98")]
			public Builder SetDescription(string description)
			{
				return null;
			}

			[Token(Token = "0x60010F5")]
			[Address(RVA = "0x69509C", Offset = "0x69509C", VA = "0x69509C")]
			public Builder SetPlayedTimeMillis(long playtime)
			{
				return null;
			}

			[Token(Token = "0x60010F6")]
			[Address(RVA = "0x6952D0", Offset = "0x6952D0", VA = "0x6952D0")]
			public SnapshotMetadataChange Build()
			{
				return null;
			}
		}

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SnapshotMetadataChange EMPTY_CHANGE;

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0x694604", Offset = "0x694604", VA = "0x694604")]
		static SnapshotMetadataChange()
		{
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0x6947AC", Offset = "0x6947AC", VA = "0x6947AC")]
		private SnapshotMetadataChange(AndroidJavaObject obj)
		{
		}
	}
	[Token(Token = "0x200021D")]
	public class SnapshotsBase : IDisposable
	{
		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool disposed;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected AndroidJavaObject underlyingObject;

		[Token(Token = "0x17000130")]
		protected bool Disposed
		{
			[Token(Token = "0x60010F8")]
			[Address(RVA = "0x692058", Offset = "0x692058", VA = "0x692058")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0x691D6C", Offset = "0x691D6C", VA = "0x691D6C")]
		public SnapshotsBase(AndroidJavaObject obj)
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x694B80", Offset = "0x694B80", VA = "0x694B80")]
		internal AndroidJavaObject getInternalObject()
		{
			return null;
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x695460", Offset = "0x695460", VA = "0x695460", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x6945C4", Offset = "0x6945C4", VA = "0x6945C4", Slot = "5")]
		protected virtual void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200021E")]
	public class SnapshotStream : Stream
	{
		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<string> workingPathPool;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int counter;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<string> inUse;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private string workingPath;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private FileStream cFile;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private AndroidJavaObject jWrapper;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool hasChanged;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		private bool hasDisposed;

		[Token(Token = "0x17000131")]
		public override bool CanRead
		{
			[Token(Token = "0x6001105")]
			[Address(RVA = "0x6960E0", Offset = "0x6960E0", VA = "0x6960E0", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000132")]
		public override bool CanSeek
		{
			[Token(Token = "0x6001106")]
			[Address(RVA = "0x6961B0", Offset = "0x6961B0", VA = "0x6961B0", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000133")]
		public override bool CanWrite
		{
			[Token(Token = "0x6001107")]
			[Address(RVA = "0x696280", Offset = "0x696280", VA = "0x696280", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000134")]
		public override long Length
		{
			[Token(Token = "0x6001108")]
			[Address(RVA = "0x696350", Offset = "0x696350", VA = "0x696350", Slot = "9")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x17000135")]
		public override long Position
		{
			[Token(Token = "0x6001109")]
			[Address(RVA = "0x696420", Offset = "0x696420", VA = "0x696420", Slot = "10")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x600110A")]
			[Address(RVA = "0x6964F0", Offset = "0x6964F0", VA = "0x6964F0", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0x693248", Offset = "0x693248", VA = "0x693248")]
		public SnapshotStream(AndroidJavaObject jWrapper)
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x695498", Offset = "0x695498", VA = "0x695498")]
		private static string GetTemporaryWorkingPath()
		{
			return null;
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0x695818", Offset = "0x695818", VA = "0x695818")]
		private static void ReleaseTemporaryWorkingPath(string path)
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0x695944", Offset = "0x695944", VA = "0x695944")]
		internal AndroidJavaObject getInternalObject()
		{
			return null;
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0x6959F0", Offset = "0x6959F0", VA = "0x6959F0", Slot = "16")]
		public override void Flush()
		{
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0x695D08", Offset = "0x695D08", VA = "0x695D08", Slot = "17")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0x695DFC", Offset = "0x695DFC", VA = "0x695DFC", Slot = "19")]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0x695EF0", Offset = "0x695EF0", VA = "0x695EF0", Slot = "20")]
		public override void SetLength(long value)
		{
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0x695FE4", Offset = "0x695FE4", VA = "0x695FE4", Slot = "21")]
		public override void Write(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0x6965DC", Offset = "0x6965DC", VA = "0x6965DC", Slot = "12")]
		protected override void Dispose(bool disposing)
		{
		}
	}
	[Token(Token = "0x200021F")]
	public class SnapshotsWrapper : MonoBehaviour
	{
		[Token(Token = "0x2000220")]
		public enum SnapshotsLogLevel
		{
			[Token(Token = "0x4000BE4")]
			VERBOSE = 2,
			[Token(Token = "0x4000BE5")]
			DEBUG,
			[Token(Token = "0x4000BE6")]
			INFO,
			[Token(Token = "0x4000BE7")]
			WARN,
			[Token(Token = "0x4000BE8")]
			ERROR,
			[Token(Token = "0x4000BE9")]
			ASSERT,
			[Token(Token = "0x4000BEA")]
			NONE
		}

		[Token(Token = "0x2000221")]
		public delegate void OnSignInCompleted(int resultCode);

		[Token(Token = "0x2000222")]
		public delegate void OnSignOutCompleted(int resultCode);

		[Token(Token = "0x2000223")]
		public delegate void OnLoadCompleted(SnapshotMetadataBuffer snapshotMetadataBuffer, int resultCode);

		[Token(Token = "0x2000224")]
		public delegate void OnOpenCompleted(DataOrConflictSnapshot openedSnapshot, int resultCode);

		[Token(Token = "0x2000225")]
		public delegate void OnCommitCompleted(SnapshotMetadata metadata, int resultCode);

		[Token(Token = "0x2000226")]
		public delegate void OnDiscardComplete(int resultCode);

		[Token(Token = "0x2000227")]
		public delegate void OnSelectCompleted(SnapshotMetadata chosenSnapshots, int resultCode, bool choseNewGame);

		[Token(Token = "0x2000228")]
		public delegate void OnCloneCompleted(DataOrConflictSnapshot data, int resultCode);

		[Token(Token = "0x2000229")]
		public delegate void OnRetrievedCurrentPlayer(Player player, int resultCode);

		[Token(Token = "0x200022A")]
		public delegate void OnUnlockAchievementComplete(int resultCode);

		[Token(Token = "0x200022B")]
		public delegate void OnSubmitScoreComplete(int resultCode);

		[Token(Token = "0x200022C")]
		public delegate void OnShowAchievementsComplete(int resultCode);

		[Token(Token = "0x200022D")]
		public delegate void OnShowLeaderboardsComplete(int resultCode);

		[Token(Token = "0x4000BBF")]
		public const int DISPLAY_LIMIT_NONE = -1;

		[Token(Token = "0x4000BC0")]
		public const char RETURN_VALUE_SEPARATOR = ',';

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _hasInitted;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static AndroidJavaClass _plugin;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int _logLevel;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static long _counter;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Dictionary<string, object> _callbackDelegates;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9EF8C", Offset = "0xE9EF8C")]
		private static Func<AndroidJavaObject, SnapshotMetadata> <>f__mg$cache0;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9EF9C", Offset = "0xE9EF9C")]
		private static Func<string, int> <>f__mg$cache1;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9EFAC", Offset = "0xE9EFAC")]
		private static Func<string, int> <>f__mg$cache2;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9EFBC", Offset = "0xE9EFBC")]
		private static Func<AndroidJavaObject, IDisposable> <>f__mg$cache3;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9EFCC", Offset = "0xE9EFCC")]
		private static Func<string, object> <>f__mg$cache4;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9EFDC", Offset = "0xE9EFDC")]
		private static Func<string, object> <>f__mg$cache5;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9EFEC", Offset = "0xE9EFEC")]
		private static Func<AndroidJavaObject, IDisposable> <>f__mg$cache6;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9EFFC", Offset = "0xE9EFFC")]
		private static Func<string, object> <>f__mg$cache7;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F00C", Offset = "0xE9F00C")]
		private static Func<string, object> <>f__mg$cache8;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F01C", Offset = "0xE9F01C")]
		private static Func<AndroidJavaObject, IDisposable> <>f__mg$cache9;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F02C", Offset = "0xE9F02C")]
		private static Func<string, object> <>f__mg$cacheA;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F03C", Offset = "0xE9F03C")]
		private static Func<string, object> <>f__mg$cacheB;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F04C", Offset = "0xE9F04C")]
		private static Func<string, object> <>f__mg$cacheC;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F05C", Offset = "0xE9F05C")]
		private static Func<string, object> <>f__mg$cacheD;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F06C", Offset = "0xE9F06C")]
		private static Func<AndroidJavaObject, IDisposable> <>f__mg$cacheE;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F07C", Offset = "0xE9F07C")]
		private static Func<string, object> <>f__mg$cacheF;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F08C", Offset = "0xE9F08C")]
		private static Func<string, object> <>f__mg$cache10;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F09C", Offset = "0xE9F09C")]
		private static Func<string, int> <>f__mg$cache11;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F0AC", Offset = "0xE9F0AC")]
		private static Func<AndroidJavaObject, IDisposable> <>f__mg$cache12;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F0BC", Offset = "0xE9F0BC")]
		private static Func<string, object> <>f__mg$cache13;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F0CC", Offset = "0xE9F0CC")]
		private static Func<string, object> <>f__mg$cache14;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F0DC", Offset = "0xE9F0DC")]
		private static Func<AndroidJavaObject, IDisposable> <>f__mg$cache15;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F0EC", Offset = "0xE9F0EC")]
		private static Func<string, object> <>f__mg$cache16;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F0FC", Offset = "0xE9F0FC")]
		private static Func<string, object> <>f__mg$cache17;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F10C", Offset = "0xE9F10C")]
		private static Func<string, int> <>f__mg$cache18;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F11C", Offset = "0xE9F11C")]
		private static Func<string, int> <>f__mg$cache19;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F12C", Offset = "0xE9F12C")]
		private static Func<string, int> <>f__mg$cache1A;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9F13C", Offset = "0xE9F13C")]
		private static Func<string, int> <>f__mg$cache1B;

		[Token(Token = "0x1400007B")]
		public static event Action<SnapshotMetadata> OnResumeSavedGame
		{
			[Token(Token = "0x6001116")]
			[Address(RVA = "0x697350", Offset = "0x697350", VA = "0x697350")]
			add
			{
			}
			[Token(Token = "0x6001117")]
			[Address(RVA = "0x6974C4", Offset = "0x6974C4", VA = "0x6974C4")]
			remove
			{
			}
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0x6967D4", Offset = "0x6967D4", VA = "0x6967D4")]
		static SnapshotsWrapper()
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0x696894", Offset = "0x696894", VA = "0x696894")]
		public SnapshotsWrapper()
		{
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0x69689C", Offset = "0x69689C", VA = "0x69689C")]
		private static bool CanMakeCalls()
		{
			return default(bool);
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0x696C78", Offset = "0x696C78", VA = "0x696C78")]
		private static string RegisterDelegate(object callback)
		{
			return null;
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0x696DD4", Offset = "0x696DD4", VA = "0x696DD4")]
		private static void UnregisterDelegate(string id)
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0x696E8C", Offset = "0x696E8C", VA = "0x696E8C")]
		private static void Log(string message)
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0x696FB0", Offset = "0x696FB0", VA = "0x696FB0")]
		private static void LogWarning(string warning)
		{
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0x6970D4", Offset = "0x6970D4", VA = "0x6970D4")]
		private static void LogError(string error)
		{
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0x6971F8", Offset = "0x6971F8", VA = "0x6971F8")]
		public static void SetLogLevel(SnapshotsLogLevel level)
		{
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0x697638", Offset = "0x697638", VA = "0x697638")]
		public static bool IsConnected()
		{
			return default(bool);
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0x6977A0", Offset = "0x6977A0", VA = "0x6977A0")]
		public static void SignIn(bool silently, [Optional] OnSignInCompleted onSignInCompleted)
		{
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0x6979D4", Offset = "0x6979D4", VA = "0x6979D4")]
		public static void SignOut([Optional] OnSignOutCompleted onSignOutComplete)
		{
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0x697B90", Offset = "0x697B90", VA = "0x697B90")]
		public static void Load(bool forceReload, [Optional] OnLoadCompleted onLoadCompleted)
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0x697DC4", Offset = "0x697DC4", VA = "0x697DC4")]
		public static void Open(string fileName, bool createIfNotFound, [Optional] OnOpenCompleted onOpenCompleted)
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0x698044", Offset = "0x698044", VA = "0x698044")]
		public static void Open(SnapshotMetadata metadata, [Optional] OnOpenCompleted onOpenCompleted)
		{
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0x69825C", Offset = "0x69825C", VA = "0x69825C")]
		public static void CommitAndClose(Snapshot snapshot, SnapshotMetadataChange metadataChange, [Optional] OnCommitCompleted onCommitCompleted)
		{
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0x6984D0", Offset = "0x6984D0", VA = "0x6984D0")]
		public static void DiscardAndClose(Snapshot snapshot, [Optional] OnDiscardComplete onDiscardComplete)
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0x6986E8", Offset = "0x6986E8", VA = "0x6986E8")]
		public static void Select(string title, bool showNewGame, bool allowDelete, int maxShown, [Optional] OnSelectCompleted onSelectCompleted)
		{
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0x698A40", Offset = "0x698A40", VA = "0x698A40")]
		public static void ResolveConflict(string conflictId, Snapshot snapshot, [Optional] OnOpenCompleted onResolveComplete)
		{
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0x698CA4", Offset = "0x698CA4", VA = "0x698CA4")]
		public static void ResolveConflict(string conflictId, string snapshotId, SnapshotMetadataChange metadataChange, SnapshotStream snapshotContents, [Optional] OnOpenCompleted onResolveComplete)
		{
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0x698FC4", Offset = "0x698FC4", VA = "0x698FC4")]
		public static void Clone(Snapshot snapshot, string cloneName, OnCloneCompleted onCloneCompleted)
		{
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0x699228", Offset = "0x699228", VA = "0x699228")]
		public static string CreateUniqueSnapshotName()
		{
			return null;
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0x699300", Offset = "0x699300", VA = "0x699300")]
		public static void SetGravityForPopups(int gravity)
		{
		}

		[Token(Token = "0x6001126")]
		[Address(RVA = "0x699540", Offset = "0x699540", VA = "0x699540")]
		public static void GetCurrentPlayer([Optional] OnRetrievedCurrentPlayer onGetPlayerComplete)
		{
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0x6996FC", Offset = "0x6996FC", VA = "0x6996FC")]
		public static void UnlockAchievement(string achievementID, [Optional] OnUnlockAchievementComplete onComplete)
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0x699904", Offset = "0x699904", VA = "0x699904")]
		public static void SubmitScore(string leaderboardID, long score, [Optional] OnSubmitScoreComplete onSubmitScoreComplete)
		{
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0x699B88", Offset = "0x699B88", VA = "0x699B88")]
		public static void ShowAchievements([Optional] OnShowAchievementsComplete onShowAchievementsComplete)
		{
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0x699D44", Offset = "0x699D44", VA = "0x699D44")]
		public static void ShowLeaderboards([Optional] OnShowLeaderboardsComplete onShowLeaderboardsComplete)
		{
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0x699F00", Offset = "0x699F00", VA = "0x699F00")]
		private void ConnectedEventSnapshot(string id)
		{
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0x69A0C0", Offset = "0x69A0C0", VA = "0x69A0C0")]
		private void SnapshotsSignInResult(string param)
		{
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0x69A278", Offset = "0x69A278", VA = "0x69A278")]
		private void SnapshotsSignOutResult(string param)
		{
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0x69A430", Offset = "0x69A430", VA = "0x69A430")]
		private void SnapshotsLoadResult(string param)
		{
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0x69B57C", Offset = "0x69B57C", VA = "0x69B57C")]
		private void SnapshotsOpenResult(string param)
		{
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0x69B890", Offset = "0x69B890", VA = "0x69B890")]
		private void SnapshotsSelectResult(string param)
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0x69BCE8", Offset = "0x69BCE8", VA = "0x69BCE8")]
		private void SnapshotsCommitResult(string param)
		{
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0x69BFFC", Offset = "0x69BFFC", VA = "0x69BFFC")]
		private void SnapshotsDiscardResult(string param)
		{
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0x69C1B4", Offset = "0x69C1B4", VA = "0x69C1B4")]
		private void SnapshotsCloneResult(string param)
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0x69C4C8", Offset = "0x69C4C8", VA = "0x69C4C8")]
		private void GamesGetPlayer(string param)
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0x69C7DC", Offset = "0x69C7DC", VA = "0x69C7DC")]
		private void GamesUnlockResult(string param)
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0x69C994", Offset = "0x69C994", VA = "0x69C994")]
		private void GamesSubmitScoreResult(string id)
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0x69CB4C", Offset = "0x69CB4C", VA = "0x69CB4C")]
		private void GamesShowAchievementsResult(string param)
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0x69CD04", Offset = "0x69CD04", VA = "0x69CD04")]
		private void GamesShowLeaderboardsResult(string param)
		{
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0x69CEBC", Offset = "0x69CEBC", VA = "0x69CEBC")]
		private AndroidJavaObject CollectReturnObject(string id)
		{
			return null;
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0x69D144", Offset = "0x69D144", VA = "0x69D144")]
		private static object ParseInt(string s)
		{
			return null;
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0x69D1C4", Offset = "0x69D1C4", VA = "0x69D1C4")]
		private static object ParseBool(string s)
		{
			return null;
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0x69A744", Offset = "0x69A744", VA = "0x69A744")]
		private void ProcessMixedResult(string eventName, string param, Func<AndroidJavaObject, IDisposable> constructReferenceType, params Func<string, object>[] deserializeValueTypes)
		{
		}

		[Token(Token = "0x600113D")]
		private void ProcessSerializedResult<T>(string eventName, string param, Func<string, T> deserialize)
		{
		}

		[Token(Token = "0x600113E")]
		private void ProcessEvent<T>(string eventName, string id, Func<AndroidJavaObject, T> construct, Action<T> subscribers) where T : class, IDisposable
		{
		}
	}
	[Token(Token = "0x200022E")]
	public static class CommonStatusCodes
	{
		[Token(Token = "0x4000BEB")]
		public const int SUCCESS_CACHE = -1;

		[Token(Token = "0x4000BEC")]
		public const int SUCCESS = 0;

		[Token(Token = "0x4000BED")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE9F15C", Offset = "0xE9F15C")]
		public const int SERVICE_VERSION_UPDATE_REQUIRED = 2;

		[Token(Token = "0x4000BEE")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xE9F16C", Offset = "0xE9F16C")]
		public const int SERVICE_DISABLED = 3;

		[Token(Token = "0x4000BEF")]
		public const int SIGN_IN_REQUIRED = 4;

		[Token(Token = "0x4000BF0")]
		public const int INVALID_ACCOUNT = 5;

		[Token(Token = "0x4000BF1")]
		public const int RESOLUTION_REQUIRED = 6;

		[Token(Token = "0x4000BF2")]
		public const int NETWORK_ERROR = 7;

		[Token(Token = "0x4000BF3")]
		public const int INTERNAL_ERROR = 8;

		[Token(Token = "0x4000BF4")]
		public const int DEVELOPER_ERROR = 10;

		[Token(Token = "0x4000BF5")]
		public const int CANCELED = 13;

		[Token(Token = "0x4000BF6")]
		public const int TIMEOUT = 14;

		[Token(Token = "0x4000BF7")]
		public const int INTERRUPTED = 15;

		[Token(Token = "0x4000BF8")]
		public const int API_UNAVAILABLE = 16;

		[Token(Token = "0x4000BF9")]
		public const int DEAD_CLIENT = 18;

		[Token(Token = "0x6001173")]
		[Address(RVA = "0x691C4C", Offset = "0x691C4C", VA = "0x691C4C")]
		public static bool IsSuccess(int statusCode)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200022F")]
	public static class GoogleSignInStatusCodes
	{
		[Token(Token = "0x4000BFA")]
		public const int SIGN_IN_CANCELLED = 12501;

		[Token(Token = "0x4000BFB")]
		public const int SIGN_IN_CURRENTLY_IN_PROGRESS = 12502;

		[Token(Token = "0x4000BFC")]
		public const int SIGN_IN_FAILED = 12500;
	}
	[Token(Token = "0x2000230")]
	public static class ActivityResultCodes
	{
		[Token(Token = "0x4000BFD")]
		public const int RESULT_OK = -1;

		[Token(Token = "0x4000BFE")]
		public const int RESULT_CANCELED = 0;
	}
	[Token(Token = "0x2000231")]
	public static class GamesActivityResultCodes
	{
		[Token(Token = "0x4000BFF")]
		public const int RESULT_APP_MISCONFIGURED = 10004;

		[Token(Token = "0x4000C00")]
		public const int RESULT_INVALID_ROOM = 10008;

		[Token(Token = "0x4000C01")]
		public const int RESULT_LEFT_ROOM = 10005;

		[Token(Token = "0x4000C02")]
		public const int RESULT_LICENSE_FAILED = 10003;

		[Token(Token = "0x4000C03")]
		public const int RESULT_NETWORK_FAILURE = 10006;

		[Token(Token = "0x4000C04")]
		public const int RESULT_RECONNECT_REQUIRED = 10001;

		[Token(Token = "0x4000C05")]
		public const int RESULT_SEND_REQUEST_FAILED = 10007;

		[Token(Token = "0x4000C06")]
		public const int RESULT_SIGN_IN_FAILED = 10002;
	}
}
namespace Steamworks
{
	[Token(Token = "0x2000232")]
	public static class SteamAppList
	{
		[Token(Token = "0x6001174")]
		[Address(RVA = "0x18E43D8", Offset = "0x18E43D8", VA = "0x18E43D8")]
		public static uint GetNumInstalledApps()
		{
			return default(uint);
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0x18E43FC", Offset = "0x18E43FC", VA = "0x18E43FC")]
		public static uint GetInstalledApps(AppId_t[] pvecAppID, uint unMaxAppIDs)
		{
			return default(uint);
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0x18E4430", Offset = "0x18E4430", VA = "0x18E4430")]
		public static int GetAppName(AppId_t nAppID, out string pchName, int cchNameMax)
		{
			return default(int);
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0x18E4558", Offset = "0x18E4558", VA = "0x18E4558")]
		public static int GetAppInstallDir(AppId_t nAppID, out string pchDirectory, int cchNameMax)
		{
			return default(int);
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0x18E4680", Offset = "0x18E4680", VA = "0x18E4680")]
		public static int GetAppBuildId(AppId_t nAppID)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000233")]
	public static class SteamApps
	{
		[Token(Token = "0x6001179")]
		[Address(RVA = "0x18E46AC", Offset = "0x18E46AC", VA = "0x18E46AC")]
		public static bool BIsSubscribed()
		{
			return default(bool);
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x18E46D0", Offset = "0x18E46D0", VA = "0x18E46D0")]
		public static bool BIsLowViolence()
		{
			return default(bool);
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0x18E46F4", Offset = "0x18E46F4", VA = "0x18E46F4")]
		public static bool BIsCybercafe()
		{
			return default(bool);
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0x18E4718", Offset = "0x18E4718", VA = "0x18E4718")]
		public static bool BIsVACBanned()
		{
			return default(bool);
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0x18E473C", Offset = "0x18E473C", VA = "0x18E473C")]
		public static string GetCurrentGameLanguage()
		{
			return null;
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0x18E4760", Offset = "0x18E4760", VA = "0x18E4760")]
		public static string GetAvailableGameLanguages()
		{
			return null;
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0x18E4784", Offset = "0x18E4784", VA = "0x18E4784")]
		public static bool BIsSubscribedApp(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0x18E47B0", Offset = "0x18E47B0", VA = "0x18E47B0")]
		public static bool BIsDlcInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x18E47DC", Offset = "0x18E47DC", VA = "0x18E47DC")]
		public static uint GetEarliestPurchaseUnixTime(AppId_t nAppID)
		{
			return default(uint);
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0x18E4808", Offset = "0x18E4808", VA = "0x18E4808")]
		public static bool BIsSubscribedFromFreeWeekend()
		{
			return default(bool);
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0x18E482C", Offset = "0x18E482C", VA = "0x18E482C")]
		public static int GetDLCCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0x18E4850", Offset = "0x18E4850", VA = "0x18E4850")]
		public static bool BGetDLCDataByIndex(int iDLC, out AppId_t pAppID, out bool pbAvailable, out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0x18E4980", Offset = "0x18E4980", VA = "0x18E4980")]
		public static void InstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0x18E49AC", Offset = "0x18E49AC", VA = "0x18E49AC")]
		public static void UninstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0x18E49D8", Offset = "0x18E49D8", VA = "0x18E49D8")]
		public static void RequestAppProofOfPurchaseKey(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0x18E4A04", Offset = "0x18E4A04", VA = "0x18E4A04")]
		public static bool GetCurrentBetaName(out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0x18E4B1C", Offset = "0x18E4B1C", VA = "0x18E4B1C")]
		public static bool MarkContentCorrupt(bool bMissingFilesOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0x18E4B48", Offset = "0x18E4B48", VA = "0x18E4B48")]
		public static uint GetInstalledDepots(AppId_t appID, DepotId_t[] pvecDepots, uint cMaxDepots)
		{
			return default(uint);
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0x18E4B90", Offset = "0x18E4B90", VA = "0x18E4B90")]
		public static uint GetAppInstallDir(AppId_t appID, out string pchFolder, uint cchFolderBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0x18E4CB8", Offset = "0x18E4CB8", VA = "0x18E4CB8")]
		public static bool BIsAppInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0x18E4CE4", Offset = "0x18E4CE4", VA = "0x18E4CE4")]
		public static CSteamID GetAppOwner()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0x18E4DA0", Offset = "0x18E4DA0", VA = "0x18E4DA0")]
		public static string GetLaunchQueryParam(string pchKey)
		{
			return null;
		}
	}
	[Token(Token = "0x2000234")]
	public static class SteamClient
	{
		[Token(Token = "0x600118F")]
		[Address(RVA = "0x18E4DCC", Offset = "0x18E4DCC", VA = "0x18E4DCC")]
		public static HSteamPipe CreateSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0x18E4E00", Offset = "0x18E4E00", VA = "0x18E4E00")]
		public static bool BReleaseSteamPipe(HSteamPipe hSteamPipe)
		{
			return default(bool);
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0x18E4E2C", Offset = "0x18E4E2C", VA = "0x18E4E2C")]
		public static HSteamUser ConnectToGlobalUser(HSteamPipe hSteamPipe)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0x18E4E68", Offset = "0x18E4E68", VA = "0x18E4E68")]
		public static HSteamUser CreateLocalUser(out HSteamPipe phSteamPipe, EAccountType eAccountType)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0x18E4EAC", Offset = "0x18E4EAC", VA = "0x18E4EAC")]
		public static void ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser)
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0x18E4EE0", Offset = "0x18E4EE0", VA = "0x18E4EE0")]
		public static IntPtr GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0x18E4F28", Offset = "0x18E4F28", VA = "0x18E4F28")]
		public static IntPtr GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0x18E4F70", Offset = "0x18E4F70", VA = "0x18E4F70")]
		public static void SetLocalIPBinding(uint unIP, ushort usPort)
		{
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0x18E4FA4", Offset = "0x18E4FA4", VA = "0x18E4FA4")]
		public static IntPtr GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0x18E4FEC", Offset = "0x18E4FEC", VA = "0x18E4FEC")]
		public static IntPtr GetISteamUtils(HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0x18E5020", Offset = "0x18E5020", VA = "0x18E5020")]
		public static IntPtr GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0x18E5068", Offset = "0x18E5068", VA = "0x18E5068")]
		public static IntPtr GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0x18E50B0", Offset = "0x18E50B0", VA = "0x18E50B0")]
		public static IntPtr GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0x18E50F8", Offset = "0x18E50F8", VA = "0x18E50F8")]
		public static IntPtr GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0x18E5140", Offset = "0x18E5140", VA = "0x18E5140")]
		public static IntPtr GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0x18E5188", Offset = "0x18E5188", VA = "0x18E5188")]
		public static IntPtr GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0x18E51D0", Offset = "0x18E51D0", VA = "0x18E51D0")]
		public static IntPtr GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0x18E5218", Offset = "0x18E5218", VA = "0x18E5218")]
		public static IntPtr GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0x18E5260", Offset = "0x18E5260", VA = "0x18E5260")]
		public static IntPtr GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0x18E52A8", Offset = "0x18E52A8", VA = "0x18E52A8")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0x18E52CC", Offset = "0x18E52CC", VA = "0x18E52CC")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0x18E52F0", Offset = "0x18E52F0", VA = "0x18E52F0")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0x18E531C", Offset = "0x18E531C", VA = "0x18E531C")]
		public static bool BShutdownIfAllPipesClosed()
		{
			return default(bool);
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0x18E5340", Offset = "0x18E5340", VA = "0x18E5340")]
		public static IntPtr GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0x18E5388", Offset = "0x18E5388", VA = "0x18E5388")]
		public static IntPtr GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0x18E53D0", Offset = "0x18E53D0", VA = "0x18E53D0")]
		public static IntPtr GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0x18E5418", Offset = "0x18E5418", VA = "0x18E5418")]
		public static IntPtr GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0x18E5460", Offset = "0x18E5460", VA = "0x18E5460")]
		public static IntPtr GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0x18E54A8", Offset = "0x18E54A8", VA = "0x18E54A8")]
		public static IntPtr GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0x18E54F0", Offset = "0x18E54F0", VA = "0x18E54F0")]
		public static IntPtr GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0x18E5538", Offset = "0x18E5538", VA = "0x18E5538")]
		public static IntPtr GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0x18E5580", Offset = "0x18E5580", VA = "0x18E5580")]
		public static void Set_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func)
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0x18E55AC", Offset = "0x18E55AC", VA = "0x18E55AC")]
		public static void Remove_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func)
		{
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0x18E55D8", Offset = "0x18E55D8", VA = "0x18E55D8")]
		public static void Set_SteamAPI_CCheckCallbackRegisteredInProcess(SteamAPI_CheckCallbackRegistered_t func)
		{
		}
	}
	[Token(Token = "0x2000235")]
	public static class SteamController
	{
		[Token(Token = "0x60011B1")]
		[Address(RVA = "0x18E5604", Offset = "0x18E5604", VA = "0x18E5604")]
		public static bool Init(string pchAbsolutePathToControllerConfigVDF)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x18E5630", Offset = "0x18E5630", VA = "0x18E5630")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0x18E5654", Offset = "0x18E5654", VA = "0x18E5654")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0x18E5678", Offset = "0x18E5678", VA = "0x18E5678")]
		public static bool GetControllerState(uint unControllerIndex, out SteamControllerState_t pState)
		{
			return default(bool);
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0x18E56AC", Offset = "0x18E56AC", VA = "0x18E56AC")]
		public static void TriggerHapticPulse(uint unControllerIndex, ESteamControllerPad eTargetPad, ushort usDurationMicroSec)
		{
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0x18E56F4", Offset = "0x18E56F4", VA = "0x18E56F4")]
		public static void SetOverrideMode(string pchMode)
		{
		}
	}
	[Token(Token = "0x2000236")]
	public static class SteamFriends
	{
		[Token(Token = "0x60011B7")]
		[Address(RVA = "0x18E59E4", Offset = "0x18E59E4", VA = "0x18E59E4")]
		public static string GetPersonaName()
		{
			return null;
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0x18E5A08", Offset = "0x18E5A08", VA = "0x18E5A08")]
		public static SteamAPICall_t SetPersonaName(string pchPersonaName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0x18E5AAC", Offset = "0x18E5AAC", VA = "0x18E5AAC")]
		public static EPersonaState GetPersonaState()
		{
			return default(EPersonaState);
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0x18E5AD0", Offset = "0x18E5AD0", VA = "0x18E5AD0")]
		public static int GetFriendCount(EFriendFlags iFriendFlags)
		{
			return default(int);
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x18E5AFC", Offset = "0x18E5AFC", VA = "0x18E5AFC")]
		public static CSteamID GetFriendByIndex(int iFriend, EFriendFlags iFriendFlags)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0x18E5BC8", Offset = "0x18E5BC8", VA = "0x18E5BC8")]
		public static EFriendRelationship GetFriendRelationship(CSteamID steamIDFriend)
		{
			return default(EFriendRelationship);
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0x18E5C08", Offset = "0x18E5C08", VA = "0x18E5C08")]
		public static EPersonaState GetFriendPersonaState(CSteamID steamIDFriend)
		{
			return default(EPersonaState);
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0x18E5C48", Offset = "0x18E5C48", VA = "0x18E5C48")]
		public static string GetFriendPersonaName(CSteamID steamIDFriend)
		{
			return null;
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0x18E5C88", Offset = "0x18E5C88", VA = "0x18E5C88")]
		public static bool GetFriendGamePlayed(CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0x18E5CCC", Offset = "0x18E5CCC", VA = "0x18E5CCC")]
		public static string GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName)
		{
			return null;
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0x18E5D10", Offset = "0x18E5D10", VA = "0x18E5D10")]
		public static string GetPlayerNickname(CSteamID steamIDPlayer)
		{
			return null;
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0x18E5D50", Offset = "0x18E5D50", VA = "0x18E5D50")]
		public static bool HasFriend(CSteamID steamIDFriend, EFriendFlags iFriendFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0x18E5D94", Offset = "0x18E5D94", VA = "0x18E5D94")]
		public static int GetClanCount()
		{
			return default(int);
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0x18E5DB8", Offset = "0x18E5DB8", VA = "0x18E5DB8")]
		public static CSteamID GetClanByIndex(int iClan)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0x18E5E7C", Offset = "0x18E5E7C", VA = "0x18E5E7C")]
		public static string GetClanName(CSteamID steamIDClan)
		{
			return null;
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0x18E5EBC", Offset = "0x18E5EBC", VA = "0x18E5EBC")]
		public static string GetClanTag(CSteamID steamIDClan)
		{
			return null;
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0x18E5EFC", Offset = "0x18E5EFC", VA = "0x18E5EFC")]
		public static bool GetClanActivityCounts(CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0x18E5F44", Offset = "0x18E5F44", VA = "0x18E5F44")]
		public static SteamAPICall_t DownloadClanActivityCounts(CSteamID[] psteamIDClans, int cClansToRequest)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x18E5FF0", Offset = "0x18E5FF0", VA = "0x18E5FF0")]
		public static int GetFriendCountFromSource(CSteamID steamIDSource)
		{
			return default(int);
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x18E6030", Offset = "0x18E6030", VA = "0x18E6030")]
		public static CSteamID GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x18E6104", Offset = "0x18E6104", VA = "0x18E6104")]
		public static bool IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource)
		{
			return default(bool);
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x18E614C", Offset = "0x18E614C", VA = "0x18E614C")]
		public static void SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking)
		{
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x18E6190", Offset = "0x18E6190", VA = "0x18E6190")]
		public static void ActivateGameOverlay(string pchDialog)
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0x18E61BC", Offset = "0x18E61BC", VA = "0x18E61BC")]
		public static void ActivateGameOverlayToUser(string pchDialog, CSteamID steamID)
		{
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0x18E6204", Offset = "0x18E6204", VA = "0x18E6204")]
		public static void ActivateGameOverlayToWebPage(string pchURL)
		{
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0x18E6230", Offset = "0x18E6230", VA = "0x18E6230")]
		public static void ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag)
		{
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0x18E6264", Offset = "0x18E6264", VA = "0x18E6264")]
		public static void SetPlayedWith(CSteamID steamIDUserPlayedWith)
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0x18E62A4", Offset = "0x18E62A4", VA = "0x18E62A4")]
		public static void ActivateGameOverlayInviteDialog(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0x18E62E4", Offset = "0x18E62E4", VA = "0x18E62E4")]
		public static int GetSmallFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x18E6324", Offset = "0x18E6324", VA = "0x18E6324")]
		public static int GetMediumFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0x18E6364", Offset = "0x18E6364", VA = "0x18E6364")]
		public static int GetLargeFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0x18E63A4", Offset = "0x18E63A4", VA = "0x18E63A4")]
		public static bool RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0x18E63E8", Offset = "0x18E63E8", VA = "0x18E63E8")]
		public static SteamAPICall_t RequestClanOfficerList(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0x18E64A0", Offset = "0x18E64A0", VA = "0x18E64A0")]
		public static CSteamID GetClanOwner(CSteamID steamIDClan)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x18E656C", Offset = "0x18E656C", VA = "0x18E656C")]
		public static int GetClanOfficerCount(CSteamID steamIDClan)
		{
			return default(int);
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0x18E65AC", Offset = "0x18E65AC", VA = "0x18E65AC")]
		public static CSteamID GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x18E6680", Offset = "0x18E6680", VA = "0x18E6680")]
		public static uint GetUserRestrictions()
		{
			return default(uint);
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0x18E66A4", Offset = "0x18E66A4", VA = "0x18E66A4")]
		public static bool SetRichPresence(string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0x18E66D8", Offset = "0x18E66D8", VA = "0x18E66D8")]
		public static void ClearRichPresence()
		{
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0x18E66FC", Offset = "0x18E66FC", VA = "0x18E66FC")]
		public static string GetFriendRichPresence(CSteamID steamIDFriend, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0x18E6740", Offset = "0x18E6740", VA = "0x18E6740")]
		public static int GetFriendRichPresenceKeyCount(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0x18E6780", Offset = "0x18E6780", VA = "0x18E6780")]
		public static string GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey)
		{
			return null;
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0x18E67C4", Offset = "0x18E67C4", VA = "0x18E67C4")]
		public static void RequestFriendRichPresence(CSteamID steamIDFriend)
		{
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0x18E6804", Offset = "0x18E6804", VA = "0x18E6804")]
		public static bool InviteUserToGame(CSteamID steamIDFriend, string pchConnectString)
		{
			return default(bool);
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0x18E6848", Offset = "0x18E6848", VA = "0x18E6848")]
		public static int GetCoplayFriendCount()
		{
			return default(int);
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0x18E686C", Offset = "0x18E686C", VA = "0x18E686C")]
		public static CSteamID GetCoplayFriend(int iCoplayFriend)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0x18E6930", Offset = "0x18E6930", VA = "0x18E6930")]
		public static int GetFriendCoplayTime(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0x18E6970", Offset = "0x18E6970", VA = "0x18E6970")]
		public static AppId_t GetFriendCoplayGame(CSteamID steamIDFriend)
		{
			return default(AppId_t);
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0x18E6A2C", Offset = "0x18E6A2C", VA = "0x18E6A2C")]
		public static SteamAPICall_t JoinClanChatRoom(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0x18E6AE4", Offset = "0x18E6AE4", VA = "0x18E6AE4")]
		public static bool LeaveClanChatRoom(CSteamID steamIDClan)
		{
			return default(bool);
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0x18E6B24", Offset = "0x18E6B24", VA = "0x18E6B24")]
		public static int GetClanChatMemberCount(CSteamID steamIDClan)
		{
			return default(int);
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0x18E6B64", Offset = "0x18E6B64", VA = "0x18E6B64")]
		public static CSteamID GetChatMemberByIndex(CSteamID steamIDClan, int iUser)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0x18E6C38", Offset = "0x18E6C38", VA = "0x18E6C38")]
		public static bool SendClanChatMessage(CSteamID steamIDClanChat, string pchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0x18E6C7C", Offset = "0x18E6C7C", VA = "0x18E6C7C")]
		public static int GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, out string prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter)
		{
			return default(int);
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0x18E6DC4", Offset = "0x18E6DC4", VA = "0x18E6DC4")]
		public static bool IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser)
		{
			return default(bool);
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0x18E6E0C", Offset = "0x18E6E0C", VA = "0x18E6E0C")]
		public static bool IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0x18E6E4C", Offset = "0x18E6E4C", VA = "0x18E6E4C")]
		public static bool OpenClanChatWindowInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F0")]
		[Address(RVA = "0x18E6E8C", Offset = "0x18E6E8C", VA = "0x18E6E8C")]
		public static bool CloseClanChatWindowInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0x18E6ECC", Offset = "0x18E6ECC", VA = "0x18E6ECC")]
		public static bool SetListenForFriendsMessages(bool bInterceptEnabled)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0x18E6EF8", Offset = "0x18E6EF8", VA = "0x18E6EF8")]
		public static bool ReplyToFriendMessage(CSteamID steamIDFriend, string pchMsgToSend)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0x18E6F3C", Offset = "0x18E6F3C", VA = "0x18E6F3C")]
		public static int GetFriendMessage(CSteamID steamIDFriend, int iMessageID, out string pvData, int cubData, out EChatEntryType peChatEntryType)
		{
			return default(int);
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0x18E707C", Offset = "0x18E707C", VA = "0x18E707C")]
		public static SteamAPICall_t GetFollowerCount(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0x18E7134", Offset = "0x18E7134", VA = "0x18E7134")]
		public static SteamAPICall_t IsFollowing(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0x18E71EC", Offset = "0x18E71EC", VA = "0x18E71EC")]
		public static SteamAPICall_t EnumerateFollowingList(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000237")]
	public static class SteamGameServer
	{
		[Token(Token = "0x60011F7")]
		[Address(RVA = "0x18E7290", Offset = "0x18E7290", VA = "0x18E7290")]
		public static bool InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId_t nGameAppId, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0x18E72E0", Offset = "0x18E72E0", VA = "0x18E72E0")]
		public static void SetProduct(string pszProduct)
		{
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0x18E730C", Offset = "0x18E730C", VA = "0x18E730C")]
		public static void SetGameDescription(string pszGameDescription)
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0x18E7338", Offset = "0x18E7338", VA = "0x18E7338")]
		public static void SetModDir(string pszModDir)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x18E7364", Offset = "0x18E7364", VA = "0x18E7364")]
		public static void SetDedicatedServer(bool bDedicated)
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x18E7390", Offset = "0x18E7390", VA = "0x18E7390")]
		public static void LogOn(string pszToken)
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x18E73BC", Offset = "0x18E73BC", VA = "0x18E73BC")]
		public static void LogOnAnonymous()
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0x18E73E0", Offset = "0x18E73E0", VA = "0x18E73E0")]
		public static void LogOff()
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x18E7404", Offset = "0x18E7404", VA = "0x18E7404")]
		public static bool BLoggedOn()
		{
			return default(bool);
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0x18E7428", Offset = "0x18E7428", VA = "0x18E7428")]
		public static bool BSecure()
		{
			return default(bool);
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0x18E744C", Offset = "0x18E744C", VA = "0x18E744C")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0x18E7508", Offset = "0x18E7508", VA = "0x18E7508")]
		public static bool WasRestartRequested()
		{
			return default(bool);
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0x18E752C", Offset = "0x18E752C", VA = "0x18E752C")]
		public static void SetMaxPlayerCount(int cPlayersMax)
		{
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0x18E7558", Offset = "0x18E7558", VA = "0x18E7558")]
		public static void SetBotPlayerCount(int cBotplayers)
		{
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0x18E7584", Offset = "0x18E7584", VA = "0x18E7584")]
		public static void SetServerName(string pszServerName)
		{
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0x18E75B0", Offset = "0x18E75B0", VA = "0x18E75B0")]
		public static void SetMapName(string pszMapName)
		{
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0x18E75DC", Offset = "0x18E75DC", VA = "0x18E75DC")]
		public static void SetPasswordProtected(bool bPasswordProtected)
		{
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0x18E7608", Offset = "0x18E7608", VA = "0x18E7608")]
		public static void SetSpectatorPort(ushort unSpectatorPort)
		{
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0x18E7634", Offset = "0x18E7634", VA = "0x18E7634")]
		public static void SetSpectatorServerName(string pszSpectatorServerName)
		{
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0x18E7660", Offset = "0x18E7660", VA = "0x18E7660")]
		public static void ClearAllKeyValues()
		{
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0x18E7684", Offset = "0x18E7684", VA = "0x18E7684")]
		public static void SetKeyValue(string pKey, string pValue)
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0x18E76B8", Offset = "0x18E76B8", VA = "0x18E76B8")]
		public static void SetGameTags(string pchGameTags)
		{
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0x18E76E4", Offset = "0x18E76E4", VA = "0x18E76E4")]
		public static void SetGameData(string pchGameData)
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0x18E7710", Offset = "0x18E7710", VA = "0x18E7710")]
		public static void SetRegion(string pszRegion)
		{
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0x18E773C", Offset = "0x18E773C", VA = "0x18E773C")]
		public static bool SendUserConnectAndAuthenticate(uint unIPClient, byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser)
		{
			return default(bool);
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0x18E7788", Offset = "0x18E7788", VA = "0x18E7788")]
		public static CSteamID CreateUnauthenticatedUserConnection()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0x18E7844", Offset = "0x18E7844", VA = "0x18E7844")]
		public static void SendUserDisconnect(CSteamID steamIDUser)
		{
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0x18E7884", Offset = "0x18E7884", VA = "0x18E7884")]
		public static bool BUpdateUserData(CSteamID steamIDUser, string pchPlayerName, uint uScore)
		{
			return default(bool);
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0x18E78CC", Offset = "0x18E78CC", VA = "0x18E78CC")]
		public static HAuthTicket GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0x18E7990", Offset = "0x18E7990", VA = "0x18E7990")]
		public static EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID)
		{
			return default(EBeginAuthSessionResult);
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0x18E79D8", Offset = "0x18E79D8", VA = "0x18E79D8")]
		public static void EndAuthSession(CSteamID steamID)
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0x18E7A18", Offset = "0x18E7A18", VA = "0x18E7A18")]
		public static void CancelAuthTicket(HAuthTicket hAuthTicket)
		{
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0x18E7A44", Offset = "0x18E7A44", VA = "0x18E7A44")]
		public static EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamID steamID, AppId_t appID)
		{
			return default(EUserHasLicenseForAppResult);
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0x18E7A88", Offset = "0x18E7A88", VA = "0x18E7A88")]
		public static bool RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup)
		{
			return default(bool);
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0x18E7AD0", Offset = "0x18E7AD0", VA = "0x18E7AD0")]
		public static void GetGameplayStats()
		{
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0x18E7AF4", Offset = "0x18E7AF4", VA = "0x18E7AF4")]
		public static SteamAPICall_t GetServerReputation()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0x18E7B90", Offset = "0x18E7B90", VA = "0x18E7B90")]
		public static uint GetPublicIP()
		{
			return default(uint);
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0x18E7BB4", Offset = "0x18E7BB4", VA = "0x18E7BB4")]
		public static bool HandleIncomingPacket(byte[] pData, int cbData, uint srcIP, ushort srcPort)
		{
			return default(bool);
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0x18E7C00", Offset = "0x18E7C00", VA = "0x18E7C00")]
		public static int GetNextOutgoingPacket(byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
		{
			return default(int);
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0x18E7C4C", Offset = "0x18E7C4C", VA = "0x18E7C4C")]
		public static void EnableHeartbeats(bool bActive)
		{
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0x18E7C78", Offset = "0x18E7C78", VA = "0x18E7C78")]
		public static void SetHeartbeatInterval(int iHeartbeatInterval)
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0x18E7CA4", Offset = "0x18E7CA4", VA = "0x18E7CA4")]
		public static void ForceHeartbeat()
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0x18E7CC8", Offset = "0x18E7CC8", VA = "0x18E7CC8")]
		public static SteamAPICall_t AssociateWithClan(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0x18E7D80", Offset = "0x18E7D80", VA = "0x18E7D80")]
		public static SteamAPICall_t ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000238")]
	public static class SteamGameServerHTTP
	{
		[Token(Token = "0x6001223")]
		[Address(RVA = "0x18E7E38", Offset = "0x18E7E38", VA = "0x18E7E38")]
		public static HTTPRequestHandle CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0x18E7E6C", Offset = "0x18E7E6C", VA = "0x18E7E6C")]
		public static bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0x18E7EB4", Offset = "0x18E7EB4", VA = "0x18E7EB4")]
		public static bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0x18E7EE8", Offset = "0x18E7EE8", VA = "0x18E7EE8")]
		public static bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0x18E7F30", Offset = "0x18E7F30", VA = "0x18E7F30")]
		public static bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0x18E7F78", Offset = "0x18E7F78", VA = "0x18E7F78")]
		public static bool SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0x18E7FAC", Offset = "0x18E7FAC", VA = "0x18E7FAC")]
		public static bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0x18E7FE0", Offset = "0x18E7FE0", VA = "0x18E7FE0")]
		public static bool DeferHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0x18E800C", Offset = "0x18E800C", VA = "0x18E800C")]
		public static bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0x18E8038", Offset = "0x18E8038", VA = "0x18E8038")]
		public static bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0x18E8080", Offset = "0x18E8080", VA = "0x18E8080")]
		public static bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0x18E80CC", Offset = "0x18E80CC", VA = "0x18E80CC")]
		public static bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize)
		{
			return default(bool);
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0x18E8100", Offset = "0x18E8100", VA = "0x18E8100")]
		public static bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0x18E8148", Offset = "0x18E8148", VA = "0x18E8148")]
		public static bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0x18E8194", Offset = "0x18E8194", VA = "0x18E8194")]
		public static bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0x18E81C0", Offset = "0x18E81C0", VA = "0x18E81C0")]
		public static bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0x18E81F4", Offset = "0x18E81F4", VA = "0x18E81F4")]
		public static bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000239")]
	public static class SteamGameServerNetworking
	{
		[Token(Token = "0x6001234")]
		[Address(RVA = "0x18E8240", Offset = "0x18E8240", VA = "0x18E8240")]
		public static bool SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0x18E8290", Offset = "0x18E8290", VA = "0x18E8290")]
		public static bool IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0x18E82C4", Offset = "0x18E82C4", VA = "0x18E82C4")]
		public static bool ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0x18E8314", Offset = "0x18E8314", VA = "0x18E8314")]
		public static bool AcceptP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0x18E8354", Offset = "0x18E8354", VA = "0x18E8354")]
		public static bool CloseP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0x18E8394", Offset = "0x18E8394", VA = "0x18E8394")]
		public static bool CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)
		{
			return default(bool);
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0x18E83D8", Offset = "0x18E83D8", VA = "0x18E83D8")]
		public static bool GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)
		{
			return default(bool);
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0x18E841C", Offset = "0x18E841C", VA = "0x18E841C")]
		public static bool AllowP2PPacketRelay(bool bAllow)
		{
			return default(bool);
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0x18E8448", Offset = "0x18E8448", VA = "0x18E8448")]
		public static SNetListenSocket_t CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0x18E8494", Offset = "0x18E8494", VA = "0x18E8494")]
		public static SNetSocket_t CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0x18E84DC", Offset = "0x18E84DC", VA = "0x18E84DC")]
		public static SNetSocket_t CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0x18E8524", Offset = "0x18E8524", VA = "0x18E8524")]
		public static bool DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0x18E8558", Offset = "0x18E8558", VA = "0x18E8558")]
		public static bool DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0x18E858C", Offset = "0x18E858C", VA = "0x18E858C")]
		public static bool SendDataOnSocket(SNetSocket_t hSocket, IntPtr pubData, uint cubData, bool bReliable)
		{
			return default(bool);
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0x18E85D8", Offset = "0x18E85D8", VA = "0x18E85D8")]
		public static bool IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0x18E860C", Offset = "0x18E860C", VA = "0x18E860C")]
		public static bool RetrieveDataFromSocket(SNetSocket_t hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0x18E8658", Offset = "0x18E8658", VA = "0x18E8658")]
		public static bool IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0x18E86A0", Offset = "0x18E86A0", VA = "0x18E86A0")]
		public static bool RetrieveData(SNetListenSocket_t hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0x18E86F0", Offset = "0x18E86F0", VA = "0x18E86F0")]
		public static bool GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0x18E8740", Offset = "0x18E8740", VA = "0x18E8740")]
		public static bool GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0x18E8788", Offset = "0x18E8788", VA = "0x18E8788")]
		public static ESNetSocketConnectionType GetSocketConnectionType(SNetSocket_t hSocket)
		{
			return default(ESNetSocketConnectionType);
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0x18E87B4", Offset = "0x18E87B4", VA = "0x18E87B4")]
		public static int GetMaxPacketSize(SNetSocket_t hSocket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200023A")]
	public static class SteamGameServerStats
	{
		[Token(Token = "0x600124A")]
		[Address(RVA = "0x18E87E0", Offset = "0x18E87E0", VA = "0x18E87E0")]
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600124B")]
		[Address(RVA = "0x18E8898", Offset = "0x18E8898", VA = "0x18E8898")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600124C")]
		[Address(RVA = "0x18E88E0", Offset = "0x18E88E0", VA = "0x18E88E0")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0x18E8928", Offset = "0x18E8928", VA = "0x18E8928")]
		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0x18E8970", Offset = "0x18E8970", VA = "0x18E8970")]
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, int nData)
		{
			return default(bool);
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0x18E89B8", Offset = "0x18E89B8", VA = "0x18E89B8")]
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, float fData)
		{
			return default(bool);
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0x18E8A08", Offset = "0x18E8A08", VA = "0x18E8A08")]
		public static bool UpdateUserAvgRateStat(CSteamID steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0x18E8A60", Offset = "0x18E8A60", VA = "0x18E8A60")]
		public static bool SetUserAchievement(CSteamID steamIDUser, string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0x18E8AA4", Offset = "0x18E8AA4", VA = "0x18E8AA4")]
		public static bool ClearUserAchievement(CSteamID steamIDUser, string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0x18E8AE8", Offset = "0x18E8AE8", VA = "0x18E8AE8")]
		public static SteamAPICall_t StoreUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x200023B")]
	public static class SteamGameServerUtils
	{
		[Token(Token = "0x6001254")]
		[Address(RVA = "0x18E8BA0", Offset = "0x18E8BA0", VA = "0x18E8BA0")]
		public static uint GetSecondsSinceAppActive()
		{
			return default(uint);
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0x18E8BC4", Offset = "0x18E8BC4", VA = "0x18E8BC4")]
		public static uint GetSecondsSinceComputerActive()
		{
			return default(uint);
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0x18E8BE8", Offset = "0x18E8BE8", VA = "0x18E8BE8")]
		public static EUniverse GetConnectedUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0x18E8C0C", Offset = "0x18E8C0C", VA = "0x18E8C0C")]
		public static uint GetServerRealTime()
		{
			return default(uint);
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0x18E8C30", Offset = "0x18E8C30", VA = "0x18E8C30")]
		public static string GetIPCountry()
		{
			return null;
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0x18E8C54", Offset = "0x18E8C54", VA = "0x18E8C54")]
		public static bool GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0x18E8C9C", Offset = "0x18E8C9C", VA = "0x18E8C9C")]
		public static bool GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0x18E8CE4", Offset = "0x18E8CE4", VA = "0x18E8CE4")]
		public static bool GetCSERIPPort(out uint unIP, out ushort usPort)
		{
			return default(bool);
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0x18E8D18", Offset = "0x18E8D18", VA = "0x18E8D18")]
		public static byte GetCurrentBatteryPower()
		{
			return default(byte);
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0x18E8D3C", Offset = "0x18E8D3C", VA = "0x18E8D3C")]
		public static AppId_t GetAppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0x18E8DDC", Offset = "0x18E8DDC", VA = "0x18E8DDC")]
		public static void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
		{
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0x18E8E08", Offset = "0x18E8E08", VA = "0x18E8E08")]
		public static bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0x18E8E4C", Offset = "0x18E8E4C", VA = "0x18E8E4C")]
		public static ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
		{
			return default(ESteamAPICallFailure);
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0x18E8E8C", Offset = "0x18E8E8C", VA = "0x18E8E8C")]
		public static bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0x18E8EDC", Offset = "0x18E8EDC", VA = "0x18E8EDC")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0x18E8F00", Offset = "0x18E8F00", VA = "0x18E8F00")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0x18E8F24", Offset = "0x18E8F24", VA = "0x18E8F24")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0x18E8F50", Offset = "0x18E8F50", VA = "0x18E8F50")]
		public static bool IsOverlayEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0x18E8F74", Offset = "0x18E8F74", VA = "0x18E8F74")]
		public static bool BOverlayNeedsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0x18E8F98", Offset = "0x18E8F98", VA = "0x18E8F98")]
		public static SteamAPICall_t CheckFileSignature(string szFileName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0x18E903C", Offset = "0x18E903C", VA = "0x18E903C")]
		public static bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
		{
			return default(bool);
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0x18E908C", Offset = "0x18E908C", VA = "0x18E908C")]
		public static uint GetEnteredGamepadTextLength()
		{
			return default(uint);
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0x18E90B0", Offset = "0x18E90B0", VA = "0x18E90B0")]
		public static bool GetEnteredGamepadTextInput(out string pchText, uint cchText)
		{
			return default(bool);
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0x18E91C8", Offset = "0x18E91C8", VA = "0x18E91C8")]
		public static string GetSteamUILanguage()
		{
			return null;
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0x18E91EC", Offset = "0x18E91EC", VA = "0x18E91EC")]
		public static bool IsSteamRunningInVR()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200023C")]
	public static class SteamHTMLSurface
	{
		[Token(Token = "0x600126D")]
		[Address(RVA = "0x18E9210", Offset = "0x18E9210", VA = "0x18E9210")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0x18E9234", Offset = "0x18E9234", VA = "0x18E9234")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0x18E9258", Offset = "0x18E9258", VA = "0x18E9258")]
		public static SteamAPICall_t CreateBrowser(string pchUserAgent, string pchUserCSS)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0x18E9304", Offset = "0x18E9304", VA = "0x18E9304")]
		public static void RemoveBrowser(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0x18E9330", Offset = "0x18E9330", VA = "0x18E9330")]
		public static void LoadURL(HHTMLBrowser unBrowserHandle, string pchURL, string pchPostData)
		{
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0x18E9378", Offset = "0x18E9378", VA = "0x18E9378")]
		public static void SetSize(HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight)
		{
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0x18E93C0", Offset = "0x18E93C0", VA = "0x18E93C0")]
		public static void StopLoad(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0x18E93EC", Offset = "0x18E93EC", VA = "0x18E93EC")]
		public static void Reload(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0x18E9418", Offset = "0x18E9418", VA = "0x18E9418")]
		public static void GoBack(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0x18E9444", Offset = "0x18E9444", VA = "0x18E9444")]
		public static void GoForward(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0x18E9470", Offset = "0x18E9470", VA = "0x18E9470")]
		public static void AddHeader(HHTMLBrowser unBrowserHandle, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0x18E94B8", Offset = "0x18E94B8", VA = "0x18E94B8")]
		public static void ExecuteJavascript(HHTMLBrowser unBrowserHandle, string pchScript)
		{
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0x18E94EC", Offset = "0x18E94EC", VA = "0x18E94EC")]
		public static void MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0x18E9520", Offset = "0x18E9520", VA = "0x18E9520")]
		public static void MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0x18E9554", Offset = "0x18E9554", VA = "0x18E9554")]
		public static void MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0x18E9588", Offset = "0x18E9588", VA = "0x18E9588")]
		public static void MouseMove(HHTMLBrowser unBrowserHandle, int x, int y)
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0x18E95D0", Offset = "0x18E95D0", VA = "0x18E95D0")]
		public static void MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta)
		{
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0x18E9604", Offset = "0x18E9604", VA = "0x18E9604")]
		public static void KeyDown(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0x18E964C", Offset = "0x18E964C", VA = "0x18E964C")]
		public static void KeyUp(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0x18E9694", Offset = "0x18E9694", VA = "0x18E9694")]
		public static void KeyChar(HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0x18E96DC", Offset = "0x18E96DC", VA = "0x18E96DC")]
		public static void SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll)
		{
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0x18E9710", Offset = "0x18E9710", VA = "0x18E9710")]
		public static void SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll)
		{
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0x18E9744", Offset = "0x18E9744", VA = "0x18E9744")]
		public static void SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)
		{
		}

		[Token(Token = "0x6001284")]
		[Address(RVA = "0x18E9778", Offset = "0x18E9778", VA = "0x18E9778")]
		public static void ViewSource(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0x18E97A4", Offset = "0x18E97A4", VA = "0x18E97A4")]
		public static void CopyToClipboard(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0x18E97D0", Offset = "0x18E97D0", VA = "0x18E97D0")]
		public static void PasteFromClipboard(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6001287")]
		[Address(RVA = "0x18E97FC", Offset = "0x18E97FC", VA = "0x18E97FC")]
		public static void Find(HHTMLBrowser unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse)
		{
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0x18E9848", Offset = "0x18E9848", VA = "0x18E9848")]
		public static void StopFind(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6001289")]
		[Address(RVA = "0x18E9874", Offset = "0x18E9874", VA = "0x18E9874")]
		public static void GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y)
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0x18E98BC", Offset = "0x18E98BC", VA = "0x18E98BC")]
		public static void SetCookie(string pchHostname, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0x18E9904", Offset = "0x18E9904", VA = "0x18E9904")]
		public static void SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)
		{
		}

		[Token(Token = "0x600128C")]
		[Address(RVA = "0x18E9950", Offset = "0x18E9950", VA = "0x18E9950")]
		public static void AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed)
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0x18E9984", Offset = "0x18E9984", VA = "0x18E9984")]
		public static void JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult)
		{
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0x18E99B8", Offset = "0x18E99B8", VA = "0x18E99B8")]
		public static void FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles)
		{
		}
	}
	[Token(Token = "0x200023D")]
	public static class SteamHTTP
	{
		[Token(Token = "0x600128F")]
		[Address(RVA = "0x18E99EC", Offset = "0x18E99EC", VA = "0x18E99EC")]
		public static HTTPRequestHandle CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x6001290")]
		[Address(RVA = "0x18E9A20", Offset = "0x18E9A20", VA = "0x18E9A20")]
		public static bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001291")]
		[Address(RVA = "0x18E9A68", Offset = "0x18E9A68", VA = "0x18E9A68")]
		public static bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0x18E9A9C", Offset = "0x18E9A9C", VA = "0x18E9A9C")]
		public static bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0x18E9AE4", Offset = "0x18E9AE4", VA = "0x18E9AE4")]
		public static bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0x18E9B2C", Offset = "0x18E9B2C", VA = "0x18E9B2C")]
		public static bool SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0x18E9B60", Offset = "0x18E9B60", VA = "0x18E9B60")]
		public static bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0x18E9B94", Offset = "0x18E9B94", VA = "0x18E9B94")]
		public static bool DeferHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0x18E9BC0", Offset = "0x18E9BC0", VA = "0x18E9BC0")]
		public static bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0x18E9BEC", Offset = "0x18E9BEC", VA = "0x18E9BEC")]
		public static bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0x18E9C34", Offset = "0x18E9C34", VA = "0x18E9C34")]
		public static bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0x18E9C80", Offset = "0x18E9C80", VA = "0x18E9C80")]
		public static bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize)
		{
			return default(bool);
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0x18E9CB4", Offset = "0x18E9CB4", VA = "0x18E9CB4")]
		public static bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0x18E9CFC", Offset = "0x18E9CFC", VA = "0x18E9CFC")]
		public static bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0x18E9D48", Offset = "0x18E9D48", VA = "0x18E9D48")]
		public static bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0x18E9D74", Offset = "0x18E9D74", VA = "0x18E9D74")]
		public static bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut)
		{
			return default(bool);
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0x18E9DA8", Offset = "0x18E9DA8", VA = "0x18E9DA8")]
		public static bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200023E")]
	public static class SteamMatchmaking
	{
		[Token(Token = "0x60012A0")]
		[Address(RVA = "0x18EA0BC", Offset = "0x18EA0BC", VA = "0x18EA0BC")]
		public static int GetFavoriteGameCount()
		{
			return default(int);
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0x18EA0E0", Offset = "0x18EA0E0", VA = "0x18EA0E0")]
		public static bool GetFavoriteGame(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0x18EA138", Offset = "0x18EA138", VA = "0x18EA138")]
		public static int AddFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
		{
			return default(int);
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0x18EA188", Offset = "0x18EA188", VA = "0x18EA188")]
		public static bool RemoveFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0x18EA1D8", Offset = "0x18EA1D8", VA = "0x18EA1D8")]
		public static SteamAPICall_t RequestLobbyList()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0x18EA274", Offset = "0x18EA274", VA = "0x18EA274")]
		public static void AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, ELobbyComparison eComparisonType)
		{
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0x18EA2BC", Offset = "0x18EA2BC", VA = "0x18EA2BC")]
		public static void AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType)
		{
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0x18EA304", Offset = "0x18EA304", VA = "0x18EA304")]
		public static void AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
		{
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0x18EA338", Offset = "0x18EA338", VA = "0x18EA338")]
		public static void AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
		{
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0x18EA364", Offset = "0x18EA364", VA = "0x18EA364")]
		public static void AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter)
		{
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0x18EA390", Offset = "0x18EA390", VA = "0x18EA390")]
		public static void AddRequestLobbyListResultCountFilter(int cMaxResults)
		{
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0x18EA3BC", Offset = "0x18EA3BC", VA = "0x18EA3BC")]
		public static void AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0x18EA3FC", Offset = "0x18EA3FC", VA = "0x18EA3FC")]
		public static CSteamID GetLobbyByIndex(int iLobby)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60012AD")]
		[Address(RVA = "0x18EA4C0", Offset = "0x18EA4C0", VA = "0x18EA4C0")]
		public static SteamAPICall_t CreateLobby(ELobbyType eLobbyType, int cMaxMembers)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60012AE")]
		[Address(RVA = "0x18EA56C", Offset = "0x18EA56C", VA = "0x18EA56C")]
		public static SteamAPICall_t JoinLobby(CSteamID steamIDLobby)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0x18EA624", Offset = "0x18EA624", VA = "0x18EA624")]
		public static void LeaveLobby(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0x18EA664", Offset = "0x18EA664", VA = "0x18EA664")]
		public static bool InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee)
		{
			return default(bool);
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0x18EA6AC", Offset = "0x18EA6AC", VA = "0x18EA6AC")]
		public static int GetNumLobbyMembers(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0x18EA6EC", Offset = "0x18EA6EC", VA = "0x18EA6EC")]
		public static CSteamID GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0x18EA7C0", Offset = "0x18EA7C0", VA = "0x18EA7C0")]
		public static string GetLobbyData(CSteamID steamIDLobby, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0x18EA804", Offset = "0x18EA804", VA = "0x18EA804")]
		public static bool SetLobbyData(CSteamID steamIDLobby, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0x18EA84C", Offset = "0x18EA84C", VA = "0x18EA84C")]
		public static int GetLobbyDataCount(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0x18EA88C", Offset = "0x18EA88C", VA = "0x18EA88C")]
		public static bool GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, out string pchKey, int cchKeyBufferSize, out string pchValue, int cchValueBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0x18EAA10", Offset = "0x18EAA10", VA = "0x18EAA10")]
		public static bool DeleteLobbyData(CSteamID steamIDLobby, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0x18EAA54", Offset = "0x18EAA54", VA = "0x18EAA54")]
		public static string GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0x18EAA9C", Offset = "0x18EAA9C", VA = "0x18EAA9C")]
		public static void SetLobbyMemberData(CSteamID steamIDLobby, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0x18EAAE4", Offset = "0x18EAAE4", VA = "0x18EAAE4")]
		public static bool SendLobbyChatMsg(CSteamID steamIDLobby, byte[] pvMsgBody, int cubMsgBody)
		{
			return default(bool);
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0x18EAB2C", Offset = "0x18EAB2C", VA = "0x18EAB2C")]
		public static int GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, byte[] pvData, int cubData, out EChatEntryType peChatEntryType)
		{
			return default(int);
		}

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0x18EAB88", Offset = "0x18EAB88", VA = "0x18EAB88")]
		public static bool RequestLobbyData(CSteamID steamIDLobby)
		{
			return default(bool);
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0x18EABC8", Offset = "0x18EABC8", VA = "0x18EABC8")]
		public static void SetLobbyGameServer(CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer)
		{
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0x18EAC18", Offset = "0x18EAC18", VA = "0x18EAC18")]
		public static bool GetLobbyGameServer(CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer)
		{
			return default(bool);
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0x18EAC60", Offset = "0x18EAC60", VA = "0x18EAC60")]
		public static bool SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers)
		{
			return default(bool);
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0x18EACA4", Offset = "0x18EACA4", VA = "0x18EACA4")]
		public static int GetLobbyMemberLimit(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0x18EACE4", Offset = "0x18EACE4", VA = "0x18EACE4")]
		public static bool SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType)
		{
			return default(bool);
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0x18EAD28", Offset = "0x18EAD28", VA = "0x18EAD28")]
		public static bool SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable)
		{
			return default(bool);
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0x18EAD6C", Offset = "0x18EAD6C", VA = "0x18EAD6C")]
		public static CSteamID GetLobbyOwner(CSteamID steamIDLobby)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0x18EAE38", Offset = "0x18EAE38", VA = "0x18EAE38")]
		public static bool SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0x18EAE80", Offset = "0x18EAE80", VA = "0x18EAE80")]
		public static bool SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200023F")]
	public static class SteamMatchmakingServers
	{
		[Token(Token = "0x60012C6")]
		[Address(RVA = "0x18EAEC8", Offset = "0x18EAEC8", VA = "0x18EAEC8")]
		public static HServerListRequest RequestInternetServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0x18EAFD8", Offset = "0x18EAFD8", VA = "0x18EAFD8")]
		public static HServerListRequest RequestLANServerList(AppId_t iApp, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0x18EB098", Offset = "0x18EB098", VA = "0x18EB098")]
		public static HServerListRequest RequestFriendsServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0x18EB1A8", Offset = "0x18EB1A8", VA = "0x18EB1A8")]
		public static HServerListRequest RequestFavoritesServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0x18EB2B8", Offset = "0x18EB2B8", VA = "0x18EB2B8")]
		public static HServerListRequest RequestHistoryServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0x18EB3C8", Offset = "0x18EB3C8", VA = "0x18EB3C8")]
		public static HServerListRequest RequestSpectatorServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0x18EB4D8", Offset = "0x18EB4D8", VA = "0x18EB4D8")]
		public static void ReleaseRequest(HServerListRequest hServerListRequest)
		{
		}

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0x18EB504", Offset = "0x18EB504", VA = "0x18EB504")]
		public static gameserveritem_t GetServerDetails(HServerListRequest hRequest, int iServer)
		{
			return null;
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0x18EB698", Offset = "0x18EB698", VA = "0x18EB698")]
		public static void CancelQuery(HServerListRequest hRequest)
		{
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0x18EB6C4", Offset = "0x18EB6C4", VA = "0x18EB6C4")]
		public static void RefreshQuery(HServerListRequest hRequest)
		{
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0x18EB6F0", Offset = "0x18EB6F0", VA = "0x18EB6F0")]
		public static bool IsRefreshing(HServerListRequest hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0x18EB71C", Offset = "0x18EB71C", VA = "0x18EB71C")]
		public static int GetServerCount(HServerListRequest hRequest)
		{
			return default(int);
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0x18EB748", Offset = "0x18EB748", VA = "0x18EB748")]
		public static void RefreshServer(HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0x18EB77C", Offset = "0x18EB77C", VA = "0x18EB77C")]
		public static HServerQuery PingServer(uint unIP, ushort usPort, ISteamMatchmakingPingResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0x18EB850", Offset = "0x18EB850", VA = "0x18EB850")]
		public static HServerQuery PlayerDetails(uint unIP, ushort usPort, ISteamMatchmakingPlayersResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0x18EB924", Offset = "0x18EB924", VA = "0x18EB924")]
		public static HServerQuery ServerRules(uint unIP, ushort usPort, ISteamMatchmakingRulesResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0x18EB9F8", Offset = "0x18EB9F8", VA = "0x18EB9F8")]
		public static void CancelServerQuery(HServerQuery hServerQuery)
		{
		}
	}
	[Token(Token = "0x2000240")]
	public static class SteamMusic
	{
		[Token(Token = "0x60012D7")]
		[Address(RVA = "0x18EBA24", Offset = "0x18EBA24", VA = "0x18EBA24")]
		public static bool BIsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0x18EBA48", Offset = "0x18EBA48", VA = "0x18EBA48")]
		public static bool BIsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0x18EBA6C", Offset = "0x18EBA6C", VA = "0x18EBA6C")]
		public static AudioPlayback_Status GetPlaybackStatus()
		{
			return default(AudioPlayback_Status);
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0x18EBA90", Offset = "0x18EBA90", VA = "0x18EBA90")]
		public static void Play()
		{
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0x18EBAB4", Offset = "0x18EBAB4", VA = "0x18EBAB4")]
		public static void Pause()
		{
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0x18EBAD8", Offset = "0x18EBAD8", VA = "0x18EBAD8")]
		public static void PlayPrevious()
		{
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0x18EBAFC", Offset = "0x18EBAFC", VA = "0x18EBAFC")]
		public static void PlayNext()
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0x18EBB20", Offset = "0x18EBB20", VA = "0x18EBB20")]
		public static void SetVolume(float flVolume)
		{
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0x18EBB4C", Offset = "0x18EBB4C", VA = "0x18EBB4C")]
		public static float GetVolume()
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000241")]
	public static class SteamMusicRemote
	{
		[Token(Token = "0x60012E0")]
		[Address(RVA = "0x18EBB70", Offset = "0x18EBB70", VA = "0x18EBB70")]
		public static bool RegisterSteamMusicRemote(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0x18EBB9C", Offset = "0x18EBB9C", VA = "0x18EBB9C")]
		public static bool DeregisterSteamMusicRemote()
		{
			return default(bool);
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0x18EBBC0", Offset = "0x18EBBC0", VA = "0x18EBBC0")]
		public static bool BIsCurrentMusicRemote()
		{
			return default(bool);
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0x18EBBE4", Offset = "0x18EBBE4", VA = "0x18EBBE4")]
		public static bool BActivationSuccess(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0x18EBC10", Offset = "0x18EBC10", VA = "0x18EBC10")]
		public static bool SetDisplayName(string pchDisplayName)
		{
			return default(bool);
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0x18EBC3C", Offset = "0x18EBC3C", VA = "0x18EBC3C")]
		public static bool SetPNGIcon_64x64(byte[] pvBuffer, uint cbBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0x18EBC70", Offset = "0x18EBC70", VA = "0x18EBC70")]
		public static bool EnablePlayPrevious(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0x18EBC9C", Offset = "0x18EBC9C", VA = "0x18EBC9C")]
		public static bool EnablePlayNext(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0x18EBCC8", Offset = "0x18EBCC8", VA = "0x18EBCC8")]
		public static bool EnableShuffled(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0x18EBCF4", Offset = "0x18EBCF4", VA = "0x18EBCF4")]
		public static bool EnableLooped(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0x18EBD20", Offset = "0x18EBD20", VA = "0x18EBD20")]
		public static bool EnableQueue(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0x18EBD4C", Offset = "0x18EBD4C", VA = "0x18EBD4C")]
		public static bool EnablePlaylists(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0x18EBD78", Offset = "0x18EBD78", VA = "0x18EBD78")]
		public static bool UpdatePlaybackStatus(AudioPlayback_Status nStatus)
		{
			return default(bool);
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0x18EBDA4", Offset = "0x18EBDA4", VA = "0x18EBDA4")]
		public static bool UpdateShuffled(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0x18EBDD0", Offset = "0x18EBDD0", VA = "0x18EBDD0")]
		public static bool UpdateLooped(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0x18EBDFC", Offset = "0x18EBDFC", VA = "0x18EBDFC")]
		public static bool UpdateVolume(float flValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0x18EBE28", Offset = "0x18EBE28", VA = "0x18EBE28")]
		public static bool CurrentEntryWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0x18EBE4C", Offset = "0x18EBE4C", VA = "0x18EBE4C")]
		public static bool CurrentEntryIsAvailable(bool bAvailable)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0x18EBE78", Offset = "0x18EBE78", VA = "0x18EBE78")]
		public static bool UpdateCurrentEntryText(string pchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0x18EBEA4", Offset = "0x18EBEA4", VA = "0x18EBEA4")]
		public static bool UpdateCurrentEntryElapsedSeconds(int nValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0x18EBED0", Offset = "0x18EBED0", VA = "0x18EBED0")]
		public static bool UpdateCurrentEntryCoverArt(byte[] pvBuffer, uint cbBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0x18EBF04", Offset = "0x18EBF04", VA = "0x18EBF04")]
		public static bool CurrentEntryDidChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0x18EBF28", Offset = "0x18EBF28", VA = "0x18EBF28")]
		public static bool QueueWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0x18EBF4C", Offset = "0x18EBF4C", VA = "0x18EBF4C")]
		public static bool ResetQueueEntries()
		{
			return default(bool);
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0x18EBF70", Offset = "0x18EBF70", VA = "0x18EBF70")]
		public static bool SetQueueEntry(int nID, int nPosition, string pchEntryText)
		{
			return default(bool);
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0x18EBFB8", Offset = "0x18EBFB8", VA = "0x18EBFB8")]
		public static bool SetCurrentQueueEntry(int nID)
		{
			return default(bool);
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0x18EBFE4", Offset = "0x18EBFE4", VA = "0x18EBFE4")]
		public static bool QueueDidChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0x18EC008", Offset = "0x18EC008", VA = "0x18EC008")]
		public static bool PlaylistWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0x18EC02C", Offset = "0x18EC02C", VA = "0x18EC02C")]
		public static bool ResetPlaylistEntries()
		{
			return default(bool);
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0x18EC050", Offset = "0x18EC050", VA = "0x18EC050")]
		public static bool SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
		{
			return default(bool);
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0x18EC098", Offset = "0x18EC098", VA = "0x18EC098")]
		public static bool SetCurrentPlaylistEntry(int nID)
		{
			return default(bool);
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0x18EC0C4", Offset = "0x18EC0C4", VA = "0x18EC0C4")]
		public static bool PlaylistDidChange()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000242")]
	public static class SteamNetworking
	{
		[Token(Token = "0x6001300")]
		[Address(RVA = "0x18EC0E8", Offset = "0x18EC0E8", VA = "0x18EC0E8")]
		public static bool SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0x18EC138", Offset = "0x18EC138", VA = "0x18EC138")]
		public static bool IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6001302")]
		[Address(RVA = "0x18EC16C", Offset = "0x18EC16C", VA = "0x18EC16C")]
		public static bool ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0x18EC1BC", Offset = "0x18EC1BC", VA = "0x18EC1BC")]
		public static bool AcceptP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0x18EC1FC", Offset = "0x18EC1FC", VA = "0x18EC1FC")]
		public static bool CloseP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0x18EC23C", Offset = "0x18EC23C", VA = "0x18EC23C")]
		public static bool CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)
		{
			return default(bool);
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0x18EC280", Offset = "0x18EC280", VA = "0x18EC280")]
		public static bool GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)
		{
			return default(bool);
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0x18EC2C4", Offset = "0x18EC2C4", VA = "0x18EC2C4")]
		public static bool AllowP2PPacketRelay(bool bAllow)
		{
			return default(bool);
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0x18EC2F0", Offset = "0x18EC2F0", VA = "0x18EC2F0")]
		public static SNetListenSocket_t CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0x18EC33C", Offset = "0x18EC33C", VA = "0x18EC33C")]
		public static SNetSocket_t CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0x18EC384", Offset = "0x18EC384", VA = "0x18EC384")]
		public static SNetSocket_t CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0x18EC3CC", Offset = "0x18EC3CC", VA = "0x18EC3CC")]
		public static bool DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0x18EC400", Offset = "0x18EC400", VA = "0x18EC400")]
		public static bool DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0x18EC434", Offset = "0x18EC434", VA = "0x18EC434")]
		public static bool SendDataOnSocket(SNetSocket_t hSocket, IntPtr pubData, uint cubData, bool bReliable)
		{
			return default(bool);
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0x18EC480", Offset = "0x18EC480", VA = "0x18EC480")]
		public static bool IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0x18EC4B4", Offset = "0x18EC4B4", VA = "0x18EC4B4")]
		public static bool RetrieveDataFromSocket(SNetSocket_t hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0x18EC500", Offset = "0x18EC500", VA = "0x18EC500")]
		public static bool IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0x18EC548", Offset = "0x18EC548", VA = "0x18EC548")]
		public static bool RetrieveData(SNetListenSocket_t hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0x18EC598", Offset = "0x18EC598", VA = "0x18EC598")]
		public static bool GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0x18EC5E8", Offset = "0x18EC5E8", VA = "0x18EC5E8")]
		public static bool GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0x18EC630", Offset = "0x18EC630", VA = "0x18EC630")]
		public static ESNetSocketConnectionType GetSocketConnectionType(SNetSocket_t hSocket)
		{
			return default(ESNetSocketConnectionType);
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0x18EC65C", Offset = "0x18EC65C", VA = "0x18EC65C")]
		public static int GetMaxPacketSize(SNetSocket_t hSocket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000243")]
	public static class SteamRemoteStorage
	{
		[Token(Token = "0x6001316")]
		[Address(RVA = "0x18EC688", Offset = "0x18EC688", VA = "0x18EC688")]
		public static bool FileWrite(string pchFile, byte[] pvData, int cubData)
		{
			return default(bool);
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0x18EC6D0", Offset = "0x18EC6D0", VA = "0x18EC6D0")]
		public static int FileRead(string pchFile, byte[] pvData, int cubDataToRead)
		{
			return default(int);
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0x18EC718", Offset = "0x18EC718", VA = "0x18EC718")]
		public static bool FileForget(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0x18EC744", Offset = "0x18EC744", VA = "0x18EC744")]
		public static bool FileDelete(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0x18EC770", Offset = "0x18EC770", VA = "0x18EC770")]
		public static SteamAPICall_t FileShare(string pchFile)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0x18EC814", Offset = "0x18EC814", VA = "0x18EC814")]
		public static bool SetSyncPlatforms(string pchFile, ERemoteStoragePlatform eRemoteStoragePlatform)
		{
			return default(bool);
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0x18EC848", Offset = "0x18EC848", VA = "0x18EC848")]
		public static UGCFileWriteStreamHandle_t FileWriteStreamOpen(string pchFile)
		{
			return default(UGCFileWriteStreamHandle_t);
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0x18EC8FC", Offset = "0x18EC8FC", VA = "0x18EC8FC")]
		public static bool FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, byte[] pvData, int cubData)
		{
			return default(bool);
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0x18EC944", Offset = "0x18EC944", VA = "0x18EC944")]
		public static bool FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0x18EC984", Offset = "0x18EC984", VA = "0x18EC984")]
		public static bool FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0x18EC9C4", Offset = "0x18EC9C4", VA = "0x18EC9C4")]
		public static bool FileExists(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0x18EC9F0", Offset = "0x18EC9F0", VA = "0x18EC9F0")]
		public static bool FilePersisted(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0x18ECA1C", Offset = "0x18ECA1C", VA = "0x18ECA1C")]
		public static int GetFileSize(string pchFile)
		{
			return default(int);
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0x18ECA48", Offset = "0x18ECA48", VA = "0x18ECA48")]
		public static long GetFileTimestamp(string pchFile)
		{
			return default(long);
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0x18ECA74", Offset = "0x18ECA74", VA = "0x18ECA74")]
		public static ERemoteStoragePlatform GetSyncPlatforms(string pchFile)
		{
			return default(ERemoteStoragePlatform);
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0x18ECAA0", Offset = "0x18ECAA0", VA = "0x18ECAA0")]
		public static int GetFileCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0x18ECAC4", Offset = "0x18ECAC4", VA = "0x18ECAC4")]
		public static string GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
		{
			return null;
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0x18ECAF8", Offset = "0x18ECAF8", VA = "0x18ECAF8")]
		public static bool GetQuota(out int pnTotalBytes, out int puAvailableBytes)
		{
			return default(bool);
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0x18ECB2C", Offset = "0x18ECB2C", VA = "0x18ECB2C")]
		public static bool IsCloudEnabledForAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0x18ECB50", Offset = "0x18ECB50", VA = "0x18ECB50")]
		public static bool IsCloudEnabledForApp()
		{
			return default(bool);
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0x18ECB74", Offset = "0x18ECB74", VA = "0x18ECB74")]
		public static void SetCloudEnabledForApp(bool bEnabled)
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0x18ECBA0", Offset = "0x18ECBA0", VA = "0x18ECBA0")]
		public static SteamAPICall_t UGCDownload(UGCHandle_t hContent, uint unPriority)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0x18ECC60", Offset = "0x18ECC60", VA = "0x18ECC60")]
		public static bool GetUGCDownloadProgress(UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0x18ECCA8", Offset = "0x18ECCA8", VA = "0x18ECCA8")]
		public static bool GetUGCDetails(UGCHandle_t hContent, out AppId_t pnAppID, out string ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x600132E")]
		[Address(RVA = "0x18ECD30", Offset = "0x18ECD30", VA = "0x18ECD30")]
		public static int UGCRead(UGCHandle_t hContent, byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction)
		{
			return default(int);
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0x18ECD80", Offset = "0x18ECD80", VA = "0x18ECD80")]
		public static int GetCachedUGCCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0x18ECDA4", Offset = "0x18ECDA4", VA = "0x18ECDA4")]
		public static UGCHandle_t GetCachedUGCHandle(int iCachedContent)
		{
			return default(UGCHandle_t);
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0x18ECE58", Offset = "0x18ECE58", VA = "0x18ECE58")]
		public static SteamAPICall_t PublishWorkshopFile(string pchFile, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IList<string> pTags, EWorkshopFileType eWorkshopFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0x18ECF70", Offset = "0x18ECF70", VA = "0x18ECF70")]
		public static PublishedFileUpdateHandle_t CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId)
		{
			return default(PublishedFileUpdateHandle_t);
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0x18ED028", Offset = "0x18ED028", VA = "0x18ED028")]
		public static bool UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0x18ED06C", Offset = "0x18ED06C", VA = "0x18ED06C")]
		public static bool UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, string pchPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0x18ED0B0", Offset = "0x18ED0B0", VA = "0x18ED0B0")]
		public static bool UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0x18ED0F4", Offset = "0x18ED0F4", VA = "0x18ED0F4")]
		public static bool UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0x18ED138", Offset = "0x18ED138", VA = "0x18ED138")]
		public static bool UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0x18ED17C", Offset = "0x18ED17C", VA = "0x18ED17C")]
		public static bool UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0x18ED230", Offset = "0x18ED230", VA = "0x18ED230")]
		public static SteamAPICall_t CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0x18ED2E8", Offset = "0x18ED2E8", VA = "0x18ED2E8")]
		public static SteamAPICall_t GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0x18ED3A8", Offset = "0x18ED3A8", VA = "0x18ED3A8")]
		public static SteamAPICall_t DeletePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0x18ED460", Offset = "0x18ED460", VA = "0x18ED460")]
		public static SteamAPICall_t EnumerateUserPublishedFiles(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0x18ED504", Offset = "0x18ED504", VA = "0x18ED504")]
		public static SteamAPICall_t SubscribePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0x18ED5BC", Offset = "0x18ED5BC", VA = "0x18ED5BC")]
		public static SteamAPICall_t EnumerateUserSubscribedFiles(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0x18ED660", Offset = "0x18ED660", VA = "0x18ED660")]
		public static SteamAPICall_t UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0x18ED718", Offset = "0x18ED718", VA = "0x18ED718")]
		public static bool UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, string pchChangeDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0x18ED75C", Offset = "0x18ED75C", VA = "0x18ED75C")]
		public static SteamAPICall_t GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0x18ED814", Offset = "0x18ED814", VA = "0x18ED814")]
		public static SteamAPICall_t UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0x18ED8D4", Offset = "0x18ED8D4", VA = "0x18ED8D4")]
		public static SteamAPICall_t GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001344")]
		[Address(RVA = "0x18ED98C", Offset = "0x18ED98C", VA = "0x18ED98C")]
		public static SteamAPICall_t EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint unStartIndex, IList<string> pRequiredTags, IList<string> pExcludedTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0x18EDAB4", Offset = "0x18EDAB4", VA = "0x18EDAB4")]
		public static SteamAPICall_t PublishVideo(EWorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IList<string> pTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0x18EDBD4", Offset = "0x18EDBD4", VA = "0x18EDBD4")]
		public static SteamAPICall_t SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0x18EDC94", Offset = "0x18EDC94", VA = "0x18EDC94")]
		public static SteamAPICall_t EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0x18EDD40", Offset = "0x18EDD40", VA = "0x18EDD40")]
		public static SteamAPICall_t EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IList<string> pTags, IList<string> pUserTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0x18EDE6C", Offset = "0x18EDE6C", VA = "0x18EDE6C")]
		public static SteamAPICall_t UGCDownloadToLocation(UGCHandle_t hContent, string pchLocation, uint unPriority)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000244")]
	public static class SteamScreenshots
	{
		[Token(Token = "0x600134A")]
		[Address(RVA = "0x18EDF34", Offset = "0x18EDF34", VA = "0x18EDF34")]
		public static ScreenshotHandle WriteScreenshot(byte[] pubRGB, uint cubRGB, int nWidth, int nHeight)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0x18EDFF4", Offset = "0x18EDFF4", VA = "0x18EDFF4")]
		public static ScreenshotHandle AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0x18EE0B4", Offset = "0x18EE0B4", VA = "0x18EE0B4")]
		public static void TriggerScreenshot()
		{
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0x18EE0D8", Offset = "0x18EE0D8", VA = "0x18EE0D8")]
		public static void HookScreenshots(bool bHook)
		{
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0x18EE104", Offset = "0x18EE104", VA = "0x18EE104")]
		public static bool SetLocation(ScreenshotHandle hScreenshot, string pchLocation)
		{
			return default(bool);
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0x18EE138", Offset = "0x18EE138", VA = "0x18EE138")]
		public static bool TagUser(ScreenshotHandle hScreenshot, CSteamID steamID)
		{
			return default(bool);
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0x18EE180", Offset = "0x18EE180", VA = "0x18EE180")]
		public static bool TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000245")]
	public static class SteamUGC
	{
		[Token(Token = "0x6001351")]
		[Address(RVA = "0x18EE1C8", Offset = "0x18EE1C8", VA = "0x18EE1C8")]
		public static UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0x18EE2B0", Offset = "0x18EE2B0", VA = "0x18EE2B0")]
		public static UGCQueryHandle_t CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6001353")]
		[Address(RVA = "0x18EE380", Offset = "0x18EE380", VA = "0x18EE380")]
		public static SteamAPICall_t SendQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0x18EE438", Offset = "0x18EE438", VA = "0x18EE438")]
		public static bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails)
		{
			return default(bool);
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0x18EE480", Offset = "0x18EE480", VA = "0x18EE480")]
		public static bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(bool);
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0x18EE4C0", Offset = "0x18EE4C0", VA = "0x18EE4C0")]
		public static bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001357")]
		[Address(RVA = "0x18EE504", Offset = "0x18EE504", VA = "0x18EE504")]
		public static bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0x18EE548", Offset = "0x18EE548", VA = "0x18EE548")]
		public static bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0x18EE58C", Offset = "0x18EE58C", VA = "0x18EE58C")]
		public static bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0x18EE5D0", Offset = "0x18EE5D0", VA = "0x18EE5D0")]
		public static bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0x18EE614", Offset = "0x18EE614", VA = "0x18EE614")]
		public static bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
		{
			return default(bool);
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0x18EE658", Offset = "0x18EE658", VA = "0x18EE658")]
		public static bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
		{
			return default(bool);
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0x18EE69C", Offset = "0x18EE69C", VA = "0x18EE69C")]
		public static bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
		{
			return default(bool);
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0x18EE6E0", Offset = "0x18EE6E0", VA = "0x18EE6E0")]
		public static bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0x18EE724", Offset = "0x18EE724", VA = "0x18EE724")]
		public static SteamAPICall_t RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0x18EE7E4", Offset = "0x18EE7E4", VA = "0x18EE7E4")]
		public static SteamAPICall_t CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0x18EE890", Offset = "0x18EE890", VA = "0x18EE890")]
		public static UGCUpdateHandle_t StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0x18EE960", Offset = "0x18EE960", VA = "0x18EE960")]
		public static bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0x18EE9A4", Offset = "0x18EE9A4", VA = "0x18EE9A4")]
		public static bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0x18EE9E8", Offset = "0x18EE9E8", VA = "0x18EE9E8")]
		public static bool SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0x18EEA2C", Offset = "0x18EEA2C", VA = "0x18EEA2C")]
		public static bool SetItemTags(UGCUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0x18EEAE0", Offset = "0x18EEAE0", VA = "0x18EEAE0")]
		public static bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0x18EEB24", Offset = "0x18EEB24", VA = "0x18EEB24")]
		public static bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0x18EEB68", Offset = "0x18EEB68", VA = "0x18EEB68")]
		public static SteamAPICall_t SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0x18EEC28", Offset = "0x18EEC28", VA = "0x18EEC28")]
		public static EItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal)
		{
			return default(EItemUpdateStatus);
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0x18EEC70", Offset = "0x18EEC70", VA = "0x18EEC70")]
		public static SteamAPICall_t SubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0x18EED28", Offset = "0x18EED28", VA = "0x18EED28")]
		public static SteamAPICall_t UnsubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0x18EEDE0", Offset = "0x18EEDE0", VA = "0x18EEDE0")]
		public static uint GetNumSubscribedItems()
		{
			return default(uint);
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0x18EEE04", Offset = "0x18EEE04", VA = "0x18EEE04")]
		public static uint GetSubscribedItems(PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(uint);
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0x18EEE38", Offset = "0x18EEE38", VA = "0x18EEE38")]
		public static bool GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, out string pchFolder, uint cchFolderSize, out bool pbLegacyItem)
		{
			return default(bool);
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0x18EEF78", Offset = "0x18EEF78", VA = "0x18EEF78")]
		public static bool GetItemUpdateInfo(PublishedFileId_t nPublishedFileID, out bool pbNeedsUpdate, out bool pbIsDownloading, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000246")]
	public static class SteamUnifiedMessages
	{
		[Token(Token = "0x6001370")]
		[Address(RVA = "0x18EF370", Offset = "0x18EF370", VA = "0x18EF370")]
		public static ClientUnifiedMessageHandle SendMethod(string pchServiceMethod, byte[] pRequestBuffer, uint unRequestBufferSize, ulong unContext)
		{
			return default(ClientUnifiedMessageHandle);
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0x18EF454", Offset = "0x18EF454", VA = "0x18EF454")]
		public static bool GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, out uint punResponseSize, out EResult peResult)
		{
			return default(bool);
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0x18EF49C", Offset = "0x18EF49C", VA = "0x18EF49C")]
		public static bool GetMethodResponseData(ClientUnifiedMessageHandle hHandle, byte[] pResponseBuffer, uint unResponseBufferSize, bool bAutoRelease)
		{
			return default(bool);
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0x18EF4E4", Offset = "0x18EF4E4", VA = "0x18EF4E4")]
		public static bool ReleaseMethod(ClientUnifiedMessageHandle hHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0x18EF524", Offset = "0x18EF524", VA = "0x18EF524")]
		public static bool SendNotification(string pchServiceNotification, byte[] pNotificationBuffer, uint unNotificationBufferSize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000247")]
	public static class SteamUser
	{
		[Token(Token = "0x6001375")]
		[Address(RVA = "0x18EF56C", Offset = "0x18EF56C", VA = "0x18EF56C")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0x18EF5A0", Offset = "0x18EF5A0", VA = "0x18EF5A0")]
		public static bool BLoggedOn()
		{
			return default(bool);
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0x18EF5C4", Offset = "0x18EF5C4", VA = "0x18EF5C4")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0x18EF680", Offset = "0x18EF680", VA = "0x18EF680")]
		public static int InitiateGameConnection(byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure)
		{
			return default(int);
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0x18EF6DC", Offset = "0x18EF6DC", VA = "0x18EF6DC")]
		public static void TerminateGameConnection(uint unIPServer, ushort usPortServer)
		{
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0x18EF710", Offset = "0x18EF710", VA = "0x18EF710")]
		public static void TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, string pchExtraInfo = "")
		{
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0x18EF758", Offset = "0x18EF758", VA = "0x18EF758")]
		public static bool GetUserDataFolder(out string pchBuffer, int cubBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0x18EF870", Offset = "0x18EF870", VA = "0x18EF870")]
		public static void StartVoiceRecording()
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0x18EF894", Offset = "0x18EF894", VA = "0x18EF894")]
		public static void StopVoiceRecording()
		{
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0x18EF8B8", Offset = "0x18EF8B8", VA = "0x18EF8B8")]
		public static EVoiceResult GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed, uint nUncompressedVoiceDesiredSampleRate)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0x18EF900", Offset = "0x18EF900", VA = "0x18EF900")]
		public static EVoiceResult GetVoice(bool bWantCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed, byte[] pUncompressedDestBuffer, uint cbUncompressedDestBufferSize, out uint nUncompressBytesWritten, uint nUncompressedVoiceDesiredSampleRate)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0x18EF978", Offset = "0x18EF978", VA = "0x18EF978")]
		public static EVoiceResult DecompressVoice(byte[] pCompressed, uint cbCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0x18EF9C8", Offset = "0x18EF9C8", VA = "0x18EF9C8")]
		public static uint GetVoiceOptimalSampleRate()
		{
			return default(uint);
		}

		[Token(Token = "0x6001382")]
		[Address(RVA = "0x18EF9EC", Offset = "0x18EF9EC", VA = "0x18EF9EC")]
		public static HAuthTicket GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0x18EFAB0", Offset = "0x18EFAB0", VA = "0x18EFAB0")]
		public static EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID)
		{
			return default(EBeginAuthSessionResult);
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0x18EFAF8", Offset = "0x18EFAF8", VA = "0x18EFAF8")]
		public static void EndAuthSession(CSteamID steamID)
		{
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0x18EFB38", Offset = "0x18EFB38", VA = "0x18EFB38")]
		public static void CancelAuthTicket(HAuthTicket hAuthTicket)
		{
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0x18EFB64", Offset = "0x18EFB64", VA = "0x18EFB64")]
		public static EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamID steamID, AppId_t appID)
		{
			return default(EUserHasLicenseForAppResult);
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0x18EFBA8", Offset = "0x18EFBA8", VA = "0x18EFBA8")]
		public static bool BIsBehindNAT()
		{
			return default(bool);
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0x18EFBCC", Offset = "0x18EFBCC", VA = "0x18EFBCC")]
		public static void AdvertiseGame(CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer)
		{
		}

		[Token(Token = "0x6001389")]
		[Address(RVA = "0x18EFC14", Offset = "0x18EFC14", VA = "0x18EFC14")]
		public static SteamAPICall_t RequestEncryptedAppTicket(byte[] pDataToInclude, int cbDataToInclude)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0x18EFCC0", Offset = "0x18EFCC0", VA = "0x18EFCC0")]
		public static bool GetEncryptedAppTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0x18EFD08", Offset = "0x18EFD08", VA = "0x18EFD08")]
		public static int GetGameBadgeLevel(int nSeries, bool bFoil)
		{
			return default(int);
		}

		[Token(Token = "0x600138C")]
		[Address(RVA = "0x18EFD3C", Offset = "0x18EFD3C", VA = "0x18EFD3C")]
		public static int GetPlayerSteamLevel()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000248")]
	public static class SteamUserStats
	{
		[Token(Token = "0x600138D")]
		[Address(RVA = "0x18EFD60", Offset = "0x18EFD60", VA = "0x18EFD60")]
		public static bool RequestCurrentStats()
		{
			return default(bool);
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0x18EFD84", Offset = "0x18EFD84", VA = "0x18EFD84")]
		public static bool GetStat(string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0x18EFDB8", Offset = "0x18EFDB8", VA = "0x18EFDB8")]
		public static bool GetStat(string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0x18EFDEC", Offset = "0x18EFDEC", VA = "0x18EFDEC")]
		public static bool SetStat(string pchName, int nData)
		{
			return default(bool);
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0x18EFE20", Offset = "0x18EFE20", VA = "0x18EFE20")]
		public static bool SetStat(string pchName, float fData)
		{
			return default(bool);
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0x18EFE54", Offset = "0x18EFE54", VA = "0x18EFE54")]
		public static bool UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0x18EFE9C", Offset = "0x18EFE9C", VA = "0x18EFE9C")]
		public static bool GetAchievement(string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0x18EFED0", Offset = "0x18EFED0", VA = "0x18EFED0")]
		public static bool SetAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0x18EFEFC", Offset = "0x18EFEFC", VA = "0x18EFEFC")]
		public static bool ClearAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0x18EFF28", Offset = "0x18EFF28", VA = "0x18EFF28")]
		public static bool GetAchievementAndUnlockTime(string pchName, out bool pbAchieved, out uint punUnlockTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6001397")]
		[Address(RVA = "0x18EFF70", Offset = "0x18EFF70", VA = "0x18EFF70")]
		public static bool StoreStats()
		{
			return default(bool);
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0x18EFF94", Offset = "0x18EFF94", VA = "0x18EFF94")]
		public static int GetAchievementIcon(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0x18EFFC0", Offset = "0x18EFFC0", VA = "0x18EFFC0")]
		public static string GetAchievementDisplayAttribute(string pchName, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0x18EFFF4", Offset = "0x18EFFF4", VA = "0x18EFFF4")]
		public static bool IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
		{
			return default(bool);
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0x18F003C", Offset = "0x18F003C", VA = "0x18F003C")]
		public static uint GetNumAchievements()
		{
			return default(uint);
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0x18F0060", Offset = "0x18F0060", VA = "0x18F0060")]
		public static string GetAchievementName(uint iAchievement)
		{
			return null;
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0x18F008C", Offset = "0x18F008C", VA = "0x18F008C")]
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0x18F0144", Offset = "0x18F0144", VA = "0x18F0144")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0x18F018C", Offset = "0x18F018C", VA = "0x18F018C")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0x18F01D4", Offset = "0x18F01D4", VA = "0x18F01D4")]
		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0x18F021C", Offset = "0x18F021C", VA = "0x18F021C")]
		public static bool GetUserAchievementAndUnlockTime(CSteamID steamIDUser, string pchName, out bool pbAchieved, out uint punUnlockTime)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0x18F0264", Offset = "0x18F0264", VA = "0x18F0264")]
		public static bool ResetAllStats(bool bAchievementsToo)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0x18F0290", Offset = "0x18F0290", VA = "0x18F0290")]
		public static SteamAPICall_t FindOrCreateLeaderboard(string pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0x18F0350", Offset = "0x18F0350", VA = "0x18F0350")]
		public static SteamAPICall_t FindLeaderboard(string pchLeaderboardName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0x18F03F4", Offset = "0x18F03F4", VA = "0x18F03F4")]
		public static string GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard)
		{
			return null;
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0x18F0434", Offset = "0x18F0434", VA = "0x18F0434")]
		public static int GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(int);
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0x18F0474", Offset = "0x18F0474", VA = "0x18F0474")]
		public static ELeaderboardSortMethod GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(ELeaderboardSortMethod);
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0x18F04B4", Offset = "0x18F04B4", VA = "0x18F04B4")]
		public static ELeaderboardDisplayType GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(ELeaderboardDisplayType);
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0x18F04F4", Offset = "0x18F04F4", VA = "0x18F04F4")]
		public static SteamAPICall_t DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0x18F05C4", Offset = "0x18F05C4", VA = "0x18F05C4")]
		public static SteamAPICall_t DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, CSteamID[] prgUsers, int cUsers)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0x18F068C", Offset = "0x18F068C", VA = "0x18F068C")]
		public static bool GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, int[] pDetails, int cDetailsMax)
		{
			return default(bool);
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0x18F06DC", Offset = "0x18F06DC", VA = "0x18F06DC")]
		public static SteamAPICall_t UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0x18F07B0", Offset = "0x18F07B0", VA = "0x18F07B0")]
		public static SteamAPICall_t AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0x18F0878", Offset = "0x18F0878", VA = "0x18F0878")]
		public static SteamAPICall_t GetNumberOfCurrentPlayers()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0x18F0914", Offset = "0x18F0914", VA = "0x18F0914")]
		public static SteamAPICall_t RequestGlobalAchievementPercentages()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0x18F09B0", Offset = "0x18F09B0", VA = "0x18F09B0")]
		public static int GetMostAchievedAchievementInfo(out string pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved)
		{
			return default(int);
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0x18F0AE0", Offset = "0x18F0AE0", VA = "0x18F0AE0")]
		public static int GetNextMostAchievedAchievementInfo(int iIteratorPrevious, out string pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved)
		{
			return default(int);
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0x18F0C18", Offset = "0x18F0C18", VA = "0x18F0C18")]
		public static bool GetAchievementAchievedPercent(string pchName, out float pflPercent)
		{
			return default(bool);
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0x18F0C4C", Offset = "0x18F0C4C", VA = "0x18F0C4C")]
		public static SteamAPICall_t RequestGlobalStats(int nHistoryDays)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0x18F0CF0", Offset = "0x18F0CF0", VA = "0x18F0CF0")]
		public static bool GetGlobalStat(string pchStatName, out long pData)
		{
			return default(bool);
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0x18F0D24", Offset = "0x18F0D24", VA = "0x18F0D24")]
		public static bool GetGlobalStat(string pchStatName, out double pData)
		{
			return default(bool);
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0x18F0D58", Offset = "0x18F0D58", VA = "0x18F0D58")]
		public static int GetGlobalStatHistory(string pchStatName, long[] pData, uint cubData)
		{
			return default(int);
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0x18F0DA0", Offset = "0x18F0DA0", VA = "0x18F0DA0")]
		public static int GetGlobalStatHistory(string pchStatName, double[] pData, uint cubData)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000249")]
	public static class SteamUtils
	{
		[Token(Token = "0x60013B8")]
		[Address(RVA = "0x18F0DE8", Offset = "0x18F0DE8", VA = "0x18F0DE8")]
		public static uint GetSecondsSinceAppActive()
		{
			return default(uint);
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0x18F0E0C", Offset = "0x18F0E0C", VA = "0x18F0E0C")]
		public static uint GetSecondsSinceComputerActive()
		{
			return default(uint);
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0x18F0E30", Offset = "0x18F0E30", VA = "0x18F0E30")]
		public static EUniverse GetConnectedUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0x18F0E54", Offset = "0x18F0E54", VA = "0x18F0E54")]
		public static uint GetServerRealTime()
		{
			return default(uint);
		}

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0x18F0E78", Offset = "0x18F0E78", VA = "0x18F0E78")]
		public static string GetIPCountry()
		{
			return null;
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0x18F0E9C", Offset = "0x18F0E9C", VA = "0x18F0E9C")]
		public static bool GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0x18F0EE4", Offset = "0x18F0EE4", VA = "0x18F0EE4")]
		public static bool GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0x18F0F2C", Offset = "0x18F0F2C", VA = "0x18F0F2C")]
		public static bool GetCSERIPPort(out uint unIP, out ushort usPort)
		{
			return default(bool);
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0x18F0F60", Offset = "0x18F0F60", VA = "0x18F0F60")]
		public static byte GetCurrentBatteryPower()
		{
			return default(byte);
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0x18F0F84", Offset = "0x18F0F84", VA = "0x18F0F84")]
		public static AppId_t GetAppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0x18F1024", Offset = "0x18F1024", VA = "0x18F1024")]
		public static void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
		{
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0x18F1050", Offset = "0x18F1050", VA = "0x18F1050")]
		public static bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0x18F1094", Offset = "0x18F1094", VA = "0x18F1094")]
		public static ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
		{
			return default(ESteamAPICallFailure);
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0x18F10D4", Offset = "0x18F10D4", VA = "0x18F10D4")]
		public static bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0x18F1124", Offset = "0x18F1124", VA = "0x18F1124")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0x18F1148", Offset = "0x18F1148", VA = "0x18F1148")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x60013C8")]
		[Address(RVA = "0x18F116C", Offset = "0x18F116C", VA = "0x18F116C")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x60013C9")]
		[Address(RVA = "0x18F1198", Offset = "0x18F1198", VA = "0x18F1198")]
		public static bool IsOverlayEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0x18F11BC", Offset = "0x18F11BC", VA = "0x18F11BC")]
		public static bool BOverlayNeedsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0x18F11E0", Offset = "0x18F11E0", VA = "0x18F11E0")]
		public static SteamAPICall_t CheckFileSignature(string szFileName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0x18F1284", Offset = "0x18F1284", VA = "0x18F1284")]
		public static bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
		{
			return default(bool);
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0x18F12D4", Offset = "0x18F12D4", VA = "0x18F12D4")]
		public static uint GetEnteredGamepadTextLength()
		{
			return default(uint);
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0x18F12F8", Offset = "0x18F12F8", VA = "0x18F12F8")]
		public static bool GetEnteredGamepadTextInput(out string pchText, uint cchText)
		{
			return default(bool);
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0x18F1410", Offset = "0x18F1410", VA = "0x18F1410")]
		public static string GetSteamUILanguage()
		{
			return null;
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0x18F1434", Offset = "0x18F1434", VA = "0x18F1434")]
		public static bool IsSteamRunningInVR()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200024A")]
	internal static class NativeMethods
	{
		[Token(Token = "0x4000C07")]
		internal const string NativeLibraryName = "CSteamworks";

		[PreserveSig]
		[Token(Token = "0x60013D1")]
		[Address(RVA = "0xCC1C84", Offset = "0xCC1C84", VA = "0xCC1C84")]
		public static extern void SteamAPI_Shutdown();

		[PreserveSig]
		[Token(Token = "0x60013D2")]
		[Address(RVA = "0xCC1D34", Offset = "0xCC1D34", VA = "0xCC1D34")]
		public static extern bool SteamAPI_IsSteamRunning();

		[PreserveSig]
		[Token(Token = "0x60013D3")]
		[Address(RVA = "0xCC1DF0", Offset = "0xCC1DF0", VA = "0xCC1DF0")]
		public static extern bool SteamAPI_RestartAppIfNecessary(AppId_t unOwnAppID);

		[PreserveSig]
		[Token(Token = "0x60013D4")]
		[Address(RVA = "0xCC1EBC", Offset = "0xCC1EBC", VA = "0xCC1EBC")]
		public static extern void SteamAPI_WriteMiniDump(uint uStructuredExceptionCode, IntPtr pvExceptionInfo, uint uBuildID);

		[PreserveSig]
		[Token(Token = "0x60013D5")]
		[Address(RVA = "0xCC1F8C", Offset = "0xCC1F8C", VA = "0xCC1F8C")]
		public static extern void SteamAPI_SetMiniDumpComment(string pchMsg);

		[PreserveSig]
		[Token(Token = "0x60013D6")]
		[Address(RVA = "0xCBAC64", Offset = "0xCBAC64", VA = "0xCBAC64")]
		public static extern IntPtr SteamClient();

		[PreserveSig]
		[Token(Token = "0x60013D7")]
		[Address(RVA = "0xCC2068", Offset = "0xCC2068", VA = "0xCC2068")]
		public static extern bool SteamAPI_InitSafe();

		[PreserveSig]
		[Token(Token = "0x60013D8")]
		[Address(RVA = "0xCC2124", Offset = "0xCC2124", VA = "0xCC2124")]
		public static extern void SteamAPI_RunCallbacks();

		[PreserveSig]
		[Token(Token = "0x60013D9")]
		[Address(RVA = "0xCC21D4", Offset = "0xCC21D4", VA = "0xCC21D4")]
		public static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int iCallback);

		[PreserveSig]
		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xCC229C", Offset = "0xCC229C", VA = "0xCC229C")]
		public static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

		[PreserveSig]
		[Token(Token = "0x60013DB")]
		[Address(RVA = "0xCC235C", Offset = "0xCC235C", VA = "0xCC235C")]
		public static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong hAPICall);

		[PreserveSig]
		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xCC242C", Offset = "0xCC242C", VA = "0xCC242C")]
		public static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong hAPICall);

		[PreserveSig]
		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xCC24FC", Offset = "0xCC24FC", VA = "0xCC24FC")]
		public static extern void Steam_RunCallbacks(HSteamPipe hSteamPipe, bool bGameServerCallbacks);

		[PreserveSig]
		[Token(Token = "0x60013DE")]
		[Address(RVA = "0xCC25C4", Offset = "0xCC25C4", VA = "0xCC25C4")]
		public static extern void Steam_RegisterInterfaceFuncs(IntPtr hModule);

		[PreserveSig]
		[Token(Token = "0x60013DF")]
		[Address(RVA = "0xCC2684", Offset = "0xCC2684", VA = "0xCC2684")]
		public static extern int Steam_GetHSteamUserCurrent();

		[PreserveSig]
		[Token(Token = "0x60013E0")]
		[Address(RVA = "0xCC2734", Offset = "0xCC2734", VA = "0xCC2734")]
		public static extern int SteamAPI_GetSteamInstallPath();

		[PreserveSig]
		[Token(Token = "0x60013E1")]
		[Address(RVA = "0xCC27E4", Offset = "0xCC27E4", VA = "0xCC27E4")]
		public static extern int SteamAPI_GetHSteamPipe();

		[PreserveSig]
		[Token(Token = "0x60013E2")]
		[Address(RVA = "0xCC2894", Offset = "0xCC2894", VA = "0xCC2894")]
		public static extern void SteamAPI_SetTryCatchCallbacks(bool bTryCatchCallbacks);

		[PreserveSig]
		[Token(Token = "0x60013E3")]
		[Address(RVA = "0xCC2954", Offset = "0xCC2954", VA = "0xCC2954")]
		public static extern int SteamAPI_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x60013E4")]
		[Address(RVA = "0xCC2A04", Offset = "0xCC2A04", VA = "0xCC2A04")]
		public static extern void SteamAPI_UseBreakpadCrashHandler(string pchVersion, string pchDate, string pchTime, bool bFullMemoryDumps, IntPtr pvContext, IntPtr m_pfnPreMinidumpCallback);

		[PreserveSig]
		[Token(Token = "0x60013E5")]
		[Address(RVA = "0xCC2B30", Offset = "0xCC2B30", VA = "0xCC2B30")]
		public static extern IntPtr SteamUser();

		[PreserveSig]
		[Token(Token = "0x60013E6")]
		[Address(RVA = "0xCC2BE0", Offset = "0xCC2BE0", VA = "0xCC2BE0")]
		public static extern IntPtr SteamFriends();

		[PreserveSig]
		[Token(Token = "0x60013E7")]
		[Address(RVA = "0xCC2C90", Offset = "0xCC2C90", VA = "0xCC2C90")]
		public static extern IntPtr SteamUtils();

		[PreserveSig]
		[Token(Token = "0x60013E8")]
		[Address(RVA = "0xCC2D40", Offset = "0xCC2D40", VA = "0xCC2D40")]
		public static extern IntPtr SteamMatchmaking();

		[PreserveSig]
		[Token(Token = "0x60013E9")]
		[Address(RVA = "0xCC2DF0", Offset = "0xCC2DF0", VA = "0xCC2DF0")]
		public static extern IntPtr SteamUserStats();

		[PreserveSig]
		[Token(Token = "0x60013EA")]
		[Address(RVA = "0xCC2EA0", Offset = "0xCC2EA0", VA = "0xCC2EA0")]
		public static extern IntPtr SteamApps();

		[PreserveSig]
		[Token(Token = "0x60013EB")]
		[Address(RVA = "0xCC2F50", Offset = "0xCC2F50", VA = "0xCC2F50")]
		public static extern IntPtr SteamNetworking();

		[PreserveSig]
		[Token(Token = "0x60013EC")]
		[Address(RVA = "0xCC3000", Offset = "0xCC3000", VA = "0xCC3000")]
		public static extern IntPtr SteamMatchmakingServers();

		[PreserveSig]
		[Token(Token = "0x60013ED")]
		[Address(RVA = "0xCC30B0", Offset = "0xCC30B0", VA = "0xCC30B0")]
		public static extern IntPtr SteamRemoteStorage();

		[PreserveSig]
		[Token(Token = "0x60013EE")]
		[Address(RVA = "0xCC3160", Offset = "0xCC3160", VA = "0xCC3160")]
		public static extern IntPtr SteamScreenshots();

		[PreserveSig]
		[Token(Token = "0x60013EF")]
		[Address(RVA = "0xCC3210", Offset = "0xCC3210", VA = "0xCC3210")]
		public static extern IntPtr SteamHTTP();

		[PreserveSig]
		[Token(Token = "0x60013F0")]
		[Address(RVA = "0xCC32C0", Offset = "0xCC32C0", VA = "0xCC32C0")]
		public static extern IntPtr SteamUnifiedMessages();

		[PreserveSig]
		[Token(Token = "0x60013F1")]
		[Address(RVA = "0xCC3370", Offset = "0xCC3370", VA = "0xCC3370")]
		public static extern IntPtr SteamController();

		[PreserveSig]
		[Token(Token = "0x60013F2")]
		[Address(RVA = "0xCC3420", Offset = "0xCC3420", VA = "0xCC3420")]
		public static extern IntPtr SteamUGC();

		[PreserveSig]
		[Token(Token = "0x60013F3")]
		[Address(RVA = "0xCC34D0", Offset = "0xCC34D0", VA = "0xCC34D0")]
		public static extern IntPtr SteamAppList();

		[PreserveSig]
		[Token(Token = "0x60013F4")]
		[Address(RVA = "0xCC3580", Offset = "0xCC3580", VA = "0xCC3580")]
		public static extern IntPtr SteamMusic();

		[PreserveSig]
		[Token(Token = "0x60013F5")]
		[Address(RVA = "0xCC3630", Offset = "0xCC3630", VA = "0xCC3630")]
		public static extern IntPtr SteamMusicRemote();

		[PreserveSig]
		[Token(Token = "0x60013F6")]
		[Address(RVA = "0xCC36E0", Offset = "0xCC36E0", VA = "0xCC36E0")]
		public static extern bool SteamGameServer_InitSafe(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, string pchVersionString);

		[PreserveSig]
		[Token(Token = "0x60013F7")]
		[Address(RVA = "0xCC37EC", Offset = "0xCC37EC", VA = "0xCC37EC")]
		public static extern void SteamGameServer_Shutdown();

		[PreserveSig]
		[Token(Token = "0x60013F8")]
		[Address(RVA = "0xCC389C", Offset = "0xCC389C", VA = "0xCC389C")]
		public static extern void SteamGameServer_RunCallbacks();

		[PreserveSig]
		[Token(Token = "0x60013F9")]
		[Address(RVA = "0xCC394C", Offset = "0xCC394C", VA = "0xCC394C")]
		public static extern bool SteamGameServer_BSecure();

		[PreserveSig]
		[Token(Token = "0x60013FA")]
		[Address(RVA = "0xCC3A08", Offset = "0xCC3A08", VA = "0xCC3A08")]
		public static extern ulong SteamGameServer_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x60013FB")]
		[Address(RVA = "0xCC3AB8", Offset = "0xCC3AB8", VA = "0xCC3AB8")]
		public static extern int SteamGameServer_GetHSteamPipe();

		[PreserveSig]
		[Token(Token = "0x60013FC")]
		[Address(RVA = "0xCC3B68", Offset = "0xCC3B68", VA = "0xCC3B68")]
		public static extern int SteamGameServer_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x60013FD")]
		[Address(RVA = "0xCBADE8", Offset = "0xCBADE8", VA = "0xCBADE8")]
		public static extern IntPtr SteamClientGameServer();

		[PreserveSig]
		[Token(Token = "0x60013FE")]
		[Address(RVA = "0xCC3C18", Offset = "0xCC3C18", VA = "0xCC3C18")]
		public static extern IntPtr SteamGameServer();

		[PreserveSig]
		[Token(Token = "0x60013FF")]
		[Address(RVA = "0xCC3CC8", Offset = "0xCC3CC8", VA = "0xCC3CC8")]
		public static extern IntPtr SteamGameServerUtils();

		[PreserveSig]
		[Token(Token = "0x6001400")]
		[Address(RVA = "0xCC3D78", Offset = "0xCC3D78", VA = "0xCC3D78")]
		public static extern IntPtr SteamGameServerNetworking();

		[PreserveSig]
		[Token(Token = "0x6001401")]
		[Address(RVA = "0xCC3E28", Offset = "0xCC3E28", VA = "0xCC3E28")]
		public static extern IntPtr SteamGameServerStats();

		[PreserveSig]
		[Token(Token = "0x6001402")]
		[Address(RVA = "0xCC3ED8", Offset = "0xCC3ED8", VA = "0xCC3ED8")]
		public static extern IntPtr SteamGameServerHTTP();

		[PreserveSig]
		[Token(Token = "0x6001403")]
		[Address(RVA = "0xCC3F88", Offset = "0xCC3F88", VA = "0xCC3F88")]
		public static extern bool BDecryptTicket(byte[] rgubTicketEncrypted, uint cubTicketEncrypted, byte[] rgubTicketDecrypted, out uint pcubTicketDecrypted, byte[] rgubKey, int cubKey);

		[PreserveSig]
		[Token(Token = "0x6001404")]
		[Address(RVA = "0xCC40A4", Offset = "0xCC40A4", VA = "0xCC40A4")]
		public static extern bool BIsTicketForApp(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x6001405")]
		[Address(RVA = "0xCC4188", Offset = "0xCC4188", VA = "0xCC4188")]
		public static extern uint GetTicketIssueTime(byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x6001406")]
		[Address(RVA = "0xCC4258", Offset = "0xCC4258", VA = "0xCC4258")]
		public static extern void GetTicketSteamID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID);

		[PreserveSig]
		[Token(Token = "0x6001407")]
		[Address(RVA = "0xCC4344", Offset = "0xCC4344", VA = "0xCC4344")]
		public static extern uint GetTicketAppID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x6001408")]
		[Address(RVA = "0xCC4414", Offset = "0xCC4414", VA = "0xCC4414")]
		public static extern bool BUserOwnsAppInTicket(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x6001409")]
		[Address(RVA = "0xCC44F8", Offset = "0xCC44F8", VA = "0xCC44F8")]
		public static extern bool BUserIsVacBanned(byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x600140A")]
		[Address(RVA = "0xCC45D4", Offset = "0xCC45D4", VA = "0xCC45D4")]
		public static extern IntPtr GetUserVariableData(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData);

		[PreserveSig]
		[Token(Token = "0x600140B")]
		[Address(RVA = "0xCC46BC", Offset = "0xCC46BC", VA = "0xCC46BC")]
		public static extern uint ISteamAppList_GetNumInstalledApps();

		[PreserveSig]
		[Token(Token = "0x600140C")]
		[Address(RVA = "0xCC476C", Offset = "0xCC476C", VA = "0xCC476C")]
		public static extern uint ISteamAppList_GetInstalledApps(AppId_t[] pvecAppID, uint unMaxAppIDs);

		[PreserveSig]
		[Token(Token = "0x600140D")]
		[Address(RVA = "0xCC483C", Offset = "0xCC483C", VA = "0xCC483C")]
		public static extern int ISteamAppList_GetAppName(AppId_t nAppID, IntPtr pchName, int cchNameMax);

		[PreserveSig]
		[Token(Token = "0x600140E")]
		[Address(RVA = "0xCC490C", Offset = "0xCC490C", VA = "0xCC490C")]
		public static extern int ISteamAppList_GetAppInstallDir(AppId_t nAppID, IntPtr pchDirectory, int cchNameMax);

		[PreserveSig]
		[Token(Token = "0x600140F")]
		[Address(RVA = "0xCC49DC", Offset = "0xCC49DC", VA = "0xCC49DC")]
		public static extern int ISteamAppList_GetAppBuildId(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x6001410")]
		[Address(RVA = "0xCC4A9C", Offset = "0xCC4A9C", VA = "0xCC4A9C")]
		public static extern bool ISteamApps_BIsSubscribed();

		[PreserveSig]
		[Token(Token = "0x6001411")]
		[Address(RVA = "0xCC4B58", Offset = "0xCC4B58", VA = "0xCC4B58")]
		public static extern bool ISteamApps_BIsLowViolence();

		[PreserveSig]
		[Token(Token = "0x6001412")]
		[Address(RVA = "0xCC4C14", Offset = "0xCC4C14", VA = "0xCC4C14")]
		public static extern bool ISteamApps_BIsCybercafe();

		[PreserveSig]
		[Token(Token = "0x6001413")]
		[Address(RVA = "0xCC4CD0", Offset = "0xCC4CD0", VA = "0xCC4CD0")]
		public static extern bool ISteamApps_BIsVACBanned();

		[PreserveSig]
		[Token(Token = "0x6001414")]
		[Address(RVA = "0xCC4D8C", Offset = "0xCC4D8C", VA = "0xCC4D8C")]
		public static extern string ISteamApps_GetCurrentGameLanguage();

		[PreserveSig]
		[Token(Token = "0x6001415")]
		[Address(RVA = "0xCC4E54", Offset = "0xCC4E54", VA = "0xCC4E54")]
		public static extern string ISteamApps_GetAvailableGameLanguages();

		[PreserveSig]
		[Token(Token = "0x6001416")]
		[Address(RVA = "0xCC4F1C", Offset = "0xCC4F1C", VA = "0xCC4F1C")]
		public static extern bool ISteamApps_BIsSubscribedApp(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x6001417")]
		[Address(RVA = "0xCC4FE8", Offset = "0xCC4FE8", VA = "0xCC4FE8")]
		public static extern bool ISteamApps_BIsDlcInstalled(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x6001418")]
		[Address(RVA = "0xCC50B4", Offset = "0xCC50B4", VA = "0xCC50B4")]
		public static extern uint ISteamApps_GetEarliestPurchaseUnixTime(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x6001419")]
		[Address(RVA = "0xCC5174", Offset = "0xCC5174", VA = "0xCC5174")]
		public static extern bool ISteamApps_BIsSubscribedFromFreeWeekend();

		[PreserveSig]
		[Token(Token = "0x600141A")]
		[Address(RVA = "0xCC5230", Offset = "0xCC5230", VA = "0xCC5230")]
		public static extern int ISteamApps_GetDLCCount();

		[PreserveSig]
		[Token(Token = "0x600141B")]
		[Address(RVA = "0xCC52E0", Offset = "0xCC52E0", VA = "0xCC52E0")]
		public static extern bool ISteamApps_BGetDLCDataByIndex(int iDLC, out AppId_t pAppID, out bool pbAvailable, IntPtr pchName, int cchNameBufferSize);

		[PreserveSig]
		[Token(Token = "0x600141C")]
		[Address(RVA = "0xCC53E8", Offset = "0xCC53E8", VA = "0xCC53E8")]
		public static extern void ISteamApps_InstallDLC(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x600141D")]
		[Address(RVA = "0xCC54A8", Offset = "0xCC54A8", VA = "0xCC54A8")]
		public static extern void ISteamApps_UninstallDLC(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x600141E")]
		[Address(RVA = "0xCC5568", Offset = "0xCC5568", VA = "0xCC5568")]
		public static extern void ISteamApps_RequestAppProofOfPurchaseKey(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x600141F")]
		[Address(RVA = "0xCC5628", Offset = "0xCC5628", VA = "0xCC5628")]
		public static extern bool ISteamApps_GetCurrentBetaName(IntPtr pchName, int cchNameBufferSize);

		[PreserveSig]
		[Token(Token = "0x6001420")]
		[Address(RVA = "0xCC56FC", Offset = "0xCC56FC", VA = "0xCC56FC")]
		public static extern bool ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly);

		[PreserveSig]
		[Token(Token = "0x6001421")]
		[Address(RVA = "0xCC57C8", Offset = "0xCC57C8", VA = "0xCC57C8")]
		public static extern uint ISteamApps_GetInstalledDepots(AppId_t appID, DepotId_t[] pvecDepots, uint cMaxDepots);

		[PreserveSig]
		[Token(Token = "0x6001422")]
		[Address(RVA = "0xCC58A0", Offset = "0xCC58A0", VA = "0xCC58A0")]
		public static extern uint ISteamApps_GetAppInstallDir(AppId_t appID, IntPtr pchFolder, uint cchFolderBufferSize);

		[PreserveSig]
		[Token(Token = "0x6001423")]
		[Address(RVA = "0xCC5970", Offset = "0xCC5970", VA = "0xCC5970")]
		public static extern bool ISteamApps_BIsAppInstalled(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x6001424")]
		[Address(RVA = "0xCC5A3C", Offset = "0xCC5A3C", VA = "0xCC5A3C")]
		public static extern ulong ISteamApps_GetAppOwner();

		[PreserveSig]
		[Token(Token = "0x6001425")]
		[Address(RVA = "0xCC5AEC", Offset = "0xCC5AEC", VA = "0xCC5AEC")]
		public static extern string ISteamApps_GetLaunchQueryParam(string pchKey);

		[PreserveSig]
		[Token(Token = "0x6001426")]
		[Address(RVA = "0xCC5BE0", Offset = "0xCC5BE0", VA = "0xCC5BE0")]
		public static extern int ISteamClient_CreateSteamPipe();

		[PreserveSig]
		[Token(Token = "0x6001427")]
		[Address(RVA = "0xCC5C90", Offset = "0xCC5C90", VA = "0xCC5C90")]
		public static extern bool ISteamClient_BReleaseSteamPipe(HSteamPipe hSteamPipe);

		[PreserveSig]
		[Token(Token = "0x6001428")]
		[Address(RVA = "0xCC5D5C", Offset = "0xCC5D5C", VA = "0xCC5D5C")]
		public static extern int ISteamClient_ConnectToGlobalUser(HSteamPipe hSteamPipe);

		[PreserveSig]
		[Token(Token = "0x6001429")]
		[Address(RVA = "0xCC5E1C", Offset = "0xCC5E1C", VA = "0xCC5E1C")]
		public static extern int ISteamClient_CreateLocalUser(out HSteamPipe phSteamPipe, EAccountType eAccountType);

		[PreserveSig]
		[Token(Token = "0x600142A")]
		[Address(RVA = "0xCC5EF4", Offset = "0xCC5EF4", VA = "0xCC5EF4")]
		public static extern void ISteamClient_ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser);

		[PreserveSig]
		[Token(Token = "0x600142B")]
		[Address(RVA = "0xCC5FBC", Offset = "0xCC5FBC", VA = "0xCC5FBC")]
		public static extern IntPtr ISteamClient_GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x600142C")]
		[Address(RVA = "0xCC60B0", Offset = "0xCC60B0", VA = "0xCC60B0")]
		public static extern IntPtr ISteamClient_GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x600142D")]
		[Address(RVA = "0xCC61A4", Offset = "0xCC61A4", VA = "0xCC61A4")]
		public static extern void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort);

		[PreserveSig]
		[Token(Token = "0x600142E")]
		[Address(RVA = "0xCC626C", Offset = "0xCC626C", VA = "0xCC626C")]
		public static extern IntPtr ISteamClient_GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x600142F")]
		[Address(RVA = "0xCC6360", Offset = "0xCC6360", VA = "0xCC6360")]
		public static extern IntPtr ISteamClient_GetISteamUtils(HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x6001430")]
		[Address(RVA = "0xCC644C", Offset = "0xCC644C", VA = "0xCC644C")]
		public static extern IntPtr ISteamClient_GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x6001431")]
		[Address(RVA = "0xCC6540", Offset = "0xCC6540", VA = "0xCC6540")]
		public static extern IntPtr ISteamClient_GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x6001432")]
		[Address(RVA = "0xCC6634", Offset = "0xCC6634", VA = "0xCC6634")]
		public static extern IntPtr ISteamClient_GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x6001433")]
		[Address(RVA = "0xCC6728", Offset = "0xCC6728", VA = "0xCC6728")]
		public static extern IntPtr ISteamClient_GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x6001434")]
		[Address(RVA = "0xCC681C", Offset = "0xCC681C", VA = "0xCC681C")]
		public static extern IntPtr ISteamClient_GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x6001435")]
		[Address(RVA = "0xCC6910", Offset = "0xCC6910", VA = "0xCC6910")]
		public static extern IntPtr ISteamClient_GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x6001436")]
		[Address(RVA = "0xCC6A04", Offset = "0xCC6A04", VA = "0xCC6A04")]
		public static extern IntPtr ISteamClient_GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x6001437")]
		[Address(RVA = "0xCC6AF8", Offset = "0xCC6AF8", VA = "0xCC6AF8")]
		public static extern IntPtr ISteamClient_GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x6001438")]
		[Address(RVA = "0xCC6BEC", Offset = "0xCC6BEC", VA = "0xCC6BEC")]
		public static extern IntPtr ISteamClient_GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x6001439")]
		[Address(RVA = "0xCC6CE0", Offset = "0xCC6CE0", VA = "0xCC6CE0")]
		public static extern void ISteamClient_RunFrame();

		[PreserveSig]
		[Token(Token = "0x600143A")]
		[Address(RVA = "0xCC6D90", Offset = "0xCC6D90", VA = "0xCC6D90")]
		public static extern uint ISteamClient_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x600143B")]
		[Address(RVA = "0xCC6E40", Offset = "0xCC6E40", VA = "0xCC6E40")]
		public static extern void ISteamClient_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x600143C")]
		[Address(RVA = "0xCC6F0C", Offset = "0xCC6F0C", VA = "0xCC6F0C")]
		public static extern bool ISteamClient_BShutdownIfAllPipesClosed();

		[PreserveSig]
		[Token(Token = "0x600143D")]
		[Address(RVA = "0xCC6FC8", Offset = "0xCC6FC8", VA = "0xCC6FC8")]
		public static extern IntPtr ISteamClient_GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x600143E")]
		[Address(RVA = "0xCC70BC", Offset = "0xCC70BC", VA = "0xCC70BC")]
		public static extern IntPtr ISteamClient_GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x600143F")]
		[Address(RVA = "0xCC71B0", Offset = "0xCC71B0", VA = "0xCC71B0")]
		public static extern IntPtr ISteamClient_GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x6001440")]
		[Address(RVA = "0xCC72A4", Offset = "0xCC72A4", VA = "0xCC72A4")]
		public static extern IntPtr ISteamClient_GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x6001441")]
		[Address(RVA = "0xCC7398", Offset = "0xCC7398", VA = "0xCC7398")]
		public static extern IntPtr ISteamClient_GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x6001442")]
		[Address(RVA = "0xCC748C", Offset = "0xCC748C", VA = "0xCC748C")]
		public static extern IntPtr ISteamClient_GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x6001443")]
		[Address(RVA = "0xCC7580", Offset = "0xCC7580", VA = "0xCC7580")]
		public static extern IntPtr ISteamClient_GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x6001444")]
		[Address(RVA = "0xCC7674", Offset = "0xCC7674", VA = "0xCC7674")]
		public static extern IntPtr ISteamClient_GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion);

		[PreserveSig]
		[Token(Token = "0x6001445")]
		[Address(RVA = "0xCC7768", Offset = "0xCC7768", VA = "0xCC7768")]
		public static extern void ISteamClient_Set_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func);

		[PreserveSig]
		[Token(Token = "0x6001446")]
		[Address(RVA = "0xCC7834", Offset = "0xCC7834", VA = "0xCC7834")]
		public static extern void ISteamClient_Remove_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func);

		[PreserveSig]
		[Token(Token = "0x6001447")]
		[Address(RVA = "0xCC7900", Offset = "0xCC7900", VA = "0xCC7900")]
		public static extern void ISteamClient_Set_SteamAPI_CCheckCallbackRegisteredInProcess(SteamAPI_CheckCallbackRegistered_t func);

		[PreserveSig]
		[Token(Token = "0x6001448")]
		[Address(RVA = "0xCC79CC", Offset = "0xCC79CC", VA = "0xCC79CC")]
		public static extern bool ISteamController_Init(string pchAbsolutePathToControllerConfigVDF);

		[PreserveSig]
		[Token(Token = "0x6001449")]
		[Address(RVA = "0xCC7AB8", Offset = "0xCC7AB8", VA = "0xCC7AB8")]
		public static extern bool ISteamController_Shutdown();

		[PreserveSig]
		[Token(Token = "0x600144A")]
		[Address(RVA = "0xCC7B74", Offset = "0xCC7B74", VA = "0xCC7B74")]
		public static extern void ISteamController_RunFrame();

		[PreserveSig]
		[Token(Token = "0x600144B")]
		[Address(RVA = "0xCC7C24", Offset = "0xCC7C24", VA = "0xCC7C24")]
		public static extern bool ISteamController_GetControllerState(uint unControllerIndex, out SteamControllerState_t pState);

		[PreserveSig]
		[Token(Token = "0x600144C")]
		[Address(RVA = "0xCC7D1C", Offset = "0xCC7D1C", VA = "0xCC7D1C")]
		public static extern void ISteamController_TriggerHapticPulse(uint unControllerIndex, ESteamControllerPad eTargetPad, ushort usDurationMicroSec);

		[PreserveSig]
		[Token(Token = "0x600144D")]
		[Address(RVA = "0xCC7DEC", Offset = "0xCC7DEC", VA = "0xCC7DEC")]
		public static extern void ISteamController_SetOverrideMode(string pchMode);

		[PreserveSig]
		[Token(Token = "0x600144E")]
		[Address(RVA = "0xCC7EC8", Offset = "0xCC7EC8", VA = "0xCC7EC8")]
		public static extern string ISteamFriends_GetPersonaName();

		[PreserveSig]
		[Token(Token = "0x600144F")]
		[Address(RVA = "0xCC7F90", Offset = "0xCC7F90", VA = "0xCC7F90")]
		public static extern ulong ISteamFriends_SetPersonaName(string pchPersonaName);

		[PreserveSig]
		[Token(Token = "0x6001450")]
		[Address(RVA = "0xCC807C", Offset = "0xCC807C", VA = "0xCC807C")]
		public static extern EPersonaState ISteamFriends_GetPersonaState();

		[PreserveSig]
		[Token(Token = "0x6001451")]
		[Address(RVA = "0xCC812C", Offset = "0xCC812C", VA = "0xCC812C")]
		public static extern int ISteamFriends_GetFriendCount(EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x6001452")]
		[Address(RVA = "0xCC81EC", Offset = "0xCC81EC", VA = "0xCC81EC")]
		public static extern ulong ISteamFriends_GetFriendByIndex(int iFriend, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x6001453")]
		[Address(RVA = "0xCC82B4", Offset = "0xCC82B4", VA = "0xCC82B4")]
		public static extern EFriendRelationship ISteamFriends_GetFriendRelationship(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6001454")]
		[Address(RVA = "0xCC837C", Offset = "0xCC837C", VA = "0xCC837C")]
		public static extern EPersonaState ISteamFriends_GetFriendPersonaState(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6001455")]
		[Address(RVA = "0xCC8444", Offset = "0xCC8444", VA = "0xCC8444")]
		public static extern string ISteamFriends_GetFriendPersonaName(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6001456")]
		[Address(RVA = "0xCC8524", Offset = "0xCC8524", VA = "0xCC8524")]
		public static extern bool ISteamFriends_GetFriendGamePlayed(CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo);

		[PreserveSig]
		[Token(Token = "0x6001457")]
		[Address(RVA = "0xCC8618", Offset = "0xCC8618", VA = "0xCC8618")]
		public static extern string ISteamFriends_GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName);

		[PreserveSig]
		[Token(Token = "0x6001458")]
		[Address(RVA = "0xCC86FC", Offset = "0xCC86FC", VA = "0xCC86FC")]
		public static extern string ISteamFriends_GetPlayerNickname(CSteamID steamIDPlayer);

		[PreserveSig]
		[Token(Token = "0x6001459")]
		[Address(RVA = "0xCC87DC", Offset = "0xCC87DC", VA = "0xCC87DC")]
		public static extern bool ISteamFriends_HasFriend(CSteamID steamIDFriend, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x600145A")]
		[Address(RVA = "0xCC88B4", Offset = "0xCC88B4", VA = "0xCC88B4")]
		public static extern int ISteamFriends_GetClanCount();

		[PreserveSig]
		[Token(Token = "0x600145B")]
		[Address(RVA = "0xCC8964", Offset = "0xCC8964", VA = "0xCC8964")]
		public static extern ulong ISteamFriends_GetClanByIndex(int iClan);

		[PreserveSig]
		[Token(Token = "0x600145C")]
		[Address(RVA = "0xCC8A24", Offset = "0xCC8A24", VA = "0xCC8A24")]
		public static extern string ISteamFriends_GetClanName(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600145D")]
		[Address(RVA = "0xCC8B04", Offset = "0xCC8B04", VA = "0xCC8B04")]
		public static extern string ISteamFriends_GetClanTag(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600145E")]
		[Address(RVA = "0xCC8BE4", Offset = "0xCC8BE4", VA = "0xCC8BE4")]
		public static extern bool ISteamFriends_GetClanActivityCounts(CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

		[PreserveSig]
		[Token(Token = "0x600145F")]
		[Address(RVA = "0xCC8CFC", Offset = "0xCC8CFC", VA = "0xCC8CFC")]
		public static extern ulong ISteamFriends_DownloadClanActivityCounts(CSteamID[] psteamIDClans, int cClansToRequest);

		[PreserveSig]
		[Token(Token = "0x6001460")]
		[Address(RVA = "0xCC8DCC", Offset = "0xCC8DCC", VA = "0xCC8DCC")]
		public static extern int ISteamFriends_GetFriendCountFromSource(CSteamID steamIDSource);

		[PreserveSig]
		[Token(Token = "0x6001461")]
		[Address(RVA = "0xCC8E94", Offset = "0xCC8E94", VA = "0xCC8E94")]
		public static extern ulong ISteamFriends_GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend);

		[PreserveSig]
		[Token(Token = "0x6001462")]
		[Address(RVA = "0xCC8F60", Offset = "0xCC8F60", VA = "0xCC8F60")]
		public static extern bool ISteamFriends_IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource);

		[PreserveSig]
		[Token(Token = "0x6001463")]
		[Address(RVA = "0xCC903C", Offset = "0xCC903C", VA = "0xCC903C")]
		public static extern void ISteamFriends_SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking);

		[PreserveSig]
		[Token(Token = "0x6001464")]
		[Address(RVA = "0xCC9108", Offset = "0xCC9108", VA = "0xCC9108")]
		public static extern void ISteamFriends_ActivateGameOverlay(string pchDialog);

		[PreserveSig]
		[Token(Token = "0x6001465")]
		[Address(RVA = "0xCC91E4", Offset = "0xCC91E4", VA = "0xCC91E4")]
		public static extern void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6001466")]
		[Address(RVA = "0xCC92D0", Offset = "0xCC92D0", VA = "0xCC92D0")]
		public static extern void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL);

		[PreserveSig]
		[Token(Token = "0x6001467")]
		[Address(RVA = "0xCC93AC", Offset = "0xCC93AC", VA = "0xCC93AC")]
		public static extern void ISteamFriends_ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag);

		[PreserveSig]
		[Token(Token = "0x6001468")]
		[Address(RVA = "0xCC9474", Offset = "0xCC9474", VA = "0xCC9474")]
		public static extern void ISteamFriends_SetPlayedWith(CSteamID steamIDUserPlayedWith);

		[PreserveSig]
		[Token(Token = "0x6001469")]
		[Address(RVA = "0xCC953C", Offset = "0xCC953C", VA = "0xCC953C")]
		public static extern void ISteamFriends_ActivateGameOverlayInviteDialog(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x600146A")]
		[Address(RVA = "0xCC9604", Offset = "0xCC9604", VA = "0xCC9604")]
		public static extern int ISteamFriends_GetSmallFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600146B")]
		[Address(RVA = "0xCC96CC", Offset = "0xCC96CC", VA = "0xCC96CC")]
		public static extern int ISteamFriends_GetMediumFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600146C")]
		[Address(RVA = "0xCC9794", Offset = "0xCC9794", VA = "0xCC9794")]
		public static extern int ISteamFriends_GetLargeFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600146D")]
		[Address(RVA = "0xCC985C", Offset = "0xCC985C", VA = "0xCC985C")]
		public static extern bool ISteamFriends_RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly);

		[PreserveSig]
		[Token(Token = "0x600146E")]
		[Address(RVA = "0xCC9934", Offset = "0xCC9934", VA = "0xCC9934")]
		public static extern ulong ISteamFriends_RequestClanOfficerList(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600146F")]
		[Address(RVA = "0xCC99FC", Offset = "0xCC99FC", VA = "0xCC99FC")]
		public static extern ulong ISteamFriends_GetClanOwner(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6001470")]
		[Address(RVA = "0xCC9AC4", Offset = "0xCC9AC4", VA = "0xCC9AC4")]
		public static extern int ISteamFriends_GetClanOfficerCount(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6001471")]
		[Address(RVA = "0xCC9B8C", Offset = "0xCC9B8C", VA = "0xCC9B8C")]
		public static extern ulong ISteamFriends_GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer);

		[PreserveSig]
		[Token(Token = "0x6001472")]
		[Address(RVA = "0xCC9C58", Offset = "0xCC9C58", VA = "0xCC9C58")]
		public static extern uint ISteamFriends_GetUserRestrictions();

		[PreserveSig]
		[Token(Token = "0x6001473")]
		[Address(RVA = "0xCC9D08", Offset = "0xCC9D08", VA = "0xCC9D08")]
		public static extern bool ISteamFriends_SetRichPresence(string pchKey, string pchValue);

		[PreserveSig]
		[Token(Token = "0x6001474")]
		[Address(RVA = "0xCC9E10", Offset = "0xCC9E10", VA = "0xCC9E10")]
		public static extern void ISteamFriends_ClearRichPresence();

		[PreserveSig]
		[Token(Token = "0x6001475")]
		[Address(RVA = "0xCC9EC0", Offset = "0xCC9EC0", VA = "0xCC9EC0")]
		public static extern string ISteamFriends_GetFriendRichPresence(CSteamID steamIDFriend, string pchKey);

		[PreserveSig]
		[Token(Token = "0x6001476")]
		[Address(RVA = "0xCC9FC0", Offset = "0xCC9FC0", VA = "0xCC9FC0")]
		public static extern int ISteamFriends_GetFriendRichPresenceKeyCount(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6001477")]
		[Address(RVA = "0xCCA088", Offset = "0xCCA088", VA = "0xCCA088")]
		public static extern string ISteamFriends_GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey);

		[PreserveSig]
		[Token(Token = "0x6001478")]
		[Address(RVA = "0xCCA16C", Offset = "0xCCA16C", VA = "0xCCA16C")]
		public static extern void ISteamFriends_RequestFriendRichPresence(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6001479")]
		[Address(RVA = "0xCCA234", Offset = "0xCCA234", VA = "0xCCA234")]
		public static extern bool ISteamFriends_InviteUserToGame(CSteamID steamIDFriend, string pchConnectString);

		[PreserveSig]
		[Token(Token = "0x600147A")]
		[Address(RVA = "0xCCA32C", Offset = "0xCCA32C", VA = "0xCCA32C")]
		public static extern int ISteamFriends_GetCoplayFriendCount();

		[PreserveSig]
		[Token(Token = "0x600147B")]
		[Address(RVA = "0xCCA3DC", Offset = "0xCCA3DC", VA = "0xCCA3DC")]
		public static extern ulong ISteamFriends_GetCoplayFriend(int iCoplayFriend);

		[PreserveSig]
		[Token(Token = "0x600147C")]
		[Address(RVA = "0xCCA49C", Offset = "0xCCA49C", VA = "0xCCA49C")]
		public static extern int ISteamFriends_GetFriendCoplayTime(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600147D")]
		[Address(RVA = "0xCCA564", Offset = "0xCCA564", VA = "0xCCA564")]
		public static extern uint ISteamFriends_GetFriendCoplayGame(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600147E")]
		[Address(RVA = "0xCCA62C", Offset = "0xCCA62C", VA = "0xCCA62C")]
		public static extern ulong ISteamFriends_JoinClanChatRoom(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600147F")]
		[Address(RVA = "0xCCA6F4", Offset = "0xCCA6F4", VA = "0xCCA6F4")]
		public static extern bool ISteamFriends_LeaveClanChatRoom(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6001480")]
		[Address(RVA = "0xCCA7C8", Offset = "0xCCA7C8", VA = "0xCCA7C8")]
		public static extern int ISteamFriends_GetClanChatMemberCount(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6001481")]
		[Address(RVA = "0xCCA890", Offset = "0xCCA890", VA = "0xCCA890")]
		public static extern ulong ISteamFriends_GetChatMemberByIndex(CSteamID steamIDClan, int iUser);

		[PreserveSig]
		[Token(Token = "0x6001482")]
		[Address(RVA = "0xCCA95C", Offset = "0xCCA95C", VA = "0xCCA95C")]
		public static extern bool ISteamFriends_SendClanChatMessage(CSteamID steamIDClanChat, string pchText);

		[PreserveSig]
		[Token(Token = "0x6001483")]
		[Address(RVA = "0xCCAA54", Offset = "0xCCAA54", VA = "0xCCAA54")]
		public static extern int ISteamFriends_GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter);

		[PreserveSig]
		[Token(Token = "0x6001484")]
		[Address(RVA = "0xCCAB54", Offset = "0xCCAB54", VA = "0xCCAB54")]
		public static extern bool ISteamFriends_IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6001485")]
		[Address(RVA = "0xCCAC30", Offset = "0xCCAC30", VA = "0xCCAC30")]
		public static extern bool ISteamFriends_IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x6001486")]
		[Address(RVA = "0xCCAD04", Offset = "0xCCAD04", VA = "0xCCAD04")]
		public static extern bool ISteamFriends_OpenClanChatWindowInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x6001487")]
		[Address(RVA = "0xCCADD8", Offset = "0xCCADD8", VA = "0xCCADD8")]
		public static extern bool ISteamFriends_CloseClanChatWindowInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x6001488")]
		[Address(RVA = "0xCCAEAC", Offset = "0xCCAEAC", VA = "0xCCAEAC")]
		public static extern bool ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled);

		[PreserveSig]
		[Token(Token = "0x6001489")]
		[Address(RVA = "0xCCAF78", Offset = "0xCCAF78", VA = "0xCCAF78")]
		public static extern bool ISteamFriends_ReplyToFriendMessage(CSteamID steamIDFriend, string pchMsgToSend);

		[PreserveSig]
		[Token(Token = "0x600148A")]
		[Address(RVA = "0xCCB070", Offset = "0xCCB070", VA = "0xCCB070")]
		public static extern int ISteamFriends_GetFriendMessage(CSteamID steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out EChatEntryType peChatEntryType);

		[PreserveSig]
		[Token(Token = "0x600148B")]
		[Address(RVA = "0xCCB150", Offset = "0xCCB150", VA = "0xCCB150")]
		public static extern ulong ISteamFriends_GetFollowerCount(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600148C")]
		[Address(RVA = "0xCCB218", Offset = "0xCCB218", VA = "0xCCB218")]
		public static extern ulong ISteamFriends_IsFollowing(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600148D")]
		[Address(RVA = "0xCCB2E0", Offset = "0xCCB2E0", VA = "0xCCB2E0")]
		public static extern ulong ISteamFriends_EnumerateFollowingList(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x600148E")]
		[Address(RVA = "0xCCB3A0", Offset = "0xCCB3A0", VA = "0xCCB3A0")]
		public static extern bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId_t nGameAppId, string pchVersionString);

		[PreserveSig]
		[Token(Token = "0x600148F")]
		[Address(RVA = "0xCCB4AC", Offset = "0xCCB4AC", VA = "0xCCB4AC")]
		public static extern void ISteamGameServer_SetProduct(string pszProduct);

		[PreserveSig]
		[Token(Token = "0x6001490")]
		[Address(RVA = "0xCCB588", Offset = "0xCCB588", VA = "0xCCB588")]
		public static extern void ISteamGameServer_SetGameDescription(string pszGameDescription);

		[PreserveSig]
		[Token(Token = "0x6001491")]
		[Address(RVA = "0xCCB664", Offset = "0xCCB664", VA = "0xCCB664")]
		public static extern void ISteamGameServer_SetModDir(string pszModDir);

		[PreserveSig]
		[Token(Token = "0x6001492")]
		[Address(RVA = "0xCCB740", Offset = "0xCCB740", VA = "0xCCB740")]
		public static extern void ISteamGameServer_SetDedicatedServer(bool bDedicated);

		[PreserveSig]
		[Token(Token = "0x6001493")]
		[Address(RVA = "0xCCB800", Offset = "0xCCB800", VA = "0xCCB800")]
		public static extern void ISteamGameServer_LogOn(string pszToken);

		[PreserveSig]
		[Token(Token = "0x6001494")]
		[Address(RVA = "0xCCB8DC", Offset = "0xCCB8DC", VA = "0xCCB8DC")]
		public static extern void ISteamGameServer_LogOnAnonymous();

		[PreserveSig]
		[Token(Token = "0x6001495")]
		[Address(RVA = "0xCCB98C", Offset = "0xCCB98C", VA = "0xCCB98C")]
		public static extern void ISteamGameServer_LogOff();

		[PreserveSig]
		[Token(Token = "0x6001496")]
		[Address(RVA = "0xCCBA3C", Offset = "0xCCBA3C", VA = "0xCCBA3C")]
		public static extern bool ISteamGameServer_BLoggedOn();

		[PreserveSig]
		[Token(Token = "0x6001497")]
		[Address(RVA = "0xCCBAF8", Offset = "0xCCBAF8", VA = "0xCCBAF8")]
		public static extern bool ISteamGameServer_BSecure();

		[PreserveSig]
		[Token(Token = "0x6001498")]
		[Address(RVA = "0xCCBBB4", Offset = "0xCCBBB4", VA = "0xCCBBB4")]
		public static extern ulong ISteamGameServer_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x6001499")]
		[Address(RVA = "0xCCBC64", Offset = "0xCCBC64", VA = "0xCCBC64")]
		public static extern bool ISteamGameServer_WasRestartRequested();

		[PreserveSig]
		[Token(Token = "0x600149A")]
		[Address(RVA = "0xCCBD20", Offset = "0xCCBD20", VA = "0xCCBD20")]
		public static extern void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax);

		[PreserveSig]
		[Token(Token = "0x600149B")]
		[Address(RVA = "0xCCBDE0", Offset = "0xCCBDE0", VA = "0xCCBDE0")]
		public static extern void ISteamGameServer_SetBotPlayerCount(int cBotplayers);

		[PreserveSig]
		[Token(Token = "0x600149C")]
		[Address(RVA = "0xCCBEA0", Offset = "0xCCBEA0", VA = "0xCCBEA0")]
		public static extern void ISteamGameServer_SetServerName(string pszServerName);

		[PreserveSig]
		[Token(Token = "0x600149D")]
		[Address(RVA = "0xCCBF7C", Offset = "0xCCBF7C", VA = "0xCCBF7C")]
		public static extern void ISteamGameServer_SetMapName(string pszMapName);

		[PreserveSig]
		[Token(Token = "0x600149E")]
		[Address(RVA = "0xCCC058", Offset = "0xCCC058", VA = "0xCCC058")]
		public static extern void ISteamGameServer_SetPasswordProtected(bool bPasswordProtected);

		[PreserveSig]
		[Token(Token = "0x600149F")]
		[Address(RVA = "0xCCC118", Offset = "0xCCC118", VA = "0xCCC118")]
		public static extern void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort);

		[PreserveSig]
		[Token(Token = "0x60014A0")]
		[Address(RVA = "0xCCC1D8", Offset = "0xCCC1D8", VA = "0xCCC1D8")]
		public static extern void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName);

		[PreserveSig]
		[Token(Token = "0x60014A1")]
		[Address(RVA = "0xCCC2B4", Offset = "0xCCC2B4", VA = "0xCCC2B4")]
		public static extern void ISteamGameServer_ClearAllKeyValues();

		[PreserveSig]
		[Token(Token = "0x60014A2")]
		[Address(RVA = "0xCCC364", Offset = "0xCCC364", VA = "0xCCC364")]
		public static extern void ISteamGameServer_SetKeyValue(string pKey, string pValue);

		[PreserveSig]
		[Token(Token = "0x60014A3")]
		[Address(RVA = "0xCCC45C", Offset = "0xCCC45C", VA = "0xCCC45C")]
		public static extern void ISteamGameServer_SetGameTags(string pchGameTags);

		[PreserveSig]
		[Token(Token = "0x60014A4")]
		[Address(RVA = "0xCCC538", Offset = "0xCCC538", VA = "0xCCC538")]
		public static extern void ISteamGameServer_SetGameData(string pchGameData);

		[PreserveSig]
		[Token(Token = "0x60014A5")]
		[Address(RVA = "0xCCC614", Offset = "0xCCC614", VA = "0xCCC614")]
		public static extern void ISteamGameServer_SetRegion(string pszRegion);

		[PreserveSig]
		[Token(Token = "0x60014A6")]
		[Address(RVA = "0xCCC6F0", Offset = "0xCCC6F0", VA = "0xCCC6F0")]
		public static extern bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser);

		[PreserveSig]
		[Token(Token = "0x60014A7")]
		[Address(RVA = "0xCCC7F0", Offset = "0xCCC7F0", VA = "0xCCC7F0")]
		public static extern ulong ISteamGameServer_CreateUnauthenticatedUserConnection();

		[PreserveSig]
		[Token(Token = "0x60014A8")]
		[Address(RVA = "0xCCC8A0", Offset = "0xCCC8A0", VA = "0xCCC8A0")]
		public static extern void ISteamGameServer_SendUserDisconnect(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x60014A9")]
		[Address(RVA = "0xCCC968", Offset = "0xCCC968", VA = "0xCCC968")]
		public static extern bool ISteamGameServer_BUpdateUserData(CSteamID steamIDUser, string pchPlayerName, uint uScore);

		[PreserveSig]
		[Token(Token = "0x60014AA")]
		[Address(RVA = "0xCCCA68", Offset = "0xCCCA68", VA = "0xCCCA68")]
		public static extern uint ISteamGameServer_GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x60014AB")]
		[Address(RVA = "0xCCCB50", Offset = "0xCCCB50", VA = "0xCCCB50")]
		public static extern EBeginAuthSessionResult ISteamGameServer_BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60014AC")]
		[Address(RVA = "0xCCCC28", Offset = "0xCCCC28", VA = "0xCCCC28")]
		public static extern void ISteamGameServer_EndAuthSession(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60014AD")]
		[Address(RVA = "0xCCCCF0", Offset = "0xCCCCF0", VA = "0xCCCCF0")]
		public static extern void ISteamGameServer_CancelAuthTicket(HAuthTicket hAuthTicket);

		[PreserveSig]
		[Token(Token = "0x60014AE")]
		[Address(RVA = "0xCCCDB0", Offset = "0xCCCDB0", VA = "0xCCCDB0")]
		public static extern EUserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(CSteamID steamID, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60014AF")]
		[Address(RVA = "0xCCCE7C", Offset = "0xCCCE7C", VA = "0xCCCE7C")]
		public static extern bool ISteamGameServer_RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup);

		[PreserveSig]
		[Token(Token = "0x60014B0")]
		[Address(RVA = "0xCCCF58", Offset = "0xCCCF58", VA = "0xCCCF58")]
		public static extern void ISteamGameServer_GetGameplayStats();

		[PreserveSig]
		[Token(Token = "0x60014B1")]
		[Address(RVA = "0xCCD008", Offset = "0xCCD008", VA = "0xCCD008")]
		public static extern ulong ISteamGameServer_GetServerReputation();

		[PreserveSig]
		[Token(Token = "0x60014B2")]
		[Address(RVA = "0xCCD0B8", Offset = "0xCCD0B8", VA = "0xCCD0B8")]
		public static extern uint ISteamGameServer_GetPublicIP();

		[PreserveSig]
		[Token(Token = "0x60014B3")]
		[Address(RVA = "0xCCD168", Offset = "0xCCD168", VA = "0xCCD168")]
		public static extern bool ISteamGameServer_HandleIncomingPacket(byte[] pData, int cbData, uint srcIP, ushort srcPort);

		[PreserveSig]
		[Token(Token = "0x60014B4")]
		[Address(RVA = "0xCCD250", Offset = "0xCCD250", VA = "0xCCD250")]
		public static extern int ISteamGameServer_GetNextOutgoingPacket(byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

		[PreserveSig]
		[Token(Token = "0x60014B5")]
		[Address(RVA = "0xCCD34C", Offset = "0xCCD34C", VA = "0xCCD34C")]
		public static extern void ISteamGameServer_EnableHeartbeats(bool bActive);

		[PreserveSig]
		[Token(Token = "0x60014B6")]
		[Address(RVA = "0xCCD40C", Offset = "0xCCD40C", VA = "0xCCD40C")]
		public static extern void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval);

		[PreserveSig]
		[Token(Token = "0x60014B7")]
		[Address(RVA = "0xCCD4CC", Offset = "0xCCD4CC", VA = "0xCCD4CC")]
		public static extern void ISteamGameServer_ForceHeartbeat();

		[PreserveSig]
		[Token(Token = "0x60014B8")]
		[Address(RVA = "0xCCD57C", Offset = "0xCCD57C", VA = "0xCCD57C")]
		public static extern ulong ISteamGameServer_AssociateWithClan(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x60014B9")]
		[Address(RVA = "0xCCD644", Offset = "0xCCD644", VA = "0xCCD644")]
		public static extern ulong ISteamGameServer_ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer);

		[PreserveSig]
		[Token(Token = "0x60014BA")]
		[Address(RVA = "0xCCD70C", Offset = "0xCCD70C", VA = "0xCCD70C")]
		public static extern HTTPRequestHandle ISteamGameServerHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);

		[PreserveSig]
		[Token(Token = "0x60014BB")]
		[Address(RVA = "0xCCD7F8", Offset = "0xCCD7F8", VA = "0xCCD7F8")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue);

		[PreserveSig]
		[Token(Token = "0x60014BC")]
		[Address(RVA = "0xCCD8D4", Offset = "0xCCD8D4", VA = "0xCCD8D4")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds);

		[PreserveSig]
		[Token(Token = "0x60014BD")]
		[Address(RVA = "0xCCD9A8", Offset = "0xCCD9A8", VA = "0xCCD9A8")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue);

		[PreserveSig]
		[Token(Token = "0x60014BE")]
		[Address(RVA = "0xCCDAB8", Offset = "0xCCDAB8", VA = "0xCCDAB8")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue);

		[PreserveSig]
		[Token(Token = "0x60014BF")]
		[Address(RVA = "0xCCDBC8", Offset = "0xCCDBC8", VA = "0xCCDBC8")]
		public static extern bool ISteamGameServerHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x60014C0")]
		[Address(RVA = "0xCCDCB0", Offset = "0xCCDCB0", VA = "0xCCDCB0")]
		public static extern bool ISteamGameServerHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x60014C1")]
		[Address(RVA = "0xCCDD98", Offset = "0xCCDD98", VA = "0xCCDD98")]
		public static extern bool ISteamGameServerHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x60014C2")]
		[Address(RVA = "0xCCDE64", Offset = "0xCCDE64", VA = "0xCCDE64")]
		public static extern bool ISteamGameServerHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x60014C3")]
		[Address(RVA = "0xCCDF30", Offset = "0xCCDF30", VA = "0xCCDF30")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize);

		[PreserveSig]
		[Token(Token = "0x60014C4")]
		[Address(RVA = "0xCCE03C", Offset = "0xCCE03C", VA = "0xCCE03C")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x60014C5")]
		[Address(RVA = "0xCCE148", Offset = "0xCCE148", VA = "0xCCE148")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize);

		[PreserveSig]
		[Token(Token = "0x60014C6")]
		[Address(RVA = "0xCCE22C", Offset = "0xCCE22C", VA = "0xCCE22C")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x60014C7")]
		[Address(RVA = "0xCCE310", Offset = "0xCCE310", VA = "0xCCE310")]
		public static extern bool ISteamGameServerHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x60014C8")]
		[Address(RVA = "0xCCE3F8", Offset = "0xCCE3F8", VA = "0xCCE3F8")]
		public static extern bool ISteamGameServerHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x60014C9")]
		[Address(RVA = "0xCCE4C4", Offset = "0xCCE4C4", VA = "0xCCE4C4")]
		public static extern bool ISteamGameServerHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut);

		[PreserveSig]
		[Token(Token = "0x60014CA")]
		[Address(RVA = "0xCCE5A8", Offset = "0xCCE5A8", VA = "0xCCE5A8")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen);

		[PreserveSig]
		[Token(Token = "0x60014CB")]
		[Address(RVA = "0xCCE6B4", Offset = "0xCCE6B4", VA = "0xCCE6B4")]
		public static extern bool ISteamGameServerNetworking_SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel);

		[PreserveSig]
		[Token(Token = "0x60014CC")]
		[Address(RVA = "0xCCE7A8", Offset = "0xCCE7A8", VA = "0xCCE7A8")]
		public static extern bool ISteamGameServerNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0);

		[PreserveSig]
		[Token(Token = "0x60014CD")]
		[Address(RVA = "0xCCE88C", Offset = "0xCCE88C", VA = "0xCCE88C")]
		public static extern bool ISteamGameServerNetworking_ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x60014CE")]
		[Address(RVA = "0xCCE9A0", Offset = "0xCCE9A0", VA = "0xCCE9A0")]
		public static extern bool ISteamGameServerNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x60014CF")]
		[Address(RVA = "0xCCEA74", Offset = "0xCCEA74", VA = "0xCCEA74")]
		public static extern bool ISteamGameServerNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x60014D0")]
		[Address(RVA = "0xCCEB48", Offset = "0xCCEB48", VA = "0xCCEB48")]
		public static extern bool ISteamGameServerNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x60014D1")]
		[Address(RVA = "0xCCEC20", Offset = "0xCCEC20", VA = "0xCCEC20")]
		public static extern bool ISteamGameServerNetworking_GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState);

		[PreserveSig]
		[Token(Token = "0x60014D2")]
		[Address(RVA = "0xCCED14", Offset = "0xCCED14", VA = "0xCCED14")]
		public static extern bool ISteamGameServerNetworking_AllowP2PPacketRelay(bool bAllow);

		[PreserveSig]
		[Token(Token = "0x60014D3")]
		[Address(RVA = "0xCCEDE0", Offset = "0xCCEDE0", VA = "0xCCEDE0")]
		public static extern uint ISteamGameServerNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x60014D4")]
		[Address(RVA = "0xCCEEB4", Offset = "0xCCEEB4", VA = "0xCCEEB4")]
		public static extern uint ISteamGameServerNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x60014D5")]
		[Address(RVA = "0xCCEF8C", Offset = "0xCCEF8C", VA = "0xCCEF8C")]
		public static extern uint ISteamGameServerNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

		[PreserveSig]
		[Token(Token = "0x60014D6")]
		[Address(RVA = "0xCCF05C", Offset = "0xCCF05C", VA = "0xCCF05C")]
		public static extern bool ISteamGameServerNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x60014D7")]
		[Address(RVA = "0xCCF130", Offset = "0xCCF130", VA = "0xCCF130")]
		public static extern bool ISteamGameServerNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x60014D8")]
		[Address(RVA = "0xCCF204", Offset = "0xCCF204", VA = "0xCCF204")]
		public static extern bool ISteamGameServerNetworking_SendDataOnSocket(SNetSocket_t hSocket, IntPtr pubData, uint cubData, bool bReliable);

		[PreserveSig]
		[Token(Token = "0x60014D9")]
		[Address(RVA = "0xCCF2E4", Offset = "0xCCF2E4", VA = "0xCCF2E4")]
		public static extern bool ISteamGameServerNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x60014DA")]
		[Address(RVA = "0xCCF3C8", Offset = "0xCCF3C8", VA = "0xCCF3C8")]
		public static extern bool ISteamGameServerNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x60014DB")]
		[Address(RVA = "0xCCF4BC", Offset = "0xCCF4BC", VA = "0xCCF4BC")]
		public static extern bool ISteamGameServerNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x60014DC")]
		[Address(RVA = "0xCCF5B4", Offset = "0xCCF5B4", VA = "0xCCF5B4")]
		public static extern bool ISteamGameServerNetworking_RetrieveData(SNetListenSocket_t hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x60014DD")]
		[Address(RVA = "0xCCF6C0", Offset = "0xCCF6C0", VA = "0xCCF6C0")]
		public static extern bool ISteamGameServerNetworking_GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

		[PreserveSig]
		[Token(Token = "0x60014DE")]
		[Address(RVA = "0xCCF7EC", Offset = "0xCCF7EC", VA = "0xCCF7EC")]
		public static extern bool ISteamGameServerNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort);

		[PreserveSig]
		[Token(Token = "0x60014DF")]
		[Address(RVA = "0xCCF8E4", Offset = "0xCCF8E4", VA = "0xCCF8E4")]
		public static extern ESNetSocketConnectionType ISteamGameServerNetworking_GetSocketConnectionType(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x60014E0")]
		[Address(RVA = "0xCCF9A4", Offset = "0xCCF9A4", VA = "0xCCF9A4")]
		public static extern int ISteamGameServerNetworking_GetMaxPacketSize(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x60014E1")]
		[Address(RVA = "0xCCFA64", Offset = "0xCCFA64", VA = "0xCCFA64")]
		public static extern ulong ISteamGameServerStats_RequestUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x60014E2")]
		[Address(RVA = "0xCCFB2C", Offset = "0xCCFB2C", VA = "0xCCFB2C")]
		public static extern bool ISteamGameServerStats_GetUserStat(CSteamID steamIDUser, string pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x60014E3")]
		[Address(RVA = "0xCCFC3C", Offset = "0xCCFC3C", VA = "0xCCFC3C")]
		public static extern bool ISteamGameServerStats_GetUserStat_(CSteamID steamIDUser, string pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x60014E4")]
		[Address(RVA = "0xCCFD4C", Offset = "0xCCFD4C", VA = "0xCCFD4C")]
		public static extern bool ISteamGameServerStats_GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x60014E5")]
		[Address(RVA = "0xCCFE64", Offset = "0xCCFE64", VA = "0xCCFE64")]
		public static extern bool ISteamGameServerStats_SetUserStat(CSteamID steamIDUser, string pchName, int nData);

		[PreserveSig]
		[Token(Token = "0x60014E6")]
		[Address(RVA = "0xCCFF64", Offset = "0xCCFF64", VA = "0xCCFF64")]
		public static extern bool ISteamGameServerStats_SetUserStat_(CSteamID steamIDUser, string pchName, float fData);

		[PreserveSig]
		[Token(Token = "0x60014E7")]
		[Address(RVA = "0xCD006C", Offset = "0xCD006C", VA = "0xCD006C")]
		public static extern bool ISteamGameServerStats_UpdateUserAvgRateStat(CSteamID steamIDUser, string pchName, float flCountThisSession, double dSessionLength);

		[PreserveSig]
		[Token(Token = "0x60014E8")]
		[Address(RVA = "0xCD017C", Offset = "0xCD017C", VA = "0xCD017C")]
		public static extern bool ISteamGameServerStats_SetUserAchievement(CSteamID steamIDUser, string pchName);

		[PreserveSig]
		[Token(Token = "0x60014E9")]
		[Address(RVA = "0xCD0274", Offset = "0xCD0274", VA = "0xCD0274")]
		public static extern bool ISteamGameServerStats_ClearUserAchievement(CSteamID steamIDUser, string pchName);

		[PreserveSig]
		[Token(Token = "0x60014EA")]
		[Address(RVA = "0xCD036C", Offset = "0xCD036C", VA = "0xCD036C")]
		public static extern ulong ISteamGameServerStats_StoreUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x60014EB")]
		[Address(RVA = "0xCD0434", Offset = "0xCD0434", VA = "0xCD0434")]
		public static extern uint ISteamGameServerUtils_GetSecondsSinceAppActive();

		[PreserveSig]
		[Token(Token = "0x60014EC")]
		[Address(RVA = "0xCD04E4", Offset = "0xCD04E4", VA = "0xCD04E4")]
		public static extern uint ISteamGameServerUtils_GetSecondsSinceComputerActive();

		[PreserveSig]
		[Token(Token = "0x60014ED")]
		[Address(RVA = "0xCD0594", Offset = "0xCD0594", VA = "0xCD0594")]
		public static extern EUniverse ISteamGameServerUtils_GetConnectedUniverse();

		[PreserveSig]
		[Token(Token = "0x60014EE")]
		[Address(RVA = "0xCD0644", Offset = "0xCD0644", VA = "0xCD0644")]
		public static extern uint ISteamGameServerUtils_GetServerRealTime();

		[PreserveSig]
		[Token(Token = "0x60014EF")]
		[Address(RVA = "0xCD06F4", Offset = "0xCD06F4", VA = "0xCD06F4")]
		public static extern string ISteamGameServerUtils_GetIPCountry();

		[PreserveSig]
		[Token(Token = "0x60014F0")]
		[Address(RVA = "0xCD07BC", Offset = "0xCD07BC", VA = "0xCD07BC")]
		public static extern bool ISteamGameServerUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

		[PreserveSig]
		[Token(Token = "0x60014F1")]
		[Address(RVA = "0xCD08B4", Offset = "0xCD08B4", VA = "0xCD08B4")]
		public static extern bool ISteamGameServerUtils_GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize);

		[PreserveSig]
		[Token(Token = "0x60014F2")]
		[Address(RVA = "0xCD0998", Offset = "0xCD0998", VA = "0xCD0998")]
		public static extern bool ISteamGameServerUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

		[PreserveSig]
		[Token(Token = "0x60014F3")]
		[Address(RVA = "0xCD0A88", Offset = "0xCD0A88", VA = "0xCD0A88")]
		public static extern byte ISteamGameServerUtils_GetCurrentBatteryPower();

		[PreserveSig]
		[Token(Token = "0x60014F4")]
		[Address(RVA = "0xCD0B38", Offset = "0xCD0B38", VA = "0xCD0B38")]
		public static extern uint ISteamGameServerUtils_GetAppID();

		[PreserveSig]
		[Token(Token = "0x60014F5")]
		[Address(RVA = "0xCD0BE8", Offset = "0xCD0BE8", VA = "0xCD0BE8")]
		public static extern void ISteamGameServerUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);

		[PreserveSig]
		[Token(Token = "0x60014F6")]
		[Address(RVA = "0xCD0CA8", Offset = "0xCD0CA8", VA = "0xCD0CA8")]
		public static extern bool ISteamGameServerUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x60014F7")]
		[Address(RVA = "0xCD0D9C", Offset = "0xCD0D9C", VA = "0xCD0D9C")]
		public static extern ESteamAPICallFailure ISteamGameServerUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);

		[PreserveSig]
		[Token(Token = "0x60014F8")]
		[Address(RVA = "0xCD0E64", Offset = "0xCD0E64", VA = "0xCD0E64")]
		public static extern bool ISteamGameServerUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x60014F9")]
		[Address(RVA = "0xCD0F68", Offset = "0xCD0F68", VA = "0xCD0F68")]
		public static extern void ISteamGameServerUtils_RunFrame();

		[PreserveSig]
		[Token(Token = "0x60014FA")]
		[Address(RVA = "0xCD1018", Offset = "0xCD1018", VA = "0xCD1018")]
		public static extern uint ISteamGameServerUtils_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x60014FB")]
		[Address(RVA = "0xCD10C8", Offset = "0xCD10C8", VA = "0xCD10C8")]
		public static extern void ISteamGameServerUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x60014FC")]
		[Address(RVA = "0xCD1194", Offset = "0xCD1194", VA = "0xCD1194")]
		public static extern bool ISteamGameServerUtils_IsOverlayEnabled();

		[PreserveSig]
		[Token(Token = "0x60014FD")]
		[Address(RVA = "0xCD1250", Offset = "0xCD1250", VA = "0xCD1250")]
		public static extern bool ISteamGameServerUtils_BOverlayNeedsPresent();

		[PreserveSig]
		[Token(Token = "0x60014FE")]
		[Address(RVA = "0xCD130C", Offset = "0xCD130C", VA = "0xCD130C")]
		public static extern ulong ISteamGameServerUtils_CheckFileSignature(string szFileName);

		[PreserveSig]
		[Token(Token = "0x60014FF")]
		[Address(RVA = "0xCD13F8", Offset = "0xCD13F8", VA = "0xCD13F8")]
		public static extern bool ISteamGameServerUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText);

		[PreserveSig]
		[Token(Token = "0x6001500")]
		[Address(RVA = "0xCD1518", Offset = "0xCD1518", VA = "0xCD1518")]
		public static extern uint ISteamGameServerUtils_GetEnteredGamepadTextLength();

		[PreserveSig]
		[Token(Token = "0x6001501")]
		[Address(RVA = "0xCD15C8", Offset = "0xCD15C8", VA = "0xCD15C8")]
		public static extern bool ISteamGameServerUtils_GetEnteredGamepadTextInput(IntPtr pchText, uint cchText);

		[PreserveSig]
		[Token(Token = "0x6001502")]
		[Address(RVA = "0xCD169C", Offset = "0xCD169C", VA = "0xCD169C")]
		public static extern string ISteamGameServerUtils_GetSteamUILanguage();

		[PreserveSig]
		[Token(Token = "0x6001503")]
		[Address(RVA = "0xCD1764", Offset = "0xCD1764", VA = "0xCD1764")]
		public static extern bool ISteamGameServerUtils_IsSteamRunningInVR();

		[PreserveSig]
		[Token(Token = "0x6001504")]
		[Address(RVA = "0xCD1820", Offset = "0xCD1820", VA = "0xCD1820")]
		public static extern bool ISteamHTMLSurface_Init();

		[PreserveSig]
		[Token(Token = "0x6001505")]
		[Address(RVA = "0xCD18DC", Offset = "0xCD18DC", VA = "0xCD18DC")]
		public static extern bool ISteamHTMLSurface_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6001506")]
		[Address(RVA = "0xCD1998", Offset = "0xCD1998", VA = "0xCD1998")]
		public static extern ulong ISteamHTMLSurface_CreateBrowser(string pchUserAgent, string pchUserCSS);

		[PreserveSig]
		[Token(Token = "0x6001507")]
		[Address(RVA = "0xCD1AA0", Offset = "0xCD1AA0", VA = "0xCD1AA0")]
		public static extern void ISteamHTMLSurface_RemoveBrowser(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6001508")]
		[Address(RVA = "0xCD1B60", Offset = "0xCD1B60", VA = "0xCD1B60")]
		public static extern void ISteamHTMLSurface_LoadURL(HHTMLBrowser unBrowserHandle, string pchURL, string pchPostData);

		[PreserveSig]
		[Token(Token = "0x6001509")]
		[Address(RVA = "0xCD1C60", Offset = "0xCD1C60", VA = "0xCD1C60")]
		public static extern void ISteamHTMLSurface_SetSize(HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight);

		[PreserveSig]
		[Token(Token = "0x600150A")]
		[Address(RVA = "0xCD1D30", Offset = "0xCD1D30", VA = "0xCD1D30")]
		public static extern void ISteamHTMLSurface_StopLoad(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600150B")]
		[Address(RVA = "0xCD1DF0", Offset = "0xCD1DF0", VA = "0xCD1DF0")]
		public static extern void ISteamHTMLSurface_Reload(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600150C")]
		[Address(RVA = "0xCD1EB0", Offset = "0xCD1EB0", VA = "0xCD1EB0")]
		public static extern void ISteamHTMLSurface_GoBack(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600150D")]
		[Address(RVA = "0xCD1F70", Offset = "0xCD1F70", VA = "0xCD1F70")]
		public static extern void ISteamHTMLSurface_GoForward(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600150E")]
		[Address(RVA = "0xCD2030", Offset = "0xCD2030", VA = "0xCD2030")]
		public static extern void ISteamHTMLSurface_AddHeader(HHTMLBrowser unBrowserHandle, string pchKey, string pchValue);

		[PreserveSig]
		[Token(Token = "0x600150F")]
		[Address(RVA = "0xCD2130", Offset = "0xCD2130", VA = "0xCD2130")]
		public static extern void ISteamHTMLSurface_ExecuteJavascript(HHTMLBrowser unBrowserHandle, string pchScript);

		[PreserveSig]
		[Token(Token = "0x6001510")]
		[Address(RVA = "0xCD2214", Offset = "0xCD2214", VA = "0xCD2214")]
		public static extern void ISteamHTMLSurface_MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x6001511")]
		[Address(RVA = "0xCD22DC", Offset = "0xCD22DC", VA = "0xCD22DC")]
		public static extern void ISteamHTMLSurface_MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x6001512")]
		[Address(RVA = "0xCD23A4", Offset = "0xCD23A4", VA = "0xCD23A4")]
		public static extern void ISteamHTMLSurface_MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x6001513")]
		[Address(RVA = "0xCD246C", Offset = "0xCD246C", VA = "0xCD246C")]
		public static extern void ISteamHTMLSurface_MouseMove(HHTMLBrowser unBrowserHandle, int x, int y);

		[PreserveSig]
		[Token(Token = "0x6001514")]
		[Address(RVA = "0xCD253C", Offset = "0xCD253C", VA = "0xCD253C")]
		public static extern void ISteamHTMLSurface_MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta);

		[PreserveSig]
		[Token(Token = "0x6001515")]
		[Address(RVA = "0xCD2604", Offset = "0xCD2604", VA = "0xCD2604")]
		public static extern void ISteamHTMLSurface_KeyDown(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x6001516")]
		[Address(RVA = "0xCD26D4", Offset = "0xCD26D4", VA = "0xCD26D4")]
		public static extern void ISteamHTMLSurface_KeyUp(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x6001517")]
		[Address(RVA = "0xCD27A4", Offset = "0xCD27A4", VA = "0xCD27A4")]
		public static extern void ISteamHTMLSurface_KeyChar(HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x6001518")]
		[Address(RVA = "0xCD2874", Offset = "0xCD2874", VA = "0xCD2874")]
		public static extern void ISteamHTMLSurface_SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll);

		[PreserveSig]
		[Token(Token = "0x6001519")]
		[Address(RVA = "0xCD293C", Offset = "0xCD293C", VA = "0xCD293C")]
		public static extern void ISteamHTMLSurface_SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll);

		[PreserveSig]
		[Token(Token = "0x600151A")]
		[Address(RVA = "0xCD2A04", Offset = "0xCD2A04", VA = "0xCD2A04")]
		public static extern void ISteamHTMLSurface_SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus);

		[PreserveSig]
		[Token(Token = "0x600151B")]
		[Address(RVA = "0xCD2ACC", Offset = "0xCD2ACC", VA = "0xCD2ACC")]
		public static extern void ISteamHTMLSurface_ViewSource(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600151C")]
		[Address(RVA = "0xCD2B8C", Offset = "0xCD2B8C", VA = "0xCD2B8C")]
		public static extern void ISteamHTMLSurface_CopyToClipboard(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600151D")]
		[Address(RVA = "0xCD2C4C", Offset = "0xCD2C4C", VA = "0xCD2C4C")]
		public static extern void ISteamHTMLSurface_PasteFromClipboard(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x600151E")]
		[Address(RVA = "0xCD2D0C", Offset = "0xCD2D0C", VA = "0xCD2D0C")]
		public static extern void ISteamHTMLSurface_Find(HHTMLBrowser unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse);

		[PreserveSig]
		[Token(Token = "0x600151F")]
		[Address(RVA = "0xCD2E00", Offset = "0xCD2E00", VA = "0xCD2E00")]
		public static extern void ISteamHTMLSurface_StopFind(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6001520")]
		[Address(RVA = "0xCD2EC0", Offset = "0xCD2EC0", VA = "0xCD2EC0")]
		public static extern void ISteamHTMLSurface_GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y);

		[PreserveSig]
		[Token(Token = "0x6001521")]
		[Address(RVA = "0xCD2F90", Offset = "0xCD2F90", VA = "0xCD2F90")]
		public static extern void ISteamHTMLSurface_SetCookie(string pchHostname, string pchKey, string pchValue);

		[PreserveSig]
		[Token(Token = "0x6001522")]
		[Address(RVA = "0xCD30A4", Offset = "0xCD30A4", VA = "0xCD30A4")]
		public static extern void ISteamHTMLSurface_SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY);

		[PreserveSig]
		[Token(Token = "0x6001523")]
		[Address(RVA = "0xCD3178", Offset = "0xCD3178", VA = "0xCD3178")]
		public static extern void ISteamHTMLSurface_AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed);

		[PreserveSig]
		[Token(Token = "0x6001524")]
		[Address(RVA = "0xCD3240", Offset = "0xCD3240", VA = "0xCD3240")]
		public static extern void ISteamHTMLSurface_JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult);

		[PreserveSig]
		[Token(Token = "0x6001525")]
		[Address(RVA = "0xCD3308", Offset = "0xCD3308", VA = "0xCD3308")]
		public static extern void ISteamHTMLSurface_FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles);

		[PreserveSig]
		[Token(Token = "0x6001526")]
		[Address(RVA = "0xCD33D0", Offset = "0xCD33D0", VA = "0xCD33D0")]
		public static extern HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);

		[PreserveSig]
		[Token(Token = "0x6001527")]
		[Address(RVA = "0xCD34BC", Offset = "0xCD34BC", VA = "0xCD34BC")]
		public static extern bool ISteamHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue);

		[PreserveSig]
		[Token(Token = "0x6001528")]
		[Address(RVA = "0xCD3598", Offset = "0xCD3598", VA = "0xCD3598")]
		public static extern bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds);

		[PreserveSig]
		[Token(Token = "0x6001529")]
		[Address(RVA = "0xCD366C", Offset = "0xCD366C", VA = "0xCD366C")]
		public static extern bool ISteamHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue);

		[PreserveSig]
		[Token(Token = "0x600152A")]
		[Address(RVA = "0xCD377C", Offset = "0xCD377C", VA = "0xCD377C")]
		public static extern bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue);

		[PreserveSig]
		[Token(Token = "0x600152B")]
		[Address(RVA = "0xCD388C", Offset = "0xCD388C", VA = "0xCD388C")]
		public static extern bool ISteamHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x600152C")]
		[Address(RVA = "0xCD3974", Offset = "0xCD3974", VA = "0xCD3974")]
		public static extern bool ISteamHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x600152D")]
		[Address(RVA = "0xCD3A5C", Offset = "0xCD3A5C", VA = "0xCD3A5C")]
		public static extern bool ISteamHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x600152E")]
		[Address(RVA = "0xCD3B28", Offset = "0xCD3B28", VA = "0xCD3B28")]
		public static extern bool ISteamHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x600152F")]
		[Address(RVA = "0xCD3BF4", Offset = "0xCD3BF4", VA = "0xCD3BF4")]
		public static extern bool ISteamHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize);

		[PreserveSig]
		[Token(Token = "0x6001530")]
		[Address(RVA = "0xCD3D00", Offset = "0xCD3D00", VA = "0xCD3D00")]
		public static extern bool ISteamHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6001531")]
		[Address(RVA = "0xCD3E0C", Offset = "0xCD3E0C", VA = "0xCD3E0C")]
		public static extern bool ISteamHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize);

		[PreserveSig]
		[Token(Token = "0x6001532")]
		[Address(RVA = "0xCD3EF0", Offset = "0xCD3EF0", VA = "0xCD3EF0")]
		public static extern bool ISteamHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6001533")]
		[Address(RVA = "0xCD3FD4", Offset = "0xCD3FD4", VA = "0xCD3FD4")]
		public static extern bool ISteamHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6001534")]
		[Address(RVA = "0xCD40BC", Offset = "0xCD40BC", VA = "0xCD40BC")]
		public static extern bool ISteamHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6001535")]
		[Address(RVA = "0xCD4188", Offset = "0xCD4188", VA = "0xCD4188")]
		public static extern bool ISteamHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut);

		[PreserveSig]
		[Token(Token = "0x6001536")]
		[Address(RVA = "0xCD426C", Offset = "0xCD426C", VA = "0xCD426C")]
		public static extern bool ISteamHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen);

		[PreserveSig]
		[Token(Token = "0x6001537")]
		[Address(RVA = "0xCD4378", Offset = "0xCD4378", VA = "0xCD4378")]
		public static extern int ISteamMatchmaking_GetFavoriteGameCount();

		[PreserveSig]
		[Token(Token = "0x6001538")]
		[Address(RVA = "0xCD4428", Offset = "0xCD4428", VA = "0xCD4428")]
		public static extern bool ISteamMatchmaking_GetFavoriteGame(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

		[PreserveSig]
		[Token(Token = "0x6001539")]
		[Address(RVA = "0xCD457C", Offset = "0xCD457C", VA = "0xCD457C")]
		public static extern int ISteamMatchmaking_AddFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

		[PreserveSig]
		[Token(Token = "0x600153A")]
		[Address(RVA = "0xCD4660", Offset = "0xCD4660", VA = "0xCD4660")]
		public static extern bool ISteamMatchmaking_RemoveFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

		[PreserveSig]
		[Token(Token = "0x600153B")]
		[Address(RVA = "0xCD4748", Offset = "0xCD4748", VA = "0xCD4748")]
		public static extern ulong ISteamMatchmaking_RequestLobbyList();

		[PreserveSig]
		[Token(Token = "0x600153C")]
		[Address(RVA = "0xCD47F8", Offset = "0xCD47F8", VA = "0xCD47F8")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, ELobbyComparison eComparisonType);

		[PreserveSig]
		[Token(Token = "0x600153D")]
		[Address(RVA = "0xCD48F8", Offset = "0xCD48F8", VA = "0xCD48F8")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType);

		[PreserveSig]
		[Token(Token = "0x600153E")]
		[Address(RVA = "0xCD49E4", Offset = "0xCD49E4", VA = "0xCD49E4")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo);

		[PreserveSig]
		[Token(Token = "0x600153F")]
		[Address(RVA = "0xCD4AC8", Offset = "0xCD4AC8", VA = "0xCD4AC8")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable);

		[PreserveSig]
		[Token(Token = "0x6001540")]
		[Address(RVA = "0xCD4B88", Offset = "0xCD4B88", VA = "0xCD4B88")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter);

		[PreserveSig]
		[Token(Token = "0x6001541")]
		[Address(RVA = "0xCD4C48", Offset = "0xCD4C48", VA = "0xCD4C48")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults);

		[PreserveSig]
		[Token(Token = "0x6001542")]
		[Address(RVA = "0xCD4D08", Offset = "0xCD4D08", VA = "0xCD4D08")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6001543")]
		[Address(RVA = "0xCD4DD0", Offset = "0xCD4DD0", VA = "0xCD4DD0")]
		public static extern ulong ISteamMatchmaking_GetLobbyByIndex(int iLobby);

		[PreserveSig]
		[Token(Token = "0x6001544")]
		[Address(RVA = "0xCD4E90", Offset = "0xCD4E90", VA = "0xCD4E90")]
		public static extern ulong ISteamMatchmaking_CreateLobby(ELobbyType eLobbyType, int cMaxMembers);

		[PreserveSig]
		[Token(Token = "0x6001545")]
		[Address(RVA = "0xCD4F58", Offset = "0xCD4F58", VA = "0xCD4F58")]
		public static extern ulong ISteamMatchmaking_JoinLobby(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6001546")]
		[Address(RVA = "0xCD5020", Offset = "0xCD5020", VA = "0xCD5020")]
		public static extern void ISteamMatchmaking_LeaveLobby(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6001547")]
		[Address(RVA = "0xCD50E8", Offset = "0xCD50E8", VA = "0xCD50E8")]
		public static extern bool ISteamMatchmaking_InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee);

		[PreserveSig]
		[Token(Token = "0x6001548")]
		[Address(RVA = "0xCD51C4", Offset = "0xCD51C4", VA = "0xCD51C4")]
		public static extern int ISteamMatchmaking_GetNumLobbyMembers(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6001549")]
		[Address(RVA = "0xCD528C", Offset = "0xCD528C", VA = "0xCD528C")]
		public static extern ulong ISteamMatchmaking_GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember);

		[PreserveSig]
		[Token(Token = "0x600154A")]
		[Address(RVA = "0xCD5358", Offset = "0xCD5358", VA = "0xCD5358")]
		public static extern string ISteamMatchmaking_GetLobbyData(CSteamID steamIDLobby, string pchKey);

		[PreserveSig]
		[Token(Token = "0x600154B")]
		[Address(RVA = "0xCD5458", Offset = "0xCD5458", VA = "0xCD5458")]
		public static extern bool ISteamMatchmaking_SetLobbyData(CSteamID steamIDLobby, string pchKey, string pchValue);

		[PreserveSig]
		[Token(Token = "0x600154C")]
		[Address(RVA = "0xCD556C", Offset = "0xCD556C", VA = "0xCD556C")]
		public static extern int ISteamMatchmaking_GetLobbyDataCount(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x600154D")]
		[Address(RVA = "0xCD5634", Offset = "0xCD5634", VA = "0xCD5634")]
		public static extern bool ISteamMatchmaking_GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, IntPtr pchKey, int cchKeyBufferSize, IntPtr pchValue, int cchValueBufferSize);

		[PreserveSig]
		[Token(Token = "0x600154E")]
		[Address(RVA = "0xCD5724", Offset = "0xCD5724", VA = "0xCD5724")]
		public static extern bool ISteamMatchmaking_DeleteLobbyData(CSteamID steamIDLobby, string pchKey);

		[PreserveSig]
		[Token(Token = "0x600154F")]
		[Address(RVA = "0xCD581C", Offset = "0xCD581C", VA = "0xCD581C")]
		public static extern string ISteamMatchmaking_GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, string pchKey);

		[PreserveSig]
		[Token(Token = "0x6001550")]
		[Address(RVA = "0xCD592C", Offset = "0xCD592C", VA = "0xCD592C")]
		public static extern void ISteamMatchmaking_SetLobbyMemberData(CSteamID steamIDLobby, string pchKey, string pchValue);

		[PreserveSig]
		[Token(Token = "0x6001551")]
		[Address(RVA = "0xCD5A30", Offset = "0xCD5A30", VA = "0xCD5A30")]
		public static extern bool ISteamMatchmaking_SendLobbyChatMsg(CSteamID steamIDLobby, byte[] pvMsgBody, int cubMsgBody);

		[PreserveSig]
		[Token(Token = "0x6001552")]
		[Address(RVA = "0xCD5B14", Offset = "0xCD5B14", VA = "0xCD5B14")]
		public static extern int ISteamMatchmaking_GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, byte[] pvData, int cubData, out EChatEntryType peChatEntryType);

		[PreserveSig]
		[Token(Token = "0x6001553")]
		[Address(RVA = "0xCD5C20", Offset = "0xCD5C20", VA = "0xCD5C20")]
		public static extern bool ISteamMatchmaking_RequestLobbyData(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6001554")]
		[Address(RVA = "0xCD5CF4", Offset = "0xCD5CF4", VA = "0xCD5CF4")]
		public static extern void ISteamMatchmaking_SetLobbyGameServer(CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer);

		[PreserveSig]
		[Token(Token = "0x6001555")]
		[Address(RVA = "0xCD5DD4", Offset = "0xCD5DD4", VA = "0xCD5DD4")]
		public static extern bool ISteamMatchmaking_GetLobbyGameServer(CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer);

		[PreserveSig]
		[Token(Token = "0x6001556")]
		[Address(RVA = "0xCD5EF4", Offset = "0xCD5EF4", VA = "0xCD5EF4")]
		public static extern bool ISteamMatchmaking_SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers);

		[PreserveSig]
		[Token(Token = "0x6001557")]
		[Address(RVA = "0xCD5FCC", Offset = "0xCD5FCC", VA = "0xCD5FCC")]
		public static extern int ISteamMatchmaking_GetLobbyMemberLimit(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6001558")]
		[Address(RVA = "0xCD6094", Offset = "0xCD6094", VA = "0xCD6094")]
		public static extern bool ISteamMatchmaking_SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType);

		[PreserveSig]
		[Token(Token = "0x6001559")]
		[Address(RVA = "0xCD616C", Offset = "0xCD616C", VA = "0xCD616C")]
		public static extern bool ISteamMatchmaking_SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable);

		[PreserveSig]
		[Token(Token = "0x600155A")]
		[Address(RVA = "0xCD6244", Offset = "0xCD6244", VA = "0xCD6244")]
		public static extern ulong ISteamMatchmaking_GetLobbyOwner(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x600155B")]
		[Address(RVA = "0xCD630C", Offset = "0xCD630C", VA = "0xCD630C")]
		public static extern bool ISteamMatchmaking_SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner);

		[PreserveSig]
		[Token(Token = "0x600155C")]
		[Address(RVA = "0xCD63E8", Offset = "0xCD63E8", VA = "0xCD63E8")]
		public static extern bool ISteamMatchmaking_SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent);

		[PreserveSig]
		[Token(Token = "0x600155D")]
		[Address(RVA = "0xCD64C4", Offset = "0xCD64C4", VA = "0xCD64C4")]
		public static extern IntPtr ISteamMatchmakingServers_RequestInternetServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600155E")]
		[Address(RVA = "0xCD6598", Offset = "0xCD6598", VA = "0xCD6598")]
		public static extern IntPtr ISteamMatchmakingServers_RequestLANServerList(AppId_t iApp, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600155F")]
		[Address(RVA = "0xCD6660", Offset = "0xCD6660", VA = "0xCD6660")]
		public static extern IntPtr ISteamMatchmakingServers_RequestFriendsServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6001560")]
		[Address(RVA = "0xCD6734", Offset = "0xCD6734", VA = "0xCD6734")]
		public static extern IntPtr ISteamMatchmakingServers_RequestFavoritesServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6001561")]
		[Address(RVA = "0xCD6808", Offset = "0xCD6808", VA = "0xCD6808")]
		public static extern IntPtr ISteamMatchmakingServers_RequestHistoryServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6001562")]
		[Address(RVA = "0xCD68DC", Offset = "0xCD68DC", VA = "0xCD68DC")]
		public static extern IntPtr ISteamMatchmakingServers_RequestSpectatorServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6001563")]
		[Address(RVA = "0xCD69B0", Offset = "0xCD69B0", VA = "0xCD69B0")]
		public static extern void ISteamMatchmakingServers_ReleaseRequest(HServerListRequest hServerListRequest);

		[PreserveSig]
		[Token(Token = "0x6001564")]
		[Address(RVA = "0xCD6A70", Offset = "0xCD6A70", VA = "0xCD6A70")]
		public static extern IntPtr ISteamMatchmakingServers_GetServerDetails(HServerListRequest hRequest, int iServer);

		[PreserveSig]
		[Token(Token = "0x6001565")]
		[Address(RVA = "0xCD6B38", Offset = "0xCD6B38", VA = "0xCD6B38")]
		public static extern void ISteamMatchmakingServers_CancelQuery(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x6001566")]
		[Address(RVA = "0xCD6BF8", Offset = "0xCD6BF8", VA = "0xCD6BF8")]
		public static extern void ISteamMatchmakingServers_RefreshQuery(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x6001567")]
		[Address(RVA = "0xCD6CB8", Offset = "0xCD6CB8", VA = "0xCD6CB8")]
		public static extern bool ISteamMatchmakingServers_IsRefreshing(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x6001568")]
		[Address(RVA = "0xCD6D84", Offset = "0xCD6D84", VA = "0xCD6D84")]
		public static extern int ISteamMatchmakingServers_GetServerCount(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x6001569")]
		[Address(RVA = "0xCD6E44", Offset = "0xCD6E44", VA = "0xCD6E44")]
		public static extern void ISteamMatchmakingServers_RefreshServer(HServerListRequest hRequest, int iServer);

		[PreserveSig]
		[Token(Token = "0x600156A")]
		[Address(RVA = "0xCD6F0C", Offset = "0xCD6F0C", VA = "0xCD6F0C")]
		public static extern int ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600156B")]
		[Address(RVA = "0xCD6FDC", Offset = "0xCD6FDC", VA = "0xCD6FDC")]
		public static extern int ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600156C")]
		[Address(RVA = "0xCD70AC", Offset = "0xCD70AC", VA = "0xCD70AC")]
		public static extern int ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600156D")]
		[Address(RVA = "0xCD717C", Offset = "0xCD717C", VA = "0xCD717C")]
		public static extern void ISteamMatchmakingServers_CancelServerQuery(HServerQuery hServerQuery);

		[PreserveSig]
		[Token(Token = "0x600156E")]
		[Address(RVA = "0xCD723C", Offset = "0xCD723C", VA = "0xCD723C")]
		public static extern bool ISteamMusic_BIsEnabled();

		[PreserveSig]
		[Token(Token = "0x600156F")]
		[Address(RVA = "0xCD72F8", Offset = "0xCD72F8", VA = "0xCD72F8")]
		public static extern bool ISteamMusic_BIsPlaying();

		[PreserveSig]
		[Token(Token = "0x6001570")]
		[Address(RVA = "0xCD73B4", Offset = "0xCD73B4", VA = "0xCD73B4")]
		public static extern AudioPlayback_Status ISteamMusic_GetPlaybackStatus();

		[PreserveSig]
		[Token(Token = "0x6001571")]
		[Address(RVA = "0xCD7464", Offset = "0xCD7464", VA = "0xCD7464")]
		public static extern void ISteamMusic_Play();

		[PreserveSig]
		[Token(Token = "0x6001572")]
		[Address(RVA = "0xCD7514", Offset = "0xCD7514", VA = "0xCD7514")]
		public static extern void ISteamMusic_Pause();

		[PreserveSig]
		[Token(Token = "0x6001573")]
		[Address(RVA = "0xCD75C4", Offset = "0xCD75C4", VA = "0xCD75C4")]
		public static extern void ISteamMusic_PlayPrevious();

		[PreserveSig]
		[Token(Token = "0x6001574")]
		[Address(RVA = "0xCD7674", Offset = "0xCD7674", VA = "0xCD7674")]
		public static extern void ISteamMusic_PlayNext();

		[PreserveSig]
		[Token(Token = "0x6001575")]
		[Address(RVA = "0xCD7724", Offset = "0xCD7724", VA = "0xCD7724")]
		public static extern void ISteamMusic_SetVolume(float flVolume);

		[PreserveSig]
		[Token(Token = "0x6001576")]
		[Address(RVA = "0xCD77E4", Offset = "0xCD77E4", VA = "0xCD77E4")]
		public static extern float ISteamMusic_GetVolume();

		[PreserveSig]
		[Token(Token = "0x6001577")]
		[Address(RVA = "0xCD7894", Offset = "0xCD7894", VA = "0xCD7894")]
		public static extern bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName);

		[PreserveSig]
		[Token(Token = "0x6001578")]
		[Address(RVA = "0xCD7980", Offset = "0xCD7980", VA = "0xCD7980")]
		public static extern bool ISteamMusicRemote_DeregisterSteamMusicRemote();

		[PreserveSig]
		[Token(Token = "0x6001579")]
		[Address(RVA = "0xCD7A3C", Offset = "0xCD7A3C", VA = "0xCD7A3C")]
		public static extern bool ISteamMusicRemote_BIsCurrentMusicRemote();

		[PreserveSig]
		[Token(Token = "0x600157A")]
		[Address(RVA = "0xCD7AF8", Offset = "0xCD7AF8", VA = "0xCD7AF8")]
		public static extern bool ISteamMusicRemote_BActivationSuccess(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600157B")]
		[Address(RVA = "0xCD7BC4", Offset = "0xCD7BC4", VA = "0xCD7BC4")]
		public static extern bool ISteamMusicRemote_SetDisplayName(string pchDisplayName);

		[PreserveSig]
		[Token(Token = "0x600157C")]
		[Address(RVA = "0xCD7CB0", Offset = "0xCD7CB0", VA = "0xCD7CB0")]
		public static extern bool ISteamMusicRemote_SetPNGIcon_64x64(byte[] pvBuffer, uint cbBufferLength);

		[PreserveSig]
		[Token(Token = "0x600157D")]
		[Address(RVA = "0xCD7D8C", Offset = "0xCD7D8C", VA = "0xCD7D8C")]
		public static extern bool ISteamMusicRemote_EnablePlayPrevious(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600157E")]
		[Address(RVA = "0xCD7E58", Offset = "0xCD7E58", VA = "0xCD7E58")]
		public static extern bool ISteamMusicRemote_EnablePlayNext(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600157F")]
		[Address(RVA = "0xCD7F24", Offset = "0xCD7F24", VA = "0xCD7F24")]
		public static extern bool ISteamMusicRemote_EnableShuffled(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6001580")]
		[Address(RVA = "0xCD7FF0", Offset = "0xCD7FF0", VA = "0xCD7FF0")]
		public static extern bool ISteamMusicRemote_EnableLooped(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6001581")]
		[Address(RVA = "0xCD80BC", Offset = "0xCD80BC", VA = "0xCD80BC")]
		public static extern bool ISteamMusicRemote_EnableQueue(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6001582")]
		[Address(RVA = "0xCD8188", Offset = "0xCD8188", VA = "0xCD8188")]
		public static extern bool ISteamMusicRemote_EnablePlaylists(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6001583")]
		[Address(RVA = "0xCD8254", Offset = "0xCD8254", VA = "0xCD8254")]
		public static extern bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus);

		[PreserveSig]
		[Token(Token = "0x6001584")]
		[Address(RVA = "0xCD8320", Offset = "0xCD8320", VA = "0xCD8320")]
		public static extern bool ISteamMusicRemote_UpdateShuffled(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6001585")]
		[Address(RVA = "0xCD83EC", Offset = "0xCD83EC", VA = "0xCD83EC")]
		public static extern bool ISteamMusicRemote_UpdateLooped(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6001586")]
		[Address(RVA = "0xCD84B8", Offset = "0xCD84B8", VA = "0xCD84B8")]
		public static extern bool ISteamMusicRemote_UpdateVolume(float flValue);

		[PreserveSig]
		[Token(Token = "0x6001587")]
		[Address(RVA = "0xCD8584", Offset = "0xCD8584", VA = "0xCD8584")]
		public static extern bool ISteamMusicRemote_CurrentEntryWillChange();

		[PreserveSig]
		[Token(Token = "0x6001588")]
		[Address(RVA = "0xCD8640", Offset = "0xCD8640", VA = "0xCD8640")]
		public static extern bool ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable);

		[PreserveSig]
		[Token(Token = "0x6001589")]
		[Address(RVA = "0xCD870C", Offset = "0xCD870C", VA = "0xCD870C")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText);

		[PreserveSig]
		[Token(Token = "0x600158A")]
		[Address(RVA = "0xCD87F8", Offset = "0xCD87F8", VA = "0xCD87F8")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue);

		[PreserveSig]
		[Token(Token = "0x600158B")]
		[Address(RVA = "0xCD88C4", Offset = "0xCD88C4", VA = "0xCD88C4")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(byte[] pvBuffer, uint cbBufferLength);

		[PreserveSig]
		[Token(Token = "0x600158C")]
		[Address(RVA = "0xCD89A0", Offset = "0xCD89A0", VA = "0xCD89A0")]
		public static extern bool ISteamMusicRemote_CurrentEntryDidChange();

		[PreserveSig]
		[Token(Token = "0x600158D")]
		[Address(RVA = "0xCD8A5C", Offset = "0xCD8A5C", VA = "0xCD8A5C")]
		public static extern bool ISteamMusicRemote_QueueWillChange();

		[PreserveSig]
		[Token(Token = "0x600158E")]
		[Address(RVA = "0xCD8B18", Offset = "0xCD8B18", VA = "0xCD8B18")]
		public static extern bool ISteamMusicRemote_ResetQueueEntries();

		[PreserveSig]
		[Token(Token = "0x600158F")]
		[Address(RVA = "0xCD8BD4", Offset = "0xCD8BD4", VA = "0xCD8BD4")]
		public static extern bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, string pchEntryText);

		[PreserveSig]
		[Token(Token = "0x6001590")]
		[Address(RVA = "0xCD8CD0", Offset = "0xCD8CD0", VA = "0xCD8CD0")]
		public static extern bool ISteamMusicRemote_SetCurrentQueueEntry(int nID);

		[PreserveSig]
		[Token(Token = "0x6001591")]
		[Address(RVA = "0xCD8D9C", Offset = "0xCD8D9C", VA = "0xCD8D9C")]
		public static extern bool ISteamMusicRemote_QueueDidChange();

		[PreserveSig]
		[Token(Token = "0x6001592")]
		[Address(RVA = "0xCD8E58", Offset = "0xCD8E58", VA = "0xCD8E58")]
		public static extern bool ISteamMusicRemote_PlaylistWillChange();

		[PreserveSig]
		[Token(Token = "0x6001593")]
		[Address(RVA = "0xCD8F14", Offset = "0xCD8F14", VA = "0xCD8F14")]
		public static extern bool ISteamMusicRemote_ResetPlaylistEntries();

		[PreserveSig]
		[Token(Token = "0x6001594")]
		[Address(RVA = "0xCD8FD0", Offset = "0xCD8FD0", VA = "0xCD8FD0")]
		public static extern bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, string pchEntryText);

		[PreserveSig]
		[Token(Token = "0x6001595")]
		[Address(RVA = "0xCD90CC", Offset = "0xCD90CC", VA = "0xCD90CC")]
		public static extern bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID);

		[PreserveSig]
		[Token(Token = "0x6001596")]
		[Address(RVA = "0xCD9198", Offset = "0xCD9198", VA = "0xCD9198")]
		public static extern bool ISteamMusicRemote_PlaylistDidChange();

		[PreserveSig]
		[Token(Token = "0x6001597")]
		[Address(RVA = "0xCD9254", Offset = "0xCD9254", VA = "0xCD9254")]
		public static extern bool ISteamNetworking_SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6001598")]
		[Address(RVA = "0xCD9348", Offset = "0xCD9348", VA = "0xCD9348")]
		public static extern bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0);

		[PreserveSig]
		[Token(Token = "0x6001599")]
		[Address(RVA = "0xCD942C", Offset = "0xCD942C", VA = "0xCD942C")]
		public static extern bool ISteamNetworking_ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600159A")]
		[Address(RVA = "0xCD9540", Offset = "0xCD9540", VA = "0xCD9540")]
		public static extern bool ISteamNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x600159B")]
		[Address(RVA = "0xCD9614", Offset = "0xCD9614", VA = "0xCD9614")]
		public static extern bool ISteamNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x600159C")]
		[Address(RVA = "0xCD96E8", Offset = "0xCD96E8", VA = "0xCD96E8")]
		public static extern bool ISteamNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600159D")]
		[Address(RVA = "0xCD97C0", Offset = "0xCD97C0", VA = "0xCD97C0")]
		public static extern bool ISteamNetworking_GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState);

		[PreserveSig]
		[Token(Token = "0x600159E")]
		[Address(RVA = "0xCD98B4", Offset = "0xCD98B4", VA = "0xCD98B4")]
		public static extern bool ISteamNetworking_AllowP2PPacketRelay(bool bAllow);

		[PreserveSig]
		[Token(Token = "0x600159F")]
		[Address(RVA = "0xCD9980", Offset = "0xCD9980", VA = "0xCD9980")]
		public static extern uint ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x60015A0")]
		[Address(RVA = "0xCD9A54", Offset = "0xCD9A54", VA = "0xCD9A54")]
		public static extern uint ISteamNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x60015A1")]
		[Address(RVA = "0xCD9B2C", Offset = "0xCD9B2C", VA = "0xCD9B2C")]
		public static extern uint ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

		[PreserveSig]
		[Token(Token = "0x60015A2")]
		[Address(RVA = "0xCD9BFC", Offset = "0xCD9BFC", VA = "0xCD9BFC")]
		public static extern bool ISteamNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x60015A3")]
		[Address(RVA = "0xCD9CD0", Offset = "0xCD9CD0", VA = "0xCD9CD0")]
		public static extern bool ISteamNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x60015A4")]
		[Address(RVA = "0xCD9DA4", Offset = "0xCD9DA4", VA = "0xCD9DA4")]
		public static extern bool ISteamNetworking_SendDataOnSocket(SNetSocket_t hSocket, IntPtr pubData, uint cubData, bool bReliable);

		[PreserveSig]
		[Token(Token = "0x60015A5")]
		[Address(RVA = "0xCD9E84", Offset = "0xCD9E84", VA = "0xCD9E84")]
		public static extern bool ISteamNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x60015A6")]
		[Address(RVA = "0xCD9F68", Offset = "0xCD9F68", VA = "0xCD9F68")]
		public static extern bool ISteamNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x60015A7")]
		[Address(RVA = "0xCDA05C", Offset = "0xCDA05C", VA = "0xCDA05C")]
		public static extern bool ISteamNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x60015A8")]
		[Address(RVA = "0xCDA154", Offset = "0xCDA154", VA = "0xCDA154")]
		public static extern bool ISteamNetworking_RetrieveData(SNetListenSocket_t hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x60015A9")]
		[Address(RVA = "0xCDA260", Offset = "0xCDA260", VA = "0xCDA260")]
		public static extern bool ISteamNetworking_GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

		[PreserveSig]
		[Token(Token = "0x60015AA")]
		[Address(RVA = "0xCDA38C", Offset = "0xCDA38C", VA = "0xCDA38C")]
		public static extern bool ISteamNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort);

		[PreserveSig]
		[Token(Token = "0x60015AB")]
		[Address(RVA = "0xCDA484", Offset = "0xCDA484", VA = "0xCDA484")]
		public static extern ESNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x60015AC")]
		[Address(RVA = "0xCDA544", Offset = "0xCDA544", VA = "0xCDA544")]
		public static extern int ISteamNetworking_GetMaxPacketSize(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x60015AD")]
		[Address(RVA = "0xCDA604", Offset = "0xCDA604", VA = "0xCDA604")]
		public static extern bool ISteamRemoteStorage_FileWrite(string pchFile, byte[] pvData, int cubData);

		[PreserveSig]
		[Token(Token = "0x60015AE")]
		[Address(RVA = "0xCDA708", Offset = "0xCDA708", VA = "0xCDA708")]
		public static extern int ISteamRemoteStorage_FileRead(string pchFile, byte[] pvData, int cubDataToRead);

		[PreserveSig]
		[Token(Token = "0x60015AF")]
		[Address(RVA = "0xCDA804", Offset = "0xCDA804", VA = "0xCDA804")]
		public static extern bool ISteamRemoteStorage_FileForget(string pchFile);

		[PreserveSig]
		[Token(Token = "0x60015B0")]
		[Address(RVA = "0xCDA8F0", Offset = "0xCDA8F0", VA = "0xCDA8F0")]
		public static extern bool ISteamRemoteStorage_FileDelete(string pchFile);

		[PreserveSig]
		[Token(Token = "0x60015B1")]
		[Address(RVA = "0xCDA9DC", Offset = "0xCDA9DC", VA = "0xCDA9DC")]
		public static extern ulong ISteamRemoteStorage_FileShare(string pchFile);

		[PreserveSig]
		[Token(Token = "0x60015B2")]
		[Address(RVA = "0xCDAAC8", Offset = "0xCDAAC8", VA = "0xCDAAC8")]
		public static extern bool ISteamRemoteStorage_SetSyncPlatforms(string pchFile, ERemoteStoragePlatform eRemoteStoragePlatform);

		[PreserveSig]
		[Token(Token = "0x60015B3")]
		[Address(RVA = "0xCDABBC", Offset = "0xCDABBC", VA = "0xCDABBC")]
		public static extern ulong ISteamRemoteStorage_FileWriteStreamOpen(string pchFile);

		[PreserveSig]
		[Token(Token = "0x60015B4")]
		[Address(RVA = "0xCDACA8", Offset = "0xCDACA8", VA = "0xCDACA8")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, byte[] pvData, int cubData);

		[PreserveSig]
		[Token(Token = "0x60015B5")]
		[Address(RVA = "0xCDAD8C", Offset = "0xCDAD8C", VA = "0xCDAD8C")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle);

		[PreserveSig]
		[Token(Token = "0x60015B6")]
		[Address(RVA = "0xCDAE60", Offset = "0xCDAE60", VA = "0xCDAE60")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle);

		[PreserveSig]
		[Token(Token = "0x60015B7")]
		[Address(RVA = "0xCDAF34", Offset = "0xCDAF34", VA = "0xCDAF34")]
		public static extern bool ISteamRemoteStorage_FileExists(string pchFile);

		[PreserveSig]
		[Token(Token = "0x60015B8")]
		[Address(RVA = "0xCDB020", Offset = "0xCDB020", VA = "0xCDB020")]
		public static extern bool ISteamRemoteStorage_FilePersisted(string pchFile);

		[PreserveSig]
		[Token(Token = "0x60015B9")]
		[Address(RVA = "0xCDB10C", Offset = "0xCDB10C", VA = "0xCDB10C")]
		public static extern int ISteamRemoteStorage_GetFileSize(string pchFile);

		[PreserveSig]
		[Token(Token = "0x60015BA")]
		[Address(RVA = "0xCDB1F0", Offset = "0xCDB1F0", VA = "0xCDB1F0")]
		public static extern long ISteamRemoteStorage_GetFileTimestamp(string pchFile);

		[PreserveSig]
		[Token(Token = "0x60015BB")]
		[Address(RVA = "0xCDB2DC", Offset = "0xCDB2DC", VA = "0xCDB2DC")]
		public static extern ERemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile);

		[PreserveSig]
		[Token(Token = "0x60015BC")]
		[Address(RVA = "0xCDB3C0", Offset = "0xCDB3C0", VA = "0xCDB3C0")]
		public static extern int ISteamRemoteStorage_GetFileCount();

		[PreserveSig]
		[Token(Token = "0x60015BD")]
		[Address(RVA = "0xCDB470", Offset = "0xCDB470", VA = "0xCDB470")]
		public static extern string ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes);

		[PreserveSig]
		[Token(Token = "0x60015BE")]
		[Address(RVA = "0xCDB560", Offset = "0xCDB560", VA = "0xCDB560")]
		public static extern bool ISteamRemoteStorage_GetQuota(out int pnTotalBytes, out int puAvailableBytes);

		[PreserveSig]
		[Token(Token = "0x60015BF")]
		[Address(RVA = "0xCDB650", Offset = "0xCDB650", VA = "0xCDB650")]
		public static extern bool ISteamRemoteStorage_IsCloudEnabledForAccount();

		[PreserveSig]
		[Token(Token = "0x60015C0")]
		[Address(RVA = "0xCDB70C", Offset = "0xCDB70C", VA = "0xCDB70C")]
		public static extern bool ISteamRemoteStorage_IsCloudEnabledForApp();

		[PreserveSig]
		[Token(Token = "0x60015C1")]
		[Address(RVA = "0xCDB7C8", Offset = "0xCDB7C8", VA = "0xCDB7C8")]
		public static extern void ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled);

		[PreserveSig]
		[Token(Token = "0x60015C2")]
		[Address(RVA = "0xCDB888", Offset = "0xCDB888", VA = "0xCDB888")]
		public static extern ulong ISteamRemoteStorage_UGCDownload(UGCHandle_t hContent, uint unPriority);

		[PreserveSig]
		[Token(Token = "0x60015C3")]
		[Address(RVA = "0xCDB954", Offset = "0xCDB954", VA = "0xCDB954")]
		public static extern bool ISteamRemoteStorage_GetUGCDownloadProgress(UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected);

		[PreserveSig]
		[Token(Token = "0x60015C4")]
		[Address(RVA = "0xCDBA54", Offset = "0xCDBA54", VA = "0xCDBA54")]
		public static extern bool ISteamRemoteStorage_GetUGCDetails(UGCHandle_t hContent, out AppId_t pnAppID, out IntPtr ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner);

		[PreserveSig]
		[Token(Token = "0x60015C5")]
		[Address(RVA = "0xCDBB8C", Offset = "0xCDBB8C", VA = "0xCDBB8C")]
		public static extern int ISteamRemoteStorage_UGCRead(UGCHandle_t hContent, byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction);

		[PreserveSig]
		[Token(Token = "0x60015C6")]
		[Address(RVA = "0xCDBC74", Offset = "0xCDBC74", VA = "0xCDBC74")]
		public static extern int ISteamRemoteStorage_GetCachedUGCCount();

		[PreserveSig]
		[Token(Token = "0x60015C7")]
		[Address(RVA = "0xCDBD24", Offset = "0xCDBD24", VA = "0xCDBD24")]
		public static extern ulong ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent);

		[PreserveSig]
		[Token(Token = "0x60015C8")]
		[Address(RVA = "0xCDBDE4", Offset = "0xCDBDE4", VA = "0xCDBDE4")]
		public static extern ulong ISteamRemoteStorage_PublishWorkshopFile(string pchFile, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags, EWorkshopFileType eWorkshopFileType);

		[PreserveSig]
		[Token(Token = "0x60015C9")]
		[Address(RVA = "0xCDBF3C", Offset = "0xCDBF3C", VA = "0xCDBF3C")]
		public static extern ulong ISteamRemoteStorage_CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60015CA")]
		[Address(RVA = "0xCDC004", Offset = "0xCDC004", VA = "0xCDC004")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, string pchFile);

		[PreserveSig]
		[Token(Token = "0x60015CB")]
		[Address(RVA = "0xCDC0FC", Offset = "0xCDC0FC", VA = "0xCDC0FC")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, string pchPreviewFile);

		[PreserveSig]
		[Token(Token = "0x60015CC")]
		[Address(RVA = "0xCDC1F4", Offset = "0xCDC1F4", VA = "0xCDC1F4")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, string pchTitle);

		[PreserveSig]
		[Token(Token = "0x60015CD")]
		[Address(RVA = "0xCDC2EC", Offset = "0xCDC2EC", VA = "0xCDC2EC")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, string pchDescription);

		[PreserveSig]
		[Token(Token = "0x60015CE")]
		[Address(RVA = "0xCDC3E4", Offset = "0xCDC3E4", VA = "0xCDC3E4")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x60015CF")]
		[Address(RVA = "0xCDC4BC", Offset = "0xCDC4BC", VA = "0xCDC4BC")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x60015D0")]
		[Address(RVA = "0xCDC594", Offset = "0xCDC594", VA = "0xCDC594")]
		public static extern ulong ISteamRemoteStorage_CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle);

		[PreserveSig]
		[Token(Token = "0x60015D1")]
		[Address(RVA = "0xCDC65C", Offset = "0xCDC65C", VA = "0xCDC65C")]
		public static extern ulong ISteamRemoteStorage_GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld);

		[PreserveSig]
		[Token(Token = "0x60015D2")]
		[Address(RVA = "0xCDC728", Offset = "0xCDC728", VA = "0xCDC728")]
		public static extern ulong ISteamRemoteStorage_DeletePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60015D3")]
		[Address(RVA = "0xCDC7F0", Offset = "0xCDC7F0", VA = "0xCDC7F0")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xCDC8B0", Offset = "0xCDC8B0", VA = "0xCDC8B0")]
		public static extern ulong ISteamRemoteStorage_SubscribePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60015D5")]
		[Address(RVA = "0xCDC978", Offset = "0xCDC978", VA = "0xCDC978")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x60015D6")]
		[Address(RVA = "0xCDCA38", Offset = "0xCDCA38", VA = "0xCDCA38")]
		public static extern ulong ISteamRemoteStorage_UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60015D7")]
		[Address(RVA = "0xCDCB00", Offset = "0xCDCB00", VA = "0xCDCB00")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, string pchChangeDescription);

		[PreserveSig]
		[Token(Token = "0x60015D8")]
		[Address(RVA = "0xCDCBF8", Offset = "0xCDCBF8", VA = "0xCDCBF8")]
		public static extern ulong ISteamRemoteStorage_GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60015D9")]
		[Address(RVA = "0xCDCCC0", Offset = "0xCDCCC0", VA = "0xCDCCC0")]
		public static extern ulong ISteamRemoteStorage_UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x60015DA")]
		[Address(RVA = "0xCDCD8C", Offset = "0xCDCD8C", VA = "0xCDCD8C")]
		public static extern ulong ISteamRemoteStorage_GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60015DB")]
		[Address(RVA = "0xCDCE54", Offset = "0xCDCE54", VA = "0xCDCE54")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint unStartIndex, IntPtr pRequiredTags, IntPtr pExcludedTags);

		[PreserveSig]
		[Token(Token = "0x60015DC")]
		[Address(RVA = "0xCDCF2C", Offset = "0xCDCF2C", VA = "0xCDCF2C")]
		public static extern ulong ISteamRemoteStorage_PublishVideo(EWorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x60015DD")]
		[Address(RVA = "0xCDD0A0", Offset = "0xCDD0A0", VA = "0xCDD0A0")]
		public static extern ulong ISteamRemoteStorage_SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction);

		[PreserveSig]
		[Token(Token = "0x60015DE")]
		[Address(RVA = "0xCDD16C", Offset = "0xCDD16C", VA = "0xCDD16C")]
		public static extern ulong ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x60015DF")]
		[Address(RVA = "0xCDD234", Offset = "0xCDD234", VA = "0xCDD234")]
		public static extern ulong ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IntPtr pTags, IntPtr pUserTags);

		[PreserveSig]
		[Token(Token = "0x60015E0")]
		[Address(RVA = "0xCDD318", Offset = "0xCDD318", VA = "0xCDD318")]
		public static extern ulong ISteamRemoteStorage_UGCDownloadToLocation(UGCHandle_t hContent, string pchLocation, uint unPriority);

		[PreserveSig]
		[Token(Token = "0x60015E1")]
		[Address(RVA = "0xCDD418", Offset = "0xCDD418", VA = "0xCDD418")]
		public static extern uint ISteamScreenshots_WriteScreenshot(byte[] pubRGB, uint cubRGB, int nWidth, int nHeight);

		[PreserveSig]
		[Token(Token = "0x60015E2")]
		[Address(RVA = "0xCDD4F4", Offset = "0xCDD4F4", VA = "0xCDD4F4")]
		public static extern uint ISteamScreenshots_AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight);

		[PreserveSig]
		[Token(Token = "0x60015E3")]
		[Address(RVA = "0xCDD604", Offset = "0xCDD604", VA = "0xCDD604")]
		public static extern void ISteamScreenshots_TriggerScreenshot();

		[PreserveSig]
		[Token(Token = "0x60015E4")]
		[Address(RVA = "0xCDD6B4", Offset = "0xCDD6B4", VA = "0xCDD6B4")]
		public static extern void ISteamScreenshots_HookScreenshots(bool bHook);

		[PreserveSig]
		[Token(Token = "0x60015E5")]
		[Address(RVA = "0xCDD774", Offset = "0xCDD774", VA = "0xCDD774")]
		public static extern bool ISteamScreenshots_SetLocation(ScreenshotHandle hScreenshot, string pchLocation);

		[PreserveSig]
		[Token(Token = "0x60015E6")]
		[Address(RVA = "0xCDD868", Offset = "0xCDD868", VA = "0xCDD868")]
		public static extern bool ISteamScreenshots_TagUser(ScreenshotHandle hScreenshot, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60015E7")]
		[Address(RVA = "0xCDD944", Offset = "0xCDD944", VA = "0xCDD944")]
		public static extern bool ISteamScreenshots_TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60015E8")]
		[Address(RVA = "0xCDDA20", Offset = "0xCDDA20", VA = "0xCDDA20")]
		public static extern ulong ISteamUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x60015E9")]
		[Address(RVA = "0xCDDB0C", Offset = "0xCDDB0C", VA = "0xCDDB0C")]
		public static extern ulong ISteamUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x60015EA")]
		[Address(RVA = "0xCDDBE8", Offset = "0xCDDBE8", VA = "0xCDDBE8")]
		public static extern ulong ISteamUGC_SendQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x60015EB")]
		[Address(RVA = "0xCDDCB0", Offset = "0xCDDCB0", VA = "0xCDDCB0")]
		public static extern bool ISteamUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails);

		[PreserveSig]
		[Token(Token = "0x60015EC")]
		[Address(RVA = "0xCDDDE0", Offset = "0xCDDDE0", VA = "0xCDDDE0")]
		public static extern bool ISteamUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x60015ED")]
		[Address(RVA = "0xCDDEB4", Offset = "0xCDDEB4", VA = "0xCDDEB4")]
		public static extern bool ISteamUGC_AddRequiredTag(UGCQueryHandle_t handle, string pTagName);

		[PreserveSig]
		[Token(Token = "0x60015EE")]
		[Address(RVA = "0xCDDFAC", Offset = "0xCDDFAC", VA = "0xCDDFAC")]
		public static extern bool ISteamUGC_AddExcludedTag(UGCQueryHandle_t handle, string pTagName);

		[PreserveSig]
		[Token(Token = "0x60015EF")]
		[Address(RVA = "0xCDE0A4", Offset = "0xCDE0A4", VA = "0xCDE0A4")]
		public static extern bool ISteamUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription);

		[PreserveSig]
		[Token(Token = "0x60015F0")]
		[Address(RVA = "0xCDE17C", Offset = "0xCDE17C", VA = "0xCDE17C")]
		public static extern bool ISteamUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly);

		[PreserveSig]
		[Token(Token = "0x60015F1")]
		[Address(RVA = "0xCDE254", Offset = "0xCDE254", VA = "0xCDE254")]
		public static extern bool ISteamUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x60015F2")]
		[Address(RVA = "0xCDE32C", Offset = "0xCDE32C", VA = "0xCDE32C")]
		public static extern bool ISteamUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName);

		[PreserveSig]
		[Token(Token = "0x60015F3")]
		[Address(RVA = "0xCDE424", Offset = "0xCDE424", VA = "0xCDE424")]
		public static extern bool ISteamUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag);

		[PreserveSig]
		[Token(Token = "0x60015F4")]
		[Address(RVA = "0xCDE4FC", Offset = "0xCDE4FC", VA = "0xCDE4FC")]
		public static extern bool ISteamUGC_SetSearchText(UGCQueryHandle_t handle, string pSearchText);

		[PreserveSig]
		[Token(Token = "0x60015F5")]
		[Address(RVA = "0xCDE5F4", Offset = "0xCDE5F4", VA = "0xCDE5F4")]
		public static extern bool ISteamUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x60015F6")]
		[Address(RVA = "0xCDE6CC", Offset = "0xCDE6CC", VA = "0xCDE6CC")]
		public static extern ulong ISteamUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x60015F7")]
		[Address(RVA = "0xCDE798", Offset = "0xCDE798", VA = "0xCDE798")]
		public static extern ulong ISteamUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType);

		[PreserveSig]
		[Token(Token = "0x60015F8")]
		[Address(RVA = "0xCDE860", Offset = "0xCDE860", VA = "0xCDE860")]
		public static extern ulong ISteamUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60015F9")]
		[Address(RVA = "0xCDE930", Offset = "0xCDE930", VA = "0xCDE930")]
		public static extern bool ISteamUGC_SetItemTitle(UGCUpdateHandle_t handle, string pchTitle);

		[PreserveSig]
		[Token(Token = "0x60015FA")]
		[Address(RVA = "0xCDEA28", Offset = "0xCDEA28", VA = "0xCDEA28")]
		public static extern bool ISteamUGC_SetItemDescription(UGCUpdateHandle_t handle, string pchDescription);

		[PreserveSig]
		[Token(Token = "0x60015FB")]
		[Address(RVA = "0xCDEB20", Offset = "0xCDEB20", VA = "0xCDEB20")]
		public static extern bool ISteamUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x60015FC")]
		[Address(RVA = "0xCDEBF8", Offset = "0xCDEBF8", VA = "0xCDEBF8")]
		public static extern bool ISteamUGC_SetItemTags(UGCUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x60015FD")]
		[Address(RVA = "0xCDECD0", Offset = "0xCDECD0", VA = "0xCDECD0")]
		public static extern bool ISteamUGC_SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder);

		[PreserveSig]
		[Token(Token = "0x60015FE")]
		[Address(RVA = "0xCDEDC8", Offset = "0xCDEDC8", VA = "0xCDEDC8")]
		public static extern bool ISteamUGC_SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x60015FF")]
		[Address(RVA = "0xCDEEC0", Offset = "0xCDEEC0", VA = "0xCDEEC0")]
		public static extern ulong ISteamUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote);

		[PreserveSig]
		[Token(Token = "0x6001600")]
		[Address(RVA = "0xCDEFB8", Offset = "0xCDEFB8", VA = "0xCDEFB8")]
		public static extern EItemUpdateStatus ISteamUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x6001601")]
		[Address(RVA = "0xCDF0B8", Offset = "0xCDF0B8", VA = "0xCDF0B8")]
		public static extern ulong ISteamUGC_SubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6001602")]
		[Address(RVA = "0xCDF180", Offset = "0xCDF180", VA = "0xCDF180")]
		public static extern ulong ISteamUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6001603")]
		[Address(RVA = "0xCDF248", Offset = "0xCDF248", VA = "0xCDF248")]
		public static extern uint ISteamUGC_GetNumSubscribedItems();

		[PreserveSig]
		[Token(Token = "0x6001604")]
		[Address(RVA = "0xCDF2F8", Offset = "0xCDF2F8", VA = "0xCDF2F8")]
		public static extern uint ISteamUGC_GetSubscribedItems(PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x6001605")]
		[Address(RVA = "0xCDF3C8", Offset = "0xCDF3C8", VA = "0xCDF3C8")]
		public static extern bool ISteamUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, IntPtr pchFolder, uint cchFolderSize, out bool pbLegacyItem);

		[PreserveSig]
		[Token(Token = "0x6001606")]
		[Address(RVA = "0xCDF4E4", Offset = "0xCDF4E4", VA = "0xCDF4E4")]
		public static extern bool ISteamUGC_GetItemUpdateInfo(PublishedFileId_t nPublishedFileID, out bool pbNeedsUpdate, out bool pbIsDownloading, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x6001607")]
		[Address(RVA = "0xCDF634", Offset = "0xCDF634", VA = "0xCDF634")]
		public static extern ulong ISteamUnifiedMessages_SendMethod(string pchServiceMethod, byte[] pRequestBuffer, uint unRequestBufferSize, ulong unContext);

		[PreserveSig]
		[Token(Token = "0x6001608")]
		[Address(RVA = "0xCDF744", Offset = "0xCDF744", VA = "0xCDF744")]
		public static extern bool ISteamUnifiedMessages_GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, out uint punResponseSize, out EResult peResult);

		[PreserveSig]
		[Token(Token = "0x6001609")]
		[Address(RVA = "0xCDF834", Offset = "0xCDF834", VA = "0xCDF834")]
		public static extern bool ISteamUnifiedMessages_GetMethodResponseData(ClientUnifiedMessageHandle hHandle, byte[] pResponseBuffer, uint unResponseBufferSize, bool bAutoRelease);

		[PreserveSig]
		[Token(Token = "0x600160A")]
		[Address(RVA = "0xCDF920", Offset = "0xCDF920", VA = "0xCDF920")]
		public static extern bool ISteamUnifiedMessages_ReleaseMethod(ClientUnifiedMessageHandle hHandle);

		[PreserveSig]
		[Token(Token = "0x600160B")]
		[Address(RVA = "0xCDF9F4", Offset = "0xCDF9F4", VA = "0xCDF9F4")]
		public static extern bool ISteamUnifiedMessages_SendNotification(string pchServiceNotification, byte[] pNotificationBuffer, uint unNotificationBufferSize);

		[PreserveSig]
		[Token(Token = "0x600160C")]
		[Address(RVA = "0xCDFAF8", Offset = "0xCDFAF8", VA = "0xCDFAF8")]
		public static extern int ISteamUser_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x600160D")]
		[Address(RVA = "0xCDFBA8", Offset = "0xCDFBA8", VA = "0xCDFBA8")]
		public static extern bool ISteamUser_BLoggedOn();

		[PreserveSig]
		[Token(Token = "0x600160E")]
		[Address(RVA = "0xCDFC64", Offset = "0xCDFC64", VA = "0xCDFC64")]
		public static extern ulong ISteamUser_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x600160F")]
		[Address(RVA = "0xCDFD14", Offset = "0xCDFD14", VA = "0xCDFD14")]
		public static extern int ISteamUser_InitiateGameConnection(byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure);

		[PreserveSig]
		[Token(Token = "0x6001610")]
		[Address(RVA = "0xCDFE00", Offset = "0xCDFE00", VA = "0xCDFE00")]
		public static extern void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer);

		[PreserveSig]
		[Token(Token = "0x6001611")]
		[Address(RVA = "0xCDFEC8", Offset = "0xCDFEC8", VA = "0xCDFEC8")]
		public static extern void ISteamUser_TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, string pchExtraInfo);

		[PreserveSig]
		[Token(Token = "0x6001612")]
		[Address(RVA = "0xCDFFB8", Offset = "0xCDFFB8", VA = "0xCDFFB8")]
		public static extern bool ISteamUser_GetUserDataFolder(IntPtr pchBuffer, int cubBuffer);

		[PreserveSig]
		[Token(Token = "0x6001613")]
		[Address(RVA = "0xCE008C", Offset = "0xCE008C", VA = "0xCE008C")]
		public static extern void ISteamUser_StartVoiceRecording();

		[PreserveSig]
		[Token(Token = "0x6001614")]
		[Address(RVA = "0xCE013C", Offset = "0xCE013C", VA = "0xCE013C")]
		public static extern void ISteamUser_StopVoiceRecording();

		[PreserveSig]
		[Token(Token = "0x6001615")]
		[Address(RVA = "0xCE01EC", Offset = "0xCE01EC", VA = "0xCE01EC")]
		public static extern EVoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed, uint nUncompressedVoiceDesiredSampleRate);

		[PreserveSig]
		[Token(Token = "0x6001616")]
		[Address(RVA = "0xCE02D8", Offset = "0xCE02D8", VA = "0xCE02D8")]
		public static extern EVoiceResult ISteamUser_GetVoice(bool bWantCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed, byte[] pUncompressedDestBuffer, uint cbUncompressedDestBufferSize, out uint nUncompressBytesWritten, uint nUncompressedVoiceDesiredSampleRate);

		[PreserveSig]
		[Token(Token = "0x6001617")]
		[Address(RVA = "0xCE0408", Offset = "0xCE0408", VA = "0xCE0408")]
		public static extern EVoiceResult ISteamUser_DecompressVoice(byte[] pCompressed, uint cbCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

		[PreserveSig]
		[Token(Token = "0x6001618")]
		[Address(RVA = "0xCE0510", Offset = "0xCE0510", VA = "0xCE0510")]
		public static extern uint ISteamUser_GetVoiceOptimalSampleRate();

		[PreserveSig]
		[Token(Token = "0x6001619")]
		[Address(RVA = "0xCE05C0", Offset = "0xCE05C0", VA = "0xCE05C0")]
		public static extern uint ISteamUser_GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x600161A")]
		[Address(RVA = "0xCE06A8", Offset = "0xCE06A8", VA = "0xCE06A8")]
		public static extern EBeginAuthSessionResult ISteamUser_BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600161B")]
		[Address(RVA = "0xCE0780", Offset = "0xCE0780", VA = "0xCE0780")]
		public static extern void ISteamUser_EndAuthSession(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x600161C")]
		[Address(RVA = "0xCE0848", Offset = "0xCE0848", VA = "0xCE0848")]
		public static extern void ISteamUser_CancelAuthTicket(HAuthTicket hAuthTicket);

		[PreserveSig]
		[Token(Token = "0x600161D")]
		[Address(RVA = "0xCE0908", Offset = "0xCE0908", VA = "0xCE0908")]
		public static extern EUserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(CSteamID steamID, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x600161E")]
		[Address(RVA = "0xCE09D4", Offset = "0xCE09D4", VA = "0xCE09D4")]
		public static extern bool ISteamUser_BIsBehindNAT();

		[PreserveSig]
		[Token(Token = "0x600161F")]
		[Address(RVA = "0xCE0A90", Offset = "0xCE0A90", VA = "0xCE0A90")]
		public static extern void ISteamUser_AdvertiseGame(CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer);

		[PreserveSig]
		[Token(Token = "0x6001620")]
		[Address(RVA = "0xCE0B60", Offset = "0xCE0B60", VA = "0xCE0B60")]
		public static extern ulong ISteamUser_RequestEncryptedAppTicket(byte[] pDataToInclude, int cbDataToInclude);

		[PreserveSig]
		[Token(Token = "0x6001621")]
		[Address(RVA = "0xCE0C30", Offset = "0xCE0C30", VA = "0xCE0C30")]
		public static extern bool ISteamUser_GetEncryptedAppTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x6001622")]
		[Address(RVA = "0xCE0D24", Offset = "0xCE0D24", VA = "0xCE0D24")]
		public static extern int ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil);

		[PreserveSig]
		[Token(Token = "0x6001623")]
		[Address(RVA = "0xCE0DEC", Offset = "0xCE0DEC", VA = "0xCE0DEC")]
		public static extern int ISteamUser_GetPlayerSteamLevel();

		[PreserveSig]
		[Token(Token = "0x6001624")]
		[Address(RVA = "0xCE0E9C", Offset = "0xCE0E9C", VA = "0xCE0E9C")]
		public static extern bool ISteamUserStats_RequestCurrentStats();

		[PreserveSig]
		[Token(Token = "0x6001625")]
		[Address(RVA = "0xCE0F58", Offset = "0xCE0F58", VA = "0xCE0F58")]
		public static extern bool ISteamUserStats_GetStat(string pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x6001626")]
		[Address(RVA = "0xCE105C", Offset = "0xCE105C", VA = "0xCE105C")]
		public static extern bool ISteamUserStats_GetStat_(string pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x6001627")]
		[Address(RVA = "0xCE1160", Offset = "0xCE1160", VA = "0xCE1160")]
		public static extern bool ISteamUserStats_SetStat(string pchName, int nData);

		[PreserveSig]
		[Token(Token = "0x6001628")]
		[Address(RVA = "0xCE1254", Offset = "0xCE1254", VA = "0xCE1254")]
		public static extern bool ISteamUserStats_SetStat_(string pchName, float fData);

		[PreserveSig]
		[Token(Token = "0x6001629")]
		[Address(RVA = "0xCE1348", Offset = "0xCE1348", VA = "0xCE1348")]
		public static extern bool ISteamUserStats_UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength);

		[PreserveSig]
		[Token(Token = "0x600162A")]
		[Address(RVA = "0xCE144C", Offset = "0xCE144C", VA = "0xCE144C")]
		public static extern bool ISteamUserStats_GetAchievement(string pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x600162B")]
		[Address(RVA = "0xCE1558", Offset = "0xCE1558", VA = "0xCE1558")]
		public static extern bool ISteamUserStats_SetAchievement(string pchName);

		[PreserveSig]
		[Token(Token = "0x600162C")]
		[Address(RVA = "0xCE1644", Offset = "0xCE1644", VA = "0xCE1644")]
		public static extern bool ISteamUserStats_ClearAchievement(string pchName);

		[PreserveSig]
		[Token(Token = "0x600162D")]
		[Address(RVA = "0xCE1730", Offset = "0xCE1730", VA = "0xCE1730")]
		public static extern bool ISteamUserStats_GetAchievementAndUnlockTime(string pchName, out bool pbAchieved, out uint punUnlockTime);

		[PreserveSig]
		[Token(Token = "0x600162E")]
		[Address(RVA = "0xCE1850", Offset = "0xCE1850", VA = "0xCE1850")]
		public static extern bool ISteamUserStats_StoreStats();

		[PreserveSig]
		[Token(Token = "0x600162F")]
		[Address(RVA = "0xCE190C", Offset = "0xCE190C", VA = "0xCE190C")]
		public static extern int ISteamUserStats_GetAchievementIcon(string pchName);

		[PreserveSig]
		[Token(Token = "0x6001630")]
		[Address(RVA = "0xCE19F0", Offset = "0xCE19F0", VA = "0xCE19F0")]
		public static extern string ISteamUserStats_GetAchievementDisplayAttribute(string pchName, string pchKey);

		[PreserveSig]
		[Token(Token = "0x6001631")]
		[Address(RVA = "0xCE1B00", Offset = "0xCE1B00", VA = "0xCE1B00")]
		public static extern bool ISteamUserStats_IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress);

		[PreserveSig]
		[Token(Token = "0x6001632")]
		[Address(RVA = "0xCE1BFC", Offset = "0xCE1BFC", VA = "0xCE1BFC")]
		public static extern uint ISteamUserStats_GetNumAchievements();

		[PreserveSig]
		[Token(Token = "0x6001633")]
		[Address(RVA = "0xCE1CAC", Offset = "0xCE1CAC", VA = "0xCE1CAC")]
		public static extern string ISteamUserStats_GetAchievementName(uint iAchievement);

		[PreserveSig]
		[Token(Token = "0x6001634")]
		[Address(RVA = "0xCE1D84", Offset = "0xCE1D84", VA = "0xCE1D84")]
		public static extern ulong ISteamUserStats_RequestUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x6001635")]
		[Address(RVA = "0xCE1E4C", Offset = "0xCE1E4C", VA = "0xCE1E4C")]
		public static extern bool ISteamUserStats_GetUserStat(CSteamID steamIDUser, string pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x6001636")]
		[Address(RVA = "0xCE1F5C", Offset = "0xCE1F5C", VA = "0xCE1F5C")]
		public static extern bool ISteamUserStats_GetUserStat_(CSteamID steamIDUser, string pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x6001637")]
		[Address(RVA = "0xCE206C", Offset = "0xCE206C", VA = "0xCE206C")]
		public static extern bool ISteamUserStats_GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6001638")]
		[Address(RVA = "0xCE2184", Offset = "0xCE2184", VA = "0xCE2184")]
		public static extern bool ISteamUserStats_GetUserAchievementAndUnlockTime(CSteamID steamIDUser, string pchName, out bool pbAchieved, out uint punUnlockTime);

		[PreserveSig]
		[Token(Token = "0x6001639")]
		[Address(RVA = "0xCE22B4", Offset = "0xCE22B4", VA = "0xCE22B4")]
		public static extern bool ISteamUserStats_ResetAllStats(bool bAchievementsToo);

		[PreserveSig]
		[Token(Token = "0x600163A")]
		[Address(RVA = "0xCE2380", Offset = "0xCE2380", VA = "0xCE2380")]
		public static extern ulong ISteamUserStats_FindOrCreateLeaderboard(string pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType);

		[PreserveSig]
		[Token(Token = "0x600163B")]
		[Address(RVA = "0xCE247C", Offset = "0xCE247C", VA = "0xCE247C")]
		public static extern ulong ISteamUserStats_FindLeaderboard(string pchLeaderboardName);

		[PreserveSig]
		[Token(Token = "0x600163C")]
		[Address(RVA = "0xCE2568", Offset = "0xCE2568", VA = "0xCE2568")]
		public static extern string ISteamUserStats_GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x600163D")]
		[Address(RVA = "0xCE2648", Offset = "0xCE2648", VA = "0xCE2648")]
		public static extern int ISteamUserStats_GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x600163E")]
		[Address(RVA = "0xCE2710", Offset = "0xCE2710", VA = "0xCE2710")]
		public static extern ELeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x600163F")]
		[Address(RVA = "0xCE27D8", Offset = "0xCE27D8", VA = "0xCE27D8")]
		public static extern ELeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x6001640")]
		[Address(RVA = "0xCE28A0", Offset = "0xCE28A0", VA = "0xCE28A0")]
		public static extern ulong ISteamUserStats_DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

		[PreserveSig]
		[Token(Token = "0x6001641")]
		[Address(RVA = "0xCE2978", Offset = "0xCE2978", VA = "0xCE2978")]
		public static extern ulong ISteamUserStats_DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, CSteamID[] prgUsers, int cUsers);

		[PreserveSig]
		[Token(Token = "0x6001642")]
		[Address(RVA = "0xCE2A50", Offset = "0xCE2A50", VA = "0xCE2A50")]
		public static extern bool ISteamUserStats_GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, int[] pDetails, int cDetailsMax);

		[PreserveSig]
		[Token(Token = "0x6001643")]
		[Address(RVA = "0xCE2B6C", Offset = "0xCE2B6C", VA = "0xCE2B6C")]
		public static extern ulong ISteamUserStats_UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount);

		[PreserveSig]
		[Token(Token = "0x6001644")]
		[Address(RVA = "0xCE2C54", Offset = "0xCE2C54", VA = "0xCE2C54")]
		public static extern ulong ISteamUserStats_AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC);

		[PreserveSig]
		[Token(Token = "0x6001645")]
		[Address(RVA = "0xCE2D24", Offset = "0xCE2D24", VA = "0xCE2D24")]
		public static extern ulong ISteamUserStats_GetNumberOfCurrentPlayers();

		[PreserveSig]
		[Token(Token = "0x6001646")]
		[Address(RVA = "0xCE2DD4", Offset = "0xCE2DD4", VA = "0xCE2DD4")]
		public static extern ulong ISteamUserStats_RequestGlobalAchievementPercentages();

		[PreserveSig]
		[Token(Token = "0x6001647")]
		[Address(RVA = "0xCE2E84", Offset = "0xCE2E84", VA = "0xCE2E84")]
		public static extern int ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6001648")]
		[Address(RVA = "0xCE2F80", Offset = "0xCE2F80", VA = "0xCE2F80")]
		public static extern int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6001649")]
		[Address(RVA = "0xCE3088", Offset = "0xCE3088", VA = "0xCE3088")]
		public static extern bool ISteamUserStats_GetAchievementAchievedPercent(string pchName, out float pflPercent);

		[PreserveSig]
		[Token(Token = "0x600164A")]
		[Address(RVA = "0xCE318C", Offset = "0xCE318C", VA = "0xCE318C")]
		public static extern ulong ISteamUserStats_RequestGlobalStats(int nHistoryDays);

		[PreserveSig]
		[Token(Token = "0x600164B")]
		[Address(RVA = "0xCE324C", Offset = "0xCE324C", VA = "0xCE324C")]
		public static extern bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData);

		[PreserveSig]
		[Token(Token = "0x600164C")]
		[Address(RVA = "0xCE3354", Offset = "0xCE3354", VA = "0xCE3354")]
		public static extern bool ISteamUserStats_GetGlobalStat_(string pchStatName, out double pData);

		[PreserveSig]
		[Token(Token = "0x600164D")]
		[Address(RVA = "0xCE345C", Offset = "0xCE345C", VA = "0xCE345C")]
		public static extern int ISteamUserStats_GetGlobalStatHistory(string pchStatName, long[] pData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x600164E")]
		[Address(RVA = "0xCE3558", Offset = "0xCE3558", VA = "0xCE3558")]
		public static extern int ISteamUserStats_GetGlobalStatHistory_(string pchStatName, double[] pData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x600164F")]
		[Address(RVA = "0xCE3654", Offset = "0xCE3654", VA = "0xCE3654")]
		public static extern uint ISteamUtils_GetSecondsSinceAppActive();

		[PreserveSig]
		[Token(Token = "0x6001650")]
		[Address(RVA = "0xCE3704", Offset = "0xCE3704", VA = "0xCE3704")]
		public static extern uint ISteamUtils_GetSecondsSinceComputerActive();

		[PreserveSig]
		[Token(Token = "0x6001651")]
		[Address(RVA = "0xCE37B4", Offset = "0xCE37B4", VA = "0xCE37B4")]
		public static extern EUniverse ISteamUtils_GetConnectedUniverse();

		[PreserveSig]
		[Token(Token = "0x6001652")]
		[Address(RVA = "0xCE3864", Offset = "0xCE3864", VA = "0xCE3864")]
		public static extern uint ISteamUtils_GetServerRealTime();

		[PreserveSig]
		[Token(Token = "0x6001653")]
		[Address(RVA = "0xCE3914", Offset = "0xCE3914", VA = "0xCE3914")]
		public static extern string ISteamUtils_GetIPCountry();

		[PreserveSig]
		[Token(Token = "0x6001654")]
		[Address(RVA = "0xCE39DC", Offset = "0xCE39DC", VA = "0xCE39DC")]
		public static extern bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

		[PreserveSig]
		[Token(Token = "0x6001655")]
		[Address(RVA = "0xCE3AD4", Offset = "0xCE3AD4", VA = "0xCE3AD4")]
		public static extern bool ISteamUtils_GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize);

		[PreserveSig]
		[Token(Token = "0x6001656")]
		[Address(RVA = "0xCE3BB8", Offset = "0xCE3BB8", VA = "0xCE3BB8")]
		public static extern bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

		[PreserveSig]
		[Token(Token = "0x6001657")]
		[Address(RVA = "0xCE3CA8", Offset = "0xCE3CA8", VA = "0xCE3CA8")]
		public static extern byte ISteamUtils_GetCurrentBatteryPower();

		[PreserveSig]
		[Token(Token = "0x6001658")]
		[Address(RVA = "0xCE3D58", Offset = "0xCE3D58", VA = "0xCE3D58")]
		public static extern uint ISteamUtils_GetAppID();

		[PreserveSig]
		[Token(Token = "0x6001659")]
		[Address(RVA = "0xCE3E08", Offset = "0xCE3E08", VA = "0xCE3E08")]
		public static extern void ISteamUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);

		[PreserveSig]
		[Token(Token = "0x600165A")]
		[Address(RVA = "0xCE3EC8", Offset = "0xCE3EC8", VA = "0xCE3EC8")]
		public static extern bool ISteamUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x600165B")]
		[Address(RVA = "0xCE3FBC", Offset = "0xCE3FBC", VA = "0xCE3FBC")]
		public static extern ESteamAPICallFailure ISteamUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);

		[PreserveSig]
		[Token(Token = "0x600165C")]
		[Address(RVA = "0xCE4084", Offset = "0xCE4084", VA = "0xCE4084")]
		public static extern bool ISteamUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x600165D")]
		[Address(RVA = "0xCE4188", Offset = "0xCE4188", VA = "0xCE4188")]
		public static extern void ISteamUtils_RunFrame();

		[PreserveSig]
		[Token(Token = "0x600165E")]
		[Address(RVA = "0xCE4238", Offset = "0xCE4238", VA = "0xCE4238")]
		public static extern uint ISteamUtils_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x600165F")]
		[Address(RVA = "0xCE42E8", Offset = "0xCE42E8", VA = "0xCE42E8")]
		public static extern void ISteamUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x6001660")]
		[Address(RVA = "0xCE43B4", Offset = "0xCE43B4", VA = "0xCE43B4")]
		public static extern bool ISteamUtils_IsOverlayEnabled();

		[PreserveSig]
		[Token(Token = "0x6001661")]
		[Address(RVA = "0xCE4470", Offset = "0xCE4470", VA = "0xCE4470")]
		public static extern bool ISteamUtils_BOverlayNeedsPresent();

		[PreserveSig]
		[Token(Token = "0x6001662")]
		[Address(RVA = "0xCE452C", Offset = "0xCE452C", VA = "0xCE452C")]
		public static extern ulong ISteamUtils_CheckFileSignature(string szFileName);

		[PreserveSig]
		[Token(Token = "0x6001663")]
		[Address(RVA = "0xCE4618", Offset = "0xCE4618", VA = "0xCE4618")]
		public static extern bool ISteamUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText);

		[PreserveSig]
		[Token(Token = "0x6001664")]
		[Address(RVA = "0xCE4738", Offset = "0xCE4738", VA = "0xCE4738")]
		public static extern uint ISteamUtils_GetEnteredGamepadTextLength();

		[PreserveSig]
		[Token(Token = "0x6001665")]
		[Address(RVA = "0xCE47E8", Offset = "0xCE47E8", VA = "0xCE47E8")]
		public static extern bool ISteamUtils_GetEnteredGamepadTextInput(IntPtr pchText, uint cchText);

		[PreserveSig]
		[Token(Token = "0x6001666")]
		[Address(RVA = "0xCE48BC", Offset = "0xCE48BC", VA = "0xCE48BC")]
		public static extern string ISteamUtils_GetSteamUILanguage();

		[PreserveSig]
		[Token(Token = "0x6001667")]
		[Address(RVA = "0xCE4984", Offset = "0xCE4984", VA = "0xCE4984")]
		public static extern bool ISteamUtils_IsSteamRunningInVR();
	}
	[Token(Token = "0x200024B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F17C", Offset = "0xE9F17C")]
	public struct SteamAppInstalled_t
	{
		[Token(Token = "0x4000C08")]
		public const int k_iCallback = 3901;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x200024C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F190", Offset = "0xE9F190")]
	public struct SteamAppUninstalled_t
	{
		[Token(Token = "0x4000C0A")]
		public const int k_iCallback = 3902;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x200024D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F1A4", Offset = "0xE9F1A4")]
	public struct DlcInstalled_t
	{
		[Token(Token = "0x4000C0C")]
		public const int k_iCallback = 1005;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x200024E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F1B8", Offset = "0xE9F1B8")]
	public struct RegisterActivationCodeResponse_t
	{
		[Token(Token = "0x4000C0E")]
		public const int k_iCallback = 1008;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ERegisterActivationCodeResult m_eResult;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unPackageRegistered;
	}
	[Token(Token = "0x200024F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F1CC", Offset = "0xE9F1CC")]
	public struct AppProofOfPurchaseKeyResponse_t
	{
		[Token(Token = "0x4000C11")]
		public const int k_iCallback = 1013;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nAppID;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchKey;
	}
	[Token(Token = "0x2000250")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F1E0", Offset = "0xE9F1E0")]
	public struct NewLaunchQueryParameters_t
	{
		[Token(Token = "0x4000C15")]
		public const int k_iCallback = 1014;
	}
	[Token(Token = "0x2000251")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F1F4", Offset = "0xE9F1F4")]
	public struct PersonaStateChange_t
	{
		[Token(Token = "0x4000C16")]
		public const int k_iCallback = 304;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamID;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EPersonaChange m_nChangeFlags;
	}
	[Token(Token = "0x2000252")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F208", Offset = "0xE9F208")]
	public struct GameOverlayActivated_t
	{
		[Token(Token = "0x4000C19")]
		public const int k_iCallback = 331;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bActive;
	}
	[Token(Token = "0x2000253")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F21C", Offset = "0xE9F21C")]
	public struct GameServerChangeRequested_t
	{
		[Token(Token = "0x4000C1B")]
		public const int k_iCallback = 332;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_rgchServer;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string m_rgchPassword;
	}
	[Token(Token = "0x2000254")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F230", Offset = "0xE9F230")]
	public struct GameLobbyJoinRequested_t
	{
		[Token(Token = "0x4000C1E")]
		public const int k_iCallback = 333;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDLobby;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDFriend;
	}
	[Token(Token = "0x2000255")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F244", Offset = "0xE9F244")]
	public struct AvatarImageLoaded_t
	{
		[Token(Token = "0x4000C21")]
		public const int k_iCallback = 334;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamID;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iImage;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_iWide;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iTall;
	}
	[Token(Token = "0x2000256")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F258", Offset = "0xE9F258")]
	public struct ClanOfficerListResponse_t
	{
		[Token(Token = "0x4000C26")]
		public const int k_iCallback = 335;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClan;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_cOfficers;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte m_bSuccess;
	}
	[Token(Token = "0x2000257")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F26C", Offset = "0xE9F26C")]
	public struct FriendRichPresenceUpdate_t
	{
		[Token(Token = "0x4000C2A")]
		public const int k_iCallback = 336;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDFriend;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000258")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F280", Offset = "0xE9F280")]
	public struct GameRichPresenceJoinRequested_t
	{
		[Token(Token = "0x4000C2D")]
		public const int k_iCallback = 337;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDFriend;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchConnect;
	}
	[Token(Token = "0x2000259")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F294", Offset = "0xE9F294")]
	public struct GameConnectedClanChatMsg_t
	{
		[Token(Token = "0x4000C30")]
		public const int k_iCallback = 338;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iMessageID;
	}
	[Token(Token = "0x200025A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F2A8", Offset = "0xE9F2A8")]
	public struct GameConnectedChatJoin_t
	{
		[Token(Token = "0x4000C34")]
		public const int k_iCallback = 339;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x200025B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F2BC", Offset = "0xE9F2BC")]
	public struct GameConnectedChatLeave_t
	{
		[Token(Token = "0x4000C37")]
		public const int k_iCallback = 340;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bKicked;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_bDropped;
	}
	[Token(Token = "0x200025C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F2D0", Offset = "0xE9F2D0")]
	public struct DownloadClanActivityCountsResult_t
	{
		[Token(Token = "0x4000C3C")]
		public const int k_iCallback = 341;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSuccess;
	}
	[Token(Token = "0x200025D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F2E4", Offset = "0xE9F2E4")]
	public struct JoinClanChatRoomCompletionResult_t
	{
		[Token(Token = "0x4000C3E")]
		public const int k_iCallback = 342;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EChatRoomEnterResponse m_eChatRoomEnterResponse;
	}
	[Token(Token = "0x200025E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F2F8", Offset = "0xE9F2F8")]
	public struct GameConnectedFriendChatMsg_t
	{
		[Token(Token = "0x4000C41")]
		public const int k_iCallback = 343;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iMessageID;
	}
	[Token(Token = "0x200025F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F30C", Offset = "0xE9F30C")]
	public struct FriendsGetFollowerCount_t
	{
		[Token(Token = "0x4000C44")]
		public const int k_iCallback = 344;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nCount;
	}
	[Token(Token = "0x2000260")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F320", Offset = "0xE9F320")]
	public struct FriendsIsFollowing_t
	{
		[Token(Token = "0x4000C48")]
		public const int k_iCallback = 345;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bIsFollowing;
	}
	[Token(Token = "0x2000261")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F334", Offset = "0xE9F334")]
	public struct FriendsEnumerateFollowingList_t
	{
		[Token(Token = "0x4000C4C")]
		public const int k_iCallback = 346;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID[] m_rgSteamID;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nTotalResultCount;
	}
	[Token(Token = "0x2000262")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F348", Offset = "0xE9F348")]
	public struct SetPersonaNameResponse_t
	{
		[Token(Token = "0x4000C51")]
		public const int k_iCallback = 347;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSuccess;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool m_bLocalSuccess;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_result;
	}
	[Token(Token = "0x2000263")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F35C", Offset = "0xE9F35C")]
	public struct GCMessageAvailable_t
	{
		[Token(Token = "0x4000C55")]
		public const int k_iCallback = 1701;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nMessageSize;
	}
	[Token(Token = "0x2000264")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F370", Offset = "0xE9F370")]
	public struct GCMessageFailed_t
	{
		[Token(Token = "0x4000C57")]
		public const int k_iCallback = 1702;
	}
	[Token(Token = "0x2000265")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F384", Offset = "0xE9F384")]
	public struct GSClientApprove_t
	{
		[Token(Token = "0x4000C58")]
		public const int k_iCallback = 201;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_OwnerSteamID;
	}
	[Token(Token = "0x2000266")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F398", Offset = "0xE9F398")]
	public struct GSClientDeny_t
	{
		[Token(Token = "0x4000C5B")]
		public const int k_iCallback = 202;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EDenyReason m_eDenyReason;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string m_rgchOptionalText;
	}
	[Token(Token = "0x2000267")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F3AC", Offset = "0xE9F3AC")]
	public struct GSClientKick_t
	{
		[Token(Token = "0x4000C5F")]
		public const int k_iCallback = 203;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EDenyReason m_eDenyReason;
	}
	[Token(Token = "0x2000268")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F3C0", Offset = "0xE9F3C0")]
	public struct GSClientAchievementStatus_t
	{
		[Token(Token = "0x4000C62")]
		public const int k_iCallback = 206;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamID;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_pchAchievement;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bUnlocked;
	}
	[Token(Token = "0x2000269")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F3D4", Offset = "0xE9F3D4")]
	public struct GSPolicyResponse_t
	{
		[Token(Token = "0x4000C66")]
		public const int k_iCallback = 115;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSecure;
	}
	[Token(Token = "0x200026A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F3E8", Offset = "0xE9F3E8")]
	public struct GSGameplayStats_t
	{
		[Token(Token = "0x4000C68")]
		public const int k_iCallback = 207;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nRank;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_unTotalConnects;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unTotalMinutesPlayed;
	}
	[Token(Token = "0x200026B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F3FC", Offset = "0xE9F3FC")]
	public struct GSClientGroupStatus_t
	{
		[Token(Token = "0x4000C6D")]
		public const int k_iCallback = 208;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamIDUser;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_SteamIDGroup;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bMember;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_bOfficer;
	}
	[Token(Token = "0x200026C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F410", Offset = "0xE9F410")]
	public struct GSReputation_t
	{
		[Token(Token = "0x4000C72")]
		public const int k_iCallback = 209;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unReputationScore;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bBanned;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unBannedIP;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort m_usBannedPort;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ulong m_ulBannedGameID;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint m_unBanExpires;
	}
	[Token(Token = "0x200026D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F424", Offset = "0xE9F424")]
	public struct AssociateWithClanResult_t
	{
		[Token(Token = "0x4000C7A")]
		public const int k_iCallback = 210;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200026E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F438", Offset = "0xE9F438")]
	public struct ComputeNewPlayerCompatibilityResult_t
	{
		[Token(Token = "0x4000C7C")]
		public const int k_iCallback = 211;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_cPlayersThatDontLikeCandidate;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_cPlayersThatCandidateDoesntLike;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_cClanPlayersThatDontLikeCandidate;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CSteamID m_SteamIDCandidate;
	}
	[Token(Token = "0x200026F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F44C", Offset = "0xE9F44C")]
	public struct GSStatsReceived_t
	{
		[Token(Token = "0x4000C82")]
		public const int k_iCallback = 1800;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000270")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F460", Offset = "0xE9F460")]
	public struct GSStatsStored_t
	{
		[Token(Token = "0x4000C85")]
		public const int k_iCallback = 1801;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000271")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F474", Offset = "0xE9F474")]
	public struct GSStatsUnloaded_t
	{
		[Token(Token = "0x4000C88")]
		public const int k_iCallback = 1108;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000272")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F488", Offset = "0xE9F488")]
	public struct HTML_BrowserReady_t
	{
		[Token(Token = "0x4000C8A")]
		public const int k_iCallback = 4501;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x2000273")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F49C", Offset = "0xE9F49C")]
	public struct HTML_NeedsPaint_t
	{
		[Token(Token = "0x4000C8C")]
		public const int k_iCallback = 4502;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pBGRA;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unWide;

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint unTall;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unUpdateX;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unUpdateY;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unUpdateWide;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint unUpdateTall;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint unScrollX;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint unScrollY;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float flPageScale;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint unPageSerial;
	}
	[Token(Token = "0x2000274")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F4B0", Offset = "0xE9F4B0")]
	public struct HTML_StartRequest_t
	{
		[Token(Token = "0x4000C99")]
		public const int k_iCallback = 4503;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchURL;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchTarget;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string pchPostData;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bIsRedirect;
	}
	[Token(Token = "0x2000275")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F4C4", Offset = "0xE9F4C4")]
	public struct HTML_CloseBrowser_t
	{
		[Token(Token = "0x4000C9F")]
		public const int k_iCallback = 4504;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x2000276")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F4D8", Offset = "0xE9F4D8")]
	public struct HTML_URLChanged_t
	{
		[Token(Token = "0x4000CA1")]
		public const int k_iCallback = 4505;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchURL;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchPostData;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool bIsRedirect;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchPageTitle;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool bNewNavigation;
	}
	[Token(Token = "0x2000277")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F4EC", Offset = "0xE9F4EC")]
	public struct HTML_FinishedRequest_t
	{
		[Token(Token = "0x4000CA8")]
		public const int k_iCallback = 4506;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchURL;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchPageTitle;
	}
	[Token(Token = "0x2000278")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F500", Offset = "0xE9F500")]
	public struct HTML_OpenLinkInNewTab_t
	{
		[Token(Token = "0x4000CAC")]
		public const int k_iCallback = 4507;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchURL;
	}
	[Token(Token = "0x2000279")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F514", Offset = "0xE9F514")]
	public struct HTML_ChangedTitle_t
	{
		[Token(Token = "0x4000CAF")]
		public const int k_iCallback = 4508;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchTitle;
	}
	[Token(Token = "0x200027A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F528", Offset = "0xE9F528")]
	public struct HTML_SearchResults_t
	{
		[Token(Token = "0x4000CB2")]
		public const int k_iCallback = 4509;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unResults;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unCurrentMatch;
	}
	[Token(Token = "0x200027B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F53C", Offset = "0xE9F53C")]
	public struct HTML_CanGoBackAndForward_t
	{
		[Token(Token = "0x4000CB6")]
		public const int k_iCallback = 4510;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool bCanGoBack;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool bCanGoForward;
	}
	[Token(Token = "0x200027C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F550", Offset = "0xE9F550")]
	public struct HTML_HorizontalScroll_t
	{
		[Token(Token = "0x4000CBA")]
		public const int k_iCallback = 4511;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unScrollMax;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unScrollCurrent;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float flPageScale;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bVisible;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unPageSize;
	}
	[Token(Token = "0x200027D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F564", Offset = "0xE9F564")]
	public struct HTML_VerticalScroll_t
	{
		[Token(Token = "0x4000CC1")]
		public const int k_iCallback = 4512;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unScrollMax;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unScrollCurrent;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float flPageScale;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bVisible;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unPageSize;
	}
	[Token(Token = "0x200027E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F578", Offset = "0xE9F578")]
	public struct HTML_LinkAtPosition_t
	{
		[Token(Token = "0x4000CC8")]
		public const int k_iCallback = 4513;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint x;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint y;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string pchURL;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bInput;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool bLiveLink;
	}
	[Token(Token = "0x200027F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F58C", Offset = "0xE9F58C")]
	public struct HTML_JSAlert_t
	{
		[Token(Token = "0x4000CCF")]
		public const int k_iCallback = 4514;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchMessage;
	}
	[Token(Token = "0x2000280")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F5A0", Offset = "0xE9F5A0")]
	public struct HTML_JSConfirm_t
	{
		[Token(Token = "0x4000CD2")]
		public const int k_iCallback = 4515;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchMessage;
	}
	[Token(Token = "0x2000281")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F5B4", Offset = "0xE9F5B4")]
	public struct HTML_FileOpenDialog_t
	{
		[Token(Token = "0x4000CD5")]
		public const int k_iCallback = 4516;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchTitle;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchInitialFile;
	}
	[Token(Token = "0x2000282")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F5C8", Offset = "0xE9F5C8")]
	public struct HTML_ComboNeedsPaint_t
	{
		[Token(Token = "0x4000CD9")]
		public const int k_iCallback = 4517;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pBGRA;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unWide;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint unTall;
	}
	[Token(Token = "0x2000283")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F5DC", Offset = "0xE9F5DC")]
	public struct HTML_ShowPopup_t
	{
		[Token(Token = "0x4000CDE")]
		public const int k_iCallback = 4518;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x2000284")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F5F0", Offset = "0xE9F5F0")]
	public struct HTML_HidePopup_t
	{
		[Token(Token = "0x4000CE0")]
		public const int k_iCallback = 4519;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x2000285")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F604", Offset = "0xE9F604")]
	public struct HTML_SizePopup_t
	{
		[Token(Token = "0x4000CE2")]
		public const int k_iCallback = 4520;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unX;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unY;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint unWide;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unTall;
	}
	[Token(Token = "0x2000286")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F618", Offset = "0xE9F618")]
	public struct HTML_NewWindow_t
	{
		[Token(Token = "0x4000CE8")]
		public const int k_iCallback = 4521;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchURL;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unX;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint unY;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unWide;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unTall;
	}
	[Token(Token = "0x2000287")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F62C", Offset = "0xE9F62C")]
	public struct HTML_SetCursor_t
	{
		[Token(Token = "0x4000CEF")]
		public const int k_iCallback = 4522;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint eMouseCursor;
	}
	[Token(Token = "0x2000288")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F640", Offset = "0xE9F640")]
	public struct HTML_StatusText_t
	{
		[Token(Token = "0x4000CF2")]
		public const int k_iCallback = 4523;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchMsg;
	}
	[Token(Token = "0x2000289")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F654", Offset = "0xE9F654")]
	public struct HTML_ShowToolTip_t
	{
		[Token(Token = "0x4000CF5")]
		public const int k_iCallback = 4524;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchMsg;
	}
	[Token(Token = "0x200028A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F668", Offset = "0xE9F668")]
	public struct HTML_UpdateToolTip_t
	{
		[Token(Token = "0x4000CF8")]
		public const int k_iCallback = 4525;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string pchMsg;
	}
	[Token(Token = "0x200028B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F67C", Offset = "0xE9F67C")]
	public struct HTML_HideToolTip_t
	{
		[Token(Token = "0x4000CFB")]
		public const int k_iCallback = 4526;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x200028C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F690", Offset = "0xE9F690")]
	public struct HTTPRequestCompleted_t
	{
		[Token(Token = "0x4000CFD")]
		public const int k_iCallback = 2101;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulContextValue;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bRequestSuccessful;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public EHTTPStatusCode m_eStatusCode;
	}
	[Token(Token = "0x200028D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F6A4", Offset = "0xE9F6A4")]
	public struct HTTPRequestHeadersReceived_t
	{
		[Token(Token = "0x4000D02")]
		public const int k_iCallback = 2102;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulContextValue;
	}
	[Token(Token = "0x200028E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F6B8", Offset = "0xE9F6B8")]
	public struct HTTPRequestDataReceived_t
	{
		[Token(Token = "0x4000D05")]
		public const int k_iCallback = 2103;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulContextValue;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_cOffset;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_cBytesReceived;
	}
	[Token(Token = "0x200028F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F6CC", Offset = "0xE9F6CC")]
	public struct FavoritesListChanged_t
	{
		[Token(Token = "0x4000D0A")]
		public const int k_iCallback = 502;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nIP;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nQueryPort;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nConnPort;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nAppID;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nFlags;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bAdd;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AccountID_t m_unAccountId;
	}
	[Token(Token = "0x2000290")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F6E0", Offset = "0xE9F6E0")]
	public struct LobbyInvite_t
	{
		[Token(Token = "0x4000D12")]
		public const int k_iCallback = 503;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDUser;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong m_ulGameID;
	}
	[Token(Token = "0x2000291")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F6F4", Offset = "0xE9F6F4")]
	public struct LobbyEnter_t
	{
		[Token(Token = "0x4000D16")]
		public const int k_iCallback = 504;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_rgfChatPermissions;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bLocked;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_EChatRoomEnterResponse;
	}
	[Token(Token = "0x2000292")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F708", Offset = "0xE9F708")]
	public struct LobbyDataUpdate_t
	{
		[Token(Token = "0x4000D1B")]
		public const int k_iCallback = 505;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDMember;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bSuccess;
	}
	[Token(Token = "0x2000293")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F71C", Offset = "0xE9F71C")]
	public struct LobbyChatUpdate_t
	{
		[Token(Token = "0x4000D1F")]
		public const int k_iCallback = 506;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDUserChanged;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong m_ulSteamIDMakingChange;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_rgfChatMemberStateChange;
	}
	[Token(Token = "0x2000294")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F730", Offset = "0xE9F730")]
	public struct LobbyChatMsg_t
	{
		[Token(Token = "0x4000D24")]
		public const int k_iCallback = 507;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDUser;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_eChatEntryType;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_iChatID;
	}
	[Token(Token = "0x2000295")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F744", Offset = "0xE9F744")]
	public struct LobbyGameCreated_t
	{
		[Token(Token = "0x4000D29")]
		public const int k_iCallback = 509;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDGameServer;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_unIP;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ushort m_usPort;
	}
	[Token(Token = "0x2000296")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F758", Offset = "0xE9F758")]
	public struct LobbyMatchList_t
	{
		[Token(Token = "0x4000D2E")]
		public const int k_iCallback = 510;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nLobbiesMatching;
	}
	[Token(Token = "0x2000297")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F76C", Offset = "0xE9F76C")]
	public struct LobbyKicked_t
	{
		[Token(Token = "0x4000D30")]
		public const int k_iCallback = 512;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDAdmin;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bKickedDueToDisconnect;
	}
	[Token(Token = "0x2000298")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F780", Offset = "0xE9F780")]
	public struct LobbyCreated_t
	{
		[Token(Token = "0x4000D34")]
		public const int k_iCallback = 513;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDLobby;
	}
	[Token(Token = "0x2000299")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F794", Offset = "0xE9F794")]
	public struct FavoritesListAccountsUpdated_t
	{
		[Token(Token = "0x4000D37")]
		public const int k_iCallback = 516;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200029A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F7A8", Offset = "0xE9F7A8")]
	public struct PlaybackStatusHasChanged_t
	{
		[Token(Token = "0x4000D39")]
		public const int k_iCallback = 4001;
	}
	[Token(Token = "0x200029B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F7BC", Offset = "0xE9F7BC")]
	public struct VolumeHasChanged_t
	{
		[Token(Token = "0x4000D3A")]
		public const int k_iCallback = 4002;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flNewVolume;
	}
	[Token(Token = "0x200029C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F7D0", Offset = "0xE9F7D0")]
	public struct MusicPlayerRemoteWillActivate_t
	{
		[Token(Token = "0x4000D3C")]
		public const int k_iCallback = 4101;
	}
	[Token(Token = "0x200029D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F7E4", Offset = "0xE9F7E4")]
	public struct MusicPlayerRemoteWillDeactivate_t
	{
		[Token(Token = "0x4000D3D")]
		public const int k_iCallback = 4102;
	}
	[Token(Token = "0x200029E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F7F8", Offset = "0xE9F7F8")]
	public struct MusicPlayerRemoteToFront_t
	{
		[Token(Token = "0x4000D3E")]
		public const int k_iCallback = 4103;
	}
	[Token(Token = "0x200029F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F80C", Offset = "0xE9F80C")]
	public struct MusicPlayerWillQuit_t
	{
		[Token(Token = "0x4000D3F")]
		public const int k_iCallback = 4104;
	}
	[Token(Token = "0x20002A0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F820", Offset = "0xE9F820")]
	public struct MusicPlayerWantsPlay_t
	{
		[Token(Token = "0x4000D40")]
		public const int k_iCallback = 4105;
	}
	[Token(Token = "0x20002A1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F834", Offset = "0xE9F834")]
	public struct MusicPlayerWantsPause_t
	{
		[Token(Token = "0x4000D41")]
		public const int k_iCallback = 4106;
	}
	[Token(Token = "0x20002A2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F848", Offset = "0xE9F848")]
	public struct MusicPlayerWantsPlayPrevious_t
	{
		[Token(Token = "0x4000D42")]
		public const int k_iCallback = 4107;
	}
	[Token(Token = "0x20002A3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F85C", Offset = "0xE9F85C")]
	public struct MusicPlayerWantsPlayNext_t
	{
		[Token(Token = "0x4000D43")]
		public const int k_iCallback = 4108;
	}
	[Token(Token = "0x20002A4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F870", Offset = "0xE9F870")]
	public struct MusicPlayerWantsShuffled_t
	{
		[Token(Token = "0x4000D44")]
		public const int k_iCallback = 4109;

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bShuffled;
	}
	[Token(Token = "0x20002A5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F884", Offset = "0xE9F884")]
	public struct MusicPlayerWantsLooped_t
	{
		[Token(Token = "0x4000D46")]
		public const int k_iCallback = 4110;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bLooped;
	}
	[Token(Token = "0x20002A6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F898", Offset = "0xE9F898")]
	public struct MusicPlayerWantsVolume_t
	{
		[Token(Token = "0x4000D48")]
		public const int k_iCallback = 4011;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flNewVolume;
	}
	[Token(Token = "0x20002A7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F8AC", Offset = "0xE9F8AC")]
	public struct MusicPlayerSelectsQueueEntry_t
	{
		[Token(Token = "0x4000D4A")]
		public const int k_iCallback = 4012;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nID;
	}
	[Token(Token = "0x20002A8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F8C0", Offset = "0xE9F8C0")]
	public struct MusicPlayerSelectsPlaylistEntry_t
	{
		[Token(Token = "0x4000D4C")]
		public const int k_iCallback = 4013;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nID;
	}
	[Token(Token = "0x20002A9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F8D4", Offset = "0xE9F8D4")]
	public struct P2PSessionRequest_t
	{
		[Token(Token = "0x4000D4E")]
		public const int k_iCallback = 1202;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDRemote;
	}
	[Token(Token = "0x20002AA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F8E8", Offset = "0xE9F8E8")]
	public struct P2PSessionConnectFail_t
	{
		[Token(Token = "0x4000D50")]
		public const int k_iCallback = 1203;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDRemote;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte m_eP2PSessionError;
	}
	[Token(Token = "0x20002AB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F8FC", Offset = "0xE9F8FC")]
	public struct SocketStatusCallback_t
	{
		[Token(Token = "0x4000D53")]
		public const int k_iCallback = 1201;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SNetSocket_t m_hSocket;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SNetListenSocket_t m_hListenSocket;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDRemote;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_eSNetSocketState;
	}
	[Token(Token = "0x20002AC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F910", Offset = "0xE9F910")]
	public struct RemoteStorageAppSyncedClient_t
	{
		[Token(Token = "0x4000D58")]
		public const int k_iCallback = 1301;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_unNumDownloads;
	}
	[Token(Token = "0x20002AD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F924", Offset = "0xE9F924")]
	public struct RemoteStorageAppSyncedServer_t
	{
		[Token(Token = "0x4000D5C")]
		public const int k_iCallback = 1302;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_unNumUploads;
	}
	[Token(Token = "0x20002AE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F938", Offset = "0xE9F938")]
	public struct RemoteStorageAppSyncProgress_t
	{
		[Token(Token = "0x4000D60")]
		public const int k_iCallback = 1303;

		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_rgchCurrentFile;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_uBytesTransferredThisChunk;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double m_dAppPercentComplete;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool m_bUploading;
	}
	[Token(Token = "0x20002AF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F94C", Offset = "0xE9F94C")]
	public struct RemoteStorageAppSyncStatusCheck_t
	{
		[Token(Token = "0x4000D66")]
		public const int k_iCallback = 1305;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20002B0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F960", Offset = "0xE9F960")]
	public struct RemoteStorageConflictResolution_t
	{
		[Token(Token = "0x4000D69")]
		public const int k_iCallback = 1306;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20002B1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F974", Offset = "0xE9F974")]
	public struct RemoteStorageFileShareResult_t
	{
		[Token(Token = "0x4000D6C")]
		public const int k_iCallback = 1307;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchFilename;
	}
	[Token(Token = "0x20002B2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F988", Offset = "0xE9F988")]
	public struct RemoteStoragePublishFileResult_t
	{
		[Token(Token = "0x4000D70")]
		public const int k_iCallback = 1309;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x20002B3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F99C", Offset = "0xE9F99C")]
	public struct RemoteStorageDeletePublishedFileResult_t
	{
		[Token(Token = "0x4000D74")]
		public const int k_iCallback = 1311;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x20002B4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F9B0", Offset = "0xE9F9B0")]
	public struct RemoteStorageEnumerateUserPublishedFilesResult_t
	{
		[Token(Token = "0x4000D77")]
		public const int k_iCallback = 1312;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PublishedFileId_t[] m_rgPublishedFileId;
	}
	[Token(Token = "0x20002B5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F9C4", Offset = "0xE9F9C4")]
	public struct RemoteStorageSubscribePublishedFileResult_t
	{
		[Token(Token = "0x4000D7C")]
		public const int k_iCallback = 1313;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x20002B6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F9D8", Offset = "0xE9F9D8")]
	public struct RemoteStorageEnumerateUserSubscribedFilesResult_t
	{
		[Token(Token = "0x4000D7F")]
		public const int k_iCallback = 1314;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint[] m_rgRTimeSubscribed;
	}
	[Token(Token = "0x20002B7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9F9EC", Offset = "0xE9F9EC")]
	public struct RemoteStorageUnsubscribePublishedFileResult_t
	{
		[Token(Token = "0x4000D85")]
		public const int k_iCallback = 1315;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x20002B8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FA00", Offset = "0xE9FA00")]
	public struct RemoteStorageUpdatePublishedFileResult_t
	{
		[Token(Token = "0x4000D88")]
		public const int k_iCallback = 1316;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x20002B9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FA14", Offset = "0xE9FA14")]
	public struct RemoteStorageDownloadUGCResult_t
	{
		[Token(Token = "0x4000D8C")]
		public const int k_iCallback = 1317;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nSizeInBytes;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_pchFileName;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ulong m_ulSteamIDOwner;
	}
	[Token(Token = "0x20002BA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FA28", Offset = "0xE9FA28")]
	public struct RemoteStorageGetPublishedFileDetailsResult_t
	{
		[Token(Token = "0x4000D93")]
		public const int k_iCallback = 1318;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nCreatorAppID;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nConsumerAppID;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_rgchTitle;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public string m_rgchDescription;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UGCHandle_t m_hPreviewFile;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ulong m_ulSteamIDOwner;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_rtimeCreated;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public uint m_rtimeUpdated;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ERemoteStoragePublishedFileVisibility m_eVisibility;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool m_bBanned;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_rgchTags;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool m_bTagsTruncated;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string m_pchFileName;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int m_nFileSize;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int m_nPreviewFileSize;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public string m_rgchURL;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public EWorkshopFileType m_eFileType;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool m_bAcceptedForUse;
	}
	[Token(Token = "0x20002BB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FA3C", Offset = "0xE9FA3C")]
	public struct RemoteStorageEnumerateWorkshopFilesResult_t
	{
		[Token(Token = "0x4000DA9")]
		public const int k_iCallback = 1319;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float[] m_rgScore;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nAppId;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_unStartIndex;
	}
	[Token(Token = "0x20002BC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FA50", Offset = "0xE9FA50")]
	public struct RemoteStorageGetPublishedItemVoteDetailsResult_t
	{
		[Token(Token = "0x4000DB1")]
		public const int k_iCallback = 1320;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_unPublishedFileId;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nVotesFor;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nVotesAgainst;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nReports;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m_fScore;
	}
	[Token(Token = "0x20002BD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FA64", Offset = "0xE9FA64")]
	public struct RemoteStoragePublishedFileSubscribed_t
	{
		[Token(Token = "0x4000DB8")]
		public const int k_iCallback = 1321;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20002BE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FA78", Offset = "0xE9FA78")]
	public struct RemoteStoragePublishedFileUnsubscribed_t
	{
		[Token(Token = "0x4000DBB")]
		public const int k_iCallback = 1322;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20002BF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FA8C", Offset = "0xE9FA8C")]
	public struct RemoteStoragePublishedFileDeleted_t
	{
		[Token(Token = "0x4000DBE")]
		public const int k_iCallback = 1323;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20002C0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FAA0", Offset = "0xE9FAA0")]
	public struct RemoteStorageUpdateUserPublishedItemVoteResult_t
	{
		[Token(Token = "0x4000DC1")]
		public const int k_iCallback = 1324;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x20002C1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FAB4", Offset = "0xE9FAB4")]
	public struct RemoteStorageUserVoteDetails_t
	{
		[Token(Token = "0x4000DC4")]
		public const int k_iCallback = 1325;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EWorkshopVote m_eVote;
	}
	[Token(Token = "0x20002C2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FAC8", Offset = "0xE9FAC8")]
	public struct RemoteStorageEnumerateUserSharedWorkshopFilesResult_t
	{
		[Token(Token = "0x4000DC8")]
		public const int k_iCallback = 1326;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PublishedFileId_t[] m_rgPublishedFileId;
	}
	[Token(Token = "0x20002C3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FADC", Offset = "0xE9FADC")]
	public struct RemoteStorageSetUserPublishedFileActionResult_t
	{
		[Token(Token = "0x4000DCD")]
		public const int k_iCallback = 1327;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EWorkshopFileAction m_eAction;
	}
	[Token(Token = "0x20002C4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FAF0", Offset = "0xE9FAF0")]
	public struct RemoteStorageEnumeratePublishedFilesByUserActionResult_t
	{
		[Token(Token = "0x4000DD1")]
		public const int k_iCallback = 1328;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EWorkshopFileAction m_eAction;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint[] m_rgRTimeUpdated;
	}
	[Token(Token = "0x20002C5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FB04", Offset = "0xE9FB04")]
	public struct RemoteStoragePublishFileProgress_t
	{
		[Token(Token = "0x4000DD8")]
		public const int k_iCallback = 1329;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double m_dPercentFile;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bPreview;
	}
	[Token(Token = "0x20002C6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FB18", Offset = "0xE9FB18")]
	public struct RemoteStoragePublishedFileUpdated_t
	{
		[Token(Token = "0x4000DDB")]
		public const int k_iCallback = 1330;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UGCHandle_t m_hFile;
	}
	[Token(Token = "0x20002C7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FB2C", Offset = "0xE9FB2C")]
	public struct ScreenshotReady_t
	{
		[Token(Token = "0x4000DDF")]
		public const int k_iCallback = 2301;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ScreenshotHandle m_hLocal;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20002C8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FB40", Offset = "0xE9FB40")]
	public struct ScreenshotRequested_t
	{
		[Token(Token = "0x4000DE2")]
		public const int k_iCallback = 2302;
	}
	[Token(Token = "0x20002C9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FB54", Offset = "0xE9FB54")]
	public struct SteamUGCQueryCompleted_t
	{
		[Token(Token = "0x4000DE3")]
		public const int k_iCallback = 3401;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UGCQueryHandle_t m_handle;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unNumResultsReturned;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_unTotalMatchingResults;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x20002CA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FB68", Offset = "0xE9FB68")]
	public struct SteamUGCRequestUGCDetailsResult_t
	{
		[Token(Token = "0x4000DE9")]
		public const int k_iCallback = 3402;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamUGCDetails_t m_details;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x20002CB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FB7C", Offset = "0xE9FB7C")]
	public struct CreateItemResult_t
	{
		[Token(Token = "0x4000DEC")]
		public const int k_iCallback = 3403;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x20002CC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FB90", Offset = "0xE9FB90")]
	public struct SubmitItemUpdateResult_t
	{
		[Token(Token = "0x4000DF0")]
		public const int k_iCallback = 3404;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x20002CD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FBA4", Offset = "0xE9FBA4")]
	public struct ItemInstalled_t
	{
		[Token(Token = "0x4000DF3")]
		public const int k_iCallback = 3405;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_unAppID;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x20002CE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FBB8", Offset = "0xE9FBB8")]
	public struct SteamUnifiedMessagesSendMethodResult_t
	{
		[Token(Token = "0x4000DF6")]
		public const int k_iCallback = 2501;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ClientUnifiedMessageHandle m_hHandle;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_unContext;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EResult m_eResult;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_unResponseSize;
	}
	[Token(Token = "0x20002CF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FBCC", Offset = "0xE9FBCC")]
	public struct SteamServersConnected_t
	{
		[Token(Token = "0x4000DFB")]
		public const int k_iCallback = 101;
	}
	[Token(Token = "0x20002D0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FBE0", Offset = "0xE9FBE0")]
	public struct SteamServerConnectFailure_t
	{
		[Token(Token = "0x4000DFC")]
		public const int k_iCallback = 102;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20002D1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FBF4", Offset = "0xE9FBF4")]
	public struct SteamServersDisconnected_t
	{
		[Token(Token = "0x4000DFE")]
		public const int k_iCallback = 103;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20002D2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FC08", Offset = "0xE9FC08")]
	public struct ClientGameServerDeny_t
	{
		[Token(Token = "0x4000E00")]
		public const int k_iCallback = 113;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_uAppID;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unGameServerIP;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort m_usGameServerPort;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort m_bSecure;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_uReason;
	}
	[Token(Token = "0x20002D3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FC1C", Offset = "0xE9FC1C")]
	public struct IPCFailure_t
	{
		[Token(Token = "0x20002D4")]
		public enum EFailureType
		{
			[Token(Token = "0x4000E09")]
			k_EFailureFlushedCallbackQueue,
			[Token(Token = "0x4000E0A")]
			k_EFailurePipeFail
		}

		[Token(Token = "0x4000E06")]
		public const int k_iCallback = 117;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_eFailureType;
	}
	[Token(Token = "0x20002D5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FC30", Offset = "0xE9FC30")]
	public struct ValidateAuthTicketResponse_t
	{
		[Token(Token = "0x4000E0B")]
		public const int k_iCallback = 143;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EAuthSessionResponse m_eAuthSessionResponse;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CSteamID m_OwnerSteamID;
	}
	[Token(Token = "0x20002D6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FC44", Offset = "0xE9FC44")]
	public struct MicroTxnAuthorizationResponse_t
	{
		[Token(Token = "0x4000E0F")]
		public const int k_iCallback = 152;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_unAppID;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulOrderID;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bAuthorized;
	}
	[Token(Token = "0x20002D7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FC58", Offset = "0xE9FC58")]
	public struct EncryptedAppTicketResponse_t
	{
		[Token(Token = "0x4000E13")]
		public const int k_iCallback = 154;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20002D8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FC6C", Offset = "0xE9FC6C")]
	public struct GetAuthSessionTicketResponse_t
	{
		[Token(Token = "0x4000E15")]
		public const int k_iCallback = 163;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HAuthTicket m_hAuthTicket;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20002D9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FC80", Offset = "0xE9FC80")]
	public struct GameWebCallback_t
	{
		[Token(Token = "0x4000E18")]
		public const int k_iCallback = 164;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szURL;
	}
	[StructLayout(2)]
	[Token(Token = "0x20002DA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FC94", Offset = "0xE9FC94")]
	public struct UserStatsReceived_t
	{
		[Token(Token = "0x4000E1A")]
		public const int k_iCallback = 1101;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20002DB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FCA8", Offset = "0xE9FCA8")]
	public struct UserStatsStored_t
	{
		[Token(Token = "0x4000E1E")]
		public const int k_iCallback = 1102;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20002DC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FCBC", Offset = "0xE9FCBC")]
	public struct UserAchievementStored_t
	{
		[Token(Token = "0x4000E21")]
		public const int k_iCallback = 1103;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bGroupAchievement;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string m_rgchAchievementName;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nCurProgress;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_nMaxProgress;
	}
	[Token(Token = "0x20002DD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FCD0", Offset = "0xE9FCD0")]
	public struct LeaderboardFindResult_t
	{
		[Token(Token = "0x4000E27")]
		public const int k_iCallback = 1104;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte m_bLeaderboardFound;
	}
	[Token(Token = "0x20002DE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FCE4", Offset = "0xE9FCE4")]
	public struct LeaderboardScoresDownloaded_t
	{
		[Token(Token = "0x4000E2A")]
		public const int k_iCallback = 1105;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamLeaderboardEntries_t m_hSteamLeaderboardEntries;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cEntryCount;
	}
	[Token(Token = "0x20002DF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FCF8", Offset = "0xE9FCF8")]
	public struct LeaderboardScoreUploaded_t
	{
		[Token(Token = "0x4000E2E")]
		public const int k_iCallback = 1106;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSuccess;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nScore;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public byte m_bScoreChanged;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nGlobalRankNew;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int m_nGlobalRankPrevious;
	}
	[Token(Token = "0x20002E0")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FD0C", Offset = "0xE9FD0C")]
	public struct NumberOfCurrentPlayers_t
	{
		[Token(Token = "0x4000E35")]
		public const int k_iCallback = 1107;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSuccess;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_cPlayers;
	}
	[Token(Token = "0x20002E1")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FD20", Offset = "0xE9FD20")]
	public struct UserStatsUnloaded_t
	{
		[Token(Token = "0x4000E38")]
		public const int k_iCallback = 1108;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x20002E2")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FD34", Offset = "0xE9FD34")]
	public struct UserAchievementIconFetched_t
	{
		[Token(Token = "0x4000E3A")]
		public const int k_iCallback = 1109;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CGameID m_nGameID;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchAchievementName;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bAchieved;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nIconHandle;
	}
	[Token(Token = "0x20002E3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FD48", Offset = "0xE9FD48")]
	public struct GlobalAchievementPercentagesReady_t
	{
		[Token(Token = "0x4000E3F")]
		public const int k_iCallback = 1110;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20002E4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FD5C", Offset = "0xE9FD5C")]
	public struct LeaderboardUGCSet_t
	{
		[Token(Token = "0x4000E42")]
		public const int k_iCallback = 1111;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamLeaderboard_t m_hSteamLeaderboard;
	}
	[Token(Token = "0x20002E5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FD70", Offset = "0xE9FD70")]
	public struct GlobalStatsReceived_t
	{
		[Token(Token = "0x4000E45")]
		public const int k_iCallback = 1112;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x20002E6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FD84", Offset = "0xE9FD84")]
	public struct IPCountry_t
	{
		[Token(Token = "0x4000E48")]
		public const int k_iCallback = 701;
	}
	[Token(Token = "0x20002E7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FD98", Offset = "0xE9FD98")]
	public struct LowBatteryPower_t
	{
		[Token(Token = "0x4000E49")]
		public const int k_iCallback = 702;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_nMinutesBatteryLeft;
	}
	[Token(Token = "0x20002E8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FDAC", Offset = "0xE9FDAC")]
	public struct SteamAPICallCompleted_t
	{
		[Token(Token = "0x4000E4B")]
		public const int k_iCallback = 703;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamAPICall_t m_hAsyncCall;
	}
	[Token(Token = "0x20002E9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FDC0", Offset = "0xE9FDC0")]
	public struct SteamShutdown_t
	{
		[Token(Token = "0x4000E4D")]
		public const int k_iCallback = 704;
	}
	[Token(Token = "0x20002EA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FDD4", Offset = "0xE9FDD4")]
	public struct CheckFileSignature_t
	{
		[Token(Token = "0x4000E4E")]
		public const int k_iCallback = 705;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ECheckFileSignature m_eCheckFileSignature;
	}
	[Token(Token = "0x20002EB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xE9FDE8", Offset = "0xE9FDE8")]
	public struct GamepadTextInputDismissed_t
	{
		[Token(Token = "0x4000E50")]
		public const int k_iCallback = 714;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSubmitted;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unSubmittedText;
	}
	[Token(Token = "0x20002EC")]
	public static class Constants
	{
		[Token(Token = "0x4000E53")]
		public const string STEAMAPPLIST_INTERFACE_VERSION = "STEAMAPPLIST_INTERFACE_VERSION001";

		[Token(Token = "0x4000E54")]
		public const string STEAMAPPS_INTERFACE_VERSION = "STEAMAPPS_INTERFACE_VERSION006";

		[Token(Token = "0x4000E55")]
		public const string STEAMAPPTICKET_INTERFACE_VERSION = "STEAMAPPTICKET_INTERFACE_VERSION001";

		[Token(Token = "0x4000E56")]
		public const string STEAMCLIENT_INTERFACE_VERSION = "SteamClient016";

		[Token(Token = "0x4000E57")]
		public const string STEAMCONTROLLER_INTERFACE_VERSION = "STEAMCONTROLLER_INTERFACE_VERSION";

		[Token(Token = "0x4000E58")]
		public const string STEAMFRIENDS_INTERFACE_VERSION = "SteamFriends014";

		[Token(Token = "0x4000E59")]
		public const string STEAMGAMECOORDINATOR_INTERFACE_VERSION = "SteamGameCoordinator001";

		[Token(Token = "0x4000E5A")]
		public const string STEAMGAMESERVER_INTERFACE_VERSION = "SteamGameServer012";

		[Token(Token = "0x4000E5B")]
		public const string STEAMGAMESERVERSTATS_INTERFACE_VERSION = "SteamGameServerStats001";

		[Token(Token = "0x4000E5C")]
		public const string STEAMHTMLSURFACE_INTERFACE_VERSION = "STEAMHTMLSURFACE_INTERFACE_VERSION_002";

		[Token(Token = "0x4000E5D")]
		public const string STEAMHTTP_INTERFACE_VERSION = "STEAMHTTP_INTERFACE_VERSION002";

		[Token(Token = "0x4000E5E")]
		public const string STEAMMATCHMAKING_INTERFACE_VERSION = "SteamMatchMaking009";

		[Token(Token = "0x4000E5F")]
		public const string STEAMMATCHMAKINGSERVERS_INTERFACE_VERSION = "SteamMatchMakingServers002";

		[Token(Token = "0x4000E60")]
		public const string STEAMMUSIC_INTERFACE_VERSION = "STEAMMUSIC_INTERFACE_VERSION001";

		[Token(Token = "0x4000E61")]
		public const string STEAMMUSICREMOTE_INTERFACE_VERSION = "STEAMMUSICREMOTE_INTERFACE_VERSION001";

		[Token(Token = "0x4000E62")]
		public const string STEAMNETWORKING_INTERFACE_VERSION = "SteamNetworking005";

		[Token(Token = "0x4000E63")]
		public const string STEAMREMOTESTORAGE_INTERFACE_VERSION = "STEAMREMOTESTORAGE_INTERFACE_VERSION012";

		[Token(Token = "0x4000E64")]
		public const string STEAMSCREENSHOTS_INTERFACE_VERSION = "STEAMSCREENSHOTS_INTERFACE_VERSION002";

		[Token(Token = "0x4000E65")]
		public const string STEAMUGC_INTERFACE_VERSION = "STEAMUGC_INTERFACE_VERSION003";

		[Token(Token = "0x4000E66")]
		public const string STEAMUNIFIEDMESSAGES_INTERFACE_VERSION = "STEAMUNIFIEDMESSAGES_INTERFACE_VERSION001";

		[Token(Token = "0x4000E67")]
		public const string STEAMUSER_INTERFACE_VERSION = "SteamUser017";

		[Token(Token = "0x4000E68")]
		public const string STEAMUSERSTATS_INTERFACE_VERSION = "STEAMUSERSTATS_INTERFACE_VERSION011";

		[Token(Token = "0x4000E69")]
		public const string STEAMUTILS_INTERFACE_VERSION = "SteamUtils007";

		[Token(Token = "0x4000E6A")]
		public const int k_cubAppProofOfPurchaseKeyMax = 64;

		[Token(Token = "0x4000E6B")]
		public const int k_iSteamUserCallbacks = 100;

		[Token(Token = "0x4000E6C")]
		public const int k_iSteamGameServerCallbacks = 200;

		[Token(Token = "0x4000E6D")]
		public const int k_iSteamFriendsCallbacks = 300;

		[Token(Token = "0x4000E6E")]
		public const int k_iSteamBillingCallbacks = 400;

		[Token(Token = "0x4000E6F")]
		public const int k_iSteamMatchmakingCallbacks = 500;

		[Token(Token = "0x4000E70")]
		public const int k_iSteamContentServerCallbacks = 600;

		[Token(Token = "0x4000E71")]
		public const int k_iSteamUtilsCallbacks = 700;

		[Token(Token = "0x4000E72")]
		public const int k_iClientFriendsCallbacks = 800;

		[Token(Token = "0x4000E73")]
		public const int k_iClientUserCallbacks = 900;

		[Token(Token = "0x4000E74")]
		public const int k_iSteamAppsCallbacks = 1000;

		[Token(Token = "0x4000E75")]
		public const int k_iSteamUserStatsCallbacks = 1100;

		[Token(Token = "0x4000E76")]
		public const int k_iSteamNetworkingCallbacks = 1200;

		[Token(Token = "0x4000E77")]
		public const int k_iClientRemoteStorageCallbacks = 1300;

		[Token(Token = "0x4000E78")]
		public const int k_iClientDepotBuilderCallbacks = 1400;

		[Token(Token = "0x4000E79")]
		public const int k_iSteamGameServerItemsCallbacks = 1500;

		[Token(Token = "0x4000E7A")]
		public const int k_iClientUtilsCallbacks = 1600;

		[Token(Token = "0x4000E7B")]
		public const int k_iSteamGameCoordinatorCallbacks = 1700;

		[Token(Token = "0x4000E7C")]
		public const int k_iSteamGameServerStatsCallbacks = 1800;

		[Token(Token = "0x4000E7D")]
		public const int k_iSteam2AsyncCallbacks = 1900;

		[Token(Token = "0x4000E7E")]
		public const int k_iSteamGameStatsCallbacks = 2000;

		[Token(Token = "0x4000E7F")]
		public const int k_iClientHTTPCallbacks = 2100;

		[Token(Token = "0x4000E80")]
		public const int k_iClientScreenshotsCallbacks = 2200;

		[Token(Token = "0x4000E81")]
		public const int k_iSteamScreenshotsCallbacks = 2300;

		[Token(Token = "0x4000E82")]
		public const int k_iClientAudioCallbacks = 2400;

		[Token(Token = "0x4000E83")]
		public const int k_iClientUnifiedMessagesCallbacks = 2500;

		[Token(Token = "0x4000E84")]
		public const int k_iSteamStreamLauncherCallbacks = 2600;

		[Token(Token = "0x4000E85")]
		public const int k_iClientControllerCallbacks = 2700;

		[Token(Token = "0x4000E86")]
		public const int k_iSteamControllerCallbacks = 2800;

		[Token(Token = "0x4000E87")]
		public const int k_iClientParentalSettingsCallbacks = 2900;

		[Token(Token = "0x4000E88")]
		public const int k_iClientDeviceAuthCallbacks = 3000;

		[Token(Token = "0x4000E89")]
		public const int k_iClientNetworkDeviceManagerCallbacks = 3100;

		[Token(Token = "0x4000E8A")]
		public const int k_iClientMusicCallbacks = 3200;

		[Token(Token = "0x4000E8B")]
		public const int k_iClientRemoteClientManagerCallbacks = 3300;

		[Token(Token = "0x4000E8C")]
		public const int k_iClientUGCCallbacks = 3400;

		[Token(Token = "0x4000E8D")]
		public const int k_iSteamStreamClientCallbacks = 3500;

		[Token(Token = "0x4000E8E")]
		public const int k_IClientProductBuilderCallbacks = 3600;

		[Token(Token = "0x4000E8F")]
		public const int k_iClientShortcutsCallbacks = 3700;

		[Token(Token = "0x4000E90")]
		public const int k_iClientRemoteControlManagerCallbacks = 3800;

		[Token(Token = "0x4000E91")]
		public const int k_iSteamAppListCallbacks = 3900;

		[Token(Token = "0x4000E92")]
		public const int k_iSteamMusicCallbacks = 4000;

		[Token(Token = "0x4000E93")]
		public const int k_iSteamMusicRemoteCallbacks = 4100;

		[Token(Token = "0x4000E94")]
		public const int k_iClientVRCallbacks = 4200;

		[Token(Token = "0x4000E95")]
		public const int k_iClientReservedCallbacks = 4300;

		[Token(Token = "0x4000E96")]
		public const int k_iSteamReservedCallbacks = 4400;

		[Token(Token = "0x4000E97")]
		public const int k_iSteamHTMLSurfaceCallbacks = 4500;

		[Token(Token = "0x4000E98")]
		public const int k_iClientVideoCallbacks = 4600;

		[Token(Token = "0x4000E99")]
		public const int k_cchMaxFriendsGroupName = 64;

		[Token(Token = "0x4000E9A")]
		public const int k_cFriendsGroupLimit = 100;

		[Token(Token = "0x4000E9B")]
		public const int k_cEnumerateFollowersMax = 50;

		[Token(Token = "0x4000E9C")]
		public const int k_cchPersonaNameMax = 128;

		[Token(Token = "0x4000E9D")]
		public const int k_cwchPersonaNameMax = 32;

		[Token(Token = "0x4000E9E")]
		public const int k_cubChatMetadataMax = 8192;

		[Token(Token = "0x4000E9F")]
		public const int k_cchMaxRichPresenceKeys = 20;

		[Token(Token = "0x4000EA0")]
		public const int k_cchMaxRichPresenceKeyLength = 64;

		[Token(Token = "0x4000EA1")]
		public const int k_cchMaxRichPresenceValueLength = 256;

		[Token(Token = "0x4000EA2")]
		public const int k_unServerFlagNone = 0;

		[Token(Token = "0x4000EA3")]
		public const int k_unServerFlagActive = 1;

		[Token(Token = "0x4000EA4")]
		public const int k_unServerFlagSecure = 2;

		[Token(Token = "0x4000EA5")]
		public const int k_unServerFlagDedicated = 4;

		[Token(Token = "0x4000EA6")]
		public const int k_unServerFlagLinux = 8;

		[Token(Token = "0x4000EA7")]
		public const int k_unServerFlagPassworded = 16;

		[Token(Token = "0x4000EA8")]
		public const int k_unServerFlagPrivate = 32;

		[Token(Token = "0x4000EA9")]
		public const int k_unFavoriteFlagNone = 0;

		[Token(Token = "0x4000EAA")]
		public const int k_unFavoriteFlagFavorite = 1;

		[Token(Token = "0x4000EAB")]
		public const int k_unFavoriteFlagHistory = 2;

		[Token(Token = "0x4000EAC")]
		public const int k_unMaxCloudFileChunkSize = 104857600;

		[Token(Token = "0x4000EAD")]
		public const int k_cchPublishedDocumentTitleMax = 129;

		[Token(Token = "0x4000EAE")]
		public const int k_cchPublishedDocumentDescriptionMax = 8000;

		[Token(Token = "0x4000EAF")]
		public const int k_cchPublishedDocumentChangeDescriptionMax = 8000;

		[Token(Token = "0x4000EB0")]
		public const int k_unEnumeratePublishedFilesMaxResults = 50;

		[Token(Token = "0x4000EB1")]
		public const int k_cchTagListMax = 1025;

		[Token(Token = "0x4000EB2")]
		public const int k_cchFilenameMax = 260;

		[Token(Token = "0x4000EB3")]
		public const int k_cchPublishedFileURLMax = 256;

		[Token(Token = "0x4000EB4")]
		public const int k_nScreenshotMaxTaggedUsers = 32;

		[Token(Token = "0x4000EB5")]
		public const int k_nScreenshotMaxTaggedPublishedFiles = 32;

		[Token(Token = "0x4000EB6")]
		public const int k_cubUFSTagTypeMax = 255;

		[Token(Token = "0x4000EB7")]
		public const int k_cubUFSTagValueMax = 255;

		[Token(Token = "0x4000EB8")]
		public const int k_ScreenshotThumbWidth = 200;

		[Token(Token = "0x4000EB9")]
		public const int kNumUGCResultsPerPage = 50;

		[Token(Token = "0x4000EBA")]
		public const int k_cchStatNameMax = 128;

		[Token(Token = "0x4000EBB")]
		public const int k_cchLeaderboardNameMax = 128;

		[Token(Token = "0x4000EBC")]
		public const int k_cLeaderboardDetailsMax = 64;

		[Token(Token = "0x4000EBD")]
		public const int k_cbMaxGameServerGameDir = 32;

		[Token(Token = "0x4000EBE")]
		public const int k_cbMaxGameServerMapName = 32;

		[Token(Token = "0x4000EBF")]
		public const int k_cbMaxGameServerGameDescription = 64;

		[Token(Token = "0x4000EC0")]
		public const int k_cbMaxGameServerName = 64;

		[Token(Token = "0x4000EC1")]
		public const int k_cbMaxGameServerTags = 128;

		[Token(Token = "0x4000EC2")]
		public const int k_cbMaxGameServerGameData = 2048;

		[Token(Token = "0x4000EC3")]
		public const int k_unSteamAccountIDMask = -1;

		[Token(Token = "0x4000EC4")]
		public const int k_unSteamAccountInstanceMask = 1048575;

		[Token(Token = "0x4000EC5")]
		public const int k_unSteamUserDesktopInstance = 1;

		[Token(Token = "0x4000EC6")]
		public const int k_unSteamUserConsoleInstance = 2;

		[Token(Token = "0x4000EC7")]
		public const int k_unSteamUserWebInstance = 4;

		[Token(Token = "0x4000EC8")]
		public const int k_cchGameExtraInfoMax = 64;

		[Token(Token = "0x4000EC9")]
		public const int k_nSteamEncryptedAppTicketSymmetricKeyLen = 32;

		[Token(Token = "0x4000ECA")]
		public const int k_cubSaltSize = 8;

		[Token(Token = "0x4000ECB")]
		public const ulong k_GIDNil = ulong.MaxValue;

		[Token(Token = "0x4000ECC")]
		public const ulong k_TxnIDNil = ulong.MaxValue;

		[Token(Token = "0x4000ECD")]
		public const ulong k_TxnIDUnknown = 0uL;

		[Token(Token = "0x4000ECE")]
		public const uint k_uPackageIdFreeSub = 0u;

		[Token(Token = "0x4000ECF")]
		public const uint k_uPackageIdInvalid = uint.MaxValue;

		[Token(Token = "0x4000ED0")]
		public const ulong k_ulAssetClassIdInvalid = 0uL;

		[Token(Token = "0x4000ED1")]
		public const uint k_uPhysicalItemIdInvalid = 0u;

		[Token(Token = "0x4000ED2")]
		public const uint k_uCellIDInvalid = uint.MaxValue;

		[Token(Token = "0x4000ED3")]
		public const uint k_uPartnerIdInvalid = 0u;

		[Token(Token = "0x4000ED4")]
		public const short MASTERSERVERUPDATERPORT_USEGAMESOCKETSHARE = -1;

		[Token(Token = "0x4000ED5")]
		public const byte INVALID_HTTPREQUEST_HANDLE = 0;

		[Token(Token = "0x4000ED6")]
		public const byte k_nMaxLobbyKeyLength = byte.MaxValue;

		[Token(Token = "0x4000ED7")]
		public const int k_SteamMusicNameMaxLength = 255;

		[Token(Token = "0x4000ED8")]
		public const int k_SteamMusicPNGMaxLength = 65535;

		[Token(Token = "0x4000ED9")]
		public const int QUERY_PORT_NOT_INITIALIZED = 65535;

		[Token(Token = "0x4000EDA")]
		public const int QUERY_PORT_ERROR = 65534;

		[Token(Token = "0x4000EDB")]
		public const ulong STEAM_RIGHT_TRIGGER_MASK = 1uL;

		[Token(Token = "0x4000EDC")]
		public const ulong STEAM_LEFT_TRIGGER_MASK = 2uL;

		[Token(Token = "0x4000EDD")]
		public const ulong STEAM_RIGHT_BUMPER_MASK = 4uL;

		[Token(Token = "0x4000EDE")]
		public const ulong STEAM_LEFT_BUMPER_MASK = 8uL;

		[Token(Token = "0x4000EDF")]
		public const ulong STEAM_BUTTON_0_MASK = 16uL;

		[Token(Token = "0x4000EE0")]
		public const ulong STEAM_BUTTON_1_MASK = 32uL;

		[Token(Token = "0x4000EE1")]
		public const ulong STEAM_BUTTON_2_MASK = 64uL;

		[Token(Token = "0x4000EE2")]
		public const ulong STEAM_BUTTON_3_MASK = 128uL;

		[Token(Token = "0x4000EE3")]
		public const ulong STEAM_TOUCH_0_MASK = 256uL;

		[Token(Token = "0x4000EE4")]
		public const ulong STEAM_TOUCH_1_MASK = 512uL;

		[Token(Token = "0x4000EE5")]
		public const ulong STEAM_TOUCH_2_MASK = 1024uL;

		[Token(Token = "0x4000EE6")]
		public const ulong STEAM_TOUCH_3_MASK = 2048uL;

		[Token(Token = "0x4000EE7")]
		public const ulong STEAM_BUTTON_MENU_MASK = 4096uL;

		[Token(Token = "0x4000EE8")]
		public const ulong STEAM_BUTTON_STEAM_MASK = 8192uL;

		[Token(Token = "0x4000EE9")]
		public const ulong STEAM_BUTTON_ESCAPE_MASK = 16384uL;

		[Token(Token = "0x4000EEA")]
		public const ulong STEAM_BUTTON_BACK_LEFT_MASK = 32768uL;

		[Token(Token = "0x4000EEB")]
		public const ulong STEAM_BUTTON_BACK_RIGHT_MASK = 65536uL;

		[Token(Token = "0x4000EEC")]
		public const ulong STEAM_BUTTON_LEFTPAD_CLICKED_MASK = 131072uL;

		[Token(Token = "0x4000EED")]
		public const ulong STEAM_BUTTON_RIGHTPAD_CLICKED_MASK = 262144uL;

		[Token(Token = "0x4000EEE")]
		public const ulong STEAM_LEFTPAD_FINGERDOWN_MASK = 524288uL;

		[Token(Token = "0x4000EEF")]
		public const ulong STEAM_RIGHTPAD_FINGERDOWN_MASK = 1048576uL;

		[Token(Token = "0x4000EF0")]
		public const byte MAX_STEAM_CONTROLLERS = 8;
	}
	[Token(Token = "0x20002ED")]
	public enum ERegisterActivationCodeResult
	{
		[Token(Token = "0x4000EF2")]
		k_ERegisterActivationCodeResultOK,
		[Token(Token = "0x4000EF3")]
		k_ERegisterActivationCodeResultFail,
		[Token(Token = "0x4000EF4")]
		k_ERegisterActivationCodeResultAlreadyRegistered,
		[Token(Token = "0x4000EF5")]
		k_ERegisterActivationCodeResultTimeout,
		[Token(Token = "0x4000EF6")]
		k_ERegisterActivationCodeAlreadyOwned
	}
	[Token(Token = "0x20002EE")]
	public enum ESteamControllerPad
	{
		[Token(Token = "0x4000EF8")]
		k_ESteamControllerPad_Left,
		[Token(Token = "0x4000EF9")]
		k_ESteamControllerPad_Right
	}
	[Token(Token = "0x20002EF")]
	public enum EFriendRelationship
	{
		[Token(Token = "0x4000EFB")]
		k_EFriendRelationshipNone,
		[Token(Token = "0x4000EFC")]
		k_EFriendRelationshipBlocked,
		[Token(Token = "0x4000EFD")]
		k_EFriendRelationshipRequestRecipient,
		[Token(Token = "0x4000EFE")]
		k_EFriendRelationshipFriend,
		[Token(Token = "0x4000EFF")]
		k_EFriendRelationshipRequestInitiator,
		[Token(Token = "0x4000F00")]
		k_EFriendRelationshipIgnored,
		[Token(Token = "0x4000F01")]
		k_EFriendRelationshipIgnoredFriend,
		[Token(Token = "0x4000F02")]
		k_EFriendRelationshipSuggested,
		[Token(Token = "0x4000F03")]
		k_EFriendRelationshipMax
	}
	[Token(Token = "0x20002F0")]
	public enum EPersonaState
	{
		[Token(Token = "0x4000F05")]
		k_EPersonaStateOffline,
		[Token(Token = "0x4000F06")]
		k_EPersonaStateOnline,
		[Token(Token = "0x4000F07")]
		k_EPersonaStateBusy,
		[Token(Token = "0x4000F08")]
		k_EPersonaStateAway,
		[Token(Token = "0x4000F09")]
		k_EPersonaStateSnooze,
		[Token(Token = "0x4000F0A")]
		k_EPersonaStateLookingToTrade,
		[Token(Token = "0x4000F0B")]
		k_EPersonaStateLookingToPlay,
		[Token(Token = "0x4000F0C")]
		k_EPersonaStateMax
	}
	[Token(Token = "0x20002F1")]
	[Flags]
	public enum EFriendFlags
	{
		[Token(Token = "0x4000F0E")]
		k_EFriendFlagNone = 0,
		[Token(Token = "0x4000F0F")]
		k_EFriendFlagBlocked = 1,
		[Token(Token = "0x4000F10")]
		k_EFriendFlagFriendshipRequested = 2,
		[Token(Token = "0x4000F11")]
		k_EFriendFlagImmediate = 4,
		[Token(Token = "0x4000F12")]
		k_EFriendFlagClanMember = 8,
		[Token(Token = "0x4000F13")]
		k_EFriendFlagOnGameServer = 0x10,
		[Token(Token = "0x4000F14")]
		k_EFriendFlagRequestingFriendship = 0x80,
		[Token(Token = "0x4000F15")]
		k_EFriendFlagRequestingInfo = 0x100,
		[Token(Token = "0x4000F16")]
		k_EFriendFlagIgnored = 0x200,
		[Token(Token = "0x4000F17")]
		k_EFriendFlagIgnoredFriend = 0x400,
		[Token(Token = "0x4000F18")]
		k_EFriendFlagSuggested = 0x800,
		[Token(Token = "0x4000F19")]
		k_EFriendFlagAll = 0xFFFF
	}
	[Token(Token = "0x20002F2")]
	public enum EUserRestriction
	{
		[Token(Token = "0x4000F1B")]
		k_nUserRestrictionNone = 0,
		[Token(Token = "0x4000F1C")]
		k_nUserRestrictionUnknown = 1,
		[Token(Token = "0x4000F1D")]
		k_nUserRestrictionAnyChat = 2,
		[Token(Token = "0x4000F1E")]
		k_nUserRestrictionVoiceChat = 4,
		[Token(Token = "0x4000F1F")]
		k_nUserRestrictionGroupChat = 8,
		[Token(Token = "0x4000F20")]
		k_nUserRestrictionRating = 0x10,
		[Token(Token = "0x4000F21")]
		k_nUserRestrictionGameInvites = 0x20,
		[Token(Token = "0x4000F22")]
		k_nUserRestrictionTrading = 0x40
	}
	[Token(Token = "0x20002F3")]
	public enum EOverlayToStoreFlag
	{
		[Token(Token = "0x4000F24")]
		k_EOverlayToStoreFlag_None,
		[Token(Token = "0x4000F25")]
		k_EOverlayToStoreFlag_AddToCart,
		[Token(Token = "0x4000F26")]
		k_EOverlayToStoreFlag_AddToCartAndShow
	}
	[Token(Token = "0x20002F4")]
	[Flags]
	public enum EPersonaChange
	{
		[Token(Token = "0x4000F28")]
		k_EPersonaChangeName = 1,
		[Token(Token = "0x4000F29")]
		k_EPersonaChangeStatus = 2,
		[Token(Token = "0x4000F2A")]
		k_EPersonaChangeComeOnline = 4,
		[Token(Token = "0x4000F2B")]
		k_EPersonaChangeGoneOffline = 8,
		[Token(Token = "0x4000F2C")]
		k_EPersonaChangeGamePlayed = 0x10,
		[Token(Token = "0x4000F2D")]
		k_EPersonaChangeGameServer = 0x20,
		[Token(Token = "0x4000F2E")]
		k_EPersonaChangeAvatar = 0x40,
		[Token(Token = "0x4000F2F")]
		k_EPersonaChangeJoinedSource = 0x80,
		[Token(Token = "0x4000F30")]
		k_EPersonaChangeLeftSource = 0x100,
		[Token(Token = "0x4000F31")]
		k_EPersonaChangeRelationshipChanged = 0x200,
		[Token(Token = "0x4000F32")]
		k_EPersonaChangeNameFirstSet = 0x400,
		[Token(Token = "0x4000F33")]
		k_EPersonaChangeFacebookInfo = 0x800,
		[Token(Token = "0x4000F34")]
		k_EPersonaChangeNickname = 0x1000,
		[Token(Token = "0x4000F35")]
		k_EPersonaChangeSteamLevel = 0x2000
	}
	[Token(Token = "0x20002F5")]
	public enum EGCResults
	{
		[Token(Token = "0x4000F37")]
		k_EGCResultOK,
		[Token(Token = "0x4000F38")]
		k_EGCResultNoMessage,
		[Token(Token = "0x4000F39")]
		k_EGCResultBufferTooSmall,
		[Token(Token = "0x4000F3A")]
		k_EGCResultNotLoggedOn,
		[Token(Token = "0x4000F3B")]
		k_EGCResultInvalidMessage
	}
	[Token(Token = "0x20002F6")]
	public enum EHTMLMouseButton
	{
		[Token(Token = "0x4000F3D")]
		eHTMLMouseButton_Left,
		[Token(Token = "0x4000F3E")]
		eHTMLMouseButton_Right,
		[Token(Token = "0x4000F3F")]
		eHTMLMouseButton_Middle
	}
	[Token(Token = "0x20002F7")]
	public enum EMouseCursor
	{
		[Token(Token = "0x4000F41")]
		dc_user,
		[Token(Token = "0x4000F42")]
		dc_none,
		[Token(Token = "0x4000F43")]
		dc_arrow,
		[Token(Token = "0x4000F44")]
		dc_ibeam,
		[Token(Token = "0x4000F45")]
		dc_hourglass,
		[Token(Token = "0x4000F46")]
		dc_waitarrow,
		[Token(Token = "0x4000F47")]
		dc_crosshair,
		[Token(Token = "0x4000F48")]
		dc_up,
		[Token(Token = "0x4000F49")]
		dc_sizenw,
		[Token(Token = "0x4000F4A")]
		dc_sizese,
		[Token(Token = "0x4000F4B")]
		dc_sizene,
		[Token(Token = "0x4000F4C")]
		dc_sizesw,
		[Token(Token = "0x4000F4D")]
		dc_sizew,
		[Token(Token = "0x4000F4E")]
		dc_sizee,
		[Token(Token = "0x4000F4F")]
		dc_sizen,
		[Token(Token = "0x4000F50")]
		dc_sizes,
		[Token(Token = "0x4000F51")]
		dc_sizewe,
		[Token(Token = "0x4000F52")]
		dc_sizens,
		[Token(Token = "0x4000F53")]
		dc_sizeall,
		[Token(Token = "0x4000F54")]
		dc_no,
		[Token(Token = "0x4000F55")]
		dc_hand,
		[Token(Token = "0x4000F56")]
		dc_blank,
		[Token(Token = "0x4000F57")]
		dc_middle_pan,
		[Token(Token = "0x4000F58")]
		dc_north_pan,
		[Token(Token = "0x4000F59")]
		dc_north_east_pan,
		[Token(Token = "0x4000F5A")]
		dc_east_pan,
		[Token(Token = "0x4000F5B")]
		dc_south_east_pan,
		[Token(Token = "0x4000F5C")]
		dc_south_pan,
		[Token(Token = "0x4000F5D")]
		dc_south_west_pan,
		[Token(Token = "0x4000F5E")]
		dc_west_pan,
		[Token(Token = "0x4000F5F")]
		dc_north_west_pan,
		[Token(Token = "0x4000F60")]
		dc_alias,
		[Token(Token = "0x4000F61")]
		dc_cell,
		[Token(Token = "0x4000F62")]
		dc_colresize,
		[Token(Token = "0x4000F63")]
		dc_copycur,
		[Token(Token = "0x4000F64")]
		dc_verticaltext,
		[Token(Token = "0x4000F65")]
		dc_rowresize,
		[Token(Token = "0x4000F66")]
		dc_zoomin,
		[Token(Token = "0x4000F67")]
		dc_zoomout,
		[Token(Token = "0x4000F68")]
		dc_help,
		[Token(Token = "0x4000F69")]
		dc_custom,
		[Token(Token = "0x4000F6A")]
		dc_last
	}
	[Token(Token = "0x20002F8")]
	public enum EHTMLKeyModifiers
	{
		[Token(Token = "0x4000F6C")]
		eHTMLKeyModifier_None = 0,
		[Token(Token = "0x4000F6D")]
		eHTMLKeyModifier_AltDown = 1,
		[Token(Token = "0x4000F6E")]
		eHTMLKeyModifier_CrtlDown = 2,
		[Token(Token = "0x4000F6F")]
		eHTMLKeyModifier_ShiftDown = 4
	}
	[Token(Token = "0x20002F9")]
	public enum ELobbyType
	{
		[Token(Token = "0x4000F71")]
		k_ELobbyTypePrivate,
		[Token(Token = "0x4000F72")]
		k_ELobbyTypeFriendsOnly,
		[Token(Token = "0x4000F73")]
		k_ELobbyTypePublic,
		[Token(Token = "0x4000F74")]
		k_ELobbyTypeInvisible
	}
	[Token(Token = "0x20002FA")]
	public enum ELobbyComparison
	{
		[Token(Token = "0x4000F76")]
		k_ELobbyComparisonEqualToOrLessThan = -2,
		[Token(Token = "0x4000F77")]
		k_ELobbyComparisonLessThan,
		[Token(Token = "0x4000F78")]
		k_ELobbyComparisonEqual,
		[Token(Token = "0x4000F79")]
		k_ELobbyComparisonGreaterThan,
		[Token(Token = "0x4000F7A")]
		k_ELobbyComparisonEqualToOrGreaterThan,
		[Token(Token = "0x4000F7B")]
		k_ELobbyComparisonNotEqual
	}
	[Token(Token = "0x20002FB")]
	public enum ELobbyDistanceFilter
	{
		[Token(Token = "0x4000F7D")]
		k_ELobbyDistanceFilterClose,
		[Token(Token = "0x4000F7E")]
		k_ELobbyDistanceFilterDefault,
		[Token(Token = "0x4000F7F")]
		k_ELobbyDistanceFilterFar,
		[Token(Token = "0x4000F80")]
		k_ELobbyDistanceFilterWorldwide
	}
	[Token(Token = "0x20002FC")]
	[Flags]
	public enum EChatMemberStateChange
	{
		[Token(Token = "0x4000F82")]
		k_EChatMemberStateChangeEntered = 1,
		[Token(Token = "0x4000F83")]
		k_EChatMemberStateChangeLeft = 2,
		[Token(Token = "0x4000F84")]
		k_EChatMemberStateChangeDisconnected = 4,
		[Token(Token = "0x4000F85")]
		k_EChatMemberStateChangeKicked = 8,
		[Token(Token = "0x4000F86")]
		k_EChatMemberStateChangeBanned = 0x10
	}
	[Token(Token = "0x20002FD")]
	public enum AudioPlayback_Status
	{
		[Token(Token = "0x4000F88")]
		AudioPlayback_Undefined,
		[Token(Token = "0x4000F89")]
		AudioPlayback_Playing,
		[Token(Token = "0x4000F8A")]
		AudioPlayback_Paused,
		[Token(Token = "0x4000F8B")]
		AudioPlayback_Idle
	}
	[Token(Token = "0x20002FE")]
	public enum EP2PSessionError
	{
		[Token(Token = "0x4000F8D")]
		k_EP2PSessionErrorNone,
		[Token(Token = "0x4000F8E")]
		k_EP2PSessionErrorNotRunningApp,
		[Token(Token = "0x4000F8F")]
		k_EP2PSessionErrorNoRightsToApp,
		[Token(Token = "0x4000F90")]
		k_EP2PSessionErrorDestinationNotLoggedIn,
		[Token(Token = "0x4000F91")]
		k_EP2PSessionErrorTimeout,
		[Token(Token = "0x4000F92")]
		k_EP2PSessionErrorMax
	}
	[Token(Token = "0x20002FF")]
	public enum EP2PSend
	{
		[Token(Token = "0x4000F94")]
		k_EP2PSendUnreliable,
		[Token(Token = "0x4000F95")]
		k_EP2PSendUnreliableNoDelay,
		[Token(Token = "0x4000F96")]
		k_EP2PSendReliable,
		[Token(Token = "0x4000F97")]
		k_EP2PSendReliableWithBuffering
	}
	[Token(Token = "0x2000300")]
	public enum ESNetSocketState
	{
		[Token(Token = "0x4000F99")]
		k_ESNetSocketStateInvalid = 0,
		[Token(Token = "0x4000F9A")]
		k_ESNetSocketStateConnected = 1,
		[Token(Token = "0x4000F9B")]
		k_ESNetSocketStateInitiated = 10,
		[Token(Token = "0x4000F9C")]
		k_ESNetSocketStateLocalCandidatesFound = 11,
		[Token(Token = "0x4000F9D")]
		k_ESNetSocketStateReceivedRemoteCandidates = 12,
		[Token(Token = "0x4000F9E")]
		k_ESNetSocketStateChallengeHandshake = 15,
		[Token(Token = "0x4000F9F")]
		k_ESNetSocketStateDisconnecting = 21,
		[Token(Token = "0x4000FA0")]
		k_ESNetSocketStateLocalDisconnect = 22,
		[Token(Token = "0x4000FA1")]
		k_ESNetSocketStateTimeoutDuringConnect = 23,
		[Token(Token = "0x4000FA2")]
		k_ESNetSocketStateRemoteEndDisconnected = 24,
		[Token(Token = "0x4000FA3")]
		k_ESNetSocketStateConnectionBroken = 25
	}
	[Token(Token = "0x2000301")]
	public enum ESNetSocketConnectionType
	{
		[Token(Token = "0x4000FA5")]
		k_ESNetSocketConnectionTypeNotConnected,
		[Token(Token = "0x4000FA6")]
		k_ESNetSocketConnectionTypeUDP,
		[Token(Token = "0x4000FA7")]
		k_ESNetSocketConnectionTypeUDPRelay
	}
	[Token(Token = "0x2000302")]
	public enum EResolveConflict
	{
		[Token(Token = "0x4000FA9")]
		k_EResolveConflictKeepClient = 1,
		[Token(Token = "0x4000FAA")]
		k_EResolveConflictKeepServer
	}
	[Token(Token = "0x2000303")]
	[Flags]
	public enum ERemoteStoragePlatform
	{
		[Token(Token = "0x4000FAC")]
		k_ERemoteStoragePlatformNone = 0,
		[Token(Token = "0x4000FAD")]
		k_ERemoteStoragePlatformWindows = 1,
		[Token(Token = "0x4000FAE")]
		k_ERemoteStoragePlatformOSX = 2,
		[Token(Token = "0x4000FAF")]
		k_ERemoteStoragePlatformPS3 = 4,
		[Token(Token = "0x4000FB0")]
		k_ERemoteStoragePlatformLinux = 8,
		[Token(Token = "0x4000FB1")]
		k_ERemoteStoragePlatformReserved2 = 0x10,
		[Token(Token = "0x4000FB2")]
		k_ERemoteStoragePlatformAll = -1
	}
	[Token(Token = "0x2000304")]
	public enum ERemoteStoragePublishedFileVisibility
	{
		[Token(Token = "0x4000FB4")]
		k_ERemoteStoragePublishedFileVisibilityPublic,
		[Token(Token = "0x4000FB5")]
		k_ERemoteStoragePublishedFileVisibilityFriendsOnly,
		[Token(Token = "0x4000FB6")]
		k_ERemoteStoragePublishedFileVisibilityPrivate
	}
	[Token(Token = "0x2000305")]
	public enum EWorkshopFileType
	{
		[Token(Token = "0x4000FB8")]
		k_EWorkshopFileTypeFirst = 0,
		[Token(Token = "0x4000FB9")]
		k_EWorkshopFileTypeCommunity = 0,
		[Token(Token = "0x4000FBA")]
		k_EWorkshopFileTypeMicrotransaction = 1,
		[Token(Token = "0x4000FBB")]
		k_EWorkshopFileTypeCollection = 2,
		[Token(Token = "0x4000FBC")]
		k_EWorkshopFileTypeArt = 3,
		[Token(Token = "0x4000FBD")]
		k_EWorkshopFileTypeVideo = 4,
		[Token(Token = "0x4000FBE")]
		k_EWorkshopFileTypeScreenshot = 5,
		[Token(Token = "0x4000FBF")]
		k_EWorkshopFileTypeGame = 6,
		[Token(Token = "0x4000FC0")]
		k_EWorkshopFileTypeSoftware = 7,
		[Token(Token = "0x4000FC1")]
		k_EWorkshopFileTypeConcept = 8,
		[Token(Token = "0x4000FC2")]
		k_EWorkshopFileTypeWebGuide = 9,
		[Token(Token = "0x4000FC3")]
		k_EWorkshopFileTypeIntegratedGuide = 10,
		[Token(Token = "0x4000FC4")]
		k_EWorkshopFileTypeMerch = 11,
		[Token(Token = "0x4000FC5")]
		k_EWorkshopFileTypeControllerBinding = 12,
		[Token(Token = "0x4000FC6")]
		k_EWorkshopFileTypeSteamworksAccessInvite = 13,
		[Token(Token = "0x4000FC7")]
		k_EWorkshopFileTypeSteamVideo = 14,
		[Token(Token = "0x4000FC8")]
		k_EWorkshopFileTypeMax = 15
	}
	[Token(Token = "0x2000306")]
	public enum EWorkshopVote
	{
		[Token(Token = "0x4000FCA")]
		k_EWorkshopVoteUnvoted,
		[Token(Token = "0x4000FCB")]
		k_EWorkshopVoteFor,
		[Token(Token = "0x4000FCC")]
		k_EWorkshopVoteAgainst
	}
	[Token(Token = "0x2000307")]
	public enum EWorkshopFileAction
	{
		[Token(Token = "0x4000FCE")]
		k_EWorkshopFileActionPlayed,
		[Token(Token = "0x4000FCF")]
		k_EWorkshopFileActionCompleted
	}
	[Token(Token = "0x2000308")]
	public enum EWorkshopEnumerationType
	{
		[Token(Token = "0x4000FD1")]
		k_EWorkshopEnumerationTypeRankedByVote,
		[Token(Token = "0x4000FD2")]
		k_EWorkshopEnumerationTypeRecent,
		[Token(Token = "0x4000FD3")]
		k_EWorkshopEnumerationTypeTrending,
		[Token(Token = "0x4000FD4")]
		k_EWorkshopEnumerationTypeFavoritesOfFriends,
		[Token(Token = "0x4000FD5")]
		k_EWorkshopEnumerationTypeVotedByFriends,
		[Token(Token = "0x4000FD6")]
		k_EWorkshopEnumerationTypeContentByFriends,
		[Token(Token = "0x4000FD7")]
		k_EWorkshopEnumerationTypeRecentFromFollowedUsers
	}
	[Token(Token = "0x2000309")]
	public enum EWorkshopVideoProvider
	{
		[Token(Token = "0x4000FD9")]
		k_EWorkshopVideoProviderNone,
		[Token(Token = "0x4000FDA")]
		k_EWorkshopVideoProviderYoutube
	}
	[Token(Token = "0x200030A")]
	public enum EUGCReadAction
	{
		[Token(Token = "0x4000FDC")]
		k_EUGCRead_ContinueReadingUntilFinished,
		[Token(Token = "0x4000FDD")]
		k_EUGCRead_ContinueReading,
		[Token(Token = "0x4000FDE")]
		k_EUGCRead_Close
	}
	[Token(Token = "0x200030B")]
	public enum EUGCMatchingUGCType
	{
		[Token(Token = "0x4000FE0")]
		k_EUGCMatchingUGCType_Items,
		[Token(Token = "0x4000FE1")]
		k_EUGCMatchingUGCType_Items_Mtx,
		[Token(Token = "0x4000FE2")]
		k_EUGCMatchingUGCType_Items_ReadyToUse,
		[Token(Token = "0x4000FE3")]
		k_EUGCMatchingUGCType_Collections,
		[Token(Token = "0x4000FE4")]
		k_EUGCMatchingUGCType_Artwork,
		[Token(Token = "0x4000FE5")]
		k_EUGCMatchingUGCType_Videos,
		[Token(Token = "0x4000FE6")]
		k_EUGCMatchingUGCType_Screenshots,
		[Token(Token = "0x4000FE7")]
		k_EUGCMatchingUGCType_AllGuides,
		[Token(Token = "0x4000FE8")]
		k_EUGCMatchingUGCType_WebGuides,
		[Token(Token = "0x4000FE9")]
		k_EUGCMatchingUGCType_IntegratedGuides,
		[Token(Token = "0x4000FEA")]
		k_EUGCMatchingUGCType_UsableInGame,
		[Token(Token = "0x4000FEB")]
		k_EUGCMatchingUGCType_ControllerBindings
	}
	[Token(Token = "0x200030C")]
	public enum EUserUGCList
	{
		[Token(Token = "0x4000FED")]
		k_EUserUGCList_Published,
		[Token(Token = "0x4000FEE")]
		k_EUserUGCList_VotedOn,
		[Token(Token = "0x4000FEF")]
		k_EUserUGCList_VotedUp,
		[Token(Token = "0x4000FF0")]
		k_EUserUGCList_VotedDown,
		[Token(Token = "0x4000FF1")]
		k_EUserUGCList_WillVoteLater,
		[Token(Token = "0x4000FF2")]
		k_EUserUGCList_Favorited,
		[Token(Token = "0x4000FF3")]
		k_EUserUGCList_Subscribed,
		[Token(Token = "0x4000FF4")]
		k_EUserUGCList_UsedOrPlayed,
		[Token(Token = "0x4000FF5")]
		k_EUserUGCList_Followed
	}
	[Token(Token = "0x200030D")]
	public enum EUserUGCListSortOrder
	{
		[Token(Token = "0x4000FF7")]
		k_EUserUGCListSortOrder_CreationOrderDesc,
		[Token(Token = "0x4000FF8")]
		k_EUserUGCListSortOrder_CreationOrderAsc,
		[Token(Token = "0x4000FF9")]
		k_EUserUGCListSortOrder_TitleAsc,
		[Token(Token = "0x4000FFA")]
		k_EUserUGCListSortOrder_LastUpdatedDesc,
		[Token(Token = "0x4000FFB")]
		k_EUserUGCListSortOrder_SubscriptionDateDesc,
		[Token(Token = "0x4000FFC")]
		k_EUserUGCListSortOrder_VoteScoreDesc,
		[Token(Token = "0x4000FFD")]
		k_EUserUGCListSortOrder_ForModeration
	}
	[Token(Token = "0x200030E")]
	public enum EUGCQuery
	{
		[Token(Token = "0x4000FFF")]
		k_EUGCQuery_RankedByVote,
		[Token(Token = "0x4001000")]
		k_EUGCQuery_RankedByPublicationDate,
		[Token(Token = "0x4001001")]
		k_EUGCQuery_AcceptedForGameRankedByAcceptanceDate,
		[Token(Token = "0x4001002")]
		k_EUGCQuery_RankedByTrend,
		[Token(Token = "0x4001003")]
		k_EUGCQuery_FavoritedByFriendsRankedByPublicationDate,
		[Token(Token = "0x4001004")]
		k_EUGCQuery_CreatedByFriendsRankedByPublicationDate,
		[Token(Token = "0x4001005")]
		k_EUGCQuery_RankedByNumTimesReported,
		[Token(Token = "0x4001006")]
		k_EUGCQuery_CreatedByFollowedUsersRankedByPublicationDate,
		[Token(Token = "0x4001007")]
		k_EUGCQuery_NotYetRated,
		[Token(Token = "0x4001008")]
		k_EUGCQuery_RankedByTotalVotesAsc,
		[Token(Token = "0x4001009")]
		k_EUGCQuery_RankedByVotesUp,
		[Token(Token = "0x400100A")]
		k_EUGCQuery_RankedByTextSearch
	}
	[Token(Token = "0x200030F")]
	public enum EItemUpdateStatus
	{
		[Token(Token = "0x400100C")]
		k_EItemUpdateStatusInvalid,
		[Token(Token = "0x400100D")]
		k_EItemUpdateStatusPreparingConfig,
		[Token(Token = "0x400100E")]
		k_EItemUpdateStatusPreparingContent,
		[Token(Token = "0x400100F")]
		k_EItemUpdateStatusUploadingContent,
		[Token(Token = "0x4001010")]
		k_EItemUpdateStatusUploadingPreviewFile,
		[Token(Token = "0x4001011")]
		k_EItemUpdateStatusCommittingChanges
	}
	[Token(Token = "0x2000310")]
	public enum ELeaderboardDataRequest
	{
		[Token(Token = "0x4001013")]
		k_ELeaderboardDataRequestGlobal,
		[Token(Token = "0x4001014")]
		k_ELeaderboardDataRequestGlobalAroundUser,
		[Token(Token = "0x4001015")]
		k_ELeaderboardDataRequestFriends,
		[Token(Token = "0x4001016")]
		k_ELeaderboardDataRequestUsers
	}
	[Token(Token = "0x2000311")]
	public enum ELeaderboardSortMethod
	{
		[Token(Token = "0x4001018")]
		k_ELeaderboardSortMethodNone,
		[Token(Token = "0x4001019")]
		k_ELeaderboardSortMethodAscending,
		[Token(Token = "0x400101A")]
		k_ELeaderboardSortMethodDescending
	}
	[Token(Token = "0x2000312")]
	public enum ELeaderboardDisplayType
	{
		[Token(Token = "0x400101C")]
		k_ELeaderboardDisplayTypeNone,
		[Token(Token = "0x400101D")]
		k_ELeaderboardDisplayTypeNumeric,
		[Token(Token = "0x400101E")]
		k_ELeaderboardDisplayTypeTimeSeconds,
		[Token(Token = "0x400101F")]
		k_ELeaderboardDisplayTypeTimeMilliSeconds
	}
	[Token(Token = "0x2000313")]
	public enum ELeaderboardUploadScoreMethod
	{
		[Token(Token = "0x4001021")]
		k_ELeaderboardUploadScoreMethodNone,
		[Token(Token = "0x4001022")]
		k_ELeaderboardUploadScoreMethodKeepBest,
		[Token(Token = "0x4001023")]
		k_ELeaderboardUploadScoreMethodForceUpdate
	}
	[Token(Token = "0x2000314")]
	public enum ESteamAPICallFailure
	{
		[Token(Token = "0x4001025")]
		k_ESteamAPICallFailureNone = -1,
		[Token(Token = "0x4001026")]
		k_ESteamAPICallFailureSteamGone,
		[Token(Token = "0x4001027")]
		k_ESteamAPICallFailureNetworkFailure,
		[Token(Token = "0x4001028")]
		k_ESteamAPICallFailureInvalidHandle,
		[Token(Token = "0x4001029")]
		k_ESteamAPICallFailureMismatchedCallback
	}
	[Token(Token = "0x2000315")]
	public enum EGamepadTextInputMode
	{
		[Token(Token = "0x400102B")]
		k_EGamepadTextInputModeNormal,
		[Token(Token = "0x400102C")]
		k_EGamepadTextInputModePassword
	}
	[Token(Token = "0x2000316")]
	public enum EGamepadTextInputLineMode
	{
		[Token(Token = "0x400102E")]
		k_EGamepadTextInputLineModeSingleLine,
		[Token(Token = "0x400102F")]
		k_EGamepadTextInputLineModeMultipleLines
	}
	[Token(Token = "0x2000317")]
	public enum ECheckFileSignature
	{
		[Token(Token = "0x4001031")]
		k_ECheckFileSignatureInvalidSignature,
		[Token(Token = "0x4001032")]
		k_ECheckFileSignatureValidSignature,
		[Token(Token = "0x4001033")]
		k_ECheckFileSignatureFileNotFound,
		[Token(Token = "0x4001034")]
		k_ECheckFileSignatureNoSignaturesFoundForThisApp,
		[Token(Token = "0x4001035")]
		k_ECheckFileSignatureNoSignaturesFoundForThisFile
	}
	[Token(Token = "0x2000318")]
	public enum EMatchMakingServerResponse
	{
		[Token(Token = "0x4001037")]
		eServerResponded,
		[Token(Token = "0x4001038")]
		eServerFailedToRespond,
		[Token(Token = "0x4001039")]
		eNoServersListedOnMasterServer
	}
	[Token(Token = "0x2000319")]
	public enum EResult
	{
		[Token(Token = "0x400103B")]
		k_EResultOK = 1,
		[Token(Token = "0x400103C")]
		k_EResultFail = 2,
		[Token(Token = "0x400103D")]
		k_EResultNoConnection = 3,
		[Token(Token = "0x400103E")]
		k_EResultInvalidPassword = 5,
		[Token(Token = "0x400103F")]
		k_EResultLoggedInElsewhere = 6,
		[Token(Token = "0x4001040")]
		k_EResultInvalidProtocolVer = 7,
		[Token(Token = "0x4001041")]
		k_EResultInvalidParam = 8,
		[Token(Token = "0x4001042")]
		k_EResultFileNotFound = 9,
		[Token(Token = "0x4001043")]
		k_EResultBusy = 10,
		[Token(Token = "0x4001044")]
		k_EResultInvalidState = 11,
		[Token(Token = "0x4001045")]
		k_EResultInvalidName = 12,
		[Token(Token = "0x4001046")]
		k_EResultInvalidEmail = 13,
		[Token(Token = "0x4001047")]
		k_EResultDuplicateName = 14,
		[Token(Token = "0x4001048")]
		k_EResultAccessDenied = 15,
		[Token(Token = "0x4001049")]
		k_EResultTimeout = 16,
		[Token(Token = "0x400104A")]
		k_EResultBanned = 17,
		[Token(Token = "0x400104B")]
		k_EResultAccountNotFound = 18,
		[Token(Token = "0x400104C")]
		k_EResultInvalidSteamID = 19,
		[Token(Token = "0x400104D")]
		k_EResultServiceUnavailable = 20,
		[Token(Token = "0x400104E")]
		k_EResultNotLoggedOn = 21,
		[Token(Token = "0x400104F")]
		k_EResultPending = 22,
		[Token(Token = "0x4001050")]
		k_EResultEncryptionFailure = 23,
		[Token(Token = "0x4001051")]
		k_EResultInsufficientPrivilege = 24,
		[Token(Token = "0x4001052")]
		k_EResultLimitExceeded = 25,
		[Token(Token = "0x4001053")]
		k_EResultRevoked = 26,
		[Token(Token = "0x4001054")]
		k_EResultExpired = 27,
		[Token(Token = "0x4001055")]
		k_EResultAlreadyRedeemed = 28,
		[Token(Token = "0x4001056")]
		k_EResultDuplicateRequest = 29,
		[Token(Token = "0x4001057")]
		k_EResultAlreadyOwned = 30,
		[Token(Token = "0x4001058")]
		k_EResultIPNotFound = 31,
		[Token(Token = "0x4001059")]
		k_EResultPersistFailed = 32,
		[Token(Token = "0x400105A")]
		k_EResultLockingFailed = 33,
		[Token(Token = "0x400105B")]
		k_EResultLogonSessionReplaced = 34,
		[Token(Token = "0x400105C")]
		k_EResultConnectFailed = 35,
		[Token(Token = "0x400105D")]
		k_EResultHandshakeFailed = 36,
		[Token(Token = "0x400105E")]
		k_EResultIOFailure = 37,
		[Token(Token = "0x400105F")]
		k_EResultRemoteDisconnect = 38,
		[Token(Token = "0x4001060")]
		k_EResultShoppingCartNotFound = 39,
		[Token(Token = "0x4001061")]
		k_EResultBlocked = 40,
		[Token(Token = "0x4001062")]
		k_EResultIgnored = 41,
		[Token(Token = "0x4001063")]
		k_EResultNoMatch = 42,
		[Token(Token = "0x4001064")]
		k_EResultAccountDisabled = 43,
		[Token(Token = "0x4001065")]
		k_EResultServiceReadOnly = 44,
		[Token(Token = "0x4001066")]
		k_EResultAccountNotFeatured = 45,
		[Token(Token = "0x4001067")]
		k_EResultAdministratorOK = 46,
		[Token(Token = "0x4001068")]
		k_EResultContentVersion = 47,
		[Token(Token = "0x4001069")]
		k_EResultTryAnotherCM = 48,
		[Token(Token = "0x400106A")]
		k_EResultPasswordRequiredToKickSession = 49,
		[Token(Token = "0x400106B")]
		k_EResultAlreadyLoggedInElsewhere = 50,
		[Token(Token = "0x400106C")]
		k_EResultSuspended = 51,
		[Token(Token = "0x400106D")]
		k_EResultCancelled = 52,
		[Token(Token = "0x400106E")]
		k_EResultDataCorruption = 53,
		[Token(Token = "0x400106F")]
		k_EResultDiskFull = 54,
		[Token(Token = "0x4001070")]
		k_EResultRemoteCallFailed = 55,
		[Token(Token = "0x4001071")]
		k_EResultPasswordUnset = 56,
		[Token(Token = "0x4001072")]
		k_EResultExternalAccountUnlinked = 57,
		[Token(Token = "0x4001073")]
		k_EResultPSNTicketInvalid = 58,
		[Token(Token = "0x4001074")]
		k_EResultExternalAccountAlreadyLinked = 59,
		[Token(Token = "0x4001075")]
		k_EResultRemoteFileConflict = 60,
		[Token(Token = "0x4001076")]
		k_EResultIllegalPassword = 61,
		[Token(Token = "0x4001077")]
		k_EResultSameAsPreviousValue = 62,
		[Token(Token = "0x4001078")]
		k_EResultAccountLogonDenied = 63,
		[Token(Token = "0x4001079")]
		k_EResultCannotUseOldPassword = 64,
		[Token(Token = "0x400107A")]
		k_EResultInvalidLoginAuthCode = 65,
		[Token(Token = "0x400107B")]
		k_EResultAccountLogonDeniedNoMail = 66,
		[Token(Token = "0x400107C")]
		k_EResultHardwareNotCapableOfIPT = 67,
		[Token(Token = "0x400107D")]
		k_EResultIPTInitError = 68,
		[Token(Token = "0x400107E")]
		k_EResultParentalControlRestricted = 69,
		[Token(Token = "0x400107F")]
		k_EResultFacebookQueryError = 70,
		[Token(Token = "0x4001080")]
		k_EResultExpiredLoginAuthCode = 71,
		[Token(Token = "0x4001081")]
		k_EResultIPLoginRestrictionFailed = 72,
		[Token(Token = "0x4001082")]
		k_EResultAccountLockedDown = 73,
		[Token(Token = "0x4001083")]
		k_EResultAccountLogonDeniedVerifiedEmailRequired = 74,
		[Token(Token = "0x4001084")]
		k_EResultNoMatchingURL = 75,
		[Token(Token = "0x4001085")]
		k_EResultBadResponse = 76,
		[Token(Token = "0x4001086")]
		k_EResultRequirePasswordReEntry = 77,
		[Token(Token = "0x4001087")]
		k_EResultValueOutOfRange = 78,
		[Token(Token = "0x4001088")]
		k_EResultUnexpectedError = 79,
		[Token(Token = "0x4001089")]
		k_EResultDisabled = 80,
		[Token(Token = "0x400108A")]
		k_EResultInvalidCEGSubmission = 81,
		[Token(Token = "0x400108B")]
		k_EResultRestrictedDevice = 82,
		[Token(Token = "0x400108C")]
		k_EResultRegionLocked = 83,
		[Token(Token = "0x400108D")]
		k_EResultRateLimitExceeded = 84,
		[Token(Token = "0x400108E")]
		k_EResultAccountLoginDeniedNeedTwoFactor = 85,
		[Token(Token = "0x400108F")]
		k_EResultItemDeleted = 86,
		[Token(Token = "0x4001090")]
		k_EResultAccountLoginDeniedThrottle = 87,
		[Token(Token = "0x4001091")]
		k_EResultTwoFactorCodeMismatch = 88,
		[Token(Token = "0x4001092")]
		k_EResultTwoFactorActivationCodeMismatch = 89
	}
	[Token(Token = "0x200031A")]
	public enum EVoiceResult
	{
		[Token(Token = "0x4001094")]
		k_EVoiceResultOK,
		[Token(Token = "0x4001095")]
		k_EVoiceResultNotInitialized,
		[Token(Token = "0x4001096")]
		k_EVoiceResultNotRecording,
		[Token(Token = "0x4001097")]
		k_EVoiceResultNoData,
		[Token(Token = "0x4001098")]
		k_EVoiceResultBufferTooSmall,
		[Token(Token = "0x4001099")]
		k_EVoiceResultDataCorrupted,
		[Token(Token = "0x400109A")]
		k_EVoiceResultRestricted,
		[Token(Token = "0x400109B")]
		k_EVoiceResultUnsupportedCodec
	}
	[Token(Token = "0x200031B")]
	public enum EDenyReason
	{
		[Token(Token = "0x400109D")]
		k_EDenyInvalid,
		[Token(Token = "0x400109E")]
		k_EDenyInvalidVersion,
		[Token(Token = "0x400109F")]
		k_EDenyGeneric,
		[Token(Token = "0x40010A0")]
		k_EDenyNotLoggedOn,
		[Token(Token = "0x40010A1")]
		k_EDenyNoLicense,
		[Token(Token = "0x40010A2")]
		k_EDenyCheater,
		[Token(Token = "0x40010A3")]
		k_EDenyLoggedInElseWhere,
		[Token(Token = "0x40010A4")]
		k_EDenyUnknownText,
		[Token(Token = "0x40010A5")]
		k_EDenyIncompatibleAnticheat,
		[Token(Token = "0x40010A6")]
		k_EDenyMemoryCorruption,
		[Token(Token = "0x40010A7")]
		k_EDenyIncompatibleSoftware,
		[Token(Token = "0x40010A8")]
		k_EDenySteamConnectionLost,
		[Token(Token = "0x40010A9")]
		k_EDenySteamConnectionError,
		[Token(Token = "0x40010AA")]
		k_EDenySteamResponseTimedOut,
		[Token(Token = "0x40010AB")]
		k_EDenySteamValidationStalled,
		[Token(Token = "0x40010AC")]
		k_EDenySteamOwnerLeftGuestUser
	}
	[Token(Token = "0x200031C")]
	public enum EBeginAuthSessionResult
	{
		[Token(Token = "0x40010AE")]
		k_EBeginAuthSessionResultOK,
		[Token(Token = "0x40010AF")]
		k_EBeginAuthSessionResultInvalidTicket,
		[Token(Token = "0x40010B0")]
		k_EBeginAuthSessionResultDuplicateRequest,
		[Token(Token = "0x40010B1")]
		k_EBeginAuthSessionResultInvalidVersion,
		[Token(Token = "0x40010B2")]
		k_EBeginAuthSessionResultGameMismatch,
		[Token(Token = "0x40010B3")]
		k_EBeginAuthSessionResultExpiredTicket
	}
	[Token(Token = "0x200031D")]
	public enum EAuthSessionResponse
	{
		[Token(Token = "0x40010B5")]
		k_EAuthSessionResponseOK,
		[Token(Token = "0x40010B6")]
		k_EAuthSessionResponseUserNotConnectedToSteam,
		[Token(Token = "0x40010B7")]
		k_EAuthSessionResponseNoLicenseOrExpired,
		[Token(Token = "0x40010B8")]
		k_EAuthSessionResponseVACBanned,
		[Token(Token = "0x40010B9")]
		k_EAuthSessionResponseLoggedInElseWhere,
		[Token(Token = "0x40010BA")]
		k_EAuthSessionResponseVACCheckTimedOut,
		[Token(Token = "0x40010BB")]
		k_EAuthSessionResponseAuthTicketCanceled,
		[Token(Token = "0x40010BC")]
		k_EAuthSessionResponseAuthTicketInvalidAlreadyUsed,
		[Token(Token = "0x40010BD")]
		k_EAuthSessionResponseAuthTicketInvalid,
		[Token(Token = "0x40010BE")]
		k_EAuthSessionResponsePublisherIssuedBan
	}
	[Token(Token = "0x200031E")]
	public enum EUserHasLicenseForAppResult
	{
		[Token(Token = "0x40010C0")]
		k_EUserHasLicenseResultHasLicense,
		[Token(Token = "0x40010C1")]
		k_EUserHasLicenseResultDoesNotHaveLicense,
		[Token(Token = "0x40010C2")]
		k_EUserHasLicenseResultNoAuth
	}
	[Token(Token = "0x200031F")]
	public enum EAccountType
	{
		[Token(Token = "0x40010C4")]
		k_EAccountTypeInvalid,
		[Token(Token = "0x40010C5")]
		k_EAccountTypeIndividual,
		[Token(Token = "0x40010C6")]
		k_EAccountTypeMultiseat,
		[Token(Token = "0x40010C7")]
		k_EAccountTypeGameServer,
		[Token(Token = "0x40010C8")]
		k_EAccountTypeAnonGameServer,
		[Token(Token = "0x40010C9")]
		k_EAccountTypePending,
		[Token(Token = "0x40010CA")]
		k_EAccountTypeContentServer,
		[Token(Token = "0x40010CB")]
		k_EAccountTypeClan,
		[Token(Token = "0x40010CC")]
		k_EAccountTypeChat,
		[Token(Token = "0x40010CD")]
		k_EAccountTypeConsoleUser,
		[Token(Token = "0x40010CE")]
		k_EAccountTypeAnonUser,
		[Token(Token = "0x40010CF")]
		k_EAccountTypeMax
	}
	[Token(Token = "0x2000320")]
	public enum EAppReleaseState
	{
		[Token(Token = "0x40010D1")]
		k_EAppReleaseState_Unknown,
		[Token(Token = "0x40010D2")]
		k_EAppReleaseState_Unavailable,
		[Token(Token = "0x40010D3")]
		k_EAppReleaseState_Prerelease,
		[Token(Token = "0x40010D4")]
		k_EAppReleaseState_PreloadOnly,
		[Token(Token = "0x40010D5")]
		k_EAppReleaseState_Released
	}
	[Token(Token = "0x2000321")]
	[Flags]
	public enum EAppOwnershipFlags
	{
		[Token(Token = "0x40010D7")]
		k_EAppOwnershipFlags_None = 0,
		[Token(Token = "0x40010D8")]
		k_EAppOwnershipFlags_OwnsLicense = 1,
		[Token(Token = "0x40010D9")]
		k_EAppOwnershipFlags_FreeLicense = 2,
		[Token(Token = "0x40010DA")]
		k_EAppOwnershipFlags_RegionRestricted = 4,
		[Token(Token = "0x40010DB")]
		k_EAppOwnershipFlags_LowViolence = 8,
		[Token(Token = "0x40010DC")]
		k_EAppOwnershipFlags_InvalidPlatform = 0x10,
		[Token(Token = "0x40010DD")]
		k_EAppOwnershipFlags_SharedLicense = 0x20,
		[Token(Token = "0x40010DE")]
		k_EAppOwnershipFlags_FreeWeekend = 0x40,
		[Token(Token = "0x40010DF")]
		k_EAppOwnershipFlags_RetailLicense = 0x80,
		[Token(Token = "0x40010E0")]
		k_EAppOwnershipFlags_LicenseLocked = 0x100,
		[Token(Token = "0x40010E1")]
		k_EAppOwnershipFlags_LicensePending = 0x200,
		[Token(Token = "0x40010E2")]
		k_EAppOwnershipFlags_LicenseExpired = 0x400,
		[Token(Token = "0x40010E3")]
		k_EAppOwnershipFlags_LicensePermanent = 0x800,
		[Token(Token = "0x40010E4")]
		k_EAppOwnershipFlags_LicenseRecurring = 0x1000,
		[Token(Token = "0x40010E5")]
		k_EAppOwnershipFlags_LicenseCanceled = 0x2000
	}
	[Token(Token = "0x2000322")]
	[Flags]
	public enum EAppType
	{
		[Token(Token = "0x40010E7")]
		k_EAppType_Invalid = 0,
		[Token(Token = "0x40010E8")]
		k_EAppType_Game = 1,
		[Token(Token = "0x40010E9")]
		k_EAppType_Application = 2,
		[Token(Token = "0x40010EA")]
		k_EAppType_Tool = 4,
		[Token(Token = "0x40010EB")]
		k_EAppType_Demo = 8,
		[Token(Token = "0x40010EC")]
		k_EAppType_Media_DEPRECATED = 0x10,
		[Token(Token = "0x40010ED")]
		k_EAppType_DLC = 0x20,
		[Token(Token = "0x40010EE")]
		k_EAppType_Guide = 0x40,
		[Token(Token = "0x40010EF")]
		k_EAppType_Driver = 0x80,
		[Token(Token = "0x40010F0")]
		k_EAppType_Config = 0x100,
		[Token(Token = "0x40010F1")]
		k_EAppType_Film = 0x200,
		[Token(Token = "0x40010F2")]
		k_EAppType_TVSeries = 0x400,
		[Token(Token = "0x40010F3")]
		k_EAppType_Video = 0x800,
		[Token(Token = "0x40010F4")]
		k_EAppType_Plugin = 0x1000,
		[Token(Token = "0x40010F5")]
		k_EAppType_Music = 0x2000,
		[Token(Token = "0x40010F6")]
		k_EAppType_Shortcut = 0x40000000,
		[Token(Token = "0x40010F7")]
		k_EAppType_DepotOnly = -2147483647
	}
	[Token(Token = "0x2000323")]
	public enum ESteamUserStatType
	{
		[Token(Token = "0x40010F9")]
		k_ESteamUserStatTypeINVALID,
		[Token(Token = "0x40010FA")]
		k_ESteamUserStatTypeINT,
		[Token(Token = "0x40010FB")]
		k_ESteamUserStatTypeFLOAT,
		[Token(Token = "0x40010FC")]
		k_ESteamUserStatTypeAVGRATE,
		[Token(Token = "0x40010FD")]
		k_ESteamUserStatTypeACHIEVEMENTS,
		[Token(Token = "0x40010FE")]
		k_ESteamUserStatTypeGROUPACHIEVEMENTS,
		[Token(Token = "0x40010FF")]
		k_ESteamUserStatTypeMAX
	}
	[Token(Token = "0x2000324")]
	public enum EChatEntryType
	{
		[Token(Token = "0x4001101")]
		k_EChatEntryTypeInvalid = 0,
		[Token(Token = "0x4001102")]
		k_EChatEntryTypeChatMsg = 1,
		[Token(Token = "0x4001103")]
		k_EChatEntryTypeTyping = 2,
		[Token(Token = "0x4001104")]
		k_EChatEntryTypeInviteGame = 3,
		[Token(Token = "0x4001105")]
		k_EChatEntryTypeEmote = 4,
		[Token(Token = "0x4001106")]
		k_EChatEntryTypeLeftConversation = 6,
		[Token(Token = "0x4001107")]
		k_EChatEntryTypeEntered = 7,
		[Token(Token = "0x4001108")]
		k_EChatEntryTypeWasKicked = 8,
		[Token(Token = "0x4001109")]
		k_EChatEntryTypeWasBanned = 9,
		[Token(Token = "0x400110A")]
		k_EChatEntryTypeDisconnected = 10,
		[Token(Token = "0x400110B")]
		k_EChatEntryTypeHistoricalChat = 11,
		[Token(Token = "0x400110C")]
		k_EChatEntryTypeReserved1 = 12,
		[Token(Token = "0x400110D")]
		k_EChatEntryTypeReserved2 = 13
	}
	[Token(Token = "0x2000325")]
	public enum EChatRoomEnterResponse
	{
		[Token(Token = "0x400110F")]
		k_EChatRoomEnterResponseSuccess = 1,
		[Token(Token = "0x4001110")]
		k_EChatRoomEnterResponseDoesntExist,
		[Token(Token = "0x4001111")]
		k_EChatRoomEnterResponseNotAllowed,
		[Token(Token = "0x4001112")]
		k_EChatRoomEnterResponseFull,
		[Token(Token = "0x4001113")]
		k_EChatRoomEnterResponseError,
		[Token(Token = "0x4001114")]
		k_EChatRoomEnterResponseBanned,
		[Token(Token = "0x4001115")]
		k_EChatRoomEnterResponseLimited,
		[Token(Token = "0x4001116")]
		k_EChatRoomEnterResponseClanDisabled,
		[Token(Token = "0x4001117")]
		k_EChatRoomEnterResponseCommunityBan,
		[Token(Token = "0x4001118")]
		k_EChatRoomEnterResponseMemberBlockedYou,
		[Token(Token = "0x4001119")]
		k_EChatRoomEnterResponseYouBlockedMember
	}
	[Token(Token = "0x2000326")]
	[Flags]
	public enum EChatSteamIDInstanceFlags
	{
		[Token(Token = "0x400111B")]
		k_EChatAccountInstanceMask = 0xFFF,
		[Token(Token = "0x400111C")]
		k_EChatInstanceFlagClan = 0x80000,
		[Token(Token = "0x400111D")]
		k_EChatInstanceFlagLobby = 0x40000,
		[Token(Token = "0x400111E")]
		k_EChatInstanceFlagMMSLobby = 0x20000
	}
	[Token(Token = "0x2000327")]
	[Flags]
	public enum EMarketingMessageFlags
	{
		[Token(Token = "0x4001120")]
		k_EMarketingMessageFlagsNone = 0,
		[Token(Token = "0x4001121")]
		k_EMarketingMessageFlagsHighPriority = 1,
		[Token(Token = "0x4001122")]
		k_EMarketingMessageFlagsPlatformWindows = 2,
		[Token(Token = "0x4001123")]
		k_EMarketingMessageFlagsPlatformMac = 4,
		[Token(Token = "0x4001124")]
		k_EMarketingMessageFlagsPlatformLinux = 8,
		[Token(Token = "0x4001125")]
		k_EMarketingMessageFlagsPlatformRestrictions = 0xE
	}
	[Token(Token = "0x2000328")]
	public enum ENotificationPosition
	{
		[Token(Token = "0x4001127")]
		k_EPositionTopLeft,
		[Token(Token = "0x4001128")]
		k_EPositionTopRight,
		[Token(Token = "0x4001129")]
		k_EPositionBottomLeft,
		[Token(Token = "0x400112A")]
		k_EPositionBottomRight
	}
	[Token(Token = "0x2000329")]
	public enum EHTTPMethod
	{
		[Token(Token = "0x400112C")]
		k_EHTTPMethodInvalid,
		[Token(Token = "0x400112D")]
		k_EHTTPMethodGET,
		[Token(Token = "0x400112E")]
		k_EHTTPMethodHEAD,
		[Token(Token = "0x400112F")]
		k_EHTTPMethodPOST,
		[Token(Token = "0x4001130")]
		k_EHTTPMethodPUT,
		[Token(Token = "0x4001131")]
		k_EHTTPMethodDELETE,
		[Token(Token = "0x4001132")]
		k_EHTTPMethodOPTIONS
	}
	[Token(Token = "0x200032A")]
	public enum EHTTPStatusCode
	{
		[Token(Token = "0x4001134")]
		k_EHTTPStatusCodeInvalid = 0,
		[Token(Token = "0x4001135")]
		k_EHTTPStatusCode100Continue = 100,
		[Token(Token = "0x4001136")]
		k_EHTTPStatusCode101SwitchingProtocols = 101,
		[Token(Token = "0x4001137")]
		k_EHTTPStatusCode200OK = 200,
		[Token(Token = "0x4001138")]
		k_EHTTPStatusCode201Created = 201,
		[Token(Token = "0x4001139")]
		k_EHTTPStatusCode202Accepted = 202,
		[Token(Token = "0x400113A")]
		k_EHTTPStatusCode203NonAuthoritative = 203,
		[Token(Token = "0x400113B")]
		k_EHTTPStatusCode204NoContent = 204,
		[Token(Token = "0x400113C")]
		k_EHTTPStatusCode205ResetContent = 205,
		[Token(Token = "0x400113D")]
		k_EHTTPStatusCode206PartialContent = 206,
		[Token(Token = "0x400113E")]
		k_EHTTPStatusCode300MultipleChoices = 300,
		[Token(Token = "0x400113F")]
		k_EHTTPStatusCode301MovedPermanently = 301,
		[Token(Token = "0x4001140")]
		k_EHTTPStatusCode302Found = 302,
		[Token(Token = "0x4001141")]
		k_EHTTPStatusCode303SeeOther = 303,
		[Token(Token = "0x4001142")]
		k_EHTTPStatusCode304NotModified = 304,
		[Token(Token = "0x4001143")]
		k_EHTTPStatusCode305UseProxy = 305,
		[Token(Token = "0x4001144")]
		k_EHTTPStatusCode307TemporaryRedirect = 307,
		[Token(Token = "0x4001145")]
		k_EHTTPStatusCode400BadRequest = 400,
		[Token(Token = "0x4001146")]
		k_EHTTPStatusCode401Unauthorized = 401,
		[Token(Token = "0x4001147")]
		k_EHTTPStatusCode402PaymentRequired = 402,
		[Token(Token = "0x4001148")]
		k_EHTTPStatusCode403Forbidden = 403,
		[Token(Token = "0x4001149")]
		k_EHTTPStatusCode404NotFound = 404,
		[Token(Token = "0x400114A")]
		k_EHTTPStatusCode405MethodNotAllowed = 405,
		[Token(Token = "0x400114B")]
		k_EHTTPStatusCode406NotAcceptable = 406,
		[Token(Token = "0x400114C")]
		k_EHTTPStatusCode407ProxyAuthRequired = 407,
		[Token(Token = "0x400114D")]
		k_EHTTPStatusCode408RequestTimeout = 408,
		[Token(Token = "0x400114E")]
		k_EHTTPStatusCode409Conflict = 409,
		[Token(Token = "0x400114F")]
		k_EHTTPStatusCode410Gone = 410,
		[Token(Token = "0x4001150")]
		k_EHTTPStatusCode411LengthRequired = 411,
		[Token(Token = "0x4001151")]
		k_EHTTPStatusCode412PreconditionFailed = 412,
		[Token(Token = "0x4001152")]
		k_EHTTPStatusCode413RequestEntityTooLarge = 413,
		[Token(Token = "0x4001153")]
		k_EHTTPStatusCode414RequestURITooLong = 414,
		[Token(Token = "0x4001154")]
		k_EHTTPStatusCode415UnsupportedMediaType = 415,
		[Token(Token = "0x4001155")]
		k_EHTTPStatusCode416RequestedRangeNotSatisfiable = 416,
		[Token(Token = "0x4001156")]
		k_EHTTPStatusCode417ExpectationFailed = 417,
		[Token(Token = "0x4001157")]
		k_EHTTPStatusCode429TooManyRequests = 429,
		[Token(Token = "0x4001158")]
		k_EHTTPStatusCode500InternalServerError = 500,
		[Token(Token = "0x4001159")]
		k_EHTTPStatusCode501NotImplemented = 501,
		[Token(Token = "0x400115A")]
		k_EHTTPStatusCode502BadGateway = 502,
		[Token(Token = "0x400115B")]
		k_EHTTPStatusCode503ServiceUnavailable = 503,
		[Token(Token = "0x400115C")]
		k_EHTTPStatusCode504GatewayTimeout = 504,
		[Token(Token = "0x400115D")]
		k_EHTTPStatusCode505HTTPVersionNotSupported = 505
	}
	[Token(Token = "0x200032B")]
	public enum EUniverse
	{
		[Token(Token = "0x400115F")]
		k_EUniverseInvalid,
		[Token(Token = "0x4001160")]
		k_EUniversePublic,
		[Token(Token = "0x4001161")]
		k_EUniverseBeta,
		[Token(Token = "0x4001162")]
		k_EUniverseInternal,
		[Token(Token = "0x4001163")]
		k_EUniverseDev,
		[Token(Token = "0x4001164")]
		k_EUniverseMax
	}
	[Token(Token = "0x200032C")]
	public enum EServerMode
	{
		[Token(Token = "0x4001166")]
		eServerModeInvalid,
		[Token(Token = "0x4001167")]
		eServerModeNoAuthentication,
		[Token(Token = "0x4001168")]
		eServerModeAuthentication,
		[Token(Token = "0x4001169")]
		eServerModeAuthenticationAndSecure
	}
	[Token(Token = "0x200032D")]
	public struct FriendGameInfo_t
	{
		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CGameID m_gameID;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_unGameIP;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort m_usGamePort;

		[Token(Token = "0x400116D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public ushort m_usQueryPort;

		[Token(Token = "0x400116E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CSteamID m_steamIDLobby;
	}
	[Token(Token = "0x200032E")]
	public struct FriendSessionStateInfo_t
	{
		[Token(Token = "0x400116F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_uiOnlineSessionInstances;

		[Token(Token = "0x4001170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public byte m_uiPublishedToFriendsSessionInstance;
	}
	[Token(Token = "0x200032F")]
	public struct P2PSessionState_t
	{
		[Token(Token = "0x4001171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bConnectionActive;

		[Token(Token = "0x4001172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte m_bConnecting;

		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte m_eP2PSessionError;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte m_bUsingRelay;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nBytesQueuedForSend;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nPacketsQueuedForSend;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nRemoteIP;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort m_nRemotePort;
	}
	[Token(Token = "0x2000330")]
	public struct SteamParamStringArray_t
	{
		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_ppStrings;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nNumStrings;
	}
	[Token(Token = "0x2000331")]
	public struct SteamUGCDetails_t
	{
		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EWorkshopFileType m_eFileType;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nCreatorAppID;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nConsumerAppID;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_rgchTitle;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public string m_rgchDescription;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ulong m_ulSteamIDOwner;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint m_rtimeCreated;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint m_rtimeUpdated;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_rtimeAddedToUserList;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public ERemoteStoragePublishedFileVisibility m_eVisibility;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool m_bBanned;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool m_bAcceptedForUse;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public bool m_bTagsTruncated;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public string m_rgchTags;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UGCHandle_t m_hPreviewFile;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string m_pchFileName;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int m_nFileSize;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int m_nPreviewFileSize;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public string m_rgchURL;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public uint m_unVotesUp;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public uint m_unVotesDown;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float m_flScore;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public uint m_unNumChildren;
	}
	[Token(Token = "0x2000332")]
	public struct CallbackMsg_t
	{
		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_hSteamUser;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_iCallback;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pubParam;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_cubParam;
	}
	[Token(Token = "0x2000333")]
	public struct LeaderboardEntry_t
	{
		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nGlobalRank;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nScore;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cDetails;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UGCHandle_t m_hUGC;
	}
	[Token(Token = "0x2000334")]
	public struct MatchMakingKeyValuePair_t
	{
		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szKey;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public string m_szValue;
	}
	[Token(Token = "0x2000335")]
	public struct SteamControllerState_t
	{
		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unPacketNum;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong ulButtons;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public short sLeftPadX;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public short sLeftPadY;

		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public short sRightPadX;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public short sRightPadY;
	}
	[Token(Token = "0x2000336")]
	public sealed class Callback<T>
	{
		[Token(Token = "0x2000337")]
		public delegate void DispatchDelegate(T param);

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBaseVTable VTable;

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBase m_CCallbackBase;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_pCCallbackBase;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_bGameServer;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int m_size;

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<Callback<T>> GCKeepAlive;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool bWarnedOnce;

		[Token(Token = "0x1400007C")]
		private event DispatchDelegate m_Func
		{
			[Token(Token = "0x6001669")]
			add
			{
			}
			[Token(Token = "0x600166A")]
			remove
			{
			}
		}

		[Token(Token = "0x6001668")]
		public Callback(DispatchDelegate func, bool bGameServer = false, bool bKeepAlive = true)
		{
		}

		[Token(Token = "0x600166B")]
		public static Callback<T> Create(DispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x600166C")]
		public static Callback<T> CreateGameServer(DispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x600166D")]
		~Callback()
		{
		}

		[Token(Token = "0x600166E")]
		public void Register(DispatchDelegate func)
		{
		}

		[Token(Token = "0x600166F")]
		public void Unregister()
		{
		}

		[Token(Token = "0x6001670")]
		public void SetGameserverFlag()
		{
		}

		[Token(Token = "0x6001671")]
		private void OnRunCallback(IntPtr thisptr, IntPtr pvParam)
		{
		}

		[Token(Token = "0x6001672")]
		private void OnRunCallResult(IntPtr thisptr, IntPtr pvParam, bool bFailed, ulong hSteamAPICall)
		{
		}

		[Token(Token = "0x6001673")]
		private int OnGetCallbackSizeBytes(IntPtr thisptr)
		{
			return default(int);
		}

		[Token(Token = "0x6001674")]
		private void BuildCCallbackBase()
		{
		}
	}
	[Token(Token = "0x2000338")]
	public sealed class CallResult<T>
	{
		[Token(Token = "0x2000339")]
		public delegate void APIDispatchDelegate(T param, bool bIOFailure);

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBaseVTable VTable;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBase m_CCallbackBase;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_pCCallbackBase;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private SteamAPICall_t m_hAPICall;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int m_size;

		[Token(Token = "0x1400007D")]
		private event APIDispatchDelegate m_Func
		{
			[Token(Token = "0x600167B")]
			add
			{
			}
			[Token(Token = "0x600167C")]
			remove
			{
			}
		}

		[Token(Token = "0x600167A")]
		public CallResult([Optional] APIDispatchDelegate func)
		{
		}

		[Token(Token = "0x600167D")]
		public static CallResult<T> Create([Optional] APIDispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x600167E")]
		~CallResult()
		{
		}

		[Token(Token = "0x600167F")]
		public void Set(SteamAPICall_t hAPICall, [Optional] APIDispatchDelegate func)
		{
		}

		[Token(Token = "0x6001680")]
		public bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6001681")]
		public void Cancel()
		{
		}

		[Token(Token = "0x6001682")]
		public void SetGameserverFlag()
		{
		}

		[Token(Token = "0x6001683")]
		private void OnRunCallback(IntPtr thisptr, IntPtr pvParam)
		{
		}

		[Token(Token = "0x6001684")]
		private void OnRunCallResult(IntPtr thisptr, IntPtr pvParam, bool bFailed, ulong hSteamAPICall)
		{
		}

		[Token(Token = "0x6001685")]
		private int OnGetCallbackSizeBytes(IntPtr thisptr)
		{
			return default(int);
		}

		[Token(Token = "0x6001686")]
		private void BuildCCallbackBase()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x200033A")]
	public class CCallbackBase
	{
		[Token(Token = "0x40011B6")]
		public const byte k_ECallbackFlagsRegistered = 1;

		[Token(Token = "0x40011B7")]
		public const byte k_ECallbackFlagsGameServer = 2;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_vfptr;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte m_nCallbackFlags;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iCallback;

		[Token(Token = "0x600168B")]
		[Address(RVA = "0x6A6A90", Offset = "0x6A6A90", VA = "0x6A6A90")]
		public CCallbackBase()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x200033B")]
	internal class CCallbackBaseVTable
	{
		[Token(Token = "0x200033C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xE9FEE4", Offset = "0xE9FEE4")]
		public delegate void RunCBDel(IntPtr thisptr, IntPtr pvParam);

		[Token(Token = "0x200033D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xE9FEF8", Offset = "0xE9FEF8")]
		public delegate void RunCRDel(IntPtr thisptr, IntPtr pvParam, bool bIOFailure, ulong hSteamAPICall);

		[Token(Token = "0x200033E")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xE9FF0C", Offset = "0xE9FF0C")]
		public delegate int GetCallbackSizeBytesDel(IntPtr thisptr);

		[NonSerialized]
		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public RunCRDel m_RunCallResult;

		[NonSerialized]
		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public RunCBDel m_RunCallback;

		[NonSerialized]
		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public GetCallbackSizeBytesDel m_GetCallbackSizeBytes;

		[Token(Token = "0x600168C")]
		[Address(RVA = "0x6A6B78", Offset = "0x6A6B78", VA = "0x6A6B78")]
		public CCallbackBaseVTable()
		{
		}
	}
	[Token(Token = "0x200033F")]
	internal class CallbackIdentities
	{
		[Token(Token = "0x6001699")]
		[Address(RVA = "0x6A6820", Offset = "0x6A6820", VA = "0x6A6820")]
		public CallbackIdentities()
		{
		}

		[Token(Token = "0x600169A")]
		[Address(RVA = "0x6A6828", Offset = "0x6A6828", VA = "0x6A6828")]
		public static int GetCallbackIdentity(Type callbackStruct)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000340")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xE9FF20", Offset = "0xE9FF20")]
	internal class CallbackIdentityAttribute : Attribute
	{
		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9FF54", Offset = "0xE9FF54")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xE9FF54", Offset = "0xE9FF54")]
		private int <Identity>k__BackingField;

		[Token(Token = "0x17000136")]
		public int Identity
		{
			[Token(Token = "0x600169C")]
			[Address(RVA = "0x6A6A24", Offset = "0x6A6A24", VA = "0x6A6A24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9FF88", Offset = "0xE9FF88")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600169D")]
			[Address(RVA = "0x6A6A4C", Offset = "0x6A6A4C", VA = "0x6A6A4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xE9FF98", Offset = "0xE9FF98")]
			set
			{
			}
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0x6A6A2C", Offset = "0x6A6A2C", VA = "0x6A6A2C")]
		public CallbackIdentityAttribute(int callbackNum)
		{
		}
	}
	[Token(Token = "0x2000341")]
	public class InteropHelp
	{
		[Token(Token = "0x2000342")]
		public class SteamParamStringArray
		{
			[Token(Token = "0x40011BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private IntPtr[] m_Strings;

			[Token(Token = "0x40011C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private IntPtr m_ptrStrings;

			[Token(Token = "0x40011C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private IntPtr m_pSteamParamStringArray;

			[Token(Token = "0x60016A3")]
			[Address(RVA = "0xCBB0C8", Offset = "0xCBB0C8", VA = "0xCBB0C8")]
			public SteamParamStringArray(IList<string> strings)
			{
			}

			[Token(Token = "0x60016A4")]
			[Address(RVA = "0xCBB7C0", Offset = "0xCBB7C0", VA = "0xCBB7C0", Slot = "1")]
			~SteamParamStringArray()
			{
			}

			[Token(Token = "0x60016A5")]
			[Address(RVA = "0xCBB998", Offset = "0xCBB998", VA = "0xCBB998")]
			public static implicit operator IntPtr(SteamParamStringArray that)
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x600169E")]
		[Address(RVA = "0xCBAAF0", Offset = "0xCBAAF0", VA = "0xCBAAF0")]
		public InteropHelp()
		{
		}

		[Token(Token = "0x600169F")]
		[Address(RVA = "0xCBAAF8", Offset = "0xCBAAF8", VA = "0xCBAAF8")]
		public static void TestIfPlatformSupported()
		{
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0xCBAB90", Offset = "0xCBAB90", VA = "0xCBAB90")]
		public static void TestIfAvailableClient()
		{
		}

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0xCBAD14", Offset = "0xCBAD14", VA = "0xCBAD14")]
		public static void TestIfAvailableGameServer()
		{
		}

		[Token(Token = "0x60016A2")]
		[Address(RVA = "0xCBAE98", Offset = "0xCBAE98", VA = "0xCBAE98")]
		public static string PtrToStringUTF8(IntPtr nativeUtf8)
		{
			return null;
		}
	}
	[Token(Token = "0x2000343")]
	public class UTF8Marshaler : ICustomMarshaler
	{
		[Token(Token = "0x40011C2")]
		public const string DoNotFree = "DoNotFree";

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static UTF8Marshaler static_instance_free;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static UTF8Marshaler static_instance;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool _freeNativeMemory;

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0x18F2068", Offset = "0x18F2068", VA = "0x18F2068")]
		private UTF8Marshaler(bool freenativememory)
		{
		}

		[Token(Token = "0x60016A7")]
		[Address(RVA = "0x18F2088", Offset = "0x18F2088", VA = "0x18F2088", Slot = "4")]
		public IntPtr MarshalManagedToNative(object managedObj)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60016A8")]
		[Address(RVA = "0x18F22B8", Offset = "0x18F22B8", VA = "0x18F22B8", Slot = "5")]
		public object MarshalNativeToManaged(IntPtr pNativeData)
		{
			return null;
		}

		[Token(Token = "0x60016A9")]
		[Address(RVA = "0x18F2490", Offset = "0x18F2490", VA = "0x18F2490", Slot = "6")]
		public void CleanUpNativeData(IntPtr pNativeData)
		{
		}

		[Token(Token = "0x60016AA")]
		[Address(RVA = "0x18F2528", Offset = "0x18F2528", VA = "0x18F2528", Slot = "7")]
		public void CleanUpManagedData(object managedObj)
		{
		}

		[Token(Token = "0x60016AB")]
		[Address(RVA = "0x18F252C", Offset = "0x18F252C", VA = "0x18F252C", Slot = "8")]
		public int GetNativeDataSize()
		{
			return default(int);
		}

		[Token(Token = "0x60016AC")]
		[Address(RVA = "0x18F2534", Offset = "0x18F2534", VA = "0x18F2534")]
		public static ICustomMarshaler GetInstance(string cookie)
		{
			return null;
		}
	}
	[Token(Token = "0x2000344")]
	public class MMKVPMarshaller
	{
		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IntPtr[] m_AllocatedMemory;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private IntPtr m_NativeArray;

		[Token(Token = "0x60016AE")]
		[Address(RVA = "0xCC177C", Offset = "0xCC177C", VA = "0xCC177C")]
		public MMKVPMarshaller(MatchMakingKeyValuePair_t[] filters)
		{
		}

		[Token(Token = "0x60016AF")]
		[Address(RVA = "0xCC1AC4", Offset = "0xCC1AC4", VA = "0xCC1AC4", Slot = "1")]
		~MMKVPMarshaller()
		{
		}

		[Token(Token = "0x60016B0")]
		[Address(RVA = "0xCC1C64", Offset = "0xCC1C64", VA = "0xCC1C64")]
		public static implicit operator IntPtr(MMKVPMarshaller that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000345")]
	public class DllCheck
	{
		[Token(Token = "0x60016B1")]
		[Address(RVA = "0x6A85E4", Offset = "0x6A85E4", VA = "0x6A85E4")]
		public DllCheck()
		{
		}

		[Token(Token = "0x60016B2")]
		[Address(RVA = "0x6A85EC", Offset = "0x6A85EC", VA = "0x6A85EC")]
		public static bool Test()
		{
			return default(bool);
		}

		[Token(Token = "0x60016B3")]
		[Address(RVA = "0x6A85F4", Offset = "0x6A85F4", VA = "0x6A85F4")]
		private static bool CheckSteamAPIDLL()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000346")]
	public class ISteamMatchmakingServerListResponse
	{
		[Token(Token = "0x2000347")]
		public delegate void ServerResponded(HServerListRequest hRequest, int iServer);

		[Token(Token = "0x2000348")]
		public delegate void ServerFailedToRespond(HServerListRequest hRequest, int iServer);

		[Token(Token = "0x2000349")]
		public delegate void RefreshComplete(HServerListRequest hRequest, EMatchMakingServerResponse response);

		[Token(Token = "0x200034A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xE9FFA8", Offset = "0xE9FFA8")]
		private delegate void InternalServerResponded(IntPtr thisptr, HServerListRequest hRequest, int iServer);

		[Token(Token = "0x200034B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xE9FFBC", Offset = "0xE9FFBC")]
		private delegate void InternalServerFailedToRespond(IntPtr thisptr, HServerListRequest hRequest, int iServer);

		[Token(Token = "0x200034C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xE9FFD0", Offset = "0xE9FFD0")]
		private delegate void InternalRefreshComplete(IntPtr thisptr, HServerListRequest hRequest, EMatchMakingServerResponse response);

		[StructLayout(0)]
		[Token(Token = "0x200034D")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x40011CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public InternalServerResponded m_VTServerResponded;

			[NonSerialized]
			[Token(Token = "0x40011CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public InternalServerFailedToRespond m_VTServerFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x40011D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalRefreshComplete m_VTRefreshComplete;

			[Token(Token = "0x60016D2")]
			[Address(RVA = "0xCBFE48", Offset = "0xCBFE48", VA = "0xCBFE48")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private VTable m_VTable;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private ServerResponded m_ServerResponded;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ServerFailedToRespond m_ServerFailedToRespond;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private RefreshComplete m_RefreshComplete;

		[Token(Token = "0x60016B4")]
		[Address(RVA = "0xCBFB8C", Offset = "0xCBFB8C", VA = "0xCBFB8C")]
		public ISteamMatchmakingServerListResponse(ServerResponded onServerResponded, ServerFailedToRespond onServerFailedToRespond, RefreshComplete onRefreshComplete)
		{
		}

		[Token(Token = "0x60016B5")]
		[Address(RVA = "0xCBFE8C", Offset = "0xCBFE8C", VA = "0xCBFE8C", Slot = "1")]
		~ISteamMatchmakingServerListResponse()
		{
		}

		[Token(Token = "0x60016B6")]
		[Address(RVA = "0xCBFFA4", Offset = "0xCBFFA4", VA = "0xCBFFA4")]
		private void InternalOnServerResponded(IntPtr thisptr, HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x60016B7")]
		[Address(RVA = "0xCC0204", Offset = "0xCC0204", VA = "0xCC0204")]
		private void InternalOnServerFailedToRespond(IntPtr thisptr, HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x60016B8")]
		[Address(RVA = "0xCC0464", Offset = "0xCC0464", VA = "0xCC0464")]
		private void InternalOnRefreshComplete(IntPtr thisptr, HServerListRequest hRequest, EMatchMakingServerResponse response)
		{
		}

		[Token(Token = "0x60016B9")]
		[Address(RVA = "0xCC06C4", Offset = "0xCC06C4", VA = "0xCC06C4")]
		public static explicit operator IntPtr(ISteamMatchmakingServerListResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x200034E")]
	public class ISteamMatchmakingPingResponse
	{
		[Token(Token = "0x200034F")]
		public delegate void ServerResponded(gameserveritem_t server);

		[Token(Token = "0x2000350")]
		public delegate void ServerFailedToRespond();

		[Token(Token = "0x2000351")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xE9FFE4", Offset = "0xE9FFE4")]
		private delegate void InternalServerResponded(IntPtr thisptr, gameserveritem_t server);

		[Token(Token = "0x2000352")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xE9FFF8", Offset = "0xE9FFF8")]
		private delegate void InternalServerFailedToRespond(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x2000353")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x40011D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public InternalServerResponded m_VTServerResponded;

			[NonSerialized]
			[Token(Token = "0x40011D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public InternalServerFailedToRespond m_VTServerFailedToRespond;

			[Token(Token = "0x60016E8")]
			[Address(RVA = "0xCBBC1C", Offset = "0xCBBC1C", VA = "0xCBBC1C")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private VTable m_VTable;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private ServerResponded m_ServerResponded;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ServerFailedToRespond m_ServerFailedToRespond;

		[Token(Token = "0x60016D3")]
		[Address(RVA = "0xCBB9B8", Offset = "0xCBB9B8", VA = "0xCBB9B8")]
		public ISteamMatchmakingPingResponse(ServerResponded onServerResponded, ServerFailedToRespond onServerFailedToRespond)
		{
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0xCBBC4C", Offset = "0xCBBC4C", VA = "0xCBBC4C", Slot = "1")]
		~ISteamMatchmakingPingResponse()
		{
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0xCBBD64", Offset = "0xCBBD64", VA = "0xCBBD64")]
		private void InternalOnServerResponded(IntPtr thisptr, gameserveritem_t server)
		{
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0xCBC134", Offset = "0xCBC134", VA = "0xCBC134")]
		private void InternalOnServerFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60016D7")]
		[Address(RVA = "0xCBC358", Offset = "0xCBC358", VA = "0xCBC358")]
		public static explicit operator IntPtr(ISteamMatchmakingPingResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000354")]
	public class ISteamMatchmakingPlayersResponse
	{
		[Token(Token = "0x2000355")]
		public delegate void AddPlayerToList(string pchName, int nScore, float flTimePlayed);

		[Token(Token = "0x2000356")]
		public delegate void PlayersFailedToRespond();

		[Token(Token = "0x2000357")]
		public delegate void PlayersRefreshComplete();

		[Token(Token = "0x2000358")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xEA000C", Offset = "0xEA000C")]
		public delegate void InternalAddPlayerToList(IntPtr thisptr, string pchName, int nScore, float flTimePlayed);

		[Token(Token = "0x2000359")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xEA0020", Offset = "0xEA0020")]
		public delegate void InternalPlayersFailedToRespond(IntPtr thisptr);

		[Token(Token = "0x200035A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xEA0034", Offset = "0xEA0034")]
		public delegate void InternalPlayersRefreshComplete(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x200035B")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x40011DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public InternalAddPlayerToList m_VTAddPlayerToList;

			[NonSerialized]
			[Token(Token = "0x40011DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public InternalPlayersFailedToRespond m_VTPlayersFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x40011E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalPlayersRefreshComplete m_VTPlayersRefreshComplete;

			[Token(Token = "0x6001707")]
			[Address(RVA = "0xCBCE04", Offset = "0xCBCE04", VA = "0xCBCE04")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private VTable m_VTable;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private AddPlayerToList m_AddPlayerToList;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PlayersFailedToRespond m_PlayersFailedToRespond;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private PlayersRefreshComplete m_PlayersRefreshComplete;

		[Token(Token = "0x60016E9")]
		[Address(RVA = "0xCBCB48", Offset = "0xCBCB48", VA = "0xCBCB48")]
		public ISteamMatchmakingPlayersResponse(AddPlayerToList onAddPlayerToList, PlayersFailedToRespond onPlayersFailedToRespond, PlayersRefreshComplete onPlayersRefreshComplete)
		{
		}

		[Token(Token = "0x60016EA")]
		[Address(RVA = "0xCBCE48", Offset = "0xCBCE48", VA = "0xCBCE48", Slot = "1")]
		~ISteamMatchmakingPlayersResponse()
		{
		}

		[Token(Token = "0x60016EB")]
		[Address(RVA = "0xCBCF60", Offset = "0xCBCF60", VA = "0xCBCF60")]
		private void InternalOnAddPlayerToList(IntPtr thisptr, string pchName, int nScore, float flTimePlayed)
		{
		}

		[Token(Token = "0x60016EC")]
		[Address(RVA = "0xCBD3BC", Offset = "0xCBD3BC", VA = "0xCBD3BC")]
		private void InternalOnPlayersFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60016ED")]
		[Address(RVA = "0xCBD5E0", Offset = "0xCBD5E0", VA = "0xCBD5E0")]
		private void InternalOnPlayersRefreshComplete(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60016EE")]
		[Address(RVA = "0xCBD804", Offset = "0xCBD804", VA = "0xCBD804")]
		public static explicit operator IntPtr(ISteamMatchmakingPlayersResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x200035C")]
	public class ISteamMatchmakingRulesResponse
	{
		[Token(Token = "0x200035D")]
		public delegate void RulesResponded(string pchRule, string pchValue);

		[Token(Token = "0x200035E")]
		public delegate void RulesFailedToRespond();

		[Token(Token = "0x200035F")]
		public delegate void RulesRefreshComplete();

		[Token(Token = "0x2000360")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xEA0048", Offset = "0xEA0048")]
		public delegate void InternalRulesResponded(IntPtr thisptr, string pchRule, string pchValue);

		[Token(Token = "0x2000361")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xEA005C", Offset = "0xEA005C")]
		public delegate void InternalRulesFailedToRespond(IntPtr thisptr);

		[Token(Token = "0x2000362")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xEA0070", Offset = "0xEA0070")]
		public delegate void InternalRulesRefreshComplete(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x2000363")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x40011E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public InternalRulesResponded m_VTRulesResponded;

			[NonSerialized]
			[Token(Token = "0x40011E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public InternalRulesFailedToRespond m_VTRulesFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x40011E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalRulesRefreshComplete m_VTRulesRefreshComplete;

			[Token(Token = "0x6001726")]
			[Address(RVA = "0xCBE6BC", Offset = "0xCBE6BC", VA = "0xCBE6BC")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private VTable m_VTable;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private RulesResponded m_RulesResponded;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RulesFailedToRespond m_RulesFailedToRespond;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private RulesRefreshComplete m_RulesRefreshComplete;

		[Token(Token = "0x6001708")]
		[Address(RVA = "0xCBE400", Offset = "0xCBE400", VA = "0xCBE400")]
		public ISteamMatchmakingRulesResponse(RulesResponded onRulesResponded, RulesFailedToRespond onRulesFailedToRespond, RulesRefreshComplete onRulesRefreshComplete)
		{
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0xCBE700", Offset = "0xCBE700", VA = "0xCBE700", Slot = "1")]
		~ISteamMatchmakingRulesResponse()
		{
		}

		[Token(Token = "0x600170A")]
		[Address(RVA = "0xCBE818", Offset = "0xCBE818", VA = "0xCBE818")]
		private void InternalOnRulesResponded(IntPtr thisptr, string pchRule, string pchValue)
		{
		}

		[Token(Token = "0x600170B")]
		[Address(RVA = "0xCBEC18", Offset = "0xCBEC18", VA = "0xCBEC18")]
		private void InternalOnRulesFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0xCBEE3C", Offset = "0xCBEE3C", VA = "0xCBEE3C")]
		private void InternalOnRulesRefreshComplete(IntPtr thisptr)
		{
		}

		[Token(Token = "0x600170D")]
		[Address(RVA = "0xCBF060", Offset = "0xCBF060", VA = "0xCBF060")]
		public static explicit operator IntPtr(ISteamMatchmakingRulesResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x2000364")]
	public static class Packsize
	{
		[Token(Token = "0x2000365")]
		private struct ValvePackingSentinel_t
		{
			[Token(Token = "0x40011EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private uint m_u32;

			[Token(Token = "0x40011EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private ulong m_u64;

			[Token(Token = "0x40011ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private ushort m_u16;

			[Token(Token = "0x40011EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private double m_d;
		}

		[Token(Token = "0x40011EA")]
		public const int value = 8;

		[Token(Token = "0x6001727")]
		[Address(RVA = "0x18E1714", Offset = "0x18E1714", VA = "0x18E1714")]
		public static bool Test()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000366")]
	public static class Version
	{
		[Token(Token = "0x40011EF")]
		public const string SteamworksNETVersion = "5.0.0";

		[Token(Token = "0x40011F0")]
		public const string SteamworksSDKVersion = "1.31";

		[Token(Token = "0x40011F1")]
		public const string SteamAPIDLLVersion = "02.37.91.26";

		[Token(Token = "0x40011F2")]
		public const int SteamAPIDLLSize = 145600;

		[Token(Token = "0x40011F3")]
		public const int SteamAPI64DLLSize = 169152;
	}
	[Token(Token = "0x2000367")]
	public static class SteamAPI
	{
		[Token(Token = "0x6001728")]
		[Address(RVA = "0x18E3568", Offset = "0x18E3568", VA = "0x18E3568")]
		public static bool RestartAppIfNecessary(AppId_t unOwnAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x6001729")]
		[Address(RVA = "0x18E3594", Offset = "0x18E3594", VA = "0x18E3594")]
		public static bool InitSafe()
		{
			return default(bool);
		}

		[Token(Token = "0x600172A")]
		[Address(RVA = "0x18E35B8", Offset = "0x18E35B8", VA = "0x18E35B8")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x600172B")]
		[Address(RVA = "0x18E35DC", Offset = "0x18E35DC", VA = "0x18E35DC")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x600172C")]
		[Address(RVA = "0x18E3600", Offset = "0x18E3600", VA = "0x18E3600")]
		public static void RunCallbacks()
		{
		}

		[Token(Token = "0x600172D")]
		[Address(RVA = "0x18E3624", Offset = "0x18E3624", VA = "0x18E3624")]
		public static bool IsSteamRunning()
		{
			return default(bool);
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0x18E3648", Offset = "0x18E3648", VA = "0x18E3648")]
		public static HSteamUser GetHSteamUserCurrent()
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x600172F")]
		[Address(RVA = "0x18E367C", Offset = "0x18E367C", VA = "0x18E367C")]
		public static HSteamPipe GetHSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0x18E36B0", Offset = "0x18E36B0", VA = "0x18E36B0")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}
	}
	[Token(Token = "0x2000368")]
	public static class GameServer
	{
		[Token(Token = "0x6001731")]
		[Address(RVA = "0x6A89AC", Offset = "0x6A89AC", VA = "0x6A89AC")]
		public static bool InitSafe(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x6001732")]
		[Address(RVA = "0x6A89FC", Offset = "0x6A89FC", VA = "0x6A89FC")]
		public static bool Init(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x6001733")]
		[Address(RVA = "0x6A8A4C", Offset = "0x6A8A4C", VA = "0x6A8A4C")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x6001734")]
		[Address(RVA = "0x6A8A70", Offset = "0x6A8A70", VA = "0x6A8A70")]
		public static void RunCallbacks()
		{
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0x6A8A94", Offset = "0x6A8A94", VA = "0x6A8A94")]
		public static bool BSecure()
		{
			return default(bool);
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0x6A8AB8", Offset = "0x6A8AB8", VA = "0x6A8AB8")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6001737")]
		[Address(RVA = "0x6A8B54", Offset = "0x6A8B54", VA = "0x6A8B54")]
		public static HSteamPipe GetHSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x6001738")]
		[Address(RVA = "0x6A8B88", Offset = "0x6A8B88", VA = "0x6A8B88")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}
	}
	[Token(Token = "0x2000369")]
	public static class SteamEncryptedAppTicket
	{
		[Token(Token = "0x6001739")]
		[Address(RVA = "0x18E5720", Offset = "0x18E5720", VA = "0x18E5720")]
		public static bool BDecryptTicket(byte[] rgubTicketEncrypted, uint cubTicketEncrypted, byte[] rgubTicketDecrypted, out uint pcubTicketDecrypted, byte[] rgubKey, int cubKey)
		{
			return default(bool);
		}

		[Token(Token = "0x600173A")]
		[Address(RVA = "0x18E5770", Offset = "0x18E5770", VA = "0x18E5770")]
		public static bool BIsTicketForApp(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x600173B")]
		[Address(RVA = "0x18E57B8", Offset = "0x18E57B8", VA = "0x18E57B8")]
		public static uint GetTicketIssueTime(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(uint);
		}

		[Token(Token = "0x600173C")]
		[Address(RVA = "0x18E57EC", Offset = "0x18E57EC", VA = "0x18E57EC")]
		public static void GetTicketSteamID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID)
		{
		}

		[Token(Token = "0x600173D")]
		[Address(RVA = "0x18E5834", Offset = "0x18E5834", VA = "0x18E5834")]
		public static uint GetTicketAppID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(uint);
		}

		[Token(Token = "0x600173E")]
		[Address(RVA = "0x18E5868", Offset = "0x18E5868", VA = "0x18E5868")]
		public static bool BUserOwnsAppInTicket(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x600173F")]
		[Address(RVA = "0x18E58B0", Offset = "0x18E58B0", VA = "0x18E58B0")]
		public static bool BUserIsVacBanned(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(bool);
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0x18E58E4", Offset = "0x18E58E4", VA = "0x18E58E4")]
		public static byte[] GetUserVariableData(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData)
		{
			return null;
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x200036A")]
	public class gameserveritem_t
	{
		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public servernetadr_t m_NetAdr;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nPing;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bHadSuccessfulResponse;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool m_bDoNotRefresh;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] m_szGameDir;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private byte[] m_szMap;

		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] m_szGameDescription;

		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint m_nAppID;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int m_nPlayers;

		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int m_nMaxPlayers;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int m_nBotPlayers;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool m_bPassword;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool m_bSecure;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_ulTimeLastPlayed;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int m_nServerVersion;

		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private byte[] m_szServerName;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private byte[] m_szGameTags;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CSteamID m_steamID;

		[Token(Token = "0x6001741")]
		[Address(RVA = "0x6A9110", Offset = "0x6A9110", VA = "0x6A9110")]
		public gameserveritem_t()
		{
		}

		[Token(Token = "0x6001742")]
		[Address(RVA = "0x6A9118", Offset = "0x6A9118", VA = "0x6A9118")]
		public string GetGameDir()
		{
			return null;
		}

		[Token(Token = "0x6001743")]
		[Address(RVA = "0x6A9200", Offset = "0x6A9200", VA = "0x6A9200")]
		public void SetGameDir(string dir)
		{
		}

		[Token(Token = "0x6001744")]
		[Address(RVA = "0x6A9324", Offset = "0x6A9324", VA = "0x6A9324")]
		public string GetMap()
		{
			return null;
		}

		[Token(Token = "0x6001745")]
		[Address(RVA = "0x6A940C", Offset = "0x6A940C", VA = "0x6A940C")]
		public void SetMap(string map)
		{
		}

		[Token(Token = "0x6001746")]
		[Address(RVA = "0x6A9530", Offset = "0x6A9530", VA = "0x6A9530")]
		public string GetGameDescription()
		{
			return null;
		}

		[Token(Token = "0x6001747")]
		[Address(RVA = "0x6A9618", Offset = "0x6A9618", VA = "0x6A9618")]
		public void SetGameDescription(string desc)
		{
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0x6A973C", Offset = "0x6A973C", VA = "0x6A973C")]
		public string GetServerName()
		{
			return null;
		}

		[Token(Token = "0x6001749")]
		[Address(RVA = "0x6A986C", Offset = "0x6A986C", VA = "0x6A986C")]
		public void SetServerName(string name)
		{
		}

		[Token(Token = "0x600174A")]
		[Address(RVA = "0x6A9990", Offset = "0x6A9990", VA = "0x6A9990")]
		public string GetGameTags()
		{
			return null;
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0x6A9A78", Offset = "0x6A9A78", VA = "0x6A9A78")]
		public void SetGameTags(string tags)
		{
		}
	}
	[Token(Token = "0x200036B")]
	public struct servernetadr_t
	{
		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ushort m_usConnectionPort;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		private ushort m_usQueryPort;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private uint m_unIP;

		[Token(Token = "0x600174C")]
		[Address(RVA = "0x18E2D8C", Offset = "0x18E2D8C", VA = "0x18E2D8C")]
		public void Init(uint ip, ushort usQueryPort, ushort usConnectionPort)
		{
		}

		[Token(Token = "0x600174D")]
		[Address(RVA = "0x18E2D9C", Offset = "0x18E2D9C", VA = "0x18E2D9C")]
		public ushort GetQueryPort()
		{
			return default(ushort);
		}

		[Token(Token = "0x600174E")]
		[Address(RVA = "0x18E2DA4", Offset = "0x18E2DA4", VA = "0x18E2DA4")]
		public void SetQueryPort(ushort usPort)
		{
		}

		[Token(Token = "0x600174F")]
		[Address(RVA = "0x18E2DAC", Offset = "0x18E2DAC", VA = "0x18E2DAC")]
		public ushort GetConnectionPort()
		{
			return default(ushort);
		}

		[Token(Token = "0x6001750")]
		[Address(RVA = "0x18E2DB4", Offset = "0x18E2DB4", VA = "0x18E2DB4")]
		public void SetConnectionPort(ushort usPort)
		{
		}

		[Token(Token = "0x6001751")]
		[Address(RVA = "0x18E2DBC", Offset = "0x18E2DBC", VA = "0x18E2DBC")]
		public uint GetIP()
		{
			return default(uint);
		}

		[Token(Token = "0x6001752")]
		[Address(RVA = "0x18E2DC4", Offset = "0x18E2DC4", VA = "0x18E2DC4")]
		public void SetIP(uint unIP)
		{
		}

		[Token(Token = "0x6001753")]
		[Address(RVA = "0x18E30E8", Offset = "0x18E30E8", VA = "0x18E30E8")]
		public string GetConnectionAddressString()
		{
			return null;
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0x18E30F4", Offset = "0x18E30F4", VA = "0x18E30F4")]
		public string GetQueryAddressString()
		{
			return null;
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0x18E2DD8", Offset = "0x18E2DD8", VA = "0x18E2DD8")]
		public static string ToString(uint unIP, ushort usPort)
		{
			return null;
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0x18E3100", Offset = "0x18E3100", VA = "0x18E3100")]
		public static bool operator <(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001757")]
		[Address(RVA = "0x18E312C", Offset = "0x18E312C", VA = "0x18E312C")]
		public static bool operator >(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0x18E3244", Offset = "0x18E3244", VA = "0x18E3244", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001759")]
		[Address(RVA = "0x18E328C", Offset = "0x18E328C", VA = "0x18E328C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600175A")]
		[Address(RVA = "0x18E3214", Offset = "0x18E3214", VA = "0x18E3214")]
		public static bool operator ==(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600175B")]
		[Address(RVA = "0x18E3294", Offset = "0x18E3294", VA = "0x18E3294")]
		public static bool operator !=(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600175C")]
		[Address(RVA = "0x18E32C4", Offset = "0x18E32C4", VA = "0x18E32C4")]
		public bool Equals(servernetadr_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x600175D")]
		[Address(RVA = "0x18E3348", Offset = "0x18E3348", VA = "0x18E3348")]
		public int CompareTo(servernetadr_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200036C")]
	public struct HSteamPipe : IEquatable<HSteamPipe>, IComparable<HSteamPipe>
	{
		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HSteamPipe;

		[Token(Token = "0x600175E")]
		[Address(RVA = "0xCB9D9C", Offset = "0xCB9D9C", VA = "0xCB9D9C")]
		public HSteamPipe(int value)
		{
		}

		[Token(Token = "0x600175F")]
		[Address(RVA = "0xCB9DA4", Offset = "0xCB9DA4", VA = "0xCB9DA4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001760")]
		[Address(RVA = "0xCB9E54", Offset = "0xCB9E54", VA = "0xCB9E54", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001761")]
		[Address(RVA = "0xCB9E5C", Offset = "0xCB9E5C", VA = "0xCB9E5C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001762")]
		[Address(RVA = "0xCB9E44", Offset = "0xCB9E44", VA = "0xCB9E44")]
		public static bool operator ==(HSteamPipe x, HSteamPipe y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0xCB9E68", Offset = "0xCB9E68", VA = "0xCB9E68")]
		public static bool operator !=(HSteamPipe x, HSteamPipe y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001764")]
		[Address(RVA = "0xCB9E78", Offset = "0xCB9E78", VA = "0xCB9E78")]
		public static explicit operator HSteamPipe(int value)
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x6001765")]
		[Address(RVA = "0xCB9E80", Offset = "0xCB9E80", VA = "0xCB9E80")]
		public static explicit operator int(HSteamPipe that)
		{
			return default(int);
		}

		[Token(Token = "0x6001766")]
		[Address(RVA = "0xCB9E88", Offset = "0xCB9E88", VA = "0xCB9E88", Slot = "4")]
		public bool Equals(HSteamPipe other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001767")]
		[Address(RVA = "0xCB9E9C", Offset = "0xCB9E9C", VA = "0xCB9E9C", Slot = "5")]
		public int CompareTo(HSteamPipe other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200036D")]
	public struct HSteamUser : IEquatable<HSteamUser>, IComparable<HSteamUser>
	{
		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HSteamUser;

		[Token(Token = "0x6001768")]
		[Address(RVA = "0xCB9EA8", Offset = "0xCB9EA8", VA = "0xCB9EA8")]
		public HSteamUser(int value)
		{
		}

		[Token(Token = "0x6001769")]
		[Address(RVA = "0xCB9EB0", Offset = "0xCB9EB0", VA = "0xCB9EB0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0xCB9F60", Offset = "0xCB9F60", VA = "0xCB9F60", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600176B")]
		[Address(RVA = "0xCB9F68", Offset = "0xCB9F68", VA = "0xCB9F68", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600176C")]
		[Address(RVA = "0xCB9F50", Offset = "0xCB9F50", VA = "0xCB9F50")]
		public static bool operator ==(HSteamUser x, HSteamUser y)
		{
			return default(bool);
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0xCB9F74", Offset = "0xCB9F74", VA = "0xCB9F74")]
		public static bool operator !=(HSteamUser x, HSteamUser y)
		{
			return default(bool);
		}

		[Token(Token = "0x600176E")]
		[Address(RVA = "0xCB9F84", Offset = "0xCB9F84", VA = "0xCB9F84")]
		public static explicit operator HSteamUser(int value)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x600176F")]
		[Address(RVA = "0xCB9F8C", Offset = "0xCB9F8C", VA = "0xCB9F8C")]
		public static explicit operator int(HSteamUser that)
		{
			return default(int);
		}

		[Token(Token = "0x6001770")]
		[Address(RVA = "0xCB9F94", Offset = "0xCB9F94", VA = "0xCB9F94", Slot = "4")]
		public bool Equals(HSteamUser other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001771")]
		[Address(RVA = "0xCB9FA8", Offset = "0xCB9FA8", VA = "0xCB9FA8", Slot = "5")]
		public int CompareTo(HSteamUser other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200036E")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xEA0084", Offset = "0xEA0084")]
	public delegate void SteamAPI_CheckCallbackRegistered_t(int iCallbackNum);
	[Token(Token = "0x200036F")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xEA0098", Offset = "0xEA0098")]
	public delegate void SteamAPI_PostAPIResultInProcess_t(SteamAPICall_t callHandle, IntPtr pUnknown, uint unCallbackSize, int iCallbackNum);
	[Token(Token = "0x2000370")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xEA00AC", Offset = "0xEA00AC")]
	public delegate void SteamAPIWarningMessageHook_t(int nSeverity, StringBuilder pchDebugText);
	[Token(Token = "0x2000371")]
	public struct CGameID : IEquatable<CGameID>, IComparable<CGameID>
	{
		[Token(Token = "0x2000372")]
		public enum EGameIDType
		{
			[Token(Token = "0x400120D")]
			k_EGameIDTypeApp,
			[Token(Token = "0x400120E")]
			k_EGameIDTypeGameMod,
			[Token(Token = "0x400120F")]
			k_EGameIDTypeShortcut,
			[Token(Token = "0x4001210")]
			k_EGameIDTypeP2P
		}

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_GameID;

		[Token(Token = "0x600177E")]
		[Address(RVA = "0x6A7564", Offset = "0x6A7564", VA = "0x6A7564")]
		public CGameID(ulong GameID)
		{
		}

		[Token(Token = "0x600177F")]
		[Address(RVA = "0x6A75FC", Offset = "0x6A75FC", VA = "0x6A75FC")]
		public CGameID(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6001780")]
		[Address(RVA = "0x6A760C", Offset = "0x6A760C", VA = "0x6A760C")]
		public CGameID(AppId_t nAppID, uint nModID)
		{
		}

		[Token(Token = "0x6001781")]
		[Address(RVA = "0x6A7644", Offset = "0x6A7644", VA = "0x6A7644")]
		public bool IsSteamApp()
		{
			return default(bool);
		}

		[Token(Token = "0x6001782")]
		[Address(RVA = "0x6A7658", Offset = "0x6A7658", VA = "0x6A7658")]
		public bool IsMod()
		{
			return default(bool);
		}

		[Token(Token = "0x6001783")]
		[Address(RVA = "0x6A7670", Offset = "0x6A7670", VA = "0x6A7670")]
		public bool IsShortcut()
		{
			return default(bool);
		}

		[Token(Token = "0x6001784")]
		[Address(RVA = "0x6A7688", Offset = "0x6A7688", VA = "0x6A7688")]
		public bool IsP2PFile()
		{
			return default(bool);
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0x6A76A0", Offset = "0x6A76A0", VA = "0x6A76A0")]
		public AppId_t AppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6001786")]
		[Address(RVA = "0x6A76AC", Offset = "0x6A76AC", VA = "0x6A76AC")]
		public EGameIDType Type()
		{
			return default(EGameIDType);
		}

		[Token(Token = "0x6001787")]
		[Address(RVA = "0x6A76B4", Offset = "0x6A76B4", VA = "0x6A76B4")]
		public uint ModID()
		{
			return default(uint);
		}

		[Token(Token = "0x6001788")]
		[Address(RVA = "0x6A7858", Offset = "0x6A7858", VA = "0x6A7858")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6001789")]
		[Address(RVA = "0x6A7860", Offset = "0x6A7860", VA = "0x6A7860")]
		public void Reset()
		{
		}

		[Token(Token = "0x600178A")]
		[Address(RVA = "0x6A7870", Offset = "0x6A7870", VA = "0x6A7870")]
		public void Set(ulong GameID)
		{
		}

		[Token(Token = "0x600178B")]
		[Address(RVA = "0x6A7880", Offset = "0x6A7880", VA = "0x6A7880")]
		private void SetAppID(AppId_t other)
		{
		}

		[Token(Token = "0x600178C")]
		[Address(RVA = "0x6A7888", Offset = "0x6A7888", VA = "0x6A7888")]
		private void SetType(EGameIDType other)
		{
		}

		[Token(Token = "0x600178D")]
		[Address(RVA = "0x6A7890", Offset = "0x6A7890", VA = "0x6A7890")]
		private void SetModID(uint other)
		{
		}

		[Token(Token = "0x600178E")]
		[Address(RVA = "0x6A7898", Offset = "0x6A7898", VA = "0x6A7898", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600178F")]
		[Address(RVA = "0x6A7960", Offset = "0x6A7960", VA = "0x6A7960", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001790")]
		[Address(RVA = "0x6A7968", Offset = "0x6A7968", VA = "0x6A7968", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001791")]
		[Address(RVA = "0x6A7940", Offset = "0x6A7940", VA = "0x6A7940")]
		public static bool operator ==(CGameID x, CGameID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001792")]
		[Address(RVA = "0x6A7974", Offset = "0x6A7974", VA = "0x6A7974")]
		public static bool operator !=(CGameID x, CGameID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0x6A7990", Offset = "0x6A7990", VA = "0x6A7990")]
		public static explicit operator CGameID(ulong value)
		{
			return default(CGameID);
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0x6A79A0", Offset = "0x6A79A0", VA = "0x6A79A0")]
		public static explicit operator ulong(CGameID that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001795")]
		[Address(RVA = "0x6A79AC", Offset = "0x6A79AC", VA = "0x6A79AC", Slot = "4")]
		public bool Equals(CGameID other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0x6A79C8", Offset = "0x6A79C8", VA = "0x6A79C8", Slot = "5")]
		public int CompareTo(CGameID other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000373")]
	public struct CSteamID : IEquatable<CSteamID>, IComparable<CSteamID>
	{
		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly CSteamID Nil;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly CSteamID OutofDateGS;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly CSteamID LanModeGS;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly CSteamID NotInitYetGS;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly CSteamID NonSteamGS;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamID;

		[Token(Token = "0x6001797")]
		[Address(RVA = "0x6A7CBC", Offset = "0x6A7CBC", VA = "0x6A7CBC")]
		public CSteamID(AccountID_t unAccountID, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6001798")]
		[Address(RVA = "0x6A7CEC", Offset = "0x6A7CEC", VA = "0x6A7CEC")]
		public CSteamID(AccountID_t unAccountID, uint unAccountInstance, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6001799")]
		[Address(RVA = "0x6A7D14", Offset = "0x6A7D14", VA = "0x6A7D14")]
		public CSteamID(ulong ulSteamID)
		{
		}

		[Token(Token = "0x600179A")]
		[Address(RVA = "0x6A7D24", Offset = "0x6A7D24", VA = "0x6A7D24")]
		public void Set(AccountID_t unAccountID, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0x6A7D60", Offset = "0x6A7D60", VA = "0x6A7D60")]
		public void InstancedSet(AccountID_t unAccountID, uint unInstance, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0x6A7D88", Offset = "0x6A7D88", VA = "0x6A7D88")]
		public void Clear()
		{
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0x6A7D98", Offset = "0x6A7D98", VA = "0x6A7D98")]
		public void CreateBlankAnonLogon(EUniverse eUniverse)
		{
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0x6A7DB0", Offset = "0x6A7DB0", VA = "0x6A7DB0")]
		public void CreateBlankAnonUserLogon(EUniverse eUniverse)
		{
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0x6A7DC8", Offset = "0x6A7DC8", VA = "0x6A7DC8")]
		public bool BBlankAnonAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60017A0")]
		[Address(RVA = "0x6A7E08", Offset = "0x6A7E08", VA = "0x6A7E08")]
		public bool BGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60017A1")]
		[Address(RVA = "0x6A7E24", Offset = "0x6A7E24", VA = "0x6A7E24")]
		public bool BPersistentGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60017A2")]
		[Address(RVA = "0x6A7E3C", Offset = "0x6A7E3C", VA = "0x6A7E3C")]
		public bool BAnonGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0x6A7E54", Offset = "0x6A7E54", VA = "0x6A7E54")]
		public bool BContentServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60017A4")]
		[Address(RVA = "0x6A7E6C", Offset = "0x6A7E6C", VA = "0x6A7E6C")]
		public bool BClanAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60017A5")]
		[Address(RVA = "0x6A7E84", Offset = "0x6A7E84", VA = "0x6A7E84")]
		public bool BChatAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60017A6")]
		[Address(RVA = "0x6A7E9C", Offset = "0x6A7E9C", VA = "0x6A7E9C")]
		public bool IsLobby()
		{
			return default(bool);
		}

		[Token(Token = "0x60017A7")]
		[Address(RVA = "0x6A7EB4", Offset = "0x6A7EB4", VA = "0x6A7EB4")]
		public bool BIndividualAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60017A8")]
		[Address(RVA = "0x6A7ED4", Offset = "0x6A7ED4", VA = "0x6A7ED4")]
		public bool BAnonAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60017A9")]
		[Address(RVA = "0x6A7EFC", Offset = "0x6A7EFC", VA = "0x6A7EFC")]
		public bool BAnonUserAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0x6A7F14", Offset = "0x6A7F14", VA = "0x6A7F14")]
		public bool BConsoleUserAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x60017AB")]
		[Address(RVA = "0x6A7F2C", Offset = "0x6A7F2C", VA = "0x6A7F2C")]
		public void SetAccountID(AccountID_t other)
		{
		}

		[Token(Token = "0x60017AC")]
		[Address(RVA = "0x6A7F34", Offset = "0x6A7F34", VA = "0x6A7F34")]
		public void SetAccountInstance(uint other)
		{
		}

		[Token(Token = "0x60017AD")]
		[Address(RVA = "0x6A7F44", Offset = "0x6A7F44", VA = "0x6A7F44")]
		public void SetEAccountType(EAccountType other)
		{
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0x6A7F54", Offset = "0x6A7F54", VA = "0x6A7F54")]
		public void SetEUniverse(EUniverse other)
		{
		}

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0x6A7F5C", Offset = "0x6A7F5C", VA = "0x6A7F5C")]
		public void ClearIndividualInstance()
		{
		}

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0x6A7F88", Offset = "0x6A7F88", VA = "0x6A7F88")]
		public bool HasNoIndividualInstance()
		{
			return default(bool);
		}

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0x6A7FC0", Offset = "0x6A7FC0", VA = "0x6A7FC0")]
		public AccountID_t GetAccountID()
		{
			return default(AccountID_t);
		}

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0x6A7FC8", Offset = "0x6A7FC8", VA = "0x6A7FC8")]
		public uint GetUnAccountInstance()
		{
			return default(uint);
		}

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0x6A7FD4", Offset = "0x6A7FD4", VA = "0x6A7FD4")]
		public EAccountType GetEAccountType()
		{
			return default(EAccountType);
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0x6A7FE0", Offset = "0x6A7FE0", VA = "0x6A7FE0")]
		public EUniverse GetEUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0x6A8068", Offset = "0x6A8068", VA = "0x6A8068")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0x6A8070", Offset = "0x6A8070", VA = "0x6A8070", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0x6A81C0", Offset = "0x6A81C0", VA = "0x6A81C0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0x6A81C8", Offset = "0x6A81C8", VA = "0x6A81C8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0x6A81A0", Offset = "0x6A81A0", VA = "0x6A81A0")]
		public static bool operator ==(CSteamID x, CSteamID y)
		{
			return default(bool);
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0x6A81D4", Offset = "0x6A81D4", VA = "0x6A81D4")]
		public static bool operator !=(CSteamID x, CSteamID y)
		{
			return default(bool);
		}

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0x6A8268", Offset = "0x6A8268", VA = "0x6A8268")]
		public static explicit operator CSteamID(ulong value)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0x6A8278", Offset = "0x6A8278", VA = "0x6A8278")]
		public static explicit operator ulong(CSteamID that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0x6A8284", Offset = "0x6A8284", VA = "0x6A8284", Slot = "4")]
		public bool Equals(CSteamID other)
		{
			return default(bool);
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0x6A82A0", Offset = "0x6A82A0", VA = "0x6A82A0", Slot = "5")]
		public int CompareTo(CSteamID other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000374")]
	public struct HAuthTicket : IEquatable<HAuthTicket>, IComparable<HAuthTicket>
	{
		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HAuthTicket Invalid;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HAuthTicket;

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0x6A9C84", Offset = "0x6A9C84", VA = "0x6A9C84")]
		public HAuthTicket(uint value)
		{
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0x6A9C8C", Offset = "0x6A9C8C", VA = "0x6A9C8C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0x6A9DC4", Offset = "0x6A9DC4", VA = "0x6A9DC4", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0x6A9DCC", Offset = "0x6A9DCC", VA = "0x6A9DCC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0x6A9DB4", Offset = "0x6A9DB4", VA = "0x6A9DB4")]
		public static bool operator ==(HAuthTicket x, HAuthTicket y)
		{
			return default(bool);
		}

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0x6A9DD8", Offset = "0x6A9DD8", VA = "0x6A9DD8")]
		public static bool operator !=(HAuthTicket x, HAuthTicket y)
		{
			return default(bool);
		}

		[Token(Token = "0x60017C6")]
		[Address(RVA = "0x6A9E60", Offset = "0x6A9E60", VA = "0x6A9E60")]
		public static explicit operator HAuthTicket(uint value)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0x6A9E68", Offset = "0x6A9E68", VA = "0x6A9E68")]
		public static explicit operator uint(HAuthTicket that)
		{
			return default(uint);
		}

		[Token(Token = "0x60017C8")]
		[Address(RVA = "0x6A9E70", Offset = "0x6A9E70", VA = "0x6A9E70", Slot = "4")]
		public bool Equals(HAuthTicket other)
		{
			return default(bool);
		}

		[Token(Token = "0x60017C9")]
		[Address(RVA = "0x6A9E84", Offset = "0x6A9E84", VA = "0x6A9E84", Slot = "5")]
		public int CompareTo(HAuthTicket other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000375")]
	public struct HHTMLBrowser : IEquatable<HHTMLBrowser>, IComparable<HHTMLBrowser>
	{
		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HHTMLBrowser Invalid;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HHTMLBrowser;

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0x6A9EF8", Offset = "0x6A9EF8", VA = "0x6A9EF8")]
		public HHTMLBrowser(uint value)
		{
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0x6A9F00", Offset = "0x6A9F00", VA = "0x6A9F00", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0x6AA038", Offset = "0x6AA038", VA = "0x6AA038", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0x6AA040", Offset = "0x6AA040", VA = "0x6AA040", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0x6AA028", Offset = "0x6AA028", VA = "0x6AA028")]
		public static bool operator ==(HHTMLBrowser x, HHTMLBrowser y)
		{
			return default(bool);
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0x6AA04C", Offset = "0x6AA04C", VA = "0x6AA04C")]
		public static bool operator !=(HHTMLBrowser x, HHTMLBrowser y)
		{
			return default(bool);
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0x6AA0D4", Offset = "0x6AA0D4", VA = "0x6AA0D4")]
		public static explicit operator HHTMLBrowser(uint value)
		{
			return default(HHTMLBrowser);
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0x6AA0DC", Offset = "0x6AA0DC", VA = "0x6AA0DC")]
		public static explicit operator uint(HHTMLBrowser that)
		{
			return default(uint);
		}

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0x6AA0E4", Offset = "0x6AA0E4", VA = "0x6AA0E4", Slot = "4")]
		public bool Equals(HHTMLBrowser other)
		{
			return default(bool);
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0x6AA0F8", Offset = "0x6AA0F8", VA = "0x6AA0F8", Slot = "5")]
		public int CompareTo(HHTMLBrowser other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000376")]
	public struct HTTPRequestHandle : IEquatable<HTTPRequestHandle>, IComparable<HTTPRequestHandle>
	{
		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HTTPRequestHandle Invalid;

		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HTTPRequestHandle;

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0xCBA87C", Offset = "0xCBA87C", VA = "0xCBA87C")]
		public HTTPRequestHandle(uint value)
		{
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0xCBA884", Offset = "0xCBA884", VA = "0xCBA884", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0xCBA9BC", Offset = "0xCBA9BC", VA = "0xCBA9BC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0xCBA9C4", Offset = "0xCBA9C4", VA = "0xCBA9C4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0xCBA9AC", Offset = "0xCBA9AC", VA = "0xCBA9AC")]
		public static bool operator ==(HTTPRequestHandle x, HTTPRequestHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0xCBA9D0", Offset = "0xCBA9D0", VA = "0xCBA9D0")]
		public static bool operator !=(HTTPRequestHandle x, HTTPRequestHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0xCBAA58", Offset = "0xCBAA58", VA = "0xCBAA58")]
		public static explicit operator HTTPRequestHandle(uint value)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0xCBAA60", Offset = "0xCBAA60", VA = "0xCBAA60")]
		public static explicit operator uint(HTTPRequestHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0xCBAA68", Offset = "0xCBAA68", VA = "0xCBAA68", Slot = "4")]
		public bool Equals(HTTPRequestHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0xCBAA7C", Offset = "0xCBAA7C", VA = "0xCBAA7C", Slot = "5")]
		public int CompareTo(HTTPRequestHandle other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000377")]
	public struct HServerListRequest : IEquatable<HServerListRequest>
	{
		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HServerListRequest Invalid;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_HServerListRequest;

		[Token(Token = "0x60017E1")]
		[Address(RVA = "0x6AA16C", Offset = "0x6AA16C", VA = "0x6AA16C")]
		public HServerListRequest(IntPtr value)
		{
		}

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0x6AA174", Offset = "0x6AA174", VA = "0x6AA174", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0x6AA2B0", Offset = "0x6AA2B0", VA = "0x6AA2B0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0x6AA2B8", Offset = "0x6AA2B8", VA = "0x6AA2B8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0x6AA2A4", Offset = "0x6AA2A4", VA = "0x6AA2A4")]
		public static bool operator ==(HServerListRequest x, HServerListRequest y)
		{
			return default(bool);
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0x6AA2C4", Offset = "0x6AA2C4", VA = "0x6AA2C4")]
		public static bool operator !=(HServerListRequest x, HServerListRequest y)
		{
			return default(bool);
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0x6AA358", Offset = "0x6AA358", VA = "0x6AA358")]
		public static explicit operator HServerListRequest(IntPtr value)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0x6AA360", Offset = "0x6AA360", VA = "0x6AA360")]
		public static explicit operator IntPtr(HServerListRequest that)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0x6AA368", Offset = "0x6AA368", VA = "0x6AA368", Slot = "4")]
		public bool Equals(HServerListRequest other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000378")]
	public struct HServerQuery : IEquatable<HServerQuery>, IComparable<HServerQuery>
	{
		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HServerQuery Invalid;

		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HServerQuery;

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0xCB9B28", Offset = "0xCB9B28", VA = "0xCB9B28")]
		public HServerQuery(int value)
		{
		}

		[Token(Token = "0x60017EC")]
		[Address(RVA = "0xCB9B30", Offset = "0xCB9B30", VA = "0xCB9B30", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0xCB9C68", Offset = "0xCB9C68", VA = "0xCB9C68", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0xCB9C70", Offset = "0xCB9C70", VA = "0xCB9C70", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0xCB9C58", Offset = "0xCB9C58", VA = "0xCB9C58")]
		public static bool operator ==(HServerQuery x, HServerQuery y)
		{
			return default(bool);
		}

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0xCB9C7C", Offset = "0xCB9C7C", VA = "0xCB9C7C")]
		public static bool operator !=(HServerQuery x, HServerQuery y)
		{
			return default(bool);
		}

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0xCB9D04", Offset = "0xCB9D04", VA = "0xCB9D04")]
		public static explicit operator HServerQuery(int value)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x60017F2")]
		[Address(RVA = "0xCB9D0C", Offset = "0xCB9D0C", VA = "0xCB9D0C")]
		public static explicit operator int(HServerQuery that)
		{
			return default(int);
		}

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0xCB9D14", Offset = "0xCB9D14", VA = "0xCB9D14", Slot = "4")]
		public bool Equals(HServerQuery other)
		{
			return default(bool);
		}

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0xCB9D28", Offset = "0xCB9D28", VA = "0xCB9D28", Slot = "5")]
		public int CompareTo(HServerQuery other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000379")]
	public struct SNetListenSocket_t : IEquatable<SNetListenSocket_t>, IComparable<SNetListenSocket_t>
	{
		[Token(Token = "0x4001221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_SNetListenSocket;

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0x18E3350", Offset = "0x18E3350", VA = "0x18E3350")]
		public SNetListenSocket_t(uint value)
		{
		}

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0x18E3358", Offset = "0x18E3358", VA = "0x18E3358", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0x18E3408", Offset = "0x18E3408", VA = "0x18E3408", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0x18E3410", Offset = "0x18E3410", VA = "0x18E3410", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60017FA")]
		[Address(RVA = "0x18E33F8", Offset = "0x18E33F8", VA = "0x18E33F8")]
		public static bool operator ==(SNetListenSocket_t x, SNetListenSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0x18E341C", Offset = "0x18E341C", VA = "0x18E341C")]
		public static bool operator !=(SNetListenSocket_t x, SNetListenSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0x18E342C", Offset = "0x18E342C", VA = "0x18E342C")]
		public static explicit operator SNetListenSocket_t(uint value)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0x18E3434", Offset = "0x18E3434", VA = "0x18E3434")]
		public static explicit operator uint(SNetListenSocket_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0x18E343C", Offset = "0x18E343C", VA = "0x18E343C", Slot = "4")]
		public bool Equals(SNetListenSocket_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0x18E3450", Offset = "0x18E3450", VA = "0x18E3450", Slot = "5")]
		public int CompareTo(SNetListenSocket_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200037A")]
	public struct SNetSocket_t : IEquatable<SNetSocket_t>, IComparable<SNetSocket_t>
	{
		[Token(Token = "0x4001222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_SNetSocket;

		[Token(Token = "0x6001800")]
		[Address(RVA = "0x18E345C", Offset = "0x18E345C", VA = "0x18E345C")]
		public SNetSocket_t(uint value)
		{
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0x18E3464", Offset = "0x18E3464", VA = "0x18E3464", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001802")]
		[Address(RVA = "0x18E3514", Offset = "0x18E3514", VA = "0x18E3514", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001803")]
		[Address(RVA = "0x18E351C", Offset = "0x18E351C", VA = "0x18E351C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001804")]
		[Address(RVA = "0x18E3504", Offset = "0x18E3504", VA = "0x18E3504")]
		public static bool operator ==(SNetSocket_t x, SNetSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0x18E3528", Offset = "0x18E3528", VA = "0x18E3528")]
		public static bool operator !=(SNetSocket_t x, SNetSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001806")]
		[Address(RVA = "0x18E3538", Offset = "0x18E3538", VA = "0x18E3538")]
		public static explicit operator SNetSocket_t(uint value)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0x18E3540", Offset = "0x18E3540", VA = "0x18E3540")]
		public static explicit operator uint(SNetSocket_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0x18E3548", Offset = "0x18E3548", VA = "0x18E3548", Slot = "4")]
		public bool Equals(SNetSocket_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0x18E355C", Offset = "0x18E355C", VA = "0x18E355C", Slot = "5")]
		public int CompareTo(SNetSocket_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200037B")]
	public struct PublishedFileId_t : IEquatable<PublishedFileId_t>, IComparable<PublishedFileId_t>
	{
		[Token(Token = "0x4001223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PublishedFileId_t Invalid;

		[Token(Token = "0x4001224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_PublishedFileId;

		[Token(Token = "0x600180A")]
		[Address(RVA = "0x18E1834", Offset = "0x18E1834", VA = "0x18E1834")]
		public PublishedFileId_t(ulong value)
		{
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0x18E1844", Offset = "0x18E1844", VA = "0x18E1844", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0x18E1994", Offset = "0x18E1994", VA = "0x18E1994", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600180D")]
		[Address(RVA = "0x18E199C", Offset = "0x18E199C", VA = "0x18E199C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600180E")]
		[Address(RVA = "0x18E1974", Offset = "0x18E1974", VA = "0x18E1974")]
		public static bool operator ==(PublishedFileId_t x, PublishedFileId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600180F")]
		[Address(RVA = "0x18E19A8", Offset = "0x18E19A8", VA = "0x18E19A8")]
		public static bool operator !=(PublishedFileId_t x, PublishedFileId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001810")]
		[Address(RVA = "0x18E1A3C", Offset = "0x18E1A3C", VA = "0x18E1A3C")]
		public static explicit operator PublishedFileId_t(ulong value)
		{
			return default(PublishedFileId_t);
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0x18E1A4C", Offset = "0x18E1A4C", VA = "0x18E1A4C")]
		public static explicit operator ulong(PublishedFileId_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001812")]
		[Address(RVA = "0x18E1A58", Offset = "0x18E1A58", VA = "0x18E1A58", Slot = "4")]
		public bool Equals(PublishedFileId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001813")]
		[Address(RVA = "0x18E1A74", Offset = "0x18E1A74", VA = "0x18E1A74", Slot = "5")]
		public int CompareTo(PublishedFileId_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200037C")]
	public struct PublishedFileUpdateHandle_t : IEquatable<PublishedFileUpdateHandle_t>, IComparable<PublishedFileUpdateHandle_t>
	{
		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PublishedFileUpdateHandle_t Invalid;

		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_PublishedFileUpdateHandle;

		[Token(Token = "0x6001815")]
		[Address(RVA = "0x18E1B04", Offset = "0x18E1B04", VA = "0x18E1B04")]
		public PublishedFileUpdateHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6001816")]
		[Address(RVA = "0x18E1B14", Offset = "0x18E1B14", VA = "0x18E1B14", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0x18E1C64", Offset = "0x18E1C64", VA = "0x18E1C64", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001818")]
		[Address(RVA = "0x18E1C6C", Offset = "0x18E1C6C", VA = "0x18E1C6C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0x18E1C44", Offset = "0x18E1C44", VA = "0x18E1C44")]
		public static bool operator ==(PublishedFileUpdateHandle_t x, PublishedFileUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0x18E1C78", Offset = "0x18E1C78", VA = "0x18E1C78")]
		public static bool operator !=(PublishedFileUpdateHandle_t x, PublishedFileUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600181B")]
		[Address(RVA = "0x18E1D0C", Offset = "0x18E1D0C", VA = "0x18E1D0C")]
		public static explicit operator PublishedFileUpdateHandle_t(ulong value)
		{
			return default(PublishedFileUpdateHandle_t);
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0x18E1D1C", Offset = "0x18E1D1C", VA = "0x18E1D1C")]
		public static explicit operator ulong(PublishedFileUpdateHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0x18E1D28", Offset = "0x18E1D28", VA = "0x18E1D28", Slot = "4")]
		public bool Equals(PublishedFileUpdateHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0x18E1D44", Offset = "0x18E1D44", VA = "0x18E1D44", Slot = "5")]
		public int CompareTo(PublishedFileUpdateHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200037D")]
	public struct UGCFileWriteStreamHandle_t : IEquatable<UGCFileWriteStreamHandle_t>, IComparable<UGCFileWriteStreamHandle_t>
	{
		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCFileWriteStreamHandle_t Invalid;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCFileWriteStreamHandle;

		[Token(Token = "0x6001820")]
		[Address(RVA = "0x18F1458", Offset = "0x18F1458", VA = "0x18F1458")]
		public UGCFileWriteStreamHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6001821")]
		[Address(RVA = "0x18F1468", Offset = "0x18F1468", VA = "0x18F1468", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001822")]
		[Address(RVA = "0x18F15B8", Offset = "0x18F15B8", VA = "0x18F15B8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001823")]
		[Address(RVA = "0x18F15C0", Offset = "0x18F15C0", VA = "0x18F15C0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001824")]
		[Address(RVA = "0x18F1598", Offset = "0x18F1598", VA = "0x18F1598")]
		public static bool operator ==(UGCFileWriteStreamHandle_t x, UGCFileWriteStreamHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001825")]
		[Address(RVA = "0x18F15CC", Offset = "0x18F15CC", VA = "0x18F15CC")]
		public static bool operator !=(UGCFileWriteStreamHandle_t x, UGCFileWriteStreamHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001826")]
		[Address(RVA = "0x18EC8EC", Offset = "0x18EC8EC", VA = "0x18EC8EC")]
		public static explicit operator UGCFileWriteStreamHandle_t(ulong value)
		{
			return default(UGCFileWriteStreamHandle_t);
		}

		[Token(Token = "0x6001827")]
		[Address(RVA = "0x18F1660", Offset = "0x18F1660", VA = "0x18F1660")]
		public static explicit operator ulong(UGCFileWriteStreamHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001828")]
		[Address(RVA = "0x18F166C", Offset = "0x18F166C", VA = "0x18F166C", Slot = "4")]
		public bool Equals(UGCFileWriteStreamHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001829")]
		[Address(RVA = "0x18F1688", Offset = "0x18F1688", VA = "0x18F1688", Slot = "5")]
		public int CompareTo(UGCFileWriteStreamHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200037E")]
	public struct UGCHandle_t : IEquatable<UGCHandle_t>, IComparable<UGCHandle_t>
	{
		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCHandle_t Invalid;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCHandle;

		[Token(Token = "0x600182B")]
		[Address(RVA = "0x18F1718", Offset = "0x18F1718", VA = "0x18F1718")]
		public UGCHandle_t(ulong value)
		{
		}

		[Token(Token = "0x600182C")]
		[Address(RVA = "0x18F1728", Offset = "0x18F1728", VA = "0x18F1728", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600182D")]
		[Address(RVA = "0x18F1878", Offset = "0x18F1878", VA = "0x18F1878", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0x18F1880", Offset = "0x18F1880", VA = "0x18F1880", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0x18F1858", Offset = "0x18F1858", VA = "0x18F1858")]
		public static bool operator ==(UGCHandle_t x, UGCHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001830")]
		[Address(RVA = "0x18F188C", Offset = "0x18F188C", VA = "0x18F188C")]
		public static bool operator !=(UGCHandle_t x, UGCHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0x18ECE48", Offset = "0x18ECE48", VA = "0x18ECE48")]
		public static explicit operator UGCHandle_t(ulong value)
		{
			return default(UGCHandle_t);
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0x18F1920", Offset = "0x18F1920", VA = "0x18F1920")]
		public static explicit operator ulong(UGCHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001833")]
		[Address(RVA = "0x18F192C", Offset = "0x18F192C", VA = "0x18F192C", Slot = "4")]
		public bool Equals(UGCHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0x18F1948", Offset = "0x18F1948", VA = "0x18F1948", Slot = "5")]
		public int CompareTo(UGCHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200037F")]
	public struct ScreenshotHandle : IEquatable<ScreenshotHandle>, IComparable<ScreenshotHandle>
	{
		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ScreenshotHandle Invalid;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_ScreenshotHandle;

		[Token(Token = "0x6001836")]
		[Address(RVA = "0x18E2B18", Offset = "0x18E2B18", VA = "0x18E2B18")]
		public ScreenshotHandle(uint value)
		{
		}

		[Token(Token = "0x6001837")]
		[Address(RVA = "0x18E2B20", Offset = "0x18E2B20", VA = "0x18E2B20", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001838")]
		[Address(RVA = "0x18E2C58", Offset = "0x18E2C58", VA = "0x18E2C58", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001839")]
		[Address(RVA = "0x18E2C60", Offset = "0x18E2C60", VA = "0x18E2C60", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600183A")]
		[Address(RVA = "0x18E2C48", Offset = "0x18E2C48", VA = "0x18E2C48")]
		public static bool operator ==(ScreenshotHandle x, ScreenshotHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x600183B")]
		[Address(RVA = "0x18E2C6C", Offset = "0x18E2C6C", VA = "0x18E2C6C")]
		public static bool operator !=(ScreenshotHandle x, ScreenshotHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x600183C")]
		[Address(RVA = "0x18E2CF4", Offset = "0x18E2CF4", VA = "0x18E2CF4")]
		public static explicit operator ScreenshotHandle(uint value)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x600183D")]
		[Address(RVA = "0x18E2CFC", Offset = "0x18E2CFC", VA = "0x18E2CFC")]
		public static explicit operator uint(ScreenshotHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0x18E2D04", Offset = "0x18E2D04", VA = "0x18E2D04", Slot = "4")]
		public bool Equals(ScreenshotHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x600183F")]
		[Address(RVA = "0x18E2D18", Offset = "0x18E2D18", VA = "0x18E2D18", Slot = "5")]
		public int CompareTo(ScreenshotHandle other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000380")]
	public struct AccountID_t : IEquatable<AccountID_t>, IComparable<AccountID_t>
	{
		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_AccountID;

		[Token(Token = "0x6001841")]
		[Address(RVA = "0x6A6450", Offset = "0x6A6450", VA = "0x6A6450")]
		public AccountID_t(uint value)
		{
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0x6A6458", Offset = "0x6A6458", VA = "0x6A6458", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0x6A6508", Offset = "0x6A6508", VA = "0x6A6508", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001844")]
		[Address(RVA = "0x6A6510", Offset = "0x6A6510", VA = "0x6A6510", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001845")]
		[Address(RVA = "0x6A64F8", Offset = "0x6A64F8", VA = "0x6A64F8")]
		public static bool operator ==(AccountID_t x, AccountID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0x6A651C", Offset = "0x6A651C", VA = "0x6A651C")]
		public static bool operator !=(AccountID_t x, AccountID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0x6A652C", Offset = "0x6A652C", VA = "0x6A652C")]
		public static explicit operator AccountID_t(uint value)
		{
			return default(AccountID_t);
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0x6A6534", Offset = "0x6A6534", VA = "0x6A6534")]
		public static explicit operator uint(AccountID_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0x6A653C", Offset = "0x6A653C", VA = "0x6A653C", Slot = "4")]
		public bool Equals(AccountID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x600184A")]
		[Address(RVA = "0x6A6550", Offset = "0x6A6550", VA = "0x6A6550", Slot = "5")]
		public int CompareTo(AccountID_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000381")]
	public struct AppId_t : IEquatable<AppId_t>, IComparable<AppId_t>
	{
		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly AppId_t Invalid;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_AppId;

		[Token(Token = "0x600184B")]
		[Address(RVA = "0x6A655C", Offset = "0x6A655C", VA = "0x6A655C")]
		public AppId_t(uint value)
		{
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0x6A6564", Offset = "0x6A6564", VA = "0x6A6564", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600184D")]
		[Address(RVA = "0x6A669C", Offset = "0x6A669C", VA = "0x6A669C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0x6A66A4", Offset = "0x6A66A4", VA = "0x6A66A4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600184F")]
		[Address(RVA = "0x6A668C", Offset = "0x6A668C", VA = "0x6A668C")]
		public static bool operator ==(AppId_t x, AppId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001850")]
		[Address(RVA = "0x6A66B0", Offset = "0x6A66B0", VA = "0x6A66B0")]
		public static bool operator !=(AppId_t x, AppId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0x6A6738", Offset = "0x6A6738", VA = "0x6A6738")]
		public static explicit operator AppId_t(uint value)
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6001852")]
		[Address(RVA = "0x6A6740", Offset = "0x6A6740", VA = "0x6A6740")]
		public static explicit operator uint(AppId_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6001853")]
		[Address(RVA = "0x6A6748", Offset = "0x6A6748", VA = "0x6A6748", Slot = "4")]
		public bool Equals(AppId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0x6A675C", Offset = "0x6A675C", VA = "0x6A675C", Slot = "5")]
		public int CompareTo(AppId_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000382")]
	public struct DepotId_t : IEquatable<DepotId_t>, IComparable<DepotId_t>
	{
		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DepotId_t Invalid;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_DepotId;

		[Token(Token = "0x6001856")]
		[Address(RVA = "0x6A8370", Offset = "0x6A8370", VA = "0x6A8370")]
		public DepotId_t(uint value)
		{
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0x6A8378", Offset = "0x6A8378", VA = "0x6A8378", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0x6A84B0", Offset = "0x6A84B0", VA = "0x6A84B0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0x6A84B8", Offset = "0x6A84B8", VA = "0x6A84B8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0x6A84A0", Offset = "0x6A84A0", VA = "0x6A84A0")]
		public static bool operator ==(DepotId_t x, DepotId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0x6A84C4", Offset = "0x6A84C4", VA = "0x6A84C4")]
		public static bool operator !=(DepotId_t x, DepotId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0x6A854C", Offset = "0x6A854C", VA = "0x6A854C")]
		public static explicit operator DepotId_t(uint value)
		{
			return default(DepotId_t);
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0x6A8554", Offset = "0x6A8554", VA = "0x6A8554")]
		public static explicit operator uint(DepotId_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0x6A855C", Offset = "0x6A855C", VA = "0x6A855C", Slot = "4")]
		public bool Equals(DepotId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0x6A8570", Offset = "0x6A8570", VA = "0x6A8570", Slot = "5")]
		public int CompareTo(DepotId_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000383")]
	public struct ManifestId_t : IEquatable<ManifestId_t>, IComparable<ManifestId_t>
	{
		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ManifestId_t Invalid;

		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamAPICall;

		[Token(Token = "0x6001861")]
		[Address(RVA = "0xCC1450", Offset = "0xCC1450", VA = "0xCC1450")]
		public ManifestId_t(ulong value)
		{
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0xCC1460", Offset = "0xCC1460", VA = "0xCC1460", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0xCC15B0", Offset = "0xCC15B0", VA = "0xCC15B0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0xCC15B8", Offset = "0xCC15B8", VA = "0xCC15B8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0xCC1590", Offset = "0xCC1590", VA = "0xCC1590")]
		public static bool operator ==(ManifestId_t x, ManifestId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0xCC15C4", Offset = "0xCC15C4", VA = "0xCC15C4")]
		public static bool operator !=(ManifestId_t x, ManifestId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0xCC1658", Offset = "0xCC1658", VA = "0xCC1658")]
		public static explicit operator ManifestId_t(ulong value)
		{
			return default(ManifestId_t);
		}

		[Token(Token = "0x6001868")]
		[Address(RVA = "0xCC1668", Offset = "0xCC1668", VA = "0xCC1668")]
		public static explicit operator ulong(ManifestId_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001869")]
		[Address(RVA = "0xCC1674", Offset = "0xCC1674", VA = "0xCC1674", Slot = "4")]
		public bool Equals(ManifestId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x600186A")]
		[Address(RVA = "0xCC1690", Offset = "0xCC1690", VA = "0xCC1690", Slot = "5")]
		public int CompareTo(ManifestId_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000384")]
	public struct SteamAPICall_t : IEquatable<SteamAPICall_t>, IComparable<SteamAPICall_t>
	{
		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamAPICall_t Invalid;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamAPICall;

		[Token(Token = "0x600186C")]
		[Address(RVA = "0x18E3DD4", Offset = "0x18E3DD4", VA = "0x18E3DD4")]
		public SteamAPICall_t(ulong value)
		{
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0x18E3DE4", Offset = "0x18E3DE4", VA = "0x18E3DE4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0x18E3F34", Offset = "0x18E3F34", VA = "0x18E3F34", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0x18E3F3C", Offset = "0x18E3F3C", VA = "0x18E3F3C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001870")]
		[Address(RVA = "0x18E3F14", Offset = "0x18E3F14", VA = "0x18E3F14")]
		public static bool operator ==(SteamAPICall_t x, SteamAPICall_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0x18E3F48", Offset = "0x18E3F48", VA = "0x18E3F48")]
		public static bool operator !=(SteamAPICall_t x, SteamAPICall_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001872")]
		[Address(RVA = "0x18E3FDC", Offset = "0x18E3FDC", VA = "0x18E3FDC")]
		public static explicit operator SteamAPICall_t(ulong value)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6001873")]
		[Address(RVA = "0x18E3FEC", Offset = "0x18E3FEC", VA = "0x18E3FEC")]
		public static explicit operator ulong(SteamAPICall_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001874")]
		[Address(RVA = "0x18E3FF8", Offset = "0x18E3FF8", VA = "0x18E3FF8", Slot = "4")]
		public bool Equals(SteamAPICall_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001875")]
		[Address(RVA = "0x18E4014", Offset = "0x18E4014", VA = "0x18E4014", Slot = "5")]
		public int CompareTo(SteamAPICall_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000385")]
	public struct UGCQueryHandle_t : IEquatable<UGCQueryHandle_t>, IComparable<UGCQueryHandle_t>
	{
		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCQueryHandle_t Invalid;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCQueryHandle;

		[Token(Token = "0x6001877")]
		[Address(RVA = "0x18F19D8", Offset = "0x18F19D8", VA = "0x18F19D8")]
		public UGCQueryHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6001878")]
		[Address(RVA = "0x18F19E8", Offset = "0x18F19E8", VA = "0x18F19E8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001879")]
		[Address(RVA = "0x18F1B38", Offset = "0x18F1B38", VA = "0x18F1B38", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0x18F1B40", Offset = "0x18F1B40", VA = "0x18F1B40", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0x18F1B18", Offset = "0x18F1B18", VA = "0x18F1B18")]
		public static bool operator ==(UGCQueryHandle_t x, UGCQueryHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600187C")]
		[Address(RVA = "0x18F1B4C", Offset = "0x18F1B4C", VA = "0x18F1B4C")]
		public static bool operator !=(UGCQueryHandle_t x, UGCQueryHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600187D")]
		[Address(RVA = "0x18EE2A0", Offset = "0x18EE2A0", VA = "0x18EE2A0")]
		public static explicit operator UGCQueryHandle_t(ulong value)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x600187E")]
		[Address(RVA = "0x18F1BE0", Offset = "0x18F1BE0", VA = "0x18F1BE0")]
		public static explicit operator ulong(UGCQueryHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x600187F")]
		[Address(RVA = "0x18F1BEC", Offset = "0x18F1BEC", VA = "0x18F1BEC", Slot = "4")]
		public bool Equals(UGCQueryHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001880")]
		[Address(RVA = "0x18F1C08", Offset = "0x18F1C08", VA = "0x18F1C08", Slot = "5")]
		public int CompareTo(UGCQueryHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000386")]
	public struct UGCUpdateHandle_t : IEquatable<UGCUpdateHandle_t>, IComparable<UGCUpdateHandle_t>
	{
		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCUpdateHandle_t Invalid;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCQueryHandle;

		[Token(Token = "0x6001882")]
		[Address(RVA = "0x18F1C98", Offset = "0x18F1C98", VA = "0x18F1C98")]
		public UGCUpdateHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6001883")]
		[Address(RVA = "0x18F1CA8", Offset = "0x18F1CA8", VA = "0x18F1CA8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001884")]
		[Address(RVA = "0x18F1DF8", Offset = "0x18F1DF8", VA = "0x18F1DF8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001885")]
		[Address(RVA = "0x18F1E00", Offset = "0x18F1E00", VA = "0x18F1E00", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001886")]
		[Address(RVA = "0x18F1DD8", Offset = "0x18F1DD8", VA = "0x18F1DD8")]
		public static bool operator ==(UGCUpdateHandle_t x, UGCUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001887")]
		[Address(RVA = "0x18F1E0C", Offset = "0x18F1E0C", VA = "0x18F1E0C")]
		public static bool operator !=(UGCUpdateHandle_t x, UGCUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001888")]
		[Address(RVA = "0x18EE950", Offset = "0x18EE950", VA = "0x18EE950")]
		public static explicit operator UGCUpdateHandle_t(ulong value)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6001889")]
		[Address(RVA = "0x18F1EA0", Offset = "0x18F1EA0", VA = "0x18F1EA0")]
		public static explicit operator ulong(UGCUpdateHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x600188A")]
		[Address(RVA = "0x18F1EAC", Offset = "0x18F1EAC", VA = "0x18F1EAC", Slot = "4")]
		public bool Equals(UGCUpdateHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x600188B")]
		[Address(RVA = "0x18F1EC8", Offset = "0x18F1EC8", VA = "0x18F1EC8", Slot = "5")]
		public int CompareTo(UGCUpdateHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000387")]
	public struct ClientUnifiedMessageHandle : IEquatable<ClientUnifiedMessageHandle>, IComparable<ClientUnifiedMessageHandle>
	{
		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ClientUnifiedMessageHandle Invalid;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ClientUnifiedMessageHandle;

		[Token(Token = "0x600188D")]
		[Address(RVA = "0x6A79EC", Offset = "0x6A79EC", VA = "0x6A79EC")]
		public ClientUnifiedMessageHandle(ulong value)
		{
		}

		[Token(Token = "0x600188E")]
		[Address(RVA = "0x6A79FC", Offset = "0x6A79FC", VA = "0x6A79FC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600188F")]
		[Address(RVA = "0x6A7B4C", Offset = "0x6A7B4C", VA = "0x6A7B4C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001890")]
		[Address(RVA = "0x6A7B54", Offset = "0x6A7B54", VA = "0x6A7B54", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0x6A7B2C", Offset = "0x6A7B2C", VA = "0x6A7B2C")]
		public static bool operator ==(ClientUnifiedMessageHandle x, ClientUnifiedMessageHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001892")]
		[Address(RVA = "0x6A7B60", Offset = "0x6A7B60", VA = "0x6A7B60")]
		public static bool operator !=(ClientUnifiedMessageHandle x, ClientUnifiedMessageHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001893")]
		[Address(RVA = "0x6A7BF4", Offset = "0x6A7BF4", VA = "0x6A7BF4")]
		public static explicit operator ClientUnifiedMessageHandle(ulong value)
		{
			return default(ClientUnifiedMessageHandle);
		}

		[Token(Token = "0x6001894")]
		[Address(RVA = "0x6A7C04", Offset = "0x6A7C04", VA = "0x6A7C04")]
		public static explicit operator ulong(ClientUnifiedMessageHandle that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6001895")]
		[Address(RVA = "0x6A7C10", Offset = "0x6A7C10", VA = "0x6A7C10", Slot = "4")]
		public bool Equals(ClientUnifiedMessageHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6001896")]
		[Address(RVA = "0x6A7C2C", Offset = "0x6A7C2C", VA = "0x6A7C2C", Slot = "5")]
		public int CompareTo(ClientUnifiedMessageHandle other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000388")]
	public struct SteamLeaderboard_t : IEquatable<SteamLeaderboard_t>, IComparable<SteamLeaderboard_t>
	{
		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamLeaderboard;

		[Token(Token = "0x6001898")]
		[Address(RVA = "0x18E9DF4", Offset = "0x18E9DF4", VA = "0x18E9DF4")]
		public SteamLeaderboard_t(ulong value)
		{
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0x18E9E04", Offset = "0x18E9E04", VA = "0x18E9E04", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600189A")]
		[Address(RVA = "0x18E9ECC", Offset = "0x18E9ECC", VA = "0x18E9ECC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x600189B")]
		[Address(RVA = "0x18E9ED4", Offset = "0x18E9ED4", VA = "0x18E9ED4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600189C")]
		[Address(RVA = "0x18E9EAC", Offset = "0x18E9EAC", VA = "0x18E9EAC")]
		public static bool operator ==(SteamLeaderboard_t x, SteamLeaderboard_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600189D")]
		[Address(RVA = "0x18E9EE0", Offset = "0x18E9EE0", VA = "0x18E9EE0")]
		public static bool operator !=(SteamLeaderboard_t x, SteamLeaderboard_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0x18E9EFC", Offset = "0x18E9EFC", VA = "0x18E9EFC")]
		public static explicit operator SteamLeaderboard_t(ulong value)
		{
			return default(SteamLeaderboard_t);
		}

		[Token(Token = "0x600189F")]
		[Address(RVA = "0x18E9F0C", Offset = "0x18E9F0C", VA = "0x18E9F0C")]
		public static explicit operator ulong(SteamLeaderboard_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0x18E9F18", Offset = "0x18E9F18", VA = "0x18E9F18", Slot = "4")]
		public bool Equals(SteamLeaderboard_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0x18E9F34", Offset = "0x18E9F34", VA = "0x18E9F34", Slot = "5")]
		public int CompareTo(SteamLeaderboard_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000389")]
	public struct SteamLeaderboardEntries_t : IEquatable<SteamLeaderboardEntries_t>, IComparable<SteamLeaderboardEntries_t>
	{
		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamLeaderboardEntries;

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0x18E9F58", Offset = "0x18E9F58", VA = "0x18E9F58")]
		public SteamLeaderboardEntries_t(ulong value)
		{
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0x18E9F68", Offset = "0x18E9F68", VA = "0x18E9F68", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0x18EA030", Offset = "0x18EA030", VA = "0x18EA030", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0x18EA038", Offset = "0x18EA038", VA = "0x18EA038", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60018A6")]
		[Address(RVA = "0x18EA010", Offset = "0x18EA010", VA = "0x18EA010")]
		public static bool operator ==(SteamLeaderboardEntries_t x, SteamLeaderboardEntries_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0x18EA044", Offset = "0x18EA044", VA = "0x18EA044")]
		public static bool operator !=(SteamLeaderboardEntries_t x, SteamLeaderboardEntries_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0x18EA060", Offset = "0x18EA060", VA = "0x18EA060")]
		public static explicit operator SteamLeaderboardEntries_t(ulong value)
		{
			return default(SteamLeaderboardEntries_t);
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0x18EA070", Offset = "0x18EA070", VA = "0x18EA070")]
		public static explicit operator ulong(SteamLeaderboardEntries_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0x18EA07C", Offset = "0x18EA07C", VA = "0x18EA07C", Slot = "4")]
		public bool Equals(SteamLeaderboardEntries_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0x18EA098", Offset = "0x18EA098", VA = "0x18EA098", Slot = "5")]
		public int CompareTo(SteamLeaderboardEntries_t other)
		{
			return default(int);
		}
	}
}
[Token(Token = "0x200038A")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA00C0", Offset = "0xEA00C0")]
public class BrightnessControl : MonoBehaviour
{
	[Token(Token = "0x400123E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private RefInt m_objectNumber;

	[Token(Token = "0x400123F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private VectorLine m_vectorLine;

	[Token(Token = "0x4001240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool m_useLine;

	[Token(Token = "0x4001241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	private bool m_destroyed;

	[Token(Token = "0x17000137")]
	public RefInt objectNumber
	{
		[Token(Token = "0x60018AD")]
		[Address(RVA = "0x19DE548", Offset = "0x19DE548", VA = "0x19DE548")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60018AC")]
	[Address(RVA = "0x19DE540", Offset = "0x19DE540", VA = "0x19DE540")]
	public BrightnessControl()
	{
	}

	[Token(Token = "0x60018AE")]
	[Address(RVA = "0x19DE550", Offset = "0x19DE550", VA = "0x19DE550")]
	public void Setup(VectorLine line, bool m_useLine)
	{
	}

	[Token(Token = "0x60018AF")]
	[Address(RVA = "0x19DE684", Offset = "0x19DE684", VA = "0x19DE684")]
	public void SetUseLine(bool useLine)
	{
	}

	[Token(Token = "0x60018B0")]
	[Address(RVA = "0x19DE68C", Offset = "0x19DE68C", VA = "0x19DE68C")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x60018B1")]
	[Address(RVA = "0x19DE778", Offset = "0x19DE778", VA = "0x19DE778")]
	public void OnBecameInvisible()
	{
	}

	[Token(Token = "0x60018B2")]
	[Address(RVA = "0x19DE7B0", Offset = "0x19DE7B0", VA = "0x19DE7B0")]
	private void OnDestroy()
	{
	}
}
[Token(Token = "0x200038B")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA00F4", Offset = "0xEA00F4")]
public class LineManager : MonoBehaviour
{
	[Token(Token = "0x200053B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0138", Offset = "0xEA0138")]
	private sealed class <DisableLine>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float time;

		[Token(Token = "0x4001AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal bool remove;

		[Token(Token = "0x4001AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal VectorLine vectorLine;

		[Token(Token = "0x4001AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal LineManager $this;

		[Token(Token = "0x4001AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal object $current;

		[Token(Token = "0x4001AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal bool $disposing;

		[Token(Token = "0x4001AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal int $PC;

		[Token(Token = "0x170002C6")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x6002498")]
			[Address(RVA = "0x1952410", Offset = "0x1952410", VA = "0x1952410", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6002499")]
			[Address(RVA = "0x1952418", Offset = "0x1952418", VA = "0x1952418", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002496")]
		[Address(RVA = "0x195192C", Offset = "0x195192C", VA = "0x195192C")]
		[DebuggerHidden]
		public <DisableLine>c__Iterator0()
		{
		}

		[Token(Token = "0x6002497")]
		[Address(RVA = "0x19522C8", Offset = "0x19522C8", VA = "0x19522C8", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600249A")]
		[Address(RVA = "0x1952420", Offset = "0x1952420", VA = "0x1952420", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x600249B")]
		[Address(RVA = "0x1952434", Offset = "0x1952434", VA = "0x1952434", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4001242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<VectorLine> lines;

	[Token(Token = "0x4001243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static List<Transform> transforms;

	[Token(Token = "0x4001244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int lineCount;

	[Token(Token = "0x4001245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private bool destroyed;

	[Token(Token = "0x60018B3")]
	[Address(RVA = "0x195148C", Offset = "0x195148C", VA = "0x195148C")]
	public LineManager()
	{
	}

	[Token(Token = "0x60018B4")]
	[Address(RVA = "0x1951494", Offset = "0x1951494", VA = "0x1951494")]
	private void Awake()
	{
	}

	[Token(Token = "0x60018B5")]
	[Address(RVA = "0x19515D8", Offset = "0x19515D8", VA = "0x19515D8")]
	public void AddLine(VectorLine vectorLine, Transform thisTransform, float time)
	{
	}

	[Token(Token = "0x60018B6")]
	[Address(RVA = "0x19518FC", Offset = "0x19518FC", VA = "0x19518FC")]
	public void DisableLine(VectorLine vectorLine, float time)
	{
	}

	[Token(Token = "0x60018B7")]
	[Address(RVA = "0x1951830", Offset = "0x1951830", VA = "0x1951830")]
	[DebuggerHidden]
	private IEnumerator DisableLine(VectorLine vectorLine, float time, bool remove)
	{
		return null;
	}

	[Token(Token = "0x60018B8")]
	[Address(RVA = "0x1951934", Offset = "0x1951934", VA = "0x1951934")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60018B9")]
	[Address(RVA = "0x1951CE0", Offset = "0x1951CE0", VA = "0x1951CE0")]
	private void RemoveLine(int i)
	{
	}

	[Token(Token = "0x60018BA")]
	[Address(RVA = "0x1951F3C", Offset = "0x1951F3C", VA = "0x1951F3C")]
	public void RemoveLine(VectorLine vectorLine)
	{
	}

	[Token(Token = "0x60018BB")]
	[Address(RVA = "0x1951E04", Offset = "0x1951E04", VA = "0x1951E04")]
	public void DisableIfUnused()
	{
	}

	[Token(Token = "0x60018BC")]
	[Address(RVA = "0x195209C", Offset = "0x195209C", VA = "0x195209C")]
	public void EnableIfUsed()
	{
	}

	[Token(Token = "0x60018BD")]
	[Address(RVA = "0x1952178", Offset = "0x1952178", VA = "0x1952178")]
	public void StartCheckDistance()
	{
	}

	[Token(Token = "0x60018BE")]
	[Address(RVA = "0x1952238", Offset = "0x1952238", VA = "0x1952238")]
	private void CheckDistance()
	{
	}

	[Token(Token = "0x60018BF")]
	[Address(RVA = "0x19522B8", Offset = "0x19522B8", VA = "0x19522B8")]
	private void OnDestroy()
	{
	}
}
[Token(Token = "0x200038C")]
public class RefInt
{
	[Token(Token = "0x4001246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public int i;

	[Token(Token = "0x60018C1")]
	[Address(RVA = "0x1B3C3D0", Offset = "0x1B3C3D0", VA = "0x1B3C3D0")]
	public RefInt(int value)
	{
	}
}
[Token(Token = "0x200038D")]
public class VectorChar
{
	[Token(Token = "0x4001247")]
	public const int numberOfCharacters = 128;

	[Token(Token = "0x4001248")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Vector2[][] points;

	[Token(Token = "0x17000138")]
	public static Vector2[][] data
	{
		[Token(Token = "0x60018C3")]
		[Address(RVA = "0x17FF060", Offset = "0x17FF060", VA = "0x17FF060")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60018C2")]
	[Address(RVA = "0x17FF058", Offset = "0x17FF058", VA = "0x17FF058")]
	public VectorChar()
	{
	}
}
namespace Vectrosity
{
	[Token(Token = "0x200038E")]
	public enum LineType
	{
		[Token(Token = "0x400124A")]
		Continuous,
		[Token(Token = "0x400124B")]
		Discrete
	}
	[Token(Token = "0x200038F")]
	public enum Joins
	{
		[Token(Token = "0x400124D")]
		Fill,
		[Token(Token = "0x400124E")]
		Weld,
		[Token(Token = "0x400124F")]
		None
	}
	[Token(Token = "0x2000390")]
	public enum EndCap
	{
		[Token(Token = "0x4001251")]
		Front,
		[Token(Token = "0x4001252")]
		Both,
		[Token(Token = "0x4001253")]
		Mirror,
		[Token(Token = "0x4001254")]
		Back,
		[Token(Token = "0x4001255")]
		None
	}
	[Token(Token = "0x2000391")]
	public enum Visibility
	{
		[Token(Token = "0x4001257")]
		Dynamic,
		[Token(Token = "0x4001258")]
		Static,
		[Token(Token = "0x4001259")]
		Always,
		[Token(Token = "0x400125A")]
		None
	}
	[Token(Token = "0x2000392")]
	public enum Brightness
	{
		[Token(Token = "0x400125C")]
		Fog,
		[Token(Token = "0x400125D")]
		None
	}
	[Token(Token = "0x2000393")]
	public class VectorLine
	{
		[Token(Token = "0x2000394")]
		private enum FunctionName
		{
			[Token(Token = "0x40012AB")]
			SetColors,
			[Token(Token = "0x40012AC")]
			SetColorsSmooth,
			[Token(Token = "0x40012AD")]
			SetWidths,
			[Token(Token = "0x40012AE")]
			MakeCurve,
			[Token(Token = "0x40012AF")]
			MakeSpline,
			[Token(Token = "0x40012B0")]
			MakeEllipse
		}

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject vectorObject;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private MeshFilter m_meshFilter;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Mesh m_mesh;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Vector3[] m_lineVertices;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vector2[] m_lineUVs;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Color32[] m_lineColors;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2[] points2;

		[Token(Token = "0x4001265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3[] points3;

		[Token(Token = "0x4001266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int m_pointsLength;

		[Token(Token = "0x4001267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool m_is2D;

		[Token(Token = "0x4001268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3[] m_screenPoints;

		[Token(Token = "0x4001269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float[] m_lineWidths;

		[Token(Token = "0x400126A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_maxWeldDistance;

		[Token(Token = "0x400126B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float[] m_distances;

		[Token(Token = "0x400126C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string m_name;

		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Material m_material;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool m_active;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float capLength;

		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_depth;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool smoothWidth;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_layer;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool m_continuous;

		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Joins m_joins;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool m_isPoints;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int m_maxDrawIndex;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int m_minDrawIndex;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int m_drawStart;

		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_drawEnd;

		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool m_useNormals;

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool m_useTangents;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
		private bool m_normalsCalculated;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7B")]
		private bool m_tangentsCalculated;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int m_triangleCount;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int m_vertexCount;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private EndCap m_capType;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private string m_endCap;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool m_continuousTexture;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		private bool m_1pixelLine;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool m_useMeshQuads;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static bool m_useMeshLines;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		private static bool m_useMeshPoints;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		private static bool m_meshRenderMethodSet;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static Material defaultMaterial;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Camera cam;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static Transform camTransform;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Camera cam3D;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static Vector3 oldPosition;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Vector3 oldRotation;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static int _vectorLayer;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static int _vectorLayer3D;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static float zDist;

		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private static bool useOrthoCam;

		[Token(Token = "0x4001293")]
		private const float cutoff = 0.15f;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private static bool error;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		private static bool lineManagerCreated;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static LineManager _lineManager;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private static int widthIdxAdd;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static int m_screenWidth;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private static int m_screenHeight;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static Dictionary<string, CapInfo> capDictionary;

		[Token(Token = "0x400129B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private static string[] functionNames;

		[Token(Token = "0x400129C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static Material defaultLineMaterial;

		[Token(Token = "0x400129D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private static float defaultLineWidth;

		[Token(Token = "0x400129E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static int defaultLineDepth;

		[Token(Token = "0x400129F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private static float defaultCapLength;

		[Token(Token = "0x40012A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static Color defaultLineColor;

		[Token(Token = "0x40012A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static LineType defaultLineType;

		[Token(Token = "0x40012A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private static Joins defaultJoins;

		[Token(Token = "0x40012A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private static bool defaultsSet;

		[Token(Token = "0x40012A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private static Vector3 v1;

		[Token(Token = "0x40012A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private static Vector3 v2;

		[Token(Token = "0x40012A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private static Vector3 v3;

		[Token(Token = "0x40012A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private static int endianDiff1;

		[Token(Token = "0x40012A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private static int endianDiff2;

		[Token(Token = "0x40012A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private static byte[] byteBlock;

		[Token(Token = "0x17000139")]
		public Mesh mesh
		{
			[Token(Token = "0x60018DC")]
			[Address(RVA = "0x181592C", Offset = "0x181592C", VA = "0x181592C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013A")]
		public Color color
		{
			[Token(Token = "0x60018DD")]
			[Address(RVA = "0x1815934", Offset = "0x1815934", VA = "0x1815934")]
			get
			{
				return default(Color);
			}
		}

		[Token(Token = "0x1700013B")]
		public float lineWidth
		{
			[Token(Token = "0x60018DE")]
			[Address(RVA = "0x1815980", Offset = "0x1815980", VA = "0x1815980")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018DF")]
			[Address(RVA = "0x18159C0", Offset = "0x18159C0", VA = "0x18159C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public float maxWeldDistance
		{
			[Token(Token = "0x60018E0")]
			[Address(RVA = "0x1815CC4", Offset = "0x1815CC4", VA = "0x1815CC4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018E1")]
			[Address(RVA = "0x1815D68", Offset = "0x1815D68", VA = "0x1815D68")]
			set
			{
			}
		}

		[Token(Token = "0x1700013D")]
		public string name
		{
			[Token(Token = "0x60018E2")]
			[Address(RVA = "0x1815D78", Offset = "0x1815D78", VA = "0x1815D78")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018E3")]
			[Address(RVA = "0x1815D80", Offset = "0x1815D80", VA = "0x1815D80")]
			set
			{
			}
		}

		[Token(Token = "0x1700013E")]
		public Material material
		{
			[Token(Token = "0x60018E4")]
			[Address(RVA = "0x1815EFC", Offset = "0x1815EFC", VA = "0x1815EFC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018E5")]
			[Address(RVA = "0x1815F04", Offset = "0x1815F04", VA = "0x1815F04")]
			set
			{
			}
		}

		[Token(Token = "0x1700013F")]
		public bool active
		{
			[Token(Token = "0x60018E6")]
			[Address(RVA = "0x180FE38", Offset = "0x180FE38", VA = "0x180FE38")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018E7")]
			[Address(RVA = "0x1815FA4", Offset = "0x1815FA4", VA = "0x1815FA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000140")]
		public int depth
		{
			[Token(Token = "0x60018E8")]
			[Address(RVA = "0x1816098", Offset = "0x1816098", VA = "0x1816098")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60018E9")]
			[Address(RVA = "0x18160A0", Offset = "0x18160A0", VA = "0x18160A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000141")]
		public int layer
		{
			[Token(Token = "0x60018EA")]
			[Address(RVA = "0x1816144", Offset = "0x1816144", VA = "0x1816144")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60018EB")]
			[Address(RVA = "0x181614C", Offset = "0x181614C", VA = "0x181614C")]
			set
			{
			}
		}

		[Token(Token = "0x17000142")]
		public bool continuous
		{
			[Token(Token = "0x60018EC")]
			[Address(RVA = "0x1816230", Offset = "0x1816230", VA = "0x1816230")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000143")]
		public Joins joins
		{
			[Token(Token = "0x60018ED")]
			[Address(RVA = "0x1816238", Offset = "0x1816238", VA = "0x1816238")]
			get
			{
				return default(Joins);
			}
			[Token(Token = "0x60018EE")]
			[Address(RVA = "0x1816240", Offset = "0x1816240", VA = "0x1816240")]
			set
			{
			}
		}

		[Token(Token = "0x17000144")]
		public int maxDrawIndex
		{
			[Token(Token = "0x60018EF")]
			[Address(RVA = "0x1816264", Offset = "0x1816264", VA = "0x1816264")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60018F0")]
			[Address(RVA = "0x181626C", Offset = "0x181626C", VA = "0x181626C")]
			set
			{
			}
		}

		[Token(Token = "0x17000145")]
		public int minDrawIndex
		{
			[Token(Token = "0x60018F1")]
			[Address(RVA = "0x1816304", Offset = "0x1816304", VA = "0x1816304")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60018F2")]
			[Address(RVA = "0x181630C", Offset = "0x181630C", VA = "0x181630C")]
			set
			{
			}
		}

		[Token(Token = "0x17000146")]
		public int drawStart
		{
			[Token(Token = "0x60018F3")]
			[Address(RVA = "0x18163BC", Offset = "0x18163BC", VA = "0x18163BC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60018F4")]
			[Address(RVA = "0x18163C4", Offset = "0x18163C4", VA = "0x18163C4")]
			set
			{
			}
		}

		[Token(Token = "0x17000147")]
		public int drawEnd
		{
			[Token(Token = "0x60018F5")]
			[Address(RVA = "0x18164EC", Offset = "0x18164EC", VA = "0x18164EC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60018F6")]
			[Address(RVA = "0x18164F4", Offset = "0x18164F4", VA = "0x18164F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000148")]
		public string endCap
		{
			[Token(Token = "0x60018F7")]
			[Address(RVA = "0x1816618", Offset = "0x1816618", VA = "0x1816618")]
			get
			{
				return null;
			}
			[Token(Token = "0x60018F8")]
			[Address(RVA = "0x1816620", Offset = "0x1816620", VA = "0x1816620")]
			set
			{
			}
		}

		[Token(Token = "0x17000149")]
		public bool continuousTexture
		{
			[Token(Token = "0x60018F9")]
			[Address(RVA = "0x18178C0", Offset = "0x18178C0", VA = "0x18178C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018FA")]
			[Address(RVA = "0x18178C8", Offset = "0x18178C8", VA = "0x18178C8")]
			set
			{
			}
		}

		[Token(Token = "0x1700014A")]
		public static bool useMeshQuads
		{
			[Token(Token = "0x60018FB")]
			[Address(RVA = "0x1817A28", Offset = "0x1817A28", VA = "0x1817A28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018FC")]
			[Address(RVA = "0x1817AB4", Offset = "0x1817AB4", VA = "0x1817AB4")]
			set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public static bool useMeshLines
		{
			[Token(Token = "0x60018FD")]
			[Address(RVA = "0x1817BCC", Offset = "0x1817BCC", VA = "0x1817BCC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018FE")]
			[Address(RVA = "0x1817C58", Offset = "0x1817C58", VA = "0x1817C58")]
			set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		public static bool useMeshPoints
		{
			[Token(Token = "0x60018FF")]
			[Address(RVA = "0x1817D70", Offset = "0x1817D70", VA = "0x1817D70")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001900")]
			[Address(RVA = "0x1817DFC", Offset = "0x1817DFC", VA = "0x1817DFC")]
			set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public static Vector3 camTransformPosition
		{
			[Token(Token = "0x6001910")]
			[Address(RVA = "0x180D6C8", Offset = "0x180D6C8", VA = "0x180D6C8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700014E")]
		public static bool camTransformExists
		{
			[Token(Token = "0x6001911")]
			[Address(RVA = "0x181A704", Offset = "0x181A704", VA = "0x181A704")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014F")]
		public static int vectorLayer
		{
			[Token(Token = "0x6001912")]
			[Address(RVA = "0x1817F14", Offset = "0x1817F14", VA = "0x1817F14")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001913")]
			[Address(RVA = "0x181A7D0", Offset = "0x181A7D0", VA = "0x181A7D0")]
			set
			{
			}
		}

		[Token(Token = "0x17000150")]
		public static int vectorLayer3D
		{
			[Token(Token = "0x6001914")]
			[Address(RVA = "0x181A934", Offset = "0x181A934", VA = "0x181A934")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001915")]
			[Address(RVA = "0x181A9C0", Offset = "0x181A9C0", VA = "0x181A9C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000151")]
		public static LineManager lineManager
		{
			[Token(Token = "0x6001916")]
			[Address(RVA = "0x181AB24", Offset = "0x181AB24", VA = "0x181AB24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000152")]
		private static int screenWidth
		{
			[Token(Token = "0x6001917")]
			[Address(RVA = "0x181ADBC", Offset = "0x181ADBC", VA = "0x181ADBC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000153")]
		private static int screenHeight
		{
			[Token(Token = "0x6001918")]
			[Address(RVA = "0x181AE98", Offset = "0x181AE98", VA = "0x181AE98")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1400007E")]
		public static event Action<Camera> OnNewCameraSet
		{
			[Token(Token = "0x600190E")]
			[Address(RVA = "0x181A41C", Offset = "0x181A41C", VA = "0x181A41C")]
			add
			{
			}
			[Token(Token = "0x600190F")]
			[Address(RVA = "0x181A590", Offset = "0x181A590", VA = "0x181A590")]
			remove
			{
			}
		}

		[Token(Token = "0x60018C4")]
		[Address(RVA = "0x1813AF8", Offset = "0x1813AF8", VA = "0x1813AF8")]
		public VectorLine(string lineName, Vector3[] linePoints, Material lineMaterial, float width)
		{
		}

		[Token(Token = "0x60018C5")]
		[Address(RVA = "0x18149E4", Offset = "0x18149E4", VA = "0x18149E4")]
		public VectorLine(string lineName, Vector3[] linePoints, Color color, Material lineMaterial, float width)
		{
		}

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0x1814AA4", Offset = "0x1814AA4", VA = "0x1814AA4")]
		public VectorLine(string lineName, Vector3[] linePoints, Color[] colors, Material lineMaterial, float width)
		{
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0x1814B28", Offset = "0x1814B28", VA = "0x1814B28")]
		public VectorLine(string lineName, Vector3[] linePoints, Material lineMaterial, float width, LineType lineType)
		{
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0x1814BE4", Offset = "0x1814BE4", VA = "0x1814BE4")]
		public VectorLine(string lineName, Vector3[] linePoints, Color color, Material lineMaterial, float width, LineType lineType)
		{
		}

		[Token(Token = "0x60018C9")]
		[Address(RVA = "0x1814CA8", Offset = "0x1814CA8", VA = "0x1814CA8")]
		public VectorLine(string lineName, Vector3[] linePoints, Color[] colors, Material lineMaterial, float width, LineType lineType)
		{
		}

		[Token(Token = "0x60018CA")]
		[Address(RVA = "0x1814D2C", Offset = "0x1814D2C", VA = "0x1814D2C")]
		public VectorLine(string lineName, Vector3[] linePoints, Material lineMaterial, float width, LineType lineType, Joins joins)
		{
		}

		[Token(Token = "0x60018CB")]
		[Address(RVA = "0x1814DE4", Offset = "0x1814DE4", VA = "0x1814DE4")]
		public VectorLine(string lineName, Vector3[] linePoints, Color color, Material lineMaterial, float width, LineType lineType, Joins joins)
		{
		}

		[Token(Token = "0x60018CC")]
		[Address(RVA = "0x1814EA8", Offset = "0x1814EA8", VA = "0x1814EA8")]
		public VectorLine(string lineName, Vector3[] linePoints, Color[] colors, Material lineMaterial, float width, LineType lineType, Joins joins)
		{
		}

		[Token(Token = "0x60018CD")]
		[Address(RVA = "0x1814F2C", Offset = "0x1814F2C", VA = "0x1814F2C")]
		public VectorLine(string lineName, Vector2[] linePoints, Material lineMaterial, float width)
		{
		}

		[Token(Token = "0x60018CE")]
		[Address(RVA = "0x1814FE8", Offset = "0x1814FE8", VA = "0x1814FE8")]
		public VectorLine(string lineName, Vector2[] linePoints, Color color, Material lineMaterial, float width)
		{
		}

		[Token(Token = "0x60018CF")]
		[Address(RVA = "0x18150A4", Offset = "0x18150A4", VA = "0x18150A4")]
		public VectorLine(string lineName, Vector2[] linePoints, Color[] colors, Material lineMaterial, float width)
		{
		}

		[Token(Token = "0x60018D0")]
		[Address(RVA = "0x1815124", Offset = "0x1815124", VA = "0x1815124")]
		public VectorLine(string lineName, Vector2[] linePoints, Material lineMaterial, float width, LineType lineType)
		{
		}

		[Token(Token = "0x60018D1")]
		[Address(RVA = "0x18151E4", Offset = "0x18151E4", VA = "0x18151E4")]
		public VectorLine(string lineName, Vector2[] linePoints, Color color, Material lineMaterial, float width, LineType lineType)
		{
		}

		[Token(Token = "0x60018D2")]
		[Address(RVA = "0x18152A8", Offset = "0x18152A8", VA = "0x18152A8")]
		public VectorLine(string lineName, Vector2[] linePoints, Color[] colors, Material lineMaterial, float width, LineType lineType)
		{
		}

		[Token(Token = "0x60018D3")]
		[Address(RVA = "0x1815328", Offset = "0x1815328", VA = "0x1815328")]
		public VectorLine(string lineName, Vector2[] linePoints, Material lineMaterial, float width, LineType lineType, Joins joins)
		{
		}

		[Token(Token = "0x60018D4")]
		[Address(RVA = "0x18153E8", Offset = "0x18153E8", VA = "0x18153E8")]
		public VectorLine(string lineName, Vector2[] linePoints, Color color, Material lineMaterial, float width, LineType lineType, Joins joins)
		{
		}

		[Token(Token = "0x60018D5")]
		[Address(RVA = "0x18154B0", Offset = "0x18154B0", VA = "0x18154B0")]
		public VectorLine(string lineName, Vector2[] linePoints, Color[] colors, Material lineMaterial, float width, LineType lineType, Joins joins)
		{
		}

		[Token(Token = "0x60018D6")]
		[Address(RVA = "0x1815530", Offset = "0x1815530", VA = "0x1815530")]
		protected VectorLine(bool usePoints, string lineName, Vector2[] linePoints, Material lineMaterial, float width)
		{
		}

		[Token(Token = "0x60018D7")]
		[Address(RVA = "0x18155F0", Offset = "0x18155F0", VA = "0x18155F0")]
		protected VectorLine(bool usePoints, string lineName, Vector2[] linePoints, Color color, Material lineMaterial, float width)
		{
		}

		[Token(Token = "0x60018D8")]
		[Address(RVA = "0x18156B0", Offset = "0x18156B0", VA = "0x18156B0")]
		protected VectorLine(bool usePoints, string lineName, Vector2[] linePoints, Color[] colors, Material lineMaterial, float width)
		{
		}

		[Token(Token = "0x60018D9")]
		[Address(RVA = "0x1815730", Offset = "0x1815730", VA = "0x1815730")]
		protected VectorLine(bool usePoints, string lineName, Vector3[] linePoints, Material lineMaterial, float width)
		{
		}

		[Token(Token = "0x60018DA")]
		[Address(RVA = "0x18157EC", Offset = "0x18157EC", VA = "0x18157EC")]
		protected VectorLine(bool usePoints, string lineName, Vector3[] linePoints, Color[] colors, Material lineMaterial, float width)
		{
		}

		[Token(Token = "0x60018DB")]
		[Address(RVA = "0x181586C", Offset = "0x181586C", VA = "0x181586C")]
		protected VectorLine(bool usePoints, string lineName, Vector3[] linePoints, Color color, Material lineMaterial, float width)
		{
		}

		[Token(Token = "0x6001901")]
		[Address(RVA = "0x1813BB8", Offset = "0x1813BB8", VA = "0x1813BB8")]
		private Color[] SetColor(Color color, LineType lineType, int size, bool usePoints)
		{
			return null;
		}

		[Token(Token = "0x6001902")]
		[Address(RVA = "0x1813D10", Offset = "0x1813D10", VA = "0x1813D10")]
		protected void SetupMesh(ref string lineName, Material useMaterial, Color[] colors, ref float width, LineType lineType, Joins joins, bool use2Dlines, bool usePoints)
		{
		}

		[Token(Token = "0x6001903")]
		[Address(RVA = "0x181888C", Offset = "0x181888C", VA = "0x181888C")]
		public void Resize(Vector3[] linePoints)
		{
		}

		[Token(Token = "0x6001904")]
		[Address(RVA = "0x1818BF4", Offset = "0x1818BF4", VA = "0x1818BF4")]
		public void Resize(Vector2[] linePoints)
		{
		}

		[Token(Token = "0x6001905")]
		[Address(RVA = "0x1818D1C", Offset = "0x1818D1C", VA = "0x1818D1C")]
		public void Resize(int newSize)
		{
		}

		[Token(Token = "0x6001906")]
		[Address(RVA = "0x18189B4", Offset = "0x18189B4", VA = "0x18189B4")]
		private void RebuildMesh()
		{
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0x1817FA0", Offset = "0x1817FA0", VA = "0x1817FA0")]
		private void BuildMesh(Color[] colors)
		{
		}

		[Token(Token = "0x6001908")]
		[Address(RVA = "0x1818DD8", Offset = "0x1818DD8", VA = "0x1818DD8")]
		private void SetupTriangles()
		{
		}

		[Token(Token = "0x6001909")]
		[Address(RVA = "0x1819900", Offset = "0x1819900", VA = "0x1819900")]
		public void AddNormals()
		{
		}

		[Token(Token = "0x600190A")]
		[Address(RVA = "0x1819914", Offset = "0x1819914", VA = "0x1819914")]
		public void AddTangents()
		{
		}

		[Token(Token = "0x600190B")]
		[Address(RVA = "0x1819928", Offset = "0x1819928", VA = "0x1819928")]
		private void CalculateTangents()
		{
		}

		[Token(Token = "0x600190C")]
		[Address(RVA = "0x1816C08", Offset = "0x1816C08", VA = "0x1816C08")]
		private void AddEndCap()
		{
		}

		[Token(Token = "0x600190D")]
		[Address(RVA = "0x1816A08", Offset = "0x1816A08", VA = "0x1816A08")]
		private void RemoveEndCap()
		{
		}

		[Token(Token = "0x6001919")]
		[Address(RVA = "0x1816938", Offset = "0x1816938", VA = "0x1816938")]
		private static void LogError(string errorString)
		{
		}

		[Token(Token = "0x600191A")]
		[Address(RVA = "0x181AF74", Offset = "0x181AF74", VA = "0x181AF74")]
		public static Camera SetCameraRenderTexture(RenderTexture renderTexture)
		{
			return null;
		}

		[Token(Token = "0x600191B")]
		[Address(RVA = "0x181B020", Offset = "0x181B020", VA = "0x181B020")]
		public static Camera SetCameraRenderTexture(RenderTexture renderTexture, Color color)
		{
			return null;
		}

		[Token(Token = "0x600191C")]
		[Address(RVA = "0x181B390", Offset = "0x181B390", VA = "0x181B390")]
		public static Camera SetCamera()
		{
			return null;
		}

		[Token(Token = "0x600191D")]
		[Address(RVA = "0x181B5DC", Offset = "0x181B5DC", VA = "0x181B5DC")]
		public static Camera SetCamera(bool useOrtho)
		{
			return null;
		}

		[Token(Token = "0x600191E")]
		[Address(RVA = "0x181B410", Offset = "0x181B410", VA = "0x181B410")]
		public static Camera SetCamera(CameraClearFlags clearFlags)
		{
			return null;
		}

		[Token(Token = "0x600191F")]
		[Address(RVA = "0x181B494", Offset = "0x181B494", VA = "0x181B494")]
		public static Camera SetCamera(CameraClearFlags clearFlags, bool useOrtho)
		{
			return null;
		}

		[Token(Token = "0x6001920")]
		[Address(RVA = "0x181C0EC", Offset = "0x181C0EC", VA = "0x181C0EC")]
		public static Camera SetCamera(Camera thisCamera)
		{
			return null;
		}

		[Token(Token = "0x6001921")]
		[Address(RVA = "0x181C17C", Offset = "0x181C17C", VA = "0x181C17C")]
		public static Camera SetCamera(Camera thisCamera, bool useOrtho)
		{
			return null;
		}

		[Token(Token = "0x6001922")]
		[Address(RVA = "0x181C210", Offset = "0x181C210", VA = "0x181C210")]
		public static Camera SetCamera(Camera thisCamera, CameraClearFlags clearFlags)
		{
			return null;
		}

		[Token(Token = "0x6001923")]
		[Address(RVA = "0x181B660", Offset = "0x181B660", VA = "0x181B660")]
		public static Camera SetCamera(Camera thisCamera, CameraClearFlags clearFlags, bool useOrtho)
		{
			return null;
		}

		[Token(Token = "0x6001924")]
		[Address(RVA = "0x181C2A4", Offset = "0x181C2A4", VA = "0x181C2A4")]
		public static void SetCamera3D()
		{
		}

		[Token(Token = "0x6001925")]
		[Address(RVA = "0x181C3CC", Offset = "0x181C3CC", VA = "0x181C3CC")]
		public static void SetCamera3D(Camera thisCamera)
		{
		}

		[Token(Token = "0x6001926")]
		[Address(RVA = "0x181C5D8", Offset = "0x181C5D8", VA = "0x181C5D8")]
		public static bool CameraHasMoved()
		{
			return default(bool);
		}

		[Token(Token = "0x6001927")]
		[Address(RVA = "0x181C7A8", Offset = "0x181C7A8", VA = "0x181C7A8")]
		public static void UpdateCameraInfo()
		{
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0x181C8C4", Offset = "0x181C8C4", VA = "0x181C8C4")]
		public static bool HasCameraBeenSet()
		{
			return default(bool);
		}

		[Token(Token = "0x6001929")]
		[Address(RVA = "0x181C990", Offset = "0x181C990", VA = "0x181C990")]
		public static Camera GetCamera()
		{
			return null;
		}

		[Token(Token = "0x600192A")]
		[Address(RVA = "0x181CAE8", Offset = "0x181CAE8", VA = "0x181CAE8")]
		public static void SetVectorCamDepth(int depth)
		{
		}

		[Token(Token = "0x600192B")]
		[Address(RVA = "0x181CC64", Offset = "0x181CC64", VA = "0x181CC64")]
		public int GetSegmentNumber()
		{
			return default(int);
		}

		[Token(Token = "0x600192C")]
		[Address(RVA = "0x181CCCC", Offset = "0x181CCCC", VA = "0x181CCCC")]
		private bool WrongArrayLength(int arrayLength, FunctionName functionName)
		{
			return default(bool);
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0x181CEF8", Offset = "0x181CEF8", VA = "0x181CEF8")]
		private bool CheckArrayLength(FunctionName functionName, int segments, int index)
		{
			return default(bool);
		}

		[Token(Token = "0x600192E")]
		[Address(RVA = "0x181E264", Offset = "0x181E264", VA = "0x181E264")]
		private void SetEndCapColors()
		{
		}

		[Token(Token = "0x600192F")]
		[Address(RVA = "0x180FE40", Offset = "0x180FE40", VA = "0x180FE40")]
		public void SetColor(Color color)
		{
		}

		[Token(Token = "0x6001930")]
		[Address(RVA = "0x181E584", Offset = "0x181E584", VA = "0x181E584")]
		public void SetColor(Color color, int index)
		{
		}

		[Token(Token = "0x6001931")]
		[Address(RVA = "0x181E400", Offset = "0x181E400", VA = "0x181E400")]
		public void SetColor(Color color, int startIndex, int endIndex)
		{
		}

		[Token(Token = "0x6001932")]
		[Address(RVA = "0x181E5AC", Offset = "0x181E5AC", VA = "0x181E5AC")]
		public void SetColors(Color[] lineColors)
		{
		}

		[Token(Token = "0x6001933")]
		[Address(RVA = "0x181EC54", Offset = "0x181EC54", VA = "0x181EC54")]
		public void SetColorsSmooth(Color[] lineColors)
		{
		}

		[Token(Token = "0x6001934")]
		[Address(RVA = "0x181EBF0", Offset = "0x181EBF0", VA = "0x181EBF0")]
		private void SetStartAndEnd(ref int start, ref int end)
		{
		}

		[Token(Token = "0x6001935")]
		[Address(RVA = "0x181F468", Offset = "0x181F468", VA = "0x181F468")]
		public void SetWidths(float[] lineWidths)
		{
		}

		[Token(Token = "0x6001936")]
		[Address(RVA = "0x181F7B0", Offset = "0x181F7B0", VA = "0x181F7B0")]
		public void SetWidths(int[] lineWidths)
		{
		}

		[Token(Token = "0x6001937")]
		[Address(RVA = "0x181F4AC", Offset = "0x181F4AC", VA = "0x181F4AC")]
		private void SetWidths(float[] lineWidthsFloat, int[] lineWidthsInt, int arrayLength, bool doFloat)
		{
		}

		[Token(Token = "0x6001938")]
		[Address(RVA = "0x1815B18", Offset = "0x1815B18", VA = "0x1815B18")]
		private void RedoLine(bool use1Pixel)
		{
		}

		[Token(Token = "0x6001939")]
		[Address(RVA = "0x181F7F4", Offset = "0x181F7F4", VA = "0x181F7F4")]
		public static void SetLineParameters(Color color, Material material, float width, float capLength, int depth, LineType lineType, Joins joins)
		{
		}

		[Token(Token = "0x600193A")]
		[Address(RVA = "0x181F92C", Offset = "0x181F92C", VA = "0x181F92C")]
		private static void PrintMakeLineError()
		{
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0x181F9B4", Offset = "0x181F9B4", VA = "0x181F9B4")]
		public static VectorLine MakeLine(string name, Vector3[] points, Color[] colors)
		{
			return null;
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0x181FB60", Offset = "0x181FB60", VA = "0x181FB60")]
		public static VectorLine MakeLine(string name, Vector2[] points, Color[] colors)
		{
			return null;
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0x181FD0C", Offset = "0x181FD0C", VA = "0x181FD0C")]
		public static VectorLine MakeLine(string name, Vector3[] points, Color color)
		{
			return null;
		}

		[Token(Token = "0x600193E")]
		[Address(RVA = "0x181FEE4", Offset = "0x181FEE4", VA = "0x181FEE4")]
		public static VectorLine MakeLine(string name, Vector2[] points, Color color)
		{
			return null;
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0x18200BC", Offset = "0x18200BC", VA = "0x18200BC")]
		public static VectorLine MakeLine(string name, Vector3[] points)
		{
			return null;
		}

		[Token(Token = "0x6001940")]
		[Address(RVA = "0x182027C", Offset = "0x182027C", VA = "0x182027C")]
		public static VectorLine MakeLine(string name, Vector2[] points)
		{
			return null;
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0x182043C", Offset = "0x182043C", VA = "0x182043C")]
		public static VectorLine SetLine(Color color, params Vector2[] points)
		{
			return null;
		}

		[Token(Token = "0x6001942")]
		[Address(RVA = "0x18204E8", Offset = "0x18204E8", VA = "0x18204E8")]
		public static VectorLine SetLine(Color color, float time, params Vector2[] points)
		{
			return null;
		}

		[Token(Token = "0x6001943")]
		[Address(RVA = "0x182067C", Offset = "0x182067C", VA = "0x182067C")]
		public static VectorLine SetLine(Color color, params Vector3[] points)
		{
			return null;
		}

		[Token(Token = "0x6001944")]
		[Address(RVA = "0x1820728", Offset = "0x1820728", VA = "0x1820728")]
		public static VectorLine SetLine(Color color, float time, params Vector3[] points)
		{
			return null;
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0x18208BC", Offset = "0x18208BC", VA = "0x18208BC")]
		public static VectorLine SetLine3D(Color color, params Vector3[] points)
		{
			return null;
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0x1820968", Offset = "0x1820968", VA = "0x1820968")]
		public static VectorLine SetLine3D(Color color, float time, params Vector3[] points)
		{
			return null;
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0x1820AAC", Offset = "0x1820AAC", VA = "0x1820AAC")]
		public static VectorLine SetRay(Color color, Vector3 origin, Vector3 direction)
		{
			return null;
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0x1820B8C", Offset = "0x1820B8C", VA = "0x1820B8C")]
		public static VectorLine SetRay(Color color, float time, Vector3 origin, Vector3 direction)
		{
			return null;
		}

		[Token(Token = "0x6001949")]
		[Address(RVA = "0x1820DD0", Offset = "0x1820DD0", VA = "0x1820DD0")]
		public static VectorLine SetRay3D(Color color, Vector3 origin, Vector3 direction)
		{
			return null;
		}

		[Token(Token = "0x600194A")]
		[Address(RVA = "0x1820EB0", Offset = "0x1820EB0", VA = "0x1820EB0")]
		public static VectorLine SetRay3D(Color color, float time, Vector3 origin, Vector3 direction)
		{
			return null;
		}

		[Token(Token = "0x600194B")]
		[Address(RVA = "0x1821098", Offset = "0x1821098", VA = "0x1821098")]
		private bool CheckLine()
		{
			return default(bool);
		}

		[Token(Token = "0x600194C")]
		[Address(RVA = "0x1823C20", Offset = "0x1823C20", VA = "0x1823C20")]
		private void CheckNormals()
		{
		}

		[Token(Token = "0x600194D")]
		[Address(RVA = "0x1810008", Offset = "0x1810008", VA = "0x1810008")]
		public void Draw()
		{
		}

		[Token(Token = "0x600194E")]
		[Address(RVA = "0x1811B84", Offset = "0x1811B84", VA = "0x1811B84")]
		public void Draw(Transform thisTransform)
		{
		}

		[Token(Token = "0x600194F")]
		[Address(RVA = "0x1825448", Offset = "0x1825448", VA = "0x1825448")]
		private void Line2D(int start, int end, Matrix4x4 thisMatrix, bool useTransformMatrix)
		{
		}

		[Token(Token = "0x6001950")]
		[Address(RVA = "0x1827180", Offset = "0x1827180", VA = "0x1827180")]
		private void Line3DContinuous(int start, int end, Matrix4x4 thisMatrix, bool useTransformMatrix)
		{
		}

		[Token(Token = "0x6001951")]
		[Address(RVA = "0x18286CC", Offset = "0x18286CC", VA = "0x18286CC")]
		private void Line3DDiscrete(int start, int end, Matrix4x4 thisMatrix, bool useTransformMatrix)
		{
		}

		[Token(Token = "0x6001952")]
		[Address(RVA = "0x1810000", Offset = "0x1810000", VA = "0x1810000")]
		public void Draw3D()
		{
		}

		[Token(Token = "0x6001953")]
		[Address(RVA = "0x181022C", Offset = "0x181022C", VA = "0x181022C")]
		public void Draw3D(Transform thisTransform)
		{
		}

		[Token(Token = "0x6001954")]
		[Address(RVA = "0x182B140", Offset = "0x182B140", VA = "0x182B140")]
		public void DrawViewport()
		{
		}

		[Token(Token = "0x6001955")]
		[Address(RVA = "0x182B148", Offset = "0x182B148", VA = "0x182B148")]
		public void DrawViewport(Transform thisTransform)
		{
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0x182D574", Offset = "0x182D574", VA = "0x182D574")]
		private void DrawPoints()
		{
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0x1823C94", Offset = "0x1823C94", VA = "0x1823C94")]
		private void DrawPoints(Transform thisTransform)
		{
		}

		[Token(Token = "0x6001958")]
		[Address(RVA = "0x182D57C", Offset = "0x182D57C", VA = "0x182D57C")]
		private void DrawPoints3D()
		{
		}

		[Token(Token = "0x6001959")]
		[Address(RVA = "0x182A240", Offset = "0x182A240", VA = "0x182A240")]
		private void DrawPoints3D(Transform thisTransform)
		{
		}

		[Token(Token = "0x600195A")]
		[Address(RVA = "0x1829BB0", Offset = "0x1829BB0", VA = "0x1829BB0")]
		private void Skip(ref int idx, ref int widthIdx, ref Vector3 pos)
		{
		}

		[Token(Token = "0x600195B")]
		[Address(RVA = "0x18298D8", Offset = "0x18298D8", VA = "0x18298D8")]
		private void SetLineMeshBounds()
		{
		}

		[Token(Token = "0x600195C")]
		[Address(RVA = "0x18253D4", Offset = "0x18253D4", VA = "0x18253D4")]
		private void SetupDrawStartEnd(out int start, out int end)
		{
		}

		[Token(Token = "0x600195D")]
		[Address(RVA = "0x180F50C", Offset = "0x180F50C", VA = "0x180F50C")]
		public static void LineManagerCheckDistance()
		{
		}

		[Token(Token = "0x600195E")]
		[Address(RVA = "0x180E96C", Offset = "0x180E96C", VA = "0x180E96C")]
		public static void LineManagerDisable()
		{
		}

		[Token(Token = "0x600195F")]
		[Address(RVA = "0x180E5D4", Offset = "0x180E5D4", VA = "0x180E5D4")]
		public static void LineManagerEnable()
		{
		}

		[Token(Token = "0x6001960")]
		[Address(RVA = "0x182D92C", Offset = "0x182D92C", VA = "0x182D92C")]
		public void Draw3DAuto()
		{
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0x1820AA4", Offset = "0x1820AA4", VA = "0x1820AA4")]
		public void Draw3DAuto(float time)
		{
		}

		[Token(Token = "0x6001962")]
		[Address(RVA = "0x182DA70", Offset = "0x182DA70", VA = "0x182DA70")]
		public void Draw3DAuto(Transform thisTransform)
		{
		}

		[Token(Token = "0x6001963")]
		[Address(RVA = "0x182D938", Offset = "0x182D938", VA = "0x182D938")]
		public void Draw3DAuto(float time, Transform thisTransform)
		{
		}

		[Token(Token = "0x6001964")]
		[Address(RVA = "0x182DA7C", Offset = "0x182DA7C", VA = "0x182DA7C")]
		public void StopDrawing3DAuto()
		{
		}

		[Token(Token = "0x6001965")]
		[Address(RVA = "0x1829DB0", Offset = "0x1829DB0", VA = "0x1829DB0")]
		private void WeldJoins(int start, int end, bool connectFirstAndLast)
		{
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0x1829E70", Offset = "0x1829E70", VA = "0x1829E70")]
		private void WeldJoinsDiscrete(int start, int end, bool connectFirstAndLast)
		{
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0x182DB18", Offset = "0x182DB18", VA = "0x182DB18")]
		private void SetIntersectionPoint(int p1, int p2, int p3, int p4)
		{
		}

		[Token(Token = "0x6001968")]
		[Address(RVA = "0x182AE6C", Offset = "0x182AE6C", VA = "0x182AE6C")]
		private void WeldJoins3D(int start, int end, bool connectFirstAndLast)
		{
		}

		[Token(Token = "0x6001969")]
		[Address(RVA = "0x182AF2C", Offset = "0x182AF2C", VA = "0x182AF2C")]
		private void WeldJoinsDiscrete3D(int start, int end, bool connectFirstAndLast)
		{
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0x182DEF0", Offset = "0x182DEF0", VA = "0x182DEF0")]
		private void SetIntersectionPoint3D(int p1, int p2, int p3, int p4)
		{
		}

		[Token(Token = "0x600196B")]
		[Address(RVA = "0x182E308", Offset = "0x182E308", VA = "0x182E308")]
		public void SetTextureScale(float textureScale)
		{
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0x182F074", Offset = "0x182F074", VA = "0x182F074")]
		public void SetTextureScale(Transform thisTransform, float textureScale)
		{
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0x182F090", Offset = "0x182F090", VA = "0x182F090")]
		public void SetTextureScale(float textureScale, float offset)
		{
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0x182E32C", Offset = "0x182E32C", VA = "0x182E32C")]
		public void SetTextureScale(Transform thisTransform, float textureScale, float offset)
		{
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0x18178D8", Offset = "0x18178D8", VA = "0x18178D8")]
		public void ResetTextureScale()
		{
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0x182F0B4", Offset = "0x182F0B4", VA = "0x182F0B4")]
		public static void SetDepth(Transform thisTransform, int depth)
		{
		}

		[Token(Token = "0x6001971")]
		[Address(RVA = "0x182F2C4", Offset = "0x182F2C4", VA = "0x182F2C4")]
		public static Vector3[] BytesToVector3Array(byte[] lineBytes)
		{
			return null;
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0x182F9A4", Offset = "0x182F9A4", VA = "0x182F9A4")]
		public static Vector2[] BytesToVector2Array(byte[] lineBytes)
		{
			return null;
		}

		[Token(Token = "0x6001973")]
		[Address(RVA = "0x182F4F0", Offset = "0x182F4F0", VA = "0x182F4F0")]
		private static void SetupByteBlock()
		{
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0x182F6E8", Offset = "0x182F6E8", VA = "0x182F6E8")]
		private static float ConvertToFloat(byte[] bytes, int i)
		{
			return default(float);
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0x182FB94", Offset = "0x182FB94", VA = "0x182FB94")]
		public static void Destroy(ref VectorLine line)
		{
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0x182FC74", Offset = "0x182FC74", VA = "0x182FC74")]
		public static void Destroy(ref VectorPoints line)
		{
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0x182FD54", Offset = "0x182FD54", VA = "0x182FD54")]
		public static void Destroy(ref VectorLine line, GameObject go)
		{
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0x182FE5C", Offset = "0x182FE5C", VA = "0x182FE5C")]
		public static void Destroy(ref VectorPoints line, GameObject go)
		{
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0x182FF64", Offset = "0x182FF64", VA = "0x182FF64")]
		public void MakeRect(Rect rect)
		{
		}

		[Token(Token = "0x600197A")]
		[Address(RVA = "0x1831244", Offset = "0x1831244", VA = "0x1831244")]
		public void MakeRect(Rect rect, int index)
		{
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0x18313E0", Offset = "0x18313E0", VA = "0x18313E0")]
		public void MakeRect(Vector3 topLeft, Vector3 bottomRight)
		{
		}

		[Token(Token = "0x600197C")]
		[Address(RVA = "0x18300FC", Offset = "0x18300FC", VA = "0x18300FC")]
		public void MakeRect(Vector3 topLeft, Vector3 bottomRight, int index)
		{
		}

		[Token(Token = "0x600197D")]
		[Address(RVA = "0x1831414", Offset = "0x1831414", VA = "0x1831414")]
		public void MakeCircle(Vector3 origin, float radius)
		{
		}

		[Token(Token = "0x600197E")]
		[Address(RVA = "0x1832204", Offset = "0x1832204", VA = "0x1832204")]
		public void MakeCircle(Vector3 origin, float radius, int segments)
		{
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0x18322E8", Offset = "0x18322E8", VA = "0x18322E8")]
		public void MakeCircle(Vector3 origin, float radius, int segments, float pointRotation)
		{
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0x18323D0", Offset = "0x18323D0", VA = "0x18323D0")]
		public void MakeCircle(Vector3 origin, float radius, int segments, int index)
		{
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0x18324C0", Offset = "0x18324C0", VA = "0x18324C0")]
		public void MakeCircle(Vector3 origin, float radius, int segments, float pointRotation, int index)
		{
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0x18325A8", Offset = "0x18325A8", VA = "0x18325A8")]
		public void MakeCircle(Vector3 origin, Vector3 upVector, float radius)
		{
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0x1832614", Offset = "0x1832614", VA = "0x1832614")]
		public void MakeCircle(Vector3 origin, Vector3 upVector, float radius, int segments)
		{
		}

		[Token(Token = "0x6001984")]
		[Address(RVA = "0x1832660", Offset = "0x1832660", VA = "0x1832660")]
		public void MakeCircle(Vector3 origin, Vector3 upVector, float radius, int segments, float pointRotation)
		{
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0x18326B0", Offset = "0x18326B0", VA = "0x18326B0")]
		public void MakeCircle(Vector3 origin, Vector3 upVector, float radius, int segments, int index)
		{
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0x1832700", Offset = "0x1832700", VA = "0x1832700")]
		public void MakeCircle(Vector3 origin, Vector3 upVector, float radius, int segments, float pointRotation, int index)
		{
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0x1832750", Offset = "0x1832750", VA = "0x1832750")]
		public void MakeEllipse(Vector3 origin, float xRadius, float yRadius)
		{
		}

		[Token(Token = "0x6001988")]
		[Address(RVA = "0x183283C", Offset = "0x183283C", VA = "0x183283C")]
		public void MakeEllipse(Vector3 origin, float xRadius, float yRadius, int segments)
		{
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0x1832924", Offset = "0x1832924", VA = "0x1832924")]
		public void MakeEllipse(Vector3 origin, float xRadius, float yRadius, int segments, int index)
		{
		}

		[Token(Token = "0x600198A")]
		[Address(RVA = "0x1832A18", Offset = "0x1832A18", VA = "0x1832A18")]
		public void MakeEllipse(Vector3 origin, float xRadius, float yRadius, int segments, float pointRotation)
		{
		}

		[Token(Token = "0x600198B")]
		[Address(RVA = "0x1832B04", Offset = "0x1832B04", VA = "0x1832B04")]
		public void MakeEllipse(Vector3 origin, Vector3 upVector, float xRadius, float yRadius)
		{
		}

		[Token(Token = "0x600198C")]
		[Address(RVA = "0x1832B74", Offset = "0x1832B74", VA = "0x1832B74")]
		public void MakeEllipse(Vector3 origin, Vector3 upVector, float xRadius, float yRadius, int segments)
		{
		}

		[Token(Token = "0x600198D")]
		[Address(RVA = "0x1832BC4", Offset = "0x1832BC4", VA = "0x1832BC4")]
		public void MakeEllipse(Vector3 origin, Vector3 upVector, float xRadius, float yRadius, int segments, int index)
		{
		}

		[Token(Token = "0x600198E")]
		[Address(RVA = "0x1832C18", Offset = "0x1832C18", VA = "0x1832C18")]
		public void MakeEllipse(Vector3 origin, Vector3 upVector, float xRadius, float yRadius, int segments, float pointRotation)
		{
		}

		[Token(Token = "0x600198F")]
		[Address(RVA = "0x18314FC", Offset = "0x18314FC", VA = "0x18314FC")]
		public void MakeEllipse(Vector3 origin, Vector3 upVector, float xRadius, float yRadius, int segments, float pointRotation, int index)
		{
		}

		[Token(Token = "0x6001990")]
		[Address(RVA = "0x1832C6C", Offset = "0x1832C6C", VA = "0x1832C6C")]
		public void MakeCurve(Vector2[] curvePoints)
		{
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0x1832EC0", Offset = "0x1832EC0", VA = "0x1832EC0")]
		public void MakeCurve(Vector2[] curvePoints, int segments)
		{
		}

		[Token(Token = "0x6001992")]
		[Address(RVA = "0x1832CA0", Offset = "0x1832CA0", VA = "0x1832CA0")]
		public void MakeCurve(Vector2[] curvePoints, int segments, int index)
		{
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0x18335DC", Offset = "0x18335DC", VA = "0x18335DC")]
		public void MakeCurve(Vector3[] curvePoints)
		{
		}

		[Token(Token = "0x6001994")]
		[Address(RVA = "0x1833718", Offset = "0x1833718", VA = "0x1833718")]
		public void MakeCurve(Vector3[] curvePoints, int segments)
		{
		}

		[Token(Token = "0x6001995")]
		[Address(RVA = "0x1833610", Offset = "0x1833610", VA = "0x1833610")]
		public void MakeCurve(Vector3[] curvePoints, int segments, int index)
		{
		}

		[Token(Token = "0x6001996")]
		[Address(RVA = "0x1833734", Offset = "0x1833734", VA = "0x1833734")]
		public void MakeCurve(Vector3 anchor1, Vector3 control1, Vector3 anchor2, Vector3 control2)
		{
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0x18337B8", Offset = "0x18337B8", VA = "0x18337B8")]
		public void MakeCurve(Vector3 anchor1, Vector3 control1, Vector3 anchor2, Vector3 control2, int segments)
		{
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0x1832EDC", Offset = "0x1832EDC", VA = "0x1832EDC")]
		public void MakeCurve(Vector3 anchor1, Vector3 control1, Vector3 anchor2, Vector3 control2, int segments, int index)
		{
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0x183381C", Offset = "0x183381C", VA = "0x183381C")]
		private static Vector2 GetBezierPoint(ref Vector2 anchor1, ref Vector2 control1, ref Vector2 anchor2, ref Vector2 control2, float t)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0x18338F0", Offset = "0x18338F0", VA = "0x18338F0")]
		private static Vector3 GetBezierPoint3D(ref Vector3 anchor1, ref Vector3 control1, ref Vector3 anchor2, ref Vector3 control2, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0x1833A1C", Offset = "0x1833A1C", VA = "0x1833A1C")]
		public void MakeSpline(Vector2[] splinePoints)
		{
		}

		[Token(Token = "0x600199C")]
		[Address(RVA = "0x18347F8", Offset = "0x18347F8", VA = "0x18347F8")]
		public void MakeSpline(Vector2[] splinePoints, bool loop)
		{
		}

		[Token(Token = "0x600199D")]
		[Address(RVA = "0x1834838", Offset = "0x1834838", VA = "0x1834838")]
		public void MakeSpline(Vector2[] splinePoints, int segments)
		{
		}

		[Token(Token = "0x600199E")]
		[Address(RVA = "0x1834864", Offset = "0x1834864", VA = "0x1834864")]
		public void MakeSpline(Vector2[] splinePoints, int segments, bool loop)
		{
		}

		[Token(Token = "0x600199F")]
		[Address(RVA = "0x1834890", Offset = "0x1834890", VA = "0x1834890")]
		public void MakeSpline(Vector2[] splinePoints, int segments, int index)
		{
		}

		[Token(Token = "0x60019A0")]
		[Address(RVA = "0x18348C0", Offset = "0x18348C0", VA = "0x18348C0")]
		public void MakeSpline(Vector2[] splinePoints, int segments, int index, bool loop)
		{
		}

		[Token(Token = "0x60019A1")]
		[Address(RVA = "0x18348F0", Offset = "0x18348F0", VA = "0x18348F0")]
		public void MakeSpline(Vector3[] splinePoints)
		{
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0x1834930", Offset = "0x1834930", VA = "0x1834930")]
		public void MakeSpline(Vector3[] splinePoints, bool loop)
		{
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0x1834970", Offset = "0x1834970", VA = "0x1834970")]
		public void MakeSpline(Vector3[] splinePoints, int segments)
		{
		}

		[Token(Token = "0x60019A4")]
		[Address(RVA = "0x18349A0", Offset = "0x18349A0", VA = "0x18349A0")]
		public void MakeSpline(Vector3[] splinePoints, int segments, bool loop)
		{
		}

		[Token(Token = "0x60019A5")]
		[Address(RVA = "0x18349D0", Offset = "0x18349D0", VA = "0x18349D0")]
		public void MakeSpline(Vector3[] splinePoints, int segments, int index)
		{
		}

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0x1834A04", Offset = "0x1834A04", VA = "0x1834A04")]
		public void MakeSpline(Vector3[] splinePoints, int segments, int index, bool loop)
		{
		}

		[Token(Token = "0x60019A7")]
		[Address(RVA = "0x1833A5C", Offset = "0x1833A5C", VA = "0x1833A5C")]
		private void MakeSpline(Vector2[] splinePoints2, Vector3[] splinePoints3, int segments, int index, bool loop)
		{
		}

		[Token(Token = "0x60019A8")]
		[Address(RVA = "0x1834A38", Offset = "0x1834A38", VA = "0x1834A38")]
		private static Vector2 GetSplinePoint(ref Vector2 p0, ref Vector2 p1, ref Vector2 p2, ref Vector2 p3, float t)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60019A9")]
		[Address(RVA = "0x1834B54", Offset = "0x1834B54", VA = "0x1834B54")]
		private static Vector3 GetSplinePoint3D(ref Vector3 p0, ref Vector3 p1, ref Vector3 p2, ref Vector3 p3, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019AA")]
		[Address(RVA = "0x1834CE4", Offset = "0x1834CE4", VA = "0x1834CE4")]
		public void MakeText(string text, Vector3 startPos, float size)
		{
		}

		[Token(Token = "0x60019AB")]
		[Address(RVA = "0x18355F4", Offset = "0x18355F4", VA = "0x18355F4")]
		public void MakeText(string text, Vector3 startPos, float size, bool uppercaseOnly)
		{
		}

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0x1835634", Offset = "0x1835634", VA = "0x1835634")]
		public void MakeText(string text, Vector3 startPos, float size, float charSpacing, float lineSpacing)
		{
		}

		[Token(Token = "0x60019AD")]
		[Address(RVA = "0x1834D24", Offset = "0x1834D24", VA = "0x1834D24")]
		public void MakeText(string text, Vector3 startPos, float size, float charSpacing, float lineSpacing, bool uppercaseOnly)
		{
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0x183567C", Offset = "0x183567C", VA = "0x183567C")]
		public void MakeWireframe(Mesh mesh)
		{
		}

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0x1835D8C", Offset = "0x1835D8C", VA = "0x1835D8C")]
		private static void CheckPairPoints(Dictionary<Vector3Pair, bool> pairs, Vector3 p1, Vector3 p2, List<Vector3> linePoints)
		{
		}

		[Token(Token = "0x60019B0")]
		[Address(RVA = "0x1823498", Offset = "0x1823498", VA = "0x1823498")]
		public void SetDistances()
		{
		}

		[Token(Token = "0x60019B1")]
		[Address(RVA = "0x1835FD8", Offset = "0x1835FD8", VA = "0x1835FD8")]
		public float GetLength()
		{
			return default(float);
		}

		[Token(Token = "0x60019B2")]
		[Address(RVA = "0x1836058", Offset = "0x1836058", VA = "0x1836058")]
		public float GetLength(int startIndex, int endIndex)
		{
			return default(float);
		}

		[Token(Token = "0x60019B3")]
		[Address(RVA = "0x1836184", Offset = "0x1836184", VA = "0x1836184")]
		public Vector2 GetPoint01(float distance)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60019B4")]
		[Address(RVA = "0x1836244", Offset = "0x1836244", VA = "0x1836244")]
		public Vector2 GetPoint(float distance)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0x18367F8", Offset = "0x18367F8", VA = "0x18367F8")]
		public Vector3 GetPoint3D01(float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0x18368B8", Offset = "0x18368B8", VA = "0x18368B8")]
		public Vector3 GetPoint3D(float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60019B7")]
		[Address(RVA = "0x1836E94", Offset = "0x1836E94", VA = "0x1836E94")]
		public static void SetEndCap(string name, EndCap capType)
		{
		}

		[Token(Token = "0x60019B8")]
		[Address(RVA = "0x1836F30", Offset = "0x1836F30", VA = "0x1836F30")]
		public static void SetEndCap(string name, EndCap capType, Material material, params Texture2D[] textures)
		{
		}

		[Token(Token = "0x60019B9")]
		[Address(RVA = "0x1837F2C", Offset = "0x1837F2C", VA = "0x1837F2C")]
		public static void RemoveEndCap(string name)
		{
		}

		[Token(Token = "0x60019BA")]
		[Address(RVA = "0x18381F0", Offset = "0x18381F0", VA = "0x18381F0")]
		public void ZeroPoints()
		{
		}

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0x1835674", Offset = "0x1835674", VA = "0x1835674")]
		public void ZeroPoints(int startIndex)
		{
		}

		[Token(Token = "0x60019BC")]
		[Address(RVA = "0x18381FC", Offset = "0x18381FC", VA = "0x18381FC")]
		public void ZeroPoints(int startIndex, int endIndex)
		{
		}

		[Token(Token = "0x60019BD")]
		[Address(RVA = "0x182D584", Offset = "0x182D584", VA = "0x182D584")]
		private void ZeroVertices(int startIndex, int endIndex)
		{
		}

		[Token(Token = "0x60019BE")]
		[Address(RVA = "0x18387B4", Offset = "0x18387B4", VA = "0x18387B4")]
		public bool Selected(Vector2 p)
		{
			return default(bool);
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0x18387D0", Offset = "0x18387D0", VA = "0x18387D0")]
		public bool Selected(Vector2 p, int extraDistance)
		{
			return default(bool);
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0x1829D7C", Offset = "0x1829D7C", VA = "0x1829D7C")]
		private bool Approximately2(Vector2 p1, Vector2 p2)
		{
			return default(bool);
		}

		[Token(Token = "0x60019C1")]
		[Address(RVA = "0x182A1F0", Offset = "0x182A1F0", VA = "0x182A1F0")]
		private bool Approximately3(Vector3 p1, Vector3 p2)
		{
			return default(bool);
		}

		[Token(Token = "0x60019C2")]
		[Address(RVA = "0x18393F0", Offset = "0x18393F0", VA = "0x18393F0")]
		private bool Approximately(float a, float b)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000395")]
	public class VectorPoints : VectorLine
	{
		[Token(Token = "0x60019C4")]
		[Address(RVA = "0x21E5734", Offset = "0x21E5734", VA = "0x21E5734")]
		public VectorPoints(string name, Vector2[] points, Material material, float width)
		{
		}

		[Token(Token = "0x60019C5")]
		[Address(RVA = "0x21E57F0", Offset = "0x21E57F0", VA = "0x21E57F0")]
		public VectorPoints(string name, Vector2[] points, Color[] colors, Material material, float width)
		{
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0x21E58B0", Offset = "0x21E58B0", VA = "0x21E58B0")]
		public VectorPoints(string name, Vector2[] points, Color color, Material material, float width)
		{
		}

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0x21E5994", Offset = "0x21E5994", VA = "0x21E5994")]
		public VectorPoints(string name, Vector3[] points, Material material, float width)
		{
		}

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0x21E5A50", Offset = "0x21E5A50", VA = "0x21E5A50")]
		public VectorPoints(string name, Vector3[] points, Color[] colors, Material material, float width)
		{
		}

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0x21E5B10", Offset = "0x21E5B10", VA = "0x21E5B10")]
		public VectorPoints(string name, Vector3[] points, Color color, Material material, float width)
		{
		}
	}
	[Token(Token = "0x2000396")]
	public struct Vector3Pair
	{
		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 p1;

		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 p2;

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0x1813AE0", Offset = "0x1813AE0", VA = "0x1813AE0")]
		public Vector3Pair(Vector3 point1, Vector3 point2)
		{
		}
	}
	[Token(Token = "0x2000397")]
	public class CapInfo
	{
		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EndCap capType;

		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Material material;

		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Texture2D texture;

		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float ratio1;

		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float ratio2;

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0x1813AA0", Offset = "0x1813AA0", VA = "0x1813AA0")]
		public CapInfo(EndCap capType, Material material, Texture2D texture, float ratio1, float ratio2)
		{
		}
	}
}
[Token(Token = "0x2000398")]
public class VectorManager
{
	[Token(Token = "0x40012B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float minBrightnessDistance;

	[Token(Token = "0x40012B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static float maxBrightnessDistance;

	[Token(Token = "0x40012BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int brightnessLevels;

	[Token(Token = "0x40012BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static float distanceCheckFrequency;

	[Token(Token = "0x40012BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Color fogColor;

	[Token(Token = "0x40012BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static bool useDraw3D;

	[Token(Token = "0x40012BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static List<VectorLine> vectorLines;

	[Token(Token = "0x40012BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static List<RefInt> objectNumbers;

	[Token(Token = "0x40012C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public static int _arrayCount;

	[Token(Token = "0x40012C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static List<VectorLine> vectorLines2;

	[Token(Token = "0x40012C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private static List<RefInt> objectNumbers2;

	[Token(Token = "0x40012C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static List<Transform> transforms;

	[Token(Token = "0x40012C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static int _arrayCount2;

	[Token(Token = "0x40012C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static List<Transform> transforms3;

	[Token(Token = "0x40012C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private static List<VectorLine> vectorLines3;

	[Token(Token = "0x40012C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static List<int> oldDistances;

	[Token(Token = "0x40012C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private static List<Color> colors;

	[Token(Token = "0x40012C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static List<RefInt> objectNumbers3;

	[Token(Token = "0x40012CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private static int _arrayCount3;

	[Token(Token = "0x40012CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static Dictionary<string, Mesh> meshTable;

	[Token(Token = "0x17000154")]
	public static int arrayCount
	{
		[Token(Token = "0x60019D1")]
		[Address(RVA = "0x180E2E4", Offset = "0x180E2E4", VA = "0x180E2E4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000155")]
	public static int arrayCount2
	{
		[Token(Token = "0x60019D4")]
		[Address(RVA = "0x180EA00", Offset = "0x180EA00", VA = "0x180EA00")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60019CC")]
	[Address(RVA = "0x180D404", Offset = "0x180D404", VA = "0x180D404")]
	public VectorManager()
	{
	}

	[Token(Token = "0x60019CD")]
	[Address(RVA = "0x180D40C", Offset = "0x180D40C", VA = "0x180D40C")]
	public static void SetBrightnessParameters(float min, float max, int levels, float frequency, Color color)
	{
	}

	[Token(Token = "0x60019CE")]
	[Address(RVA = "0x180D520", Offset = "0x180D520", VA = "0x180D520")]
	public static float GetBrightnessValue(Vector3 pos)
	{
		return default(float);
	}

	[Token(Token = "0x60019CF")]
	[Address(RVA = "0x180D774", Offset = "0x180D774", VA = "0x180D774")]
	public static void ObjectSetup(GameObject go, VectorLine line, Visibility visibility, Brightness brightness)
	{
	}

	[Token(Token = "0x60019D0")]
	[Address(RVA = "0x180D81C", Offset = "0x180D81C", VA = "0x180D81C")]
	public static void ObjectSetup(GameObject go, VectorLine line, Visibility visibility, Brightness brightness, bool makeBounds)
	{
	}

	[Token(Token = "0x60019D2")]
	[Address(RVA = "0x180E370", Offset = "0x180E370", VA = "0x180E370")]
	public static void VisibilityStaticSetup(VectorLine line, out RefInt objectNum)
	{
	}

	[Token(Token = "0x60019D3")]
	[Address(RVA = "0x180E668", Offset = "0x180E668", VA = "0x180E668")]
	public static void VisibilityStaticRemove(int objectNumber)
	{
	}

	[Token(Token = "0x60019D5")]
	[Address(RVA = "0x180EA8C", Offset = "0x180EA8C", VA = "0x180EA8C")]
	public static void VisibilitySetup(Transform thisTransform, VectorLine line, out RefInt objectNum)
	{
	}

	[Token(Token = "0x60019D6")]
	[Address(RVA = "0x180ED70", Offset = "0x180ED70", VA = "0x180ED70")]
	public static void VisibilityRemove(int objectNumber)
	{
	}

	[Token(Token = "0x60019D7")]
	[Address(RVA = "0x180F0B4", Offset = "0x180F0B4", VA = "0x180F0B4")]
	public static void CheckDistanceSetup(Transform thisTransform, VectorLine line, Color color, RefInt objectNum)
	{
	}

	[Token(Token = "0x60019D8")]
	[Address(RVA = "0x180F5A0", Offset = "0x180F5A0", VA = "0x180F5A0")]
	public static void DistanceRemove(int objectNumber)
	{
	}

	[Token(Token = "0x60019D9")]
	[Address(RVA = "0x180F934", Offset = "0x180F934", VA = "0x180F934")]
	public static void CheckDistance()
	{
	}

	[Token(Token = "0x60019DA")]
	[Address(RVA = "0x180FD78", Offset = "0x180FD78", VA = "0x180FD78")]
	public static void SetOldDistance(int objectNumber, int val)
	{
	}

	[Token(Token = "0x60019DB")]
	[Address(RVA = "0x180F9F8", Offset = "0x180F9F8", VA = "0x180F9F8")]
	public static void SetDistanceColor(int i)
	{
	}

	[Token(Token = "0x60019DC")]
	[Address(RVA = "0x180FE6C", Offset = "0x180FE6C", VA = "0x180FE6C")]
	public static void DrawArrayLine(int i)
	{
	}

	[Token(Token = "0x60019DD")]
	[Address(RVA = "0x1810010", Offset = "0x1810010", VA = "0x1810010")]
	public static void DrawArrayLine2(int i)
	{
	}

	[Token(Token = "0x60019DE")]
	[Address(RVA = "0x1812428", Offset = "0x1812428", VA = "0x1812428")]
	public static void DrawArrayLines()
	{
	}

	[Token(Token = "0x60019DF")]
	[Address(RVA = "0x1812660", Offset = "0x1812660", VA = "0x1812660")]
	public static void DrawArrayLines2()
	{
	}

	[Token(Token = "0x60019E0")]
	[Address(RVA = "0x1812948", Offset = "0x1812948", VA = "0x1812948")]
	public static Bounds GetBounds(VectorLine line)
	{
		return default(Bounds);
	}

	[Token(Token = "0x60019E1")]
	[Address(RVA = "0x1812A40", Offset = "0x1812A40", VA = "0x1812A40")]
	public static Bounds GetBounds(Vector3[] points3)
	{
		return default(Bounds);
	}

	[Token(Token = "0x60019E2")]
	[Address(RVA = "0x1812D00", Offset = "0x1812D00", VA = "0x1812D00")]
	private static Mesh MakeBoundsMesh(Bounds bounds)
	{
		return null;
	}

	[Token(Token = "0x60019E3")]
	[Address(RVA = "0x181346C", Offset = "0x181346C", VA = "0x181346C")]
	public static void SetupBoundsMesh(GameObject go, VectorLine line)
	{
	}
}
[Token(Token = "0x2000399")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA023C", Offset = "0xEA023C")]
public class VisibilityControl : MonoBehaviour
{
	[Token(Token = "0x40012CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private RefInt m_objectNumber;

	[Token(Token = "0x40012CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private VectorLine m_vectorLine;

	[Token(Token = "0x40012CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool m_destroyed;

	[Token(Token = "0x17000156")]
	public RefInt objectNumber
	{
		[Token(Token = "0x60019E6")]
		[Address(RVA = "0x21E6B90", Offset = "0x21E6B90", VA = "0x21E6B90")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60019E5")]
	[Address(RVA = "0x21E6B88", Offset = "0x21E6B88", VA = "0x21E6B88")]
	public VisibilityControl()
	{
	}

	[Token(Token = "0x60019E7")]
	[Address(RVA = "0x21E6B98", Offset = "0x21E6B98", VA = "0x21E6B98")]
	public void Setup(VectorLine line, bool makeBounds)
	{
	}

	[Token(Token = "0x60019E8")]
	[Address(RVA = "0x21E6CAC", Offset = "0x21E6CAC", VA = "0x21E6CAC")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x60019E9")]
	[Address(RVA = "0x21E6D68", Offset = "0x21E6D68", VA = "0x21E6D68")]
	private void OnBecameInvisible()
	{
	}

	[Token(Token = "0x60019EA")]
	[Address(RVA = "0x21E6D94", Offset = "0x21E6D94", VA = "0x21E6D94")]
	private void OnDestroy()
	{
	}
}
[Token(Token = "0x200039A")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA0270", Offset = "0xEA0270")]
public class VisibilityControlAlways : MonoBehaviour
{
	[Token(Token = "0x40012CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private RefInt m_objectNumber;

	[Token(Token = "0x40012D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private VectorLine m_vectorLine;

	[Token(Token = "0x40012D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool m_destroyed;

	[Token(Token = "0x17000157")]
	public RefInt objectNumber
	{
		[Token(Token = "0x60019EC")]
		[Address(RVA = "0x21E6E8C", Offset = "0x21E6E8C", VA = "0x21E6E8C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60019EB")]
	[Address(RVA = "0x21E6E84", Offset = "0x21E6E84", VA = "0x21E6E84")]
	public VisibilityControlAlways()
	{
	}

	[Token(Token = "0x60019ED")]
	[Address(RVA = "0x21E6E94", Offset = "0x21E6E94", VA = "0x21E6E94")]
	public void Setup(VectorLine line)
	{
	}

	[Token(Token = "0x60019EE")]
	[Address(RVA = "0x21E6F6C", Offset = "0x21E6F6C", VA = "0x21E6F6C")]
	private void OnDestroy()
	{
	}
}
[Token(Token = "0x200039B")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA02A4", Offset = "0xEA02A4")]
public class VisibilityControlStatic : MonoBehaviour
{
	[Token(Token = "0x200053C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA02E8", Offset = "0xEA02E8")]
	private sealed class <WaitCheck>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal VisibilityControlStatic $this;

		[Token(Token = "0x4001ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal object $current;

		[Token(Token = "0x4001ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool $disposing;

		[Token(Token = "0x4001ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int $PC;

		[Token(Token = "0x170002C8")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x600249E")]
			[Address(RVA = "0x21E76DC", Offset = "0x21E76DC", VA = "0x21E76DC", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002C9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600249F")]
			[Address(RVA = "0x21E76E4", Offset = "0x21E76E4", VA = "0x21E76E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600249C")]
		[Address(RVA = "0x21E7370", Offset = "0x21E7370", VA = "0x21E7370")]
		[DebuggerHidden]
		public <WaitCheck>c__Iterator0()
		{
		}

		[Token(Token = "0x600249D")]
		[Address(RVA = "0x21E7550", Offset = "0x21E7550", VA = "0x21E7550", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024A0")]
		[Address(RVA = "0x21E76EC", Offset = "0x21E76EC", VA = "0x21E76EC", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024A1")]
		[Address(RVA = "0x21E7700", Offset = "0x21E7700", VA = "0x21E7700", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40012D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private RefInt m_objectNumber;

	[Token(Token = "0x40012D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private VectorLine m_vectorLine;

	[Token(Token = "0x40012D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool m_destroyed;

	[Token(Token = "0x17000158")]
	public RefInt objectNumber
	{
		[Token(Token = "0x60019F0")]
		[Address(RVA = "0x21E7064", Offset = "0x21E7064", VA = "0x21E7064")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60019EF")]
	[Address(RVA = "0x21E705C", Offset = "0x21E705C", VA = "0x21E705C")]
	public VisibilityControlStatic()
	{
	}

	[Token(Token = "0x60019F1")]
	[Address(RVA = "0x21E706C", Offset = "0x21E706C", VA = "0x21E706C")]
	public void Setup(VectorLine line, bool makeBounds)
	{
	}

	[Token(Token = "0x60019F2")]
	[Address(RVA = "0x21E72F0", Offset = "0x21E72F0", VA = "0x21E72F0")]
	[DebuggerHidden]
	private IEnumerator WaitCheck()
	{
		return null;
	}

	[Token(Token = "0x60019F3")]
	[Address(RVA = "0x21E7378", Offset = "0x21E7378", VA = "0x21E7378")]
	private void OnBecameVisible()
	{
	}

	[Token(Token = "0x60019F4")]
	[Address(RVA = "0x21E7434", Offset = "0x21E7434", VA = "0x21E7434")]
	private void OnBecameInvisible()
	{
	}

	[Token(Token = "0x60019F5")]
	[Address(RVA = "0x21E7460", Offset = "0x21E7460", VA = "0x21E7460")]
	private void OnDestroy()
	{
	}
}
namespace LitJsonWDD
{
	[Token(Token = "0x200039C")]
	public enum JsonType
	{
		[Token(Token = "0x40012D6")]
		None,
		[Token(Token = "0x40012D7")]
		Object,
		[Token(Token = "0x40012D8")]
		Array,
		[Token(Token = "0x40012D9")]
		String,
		[Token(Token = "0x40012DA")]
		Int,
		[Token(Token = "0x40012DB")]
		Long,
		[Token(Token = "0x40012DC")]
		Double,
		[Token(Token = "0x40012DD")]
		Boolean
	}
	[Token(Token = "0x200039D")]
	public interface IJsonWrapper : IList, IOrderedDictionary, IEnumerable, ICollection, IDictionary
	{
		[Token(Token = "0x17000159")]
		bool IsArray
		{
			[Token(Token = "0x60019F6")]
			get;
		}

		[Token(Token = "0x1700015A")]
		bool IsBoolean
		{
			[Token(Token = "0x60019F7")]
			get;
		}

		[Token(Token = "0x1700015B")]
		bool IsDouble
		{
			[Token(Token = "0x60019F8")]
			get;
		}

		[Token(Token = "0x1700015C")]
		bool IsInt
		{
			[Token(Token = "0x60019F9")]
			get;
		}

		[Token(Token = "0x1700015D")]
		bool IsLong
		{
			[Token(Token = "0x60019FA")]
			get;
		}

		[Token(Token = "0x1700015E")]
		bool IsObject
		{
			[Token(Token = "0x60019FB")]
			get;
		}

		[Token(Token = "0x1700015F")]
		bool IsString
		{
			[Token(Token = "0x60019FC")]
			get;
		}

		[Token(Token = "0x60019FD")]
		bool GetBoolean();

		[Token(Token = "0x60019FE")]
		double GetDouble();

		[Token(Token = "0x60019FF")]
		int GetInt();

		[Token(Token = "0x6001A00")]
		JsonType GetJsonType();

		[Token(Token = "0x6001A01")]
		long GetLong();

		[Token(Token = "0x6001A02")]
		string GetString();

		[Token(Token = "0x6001A03")]
		void SetBoolean(bool val);

		[Token(Token = "0x6001A04")]
		void SetDouble(double val);

		[Token(Token = "0x6001A05")]
		void SetInt(int val);

		[Token(Token = "0x6001A06")]
		void SetJsonType(JsonType type);

		[Token(Token = "0x6001A07")]
		void SetLong(long val);

		[Token(Token = "0x6001A08")]
		void SetString(string val);

		[Token(Token = "0x6001A09")]
		string ToJson();

		[Token(Token = "0x6001A0A")]
		void ToJson(JsonWriter writer);
	}
	[Token(Token = "0x200039E")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xEA0348", Offset = "0xEA0348")]
	public class JsonData : IJsonWrapper, IEquatable<JsonData>, IList, IOrderedDictionary, IEnumerable, ICollection, IDictionary
	{
		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IList<JsonData> inst_array;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private bool inst_boolean;

		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private double inst_double;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int inst_int;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private long inst_long;

		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IDictionary<string, JsonData> inst_object;

		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private string inst_string;

		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string json;

		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private JsonType type;

		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private IList<KeyValuePair<string, JsonData>> object_list;

		[Token(Token = "0x17000160")]
		private int System.Collections.ICollection.Count
		{
			[Token(Token = "0x6001A1A")]
			[Address(RVA = "0x195353C", Offset = "0x195353C", VA = "0x195353C", Slot = "37")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000161")]
		private bool System.Collections.ICollection.IsSynchronized
		{
			[Token(Token = "0x6001A1B")]
			[Address(RVA = "0x1953540", Offset = "0x1953540", VA = "0x1953540", Slot = "38")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000162")]
		private object System.Collections.ICollection.SyncRoot
		{
			[Token(Token = "0x6001A1C")]
			[Address(RVA = "0x195361C", Offset = "0x195361C", VA = "0x195361C", Slot = "39")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000163")]
		private bool System.Collections.IDictionary.IsFixedSize
		{
			[Token(Token = "0x6001A1D")]
			[Address(RVA = "0x19536F8", Offset = "0x19536F8", VA = "0x19536F8", Slot = "46")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000164")]
		private bool System.Collections.IDictionary.IsReadOnly
		{
			[Token(Token = "0x6001A1E")]
			[Address(RVA = "0x19539F4", Offset = "0x19539F4", VA = "0x19539F4", Slot = "47")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000165")]
		private ICollection System.Collections.IDictionary.Keys
		{
			[Token(Token = "0x6001A1F")]
			[Address(RVA = "0x1953AD0", Offset = "0x1953AD0", VA = "0x1953AD0", Slot = "50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000166")]
		private ICollection System.Collections.IDictionary.Values
		{
			[Token(Token = "0x6001A20")]
			[Address(RVA = "0x1953F08", Offset = "0x1953F08", VA = "0x1953F08", Slot = "51")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000167")]
		private bool LitJsonWDD.IJsonWrapper.IsArray
		{
			[Token(Token = "0x6001A21")]
			[Address(RVA = "0x1954340", Offset = "0x1954340", VA = "0x1954340", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000168")]
		private bool LitJsonWDD.IJsonWrapper.IsBoolean
		{
			[Token(Token = "0x6001A22")]
			[Address(RVA = "0x1954354", Offset = "0x1954354", VA = "0x1954354", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000169")]
		private bool LitJsonWDD.IJsonWrapper.IsDouble
		{
			[Token(Token = "0x6001A23")]
			[Address(RVA = "0x1954368", Offset = "0x1954368", VA = "0x1954368", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700016A")]
		private bool LitJsonWDD.IJsonWrapper.IsInt
		{
			[Token(Token = "0x6001A24")]
			[Address(RVA = "0x195437C", Offset = "0x195437C", VA = "0x195437C", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700016B")]
		private bool LitJsonWDD.IJsonWrapper.IsLong
		{
			[Token(Token = "0x6001A25")]
			[Address(RVA = "0x1954390", Offset = "0x1954390", VA = "0x1954390", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700016C")]
		private bool LitJsonWDD.IJsonWrapper.IsObject
		{
			[Token(Token = "0x6001A26")]
			[Address(RVA = "0x19543A4", Offset = "0x19543A4", VA = "0x19543A4", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700016D")]
		private bool LitJsonWDD.IJsonWrapper.IsString
		{
			[Token(Token = "0x6001A27")]
			[Address(RVA = "0x19543B4", Offset = "0x19543B4", VA = "0x19543B4", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700016E")]
		private bool System.Collections.IList.IsFixedSize
		{
			[Token(Token = "0x6001A28")]
			[Address(RVA = "0x19543C8", Offset = "0x19543C8", VA = "0x19543C8", Slot = "25")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700016F")]
		private bool System.Collections.IList.IsReadOnly
		{
			[Token(Token = "0x6001A29")]
			[Address(RVA = "0x195468C", Offset = "0x195468C", VA = "0x195468C", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000170")]
		private object System.Collections.IDictionary.Item
		{
			[Token(Token = "0x6001A2A")]
			[Address(RVA = "0x1954768", Offset = "0x1954768", VA = "0x1954768", Slot = "48")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A2B")]
			[Address(RVA = "0x195484C", Offset = "0x195484C", VA = "0x195484C", Slot = "49")]
			set
			{
			}
		}

		[Token(Token = "0x17000171")]
		private object System.Collections.Specialized.IOrderedDictionary.Item
		{
			[Token(Token = "0x6001A2C")]
			[Address(RVA = "0x1954EFC", Offset = "0x1954EFC", VA = "0x1954EFC", Slot = "44")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A2D")]
			[Address(RVA = "0x1955014", Offset = "0x1955014", VA = "0x1955014", Slot = "45")]
			set
			{
			}
		}

		[Token(Token = "0x17000172")]
		private object System.Collections.IList.Item
		{
			[Token(Token = "0x6001A2E")]
			[Address(RVA = "0x19552B4", Offset = "0x19552B4", VA = "0x19552B4", Slot = "27")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A2F")]
			[Address(RVA = "0x1955398", Offset = "0x1955398", VA = "0x1955398", Slot = "28")]
			set
			{
			}
		}

		[Token(Token = "0x17000173")]
		public int Count
		{
			[Token(Token = "0x6001A12")]
			[Address(RVA = "0x1953228", Offset = "0x1953228", VA = "0x1953228")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000174")]
		public bool IsArray
		{
			[Token(Token = "0x6001A13")]
			[Address(RVA = "0x19534B4", Offset = "0x19534B4", VA = "0x19534B4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000175")]
		public bool IsBoolean
		{
			[Token(Token = "0x6001A14")]
			[Address(RVA = "0x19534C8", Offset = "0x19534C8", VA = "0x19534C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000176")]
		public bool IsDouble
		{
			[Token(Token = "0x6001A15")]
			[Address(RVA = "0x19534DC", Offset = "0x19534DC", VA = "0x19534DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000177")]
		public bool IsInt
		{
			[Token(Token = "0x6001A16")]
			[Address(RVA = "0x19534F0", Offset = "0x19534F0", VA = "0x19534F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000178")]
		public bool IsLong
		{
			[Token(Token = "0x6001A17")]
			[Address(RVA = "0x1953504", Offset = "0x1953504", VA = "0x1953504")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000179")]
		public bool IsObject
		{
			[Token(Token = "0x6001A18")]
			[Address(RVA = "0x1953518", Offset = "0x1953518", VA = "0x1953518")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017A")]
		public bool IsString
		{
			[Token(Token = "0x6001A19")]
			[Address(RVA = "0x1953528", Offset = "0x1953528", VA = "0x1953528")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700017B")]
		public JsonData Item
		{
			[Token(Token = "0x6001A30")]
			[Address(RVA = "0x1955708", Offset = "0x1955708", VA = "0x1955708")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A31")]
			[Address(RVA = "0x1954A40", Offset = "0x1954A40", VA = "0x1954A40")]
			set
			{
			}
		}

		[Token(Token = "0x1700017C")]
		public JsonData Item
		{
			[Token(Token = "0x6001A32")]
			[Address(RVA = "0x19557EC", Offset = "0x19557EC", VA = "0x19557EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A33")]
			[Address(RVA = "0x19553CC", Offset = "0x19553CC", VA = "0x19553CC")]
			set
			{
			}
		}

		[Token(Token = "0x6001A0B")]
		[Address(RVA = "0x1952DF8", Offset = "0x1952DF8", VA = "0x1952DF8")]
		public JsonData()
		{
		}

		[Token(Token = "0x6001A0C")]
		[Address(RVA = "0x1952E00", Offset = "0x1952E00", VA = "0x1952E00")]
		public JsonData(bool boolean)
		{
		}

		[Token(Token = "0x6001A0D")]
		[Address(RVA = "0x1952E28", Offset = "0x1952E28", VA = "0x1952E28")]
		public JsonData(double number)
		{
		}

		[Token(Token = "0x6001A0E")]
		[Address(RVA = "0x1952E58", Offset = "0x1952E58", VA = "0x1952E58")]
		public JsonData(int number)
		{
		}

		[Token(Token = "0x6001A0F")]
		[Address(RVA = "0x1952E80", Offset = "0x1952E80", VA = "0x1952E80")]
		public JsonData(long number)
		{
		}

		[Token(Token = "0x6001A10")]
		[Address(RVA = "0x1952EB0", Offset = "0x1952EB0", VA = "0x1952EB0")]
		public JsonData(object obj)
		{
		}

		[Token(Token = "0x6001A11")]
		[Address(RVA = "0x1953200", Offset = "0x1953200", VA = "0x1953200")]
		public JsonData(string str)
		{
		}

		[Token(Token = "0x6001A34")]
		[Address(RVA = "0x19559A0", Offset = "0x19559A0", VA = "0x19559A0")]
		public static implicit operator JsonData(bool data)
		{
			return null;
		}

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0x1955A1C", Offset = "0x1955A1C", VA = "0x1955A1C")]
		public static implicit operator JsonData(double data)
		{
			return null;
		}

		[Token(Token = "0x6001A36")]
		[Address(RVA = "0x1955AA0", Offset = "0x1955AA0", VA = "0x1955AA0")]
		public static implicit operator JsonData(int data)
		{
			return null;
		}

		[Token(Token = "0x6001A37")]
		[Address(RVA = "0x1955B1C", Offset = "0x1955B1C", VA = "0x1955B1C")]
		public static implicit operator JsonData(long data)
		{
			return null;
		}

		[Token(Token = "0x6001A38")]
		[Address(RVA = "0x1955BA0", Offset = "0x1955BA0", VA = "0x1955BA0")]
		public static implicit operator JsonData(string data)
		{
			return null;
		}

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0x1955C1C", Offset = "0x1955C1C", VA = "0x1955C1C")]
		public static explicit operator bool(JsonData data)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0x1955CD4", Offset = "0x1955CD4", VA = "0x1955CD4")]
		public static explicit operator double(JsonData data)
		{
			return default(double);
		}

		[Token(Token = "0x6001A3B")]
		[Address(RVA = "0x1955D90", Offset = "0x1955D90", VA = "0x1955D90")]
		public static explicit operator int(JsonData data)
		{
			return default(int);
		}

		[Token(Token = "0x6001A3C")]
		[Address(RVA = "0x1955E48", Offset = "0x1955E48", VA = "0x1955E48")]
		public static explicit operator long(JsonData data)
		{
			return default(long);
		}

		[Token(Token = "0x6001A3D")]
		[Address(RVA = "0x1955F00", Offset = "0x1955F00", VA = "0x1955F00")]
		public static explicit operator string(JsonData data)
		{
			return null;
		}

		[Token(Token = "0x6001A3E")]
		[Address(RVA = "0x1955FB8", Offset = "0x1955FB8", VA = "0x1955FB8", Slot = "40")]
		private void System.Collections.ICollection.CopyTo(Array array, int index)
		{
		}

		[Token(Token = "0x6001A3F")]
		[Address(RVA = "0x19560A4", Offset = "0x19560A4", VA = "0x19560A4", Slot = "52")]
		private void System.Collections.IDictionary.Add(object key, object value)
		{
		}

		[Token(Token = "0x6001A40")]
		[Address(RVA = "0x19562D4", Offset = "0x19562D4", VA = "0x19562D4", Slot = "53")]
		private void System.Collections.IDictionary.Clear()
		{
		}

		[Token(Token = "0x6001A41")]
		[Address(RVA = "0x1956440", Offset = "0x1956440", VA = "0x1956440", Slot = "54")]
		private bool System.Collections.IDictionary.Contains(object key)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A42")]
		[Address(RVA = "0x1956524", Offset = "0x1956524", VA = "0x1956524", Slot = "55")]
		private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001A43")]
		[Address(RVA = "0x19565E8", Offset = "0x19565E8", VA = "0x19565E8", Slot = "56")]
		private void System.Collections.IDictionary.Remove(object key)
		{
		}

		[Token(Token = "0x6001A44")]
		[Address(RVA = "0x19569A8", Offset = "0x19569A8", VA = "0x19569A8", Slot = "36")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001A45")]
		[Address(RVA = "0x1956A84", Offset = "0x1956A84", VA = "0x1956A84", Slot = "11")]
		private bool LitJsonWDD.IJsonWrapper.GetBoolean()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A46")]
		[Address(RVA = "0x1956B30", Offset = "0x1956B30", VA = "0x1956B30", Slot = "12")]
		private double LitJsonWDD.IJsonWrapper.GetDouble()
		{
			return default(double);
		}

		[Token(Token = "0x6001A47")]
		[Address(RVA = "0x1956BE0", Offset = "0x1956BE0", VA = "0x1956BE0", Slot = "13")]
		private int LitJsonWDD.IJsonWrapper.GetInt()
		{
			return default(int);
		}

		[Token(Token = "0x6001A48")]
		[Address(RVA = "0x1956C8C", Offset = "0x1956C8C", VA = "0x1956C8C", Slot = "15")]
		private long LitJsonWDD.IJsonWrapper.GetLong()
		{
			return default(long);
		}

		[Token(Token = "0x6001A49")]
		[Address(RVA = "0x1956D38", Offset = "0x1956D38", VA = "0x1956D38", Slot = "16")]
		private string LitJsonWDD.IJsonWrapper.GetString()
		{
			return null;
		}

		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0x1956DE4", Offset = "0x1956DE4", VA = "0x1956DE4", Slot = "17")]
		private void LitJsonWDD.IJsonWrapper.SetBoolean(bool val)
		{
		}

		[Token(Token = "0x6001A4B")]
		[Address(RVA = "0x1956DFC", Offset = "0x1956DFC", VA = "0x1956DFC", Slot = "18")]
		private void LitJsonWDD.IJsonWrapper.SetDouble(double val)
		{
		}

		[Token(Token = "0x6001A4C")]
		[Address(RVA = "0x1956E18", Offset = "0x1956E18", VA = "0x1956E18", Slot = "19")]
		private void LitJsonWDD.IJsonWrapper.SetInt(int val)
		{
		}

		[Token(Token = "0x6001A4D")]
		[Address(RVA = "0x1956E30", Offset = "0x1956E30", VA = "0x1956E30", Slot = "21")]
		private void LitJsonWDD.IJsonWrapper.SetLong(long val)
		{
		}

		[Token(Token = "0x6001A4E")]
		[Address(RVA = "0x1956E4C", Offset = "0x1956E4C", VA = "0x1956E4C", Slot = "22")]
		private void LitJsonWDD.IJsonWrapper.SetString(string val)
		{
		}

		[Token(Token = "0x6001A4F")]
		[Address(RVA = "0x1956E64", Offset = "0x1956E64", VA = "0x1956E64", Slot = "23")]
		private string LitJsonWDD.IJsonWrapper.ToJson()
		{
			return null;
		}

		[Token(Token = "0x6001A50")]
		[Address(RVA = "0x1956F44", Offset = "0x1956F44", VA = "0x1956F44", Slot = "24")]
		private void LitJsonWDD.IJsonWrapper.ToJson(JsonWriter writer)
		{
		}

		[Token(Token = "0x6001A51")]
		[Address(RVA = "0x1956FAC", Offset = "0x1956FAC", VA = "0x1956FAC", Slot = "29")]
		private int System.Collections.IList.Add(object value)
		{
			return default(int);
		}

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0x19570A8", Offset = "0x19570A8", VA = "0x19570A8", Slot = "30")]
		private void System.Collections.IList.Clear()
		{
		}

		[Token(Token = "0x6001A53")]
		[Address(RVA = "0x195718C", Offset = "0x195718C", VA = "0x195718C", Slot = "31")]
		private bool System.Collections.IList.Contains(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A54")]
		[Address(RVA = "0x1957270", Offset = "0x1957270", VA = "0x1957270", Slot = "32")]
		private int System.Collections.IList.IndexOf(object value)
		{
			return default(int);
		}

		[Token(Token = "0x6001A55")]
		[Address(RVA = "0x1957354", Offset = "0x1957354", VA = "0x1957354", Slot = "33")]
		private void System.Collections.IList.Insert(int index, object value)
		{
		}

		[Token(Token = "0x6001A56")]
		[Address(RVA = "0x1957450", Offset = "0x1957450", VA = "0x1957450", Slot = "34")]
		private void System.Collections.IList.Remove(object value)
		{
		}

		[Token(Token = "0x6001A57")]
		[Address(RVA = "0x195753C", Offset = "0x195753C", VA = "0x195753C", Slot = "35")]
		private void System.Collections.IList.RemoveAt(int index)
		{
		}

		[Token(Token = "0x6001A58")]
		[Address(RVA = "0x1957628", Offset = "0x1957628", VA = "0x1957628", Slot = "41")]
		private IDictionaryEnumerator System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6001A59")]
		[Address(RVA = "0x1957750", Offset = "0x1957750", VA = "0x1957750", Slot = "42")]
		private void System.Collections.Specialized.IOrderedDictionary.Insert(int idx, object key, object value)
		{
		}

		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0x19578FC", Offset = "0x19578FC", VA = "0x19578FC", Slot = "43")]
		private void System.Collections.Specialized.IOrderedDictionary.RemoveAt(int idx)
		{
		}

		[Token(Token = "0x6001A5B")]
		[Address(RVA = "0x1953304", Offset = "0x1953304", VA = "0x1953304")]
		private ICollection EnsureCollection()
		{
			return null;
		}

		[Token(Token = "0x6001A5C")]
		[Address(RVA = "0x19537D4", Offset = "0x19537D4", VA = "0x19537D4")]
		private IDictionary EnsureDictionary()
		{
			return null;
		}

		[Token(Token = "0x6001A5D")]
		[Address(RVA = "0x19544A4", Offset = "0x19544A4", VA = "0x19544A4")]
		private IList EnsureList()
		{
			return null;
		}

		[Token(Token = "0x6001A5E")]
		[Address(RVA = "0x1954994", Offset = "0x1954994", VA = "0x1954994")]
		private JsonData ToJsonData(object obj)
		{
			return null;
		}

		[Token(Token = "0x6001A5F")]
		[Address(RVA = "0x1957B30", Offset = "0x1957B30", VA = "0x1957B30")]
		private static void WriteJson(IJsonWrapper obj, JsonWriter writer)
		{
		}

		[Token(Token = "0x6001A60")]
		[Address(RVA = "0x1956FB0", Offset = "0x1956FB0", VA = "0x1956FB0")]
		public int Add(object value)
		{
			return default(int);
		}

		[Token(Token = "0x6001A61")]
		[Address(RVA = "0x1959524", Offset = "0x1959524", VA = "0x1959524")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001A62")]
		[Address(RVA = "0x1959664", Offset = "0x1959664", VA = "0x1959664", Slot = "57")]
		public bool Equals(JsonData x)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A63")]
		[Address(RVA = "0x19597B8", Offset = "0x19597B8", VA = "0x19597B8", Slot = "14")]
		public JsonType GetJsonType()
		{
			return default(JsonType);
		}

		[Token(Token = "0x6001A64")]
		[Address(RVA = "0x19597C0", Offset = "0x19597C0", VA = "0x19597C0", Slot = "20")]
		public void SetJsonType(JsonType type)
		{
		}

		[Token(Token = "0x6001A65")]
		[Address(RVA = "0x1956E68", Offset = "0x1956E68", VA = "0x1956E68")]
		public string ToJson()
		{
			return null;
		}

		[Token(Token = "0x6001A66")]
		[Address(RVA = "0x1956F48", Offset = "0x1956F48", VA = "0x1956F48")]
		public void ToJson(JsonWriter writer)
		{
		}

		[Token(Token = "0x6001A67")]
		[Address(RVA = "0x1959A18", Offset = "0x1959A18", VA = "0x1959A18", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200039F")]
	internal class OrderedDictionaryEnumerator : IDictionaryEnumerator, IEnumerator
	{
		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IEnumerator<KeyValuePair<string, JsonData>> list_enumerator;

		[Token(Token = "0x1700017D")]
		public object Current
		{
			[Token(Token = "0x6001A69")]
			[Address(RVA = "0x196CCAC", Offset = "0x196CCAC", VA = "0x196CCAC", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017E")]
		public DictionaryEntry Entry
		{
			[Token(Token = "0x6001A6A")]
			[Address(RVA = "0x196CD30", Offset = "0x196CD30", VA = "0x196CD30", Slot = "4")]
			get
			{
				return default(DictionaryEntry);
			}
		}

		[Token(Token = "0x1700017F")]
		public object Key
		{
			[Token(Token = "0x6001A6B")]
			[Address(RVA = "0x196CE78", Offset = "0x196CE78", VA = "0x196CE78", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000180")]
		public object Value
		{
			[Token(Token = "0x6001A6C")]
			[Address(RVA = "0x196CF80", Offset = "0x196CF80", VA = "0x196CF80", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001A68")]
		[Address(RVA = "0x1957730", Offset = "0x1957730", VA = "0x1957730")]
		public OrderedDictionaryEnumerator(IEnumerator<KeyValuePair<string, JsonData>> enumerator)
		{
		}

		[Token(Token = "0x6001A6D")]
		[Address(RVA = "0x196D088", Offset = "0x196D088", VA = "0x196D088", Slot = "8")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A6E")]
		[Address(RVA = "0x196D15C", Offset = "0x196D15C", VA = "0x196D15C", Slot = "9")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x20003A0")]
	public class JsonException : ApplicationException
	{
		[Token(Token = "0x6001A6F")]
		[Address(RVA = "0x1959B30", Offset = "0x1959B30", VA = "0x1959B30")]
		public JsonException()
		{
		}

		[Token(Token = "0x6001A70")]
		[Address(RVA = "0x1959B38", Offset = "0x1959B38", VA = "0x1959B38")]
		internal JsonException(ParserToken token)
		{
		}

		[Token(Token = "0x6001A71")]
		[Address(RVA = "0x1959C0C", Offset = "0x1959C0C", VA = "0x1959C0C")]
		internal JsonException(ParserToken token, Exception inner_exception)
		{
		}

		[Token(Token = "0x6001A72")]
		[Address(RVA = "0x1959CE8", Offset = "0x1959CE8", VA = "0x1959CE8")]
		internal JsonException(int c)
		{
		}

		[Token(Token = "0x6001A73")]
		[Address(RVA = "0x1959DBC", Offset = "0x1959DBC", VA = "0x1959DBC")]
		internal JsonException(int c, Exception inner_exception)
		{
		}

		[Token(Token = "0x6001A74")]
		[Address(RVA = "0x1959E98", Offset = "0x1959E98", VA = "0x1959E98")]
		public JsonException(string message)
		{
		}

		[Token(Token = "0x6001A75")]
		[Address(RVA = "0x1959EA0", Offset = "0x1959EA0", VA = "0x1959EA0")]
		public JsonException(string message, Exception inner_exception)
		{
		}
	}
	[Token(Token = "0x20003A1")]
	internal struct PropertyMetadata
	{
		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MemberInfo Info;

		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool IsField;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Type Type;
	}
	[Token(Token = "0x20003A2")]
	internal struct ArrayMetadata
	{
		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Type element_type;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private bool is_array;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		private bool is_list;

		[Token(Token = "0x17000181")]
		public Type ElementType
		{
			[Token(Token = "0x6001A76")]
			[Address(RVA = "0x19525B0", Offset = "0x19525B0", VA = "0x19525B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A77")]
			[Address(RVA = "0x19525B8", Offset = "0x19525B8", VA = "0x19525B8")]
			set
			{
			}
		}

		[Token(Token = "0x17000182")]
		public bool IsArray
		{
			[Token(Token = "0x6001A78")]
			[Address(RVA = "0x19525C0", Offset = "0x19525C0", VA = "0x19525C0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A79")]
			[Address(RVA = "0x19525C8", Offset = "0x19525C8", VA = "0x19525C8")]
			set
			{
			}
		}

		[Token(Token = "0x17000183")]
		public bool IsList
		{
			[Token(Token = "0x6001A7A")]
			[Address(RVA = "0x19525D0", Offset = "0x19525D0", VA = "0x19525D0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A7B")]
			[Address(RVA = "0x19525D8", Offset = "0x19525D8", VA = "0x19525D8")]
			set
			{
			}
		}
	}
	[Token(Token = "0x20003A3")]
	internal struct ObjectMetadata
	{
		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Type element_type;

		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private bool is_dictionary;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private IDictionary<string, PropertyMetadata> properties;

		[Token(Token = "0x17000184")]
		public Type ElementType
		{
			[Token(Token = "0x6001A7C")]
			[Address(RVA = "0x196CC7C", Offset = "0x196CC7C", VA = "0x196CC7C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A7D")]
			[Address(RVA = "0x196CC84", Offset = "0x196CC84", VA = "0x196CC84")]
			set
			{
			}
		}

		[Token(Token = "0x17000185")]
		public bool IsDictionary
		{
			[Token(Token = "0x6001A7E")]
			[Address(RVA = "0x196CC8C", Offset = "0x196CC8C", VA = "0x196CC8C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A7F")]
			[Address(RVA = "0x196CC94", Offset = "0x196CC94", VA = "0x196CC94")]
			set
			{
			}
		}

		[Token(Token = "0x17000186")]
		public IDictionary<string, PropertyMetadata> Properties
		{
			[Token(Token = "0x6001A80")]
			[Address(RVA = "0x196CC9C", Offset = "0x196CC9C", VA = "0x196CC9C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A81")]
			[Address(RVA = "0x196CCA4", Offset = "0x196CCA4", VA = "0x196CCA4")]
			set
			{
			}
		}
	}
	[Token(Token = "0x20003A4")]
	internal delegate void ExporterFunc(object obj, JsonWriter writer);
	[Token(Token = "0x20003A5")]
	public delegate void ExporterFunc<T>(T obj, JsonWriter writer);
	[Token(Token = "0x20003A6")]
	internal delegate object ImporterFunc(object input);
	[Token(Token = "0x20003A7")]
	public delegate TValue ImporterFunc<TJson, TValue>(TJson input);
	[Token(Token = "0x20003A8")]
	public delegate IJsonWrapper WrapperFactory();
	[Token(Token = "0x20003A9")]
	public class JsonMapper
	{
		[Token(Token = "0x200053D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA067C", Offset = "0xEA067C")]
		private sealed class <RegisterExporter>c__AnonStorey0<T>
		{
			[Token(Token = "0x4001ADD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal ExporterFunc<T> exporter;

			[Token(Token = "0x60024A2")]
			public <RegisterExporter>c__AnonStorey0()
			{
			}

			[Token(Token = "0x60024A3")]
			internal void <>m__0(object obj, JsonWriter writer)
			{
			}
		}

		[Token(Token = "0x200053E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA068C", Offset = "0xEA068C")]
		private sealed class <RegisterImporter>c__AnonStorey1<TJson, TValue>
		{
			[Token(Token = "0x4001ADE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal ImporterFunc<TJson, TValue> importer;

			[Token(Token = "0x60024A4")]
			public <RegisterImporter>c__AnonStorey1()
			{
			}

			[Token(Token = "0x60024A5")]
			internal object <>m__0(object input)
			{
				return null;
			}
		}

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int max_nesting_depth;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static IFormatProvider datetime_format;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IDictionary<Type, ExporterFunc> base_exporters_table;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static IDictionary<Type, ExporterFunc> custom_exporters_table;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static IDictionary<Type, IDictionary<Type, ImporterFunc>> base_importers_table;

		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static IDictionary<Type, IDictionary<Type, ImporterFunc>> custom_importers_table;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static IDictionary<Type, ArrayMetadata> array_metadata;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly object array_metadata_lock;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static IDictionary<Type, IDictionary<Type, MethodInfo>> conv_ops;

		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static readonly object conv_ops_lock;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static IDictionary<Type, ObjectMetadata> object_metadata;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static readonly object object_metadata_lock;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static IDictionary<Type, IList<PropertyMetadata>> type_properties;

		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static readonly object type_properties_lock;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static JsonWriter static_writer;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private static readonly object static_writer_lock;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA037C", Offset = "0xEA037C")]
		private static ExporterFunc <>f__am$cache0;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA038C", Offset = "0xEA038C")]
		private static ExporterFunc <>f__am$cache1;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA039C", Offset = "0xEA039C")]
		private static ExporterFunc <>f__am$cache2;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA03AC", Offset = "0xEA03AC")]
		private static ExporterFunc <>f__am$cache3;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA03BC", Offset = "0xEA03BC")]
		private static ExporterFunc <>f__am$cache4;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA03CC", Offset = "0xEA03CC")]
		private static ExporterFunc <>f__am$cache5;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA03DC", Offset = "0xEA03DC")]
		private static ExporterFunc <>f__am$cache6;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA03EC", Offset = "0xEA03EC")]
		private static ExporterFunc <>f__am$cache7;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA03FC", Offset = "0xEA03FC")]
		private static ExporterFunc <>f__am$cache8;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA040C", Offset = "0xEA040C")]
		private static ImporterFunc <>f__am$cache9;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA041C", Offset = "0xEA041C")]
		private static ImporterFunc <>f__am$cacheA;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA042C", Offset = "0xEA042C")]
		private static ImporterFunc <>f__am$cacheB;

		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA043C", Offset = "0xEA043C")]
		private static ImporterFunc <>f__am$cacheC;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA044C", Offset = "0xEA044C")]
		private static ImporterFunc <>f__am$cacheD;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA045C", Offset = "0xEA045C")]
		private static ImporterFunc <>f__am$cacheE;

		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA046C", Offset = "0xEA046C")]
		private static ImporterFunc <>f__am$cacheF;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA047C", Offset = "0xEA047C")]
		private static ImporterFunc <>f__am$cache10;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA048C", Offset = "0xEA048C")]
		private static ImporterFunc <>f__am$cache11;

		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA049C", Offset = "0xEA049C")]
		private static ImporterFunc <>f__am$cache12;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA04AC", Offset = "0xEA04AC")]
		private static ImporterFunc <>f__am$cache13;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA04BC", Offset = "0xEA04BC")]
		private static ImporterFunc <>f__am$cache14;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA04CC", Offset = "0xEA04CC")]
		private static WrapperFactory <>f__am$cache15;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA04DC", Offset = "0xEA04DC")]
		private static WrapperFactory <>f__am$cache16;

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA04EC", Offset = "0xEA04EC")]
		private static WrapperFactory <>f__am$cache17;

		[Token(Token = "0x6001A96")]
		[Address(RVA = "0x1959EA8", Offset = "0x1959EA8", VA = "0x1959EA8")]
		static JsonMapper()
		{
		}

		[Token(Token = "0x6001A97")]
		[Address(RVA = "0x195C4F4", Offset = "0x195C4F4", VA = "0x195C4F4")]
		public JsonMapper()
		{
		}

		[Token(Token = "0x6001A98")]
		[Address(RVA = "0x195C4FC", Offset = "0x195C4FC", VA = "0x195C4FC")]
		private static void AddArrayMetadata(Type type)
		{
		}

		[Token(Token = "0x6001A99")]
		[Address(RVA = "0x195CABC", Offset = "0x195CABC", VA = "0x195CABC")]
		private static void AddObjectMetadata(Type type)
		{
		}

		[Token(Token = "0x6001A9A")]
		[Address(RVA = "0x195D2F4", Offset = "0x195D2F4", VA = "0x195D2F4")]
		private static void AddTypeProperties(Type type)
		{
		}

		[Token(Token = "0x6001A9B")]
		[Address(RVA = "0x195D8EC", Offset = "0x195D8EC", VA = "0x195D8EC")]
		private static MethodInfo GetConvOp(Type t1, Type t2)
		{
			return null;
		}

		[Token(Token = "0x6001A9C")]
		[Address(RVA = "0x195E360", Offset = "0x195E360", VA = "0x195E360")]
		private static object ReadValue(Type inst_type, JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001A9D")]
		[Address(RVA = "0x1960264", Offset = "0x1960264", VA = "0x1960264")]
		private static IJsonWrapper ReadValue(WrapperFactory factory, JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001A9E")]
		[Address(RVA = "0x195A28C", Offset = "0x195A28C", VA = "0x195A28C")]
		private static void RegisterBaseExporters()
		{
		}

		[Token(Token = "0x6001A9F")]
		[Address(RVA = "0x195B398", Offset = "0x195B398", VA = "0x195B398")]
		private static void RegisterBaseImporters()
		{
		}

		[Token(Token = "0x6001AA0")]
		[Address(RVA = "0x1960E40", Offset = "0x1960E40", VA = "0x1960E40")]
		private static void RegisterImporter(IDictionary<Type, IDictionary<Type, ImporterFunc>> table, Type json_type, Type value_type, ImporterFunc importer)
		{
		}

		[Token(Token = "0x6001AA1")]
		[Address(RVA = "0x1961114", Offset = "0x1961114", VA = "0x1961114")]
		private static void WriteValue(object obj, JsonWriter writer, bool writer_is_private, int depth)
		{
		}

		[Token(Token = "0x6001AA2")]
		[Address(RVA = "0x1963214", Offset = "0x1963214", VA = "0x1963214")]
		public static string ToJson(object obj)
		{
			return null;
		}

		[Token(Token = "0x6001AA3")]
		[Address(RVA = "0x19634C4", Offset = "0x19634C4", VA = "0x19634C4")]
		public static void ToJson(object obj, JsonWriter writer)
		{
		}

		[Token(Token = "0x6001AA4")]
		[Address(RVA = "0x1963560", Offset = "0x1963560", VA = "0x1963560")]
		public static JsonData ToObject(JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001AA5")]
		[Address(RVA = "0x19637F0", Offset = "0x19637F0", VA = "0x19637F0")]
		public static JsonData ToObject(TextReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001AA6")]
		[Address(RVA = "0x1963A10", Offset = "0x1963A10", VA = "0x1963A10")]
		public static JsonData ToObject(string json)
		{
			return null;
		}

		[Token(Token = "0x6001AA7")]
		public static T ToObject<T>(JsonReader reader)
		{
			return (T)null;
		}

		[Token(Token = "0x6001AA8")]
		public static T ToObject<T>(TextReader reader)
		{
			return (T)null;
		}

		[Token(Token = "0x6001AA9")]
		public static T ToObject<T>(string json)
		{
			return (T)null;
		}

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0x1963768", Offset = "0x1963768", VA = "0x1963768")]
		public static IJsonWrapper ToWrapper(WrapperFactory factory, JsonReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0x1963C04", Offset = "0x1963C04", VA = "0x1963C04")]
		public static IJsonWrapper ToWrapper(WrapperFactory factory, string json)
		{
			return null;
		}

		[Token(Token = "0x6001AAC")]
		public static void RegisterExporter<T>(ExporterFunc<T> exporter)
		{
		}

		[Token(Token = "0x6001AAD")]
		public static void RegisterImporter<TJson, TValue>(ImporterFunc<TJson, TValue> importer)
		{
		}

		[Token(Token = "0x6001AAE")]
		[Address(RVA = "0x1963D30", Offset = "0x1963D30", VA = "0x1963D30")]
		public static void UnregisterExporters()
		{
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0x1963E40", Offset = "0x1963E40", VA = "0x1963E40")]
		public static void UnregisterImporters()
		{
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0x1963F50", Offset = "0x1963F50", VA = "0x1963F50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA04FC", Offset = "0xEA04FC")]
		private static void <RegisterBaseExporters>m__0(object obj, JsonWriter writer)
		{
		}

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0x1964070", Offset = "0x1964070", VA = "0x1964070")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA050C", Offset = "0xEA050C")]
		private static void <RegisterBaseExporters>m__1(object obj, JsonWriter writer)
		{
		}

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0x1964190", Offset = "0x1964190", VA = "0x1964190")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA051C", Offset = "0xEA051C")]
		private static void <RegisterBaseExporters>m__2(object obj, JsonWriter writer)
		{
		}

		[Token(Token = "0x6001AB3")]
		[Address(RVA = "0x1964308", Offset = "0x1964308", VA = "0x1964308")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA052C", Offset = "0xEA052C")]
		private static void <RegisterBaseExporters>m__3(object obj, JsonWriter writer)
		{
		}

		[Token(Token = "0x6001AB4")]
		[Address(RVA = "0x196451C", Offset = "0x196451C", VA = "0x196451C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA053C", Offset = "0xEA053C")]
		private static void <RegisterBaseExporters>m__4(object obj, JsonWriter writer)
		{
		}

		[Token(Token = "0x6001AB5")]
		[Address(RVA = "0x196463C", Offset = "0x196463C", VA = "0x196463C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA054C", Offset = "0xEA054C")]
		private static void <RegisterBaseExporters>m__5(object obj, JsonWriter writer)
		{
		}

		[Token(Token = "0x6001AB6")]
		[Address(RVA = "0x196475C", Offset = "0x196475C", VA = "0x196475C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA055C", Offset = "0xEA055C")]
		private static void <RegisterBaseExporters>m__6(object obj, JsonWriter writer)
		{
		}

		[Token(Token = "0x6001AB7")]
		[Address(RVA = "0x196487C", Offset = "0x196487C", VA = "0x196487C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA056C", Offset = "0xEA056C")]
		private static void <RegisterBaseExporters>m__7(object obj, JsonWriter writer)
		{
		}

		[Token(Token = "0x6001AB8")]
		[Address(RVA = "0x19649A4", Offset = "0x19649A4", VA = "0x19649A4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA057C", Offset = "0xEA057C")]
		private static void <RegisterBaseExporters>m__8(object obj, JsonWriter writer)
		{
		}

		[Token(Token = "0x6001AB9")]
		[Address(RVA = "0x1964A84", Offset = "0x1964A84", VA = "0x1964A84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA058C", Offset = "0xEA058C")]
		private static object <RegisterBaseImporters>m__9(object input)
		{
			return null;
		}

		[Token(Token = "0x6001ABA")]
		[Address(RVA = "0x1964BA0", Offset = "0x1964BA0", VA = "0x1964BA0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA059C", Offset = "0xEA059C")]
		private static object <RegisterBaseImporters>m__A(object input)
		{
			return null;
		}

		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0x1964CBC", Offset = "0x1964CBC", VA = "0x1964CBC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA05AC", Offset = "0xEA05AC")]
		private static object <RegisterBaseImporters>m__B(object input)
		{
			return null;
		}

		[Token(Token = "0x6001ABC")]
		[Address(RVA = "0x1964DD8", Offset = "0x1964DD8", VA = "0x1964DD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA05BC", Offset = "0xEA05BC")]
		private static object <RegisterBaseImporters>m__C(object input)
		{
			return null;
		}

		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0x1964EF4", Offset = "0x1964EF4", VA = "0x1964EF4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA05CC", Offset = "0xEA05CC")]
		private static object <RegisterBaseImporters>m__D(object input)
		{
			return null;
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0x1965010", Offset = "0x1965010", VA = "0x1965010")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA05DC", Offset = "0xEA05DC")]
		private static object <RegisterBaseImporters>m__E(object input)
		{
			return null;
		}

		[Token(Token = "0x6001ABF")]
		[Address(RVA = "0x196512C", Offset = "0x196512C", VA = "0x196512C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA05EC", Offset = "0xEA05EC")]
		private static object <RegisterBaseImporters>m__F(object input)
		{
			return null;
		}

		[Token(Token = "0x6001AC0")]
		[Address(RVA = "0x1965248", Offset = "0x1965248", VA = "0x1965248")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA05FC", Offset = "0xEA05FC")]
		private static object <RegisterBaseImporters>m__10(object input)
		{
			return null;
		}

		[Token(Token = "0x6001AC1")]
		[Address(RVA = "0x1965368", Offset = "0x1965368", VA = "0x1965368")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA060C", Offset = "0xEA060C")]
		private static object <RegisterBaseImporters>m__11(object input)
		{
			return null;
		}

		[Token(Token = "0x6001AC2")]
		[Address(RVA = "0x196549C", Offset = "0x196549C", VA = "0x196549C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA061C", Offset = "0xEA061C")]
		private static object <RegisterBaseImporters>m__12(object input)
		{
			return null;
		}

		[Token(Token = "0x6001AC3")]
		[Address(RVA = "0x19655BC", Offset = "0x19655BC", VA = "0x19655BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA062C", Offset = "0xEA062C")]
		private static object <RegisterBaseImporters>m__13(object input)
		{
			return null;
		}

		[Token(Token = "0x6001AC4")]
		[Address(RVA = "0x19656D0", Offset = "0x19656D0", VA = "0x19656D0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA063C", Offset = "0xEA063C")]
		private static object <RegisterBaseImporters>m__14(object input)
		{
			return null;
		}

		[Token(Token = "0x6001AC5")]
		[Address(RVA = "0x1965840", Offset = "0x1965840", VA = "0x1965840")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA064C", Offset = "0xEA064C")]
		private static IJsonWrapper <ToObject>m__15()
		{
			return null;
		}

		[Token(Token = "0x6001AC6")]
		[Address(RVA = "0x19658AC", Offset = "0x19658AC", VA = "0x19658AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA065C", Offset = "0xEA065C")]
		private static IJsonWrapper <ToObject>m__16()
		{
			return null;
		}

		[Token(Token = "0x6001AC7")]
		[Address(RVA = "0x1965918", Offset = "0x1965918", VA = "0x1965918")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA066C", Offset = "0xEA066C")]
		private static IJsonWrapper <ToObject>m__17()
		{
			return null;
		}
	}
	[Token(Token = "0x20003AA")]
	public enum JsonToken
	{
		[Token(Token = "0x400131B")]
		None,
		[Token(Token = "0x400131C")]
		ObjectStart,
		[Token(Token = "0x400131D")]
		PropertyName,
		[Token(Token = "0x400131E")]
		ObjectEnd,
		[Token(Token = "0x400131F")]
		ArrayStart,
		[Token(Token = "0x4001320")]
		ArrayEnd,
		[Token(Token = "0x4001321")]
		Int,
		[Token(Token = "0x4001322")]
		Long,
		[Token(Token = "0x4001323")]
		Double,
		[Token(Token = "0x4001324")]
		String,
		[Token(Token = "0x4001325")]
		Boolean,
		[Token(Token = "0x4001326")]
		Null
	}
	[Token(Token = "0x20003AB")]
	public class JsonReader
	{
		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static IDictionary<int, IDictionary<int, int[]>> parse_table;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Stack<int> automaton_stack;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int current_input;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int current_symbol;

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool end_of_json;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		private bool end_of_input;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Lexer lexer;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool parser_in_string;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		private bool parser_return;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		private bool read_started;

		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextReader reader;

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool reader_is_owned;

		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private object token_value;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private JsonToken token;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool reReadToken;

		[Token(Token = "0x17000187")]
		public bool AllowComments
		{
			[Token(Token = "0x6001ACC")]
			[Address(RVA = "0x19666F4", Offset = "0x19666F4", VA = "0x19666F4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001ACD")]
			[Address(RVA = "0x196671C", Offset = "0x196671C", VA = "0x196671C")]
			set
			{
			}
		}

		[Token(Token = "0x17000188")]
		public bool AllowSingleQuotedStrings
		{
			[Token(Token = "0x6001ACE")]
			[Address(RVA = "0x1966748", Offset = "0x1966748", VA = "0x1966748")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001ACF")]
			[Address(RVA = "0x1966770", Offset = "0x1966770", VA = "0x1966770")]
			set
			{
			}
		}

		[Token(Token = "0x17000189")]
		public bool EndOfInput
		{
			[Token(Token = "0x6001AD0")]
			[Address(RVA = "0x196679C", Offset = "0x196679C", VA = "0x196679C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018A")]
		public bool EndOfJson
		{
			[Token(Token = "0x6001AD1")]
			[Address(RVA = "0x19667A4", Offset = "0x19667A4", VA = "0x19667A4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700018B")]
		public JsonToken Token
		{
			[Token(Token = "0x6001AD2")]
			[Address(RVA = "0x19601B0", Offset = "0x19601B0", VA = "0x19601B0")]
			get
			{
				return default(JsonToken);
			}
		}

		[Token(Token = "0x1700018C")]
		public object Value
		{
			[Token(Token = "0x6001AD3")]
			[Address(RVA = "0x19601B8", Offset = "0x19601B8", VA = "0x19601B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001AC8")]
		[Address(RVA = "0x1965984", Offset = "0x1965984", VA = "0x1965984")]
		static JsonReader()
		{
		}

		[Token(Token = "0x6001AC9")]
		[Address(RVA = "0x1963CAC", Offset = "0x1963CAC", VA = "0x1963CAC")]
		public JsonReader(string json_text)
		{
		}

		[Token(Token = "0x6001ACA")]
		[Address(RVA = "0x1963A08", Offset = "0x1963A08", VA = "0x1963A08")]
		public JsonReader(TextReader reader)
		{
		}

		[Token(Token = "0x6001ACB")]
		[Address(RVA = "0x196648C", Offset = "0x196648C", VA = "0x196648C")]
		private JsonReader(TextReader reader, bool owned)
		{
		}

		[Token(Token = "0x6001AD4")]
		[Address(RVA = "0x1965988", Offset = "0x1965988", VA = "0x1965988")]
		private static void PopulateParseTable()
		{
		}

		[Token(Token = "0x6001AD5")]
		[Address(RVA = "0x19668F8", Offset = "0x19668F8", VA = "0x19668F8")]
		private static void TableAddCol(ParserToken row, int col, params int[] symbols)
		{
		}

		[Token(Token = "0x6001AD6")]
		[Address(RVA = "0x19667AC", Offset = "0x19667AC", VA = "0x19667AC")]
		private static void TableAddRow(ParserToken rule)
		{
		}

		[Token(Token = "0x6001AD7")]
		[Address(RVA = "0x1966AB0", Offset = "0x1966AB0", VA = "0x1966AB0")]
		private void ProcessNumber(string number)
		{
		}

		[Token(Token = "0x6001AD8")]
		[Address(RVA = "0x1966C68", Offset = "0x1966C68", VA = "0x1966C68")]
		private void ProcessSymbol()
		{
		}

		[Token(Token = "0x6001AD9")]
		[Address(RVA = "0x1966E58", Offset = "0x1966E58", VA = "0x1966E58")]
		private bool ReadToken()
		{
			return default(bool);
		}

		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0x1967194", Offset = "0x1967194", VA = "0x1967194")]
		public void Close()
		{
		}

		[Token(Token = "0x6001ADB")]
		[Address(RVA = "0x195FC1C", Offset = "0x195FC1C", VA = "0x195FC1C")]
		public bool Read()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003AC")]
	internal enum Condition
	{
		[Token(Token = "0x4001337")]
		InArray,
		[Token(Token = "0x4001338")]
		InObject,
		[Token(Token = "0x4001339")]
		NotAProperty,
		[Token(Token = "0x400133A")]
		Property,
		[Token(Token = "0x400133B")]
		Value
	}
	[Token(Token = "0x20003AD")]
	internal class WriterContext
	{
		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int Count;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool InArray;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public bool InObject;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public bool ExpectingValue;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Padding;

		[Token(Token = "0x6001ADC")]
		[Address(RVA = "0x1967808", Offset = "0x1967808", VA = "0x1967808")]
		public WriterContext()
		{
		}
	}
	[Token(Token = "0x20003AE")]
	public class JsonWriter
	{
		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static NumberFormatInfo number_format;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private WriterContext context;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Stack<WriterContext> ctx_stack;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private bool has_reached_end;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private char[] hex_seq;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int indentation;

		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int indent_value;

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private StringBuilder inst_string_builder;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool pretty_print;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		private bool validate;

		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextWriter writer;

		[Token(Token = "0x1700018D")]
		public int IndentValue
		{
			[Token(Token = "0x6001AE1")]
			[Address(RVA = "0x1967420", Offset = "0x1967420", VA = "0x1967420")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001AE2")]
			[Address(RVA = "0x1967428", Offset = "0x1967428", VA = "0x1967428")]
			set
			{
			}
		}

		[Token(Token = "0x1700018E")]
		public bool PrettyPrint
		{
			[Token(Token = "0x6001AE3")]
			[Address(RVA = "0x1967454", Offset = "0x1967454", VA = "0x1967454")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001AE4")]
			[Address(RVA = "0x196745C", Offset = "0x196745C", VA = "0x196745C")]
			set
			{
			}
		}

		[Token(Token = "0x1700018F")]
		public TextWriter TextWriter
		{
			[Token(Token = "0x6001AE5")]
			[Address(RVA = "0x19630F0", Offset = "0x19630F0", VA = "0x19630F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000190")]
		public bool Validate
		{
			[Token(Token = "0x6001AE6")]
			[Address(RVA = "0x1959A10", Offset = "0x1959A10", VA = "0x1959A10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001AE7")]
			[Address(RVA = "0x1959A08", Offset = "0x1959A08", VA = "0x1959A08")]
			set
			{
			}
		}

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0x19671F8", Offset = "0x19671F8", VA = "0x19671F8")]
		static JsonWriter()
		{
		}

		[Token(Token = "0x6001ADE")]
		[Address(RVA = "0x195A1E0", Offset = "0x195A1E0", VA = "0x195A1E0")]
		public JsonWriter()
		{
		}

		[Token(Token = "0x6001ADF")]
		[Address(RVA = "0x19673A0", Offset = "0x19673A0", VA = "0x19673A0")]
		public JsonWriter(StringBuilder sb)
		{
		}

		[Token(Token = "0x6001AE0")]
		[Address(RVA = "0x1959944", Offset = "0x1959944", VA = "0x1959944")]
		public JsonWriter(TextWriter writer)
		{
		}

		[Token(Token = "0x6001AE8")]
		[Address(RVA = "0x1967464", Offset = "0x1967464", VA = "0x1967464")]
		private void DoValidation(Condition cond)
		{
		}

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0x1967290", Offset = "0x1967290", VA = "0x1967290")]
		private void Init()
		{
		}

		[Token(Token = "0x6001AEA")]
		[Address(RVA = "0x1967810", Offset = "0x1967810", VA = "0x1967810")]
		private static void IntToHex(int n, char[] hex)
		{
		}

		[Token(Token = "0x6001AEB")]
		[Address(RVA = "0x1967884", Offset = "0x1967884", VA = "0x1967884")]
		private void Indent()
		{
		}

		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0x19678A0", Offset = "0x19678A0", VA = "0x19678A0")]
		private void Put(string str)
		{
		}

		[Token(Token = "0x6001AED")]
		[Address(RVA = "0x196794C", Offset = "0x196794C", VA = "0x196794C")]
		private void PutNewline()
		{
		}

		[Token(Token = "0x6001AEE")]
		[Address(RVA = "0x1967954", Offset = "0x1967954", VA = "0x1967954")]
		private void PutNewline(bool add_comma)
		{
		}

		[Token(Token = "0x6001AEF")]
		[Address(RVA = "0x1967A20", Offset = "0x1967A20", VA = "0x1967A20")]
		private void PutString(string str)
		{
		}

		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0x1967E60", Offset = "0x1967E60", VA = "0x1967E60")]
		private void Unindent()
		{
		}

		[Token(Token = "0x6001AF1")]
		[Address(RVA = "0x1967E7C", Offset = "0x1967E7C", VA = "0x1967E7C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001AF2")]
		[Address(RVA = "0x19633CC", Offset = "0x19633CC", VA = "0x19633CC")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001AF3")]
		[Address(RVA = "0x1958A68", Offset = "0x1958A68", VA = "0x1958A68")]
		public void Write(bool boolean)
		{
		}

		[Token(Token = "0x6001AF4")]
		[Address(RVA = "0x19643F0", Offset = "0x19643F0", VA = "0x19643F0")]
		public void Write(decimal number)
		{
		}

		[Token(Token = "0x6001AF5")]
		[Address(RVA = "0x1958B20", Offset = "0x1958B20", VA = "0x1958B20")]
		public void Write(double number)
		{
		}

		[Token(Token = "0x6001AF6")]
		[Address(RVA = "0x1958CC4", Offset = "0x1958CC4", VA = "0x1958CC4")]
		public void Write(int number)
		{
		}

		[Token(Token = "0x6001AF7")]
		[Address(RVA = "0x1958DD4", Offset = "0x1958DD4", VA = "0x1958DD4")]
		public void Write(long number)
		{
		}

		[Token(Token = "0x6001AF8")]
		[Address(RVA = "0x19589B8", Offset = "0x19589B8", VA = "0x19589B8")]
		public void Write(string str)
		{
		}

		[Token(Token = "0x6001AF9")]
		[Address(RVA = "0x19630F8", Offset = "0x19630F8", VA = "0x19630F8")]
		public void Write(ulong number)
		{
		}

		[Token(Token = "0x6001AFA")]
		[Address(RVA = "0x1958FEC", Offset = "0x1958FEC", VA = "0x1958FEC")]
		public void WriteArrayEnd()
		{
		}

		[Token(Token = "0x6001AFB")]
		[Address(RVA = "0x1958EF0", Offset = "0x1958EF0", VA = "0x1958EF0")]
		public void WriteArrayStart()
		{
		}

		[Token(Token = "0x6001AFC")]
		[Address(RVA = "0x19593E8", Offset = "0x19593E8", VA = "0x19593E8")]
		public void WriteObjectEnd()
		{
		}

		[Token(Token = "0x6001AFD")]
		[Address(RVA = "0x1959128", Offset = "0x1959128", VA = "0x1959128")]
		public void WriteObjectStart()
		{
		}

		[Token(Token = "0x6001AFE")]
		[Address(RVA = "0x1959224", Offset = "0x1959224", VA = "0x1959224")]
		public void WritePropertyName(string property_name)
		{
		}
	}
	[Token(Token = "0x20003AF")]
	internal class FsmContext
	{
		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool Return;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int NextState;

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Lexer L;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int StateStack;

		[Token(Token = "0x6001AFF")]
		[Address(RVA = "0x1952A04", Offset = "0x1952A04", VA = "0x1952A04")]
		public FsmContext()
		{
		}
	}
	[Token(Token = "0x20003B0")]
	internal class Lexer
	{
		[Token(Token = "0x20003B1")]
		private delegate bool StateHandler(FsmContext ctx);

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int[] fsm_return_table;

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static StateHandler[] fsm_handler_table;

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool allow_comments;

		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		private bool allow_single_quoted_strings;

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		private bool end_of_input;

		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private FsmContext fsm_context;

		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int input_buffer;

		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int input_char;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextReader reader;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int state;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private StringBuilder string_buffer;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private string string_value;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int token;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int unichar;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA06AC", Offset = "0xEA06AC")]
		private static StateHandler <>f__mg$cache0;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA06BC", Offset = "0xEA06BC")]
		private static StateHandler <>f__mg$cache1;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA06CC", Offset = "0xEA06CC")]
		private static StateHandler <>f__mg$cache2;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA06DC", Offset = "0xEA06DC")]
		private static StateHandler <>f__mg$cache3;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA06EC", Offset = "0xEA06EC")]
		private static StateHandler <>f__mg$cache4;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA06FC", Offset = "0xEA06FC")]
		private static StateHandler <>f__mg$cache5;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA070C", Offset = "0xEA070C")]
		private static StateHandler <>f__mg$cache6;

		[Token(Token = "0x4001365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA071C", Offset = "0xEA071C")]
		private static StateHandler <>f__mg$cache7;

		[Token(Token = "0x4001366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA072C", Offset = "0xEA072C")]
		private static StateHandler <>f__mg$cache8;

		[Token(Token = "0x4001367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA073C", Offset = "0xEA073C")]
		private static StateHandler <>f__mg$cache9;

		[Token(Token = "0x4001368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA074C", Offset = "0xEA074C")]
		private static StateHandler <>f__mg$cacheA;

		[Token(Token = "0x4001369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA075C", Offset = "0xEA075C")]
		private static StateHandler <>f__mg$cacheB;

		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA076C", Offset = "0xEA076C")]
		private static StateHandler <>f__mg$cacheC;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA077C", Offset = "0xEA077C")]
		private static StateHandler <>f__mg$cacheD;

		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA078C", Offset = "0xEA078C")]
		private static StateHandler <>f__mg$cacheE;

		[Token(Token = "0x400136D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA079C", Offset = "0xEA079C")]
		private static StateHandler <>f__mg$cacheF;

		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA07AC", Offset = "0xEA07AC")]
		private static StateHandler <>f__mg$cache10;

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA07BC", Offset = "0xEA07BC")]
		private static StateHandler <>f__mg$cache11;

		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA07CC", Offset = "0xEA07CC")]
		private static StateHandler <>f__mg$cache12;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA07DC", Offset = "0xEA07DC")]
		private static StateHandler <>f__mg$cache13;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA07EC", Offset = "0xEA07EC")]
		private static StateHandler <>f__mg$cache14;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA07FC", Offset = "0xEA07FC")]
		private static StateHandler <>f__mg$cache15;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA080C", Offset = "0xEA080C")]
		private static StateHandler <>f__mg$cache16;

		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA081C", Offset = "0xEA081C")]
		private static StateHandler <>f__mg$cache17;

		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA082C", Offset = "0xEA082C")]
		private static StateHandler <>f__mg$cache18;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA083C", Offset = "0xEA083C")]
		private static StateHandler <>f__mg$cache19;

		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA084C", Offset = "0xEA084C")]
		private static StateHandler <>f__mg$cache1A;

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA085C", Offset = "0xEA085C")]
		private static StateHandler <>f__mg$cache1B;

		[Token(Token = "0x17000191")]
		public bool AllowComments
		{
			[Token(Token = "0x6001B02")]
			[Address(RVA = "0x1966714", Offset = "0x1966714", VA = "0x1966714")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B03")]
			[Address(RVA = "0x1966740", Offset = "0x1966740", VA = "0x1966740")]
			set
			{
			}
		}

		[Token(Token = "0x17000192")]
		public bool AllowSingleQuotedStrings
		{
			[Token(Token = "0x6001B04")]
			[Address(RVA = "0x1966768", Offset = "0x1966768", VA = "0x1966768")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001B05")]
			[Address(RVA = "0x1966794", Offset = "0x1966794", VA = "0x1966794")]
			set
			{
			}
		}

		[Token(Token = "0x17000193")]
		public bool EndOfInput
		{
			[Token(Token = "0x6001B06")]
			[Address(RVA = "0x196718C", Offset = "0x196718C", VA = "0x196718C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000194")]
		public int Token
		{
			[Token(Token = "0x6001B07")]
			[Address(RVA = "0x19671F0", Offset = "0x19671F0", VA = "0x19671F0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000195")]
		public string StringValue
		{
			[Token(Token = "0x6001B08")]
			[Address(RVA = "0x1966E50", Offset = "0x1966E50", VA = "0x1966E50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001B00")]
		[Address(RVA = "0x1967F2C", Offset = "0x1967F2C", VA = "0x1967F2C")]
		static Lexer()
		{
		}

		[Token(Token = "0x6001B01")]
		[Address(RVA = "0x196661C", Offset = "0x196661C", VA = "0x196661C")]
		public Lexer(TextReader reader)
		{
		}

		[Token(Token = "0x6001B09")]
		[Address(RVA = "0x196A25C", Offset = "0x196A25C", VA = "0x196A25C")]
		private static int HexValue(int digit)
		{
			return default(int);
		}

		[Token(Token = "0x6001B0A")]
		[Address(RVA = "0x1967F30", Offset = "0x1967F30", VA = "0x1967F30")]
		private static void PopulateFsmTables()
		{
		}

		[Token(Token = "0x6001B0B")]
		[Address(RVA = "0x196A320", Offset = "0x196A320", VA = "0x196A320")]
		private static char ProcessEscChar(int esc_char)
		{
			return default(char);
		}

		[Token(Token = "0x6001B0C")]
		[Address(RVA = "0x196A41C", Offset = "0x196A41C", VA = "0x196A41C")]
		private static bool State1(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B0D")]
		[Address(RVA = "0x196A8E4", Offset = "0x196A8E4", VA = "0x196A8E4")]
		private static bool State2(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B0E")]
		[Address(RVA = "0x196AA74", Offset = "0x196AA74", VA = "0x196AA74")]
		private static bool State3(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B0F")]
		[Address(RVA = "0x196ADB4", Offset = "0x196ADB4", VA = "0x196ADB4")]
		private static bool State4(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B10")]
		[Address(RVA = "0x196B044", Offset = "0x196B044", VA = "0x196B044")]
		private static bool State5(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B11")]
		[Address(RVA = "0x196B14C", Offset = "0x196B14C", VA = "0x196B14C")]
		private static bool State6(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B12")]
		[Address(RVA = "0x196B3E8", Offset = "0x196B3E8", VA = "0x196B3E8")]
		private static bool State7(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B13")]
		[Address(RVA = "0x196B51C", Offset = "0x196B51C", VA = "0x196B51C")]
		private static bool State8(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B14")]
		[Address(RVA = "0x196B728", Offset = "0x196B728", VA = "0x196B728")]
		private static bool State9(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B15")]
		[Address(RVA = "0x196B7B0", Offset = "0x196B7B0", VA = "0x196B7B0")]
		private static bool State10(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B16")]
		[Address(RVA = "0x196B838", Offset = "0x196B838", VA = "0x196B838")]
		private static bool State11(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B17")]
		[Address(RVA = "0x196B8D8", Offset = "0x196B8D8", VA = "0x196B8D8")]
		private static bool State12(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B18")]
		[Address(RVA = "0x196B960", Offset = "0x196B960", VA = "0x196B960")]
		private static bool State13(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B19")]
		[Address(RVA = "0x196B9E8", Offset = "0x196B9E8", VA = "0x196B9E8")]
		private static bool State14(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B1A")]
		[Address(RVA = "0x196BA70", Offset = "0x196BA70", VA = "0x196BA70")]
		private static bool State15(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B1B")]
		[Address(RVA = "0x196BB10", Offset = "0x196BB10", VA = "0x196BB10")]
		private static bool State16(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B1C")]
		[Address(RVA = "0x196BB98", Offset = "0x196BB98", VA = "0x196BB98")]
		private static bool State17(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B1D")]
		[Address(RVA = "0x196BC20", Offset = "0x196BC20", VA = "0x196BC20")]
		private static bool State18(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B1E")]
		[Address(RVA = "0x196BCC0", Offset = "0x196BCC0", VA = "0x196BCC0")]
		private static bool State19(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B1F")]
		[Address(RVA = "0x196BE04", Offset = "0x196BE04", VA = "0x196BE04")]
		private static bool State20(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B20")]
		[Address(RVA = "0x196BEA4", Offset = "0x196BEA4", VA = "0x196BEA4")]
		private static bool State21(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B21")]
		[Address(RVA = "0x196C0A0", Offset = "0x196C0A0", VA = "0x196C0A0")]
		private static bool State22(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B22")]
		[Address(RVA = "0x196C3A4", Offset = "0x196C3A4", VA = "0x196C3A4")]
		private static bool State23(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B23")]
		[Address(RVA = "0x196C4E8", Offset = "0x196C4E8", VA = "0x196C4E8")]
		private static bool State24(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B24")]
		[Address(RVA = "0x196C588", Offset = "0x196C588", VA = "0x196C588")]
		private static bool State25(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B25")]
		[Address(RVA = "0x196C62C", Offset = "0x196C62C", VA = "0x196C62C")]
		private static bool State26(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B26")]
		[Address(RVA = "0x196C6B8", Offset = "0x196C6B8", VA = "0x196C6B8")]
		private static bool State27(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B27")]
		[Address(RVA = "0x196C744", Offset = "0x196C744", VA = "0x196C744")]
		private static bool State28(FsmContext ctx)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B28")]
		[Address(RVA = "0x196A8B4", Offset = "0x196A8B4", VA = "0x196A8B4")]
		private bool GetChar()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B29")]
		[Address(RVA = "0x196C7EC", Offset = "0x196C7EC", VA = "0x196C7EC")]
		private int NextChar()
		{
			return default(int);
		}

		[Token(Token = "0x6001B2A")]
		[Address(RVA = "0x1966ED8", Offset = "0x1966ED8", VA = "0x1966ED8")]
		public bool NextToken()
		{
			return default(bool);
		}

		[Token(Token = "0x6001B2B")]
		[Address(RVA = "0x196ADA8", Offset = "0x196ADA8", VA = "0x196ADA8")]
		private void UngetChar()
		{
		}
	}
	[Token(Token = "0x20003B2")]
	internal enum ParserToken
	{
		[Token(Token = "0x400137B")]
		None = 65536,
		[Token(Token = "0x400137C")]
		Number,
		[Token(Token = "0x400137D")]
		True,
		[Token(Token = "0x400137E")]
		False,
		[Token(Token = "0x400137F")]
		Null,
		[Token(Token = "0x4001380")]
		CharSeq,
		[Token(Token = "0x4001381")]
		Char,
		[Token(Token = "0x4001382")]
		Text,
		[Token(Token = "0x4001383")]
		Object,
		[Token(Token = "0x4001384")]
		ObjectPrime,
		[Token(Token = "0x4001385")]
		Pair,
		[Token(Token = "0x4001386")]
		PairRest,
		[Token(Token = "0x4001387")]
		Array,
		[Token(Token = "0x4001388")]
		ArrayPrime,
		[Token(Token = "0x4001389")]
		Value,
		[Token(Token = "0x400138A")]
		ValueRest,
		[Token(Token = "0x400138B")]
		String,
		[Token(Token = "0x400138C")]
		End,
		[Token(Token = "0x400138D")]
		Epsilon
	}
}
[Token(Token = "0x20003B3")]
public static class RPCEnabler
{
	[Token(Token = "0x6001B30")]
	[Address(RVA = "0x6200E0", Offset = "0x6200E0", VA = "0x6200E0")]
	public static bool Others(this NetworkView networkView, string routineName, params object[] parameters)
	{
		return default(bool);
	}

	[Token(Token = "0x6001B31")]
	[Address(RVA = "0x620164", Offset = "0x620164", VA = "0x620164")]
	public static bool Server(this NetworkView networkView, string routineName, params object[] parameters)
	{
		return default(bool);
	}
}
[Token(Token = "0x20003B4")]
public static class Broadcaster
{
	[Token(Token = "0x20003B5")]
	public class Pair
	{
		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public WeakReference target;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public WeakReference interest;

		[Token(Token = "0x6001B3A")]
		[Address(RVA = "0x19DECE8", Offset = "0x19DECE8", VA = "0x19DECE8")]
		public Pair()
		{
		}
	}

	[Token(Token = "0x2000541")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA095C", Offset = "0xEA095C")]
	private sealed class <UnregisterInterest>c__AnonStorey0
	{
		[Token(Token = "0x4001ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal object target;

		[Token(Token = "0x4001AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal object interestedParty;

		[Token(Token = "0x60024A6")]
		[Address(RVA = "0x19DEE60", Offset = "0x19DEE60", VA = "0x19DEE60")]
		public <UnregisterInterest>c__AnonStorey0()
		{
		}

		[Token(Token = "0x60024A7")]
		[Address(RVA = "0x19DF640", Offset = "0x19DF640", VA = "0x19DF640")]
		internal bool <>m__0(Pair p)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000542")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA096C", Offset = "0xEA096C")]
	private sealed class <Broadcast>c__AnonStorey1
	{
		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal object obj;

		[Token(Token = "0x60024A8")]
		[Address(RVA = "0x19DF47C", Offset = "0x19DF47C", VA = "0x19DF47C")]
		public <Broadcast>c__AnonStorey1()
		{
		}

		[Token(Token = "0x60024A9")]
		[Address(RVA = "0x19DF5E8", Offset = "0x19DF5E8", VA = "0x19DF5E8")]
		internal bool <>m__0(Pair p)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x400138E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<Pair> InterestList;

	[Token(Token = "0x400138F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA08CC", Offset = "0xEA08CC")]
	private static Func<Pair, WeakReference> <>f__am$cache0;

	[Token(Token = "0x4001390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA08DC", Offset = "0xEA08DC")]
	private static Func<WeakReference, bool> <>f__am$cache1;

	[Token(Token = "0x4001391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA08EC", Offset = "0xEA08EC")]
	private static Func<Pair, bool> <>f__am$cache2;

	[Token(Token = "0x6001B32")]
	[Address(RVA = "0x19DE8B0", Offset = "0x19DE8B0", VA = "0x19DE8B0")]
	public static void RegisterInterest(this object target, object interestedParty)
	{
	}

	[Token(Token = "0x6001B33")]
	[Address(RVA = "0x19DECF0", Offset = "0x19DECF0", VA = "0x19DECF0")]
	public static void UnregisterInterest(this object target, object interestedParty)
	{
	}

	[Token(Token = "0x6001B34")]
	[Address(RVA = "0x19DEE68", Offset = "0x19DEE68", VA = "0x19DEE68")]
	public static void Broadcast(this object obj, string message)
	{
	}

	[Token(Token = "0x6001B35")]
	[Address(RVA = "0x19DE9F8", Offset = "0x19DE9F8", VA = "0x19DE9F8")]
	private static void Cleanup()
	{
	}

	[Token(Token = "0x6001B37")]
	[Address(RVA = "0x19DF514", Offset = "0x19DF514", VA = "0x19DF514")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA092C", Offset = "0xEA092C")]
	private static WeakReference <Broadcast>m__0(Pair p)
	{
		return null;
	}

	[Token(Token = "0x6001B38")]
	[Address(RVA = "0x19DF534", Offset = "0x19DF534", VA = "0x19DF534")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA093C", Offset = "0xEA093C")]
	private static bool <Broadcast>m__1(WeakReference r)
	{
		return default(bool);
	}

	[Token(Token = "0x6001B39")]
	[Address(RVA = "0x19DF564", Offset = "0x19DF564", VA = "0x19DF564")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA094C", Offset = "0xEA094C")]
	private static bool <Cleanup>m__2(Pair k)
	{
		return default(bool);
	}
}
namespace RadicalLibrary
{
	[Token(Token = "0x20003B6")]
	public static class QuadBez
	{
		[Token(Token = "0x6001B3B")]
		[Address(RVA = "0x1B341E4", Offset = "0x1B341E4", VA = "0x1B341E4")]
		public static Vector3 Interp(Vector3 st, Vector3 en, Vector3 ctrl, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B3C")]
		[Address(RVA = "0x1B3436C", Offset = "0x1B3436C", VA = "0x1B3436C")]
		public static Vector3 Velocity(Vector3 st, Vector3 en, Vector3 ctrl, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0x1B3459C", Offset = "0x1B3459C", VA = "0x1B3459C")]
		public static void GizmoDraw(Vector3 st, Vector3 en, Vector3 ctrl, float t)
		{
		}
	}
	[Token(Token = "0x20003B7")]
	public static class CubicBez
	{
		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0x1B32E84", Offset = "0x1B32E84", VA = "0x1B32E84")]
		public static Vector3 Interp(Vector3 st, Vector3 en, Vector3 ctrl1, Vector3 ctrl2, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0x1B3307C", Offset = "0x1B3307C", VA = "0x1B3307C")]
		public static Vector3 Velocity(Vector3 st, Vector3 en, Vector3 ctrl1, Vector3 ctrl2, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0x1B33454", Offset = "0x1B33454", VA = "0x1B33454")]
		public static void GizmoDraw(Vector3 st, Vector3 en, Vector3 ctrl1, Vector3 ctrl2, float t)
		{
		}
	}
	[Token(Token = "0x20003B8")]
	public static class CRSpline
	{
		[Token(Token = "0x6001B41")]
		[Address(RVA = "0x1B310D0", Offset = "0x1B310D0", VA = "0x1B310D0")]
		public static Vector3 Interp(Vector3[] pts, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0x1B31668", Offset = "0x1B31668", VA = "0x1B31668")]
		public static Vector3 InterpConstantSpeedOld(Vector3[] pts, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B43")]
		[Address(RVA = "0x1B31ED0", Offset = "0x1B31ED0", VA = "0x1B31ED0")]
		public static Vector3 InterpConstantSpeed(Vector3[] pts, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B44")]
		[Address(RVA = "0x1B32734", Offset = "0x1B32734", VA = "0x1B32734")]
		public static Vector3 Velocity(Vector3[] pts, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B45")]
		[Address(RVA = "0x1B32C90", Offset = "0x1B32C90", VA = "0x1B32C90")]
		public static void GizmoDraw(Vector3[] pts, float t)
		{
		}
	}
	[Token(Token = "0x20003B9")]
	public class Interesting
	{
		[Token(Token = "0x6001B46")]
		[Address(RVA = "0x1B341DC", Offset = "0x1B341DC", VA = "0x1B341DC")]
		public Interesting()
		{
		}
	}
	[Token(Token = "0x20003BA")]
	public static class Spline
	{
		[Token(Token = "0x20003BB")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xEA097C", Offset = "0xEA097C")]
		public class Path
		{
			[Token(Token = "0x4001394")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private Vector3[] _path;

			[Token(Token = "0x4001395")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA09B0", Offset = "0xEA09B0")]
			private static Func<Transform, Vector3> <>f__am$cache0;

			[Token(Token = "0x4001396")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA09C0", Offset = "0xEA09C0")]
			private static Func<GameObject, Vector3> <>f__am$cache1;

			[Token(Token = "0x17000196")]
			public Vector3[] path
			{
				[Token(Token = "0x6001B6E")]
				[Address(RVA = "0x1B37EE0", Offset = "0x1B37EE0", VA = "0x1B37EE0")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001B6F")]
				[Address(RVA = "0x1B37EE8", Offset = "0x1B37EE8", VA = "0x1B37EE8")]
				set
				{
				}
			}

			[Token(Token = "0x17000197")]
			public int Length
			{
				[Token(Token = "0x6001B70")]
				[Address(RVA = "0x1B367C4", Offset = "0x1B367C4", VA = "0x1B367C4")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x17000198")]
			public Vector3 Item
			{
				[Token(Token = "0x6001B71")]
				[Address(RVA = "0x1B367D8", Offset = "0x1B367D8", VA = "0x1B367D8")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6001B6D")]
			[Address(RVA = "0x1B37ED8", Offset = "0x1B37ED8", VA = "0x1B37ED8")]
			public Path()
			{
			}

			[Token(Token = "0x6001B72")]
			[Address(RVA = "0x1B37E58", Offset = "0x1B37E58", VA = "0x1B37E58")]
			public static implicit operator Path(Vector3[] path)
			{
				return null;
			}

			[Token(Token = "0x6001B73")]
			[Address(RVA = "0x1B36828", Offset = "0x1B36828", VA = "0x1B36828")]
			public static implicit operator Vector3[](Path p)
			{
				return null;
			}

			[Token(Token = "0x6001B74")]
			[Address(RVA = "0x1B37EF0", Offset = "0x1B37EF0", VA = "0x1B37EF0")]
			public static implicit operator Path(Transform[] path)
			{
				return null;
			}

			[Token(Token = "0x6001B75")]
			[Address(RVA = "0x1B3802C", Offset = "0x1B3802C", VA = "0x1B3802C")]
			public static implicit operator Path(GameObject[] path)
			{
				return null;
			}

			[Token(Token = "0x6001B76")]
			[Address(RVA = "0x1B38168", Offset = "0x1B38168", VA = "0x1B38168")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA09D0", Offset = "0xEA09D0")]
			private static Vector3 <op_Implicit>m__0(Transform p)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001B77")]
			[Address(RVA = "0x1B38198", Offset = "0x1B38198", VA = "0x1B38198")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA09E0", Offset = "0xEA09E0")]
			private static Vector3 <op_Implicit>m__1(GameObject p)
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001B47")]
		[Address(RVA = "0x1B36364", Offset = "0x1B36364", VA = "0x1B36364")]
		public static Vector3 Interp(Path pts, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B48")]
		[Address(RVA = "0x1B3638C", Offset = "0x1B3638C", VA = "0x1B3638C")]
		public static Vector3 Interp(Path pts, float t, EasingType ease)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B49")]
		[Address(RVA = "0x1B363B8", Offset = "0x1B363B8", VA = "0x1B363B8")]
		public static Vector3 Interp(Path pts, float t, EasingType ease, bool easeIn)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B4A")]
		[Address(RVA = "0x1B363E8", Offset = "0x1B363E8", VA = "0x1B363E8")]
		public static Vector3 Interp(Path pts, float t, EasingType ease, bool easeIn, bool easeOut)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B4B")]
		[Address(RVA = "0x1B36A50", Offset = "0x1B36A50", VA = "0x1B36A50")]
		private static float Ease(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6001B4C")]
		[Address(RVA = "0x1B36A78", Offset = "0x1B36A78", VA = "0x1B36A78")]
		private static float Ease(float t, EasingType ease)
		{
			return default(float);
		}

		[Token(Token = "0x6001B4D")]
		[Address(RVA = "0x1B36A9C", Offset = "0x1B36A9C", VA = "0x1B36A9C")]
		private static float Ease(float t, EasingType ease, bool easeIn)
		{
			return default(float);
		}

		[Token(Token = "0x6001B4E")]
		[Address(RVA = "0x1B366DC", Offset = "0x1B366DC", VA = "0x1B366DC")]
		private static float Ease(float t, EasingType ease, bool easeIn, bool easeOut)
		{
			return default(float);
		}

		[Token(Token = "0x6001B4F")]
		[Address(RVA = "0x1B36ABC", Offset = "0x1B36ABC", VA = "0x1B36ABC")]
		public static Vector3 InterpConstantSpeed(Path pts, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B50")]
		[Address(RVA = "0x1B36AE4", Offset = "0x1B36AE4", VA = "0x1B36AE4")]
		public static Vector3 InterpConstantSpeed(Path pts, float t, EasingType ease)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B51")]
		[Address(RVA = "0x1B36B10", Offset = "0x1B36B10", VA = "0x1B36B10")]
		public static Vector3 InterpConstantSpeed(Path pts, float t, EasingType ease, bool easeIn)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B52")]
		[Address(RVA = "0x1B36B40", Offset = "0x1B36B40", VA = "0x1B36B40")]
		public static Vector3 InterpConstantSpeed(Path pts, float t, EasingType ease, bool easeIn, bool easeOut)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B53")]
		[Address(RVA = "0x1B36E34", Offset = "0x1B36E34", VA = "0x1B36E34")]
		private static float Clamp(float f)
		{
			return default(float);
		}

		[Token(Token = "0x6001B54")]
		[Address(RVA = "0x1B36EBC", Offset = "0x1B36EBC", VA = "0x1B36EBC")]
		public static Vector3 MoveOnPath(Path pts, Vector3 currentPosition, ref float pathPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B55")]
		[Address(RVA = "0x1B36F04", Offset = "0x1B36F04", VA = "0x1B36F04")]
		public static Vector3 MoveOnPath(Path pts, Vector3 currentPosition, ref float pathPosition, float maxSpeed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B56")]
		[Address(RVA = "0x1B36F54", Offset = "0x1B36F54", VA = "0x1B36F54")]
		public static Vector3 MoveOnPath(Path pts, Vector3 currentPosition, ref float pathPosition, float maxSpeed, float smoothnessFactor)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B57")]
		[Address(RVA = "0x1B36FA4", Offset = "0x1B36FA4", VA = "0x1B36FA4")]
		public static Vector3 MoveOnPath(Path pts, Vector3 currentPosition, ref float pathPosition, float maxSpeed, float smoothnessFactor, EasingType ease)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B58")]
		[Address(RVA = "0x1B36FF8", Offset = "0x1B36FF8", VA = "0x1B36FF8")]
		public static Vector3 MoveOnPath(Path pts, Vector3 currentPosition, ref float pathPosition, float maxSpeed, float smoothnessFactor, EasingType ease, bool easeIn)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B59")]
		[Address(RVA = "0x1B3704C", Offset = "0x1B3704C", VA = "0x1B3704C")]
		public static Vector3 MoveOnPath(Path pts, Vector3 currentPosition, ref float pathPosition, float maxSpeed, float smoothnessFactor, EasingType ease, bool easeIn, bool easeOut)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B5A")]
		[Address(RVA = "0x1B372D4", Offset = "0x1B372D4", VA = "0x1B372D4")]
		public static Vector3 MoveOnPath(Path pts, Vector3 currentPosition, ref float pathPosition, ref Quaternion rotation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0x1B3732C", Offset = "0x1B3732C", VA = "0x1B3732C")]
		public static Vector3 MoveOnPath(Path pts, Vector3 currentPosition, ref float pathPosition, ref Quaternion rotation, float maxSpeed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B5C")]
		[Address(RVA = "0x1B37388", Offset = "0x1B37388", VA = "0x1B37388")]
		public static Vector3 MoveOnPath(Path pts, Vector3 currentPosition, ref float pathPosition, ref Quaternion rotation, float maxSpeed, float smoothnessFactor)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B5D")]
		[Address(RVA = "0x1B373DC", Offset = "0x1B373DC", VA = "0x1B373DC")]
		public static Vector3 MoveOnPath(Path pts, Vector3 currentPosition, ref float pathPosition, ref Quaternion rotation, float maxSpeed, float smoothnessFactor, EasingType ease)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B5E")]
		[Address(RVA = "0x1B37434", Offset = "0x1B37434", VA = "0x1B37434")]
		public static Vector3 MoveOnPath(Path pts, Vector3 currentPosition, ref float pathPosition, ref Quaternion rotation, float maxSpeed, float smoothnessFactor, EasingType ease, bool easeIn)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B5F")]
		[Address(RVA = "0x1B37490", Offset = "0x1B37490", VA = "0x1B37490")]
		public static Vector3 MoveOnPath(Path pts, Vector3 currentPosition, ref float pathPosition, ref Quaternion rotation, float maxSpeed, float smoothnessFactor, EasingType ease, bool easeIn, bool easeOut)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B60")]
		[Address(RVA = "0x1B376EC", Offset = "0x1B376EC", VA = "0x1B376EC")]
		public static Quaternion RotationBetween(Path pts, float t1, float t2)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001B61")]
		[Address(RVA = "0x1B3771C", Offset = "0x1B3771C", VA = "0x1B3771C")]
		public static Quaternion RotationBetween(Path pts, float t1, float t2, EasingType ease)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001B62")]
		[Address(RVA = "0x1B37750", Offset = "0x1B37750", VA = "0x1B37750")]
		public static Quaternion RotationBetween(Path pts, float t1, float t2, EasingType ease, bool easeIn)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001B63")]
		[Address(RVA = "0x1B37788", Offset = "0x1B37788", VA = "0x1B37788")]
		public static Quaternion RotationBetween(Path pts, float t1, float t2, EasingType ease, bool easeIn, bool easeOut)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001B64")]
		[Address(RVA = "0x1B378D4", Offset = "0x1B378D4", VA = "0x1B378D4")]
		public static Vector3 Velocity(Path pts, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B65")]
		[Address(RVA = "0x1B378F8", Offset = "0x1B378F8", VA = "0x1B378F8")]
		public static Vector3 Velocity(Path pts, float t, EasingType ease)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B66")]
		[Address(RVA = "0x1B3791C", Offset = "0x1B3791C", VA = "0x1B3791C")]
		public static Vector3 Velocity(Path pts, float t, EasingType ease, bool easeIn)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B67")]
		[Address(RVA = "0x1B37940", Offset = "0x1B37940", VA = "0x1B37940")]
		public static Vector3 Velocity(Path pts, float t, EasingType ease, bool easeIn, bool easeOut)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001B68")]
		[Address(RVA = "0x1B368A4", Offset = "0x1B368A4", VA = "0x1B368A4")]
		public static Vector3[] Wrap(Vector3[] path)
		{
			return null;
		}

		[Token(Token = "0x6001B69")]
		[Address(RVA = "0x1B37B78", Offset = "0x1B37B78", VA = "0x1B37B78")]
		public static void GizmoDraw(Vector3[] pts, float t)
		{
		}

		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0x1B37BA0", Offset = "0x1B37BA0", VA = "0x1B37BA0")]
		public static void GizmoDraw(Vector3[] pts, float t, EasingType ease)
		{
		}

		[Token(Token = "0x6001B6B")]
		[Address(RVA = "0x1B37BC4", Offset = "0x1B37BC4", VA = "0x1B37BC4")]
		public static void GizmoDraw(Vector3[] pts, float t, EasingType ease, bool easeIn)
		{
		}

		[Token(Token = "0x6001B6C")]
		[Address(RVA = "0x1B37BEC", Offset = "0x1B37BEC", VA = "0x1B37BEC")]
		public static void GizmoDraw(Vector3[] pts, float t, EasingType ease, bool easeIn, bool easeOut)
		{
		}
	}
}
[Token(Token = "0x20003BC")]
public static class DelegateSupport
{
	[Token(Token = "0x20003BD")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xEA0B50", Offset = "0xEA0B50")]
	public class Index<TK, TR> : Dictionary<TK, TR> where TR : class, new()
	{
		[Token(Token = "0x17000199")]
		public new TR Item
		{
			[Token(Token = "0x6001B94")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B95")]
			set
			{
			}
		}

		[Token(Token = "0x6001B93")]
		public Index()
		{
		}
	}

	[Token(Token = "0x2000543")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0B84", Offset = "0xEA0B84")]
	private sealed class <FastInvoke>c__AnonStorey0
	{
		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal Func<object, object[], Delegate, object> inner;

		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal Delegate @delegate;

		[Token(Token = "0x60024AA")]
		[Address(RVA = "0x1923804", Offset = "0x1923804", VA = "0x1923804")]
		public <FastInvoke>c__AnonStorey0()
		{
		}

		[Token(Token = "0x60024AB")]
		[Address(RVA = "0x1923D8C", Offset = "0x1923D8C", VA = "0x1923D8C")]
		internal object <>m__0(object t, object[] p)
		{
			return null;
		}
	}

	[Token(Token = "0x4001397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<MethodInfo, Type> delegateTypes;

	[Token(Token = "0x4001398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Dictionary<MethodInfo, Delegate> openDelegates;

	[Token(Token = "0x4001399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Index<Type, Dictionary<string, Func<object, object[], Delegate, object>>> _functions;

	[Token(Token = "0x400139A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static Dictionary<MethodInfo, Func<object, object[], object>> _methods;

	[Token(Token = "0x400139B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0A00", Offset = "0xEA0A00")]
	private static Func<ParameterInfo, Type> <>f__am$cache0;

	[Token(Token = "0x400139C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0A10", Offset = "0xEA0A10")]
	private static Func<ParameterInfo, Type> <>f__am$cache1;

	[Token(Token = "0x400139D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0A20", Offset = "0xEA0A20")]
	private static Func<Type, string> <>f__am$cache2;

	[Token(Token = "0x400139E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0A30", Offset = "0xEA0A30")]
	private static Func<string, string, string> <>f__am$cache3;

	[Token(Token = "0x400139F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0A40", Offset = "0xEA0A40")]
	private static Func<ParameterInfo, Type> <>f__am$cache4;

	[Token(Token = "0x6001B78")]
	[Address(RVA = "0x1922768", Offset = "0x1922768", VA = "0x1922768")]
	public static Delegate ToOpenDelegate(MethodInfo mi)
	{
		return null;
	}

	[Token(Token = "0x6001B79")]
	[Address(RVA = "0x1922CCC", Offset = "0x1922CCC", VA = "0x1922CCC")]
	public static Delegate ToDelegate(MethodInfo mi, object target)
	{
		return null;
	}

	[Token(Token = "0x6001B7A")]
	public static void RegisterActionType<TType>()
	{
	}

	[Token(Token = "0x6001B7B")]
	public static void RegisterActionType<TType, T1>()
	{
	}

	[Token(Token = "0x6001B7C")]
	public static void RegisterActionType<TType, T1, T2, T3>()
	{
	}

	[Token(Token = "0x6001B7D")]
	public static void RegisterActionType<TType, T1, T2>()
	{
	}

	[Token(Token = "0x6001B7E")]
	public static void RegisterFunctionType<TType, TReturns>()
	{
	}

	[Token(Token = "0x6001B7F")]
	public static void RegisterFunctionType<TType, T1, TReturns>()
	{
	}

	[Token(Token = "0x6001B80")]
	public static void RegisterFunctionType<TType, T1, T2, TReturns>()
	{
	}

	[Token(Token = "0x6001B81")]
	public static void RegisterFunctionType<TType, T1, T2, T3, TReturns>()
	{
	}

	[Token(Token = "0x6001B82")]
	[Address(RVA = "0x1923100", Offset = "0x1923100", VA = "0x1923100")]
	public static object FastInvoke(this MethodInfo mi, object target, params object[] parameters)
	{
		return null;
	}

	[Token(Token = "0x6001B83")]
	[Address(RVA = "0x192380C", Offset = "0x192380C", VA = "0x192380C")]
	private static string GetTypes(params Type[] types)
	{
		return null;
	}

	[Token(Token = "0x6001B84")]
	[Address(RVA = "0x1923574", Offset = "0x1923574", VA = "0x1923574")]
	private static string GetTypes(MethodInfo mi)
	{
		return null;
	}

	[Token(Token = "0x6001B86")]
	[Address(RVA = "0x1923C3C", Offset = "0x1923C3C", VA = "0x1923C3C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0A80", Offset = "0xEA0A80")]
	private static Type <ToOpenDelegate>m__0(ParameterInfo p)
	{
		return null;
	}

	[Token(Token = "0x6001B87")]
	[Address(RVA = "0x1923C6C", Offset = "0x1923C6C", VA = "0x1923C6C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0A90", Offset = "0xEA0A90")]
	private static Type <ToDelegate>m__1(ParameterInfo p)
	{
		return null;
	}

	[Token(Token = "0x6001B88")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0AA0", Offset = "0xEA0AA0")]
	private static object <RegisterActionType`1>m__2<TType>(object target, object[] parms, Delegate @delegate)
	{
		return null;
	}

	[Token(Token = "0x6001B89")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0AB0", Offset = "0xEA0AB0")]
	private static object <RegisterActionType`2>m__3<TType, T1>(object target, object[] parms, Delegate @delegate)
	{
		return null;
	}

	[Token(Token = "0x6001B8A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0AC0", Offset = "0xEA0AC0")]
	private static object <RegisterActionType`4>m__4<TType, T1, T2, T3>(object target, object[] parms, Delegate @delegate)
	{
		return null;
	}

	[Token(Token = "0x6001B8B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0AD0", Offset = "0xEA0AD0")]
	private static object <RegisterActionType`3>m__5<TType, T1, T2>(object target, object[] parms, Delegate @delegate)
	{
		return null;
	}

	[Token(Token = "0x6001B8C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0AE0", Offset = "0xEA0AE0")]
	private static object <RegisterFunctionType`2>m__6<TType, TReturns>(object target, object[] parms, Delegate @delegate)
	{
		return null;
	}

	[Token(Token = "0x6001B8D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0AF0", Offset = "0xEA0AF0")]
	private static object <RegisterFunctionType`3>m__7<TType, T1, TReturns>(object target, object[] parms, Delegate @delegate)
	{
		return null;
	}

	[Token(Token = "0x6001B8E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0B00", Offset = "0xEA0B00")]
	private static object <RegisterFunctionType`4>m__8<TType, T1, T2, TReturns>(object target, object[] parms, Delegate @delegate)
	{
		return null;
	}

	[Token(Token = "0x6001B8F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0B10", Offset = "0xEA0B10")]
	private static object <RegisterFunctionType`5>m__9<TType, T1, T2, T3, TReturns>(object target, object[] parms, Delegate @delegate)
	{
		return null;
	}

	[Token(Token = "0x6001B90")]
	[Address(RVA = "0x1923C9C", Offset = "0x1923C9C", VA = "0x1923C9C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0B20", Offset = "0xEA0B20")]
	private static string <GetTypes>m__A(Type t)
	{
		return null;
	}

	[Token(Token = "0x6001B91")]
	[Address(RVA = "0x1923CCC", Offset = "0x1923CCC", VA = "0x1923CCC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0B30", Offset = "0xEA0B30")]
	private static string <GetTypes>m__B(string v, string n)
	{
		return null;
	}

	[Token(Token = "0x6001B92")]
	[Address(RVA = "0x1923D5C", Offset = "0x1923D5C", VA = "0x1923D5C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0B40", Offset = "0xEA0B40")]
	private static Type <GetTypes>m__C(ParameterInfo p)
	{
		return null;
	}
}
namespace RadicalLibrary
{
	[Token(Token = "0x20003BE")]
	public static class Easing
	{
		[Token(Token = "0x20003BF")]
		private static class Sine
		{
			[Token(Token = "0x6001B9B")]
			[Address(RVA = "0x1B33C20", Offset = "0x1B33C20", VA = "0x1B33C20")]
			public static float EaseIn(double s)
			{
				return default(float);
			}

			[Token(Token = "0x6001B9C")]
			[Address(RVA = "0x1B33CB0", Offset = "0x1B33CB0", VA = "0x1B33CB0")]
			public static float EaseOut(double s)
			{
				return default(float);
			}

			[Token(Token = "0x6001B9D")]
			[Address(RVA = "0x1B34098", Offset = "0x1B34098", VA = "0x1B34098")]
			public static float EaseInOut(double s)
			{
				return default(float);
			}
		}

		[Token(Token = "0x20003C0")]
		private static class Power
		{
			[Token(Token = "0x6001B9E")]
			[Address(RVA = "0x1B33C74", Offset = "0x1B33C74", VA = "0x1B33C74")]
			public static float EaseIn(double s, int power)
			{
				return default(float);
			}

			[Token(Token = "0x6001B9F")]
			[Address(RVA = "0x1B33CE8", Offset = "0x1B33CE8", VA = "0x1B33CE8")]
			public static float EaseOut(double s, int power)
			{
				return default(float);
			}

			[Token(Token = "0x6001BA0")]
			[Address(RVA = "0x1B34100", Offset = "0x1B34100", VA = "0x1B34100")]
			public static float EaseInOut(double s, int power)
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001B96")]
		[Address(RVA = "0x1B337B4", Offset = "0x1B337B4", VA = "0x1B337B4")]
		public static float Ease(double linearStep, float acceleration, EasingType type)
		{
			return default(float);
		}

		[Token(Token = "0x6001B97")]
		[Address(RVA = "0x1B33830", Offset = "0x1B33830", VA = "0x1B33830")]
		public static float EaseIn(double linearStep, EasingType type)
		{
			return default(float);
		}

		[Token(Token = "0x6001B98")]
		[Address(RVA = "0x1B339F8", Offset = "0x1B339F8", VA = "0x1B339F8")]
		public static float EaseOut(double linearStep, EasingType type)
		{
			return default(float);
		}

		[Token(Token = "0x6001B99")]
		[Address(RVA = "0x1B33D60", Offset = "0x1B33D60", VA = "0x1B33D60")]
		public static float EaseInOut(double linearStep, EasingType easeInType, EasingType easeOutType)
		{
			return default(float);
		}

		[Token(Token = "0x6001B9A")]
		[Address(RVA = "0x1B33DA0", Offset = "0x1B33DA0", VA = "0x1B33DA0")]
		public static float EaseInOut(double linearStep, EasingType type)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20003C1")]
	public enum EasingType
	{
		[Token(Token = "0x40013A1")]
		Step,
		[Token(Token = "0x40013A2")]
		Linear,
		[Token(Token = "0x40013A3")]
		Sine,
		[Token(Token = "0x40013A4")]
		Quadratic,
		[Token(Token = "0x40013A5")]
		Cubic,
		[Token(Token = "0x40013A6")]
		Quartic,
		[Token(Token = "0x40013A7")]
		Quintic
	}
	[Token(Token = "0x20003C2")]
	public static class MathHelper
	{
		[Token(Token = "0x40013A8")]
		public const float Pi = (float)Math.PI;

		[Token(Token = "0x40013A9")]
		public const float HalfPi = (float)Math.PI / 2f;

		[Token(Token = "0x6001BA1")]
		[Address(RVA = "0x1B33BF8", Offset = "0x1B33BF8", VA = "0x1B33BF8")]
		public static float Lerp(double from, double to, double step)
		{
			return default(float);
		}
	}
}
[Token(Token = "0x20003C3")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA0B94", Offset = "0xEA0B94")]
public class InheritableRPC : MonoBehaviour
{
	[Token(Token = "0x20003C4")]
	public class CachedRoutine
	{
		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public MethodInfo routine;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public MonoBehaviour behaviour;

		[Token(Token = "0x6001BA5")]
		[Address(RVA = "0x3C0470", Offset = "0x3C0470", VA = "0x3C0470")]
		public CachedRoutine()
		{
		}
	}

	[Token(Token = "0x2000544")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0BF8", Offset = "0xEA0BF8")]
	private sealed class <PerformRPCCall>c__AnonStorey0
	{
		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string routineName;

		[Token(Token = "0x60024AC")]
		[Address(RVA = "0x3C02BC", Offset = "0x3C02BC", VA = "0x3C02BC")]
		public <PerformRPCCall>c__AnonStorey0()
		{
		}

		[Token(Token = "0x60024AD")]
		[Address(RVA = "0x3C0394", Offset = "0x3C0394", VA = "0x3C0394")]
		internal CachedRoutine <>m__0(MonoBehaviour m)
		{
			return null;
		}
	}

	[Token(Token = "0x40013AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Dictionary<string, List<CachedRoutine>> cache;

	[Token(Token = "0x40013AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0BC8", Offset = "0xEA0BC8")]
	private static Func<CachedRoutine, bool> <>f__am$cache0;

	[Token(Token = "0x6001BA2")]
	[Address(RVA = "0x3BFC04", Offset = "0x3BFC04", VA = "0x3BFC04")]
	public InheritableRPC()
	{
	}

	[Token(Token = "0x6001BA3")]
	[Address(RVA = "0x3BFC90", Offset = "0x3BFC90", VA = "0x3BFC90")]
	[RPC]
	private void PerformRPCCall(string routineName, string parameters)
	{
	}

	[Token(Token = "0x6001BA4")]
	[Address(RVA = "0x3C02C4", Offset = "0x3C02C4", VA = "0x3C02C4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0BE8", Offset = "0xEA0BE8")]
	private static bool <PerformRPCCall>m__0(CachedRoutine r)
	{
		return default(bool);
	}
}
[Token(Token = "0x20003C5")]
public static class InheritableRPCExtensions
{
	[Token(Token = "0x20003C6")]
	public class StoredPlayer
	{
		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string ipAddress;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string guid;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int port;

		[Token(Token = "0x6001BA8")]
		[Address(RVA = "0x3C0A50", Offset = "0x3C0A50", VA = "0x3C0A50")]
		public StoredPlayer()
		{
		}
	}

	[Token(Token = "0x6001BA6")]
	[Address(RVA = "0x3C0478", Offset = "0x3C0478", VA = "0x3C0478")]
	public static void RPCEx(this NetworkView view, string routineName, RPCMode mode, params object[] parameters)
	{
	}

	[Token(Token = "0x6001BA7")]
	[Address(RVA = "0x3C0764", Offset = "0x3C0764", VA = "0x3C0764")]
	public static void RPCEx(this NetworkView view, string routineName, NetworkPlayer player, params object[] parameters)
	{
	}
}
[Token(Token = "0x20003C7")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA0C58", Offset = "0xEA0C58")]
public class LoadAnimations : MonoBehaviour
{
	[Token(Token = "0x40013B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public new string name;

	[Token(Token = "0x6001BA9")]
	[Address(RVA = "0x196D2BC", Offset = "0x196D2BC", VA = "0x196D2BC")]
	public LoadAnimations()
	{
	}

	[Token(Token = "0x6001BAA")]
	[Address(RVA = "0x196D2C4", Offset = "0x196D2C4", VA = "0x196D2C4")]
	private void Awake()
	{
	}
}
[Token(Token = "0x20003C8")]
[ExecuteInEditMode]
public class Loom : MonoBehaviour
{
	[Token(Token = "0x20003C9")]
	public class DelayedQueueItem
	{
		[Token(Token = "0x40013BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float time;

		[Token(Token = "0x40013BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Action action;

		[Token(Token = "0x6001BB6")]
		[Address(RVA = "0x1971DAC", Offset = "0x1971DAC", VA = "0x1971DAC")]
		public DelayedQueueItem()
		{
		}
	}

	[Token(Token = "0x40013B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Loom _current;

	[Token(Token = "0x40013B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private int _count;

	[Token(Token = "0x40013B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static bool _initialized;

	[Token(Token = "0x40013B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int _threadId;

	[Token(Token = "0x40013B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private List<Action> _actions;

	[Token(Token = "0x40013B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private List<DelayedQueueItem> _delayed;

	[Token(Token = "0x40013B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private List<Action> _cachedActions;

	[Token(Token = "0x40013B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0C9C", Offset = "0xEA0C9C")]
	private static ParameterizedThreadStart <>f__mg$cache0;

	[Token(Token = "0x1700019A")]
	public static Loom Current
	{
		[Token(Token = "0x6001BAC")]
		[Address(RVA = "0x1971618", Offset = "0x1971618", VA = "0x1971618")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001BAB")]
	[Address(RVA = "0x1971540", Offset = "0x1971540", VA = "0x1971540")]
	public Loom()
	{
	}

	[Token(Token = "0x6001BAD")]
	[Address(RVA = "0x1971710", Offset = "0x1971710", VA = "0x1971710")]
	public static void Initialize()
	{
	}

	[Token(Token = "0x6001BAE")]
	[Address(RVA = "0x1971A08", Offset = "0x1971A08", VA = "0x1971A08")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001BAF")]
	[Address(RVA = "0x1971A98", Offset = "0x1971A98", VA = "0x1971A98")]
	public static void QueueOnMainThread(Action action)
	{
	}

	[Token(Token = "0x6001BB0")]
	[Address(RVA = "0x1971B1C", Offset = "0x1971B1C", VA = "0x1971B1C")]
	public static void QueueOnMainThread(Action action, float time)
	{
	}

	[Token(Token = "0x6001BB1")]
	[Address(RVA = "0x1971DB4", Offset = "0x1971DB4", VA = "0x1971DB4")]
	public static void RunAsync(Action action)
	{
	}

	[Token(Token = "0x6001BB2")]
	[Address(RVA = "0x1971F74", Offset = "0x1971F74", VA = "0x1971F74")]
	private static void RunAction(object action)
	{
	}

	[Token(Token = "0x6001BB3")]
	[Address(RVA = "0x1972090", Offset = "0x1972090", VA = "0x1972090")]
	private void Start()
	{
	}

	[Token(Token = "0x6001BB4")]
	[Address(RVA = "0x1972094", Offset = "0x1972094", VA = "0x1972094")]
	private void Update()
	{
	}
}
[Token(Token = "0x20003CA")]
public class MonoBehaviourEx : MonoBehaviour
{
	[Token(Token = "0x6001BB7")]
	[Address(RVA = "0x1977238", Offset = "0x1977238", VA = "0x1977238")]
	public MonoBehaviourEx()
	{
	}

	[Token(Token = "0x6001BB8")]
	[Address(RVA = "0x1977240", Offset = "0x1977240", VA = "0x1977240")]
	public new RadicalRoutine StartCoroutine(IEnumerator func)
	{
		return null;
	}

	[Token(Token = "0x6001BB9")]
	[Address(RVA = "0x1977254", Offset = "0x1977254", VA = "0x1977254")]
	public new RadicalRoutine StartCoroutine(string func)
	{
		return null;
	}
}
[Token(Token = "0x20003CB")]
public class WeakReference<T> where T : class
{
	[Token(Token = "0x40013BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private WeakReference r;

	[Token(Token = "0x1700019B")]
	public T Target
	{
		[Token(Token = "0x6001BBB")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001BBC")]
		set
		{
		}
	}

	[Token(Token = "0x1700019C")]
	public bool IsAlive
	{
		[Token(Token = "0x6001BBD")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001BBA")]
	public WeakReference()
	{
	}

	[Token(Token = "0x6001BBE")]
	public static implicit operator T(WeakReference<T> re)
	{
		return null;
	}

	[Token(Token = "0x6001BBF")]
	public static implicit operator WeakReference<T>(T value)
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x20003CC")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xEA0CAC", Offset = "0xEA0CAC")]
public class ObservedList<T> : List<T>
{
	[Token(Token = "0x40013BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0D14", Offset = "0xEA0D14")]
	private static Action<int> <>f__am$cache0;

	[Token(Token = "0x1700019D")]
	public new T Item
	{
		[Token(Token = "0x6001BC3")]
		get
		{
			return (T)null;
		}
		[Token(Token = "0x6001BC4")]
		set
		{
		}
	}

	[Token(Token = "0x1400007F")]
	public event Action<int> Changed
	{
		[Token(Token = "0x6001BC1")]
		add
		{
		}
		[Token(Token = "0x6001BC2")]
		remove
		{
		}
	}

	[Token(Token = "0x6001BC0")]
	public ObservedList()
	{
	}

	[Token(Token = "0x6001BC5")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0D24", Offset = "0xEA0D24")]
	private static void <Changed>m__0(int P_0)
	{
	}
}
[Token(Token = "0x20003CD")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xEA0D34", Offset = "0xEA0D34")]
public class Lookup<TK, TR> : Dictionary<TK, TR> where TR : class
{
	[Token(Token = "0x1700019E")]
	public new virtual TR Item
	{
		[Token(Token = "0x6001BC7")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001BC8")]
		set
		{
		}
	}

	[Token(Token = "0x6001BC6")]
	public Lookup()
	{
	}

	[Token(Token = "0x6001BC9")]
	public T Get<T>(TK index) where T : class
	{
		return null;
	}
}
[Token(Token = "0x20003CE")]
public interface IChanged
{
	[Token(Token = "0x6001BCA")]
	void Changed(object index);
}
[Token(Token = "0x20003CF")]
public interface INeedParent
{
	[Token(Token = "0x6001BCB")]
	void SetParent(IChanged parent, object index);
}
[Token(Token = "0x20003D0")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xEA0D68", Offset = "0xEA0D68")]
public class Index<TK, TR> : Lookup<TK, TR>, IChanged where TR : class, new()
{
	[Token(Token = "0x40013C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0E04", Offset = "0xEA0E04")]
	private static Action<TK, TR> <>f__am$cache0;

	[Token(Token = "0x1700019F")]
	public override TR Item
	{
		[Token(Token = "0x6001BD2")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001BD3")]
		set
		{
		}
	}

	[Token(Token = "0x14000080")]
	public event Action<TK, TR, TR> Setting
	{
		[Token(Token = "0x6001BCD")]
		add
		{
		}
		[Token(Token = "0x6001BCE")]
		remove
		{
		}
	}

	[Token(Token = "0x14000081")]
	public event Action<TK, TR> Getting
	{
		[Token(Token = "0x6001BCF")]
		add
		{
		}
		[Token(Token = "0x6001BD0")]
		remove
		{
		}
	}

	[Token(Token = "0x6001BCC")]
	public Index()
	{
	}

	[Token(Token = "0x6001BD1")]
	public void Changed(object index)
	{
	}

	[Token(Token = "0x6001BD4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0E14", Offset = "0xEA0E14")]
	private static void <Getting>m__0(TK P_0, TR P_1)
	{
	}
}
[Token(Token = "0x20003D1")]
public class GUIBackgroundColor : IDisposable
{
	[Token(Token = "0x40013C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private Color old;

	[Token(Token = "0x6001BD5")]
	[Address(RVA = "0x19BE208", Offset = "0x19BE208", VA = "0x19BE208")]
	public GUIBackgroundColor(Color color)
	{
	}

	[Token(Token = "0x6001BD6")]
	[Address(RVA = "0x19BE2E0", Offset = "0x19BE2E0", VA = "0x19BE2E0", Slot = "4")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x20003D2")]
public class GUIArea : IDisposable
{
	[Token(Token = "0x20003D3")]
	public class Rotated : IDisposable
	{
		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0x19BE124", Offset = "0x19BE124", VA = "0x19BE124")]
		public Rotated()
		{
		}

		[Token(Token = "0x6001BDC")]
		[Address(RVA = "0x19BE19C", Offset = "0x19BE19C", VA = "0x19BE19C", Slot = "4")]
		public void Dispose()
		{
		}
	}

	[Token(Token = "0x40013C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int rotated;

	[Token(Token = "0x6001BD7")]
	[Address(RVA = "0x19BDDFC", Offset = "0x19BDDFC", VA = "0x19BDDFC")]
	public GUIArea()
	{
	}

	[Token(Token = "0x6001BD8")]
	[Address(RVA = "0x19BDE2C", Offset = "0x19BDE2C", VA = "0x19BDE2C")]
	public GUIArea(Rect? area)
	{
	}

	[Token(Token = "0x6001BD9")]
	[Address(RVA = "0x19BE0C8", Offset = "0x19BE0C8", VA = "0x19BE0C8")]
	public static Rect GetStandardArea()
	{
		return default(Rect);
	}

	[Token(Token = "0x6001BDA")]
	[Address(RVA = "0x19BE118", Offset = "0x19BE118", VA = "0x19BE118", Slot = "4")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x20003D4")]
public class GUIScale : IDisposable
{
	[Token(Token = "0x40013C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int count;

	[Token(Token = "0x40013C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Matrix4x4 cached;

	[Token(Token = "0x6001BDD")]
	[Address(RVA = "0x19BE388", Offset = "0x19BE388", VA = "0x19BE388")]
	public GUIScale()
	{
	}

	[Token(Token = "0x6001BDE")]
	[Address(RVA = "0x19BE6B0", Offset = "0x19BE6B0", VA = "0x19BE6B0", Slot = "4")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x20003D5")]
public class Horizontal : IDisposable
{
	[Token(Token = "0x6001BE0")]
	[Address(RVA = "0x19C50C4", Offset = "0x19C50C4", VA = "0x19C50C4")]
	public Horizontal()
	{
	}

	[Token(Token = "0x6001BE1")]
	[Address(RVA = "0x19C5150", Offset = "0x19C5150", VA = "0x19C5150")]
	public Horizontal(GUIStyle style)
	{
	}

	[Token(Token = "0x6001BE2")]
	[Address(RVA = "0x19C51E4", Offset = "0x19C51E4", VA = "0x19C51E4")]
	public Horizontal(params GUILayoutOption[] options)
	{
	}

	[Token(Token = "0x6001BE3")]
	[Address(RVA = "0x19C520C", Offset = "0x19C520C", VA = "0x19C520C", Slot = "4")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x20003D6")]
public class Vertical : IDisposable
{
	[Token(Token = "0x6001BE4")]
	[Address(RVA = "0x21E6A64", Offset = "0x21E6A64", VA = "0x21E6A64")]
	public Vertical(params GUILayoutOption[] options)
	{
	}

	[Token(Token = "0x6001BE5")]
	[Address(RVA = "0x21E6A8C", Offset = "0x21E6A8C", VA = "0x21E6A8C", Slot = "4")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x20003D7")]
public class ScrollView : IDisposable
{
	[Token(Token = "0x6001BE6")]
	[Address(RVA = "0x6232E4", Offset = "0x6232E4", VA = "0x6232E4")]
	public ScrollView(ref Vector2 scroll)
	{
	}

	[Token(Token = "0x6001BE7")]
	[Address(RVA = "0x623398", Offset = "0x623398", VA = "0x623398", Slot = "5")]
	public virtual void Dispose()
	{
	}
}
[Token(Token = "0x20003D8")]
public class Box : IDisposable
{
	[Token(Token = "0x6001BE8")]
	[Address(RVA = "0x19DE30C", Offset = "0x19DE30C", VA = "0x19DE30C")]
	public Box(GUIStyle style)
	{
	}

	[Token(Token = "0x6001BE9")]
	[Address(RVA = "0x19DE3A0", Offset = "0x19DE3A0", VA = "0x19DE3A0")]
	public Box(params GUILayoutOption[] options)
	{
	}

	[Token(Token = "0x6001BEA")]
	[Address(RVA = "0x19DE458", Offset = "0x19DE458", VA = "0x19DE458")]
	public Box()
	{
	}

	[Token(Token = "0x6001BEB")]
	[Address(RVA = "0x19DE534", Offset = "0x19DE534", VA = "0x19DE534", Slot = "5")]
	public virtual void Dispose()
	{
	}
}
[Token(Token = "0x20003D9")]
public class HorizontalCentered : IDisposable
{
	[Token(Token = "0x6001BEC")]
	[Address(RVA = "0x19C5218", Offset = "0x19C5218", VA = "0x19C5218")]
	public HorizontalCentered()
	{
	}

	[Token(Token = "0x6001BED")]
	[Address(RVA = "0x19C52B0", Offset = "0x19C52B0", VA = "0x19C52B0")]
	public HorizontalCentered(GUIStyle style)
	{
	}

	[Token(Token = "0x6001BEE")]
	[Address(RVA = "0x19C5350", Offset = "0x19C5350", VA = "0x19C5350", Slot = "4")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x20003DA")]
public class VerticalCentered : IDisposable
{
	[Token(Token = "0x6001BEF")]
	[Address(RVA = "0x21E6A98", Offset = "0x21E6A98", VA = "0x21E6A98")]
	public VerticalCentered()
	{
	}

	[Token(Token = "0x6001BF0")]
	[Address(RVA = "0x21E6B30", Offset = "0x21E6B30", VA = "0x21E6B30")]
	public VerticalCentered(params GUILayoutOption[] options)
	{
	}

	[Token(Token = "0x6001BF1")]
	[Address(RVA = "0x21E6B64", Offset = "0x21E6B64", VA = "0x21E6B64", Slot = "4")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x20003DB")]
public class RightAligned : IDisposable
{
	[Token(Token = "0x6001BF2")]
	[Address(RVA = "0x1B3D510", Offset = "0x1B3D510", VA = "0x1B3D510")]
	public RightAligned()
	{
	}

	[Token(Token = "0x6001BF3")]
	[Address(RVA = "0x1B3D5A8", Offset = "0x1B3D5A8", VA = "0x1B3D5A8", Slot = "4")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x20003DC")]
public class LeftAligned : IDisposable
{
	[Token(Token = "0x6001BF4")]
	[Address(RVA = "0x1948AF4", Offset = "0x1948AF4", VA = "0x1948AF4")]
	public LeftAligned()
	{
	}

	[Token(Token = "0x6001BF5")]
	[Address(RVA = "0x1948B80", Offset = "0x1948B80", VA = "0x1948B80", Slot = "4")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x20003DD")]
public class BottomAligned : IDisposable
{
	[Token(Token = "0x6001BF6")]
	[Address(RVA = "0x19DE268", Offset = "0x19DE268", VA = "0x19DE268")]
	public BottomAligned()
	{
	}

	[Token(Token = "0x6001BF7")]
	[Address(RVA = "0x19DE300", Offset = "0x19DE300", VA = "0x19DE300", Slot = "4")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x20003DE")]
public class SceneIndex : MonoBehaviour
{
	[Token(Token = "0x6001BF8")]
	[Address(RVA = "0x6232DC", Offset = "0x6232DC", VA = "0x6232DC")]
	public SceneIndex()
	{
	}
}
[Token(Token = "0x20003DF")]
public static class Radical
{
	[Token(Token = "0x20003E0")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xEA11A4", Offset = "0xEA11A4")]
	public class PreferenceAccess
	{
		[Token(Token = "0x170001A1")]
		public bool Item
		{
			[Token(Token = "0x6001C3F")]
			[Address(RVA = "0x1B30F48", Offset = "0x1B30F48", VA = "0x1B30F48")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C40")]
			[Address(RVA = "0x1B31020", Offset = "0x1B31020", VA = "0x1B31020")]
			set
			{
			}
		}

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0x1B2C9B0", Offset = "0x1B2C9B0", VA = "0x1B2C9B0")]
		public PreferenceAccess()
		{
		}
	}

	[Token(Token = "0x20003E1")]
	public class Logging : IDisposable
	{
		[Token(Token = "0x6001C41")]
		[Address(RVA = "0x1B30DD0", Offset = "0x1B30DD0", VA = "0x1B30DD0")]
		public Logging()
		{
		}

		[Token(Token = "0x6001C42")]
		[Address(RVA = "0x1B30E74", Offset = "0x1B30E74", VA = "0x1B30E74", Slot = "4")]
		public void Dispose()
		{
		}
	}

	[Token(Token = "0x2000545")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA11D8", Offset = "0xEA11D8")]
	private sealed class <VolumeFader>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float? fromLevel;

		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal AudioSource source;

		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal float <currentVolume>__0;

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal float <t>__0;

		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float time;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal float level;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal object $current;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool $disposing;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int $PC;

		[Token(Token = "0x170002CA")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60024B0")]
			[Address(RVA = "0x1B30D28", Offset = "0x1B30D28", VA = "0x1B30D28", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024B1")]
			[Address(RVA = "0x1B30D30", Offset = "0x1B30D30", VA = "0x1B30D30", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024AE")]
		[Address(RVA = "0x1B2D69C", Offset = "0x1B2D69C", VA = "0x1B2D69C")]
		[DebuggerHidden]
		public <VolumeFader>c__Iterator0()
		{
		}

		[Token(Token = "0x60024AF")]
		[Address(RVA = "0x1B30B34", Offset = "0x1B30B34", VA = "0x1B30B34", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024B2")]
		[Address(RVA = "0x1B30D38", Offset = "0x1B30D38", VA = "0x1B30D38", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024B3")]
		[Address(RVA = "0x1B30D4C", Offset = "0x1B30D4C", VA = "0x1B30D4C", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000546")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1238", Offset = "0xEA1238")]
	private sealed class <FindChildIncludingDeactivated>c__AnonStorey1
	{
		[Token(Token = "0x4001AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal string name;

		[Token(Token = "0x60024B4")]
		[Address(RVA = "0x1B2DEBC", Offset = "0x1B2DEBC", VA = "0x1B2DEBC")]
		public <FindChildIncludingDeactivated>c__AnonStorey1()
		{
		}

		[Token(Token = "0x60024B5")]
		[Address(RVA = "0x1B30A84", Offset = "0x1B30A84", VA = "0x1B30A84")]
		internal bool <>m__0(Transform c)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x2000547")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1248", Offset = "0xEA1248")]
	private sealed class <IndexOf>c__AnonStorey2<T>
	{
		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal T item;

		[Token(Token = "0x60024B6")]
		public <IndexOf>c__AnonStorey2()
		{
		}

		[Token(Token = "0x60024B7")]
		internal bool <>m__0(T i)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x40013C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PreferenceAccess Preferences;

	[Token(Token = "0x40013C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Lookup<string, GameObject> _gameObjects;

	[Token(Token = "0x40013C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Lookup<string, GameObject> _fullPaths;

	[Token(Token = "0x40013C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static bool AllowDeferredLogging;

	[Token(Token = "0x40013CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static int _indent;

	[Token(Token = "0x40013CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static readonly bool DebugBuild;

	[Token(Token = "0x40013CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static int _deferredLoggingEnabled;

	[Token(Token = "0x40013CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static Vector3 mergeMix;

	[Token(Token = "0x40013CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static List<string> logEntries;

	[Token(Token = "0x40013CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0E74", Offset = "0xEA0E74")]
	private static Func<GameObject, bool> <>f__am$cache0;

	[Token(Token = "0x40013D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0E84", Offset = "0xEA0E84")]
	private static Func<GameObject, IEnumerable<GameObject>> <>f__am$cache1;

	[Token(Token = "0x40013D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0E94", Offset = "0xEA0E94")]
	private static Func<string, string, string> <>f__am$cache2;

	[Token(Token = "0x40013D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA0EA4", Offset = "0xEA0EA4")]
	private static Func<Transform, GameObject> <>f__am$cache3;

	[Token(Token = "0x170001A0")]
	public static bool DeferredLoggingEnabled
	{
		[Token(Token = "0x6001C15")]
		[Address(RVA = "0x1B2EBF8", Offset = "0x1B2EBF8", VA = "0x1B2EBF8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001BF9")]
	[Address(RVA = "0x1B2C838", Offset = "0x1B2C838", VA = "0x1B2C838")]
	static Radical()
	{
	}

	[Token(Token = "0x6001BFA")]
	[Address(RVA = "0x1B2C9B8", Offset = "0x1B2C9B8", VA = "0x1B2C9B8")]
	public static void SetActiveRecursively(GameObject go, bool state)
	{
	}

	[Token(Token = "0x6001BFB")]
	[Address(RVA = "0x1B2CD40", Offset = "0x1B2CD40", VA = "0x1B2CD40")]
	public static void ActivateChildren(this Component co)
	{
	}

	[Token(Token = "0x6001BFC")]
	public static TSource MaxBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> selector) where TSource : class
	{
		return null;
	}

	[Token(Token = "0x6001BFD")]
	public static TSource MaxBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> selector, IComparer<TKey> comparer) where TSource : class
	{
		return null;
	}

	[Token(Token = "0x6001BFE")]
	public static IEnumerable<TResult> Zip<T1, T2, TResult>(this IEnumerable<T1> seq1, IEnumerable<T2> seq2, Func<T1, T2, TResult> resultSelector)
	{
		return null;
	}

	[Token(Token = "0x6001BFF")]
	[Address(RVA = "0x1B2CDE0", Offset = "0x1B2CDE0", VA = "0x1B2CDE0")]
	public static bool CalledFrom(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x6001C00")]
	[Address(RVA = "0x1B2CF24", Offset = "0x1B2CF24", VA = "0x1B2CF24")]
	public static int MaskLayers(params int[] layers)
	{
		return default(int);
	}

	[Token(Token = "0x6001C01")]
	[Address(RVA = "0x1B2CF8C", Offset = "0x1B2CF8C", VA = "0x1B2CF8C")]
	public static int MaskLayers(params string[] layers)
	{
		return default(int);
	}

	[Token(Token = "0x6001C02")]
	[Address(RVA = "0x1B2D000", Offset = "0x1B2D000", VA = "0x1B2D000")]
	public static void PlayOneShot(this GameObject gameObject, AudioClip clip)
	{
	}

	[Token(Token = "0x6001C03")]
	[Address(RVA = "0x1B2D1C4", Offset = "0x1B2D1C4", VA = "0x1B2D1C4")]
	public static void PlayAudio(this GameObject gameObject, AudioClip clip)
	{
	}

	[Token(Token = "0x6001C04")]
	[Address(RVA = "0x1B2D40C", Offset = "0x1B2D40C", VA = "0x1B2D40C")]
	public static void FadeVolume(this GameObject component, float toLevel = 1f, float time = 1f, [Optional] float? fromLevel)
	{
	}

	[Token(Token = "0x6001C05")]
	[Address(RVA = "0x1B2D510", Offset = "0x1B2D510", VA = "0x1B2D510")]
	[DebuggerHidden]
	private static IEnumerator VolumeFader(AudioSource source, float level, float time, float? fromLevel)
	{
		return null;
	}

	[Token(Token = "0x6001C06")]
	[Address(RVA = "0x1B2D6A4", Offset = "0x1B2D6A4", VA = "0x1B2D6A4")]
	public static void DeactivateChildren(this Component co)
	{
	}

	[Token(Token = "0x6001C07")]
	[Address(RVA = "0x1B2DA80", Offset = "0x1B2DA80", VA = "0x1B2DA80")]
	public static void DestroyChildren(this Transform t)
	{
	}

	[Token(Token = "0x6001C08")]
	[Address(RVA = "0x1B2DDA8", Offset = "0x1B2DDA8", VA = "0x1B2DDA8")]
	public static Transform FindChildIncludingDeactivated(this Transform t, string name)
	{
		return null;
	}

	[Token(Token = "0x6001C09")]
	[Address(RVA = "0x1B2DEC4", Offset = "0x1B2DEC4", VA = "0x1B2DEC4")]
	public static string GetId(this GameObject go)
	{
		return null;
	}

	[Token(Token = "0x6001C0A")]
	[Address(RVA = "0x1B2E1E0", Offset = "0x1B2E1E0", VA = "0x1B2E1E0")]
	public static GameObject FindGameObject(string name)
	{
		return null;
	}

	[Token(Token = "0x6001C0B")]
	[Address(RVA = "0x1B2DFD0", Offset = "0x1B2DFD0", VA = "0x1B2DFD0")]
	public static string GetFullName(this GameObject gameObject)
	{
		return null;
	}

	[Token(Token = "0x6001C0C")]
	[Address(RVA = "0x1B2E338", Offset = "0x1B2E338", VA = "0x1B2E338")]
	private static void IndexScene()
	{
	}

	[Token(Token = "0x6001C0D")]
	[Address(RVA = "0x1B2EB0C", Offset = "0x1B2EB0C", VA = "0x1B2EB0C")]
	public static void ReIndexScene()
	{
	}

	[Token(Token = "0x6001C0E")]
	public static T Find<T>(string name) where T : Component
	{
		return null;
	}

	[Token(Token = "0x6001C0F")]
	public static T Find<T>(this GameObject go, string name) where T : Component
	{
		return null;
	}

	[Token(Token = "0x6001C10")]
	public static Index<T, List<TR>> ToIndex<TSource, T, TR>(this IEnumerable<TSource> source, Func<TSource, T> keySelector, Func<TSource, TR> elementSelector) where T : class where TR : class
	{
		return null;
	}

	[Token(Token = "0x6001C11")]
	public static TSource MinBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> selector)
	{
		return (TSource)null;
	}

	[Token(Token = "0x6001C12")]
	public static TSource MinBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> selector, IComparer<TKey> comparer)
	{
		return (TSource)null;
	}

	[Token(Token = "0x6001C13")]
	public static IEnumerable<TResult> Discrete<TResult, T1>(this IEnumerable<TResult> seq, Func<TResult, T1> func)
	{
		return null;
	}

	[Token(Token = "0x6001C14")]
	public static Index<T, List<TSource>> ToIndex<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> keySelector) where T : class
	{
		return null;
	}

	[Token(Token = "0x6001C16")]
	public static T FindInterface<T>(this GameObject go) where T : class
	{
		return null;
	}

	[Token(Token = "0x6001C17")]
	public static T FindImplementor<T>(this GameObject go) where T : class
	{
		return null;
	}

	[Token(Token = "0x6001C18")]
	public static T[] FindImplementors<T>(this GameObject go) where T : class
	{
		return null;
	}

	[Token(Token = "0x6001C19")]
	private static T RecurseFind<T>(GameObject go) where T : class
	{
		return null;
	}

	[Token(Token = "0x6001C1A")]
	public static int IndexOf<T>(this IEnumerable<T> items, T item)
	{
		return default(int);
	}

	[Token(Token = "0x6001C1B")]
	public static int FindIndex<T>(this IEnumerable<T> items, Func<T, bool> predicate)
	{
		return default(int);
	}

	[Token(Token = "0x6001C1C")]
	[Address(RVA = "0x1B2EC90", Offset = "0x1B2EC90", VA = "0x1B2EC90")]
	public static Color RGBA(int r, int g, int b, int a)
	{
		return default(Color);
	}

	[Token(Token = "0x6001C1D")]
	[Address(RVA = "0x1B2ED08", Offset = "0x1B2ED08", VA = "0x1B2ED08")]
	public static Quaternion Merge(this Quaternion first, Vector3 second)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6001C1E")]
	[Address(RVA = "0x1B2EE24", Offset = "0x1B2EE24", VA = "0x1B2EE24")]
	public static Vector3 Merge(this Vector3 first, Vector3 second)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001C1F")]
	public static T GetInterface<T>(this Transform tra) where T : class
	{
		return null;
	}

	[Token(Token = "0x6001C20")]
	public static T GetInterface<T>(this GameObject go) where T : class
	{
		return null;
	}

	[Token(Token = "0x6001C21")]
	public static IList<T> GetInterfaces<T>(this GameObject go) where T : class
	{
		return null;
	}

	[Token(Token = "0x6001C22")]
	[Address(RVA = "0x1B2EF64", Offset = "0x1B2EF64", VA = "0x1B2EF64")]
	public static void IndentLog()
	{
	}

	[Token(Token = "0x6001C23")]
	[Address(RVA = "0x1B2EFF8", Offset = "0x1B2EFF8", VA = "0x1B2EFF8")]
	public static void OutdentLog()
	{
	}

	[Token(Token = "0x6001C24")]
	[Address(RVA = "0x1B2F08C", Offset = "0x1B2F08C", VA = "0x1B2F08C")]
	public static void LogNode(object message)
	{
	}

	[Token(Token = "0x6001C25")]
	[Address(RVA = "0x1B2F158", Offset = "0x1B2F158", VA = "0x1B2F158")]
	public static void LogNow(string message, params object[] parms)
	{
	}

	[Token(Token = "0x6001C26")]
	[Address(RVA = "0x1B2F274", Offset = "0x1B2F274", VA = "0x1B2F274")]
	public static void LogWarning(string message)
	{
	}

	[Token(Token = "0x6001C27")]
	[Address(RVA = "0x1B2F2F8", Offset = "0x1B2F2F8", VA = "0x1B2F2F8")]
	public static void LogWarning(string message, UnityEngine.Object context)
	{
	}

	[Token(Token = "0x6001C28")]
	[Address(RVA = "0x1B2F458", Offset = "0x1B2F458", VA = "0x1B2F458")]
	public static void LogError(string message)
	{
	}

	[Token(Token = "0x6001C29")]
	[Address(RVA = "0x1B2F4DC", Offset = "0x1B2F4DC", VA = "0x1B2F4DC")]
	public static void LogError(string message, UnityEngine.Object context)
	{
	}

	[Token(Token = "0x6001C2A")]
	[Address(RVA = "0x1B2F63C", Offset = "0x1B2F63C", VA = "0x1B2F63C")]
	public static bool IsLogging()
	{
		return default(bool);
	}

	[Token(Token = "0x6001C2B")]
	[Address(RVA = "0x1B2F6F4", Offset = "0x1B2F6F4", VA = "0x1B2F6F4")]
	public static void Log(string message, params object[] parms)
	{
	}

	[Token(Token = "0x6001C2C")]
	[Address(RVA = "0x1B2F98C", Offset = "0x1B2F98C", VA = "0x1B2F98C")]
	public static void ClearLog()
	{
	}

	[Token(Token = "0x6001C2D")]
	[Address(RVA = "0x1B2FA3C", Offset = "0x1B2FA3C", VA = "0x1B2FA3C")]
	public static void CommitLog()
	{
	}

	[Token(Token = "0x6001C2E")]
	[Address(RVA = "0x1B2FCAC", Offset = "0x1B2FCAC", VA = "0x1B2FCAC")]
	public static GameObject Instantiate(Transform template)
	{
		return null;
	}

	[Token(Token = "0x6001C2F")]
	[Address(RVA = "0x1B2FD30", Offset = "0x1B2FD30", VA = "0x1B2FD30")]
	public static GameObject Instantiate(Transform template, GameObject parent)
	{
		return null;
	}

	[Token(Token = "0x6001C30")]
	[Address(RVA = "0x1B2FE5C", Offset = "0x1B2FE5C", VA = "0x1B2FE5C")]
	public static GameObject SetParent(this GameObject child, GameObject parent)
	{
		return null;
	}

	[Token(Token = "0x6001C31")]
	[Address(RVA = "0x1B2FEF0", Offset = "0x1B2FEF0", VA = "0x1B2FEF0")]
	public static GameObject SetParent(this GameObject child, GameObject parent, bool setScale)
	{
		return null;
	}

	[Token(Token = "0x6001C32")]
	[Address(RVA = "0x1B2FF64", Offset = "0x1B2FF64", VA = "0x1B2FF64")]
	public static Transform SetParent(this Transform child, GameObject parent)
	{
		return null;
	}

	[Token(Token = "0x6001C33")]
	[Address(RVA = "0x1B2FFF8", Offset = "0x1B2FFF8", VA = "0x1B2FFF8")]
	public static Transform SetParent(this Transform child, GameObject parent, bool setScale)
	{
		return null;
	}

	[Token(Token = "0x6001C34")]
	[Address(RVA = "0x1B30050", Offset = "0x1B30050", VA = "0x1B30050")]
	public static Transform SetParent(this Transform child, Transform parent)
	{
		return null;
	}

	[Token(Token = "0x6001C35")]
	[Address(RVA = "0x1B300E4", Offset = "0x1B300E4", VA = "0x1B300E4")]
	public static Transform SetParent(this Transform child, Transform parent, bool setScale)
	{
		return null;
	}

	[Token(Token = "0x6001C36")]
	[Address(RVA = "0x1B302F8", Offset = "0x1B302F8", VA = "0x1B302F8")]
	public static Quaternion SmoothDamp(this Vector3 current, Vector3 target, ref Vector3 velocity, float time)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6001C37")]
	[Address(RVA = "0x1B3048C", Offset = "0x1B3048C", VA = "0x1B3048C")]
	public static GameObject AddChild(this GameObject parent, Transform template)
	{
		return null;
	}

	[Token(Token = "0x6001C38")]
	[Address(RVA = "0x1B30514", Offset = "0x1B30514", VA = "0x1B30514")]
	public static void EnsureComponent(this GameObject obj, Type t)
	{
	}

	[Token(Token = "0x6001C39")]
	[Address(RVA = "0x1B305E8", Offset = "0x1B305E8", VA = "0x1B305E8")]
	public static void RemoveComponent(this GameObject obj, Type t)
	{
	}

	[Token(Token = "0x6001C3A")]
	[Address(RVA = "0x1B306D8", Offset = "0x1B306D8", VA = "0x1B306D8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1164", Offset = "0xEA1164")]
	private static bool <IndexScene>m__0(GameObject g)
	{
		return default(bool);
	}

	[Token(Token = "0x6001C3B")]
	[Address(RVA = "0x1B3079C", Offset = "0x1B3079C", VA = "0x1B3079C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1174", Offset = "0xEA1174")]
	private static IEnumerable<GameObject> <IndexScene>m__1(GameObject g)
	{
		return null;
	}

	[Token(Token = "0x6001C3C")]
	[Address(RVA = "0x1B309B0", Offset = "0x1B309B0", VA = "0x1B309B0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1184", Offset = "0xEA1184")]
	private static string <CommitLog>m__2(string current, string next)
	{
		return null;
	}

	[Token(Token = "0x6001C3D")]
	[Address(RVA = "0x1B30A5C", Offset = "0x1B30A5C", VA = "0x1B30A5C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1194", Offset = "0xEA1194")]
	private static GameObject <IndexScene>m__3(Transform t)
	{
		return null;
	}
}
[Token(Token = "0x20003E2")]
public static class TextHelper
{
	[Token(Token = "0x6001C43")]
	[Address(RVA = "0x18FE218", Offset = "0x18FE218", VA = "0x18FE218")]
	public static string FixTo(this string str, float width)
	{
		return null;
	}

	[Token(Token = "0x6001C44")]
	[Address(RVA = "0x18FE28C", Offset = "0x18FE28C", VA = "0x18FE28C")]
	public static string FixTo(this string str, float width, string type)
	{
		return null;
	}
}
[Token(Token = "0x20003E3")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xEA1288", Offset = "0xEA1288")]
public class ValueLookup<TK, TR> : Dictionary<TK, TR> where TR : struct
{
	[Token(Token = "0x170001A2")]
	public new virtual TR Item
	{
		[Token(Token = "0x6001C46")]
		get
		{
			return (TR)null;
		}
		[Token(Token = "0x6001C47")]
		set
		{
		}
	}

	[Token(Token = "0x6001C45")]
	public ValueLookup()
	{
	}

	[Token(Token = "0x6001C48")]
	public T Get<T>(TK index) where T : class
	{
		return null;
	}
}
[Token(Token = "0x20003E4")]
public class CoroutineReturn
{
	[Token(Token = "0x40013D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA12BC", Offset = "0xEA12BC")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xEA12BC", Offset = "0xEA12BC")]
	private bool <finished>k__BackingField;

	[Token(Token = "0x40013D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA12F0", Offset = "0xEA12F0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xEA12F0", Offset = "0xEA12F0")]
	private bool <cancel>k__BackingField;

	[Token(Token = "0x170001A3")]
	public virtual bool finished
	{
		[Token(Token = "0x6001C4A")]
		[Address(RVA = "0x19E326C", Offset = "0x19E326C", VA = "0x19E326C", Slot = "4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1324", Offset = "0xEA1324")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001C4B")]
		[Address(RVA = "0x19E3274", Offset = "0x19E3274", VA = "0x19E3274", Slot = "5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1334", Offset = "0xEA1334")]
		set
		{
		}
	}

	[Token(Token = "0x170001A4")]
	public virtual bool cancel
	{
		[Token(Token = "0x6001C4C")]
		[Address(RVA = "0x19E327C", Offset = "0x19E327C", VA = "0x19E327C", Slot = "6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1344", Offset = "0xEA1344")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001C4D")]
		[Address(RVA = "0x19E3284", Offset = "0x19E3284", VA = "0x19E3284", Slot = "7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1354", Offset = "0xEA1354")]
		set
		{
		}
	}

	[Token(Token = "0x6001C49")]
	[Address(RVA = "0x19E3264", Offset = "0x19E3264", VA = "0x19E3264")]
	public CoroutineReturn()
	{
	}
}
[Token(Token = "0x20003E5")]
[SerializeAll]
[Preserve]
public class WaitForAnimation : CoroutineReturn
{
	[Token(Token = "0x40013D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[Preserve]
	private GameObject _go;

	[Token(Token = "0x40013D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[Preserve]
	private string _name;

	[Token(Token = "0x40013D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[Preserve]
	private float _time;

	[Token(Token = "0x40013D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Preserve]
	private float _weight;

	[Token(Token = "0x40013D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[DoNotSerialize]
	private int startFrame;

	[Token(Token = "0x170001A5")]
	public string name
	{
		[Token(Token = "0x6001C52")]
		[Address(RVA = "0x21E78A4", Offset = "0x21E78A4", VA = "0x21E78A4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001A6")]
	[DoNotSerialize]
	public override bool finished
	{
		[Token(Token = "0x6001C53")]
		[Address(RVA = "0x21E78AC", Offset = "0x21E78AC", VA = "0x21E78AC", Slot = "4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001C54")]
		[Address(RVA = "0x21E7C00", Offset = "0x21E7C00", VA = "0x21E7C00", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x6001C4E")]
	[Address(RVA = "0x21E7784", Offset = "0x21E7784", VA = "0x21E7784")]
	public WaitForAnimation()
	{
	}

	[Token(Token = "0x6001C4F")]
	[Address(RVA = "0x21E778C", Offset = "0x21E778C", VA = "0x21E778C")]
	public WaitForAnimation(GameObject go, string name)
	{
	}

	[Token(Token = "0x6001C50")]
	[Address(RVA = "0x21E7880", Offset = "0x21E7880", VA = "0x21E7880")]
	public WaitForAnimation(GameObject go, string name, float time)
	{
	}

	[Token(Token = "0x6001C51")]
	[Address(RVA = "0x21E77B4", Offset = "0x21E77B4", VA = "0x21E77B4")]
	public WaitForAnimation(GameObject go, string name, float time, float weight)
	{
	}
}
[Token(Token = "0x20003E6")]
public static class TaskHelpers
{
	[Token(Token = "0x6001C55")]
	[Address(RVA = "0x18FE0A0", Offset = "0x18FE0A0", VA = "0x18FE0A0")]
	public static WaitForAnimation WaitForAnimation(this GameObject go, string name)
	{
		return null;
	}

	[Token(Token = "0x6001C56")]
	[Address(RVA = "0x18FE0BC", Offset = "0x18FE0BC", VA = "0x18FE0BC")]
	public static WaitForAnimation WaitForAnimation(this GameObject go, string name, float time)
	{
		return null;
	}

	[Token(Token = "0x6001C57")]
	[Address(RVA = "0x18FE15C", Offset = "0x18FE15C", VA = "0x18FE15C")]
	public static WaitForAnimation WaitForAnimationWeight(this GameObject go, string name)
	{
		return null;
	}

	[Token(Token = "0x6001C58")]
	[Address(RVA = "0x18FE178", Offset = "0x18FE178", VA = "0x18FE178")]
	public static WaitForAnimation WaitForAnimationWeight(this GameObject go, string name, float weight)
	{
		return null;
	}
}
[Token(Token = "0x20003E7")]
public interface IYieldInstruction
{
	[Token(Token = "0x170001A7")]
	YieldInstruction Instruction
	{
		[Token(Token = "0x6001C59")]
		get;
	}
}
[Token(Token = "0x20003E8")]
public class RadicalWaitForSeconds : IYieldInstruction
{
	[Token(Token = "0x40013DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private float _time;

	[Token(Token = "0x40013DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private float _seconds;

	[Token(Token = "0x170001A8")]
	public float TimeRemaining
	{
		[Token(Token = "0x6001C5C")]
		[Address(RVA = "0x1B3A718", Offset = "0x1B3A718", VA = "0x1B3A718")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0x1B3A7E4", Offset = "0x1B3A7E4", VA = "0x1B3A7E4")]
		set
		{
		}
	}

	[Token(Token = "0x170001A9")]
	public YieldInstruction Instruction
	{
		[Token(Token = "0x6001C5E")]
		[Address(RVA = "0x1B3A80C", Offset = "0x1B3A80C", VA = "0x1B3A80C", Slot = "4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001C5A")]
	[Address(RVA = "0x1B3A6E0", Offset = "0x1B3A6E0", VA = "0x1B3A6E0")]
	public RadicalWaitForSeconds()
	{
	}

	[Token(Token = "0x6001C5B")]
	[Address(RVA = "0x1B3A6E8", Offset = "0x1B3A6E8", VA = "0x1B3A6E8")]
	public RadicalWaitForSeconds(float seconds)
	{
	}
}
[Token(Token = "0x20003E9")]
public interface INotifyStartStop
{
	[Token(Token = "0x6001C5F")]
	void Stop();

	[Token(Token = "0x6001C60")]
	void Start();
}
[Token(Token = "0x20003EA")]
public class RadicalRoutine : IDeserialized
{
	[Token(Token = "0x2000548")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA14FC", Offset = "0xEA14FC")]
	private sealed class <Execute>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal Stack<IEnumerator> <stack>__0;

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal IEnumerator extendedCoRoutine;

		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object <v>__1;

		[Token(Token = "0x4001AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal CoroutineReturn <cr>__1;

		[Token(Token = "0x4001AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal RadicalRoutine <rr>__2;

		[Token(Token = "0x4001AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal Action complete;

		[Token(Token = "0x4001AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal RadicalRoutine $this;

		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal object $current;

		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal bool $disposing;

		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal int $PC;

		[Token(Token = "0x170002CC")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60024BA")]
			[Address(RVA = "0x1B39AA4", Offset = "0x1B39AA4", VA = "0x1B39AA4", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024BB")]
			[Address(RVA = "0x1B39AAC", Offset = "0x1B39AAC", VA = "0x1B39AAC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024B8")]
		[Address(RVA = "0x1B392FC", Offset = "0x1B392FC", VA = "0x1B392FC")]
		[DebuggerHidden]
		public <Execute>c__Iterator0()
		{
		}

		[Token(Token = "0x60024B9")]
		[Address(RVA = "0x1B39310", Offset = "0x1B39310", VA = "0x1B39310", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024BC")]
		[Address(RVA = "0x1B39AB4", Offset = "0x1B39AB4", VA = "0x1B39AB4", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024BD")]
		[Address(RVA = "0x1B39AC8", Offset = "0x1B39AC8", VA = "0x1B39AC8", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x40013DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public bool cancel;

	[Token(Token = "0x40013DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private IEnumerator extended;

	[Token(Token = "0x40013DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public IEnumerator enumerator;

	[Token(Token = "0x40013DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public object Notify;

	[Token(Token = "0x40013E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Method;

	[Token(Token = "0x40013E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool finished;

	[Token(Token = "0x40013E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public object Target;

	[Token(Token = "0x40013E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool isTracking;

	[Token(Token = "0x40013E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MonoBehaviour _trackedObject;

	[Token(Token = "0x40013E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA14AC", Offset = "0xEA14AC")]
	private static Action <>f__am$cache0;

	[Token(Token = "0x40013E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA14BC", Offset = "0xEA14BC")]
	private static Action <>f__am$cache1;

	[Token(Token = "0x170001AA")]
	public MonoBehaviour trackedObject
	{
		[Token(Token = "0x6001C62")]
		[Address(RVA = "0x1B38348", Offset = "0x1B38348", VA = "0x1B38348")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001C63")]
		[Address(RVA = "0x1B38350", Offset = "0x1B38350", VA = "0x1B38350")]
		set
		{
		}
	}

	[Token(Token = "0x14000082")]
	public event Action Cancelled
	{
		[Token(Token = "0x6001C64")]
		[Address(RVA = "0x1B383E8", Offset = "0x1B383E8", VA = "0x1B383E8")]
		add
		{
		}
		[Token(Token = "0x6001C65")]
		[Address(RVA = "0x1B384DC", Offset = "0x1B384DC", VA = "0x1B384DC")]
		remove
		{
		}
	}

	[Token(Token = "0x14000083")]
	public event Action Finished
	{
		[Token(Token = "0x6001C66")]
		[Address(RVA = "0x1B385D0", Offset = "0x1B385D0", VA = "0x1B385D0")]
		add
		{
		}
		[Token(Token = "0x6001C67")]
		[Address(RVA = "0x1B386C4", Offset = "0x1B386C4", VA = "0x1B386C4")]
		remove
		{
		}
	}

	[Token(Token = "0x6001C61")]
	[Address(RVA = "0x1B381E4", Offset = "0x1B381E4", VA = "0x1B381E4")]
	public RadicalRoutine()
	{
	}

	[Token(Token = "0x6001C68")]
	[Address(RVA = "0x1B387B8", Offset = "0x1B387B8", VA = "0x1B387B8")]
	public void Cancel()
	{
	}

	[Token(Token = "0x6001C69")]
	[Address(RVA = "0x1B388E0", Offset = "0x1B388E0", VA = "0x1B388E0")]
	public static RadicalRoutine Run(IEnumerator extendedCoRoutine)
	{
		return null;
	}

	[Token(Token = "0x6001C6A")]
	[Address(RVA = "0x1B38BAC", Offset = "0x1B38BAC", VA = "0x1B38BAC")]
	public static RadicalRoutine Run(IEnumerator extendedCoRoutine, string methodName)
	{
		return null;
	}

	[Token(Token = "0x6001C6B")]
	[Address(RVA = "0x1B38984", Offset = "0x1B38984", VA = "0x1B38984")]
	public static RadicalRoutine Run(IEnumerator extendedCoRoutine, string methodName, object target)
	{
		return null;
	}

	[Token(Token = "0x6001C6C")]
	[Address(RVA = "0x1B38E88", Offset = "0x1B38E88", VA = "0x1B38E88")]
	public static RadicalRoutine Create(IEnumerator extendedCoRoutine)
	{
		return null;
	}

	[Token(Token = "0x6001C6D")]
	[Address(RVA = "0x1B3903C", Offset = "0x1B3903C", VA = "0x1B3903C")]
	public void Run()
	{
	}

	[Token(Token = "0x6001C6E")]
	[Address(RVA = "0x1B39248", Offset = "0x1B39248", VA = "0x1B39248")]
	public void Run(string methodName)
	{
	}

	[Token(Token = "0x6001C6F")]
	[Address(RVA = "0x1B390D8", Offset = "0x1B390D8", VA = "0x1B390D8")]
	public void Run(string methodName, object target)
	{
	}

	[Token(Token = "0x6001C70")]
	[Address(RVA = "0x1B38BC8", Offset = "0x1B38BC8", VA = "0x1B38BC8")]
	private IEnumerator Execute(IEnumerator extendedCoRoutine)
	{
		return null;
	}

	[Token(Token = "0x6001C71")]
	[Address(RVA = "0x1B39250", Offset = "0x1B39250", VA = "0x1B39250")]
	[DebuggerHidden]
	private IEnumerator Execute(IEnumerator extendedCoRoutine, Action complete)
	{
		return null;
	}

	[Token(Token = "0x6001C72")]
	[Address(RVA = "0x1B39304", Offset = "0x1B39304", VA = "0x1B39304", Slot = "4")]
	public void Deserialized()
	{
	}

	[Token(Token = "0x6001C73")]
	[Address(RVA = "0x1B39308", Offset = "0x1B39308", VA = "0x1B39308")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA14DC", Offset = "0xEA14DC")]
	private static void <Cancelled>m__0()
	{
	}

	[Token(Token = "0x6001C74")]
	[Address(RVA = "0x1B3930C", Offset = "0x1B3930C", VA = "0x1B3930C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA14EC", Offset = "0xEA14EC")]
	private static void <Finished>m__1()
	{
	}
}
[Token(Token = "0x20003EB")]
public static class RadicalRoutineExtensions
{
	[Token(Token = "0x20003EC")]
	public class RadicalRoutineBehaviour : MonoBehaviour
	{
		[Token(Token = "0x6001C78")]
		[Address(RVA = "0x1B39BD8", Offset = "0x1B39BD8", VA = "0x1B39BD8")]
		public RadicalRoutineBehaviour()
		{
		}
	}

	[Token(Token = "0x6001C75")]
	[Address(RVA = "0x1B39B4C", Offset = "0x1B39B4C", VA = "0x1B39B4C")]
	public static RadicalRoutine StartExtendedCoroutine(this MonoBehaviour behaviour, IEnumerator coRoutine)
	{
		return null;
	}

	[Token(Token = "0x6001C76")]
	[Address(RVA = "0x1B2D5F0", Offset = "0x1B2D5F0", VA = "0x1B2D5F0")]
	public static RadicalRoutine StartExtendedCoroutine(this GameObject go, IEnumerator coRoutine)
	{
		return null;
	}

	[Token(Token = "0x6001C77")]
	[Address(RVA = "0x1B39BA0", Offset = "0x1B39BA0", VA = "0x1B39BA0")]
	public static RadicalRoutine StartExtendedCoroutine(this Component co, IEnumerator coRoutine)
	{
		return null;
	}
}
[Token(Token = "0x20003ED")]
[Deferred]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA159C", Offset = "0xEA159C")]
public class RadicalRoutineHelper : MonoBehaviour, IDeserialized
{
	[Token(Token = "0x40013E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static RadicalRoutineHelper _current;

	[Token(Token = "0x40013EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<RadicalRoutine> Running;

	[Token(Token = "0x170001AB")]
	public static RadicalRoutineHelper Current
	{
		[Token(Token = "0x6001C7B")]
		[Address(RVA = "0x1B38BD0", Offset = "0x1B38BD0", VA = "0x1B38BD0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001C79")]
	[Address(RVA = "0x1B39BE0", Offset = "0x1B39BE0", VA = "0x1B39BE0")]
	static RadicalRoutineHelper()
	{
	}

	[Token(Token = "0x6001C7A")]
	[Address(RVA = "0x1B39C9C", Offset = "0x1B39C9C", VA = "0x1B39C9C")]
	public RadicalRoutineHelper()
	{
	}

	[Token(Token = "0x6001C7C")]
	[Address(RVA = "0x1B39D28", Offset = "0x1B39D28", VA = "0x1B39D28")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001C7D")]
	[Address(RVA = "0x1B39E74", Offset = "0x1B39E74", VA = "0x1B39E74")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001C7E")]
	[Address(RVA = "0x1B38D88", Offset = "0x1B38D88", VA = "0x1B38D88")]
	public void Run(RadicalRoutine routine)
	{
	}

	[Token(Token = "0x6001C7F")]
	[Address(RVA = "0x1B39F94", Offset = "0x1B39F94", VA = "0x1B39F94")]
	public void Finished(RadicalRoutine routine)
	{
	}

	[Token(Token = "0x6001C80")]
	[Address(RVA = "0x1B3A184", Offset = "0x1B3A184", VA = "0x1B3A184", Slot = "4")]
	private void IDeserialized.Deserialized()
	{
	}

	[Token(Token = "0x6001C81")]
	[Address(RVA = "0x1B3A37C", Offset = "0x1B3A37C", VA = "0x1B3A37C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA15E4", Offset = "0xEA15E4")]
	private void <Deserialized>m__0()
	{
	}
}
namespace RadicalLibrary
{
	[Token(Token = "0x20003EE")]
	public enum SmoothingMode
	{
		[Token(Token = "0x40013EC")]
		slerp = 3,
		[Token(Token = "0x40013ED")]
		damp = 1,
		[Token(Token = "0x40013EE")]
		lerp = 2,
		[Token(Token = "0x40013EF")]
		smooth = 0
	}
	[Token(Token = "0x20003EF")]
	[SerializeAll]
	[Preserve]
	public class SmoothVector3
	{
		[Token(Token = "0x40013F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EasingType Ease;

		[Token(Token = "0x40013F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public SmoothingMode Mode;

		[Token(Token = "0x40013F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Preserve]
		private Vector3 _target;

		[Token(Token = "0x40013F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 _start;

		[Token(Token = "0x40013F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 _velocity;

		[Token(Token = "0x40013F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _startTime;

		[Token(Token = "0x40013F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 _current;

		[Token(Token = "0x40013F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float Duration;

		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool Lock;

		[Token(Token = "0x170001AC")]
		public bool IsComplete
		{
			[Token(Token = "0x6001C86")]
			[Address(RVA = "0x1B35C58", Offset = "0x1B35C58", VA = "0x1B35C58")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001AD")]
		public Vector3 Target
		{
			[Token(Token = "0x6001C87")]
			[Address(RVA = "0x1B35CA4", Offset = "0x1B35CA4", VA = "0x1B35CA4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001AE")]
		public Vector3 Current
		{
			[Token(Token = "0x6001C88")]
			[Address(RVA = "0x1B35CB4", Offset = "0x1B35CB4", VA = "0x1B35CB4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001C89")]
			[Address(RVA = "0x1B360DC", Offset = "0x1B360DC", VA = "0x1B360DC")]
			set
			{
			}
		}

		[Token(Token = "0x170001AF")]
		public float x
		{
			[Token(Token = "0x6001C8A")]
			[Address(RVA = "0x1B35CC4", Offset = "0x1B35CC4", VA = "0x1B35CC4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C8B")]
			[Address(RVA = "0x1B360F0", Offset = "0x1B360F0", VA = "0x1B360F0")]
			set
			{
			}
		}

		[Token(Token = "0x170001B0")]
		public float y
		{
			[Token(Token = "0x6001C8C")]
			[Address(RVA = "0x1B35CCC", Offset = "0x1B35CCC", VA = "0x1B35CCC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C8D")]
			[Address(RVA = "0x1B36210", Offset = "0x1B36210", VA = "0x1B36210")]
			set
			{
			}
		}

		[Token(Token = "0x170001B1")]
		public float z
		{
			[Token(Token = "0x6001C8E")]
			[Address(RVA = "0x1B35CD4", Offset = "0x1B35CD4", VA = "0x1B35CD4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C8F")]
			[Address(RVA = "0x1B36260", Offset = "0x1B36260", VA = "0x1B36260")]
			set
			{
			}
		}

		[Token(Token = "0x170001B2")]
		public Vector3 Value
		{
			[Token(Token = "0x6001C90")]
			[Address(RVA = "0x1B35CDC", Offset = "0x1B35CDC", VA = "0x1B35CDC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001C91")]
			[Address(RVA = "0x1B3613C", Offset = "0x1B3613C", VA = "0x1B3613C")]
			set
			{
			}
		}

		[Token(Token = "0x6001C82")]
		[Address(RVA = "0x1B35758", Offset = "0x1B35758", VA = "0x1B35758")]
		public SmoothVector3()
		{
		}

		[Token(Token = "0x6001C83")]
		[Address(RVA = "0x1B3577C", Offset = "0x1B3577C", VA = "0x1B3577C")]
		public SmoothVector3(float x, float y, float z)
		{
		}

		[Token(Token = "0x6001C84")]
		[Address(RVA = "0x1B357C0", Offset = "0x1B357C0", VA = "0x1B357C0")]
		public SmoothVector3(Vector3 value)
		{
		}

		[Token(Token = "0x6001C85")]
		[Address(RVA = "0x1B35838", Offset = "0x1B35838", VA = "0x1B35838", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0x1B362B0", Offset = "0x1B362B0", VA = "0x1B362B0")]
		public static implicit operator Vector3(SmoothVector3 obj)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0x1B362DC", Offset = "0x1B362DC", VA = "0x1B362DC")]
		public static implicit operator SmoothVector3(Vector3 obj)
		{
			return null;
		}
	}
	[Token(Token = "0x20003F0")]
	[SerializeAll]
	[Preserve]
	public class SmoothFloat
	{
		[Token(Token = "0x40013F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SmoothingMode Mode;

		[Token(Token = "0x40013FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EasingType Ease;

		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Preserve]
		private float _target;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float _start;

		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _velocity;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _startTime;

		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Duration;

		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float _current;

		[Token(Token = "0x170001B3")]
		[DoNotSerialize]
		public float Current
		{
			[Token(Token = "0x6001C97")]
			[Address(RVA = "0x1B34A08", Offset = "0x1B34A08", VA = "0x1B34A08")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C98")]
			[Address(RVA = "0x1B34938", Offset = "0x1B34938", VA = "0x1B34938")]
			set
			{
			}
		}

		[Token(Token = "0x170001B4")]
		public float Target
		{
			[Token(Token = "0x6001C99")]
			[Address(RVA = "0x1B34A10", Offset = "0x1B34A10", VA = "0x1B34A10")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001B5")]
		public float Value
		{
			[Token(Token = "0x6001C9A")]
			[Address(RVA = "0x1B34A18", Offset = "0x1B34A18", VA = "0x1B34A18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001C9B")]
			[Address(RVA = "0x1B34CFC", Offset = "0x1B34CFC", VA = "0x1B34CFC")]
			set
			{
			}
		}

		[Token(Token = "0x170001B6")]
		public bool IsComplete
		{
			[Token(Token = "0x6001C9E")]
			[Address(RVA = "0x1B34E30", Offset = "0x1B34E30", VA = "0x1B34E30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C94")]
		[Address(RVA = "0x1B348BC", Offset = "0x1B348BC", VA = "0x1B348BC")]
		public SmoothFloat()
		{
		}

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0x1B348DC", Offset = "0x1B348DC", VA = "0x1B348DC")]
		public SmoothFloat(float f)
		{
		}

		[Token(Token = "0x6001C96")]
		[Address(RVA = "0x1B34944", Offset = "0x1B34944", VA = "0x1B34944", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001C9C")]
		[Address(RVA = "0x1B34D54", Offset = "0x1B34D54", VA = "0x1B34D54")]
		public static implicit operator float(SmoothFloat obj)
		{
			return default(float);
		}

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0x1B34D78", Offset = "0x1B34D78", VA = "0x1B34D78")]
		public static implicit operator SmoothFloat(float f)
		{
			return null;
		}
	}
	[Token(Token = "0x20003F1")]
	[SerializeAll]
	[Preserve]
	public class SmoothQuaternion
	{
		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SmoothingMode Mode;

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EasingType Ease;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Quaternion _target;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Quaternion _start;

		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _velocity;

		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _startTime;

		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float Duration;

		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Quaternion Current;

		[Token(Token = "0x170001B7")]
		public Quaternion Value
		{
			[Token(Token = "0x6001CA1")]
			[Address(RVA = "0x1B34F28", Offset = "0x1B34F28", VA = "0x1B34F28")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6001CA2")]
			[Address(RVA = "0x1B353C4", Offset = "0x1B353C4", VA = "0x1B353C4")]
			set
			{
			}
		}

		[Token(Token = "0x170001B8")]
		public float x
		{
			[Token(Token = "0x6001CA5")]
			[Address(RVA = "0x1B35560", Offset = "0x1B35560", VA = "0x1B35560")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CA6")]
			[Address(RVA = "0x1B35568", Offset = "0x1B35568", VA = "0x1B35568")]
			set
			{
			}
		}

		[Token(Token = "0x170001B9")]
		public float y
		{
			[Token(Token = "0x6001CA7")]
			[Address(RVA = "0x1B355C8", Offset = "0x1B355C8", VA = "0x1B355C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CA8")]
			[Address(RVA = "0x1B355D0", Offset = "0x1B355D0", VA = "0x1B355D0")]
			set
			{
			}
		}

		[Token(Token = "0x170001BA")]
		public float z
		{
			[Token(Token = "0x6001CA9")]
			[Address(RVA = "0x1B35634", Offset = "0x1B35634", VA = "0x1B35634")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CAA")]
			[Address(RVA = "0x1B3563C", Offset = "0x1B3563C", VA = "0x1B3563C")]
			set
			{
			}
		}

		[Token(Token = "0x170001BB")]
		public float w
		{
			[Token(Token = "0x6001CAB")]
			[Address(RVA = "0x1B356A0", Offset = "0x1B356A0", VA = "0x1B356A0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001CAC")]
			[Address(RVA = "0x1B356A8", Offset = "0x1B356A8", VA = "0x1B356A8")]
			set
			{
			}
		}

		[Token(Token = "0x170001BC")]
		public bool IsComplete
		{
			[Token(Token = "0x6001CAD")]
			[Address(RVA = "0x1B3570C", Offset = "0x1B3570C", VA = "0x1B3570C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C9F")]
		[Address(RVA = "0x1B34E7C", Offset = "0x1B34E7C", VA = "0x1B34E7C")]
		public SmoothQuaternion()
		{
		}

		[Token(Token = "0x6001CA0")]
		[Address(RVA = "0x1B34EA0", Offset = "0x1B34EA0", VA = "0x1B34EA0")]
		public SmoothQuaternion(Quaternion q)
		{
		}

		[Token(Token = "0x6001CA3")]
		[Address(RVA = "0x1B354A4", Offset = "0x1B354A4", VA = "0x1B354A4")]
		public static implicit operator Quaternion(SmoothQuaternion obj)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001CA4")]
		[Address(RVA = "0x1B354D0", Offset = "0x1B354D0", VA = "0x1B354D0")]
		public static implicit operator SmoothQuaternion(Quaternion q)
		{
			return null;
		}
	}
}
[Token(Token = "0x20003F2")]
public class SomeBaseClass : MonoBehaviour
{
	[Token(Token = "0x6001CAE")]
	[Address(RVA = "0x6A0220", Offset = "0x6A0220", VA = "0x6A0220")]
	public SomeBaseClass()
	{
	}

	[Token(Token = "0x6001CAF")]
	[Address(RVA = "0x6A0228", Offset = "0x6A0228", VA = "0x6A0228")]
	[RPC]
	protected void PrintThis(string text)
	{
	}
}
[Token(Token = "0x20003F3")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA16C4", Offset = "0xEA16C4")]
public class Inherited : SomeBaseClass
{
	[Token(Token = "0x6001CB0")]
	[Address(RVA = "0x3C0A58", Offset = "0x3C0A58", VA = "0x3C0A58")]
	public Inherited()
	{
	}
}
[Token(Token = "0x20003F4")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA16F8", Offset = "0xEA16F8")]
public class SimpleCaller : MonoBehaviour
{
	[Token(Token = "0x4001409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public NetworkView otherView;

	[Token(Token = "0x6001CB1")]
	[Address(RVA = "0x689564", Offset = "0x689564", VA = "0x689564")]
	public SimpleCaller()
	{
	}

	[Token(Token = "0x6001CB2")]
	[Address(RVA = "0x68956C", Offset = "0x68956C", VA = "0x68956C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001CB3")]
	[Address(RVA = "0x68959C", Offset = "0x68959C", VA = "0x68959C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001CB4")]
	[Address(RVA = "0x6895A0", Offset = "0x6895A0", VA = "0x6895A0")]
	private void OnGUI()
	{
	}
}
[Token(Token = "0x20003F5")]
public static class TransformExtensions
{
	[Token(Token = "0x6001CB5")]
	public static T FirstAncestorOfType<T>(this GameObject gameObject) where T : Component
	{
		return null;
	}

	[Token(Token = "0x6001CB6")]
	public static T LastAncestorOfType<T>(this GameObject gameObject) where T : class
	{
		return null;
	}

	[Token(Token = "0x6001CB7")]
	public static T[] GetAllComponentsInChildren<T>(this Transform parent) where T : Component
	{
		return null;
	}

	[Token(Token = "0x6001CB8")]
	public static T[] GetAllComponentsInChildren<T>(this Component comp) where T : Component
	{
		return null;
	}

	[Token(Token = "0x6001CB9")]
	public static T[] GetAllComponentsInChildren<T>(this GameObject go) where T : Component
	{
		return null;
	}
}
[Token(Token = "0x20003F6")]
public static class XmlSupport
{
	[Token(Token = "0x6001CBA")]
	public static T DeserializeXml<T>(this string xml) where T : class
	{
		return null;
	}

	[Token(Token = "0x6001CBB")]
	[Address(RVA = "0x21EA46C", Offset = "0x21EA46C", VA = "0x21EA46C")]
	public static object DeserializeXml(this string xml, Type tp)
	{
		return null;
	}

	[Token(Token = "0x6001CBC")]
	[Address(RVA = "0x21EA654", Offset = "0x21EA654", VA = "0x21EA654")]
	public static string SerializeXml(this object item)
	{
		return null;
	}
}
[Token(Token = "0x20003F7")]
public class ResultLogger : UnityEngine.Object
{
	[Token(Token = "0x6001CBD")]
	[Address(RVA = "0x1B3C3F0", Offset = "0x1B3C3F0", VA = "0x1B3C3F0")]
	public ResultLogger()
	{
	}

	[Token(Token = "0x6001CBE")]
	[Address(RVA = "0x1B3C474", Offset = "0x1B3C474", VA = "0x1B3C474")]
	public static void logObject(object result)
	{
	}

	[Token(Token = "0x6001CBF")]
	[Address(RVA = "0x1B3C70C", Offset = "0x1B3C70C", VA = "0x1B3C70C")]
	public static void logArraylist(ArrayList result)
	{
	}

	[Token(Token = "0x6001CC0")]
	[Address(RVA = "0x1B3CAC0", Offset = "0x1B3CAC0", VA = "0x1B3CAC0")]
	public static void logHashtable(Hashtable result)
	{
	}

	[Token(Token = "0x6001CC1")]
	[Address(RVA = "0x1B3CB98", Offset = "0x1B3CB98", VA = "0x1B3CB98")]
	public static void addHashtableToString(StringBuilder builder, Hashtable item)
	{
	}

	[Token(Token = "0x6001CC2")]
	[Address(RVA = "0x1B3D184", Offset = "0x1B3D184", VA = "0x1B3D184")]
	public static void addArraylistToString(StringBuilder builder, ArrayList result)
	{
	}
}
namespace Serialization
{
	[Token(Token = "0x20003F8")]
	public class Entry
	{
		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Name;

		[Token(Token = "0x400140B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private PropertyInfo _propertyInfo;

		[Token(Token = "0x400140C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private FieldInfo _fieldInfo;

		[Token(Token = "0x400140D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Type StoredType;

		[Token(Token = "0x400140E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public object Value;

		[Token(Token = "0x400140F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool IsStatic;

		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool MustHaveName;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Type OwningType;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public GetSet Setter;

		[Token(Token = "0x170001BD")]
		public PropertyInfo PropertyInfo
		{
			[Token(Token = "0x6001CC4")]
			[Address(RVA = "0x626EA4", Offset = "0x626EA4", VA = "0x626EA4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001CC5")]
			[Address(RVA = "0x626EAC", Offset = "0x626EAC", VA = "0x626EAC")]
			set
			{
			}
		}

		[Token(Token = "0x170001BE")]
		public FieldInfo FieldInfo
		{
			[Token(Token = "0x6001CC6")]
			[Address(RVA = "0x626F0C", Offset = "0x626F0C", VA = "0x626F0C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001CC7")]
			[Address(RVA = "0x626F14", Offset = "0x626F14", VA = "0x626F14")]
			set
			{
			}
		}

		[Token(Token = "0x6001CC3")]
		[Address(RVA = "0x626E9C", Offset = "0x626E9C", VA = "0x626E9C")]
		public Entry()
		{
		}
	}
	[Token(Token = "0x20003F9")]
	public abstract class GetSet
	{
		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int Priority;

		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PropertyInfo Info;

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4001416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public FieldInfo FieldInfo;

		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public object Vanilla;

		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool CollectionType;

		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Func<object, object> Get;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Action<object, object> Set;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool IsStatic;

		[Token(Token = "0x170001BF")]
		public MemberInfo MemberInfo
		{
			[Token(Token = "0x6001CC9")]
			[Address(RVA = "0x626F84", Offset = "0x626F84", VA = "0x626F84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0x626F74", Offset = "0x626F74", VA = "0x626F74")]
		protected GetSet()
		{
		}
	}
	[Token(Token = "0x20003FA")]
	public class GetSetGeneric : GetSet
	{
		[Token(Token = "0x2000549")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA17CC", Offset = "0xEA17CC")]
		private sealed class <GetSetGeneric>c__AnonStorey1
		{
			[Token(Token = "0x4001AFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal PropertyInfo info;

			[Token(Token = "0x60024BE")]
			[Address(RVA = "0x6274D4", Offset = "0x6274D4", VA = "0x6274D4")]
			public <GetSetGeneric>c__AnonStorey1()
			{
			}
		}

		[Token(Token = "0x200054A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA17DC", Offset = "0xEA17DC")]
		private sealed class <GetSetGeneric>c__AnonStorey0
		{
			[Token(Token = "0x4001AFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Specialist specialist;

			[Token(Token = "0x4001AFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal <GetSetGeneric>c__AnonStorey1 <>f__ref$1;

			[Token(Token = "0x60024BF")]
			[Address(RVA = "0x6274DC", Offset = "0x6274DC", VA = "0x6274DC")]
			public <GetSetGeneric>c__AnonStorey0()
			{
			}

			[Token(Token = "0x60024C0")]
			[Address(RVA = "0x627CB0", Offset = "0x627CB0", VA = "0x627CB0")]
			internal object <>m__0(object o)
			{
				return null;
			}

			[Token(Token = "0x60024C1")]
			[Address(RVA = "0x627E4C", Offset = "0x627E4C", VA = "0x627E4C")]
			internal void <>m__1(object o, object v)
			{
			}
		}

		[Token(Token = "0x200054B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA17EC", Offset = "0xEA17EC")]
		private sealed class <GetSetGeneric>c__AnonStorey2
		{
			[Token(Token = "0x4001AFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal MethodInfo getMethod;

			[Token(Token = "0x4001AFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal MethodInfo setMethod;

			[Token(Token = "0x4001AFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal <GetSetGeneric>c__AnonStorey1 <>f__ref$1;

			[Token(Token = "0x60024C2")]
			[Address(RVA = "0x6274E4", Offset = "0x6274E4", VA = "0x6274E4")]
			public <GetSetGeneric>c__AnonStorey2()
			{
			}

			[Token(Token = "0x60024C3")]
			[Address(RVA = "0x627FFC", Offset = "0x627FFC", VA = "0x627FFC")]
			internal object <>m__0(object o)
			{
				return null;
			}

			[Token(Token = "0x60024C4")]
			[Address(RVA = "0x628048", Offset = "0x628048", VA = "0x628048")]
			internal void <>m__1(object o, object v)
			{
			}

			[Token(Token = "0x60024C5")]
			[Address(RVA = "0x6280A8", Offset = "0x6280A8", VA = "0x6280A8")]
			internal object <>m__2(object o)
			{
				return null;
			}

			[Token(Token = "0x60024C6")]
			[Address(RVA = "0x62814C", Offset = "0x62814C", VA = "0x62814C")]
			internal void <>m__3(object o, object v)
			{
			}
		}

		[Token(Token = "0x200054C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA17FC", Offset = "0xEA17FC")]
		private sealed class <GetSetGeneric>c__AnonStorey4
		{
			[Token(Token = "0x4001B00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal FieldInfo info;

			[Token(Token = "0x60024C7")]
			[Address(RVA = "0x6278F8", Offset = "0x6278F8", VA = "0x6278F8")]
			public <GetSetGeneric>c__AnonStorey4()
			{
			}
		}

		[Token(Token = "0x200054D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA180C", Offset = "0xEA180C")]
		private sealed class <GetSetGeneric>c__AnonStorey3
		{
			[Token(Token = "0x4001B01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Specialist specialist;

			[Token(Token = "0x4001B02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal <GetSetGeneric>c__AnonStorey4 <>f__ref$4;

			[Token(Token = "0x60024C8")]
			[Address(RVA = "0x627900", Offset = "0x627900", VA = "0x627900")]
			public <GetSetGeneric>c__AnonStorey3()
			{
			}

			[Token(Token = "0x60024C9")]
			[Address(RVA = "0x628420", Offset = "0x628420", VA = "0x628420")]
			internal object <>m__0(object o)
			{
				return null;
			}

			[Token(Token = "0x60024CA")]
			[Address(RVA = "0x6285B8", Offset = "0x6285B8", VA = "0x6285B8")]
			internal void <>m__1(object o, object v)
			{
			}
		}

		[Token(Token = "0x200054E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA181C", Offset = "0xEA181C")]
		private sealed class <GetSetGeneric>c__AnonStorey5
		{
			[Token(Token = "0x4001B03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal MethodInfo getMethod;

			[Token(Token = "0x4001B04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal MethodInfo setMethod;

			[Token(Token = "0x4001B05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal GetSetGeneric $this;

			[Token(Token = "0x60024CB")]
			[Address(RVA = "0x627CA8", Offset = "0x627CA8", VA = "0x627CA8")]
			public <GetSetGeneric>c__AnonStorey5()
			{
			}

			[Token(Token = "0x60024CC")]
			[Address(RVA = "0x628758", Offset = "0x628758", VA = "0x628758")]
			internal object <>m__0(object o)
			{
				return null;
			}

			[Token(Token = "0x60024CD")]
			[Address(RVA = "0x6287A8", Offset = "0x6287A8", VA = "0x6287A8")]
			internal void <>m__1(object o, object v)
			{
			}
		}

		[Token(Token = "0x6001CCA")]
		[Address(RVA = "0x626F98", Offset = "0x626F98", VA = "0x626F98")]
		public GetSetGeneric(PropertyInfo info)
		{
		}

		[Token(Token = "0x6001CCB")]
		[Address(RVA = "0x6274EC", Offset = "0x6274EC", VA = "0x6274EC")]
		public GetSetGeneric(FieldInfo info)
		{
		}

		[Token(Token = "0x6001CCC")]
		[Address(RVA = "0x627908", Offset = "0x627908", VA = "0x627908")]
		public GetSetGeneric(Type t, string name)
		{
		}
	}
	[Token(Token = "0x20003FB")]
	public class GetWritableAttributes
	{
		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<Type, GetSet[][][]> PropertyAccess;

		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly Dictionary<Type, object> Vanilla;

		[Token(Token = "0x6001CCD")]
		[Address(RVA = "0x6288B8", Offset = "0x6288B8", VA = "0x6288B8")]
		public GetWritableAttributes()
		{
		}

		[Token(Token = "0x6001CCE")]
		[Address(RVA = "0x6288C0", Offset = "0x6288C0", VA = "0x6288C0")]
		public static Entry[] GetProperties(object obj, bool seen)
		{
			return null;
		}

		[Token(Token = "0x6001CCF")]
		[Address(RVA = "0x629B54", Offset = "0x629B54", VA = "0x629B54")]
		public static Entry[] GetFields(object obj, bool seen)
		{
			return null;
		}

		[Token(Token = "0x6001CD0")]
		[Address(RVA = "0x629E40", Offset = "0x629E40", VA = "0x629E40")]
		private static object GetVanilla(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001CD1")]
		[Address(RVA = "0x628BAC", Offset = "0x628BAC", VA = "0x628BAC")]
		private static GetSet[][] GetAccessors(Type type)
		{
			return null;
		}
	}
	[Token(Token = "0x20003FC")]
	public interface IStorage
	{
		[Token(Token = "0x170001C0")]
		bool SupportsOnDemand
		{
			[Token(Token = "0x6001D23")]
			get;
		}

		[Token(Token = "0x6001CD3")]
		void StartSerializing();

		[Token(Token = "0x6001CD4")]
		void FinishedSerializing();

		[Token(Token = "0x6001CD5")]
		void FinishedDeserializing();

		[Token(Token = "0x6001CD6")]
		bool StartSerializing(Entry entry, int id);

		[Token(Token = "0x6001CD7")]
		void FinishSerializing(Entry entry);

		[Token(Token = "0x6001CD8")]
		object StartDeserializing(Entry entry);

		[Token(Token = "0x6001CD9")]
		void DeserializeGetName(Entry entry);

		[Token(Token = "0x6001CDA")]
		void FinishDeserializing(Entry entry);

		[Token(Token = "0x6001CDB")]
		Entry[] ShouldWriteFields(Entry[] fields);

		[Token(Token = "0x6001CDC")]
		Entry[] ShouldWriteProperties(Entry[] properties);

		[Token(Token = "0x6001CDD")]
		void StartDeserializing();

		[Token(Token = "0x6001CDE")]
		bool HasMore();

		[Token(Token = "0x6001CDF")]
		Entry BeginReadProperty(Entry entry);

		[Token(Token = "0x6001CE0")]
		void EndReadProperty();

		[Token(Token = "0x6001CE1")]
		Entry BeginReadField(Entry entry);

		[Token(Token = "0x6001CE2")]
		void EndReadField();

		[Token(Token = "0x6001CE3")]
		int BeginReadProperties();

		[Token(Token = "0x6001CE4")]
		int BeginReadFields();

		[Token(Token = "0x6001CE5")]
		void EndReadProperties();

		[Token(Token = "0x6001CE6")]
		void EndReadFields();

		[Token(Token = "0x6001CE7")]
		T ReadSimpleValue<T>();

		[Token(Token = "0x6001CE8")]
		object ReadSimpleValue(Type type);

		[Token(Token = "0x6001CE9")]
		bool IsMultiDimensionalArray(out int length);

		[Token(Token = "0x6001CEA")]
		void BeginReadMultiDimensionalArray(out int dimension, out int count);

		[Token(Token = "0x6001CEB")]
		void EndReadMultiDimensionalArray();

		[Token(Token = "0x6001CEC")]
		int ReadArrayDimension(int index);

		[Token(Token = "0x6001CED")]
		Array ReadSimpleArray(Type elementType, int count);

		[Token(Token = "0x6001CEE")]
		int BeginReadObject(out bool isReference);

		[Token(Token = "0x6001CEF")]
		void EndReadObject();

		[Token(Token = "0x6001CF0")]
		int BeginReadList(Type valueType);

		[Token(Token = "0x6001CF1")]
		object BeginReadListItem(int index, Entry entry);

		[Token(Token = "0x6001CF2")]
		void EndReadListItem();

		[Token(Token = "0x6001CF3")]
		void EndReadList();

		[Token(Token = "0x6001CF4")]
		int BeginReadDictionary(Type keyType, Type valueType);

		[Token(Token = "0x6001CF5")]
		void BeginReadDictionaryKeys();

		[Token(Token = "0x6001CF6")]
		object BeginReadDictionaryKeyItem(int index, Entry entry);

		[Token(Token = "0x6001CF7")]
		void EndReadDictionaryKeyItem();

		[Token(Token = "0x6001CF8")]
		void EndReadDictionaryKeys();

		[Token(Token = "0x6001CF9")]
		void BeginReadDictionaryValues();

		[Token(Token = "0x6001CFA")]
		object BeginReadDictionaryValueItem(int index, Entry entry);

		[Token(Token = "0x6001CFB")]
		void EndReadDictionaryValueItem();

		[Token(Token = "0x6001CFC")]
		void EndReadDictionaryValues();

		[Token(Token = "0x6001CFD")]
		void EndReadDictionary();

		[Token(Token = "0x6001CFE")]
		int BeginReadObjectArray(Type valueType);

		[Token(Token = "0x6001CFF")]
		object BeginReadObjectArrayItem(int index, Entry entry);

		[Token(Token = "0x6001D00")]
		void EndReadObjectArrayItem();

		[Token(Token = "0x6001D01")]
		void EndReadObjectArray();

		[Token(Token = "0x6001D02")]
		void BeginWriteObject(int id, Type objectType, bool wasSeen);

		[Token(Token = "0x6001D03")]
		void EndWriteObject();

		[Token(Token = "0x6001D04")]
		void BeginWriteList(int count, Type listType);

		[Token(Token = "0x6001D05")]
		bool BeginWriteListItem(int index, object value);

		[Token(Token = "0x6001D06")]
		void EndWriteListItem();

		[Token(Token = "0x6001D07")]
		void EndWriteList();

		[Token(Token = "0x6001D08")]
		void BeginWriteObjectArray(int count, Type arrayType);

		[Token(Token = "0x6001D09")]
		bool BeginWriteObjectArrayItem(int index, object value);

		[Token(Token = "0x6001D0A")]
		void EndWriteObjectArrayItem();

		[Token(Token = "0x6001D0B")]
		void EndWriteObjectArray();

		[Token(Token = "0x6001D0C")]
		void BeginMultiDimensionArray(Type arrayType, int dimensions, int count);

		[Token(Token = "0x6001D0D")]
		void EndMultiDimensionArray();

		[Token(Token = "0x6001D0E")]
		void WriteArrayDimension(int index, int count);

		[Token(Token = "0x6001D0F")]
		void WriteSimpleArray(int count, Array array);

		[Token(Token = "0x6001D10")]
		void WriteSimpleValue(object value);

		[Token(Token = "0x6001D11")]
		void BeginWriteDictionary(int count, Type dictionaryType);

		[Token(Token = "0x6001D12")]
		void BeginWriteDictionaryKeys();

		[Token(Token = "0x6001D13")]
		bool BeginWriteDictionaryKey(int id, object value);

		[Token(Token = "0x6001D14")]
		void EndWriteDictionaryKey();

		[Token(Token = "0x6001D15")]
		void EndWriteDictionaryKeys();

		[Token(Token = "0x6001D16")]
		void BeginWriteDictionaryValues();

		[Token(Token = "0x6001D17")]
		bool BeginWriteDictionaryValue(int id, object value);

		[Token(Token = "0x6001D18")]
		void EndWriteDictionaryValue();

		[Token(Token = "0x6001D19")]
		void EndWriteDictionaryValues();

		[Token(Token = "0x6001D1A")]
		void EndWriteDictionary();

		[Token(Token = "0x6001D1B")]
		void BeginWriteProperties(int count);

		[Token(Token = "0x6001D1C")]
		void EndWriteProperties();

		[Token(Token = "0x6001D1D")]
		void BeginWriteProperty(string name, Type type);

		[Token(Token = "0x6001D1E")]
		void EndWriteProperty();

		[Token(Token = "0x6001D1F")]
		void BeginWriteFields(int count);

		[Token(Token = "0x6001D20")]
		void EndWriteFields();

		[Token(Token = "0x6001D21")]
		void BeginWriteField(string name, Type type);

		[Token(Token = "0x6001D22")]
		void EndWriteField();

		[Token(Token = "0x6001D24")]
		void BeginOnDemand(int id);

		[Token(Token = "0x6001D25")]
		void EndOnDemand();
	}
	[Token(Token = "0x20003FD")]
	public class JSONSerializer : IStorage
	{
		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string source;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly JsonReader _reader;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private StringBuilder _json;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static bool _isReference;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int _reference;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static string _currentType;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int _multiDimensional;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static int _arrayCount;

		[Token(Token = "0x170001C1")]
		public string Data
		{
			[Token(Token = "0x6001D28")]
			[Address(RVA = "0x62C1A8", Offset = "0x62C1A8", VA = "0x62C1A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C2")]
		public bool SupportsOnDemand
		{
			[Token(Token = "0x6001D73")]
			[Address(RVA = "0x62EDD0", Offset = "0x62EDD0", VA = "0x62EDD0", Slot = "84")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001D26")]
		[Address(RVA = "0x62C11C", Offset = "0x62C11C", VA = "0x62C11C")]
		public JSONSerializer()
		{
		}

		[Token(Token = "0x6001D27")]
		[Address(RVA = "0x62C124", Offset = "0x62C124", VA = "0x62C124")]
		public JSONSerializer(string json)
		{
		}

		[Token(Token = "0x6001D29")]
		[Address(RVA = "0x62C290", Offset = "0x62C290", VA = "0x62C290", Slot = "4")]
		public void StartSerializing()
		{
		}

		[Token(Token = "0x6001D2A")]
		[Address(RVA = "0x62C300", Offset = "0x62C300", VA = "0x62C300", Slot = "5")]
		public void FinishedSerializing()
		{
		}

		[Token(Token = "0x6001D2B")]
		[Address(RVA = "0x62C304", Offset = "0x62C304", VA = "0x62C304", Slot = "6")]
		public void FinishedDeserializing()
		{
		}

		[Token(Token = "0x6001D2C")]
		[Address(RVA = "0x62C308", Offset = "0x62C308", VA = "0x62C308", Slot = "7")]
		public bool StartSerializing(Entry entry, int id)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D2D")]
		[Address(RVA = "0x62C310", Offset = "0x62C310", VA = "0x62C310", Slot = "8")]
		public void FinishSerializing(Entry entry)
		{
		}

		[Token(Token = "0x6001D2E")]
		[Address(RVA = "0x62C314", Offset = "0x62C314", VA = "0x62C314", Slot = "9")]
		public object StartDeserializing(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001D2F")]
		[Address(RVA = "0x62C73C", Offset = "0x62C73C", VA = "0x62C73C", Slot = "10")]
		public void DeserializeGetName(Entry entry)
		{
		}

		[Token(Token = "0x6001D30")]
		[Address(RVA = "0x62C740", Offset = "0x62C740", VA = "0x62C740", Slot = "11")]
		public void FinishDeserializing(Entry entry)
		{
		}

		[Token(Token = "0x6001D31")]
		[Address(RVA = "0x62C744", Offset = "0x62C744", VA = "0x62C744", Slot = "12")]
		public Entry[] ShouldWriteFields(Entry[] fields)
		{
			return null;
		}

		[Token(Token = "0x6001D32")]
		[Address(RVA = "0x62C74C", Offset = "0x62C74C", VA = "0x62C74C", Slot = "13")]
		public Entry[] ShouldWriteProperties(Entry[] properties)
		{
			return null;
		}

		[Token(Token = "0x6001D33")]
		[Address(RVA = "0x62C754", Offset = "0x62C754", VA = "0x62C754", Slot = "14")]
		public void StartDeserializing()
		{
		}

		[Token(Token = "0x6001D34")]
		[Address(RVA = "0x62C758", Offset = "0x62C758", VA = "0x62C758", Slot = "16")]
		public Entry BeginReadProperty(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001D35")]
		[Address(RVA = "0x62C868", Offset = "0x62C868", VA = "0x62C868", Slot = "17")]
		public void EndReadProperty()
		{
		}

		[Token(Token = "0x6001D36")]
		[Address(RVA = "0x62C86C", Offset = "0x62C86C", VA = "0x62C86C", Slot = "18")]
		public Entry BeginReadField(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001D37")]
		[Address(RVA = "0x62C97C", Offset = "0x62C97C", VA = "0x62C97C", Slot = "19")]
		public void EndReadField()
		{
		}

		[Token(Token = "0x6001D38")]
		[Address(RVA = "0x62C980", Offset = "0x62C980", VA = "0x62C980", Slot = "20")]
		public int BeginReadProperties()
		{
			return default(int);
		}

		[Token(Token = "0x6001D39")]
		[Address(RVA = "0x62C988", Offset = "0x62C988", VA = "0x62C988", Slot = "15")]
		public bool HasMore()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D3A")]
		[Address(RVA = "0x62CA20", Offset = "0x62CA20", VA = "0x62CA20", Slot = "21")]
		public int BeginReadFields()
		{
			return default(int);
		}

		[Token(Token = "0x6001D3B")]
		[Address(RVA = "0x62CA28", Offset = "0x62CA28", VA = "0x62CA28", Slot = "22")]
		public void EndReadProperties()
		{
		}

		[Token(Token = "0x6001D3C")]
		[Address(RVA = "0x62CA2C", Offset = "0x62CA2C", VA = "0x62CA2C", Slot = "23")]
		public void EndReadFields()
		{
		}

		[Token(Token = "0x6001D3D")]
		public T ReadSimpleValue<T>()
		{
			return (T)null;
		}

		[Token(Token = "0x6001D3E")]
		[Address(RVA = "0x62CA50", Offset = "0x62CA50", VA = "0x62CA50", Slot = "25")]
		public object ReadSimpleValue(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001D3F")]
		[Address(RVA = "0x62CE3C", Offset = "0x62CE3C", VA = "0x62CE3C", Slot = "26")]
		public bool IsMultiDimensionalArray(out int length)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D40")]
		[Address(RVA = "0x62CFA8", Offset = "0x62CFA8", VA = "0x62CFA8", Slot = "27")]
		public void BeginReadMultiDimensionalArray(out int dimension, out int count)
		{
		}

		[Token(Token = "0x6001D41")]
		[Address(RVA = "0x62D19C", Offset = "0x62D19C", VA = "0x62D19C", Slot = "28")]
		public void EndReadMultiDimensionalArray()
		{
		}

		[Token(Token = "0x6001D42")]
		[Address(RVA = "0x62D1A0", Offset = "0x62D1A0", VA = "0x62D1A0", Slot = "29")]
		public int ReadArrayDimension(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001D43")]
		[Address(RVA = "0x62D2C0", Offset = "0x62D2C0", VA = "0x62D2C0", Slot = "30")]
		public Array ReadSimpleArray(Type elementType, int count)
		{
			return null;
		}

		[Token(Token = "0x6001D44")]
		[Address(RVA = "0x62D56C", Offset = "0x62D56C", VA = "0x62D56C", Slot = "31")]
		public int BeginReadObject(out bool isReference)
		{
			return default(int);
		}

		[Token(Token = "0x6001D45")]
		[Address(RVA = "0x62D65C", Offset = "0x62D65C", VA = "0x62D65C", Slot = "32")]
		public void EndReadObject()
		{
		}

		[Token(Token = "0x6001D46")]
		[Address(RVA = "0x62D684", Offset = "0x62D684", VA = "0x62D684", Slot = "33")]
		public int BeginReadList(Type valueType)
		{
			return default(int);
		}

		[Token(Token = "0x6001D47")]
		[Address(RVA = "0x62D7FC", Offset = "0x62D7FC", VA = "0x62D7FC", Slot = "34")]
		public object BeginReadListItem(int index, Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001D48")]
		[Address(RVA = "0x62D804", Offset = "0x62D804", VA = "0x62D804", Slot = "35")]
		public void EndReadListItem()
		{
		}

		[Token(Token = "0x6001D49")]
		[Address(RVA = "0x62D808", Offset = "0x62D808", VA = "0x62D808", Slot = "36")]
		public void EndReadList()
		{
		}

		[Token(Token = "0x6001D4A")]
		[Address(RVA = "0x62D80C", Offset = "0x62D80C", VA = "0x62D80C", Slot = "37")]
		public int BeginReadDictionary(Type keyType, Type valueType)
		{
			return default(int);
		}

		[Token(Token = "0x6001D4B")]
		[Address(RVA = "0x62D814", Offset = "0x62D814", VA = "0x62D814", Slot = "39")]
		public object BeginReadDictionaryKeyItem(int index, Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001D4C")]
		[Address(RVA = "0x62D81C", Offset = "0x62D81C", VA = "0x62D81C", Slot = "40")]
		public void EndReadDictionaryKeyItem()
		{
		}

		[Token(Token = "0x6001D4D")]
		[Address(RVA = "0x62D820", Offset = "0x62D820", VA = "0x62D820", Slot = "43")]
		public object BeginReadDictionaryValueItem(int index, Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0x62D828", Offset = "0x62D828", VA = "0x62D828", Slot = "44")]
		public void EndReadDictionaryValueItem()
		{
		}

		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0x62D82C", Offset = "0x62D82C", VA = "0x62D82C", Slot = "46")]
		public void EndReadDictionary()
		{
		}

		[Token(Token = "0x6001D50")]
		[Address(RVA = "0x62D830", Offset = "0x62D830", VA = "0x62D830", Slot = "47")]
		public int BeginReadObjectArray(Type valueType)
		{
			return default(int);
		}

		[Token(Token = "0x6001D51")]
		[Address(RVA = "0x62D98C", Offset = "0x62D98C", VA = "0x62D98C", Slot = "48")]
		public object BeginReadObjectArrayItem(int index, Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001D52")]
		[Address(RVA = "0x62D994", Offset = "0x62D994", VA = "0x62D994", Slot = "49")]
		public void EndReadObjectArrayItem()
		{
		}

		[Token(Token = "0x6001D53")]
		[Address(RVA = "0x62D998", Offset = "0x62D998", VA = "0x62D998", Slot = "50")]
		public void EndReadObjectArray()
		{
		}

		[Token(Token = "0x6001D54")]
		[Address(RVA = "0x62D9C0", Offset = "0x62D9C0", VA = "0x62D9C0", Slot = "51")]
		public void BeginWriteObject(int id, Type objectType, bool wasSeen)
		{
		}

		[Token(Token = "0x6001D55")]
		[Address(RVA = "0x62DAD0", Offset = "0x62DAD0", VA = "0x62DAD0", Slot = "52")]
		public void EndWriteObject()
		{
		}

		[Token(Token = "0x6001D56")]
		[Address(RVA = "0x62DB48", Offset = "0x62DB48", VA = "0x62DB48", Slot = "53")]
		public void BeginWriteList(int count, Type listType)
		{
		}

		[Token(Token = "0x6001D57")]
		[Address(RVA = "0x62DBC0", Offset = "0x62DBC0", VA = "0x62DBC0", Slot = "54")]
		public bool BeginWriteListItem(int index, object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D58")]
		[Address(RVA = "0x62DBC8", Offset = "0x62DBC8", VA = "0x62DBC8", Slot = "55")]
		public void EndWriteListItem()
		{
		}

		[Token(Token = "0x6001D59")]
		[Address(RVA = "0x62DC40", Offset = "0x62DC40", VA = "0x62DC40", Slot = "56")]
		public void EndWriteList()
		{
		}

		[Token(Token = "0x6001D5A")]
		[Address(RVA = "0x62DCB8", Offset = "0x62DCB8", VA = "0x62DCB8", Slot = "57")]
		public void BeginWriteObjectArray(int count, Type arrayType)
		{
		}

		[Token(Token = "0x6001D5B")]
		[Address(RVA = "0x62DEA0", Offset = "0x62DEA0", VA = "0x62DEA0", Slot = "58")]
		public bool BeginWriteObjectArrayItem(int index, object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D5C")]
		[Address(RVA = "0x62DEA8", Offset = "0x62DEA8", VA = "0x62DEA8", Slot = "59")]
		public void EndWriteObjectArrayItem()
		{
		}

		[Token(Token = "0x6001D5D")]
		[Address(RVA = "0x62DF20", Offset = "0x62DF20", VA = "0x62DF20", Slot = "60")]
		public void EndWriteObjectArray()
		{
		}

		[Token(Token = "0x6001D5E")]
		[Address(RVA = "0x62DF98", Offset = "0x62DF98", VA = "0x62DF98", Slot = "61")]
		public void BeginMultiDimensionArray(Type arrayType, int dimensions, int count)
		{
		}

		[Token(Token = "0x6001D5F")]
		[Address(RVA = "0x62E0AC", Offset = "0x62E0AC", VA = "0x62E0AC", Slot = "62")]
		public void EndMultiDimensionArray()
		{
		}

		[Token(Token = "0x6001D60")]
		[Address(RVA = "0x62E140", Offset = "0x62E140", VA = "0x62E140", Slot = "63")]
		public void WriteArrayDimension(int index, int count)
		{
		}

		[Token(Token = "0x6001D61")]
		[Address(RVA = "0x62E208", Offset = "0x62E208", VA = "0x62E208", Slot = "64")]
		public void WriteSimpleArray(int count, Array array)
		{
		}

		[Token(Token = "0x6001D62")]
		[Address(RVA = "0x62E6EC", Offset = "0x62E6EC", VA = "0x62E6EC", Slot = "65")]
		public void WriteSimpleValue(object value)
		{
		}

		[Token(Token = "0x6001D63")]
		[Address(RVA = "0x62EA10", Offset = "0x62EA10", VA = "0x62EA10", Slot = "66")]
		public void BeginWriteDictionary(int count, Type dictionaryType)
		{
		}

		[Token(Token = "0x6001D64")]
		[Address(RVA = "0x62EA14", Offset = "0x62EA14", VA = "0x62EA14", Slot = "68")]
		public bool BeginWriteDictionaryKey(int id, object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D65")]
		[Address(RVA = "0x62EA1C", Offset = "0x62EA1C", VA = "0x62EA1C", Slot = "69")]
		public void EndWriteDictionaryKey()
		{
		}

		[Token(Token = "0x6001D66")]
		[Address(RVA = "0x62EAC0", Offset = "0x62EAC0", VA = "0x62EAC0", Slot = "72")]
		public bool BeginWriteDictionaryValue(int id, object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D67")]
		[Address(RVA = "0x62EAC8", Offset = "0x62EAC8", VA = "0x62EAC8", Slot = "73")]
		public void EndWriteDictionaryValue()
		{
		}

		[Token(Token = "0x6001D68")]
		[Address(RVA = "0x62EB6C", Offset = "0x62EB6C", VA = "0x62EB6C", Slot = "75")]
		public void EndWriteDictionary()
		{
		}

		[Token(Token = "0x6001D69")]
		[Address(RVA = "0x62EB70", Offset = "0x62EB70", VA = "0x62EB70", Slot = "76")]
		public void BeginWriteProperties(int count)
		{
		}

		[Token(Token = "0x6001D6A")]
		[Address(RVA = "0x62EB74", Offset = "0x62EB74", VA = "0x62EB74", Slot = "77")]
		public void EndWriteProperties()
		{
		}

		[Token(Token = "0x6001D6B")]
		[Address(RVA = "0x62EB78", Offset = "0x62EB78", VA = "0x62EB78", Slot = "78")]
		public void BeginWriteProperty(string name, Type type)
		{
		}

		[Token(Token = "0x6001D6C")]
		[Address(RVA = "0x62EBF8", Offset = "0x62EBF8", VA = "0x62EBF8", Slot = "79")]
		public void EndWriteProperty()
		{
		}

		[Token(Token = "0x6001D6D")]
		[Address(RVA = "0x62EC9C", Offset = "0x62EC9C", VA = "0x62EC9C", Slot = "80")]
		public void BeginWriteFields(int count)
		{
		}

		[Token(Token = "0x6001D6E")]
		[Address(RVA = "0x62ECA0", Offset = "0x62ECA0", VA = "0x62ECA0", Slot = "81")]
		public void EndWriteFields()
		{
		}

		[Token(Token = "0x6001D6F")]
		[Address(RVA = "0x62ECA4", Offset = "0x62ECA4", VA = "0x62ECA4", Slot = "82")]
		public void BeginWriteField(string name, Type type)
		{
		}

		[Token(Token = "0x6001D70")]
		[Address(RVA = "0x62ED24", Offset = "0x62ED24", VA = "0x62ED24", Slot = "83")]
		public void EndWriteField()
		{
		}

		[Token(Token = "0x6001D71")]
		[Address(RVA = "0x62EDC8", Offset = "0x62EDC8", VA = "0x62EDC8", Slot = "85")]
		public void BeginOnDemand(int id)
		{
		}

		[Token(Token = "0x6001D72")]
		[Address(RVA = "0x62EDCC", Offset = "0x62EDCC", VA = "0x62EDCC", Slot = "86")]
		public void EndOnDemand()
		{
		}

		[Token(Token = "0x6001D74")]
		[Address(RVA = "0x62EDD8", Offset = "0x62EDD8", VA = "0x62EDD8", Slot = "38")]
		public void BeginReadDictionaryKeys()
		{
		}

		[Token(Token = "0x6001D75")]
		[Address(RVA = "0x62EF44", Offset = "0x62EF44", VA = "0x62EF44", Slot = "41")]
		public void EndReadDictionaryKeys()
		{
		}

		[Token(Token = "0x6001D76")]
		[Address(RVA = "0x62EF48", Offset = "0x62EF48", VA = "0x62EF48", Slot = "42")]
		public void BeginReadDictionaryValues()
		{
		}

		[Token(Token = "0x6001D77")]
		[Address(RVA = "0x62F0B4", Offset = "0x62F0B4", VA = "0x62F0B4", Slot = "45")]
		public void EndReadDictionaryValues()
		{
		}

		[Token(Token = "0x6001D78")]
		[Address(RVA = "0x62F0B8", Offset = "0x62F0B8", VA = "0x62F0B8", Slot = "67")]
		public void BeginWriteDictionaryKeys()
		{
		}

		[Token(Token = "0x6001D79")]
		[Address(RVA = "0x62F130", Offset = "0x62F130", VA = "0x62F130", Slot = "70")]
		public void EndWriteDictionaryKeys()
		{
		}

		[Token(Token = "0x6001D7A")]
		[Address(RVA = "0x62F1A8", Offset = "0x62F1A8", VA = "0x62F1A8", Slot = "71")]
		public void BeginWriteDictionaryValues()
		{
		}

		[Token(Token = "0x6001D7B")]
		[Address(RVA = "0x62F220", Offset = "0x62F220", VA = "0x62F220", Slot = "74")]
		public void EndWriteDictionaryValues()
		{
		}
	}
}
[Token(Token = "0x20003FE")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA182C", Offset = "0xEA182C")]
public class LevelLoader : MonoBehaviour
{
	[Token(Token = "0x20003FF")]
	public delegate void CreateObjectDelegate(GameObject prefab, ref bool cancel);

	[Token(Token = "0x2000400")]
	public delegate void SerializedComponentDelegate(GameObject gameObject, string componentName, ref bool cancel);

	[Token(Token = "0x2000401")]
	public delegate void SerializedObjectDelegate(GameObject gameObject, ref bool cancel);

	[Token(Token = "0x200054F")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA18B4", Offset = "0xEA18B4")]
	private sealed class <Load>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal LevelLoader $this;

		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal object $current;

		[Token(Token = "0x4001B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal bool $disposing;

		[Token(Token = "0x4001B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int $PC;

		[Token(Token = "0x170002CE")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60024D0")]
			[Address(RVA = "0x1949254", Offset = "0x1949254", VA = "0x1949254", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024D1")]
			[Address(RVA = "0x194925C", Offset = "0x194925C", VA = "0x194925C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024CE")]
		[Address(RVA = "0x19490FC", Offset = "0x19490FC", VA = "0x19490FC")]
		[DebuggerHidden]
		public <Load>c__Iterator0()
		{
		}

		[Token(Token = "0x60024CF")]
		[Address(RVA = "0x19491A4", Offset = "0x19491A4", VA = "0x19491A4", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024D2")]
		[Address(RVA = "0x1949264", Offset = "0x1949264", VA = "0x1949264", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024D3")]
		[Address(RVA = "0x1949278", Offset = "0x1949278", VA = "0x1949278", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000552")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1914", Offset = "0xEA1914")]
	private sealed class <Load>c__Iterator1 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x2000553")]
		private sealed class <Load>c__AnonStorey2
		{
			[Token(Token = "0x4001B1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal string name;

			[Token(Token = "0x60024EB")]
			[Address(RVA = "0x194B868", Offset = "0x194B868", VA = "0x194B868")]
			public <Load>c__AnonStorey2()
			{
			}

			[Token(Token = "0x60024EC")]
			[Address(RVA = "0x194B93C", Offset = "0x194B93C", VA = "0x194B93C")]
			internal bool <>m__0(LevelSerializer.StoredData cp)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal float <oldFixedTime>__0;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal int numberOfFrames;

		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal List<UniqueIdentifier> <flaggedObjects>__0;

		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal Radical.Logging $locvar0;

		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal UnitySerializer.FinalProcess <process>__1;

		[Token(Token = "0x4001B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal List<UniqueIdentifier>.Enumerator $locvar5;

		[Token(Token = "0x4001B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal LevelLoader $this;

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal object $current;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		internal bool $disposing;

		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		internal int $PC;

		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Func<LevelSerializer.StoredData, string> <>f__am$cache0;

		[Token(Token = "0x4001B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static Func<string, IEnumerable<LevelSerializer.StoredData>, <>__AnonType1<string, List<<>__AnonType0<string, List<LevelSerializer.StoredData>>>>> <>f__am$cache1;

		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Func<LevelSerializer.StoredData, string> <>f__am$cache2;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static Func<string, IEnumerable<LevelSerializer.StoredData>, <>__AnonType0<string, List<LevelSerializer.StoredData>>> <>f__am$cache3;

		[Token(Token = "0x170002D4")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60024E2")]
			[Address(RVA = "0x194B508", Offset = "0x194B508", VA = "0x194B508", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024E3")]
			[Address(RVA = "0x194B510", Offset = "0x194B510", VA = "0x194B510", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024E0")]
		[Address(RVA = "0x194919C", Offset = "0x194919C", VA = "0x194919C")]
		[DebuggerHidden]
		public <Load>c__Iterator1()
		{
		}

		[Token(Token = "0x60024E1")]
		[Address(RVA = "0x19492FC", Offset = "0x19492FC", VA = "0x19492FC", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024E4")]
		[Address(RVA = "0x194B518", Offset = "0x194B518", VA = "0x194B518", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024E5")]
		[Address(RVA = "0x194B538", Offset = "0x194B538", VA = "0x194B538", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}

		[Token(Token = "0x60024E6")]
		[Address(RVA = "0x194B5BC", Offset = "0x194B5BC", VA = "0x194B5BC")]
		private static string <>m__0(LevelSerializer.StoredData i)
		{
			return null;
		}

		[Token(Token = "0x60024E7")]
		[Address(RVA = "0x194B5DC", Offset = "0x194B5DC", VA = "0x194B5DC")]
		private static <>__AnonType1<string, List<<>__AnonType0<string, List<LevelSerializer.StoredData>>>> <>m__1(string name, IEnumerable<LevelSerializer.StoredData> cps)
		{
			return null;
		}

		[Token(Token = "0x60024E8")]
		[Address(RVA = "0x194B438", Offset = "0x194B438", VA = "0x194B438")]
		private void <>__Finally0()
		{
		}

		[Token(Token = "0x60024E9")]
		[Address(RVA = "0x194B870", Offset = "0x194B870", VA = "0x194B870")]
		private static string <>m__2(LevelSerializer.StoredData cp)
		{
			return null;
		}

		[Token(Token = "0x60024EA")]
		[Address(RVA = "0x194B890", Offset = "0x194B890", VA = "0x194B890")]
		private static <>__AnonType0<string, List<LevelSerializer.StoredData>> <>m__3(string type, IEnumerable<LevelSerializer.StoredData> components)
		{
			return null;
		}
	}

	[Token(Token = "0x4001426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Action PauseGame;

	[Token(Token = "0x4001427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Action ResumeGame;

	[Token(Token = "0x4001428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static LevelLoader Current;

	[Token(Token = "0x4001429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public LevelSerializer.LevelData Data;

	[Token(Token = "0x400142A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool DontDelete;

	[Token(Token = "0x400142B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float timeScaleAfterLoading;

	[Token(Token = "0x400142C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool useJSON;

	[Token(Token = "0x400142E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool sceneMasterLoaded;

	[Token(Token = "0x400142F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	private bool alreadyLoaded;

	[Token(Token = "0x14000084")]
	public static event Action OnLoadComplete
	{
		[Token(Token = "0x6001D7E")]
		[Address(RVA = "0x1948BB4", Offset = "0x1948BB4", VA = "0x1948BB4")]
		add
		{
		}
		[Token(Token = "0x6001D7F")]
		[Address(RVA = "0x1948CCC", Offset = "0x1948CCC", VA = "0x1948CCC")]
		remove
		{
		}
	}

	[Token(Token = "0x6001D7D")]
	[Address(RVA = "0x1948BA4", Offset = "0x1948BA4", VA = "0x1948BA4")]
	public LevelLoader()
	{
	}

	[Token(Token = "0x6001D80")]
	[Address(RVA = "0x1948DE4", Offset = "0x1948DE4", VA = "0x1948DE4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001D81")]
	[Address(RVA = "0x1948EB0", Offset = "0x1948EB0", VA = "0x1948EB0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001D82")]
	[Address(RVA = "0x1948FE4", Offset = "0x1948FE4", VA = "0x1948FE4")]
	public void MarkSceneMasterReady()
	{
	}

	[Token(Token = "0x6001D83")]
	[Address(RVA = "0x1948FF0", Offset = "0x1948FF0", VA = "0x1948FF0")]
	private void OnSceneLoaded(Scene arg0, LoadSceneMode arg1)
	{
	}

	[Token(Token = "0x6001D84")]
	[Address(RVA = "0x19490CC", Offset = "0x19490CC", VA = "0x19490CC")]
	private static void SetActive(GameObject go, bool activate)
	{
	}

	[Token(Token = "0x6001D85")]
	[Address(RVA = "0x194904C", Offset = "0x194904C", VA = "0x194904C")]
	[DebuggerHidden]
	public IEnumerator Load()
	{
		return null;
	}

	[Token(Token = "0x6001D86")]
	[Address(RVA = "0x1949104", Offset = "0x1949104", VA = "0x1949104")]
	[DebuggerHidden]
	public IEnumerator Load(int numberOfFrames)
	{
		return null;
	}
}
[Token(Token = "0x2000402")]
[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA1974", Offset = "0xEA1974")]
public class ComponentSerializerFor : Attribute
{
	[Token(Token = "0x4001430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Type SerializesType;

	[Token(Token = "0x6001D93")]
	[Address(RVA = "0x19E2C18", Offset = "0x19E2C18", VA = "0x19E2C18")]
	public ComponentSerializerFor(Type serializesType)
	{
	}
}
[Token(Token = "0x2000403")]
[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA19A8", Offset = "0xEA19A8")]
public class SerializerPlugIn : Attribute
{
	[Token(Token = "0x6001D94")]
	[Address(RVA = "0x6854E0", Offset = "0x6854E0", VA = "0x6854E0")]
	public SerializerPlugIn()
	{
	}
}
[Token(Token = "0x2000404")]
[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA19DC", Offset = "0xEA19DC")]
public class SuspendLevelSerialization : Attribute
{
	[Token(Token = "0x6001D95")]
	[Address(RVA = "0x18FD150", Offset = "0x18FD150", VA = "0x18FD150")]
	public SuspendLevelSerialization()
	{
	}
}
[Token(Token = "0x2000405")]
public interface IComponentSerializer
{
	[Token(Token = "0x6001D96")]
	byte[] Serialize(Component component);

	[Token(Token = "0x6001D97")]
	void Deserialize(byte[] data, Component instance);
}
[Token(Token = "0x2000406")]
public interface IControlSerialization
{
	[Token(Token = "0x6001D98")]
	bool ShouldSave();
}
[Token(Token = "0x2000407")]
public interface IControlSerializationEx : IControlSerialization
{
	[Token(Token = "0x6001D99")]
	bool ShouldSaveWholeObject();
}
[Token(Token = "0x2000408")]
public static class LevelSerializer
{
	[Token(Token = "0x2000409")]
	public class LevelData
	{
		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Name;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public List<StoredData> StoredItems;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<StoredItem> StoredObjectNames;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public string rootObject;

		[Token(Token = "0x6001DAD")]
		[Address(RVA = "0x194F20C", Offset = "0x194F20C", VA = "0x194F20C")]
		public LevelData()
		{
		}
	}

	[Token(Token = "0x200040A")]
	public class SaveEntry
	{
		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string Data;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string Level;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DateTime When;

		[Token(Token = "0x170001C4")]
		public string Caption
		{
			[Token(Token = "0x6001DB0")]
			[Address(RVA = "0x19510F8", Offset = "0x19510F8", VA = "0x19510F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001DAE")]
		[Address(RVA = "0x195101C", Offset = "0x195101C", VA = "0x195101C")]
		public SaveEntry(string contents)
		{
		}

		[Token(Token = "0x6001DAF")]
		[Address(RVA = "0x194CDE0", Offset = "0x194CDE0", VA = "0x194CDE0")]
		public SaveEntry()
		{
		}

		[Token(Token = "0x6001DB1")]
		[Address(RVA = "0x19511D8", Offset = "0x19511D8", VA = "0x19511D8")]
		public void Load()
		{
		}

		[Token(Token = "0x6001DB2")]
		[Address(RVA = "0x1951260", Offset = "0x1951260", VA = "0x1951260", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}

	[Token(Token = "0x200040B")]
	public class SerializationHelper : MonoBehaviour
	{
		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string gameName;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Action<string, bool> perform;

		[Token(Token = "0x6001DB3")]
		[Address(RVA = "0x1951328", Offset = "0x1951328", VA = "0x1951328")]
		public SerializationHelper()
		{
		}

		[Token(Token = "0x6001DB4")]
		[Address(RVA = "0x1951330", Offset = "0x1951330", VA = "0x1951330")]
		private void Update()
		{
		}
	}

	[Token(Token = "0x200040C")]
	public class StoredData
	{
		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[DoNotSerialize]
		public string ClassId;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte[] Data;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public string Type;

		[Token(Token = "0x6001DB5")]
		[Address(RVA = "0x19501D0", Offset = "0x19501D0", VA = "0x19501D0")]
		public StoredData()
		{
		}
	}

	[Token(Token = "0x200040D")]
	public class StoredItem
	{
		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool Active;

		[Token(Token = "0x400144C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[DoNotSerialize]
		public int layer;

		[Token(Token = "0x400144D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[DoNotSerialize]
		public string tag;

		[Token(Token = "0x400144E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[DoNotSerialize]
		public bool setExtraData;

		[Token(Token = "0x400144F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[DoNotSerialize]
		public readonly List<string> ChildIds;

		[Token(Token = "0x4001450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[DoNotSerialize]
		public Dictionary<string, List<string>> Children;

		[Token(Token = "0x4001451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[DoNotSerialize]
		public string ClassId;

		[Token(Token = "0x4001452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[DoNotSerialize]
		public Dictionary<string, bool> Components;

		[Token(Token = "0x4001453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[DoNotSerialize]
		public GameObject GameObject;

		[Token(Token = "0x4001454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[DoNotSerialize]
		public string GameObjectName;

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Name;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[DoNotSerialize]
		public string ParentName;

		[Token(Token = "0x4001457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[DoNotSerialize]
		public bool createEmptyObject;

		[Token(Token = "0x6001DB6")]
		[Address(RVA = "0x194F214", Offset = "0x194F214", VA = "0x194F214")]
		public StoredItem()
		{
		}

		[Token(Token = "0x6001DB7")]
		[Address(RVA = "0x19513F0", Offset = "0x19513F0", VA = "0x19513F0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}

	[Token(Token = "0x2000554")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1B00", Offset = "0xEA1B00")]
	private sealed class <PerformLoad>c__Iterator0 : IEnumerator, IDisposable, IEnumerator<object>
	{
		[Token(Token = "0x4001B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal LevelLoader loader;

		[Token(Token = "0x4001B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal Action<LevelLoader> complete;

		[Token(Token = "0x4001B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal object $current;

		[Token(Token = "0x4001B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal bool $disposing;

		[Token(Token = "0x4001B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal int $PC;

		[Token(Token = "0x170002D6")]
		private object System.Collections.Generic.IEnumerator<object>.Current
		{
			[Token(Token = "0x60024EF")]
			[Address(RVA = "0x1950F74", Offset = "0x1950F74", VA = "0x1950F74", Slot = "8")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002D7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60024F0")]
			[Address(RVA = "0x1950F7C", Offset = "0x1950F7C", VA = "0x1950F7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60024ED")]
		[Address(RVA = "0x19506F0", Offset = "0x19506F0", VA = "0x19506F0")]
		[DebuggerHidden]
		public <PerformLoad>c__Iterator0()
		{
		}

		[Token(Token = "0x60024EE")]
		[Address(RVA = "0x1950E60", Offset = "0x1950E60", VA = "0x1950E60", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60024F1")]
		[Address(RVA = "0x1950F84", Offset = "0x1950F84", VA = "0x1950F84", Slot = "7")]
		[DebuggerHidden]
		public void Dispose()
		{
		}

		[Token(Token = "0x60024F2")]
		[Address(RVA = "0x1950F98", Offset = "0x1950F98", VA = "0x1950F98", Slot = "6")]
		[DebuggerHidden]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x4001431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	internal static Dictionary<Type, IComponentSerializer> CustomSerializers;

	[Token(Token = "0x4001432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static string PlayerName;

	[Token(Token = "0x4001433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Lookup<string, List<SaveEntry>> SavedGames;

	[Token(Token = "0x4001434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static bool IsDeserializing;

	[Token(Token = "0x4001435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static readonly List<object> createdPlugins;

	[Token(Token = "0x4001436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static bool useCompression;

	[Token(Token = "0x4001437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static Action PauseGame;

	[Token(Token = "0x4001438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static Action ResumeGame;

	[Token(Token = "0x4001439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static int _collectionCount;

	[Token(Token = "0x400143A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public static string failed;

	[Token(Token = "0x400143B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static List<string> cachedDeletedGUIDs;

	[Token(Token = "0x400143C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA19F0", Offset = "0xEA19F0")]
	private static UnitySerializer.ScanTypeFunction <>f__am$cache0;

	[Token(Token = "0x170001C3")]
	public static bool ShouldCollect
	{
		[Token(Token = "0x6001D9F")]
		[Address(RVA = "0x194B3A0", Offset = "0x194B3A0", VA = "0x194B3A0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001D9A")]
	[Address(RVA = "0x194C80C", Offset = "0x194C80C", VA = "0x194C80C")]
	static LevelSerializer()
	{
	}

	[Token(Token = "0x6001D9B")]
	[Address(RVA = "0x194CC74", Offset = "0x194CC74", VA = "0x194CC74")]
	public static SaveEntry CreateSaveEntry(string name)
	{
		return null;
	}

	[Token(Token = "0x6001D9C")]
	[Address(RVA = "0x194CF54", Offset = "0x194CF54", VA = "0x194CF54")]
	public static void RegisterAssembly()
	{
	}

	[Token(Token = "0x6001D9D")]
	[Address(RVA = "0x194D158", Offset = "0x194D158", VA = "0x194D158")]
	public static void DontCollect()
	{
	}

	[Token(Token = "0x6001D9E")]
	[Address(RVA = "0x194D1EC", Offset = "0x194D1EC", VA = "0x194D1EC")]
	public static void Collect()
	{
	}

	[Token(Token = "0x6001DA0")]
	[Address(RVA = "0x194CDE8", Offset = "0x194CDE8", VA = "0x194CDE8")]
	public static string SerializeLevel()
	{
		return null;
	}

	[Token(Token = "0x6001DA1")]
	[Address(RVA = "0x194E588", Offset = "0x194E588", VA = "0x194E588")]
	public static void SlimSerializeLevel()
	{
	}

	[Token(Token = "0x6001DA2")]
	[Address(RVA = "0x194F21C", Offset = "0x194F21C", VA = "0x194F21C")]
	public static void MergeThenSerialize(LevelData incomplete)
	{
	}

	[Token(Token = "0x6001DA3")]
	[Address(RVA = "0x194FF00", Offset = "0x194FF00", VA = "0x194FF00")]
	public static void SerializeLD(LevelData ld)
	{
	}

	[Token(Token = "0x6001DA4")]
	[Address(RVA = "0x194D280", Offset = "0x194D280", VA = "0x194D280")]
	public static byte[] SerializeLevel(bool urgent)
	{
		return null;
	}

	[Token(Token = "0x6001DA5")]
	[Address(RVA = "0x19501D8", Offset = "0x19501D8", VA = "0x19501D8")]
	public static void LoadNow(object data)
	{
	}

	[Token(Token = "0x6001DA6")]
	[Address(RVA = "0x19505C4", Offset = "0x19505C4", VA = "0x19505C4")]
	public static void LoadNow(object data, bool dontDeleteExistingItems)
	{
	}

	[Token(Token = "0x6001DA7")]
	[Address(RVA = "0x1950268", Offset = "0x1950268", VA = "0x1950268")]
	public static void LoadNow(object data, bool dontDeleteExistingItems, Action<LevelLoader> complete)
	{
	}

	[Token(Token = "0x6001DA8")]
	[Address(RVA = "0x1950658", Offset = "0x1950658", VA = "0x1950658")]
	[DebuggerHidden]
	private static IEnumerator PerformLoad(LevelLoader loader, Action<LevelLoader> complete)
	{
		return null;
	}

	[Token(Token = "0x6001DA9")]
	[Address(RVA = "0x19506F8", Offset = "0x19506F8", VA = "0x19506F8")]
	public static LevelLoader LoadSavedLevel(string data, bool loadScene = true)
	{
		return null;
	}

	[Token(Token = "0x6001DAA")]
	[Address(RVA = "0x19509DC", Offset = "0x19509DC", VA = "0x19509DC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1A10", Offset = "0xEA1A10")]
	private static void <LevelSerializer>m__0(Type tp, Attribute attr)
	{
	}

	[Token(Token = "0x6001DAB")]
	[Address(RVA = "0x1950AA8", Offset = "0x1950AA8", VA = "0x1950AA8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1A20", Offset = "0xEA1A20")]
	private static void <LevelSerializer>m__1(Type tp, Attribute attr)
	{
	}

	[Token(Token = "0x6001DAC")]
	[Address(RVA = "0x1950C84", Offset = "0x1950C84", VA = "0x1950C84")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1A30", Offset = "0xEA1A30")]
	private static void <RegisterAssembly>m__2(Type tp, Attribute attr)
	{
	}
}
[Token(Token = "0x200040E")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA1B60", Offset = "0xEA1B60")]
public class SerializeAnimations : IComponentSerializer
{
	[Token(Token = "0x200040F")]
	public class StoredState
	{
		[Token(Token = "0x4001459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte[] data;

		[Token(Token = "0x400145A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string name;

		[Token(Token = "0x400145B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SaveGameManager.AssetReference asset;

		[Token(Token = "0x6001DBC")]
		[Address(RVA = "0x64FE34", Offset = "0x64FE34", VA = "0x64FE34")]
		public StoredState()
		{
		}
	}

	[Token(Token = "0x2000555")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1BF8", Offset = "0xEA1BF8")]
	private sealed class <Deserialize>c__AnonStorey0
	{
		[Token(Token = "0x4001B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal Component instance;

		[Token(Token = "0x4001B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal byte[] data;

		[Token(Token = "0x4001B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Func<AnimationState, string> <>f__am$cache0;

		[Token(Token = "0x60024F3")]
		[Address(RVA = "0x64FCDC", Offset = "0x64FCDC", VA = "0x64FCDC")]
		public <Deserialize>c__AnonStorey0()
		{
		}

		[Token(Token = "0x60024F4")]
		[Address(RVA = "0x64FE3C", Offset = "0x64FE3C", VA = "0x64FE3C")]
		internal void <>m__0()
		{
		}

		[Token(Token = "0x60024F5")]
		[Address(RVA = "0x650440", Offset = "0x650440", VA = "0x650440")]
		private static string <>m__1(AnimationState a)
		{
			return null;
		}
	}

	[Token(Token = "0x4001458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1BD8", Offset = "0xEA1BD8")]
	private static Func<AnimationState, StoredState> <>f__am$cache0;

	[Token(Token = "0x6001DB8")]
	[Address(RVA = "0x64F9FC", Offset = "0x64F9FC", VA = "0x64F9FC")]
	public SerializeAnimations()
	{
	}

	[Token(Token = "0x6001DB9")]
	[Address(RVA = "0x64FA04", Offset = "0x64FA04", VA = "0x64FA04", Slot = "4")]
	public byte[] Serialize(Component component)
	{
		return null;
	}

	[Token(Token = "0x6001DBA")]
	[Address(RVA = "0x64FBDC", Offset = "0x64FBDC", VA = "0x64FBDC", Slot = "5")]
	public void Deserialize(byte[] data, Component instance)
	{
	}

	[Token(Token = "0x6001DBB")]
	[Address(RVA = "0x64FCE4", Offset = "0x64FCE4", VA = "0x64FCE4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1BE8", Offset = "0xEA1BE8")]
	private static StoredState <Serialize>m__0(AnimationState a)
	{
		return null;
	}
}
[Token(Token = "0x2000410")]
public static class FieldSerializer
{
	[Token(Token = "0x6001DBD")]
	[Address(RVA = "0x1927024", Offset = "0x1927024", VA = "0x1927024")]
	public static void SerializeFields(Dictionary<string, object> storage, object obj, params string[] names)
	{
	}

	[Token(Token = "0x6001DBE")]
	[Address(RVA = "0x1927160", Offset = "0x1927160", VA = "0x1927160")]
	public static void DeserializeFields(Dictionary<string, object> storage, object obj)
	{
	}
}
[Token(Token = "0x2000411")]
public static class PreWarm
{
	[Token(Token = "0x400145C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string[] PrewarmNames;

	[Token(Token = "0x400145D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static string[] PrewarmTypes;
}
[Token(Token = "0x2000412")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA1C18", Offset = "0xEA1C18")]
[DontStore]
public class DontStoreObjectInRoom : MonoBehaviour, IControlSerializationEx, IControlSerialization
{
	[Token(Token = "0x6001DC0")]
	[Address(RVA = "0x1923F34", Offset = "0x1923F34", VA = "0x1923F34")]
	public DontStoreObjectInRoom()
	{
	}

	[Token(Token = "0x6001DC1")]
	[Address(RVA = "0x1923F3C", Offset = "0x1923F3C", VA = "0x1923F3C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001DC2")]
	[Address(RVA = "0x1924008", Offset = "0x1924008", VA = "0x1924008", Slot = "4")]
	public bool ShouldSaveWholeObject()
	{
		return default(bool);
	}

	[Token(Token = "0x6001DC3")]
	[Address(RVA = "0x1924010", Offset = "0x1924010", VA = "0x1924010", Slot = "5")]
	public bool ShouldSave()
	{
		return default(bool);
	}
}
[Token(Token = "0x2000413")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA1C60", Offset = "0xEA1C60")]
public class PlayerLocator : MonoBehaviour
{
	[Token(Token = "0x400145E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlayerLocator Current;

	[Token(Token = "0x400145F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static GameObject PlayerGameObject;

	[Token(Token = "0x6001DC4")]
	[Address(RVA = "0x1B1B5C8", Offset = "0x1B1B5C8", VA = "0x1B1B5C8")]
	public PlayerLocator()
	{
	}

	[Token(Token = "0x6001DC5")]
	[Address(RVA = "0x1B1B5D0", Offset = "0x1B1B5D0", VA = "0x1B1B5D0")]
	private void Awake()
	{
	}
}
[Token(Token = "0x2000414")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA1C94", Offset = "0xEA1C94")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA1C94", Offset = "0xEA1C94")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA1C94", Offset = "0xEA1C94")]
public class PlayerSpawnPoint : MonoBehaviour
{
	[Token(Token = "0x4001460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PlayerSpawnPoint currentSpawnPoint;

	[Token(Token = "0x170001C5")]
	public bool current
	{
		[Token(Token = "0x6001DC7")]
		[Address(RVA = "0x1B1B6A0", Offset = "0x1B1B6A0", VA = "0x1B1B6A0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001DC8")]
		[Address(RVA = "0x1B1B744", Offset = "0x1B1B744", VA = "0x1B1B744")]
		set
		{
		}
	}

	[Token(Token = "0x6001DC6")]
	[Address(RVA = "0x1B1B698", Offset = "0x1B1B698", VA = "0x1B1B698")]
	public PlayerSpawnPoint()
	{
	}

	[Token(Token = "0x6001DC9")]
	[Address(RVA = "0x1B1B81C", Offset = "0x1B1B81C", VA = "0x1B1B81C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001DCA")]
	[Address(RVA = "0x1B1B8A0", Offset = "0x1B1B8A0", VA = "0x1B1B8A0")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001DCB")]
	[Address(RVA = "0x1B1B9C0", Offset = "0x1B1B9C0", VA = "0x1B1B9C0")]
	private void OnRoomWasLoaded()
	{
	}
}
[Token(Token = "0x2000415")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA1D60", Offset = "0xEA1D60")]
[DontStore]
public class Room : MonoBehaviour
{
	[Token(Token = "0x4001461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Room Current;

	[Token(Token = "0x6001DCC")]
	[Address(RVA = "0x1B3D5B4", Offset = "0x1B3D5B4", VA = "0x1B3D5B4")]
	public Room()
	{
	}

	[Token(Token = "0x6001DCD")]
	[Address(RVA = "0x1B3D5BC", Offset = "0x1B3D5BC", VA = "0x1B3D5BC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001DCE")]
	[Address(RVA = "0x1B3D620", Offset = "0x1B3D620", VA = "0x1B3D620")]
	private void OnDestroy()
	{
	}
}
[Token(Token = "0x2000416")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA1DA8", Offset = "0xEA1DA8")]
public class RoomDataSaveGameStorage : DontStoreObjectInRoom
{
	[Token(Token = "0x6001DCF")]
	[Address(RVA = "0x1B3D720", Offset = "0x1B3D720", VA = "0x1B3D720")]
	public RoomDataSaveGameStorage()
	{
	}
}
[Token(Token = "0x2000417")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA1DDC", Offset = "0xEA1DDC")]
public class RoomLoader : MonoBehaviour
{
	[Token(Token = "0x6001DD0")]
	[Address(RVA = "0x1B3D728", Offset = "0x1B3D728", VA = "0x1B3D728")]
	public RoomLoader()
	{
	}

	[Token(Token = "0x6001DD1")]
	[Address(RVA = "0x1B3D730", Offset = "0x1B3D730", VA = "0x1B3D730")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001DD2")]
	[Address(RVA = "0x1B3D820", Offset = "0x1B3D820", VA = "0x1B3D820")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001DD3")]
	[Address(RVA = "0x1B3D8C4", Offset = "0x1B3D8C4", VA = "0x1B3D8C4")]
	private void OnSceneLoaded(Scene arg0, LoadSceneMode arg1)
	{
	}
}
[Token(Token = "0x2000418")]
public class RoomManager
{
	[Token(Token = "0x4001462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1E10", Offset = "0xEA1E10")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xEA1E10", Offset = "0xEA1E10")]
	private static bool <savingRoom>k__BackingField;

	[Token(Token = "0x4001463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1E44", Offset = "0xEA1E44")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xEA1E44", Offset = "0xEA1E44")]
	private static bool <loadingRoom>k__BackingField;

	[Token(Token = "0x4001464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1E78", Offset = "0xEA1E78")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xEA1E78", Offset = "0xEA1E78")]
	private static bool <cacheAll>k__BackingField;

	[Token(Token = "0x4001465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1EAC", Offset = "0xEA1EAC")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xEA1EAC", Offset = "0xEA1EAC")]
	private static bool <forceSave>k__BackingField;

	[Token(Token = "0x4001466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1EE0", Offset = "0xEA1EE0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xEA1EE0", Offset = "0xEA1EE0")]
	private static string <forwardedExistingSave>k__BackingField;

	[Token(Token = "0x4001467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1F14", Offset = "0xEA1F14")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xEA1F14", Offset = "0xEA1F14")]
	private static string <lastCachedRoom>k__BackingField;

	[Token(Token = "0x4001468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static Dictionary<string, string> LevelToRoomName;

	[Token(Token = "0x4001469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly Dictionary<string, string> rooms;

	[Token(Token = "0x170001C6")]
	public static bool savingRoom
	{
		[Token(Token = "0x6001DD6")]
		[Address(RVA = "0x1B3F930", Offset = "0x1B3F930", VA = "0x1B3F930")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1F48", Offset = "0xEA1F48")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001DD7")]
		[Address(RVA = "0x1B3F9BC", Offset = "0x1B3F9BC", VA = "0x1B3F9BC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1F58", Offset = "0xEA1F58")]
		set
		{
		}
	}

	[Token(Token = "0x170001C7")]
	public static bool loadingRoom
	{
		[Token(Token = "0x6001DD8")]
		[Address(RVA = "0x1B3FA4C", Offset = "0x1B3FA4C", VA = "0x1B3FA4C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1F68", Offset = "0xEA1F68")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001DD9")]
		[Address(RVA = "0x1B3FAD8", Offset = "0x1B3FAD8", VA = "0x1B3FAD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1F78", Offset = "0xEA1F78")]
		set
		{
		}
	}

	[Token(Token = "0x170001C8")]
	public static bool cacheAll
	{
		[Token(Token = "0x6001DDA")]
		[Address(RVA = "0x1B3FB68", Offset = "0x1B3FB68", VA = "0x1B3FB68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1F88", Offset = "0xEA1F88")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001DDB")]
		[Address(RVA = "0x1B3F898", Offset = "0x1B3F898", VA = "0x1B3F898")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1F98", Offset = "0xEA1F98")]
		set
		{
		}
	}

	[Token(Token = "0x170001C9")]
	public static bool forceSave
	{
		[Token(Token = "0x6001DDC")]
		[Address(RVA = "0x1B3FBF4", Offset = "0x1B3FBF4", VA = "0x1B3FBF4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1FA8", Offset = "0xEA1FA8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001DDD")]
		[Address(RVA = "0x1B3FC80", Offset = "0x1B3FC80", VA = "0x1B3FC80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1FB8", Offset = "0xEA1FB8")]
		set
		{
		}
	}

	[Token(Token = "0x170001CA")]
	public static string forwardedExistingSave
	{
		[Token(Token = "0x6001DDE")]
		[Address(RVA = "0x1B3FD10", Offset = "0x1B3FD10", VA = "0x1B3FD10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1FC8", Offset = "0xEA1FC8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001DDF")]
		[Address(RVA = "0x1B3FD9C", Offset = "0x1B3FD9C", VA = "0x1B3FD9C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1FD8", Offset = "0xEA1FD8")]
		set
		{
		}
	}

	[Token(Token = "0x170001CB")]
	public static string lastCachedRoom
	{
		[Token(Token = "0x6001DE0")]
		[Address(RVA = "0x1B3FE2C", Offset = "0x1B3FE2C", VA = "0x1B3FE2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1FE8", Offset = "0xEA1FE8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001DE1")]
		[Address(RVA = "0x1B3FEB8", Offset = "0x1B3FEB8", VA = "0x1B3FEB8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA1FF8", Offset = "0xEA1FF8")]
		set
		{
		}
	}

	[Token(Token = "0x6001DD4")]
	[Address(RVA = "0x1B3D95C", Offset = "0x1B3D95C", VA = "0x1B3D95C")]
	static RoomManager()
	{
	}

	[Token(Token = "0x6001DD5")]
	[Address(RVA = "0x1B3F928", Offset = "0x1B3F928", VA = "0x1B3F928")]
	public RoomManager()
	{
	}

	[Token(Token = "0x6001DE2")]
	[Address(RVA = "0x1B3FF48", Offset = "0x1B3FF48", VA = "0x1B3FF48")]
	public static string GetRoomName(string levelName)
	{
		return null;
	}

	[Token(Token = "0x6001DE3")]
	[Address(RVA = "0x1B40024", Offset = "0x1B40024", VA = "0x1B40024")]
	public static void SaveCurrentRoom()
	{
	}

	[Token(Token = "0x6001DE4")]
	[Address(RVA = "0x1B402AC", Offset = "0x1B402AC", VA = "0x1B402AC")]
	public static bool LoadRoom(string name)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000419")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA2008", Offset = "0xEA2008")]
public class SaveGameManager : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x200041A")]
	public class StoredEntry
	{
		[Token(Token = "0x4001475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject gameObject;

		[Token(Token = "0x4001476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string Id;

		[Token(Token = "0x6001DF7")]
		[Address(RVA = "0x620C14", Offset = "0x620C14", VA = "0x620C14")]
		public StoredEntry()
		{
		}
	}

	[Token(Token = "0x200041B")]
	public class AssetReference
	{
		[Token(Token = "0x4001477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string name;

		[Token(Token = "0x4001478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public string type;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int index;

		[Token(Token = "0x6001DF8")]
		[Address(RVA = "0x621714", Offset = "0x621714", VA = "0x621714")]
		public AssetReference()
		{
		}
	}

	[Token(Token = "0x400146A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public UnityEngine.Object[] requiredObjects;

	[Token(Token = "0x400146B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static SaveGameManager instance;

	[Token(Token = "0x400146C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static bool hasRun;

	[Token(Token = "0x400146D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[HideInInspector]
	public StoredReferences Reference;

	[Token(Token = "0x400146E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static StoredReferences _cached;

	[Token(Token = "0x400146F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static List<Action> _initActions;

	[Token(Token = "0x4001470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private bool hasWoken;

	[Token(Token = "0x4001471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<Type, Index<string, List<UnityEngine.Object>>> assetReferences;

	[Token(Token = "0x4001472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2060", Offset = "0xEA2060")]
	private static Func<GameObject, bool> <>f__am$cache0;

	[Token(Token = "0x4001473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2070", Offset = "0xEA2070")]
	private static Func<GameObject, SaveGameManager> <>f__am$cache1;

	[Token(Token = "0x4001474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2080", Offset = "0xEA2080")]
	private static Func<GameObject, Transform> <>f__am$cache2;

	[Token(Token = "0x170001CC")]
	public static SaveGameManager Instance
	{
		[Token(Token = "0x6001DE6")]
		[Address(RVA = "0x6203AC", Offset = "0x6203AC", VA = "0x6203AC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001DE7")]
		[Address(RVA = "0x6207EC", Offset = "0x6207EC", VA = "0x6207EC")]
		set
		{
		}
	}

	[Token(Token = "0x6001DE5")]
	[Address(RVA = "0x620320", Offset = "0x620320", VA = "0x620320")]
	public SaveGameManager()
	{
	}

	[Token(Token = "0x6001DE8")]
	[Address(RVA = "0x62087C", Offset = "0x62087C", VA = "0x62087C")]
	public static void Loaded()
	{
	}

	[Token(Token = "0x6001DE9")]
	[Address(RVA = "0x62090C", Offset = "0x62090C", VA = "0x62090C")]
	public GameObject GetById(string id)
	{
		return null;
	}

	[Token(Token = "0x6001DEA")]
	[Address(RVA = "0x6209C8", Offset = "0x6209C8", VA = "0x6209C8")]
	public void SetId(GameObject gameObject, string id)
	{
	}

	[Token(Token = "0x6001DEB")]
	[Address(RVA = "0x620CE4", Offset = "0x620CE4", VA = "0x620CE4")]
	public static string GetId(GameObject gameObject)
	{
		return null;
	}

	[Token(Token = "0x6001DEC")]
	[Address(RVA = "0x620F80", Offset = "0x620F80", VA = "0x620F80")]
	public static void Initialize(Action a)
	{
	}

	[Token(Token = "0x6001DED")]
	[Address(RVA = "0x62111C", Offset = "0x62111C", VA = "0x62111C")]
	public AssetReference GetAssetId(UnityEngine.Object referencedObject)
	{
		return null;
	}

	[Token(Token = "0x6001DEE")]
	[Address(RVA = "0x62171C", Offset = "0x62171C", VA = "0x62171C")]
	public object GetAsset(AssetReference id)
	{
		return null;
	}

	[Token(Token = "0x6001DEF")]
	[Address(RVA = "0x6222E4", Offset = "0x6222E4", VA = "0x6222E4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001DF0")]
	[Address(RVA = "0x6223D8", Offset = "0x6223D8", VA = "0x6223D8")]
	private void GetAllInactiveGameObjects()
	{
	}

	[Token(Token = "0x6001DF1")]
	[Address(RVA = "0x622588", Offset = "0x622588", VA = "0x622588")]
	private void RecurseAddInactive(IEnumerable<Transform> items)
	{
	}

	[Token(Token = "0x6001DF2")]
	[Address(RVA = "0x622978", Offset = "0x622978", VA = "0x622978")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001DF4")]
	[Address(RVA = "0x623190", Offset = "0x623190", VA = "0x623190")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2090", Offset = "0xEA2090")]
	private static bool <get_Instance>m__0(GameObject g)
	{
		return default(bool);
	}

	[Token(Token = "0x6001DF5")]
	[Address(RVA = "0x623244", Offset = "0x623244", VA = "0x623244")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA20A0", Offset = "0xEA20A0")]
	private static SaveGameManager <get_Instance>m__1(GameObject g)
	{
		return null;
	}

	[Token(Token = "0x6001DF6")]
	[Address(RVA = "0x6232B4", Offset = "0x6232B4", VA = "0x6232B4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA20B0", Offset = "0xEA20B0")]
	private static Transform <GetAllInactiveGameObjects>m__2(GameObject g)
	{
		return null;
	}
}
namespace Serialization
{
	[Token(Token = "0x200041C")]
	public class BinarySerializer : IStorage
	{
		[Token(Token = "0x400147A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA20C0", Offset = "0xEA20C0")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xEA20C0", Offset = "0xEA20C0")]
		private byte[] <Data>k__BackingField;

		[Token(Token = "0x400147B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private MemoryStream _myStream;

		[Token(Token = "0x400147C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private BinaryWriter _writer;

		[Token(Token = "0x400147D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private BinaryReader _reader;

		[Token(Token = "0x170001CD")]
		public byte[] Data
		{
			[Token(Token = "0x6001DFB")]
			[Address(RVA = "0x6233F4", Offset = "0x6233F4", VA = "0x6233F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA20F4", Offset = "0xEA20F4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001DFC")]
			[Address(RVA = "0x6233EC", Offset = "0x6233EC", VA = "0x6233EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2104", Offset = "0xEA2104")]
			private set
			{
			}
		}

		[Token(Token = "0x170001CE")]
		public bool SupportsOnDemand
		{
			[Token(Token = "0x6001E01")]
			[Address(RVA = "0x624750", Offset = "0x624750", VA = "0x624750", Slot = "84")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001DF9")]
		[Address(RVA = "0x6233C4", Offset = "0x6233C4", VA = "0x6233C4")]
		public BinarySerializer()
		{
		}

		[Token(Token = "0x6001DFA")]
		[Address(RVA = "0x6233CC", Offset = "0x6233CC", VA = "0x6233CC")]
		public BinarySerializer(byte[] data)
		{
		}

		[Token(Token = "0x6001DFD")]
		[Address(RVA = "0x6233FC", Offset = "0x6233FC", VA = "0x6233FC")]
		private void EncodeType(object item, Type storedType)
		{
		}

		[Token(Token = "0x6001DFE")]
		[Address(RVA = "0x623804", Offset = "0x623804", VA = "0x623804", Slot = "7")]
		public bool StartSerializing(Entry entry, int id)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DFF")]
		[Address(RVA = "0x623B2C", Offset = "0x623B2C", VA = "0x623B2C", Slot = "4")]
		public void StartSerializing()
		{
		}

		[Token(Token = "0x6001E00")]
		[Address(RVA = "0x623CF0", Offset = "0x623CF0", VA = "0x623CF0", Slot = "5")]
		public void FinishedSerializing()
		{
		}

		[Token(Token = "0x6001E02")]
		[Address(RVA = "0x624758", Offset = "0x624758", VA = "0x624758", Slot = "85")]
		public void BeginOnDemand(int id)
		{
		}

		[Token(Token = "0x6001E03")]
		[Address(RVA = "0x62475C", Offset = "0x62475C", VA = "0x62475C", Slot = "86")]
		public void EndOnDemand()
		{
		}

		[Token(Token = "0x6001E04")]
		[Address(RVA = "0x624760", Offset = "0x624760", VA = "0x624760", Slot = "51")]
		public void BeginWriteObject(int id, Type objectType, bool wasSeen)
		{
		}

		[Token(Token = "0x6001E05")]
		[Address(RVA = "0x624864", Offset = "0x624864", VA = "0x624864", Slot = "76")]
		public void BeginWriteProperties(int count)
		{
		}

		[Token(Token = "0x6001E06")]
		[Address(RVA = "0x624934", Offset = "0x624934", VA = "0x624934", Slot = "80")]
		public void BeginWriteFields(int count)
		{
		}

		[Token(Token = "0x6001E07")]
		[Address(RVA = "0x623574", Offset = "0x623574", VA = "0x623574", Slot = "65")]
		public void WriteSimpleValue(object value)
		{
		}

		[Token(Token = "0x6001E08")]
		[Address(RVA = "0x624BB4", Offset = "0x624BB4", VA = "0x624BB4", Slot = "53")]
		public void BeginWriteList(int count, Type listType)
		{
		}

		[Token(Token = "0x6001E09")]
		[Address(RVA = "0x624C34", Offset = "0x624C34", VA = "0x624C34", Slot = "66")]
		public void BeginWriteDictionary(int count, Type dictionaryType)
		{
		}

		[Token(Token = "0x6001E0A")]
		[Address(RVA = "0x624CB4", Offset = "0x624CB4", VA = "0x624CB4", Slot = "64")]
		public void WriteSimpleArray(int count, Array array)
		{
		}

		[Token(Token = "0x6001E0B")]
		[Address(RVA = "0x625000", Offset = "0x625000", VA = "0x625000", Slot = "61")]
		public void BeginMultiDimensionArray(Type arrayType, int dimensions, int count)
		{
		}

		[Token(Token = "0x6001E0C")]
		[Address(RVA = "0x6250C0", Offset = "0x6250C0", VA = "0x6250C0", Slot = "63")]
		public void WriteArrayDimension(int dimension, int count)
		{
		}

		[Token(Token = "0x6001E0D")]
		[Address(RVA = "0x625140", Offset = "0x625140", VA = "0x625140", Slot = "57")]
		public void BeginWriteObjectArray(int count, Type arrayType)
		{
		}

		[Token(Token = "0x6001E0E")]
		[Address(RVA = "0x6251C0", Offset = "0x6251C0", VA = "0x6251C0", Slot = "12")]
		public Entry[] ShouldWriteFields(Entry[] fields)
		{
			return null;
		}

		[Token(Token = "0x6001E0F")]
		[Address(RVA = "0x6251C8", Offset = "0x6251C8", VA = "0x6251C8", Slot = "13")]
		public Entry[] ShouldWriteProperties(Entry[] properties)
		{
			return null;
		}

		[Token(Token = "0x6001E10")]
		[Address(RVA = "0x6251D0", Offset = "0x6251D0", VA = "0x6251D0")]
		private Type DecodeType(Type storedType)
		{
			return null;
		}

		[Token(Token = "0x6001E11")]
		[Address(RVA = "0x62551C", Offset = "0x62551C", VA = "0x62551C", Slot = "6")]
		public void FinishedDeserializing()
		{
		}

		[Token(Token = "0x6001E12")]
		[Address(RVA = "0x6255F4", Offset = "0x6255F4", VA = "0x6255F4", Slot = "10")]
		public void DeserializeGetName(Entry entry)
		{
		}

		[Token(Token = "0x6001E13")]
		[Address(RVA = "0x6258DC", Offset = "0x6258DC", VA = "0x6258DC", Slot = "9")]
		public object StartDeserializing(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001E14")]
		[Address(RVA = "0x625930", Offset = "0x625930", VA = "0x625930", Slot = "16")]
		public Entry BeginReadProperty(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001E15")]
		[Address(RVA = "0x625938", Offset = "0x625938", VA = "0x625938", Slot = "17")]
		public void EndReadProperty()
		{
		}

		[Token(Token = "0x6001E16")]
		[Address(RVA = "0x62593C", Offset = "0x62593C", VA = "0x62593C", Slot = "18")]
		public Entry BeginReadField(Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001E17")]
		[Address(RVA = "0x625944", Offset = "0x625944", VA = "0x625944", Slot = "19")]
		public void EndReadField()
		{
		}

		[Token(Token = "0x6001E18")]
		[Address(RVA = "0x625948", Offset = "0x625948", VA = "0x625948", Slot = "14")]
		public void StartDeserializing()
		{
		}

		[Token(Token = "0x6001E19")]
		[Address(RVA = "0x62604C", Offset = "0x62604C", VA = "0x62604C", Slot = "11")]
		public void FinishDeserializing(Entry entry)
		{
		}

		[Token(Token = "0x6001E1A")]
		[Address(RVA = "0x626050", Offset = "0x626050", VA = "0x626050", Slot = "30")]
		public Array ReadSimpleArray(Type elementType, int count)
		{
			return null;
		}

		[Token(Token = "0x6001E1B")]
		[Address(RVA = "0x626544", Offset = "0x626544", VA = "0x626544", Slot = "20")]
		public int BeginReadProperties()
		{
			return default(int);
		}

		[Token(Token = "0x6001E1C")]
		[Address(RVA = "0x6265C8", Offset = "0x6265C8", VA = "0x6265C8", Slot = "21")]
		public int BeginReadFields()
		{
			return default(int);
		}

		[Token(Token = "0x6001E1D")]
		public T ReadSimpleValue<T>()
		{
			return (T)null;
		}

		[Token(Token = "0x6001E1E")]
		[Address(RVA = "0x626404", Offset = "0x626404", VA = "0x626404", Slot = "25")]
		public object ReadSimpleValue(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001E1F")]
		[Address(RVA = "0x6269EC", Offset = "0x6269EC", VA = "0x6269EC", Slot = "26")]
		public bool IsMultiDimensionalArray(out int length)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E20")]
		[Address(RVA = "0x626A68", Offset = "0x626A68", VA = "0x626A68", Slot = "37")]
		public int BeginReadDictionary(Type keyType, Type valueType)
		{
			return default(int);
		}

		[Token(Token = "0x6001E21")]
		[Address(RVA = "0x626ACC", Offset = "0x626ACC", VA = "0x626ACC", Slot = "46")]
		public void EndReadDictionary()
		{
		}

		[Token(Token = "0x6001E22")]
		[Address(RVA = "0x626AD0", Offset = "0x626AD0", VA = "0x626AD0", Slot = "47")]
		public int BeginReadObjectArray(Type valueType)
		{
			return default(int);
		}

		[Token(Token = "0x6001E23")]
		[Address(RVA = "0x626B34", Offset = "0x626B34", VA = "0x626B34", Slot = "50")]
		public void EndReadObjectArray()
		{
		}

		[Token(Token = "0x6001E24")]
		[Address(RVA = "0x626B38", Offset = "0x626B38", VA = "0x626B38", Slot = "27")]
		public void BeginReadMultiDimensionalArray(out int dimension, out int count)
		{
		}

		[Token(Token = "0x6001E25")]
		[Address(RVA = "0x626BB8", Offset = "0x626BB8", VA = "0x626BB8", Slot = "28")]
		public void EndReadMultiDimensionalArray()
		{
		}

		[Token(Token = "0x6001E26")]
		[Address(RVA = "0x626BBC", Offset = "0x626BBC", VA = "0x626BBC", Slot = "29")]
		public int ReadArrayDimension(int index)
		{
			return default(int);
		}

		[Token(Token = "0x6001E27")]
		[Address(RVA = "0x626C20", Offset = "0x626C20", VA = "0x626C20", Slot = "33")]
		public int BeginReadList(Type valueType)
		{
			return default(int);
		}

		[Token(Token = "0x6001E28")]
		[Address(RVA = "0x626C84", Offset = "0x626C84", VA = "0x626C84", Slot = "36")]
		public void EndReadList()
		{
		}

		[Token(Token = "0x6001E29")]
		[Address(RVA = "0x626C88", Offset = "0x626C88", VA = "0x626C88", Slot = "31")]
		public int BeginReadObject(out bool isReference)
		{
			return default(int);
		}

		[Token(Token = "0x6001E2A")]
		[Address(RVA = "0x626D2C", Offset = "0x626D2C", VA = "0x626D2C", Slot = "60")]
		public void EndWriteObjectArray()
		{
		}

		[Token(Token = "0x6001E2B")]
		[Address(RVA = "0x626D30", Offset = "0x626D30", VA = "0x626D30", Slot = "56")]
		public void EndWriteList()
		{
		}

		[Token(Token = "0x6001E2C")]
		[Address(RVA = "0x626D34", Offset = "0x626D34", VA = "0x626D34", Slot = "75")]
		public void EndWriteDictionary()
		{
		}

		[Token(Token = "0x6001E2D")]
		[Address(RVA = "0x626D38", Offset = "0x626D38", VA = "0x626D38", Slot = "68")]
		public bool BeginWriteDictionaryKey(int id, object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E2E")]
		[Address(RVA = "0x626D40", Offset = "0x626D40", VA = "0x626D40", Slot = "69")]
		public void EndWriteDictionaryKey()
		{
		}

		[Token(Token = "0x6001E2F")]
		[Address(RVA = "0x626D44", Offset = "0x626D44", VA = "0x626D44", Slot = "72")]
		public bool BeginWriteDictionaryValue(int id, object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E30")]
		[Address(RVA = "0x626D4C", Offset = "0x626D4C", VA = "0x626D4C", Slot = "73")]
		public void EndWriteDictionaryValue()
		{
		}

		[Token(Token = "0x6001E31")]
		[Address(RVA = "0x626D50", Offset = "0x626D50", VA = "0x626D50", Slot = "62")]
		public void EndMultiDimensionArray()
		{
		}

		[Token(Token = "0x6001E32")]
		[Address(RVA = "0x626D54", Offset = "0x626D54", VA = "0x626D54", Slot = "32")]
		public void EndReadObject()
		{
		}

		[Token(Token = "0x6001E33")]
		[Address(RVA = "0x626D58", Offset = "0x626D58", VA = "0x626D58", Slot = "54")]
		public bool BeginWriteListItem(int index, object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E34")]
		[Address(RVA = "0x626D60", Offset = "0x626D60", VA = "0x626D60", Slot = "55")]
		public void EndWriteListItem()
		{
		}

		[Token(Token = "0x6001E35")]
		[Address(RVA = "0x626D64", Offset = "0x626D64", VA = "0x626D64", Slot = "58")]
		public bool BeginWriteObjectArrayItem(int index, object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E36")]
		[Address(RVA = "0x626D6C", Offset = "0x626D6C", VA = "0x626D6C", Slot = "59")]
		public void EndWriteObjectArrayItem()
		{
		}

		[Token(Token = "0x6001E37")]
		[Address(RVA = "0x626D70", Offset = "0x626D70", VA = "0x626D70", Slot = "22")]
		public void EndReadProperties()
		{
		}

		[Token(Token = "0x6001E38")]
		[Address(RVA = "0x626D74", Offset = "0x626D74", VA = "0x626D74", Slot = "23")]
		public void EndReadFields()
		{
		}

		[Token(Token = "0x6001E39")]
		[Address(RVA = "0x626D78", Offset = "0x626D78", VA = "0x626D78", Slot = "34")]
		public object BeginReadListItem(int index, Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001E3A")]
		[Address(RVA = "0x626D80", Offset = "0x626D80", VA = "0x626D80", Slot = "35")]
		public void EndReadListItem()
		{
		}

		[Token(Token = "0x6001E3B")]
		[Address(RVA = "0x626D84", Offset = "0x626D84", VA = "0x626D84", Slot = "39")]
		public object BeginReadDictionaryKeyItem(int index, Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001E3C")]
		[Address(RVA = "0x626D8C", Offset = "0x626D8C", VA = "0x626D8C", Slot = "40")]
		public void EndReadDictionaryKeyItem()
		{
		}

		[Token(Token = "0x6001E3D")]
		[Address(RVA = "0x626D90", Offset = "0x626D90", VA = "0x626D90", Slot = "43")]
		public object BeginReadDictionaryValueItem(int index, Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001E3E")]
		[Address(RVA = "0x626D98", Offset = "0x626D98", VA = "0x626D98", Slot = "44")]
		public void EndReadDictionaryValueItem()
		{
		}

		[Token(Token = "0x6001E3F")]
		[Address(RVA = "0x626D9C", Offset = "0x626D9C", VA = "0x626D9C", Slot = "48")]
		public object BeginReadObjectArrayItem(int index, Entry entry)
		{
			return null;
		}

		[Token(Token = "0x6001E40")]
		[Address(RVA = "0x626DA4", Offset = "0x626DA4", VA = "0x626DA4", Slot = "49")]
		public void EndReadObjectArrayItem()
		{
		}

		[Token(Token = "0x6001E41")]
		[Address(RVA = "0x626DA8", Offset = "0x626DA8", VA = "0x626DA8", Slot = "52")]
		public void EndWriteObject()
		{
		}

		[Token(Token = "0x6001E42")]
		[Address(RVA = "0x626DAC", Offset = "0x626DAC", VA = "0x626DAC", Slot = "78")]
		public void BeginWriteProperty(string name, Type type)
		{
		}

		[Token(Token = "0x6001E43")]
		[Address(RVA = "0x626DB0", Offset = "0x626DB0", VA = "0x626DB0", Slot = "79")]
		public void EndWriteProperty()
		{
		}

		[Token(Token = "0x6001E44")]
		[Address(RVA = "0x626DB4", Offset = "0x626DB4", VA = "0x626DB4", Slot = "82")]
		public void BeginWriteField(string name, Type type)
		{
		}

		[Token(Token = "0x6001E45")]
		[Address(RVA = "0x626DB8", Offset = "0x626DB8", VA = "0x626DB8", Slot = "83")]
		public void EndWriteField()
		{
		}

		[Token(Token = "0x6001E46")]
		[Address(RVA = "0x626DBC", Offset = "0x626DBC", VA = "0x626DBC", Slot = "77")]
		public void EndWriteProperties()
		{
		}

		[Token(Token = "0x6001E47")]
		[Address(RVA = "0x626DC0", Offset = "0x626DC0", VA = "0x626DC0", Slot = "81")]
		public void EndWriteFields()
		{
		}

		[Token(Token = "0x6001E48")]
		[Address(RVA = "0x626DC4", Offset = "0x626DC4", VA = "0x626DC4", Slot = "8")]
		public void FinishSerializing(Entry entry)
		{
		}

		[Token(Token = "0x6001E49")]
		[Address(RVA = "0x626DC8", Offset = "0x626DC8", VA = "0x626DC8", Slot = "38")]
		public void BeginReadDictionaryKeys()
		{
		}

		[Token(Token = "0x6001E4A")]
		[Address(RVA = "0x626DCC", Offset = "0x626DCC", VA = "0x626DCC", Slot = "41")]
		public void EndReadDictionaryKeys()
		{
		}

		[Token(Token = "0x6001E4B")]
		[Address(RVA = "0x626DD0", Offset = "0x626DD0", VA = "0x626DD0", Slot = "42")]
		public void BeginReadDictionaryValues()
		{
		}

		[Token(Token = "0x6001E4C")]
		[Address(RVA = "0x626DD4", Offset = "0x626DD4", VA = "0x626DD4", Slot = "45")]
		public void EndReadDictionaryValues()
		{
		}

		[Token(Token = "0x6001E4D")]
		[Address(RVA = "0x626DD8", Offset = "0x626DD8", VA = "0x626DD8", Slot = "67")]
		public void BeginWriteDictionaryKeys()
		{
		}

		[Token(Token = "0x6001E4E")]
		[Address(RVA = "0x626DDC", Offset = "0x626DDC", VA = "0x626DDC", Slot = "70")]
		public void EndWriteDictionaryKeys()
		{
		}

		[Token(Token = "0x6001E4F")]
		[Address(RVA = "0x626DE0", Offset = "0x626DE0", VA = "0x626DE0", Slot = "71")]
		public void BeginWriteDictionaryValues()
		{
		}

		[Token(Token = "0x6001E50")]
		[Address(RVA = "0x626DE4", Offset = "0x626DE4", VA = "0x626DE4", Slot = "74")]
		public void EndWriteDictionaryValues()
		{
		}

		[Token(Token = "0x6001E51")]
		[Address(RVA = "0x626DE8", Offset = "0x626DE8", VA = "0x626DE8", Slot = "15")]
		public bool HasMore()
		{
			return default(bool);
		}
	}
}
[Token(Token = "0x200041D")]
public static class Storage
{
	[Token(Token = "0x6001E52")]
	[Address(RVA = "0x18F270C", Offset = "0x18F270C", VA = "0x18F270C")]
	public static string SerializeToString(this object obj)
	{
		return null;
	}

	[Token(Token = "0x6001E53")]
	public static T Deserialize<T>(this string data) where T : class
	{
		return null;
	}

	[Token(Token = "0x6001E54")]
	[Address(RVA = "0x18F27D4", Offset = "0x18F27D4", VA = "0x18F27D4")]
	public static object Deserialize(string data)
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x200041E")]
[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xEA2144", Offset = "0xEA2144")]
public class StoredReferences : ScriptableObject
{
	[Token(Token = "0x400147E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<SaveGameManager.StoredEntry> betweenSceneReferences;

	[Token(Token = "0x400147F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<SaveGameManager.StoredEntry> entries;

	[Token(Token = "0x4001480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<string, int> ById;

	[Token(Token = "0x4001481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Dictionary<GameObject, int> ByObject;

	[Token(Token = "0x4001482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2178", Offset = "0xEA2178")]
	private static Func<SaveGameManager.StoredEntry, GameObject> <>f__am$cache0;

	[Token(Token = "0x4001483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2188", Offset = "0xEA2188")]
	private static Func<SaveGameManager.StoredEntry, bool> <>f__am$cache1;

	[Token(Token = "0x4001484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2198", Offset = "0xEA2198")]
	private static Func<SaveGameManager.StoredEntry, bool> <>f__am$cache2;

	[Token(Token = "0x4001485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA21A8", Offset = "0xEA21A8")]
	private static Func<SaveGameManager.StoredEntry, bool> <>f__am$cache3;

	[Token(Token = "0x4001486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA21B8", Offset = "0xEA21B8")]
	private static Func<SaveGameManager.StoredEntry, bool> <>f__am$cache4;

	[Token(Token = "0x4001487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA21C8", Offset = "0xEA21C8")]
	private static Func<IGrouping<GameObject, SaveGameManager.StoredEntry>, SaveGameManager.StoredEntry> <>f__mg$cache0;

	[Token(Token = "0x4001488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA21D8", Offset = "0xEA21D8")]
	private static Func<SaveGameManager.StoredEntry, bool> <>f__am$cache5;

	[Token(Token = "0x4001489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA21E8", Offset = "0xEA21E8")]
	private static Func<SaveGameManager.StoredEntry, GameObject> <>f__am$cache6;

	[Token(Token = "0x170001CF")]
	public int Count
	{
		[Token(Token = "0x6001E57")]
		[Address(RVA = "0x18F2A5C", Offset = "0x18F2A5C", VA = "0x18F2A5C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170001D0")]
	public GameObject[] AllReferences
	{
		[Token(Token = "0x6001E58")]
		[Address(RVA = "0x18F2EB0", Offset = "0x18F2EB0", VA = "0x18F2EB0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001D1")]
	public SaveGameManager.StoredEntry Item
	{
		[Token(Token = "0x6001E5B")]
		[Address(RVA = "0x18F36C8", Offset = "0x18F36C8", VA = "0x18F36C8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001E5C")]
		[Address(RVA = "0x18F3A6C", Offset = "0x18F3A6C", VA = "0x18F3A6C")]
		set
		{
		}
	}

	[Token(Token = "0x170001D2")]
	public SaveGameManager.StoredEntry Item
	{
		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0x18F3C38", Offset = "0x18F3C38", VA = "0x18F3C38")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001E5F")]
		[Address(RVA = "0x18F3D28", Offset = "0x18F3D28", VA = "0x18F3D28")]
		set
		{
		}
	}

	[Token(Token = "0x6001E55")]
	[Address(RVA = "0x18F28A4", Offset = "0x18F28A4", VA = "0x18F28A4")]
	public StoredReferences()
	{
	}

	[Token(Token = "0x6001E56")]
	[Address(RVA = "0x18F2998", Offset = "0x18F2998", VA = "0x18F2998")]
	public void Clear()
	{
	}

	[Token(Token = "0x6001E59")]
	[Address(RVA = "0x18F305C", Offset = "0x18F305C", VA = "0x18F305C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001E5A")]
	[Address(RVA = "0x18F322C", Offset = "0x18F322C", VA = "0x18F322C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001E5D")]
	[Address(RVA = "0x18F3844", Offset = "0x18F3844", VA = "0x18F3844")]
	private void EnsureDictionaries()
	{
	}

	[Token(Token = "0x6001E60")]
	[Address(RVA = "0x18F3EF4", Offset = "0x18F3EF4", VA = "0x18F3EF4")]
	public void Remove(GameObject go)
	{
	}

	[Token(Token = "0x6001E61")]
	[Address(RVA = "0x18F3FBC", Offset = "0x18F3FBC", VA = "0x18F3FBC")]
	public StoredReferences Alive()
	{
		return null;
	}

	[Token(Token = "0x6001E62")]
	[Address(RVA = "0x18F2AD8", Offset = "0x18F2AD8", VA = "0x18F2AD8")]
	private void FixEntries()
	{
	}

	[Token(Token = "0x6001E64")]
	[Address(RVA = "0x18F4218", Offset = "0x18F4218", VA = "0x18F4218")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA21F8", Offset = "0xEA21F8")]
	private static GameObject <get_AllReferences>m__0(SaveGameManager.StoredEntry g)
	{
		return null;
	}

	[Token(Token = "0x6001E65")]
	[Address(RVA = "0x18F4238", Offset = "0x18F4238", VA = "0x18F4238")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2208", Offset = "0xEA2208")]
	private static bool <OnDisable>m__1(SaveGameManager.StoredEntry g)
	{
		return default(bool);
	}

	[Token(Token = "0x6001E66")]
	[Address(RVA = "0x18F42D4", Offset = "0x18F42D4", VA = "0x18F42D4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2218", Offset = "0xEA2218")]
	private static bool <OnEnable>m__2(SaveGameManager.StoredEntry g)
	{
		return default(bool);
	}

	[Token(Token = "0x6001E67")]
	[Address(RVA = "0x18F4370", Offset = "0x18F4370", VA = "0x18F4370")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2228", Offset = "0xEA2228")]
	private static bool <OnEnable>m__3(SaveGameManager.StoredEntry g)
	{
		return default(bool);
	}

	[Token(Token = "0x6001E68")]
	[Address(RVA = "0x18F440C", Offset = "0x18F440C", VA = "0x18F440C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2238", Offset = "0xEA2238")]
	private static bool <OnEnable>m__4(SaveGameManager.StoredEntry g)
	{
		return default(bool);
	}

	[Token(Token = "0x6001E69")]
	[Address(RVA = "0x18F44A8", Offset = "0x18F44A8", VA = "0x18F44A8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2248", Offset = "0xEA2248")]
	private static bool <FixEntries>m__5(SaveGameManager.StoredEntry g)
	{
		return default(bool);
	}

	[Token(Token = "0x6001E6A")]
	[Address(RVA = "0x18F45C4", Offset = "0x18F45C4", VA = "0x18F45C4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2258", Offset = "0xEA2258")]
	private static GameObject <FixEntries>m__6(SaveGameManager.StoredEntry entry)
	{
		return null;
	}
}
[Token(Token = "0x200041F")]
public interface IOnSerializedCallbackReceiver
{
	[Token(Token = "0x6001E6B")]
	void OnSerializing();
}
[Token(Token = "0x2000420")]
[DontStore]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA2268", Offset = "0xEA2268")]
public class StoreInformation : UniqueIdentifier
{
	[Token(Token = "0x2000421")]
	public delegate void ChangedEventHandler<T>(T sender);

	[Token(Token = "0x400148B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static Action RegisterSuccess;

	[Token(Token = "0x400148C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool StoreAllComponents;

	[Token(Token = "0x400148D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static LevelSerializer.StoredData activeData;

	[Token(Token = "0x400148E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[HideInInspector]
	public List<string> Components;

	[Token(Token = "0x400148F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<Component> realComponents;

	[Token(Token = "0x4001490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private IOnSerializedCallbackReceiver[] onSerializedCallbackReceivers;

	[Token(Token = "0x4001491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IControlSerializationEx controlSerialization;

	[Token(Token = "0x4001492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static int totalTrackedComponents;

	[Token(Token = "0x4001493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool enableChangeTracking;

	[Token(Token = "0x4001494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static Stack<Component> modifiedComponents;

	[Token(Token = "0x4001495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Stack<LevelSerializer.StoredData> precachedComponentNames;

	[Token(Token = "0x4001496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static List<string> deletedGUIDs;

	[Token(Token = "0x4001497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Stack<GameObject> modifiedGameObjects;

	[Token(Token = "0x170001D3")]
	public List<Component> RealComponents
	{
		[Token(Token = "0x6001E6F")]
		[Address(RVA = "0x18F4AA8", Offset = "0x18F4AA8", VA = "0x18F4AA8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001D4")]
	public IOnSerializedCallbackReceiver[] OnSerializedCallbackReceivers
	{
		[Token(Token = "0x6001E70")]
		[Address(RVA = "0x18F4AB0", Offset = "0x18F4AB0", VA = "0x18F4AB0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001D5")]
	public IControlSerializationEx ControlSerialization
	{
		[Token(Token = "0x6001E71")]
		[Address(RVA = "0x18F4AB8", Offset = "0x18F4AB8", VA = "0x18F4AB8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001D6")]
	public static int TotalTrackedComponents
	{
		[Token(Token = "0x6001E72")]
		[Address(RVA = "0x18F4AC0", Offset = "0x18F4AC0", VA = "0x18F4AC0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170001D7")]
	public static bool EnableChangeTracking
	{
		[Token(Token = "0x6001E73")]
		[Address(RVA = "0x18F4B4C", Offset = "0x18F4B4C", VA = "0x18F4B4C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x14000085")]
	public static event Action OnClear
	{
		[Token(Token = "0x6001E6D")]
		[Address(RVA = "0x18F47C0", Offset = "0x18F47C0", VA = "0x18F47C0")]
		add
		{
		}
		[Token(Token = "0x6001E6E")]
		[Address(RVA = "0x18F4934", Offset = "0x18F4934", VA = "0x18F4934")]
		remove
		{
		}
	}

	[Token(Token = "0x6001E6C")]
	[Address(RVA = "0x18F45E4", Offset = "0x18F45E4", VA = "0x18F45E4")]
	public StoreInformation()
	{
	}

	[Token(Token = "0x6001E74")]
	[Address(RVA = "0x18F4BD8", Offset = "0x18F4BD8", VA = "0x18F4BD8", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6001E75")]
	[Address(RVA = "0x18F51D4", Offset = "0x18F51D4", VA = "0x18F51D4", Slot = "5")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6001E76")]
	[Address(RVA = "0x18F53B8", Offset = "0x18F53B8", VA = "0x18F53B8")]
	public static Stack<Component> GetModifiedValues()
	{
		return null;
	}

	[Token(Token = "0x6001E77")]
	[Address(RVA = "0x18F5444", Offset = "0x18F5444", VA = "0x18F5444")]
	public static Stack<GameObject> GetModifiedGameObjects()
	{
		return null;
	}

	[Token(Token = "0x6001E78")]
	[Address(RVA = "0x18F54D0", Offset = "0x18F54D0", VA = "0x18F54D0")]
	public static Stack<LevelSerializer.StoredData> GetStoredDataValues()
	{
		return null;
	}

	[Token(Token = "0x6001E79")]
	[Address(RVA = "0x18F555C", Offset = "0x18F555C", VA = "0x18F555C")]
	public static List<string> GetDeletedGUIDs()
	{
		return null;
	}

	[Token(Token = "0x6001E7A")]
	public static void UnverifiedAdd<T>(T o)
	{
	}

	[Token(Token = "0x6001E7B")]
	public static void VerifiedAdd<T>(T o)
	{
	}

	[Token(Token = "0x6001E7C")]
	[Address(RVA = "0x18F55E8", Offset = "0x18F55E8", VA = "0x18F55E8")]
	public static void UnverifiedAdd(Component o)
	{
	}

	[Token(Token = "0x6001E7D")]
	[Address(RVA = "0x18F5740", Offset = "0x18F5740", VA = "0x18F5740")]
	public static void VerifiedAdd(Component o)
	{
	}

	[Token(Token = "0x6001E7E")]
	[Address(RVA = "0x18F5858", Offset = "0x18F5858", VA = "0x18F5858")]
	public static void VerifiedAdd(GameObject o)
	{
	}

	[Token(Token = "0x6001E7F")]
	[Address(RVA = "0x18F5910", Offset = "0x18F5910", VA = "0x18F5910")]
	public static void UnverifiedAdd(GameObject o)
	{
	}

	[Token(Token = "0x6001E80")]
	[Address(RVA = "0x18F5A4C", Offset = "0x18F5A4C", VA = "0x18F5A4C")]
	public static void StaticInit()
	{
	}

	[Token(Token = "0x6001E81")]
	[Address(RVA = "0x18F5BC8", Offset = "0x18F5BC8", VA = "0x18F5BC8")]
	public static void ReleaseStacks()
	{
	}
}
[Token(Token = "0x2000422")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA22F4", Offset = "0xEA22F4")]
[ExecuteInEditMode]
[DontStore]
public class StoreMaterials : MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x2000423")]
	public class MaterialProperty
	{
		[Token(Token = "0x2000424")]
		public enum PropertyType
		{
			[Token(Token = "0x40014A0")]
			unknown = -1,
			[Token(Token = "0x40014A1")]
			color,
			[Token(Token = "0x40014A2")]
			vector,
			[Token(Token = "0x40014A3")]
			texture,
			[Token(Token = "0x40014A4")]
			textureOffset,
			[Token(Token = "0x40014A5")]
			textureScale,
			[Token(Token = "0x40014A6")]
			matrix,
			[Token(Token = "0x40014A7")]
			real
		}

		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string name;

		[Token(Token = "0x400149E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public PropertyType type;

		[Token(Token = "0x6001E91")]
		[Address(RVA = "0x18FAB7C", Offset = "0x18FAB7C", VA = "0x18FAB7C")]
		public MaterialProperty()
		{
		}
	}

	[Token(Token = "0x2000425")]
	public class StoredValue
	{
		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public MaterialProperty Property;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public object Value;

		[Token(Token = "0x6001E92")]
		[Address(RVA = "0x18FC324", Offset = "0x18FC324", VA = "0x18FC324")]
		public StoredValue()
		{
		}
	}

	[Token(Token = "0x4001498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public List<MaterialProperty> MaterialProperties;

	[Token(Token = "0x4001499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Index<string, List<MaterialProperty>> cache;

	[Token(Token = "0x400149A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Color transparent;

	[Token(Token = "0x400149B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA234C", Offset = "0xEA234C")]
	private static Func<Material, bool> <>f__am$cache0;

	[Token(Token = "0x400149C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA235C", Offset = "0xEA235C")]
	private static Func<MaterialProperty, string> <>f__am$cache1;

	[Token(Token = "0x6001E87")]
	[Address(RVA = "0x18F9D90", Offset = "0x18F9D90", VA = "0x18F9D90")]
	static StoreMaterials()
	{
	}

	[Token(Token = "0x6001E88")]
	[Address(RVA = "0x18F9EDC", Offset = "0x18F9EDC", VA = "0x18F9EDC")]
	public StoreMaterials()
	{
	}

	[Token(Token = "0x6001E89")]
	[Address(RVA = "0x18FAB84", Offset = "0x18FAB84", VA = "0x18FAB84")]
	public List<StoredValue> GetValues(Material m)
	{
		return null;
	}

	[Token(Token = "0x6001E8A")]
	[Address(RVA = "0x18FC32C", Offset = "0x18FC32C", VA = "0x18FC32C")]
	public void SetValues(Material m, IEnumerable<StoredValue> values)
	{
	}

	[Token(Token = "0x6001E8B")]
	[Address(RVA = "0x18FB104", Offset = "0x18FB104", VA = "0x18FB104")]
	public List<MaterialProperty> GetShaderProperties(Material material)
	{
		return null;
	}

	[Token(Token = "0x6001E8C")]
	[Address(RVA = "0x18FCCA4", Offset = "0x18FCCA4", VA = "0x18FCCA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001E8D")]
	[Address(RVA = "0x18FCCA8", Offset = "0x18FCCA8", VA = "0x18FCCA8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001E8E")]
	[Address(RVA = "0x18FD0A4", Offset = "0x18FD0A4", VA = "0x18FD0A4")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA236C", Offset = "0xEA236C")]
	private static bool <OnEnable>m__0(Material m)
	{
		return default(bool);
	}

	[Token(Token = "0x6001E8F")]
	[Address(RVA = "0x18FD12C", Offset = "0x18FD12C", VA = "0x18FD12C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA237C", Offset = "0xEA237C")]
	private IEnumerable<MaterialProperty> <OnEnable>m__1(Material m)
	{
		return null;
	}

	[Token(Token = "0x6001E90")]
	[Address(RVA = "0x18FD130", Offset = "0x18FD130", VA = "0x18FD130")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA238C", Offset = "0xEA238C")]
	private static string <OnEnable>m__2(MaterialProperty m)
	{
		return null;
	}
}
[Token(Token = "0x2000426")]
[SpecialistProvider]
public class TimeAsFloat : ISpecialist
{
	[Token(Token = "0x6001E93")]
	[Address(RVA = "0x18FE608", Offset = "0x18FE608", VA = "0x18FE608")]
	public TimeAsFloat()
	{
	}

	[Token(Token = "0x6001E94")]
	[Address(RVA = "0x18FE610", Offset = "0x18FE610", VA = "0x18FE610", Slot = "4")]
	public object Serialize(object value)
	{
		return null;
	}

	[Token(Token = "0x6001E95")]
	[Address(RVA = "0x18FE714", Offset = "0x18FE714", VA = "0x18FE714", Slot = "5")]
	public object Deserialize(object value)
	{
		return null;
	}
}
[Token(Token = "0x2000427")]
[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA23AC", Offset = "0xEA23AC")]
public class StoreComponent : Attribute
{
	[Token(Token = "0x6001E96")]
	[Address(RVA = "0x18F289C", Offset = "0x18F289C", VA = "0x18F289C")]
	public StoreComponent()
	{
	}
}
[Token(Token = "0x2000428")]
[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA23C0", Offset = "0xEA23C0")]
public class DontStoreAttribute : Attribute
{
	[Token(Token = "0x6001E97")]
	[Address(RVA = "0x1923F2C", Offset = "0x1923F2C", VA = "0x1923F2C")]
	public DontStoreAttribute()
	{
	}
}
[Token(Token = "0x2000429")]
[ExecuteInEditMode]
[DontStore]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA23D4", Offset = "0xEA23D4")]
public class UniqueIdentifier : MonoBehaviour
{
	[Token(Token = "0x40014AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	[SerializeField]
	private bool destroyIfMissingFromSave;

	[Token(Token = "0x40014AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA243C", Offset = "0xEA243C")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xEA243C", Offset = "0xEA243C")]
	private bool <IsDeserialized>k__BackingField;

	[Token(Token = "0x40014AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
	private bool reg;

	[Token(Token = "0x40014AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string _id;

	[Token(Token = "0x40014AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static List<UniqueIdentifier> allIdentifiers;

	[Token(Token = "0x40014AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	[HideInInspector]
	public string classId;

	[Token(Token = "0x170001D8")]
	public bool DestroyIfMissingFromSave
	{
		[Token(Token = "0x6001E99")]
		[Address(RVA = "0x18FF6A8", Offset = "0x18FF6A8", VA = "0x18FF6A8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001E9A")]
		[Address(RVA = "0x18FF6B0", Offset = "0x18FF6B0", VA = "0x18FF6B0")]
		set
		{
		}
	}

	[Token(Token = "0x170001D9")]
	public bool IsDeserialized
	{
		[Token(Token = "0x6001E9B")]
		[Address(RVA = "0x18FF6B8", Offset = "0x18FF6B8", VA = "0x18FF6B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2480", Offset = "0xEA2480")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001E9C")]
		[Address(RVA = "0x18FF6C0", Offset = "0x18FF6C0", VA = "0x18FF6C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2490", Offset = "0xEA2490")]
		set
		{
		}
	}

	[Token(Token = "0x170001DA")]
	public string Id
	{
		[Token(Token = "0x6001E9D")]
		[Address(RVA = "0x18FF6C8", Offset = "0x18FF6C8", VA = "0x18FF6C8")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001E9E")]
		[Address(RVA = "0x18FF814", Offset = "0x18FF814", VA = "0x18FF814")]
		set
		{
		}
	}

	[Token(Token = "0x170001DB")]
	public static List<UniqueIdentifier> AllIdentifiers
	{
		[Token(Token = "0x6001EA0")]
		[Address(RVA = "0x18FF978", Offset = "0x18FF978", VA = "0x18FF978")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001EA1")]
		[Address(RVA = "0x18FFA04", Offset = "0x18FFA04", VA = "0x18FFA04")]
		set
		{
		}
	}

	[Token(Token = "0x170001DC")]
	public string ClassId
	{
		[Token(Token = "0x6001EA2")]
		[Address(RVA = "0x18FFA94", Offset = "0x18FFA94", VA = "0x18FFA94")]
		get
		{
			return null;
		}
		[Token(Token = "0x6001EA3")]
		[Address(RVA = "0x18FFA9C", Offset = "0x18FFA9C", VA = "0x18FFA9C")]
		set
		{
		}
	}

	[Token(Token = "0x6001E98")]
	[Address(RVA = "0x18F46A0", Offset = "0x18F46A0", VA = "0x18F46A0")]
	public UniqueIdentifier()
	{
	}

	[Token(Token = "0x6001E9F")]
	[Address(RVA = "0x18FF8D4", Offset = "0x18FF8D4", VA = "0x18FF8D4")]
	public static GameObject GetByName(string id)
	{
		return null;
	}

	[Token(Token = "0x6001EA4")]
	[Address(RVA = "0x18FFBB8", Offset = "0x18FFBB8", VA = "0x18FFBB8")]
	public void FullConfigure()
	{
	}

	[Token(Token = "0x6001EA5")]
	[Address(RVA = "0x18F5000", Offset = "0x18F5000", VA = "0x18F5000", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x6001EA6")]
	[Address(RVA = "0x18FFCF0", Offset = "0x18FFCF0", VA = "0x18FFCF0")]
	protected void ConfigureId()
	{
	}

	[Token(Token = "0x6001EA7")]
	[Address(RVA = "0x18F52B0", Offset = "0x18F52B0", VA = "0x18F52B0", Slot = "5")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6001EA9")]
	[Address(RVA = "0x18FFE8C", Offset = "0x18FFE8C", VA = "0x18FFE8C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA24A0", Offset = "0xEA24A0")]
	private void <Awake>m__0()
	{
	}
}
[Token(Token = "0x200042A")]
public static class SerializationHelper
{
	[Token(Token = "0x6001EAA")]
	[Address(RVA = "0x64F914", Offset = "0x64F914", VA = "0x64F914")]
	public static bool IsDeserialized(this GameObject go)
	{
		return default(bool);
	}
}
[Token(Token = "0x200042B")]
[AttributeAttribute(Name = "SerializerAttribute", RVA = "0xEA24D0", Offset = "0xEA24D0")]
public class SerializeVector3 : SerializerExtensionBase<Vector3>
{
	[Token(Token = "0x2000556")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2548", Offset = "0xEA2548")]
	private sealed class <Load>c__AnonStorey0
	{
		[Token(Token = "0x4001B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal object[] data;

		[Token(Token = "0x60024F6")]
		[Address(RVA = "0x68858C", Offset = "0x68858C", VA = "0x68858C")]
		public <Load>c__AnonStorey0()
		{
		}

		[Token(Token = "0x60024F7")]
		[Address(RVA = "0x688594", Offset = "0x688594", VA = "0x688594")]
		internal object <>m__0(Dictionary<string, object> d)
		{
			return null;
		}
	}

	[Token(Token = "0x6001EAB")]
	[Address(RVA = "0x688280", Offset = "0x688280", VA = "0x688280")]
	public SerializeVector3()
	{
	}

	[Token(Token = "0x6001EAC")]
	[Address(RVA = "0x6882E4", Offset = "0x6882E4", VA = "0x6882E4", Slot = "6")]
	public override IEnumerable<object> Save(Vector3 target)
	{
		return null;
	}

	[Token(Token = "0x6001EAD")]
	[Address(RVA = "0x6884B0", Offset = "0x6884B0", VA = "0x6884B0", Slot = "7")]
	public override object Load(object[] data, object instance)
	{
		return null;
	}
}
[Token(Token = "0x200042C")]
[AttributeAttribute(Name = "SerializerAttribute", RVA = "0xEA2558", Offset = "0xEA2558")]
public class SerializeColor : SerializerExtensionBase<Color>
{
	[Token(Token = "0x6001EAE")]
	[Address(RVA = "0x67F970", Offset = "0x67F970", VA = "0x67F970")]
	public SerializeColor()
	{
	}

	[Token(Token = "0x6001EAF")]
	[Address(RVA = "0x67F9D4", Offset = "0x67F9D4", VA = "0x67F9D4", Slot = "6")]
	public override IEnumerable<object> Save(Color target)
	{
		return null;
	}

	[Token(Token = "0x6001EB0")]
	[Address(RVA = "0x67FC0C", Offset = "0x67FC0C", VA = "0x67FC0C", Slot = "7")]
	public override object Load(object[] data, object instance)
	{
		return null;
	}
}
[Token(Token = "0x200042D")]
[AttributeAttribute(Name = "SerializerAttribute", RVA = "0xEA25D0", Offset = "0xEA25D0")]
public class SerializeVector4 : SerializerExtensionBase<Vector4>
{
	[Token(Token = "0x6001EB1")]
	[Address(RVA = "0x688A68", Offset = "0x688A68", VA = "0x688A68")]
	public SerializeVector4()
	{
	}

	[Token(Token = "0x6001EB2")]
	[Address(RVA = "0x688ACC", Offset = "0x688ACC", VA = "0x688ACC", Slot = "6")]
	public override IEnumerable<object> Save(Vector4 target)
	{
		return null;
	}

	[Token(Token = "0x6001EB3")]
	[Address(RVA = "0x688D04", Offset = "0x688D04", VA = "0x688D04", Slot = "7")]
	public override object Load(object[] data, object instance)
	{
		return null;
	}
}
[Token(Token = "0x200042E")]
[AttributeAttribute(Name = "SerializerAttribute", RVA = "0xEA2648", Offset = "0xEA2648")]
public class SerializeVector2 : SerializerExtensionBase<Vector2>
{
	[Token(Token = "0x6001EB4")]
	[Address(RVA = "0x687EFC", Offset = "0x687EFC", VA = "0x687EFC")]
	public SerializeVector2()
	{
	}

	[Token(Token = "0x6001EB5")]
	[Address(RVA = "0x687F60", Offset = "0x687F60", VA = "0x687F60", Slot = "6")]
	public override IEnumerable<object> Save(Vector2 target)
	{
		return null;
	}

	[Token(Token = "0x6001EB6")]
	[Address(RVA = "0x6880C0", Offset = "0x6880C0", VA = "0x6880C0", Slot = "7")]
	public override object Load(object[] data, object instance)
	{
		return null;
	}
}
[Token(Token = "0x200042F")]
[AttributeAttribute(Name = "SerializerAttribute", RVA = "0xEA26C0", Offset = "0xEA26C0")]
public class SerializeAnimationState : SerializerExtensionBase<AnimationState>
{
	[Token(Token = "0x2000557")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2738", Offset = "0xEA2738")]
	private sealed class <Load>c__AnonStorey0
	{
		[Token(Token = "0x4001B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal object uo;

		[Token(Token = "0x4001B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal object[] data;

		[Token(Token = "0x60024F8")]
		[Address(RVA = "0x6506D4", Offset = "0x6506D4", VA = "0x6506D4")]
		public <Load>c__AnonStorey0()
		{
		}

		[Token(Token = "0x60024F9")]
		[Address(RVA = "0x6506DC", Offset = "0x6506DC", VA = "0x6506DC")]
		internal object <>m__0(Dictionary<string, object> d)
		{
			return null;
		}
	}

	[Token(Token = "0x6001EB7")]
	[Address(RVA = "0x650468", Offset = "0x650468", VA = "0x650468")]
	public SerializeAnimationState()
	{
	}

	[Token(Token = "0x6001EB8")]
	[Address(RVA = "0x6504CC", Offset = "0x6504CC", VA = "0x6504CC", Slot = "6")]
	public override IEnumerable<object> Save(AnimationState target)
	{
		return null;
	}

	[Token(Token = "0x6001EB9")]
	[Address(RVA = "0x6505B4", Offset = "0x6505B4", VA = "0x6505B4", Slot = "7")]
	public override object Load(object[] data, object instance)
	{
		return null;
	}
}
[Token(Token = "0x2000430")]
[AttributeAttribute(Name = "SerializerAttribute", RVA = "0xEA2748", Offset = "0xEA2748")]
public class SerializeWaitForSeconds : SerializerExtensionBase<WaitForSeconds>
{
	[Token(Token = "0x6001EBA")]
	[Address(RVA = "0x6892B4", Offset = "0x6892B4", VA = "0x6892B4")]
	public SerializeWaitForSeconds()
	{
	}

	[Token(Token = "0x6001EBB")]
	[Address(RVA = "0x689318", Offset = "0x689318", VA = "0x689318", Slot = "6")]
	public override IEnumerable<object> Save(WaitForSeconds target)
	{
		return null;
	}

	[Token(Token = "0x6001EBC")]
	[Address(RVA = "0x6894F0", Offset = "0x6894F0", VA = "0x6894F0", Slot = "7")]
	public override object Load(object[] data, object instance)
	{
		return null;
	}
}
[Token(Token = "0x2000431")]
[AttributeAttribute(Name = "SerializerAttribute", RVA = "0xEA27C0", Offset = "0xEA27C0")]
public class SerializeQuaternion : SerializerExtensionBase<Quaternion>
{
	[Token(Token = "0x2000558")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2838", Offset = "0xEA2838")]
	private sealed class <Load>c__AnonStorey0
	{
		[Token(Token = "0x4001B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal object[] data;

		[Token(Token = "0x60024FA")]
		[Address(RVA = "0x683C04", Offset = "0x683C04", VA = "0x683C04")]
		public <Load>c__AnonStorey0()
		{
		}

		[Token(Token = "0x60024FB")]
		[Address(RVA = "0x683C0C", Offset = "0x683C0C", VA = "0x683C0C")]
		internal object <>m__0(Dictionary<string, object> d)
		{
			return null;
		}
	}

	[Token(Token = "0x6001EBD")]
	[Address(RVA = "0x68388C", Offset = "0x68388C", VA = "0x68388C")]
	public SerializeQuaternion()
	{
	}

	[Token(Token = "0x6001EBE")]
	[Address(RVA = "0x6838F0", Offset = "0x6838F0", VA = "0x6838F0", Slot = "6")]
	public override IEnumerable<object> Save(Quaternion target)
	{
		return null;
	}

	[Token(Token = "0x6001EBF")]
	[Address(RVA = "0x683B28", Offset = "0x683B28", VA = "0x683B28", Slot = "7")]
	public override object Load(object[] data, object instance)
	{
		return null;
	}
}
[Token(Token = "0x2000432")]
[AttributeAttribute(Name = "SerializerAttribute", RVA = "0xEA2848", Offset = "0xEA2848")]
public class SerializeBounds : SerializerExtensionBase<Bounds>
{
	[Token(Token = "0x6001EC0")]
	[Address(RVA = "0x650D64", Offset = "0x650D64", VA = "0x650D64")]
	public SerializeBounds()
	{
	}

	[Token(Token = "0x6001EC1")]
	[Address(RVA = "0x650DC8", Offset = "0x650DC8", VA = "0x650DC8", Slot = "6")]
	public override IEnumerable<object> Save(Bounds target)
	{
		return null;
	}

	[Token(Token = "0x6001EC2")]
	[Address(RVA = "0x65115C", Offset = "0x65115C", VA = "0x65115C", Slot = "7")]
	public override object Load(object[] data, object instance)
	{
		return null;
	}
}
[Token(Token = "0x2000433")]
public abstract class ComponentSerializerExtensionBase<T> : IComponentSerializer where T : Component
{
	[Token(Token = "0x6001EC3")]
	protected ComponentSerializerExtensionBase()
	{
	}

	[Token(Token = "0x6001EC4")]
	public abstract IEnumerable<object> Save(T target);

	[Token(Token = "0x6001EC5")]
	public abstract void LoadInto(object[] data, T instance);

	[Token(Token = "0x6001EC6")]
	public byte[] Serialize(Component component)
	{
		return null;
	}

	[Token(Token = "0x6001EC7")]
	public void Deserialize(byte[] data, Component instance)
	{
	}
}
[Token(Token = "0x2000434")]
public class SerializerExtensionBase<T> : ISerializeObject
{
	[Token(Token = "0x6001EC8")]
	public SerializerExtensionBase()
	{
	}

	[Token(Token = "0x6001EC9")]
	public object[] Serialize(object target)
	{
		return null;
	}

	[Token(Token = "0x6001ECA")]
	public object Deserialize(object[] data, object instance)
	{
		return null;
	}

	[Token(Token = "0x6001ECB")]
	public virtual IEnumerable<object> Save(T target)
	{
		return null;
	}

	[Token(Token = "0x6001ECC")]
	public virtual object Load(object[] data, object instance)
	{
		return null;
	}

	[Token(Token = "0x6001ECD")]
	public virtual bool CanBeSerialized(Type targetType, object instance)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000435")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA28C0", Offset = "0xEA28C0")]
public class SerializeBoxCollider : ComponentSerializerExtensionBase<BoxCollider>
{
	[Token(Token = "0x6001ECE")]
	[Address(RVA = "0x6515A8", Offset = "0x6515A8", VA = "0x6515A8")]
	public SerializeBoxCollider()
	{
	}

	[Token(Token = "0x6001ECF")]
	[Address(RVA = "0x65160C", Offset = "0x65160C", VA = "0x65160C", Slot = "6")]
	public override IEnumerable<object> Save(BoxCollider target)
	{
		return null;
	}

	[Token(Token = "0x6001ED0")]
	[Address(RVA = "0x651AC8", Offset = "0x651AC8", VA = "0x651AC8", Slot = "7")]
	public override void LoadInto(object[] data, BoxCollider instance)
	{
	}
}
[Token(Token = "0x2000436")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA2938", Offset = "0xEA2938")]
public class SerializeTerrain : ComponentSerializerExtensionBase<Terrain>
{
	[Token(Token = "0x6001ED1")]
	[Address(RVA = "0x68646C", Offset = "0x68646C", VA = "0x68646C")]
	public SerializeTerrain()
	{
	}

	[Token(Token = "0x6001ED2")]
	[Address(RVA = "0x6864D0", Offset = "0x6864D0", VA = "0x6864D0", Slot = "6")]
	public override IEnumerable<object> Save(Terrain target)
	{
		return null;
	}

	[Token(Token = "0x6001ED3")]
	[Address(RVA = "0x6865DC", Offset = "0x6865DC", VA = "0x6865DC", Slot = "7")]
	public override void LoadInto(object[] data, Terrain instance)
	{
	}
}
[Token(Token = "0x2000437")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA29B0", Offset = "0xEA29B0")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA29B0", Offset = "0xEA29B0")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA29B0", Offset = "0xEA29B0")]
public class SerializeCollider : ComponentSerializerExtensionBase<Collider>
{
	[Token(Token = "0x6001ED4")]
	[Address(RVA = "0x67F5C8", Offset = "0x67F5C8", VA = "0x67F5C8")]
	public SerializeCollider()
	{
	}

	[Token(Token = "0x6001ED5")]
	[Address(RVA = "0x67F62C", Offset = "0x67F62C", VA = "0x67F62C", Slot = "6")]
	public override IEnumerable<object> Save(Collider target)
	{
		return null;
	}

	[Token(Token = "0x6001ED6")]
	[Address(RVA = "0x67F7B8", Offset = "0x67F7B8", VA = "0x67F7B8", Slot = "7")]
	public override void LoadInto(object[] data, Collider instance)
	{
	}
}
[Token(Token = "0x2000438")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA2A80", Offset = "0xEA2A80")]
public class SerializeCapsuleCollider : ComponentSerializerExtensionBase<CapsuleCollider>
{
	[Token(Token = "0x6001ED7")]
	[Address(RVA = "0x67EC48", Offset = "0x67EC48", VA = "0x67EC48")]
	public SerializeCapsuleCollider()
	{
	}

	[Token(Token = "0x6001ED8")]
	[Address(RVA = "0x67ECAC", Offset = "0x67ECAC", VA = "0x67ECAC", Slot = "6")]
	public override IEnumerable<object> Save(CapsuleCollider target)
	{
		return null;
	}

	[Token(Token = "0x6001ED9")]
	[Address(RVA = "0x67F0D0", Offset = "0x67F0D0", VA = "0x67F0D0", Slot = "7")]
	public override void LoadInto(object[] data, CapsuleCollider instance)
	{
	}
}
[Token(Token = "0x2000439")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA2AF8", Offset = "0xEA2AF8")]
public class SerializeSphereCollider : ComponentSerializerExtensionBase<SphereCollider>
{
	[Token(Token = "0x6001EDA")]
	[Address(RVA = "0x685C18", Offset = "0x685C18", VA = "0x685C18")]
	public SerializeSphereCollider()
	{
	}

	[Token(Token = "0x6001EDB")]
	[Address(RVA = "0x685C7C", Offset = "0x685C7C", VA = "0x685C7C", Slot = "6")]
	public override IEnumerable<object> Save(SphereCollider target)
	{
		return null;
	}

	[Token(Token = "0x6001EDC")]
	[Address(RVA = "0x686020", Offset = "0x686020", VA = "0x686020", Slot = "7")]
	public override void LoadInto(object[] data, SphereCollider instance)
	{
	}
}
[Token(Token = "0x200043A")]
[AttributeAttribute(Name = "SerializerAttribute", RVA = "0xEA2B70", Offset = "0xEA2B70")]
public class SerializeTexture2D : SerializerExtensionBase<Texture2D>
{
	[Token(Token = "0x6001EDD")]
	[Address(RVA = "0x6866E8", Offset = "0x6866E8", VA = "0x6866E8")]
	public SerializeTexture2D()
	{
	}

	[Token(Token = "0x6001EDE")]
	[Address(RVA = "0x68674C", Offset = "0x68674C", VA = "0x68674C", Slot = "6")]
	public override IEnumerable<object> Save(Texture2D target)
	{
		return null;
	}

	[Token(Token = "0x6001EDF")]
	[Address(RVA = "0x686DF0", Offset = "0x686DF0", VA = "0x686DF0", Slot = "7")]
	public override object Load(object[] data, object instance)
	{
		return null;
	}

	[Token(Token = "0x6001EE0")]
	[Address(RVA = "0x687D40", Offset = "0x687D40", VA = "0x687D40", Slot = "8")]
	public override bool CanBeSerialized(Type targetType, object instance)
	{
		return default(bool);
	}
}
[Token(Token = "0x200043B")]
[AttributeAttribute(Name = "SerializerAttribute", RVA = "0xEA2BE8", Offset = "0xEA2BE8")]
public class SerializeMaterial : SerializerExtensionBase<Material>
{
	[Token(Token = "0x6001EE1")]
	[Address(RVA = "0x682254", Offset = "0x682254", VA = "0x682254")]
	public SerializeMaterial()
	{
	}

	[Token(Token = "0x6001EE2")]
	[Address(RVA = "0x6822B8", Offset = "0x6822B8", VA = "0x6822B8", Slot = "6")]
	public override IEnumerable<object> Save(Material target)
	{
		return null;
	}

	[Token(Token = "0x6001EE3")]
	[Address(RVA = "0x682744", Offset = "0x682744", VA = "0x682744")]
	private StoreMaterials GetStore()
	{
		return null;
	}

	[Token(Token = "0x6001EE4")]
	[Address(RVA = "0x682930", Offset = "0x682930", VA = "0x682930", Slot = "7")]
	public override object Load(object[] data, object instance)
	{
		return null;
	}

	[Token(Token = "0x6001EE5")]
	[Address(RVA = "0x682E60", Offset = "0x682E60", VA = "0x682E60", Slot = "8")]
	public override bool CanBeSerialized(Type targetType, object instance)
	{
		return default(bool);
	}
}
[Token(Token = "0x200043C")]
[AttributeAttribute(Name = "SubTypeSerializerAttribute", RVA = "0xEA2C60", Offset = "0xEA2C60")]
[AttributeAttribute(Name = "SerializerAttribute", RVA = "0xEA2C60", Offset = "0xEA2C60")]
[AttributeAttribute(Name = "SerializerAttribute", RVA = "0xEA2C60", Offset = "0xEA2C60")]
[AttributeAttribute(Name = "SerializerAttribute", RVA = "0xEA2C60", Offset = "0xEA2C60")]
[AttributeAttribute(Name = "SubTypeSerializerAttribute", RVA = "0xEA2C60", Offset = "0xEA2C60")]
[AttributeAttribute(Name = "SerializerAttribute", RVA = "0xEA2C60", Offset = "0xEA2C60")]
public class SerializeAssetReference : SerializerExtensionBase<object>
{
	[Token(Token = "0x40014B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static SerializeAssetReference instance;

	[Token(Token = "0x6001EE6")]
	[Address(RVA = "0x650914", Offset = "0x650914", VA = "0x650914")]
	public SerializeAssetReference()
	{
	}

	[Token(Token = "0x6001EE7")]
	[Address(RVA = "0x650978", Offset = "0x650978", VA = "0x650978", Slot = "6")]
	public override IEnumerable<object> Save(object target)
	{
		return null;
	}

	[Token(Token = "0x6001EE8")]
	[Address(RVA = "0x650AD8", Offset = "0x650AD8", VA = "0x650AD8", Slot = "8")]
	public override bool CanBeSerialized(Type targetType, object instance)
	{
		return default(bool);
	}

	[Token(Token = "0x6001EE9")]
	[Address(RVA = "0x650BA8", Offset = "0x650BA8", VA = "0x650BA8", Slot = "7")]
	public override object Load(object[] data, object instance)
	{
		return null;
	}
}
[Token(Token = "0x200043D")]
[AttributeAttribute(Name = "SubTypeSerializerAttribute", RVA = "0xEA2DB4", Offset = "0xEA2DB4")]
public class SerializeScriptableObjectReference : SerializerExtensionBase<object>
{
	[Token(Token = "0x6001EEB")]
	[Address(RVA = "0x6854E8", Offset = "0x6854E8", VA = "0x6854E8")]
	public SerializeScriptableObjectReference()
	{
	}

	[Token(Token = "0x6001EEC")]
	[Address(RVA = "0x68554C", Offset = "0x68554C", VA = "0x68554C", Slot = "6")]
	public override IEnumerable<object> Save(object target)
	{
		return null;
	}

	[Token(Token = "0x6001EED")]
	[Address(RVA = "0x685908", Offset = "0x685908", VA = "0x685908", Slot = "8")]
	public override bool CanBeSerialized(Type targetType, object instance)
	{
		return default(bool);
	}

	[Token(Token = "0x6001EEE")]
	[Address(RVA = "0x685918", Offset = "0x685918", VA = "0x685918", Slot = "7")]
	public override object Load(object[] data, object instance)
	{
		return null;
	}
}
[Token(Token = "0x200043E")]
[AttributeAttribute(Name = "SerializerAttribute", RVA = "0xEA2E2C", Offset = "0xEA2E2C")]
public class SerializeGameObjectReference : SerializerExtensionBase<GameObject>
{
	[Token(Token = "0x2000559")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2EB4", Offset = "0xEA2EB4")]
	private sealed class <Load>c__AnonStorey0
	{
		[Token(Token = "0x4001B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal object[] data;

		[Token(Token = "0x60024FC")]
		[Address(RVA = "0x681FE0", Offset = "0x681FE0", VA = "0x681FE0")]
		public <Load>c__AnonStorey0()
		{
		}

		[Token(Token = "0x60024FD")]
		[Address(RVA = "0x682130", Offset = "0x682130", VA = "0x682130")]
		internal object <>m__0(Dictionary<string, object> d)
		{
			return null;
		}
	}

	[Token(Token = "0x6001EEF")]
	[Address(RVA = "0x6817CC", Offset = "0x6817CC", VA = "0x6817CC")]
	static SerializeGameObjectReference()
	{
	}

	[Token(Token = "0x6001EF0")]
	[Address(RVA = "0x681898", Offset = "0x681898", VA = "0x681898")]
	public SerializeGameObjectReference()
	{
	}

	[Token(Token = "0x6001EF1")]
	[Address(RVA = "0x6818FC", Offset = "0x6818FC", VA = "0x6818FC", Slot = "6")]
	public override IEnumerable<object> Save(GameObject target)
	{
		return null;
	}

	[Token(Token = "0x6001EF2")]
	[Address(RVA = "0x681CE0", Offset = "0x681CE0", VA = "0x681CE0", Slot = "7")]
	public override object Load(object[] data, object instance)
	{
		return null;
	}

	[Token(Token = "0x6001EF3")]
	[Address(RVA = "0x681FE8", Offset = "0x681FE8", VA = "0x681FE8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2EA4", Offset = "0xEA2EA4")]
	private static bool <SerializeGameObjectReference>m__0(Type tp)
	{
		return default(bool);
	}
}
[Token(Token = "0x200043F")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA2EC4", Offset = "0xEA2EC4")]
public class SerializeNavMeshAgent : IComponentSerializer
{
	[Token(Token = "0x2000440")]
	public class StoredInfo
	{
		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool hasPath;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public bool offMesh;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float x;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float y;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float z;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x40014B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float angularSpeed;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float height;

		[Token(Token = "0x40014B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float offset;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float acceleration;

		[Token(Token = "0x40014BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int passable;

		[Token(Token = "0x6001EF7")]
		[Address(RVA = "0x6833D8", Offset = "0x6833D8", VA = "0x6833D8")]
		public StoredInfo()
		{
		}
	}

	[Token(Token = "0x200055A")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA2F3C", Offset = "0xEA2F3C")]
	private sealed class <Deserialize>c__AnonStorey0
	{
		[Token(Token = "0x4001B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal byte[] data;

		[Token(Token = "0x4001B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal NavMeshAgent agent;

		[Token(Token = "0x4001B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal NavMeshPath path;

		[Token(Token = "0x60024FE")]
		[Address(RVA = "0x6835C4", Offset = "0x6835C4", VA = "0x6835C4")]
		public <Deserialize>c__AnonStorey0()
		{
		}

		[Token(Token = "0x60024FF")]
		[Address(RVA = "0x6835CC", Offset = "0x6835CC", VA = "0x6835CC")]
		internal void <>m__0()
		{
		}
	}

	[Token(Token = "0x6001EF4")]
	[Address(RVA = "0x68311C", Offset = "0x68311C", VA = "0x68311C")]
	public SerializeNavMeshAgent()
	{
	}

	[Token(Token = "0x6001EF5")]
	[Address(RVA = "0x683124", Offset = "0x683124", VA = "0x683124", Slot = "4")]
	public byte[] Serialize(Component component)
	{
		return null;
	}

	[Token(Token = "0x6001EF6")]
	[Address(RVA = "0x6833E8", Offset = "0x6833E8", VA = "0x6833E8", Slot = "5")]
	public void Deserialize(byte[] data, Component instance)
	{
	}
}
[Token(Token = "0x2000441")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA2F4C", Offset = "0xEA2F4C")]
public class SerializeCamera : IComponentSerializer
{
	[Token(Token = "0x2000442")]
	public class CameraData
	{
		[Token(Token = "0x40014BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float fieldOfView;

		[Token(Token = "0x40014BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float nearClipPlane;

		[Token(Token = "0x40014BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float farClipPlane;

		[Token(Token = "0x40014BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float depth;

		[Token(Token = "0x6001EFB")]
		[Address(RVA = "0x67EA80", Offset = "0x67EA80", VA = "0x67EA80")]
		public CameraData()
		{
		}
	}

	[Token(Token = "0x6001EF8")]
	[Address(RVA = "0x67E8C4", Offset = "0x67E8C4", VA = "0x67E8C4")]
	public SerializeCamera()
	{
	}

	[Token(Token = "0x6001EF9")]
	[Address(RVA = "0x67E8CC", Offset = "0x67E8CC", VA = "0x67E8CC", Slot = "4")]
	public byte[] Serialize(Component component)
	{
		return null;
	}

	[Token(Token = "0x6001EFA")]
	[Address(RVA = "0x67EA88", Offset = "0x67EA88", VA = "0x67EA88", Slot = "5")]
	public void Deserialize(byte[] data, Component instance)
	{
	}
}
[Token(Token = "0x2000443")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA2FC4", Offset = "0xEA2FC4")]
public class SerializeRigidBody : IComponentSerializer
{
	[Token(Token = "0x2000444")]
	public class RigidBodyInfo
	{
		[Token(Token = "0x40014C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool isKinematic;

		[Token(Token = "0x40014C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9")]
		public bool useGravity;

		[Token(Token = "0x40014C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public bool freezeRotation;

		[Token(Token = "0x40014C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
		public bool detectCollisions;

		[Token(Token = "0x40014C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool useConeFriction;

		[Token(Token = "0x40014C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 velocity;

		[Token(Token = "0x40014C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 position;

		[Token(Token = "0x40014C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 angularVelocity;

		[Token(Token = "0x40014C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 centerOfMass;

		[Token(Token = "0x40014CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 inertiaTensor;

		[Token(Token = "0x40014CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Quaternion rotation;

		[Token(Token = "0x40014CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion inertiaTensorRotation;

		[Token(Token = "0x40014CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float drag;

		[Token(Token = "0x40014CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float angularDrag;

		[Token(Token = "0x40014CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float mass;

		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float sleepVelocity;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float sleepAngularVelocity;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float maxAngularVelocity;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public RigidbodyConstraints constraints;

		[Token(Token = "0x40014D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public CollisionDetectionMode collisionDetectionMode;

		[Token(Token = "0x40014D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public RigidbodyInterpolation interpolation;

		[Token(Token = "0x40014D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public int solverIterationCount;

		[Token(Token = "0x6001F00")]
		[Address(RVA = "0x6854D8", Offset = "0x6854D8", VA = "0x6854D8")]
		public RigidBodyInfo()
		{
		}

		[Token(Token = "0x6001F01")]
		[Address(RVA = "0x684938", Offset = "0x684938", VA = "0x684938")]
		public RigidBodyInfo(Rigidbody source)
		{
		}

		[Token(Token = "0x6001F02")]
		[Address(RVA = "0x684DE0", Offset = "0x684DE0", VA = "0x684DE0")]
		public void Configure(Rigidbody body)
		{
		}
	}

	[Token(Token = "0x200055B")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA303C", Offset = "0xEA303C")]
	private sealed class <Deserialize>c__AnonStorey0
	{
		[Token(Token = "0x4001B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal RigidBodyInfo info;

		[Token(Token = "0x4001B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal Component instance;

		[Token(Token = "0x6002500")]
		[Address(RVA = "0x684DD8", Offset = "0x684DD8", VA = "0x684DD8")]
		public <Deserialize>c__AnonStorey0()
		{
		}

		[Token(Token = "0x6002501")]
		[Address(RVA = "0x6853FC", Offset = "0x6853FC", VA = "0x6853FC")]
		internal void <>m__0()
		{
		}
	}

	[Token(Token = "0x40014C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Quaternion zero;

	[Token(Token = "0x6001EFC")]
	[Address(RVA = "0x684814", Offset = "0x684814", VA = "0x684814")]
	public SerializeRigidBody()
	{
	}

	[Token(Token = "0x6001EFD")]
	[Address(RVA = "0x68481C", Offset = "0x68481C", VA = "0x68481C", Slot = "4")]
	public byte[] Serialize(Component component)
	{
		return null;
	}

	[Token(Token = "0x6001EFE")]
	[Address(RVA = "0x684C34", Offset = "0x684C34", VA = "0x684C34", Slot = "5")]
	public void Deserialize(byte[] data, Component instance)
	{
	}
}
[Token(Token = "0x2000445")]
[SerializerPlugIn]
public class RagePixelSupport
{
	[Token(Token = "0x6001F03")]
	[Address(RVA = "0x1B3A88C", Offset = "0x1B3A88C", VA = "0x1B3A88C")]
	static RagePixelSupport()
	{
	}

	[Token(Token = "0x6001F04")]
	[Address(RVA = "0x1B3A934", Offset = "0x1B3A934", VA = "0x1B3A934")]
	public RagePixelSupport()
	{
	}
}
[Token(Token = "0x2000446")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA305C", Offset = "0xEA305C")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA305C", Offset = "0xEA305C")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA305C", Offset = "0xEA305C")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA305C", Offset = "0xEA305C")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA305C", Offset = "0xEA305C")]
[AttributeAttribute(Name = "ComponentSerializerFor", RVA = "0xEA305C", Offset = "0xEA305C")]
public class SerializeRenderer : IComponentSerializer
{
	[Token(Token = "0x2000447")]
	public class StoredInformation
	{
		[Token(Token = "0x40014D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool Enabled;

		[Token(Token = "0x40014D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public List<Material> materials;

		[Token(Token = "0x6001F08")]
		[Address(RVA = "0x684274", Offset = "0x684274", VA = "0x684274")]
		public StoredInformation()
		{
		}
	}

	[Token(Token = "0x200055C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA31B0", Offset = "0xEA31B0")]
	private sealed class <Deserialize>c__AnonStorey0
	{
		[Token(Token = "0x4001B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal Renderer renderer;

		[Token(Token = "0x4001B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		internal byte[] data;

		[Token(Token = "0x6002502")]
		[Address(RVA = "0x6844C0", Offset = "0x6844C0", VA = "0x6844C0")]
		public <Deserialize>c__AnonStorey0()
		{
		}

		[Token(Token = "0x6002503")]
		[Address(RVA = "0x6844C8", Offset = "0x6844C8", VA = "0x6844C8")]
		internal void <>m__0()
		{
		}
	}

	[Token(Token = "0x40014D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static StoreMaterials Store;

	[Token(Token = "0x6001F05")]
	[Address(RVA = "0x683F2C", Offset = "0x683F2C", VA = "0x683F2C")]
	public SerializeRenderer()
	{
	}

	[Token(Token = "0x6001F06")]
	[Address(RVA = "0x683F34", Offset = "0x683F34", VA = "0x683F34", Slot = "4")]
	public byte[] Serialize(Component component)
	{
		return null;
	}

	[Token(Token = "0x6001F07")]
	[Address(RVA = "0x684300", Offset = "0x684300", VA = "0x684300", Slot = "5")]
	public void Deserialize(byte[] data, Component instance)
	{
	}
}
[Token(Token = "0x2000448")]
[AttributeAttribute(Name = "SubTypeSerializerAttribute", RVA = "0xEA31C0", Offset = "0xEA31C0")]
public class SerializeComponentReference : SerializerExtensionBase<Component>
{
	[Token(Token = "0x200055D")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3238", Offset = "0xEA3238")]
	private sealed class <Save>c__AnonStorey0
	{
		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal Component target;

		[Token(Token = "0x6002504")]
		[Address(RVA = "0x6808E4", Offset = "0x6808E4", VA = "0x6808E4")]
		public <Save>c__AnonStorey0()
		{
		}

		[Token(Token = "0x6002505")]
		[Address(RVA = "0x681738", Offset = "0x681738", VA = "0x681738")]
		internal bool <>m__0(Component c)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x200055E")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3248", Offset = "0xEA3248")]
	private sealed class <Load>c__AnonStorey1
	{
		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal object[] data;

		[Token(Token = "0x6002506")]
		[Address(RVA = "0x680DB8", Offset = "0x680DB8", VA = "0x680DB8")]
		public <Load>c__AnonStorey1()
		{
		}

		[Token(Token = "0x6002507")]
		[Address(RVA = "0x680DC0", Offset = "0x680DC0", VA = "0x680DC0")]
		internal object <>m__0(Dictionary<string, object> d)
		{
			return null;
		}

		[Token(Token = "0x6002508")]
		[Address(RVA = "0x681534", Offset = "0x681534", VA = "0x681534")]
		internal object <>m__1(Dictionary<string, object> d)
		{
			return null;
		}
	}

	[Token(Token = "0x6001F09")]
	[Address(RVA = "0x67FEF8", Offset = "0x67FEF8", VA = "0x67FEF8")]
	public SerializeComponentReference()
	{
	}

	[Token(Token = "0x6001F0A")]
	[Address(RVA = "0x67FF5C", Offset = "0x67FF5C", VA = "0x67FF5C", Slot = "6")]
	public override IEnumerable<object> Save(Component target)
	{
		return null;
	}

	[Token(Token = "0x6001F0B")]
	[Address(RVA = "0x6808EC", Offset = "0x6808EC", VA = "0x6808EC", Slot = "7")]
	public override object Load(object[] data, object instance)
	{
		return null;
	}
}
[Token(Token = "0x2000449")]
public class ProvideAttributes : IProvideAttributeList
{
	[Token(Token = "0x40014DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private string[] _attributes;

	[Token(Token = "0x40014DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	protected bool AllSimple;

	[Token(Token = "0x6001F0C")]
	[Address(RVA = "0x1B26788", Offset = "0x1B26788", VA = "0x1B26788")]
	public ProvideAttributes(string[] attributes)
	{
	}

	[Token(Token = "0x6001F0D")]
	[Address(RVA = "0x1B267B4", Offset = "0x1B267B4", VA = "0x1B267B4")]
	public ProvideAttributes(string[] attributes, bool allSimple)
	{
	}

	[Token(Token = "0x6001F0E")]
	[Address(RVA = "0x1B267E8", Offset = "0x1B267E8", VA = "0x1B267E8", Slot = "5")]
	public IEnumerable<string> GetAttributeList(Type tp)
	{
		return null;
	}

	[Token(Token = "0x6001F0F")]
	[Address(RVA = "0x1B267F0", Offset = "0x1B267F0", VA = "0x1B267F0", Slot = "6")]
	public virtual bool AllowAllSimple(Type tp)
	{
		return default(bool);
	}
}
[Token(Token = "0x200044A")]
[AttributeAttribute(Name = "AttributeListProvider", RVA = "0xEA3258", Offset = "0xEA3258")]
public class ProvideCameraAttributes : ProvideAttributes
{
	[Token(Token = "0x6001F10")]
	[Address(RVA = "0x1B267F8", Offset = "0x1B267F8", VA = "0x1B267F8")]
	public ProvideCameraAttributes()
	{
	}
}
[Token(Token = "0x200044B")]
[AttributeAttribute(Name = "AttributeListProvider", RVA = "0xEA32D0", Offset = "0xEA32D0")]
public class ProviderTransformAttributes : ProvideAttributes
{
	[Token(Token = "0x6001F11")]
	[Address(RVA = "0x1B2C66C", Offset = "0x1B2C66C", VA = "0x1B2C66C")]
	public ProviderTransformAttributes()
	{
	}
}
[Token(Token = "0x200044C")]
[AttributeAttribute(Name = "AttributeListProvider", RVA = "0xEA3348", Offset = "0xEA3348")]
public class ProvideColliderAttributes : ProvideAttributes
{
	[Token(Token = "0x6001F12")]
	[Address(RVA = "0x1B26888", Offset = "0x1B26888", VA = "0x1B26888")]
	public ProvideColliderAttributes()
	{
	}
}
[Token(Token = "0x200044D")]
[AttributeAttribute(Name = "AttributeListProvider", RVA = "0xEA33C0", Offset = "0xEA33C0")]
[AttributeAttribute(Name = "AttributeListProvider", RVA = "0xEA33C0", Offset = "0xEA33C0")]
[AttributeAttribute(Name = "AttributeListProvider", RVA = "0xEA33C0", Offset = "0xEA33C0")]
[AttributeAttribute(Name = "AttributeListProvider", RVA = "0xEA33C0", Offset = "0xEA33C0")]
[AttributeAttribute(Name = "AttributeListProvider", RVA = "0xEA33C0", Offset = "0xEA33C0")]
[AttributeAttribute(Name = "AttributeListProvider", RVA = "0xEA33C0", Offset = "0xEA33C0")]
[AttributeAttribute(Name = "AttributeListProvider", RVA = "0xEA33C0", Offset = "0xEA33C0")]
[AttributeAttribute(Name = "AttributeListProvider", RVA = "0xEA33C0", Offset = "0xEA33C0")]
public class ProviderRendererAttributes : ProvideAttributes
{
	[Token(Token = "0x6001F13")]
	[Address(RVA = "0x1B297AC", Offset = "0x1B297AC", VA = "0x1B297AC")]
	public ProviderRendererAttributes()
	{
	}
}
[Token(Token = "0x200044E")]
public class Timing : IDisposable
{
	[Token(Token = "0x40014DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private readonly string _caption;

	[Token(Token = "0x40014DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly DateTime _start;

	[Token(Token = "0x6001F14")]
	[Address(RVA = "0x18FE818", Offset = "0x18FE818", VA = "0x18FE818")]
	public Timing(string caption)
	{
	}

	[Token(Token = "0x6001F15")]
	[Address(RVA = "0x18FE8C8", Offset = "0x18FE8C8", VA = "0x18FE8C8", Slot = "4")]
	public void Dispose()
	{
	}
}
[Token(Token = "0x200044F")]
[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA356C", Offset = "0xEA356C")]
public class SerializeAll : Attribute
{
	[Token(Token = "0x6001F16")]
	[Address(RVA = "0x64F9F4", Offset = "0x64F9F4", VA = "0x64F9F4")]
	public SerializeAll()
	{
	}
}
[Token(Token = "0x2000450")]
[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA3580", Offset = "0xEA3580")]
public class DoNotSerializePublic : Attribute
{
	[Token(Token = "0x6001F17")]
	[Address(RVA = "0x1923F24", Offset = "0x1923F24", VA = "0x1923F24")]
	public DoNotSerializePublic()
	{
	}
}
[Token(Token = "0x2000451")]
[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA3594", Offset = "0xEA3594")]
public class SerializeThis : Attribute
{
	[Token(Token = "0x6001F18")]
	[Address(RVA = "0x687EF4", Offset = "0x687EF4", VA = "0x687EF4")]
	public SerializeThis()
	{
	}
}
[Token(Token = "0x2000452")]
[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA35A8", Offset = "0xEA35A8")]
public class DoNotSerialize : Attribute
{
	[Token(Token = "0x6001F19")]
	[Address(RVA = "0x1923F1C", Offset = "0x1923F1C", VA = "0x1923F1C")]
	public DoNotSerialize()
	{
	}
}
[Token(Token = "0x2000453")]
public interface IDeserialized
{
	[Token(Token = "0x6001F1A")]
	void Deserialized();
}
namespace Serialization
{
	[Token(Token = "0x2000454")]
	public class SerializePrivateFieldOfType
	{
		[Token(Token = "0x200055F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA35BC", Offset = "0xEA35BC")]
		private sealed class <GetFields>c__AnonStorey0
		{
			[Token(Token = "0x2000560")]
			private sealed class <GetFields>c__AnonStorey1
			{
				[Token(Token = "0x4001B34")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				internal FieldInfo f;

				[Token(Token = "0x4001B35")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
				internal <GetFields>c__AnonStorey0 <>f__ref$0;

				[Token(Token = "0x600250B")]
				[Address(RVA = "0x62F994", Offset = "0x62F994", VA = "0x62F994")]
				public <GetFields>c__AnonStorey1()
				{
				}

				[Token(Token = "0x600250C")]
				[Address(RVA = "0x62F99C", Offset = "0x62F99C", VA = "0x62F99C")]
				internal bool <>m__0(SerializePrivateFieldOfType fld)
				{
					return default(bool);
				}
			}

			[Token(Token = "0x4001B33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal List<SerializePrivateFieldOfType> fields;

			[Token(Token = "0x6002509")]
			[Address(RVA = "0x62F7FC", Offset = "0x62F7FC", VA = "0x62F7FC")]
			public <GetFields>c__AnonStorey0()
			{
			}

			[Token(Token = "0x600250A")]
			[Address(RVA = "0x62F894", Offset = "0x62F894", VA = "0x62F894")]
			internal bool <>m__0(FieldInfo f)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40014DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Index<string, List<SerializePrivateFieldOfType>> privateFields;

		[Token(Token = "0x40014DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private readonly string _fieldName;

		[Token(Token = "0x6001F1B")]
		[Address(RVA = "0x62F364", Offset = "0x62F364", VA = "0x62F364")]
		public SerializePrivateFieldOfType(string typeName, string fieldName)
		{
		}

		[Token(Token = "0x6001F1C")]
		[Address(RVA = "0x62F45C", Offset = "0x62F45C", VA = "0x62F45C")]
		public static IEnumerable<FieldInfo> GetFields(Type type)
		{
			return null;
		}
	}
	[Token(Token = "0x2000455")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA35CC", Offset = "0xEA35CC")]
	public class CreateUsingEvent : Attribute
	{
		[Token(Token = "0x6001F1E")]
		[Address(RVA = "0x626E6C", Offset = "0x626E6C", VA = "0x626E6C")]
		public CreateUsingEvent()
		{
		}
	}
	[Token(Token = "0x2000456")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA35E0", Offset = "0xEA35E0")]
	public class CreatorFor : Attribute
	{
		[Token(Token = "0x40014E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Type CreatesType;

		[Token(Token = "0x6001F1F")]
		[Address(RVA = "0x626E74", Offset = "0x626E74", VA = "0x626E74")]
		public CreatorFor(Type createsType)
		{
		}
	}
	[Token(Token = "0x2000457")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA3614", Offset = "0xEA3614")]
	public class SerializationPriorityAttribute : Attribute
	{
		[Token(Token = "0x40014E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly int Priority;

		[Token(Token = "0x6001F20")]
		[Address(RVA = "0x62F344", Offset = "0x62F344", VA = "0x62F344")]
		public SerializationPriorityAttribute(int priority)
		{
		}
	}
	[Token(Token = "0x2000458")]
	public interface IProvideAttributeList
	{
		[Token(Token = "0x6001F21")]
		bool AllowAllSimple(Type tp);

		[Token(Token = "0x6001F22")]
		IEnumerable<string> GetAttributeList(Type tp);
	}
	[Token(Token = "0x2000459")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA3628", Offset = "0xEA3628")]
	public class AttributeListProvider : Attribute
	{
		[Token(Token = "0x40014E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Type AttributeListType;

		[Token(Token = "0x6001F23")]
		[Address(RVA = "0x6233A4", Offset = "0x6233A4", VA = "0x6233A4")]
		public AttributeListProvider(Type attributeListType)
		{
		}
	}
	[Token(Token = "0x200045A")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA365C", Offset = "0xEA365C")]
	public class DeferredAttribute : Attribute
	{
		[Token(Token = "0x6001F24")]
		[Address(RVA = "0x626E94", Offset = "0x626E94", VA = "0x626E94")]
		public DeferredAttribute()
		{
		}
	}
	[Token(Token = "0x200045B")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA3670", Offset = "0xEA3670")]
	public class Specialist : Attribute
	{
		[Token(Token = "0x40014E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Type Type;

		[Token(Token = "0x6001F25")]
		[Address(RVA = "0x62FA84", Offset = "0x62FA84", VA = "0x62FA84")]
		public Specialist(Type type)
		{
		}
	}
	[Token(Token = "0x200045C")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA3684", Offset = "0xEA3684")]
	public class SpecialistProvider : Attribute
	{
		[Token(Token = "0x6001F26")]
		[Address(RVA = "0x62FAA4", Offset = "0x62FAA4", VA = "0x62FAA4")]
		public SpecialistProvider()
		{
		}
	}
	[Token(Token = "0x200045D")]
	public interface ISpecialist
	{
		[Token(Token = "0x6001F27")]
		object Serialize(object value);

		[Token(Token = "0x6001F28")]
		object Deserialize(object value);
	}
	[Token(Token = "0x200045E")]
	public interface ISerializeObject
	{
		[Token(Token = "0x6001F29")]
		object[] Serialize(object target);

		[Token(Token = "0x6001F2A")]
		object Deserialize(object[] data, object instance);
	}
	[Token(Token = "0x200045F")]
	public interface ICreateObject
	{
		[Token(Token = "0x6001F2B")]
		object Create(Type itemType);
	}
	[Token(Token = "0x2000460")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA3698", Offset = "0xEA3698")]
	public class SerializerAttribute : Attribute
	{
		[Token(Token = "0x40014E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal readonly Type SerializesType;

		[Token(Token = "0x6001F2C")]
		[Address(RVA = "0x62FA64", Offset = "0x62FA64", VA = "0x62FA64")]
		public SerializerAttribute(Type serializesType)
		{
		}
	}
	[Token(Token = "0x2000461")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA36CC", Offset = "0xEA36CC")]
	public class OnlyInterfaces : Attribute
	{
		[Token(Token = "0x6001F2D")]
		[Address(RVA = "0x62F33C", Offset = "0x62F33C", VA = "0x62F33C")]
		public OnlyInterfaces()
		{
		}
	}
	[Token(Token = "0x2000462")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xEA3700", Offset = "0xEA3700")]
	public class SubTypeSerializerAttribute : Attribute
	{
		[Token(Token = "0x40014E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal readonly Type SerializesType;

		[Token(Token = "0x6001F2E")]
		[Address(RVA = "0x62FAAC", Offset = "0x62FAAC", VA = "0x62FAAC")]
		public SubTypeSerializerAttribute(Type serializesType)
		{
		}
	}
	[Token(Token = "0x2000463")]
	public static class UnitySerializer
	{
		[Token(Token = "0x2000464")]
		public struct FinalProcess
		{
			[Token(Token = "0x4001549")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public List<Action> deferredActions;

			[Token(Token = "0x400154A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public List<DeferredSetter> deferredSetters;

			[Token(Token = "0x400154B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public List<IDeserialized> deserializedObjects;
		}

		[Token(Token = "0x2000465")]
		public class Nuller
		{
			[Token(Token = "0x6001FCB")]
			[Address(RVA = "0x623B24", Offset = "0x623B24", VA = "0x623B24")]
			public Nuller()
			{
			}
		}

		[Token(Token = "0x2000466")]
		private class TypePusher : IDisposable
		{
			[Token(Token = "0x6001FCC")]
			[Address(RVA = "0x6421B4", Offset = "0x6421B4", VA = "0x6421B4")]
			public TypePusher(Type t)
			{
			}

			[Token(Token = "0x6001FCD")]
			[Address(RVA = "0x64F81C", Offset = "0x64F81C", VA = "0x64F81C", Slot = "4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x2000467")]
		public delegate object GetData(Dictionary<string, object> parameters);

		[Token(Token = "0x2000468")]
		public class DeferredSetter
		{
			[Token(Token = "0x400154C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int priority;

			[Token(Token = "0x400154D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public readonly GetData deferredRetrievalFunction;

			[Token(Token = "0x400154E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x400154F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal readonly Dictionary<string, object> parameters;

			[Token(Token = "0x4001550")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Action _setAction;

			[Token(Token = "0x6001FD2")]
			[Address(RVA = "0x64754C", Offset = "0x64754C", VA = "0x64754C")]
			public DeferredSetter(GetData retrievalFunction)
			{
			}
		}

		[Token(Token = "0x2000469")]
		private class EntryConfiguration
		{
			[Token(Token = "0x4001551")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public GetSet Setter;

			[Token(Token = "0x4001552")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Type Type;

			[Token(Token = "0x6001FD3")]
			[Address(RVA = "0x641F68", Offset = "0x641F68", VA = "0x641F68")]
			public EntryConfiguration()
			{
			}
		}

		[Token(Token = "0x200046A")]
		public class ForceJSON : IDisposable
		{
			[Token(Token = "0x6001FD4")]
			[Address(RVA = "0x64EE18", Offset = "0x64EE18", VA = "0x64EE18")]
			public ForceJSON()
			{
			}

			[Token(Token = "0x6001FD5")]
			[Address(RVA = "0x64EEBC", Offset = "0x64EEBC", VA = "0x64EEBC", Slot = "4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x200046B")]
		private class KnownTypesStackEntry
		{
			[Token(Token = "0x4001553")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public List<Type> knownTypesList;

			[Token(Token = "0x4001554")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Dictionary<Type, ushort> knownTypesLookup;

			[Token(Token = "0x6001FD6")]
			[Address(RVA = "0x63C640", Offset = "0x63C640", VA = "0x63C640")]
			public KnownTypesStackEntry()
			{
			}
		}

		[Token(Token = "0x200046C")]
		public class MissingConstructorException : Exception
		{
			[Token(Token = "0x6001FD7")]
			[Address(RVA = "0x641AE4", Offset = "0x641AE4", VA = "0x641AE4")]
			public MissingConstructorException(string message)
			{
			}
		}

		[Token(Token = "0x200046D")]
		public delegate object ReadAValue(BinaryReader reader);

		[Token(Token = "0x200046E")]
		private delegate void WriteAValue(BinaryWriter writer, object value);

		[Token(Token = "0x200046F")]
		public class ObjectMappingEventArgs : EventArgs
		{
			[Token(Token = "0x4001555")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public object Instance;

			[Token(Token = "0x4001556")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Type TypeToConstruct;

			[Token(Token = "0x6001FE0")]
			[Address(RVA = "0x641A60", Offset = "0x641A60", VA = "0x641A60")]
			public ObjectMappingEventArgs()
			{
			}
		}

		[Token(Token = "0x2000470")]
		internal class PropertyNameStackEntry
		{
			[Token(Token = "0x4001557")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public List<string> propertyList;

			[Token(Token = "0x4001558")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Dictionary<string, ushort> propertyLookup;

			[Token(Token = "0x6001FE1")]
			[Address(RVA = "0x636B2C", Offset = "0x636B2C", VA = "0x636B2C")]
			public PropertyNameStackEntry()
			{
			}
		}

		[Token(Token = "0x2000471")]
		internal delegate void ScanTypeFunction(Type type, Attribute attribute);

		[Token(Token = "0x2000472")]
		public class SerializationScope : IDisposable
		{
			[Token(Token = "0x4001559")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static Stack<bool> _primaryScopeStack;

			[Token(Token = "0x400155A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private static bool _hasSetPrimaryScope;

			[Token(Token = "0x400155B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
			private static bool _primaryScope;

			[Token(Token = "0x400155C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static int _counter;

			[Token(Token = "0x400155D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly List<DeferredSetter> _fixupFunctions;

			[Token(Token = "0x400155E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private readonly List<Action> _finalDeserialization;

			[Token(Token = "0x170001DE")]
			public static bool IsInScope
			{
				[Token(Token = "0x6001FE7")]
				[Address(RVA = "0x64F008", Offset = "0x64F008", VA = "0x64F008")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170001DF")]
			public static bool IsPrimaryScope
			{
				[Token(Token = "0x6001FE8")]
				[Address(RVA = "0x624438", Offset = "0x624438", VA = "0x624438")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001FE6")]
			[Address(RVA = "0x6389C8", Offset = "0x6389C8", VA = "0x6389C8")]
			public SerializationScope()
			{
			}

			[Token(Token = "0x6001FE9")]
			[Address(RVA = "0x63DAAC", Offset = "0x63DAAC", VA = "0x63DAAC")]
			public static void SetPrimaryScope()
			{
			}

			[Token(Token = "0x6001FEA")]
			[Address(RVA = "0x64F09C", Offset = "0x64F09C", VA = "0x64F09C", Slot = "4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x2000473")]
		public class SerializationSplitScope : IDisposable
		{
			[Token(Token = "0x400155F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly List<DeferredSetter> _fixupFunctions;

			[Token(Token = "0x4001560")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private readonly List<Action> _finalDeserialization;

			[Token(Token = "0x4001561")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int _previousCounter;

			[Token(Token = "0x6001FEC")]
			[Address(RVA = "0x64227C", Offset = "0x64227C", VA = "0x64227C")]
			public SerializationSplitScope()
			{
			}

			[Token(Token = "0x6001FED")]
			[Address(RVA = "0x64F5F8", Offset = "0x64F5F8", VA = "0x64F5F8", Slot = "4")]
			public void Dispose()
			{
			}
		}

		[Token(Token = "0x2000474")]
		public class TypeMappingEventArgs : EventArgs
		{
			[Token(Token = "0x4001562")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string TypeName;

			[Token(Token = "0x4001563")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Type UseType;

			[Token(Token = "0x6001FEE")]
			[Address(RVA = "0x625ECC", Offset = "0x625ECC", VA = "0x625ECC")]
			public TypeMappingEventArgs()
			{
			}
		}

		[Token(Token = "0x2000561")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3C24", Offset = "0xEA3C24")]
		private sealed class <GetTypeEx>c__AnonStorey0
		{
			[Token(Token = "0x4001B36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal string typeName;

			[Token(Token = "0x600250D")]
			[Address(RVA = "0x633A14", Offset = "0x633A14", VA = "0x633A14")]
			public <GetTypeEx>c__AnonStorey0()
			{
			}

			[Token(Token = "0x600250E")]
			[Address(RVA = "0x64ED84", Offset = "0x64ED84", VA = "0x64ED84")]
			internal bool <>m__0(Assembly a)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000562")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3C34", Offset = "0xEA3C34")]
		private sealed class <GetPropertyInfo>c__AnonStorey2
		{
			[Token(Token = "0x4001B37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal string[] validNames;

			[Token(Token = "0x600250F")]
			[Address(RVA = "0x6383F4", Offset = "0x6383F4", VA = "0x6383F4")]
			public <GetPropertyInfo>c__AnonStorey2()
			{
			}
		}

		[Token(Token = "0x2000563")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3C44", Offset = "0xEA3C44")]
		private sealed class <GetPropertyInfo>c__AnonStorey1
		{
			[Token(Token = "0x2000579")]
			private sealed class <GetPropertyInfo>c__AnonStorey3
			{
				[Token(Token = "0x4001B66")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				internal PropertyInfo p;

				[Token(Token = "0x4001B67")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
				internal <GetPropertyInfo>c__AnonStorey2 <>f__ref$2;

				[Token(Token = "0x4001B68")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				internal <GetPropertyInfo>c__AnonStorey1 <>f__ref$1;

				[Token(Token = "0x600253F")]
				[Address(RVA = "0x64E1C0", Offset = "0x64E1C0", VA = "0x64E1C0")]
				public <GetPropertyInfo>c__AnonStorey3()
				{
				}

				[Token(Token = "0x6002540")]
				[Address(RVA = "0x64E1C8", Offset = "0x64E1C8", VA = "0x64E1C8")]
				internal bool <>m__0(string n)
				{
					return default(bool);
				}
			}

			[Token(Token = "0x4001B38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Type tp;

			[Token(Token = "0x4001B39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal bool allowSimple;

			[Token(Token = "0x4001B3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Type containingType;

			[Token(Token = "0x4001B3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal <GetPropertyInfo>c__AnonStorey2 <>f__ref$2;

			[Token(Token = "0x6002510")]
			[Address(RVA = "0x6383FC", Offset = "0x6383FC", VA = "0x6383FC")]
			public <GetPropertyInfo>c__AnonStorey1()
			{
			}

			[Token(Token = "0x6002511")]
			[Address(RVA = "0x64D75C", Offset = "0x64D75C", VA = "0x64D75C")]
			internal bool <>m__0(KeyValuePair<Type, IProvideAttributeList> p)
			{
				return default(bool);
			}

			[Token(Token = "0x6002512")]
			[Address(RVA = "0x64D7F8", Offset = "0x64D7F8", VA = "0x64D7F8")]
			internal IEnumerable<string> <>m__1(KeyValuePair<Type, IProvideAttributeList> p)
			{
				return null;
			}

			[Token(Token = "0x6002513")]
			[Address(RVA = "0x64D9C4", Offset = "0x64D9C4", VA = "0x64D9C4")]
			internal bool <>m__2(PropertyInfo p)
			{
				return default(bool);
			}

			[Token(Token = "0x6002514")]
			[Address(RVA = "0x64DB88", Offset = "0x64DB88", VA = "0x64DB88")]
			internal bool <>m__3(PropertyInfo p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000564")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3C54", Offset = "0xEA3C54")]
		private sealed class <GetPropertyInfo>c__AnonStorey4
		{
			[Token(Token = "0x200057A")]
			private sealed class <GetPropertyInfo>c__AnonStorey5
			{
				[Token(Token = "0x4001B69")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				internal PropertyInfo p;

				[Token(Token = "0x4001B6A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
				internal <GetPropertyInfo>c__AnonStorey2 <>f__ref$2;

				[Token(Token = "0x4001B6B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				internal <GetPropertyInfo>c__AnonStorey4 <>f__ref$4;

				[Token(Token = "0x6002541")]
				[Address(RVA = "0x64ECC4", Offset = "0x64ECC4", VA = "0x64ECC4")]
				public <GetPropertyInfo>c__AnonStorey5()
				{
				}

				[Token(Token = "0x6002542")]
				[Address(RVA = "0x64ECCC", Offset = "0x64ECCC", VA = "0x64ECCC")]
				internal bool <>m__0(string n)
				{
					return default(bool);
				}
			}

			[Token(Token = "0x4001B3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Type tp;

			[Token(Token = "0x4001B3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal bool allowSimple;

			[Token(Token = "0x4001B3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal string[] availableNames;

			[Token(Token = "0x4001B3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal <GetPropertyInfo>c__AnonStorey2 <>f__ref$2;

			[Token(Token = "0x6002515")]
			[Address(RVA = "0x638404", Offset = "0x638404", VA = "0x638404")]
			public <GetPropertyInfo>c__AnonStorey4()
			{
			}

			[Token(Token = "0x6002516")]
			[Address(RVA = "0x64E280", Offset = "0x64E280", VA = "0x64E280")]
			internal bool <>m__0(KeyValuePair<Type, IProvideAttributeList> p)
			{
				return default(bool);
			}

			[Token(Token = "0x6002517")]
			[Address(RVA = "0x64E31C", Offset = "0x64E31C", VA = "0x64E31C")]
			internal IEnumerable<string> <>m__1(KeyValuePair<Type, IProvideAttributeList> p)
			{
				return null;
			}

			[Token(Token = "0x6002518")]
			[Address(RVA = "0x64E4D8", Offset = "0x64E4D8", VA = "0x64E4D8")]
			internal bool <>m__2(PropertyInfo p)
			{
				return default(bool);
			}

			[Token(Token = "0x6002519")]
			[Address(RVA = "0x64E69C", Offset = "0x64E69C", VA = "0x64E69C")]
			internal bool <>m__3(PropertyInfo p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000565")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3C64", Offset = "0xEA3C64")]
		private sealed class <GetFieldInfo>c__AnonStorey6
		{
			[Token(Token = "0x200057B")]
			private sealed class <GetFieldInfo>c__AnonStorey7
			{
				[Token(Token = "0x4001B6C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				internal FieldInfo p;

				[Token(Token = "0x4001B6D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
				internal <GetFieldInfo>c__AnonStorey6 <>f__ref$6;

				[Token(Token = "0x6002543")]
				[Address(RVA = "0x64D4D8", Offset = "0x64D4D8", VA = "0x64D4D8")]
				public <GetFieldInfo>c__AnonStorey7()
				{
				}

				[Token(Token = "0x6002544")]
				[Address(RVA = "0x64D6A4", Offset = "0x64D6A4", VA = "0x64D6A4")]
				internal bool <>m__0(string n)
				{
					return default(bool);
				}
			}

			[Token(Token = "0x4001B40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Type tp;

			[Token(Token = "0x4001B41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal bool allowSimple;

			[Token(Token = "0x4001B42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal List<string> validNames;

			[Token(Token = "0x600251A")]
			[Address(RVA = "0x638604", Offset = "0x638604", VA = "0x638604")]
			public <GetFieldInfo>c__AnonStorey6()
			{
			}

			[Token(Token = "0x600251B")]
			[Address(RVA = "0x64CDA4", Offset = "0x64CDA4", VA = "0x64CDA4")]
			internal bool <>m__0(KeyValuePair<Type, IProvideAttributeList> p)
			{
				return default(bool);
			}

			[Token(Token = "0x600251C")]
			[Address(RVA = "0x64CE40", Offset = "0x64CE40", VA = "0x64CE40")]
			internal IEnumerable<string> <>m__1(KeyValuePair<Type, IProvideAttributeList> p)
			{
				return null;
			}

			[Token(Token = "0x600251D")]
			[Address(RVA = "0x64D00C", Offset = "0x64D00C", VA = "0x64D00C")]
			internal bool <>m__2(FieldInfo p)
			{
				return default(bool);
			}

			[Token(Token = "0x600251E")]
			[Address(RVA = "0x64D164", Offset = "0x64D164", VA = "0x64D164")]
			internal bool <>m__3(FieldInfo p)
			{
				return default(bool);
			}

			[Token(Token = "0x600251F")]
			[Address(RVA = "0x64D4E0", Offset = "0x64D4E0", VA = "0x64D4E0")]
			internal bool <>m__4(FieldInfo p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000566")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3C74", Offset = "0xEA3C74")]
		private sealed class <DeserializeArray>c__AnonStorey9
		{
			[Token(Token = "0x4001B43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Array result;

			[Token(Token = "0x6002520")]
			[Address(RVA = "0x647528", Offset = "0x647528", VA = "0x647528")]
			public <DeserializeArray>c__AnonStorey9()
			{
			}
		}

		[Token(Token = "0x2000567")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3C84", Offset = "0xEA3C84")]
		private sealed class <DeserializeArray>c__AnonStorey8
		{
			[Token(Token = "0x4001B44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal object toSet;

			[Token(Token = "0x6002521")]
			[Address(RVA = "0x647530", Offset = "0x647530", VA = "0x647530")]
			public <DeserializeArray>c__AnonStorey8()
			{
			}

			[Token(Token = "0x6002522")]
			[Address(RVA = "0x64C660", Offset = "0x64C660", VA = "0x64C660")]
			internal object <>m__0(Dictionary<string, object> d)
			{
				return null;
			}
		}

		[Token(Token = "0x2000568")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3C94", Offset = "0xEA3C94")]
		private sealed class <DeserializeArray>c__AnonStoreyA
		{
			[Token(Token = "0x4001B45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal DeferredSetter nd;

			[Token(Token = "0x4001B46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal DeferredSetter st;

			[Token(Token = "0x4001B47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int pos;

			[Token(Token = "0x4001B48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal <DeserializeArray>c__AnonStorey9 <>f__ref$9;

			[Token(Token = "0x6002523")]
			[Address(RVA = "0x6475E8", Offset = "0x6475E8", VA = "0x6475E8")]
			public <DeserializeArray>c__AnonStoreyA()
			{
			}

			[Token(Token = "0x6002524")]
			[Address(RVA = "0x64C668", Offset = "0x64C668", VA = "0x64C668")]
			internal void <>m__0()
			{
			}
		}

		[Token(Token = "0x2000569")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3CA4", Offset = "0xEA3CA4")]
		private sealed class <DeserializeDictionary>c__AnonStoreyC
		{
			[Token(Token = "0x4001B49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal List<object> list;

			[Token(Token = "0x4001B4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal IDictionary o;

			[Token(Token = "0x6002525")]
			[Address(RVA = "0x6478D0", Offset = "0x6478D0", VA = "0x6478D0")]
			public <DeserializeDictionary>c__AnonStoreyC()
			{
			}
		}

		[Token(Token = "0x200056A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3CB4", Offset = "0xEA3CB4")]
		private sealed class <DeserializeDictionary>c__AnonStoreyB
		{
			[Token(Token = "0x4001B4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal object toSet;

			[Token(Token = "0x6002526")]
			[Address(RVA = "0x6478D8", Offset = "0x6478D8", VA = "0x6478D8")]
			public <DeserializeDictionary>c__AnonStoreyB()
			{
			}

			[Token(Token = "0x6002527")]
			[Address(RVA = "0x64C714", Offset = "0x64C714", VA = "0x64C714")]
			internal object <>m__0(Dictionary<string, object> d)
			{
				return null;
			}
		}

		[Token(Token = "0x200056B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3CC4", Offset = "0xEA3CC4")]
		private sealed class <DeserializeDictionary>c__AnonStoreyD
		{
			[Token(Token = "0x4001B4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal int c;

			[Token(Token = "0x4001B4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal DeferredSetter nd;

			[Token(Token = "0x4001B4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal DeferredSetter st;

			[Token(Token = "0x4001B4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal <DeserializeDictionary>c__AnonStoreyC <>f__ref$12;

			[Token(Token = "0x6002528")]
			[Address(RVA = "0x6478E0", Offset = "0x6478E0", VA = "0x6478E0")]
			public <DeserializeDictionary>c__AnonStoreyD()
			{
			}

			[Token(Token = "0x6002529")]
			[Address(RVA = "0x64C71C", Offset = "0x64C71C", VA = "0x64C71C")]
			internal void <>m__0()
			{
			}
		}

		[Token(Token = "0x200056C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3CD4", Offset = "0xEA3CD4")]
		private sealed class <DeserializeDictionary>c__AnonStoreyE
		{
			[Token(Token = "0x4001B50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal object toSet;

			[Token(Token = "0x600252A")]
			[Address(RVA = "0x6478E8", Offset = "0x6478E8", VA = "0x6478E8")]
			public <DeserializeDictionary>c__AnonStoreyE()
			{
			}

			[Token(Token = "0x600252B")]
			[Address(RVA = "0x64C838", Offset = "0x64C838", VA = "0x64C838")]
			internal object <>m__0(Dictionary<string, object> d)
			{
				return null;
			}
		}

		[Token(Token = "0x200056D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3CE4", Offset = "0xEA3CE4")]
		private sealed class <DeserializeDictionary>c__AnonStoreyF
		{
			[Token(Token = "0x4001B51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal DeferredSetter nd;

			[Token(Token = "0x4001B52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal DeferredSetter st;

			[Token(Token = "0x4001B53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal int index;

			[Token(Token = "0x4001B54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			internal <DeserializeDictionary>c__AnonStoreyC <>f__ref$12;

			[Token(Token = "0x600252C")]
			[Address(RVA = "0x6478F0", Offset = "0x6478F0", VA = "0x6478F0")]
			public <DeserializeDictionary>c__AnonStoreyF()
			{
			}

			[Token(Token = "0x600252D")]
			[Address(RVA = "0x64C840", Offset = "0x64C840", VA = "0x64C840")]
			internal void <>m__0()
			{
			}
		}

		[Token(Token = "0x200056E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3CF4", Offset = "0xEA3CF4")]
		private sealed class <DeserializeList>c__AnonStorey11
		{
			[Token(Token = "0x4001B55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal IList o;

			[Token(Token = "0x600252E")]
			[Address(RVA = "0x6478F8", Offset = "0x6478F8", VA = "0x6478F8")]
			public <DeserializeList>c__AnonStorey11()
			{
			}
		}

		[Token(Token = "0x200056F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3D04", Offset = "0xEA3D04")]
		private sealed class <DeserializeList>c__AnonStorey10
		{
			[Token(Token = "0x4001B56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal object toSet;

			[Token(Token = "0x600252F")]
			[Address(RVA = "0x647900", Offset = "0x647900", VA = "0x647900")]
			public <DeserializeList>c__AnonStorey10()
			{
			}

			[Token(Token = "0x6002530")]
			[Address(RVA = "0x64CB38", Offset = "0x64CB38", VA = "0x64CB38")]
			internal object <>m__0(Dictionary<string, object> d)
			{
				return null;
			}
		}

		[Token(Token = "0x2000570")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3D14", Offset = "0xEA3D14")]
		private sealed class <DeserializeList>c__AnonStorey12
		{
			[Token(Token = "0x4001B57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal DeferredSetter nd;

			[Token(Token = "0x4001B58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal DeferredSetter st;

			[Token(Token = "0x4001B59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal <DeserializeList>c__AnonStorey11 <>f__ref$17;

			[Token(Token = "0x6002531")]
			[Address(RVA = "0x647908", Offset = "0x647908", VA = "0x647908")]
			public <DeserializeList>c__AnonStorey12()
			{
			}

			[Token(Token = "0x6002532")]
			[Address(RVA = "0x64CB40", Offset = "0x64CB40", VA = "0x64CB40")]
			internal void <>m__0()
			{
			}
		}

		[Token(Token = "0x2000571")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3D24", Offset = "0xEA3D24")]
		private sealed class <DeserializeProperties>c__AnonStorey15
		{
			[Token(Token = "0x4001B5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal object o;

			[Token(Token = "0x6002533")]
			[Address(RVA = "0x649578", Offset = "0x649578", VA = "0x649578")]
			public <DeserializeProperties>c__AnonStorey15()
			{
			}
		}

		[Token(Token = "0x2000572")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3D34", Offset = "0xEA3D34")]
		private sealed class <DeserializeProperties>c__AnonStorey14
		{
			[Token(Token = "0x4001B5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Entry entry;

			[Token(Token = "0x6002534")]
			[Address(RVA = "0x649580", Offset = "0x649580", VA = "0x649580")]
			public <DeserializeProperties>c__AnonStorey14()
			{
			}
		}

		[Token(Token = "0x2000573")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3D44", Offset = "0xEA3D44")]
		private sealed class <DeserializeProperties>c__AnonStorey13
		{
			[Token(Token = "0x4001B5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal object toSet;

			[Token(Token = "0x6002535")]
			[Address(RVA = "0x649588", Offset = "0x649588", VA = "0x649588")]
			public <DeserializeProperties>c__AnonStorey13()
			{
			}

			[Token(Token = "0x6002536")]
			[Address(RVA = "0x64CC90", Offset = "0x64CC90", VA = "0x64CC90")]
			internal object <>m__0(Dictionary<string, object> d)
			{
				return null;
			}
		}

		[Token(Token = "0x2000574")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3D54", Offset = "0xEA3D54")]
		private sealed class <DeserializeProperties>c__AnonStorey16
		{
			[Token(Token = "0x4001B5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal DeferredSetter setter;

			[Token(Token = "0x4001B5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal <DeserializeProperties>c__AnonStorey15 <>f__ref$21;

			[Token(Token = "0x4001B5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal <DeserializeProperties>c__AnonStorey14 <>f__ref$20;

			[Token(Token = "0x6002537")]
			[Address(RVA = "0x649590", Offset = "0x649590", VA = "0x649590")]
			public <DeserializeProperties>c__AnonStorey16()
			{
			}

			[Token(Token = "0x6002538")]
			[Address(RVA = "0x64CC98", Offset = "0x64CC98", VA = "0x64CC98")]
			internal void <>m__0()
			{
			}
		}

		[Token(Token = "0x2000575")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3D64", Offset = "0xEA3D64")]
		private sealed class <DeserializeFields>c__AnonStorey19
		{
			[Token(Token = "0x4001B60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal object o;

			[Token(Token = "0x6002539")]
			[Address(RVA = "0x649598", Offset = "0x649598", VA = "0x649598")]
			public <DeserializeFields>c__AnonStorey19()
			{
			}
		}

		[Token(Token = "0x2000576")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3D74", Offset = "0xEA3D74")]
		private sealed class <DeserializeFields>c__AnonStorey18
		{
			[Token(Token = "0x4001B61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Entry entry;

			[Token(Token = "0x600253A")]
			[Address(RVA = "0x6495A0", Offset = "0x6495A0", VA = "0x6495A0")]
			public <DeserializeFields>c__AnonStorey18()
			{
			}
		}

		[Token(Token = "0x2000577")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3D84", Offset = "0xEA3D84")]
		private sealed class <DeserializeFields>c__AnonStorey17
		{
			[Token(Token = "0x4001B62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal object toSet;

			[Token(Token = "0x600253B")]
			[Address(RVA = "0x6495A8", Offset = "0x6495A8", VA = "0x6495A8")]
			public <DeserializeFields>c__AnonStorey17()
			{
			}

			[Token(Token = "0x600253C")]
			[Address(RVA = "0x64C9F8", Offset = "0x64C9F8", VA = "0x64C9F8")]
			internal object <>m__0(Dictionary<string, object> d)
			{
				return null;
			}
		}

		[Token(Token = "0x2000578")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3D94", Offset = "0xEA3D94")]
		private sealed class <DeserializeFields>c__AnonStorey1A
		{
			[Token(Token = "0x4001B63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal DeferredSetter setter;

			[Token(Token = "0x4001B64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			internal <DeserializeFields>c__AnonStorey19 <>f__ref$25;

			[Token(Token = "0x4001B65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal <DeserializeFields>c__AnonStorey18 <>f__ref$24;

			[Token(Token = "0x600253D")]
			[Address(RVA = "0x6495B0", Offset = "0x6495B0", VA = "0x6495B0")]
			public <DeserializeFields>c__AnonStorey1A()
			{
			}

			[Token(Token = "0x600253E")]
			[Address(RVA = "0x64CA00", Offset = "0x64CA00", VA = "0x64CA00")]
			internal void <>m__0()
			{
			}
		}

		[Token(Token = "0x40014E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Encoding TextEncoding;

		[Token(Token = "0x40014E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly string DataPath;

		[Token(Token = "0x40014E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal static List<Action> FinalDeserialization;

		[Token(Token = "0x40014E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly Dictionary<Type, IEnumerable<FieldInfo>> FieldLists;

		[Token(Token = "0x40014EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly Dictionary<Type, IEnumerable<PropertyInfo>> PropertyLists;

		[Token(Token = "0x40014EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly Dictionary<Type, IEnumerable<PropertyInfo>> ChecksumLists;

		[Token(Token = "0x40014EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal static List<Type> _knownTypesList;

		[Token(Token = "0x40014ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal static Dictionary<Type, ushort> _knownTypesLookup;

		[Token(Token = "0x40014EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Dictionary<object, int> _seenObjects;

		[Token(Token = "0x40014EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static Dictionary<Type, bool> _seenTypes;

		[Token(Token = "0x40014F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Dictionary<int, object> _loadedObjects;

		[Token(Token = "0x40014F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		internal static List<string> _propertyList;

		[Token(Token = "0x40014F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal static Dictionary<string, ushort> _propertyLookup;

		[Token(Token = "0x40014F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static Stack<List<DeferredSetter>> _deferredStack;

		[Token(Token = "0x40014F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Stack<List<Action>> _finalActions;

		[Token(Token = "0x40014F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private static Stack<Dictionary<int, object>> _loadedObjectStack;

		[Token(Token = "0x40014F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Stack<Dictionary<Type, bool>> _seenTypesStack;

		[Token(Token = "0x40014F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private static Stack<Dictionary<object, int>> _storedObjectsStack;

		[Token(Token = "0x40014F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static Stack<KnownTypesStackEntry> _knownTypesStack;

		[Token(Token = "0x40014F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private static Stack<PropertyNameStackEntry> _propertyNamesStack;

		[Token(Token = "0x40014FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static Stack<int> _idStack;

		[Token(Token = "0x40014FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private static int _nextId;

		[Token(Token = "0x40014FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static readonly Dictionary<Type, ISerializeObject> Serializers;

		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		internal static readonly Dictionary<Type, ISpecialist> Specialists;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static readonly Dictionary<Type, ISerializeObject> SubTypeSerializers;

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private static readonly Dictionary<Type, ICreateObject> Creators;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static readonly Dictionary<Type, IProvideAttributeList> AttributeLists;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public static readonly Dictionary<Type, bool> DEFERRED;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private static readonly Dictionary<Assembly, bool> Assemblies;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public static bool Verbose;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static readonly Dictionary<Type, ushort> PrewarmedTypes;

		[Token(Token = "0x4001505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public static readonly List<Type> PrewarmLookup;

		[Token(Token = "0x4001506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private static readonly Dictionary<string, ushort> PrewarmedNames;

		[Token(Token = "0x4001507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private static readonly HashSet<Type> privateTypes;

		[Token(Token = "0x4001508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private static readonly Stack<Type> currentTypes;

		[Token(Token = "0x4001509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public static int currentVersion;

		[Token(Token = "0x400150A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private static int _forceJSON;

		[Token(Token = "0x400150B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private static readonly Dictionary<Type, Dictionary<string, EntryConfiguration>> StoredTypes;

		[Token(Token = "0x400150C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3744", Offset = "0xEA3744")]
		[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xEA3744", Offset = "0xEA3744")]
		private static bool <IsChecksum>k__BackingField;

		[Token(Token = "0x4001510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public static object currentlySerializingObject;

		[Token(Token = "0x4001511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private static GameObject _componentHelper;

		[Token(Token = "0x4001512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private static readonly Dictionary<Type, ISerializeObject> cachedSerializers;

		[Token(Token = "0x4001513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public static object DeserializingObject;

		[Token(Token = "0x4001514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private static readonly Stack<object> DeserializingStack;

		[Token(Token = "0x4001515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		internal static List<DeferredSetter> FixupFunctions;

		[Token(Token = "0x4001516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		internal static List<IDeserialized> DeserializedObject;

		[Token(Token = "0x4001517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private static readonly Dictionary<Type, WriteAValue> Writers;

		[Token(Token = "0x4001518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public static readonly Dictionary<Type, ReadAValue> Readers;

		[Token(Token = "0x4001519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private static readonly Dictionary<string, bool> componentNames;

		[Token(Token = "0x400151A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3814", Offset = "0xEA3814")]
		private static Func<DeferredSetter, bool> <>f__am$cache0;

		[Token(Token = "0x400151B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3824", Offset = "0xEA3824")]
		private static Func<DeferredSetter, bool> <>f__am$cache1;

		[Token(Token = "0x400151C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3834", Offset = "0xEA3834")]
		private static Func<string, char, string> <>f__am$cache2;

		[Token(Token = "0x400151D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3844", Offset = "0xEA3844")]
		private static ScanTypeFunction <>f__am$cache3;

		[Token(Token = "0x400151E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3854", Offset = "0xEA3854")]
		private static ScanTypeFunction <>f__am$cache4;

		[Token(Token = "0x400151F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3864", Offset = "0xEA3864")]
		private static ScanTypeFunction <>f__am$cache5;

		[Token(Token = "0x4001520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3874", Offset = "0xEA3874")]
		private static ScanTypeFunction <>f__am$cache6;

		[Token(Token = "0x4001521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3884", Offset = "0xEA3884")]
		private static ScanTypeFunction <>f__am$cache7;

		[Token(Token = "0x4001522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3894", Offset = "0xEA3894")]
		private static Func<Type, IEnumerable<FieldInfo>> <>f__am$cache8;

		[Token(Token = "0x4001523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA38A4", Offset = "0xEA38A4")]
		private static Func<Type, IEnumerable<FieldInfo>> <>f__am$cache9;

		[Token(Token = "0x4001524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA38B4", Offset = "0xEA38B4")]
		private static WriteAValue <>f__mg$cache0;

		[Token(Token = "0x4001525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA38C4", Offset = "0xEA38C4")]
		private static WriteAValue <>f__mg$cache1;

		[Token(Token = "0x4001526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA38D4", Offset = "0xEA38D4")]
		private static WriteAValue <>f__mg$cache2;

		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA38E4", Offset = "0xEA38E4")]
		private static WriteAValue <>f__mg$cache3;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA38F4", Offset = "0xEA38F4")]
		private static WriteAValue <>f__mg$cache4;

		[Token(Token = "0x4001529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3904", Offset = "0xEA3904")]
		private static WriteAValue <>f__mg$cache5;

		[Token(Token = "0x400152A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3914", Offset = "0xEA3914")]
		private static WriteAValue <>f__mg$cache6;

		[Token(Token = "0x400152B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3924", Offset = "0xEA3924")]
		private static WriteAValue <>f__mg$cache7;

		[Token(Token = "0x400152C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3934", Offset = "0xEA3934")]
		private static WriteAValue <>f__mg$cache8;

		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3944", Offset = "0xEA3944")]
		private static WriteAValue <>f__mg$cache9;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3954", Offset = "0xEA3954")]
		private static WriteAValue <>f__mg$cacheA;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3964", Offset = "0xEA3964")]
		private static WriteAValue <>f__mg$cacheB;

		[Token(Token = "0x4001530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3974", Offset = "0xEA3974")]
		private static WriteAValue <>f__mg$cacheC;

		[Token(Token = "0x4001531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3984", Offset = "0xEA3984")]
		private static WriteAValue <>f__mg$cacheD;

		[Token(Token = "0x4001532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3994", Offset = "0xEA3994")]
		private static WriteAValue <>f__mg$cacheE;

		[Token(Token = "0x4001533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA39A4", Offset = "0xEA39A4")]
		private static WriteAValue <>f__mg$cacheF;

		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA39B4", Offset = "0xEA39B4")]
		private static WriteAValue <>f__mg$cache10;

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA39C4", Offset = "0xEA39C4")]
		private static WriteAValue <>f__mg$cache11;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA39D4", Offset = "0xEA39D4")]
		private static ReadAValue <>f__mg$cache12;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA39E4", Offset = "0xEA39E4")]
		private static ReadAValue <>f__mg$cache13;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA39F4", Offset = "0xEA39F4")]
		private static ReadAValue <>f__mg$cache14;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3A04", Offset = "0xEA3A04")]
		private static ReadAValue <>f__mg$cache15;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3A14", Offset = "0xEA3A14")]
		private static ReadAValue <>f__mg$cache16;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3A24", Offset = "0xEA3A24")]
		private static ReadAValue <>f__mg$cache17;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3A34", Offset = "0xEA3A34")]
		private static ReadAValue <>f__mg$cache18;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3A44", Offset = "0xEA3A44")]
		private static ReadAValue <>f__mg$cache19;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3A54", Offset = "0xEA3A54")]
		private static ReadAValue <>f__mg$cache1A;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3A64", Offset = "0xEA3A64")]
		private static ReadAValue <>f__mg$cache1B;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3A74", Offset = "0xEA3A74")]
		private static ReadAValue <>f__mg$cache1C;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3A84", Offset = "0xEA3A84")]
		private static ReadAValue <>f__mg$cache1D;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3A94", Offset = "0xEA3A94")]
		private static ReadAValue <>f__mg$cache1E;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3AA4", Offset = "0xEA3AA4")]
		private static ReadAValue <>f__mg$cache1F;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3AB4", Offset = "0xEA3AB4")]
		private static ReadAValue <>f__mg$cache20;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3AC4", Offset = "0xEA3AC4")]
		private static ReadAValue <>f__mg$cache21;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3AD4", Offset = "0xEA3AD4")]
		private static ReadAValue <>f__mg$cache22;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3AE4", Offset = "0xEA3AE4")]
		private static ReadAValue <>f__mg$cache23;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3AF4", Offset = "0xEA3AF4")]
		private static Func<FieldInfo, bool> <>f__am$cacheA;

		[Token(Token = "0x170001DD")]
		public static bool IsChecksum
		{
			[Token(Token = "0x6001F32")]
			[Address(RVA = "0x62AA2C", Offset = "0x62AA2C", VA = "0x62AA2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3B04", Offset = "0xEA3B04")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001F33")]
			[Address(RVA = "0x633984", Offset = "0x633984", VA = "0x633984")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3B14", Offset = "0xEA3B14")]
			private set
			{
			}
		}

		[Token(Token = "0x14000086")]
		public static event Func<Type, bool> CanSerialize
		{
			[Token(Token = "0x6001F3F")]
			[Address(RVA = "0x636524", Offset = "0x636524", VA = "0x636524")]
			add
			{
			}
			[Token(Token = "0x6001F40")]
			[Address(RVA = "0x636698", Offset = "0x636698", VA = "0x636698")]
			remove
			{
			}
		}

		[Token(Token = "0x14000087")]
		public static event EventHandler<ObjectMappingEventArgs> CreateType
		{
			[Token(Token = "0x6001F45")]
			[Address(RVA = "0x636B34", Offset = "0x636B34", VA = "0x636B34")]
			add
			{
			}
			[Token(Token = "0x6001F46")]
			[Address(RVA = "0x636CA8", Offset = "0x636CA8", VA = "0x636CA8")]
			remove
			{
			}
		}

		[Token(Token = "0x14000088")]
		public static event EventHandler<TypeMappingEventArgs> MapMissingType
		{
			[Token(Token = "0x6001F48")]
			[Address(RVA = "0x636ED0", Offset = "0x636ED0", VA = "0x636ED0")]
			add
			{
			}
			[Token(Token = "0x6001F49")]
			[Address(RVA = "0x637044", Offset = "0x637044", VA = "0x637044")]
			remove
			{
			}
		}

		[Token(Token = "0x6001F2F")]
		[Address(RVA = "0x62FACC", Offset = "0x62FACC", VA = "0x62FACC")]
		static UnitySerializer()
		{
		}

		[Token(Token = "0x6001F30")]
		[Address(RVA = "0x63385C", Offset = "0x63385C", VA = "0x63385C")]
		public static void ForceJSONSerialization()
		{
		}

		[Token(Token = "0x6001F31")]
		[Address(RVA = "0x6338F0", Offset = "0x6338F0", VA = "0x6338F0")]
		public static void UnforceJSONSerialization()
		{
		}

		[Token(Token = "0x6001F34")]
		public static T Copy<T>(T original) where T : class
		{
			return null;
		}

		[Token(Token = "0x6001F35")]
		[Address(RVA = "0x621D20", Offset = "0x621D20", VA = "0x621D20")]
		public static Type GetTypeEx(object fullTypeName)
		{
			return null;
		}

		[Token(Token = "0x6001F36")]
		[Address(RVA = "0x633A1C", Offset = "0x633A1C", VA = "0x633A1C")]
		public static void SerializeToFile(object obj, string fileName)
		{
		}

		[Token(Token = "0x6001F37")]
		public static T DeserializeFromFile<T>(string fileName) where T : class
		{
			return null;
		}

		[Token(Token = "0x6001F38")]
		[Address(RVA = "0x633EFC", Offset = "0x633EFC", VA = "0x633EFC")]
		public static void InformDeserializedObjects(FinalProcess process)
		{
		}

		[Token(Token = "0x6001F39")]
		[Address(RVA = "0x6340AC", Offset = "0x6340AC", VA = "0x6340AC")]
		public static void InformDeserializedObjects()
		{
		}

		[Token(Token = "0x6001F3A")]
		[Address(RVA = "0x6343D0", Offset = "0x6343D0", VA = "0x6343D0")]
		public static void AddFinalAction(Action a)
		{
		}

		[Token(Token = "0x6001F3B")]
		[Address(RVA = "0x634488", Offset = "0x634488", VA = "0x634488")]
		public static FinalProcess TakeOwnershipOfFinalization()
		{
			return default(FinalProcess);
		}

		[Token(Token = "0x6001F3C")]
		[Address(RVA = "0x6346A4", Offset = "0x6346A4", VA = "0x6346A4")]
		public static void RunDeferredActions(int count = 1, bool clear = true)
		{
		}

		[Token(Token = "0x6001F3D")]
		[Address(RVA = "0x635704", Offset = "0x635704", VA = "0x635704")]
		public static void RunDeferredActions(FinalProcess process, int count = 1, bool clear = true)
		{
		}

		[Token(Token = "0x6001F3E")]
		[Address(RVA = "0x6363D4", Offset = "0x6363D4", VA = "0x6363D4")]
		public static void AddFixup(DeferredSetter setter)
		{
		}

		[Token(Token = "0x6001F41")]
		[Address(RVA = "0x63680C", Offset = "0x63680C", VA = "0x63680C")]
		internal static bool CanSerializeType(Type tp)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F42")]
		[Address(RVA = "0x636910", Offset = "0x636910", VA = "0x636910")]
		internal static void PushPropertyNames(bool clear)
		{
		}

		[Token(Token = "0x6001F43")]
		[Address(RVA = "0x623C74", Offset = "0x623C74", VA = "0x623C74")]
		internal static void PushPropertyNames()
		{
		}

		[Token(Token = "0x6001F44")]
		[Address(RVA = "0x624600", Offset = "0x624600", VA = "0x624600")]
		internal static void PopPropertyNames()
		{
		}

		[Token(Token = "0x6001F47")]
		[Address(RVA = "0x636E1C", Offset = "0x636E1C", VA = "0x636E1C")]
		private static void InvokeCreateType(ObjectMappingEventArgs e)
		{
		}

		[Token(Token = "0x6001F4A")]
		[Address(RVA = "0x625F98", Offset = "0x625F98", VA = "0x625F98")]
		internal static void InvokeMapMissingType(TypeMappingEventArgs e)
		{
		}

		[Token(Token = "0x6001F4B")]
		public static T Deserialize<T>(byte[] array) where T : class
		{
			return null;
		}

		[Token(Token = "0x6001F4C")]
		[Address(RVA = "0x6371B8", Offset = "0x6371B8", VA = "0x6371B8")]
		public static void WriteToFile(this byte[] data, [Optional] string filename)
		{
		}

		[Token(Token = "0x6001F4D")]
		[Address(RVA = "0x6372B8", Offset = "0x6372B8", VA = "0x6372B8")]
		public static void WriteToFile(this string str, [Optional] string filename)
		{
		}

		[Token(Token = "0x6001F4E")]
		public static T JSONDeserialize<T>(string data) where T : class
		{
			return null;
		}

		[Token(Token = "0x6001F4F")]
		public static T JSONDeserialize<T>(Stream stream) where T : class
		{
			return null;
		}

		[Token(Token = "0x6001F50")]
		public static T Deserialize<T>(Stream stream) where T : class
		{
			return null;
		}

		[Token(Token = "0x6001F51")]
		[Address(RVA = "0x6373B8", Offset = "0x6373B8", VA = "0x6373B8")]
		public static string GetChecksum(object item)
		{
			return null;
		}

		[Token(Token = "0x6001F52")]
		[Address(RVA = "0x637B60", Offset = "0x637B60", VA = "0x637B60")]
		private static string Encode(byte[] checksum)
		{
			return null;
		}

		[Token(Token = "0x6001F53")]
		[Address(RVA = "0x633028", Offset = "0x633028", VA = "0x633028")]
		public static void RegisterSerializationAssembly()
		{
		}

		[Token(Token = "0x6001F54")]
		[Address(RVA = "0x6330A4", Offset = "0x6330A4", VA = "0x6330A4")]
		public static void RegisterSerializationAssembly(Assembly assembly)
		{
		}

		[Token(Token = "0x6001F55")]
		[Address(RVA = "0x637F98", Offset = "0x637F98", VA = "0x637F98")]
		internal static void ScanAllTypesForAttribute(ScanTypeFunction function, Assembly assembly)
		{
		}

		[Token(Token = "0x6001F56")]
		[Address(RVA = "0x637D8C", Offset = "0x637D8C", VA = "0x637D8C")]
		internal static void ScanAllTypesForAttribute(ScanTypeFunction function, Assembly assembly, Type attribute)
		{
		}

		[Token(Token = "0x6001F57")]
		[Address(RVA = "0x62AAB8", Offset = "0x62AAB8", VA = "0x62AAB8")]
		internal static IEnumerable<PropertyInfo> GetPropertyInfo(Type itm)
		{
			return null;
		}

		[Token(Token = "0x6001F58")]
		[Address(RVA = "0x63840C", Offset = "0x63840C", VA = "0x63840C")]
		public static IEnumerable<PropertyInfo> GetProperties(Type item)
		{
			return null;
		}

		[Token(Token = "0x6001F59")]
		[Address(RVA = "0x6384AC", Offset = "0x6384AC", VA = "0x6384AC")]
		public static IEnumerable<FieldInfo> GetFields(Type item)
		{
			return null;
		}

		[Token(Token = "0x6001F5A")]
		[Address(RVA = "0x63854C", Offset = "0x63854C", VA = "0x63854C")]
		public static void AddPrivateType(Type tp)
		{
		}

		[Token(Token = "0x6001F5B")]
		[Address(RVA = "0x62B490", Offset = "0x62B490", VA = "0x62B490")]
		internal static IEnumerable<FieldInfo> GetFieldInfo(Type itm)
		{
			return null;
		}

		[Token(Token = "0x6001F5C")]
		[Address(RVA = "0x623920", Offset = "0x623920", VA = "0x623920")]
		internal static ushort GetPropertyDefinitionId(string name)
		{
			return default(ushort);
		}

		[Token(Token = "0x6001F5D")]
		[Address(RVA = "0x63860C", Offset = "0x63860C", VA = "0x63860C")]
		public static object Deserialize(IStorage storage)
		{
			return null;
		}

		[Token(Token = "0x6001F5E")]
		[Address(RVA = "0x63B938", Offset = "0x63B938", VA = "0x63B938")]
		public static object Deserialize(Stream inputStream)
		{
			return null;
		}

		[Token(Token = "0x6001F5F")]
		[Address(RVA = "0x63BF90", Offset = "0x63BF90", VA = "0x63BF90")]
		public static object JSONDeserialize(Stream inputStream)
		{
			return null;
		}

		[Token(Token = "0x6001F60")]
		[Address(RVA = "0x63C014", Offset = "0x63C014", VA = "0x63C014")]
		public static object JSONDeserialize(Stream inputStream, object instance)
		{
			return null;
		}

		[Token(Token = "0x6001F61")]
		[Address(RVA = "0x63B9BC", Offset = "0x63B9BC", VA = "0x63B9BC")]
		public static object Deserialize(Stream inputStream, object instance)
		{
			return null;
		}

		[Token(Token = "0x6001F62")]
		[Address(RVA = "0x62E950", Offset = "0x62E950", VA = "0x62E950")]
		public static string Escape(string input)
		{
			return null;
		}

		[Token(Token = "0x6001F63")]
		[Address(RVA = "0x62CD48", Offset = "0x62CD48", VA = "0x62CD48")]
		public static string UnEscape(string input)
		{
			return null;
		}

		[Token(Token = "0x6001F64")]
		[Address(RVA = "0x63C4D8", Offset = "0x63C4D8", VA = "0x63C4D8")]
		private static string ConvertBytesToJSON(byte[] data)
		{
			return null;
		}

		[Token(Token = "0x6001F65")]
		[Address(RVA = "0x63C58C", Offset = "0x63C58C", VA = "0x63C58C")]
		private static byte[] ConvertJSONToBytes(string data)
		{
			return null;
		}

		[Token(Token = "0x6001F66")]
		[Address(RVA = "0x6244B0", Offset = "0x6244B0", VA = "0x6244B0")]
		internal static void PopKnownTypes()
		{
		}

		[Token(Token = "0x6001F67")]
		[Address(RVA = "0x639574", Offset = "0x639574", VA = "0x639574")]
		private static void PushKnownTypes(bool clear)
		{
		}

		[Token(Token = "0x6001F68")]
		[Address(RVA = "0x623BF8", Offset = "0x623BF8", VA = "0x623BF8")]
		internal static void PushKnownTypes()
		{
		}

		[Token(Token = "0x6001F69")]
		[Address(RVA = "0x63C648", Offset = "0x63C648", VA = "0x63C648")]
		public static object Deserialize(byte[] bytes)
		{
			return null;
		}

		[Token(Token = "0x6001F6A")]
		[Address(RVA = "0x63C940", Offset = "0x63C940", VA = "0x63C940")]
		public static object JSONDeserialize(string json)
		{
			return null;
		}

		[Token(Token = "0x6001F6B")]
		[Address(RVA = "0x63CC44", Offset = "0x63CC44", VA = "0x63CC44")]
		public static void DeserializeInto(byte[] bytes, object instance)
		{
		}

		[Token(Token = "0x6001F6C")]
		[Address(RVA = "0x63CEB0", Offset = "0x63CEB0", VA = "0x63CEB0")]
		public static void JSONDeserializeInto(string json, object instance)
		{
		}

		[Token(Token = "0x6001F6D")]
		[Address(RVA = "0x638F2C", Offset = "0x638F2C", VA = "0x638F2C")]
		private static void CreateStacks()
		{
		}

		[Token(Token = "0x6001F6E")]
		[Address(RVA = "0x63D1A4", Offset = "0x63D1A4", VA = "0x63D1A4")]
		public static void JSONSerialize(object item, IStorage storage)
		{
		}

		[Token(Token = "0x6001F6F")]
		[Address(RVA = "0x63D628", Offset = "0x63D628", VA = "0x63D628")]
		public static void Serialize(object item, IStorage storage)
		{
		}

		[Token(Token = "0x6001F70")]
		[Address(RVA = "0x63D6BC", Offset = "0x63D6BC", VA = "0x63D6BC")]
		public static void Serialize(object item, IStorage storage, bool forDeserializeInto)
		{
		}

		[Token(Token = "0x6001F71")]
		[Address(RVA = "0x63D238", Offset = "0x63D238", VA = "0x63D238")]
		public static void JSONSerialize(object item, IStorage storage, bool forDeserializeInto)
		{
		}

		[Token(Token = "0x6001F72")]
		[Address(RVA = "0x63F748", Offset = "0x63F748", VA = "0x63F748")]
		public static void JSONSerialize(object item, Stream outputStream)
		{
		}

		[Token(Token = "0x6001F73")]
		[Address(RVA = "0x63FAE4", Offset = "0x63FAE4", VA = "0x63FAE4")]
		public static void Serialize(object item, Stream outputStream)
		{
		}

		[Token(Token = "0x6001F74")]
		[Address(RVA = "0x63F7DC", Offset = "0x63F7DC", VA = "0x63F7DC")]
		public static void JSONSerialize(object item, Stream outputStream, bool forDeserializeInto)
		{
		}

		[Token(Token = "0x6001F75")]
		[Address(RVA = "0x633C14", Offset = "0x633C14", VA = "0x633C14")]
		public static void Serialize(object item, Stream outputStream, bool forDeserializeInto)
		{
		}

		[Token(Token = "0x6001F76")]
		[Address(RVA = "0x637834", Offset = "0x637834", VA = "0x637834")]
		public static byte[] Serialize(object item)
		{
			return null;
		}

		[Token(Token = "0x6001F77")]
		[Address(RVA = "0x63FB78", Offset = "0x63FB78", VA = "0x63FB78")]
		public static string JSONSerialize(object item)
		{
			return null;
		}

		[Token(Token = "0x6001F78")]
		[Address(RVA = "0x63FE54", Offset = "0x63FE54", VA = "0x63FE54")]
		public static string JSONSerializeForDeserializeInto(object item)
		{
			return null;
		}

		[Token(Token = "0x6001F79")]
		[Address(RVA = "0x640134", Offset = "0x640134", VA = "0x640134")]
		public static byte[] SerializeForDeserializeInto(object item)
		{
			return null;
		}

		[Token(Token = "0x6001F7A")]
		[Address(RVA = "0x6403E4", Offset = "0x6403E4", VA = "0x6403E4")]
		public static string JSONSerialize(object item, bool makeVerbose)
		{
			return null;
		}

		[Token(Token = "0x6001F7B")]
		[Address(RVA = "0x6406EC", Offset = "0x6406EC", VA = "0x6406EC")]
		public static byte[] Serialize(object item, bool makeVerbose)
		{
			return null;
		}

		[Token(Token = "0x6001F7C")]
		[Address(RVA = "0x640A54", Offset = "0x640A54", VA = "0x640A54")]
		private static bool IsSimpleType(Type tp)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F7D")]
		[Address(RVA = "0x640C90", Offset = "0x640C90", VA = "0x640C90")]
		private static void SerializeObjectAndProperties(object item, Type itemType, IStorage storage)
		{
		}

		[Token(Token = "0x6001F7E")]
		[Address(RVA = "0x62A0FC", Offset = "0x62A0FC", VA = "0x62A0FC")]
		internal static object CreateObject(Type itemType)
		{
			return null;
		}

		[Token(Token = "0x6001F7F")]
		[Address(RVA = "0x641A5C", Offset = "0x641A5C", VA = "0x641A5C")]
		public static void DummyAction()
		{
		}

		[Token(Token = "0x6001F80")]
		[Address(RVA = "0x641744", Offset = "0x641744", VA = "0x641744")]
		private static object CreateInstance(Type itemType)
		{
			return null;
		}

		[Token(Token = "0x6001F81")]
		[Address(RVA = "0x623600", Offset = "0x623600", VA = "0x623600")]
		internal static ushort GetTypeId(Type tp)
		{
			return default(ushort);
		}

		[Token(Token = "0x6001F82")]
		[Address(RVA = "0x641AEC", Offset = "0x641AEC", VA = "0x641AEC")]
		private static void UpdateEntryWithName(Entry entry)
		{
		}

		[Token(Token = "0x6001F83")]
		[Address(RVA = "0x641F70", Offset = "0x641F70", VA = "0x641F70")]
		private static FieldInfo GetField(Type tp, string name)
		{
			return null;
		}

		[Token(Token = "0x6001F84")]
		[Address(RVA = "0x641FD4", Offset = "0x641FD4", VA = "0x641FD4")]
		private static void SerializeObject(Entry entry, IStorage storage)
		{
		}

		[Token(Token = "0x6001F85")]
		[Address(RVA = "0x642068", Offset = "0x642068", VA = "0x642068")]
		private static bool CompareToNull(object o)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F86")]
		[Address(RVA = "0x63DB90", Offset = "0x63DB90", VA = "0x63DB90")]
		private static void SerializeObject(Entry entry, IStorage storage, bool first)
		{
		}

		[Token(Token = "0x6001F87")]
		[Address(RVA = "0x643EF8", Offset = "0x643EF8", VA = "0x643EF8")]
		private static void SerializeList(ICollection item, Type tp, IStorage storage)
		{
		}

		[Token(Token = "0x6001F88")]
		[Address(RVA = "0x64305C", Offset = "0x64305C", VA = "0x64305C")]
		private static void SerializeDictionary(IDictionary item, Type tp, IStorage storage)
		{
		}

		[Token(Token = "0x6001F89")]
		[Address(RVA = "0x642854", Offset = "0x642854", VA = "0x642854")]
		private static void SerializeArray(Array item, Type tp, IStorage storage)
		{
		}

		[Token(Token = "0x6001F8A")]
		[Address(RVA = "0x642CEC", Offset = "0x642CEC", VA = "0x642CEC")]
		private static void SerializeMultiDimensionArray(Array item, Type tp, IStorage storage)
		{
		}

		[Token(Token = "0x6001F8B")]
		[Address(RVA = "0x6445EC", Offset = "0x6445EC", VA = "0x6445EC")]
		private static void SerializeArrayPart(Array item, int i, int[] indices, IStorage storage)
		{
		}

		[Token(Token = "0x6001F8C")]
		[Address(RVA = "0x641220", Offset = "0x641220", VA = "0x641220")]
		private static void WriteProperties(Type itemType, object item, IStorage storage)
		{
		}

		[Token(Token = "0x6001F8D")]
		[Address(RVA = "0x640D6C", Offset = "0x640D6C", VA = "0x640D6C")]
		private static void WriteFields(Type itemType, object item, IStorage storage)
		{
		}

		[Token(Token = "0x6001F8E")]
		[Address(RVA = "0x639790", Offset = "0x639790", VA = "0x639790")]
		internal static object DeserializeObject(Entry entry, IStorage storage)
		{
			return null;
		}

		[Token(Token = "0x6001F8F")]
		[Address(RVA = "0x644B94", Offset = "0x644B94", VA = "0x644B94")]
		private static object DeserializeArray(Type itemType, IStorage storage, int count, int objectID)
		{
			return null;
		}

		[Token(Token = "0x6001F90")]
		[Address(RVA = "0x6448B8", Offset = "0x6448B8", VA = "0x6448B8")]
		private static object DeserializeMultiDimensionArray(Type itemType, IStorage storage, int objectID)
		{
			return null;
		}

		[Token(Token = "0x6001F91")]
		[Address(RVA = "0x6475F0", Offset = "0x6475F0", VA = "0x6475F0")]
		private static void DeserializeArrayPart(Array sourceArrays, int i, int[] indices, Type itemType, IStorage storage, int objectID)
		{
		}

		[Token(Token = "0x6001F92")]
		[Address(RVA = "0x6455EC", Offset = "0x6455EC", VA = "0x6455EC")]
		private static object DeserializeDictionary(IDictionary o, Type itemType, IStorage storage)
		{
			return null;
		}

		[Token(Token = "0x6001F93")]
		[Address(RVA = "0x646968", Offset = "0x646968", VA = "0x646968")]
		private static object DeserializeList(IList o, Type itemType, IStorage storage)
		{
			return null;
		}

		[Token(Token = "0x6001F94")]
		[Address(RVA = "0x647308", Offset = "0x647308", VA = "0x647308")]
		private static object DeserializeObjectAndProperties(object o, Type itemType, IStorage storage)
		{
			return null;
		}

		[Token(Token = "0x6001F95")]
		[Address(RVA = "0x648734", Offset = "0x648734", VA = "0x648734")]
		private static void DeserializeProperties(IStorage storage, Type itemType, object o)
		{
		}

		[Token(Token = "0x6001F96")]
		[Address(RVA = "0x647910", Offset = "0x647910", VA = "0x647910")]
		private static void DeserializeFields(IStorage storage, Type itemType, object o)
		{
		}

		[Token(Token = "0x6001F97")]
		[Address(RVA = "0x6495B8", Offset = "0x6495B8", VA = "0x6495B8")]
		private static object ShortReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001F98")]
		[Address(RVA = "0x649648", Offset = "0x649648", VA = "0x649648")]
		private static object LongReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001F99")]
		[Address(RVA = "0x6496D8", Offset = "0x6496D8", VA = "0x6496D8")]
		private static object GuidReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001F9A")]
		[Address(RVA = "0x649840", Offset = "0x649840", VA = "0x649840")]
		private static object SByteReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001F9B")]
		[Address(RVA = "0x6498D0", Offset = "0x6498D0", VA = "0x6498D0")]
		private static object ByteReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001F9C")]
		[Address(RVA = "0x649960", Offset = "0x649960", VA = "0x649960")]
		private static object UIntReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001F9D")]
		[Address(RVA = "0x6499F0", Offset = "0x6499F0", VA = "0x6499F0")]
		private static object IntReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001F9E")]
		[Address(RVA = "0x649A80", Offset = "0x649A80", VA = "0x649A80")]
		private static object ULongReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001F9F")]
		[Address(RVA = "0x649B10", Offset = "0x649B10", VA = "0x649B10")]
		private static object DoubleReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001FA0")]
		[Address(RVA = "0x649BA4", Offset = "0x649BA4", VA = "0x649BA4")]
		private static object UShortReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001FA1")]
		[Address(RVA = "0x649C34", Offset = "0x649C34", VA = "0x649C34")]
		private static object CharReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001FA2")]
		[Address(RVA = "0x649CC4", Offset = "0x649CC4", VA = "0x649CC4")]
		private static object FloatReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001FA3")]
		[Address(RVA = "0x649D54", Offset = "0x649D54", VA = "0x649D54")]
		private static object TimeSpanReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001FA4")]
		[Address(RVA = "0x649E10", Offset = "0x649E10", VA = "0x649E10")]
		private static object DateTimeReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001FA5")]
		[Address(RVA = "0x649ED4", Offset = "0x649ED4", VA = "0x649ED4")]
		private static object ByteArrayReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001FA6")]
		[Address(RVA = "0x649F2C", Offset = "0x649F2C", VA = "0x649F2C")]
		private static object DecimalReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001FA7")]
		[Address(RVA = "0x64A0E8", Offset = "0x64A0E8", VA = "0x64A0E8")]
		private static object BoolReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001FA8")]
		[Address(RVA = "0x64A184", Offset = "0x64A184", VA = "0x64A184")]
		private static object AStringReader(BinaryReader reader)
		{
			return null;
		}

		[Token(Token = "0x6001FA9")]
		[Address(RVA = "0x64A24C", Offset = "0x64A24C", VA = "0x64A24C")]
		private static void SByteWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FAA")]
		[Address(RVA = "0x64A338", Offset = "0x64A338", VA = "0x64A338")]
		private static void ShortWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FAB")]
		[Address(RVA = "0x64A424", Offset = "0x64A424", VA = "0x64A424")]
		private static void LongWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FAC")]
		[Address(RVA = "0x64A514", Offset = "0x64A514", VA = "0x64A514")]
		private static void ByteWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FAD")]
		[Address(RVA = "0x64A600", Offset = "0x64A600", VA = "0x64A600")]
		private static void UIntWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FAE")]
		[Address(RVA = "0x64A6EC", Offset = "0x64A6EC", VA = "0x64A6EC")]
		private static void IntWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FAF")]
		[Address(RVA = "0x64A7D8", Offset = "0x64A7D8", VA = "0x64A7D8")]
		private static void ULongWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FB0")]
		[Address(RVA = "0x64A8C8", Offset = "0x64A8C8", VA = "0x64A8C8")]
		private static void DoubleWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FB1")]
		[Address(RVA = "0x64A9BC", Offset = "0x64A9BC", VA = "0x64A9BC")]
		private static void UShortWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FB2")]
		[Address(RVA = "0x64AAA8", Offset = "0x64AAA8", VA = "0x64AAA8")]
		private static void CharWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FB3")]
		[Address(RVA = "0x64AB94", Offset = "0x64AB94", VA = "0x64AB94")]
		private static void TimeSpanWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FB4")]
		[Address(RVA = "0x64ACB4", Offset = "0x64ACB4", VA = "0x64ACB4")]
		private static void DateTimeWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FB5")]
		[Address(RVA = "0x64ADE8", Offset = "0x64ADE8", VA = "0x64ADE8")]
		private static void GuidWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FB6")]
		[Address(RVA = "0x64AF10", Offset = "0x64AF10", VA = "0x64AF10")]
		private static void BoolWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FB7")]
		[Address(RVA = "0x64B00C", Offset = "0x64B00C", VA = "0x64B00C")]
		private static void ByteArrayWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FB8")]
		[Address(RVA = "0x64B0CC", Offset = "0x64B0CC", VA = "0x64B0CC")]
		private static void FloatWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FB9")]
		[Address(RVA = "0x64B1B8", Offset = "0x64B1B8", VA = "0x64B1B8")]
		private static void DecimalWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FBA")]
		[Address(RVA = "0x64B3A8", Offset = "0x64B3A8", VA = "0x64B3A8")]
		private static void StringWriter(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FBB")]
		[Address(RVA = "0x624A04", Offset = "0x624A04", VA = "0x624A04")]
		internal static void WriteValue(BinaryWriter writer, object value)
		{
		}

		[Token(Token = "0x6001FBC")]
		[Address(RVA = "0x64B854", Offset = "0x64B854", VA = "0x64B854")]
		internal static object ReadValue(BinaryReader reader, Type tp)
		{
			return null;
		}

		[Token(Token = "0x6001FBD")]
		[Address(RVA = "0x64B98C", Offset = "0x64B98C", VA = "0x64B98C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3B44", Offset = "0xEA3B44")]
		private static bool <RunDeferredActions>m__0(DeferredSetter f)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FBE")]
		[Address(RVA = "0x64B9AC", Offset = "0x64B9AC", VA = "0x64B9AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3B54", Offset = "0xEA3B54")]
		private static bool <RunDeferredActions>m__1(DeferredSetter f)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FBF")]
		[Address(RVA = "0x64B9CC", Offset = "0x64B9CC", VA = "0x64B9CC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3B64", Offset = "0xEA3B64")]
		private static string <Encode>m__2(string current, char c)
		{
			return null;
		}

		[Token(Token = "0x6001FC0")]
		[Address(RVA = "0x64BB24", Offset = "0x64BB24", VA = "0x64BB24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3B74", Offset = "0xEA3B74")]
		private static void <RegisterSerializationAssembly>m__3(Type tp, Attribute attr)
		{
		}

		[Token(Token = "0x6001FC1")]
		[Address(RVA = "0x64BD00", Offset = "0x64BD00", VA = "0x64BD00")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3B84", Offset = "0xEA3B84")]
		private static void <RegisterSerializationAssembly>m__4(Type tp, Attribute attr)
		{
		}

		[Token(Token = "0x6001FC2")]
		[Address(RVA = "0x64BEDC", Offset = "0x64BEDC", VA = "0x64BEDC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3B94", Offset = "0xEA3B94")]
		private static void <RegisterSerializationAssembly>m__5(Type tp, Attribute attr)
		{
		}

		[Token(Token = "0x6001FC3")]
		[Address(RVA = "0x64C0B8", Offset = "0x64C0B8", VA = "0x64C0B8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3BA4", Offset = "0xEA3BA4")]
		private static void <RegisterSerializationAssembly>m__6(Type tp, Attribute attr)
		{
		}

		[Token(Token = "0x6001FC4")]
		[Address(RVA = "0x64C1A0", Offset = "0x64C1A0", VA = "0x64C1A0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3BB4", Offset = "0xEA3BB4")]
		private static void <RegisterSerializationAssembly>m__7(Type tp, Attribute attr)
		{
		}

		[Token(Token = "0x6001FC5")]
		[Address(RVA = "0x64C37C", Offset = "0x64C37C", VA = "0x64C37C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3BC4", Offset = "0xEA3BC4")]
		private static IEnumerable<FieldInfo> <GetFieldInfo>m__8(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001FC6")]
		[Address(RVA = "0x64C528", Offset = "0x64C528", VA = "0x64C528")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3BD4", Offset = "0xEA3BD4")]
		private static IEnumerable<FieldInfo> <GetFieldInfo>m__9(Type p)
		{
			return null;
		}

		[Token(Token = "0x6001FC7")]
		[Address(RVA = "0x64C55C", Offset = "0x64C55C", VA = "0x64C55C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3BE4", Offset = "0xEA3BE4")]
		private static string <UnitySerializer>m__A(MemberInfo m)
		{
			return null;
		}

		[Token(Token = "0x6001FC8")]
		[Address(RVA = "0x64C58C", Offset = "0x64C58C", VA = "0x64C58C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3BF4", Offset = "0xEA3BF4")]
		private static string <UnitySerializer>m__B(string m)
		{
			return null;
		}

		[Token(Token = "0x6001FC9")]
		[Address(RVA = "0x64C594", Offset = "0x64C594", VA = "0x64C594")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3C04", Offset = "0xEA3C04")]
		private static bool <UnitySerializer>m__C(string m)
		{
			return default(bool);
		}

		[Token(Token = "0x6001FCA")]
		[Address(RVA = "0x64C59C", Offset = "0x64C59C", VA = "0x64C59C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA3C14", Offset = "0xEA3C14")]
		private static bool <GetFieldInfo>m__D(FieldInfo f)
		{
			return default(bool);
		}
	}
}
[Token(Token = "0x2000475")]
public static class CompressionHelper
{
	[Token(Token = "0x4001564")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string technique;

	[Token(Token = "0x6001FEF")]
	[Address(RVA = "0x19E2C38", Offset = "0x19E2C38", VA = "0x19E2C38")]
	public static string Compress(byte[] data)
	{
		return null;
	}

	[Token(Token = "0x6001FF0")]
	[Address(RVA = "0x19E2FDC", Offset = "0x19E2FDC", VA = "0x19E2FDC")]
	public static byte[] Decompress(string data)
	{
		return null;
	}
}
namespace ICSharpCode.SharpZipLib.Checksums
{
	[Token(Token = "0x2000476")]
	public sealed class Adler32 : IChecksum
	{
		[Token(Token = "0x4001565")]
		private const uint BASE = 65521u;

		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private uint checksum;

		[Token(Token = "0x170001E0")]
		public long Value
		{
			[Token(Token = "0x6001FF3")]
			[Address(RVA = "0x3A1A4C", Offset = "0x3A1A4C", VA = "0x3A1A4C", Slot = "4")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x6001FF2")]
		[Address(RVA = "0x3A1A20", Offset = "0x3A1A20", VA = "0x3A1A20")]
		public Adler32()
		{
		}

		[Token(Token = "0x6001FF4")]
		[Address(RVA = "0x3A1A40", Offset = "0x3A1A40", VA = "0x3A1A40", Slot = "5")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001FF5")]
		[Address(RVA = "0x3A1A58", Offset = "0x3A1A58", VA = "0x3A1A58", Slot = "6")]
		public void Update(int value)
		{
		}

		[Token(Token = "0x6001FF6")]
		[Address(RVA = "0x3A1A9C", Offset = "0x3A1A9C", VA = "0x3A1A9C", Slot = "7")]
		public void Update(byte[] buffer)
		{
		}

		[Token(Token = "0x6001FF7")]
		[Address(RVA = "0x3A1B64", Offset = "0x3A1B64", VA = "0x3A1B64", Slot = "8")]
		public void Update(byte[] buffer, int offset, int count)
		{
		}
	}
	[Token(Token = "0x2000477")]
	public sealed class Crc32 : IChecksum
	{
		[Token(Token = "0x4001567")]
		private const uint CrcSeed = uint.MaxValue;

		[Token(Token = "0x4001568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly uint[] CrcTable;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private uint crc;

		[Token(Token = "0x170001E1")]
		public long Value
		{
			[Token(Token = "0x6001FFA")]
			[Address(RVA = "0x3A1F18", Offset = "0x3A1F18", VA = "0x3A1F18", Slot = "4")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6001FFB")]
			[Address(RVA = "0x3A1F24", Offset = "0x3A1F24", VA = "0x3A1F24")]
			set
			{
			}
		}

		[Token(Token = "0x6001FF8")]
		[Address(RVA = "0x3A1E44", Offset = "0x3A1E44", VA = "0x3A1E44")]
		public Crc32()
		{
		}

		[Token(Token = "0x6001FF9")]
		[Address(RVA = "0x3A1E4C", Offset = "0x3A1E4C", VA = "0x3A1E4C")]
		internal static uint ComputeCrc32(uint oldCrc, byte value)
		{
			return default(uint);
		}

		[Token(Token = "0x6001FFC")]
		[Address(RVA = "0x3A1F2C", Offset = "0x3A1F2C", VA = "0x3A1F2C", Slot = "5")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001FFD")]
		[Address(RVA = "0x3A1F38", Offset = "0x3A1F38", VA = "0x3A1F38", Slot = "6")]
		public void Update(int value)
		{
		}

		[Token(Token = "0x6001FFE")]
		[Address(RVA = "0x3A2020", Offset = "0x3A2020", VA = "0x3A2020", Slot = "7")]
		public void Update(byte[] buffer)
		{
		}

		[Token(Token = "0x6001FFF")]
		[Address(RVA = "0x3A20E8", Offset = "0x3A20E8", VA = "0x3A20E8", Slot = "8")]
		public void Update(byte[] buffer, int offset, int count)
		{
		}
	}
	[Token(Token = "0x2000478")]
	public interface IChecksum
	{
		[Token(Token = "0x170001E2")]
		long Value
		{
			[Token(Token = "0x6002001")]
			get;
		}

		[Token(Token = "0x6002002")]
		void Reset();

		[Token(Token = "0x6002003")]
		void Update(int value);

		[Token(Token = "0x6002004")]
		void Update(byte[] buffer);

		[Token(Token = "0x6002005")]
		void Update(byte[] buffer, int offset, int count);
	}
	[Token(Token = "0x2000479")]
	public class StrangeCRC : IChecksum
	{
		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly uint[] crc32Table;

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int globalCrc;

		[Token(Token = "0x170001E3")]
		public long Value
		{
			[Token(Token = "0x6002008")]
			[Address(RVA = "0x3A2418", Offset = "0x3A2418", VA = "0x3A2418", Slot = "4")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x6002006")]
		[Address(RVA = "0x3A23EC", Offset = "0x3A23EC", VA = "0x3A23EC")]
		public StrangeCRC()
		{
		}

		[Token(Token = "0x6002007")]
		[Address(RVA = "0x3A240C", Offset = "0x3A240C", VA = "0x3A240C", Slot = "5")]
		public void Reset()
		{
		}

		[Token(Token = "0x6002009")]
		[Address(RVA = "0x3A2428", Offset = "0x3A2428", VA = "0x3A2428", Slot = "6")]
		public void Update(int value)
		{
		}

		[Token(Token = "0x600200A")]
		[Address(RVA = "0x3A2500", Offset = "0x3A2500", VA = "0x3A2500", Slot = "7")]
		public void Update(byte[] buffer)
		{
		}

		[Token(Token = "0x600200B")]
		[Address(RVA = "0x3A25C8", Offset = "0x3A25C8", VA = "0x3A25C8", Slot = "8")]
		public void Update(byte[] buffer, int offset, int count)
		{
		}
	}
}
namespace ICSharpCode.SharpZipLib.Zip.Compression
{
	[Token(Token = "0x200047A")]
	public class Deflater
	{
		[Token(Token = "0x400156C")]
		public const int BEST_COMPRESSION = 9;

		[Token(Token = "0x400156D")]
		public const int BEST_SPEED = 1;

		[Token(Token = "0x400156E")]
		public const int DEFAULT_COMPRESSION = -1;

		[Token(Token = "0x400156F")]
		public const int NO_COMPRESSION = 0;

		[Token(Token = "0x4001570")]
		public const int DEFLATED = 8;

		[Token(Token = "0x4001571")]
		private const int IS_SETDICT = 1;

		[Token(Token = "0x4001572")]
		private const int IS_FLUSHING = 4;

		[Token(Token = "0x4001573")]
		private const int IS_FINISHING = 8;

		[Token(Token = "0x4001574")]
		private const int INIT_STATE = 0;

		[Token(Token = "0x4001575")]
		private const int SETDICT_STATE = 1;

		[Token(Token = "0x4001576")]
		private const int BUSY_STATE = 16;

		[Token(Token = "0x4001577")]
		private const int FLUSHING_STATE = 20;

		[Token(Token = "0x4001578")]
		private const int FINISHING_STATE = 28;

		[Token(Token = "0x4001579")]
		private const int FINISHED_STATE = 30;

		[Token(Token = "0x400157A")]
		private const int CLOSED_STATE = 127;

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int level;

		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private bool noZlibHeaderOrFooter;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int state;

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private long totalOut;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DeflaterPending pending;

		[Token(Token = "0x4001580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private DeflaterEngine engine;

		[Token(Token = "0x170001E4")]
		public int Adler
		{
			[Token(Token = "0x6002011")]
			[Address(RVA = "0x3A56F0", Offset = "0x3A56F0", VA = "0x3A56F0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E5")]
		public long TotalIn
		{
			[Token(Token = "0x6002012")]
			[Address(RVA = "0x3A5740", Offset = "0x3A5740", VA = "0x3A5740")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170001E6")]
		public long TotalOut
		{
			[Token(Token = "0x6002013")]
			[Address(RVA = "0x3A5768", Offset = "0x3A5768", VA = "0x3A5768")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170001E7")]
		public bool IsFinished
		{
			[Token(Token = "0x6002016")]
			[Address(RVA = "0x3A5790", Offset = "0x3A5790", VA = "0x3A5790")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001E8")]
		public bool IsNeedingInput
		{
			[Token(Token = "0x6002017")]
			[Address(RVA = "0x3A57E8", Offset = "0x3A57E8", VA = "0x3A57E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600200D")]
		[Address(RVA = "0x3A51C0", Offset = "0x3A51C0", VA = "0x3A51C0")]
		public Deflater()
		{
		}

		[Token(Token = "0x600200E")]
		[Address(RVA = "0x3A530C", Offset = "0x3A530C", VA = "0x3A530C")]
		public Deflater(int level)
		{
		}

		[Token(Token = "0x600200F")]
		[Address(RVA = "0x3A51CC", Offset = "0x3A51CC", VA = "0x3A51CC")]
		public Deflater(int level, bool noZlibHeaderOrFooter)
		{
		}

		[Token(Token = "0x6002010")]
		[Address(RVA = "0x3A5578", Offset = "0x3A5578", VA = "0x3A5578")]
		public void Reset()
		{
		}

		[Token(Token = "0x6002014")]
		[Address(RVA = "0x3A5770", Offset = "0x3A5770", VA = "0x3A5770")]
		public void Flush()
		{
		}

		[Token(Token = "0x6002015")]
		[Address(RVA = "0x3A5780", Offset = "0x3A5780", VA = "0x3A5780")]
		public void Finish()
		{
		}

		[Token(Token = "0x6002018")]
		[Address(RVA = "0x3A5828", Offset = "0x3A5828", VA = "0x3A5828")]
		public void SetInput(byte[] input)
		{
		}

		[Token(Token = "0x6002019")]
		[Address(RVA = "0x3A5864", Offset = "0x3A5864", VA = "0x3A5864")]
		public void SetInput(byte[] input, int offset, int count)
		{
		}

		[Token(Token = "0x600201A")]
		[Address(RVA = "0x3A5490", Offset = "0x3A5490", VA = "0x3A5490")]
		public void SetLevel(int level)
		{
		}

		[Token(Token = "0x600201B")]
		[Address(RVA = "0x3A5F6C", Offset = "0x3A5F6C", VA = "0x3A5F6C")]
		public int GetLevel()
		{
			return default(int);
		}

		[Token(Token = "0x600201C")]
		[Address(RVA = "0x3A546C", Offset = "0x3A546C", VA = "0x3A546C")]
		public void SetStrategy(DeflateStrategy strategy)
		{
		}

		[Token(Token = "0x600201D")]
		[Address(RVA = "0x3A5F7C", Offset = "0x3A5F7C", VA = "0x3A5F7C")]
		public int Deflate(byte[] output)
		{
			return default(int);
		}

		[Token(Token = "0x600201E")]
		[Address(RVA = "0x3A5FB8", Offset = "0x3A5FB8", VA = "0x3A5FB8")]
		public int Deflate(byte[] output, int offset, int length)
		{
			return default(int);
		}

		[Token(Token = "0x600201F")]
		[Address(RVA = "0x3A6804", Offset = "0x3A6804", VA = "0x3A6804")]
		public void SetDictionary(byte[] dictionary)
		{
		}

		[Token(Token = "0x6002020")]
		[Address(RVA = "0x3A6840", Offset = "0x3A6840", VA = "0x3A6840")]
		public void SetDictionary(byte[] dictionary, int index, int count)
		{
		}
	}
	[Token(Token = "0x200047B")]
	public class DeflaterConstants
	{
		[Token(Token = "0x4001581")]
		public const bool DEBUGGING = false;

		[Token(Token = "0x4001582")]
		public const int STORED_BLOCK = 0;

		[Token(Token = "0x4001583")]
		public const int STATIC_TREES = 1;

		[Token(Token = "0x4001584")]
		public const int DYN_TREES = 2;

		[Token(Token = "0x4001585")]
		public const int PRESET_DICT = 32;

		[Token(Token = "0x4001586")]
		public const int DEFAULT_MEM_LEVEL = 8;

		[Token(Token = "0x4001587")]
		public const int MAX_MATCH = 258;

		[Token(Token = "0x4001588")]
		public const int MIN_MATCH = 3;

		[Token(Token = "0x4001589")]
		public const int MAX_WBITS = 15;

		[Token(Token = "0x400158A")]
		public const int WSIZE = 32768;

		[Token(Token = "0x400158B")]
		public const int WMASK = 32767;

		[Token(Token = "0x400158C")]
		public const int HASH_BITS = 15;

		[Token(Token = "0x400158D")]
		public const int HASH_SIZE = 32768;

		[Token(Token = "0x400158E")]
		public const int HASH_MASK = 32767;

		[Token(Token = "0x400158F")]
		public const int HASH_SHIFT = 5;

		[Token(Token = "0x4001590")]
		public const int MIN_LOOKAHEAD = 262;

		[Token(Token = "0x4001591")]
		public const int MAX_DIST = 32506;

		[Token(Token = "0x4001592")]
		public const int PENDING_BUF_SIZE = 65536;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static int MAX_BLOCK_SIZE;

		[Token(Token = "0x4001594")]
		public const int DEFLATE_STORED = 0;

		[Token(Token = "0x4001595")]
		public const int DEFLATE_FAST = 1;

		[Token(Token = "0x4001596")]
		public const int DEFLATE_SLOW = 2;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int[] GOOD_LENGTH;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static int[] MAX_LAZY;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static int[] NICE_LENGTH;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static int[] MAX_CHAIN;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static int[] COMPR_FUNC;

		[Token(Token = "0x6002021")]
		[Address(RVA = "0x3A69F0", Offset = "0x3A69F0", VA = "0x3A69F0")]
		public DeflaterConstants()
		{
		}
	}
	[Token(Token = "0x200047C")]
	public enum DeflateStrategy
	{
		[Token(Token = "0x400159D")]
		Default,
		[Token(Token = "0x400159E")]
		Filtered,
		[Token(Token = "0x400159F")]
		HuffmanOnly
	}
	[Token(Token = "0x200047D")]
	public class DeflaterEngine : DeflaterConstants
	{
		[Token(Token = "0x40015A0")]
		private const int TooFar = 4096;

		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int ins_h;

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private short[] head;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private short[] prev;

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int matchStart;

		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int matchLen;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool prevAvailable;

		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int blockStart;

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int strstart;

		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int lookahead;

		[Token(Token = "0x40015AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private byte[] window;

		[Token(Token = "0x40015AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private DeflateStrategy strategy;

		[Token(Token = "0x40015AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int max_chain;

		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int max_lazy;

		[Token(Token = "0x40015AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int niceLength;

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int goodLength;

		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int compressionFunction;

		[Token(Token = "0x40015B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private byte[] inputBuf;

		[Token(Token = "0x40015B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private long totalIn;

		[Token(Token = "0x40015B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int inputOff;

		[Token(Token = "0x40015B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int inputEnd;

		[Token(Token = "0x40015B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private DeflaterPending pending;

		[Token(Token = "0x40015B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private DeflaterHuffman huffman;

		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Adler32 adler;

		[Token(Token = "0x170001E9")]
		public int Adler
		{
			[Token(Token = "0x600202A")]
			[Address(RVA = "0x3A5720", Offset = "0x3A5720", VA = "0x3A5720")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001EA")]
		public long TotalIn
		{
			[Token(Token = "0x600202B")]
			[Address(RVA = "0x3A5760", Offset = "0x3A5760", VA = "0x3A5760")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170001EB")]
		public DeflateStrategy Strategy
		{
			[Token(Token = "0x600202C")]
			[Address(RVA = "0x3A7814", Offset = "0x3A7814", VA = "0x3A7814")]
			get
			{
				return default(DeflateStrategy);
			}
			[Token(Token = "0x600202D")]
			[Address(RVA = "0x3A5F74", Offset = "0x3A5F74", VA = "0x3A5F74")]
			set
			{
			}
		}

		[Token(Token = "0x6002023")]
		[Address(RVA = "0x3A531C", Offset = "0x3A531C", VA = "0x3A531C")]
		public DeflaterEngine(DeflaterPending pending)
		{
		}

		[Token(Token = "0x6002024")]
		[Address(RVA = "0x3A64FC", Offset = "0x3A64FC", VA = "0x3A64FC")]
		public bool Deflate(bool flush, bool finish)
		{
			return default(bool);
		}

		[Token(Token = "0x6002025")]
		[Address(RVA = "0x3A5948", Offset = "0x3A5948", VA = "0x3A5948")]
		public void SetInput(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x6002026")]
		[Address(RVA = "0x3A5814", Offset = "0x3A5814", VA = "0x3A5814")]
		public bool NeedsInput()
		{
			return default(bool);
		}

		[Token(Token = "0x6002027")]
		[Address(RVA = "0x3A6918", Offset = "0x3A6918", VA = "0x3A6918")]
		public void SetDictionary(byte[] buffer, int offset, int length)
		{
		}

		[Token(Token = "0x6002028")]
		[Address(RVA = "0x3A55F8", Offset = "0x3A55F8", VA = "0x3A55F8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6002029")]
		[Address(RVA = "0x3A63E4", Offset = "0x3A63E4", VA = "0x3A63E4")]
		public void ResetAdler()
		{
		}

		[Token(Token = "0x600202E")]
		[Address(RVA = "0x3A5B44", Offset = "0x3A5B44", VA = "0x3A5B44")]
		public void SetLevel(int level)
		{
		}

		[Token(Token = "0x600202F")]
		[Address(RVA = "0x3A6D1C", Offset = "0x3A6D1C", VA = "0x3A6D1C")]
		public void FillWindow()
		{
		}

		[Token(Token = "0x6002030")]
		[Address(RVA = "0x3A7630", Offset = "0x3A7630", VA = "0x3A7630")]
		private void UpdateHash()
		{
		}

		[Token(Token = "0x6002031")]
		[Address(RVA = "0x3A76B4", Offset = "0x3A76B4", VA = "0x3A76B4")]
		private int InsertString()
		{
			return default(int);
		}

		[Token(Token = "0x6002032")]
		[Address(RVA = "0x3A7F78", Offset = "0x3A7F78", VA = "0x3A7F78")]
		private void SlideWindow()
		{
		}

		[Token(Token = "0x6002033")]
		[Address(RVA = "0x3A80E4", Offset = "0x3A80E4", VA = "0x3A80E4")]
		private bool FindLongestMatch(int curMatch)
		{
			return default(bool);
		}

		[Token(Token = "0x6002034")]
		[Address(RVA = "0x3A6E20", Offset = "0x3A6E20", VA = "0x3A6E20")]
		private bool DeflateStored(bool flush, bool finish)
		{
			return default(bool);
		}

		[Token(Token = "0x6002035")]
		[Address(RVA = "0x3A6FF0", Offset = "0x3A6FF0", VA = "0x3A6FF0")]
		private bool DeflateFast(bool flush, bool finish)
		{
			return default(bool);
		}

		[Token(Token = "0x6002036")]
		[Address(RVA = "0x3A72B4", Offset = "0x3A72B4", VA = "0x3A72B4")]
		private bool DeflateSlow(bool flush, bool finish)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200047E")]
	public class DeflaterHuffman
	{
		[Token(Token = "0x200047F")]
		private class Tree
		{
			[Token(Token = "0x40015CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public short[] freqs;

			[Token(Token = "0x40015CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public byte[] length;

			[Token(Token = "0x40015D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int minNumCodes;

			[Token(Token = "0x40015D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int numCodes;

			[Token(Token = "0x40015D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private short[] codes;

			[Token(Token = "0x40015D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int[] bl_counts;

			[Token(Token = "0x40015D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int maxLength;

			[Token(Token = "0x40015D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private DeflaterHuffman dh;

			[Token(Token = "0x6002044")]
			[Address(RVA = "0x3A92FC", Offset = "0x3A92FC", VA = "0x3A92FC")]
			public Tree(DeflaterHuffman dh, int elems, int minCodes, int maxLength)
			{
			}

			[Token(Token = "0x6002045")]
			[Address(RVA = "0x3A93C0", Offset = "0x3A93C0", VA = "0x3A93C0")]
			public void Reset()
			{
			}

			[Token(Token = "0x6002046")]
			[Address(RVA = "0x3A9E4C", Offset = "0x3A9E4C", VA = "0x3A9E4C")]
			public void WriteSymbol(int code)
			{
			}

			[Token(Token = "0x6002047")]
			[Address(RVA = "0x3AADFC", Offset = "0x3AADFC", VA = "0x3AADFC")]
			public void CheckEmpty()
			{
			}

			[Token(Token = "0x6002048")]
			[Address(RVA = "0x3AADF0", Offset = "0x3AADF0", VA = "0x3AADF0")]
			public void SetStaticCodes(short[] staticCodes, byte[] staticLengths)
			{
			}

			[Token(Token = "0x6002049")]
			[Address(RVA = "0x3A96A8", Offset = "0x3A96A8", VA = "0x3A96A8")]
			public void BuildCodes()
			{
			}

			[Token(Token = "0x600204A")]
			[Address(RVA = "0x3A9FE4", Offset = "0x3A9FE4", VA = "0x3A9FE4")]
			public void BuildTree()
			{
			}

			[Token(Token = "0x600204B")]
			[Address(RVA = "0x3AAD40", Offset = "0x3AAD40", VA = "0x3AAD40")]
			public int GetEncodedLength()
			{
				return default(int);
			}

			[Token(Token = "0x600204C")]
			[Address(RVA = "0x3AAAF8", Offset = "0x3AAAF8", VA = "0x3AAAF8")]
			public void CalcBLFreq(Tree blTree)
			{
			}

			[Token(Token = "0x600204D")]
			[Address(RVA = "0x3A9954", Offset = "0x3A9954", VA = "0x3A9954")]
			public void WriteTree(Tree blTree)
			{
			}

			[Token(Token = "0x600204E")]
			[Address(RVA = "0x3AAF18", Offset = "0x3AAF18", VA = "0x3AAF18")]
			private void BuildLength(int[] childs)
			{
			}
		}

		[Token(Token = "0x40015B8")]
		private const int BUFSIZE = 16384;

		[Token(Token = "0x40015B9")]
		private const int LITERAL_NUM = 286;

		[Token(Token = "0x40015BA")]
		private const int DIST_NUM = 30;

		[Token(Token = "0x40015BB")]
		private const int BITLEN_NUM = 19;

		[Token(Token = "0x40015BC")]
		private const int REP_3_6 = 16;

		[Token(Token = "0x40015BD")]
		private const int REP_3_10 = 17;

		[Token(Token = "0x40015BE")]
		private const int REP_11_138 = 18;

		[Token(Token = "0x40015BF")]
		private const int EOF_SYMBOL = 256;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] BL_ORDER;

		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly byte[] bit4Reverse;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static short[] staticLCodes;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static byte[] staticLLength;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static short[] staticDCodes;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static byte[] staticDLength;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public DeflaterPending pending;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Tree literalTree;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Tree distTree;

		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private Tree blTree;

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private short[] d_buf;

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private byte[] l_buf;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int last_lit;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int extra_bits;

		[Token(Token = "0x6002037")]
		[Address(RVA = "0x3A8BC4", Offset = "0x3A8BC4", VA = "0x3A8BC4")]
		static DeflaterHuffman()
		{
		}

		[Token(Token = "0x6002038")]
		[Address(RVA = "0x3A6BE0", Offset = "0x3A6BE0", VA = "0x3A6BE0")]
		public DeflaterHuffman(DeflaterPending pending)
		{
		}

		[Token(Token = "0x6002039")]
		[Address(RVA = "0x3A77B0", Offset = "0x3A77B0", VA = "0x3A77B0")]
		public void Reset()
		{
		}

		[Token(Token = "0x600203A")]
		[Address(RVA = "0x3A9444", Offset = "0x3A9444", VA = "0x3A9444")]
		public void SendAllTrees(int blTreeCodes)
		{
		}

		[Token(Token = "0x600203B")]
		[Address(RVA = "0x3A9B6C", Offset = "0x3A9B6C", VA = "0x3A9B6C")]
		public void CompressBlock()
		{
		}

		[Token(Token = "0x600203C")]
		[Address(RVA = "0x3A781C", Offset = "0x3A781C", VA = "0x3A781C")]
		public void FlushStoredBlock(byte[] stored, int storedOffset, int storedLength, bool lastBlock)
		{
		}

		[Token(Token = "0x600203D")]
		[Address(RVA = "0x3A78FC", Offset = "0x3A78FC", VA = "0x3A78FC")]
		public void FlushBlock(byte[] stored, int storedOffset, int storedLength, bool lastBlock)
		{
		}

		[Token(Token = "0x600203E")]
		[Address(RVA = "0x3A8BB0", Offset = "0x3A8BB0", VA = "0x3A8BB0")]
		public bool IsFull()
		{
			return default(bool);
		}

		[Token(Token = "0x600203F")]
		[Address(RVA = "0x3A7E98", Offset = "0x3A7E98", VA = "0x3A7E98")]
		public bool TallyLit(int literal)
		{
			return default(bool);
		}

		[Token(Token = "0x6002040")]
		[Address(RVA = "0x3A8958", Offset = "0x3A8958", VA = "0x3A8958")]
		public bool TallyDist(int distance, int length)
		{
			return default(bool);
		}

		[Token(Token = "0x6002041")]
		[Address(RVA = "0x3A9150", Offset = "0x3A9150", VA = "0x3A9150")]
		public static short BitReverse(int toReverse)
		{
			return default(short);
		}

		[Token(Token = "0x6002042")]
		[Address(RVA = "0x3A9E1C", Offset = "0x3A9E1C", VA = "0x3A9E1C")]
		private static int Lcode(int length)
		{
			return default(int);
		}

		[Token(Token = "0x6002043")]
		[Address(RVA = "0x3A9EF0", Offset = "0x3A9EF0", VA = "0x3A9EF0")]
		private static int Dcode(int distance)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000480")]
	public class DeflaterPending : PendingBuffer
	{
		[Token(Token = "0x600204F")]
		[Address(RVA = "0x3A5314", Offset = "0x3A5314", VA = "0x3A5314")]
		public DeflaterPending()
		{
		}
	}
	[Token(Token = "0x2000481")]
	public class Inflater
	{
		[Token(Token = "0x40015D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] CPLENS;

		[Token(Token = "0x40015D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int[] CPLEXT;

		[Token(Token = "0x40015D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] CPDIST;

		[Token(Token = "0x40015D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int[] CPDEXT;

		[Token(Token = "0x40015DA")]
		private const int DECODE_HEADER = 0;

		[Token(Token = "0x40015DB")]
		private const int DECODE_DICT = 1;

		[Token(Token = "0x40015DC")]
		private const int DECODE_BLOCKS = 2;

		[Token(Token = "0x40015DD")]
		private const int DECODE_STORED_LEN1 = 3;

		[Token(Token = "0x40015DE")]
		private const int DECODE_STORED_LEN2 = 4;

		[Token(Token = "0x40015DF")]
		private const int DECODE_STORED = 5;

		[Token(Token = "0x40015E0")]
		private const int DECODE_DYN_HEADER = 6;

		[Token(Token = "0x40015E1")]
		private const int DECODE_HUFFMAN = 7;

		[Token(Token = "0x40015E2")]
		private const int DECODE_HUFFMAN_LENBITS = 8;

		[Token(Token = "0x40015E3")]
		private const int DECODE_HUFFMAN_DIST = 9;

		[Token(Token = "0x40015E4")]
		private const int DECODE_HUFFMAN_DISTBITS = 10;

		[Token(Token = "0x40015E5")]
		private const int DECODE_CHKSUM = 11;

		[Token(Token = "0x40015E6")]
		private const int FINISHED = 12;

		[Token(Token = "0x40015E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int mode;

		[Token(Token = "0x40015E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int readAdler;

		[Token(Token = "0x40015E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int neededBits;

		[Token(Token = "0x40015EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int repLength;

		[Token(Token = "0x40015EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int repDist;

		[Token(Token = "0x40015EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int uncomprLen;

		[Token(Token = "0x40015ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool isLastBlock;

		[Token(Token = "0x40015EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private long totalOut;

		[Token(Token = "0x40015EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private long totalIn;

		[Token(Token = "0x40015F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool noHeader;

		[Token(Token = "0x40015F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private StreamManipulator input;

		[Token(Token = "0x40015F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OutputWindow outputWindow;

		[Token(Token = "0x40015F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private InflaterDynHeader dynHeader;

		[Token(Token = "0x40015F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private InflaterHuffmanTree litlenTree;

		[Token(Token = "0x40015F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private InflaterHuffmanTree distTree;

		[Token(Token = "0x40015F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Adler32 adler;

		[Token(Token = "0x170001EC")]
		public bool IsNeedingInput
		{
			[Token(Token = "0x600205E")]
			[Address(RVA = "0x3AE634", Offset = "0x3AE634", VA = "0x3AE634")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001ED")]
		public bool IsNeedingDictionary
		{
			[Token(Token = "0x600205F")]
			[Address(RVA = "0x3ADC9C", Offset = "0x3ADC9C", VA = "0x3ADC9C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001EE")]
		public bool IsFinished
		{
			[Token(Token = "0x6002060")]
			[Address(RVA = "0x3AE4A8", Offset = "0x3AE4A8", VA = "0x3AE4A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001EF")]
		public int Adler
		{
			[Token(Token = "0x6002061")]
			[Address(RVA = "0x3AE664", Offset = "0x3AE664", VA = "0x3AE664")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F0")]
		public long TotalOut
		{
			[Token(Token = "0x6002062")]
			[Address(RVA = "0x3AE6A8", Offset = "0x3AE6A8", VA = "0x3AE6A8")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170001F1")]
		public long TotalIn
		{
			[Token(Token = "0x6002063")]
			[Address(RVA = "0x3AE6B0", Offset = "0x3AE6B0", VA = "0x3AE6B0")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170001F2")]
		public int RemainingInput
		{
			[Token(Token = "0x6002064")]
			[Address(RVA = "0x3AE6EC", Offset = "0x3AE6EC", VA = "0x3AE6EC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6002050")]
		[Address(RVA = "0x3AB628", Offset = "0x3AB628", VA = "0x3AB628")]
		public Inflater()
		{
		}

		[Token(Token = "0x6002051")]
		[Address(RVA = "0x3AB630", Offset = "0x3AB630", VA = "0x3AB630")]
		public Inflater(bool noHeader)
		{
		}

		[Token(Token = "0x6002052")]
		[Address(RVA = "0x3AB7A0", Offset = "0x3AB7A0", VA = "0x3AB7A0")]
		public void Reset()
		{
		}

		[Token(Token = "0x6002053")]
		[Address(RVA = "0x3AB86C", Offset = "0x3AB86C", VA = "0x3AB86C")]
		private bool DecodeHeader()
		{
			return default(bool);
		}

		[Token(Token = "0x6002054")]
		[Address(RVA = "0x3ABB18", Offset = "0x3ABB18", VA = "0x3ABB18")]
		private bool DecodeDict()
		{
			return default(bool);
		}

		[Token(Token = "0x6002055")]
		[Address(RVA = "0x3ABBA8", Offset = "0x3ABBA8", VA = "0x3ABBA8")]
		private bool DecodeHuffman()
		{
			return default(bool);
		}

		[Token(Token = "0x6002056")]
		[Address(RVA = "0x3AC71C", Offset = "0x3AC71C", VA = "0x3AC71C")]
		private bool DecodeChksum()
		{
			return default(bool);
		}

		[Token(Token = "0x6002057")]
		[Address(RVA = "0x3ACA80", Offset = "0x3ACA80", VA = "0x3ACA80")]
		private bool Decode()
		{
			return default(bool);
		}

		[Token(Token = "0x6002058")]
		[Address(RVA = "0x3AD9E8", Offset = "0x3AD9E8", VA = "0x3AD9E8")]
		public void SetDictionary(byte[] buffer)
		{
		}

		[Token(Token = "0x6002059")]
		[Address(RVA = "0x3ADA24", Offset = "0x3ADA24", VA = "0x3ADA24")]
		public void SetDictionary(byte[] buffer, int index, int count)
		{
		}

		[Token(Token = "0x600205A")]
		[Address(RVA = "0x3ADDFC", Offset = "0x3ADDFC", VA = "0x3ADDFC")]
		public void SetInput(byte[] buffer)
		{
		}

		[Token(Token = "0x600205B")]
		[Address(RVA = "0x3ADE38", Offset = "0x3ADE38", VA = "0x3ADE38")]
		public void SetInput(byte[] buffer, int index, int count)
		{
		}

		[Token(Token = "0x600205C")]
		[Address(RVA = "0x3AE104", Offset = "0x3AE104", VA = "0x3AE104")]
		public int Inflate(byte[] buffer)
		{
			return default(int);
		}

		[Token(Token = "0x600205D")]
		[Address(RVA = "0x3AE1CC", Offset = "0x3AE1CC", VA = "0x3AE1CC")]
		public int Inflate(byte[] buffer, int offset, int count)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000482")]
	internal class InflaterDynHeader
	{
		[Token(Token = "0x40015F7")]
		private const int LNUM = 0;

		[Token(Token = "0x40015F8")]
		private const int DNUM = 1;

		[Token(Token = "0x40015F9")]
		private const int BLNUM = 2;

		[Token(Token = "0x40015FA")]
		private const int BLLENS = 3;

		[Token(Token = "0x40015FB")]
		private const int LENS = 4;

		[Token(Token = "0x40015FC")]
		private const int REPS = 5;

		[Token(Token = "0x40015FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] repMin;

		[Token(Token = "0x40015FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int[] repBits;

		[Token(Token = "0x40015FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int[] BL_ORDER;

		[Token(Token = "0x4001600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private byte[] blLens;

		[Token(Token = "0x4001601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private byte[] litdistLens;

		[Token(Token = "0x4001602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private InflaterHuffmanTree blTree;

		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private int mode;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int lnum;

		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int dnum;

		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int blnum;

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int num;

		[Token(Token = "0x4001608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int repSymbol;

		[Token(Token = "0x4001609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private byte lastLen;

		[Token(Token = "0x400160A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int ptr;

		[Token(Token = "0x6002066")]
		[Address(RVA = "0x3AD04C", Offset = "0x3AD04C", VA = "0x3AD04C")]
		public InflaterDynHeader()
		{
		}

		[Token(Token = "0x6002067")]
		[Address(RVA = "0x3AD174", Offset = "0x3AD174", VA = "0x3AD174")]
		public bool Decode(StreamManipulator input)
		{
			return default(bool);
		}

		[Token(Token = "0x6002068")]
		[Address(RVA = "0x3AD840", Offset = "0x3AD840", VA = "0x3AD840")]
		public InflaterHuffmanTree BuildLitLenTree()
		{
			return null;
		}

		[Token(Token = "0x6002069")]
		[Address(RVA = "0x3AD914", Offset = "0x3AD914", VA = "0x3AD914")]
		public InflaterHuffmanTree BuildDistTree()
		{
			return null;
		}
	}
	[Token(Token = "0x2000483")]
	public class InflaterHuffmanTree
	{
		[Token(Token = "0x400160B")]
		private const int MAX_BITLEN = 15;

		[Token(Token = "0x400160C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private short[] tree;

		[Token(Token = "0x400160D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static InflaterHuffmanTree defLitLenTree;

		[Token(Token = "0x400160E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static InflaterHuffmanTree defDistTree;

		[Token(Token = "0x600206B")]
		[Address(RVA = "0x3AEA14", Offset = "0x3AEA14", VA = "0x3AEA14")]
		static InflaterHuffmanTree()
		{
		}

		[Token(Token = "0x600206C")]
		[Address(RVA = "0x3AE8B4", Offset = "0x3AE8B4", VA = "0x3AE8B4")]
		public InflaterHuffmanTree(byte[] codeLengths)
		{
		}

		[Token(Token = "0x600206D")]
		[Address(RVA = "0x3AED68", Offset = "0x3AED68", VA = "0x3AED68")]
		private void BuildTree(byte[] codeLengths)
		{
		}

		[Token(Token = "0x600206E")]
		[Address(RVA = "0x3AC2FC", Offset = "0x3AC2FC", VA = "0x3AC2FC")]
		public int GetSymbol(StreamManipulator input)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000484")]
	public class PendingBuffer
	{
		[Token(Token = "0x400160F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private byte[] buffer_;

		[Token(Token = "0x4001610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int start;

		[Token(Token = "0x4001611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int end;

		[Token(Token = "0x4001612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private uint bits;

		[Token(Token = "0x4001613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int bitCount;

		[Token(Token = "0x170001F3")]
		public int BitCount
		{
			[Token(Token = "0x6002076")]
			[Address(RVA = "0x3A6670", Offset = "0x3A6670", VA = "0x3A6670")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F4")]
		public bool IsFlushed
		{
			[Token(Token = "0x600207A")]
			[Address(RVA = "0x3A57D4", Offset = "0x3A57D4", VA = "0x3A57D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600206F")]
		[Address(RVA = "0x3AF314", Offset = "0x3AF314", VA = "0x3AF314")]
		public PendingBuffer()
		{
		}

		[Token(Token = "0x6002070")]
		[Address(RVA = "0x3AB5A4", Offset = "0x3AB5A4", VA = "0x3AB5A4")]
		public PendingBuffer(int bufferSize)
		{
		}

		[Token(Token = "0x6002071")]
		[Address(RVA = "0x3A55E4", Offset = "0x3A55E4", VA = "0x3A55E4")]
		public void Reset()
		{
		}

		[Token(Token = "0x6002072")]
		[Address(RVA = "0x3AF31C", Offset = "0x3AF31C", VA = "0x3AF31C")]
		public void WriteByte(int value)
		{
		}

		[Token(Token = "0x6002073")]
		[Address(RVA = "0x3A9F14", Offset = "0x3A9F14", VA = "0x3A9F14")]
		public void WriteShort(int value)
		{
		}

		[Token(Token = "0x6002074")]
		[Address(RVA = "0x3AF368", Offset = "0x3AF368", VA = "0x3AF368")]
		public void WriteInt(int value)
		{
		}

		[Token(Token = "0x6002075")]
		[Address(RVA = "0x3A9FA4", Offset = "0x3A9FA4", VA = "0x3A9FA4")]
		public void WriteBlock(byte[] block, int offset, int length)
		{
		}

		[Token(Token = "0x6002077")]
		[Address(RVA = "0x3A6740", Offset = "0x3A6740", VA = "0x3A6740")]
		public void AlignToByte()
		{
		}

		[Token(Token = "0x6002078")]
		[Address(RVA = "0x3A6678", Offset = "0x3A6678", VA = "0x3A6678")]
		public void WriteBits(int b, int count)
		{
		}

		[Token(Token = "0x6002079")]
		[Address(RVA = "0x3A6354", Offset = "0x3A6354", VA = "0x3A6354")]
		public void WriteShortMSB(int s)
		{
		}

		[Token(Token = "0x600207B")]
		[Address(RVA = "0x3A6408", Offset = "0x3A6408", VA = "0x3A6408")]
		public int Flush(byte[] output, int offset, int length)
		{
			return default(int);
		}

		[Token(Token = "0x600207C")]
		[Address(RVA = "0x3AF478", Offset = "0x3AF478", VA = "0x3AF478")]
		public byte[] ToByteArray()
		{
			return null;
		}
	}
}
namespace ICSharpCode.SharpZipLib.Zip.Compression.Streams
{
	[Token(Token = "0x2000485")]
	public class DeflaterOutputStream : Stream
	{
		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private string password;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private ICryptoTransform cryptoTransform_;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected byte[] AESAuthCode;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private byte[] buffer_;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Deflater deflater_;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected Stream baseOutputStream_;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool isClosed_;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool isStreamOwner_;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static RNGCryptoServiceProvider _aesRnd;

		[Token(Token = "0x170001F5")]
		public bool IsStreamOwner
		{
			[Token(Token = "0x6002081")]
			[Address(RVA = "0x3AFC20", Offset = "0x3AFC20", VA = "0x3AFC20")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002082")]
			[Address(RVA = "0x3AFC28", Offset = "0x3AFC28", VA = "0x3AFC28")]
			set
			{
			}
		}

		[Token(Token = "0x170001F6")]
		public bool CanPatchEntries
		{
			[Token(Token = "0x6002083")]
			[Address(RVA = "0x3AFC30", Offset = "0x3AFC30", VA = "0x3AFC30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F7")]
		public string Password
		{
			[Token(Token = "0x6002084")]
			[Address(RVA = "0x3AFC60", Offset = "0x3AFC60", VA = "0x3AFC60")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002085")]
			[Address(RVA = "0x3AFC68", Offset = "0x3AFC68", VA = "0x3AFC68")]
			set
			{
			}
		}

		[Token(Token = "0x170001F8")]
		public override bool CanRead
		{
			[Token(Token = "0x600208A")]
			[Address(RVA = "0x3B0434", Offset = "0x3B0434", VA = "0x3B0434", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001F9")]
		public override bool CanSeek
		{
			[Token(Token = "0x600208B")]
			[Address(RVA = "0x3B043C", Offset = "0x3B043C", VA = "0x3B043C", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FA")]
		public override bool CanWrite
		{
			[Token(Token = "0x600208C")]
			[Address(RVA = "0x3B0444", Offset = "0x3B0444", VA = "0x3B0444", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001FB")]
		public override long Length
		{
			[Token(Token = "0x600208D")]
			[Address(RVA = "0x3B0474", Offset = "0x3B0474", VA = "0x3B0474", Slot = "9")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x170001FC")]
		public override long Position
		{
			[Token(Token = "0x600208E")]
			[Address(RVA = "0x3B04A4", Offset = "0x3B04A4", VA = "0x3B04A4", Slot = "10")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x600208F")]
			[Address(RVA = "0x3B04D4", Offset = "0x3B04D4", VA = "0x3B04D4", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x600207D")]
		[Address(RVA = "0x3AF540", Offset = "0x3AF540", VA = "0x3AF540")]
		public DeflaterOutputStream(Stream baseOutputStream)
		{
		}

		[Token(Token = "0x600207E")]
		[Address(RVA = "0x3AF828", Offset = "0x3AF828", VA = "0x3AF828")]
		public DeflaterOutputStream(Stream baseOutputStream, Deflater deflater)
		{
		}

		[Token(Token = "0x600207F")]
		[Address(RVA = "0x3AF5D0", Offset = "0x3AF5D0", VA = "0x3AF5D0")]
		public DeflaterOutputStream(Stream baseOutputStream, Deflater deflater, int bufferSize)
		{
		}

		[Token(Token = "0x6002080")]
		[Address(RVA = "0x3AF844", Offset = "0x3AF844", VA = "0x3AF844", Slot = "27")]
		public virtual void Finish()
		{
		}

		[Token(Token = "0x6002086")]
		[Address(RVA = "0x3AFB20", Offset = "0x3AFB20", VA = "0x3AFB20")]
		protected void EncryptBlock(byte[] buffer, int offset, int length)
		{
		}

		[Token(Token = "0x6002087")]
		[Address(RVA = "0x3AFCA8", Offset = "0x3AFCA8", VA = "0x3AFCA8")]
		protected void InitializePassword(string password)
		{
		}

		[Token(Token = "0x6002088")]
		[Address(RVA = "0x3AFE98", Offset = "0x3AFE98", VA = "0x3AFE98")]
		protected void InitializeAESPassword(ZipEntry entry, string rawPassword, out byte[] salt, out byte[] pwdVerifier)
		{
		}

		[Token(Token = "0x6002089")]
		[Address(RVA = "0x3B029C", Offset = "0x3B029C", VA = "0x3B029C")]
		protected void Deflate()
		{
		}

		[Token(Token = "0x6002090")]
		[Address(RVA = "0x3B056C", Offset = "0x3B056C", VA = "0x3B056C", Slot = "19")]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x6002091")]
		[Address(RVA = "0x3B0604", Offset = "0x3B0604", VA = "0x3B0604", Slot = "20")]
		public override void SetLength(long value)
		{
		}

		[Token(Token = "0x6002092")]
		[Address(RVA = "0x3B069C", Offset = "0x3B069C", VA = "0x3B069C", Slot = "18")]
		public override int ReadByte()
		{
			return default(int);
		}

		[Token(Token = "0x6002093")]
		[Address(RVA = "0x3B0734", Offset = "0x3B0734", VA = "0x3B0734", Slot = "17")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x6002094")]
		[Address(RVA = "0x3B07CC", Offset = "0x3B07CC", VA = "0x3B07CC", Slot = "23")]
		public override IAsyncResult BeginRead(byte[] buffer, int offset, int count, AsyncCallback callback, object state)
		{
			return null;
		}

		[Token(Token = "0x6002095")]
		[Address(RVA = "0x3B0864", Offset = "0x3B0864", VA = "0x3B0864", Slot = "24")]
		public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state)
		{
			return null;
		}

		[Token(Token = "0x6002096")]
		[Address(RVA = "0x3B08FC", Offset = "0x3B08FC", VA = "0x3B08FC", Slot = "16")]
		public override void Flush()
		{
		}

		[Token(Token = "0x6002097")]
		[Address(RVA = "0x3B0954", Offset = "0x3B0954", VA = "0x3B0954", Slot = "13")]
		public override void Close()
		{
		}

		[Token(Token = "0x6002098")]
		[Address(RVA = "0x3B0AD4", Offset = "0x3B0AD4", VA = "0x3B0AD4")]
		private void GetAuthCodeIfAES()
		{
		}

		[Token(Token = "0x6002099")]
		[Address(RVA = "0x3B0B6C", Offset = "0x3B0B6C", VA = "0x3B0B6C", Slot = "22")]
		public override void WriteByte(byte value)
		{
		}

		[Token(Token = "0x600209A")]
		[Address(RVA = "0x3B0C38", Offset = "0x3B0C38", VA = "0x3B0C38", Slot = "21")]
		public override void Write(byte[] buffer, int offset, int count)
		{
		}
	}
	[Token(Token = "0x2000486")]
	public class InflaterInputBuffer
	{
		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int rawLength;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private byte[] rawData;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int clearTextLength;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private byte[] clearText;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] internalClearText;

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int available;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ICryptoTransform cryptoTransform;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Stream inputStream;

		[Token(Token = "0x170001FD")]
		public int RawLength
		{
			[Token(Token = "0x600209D")]
			[Address(RVA = "0x3B0D28", Offset = "0x3B0D28", VA = "0x3B0D28")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001FE")]
		public byte[] RawData
		{
			[Token(Token = "0x600209E")]
			[Address(RVA = "0x3B0D30", Offset = "0x3B0D30", VA = "0x3B0D30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FF")]
		public int ClearTextLength
		{
			[Token(Token = "0x600209F")]
			[Address(RVA = "0x3B0D38", Offset = "0x3B0D38", VA = "0x3B0D38")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000200")]
		public byte[] ClearText
		{
			[Token(Token = "0x60020A0")]
			[Address(RVA = "0x3B0D40", Offset = "0x3B0D40", VA = "0x3B0D40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000201")]
		public int Available
		{
			[Token(Token = "0x60020A1")]
			[Address(RVA = "0x3B0D48", Offset = "0x3B0D48", VA = "0x3B0D48")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60020A2")]
			[Address(RVA = "0x3B0D50", Offset = "0x3B0D50", VA = "0x3B0D50")]
			set
			{
			}
		}

		[Token(Token = "0x17000202")]
		public ICryptoTransform CryptoTransform
		{
			[Token(Token = "0x60020AC")]
			[Address(RVA = "0x3B13A8", Offset = "0x3B13A8", VA = "0x3B13A8")]
			set
			{
			}
		}

		[Token(Token = "0x600209B")]
		[Address(RVA = "0x3B0C88", Offset = "0x3B0C88", VA = "0x3B0C88")]
		public InflaterInputBuffer(Stream stream)
		{
		}

		[Token(Token = "0x600209C")]
		[Address(RVA = "0x3B0C90", Offset = "0x3B0C90", VA = "0x3B0C90")]
		public InflaterInputBuffer(Stream stream, int bufferSize)
		{
		}

		[Token(Token = "0x60020A3")]
		[Address(RVA = "0x3B0D58", Offset = "0x3B0D58", VA = "0x3B0D58")]
		public void SetInflaterInput(Inflater inflater)
		{
		}

		[Token(Token = "0x60020A4")]
		[Address(RVA = "0x3B0DB0", Offset = "0x3B0DB0", VA = "0x3B0DB0")]
		public void Fill()
		{
		}

		[Token(Token = "0x60020A5")]
		[Address(RVA = "0x3B0F40", Offset = "0x3B0F40", VA = "0x3B0F40")]
		public int ReadRawBuffer(byte[] buffer)
		{
			return default(int);
		}

		[Token(Token = "0x60020A6")]
		[Address(RVA = "0x3B0F7C", Offset = "0x3B0F7C", VA = "0x3B0F7C")]
		public int ReadRawBuffer(byte[] outBuffer, int offset, int length)
		{
			return default(int);
		}

		[Token(Token = "0x60020A7")]
		[Address(RVA = "0x3B10C4", Offset = "0x3B10C4", VA = "0x3B10C4")]
		public int ReadClearTextBuffer(byte[] outBuffer, int offset, int length)
		{
			return default(int);
		}

		[Token(Token = "0x60020A8")]
		[Address(RVA = "0x3B120C", Offset = "0x3B120C", VA = "0x3B120C")]
		public int ReadLeByte()
		{
			return default(int);
		}

		[Token(Token = "0x60020A9")]
		[Address(RVA = "0x3B1318", Offset = "0x3B1318", VA = "0x3B1318")]
		public int ReadLeShort()
		{
			return default(int);
		}

		[Token(Token = "0x60020AA")]
		[Address(RVA = "0x3B133C", Offset = "0x3B133C", VA = "0x3B133C")]
		public int ReadLeInt()
		{
			return default(int);
		}

		[Token(Token = "0x60020AB")]
		[Address(RVA = "0x3B1380", Offset = "0x3B1380", VA = "0x3B1380")]
		public long ReadLeLong()
		{
			return default(long);
		}
	}
	[Token(Token = "0x2000487")]
	public class InflaterInputStream : Stream
	{
		[Token(Token = "0x4001625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected Inflater inf;

		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected InflaterInputBuffer inputBuffer;

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Stream baseInputStream;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected long csize;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool isClosed;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool isStreamOwner;

		[Token(Token = "0x17000203")]
		public bool IsStreamOwner
		{
			[Token(Token = "0x60020B0")]
			[Address(RVA = "0x3B1794", Offset = "0x3B1794", VA = "0x3B1794")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60020B1")]
			[Address(RVA = "0x3B179C", Offset = "0x3B179C", VA = "0x3B179C")]
			set
			{
			}
		}

		[Token(Token = "0x17000204")]
		public virtual int Available
		{
			[Token(Token = "0x60020B4")]
			[Address(RVA = "0x3B1A8C", Offset = "0x3B1A8C", VA = "0x3B1A8C", Slot = "27")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000205")]
		public override bool CanRead
		{
			[Token(Token = "0x60020B6")]
			[Address(RVA = "0x3B1BE0", Offset = "0x3B1BE0", VA = "0x3B1BE0", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000206")]
		public override bool CanSeek
		{
			[Token(Token = "0x60020B7")]
			[Address(RVA = "0x3B1C10", Offset = "0x3B1C10", VA = "0x3B1C10", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000207")]
		public override bool CanWrite
		{
			[Token(Token = "0x60020B8")]
			[Address(RVA = "0x3B1C18", Offset = "0x3B1C18", VA = "0x3B1C18", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000208")]
		public override long Length
		{
			[Token(Token = "0x60020B9")]
			[Address(RVA = "0x3B1C20", Offset = "0x3B1C20", VA = "0x3B1C20", Slot = "9")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x17000209")]
		public override long Position
		{
			[Token(Token = "0x60020BA")]
			[Address(RVA = "0x3B1C44", Offset = "0x3B1C44", VA = "0x3B1C44", Slot = "10")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60020BB")]
			[Address(RVA = "0x3B1C74", Offset = "0x3B1C74", VA = "0x3B1C74", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x60020AD")]
		[Address(RVA = "0x3B1530", Offset = "0x3B1530", VA = "0x3B1530")]
		public InflaterInputStream(Stream baseInputStream)
		{
		}

		[Token(Token = "0x60020AE")]
		[Address(RVA = "0x3B1778", Offset = "0x3B1778", VA = "0x3B1778")]
		public InflaterInputStream(Stream baseInputStream, Inflater inf)
		{
		}

		[Token(Token = "0x60020AF")]
		[Address(RVA = "0x3B15BC", Offset = "0x3B15BC", VA = "0x3B15BC")]
		public InflaterInputStream(Stream baseInputStream, Inflater inflater, int bufferSize)
		{
		}

		[Token(Token = "0x60020B2")]
		[Address(RVA = "0x3B17A4", Offset = "0x3B17A4", VA = "0x3B17A4")]
		public long Skip(long count)
		{
			return default(long);
		}

		[Token(Token = "0x60020B3")]
		[Address(RVA = "0x3B1A1C", Offset = "0x3B1A1C", VA = "0x3B1A1C")]
		protected void StopDecrypting()
		{
		}

		[Token(Token = "0x60020B5")]
		[Address(RVA = "0x3B1AD4", Offset = "0x3B1AD4", VA = "0x3B1AD4")]
		protected void Fill()
		{
		}

		[Token(Token = "0x60020BC")]
		[Address(RVA = "0x3B1D0C", Offset = "0x3B1D0C", VA = "0x3B1D0C", Slot = "16")]
		public override void Flush()
		{
		}

		[Token(Token = "0x60020BD")]
		[Address(RVA = "0x3B1D3C", Offset = "0x3B1D3C", VA = "0x3B1D3C", Slot = "19")]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x60020BE")]
		[Address(RVA = "0x3B1DD4", Offset = "0x3B1DD4", VA = "0x3B1DD4", Slot = "20")]
		public override void SetLength(long value)
		{
		}

		[Token(Token = "0x60020BF")]
		[Address(RVA = "0x3B1E6C", Offset = "0x3B1E6C", VA = "0x3B1E6C", Slot = "21")]
		public override void Write(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x60020C0")]
		[Address(RVA = "0x3B1F04", Offset = "0x3B1F04", VA = "0x3B1F04", Slot = "22")]
		public override void WriteByte(byte value)
		{
		}

		[Token(Token = "0x60020C1")]
		[Address(RVA = "0x3B1F9C", Offset = "0x3B1F9C", VA = "0x3B1F9C", Slot = "24")]
		public override IAsyncResult BeginWrite(byte[] buffer, int offset, int count, AsyncCallback callback, object state)
		{
			return null;
		}

		[Token(Token = "0x60020C2")]
		[Address(RVA = "0x3B2034", Offset = "0x3B2034", VA = "0x3B2034", Slot = "13")]
		public override void Close()
		{
		}

		[Token(Token = "0x60020C3")]
		[Address(RVA = "0x3B2084", Offset = "0x3B2084", VA = "0x3B2084", Slot = "17")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000488")]
	public class OutputWindow
	{
		[Token(Token = "0x400162B")]
		private const int WindowSize = 32768;

		[Token(Token = "0x400162C")]
		private const int WindowMask = 32767;

		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private byte[] window;

		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int windowEnd;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int windowFilled;

		[Token(Token = "0x60020C4")]
		[Address(RVA = "0x3AB720", Offset = "0x3AB720", VA = "0x3AB720")]
		public OutputWindow()
		{
		}

		[Token(Token = "0x60020C5")]
		[Address(RVA = "0x3AC1FC", Offset = "0x3AC1FC", VA = "0x3AC1FC")]
		public void Write(int value)
		{
		}

		[Token(Token = "0x60020C6")]
		[Address(RVA = "0x3B2260", Offset = "0x3B2260", VA = "0x3B2260")]
		private void SlowRepeat(int repStart, int length, int distance)
		{
		}

		[Token(Token = "0x60020C7")]
		[Address(RVA = "0x3AC56C", Offset = "0x3AC56C", VA = "0x3AC56C")]
		public void Repeat(int length, int distance)
		{
		}

		[Token(Token = "0x60020C8")]
		[Address(RVA = "0x3AD054", Offset = "0x3AD054", VA = "0x3AD054")]
		public int CopyStored(StreamManipulator input, int length)
		{
			return default(int);
		}

		[Token(Token = "0x60020C9")]
		[Address(RVA = "0x3ADCC4", Offset = "0x3ADCC4", VA = "0x3ADCC4")]
		public void CopyDict(byte[] dictionary, int offset, int length)
		{
		}

		[Token(Token = "0x60020CA")]
		[Address(RVA = "0x3AC1F0", Offset = "0x3AC1F0", VA = "0x3AC1F0")]
		public int GetFreeSpace()
		{
			return default(int);
		}

		[Token(Token = "0x60020CB")]
		[Address(RVA = "0x3AE62C", Offset = "0x3AE62C", VA = "0x3AE62C")]
		public int GetAvailable()
		{
			return default(int);
		}

		[Token(Token = "0x60020CC")]
		[Address(RVA = "0x3AE4EC", Offset = "0x3AE4EC", VA = "0x3AE4EC")]
		public int CopyOutput(byte[] output, int offset, int len)
		{
			return default(int);
		}

		[Token(Token = "0x60020CD")]
		[Address(RVA = "0x3AB85C", Offset = "0x3AB85C", VA = "0x3AB85C")]
		public void Reset()
		{
		}
	}
	[Token(Token = "0x2000489")]
	public class StreamManipulator
	{
		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private byte[] window_;

		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int windowStart_;

		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int windowEnd_;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private uint buffer_;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int bitsInBuffer_;

		[Token(Token = "0x1700020A")]
		public int AvailableBits
		{
			[Token(Token = "0x60020D2")]
			[Address(RVA = "0x3AF30C", Offset = "0x3AF30C", VA = "0x3AF30C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700020B")]
		public int AvailableBytes
		{
			[Token(Token = "0x60020D3")]
			[Address(RVA = "0x3AE71C", Offset = "0x3AE71C", VA = "0x3AE71C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700020C")]
		public bool IsNeedingInput
		{
			[Token(Token = "0x60020D5")]
			[Address(RVA = "0x3AD15C", Offset = "0x3AD15C", VA = "0x3AD15C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60020CE")]
		[Address(RVA = "0x3AB718", Offset = "0x3AB718", VA = "0x3AB718")]
		public StreamManipulator()
		{
		}

		[Token(Token = "0x60020CF")]
		[Address(RVA = "0x3ABA0C", Offset = "0x3ABA0C", VA = "0x3ABA0C")]
		public int PeekBits(int bitCount)
		{
			return default(int);
		}

		[Token(Token = "0x60020D0")]
		[Address(RVA = "0x3ABAF8", Offset = "0x3ABAF8", VA = "0x3ABAF8")]
		public void DropBits(int bitCount)
		{
		}

		[Token(Token = "0x60020D1")]
		[Address(RVA = "0x3B2538", Offset = "0x3B2538", VA = "0x3B2538")]
		public int GetBits(int bitCount)
		{
			return default(int);
		}

		[Token(Token = "0x60020D4")]
		[Address(RVA = "0x3AD02C", Offset = "0x3AD02C", VA = "0x3AD02C")]
		public void SkipToByteBoundary()
		{
		}

		[Token(Token = "0x60020D6")]
		[Address(RVA = "0x3B2300", Offset = "0x3B2300", VA = "0x3B2300")]
		public int CopyBytes(byte[] output, int offset, int length)
		{
			return default(int);
		}

		[Token(Token = "0x60020D7")]
		[Address(RVA = "0x3AB844", Offset = "0x3AB844", VA = "0x3AB844")]
		public void Reset()
		{
		}

		[Token(Token = "0x60020D8")]
		[Address(RVA = "0x3ADE90", Offset = "0x3ADE90", VA = "0x3ADE90")]
		public void SetInput(byte[] buffer, int offset, int count)
		{
		}
	}
}
namespace ICSharpCode.SharpZipLib.Zip
{
	[Serializable]
	[Token(Token = "0x200048A")]
	public class ZipException : SharpZipBaseException
	{
		[Token(Token = "0x60020D9")]
		[Address(RVA = "0x3B7158", Offset = "0x3B7158", VA = "0x3B7158")]
		protected ZipException(SerializationInfo info, StreamingContext context)
		{
		}

		[Token(Token = "0x60020DA")]
		[Address(RVA = "0x3B7178", Offset = "0x3B7178", VA = "0x3B7178")]
		public ZipException()
		{
		}

		[Token(Token = "0x60020DB")]
		[Address(RVA = "0x3B1310", Offset = "0x3B1310", VA = "0x3B1310")]
		public ZipException(string message)
		{
		}

		[Token(Token = "0x60020DC")]
		[Address(RVA = "0x3B7180", Offset = "0x3B7180", VA = "0x3B7180")]
		public ZipException(string message, Exception exception)
		{
		}
	}
	[Token(Token = "0x200048B")]
	public class ZipInputStream : InflaterInputStream
	{
		[Token(Token = "0x200048C")]
		private delegate int ReadDataHandler(byte[] b, int offset, int length);

		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private ReadDataHandler internalReader;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Crc32 crc;

		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private ZipEntry entry;

		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private long size;

		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int method;

		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int flags;

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string password;

		[Token(Token = "0x1700020D")]
		public string Password
		{
			[Token(Token = "0x60020DF")]
			[Address(RVA = "0x3B95FC", Offset = "0x3B95FC", VA = "0x3B95FC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60020E0")]
			[Address(RVA = "0x3B9604", Offset = "0x3B9604", VA = "0x3B9604")]
			set
			{
			}
		}

		[Token(Token = "0x1700020E")]
		public bool CanDecompressEntry
		{
			[Token(Token = "0x60020E1")]
			[Address(RVA = "0x3B960C", Offset = "0x3B960C", VA = "0x3B960C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700020F")]
		public override int Available
		{
			[Token(Token = "0x60020E6")]
			[Address(RVA = "0x3BA624", Offset = "0x3BA624", VA = "0x3BA624", Slot = "27")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000210")]
		public override long Length
		{
			[Token(Token = "0x60020E7")]
			[Address(RVA = "0x3BA634", Offset = "0x3BA634", VA = "0x3BA634", Slot = "9")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x60020DD")]
		[Address(RVA = "0x3B9414", Offset = "0x3B9414", VA = "0x3B9414")]
		public ZipInputStream(Stream baseInputStream)
		{
		}

		[Token(Token = "0x60020DE")]
		[Address(RVA = "0x3B9510", Offset = "0x3B9510", VA = "0x3B9510")]
		public ZipInputStream(Stream baseInputStream, int bufferSize)
		{
		}

		[Token(Token = "0x60020E2")]
		[Address(RVA = "0x3B9634", Offset = "0x3B9634", VA = "0x3B9634")]
		public ZipEntry GetNextEntry()
		{
			return null;
		}

		[Token(Token = "0x60020E3")]
		[Address(RVA = "0x3BA274", Offset = "0x3BA274", VA = "0x3BA274")]
		private void ReadDataDescriptor()
		{
		}

		[Token(Token = "0x60020E4")]
		[Address(RVA = "0x3BA4B0", Offset = "0x3BA4B0", VA = "0x3BA4B0")]
		private void CompleteCloseEntry(bool testCrc)
		{
		}

		[Token(Token = "0x60020E5")]
		[Address(RVA = "0x3B9F1C", Offset = "0x3B9F1C", VA = "0x3B9F1C")]
		public void CloseEntry()
		{
		}

		[Token(Token = "0x60020E8")]
		[Address(RVA = "0x3BA73C", Offset = "0x3BA73C", VA = "0x3BA73C", Slot = "18")]
		public override int ReadByte()
		{
			return default(int);
		}

		[Token(Token = "0x60020E9")]
		[Address(RVA = "0x3BA814", Offset = "0x3BA814", VA = "0x3BA814")]
		private int ReadingNotAvailable(byte[] destination, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x60020EA")]
		[Address(RVA = "0x3BA8AC", Offset = "0x3BA8AC", VA = "0x3BA8AC")]
		private int ReadingNotSupported(byte[] destination, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x60020EB")]
		[Address(RVA = "0x3BA944", Offset = "0x3BA944", VA = "0x3BA944")]
		private int InitialRead(byte[] destination, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x60020EC")]
		[Address(RVA = "0x3BB760", Offset = "0x3BB760", VA = "0x3BB760", Slot = "17")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x60020ED")]
		[Address(RVA = "0x3BAF18", Offset = "0x3BAF18", VA = "0x3BAF18")]
		private int BodyRead(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x60020EE")]
		[Address(RVA = "0x3BBD44", Offset = "0x3BBD44", VA = "0x3BBD44", Slot = "13")]
		public override void Close()
		{
		}
	}
	[Token(Token = "0x200048D")]
	public class ZipOutputStream : DeflaterOutputStream
	{
		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private ArrayList entries;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Crc32 crc;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private ZipEntry curEntry;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int defaultCompressionLevel;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private CompressionMethod curMethod;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private long size;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private long offset;

		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private byte[] zipComment;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool patchEntryHeader;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private long crcPatchPos;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private long sizePatchPos;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UseZip64 useZip64_;

		[Token(Token = "0x17000211")]
		public bool IsFinished
		{
			[Token(Token = "0x60020F5")]
			[Address(RVA = "0x3BC13C", Offset = "0x3BC13C", VA = "0x3BC13C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000212")]
		public UseZip64 UseZip64
		{
			[Token(Token = "0x60020F9")]
			[Address(RVA = "0x3BC298", Offset = "0x3BC298", VA = "0x3BC298")]
			get
			{
				return default(UseZip64);
			}
			[Token(Token = "0x60020FA")]
			[Address(RVA = "0x3BC2A0", Offset = "0x3BC2A0", VA = "0x3BC2A0")]
			set
			{
			}
		}

		[Token(Token = "0x60020F3")]
		[Address(RVA = "0x3BBEF0", Offset = "0x3BBEF0", VA = "0x3BBEF0")]
		public ZipOutputStream(Stream baseOutputStream)
		{
		}

		[Token(Token = "0x60020F4")]
		[Address(RVA = "0x3BC014", Offset = "0x3BC014", VA = "0x3BC014")]
		public ZipOutputStream(Stream baseOutputStream, int bufferSize)
		{
		}

		[Token(Token = "0x60020F6")]
		[Address(RVA = "0x3BC150", Offset = "0x3BC150", VA = "0x3BC150")]
		public void SetComment(string comment)
		{
		}

		[Token(Token = "0x60020F7")]
		[Address(RVA = "0x3BC244", Offset = "0x3BC244", VA = "0x3BC244")]
		public void SetLevel(int level)
		{
		}

		[Token(Token = "0x60020F8")]
		[Address(RVA = "0x3BC278", Offset = "0x3BC278", VA = "0x3BC278")]
		public int GetLevel()
		{
			return default(int);
		}

		[Token(Token = "0x60020FB")]
		[Address(RVA = "0x3BC2A8", Offset = "0x3BC2A8", VA = "0x3BC2A8")]
		private void WriteLeShort(int value)
		{
		}

		[Token(Token = "0x60020FC")]
		[Address(RVA = "0x3BC30C", Offset = "0x3BC30C", VA = "0x3BC30C")]
		private void WriteLeInt(int value)
		{
		}

		[Token(Token = "0x60020FD")]
		[Address(RVA = "0x3BC330", Offset = "0x3BC330", VA = "0x3BC330")]
		private void WriteLeLong(long value)
		{
		}

		[Token(Token = "0x60020FE")]
		[Address(RVA = "0x3BC374", Offset = "0x3BC374", VA = "0x3BC374")]
		public void PutNextEntry(ZipEntry entry)
		{
		}

		[Token(Token = "0x60020FF")]
		[Address(RVA = "0x3BCE64", Offset = "0x3BCE64", VA = "0x3BCE64")]
		public void CloseEntry()
		{
		}

		[Token(Token = "0x6002100")]
		[Address(RVA = "0x3BDFDC", Offset = "0x3BDFDC", VA = "0x3BDFDC")]
		private void WriteEncryptionHeader(long crcValue)
		{
		}

		[Token(Token = "0x6002101")]
		[Address(RVA = "0x3BDE2C", Offset = "0x3BDE2C", VA = "0x3BDE2C")]
		private static void AddExtraDataAES(ZipEntry entry, ZipExtraData extraData)
		{
		}

		[Token(Token = "0x6002102")]
		[Address(RVA = "0x3BDF18", Offset = "0x3BDF18", VA = "0x3BDF18")]
		private void WriteAESHeader(ZipEntry entry)
		{
		}

		[Token(Token = "0x6002103")]
		[Address(RVA = "0x3BE134", Offset = "0x3BE134", VA = "0x3BE134", Slot = "21")]
		public override void Write(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x6002104")]
		[Address(RVA = "0x3BE408", Offset = "0x3BE408", VA = "0x3BE408")]
		private void CopyAndEncrypt(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x6002105")]
		[Address(RVA = "0x3BE518", Offset = "0x3BE518", VA = "0x3BE518", Slot = "27")]
		public override void Finish()
		{
		}
	}
}
namespace ICSharpCode.SharpZipLib.Encryption
{
	[Token(Token = "0x200048E")]
	public abstract class PkzipClassic : SymmetricAlgorithm
	{
		[Token(Token = "0x6002106")]
		[Address(RVA = "0x3A2874", Offset = "0x3A2874", VA = "0x3A2874")]
		protected PkzipClassic()
		{
		}

		[Token(Token = "0x6002107")]
		[Address(RVA = "0x3A287C", Offset = "0x3A287C", VA = "0x3A287C")]
		public static byte[] GenerateKeys(byte[] seed)
		{
			return null;
		}
	}
	[Token(Token = "0x200048F")]
	internal class PkzipClassicCryptoBase
	{
		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private uint[] keys;

		[Token(Token = "0x6002108")]
		[Address(RVA = "0x3A2FE4", Offset = "0x3A2FE4", VA = "0x3A2FE4")]
		public PkzipClassicCryptoBase()
		{
		}

		[Token(Token = "0x6002109")]
		[Address(RVA = "0x3A2FEC", Offset = "0x3A2FEC", VA = "0x3A2FEC")]
		protected byte TransformByte()
		{
			return default(byte);
		}

		[Token(Token = "0x600210A")]
		[Address(RVA = "0x3A303C", Offset = "0x3A303C", VA = "0x3A303C")]
		protected void SetKeys(byte[] keyData)
		{
		}

		[Token(Token = "0x600210B")]
		[Address(RVA = "0x3A33CC", Offset = "0x3A33CC", VA = "0x3A33CC")]
		protected void UpdateKeys(byte ch)
		{
		}

		[Token(Token = "0x600210C")]
		[Address(RVA = "0x3A3620", Offset = "0x3A3620", VA = "0x3A3620")]
		protected void Reset()
		{
		}
	}
	[Token(Token = "0x2000490")]
	internal class PkzipClassicEncryptCryptoTransform : PkzipClassicCryptoBase, ICryptoTransform, IDisposable
	{
		[Token(Token = "0x17000213")]
		public bool CanReuseTransform
		{
			[Token(Token = "0x6002110")]
			[Address(RVA = "0x3A3A54", Offset = "0x3A3A54", VA = "0x3A3A54", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000214")]
		public int InputBlockSize
		{
			[Token(Token = "0x6002111")]
			[Address(RVA = "0x3A3A5C", Offset = "0x3A3A5C", VA = "0x3A3A5C", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000215")]
		public int OutputBlockSize
		{
			[Token(Token = "0x6002112")]
			[Address(RVA = "0x3A3A64", Offset = "0x3A3A64", VA = "0x3A3A64", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000216")]
		public bool CanTransformMultipleBlocks
		{
			[Token(Token = "0x6002113")]
			[Address(RVA = "0x3A3A6C", Offset = "0x3A3A6C", VA = "0x3A3A6C", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600210D")]
		[Address(RVA = "0x3A3890", Offset = "0x3A3890", VA = "0x3A3890")]
		internal PkzipClassicEncryptCryptoTransform(byte[] keyBlock)
		{
		}

		[Token(Token = "0x600210E")]
		[Address(RVA = "0x3A38B8", Offset = "0x3A38B8", VA = "0x3A38B8", Slot = "9")]
		public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount)
		{
			return null;
		}

		[Token(Token = "0x600210F")]
		[Address(RVA = "0x3A3964", Offset = "0x3A3964", VA = "0x3A3964", Slot = "8")]
		public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset)
		{
			return default(int);
		}

		[Token(Token = "0x6002114")]
		[Address(RVA = "0x3A3A74", Offset = "0x3A3A74", VA = "0x3A3A74", Slot = "10")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000491")]
	internal class PkzipClassicDecryptCryptoTransform : PkzipClassicCryptoBase, ICryptoTransform, IDisposable
	{
		[Token(Token = "0x17000217")]
		public bool CanReuseTransform
		{
			[Token(Token = "0x6002118")]
			[Address(RVA = "0x3A386C", Offset = "0x3A386C", VA = "0x3A386C", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000218")]
		public int InputBlockSize
		{
			[Token(Token = "0x6002119")]
			[Address(RVA = "0x3A3874", Offset = "0x3A3874", VA = "0x3A3874", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000219")]
		public int OutputBlockSize
		{
			[Token(Token = "0x600211A")]
			[Address(RVA = "0x3A387C", Offset = "0x3A387C", VA = "0x3A387C", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700021A")]
		public bool CanTransformMultipleBlocks
		{
			[Token(Token = "0x600211B")]
			[Address(RVA = "0x3A3884", Offset = "0x3A3884", VA = "0x3A3884", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002115")]
		[Address(RVA = "0x3A36C0", Offset = "0x3A36C0", VA = "0x3A36C0")]
		internal PkzipClassicDecryptCryptoTransform(byte[] keyBlock)
		{
		}

		[Token(Token = "0x6002116")]
		[Address(RVA = "0x3A36E8", Offset = "0x3A36E8", VA = "0x3A36E8", Slot = "9")]
		public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount)
		{
			return null;
		}

		[Token(Token = "0x6002117")]
		[Address(RVA = "0x3A3794", Offset = "0x3A3794", VA = "0x3A3794", Slot = "8")]
		public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset)
		{
			return default(int);
		}

		[Token(Token = "0x600211C")]
		[Address(RVA = "0x3A388C", Offset = "0x3A388C", VA = "0x3A388C", Slot = "10")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000492")]
	public sealed class PkzipClassicManaged : PkzipClassic
	{
		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] key_;

		[Token(Token = "0x1700021B")]
		public override int BlockSize
		{
			[Token(Token = "0x600211E")]
			[Address(RVA = "0x3A3A80", Offset = "0x3A3A80", VA = "0x3A3A80", Slot = "6")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600211F")]
			[Address(RVA = "0x3A3A88", Offset = "0x3A3A88", VA = "0x3A3A88", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x1700021C")]
		public override KeySizes[] LegalKeySizes
		{
			[Token(Token = "0x6002120")]
			[Address(RVA = "0x3A3B2C", Offset = "0x3A3B2C", VA = "0x3A3B2C", Slot = "16")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021D")]
		public override KeySizes[] LegalBlockSizes
		{
			[Token(Token = "0x6002122")]
			[Address(RVA = "0x3A3C34", Offset = "0x3A3C34", VA = "0x3A3C34", Slot = "15")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700021E")]
		public override byte[] Key
		{
			[Token(Token = "0x6002123")]
			[Address(RVA = "0x3A3D38", Offset = "0x3A3D38", VA = "0x3A3D38", Slot = "11")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002124")]
			[Address(RVA = "0x3A3E48", Offset = "0x3A3E48", VA = "0x3A3E48", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x600211D")]
		[Address(RVA = "0x3A3A78", Offset = "0x3A3A78", VA = "0x3A3A78")]
		public PkzipClassicManaged()
		{
		}

		[Token(Token = "0x6002121")]
		[Address(RVA = "0x3A3C30", Offset = "0x3A3C30", VA = "0x3A3C30", Slot = "25")]
		public override void GenerateIV()
		{
		}

		[Token(Token = "0x6002125")]
		[Address(RVA = "0x3A3FD8", Offset = "0x3A3FD8", VA = "0x3A3FD8", Slot = "26")]
		public override void GenerateKey()
		{
		}

		[Token(Token = "0x6002126")]
		[Address(RVA = "0x3A4094", Offset = "0x3A4094", VA = "0x3A4094", Slot = "24")]
		public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV)
		{
			return null;
		}

		[Token(Token = "0x6002127")]
		[Address(RVA = "0x3A4130", Offset = "0x3A4130", VA = "0x3A4130", Slot = "22")]
		public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV)
		{
			return null;
		}
	}
	[Token(Token = "0x2000493")]
	internal class ZipAESStream : CryptoStream
	{
		[Token(Token = "0x400164A")]
		private const int AUTH_CODE_LENGTH = 10;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Stream _stream;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private ZipAESTransform _transform;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private byte[] _slideBuffer;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int _slideBufStartPos;

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _slideBufFreePos;

		[Token(Token = "0x4001650")]
		private const int CRYPTO_BLOCK_SIZE = 16;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int _blockAndAuth;

		[Token(Token = "0x6002128")]
		[Address(RVA = "0x3A41CC", Offset = "0x3A41CC", VA = "0x3A41CC")]
		public ZipAESStream(Stream stream, ZipAESTransform transform, CryptoStreamMode mode)
		{
		}

		[Token(Token = "0x6002129")]
		[Address(RVA = "0x3A42D8", Offset = "0x3A42D8", VA = "0x3A42D8", Slot = "17")]
		public override int Read(byte[] outBuffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x600212A")]
		[Address(RVA = "0x3A4A28", Offset = "0x3A4A28", VA = "0x3A4A28", Slot = "21")]
		public override void Write(byte[] buffer, int offset, int count)
		{
		}
	}
	[Token(Token = "0x2000494")]
	internal class ZipAESTransform : ICryptoTransform, IDisposable
	{
		[Token(Token = "0x4001652")]
		private const int PWD_VER_LENGTH = 2;

		[Token(Token = "0x4001653")]
		private const int KEY_ROUNDS = 1000;

		[Token(Token = "0x4001654")]
		private const int ENCRYPT_BLOCK = 16;

		[Token(Token = "0x4001655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int _blockSize;

		[Token(Token = "0x4001656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private ICryptoTransform _encryptor;

		[Token(Token = "0x4001657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly byte[] _counterNonce;

		[Token(Token = "0x4001658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private byte[] _encryptBuffer;

		[Token(Token = "0x4001659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int _encrPos;

		[Token(Token = "0x400165A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private byte[] _pwdVerifier;

		[Token(Token = "0x400165B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HMACSHA1 _hmacsha1;

		[Token(Token = "0x400165C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool _finalised;

		[Token(Token = "0x400165D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		private bool _writeMode;

		[Token(Token = "0x1700021F")]
		public byte[] PwdVerifier
		{
			[Token(Token = "0x600212D")]
			[Address(RVA = "0x3A4FF4", Offset = "0x3A4FF4", VA = "0x3A4FF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000220")]
		public int InputBlockSize
		{
			[Token(Token = "0x6002130")]
			[Address(RVA = "0x3A5094", Offset = "0x3A5094", VA = "0x3A5094", Slot = "6")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000221")]
		public int OutputBlockSize
		{
			[Token(Token = "0x6002131")]
			[Address(RVA = "0x3A509C", Offset = "0x3A509C", VA = "0x3A509C", Slot = "7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000222")]
		public bool CanTransformMultipleBlocks
		{
			[Token(Token = "0x6002132")]
			[Address(RVA = "0x3A50A4", Offset = "0x3A50A4", VA = "0x3A50A4", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000223")]
		public bool CanReuseTransform
		{
			[Token(Token = "0x6002133")]
			[Address(RVA = "0x3A50AC", Offset = "0x3A50AC", VA = "0x3A50AC", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600212B")]
		[Address(RVA = "0x3A4AAC", Offset = "0x3A4AAC", VA = "0x3A4AAC")]
		public ZipAESTransform(string key, byte[] saltBytes, int blockSize, bool writeMode)
		{
		}

		[Token(Token = "0x600212C")]
		[Address(RVA = "0x3A4668", Offset = "0x3A4668", VA = "0x3A4668", Slot = "8")]
		public int TransformBlock(byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset)
		{
			return default(int);
		}

		[Token(Token = "0x600212E")]
		[Address(RVA = "0x3A493C", Offset = "0x3A493C", VA = "0x3A493C")]
		public byte[] GetAuthCode()
		{
			return null;
		}

		[Token(Token = "0x600212F")]
		[Address(RVA = "0x3A4FFC", Offset = "0x3A4FFC", VA = "0x3A4FFC", Slot = "9")]
		public byte[] TransformFinalBlock(byte[] inputBuffer, int inputOffset, int inputCount)
		{
			return null;
		}

		[Token(Token = "0x6002134")]
		[Address(RVA = "0x3A50B4", Offset = "0x3A50B4", VA = "0x3A50B4", Slot = "10")]
		public void Dispose()
		{
		}
	}
}
namespace ICSharpCode.SharpZipLib
{
	[Serializable]
	[Token(Token = "0x2000495")]
	public class SharpZipBaseException : ApplicationException
	{
		[Token(Token = "0x6002135")]
		[Address(RVA = "0x3A5188", Offset = "0x3A5188", VA = "0x3A5188")]
		protected SharpZipBaseException(SerializationInfo info, StreamingContext context)
		{
		}

		[Token(Token = "0x6002136")]
		[Address(RVA = "0x3A51A8", Offset = "0x3A51A8", VA = "0x3A51A8")]
		public SharpZipBaseException()
		{
		}

		[Token(Token = "0x6002137")]
		[Address(RVA = "0x3A51B0", Offset = "0x3A51B0", VA = "0x3A51B0")]
		public SharpZipBaseException(string message)
		{
		}

		[Token(Token = "0x6002138")]
		[Address(RVA = "0x3A51B8", Offset = "0x3A51B8", VA = "0x3A51B8")]
		public SharpZipBaseException(string message, Exception innerException)
		{
		}
	}
}
namespace ICSharpCode.SharpZipLib.Zip
{
	[Token(Token = "0x2000496")]
	public enum UseZip64
	{
		[Token(Token = "0x400165F")]
		Off,
		[Token(Token = "0x4001660")]
		On,
		[Token(Token = "0x4001661")]
		Dynamic
	}
	[Token(Token = "0x2000497")]
	public enum CompressionMethod
	{
		[Token(Token = "0x4001663")]
		Stored = 0,
		[Token(Token = "0x4001664")]
		Deflated = 8,
		[Token(Token = "0x4001665")]
		Deflate64 = 9,
		[Token(Token = "0x4001666")]
		BZip2 = 11,
		[Token(Token = "0x4001667")]
		WinZipAES = 99
	}
	[Token(Token = "0x2000498")]
	public enum EncryptionAlgorithm
	{
		[Token(Token = "0x4001669")]
		None = 0,
		[Token(Token = "0x400166A")]
		PkzipClassic = 1,
		[Token(Token = "0x400166B")]
		Des = 26113,
		[Token(Token = "0x400166C")]
		RC2 = 26114,
		[Token(Token = "0x400166D")]
		TripleDes168 = 26115,
		[Token(Token = "0x400166E")]
		TripleDes112 = 26121,
		[Token(Token = "0x400166F")]
		Aes128 = 26126,
		[Token(Token = "0x4001670")]
		Aes192 = 26127,
		[Token(Token = "0x4001671")]
		Aes256 = 26128,
		[Token(Token = "0x4001672")]
		RC2Corrected = 26370,
		[Token(Token = "0x4001673")]
		Blowfish = 26400,
		[Token(Token = "0x4001674")]
		Twofish = 26401,
		[Token(Token = "0x4001675")]
		RC4 = 26625,
		[Token(Token = "0x4001676")]
		Unknown = 65535
	}
	[Token(Token = "0x2000499")]
	[Flags]
	public enum GeneralBitFlags
	{
		[Token(Token = "0x4001678")]
		Encrypted = 1,
		[Token(Token = "0x4001679")]
		Method = 6,
		[Token(Token = "0x400167A")]
		Descriptor = 8,
		[Token(Token = "0x400167B")]
		ReservedPKware4 = 0x10,
		[Token(Token = "0x400167C")]
		Patched = 0x20,
		[Token(Token = "0x400167D")]
		StrongEncryption = 0x40,
		[Token(Token = "0x400167E")]
		Unused7 = 0x80,
		[Token(Token = "0x400167F")]
		Unused8 = 0x100,
		[Token(Token = "0x4001680")]
		Unused9 = 0x200,
		[Token(Token = "0x4001681")]
		Unused10 = 0x400,
		[Token(Token = "0x4001682")]
		UnicodeText = 0x800,
		[Token(Token = "0x4001683")]
		EnhancedCompress = 0x1000,
		[Token(Token = "0x4001684")]
		HeaderMasked = 0x2000,
		[Token(Token = "0x4001685")]
		ReservedPkware14 = 0x4000,
		[Token(Token = "0x4001686")]
		ReservedPkware15 = 0x8000
	}
	[Token(Token = "0x200049A")]
	public sealed class ZipConstants
	{
		[Token(Token = "0x4001687")]
		public const int VersionMadeBy = 51;

		[Token(Token = "0x4001688")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA3DB4", Offset = "0xEA3DB4")]
		public const int VERSION_MADE_BY = 51;

		[Token(Token = "0x4001689")]
		public const int VersionStrongEncryption = 50;

		[Token(Token = "0x400168A")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA3DE8", Offset = "0xEA3DE8")]
		public const int VERSION_STRONG_ENCRYPTION = 50;

		[Token(Token = "0x400168B")]
		public const int VERSION_AES = 51;

		[Token(Token = "0x400168C")]
		public const int VersionZip64 = 45;

		[Token(Token = "0x400168D")]
		public const int LocalHeaderBaseSize = 30;

		[Token(Token = "0x400168E")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA3E1C", Offset = "0xEA3E1C")]
		public const int LOCHDR = 30;

		[Token(Token = "0x400168F")]
		public const int Zip64DataDescriptorSize = 24;

		[Token(Token = "0x4001690")]
		public const int DataDescriptorSize = 16;

		[Token(Token = "0x4001691")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA3E50", Offset = "0xEA3E50")]
		public const int EXTHDR = 16;

		[Token(Token = "0x4001692")]
		public const int CentralHeaderBaseSize = 46;

		[Token(Token = "0x4001693")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA3E84", Offset = "0xEA3E84")]
		public const int CENHDR = 46;

		[Token(Token = "0x4001694")]
		public const int EndOfCentralRecordBaseSize = 22;

		[Token(Token = "0x4001695")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA3EB8", Offset = "0xEA3EB8")]
		public const int ENDHDR = 22;

		[Token(Token = "0x4001696")]
		public const int CryptoHeaderSize = 12;

		[Token(Token = "0x4001697")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA3EEC", Offset = "0xEA3EEC")]
		public const int CRYPTO_HEADER_SIZE = 12;

		[Token(Token = "0x4001698")]
		public const int LocalHeaderSignature = 67324752;

		[Token(Token = "0x4001699")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA3F20", Offset = "0xEA3F20")]
		public const int LOCSIG = 67324752;

		[Token(Token = "0x400169A")]
		public const int SpanningSignature = 134695760;

		[Token(Token = "0x400169B")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA3F54", Offset = "0xEA3F54")]
		public const int SPANNINGSIG = 134695760;

		[Token(Token = "0x400169C")]
		public const int SpanningTempSignature = 808471376;

		[Token(Token = "0x400169D")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA3F88", Offset = "0xEA3F88")]
		public const int SPANTEMPSIG = 808471376;

		[Token(Token = "0x400169E")]
		public const int DataDescriptorSignature = 134695760;

		[Token(Token = "0x400169F")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA3FBC", Offset = "0xEA3FBC")]
		public const int EXTSIG = 134695760;

		[Token(Token = "0x40016A0")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA3FF0", Offset = "0xEA3FF0")]
		public const int CENSIG = 33639248;

		[Token(Token = "0x40016A1")]
		public const int CentralHeaderSignature = 33639248;

		[Token(Token = "0x40016A2")]
		public const int Zip64CentralFileHeaderSignature = 101075792;

		[Token(Token = "0x40016A3")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA4024", Offset = "0xEA4024")]
		public const int CENSIG64 = 101075792;

		[Token(Token = "0x40016A4")]
		public const int Zip64CentralDirLocatorSignature = 117853008;

		[Token(Token = "0x40016A5")]
		public const int ArchiveExtraDataSignature = 117853008;

		[Token(Token = "0x40016A6")]
		public const int CentralHeaderDigitalSignature = 84233040;

		[Token(Token = "0x40016A7")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA4058", Offset = "0xEA4058")]
		public const int CENDIGITALSIG = 84233040;

		[Token(Token = "0x40016A8")]
		public const int EndOfCentralDirectorySignature = 101010256;

		[Token(Token = "0x40016A9")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA408C", Offset = "0xEA408C")]
		public const int ENDSIG = 101010256;

		[Token(Token = "0x40016AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int defaultCodePage;

		[Token(Token = "0x17000224")]
		public static int DefaultCodePage
		{
			[Token(Token = "0x600213A")]
			[Address(RVA = "0x3B4874", Offset = "0x3B4874", VA = "0x3B4874")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600213B")]
			[Address(RVA = "0x3B4900", Offset = "0x3B4900", VA = "0x3B4900")]
			set
			{
			}
		}

		[Token(Token = "0x6002139")]
		[Address(RVA = "0x3B486C", Offset = "0x3B486C", VA = "0x3B486C")]
		private ZipConstants()
		{
		}

		[Token(Token = "0x600213C")]
		[Address(RVA = "0x3B4990", Offset = "0x3B4990", VA = "0x3B4990")]
		public static string ConvertToString(byte[] data, int count)
		{
			return null;
		}

		[Token(Token = "0x600213D")]
		[Address(RVA = "0x3B4AE0", Offset = "0x3B4AE0", VA = "0x3B4AE0")]
		public static string ConvertToString(byte[] data)
		{
			return null;
		}

		[Token(Token = "0x600213E")]
		[Address(RVA = "0x3B4BB4", Offset = "0x3B4BB4", VA = "0x3B4BB4")]
		public static string ConvertToStringExt(int flags, byte[] data, int count)
		{
			return null;
		}

		[Token(Token = "0x600213F")]
		[Address(RVA = "0x3B4D20", Offset = "0x3B4D20", VA = "0x3B4D20")]
		public static string ConvertToStringExt(int flags, byte[] data)
		{
			return null;
		}

		[Token(Token = "0x6002140")]
		[Address(RVA = "0x3AFD84", Offset = "0x3AFD84", VA = "0x3AFD84")]
		public static byte[] ConvertToArray(string str)
		{
			return null;
		}

		[Token(Token = "0x6002141")]
		[Address(RVA = "0x3B4E88", Offset = "0x3B4E88", VA = "0x3B4E88")]
		public static byte[] ConvertToArray(int flags, string str)
		{
			return null;
		}
	}
	[Token(Token = "0x200049B")]
	public enum HostSystemID
	{
		[Token(Token = "0x40016AC")]
		Msdos = 0,
		[Token(Token = "0x40016AD")]
		Amiga = 1,
		[Token(Token = "0x40016AE")]
		OpenVms = 2,
		[Token(Token = "0x40016AF")]
		Unix = 3,
		[Token(Token = "0x40016B0")]
		VMCms = 4,
		[Token(Token = "0x40016B1")]
		AtariST = 5,
		[Token(Token = "0x40016B2")]
		OS2 = 6,
		[Token(Token = "0x40016B3")]
		Macintosh = 7,
		[Token(Token = "0x40016B4")]
		ZSystem = 8,
		[Token(Token = "0x40016B5")]
		Cpm = 9,
		[Token(Token = "0x40016B6")]
		WindowsNT = 10,
		[Token(Token = "0x40016B7")]
		MVS = 11,
		[Token(Token = "0x40016B8")]
		Vse = 12,
		[Token(Token = "0x40016B9")]
		AcornRisc = 13,
		[Token(Token = "0x40016BA")]
		Vfat = 14,
		[Token(Token = "0x40016BB")]
		AlternateMvs = 15,
		[Token(Token = "0x40016BC")]
		BeOS = 16,
		[Token(Token = "0x40016BD")]
		Tandem = 17,
		[Token(Token = "0x40016BE")]
		OS400 = 18,
		[Token(Token = "0x40016BF")]
		OSX = 19,
		[Token(Token = "0x40016C0")]
		WinZipAES = 99
	}
	[Token(Token = "0x200049C")]
	public class ZipEntry : ICloneable
	{
		[Token(Token = "0x200049D")]
		[Flags]
		private enum Known : byte
		{
			[Token(Token = "0x40016D4")]
			None = 0,
			[Token(Token = "0x40016D5")]
			Size = 1,
			[Token(Token = "0x40016D6")]
			CompressedSize = 2,
			[Token(Token = "0x40016D7")]
			Crc = 4,
			[Token(Token = "0x40016D8")]
			Time = 8,
			[Token(Token = "0x40016D9")]
			ExternalAttributes = 0x10
		}

		[Token(Token = "0x40016C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Known known;

		[Token(Token = "0x40016C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int externalFileAttributes;

		[Token(Token = "0x40016C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ushort versionMadeBy;

		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private string name;

		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ulong size;

		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ulong compressedSize;

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ushort versionToExtract;

		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private uint crc;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private uint dosTime;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private CompressionMethod method;

		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private byte[] extra;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private string comment;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int flags;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private long zipFileIndex;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private long offset;

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool forceZip64_;

		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private byte cryptoCheckValue_;

		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int _aesEncryptionStrength;

		[Token(Token = "0x17000225")]
		public bool HasCrc
		{
			[Token(Token = "0x6002147")]
			[Address(RVA = "0x3B5600", Offset = "0x3B5600", VA = "0x3B5600")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000226")]
		public bool IsCrypted
		{
			[Token(Token = "0x6002148")]
			[Address(RVA = "0x3B5610", Offset = "0x3B5610", VA = "0x3B5610")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002149")]
			[Address(RVA = "0x3B561C", Offset = "0x3B561C", VA = "0x3B561C")]
			set
			{
			}
		}

		[Token(Token = "0x17000227")]
		public bool IsUnicodeText
		{
			[Token(Token = "0x600214A")]
			[Address(RVA = "0x3B5638", Offset = "0x3B5638", VA = "0x3B5638")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600214B")]
			[Address(RVA = "0x3B5648", Offset = "0x3B5648", VA = "0x3B5648")]
			set
			{
			}
		}

		[Token(Token = "0x17000228")]
		internal byte CryptoCheckValue
		{
			[Token(Token = "0x600214C")]
			[Address(RVA = "0x3B5664", Offset = "0x3B5664", VA = "0x3B5664")]
			get
			{
				return default(byte);
			}
			[Token(Token = "0x600214D")]
			[Address(RVA = "0x3B566C", Offset = "0x3B566C", VA = "0x3B566C")]
			set
			{
			}
		}

		[Token(Token = "0x17000229")]
		public int Flags
		{
			[Token(Token = "0x600214E")]
			[Address(RVA = "0x3B5674", Offset = "0x3B5674", VA = "0x3B5674")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600214F")]
			[Address(RVA = "0x3B567C", Offset = "0x3B567C", VA = "0x3B567C")]
			set
			{
			}
		}

		[Token(Token = "0x1700022A")]
		public long ZipFileIndex
		{
			[Token(Token = "0x6002150")]
			[Address(RVA = "0x3B5684", Offset = "0x3B5684", VA = "0x3B5684")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6002151")]
			[Address(RVA = "0x3B568C", Offset = "0x3B568C", VA = "0x3B568C")]
			set
			{
			}
		}

		[Token(Token = "0x1700022B")]
		public long Offset
		{
			[Token(Token = "0x6002152")]
			[Address(RVA = "0x3B569C", Offset = "0x3B569C", VA = "0x3B569C")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6002153")]
			[Address(RVA = "0x3B56A4", Offset = "0x3B56A4", VA = "0x3B56A4")]
			set
			{
			}
		}

		[Token(Token = "0x1700022C")]
		public int ExternalFileAttributes
		{
			[Token(Token = "0x6002154")]
			[Address(RVA = "0x3B56B4", Offset = "0x3B56B4", VA = "0x3B56B4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002155")]
			[Address(RVA = "0x3B56CC", Offset = "0x3B56CC", VA = "0x3B56CC")]
			set
			{
			}
		}

		[Token(Token = "0x1700022D")]
		public int VersionMadeBy
		{
			[Token(Token = "0x6002156")]
			[Address(RVA = "0x3B56E0", Offset = "0x3B56E0", VA = "0x3B56E0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700022E")]
		public bool IsDOSEntry
		{
			[Token(Token = "0x6002157")]
			[Address(RVA = "0x3B56E8", Offset = "0x3B56E8", VA = "0x3B56E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700022F")]
		public int HostSystem
		{
			[Token(Token = "0x6002159")]
			[Address(RVA = "0x3B5710", Offset = "0x3B5710", VA = "0x3B5710")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600215A")]
			[Address(RVA = "0x3B5760", Offset = "0x3B5760", VA = "0x3B5760")]
			set
			{
			}
		}

		[Token(Token = "0x17000230")]
		public int Version
		{
			[Token(Token = "0x600215B")]
			[Address(RVA = "0x3B5770", Offset = "0x3B5770", VA = "0x3B5770")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000231")]
		public bool CanDecompress
		{
			[Token(Token = "0x600215C")]
			[Address(RVA = "0x3B5958", Offset = "0x3B5958", VA = "0x3B5958")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000232")]
		public bool LocalHeaderRequiresZip64
		{
			[Token(Token = "0x600215F")]
			[Address(RVA = "0x3B5A0C", Offset = "0x3B5A0C", VA = "0x3B5A0C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000233")]
		public bool CentralHeaderRequiresZip64
		{
			[Token(Token = "0x6002160")]
			[Address(RVA = "0x3B5840", Offset = "0x3B5840", VA = "0x3B5840")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000234")]
		public long DosTime
		{
			[Token(Token = "0x6002161")]
			[Address(RVA = "0x3B5AC4", Offset = "0x3B5AC4", VA = "0x3B5AC4")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6002162")]
			[Address(RVA = "0x3B5ADC", Offset = "0x3B5ADC", VA = "0x3B5ADC")]
			set
			{
			}
		}

		[Token(Token = "0x17000235")]
		public DateTime DateTime
		{
			[Token(Token = "0x6002163")]
			[Address(RVA = "0x3B5AF0", Offset = "0x3B5AF0", VA = "0x3B5AF0")]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x6002164")]
			[Address(RVA = "0x3B5300", Offset = "0x3B5300", VA = "0x3B5300")]
			set
			{
			}
		}

		[Token(Token = "0x17000236")]
		public string Name
		{
			[Token(Token = "0x6002165")]
			[Address(RVA = "0x3B5C84", Offset = "0x3B5C84", VA = "0x3B5C84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000237")]
		public long Size
		{
			[Token(Token = "0x6002166")]
			[Address(RVA = "0x3B5C8C", Offset = "0x3B5C8C", VA = "0x3B5C8C")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6002167")]
			[Address(RVA = "0x3B5CAC", Offset = "0x3B5CAC", VA = "0x3B5CAC")]
			set
			{
			}
		}

		[Token(Token = "0x17000238")]
		public long CompressedSize
		{
			[Token(Token = "0x6002168")]
			[Address(RVA = "0x3B5CC8", Offset = "0x3B5CC8", VA = "0x3B5CC8")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x6002169")]
			[Address(RVA = "0x3B5CE8", Offset = "0x3B5CE8", VA = "0x3B5CE8")]
			set
			{
			}
		}

		[Token(Token = "0x17000239")]
		public long Crc
		{
			[Token(Token = "0x600216A")]
			[Address(RVA = "0x3B5D04", Offset = "0x3B5D04", VA = "0x3B5D04")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x600216B")]
			[Address(RVA = "0x3B5D24", Offset = "0x3B5D24", VA = "0x3B5D24")]
			set
			{
			}
		}

		[Token(Token = "0x1700023A")]
		public CompressionMethod CompressionMethod
		{
			[Token(Token = "0x600216C")]
			[Address(RVA = "0x3B5D84", Offset = "0x3B5D84", VA = "0x3B5D84")]
			get
			{
				return default(CompressionMethod);
			}
			[Token(Token = "0x600216D")]
			[Address(RVA = "0x3B5D8C", Offset = "0x3B5D8C", VA = "0x3B5D8C")]
			set
			{
			}
		}

		[Token(Token = "0x1700023B")]
		internal CompressionMethod CompressionMethodForHeader
		{
			[Token(Token = "0x600216E")]
			[Address(RVA = "0x3B5E50", Offset = "0x3B5E50", VA = "0x3B5E50")]
			get
			{
				return default(CompressionMethod);
			}
		}

		[Token(Token = "0x1700023C")]
		public byte[] ExtraData
		{
			[Token(Token = "0x600216F")]
			[Address(RVA = "0x3B5E74", Offset = "0x3B5E74", VA = "0x3B5E74")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002170")]
			[Address(RVA = "0x3B5E7C", Offset = "0x3B5E7C", VA = "0x3B5E7C")]
			set
			{
			}
		}

		[Token(Token = "0x1700023D")]
		public int AESKeySize
		{
			[Token(Token = "0x6002171")]
			[Address(RVA = "0x3B0138", Offset = "0x3B0138", VA = "0x3B0138")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6002172")]
			[Address(RVA = "0x3B5F98", Offset = "0x3B5F98", VA = "0x3B5F98")]
			set
			{
			}
		}

		[Token(Token = "0x1700023E")]
		internal byte AESEncryptionStrength
		{
			[Token(Token = "0x6002173")]
			[Address(RVA = "0x3B60D4", Offset = "0x3B60D4", VA = "0x3B60D4")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x1700023F")]
		internal int AESSaltLen
		{
			[Token(Token = "0x6002174")]
			[Address(RVA = "0x3B011C", Offset = "0x3B011C", VA = "0x3B011C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000240")]
		internal int AESOverheadSize
		{
			[Token(Token = "0x6002175")]
			[Address(RVA = "0x3B60DC", Offset = "0x3B60DC", VA = "0x3B60DC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000241")]
		public string Comment
		{
			[Token(Token = "0x6002178")]
			[Address(RVA = "0x3B6CA8", Offset = "0x3B6CA8", VA = "0x3B6CA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002179")]
			[Address(RVA = "0x3B6CB0", Offset = "0x3B6CB0", VA = "0x3B6CB0")]
			set
			{
			}
		}

		[Token(Token = "0x17000242")]
		public bool IsDirectory
		{
			[Token(Token = "0x600217A")]
			[Address(RVA = "0x3B5884", Offset = "0x3B5884", VA = "0x3B5884")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000243")]
		public bool IsFile
		{
			[Token(Token = "0x600217B")]
			[Address(RVA = "0x3B6D84", Offset = "0x3B6D84", VA = "0x3B6D84")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002143")]
		[Address(RVA = "0x3B50AC", Offset = "0x3B50AC", VA = "0x3B50AC")]
		public ZipEntry(string name)
		{
		}

		[Token(Token = "0x6002144")]
		[Address(RVA = "0x3B52DC", Offset = "0x3B52DC", VA = "0x3B52DC")]
		internal ZipEntry(string name, int versionRequiredToExtract)
		{
		}

		[Token(Token = "0x6002145")]
		[Address(RVA = "0x3B50D4", Offset = "0x3B50D4", VA = "0x3B50D4")]
		internal ZipEntry(string name, int versionRequiredToExtract, int madeByInfo, CompressionMethod method)
		{
		}

		[Token(Token = "0x6002146")]
		[Address(RVA = "0x3B5424", Offset = "0x3B5424", VA = "0x3B5424")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA40C0", Offset = "0xEA40C0")]
		public ZipEntry(ZipEntry entry)
		{
		}

		[Token(Token = "0x6002158")]
		[Address(RVA = "0x3B571C", Offset = "0x3B571C", VA = "0x3B571C")]
		private bool HasDosAttributes(int attributes)
		{
			return default(bool);
		}

		[Token(Token = "0x600215D")]
		[Address(RVA = "0x3B59F8", Offset = "0x3B59F8", VA = "0x3B59F8")]
		public void ForceZip64()
		{
		}

		[Token(Token = "0x600215E")]
		[Address(RVA = "0x3B5A04", Offset = "0x3B5A04", VA = "0x3B5A04")]
		public bool IsZip64Forced()
		{
			return default(bool);
		}

		[Token(Token = "0x6002176")]
		[Address(RVA = "0x3B60FC", Offset = "0x3B60FC", VA = "0x3B60FC")]
		internal void ProcessExtraData(bool localHeader)
		{
		}

		[Token(Token = "0x6002177")]
		[Address(RVA = "0x3B6AC4", Offset = "0x3B6AC4", VA = "0x3B6AC4")]
		private void ProcessAESExtraData(ZipExtraData extraData)
		{
		}

		[Token(Token = "0x600217C")]
		[Address(RVA = "0x3B59E0", Offset = "0x3B59E0", VA = "0x3B59E0")]
		public bool IsCompressionMethodSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x600217D")]
		[Address(RVA = "0x3B6DE0", Offset = "0x3B6DE0", VA = "0x3B6DE0", Slot = "4")]
		public object Clone()
		{
			return null;
		}

		[Token(Token = "0x600217E")]
		[Address(RVA = "0x3B6F5C", Offset = "0x3B6F5C", VA = "0x3B6F5C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600217F")]
		[Address(RVA = "0x3B5E3C", Offset = "0x3B5E3C", VA = "0x3B5E3C")]
		public static bool IsCompressionMethodSupported(CompressionMethod method)
		{
			return default(bool);
		}

		[Token(Token = "0x6002180")]
		[Address(RVA = "0x3B6F64", Offset = "0x3B6F64", VA = "0x3B6F64")]
		public static string CleanName(string name)
		{
			return null;
		}
	}
	[Token(Token = "0x200049E")]
	public interface ITaggedData
	{
		[Token(Token = "0x17000244")]
		short TagID
		{
			[Token(Token = "0x6002181")]
			get;
		}

		[Token(Token = "0x6002182")]
		void SetData(byte[] data, int offset, int count);

		[Token(Token = "0x6002183")]
		byte[] GetData();
	}
	[Token(Token = "0x200049F")]
	public class RawTaggedData : ITaggedData
	{
		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private short _tag;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private byte[] _data;

		[Token(Token = "0x17000245")]
		public short TagID
		{
			[Token(Token = "0x6002185")]
			[Address(RVA = "0x3B4740", Offset = "0x3B4740", VA = "0x3B4740", Slot = "4")]
			get
			{
				return default(short);
			}
			[Token(Token = "0x6002186")]
			[Address(RVA = "0x3B4748", Offset = "0x3B4748", VA = "0x3B4748")]
			set
			{
			}
		}

		[Token(Token = "0x17000246")]
		public byte[] Data
		{
			[Token(Token = "0x6002189")]
			[Address(RVA = "0x3B485C", Offset = "0x3B485C", VA = "0x3B485C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600218A")]
			[Address(RVA = "0x3B4864", Offset = "0x3B4864", VA = "0x3B4864")]
			set
			{
			}
		}

		[Token(Token = "0x6002184")]
		[Address(RVA = "0x3B4720", Offset = "0x3B4720", VA = "0x3B4720")]
		public RawTaggedData(short tag)
		{
		}

		[Token(Token = "0x6002187")]
		[Address(RVA = "0x3B4750", Offset = "0x3B4750", VA = "0x3B4750", Slot = "5")]
		public void SetData(byte[] data, int offset, int count)
		{
		}

		[Token(Token = "0x6002188")]
		[Address(RVA = "0x3B4854", Offset = "0x3B4854", VA = "0x3B4854", Slot = "6")]
		public byte[] GetData()
		{
			return null;
		}
	}
	[Token(Token = "0x20004A0")]
	public class ExtendedUnixData : ITaggedData
	{
		[Token(Token = "0x20004A1")]
		[Flags]
		public enum Flags : byte
		{
			[Token(Token = "0x40016E1")]
			ModificationTime = 1,
			[Token(Token = "0x40016E2")]
			AccessTime = 2,
			[Token(Token = "0x40016E3")]
			CreateTime = 4
		}

		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Flags _flags;

		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private DateTime _modificationTime;

		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private DateTime _lastAccessTime;

		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private DateTime _createTime;

		[Token(Token = "0x17000247")]
		public short TagID
		{
			[Token(Token = "0x600218C")]
			[Address(RVA = "0x3B26CC", Offset = "0x3B26CC", VA = "0x3B26CC", Slot = "4")]
			get
			{
				return default(short);
			}
		}

		[Token(Token = "0x17000248")]
		public DateTime ModificationTime
		{
			[Token(Token = "0x6002190")]
			[Address(RVA = "0x3B35E8", Offset = "0x3B35E8", VA = "0x3B35E8")]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x6002191")]
			[Address(RVA = "0x3B35FC", Offset = "0x3B35FC", VA = "0x3B35FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000249")]
		public DateTime AccessTime
		{
			[Token(Token = "0x6002192")]
			[Address(RVA = "0x3B36E0", Offset = "0x3B36E0", VA = "0x3B36E0")]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x6002193")]
			[Address(RVA = "0x3B36F4", Offset = "0x3B36F4", VA = "0x3B36F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700024A")]
		public DateTime CreateTime
		{
			[Token(Token = "0x6002194")]
			[Address(RVA = "0x3B37D8", Offset = "0x3B37D8", VA = "0x3B37D8")]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x6002195")]
			[Address(RVA = "0x3B37EC", Offset = "0x3B37EC", VA = "0x3B37EC")]
			set
			{
			}
		}

		[Token(Token = "0x1700024B")]
		private Flags Include
		{
			[Token(Token = "0x6002196")]
			[Address(RVA = "0x3B38D0", Offset = "0x3B38D0", VA = "0x3B38D0")]
			get
			{
				return default(Flags);
			}
			[Token(Token = "0x6002197")]
			[Address(RVA = "0x3B38D8", Offset = "0x3B38D8", VA = "0x3B38D8")]
			set
			{
			}
		}

		[Token(Token = "0x600218B")]
		[Address(RVA = "0x3B25FC", Offset = "0x3B25FC", VA = "0x3B25FC")]
		public ExtendedUnixData()
		{
		}

		[Token(Token = "0x600218D")]
		[Address(RVA = "0x3B26D4", Offset = "0x3B26D4", VA = "0x3B26D4", Slot = "5")]
		public void SetData(byte[] data, int index, int count)
		{
		}

		[Token(Token = "0x600218E")]
		[Address(RVA = "0x3B2DAC", Offset = "0x3B2DAC", VA = "0x3B2DAC", Slot = "6")]
		public byte[] GetData()
		{
			return null;
		}

		[Token(Token = "0x600218F")]
		[Address(RVA = "0x3B3450", Offset = "0x3B3450", VA = "0x3B3450")]
		public static bool IsValidValue(DateTime value)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004A2")]
	public class NTTaggedData : ITaggedData
	{
		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private DateTime _lastAccessTime;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private DateTime _lastModificationTime;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DateTime _createTime;

		[Token(Token = "0x1700024C")]
		public short TagID
		{
			[Token(Token = "0x6002199")]
			[Address(RVA = "0x3B39E8", Offset = "0x3B39E8", VA = "0x3B39E8", Slot = "4")]
			get
			{
				return default(short);
			}
		}

		[Token(Token = "0x1700024D")]
		public DateTime LastModificationTime
		{
			[Token(Token = "0x600219D")]
			[Address(RVA = "0x3B445C", Offset = "0x3B445C", VA = "0x3B445C")]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x600219E")]
			[Address(RVA = "0x3B4470", Offset = "0x3B4470", VA = "0x3B4470")]
			set
			{
			}
		}

		[Token(Token = "0x1700024E")]
		public DateTime CreateTime
		{
			[Token(Token = "0x600219F")]
			[Address(RVA = "0x3B4548", Offset = "0x3B4548", VA = "0x3B4548")]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x60021A0")]
			[Address(RVA = "0x3B455C", Offset = "0x3B455C", VA = "0x3B455C")]
			set
			{
			}
		}

		[Token(Token = "0x1700024F")]
		public DateTime LastAccessTime
		{
			[Token(Token = "0x60021A1")]
			[Address(RVA = "0x3B4634", Offset = "0x3B4634", VA = "0x3B4634")]
			get
			{
				return default(DateTime);
			}
			[Token(Token = "0x60021A2")]
			[Address(RVA = "0x3B4648", Offset = "0x3B4648", VA = "0x3B4648")]
			set
			{
			}
		}

		[Token(Token = "0x6002198")]
		[Address(RVA = "0x3B38E0", Offset = "0x3B38E0", VA = "0x3B38E0")]
		public NTTaggedData()
		{
		}

		[Token(Token = "0x600219A")]
		[Address(RVA = "0x3B39F0", Offset = "0x3B39F0", VA = "0x3B39F0", Slot = "5")]
		public void SetData(byte[] data, int index, int count)
		{
		}

		[Token(Token = "0x600219B")]
		[Address(RVA = "0x3B3F48", Offset = "0x3B3F48", VA = "0x3B3F48", Slot = "6")]
		public byte[] GetData()
		{
			return null;
		}

		[Token(Token = "0x600219C")]
		[Address(RVA = "0x3B435C", Offset = "0x3B435C", VA = "0x3B435C")]
		public static bool IsValidValue(DateTime value)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004A3")]
	internal interface ITaggedDataFactory
	{
		[Token(Token = "0x60021A3")]
		ITaggedData Create(short tag, byte[] data, int offset, int count);
	}
	[Token(Token = "0x20004A4")]
	public sealed class ZipExtraData : IDisposable
	{
		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int _index;

		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private int _readValueStart;

		[Token(Token = "0x40016E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _readValueLength;

		[Token(Token = "0x40016EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private MemoryStream _newEntry;

		[Token(Token = "0x40016EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private byte[] _data;

		[Token(Token = "0x17000250")]
		public int Length
		{
			[Token(Token = "0x60021A8")]
			[Address(RVA = "0x3B7394", Offset = "0x3B7394", VA = "0x3B7394")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000251")]
		public int ValueLength
		{
			[Token(Token = "0x60021AC")]
			[Address(RVA = "0x3B675C", Offset = "0x3B675C", VA = "0x3B675C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000252")]
		public int CurrentReadIndex
		{
			[Token(Token = "0x60021AD")]
			[Address(RVA = "0x3B7628", Offset = "0x3B7628", VA = "0x3B7628")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000253")]
		public int UnreadCount
		{
			[Token(Token = "0x60021AE")]
			[Address(RVA = "0x3B6964", Offset = "0x3B6964", VA = "0x3B6964")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60021A4")]
		[Address(RVA = "0x3B7188", Offset = "0x3B7188", VA = "0x3B7188")]
		public ZipExtraData()
		{
		}

		[Token(Token = "0x60021A5")]
		[Address(RVA = "0x3B6608", Offset = "0x3B6608", VA = "0x3B6608")]
		public ZipExtraData(byte[] data)
		{
		}

		[Token(Token = "0x60021A6")]
		[Address(RVA = "0x3B7234", Offset = "0x3B7234", VA = "0x3B7234")]
		public byte[] GetEntryData()
		{
			return null;
		}

		[Token(Token = "0x60021A7")]
		[Address(RVA = "0x3B71A8", Offset = "0x3B71A8", VA = "0x3B71A8")]
		public void Clear()
		{
		}

		[Token(Token = "0x60021A9")]
		[Address(RVA = "0x3B73B4", Offset = "0x3B73B4", VA = "0x3B73B4")]
		public Stream GetStreamForTag(int tag)
		{
			return null;
		}

		[Token(Token = "0x60021AA")]
		[Address(RVA = "0x3B746C", Offset = "0x3B746C", VA = "0x3B746C")]
		private ITaggedData GetData(short tag)
		{
			return null;
		}

		[Token(Token = "0x60021AB")]
		[Address(RVA = "0x3B74B8", Offset = "0x3B74B8", VA = "0x3B74B8")]
		private static ITaggedData Create(short tag, byte[] data, int offset, int count)
		{
			return null;
		}

		[Token(Token = "0x60021AF")]
		[Address(RVA = "0x3B6698", Offset = "0x3B6698", VA = "0x3B6698")]
		public bool Find(int headerID)
		{
			return default(bool);
		}

		[Token(Token = "0x60021B0")]
		[Address(RVA = "0x3B7770", Offset = "0x3B7770", VA = "0x3B7770")]
		public void AddEntry(ITaggedData taggedData)
		{
		}

		[Token(Token = "0x60021B1")]
		[Address(RVA = "0x3B7920", Offset = "0x3B7920", VA = "0x3B7920")]
		public void AddEntry(int headerID, byte[] fieldData)
		{
		}

		[Token(Token = "0x60021B2")]
		[Address(RVA = "0x3B7D38", Offset = "0x3B7D38", VA = "0x3B7D38")]
		public void StartNewEntry()
		{
		}

		[Token(Token = "0x60021B3")]
		[Address(RVA = "0x3B7DA8", Offset = "0x3B7DA8", VA = "0x3B7DA8")]
		public void AddNewEntry(int headerID)
		{
		}

		[Token(Token = "0x60021B4")]
		[Address(RVA = "0x3B7DF8", Offset = "0x3B7DF8", VA = "0x3B7DF8")]
		public void AddData(byte data)
		{
		}

		[Token(Token = "0x60021B5")]
		[Address(RVA = "0x3B7E30", Offset = "0x3B7E30", VA = "0x3B7E30")]
		public void AddData(byte[] data)
		{
		}

		[Token(Token = "0x60021B6")]
		[Address(RVA = "0x3B7F18", Offset = "0x3B7F18", VA = "0x3B7F18")]
		public void AddLeShort(int toAdd)
		{
		}

		[Token(Token = "0x60021B7")]
		[Address(RVA = "0x3B7F7C", Offset = "0x3B7F7C", VA = "0x3B7F7C")]
		public void AddLeInt(int toAdd)
		{
		}

		[Token(Token = "0x60021B8")]
		[Address(RVA = "0x3B7FA4", Offset = "0x3B7FA4", VA = "0x3B7FA4")]
		public void AddLeLong(long toAdd)
		{
		}

		[Token(Token = "0x60021B9")]
		[Address(RVA = "0x3B7B7C", Offset = "0x3B7B7C", VA = "0x3B7B7C")]
		public bool Delete(int headerID)
		{
			return default(bool);
		}

		[Token(Token = "0x60021BA")]
		[Address(RVA = "0x3B6764", Offset = "0x3B6764", VA = "0x3B6764")]
		public long ReadLong()
		{
			return default(long);
		}

		[Token(Token = "0x60021BB")]
		[Address(RVA = "0x3B6798", Offset = "0x3B6798", VA = "0x3B6798")]
		public int ReadInt()
		{
			return default(int);
		}

		[Token(Token = "0x60021BC")]
		[Address(RVA = "0x3B68AC", Offset = "0x3B68AC", VA = "0x3B68AC")]
		public int ReadShort()
		{
			return default(int);
		}

		[Token(Token = "0x60021BD")]
		[Address(RVA = "0x3B6A3C", Offset = "0x3B6A3C", VA = "0x3B6A3C")]
		public int ReadByte()
		{
			return default(int);
		}

		[Token(Token = "0x60021BE")]
		[Address(RVA = "0x3B6940", Offset = "0x3B6940", VA = "0x3B6940")]
		public void Skip(int amount)
		{
		}

		[Token(Token = "0x60021BF")]
		[Address(RVA = "0x3B7FE8", Offset = "0x3B7FE8", VA = "0x3B7FE8")]
		private void ReadCheck(int length)
		{
		}

		[Token(Token = "0x60021C0")]
		[Address(RVA = "0x3B7630", Offset = "0x3B7630", VA = "0x3B7630")]
		private int ReadShortInternal()
		{
			return default(int);
		}

		[Token(Token = "0x60021C1")]
		[Address(RVA = "0x3B7CA4", Offset = "0x3B7CA4", VA = "0x3B7CA4")]
		private void SetShort(ref int index, int source)
		{
		}

		[Token(Token = "0x60021C2")]
		[Address(RVA = "0x3B8160", Offset = "0x3B8160", VA = "0x3B8160", Slot = "4")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x20004A5")]
	public class DescriptorData
	{
		[Token(Token = "0x40016EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private long size;

		[Token(Token = "0x40016ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private long compressedSize;

		[Token(Token = "0x40016EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private long crc;

		[Token(Token = "0x17000254")]
		public long CompressedSize
		{
			[Token(Token = "0x60021C4")]
			[Address(RVA = "0x3B2580", Offset = "0x3B2580", VA = "0x3B2580")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60021C5")]
			[Address(RVA = "0x3B2588", Offset = "0x3B2588", VA = "0x3B2588")]
			set
			{
			}
		}

		[Token(Token = "0x17000255")]
		public long Size
		{
			[Token(Token = "0x60021C6")]
			[Address(RVA = "0x3B2598", Offset = "0x3B2598", VA = "0x3B2598")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60021C7")]
			[Address(RVA = "0x3B25A0", Offset = "0x3B25A0", VA = "0x3B25A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000256")]
		public long Crc
		{
			[Token(Token = "0x60021C8")]
			[Address(RVA = "0x3B25B0", Offset = "0x3B25B0", VA = "0x3B25B0")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60021C9")]
			[Address(RVA = "0x3B25B8", Offset = "0x3B25B8", VA = "0x3B25B8")]
			set
			{
			}
		}

		[Token(Token = "0x60021C3")]
		[Address(RVA = "0x3B2578", Offset = "0x3B2578", VA = "0x3B2578")]
		public DescriptorData()
		{
		}
	}
	[Token(Token = "0x20004A6")]
	internal class EntryPatchData
	{
		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private long sizePatchOffset_;

		[Token(Token = "0x40016F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private long crcPatchOffset_;

		[Token(Token = "0x17000257")]
		public long SizePatchOffset
		{
			[Token(Token = "0x60021CB")]
			[Address(RVA = "0x3B25CC", Offset = "0x3B25CC", VA = "0x3B25CC")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60021CC")]
			[Address(RVA = "0x3B25D4", Offset = "0x3B25D4", VA = "0x3B25D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000258")]
		public long CrcPatchOffset
		{
			[Token(Token = "0x60021CD")]
			[Address(RVA = "0x3B25E4", Offset = "0x3B25E4", VA = "0x3B25E4")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60021CE")]
			[Address(RVA = "0x3B25EC", Offset = "0x3B25EC", VA = "0x3B25EC")]
			set
			{
			}
		}

		[Token(Token = "0x60021CA")]
		[Address(RVA = "0x3B25C4", Offset = "0x3B25C4", VA = "0x3B25C4")]
		public EntryPatchData()
		{
		}
	}
	[Token(Token = "0x20004A7")]
	internal class ZipHelperStream : Stream
	{
		[Token(Token = "0x40016F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private bool isOwner_;

		[Token(Token = "0x40016F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private Stream stream_;

		[Token(Token = "0x17000259")]
		public bool IsStreamOwner
		{
			[Token(Token = "0x60021D1")]
			[Address(RVA = "0x3B8248", Offset = "0x3B8248", VA = "0x3B8248")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60021D2")]
			[Address(RVA = "0x3B3424", Offset = "0x3B3424", VA = "0x3B3424")]
			set
			{
			}
		}

		[Token(Token = "0x1700025A")]
		public override bool CanRead
		{
			[Token(Token = "0x60021D3")]
			[Address(RVA = "0x3B8250", Offset = "0x3B8250", VA = "0x3B8250", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700025B")]
		public override bool CanSeek
		{
			[Token(Token = "0x60021D4")]
			[Address(RVA = "0x3B8280", Offset = "0x3B8280", VA = "0x3B8280", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700025C")]
		public override bool CanTimeout
		{
			[Token(Token = "0x60021D5")]
			[Address(RVA = "0x3B82B0", Offset = "0x3B82B0", VA = "0x3B82B0", Slot = "8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700025D")]
		public override long Length
		{
			[Token(Token = "0x60021D6")]
			[Address(RVA = "0x3B82E0", Offset = "0x3B82E0", VA = "0x3B82E0", Slot = "9")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x1700025E")]
		public override long Position
		{
			[Token(Token = "0x60021D7")]
			[Address(RVA = "0x3B8310", Offset = "0x3B8310", VA = "0x3B8310", Slot = "10")]
			get
			{
				return default(long);
			}
			[Token(Token = "0x60021D8")]
			[Address(RVA = "0x3B8340", Offset = "0x3B8340", VA = "0x3B8340", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x1700025F")]
		public override bool CanWrite
		{
			[Token(Token = "0x60021D9")]
			[Address(RVA = "0x3B838C", Offset = "0x3B838C", VA = "0x3B838C", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60021CF")]
		[Address(RVA = "0x3B817C", Offset = "0x3B817C", VA = "0x3B817C")]
		public ZipHelperStream(string name)
		{
		}

		[Token(Token = "0x60021D0")]
		[Address(RVA = "0x3B2CFC", Offset = "0x3B2CFC", VA = "0x3B2CFC")]
		public ZipHelperStream(Stream stream)
		{
		}

		[Token(Token = "0x60021DA")]
		[Address(RVA = "0x3B83BC", Offset = "0x3B83BC", VA = "0x3B83BC", Slot = "16")]
		public override void Flush()
		{
		}

		[Token(Token = "0x60021DB")]
		[Address(RVA = "0x3B83EC", Offset = "0x3B83EC", VA = "0x3B83EC", Slot = "19")]
		public override long Seek(long offset, SeekOrigin origin)
		{
			return default(long);
		}

		[Token(Token = "0x60021DC")]
		[Address(RVA = "0x3B8440", Offset = "0x3B8440", VA = "0x3B8440", Slot = "20")]
		public override void SetLength(long value)
		{
		}

		[Token(Token = "0x60021DD")]
		[Address(RVA = "0x3B848C", Offset = "0x3B848C", VA = "0x3B848C", Slot = "17")]
		public override int Read(byte[] buffer, int offset, int count)
		{
			return default(int);
		}

		[Token(Token = "0x60021DE")]
		[Address(RVA = "0x3B84E0", Offset = "0x3B84E0", VA = "0x3B84E0", Slot = "21")]
		public override void Write(byte[] buffer, int offset, int count)
		{
		}

		[Token(Token = "0x60021DF")]
		[Address(RVA = "0x3B8534", Offset = "0x3B8534", VA = "0x3B8534", Slot = "13")]
		public override void Close()
		{
		}

		[Token(Token = "0x60021E0")]
		[Address(RVA = "0x3B8570", Offset = "0x3B8570", VA = "0x3B8570")]
		private void WriteLocalHeader(ZipEntry entry, EntryPatchData patchData)
		{
		}

		[Token(Token = "0x60021E1")]
		[Address(RVA = "0x3B8A74", Offset = "0x3B8A74", VA = "0x3B8A74")]
		public long LocateBlockWithSignature(int signature, long endLocation, int minimumBlockSize, int maximumVariableData)
		{
			return default(long);
		}

		[Token(Token = "0x60021E2")]
		[Address(RVA = "0x3B8B68", Offset = "0x3B8B68", VA = "0x3B8B68")]
		public void WriteZip64EndOfCentralDirectory(long noOfEntries, long sizeEntries, long centralDirOffset)
		{
		}

		[Token(Token = "0x60021E3")]
		[Address(RVA = "0x3B8CD8", Offset = "0x3B8CD8", VA = "0x3B8CD8")]
		public void WriteEndOfCentralDirectory(long noOfEntries, long sizeEntries, long startOfCentralDirectory, byte[] comment)
		{
		}

		[Token(Token = "0x60021E4")]
		[Address(RVA = "0x3B3DF0", Offset = "0x3B3DF0", VA = "0x3B3DF0")]
		public int ReadLEShort()
		{
			return default(int);
		}

		[Token(Token = "0x60021E5")]
		[Address(RVA = "0x3B2D88", Offset = "0x3B2D88", VA = "0x3B2D88")]
		public int ReadLEInt()
		{
			return default(int);
		}

		[Token(Token = "0x60021E6")]
		[Address(RVA = "0x3B3F08", Offset = "0x3B3F08", VA = "0x3B3F08")]
		public long ReadLELong()
		{
			return default(long);
		}

		[Token(Token = "0x60021E7")]
		[Address(RVA = "0x3B42B4", Offset = "0x3B42B4", VA = "0x3B42B4")]
		public void WriteLEShort(int value)
		{
		}

		[Token(Token = "0x60021E8")]
		[Address(RVA = "0x3B9048", Offset = "0x3B9048", VA = "0x3B9048")]
		public void WriteLEUshort(ushort value)
		{
		}

		[Token(Token = "0x60021E9")]
		[Address(RVA = "0x3B342C", Offset = "0x3B342C", VA = "0x3B342C")]
		public void WriteLEInt(int value)
		{
		}

		[Token(Token = "0x60021EA")]
		[Address(RVA = "0x3B90AC", Offset = "0x3B90AC", VA = "0x3B90AC")]
		public void WriteLEUint(uint value)
		{
		}

		[Token(Token = "0x60021EB")]
		[Address(RVA = "0x3B4318", Offset = "0x3B4318", VA = "0x3B4318")]
		public void WriteLELong(long value)
		{
		}

		[Token(Token = "0x60021EC")]
		[Address(RVA = "0x3B90D4", Offset = "0x3B90D4", VA = "0x3B90D4")]
		public void WriteLEUlong(ulong value)
		{
		}

		[Token(Token = "0x60021ED")]
		[Address(RVA = "0x3B9118", Offset = "0x3B9118", VA = "0x3B9118")]
		public int WriteDataDescriptor(ZipEntry entry)
		{
			return default(int);
		}

		[Token(Token = "0x60021EE")]
		[Address(RVA = "0x3B92BC", Offset = "0x3B92BC", VA = "0x3B92BC")]
		public void ReadDataDescriptor(bool zip64, DescriptorData data)
		{
		}
	}
}
[Token(Token = "0x20004A8")]
public class UnitySerializerVersion : MonoBehaviour
{
	[Token(Token = "0x40016F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int[] version;

	[Token(Token = "0x60021EF")]
	[Address(RVA = "0x18FFF84", Offset = "0x18FFF84", VA = "0x18FFF84")]
	public UnitySerializerVersion()
	{
	}
}
[Token(Token = "0x20004A9")]
public class Types
{
	[Token(Token = "0x2000582")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA4134", Offset = "0xEA4134")]
	private sealed class <GetTypes>c__AnonStorey0
	{
		[Token(Token = "0x4001B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal Type attribute;

		[Token(Token = "0x6002545")]
		[Address(RVA = "0x18FF3EC", Offset = "0x18FF3EC", VA = "0x18FF3EC")]
		public <GetTypes>c__AnonStorey0()
		{
		}

		[Token(Token = "0x6002546")]
		[Address(RVA = "0x18FF66C", Offset = "0x18FF66C", VA = "0x18FF66C")]
		internal bool <>m__0(Type tp)
		{
			return default(bool);
		}
	}

	[Token(Token = "0x40016F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<Type, List<Type>> _types;

	[Token(Token = "0x40016F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static Dictionary<Assembly, bool> _requiredAssemblies;

	[Token(Token = "0x40016F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA4114", Offset = "0xEA4114")]
	private static Func<Assembly, IEnumerable<Type>> <>f__am$cache0;

	[Token(Token = "0x60021F1")]
	[Address(RVA = "0x18FF030", Offset = "0x18FF030", VA = "0x18FF030")]
	public Types()
	{
	}

	[Token(Token = "0x60021F2")]
	[Address(RVA = "0x18FF038", Offset = "0x18FF038", VA = "0x18FF038")]
	public static List<Type> GetTypes(Type attribute)
	{
		return null;
	}

	[Token(Token = "0x60021F3")]
	[Address(RVA = "0x18FF3F4", Offset = "0x18FF3F4", VA = "0x18FF3F4")]
	public static void RequireAssembly(Assembly asm)
	{
	}

	[Token(Token = "0x60021F4")]
	[Address(RVA = "0x18FF4B4", Offset = "0x18FF4B4", VA = "0x18FF4B4")]
	public static void Refresh()
	{
	}

	[Token(Token = "0x60021F6")]
	[Address(RVA = "0x18FF63C", Offset = "0x18FF63C", VA = "0x18FF63C")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA4124", Offset = "0xEA4124")]
	private static IEnumerable<Type> <GetTypes>m__0(Assembly asm)
	{
		return null;
	}
}
[Token(Token = "0x20004AA")]
public static class TypeHelper
{
	[Token(Token = "0x60021F7")]
	public static T Attribute<T>(this Type tp) where T : Attribute
	{
		return null;
	}

	[Token(Token = "0x60021F8")]
	public static T Attribute<T>(this object o) where T : Attribute, new()
	{
		return null;
	}
}
[Token(Token = "0x20004AB")]
public class ZipAsyncHandler : MonoBehaviour
{
	[Token(Token = "0x40016F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private Dictionary<string, Action> handles;

	[Token(Token = "0x40016F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<string, Action> errorHandlers;

	[Token(Token = "0x60021F9")]
	[Address(RVA = "0x21EA888", Offset = "0x21EA888", VA = "0x21EA888")]
	public ZipAsyncHandler()
	{
	}

	[Token(Token = "0x60021FA")]
	[Address(RVA = "0x21EA92C", Offset = "0x21EA92C", VA = "0x21EA92C")]
	public void SetHandlers(string zipFile, Action handler, Action errorHandler)
	{
	}

	[Token(Token = "0x60021FB")]
	[Address(RVA = "0x21EA9E4", Offset = "0x21EA9E4", VA = "0x21EA9E4")]
	public void UnzipEnded(string message)
	{
	}

	[Token(Token = "0x60021FC")]
	[Address(RVA = "0x21EAAB0", Offset = "0x21EAAB0", VA = "0x21EAAB0")]
	public void UnzipError(string message)
	{
	}
}
[Token(Token = "0x20004AC")]
public static class ZipUtil
{
	[Token(Token = "0x40016F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ZipAsyncHandler handler;

	[Token(Token = "0x60021FD")]
	[Address(RVA = "0x21EAB7C", Offset = "0x21EAB7C", VA = "0x21EAB7C")]
	public static void Unzip(string zipFilePath, string location)
	{
	}

	[Token(Token = "0x60021FE")]
	[Address(RVA = "0x21EB0D0", Offset = "0x21EB0D0", VA = "0x21EB0D0")]
	public static void UnzipAsync(string zipFilePath, string location, Action callback, Action errorCallback)
	{
	}

	[Token(Token = "0x60021FF")]
	[Address(RVA = "0x21EB460", Offset = "0x21EB460", VA = "0x21EB460")]
	public static void Zip(string zipFileName, params string[] files)
	{
	}
}
[Token(Token = "0x20004AD")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA4184", Offset = "0xEA4184")]
public class MouseLook : MonoBehaviour
{
	[Token(Token = "0x20004AE")]
	public enum RotationAxes
	{
		[Token(Token = "0x4001703")]
		MouseXAndY,
		[Token(Token = "0x4001704")]
		MouseX,
		[Token(Token = "0x4001705")]
		MouseY
	}

	[Token(Token = "0x40016FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public RotationAxes axes;

	[Token(Token = "0x40016FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float sensitivityX;

	[Token(Token = "0x40016FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float sensitivityY;

	[Token(Token = "0x40016FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float minimumX;

	[Token(Token = "0x40016FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maximumX;

	[Token(Token = "0x40016FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float minimumY;

	[Token(Token = "0x4001700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float maximumY;

	[Token(Token = "0x4001701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float rotationY;

	[Token(Token = "0x6002200")]
	[Address(RVA = "0x1977744", Offset = "0x1977744", VA = "0x1977744")]
	public MouseLook()
	{
	}

	[Token(Token = "0x6002201")]
	[Address(RVA = "0x1977788", Offset = "0x1977788", VA = "0x1977788")]
	private void Update()
	{
	}

	[Token(Token = "0x6002202")]
	[Address(RVA = "0x1977B34", Offset = "0x1977B34", VA = "0x1977B34")]
	private void Start()
	{
	}
}
namespace UnityStandardAssets.ImageEffects
{
	[Token(Token = "0x20004AF")]
	public enum AAMode
	{
		[Token(Token = "0x4001707")]
		FXAA2,
		[Token(Token = "0x4001708")]
		FXAA3Console,
		[Token(Token = "0x4001709")]
		FXAA1PresetA,
		[Token(Token = "0x400170A")]
		FXAA1PresetB,
		[Token(Token = "0x400170B")]
		NFAA,
		[Token(Token = "0x400170C")]
		SSAA,
		[Token(Token = "0x400170D")]
		DLAA
	}
	[Token(Token = "0x20004B0")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA41B8", Offset = "0xEA41B8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA41B8", Offset = "0xEA41B8")]
	public class Antialiasing : PostEffectsBase
	{
		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AAMode mode;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool showGeneratedNormals;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float offsetScale;

		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float blurRadius;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float edgeThresholdMin;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float edgeThreshold;

		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgeSharpness;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool dlaaSharp;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Shader ssaaShader;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material ssaa;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Shader dlaaShader;

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material dlaa;

		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Shader nfaaShader;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material nfaa;

		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Shader shaderFXAAPreset2;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material materialFXAAPreset2;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Shader shaderFXAAPreset3;

		[Token(Token = "0x400171F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material materialFXAAPreset3;

		[Token(Token = "0x4001720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Shader shaderFXAAII;

		[Token(Token = "0x4001721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material materialFXAAII;

		[Token(Token = "0x4001722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Shader shaderFXAAIII;

		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material materialFXAAIII;

		[Token(Token = "0x6002203")]
		[Address(RVA = "0x1900034", Offset = "0x1900034", VA = "0x1900034")]
		public Antialiasing()
		{
		}

		[Token(Token = "0x6002204")]
		[Address(RVA = "0x1900078", Offset = "0x1900078", VA = "0x1900078")]
		public Material CurrentAAMaterial()
		{
			return null;
		}

		[Token(Token = "0x6002205")]
		[Address(RVA = "0x19000F8", Offset = "0x19000F8", VA = "0x19000F8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002206")]
		[Address(RVA = "0x19001FC", Offset = "0x19001FC", VA = "0x19001FC")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004B1")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA4268", Offset = "0xEA4268")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA4268", Offset = "0xEA4268")]
	public class Bloom : PostEffectsBase
	{
		[Token(Token = "0x20004B2")]
		public enum LensFlareStyle
		{
			[Token(Token = "0x4001743")]
			Ghosting,
			[Token(Token = "0x4001744")]
			Anamorphic,
			[Token(Token = "0x4001745")]
			Combined
		}

		[Token(Token = "0x20004B3")]
		public enum TweakMode
		{
			[Token(Token = "0x4001747")]
			Basic,
			[Token(Token = "0x4001748")]
			Complex
		}

		[Token(Token = "0x20004B4")]
		public enum HDRBloomMode
		{
			[Token(Token = "0x400174A")]
			Auto,
			[Token(Token = "0x400174B")]
			On,
			[Token(Token = "0x400174C")]
			Off
		}

		[Token(Token = "0x20004B5")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x400174E")]
			Screen,
			[Token(Token = "0x400174F")]
			Add
		}

		[Token(Token = "0x20004B6")]
		public enum BloomQuality
		{
			[Token(Token = "0x4001751")]
			Cheap,
			[Token(Token = "0x4001752")]
			High
		}

		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TweakMode tweakMode;

		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool doHdr;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sepBlurSpread;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BloomQuality quality;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float bloomIntensity;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float bloomThreshold;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color bloomThresholdColor;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int bloomBlurIterations;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float flareRotation;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LensFlareStyle lensflareMode;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float hollyStretchWidth;

		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float lensflareIntensity;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float lensflareThreshold;

		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float lensFlareSaturation;

		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Color flareColorA;

		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Color flareColorB;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Color flareColorC;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Color flareColorD;

		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Shader lensFlareShader;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Material lensFlareMaterial;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Shader screenBlendShader;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Material screenBlend;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x6002207")]
		[Address(RVA = "0x1900954", Offset = "0x1900954", VA = "0x1900954")]
		public Bloom()
		{
		}

		[Token(Token = "0x6002208")]
		[Address(RVA = "0x1900AE8", Offset = "0x1900AE8", VA = "0x1900AE8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002209")]
		[Address(RVA = "0x1900B88", Offset = "0x1900B88", VA = "0x1900B88")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600220A")]
		[Address(RVA = "0x1902888", Offset = "0x1902888", VA = "0x1902888")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x600220B")]
		[Address(RVA = "0x1902540", Offset = "0x1902540", VA = "0x1902540")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x600220C")]
		[Address(RVA = "0x1902168", Offset = "0x1902168", VA = "0x1902168")]
		private void BrightFilter(float thresh, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x600220D")]
		[Address(RVA = "0x1902054", Offset = "0x1902054", VA = "0x1902054")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x600220E")]
		[Address(RVA = "0x1902294", Offset = "0x1902294", VA = "0x1902294")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}
	}
	[Token(Token = "0x20004B7")]
	public enum LensflareStyle34
	{
		[Token(Token = "0x4001754")]
		Ghosting,
		[Token(Token = "0x4001755")]
		Anamorphic,
		[Token(Token = "0x4001756")]
		Combined
	}
	[Token(Token = "0x20004B8")]
	public enum TweakMode34
	{
		[Token(Token = "0x4001758")]
		Basic,
		[Token(Token = "0x4001759")]
		Complex
	}
	[Token(Token = "0x20004B9")]
	public enum HDRBloomMode
	{
		[Token(Token = "0x400175B")]
		Auto,
		[Token(Token = "0x400175C")]
		On,
		[Token(Token = "0x400175D")]
		Off
	}
	[Token(Token = "0x20004BA")]
	public enum BloomScreenBlendMode
	{
		[Token(Token = "0x400175F")]
		Screen,
		[Token(Token = "0x4001760")]
		Add
	}
	[Token(Token = "0x20004BB")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA4318", Offset = "0xEA4318")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA4318", Offset = "0xEA4318")]
	public class BloomAndFlares : PostEffectsBase
	{
		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TweakMode34 tweakMode;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool doHdr;

		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sepBlurSpread;

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float useSrcAlphaAsMask;

		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float bloomIntensity;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float bloomThreshold;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int bloomBlurIterations;

		[Token(Token = "0x400176A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool lensflares;

		[Token(Token = "0x400176B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x400176C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LensflareStyle34 lensflareMode;

		[Token(Token = "0x400176D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float hollyStretchWidth;

		[Token(Token = "0x400176E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float lensflareIntensity;

		[Token(Token = "0x400176F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float lensflareThreshold;

		[Token(Token = "0x4001770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color flareColorA;

		[Token(Token = "0x4001771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Color flareColorB;

		[Token(Token = "0x4001772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Color flareColorC;

		[Token(Token = "0x4001773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Color flareColorD;

		[Token(Token = "0x4001774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4001775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Shader lensFlareShader;

		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material lensFlareMaterial;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Shader vignetteShader;

		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Material vignetteMaterial;

		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public Shader separableBlurShader;

		[Token(Token = "0x400177A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material separableBlurMaterial;

		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Shader addBrightStuffOneOneShader;

		[Token(Token = "0x400177C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Material addBrightStuffBlendOneOneMaterial;

		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public Shader screenBlendShader;

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Material screenBlend;

		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Shader hollywoodFlaresShader;

		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material hollywoodFlaresMaterial;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x600220F")]
		[Address(RVA = "0x17E0190", Offset = "0x17E0190", VA = "0x17E0190")]
		public BloomAndFlares()
		{
		}

		[Token(Token = "0x6002210")]
		[Address(RVA = "0x17E03A0", Offset = "0x17E03A0", VA = "0x17E03A0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002211")]
		[Address(RVA = "0x17E0C50", Offset = "0x17E0C50", VA = "0x17E0C50")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002212")]
		[Address(RVA = "0x17E2350", Offset = "0x17E2350", VA = "0x17E2350")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002213")]
		[Address(RVA = "0x17E2020", Offset = "0x17E2020", VA = "0x17E2020")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002214")]
		[Address(RVA = "0x17E1CA4", Offset = "0x17E1CA4", VA = "0x17E1CA4")]
		private void BrightFilter(float thresh, float useAlphaAsMask, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002215")]
		[Address(RVA = "0x17E1E70", Offset = "0x17E1E70", VA = "0x17E1E70")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}
	}
	[Token(Token = "0x20004BC")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA43C8", Offset = "0xEA43C8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA43C8", Offset = "0xEA43C8")]
	public class BloomOptimized : PostEffectsBase
	{
		[Token(Token = "0x20004BD")]
		public enum Resolution
		{
			[Token(Token = "0x400178C")]
			Low,
			[Token(Token = "0x400178D")]
			High
		}

		[Token(Token = "0x20004BE")]
		public enum BlurType
		{
			[Token(Token = "0x400178F")]
			Standard,
			[Token(Token = "0x4001790")]
			Sgx
		}

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA4478", Offset = "0xEA4478")]
		public float threshold;

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA4490", Offset = "0xEA4490")]
		public float intensity;

		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA44AC", Offset = "0xEA44AC")]
		public float blurSize;

		[Token(Token = "0x4001786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Resolution resolution;

		[Token(Token = "0x4001787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA44C8", Offset = "0xEA44C8")]
		public int blurIterations;

		[Token(Token = "0x4001788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BlurType blurType;

		[Token(Token = "0x4001789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Shader fastBloomShader;

		[Token(Token = "0x400178A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material fastBloomMaterial;

		[Token(Token = "0x6002216")]
		[Address(RVA = "0x17E242C", Offset = "0x17E242C", VA = "0x17E242C")]
		public BloomOptimized()
		{
		}

		[Token(Token = "0x6002217")]
		[Address(RVA = "0x17E2450", Offset = "0x17E2450", VA = "0x17E2450", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002218")]
		[Address(RVA = "0x17E249C", Offset = "0x17E249C", VA = "0x17E249C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002219")]
		[Address(RVA = "0x17E2570", Offset = "0x17E2570", VA = "0x17E2570")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004BF")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA44E4", Offset = "0xEA44E4")]
	public class Blur : MonoBehaviour
	{
		[Token(Token = "0x4001791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA452C", Offset = "0xEA452C")]
		public int iterations;

		[Token(Token = "0x4001792")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA4548", Offset = "0xEA4548")]
		public float blurSpread;

		[Token(Token = "0x4001793")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Shader blurShader;

		[Token(Token = "0x4001794")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material m_Material;

		[Token(Token = "0x17000260")]
		protected Material material
		{
			[Token(Token = "0x600221B")]
			[Address(RVA = "0x17E2AE4", Offset = "0x17E2AE4", VA = "0x17E2AE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600221A")]
		[Address(RVA = "0x17E2AC8", Offset = "0x17E2AC8", VA = "0x17E2AC8")]
		public Blur()
		{
		}

		[Token(Token = "0x600221C")]
		[Address(RVA = "0x17E2CA0", Offset = "0x17E2CA0", VA = "0x17E2CA0")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x600221D")]
		[Address(RVA = "0x17E2DF0", Offset = "0x17E2DF0", VA = "0x17E2DF0")]
		protected void Start()
		{
		}

		[Token(Token = "0x600221E")]
		[Address(RVA = "0x17E2EF0", Offset = "0x17E2EF0", VA = "0x17E2EF0")]
		public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
		{
		}

		[Token(Token = "0x600221F")]
		[Address(RVA = "0x17E312C", Offset = "0x17E312C", VA = "0x17E312C")]
		private void DownSample4x(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6002220")]
		[Address(RVA = "0x17E3338", Offset = "0x17E3338", VA = "0x17E3338")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004C0")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA4560", Offset = "0xEA4560")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA4560", Offset = "0xEA4560")]
	public class BlurOptimized : PostEffectsBase
	{
		[Token(Token = "0x20004C1")]
		public enum BlurType
		{
			[Token(Token = "0x400179C")]
			StandardGauss,
			[Token(Token = "0x400179D")]
			SgxGauss
		}

		[Token(Token = "0x4001795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA4610", Offset = "0xEA4610")]
		public int downsample;

		[Token(Token = "0x4001796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA4628", Offset = "0xEA4628")]
		public float blurSize;

		[Token(Token = "0x4001797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA4644", Offset = "0xEA4644")]
		public int blurIterations;

		[Token(Token = "0x4001798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BlurType blurType;

		[Token(Token = "0x4001799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Shader blurShader;

		[Token(Token = "0x400179A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material blurMaterial;

		[Token(Token = "0x6002222")]
		[Address(RVA = "0x17E34DC", Offset = "0x17E34DC", VA = "0x17E34DC")]
		public BlurOptimized()
		{
		}

		[Token(Token = "0x6002223")]
		[Address(RVA = "0x17E34F8", Offset = "0x17E34F8", VA = "0x17E34F8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002224")]
		[Address(RVA = "0x17E3544", Offset = "0x17E3544", VA = "0x17E3544")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6002225")]
		[Address(RVA = "0x17E3618", Offset = "0x17E3618", VA = "0x17E3618")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004C2")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA4660", Offset = "0xEA4660")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA4660", Offset = "0xEA4660")]
	public class CameraMotionBlur : PostEffectsBase
	{
		[Token(Token = "0x20004C3")]
		public enum MotionBlurFilter
		{
			[Token(Token = "0x40017BF")]
			CameraMotion,
			[Token(Token = "0x40017C0")]
			LocalBlur,
			[Token(Token = "0x40017C1")]
			Reconstruction,
			[Token(Token = "0x40017C2")]
			ReconstructionDX11,
			[Token(Token = "0x40017C3")]
			ReconstructionDisc
		}

		[Token(Token = "0x400179E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float MAX_RADIUS;

		[Token(Token = "0x400179F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public MotionBlurFilter filterType;

		[Token(Token = "0x40017A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool preview;

		[Token(Token = "0x40017A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 previewScale;

		[Token(Token = "0x40017A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float movementScale;

		[Token(Token = "0x40017A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float rotationScale;

		[Token(Token = "0x40017A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxVelocity;

		[Token(Token = "0x40017A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minVelocity;

		[Token(Token = "0x40017A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float velocityScale;

		[Token(Token = "0x40017A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float softZDistance;

		[Token(Token = "0x40017A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int velocityDownsample;

		[Token(Token = "0x40017A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public LayerMask excludeLayers;

		[Token(Token = "0x40017AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject tmpCam;

		[Token(Token = "0x40017AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Shader shader;

		[Token(Token = "0x40017AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader dx11MotionBlurShader;

		[Token(Token = "0x40017AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Shader replacementClear;

		[Token(Token = "0x40017AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material motionBlurMaterial;

		[Token(Token = "0x40017AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Material dx11MotionBlurMaterial;

		[Token(Token = "0x40017B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture2D noiseTexture;

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float jitter;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool showVelocity;

		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float showVelocityScale;

		[Token(Token = "0x40017B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Matrix4x4 currentViewProjMat;

		[Token(Token = "0x40017B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Matrix4x4[] currentStereoViewProjMat;

		[Token(Token = "0x40017B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Matrix4x4 prevViewProjMat;

		[Token(Token = "0x40017B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Matrix4x4[] prevStereoViewProjMat;

		[Token(Token = "0x40017B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private int prevFrameCount;

		[Token(Token = "0x40017B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private bool wasActive;

		[Token(Token = "0x40017BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Vector3 prevFrameForward;

		[Token(Token = "0x40017BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private Vector3 prevFrameUp;

		[Token(Token = "0x40017BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 prevFramePos;

		[Token(Token = "0x40017BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Camera _camera;

		[Token(Token = "0x6002226")]
		[Address(RVA = "0x17E3B20", Offset = "0x17E3B20", VA = "0x17E3B20")]
		public CameraMotionBlur()
		{
		}

		[Token(Token = "0x6002227")]
		[Address(RVA = "0x17E3C7C", Offset = "0x17E3C7C", VA = "0x17E3C7C")]
		private void CalculateViewProjection()
		{
		}

		[Token(Token = "0x6002228")]
		[Address(RVA = "0x17E4414", Offset = "0x17E4414", VA = "0x17E4414")]
		private new void Start()
		{
		}

		[Token(Token = "0x6002229")]
		[Address(RVA = "0x17E4794", Offset = "0x17E4794", VA = "0x17E4794")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600222A")]
		[Address(RVA = "0x17E4898", Offset = "0x17E4898", VA = "0x17E4898")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600222B")]
		[Address(RVA = "0x17E4AA0", Offset = "0x17E4AA0", VA = "0x17E4AA0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600222C")]
		[Address(RVA = "0x17E4B70", Offset = "0x17E4B70", VA = "0x17E4B70")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600222D")]
		[Address(RVA = "0x17E4564", Offset = "0x17E4564", VA = "0x17E4564")]
		private void Remember()
		{
		}

		[Token(Token = "0x600222E")]
		[Address(RVA = "0x17E7C00", Offset = "0x17E7C00", VA = "0x17E7C00")]
		private Camera GetTmpCam()
		{
			return null;
		}

		[Token(Token = "0x600222F")]
		[Address(RVA = "0x17E7AFC", Offset = "0x17E7AFC", VA = "0x17E7AFC")]
		private void StartFrame()
		{
		}

		[Token(Token = "0x6002230")]
		[Address(RVA = "0x17E7BF0", Offset = "0x17E7BF0", VA = "0x17E7BF0")]
		private static int divRoundUp(int x, int d)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20004C4")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA4710", Offset = "0xEA4710")]
	public class ColorCorrectionCurves : PostEffectsBase
	{
		[Token(Token = "0x20004C5")]
		public enum ColorCorrectionMode
		{
			[Token(Token = "0x40017DD")]
			Simple,
			[Token(Token = "0x40017DE")]
			Advanced
		}

		[Token(Token = "0x40017C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AnimationCurve redChannel;

		[Token(Token = "0x40017C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve greenChannel;

		[Token(Token = "0x40017C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AnimationCurve blueChannel;

		[Token(Token = "0x40017C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool useDepthCorrection;

		[Token(Token = "0x40017C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public AnimationCurve zCurve;

		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve depthRedChannel;

		[Token(Token = "0x40017CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public AnimationCurve depthGreenChannel;

		[Token(Token = "0x40017CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve depthBlueChannel;

		[Token(Token = "0x40017CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Material ccMaterial;

		[Token(Token = "0x40017CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material ccDepthMaterial;

		[Token(Token = "0x40017CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Material selectiveCcMaterial;

		[Token(Token = "0x40017CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Texture2D rgbChannelTex;

		[Token(Token = "0x40017D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Texture2D rgbDepthChannelTex;

		[Token(Token = "0x40017D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Texture2D zCurveTex;

		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float saturation;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool selectiveCc;

		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Color selectiveFromColor;

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Color selectiveToColor;

		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public ColorCorrectionMode mode;

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool updateTextures;

		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Shader colorCorrectionCurvesShader;

		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader simpleColorCorrectionCurvesShader;

		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Shader colorCorrectionSelectiveShader;

		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool updateTexturesOnStartup;

		[Token(Token = "0x6002232")]
		[Address(RVA = "0x17E81D8", Offset = "0x17E81D8", VA = "0x17E81D8")]
		public ColorCorrectionCurves()
		{
		}

		[Token(Token = "0x6002233")]
		[Address(RVA = "0x17E8964", Offset = "0x17E8964", VA = "0x17E8964")]
		private new void Start()
		{
		}

		[Token(Token = "0x6002234")]
		[Address(RVA = "0x17E89A0", Offset = "0x17E89A0", VA = "0x17E89A0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6002235")]
		[Address(RVA = "0x17E89A4", Offset = "0x17E89A4", VA = "0x17E89A4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002236")]
		[Address(RVA = "0x17E8CC0", Offset = "0x17E8CC0", VA = "0x17E8CC0")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x6002237")]
		[Address(RVA = "0x17E9240", Offset = "0x17E9240", VA = "0x17E9240")]
		private void UpdateTextures()
		{
		}

		[Token(Token = "0x6002238")]
		[Address(RVA = "0x17E9244", Offset = "0x17E9244", VA = "0x17E9244")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004C6")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA4758", Offset = "0xEA4758")]
	public class ColorCorrectionLookup : PostEffectsBase
	{
		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Shader shader;

		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material material;

		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Texture3D converted3DLut;

		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string basedOnTempTex;

		[Token(Token = "0x6002239")]
		[Address(RVA = "0x17E96C8", Offset = "0x17E96C8", VA = "0x17E96C8")]
		public ColorCorrectionLookup()
		{
		}

		[Token(Token = "0x600223A")]
		[Address(RVA = "0x17E9764", Offset = "0x17E9764", VA = "0x17E9764", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600223B")]
		[Address(RVA = "0x17E97BC", Offset = "0x17E97BC", VA = "0x17E97BC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600223C")]
		[Address(RVA = "0x17E9898", Offset = "0x17E9898", VA = "0x17E9898")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600223D")]
		[Address(RVA = "0x17E9974", Offset = "0x17E9974", VA = "0x17E9974")]
		public void SetIdentityLut()
		{
		}

		[Token(Token = "0x600223E")]
		[Address(RVA = "0x17E9C4C", Offset = "0x17E9C4C", VA = "0x17E9C4C")]
		public bool ValidDimensions(Texture2D tex2d)
		{
			return default(bool);
		}

		[Token(Token = "0x600223F")]
		[Address(RVA = "0x17E9D98", Offset = "0x17E9D98", VA = "0x17E9D98")]
		public void Convert(Texture2D temp2DTex, string path)
		{
		}

		[Token(Token = "0x6002240")]
		[Address(RVA = "0x17EA2C0", Offset = "0x17EA2C0", VA = "0x17EA2C0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004C7")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA47A0", Offset = "0xEA47A0")]
	public class ColorCorrectionRamp : ImageEffectBase
	{
		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Texture textureRamp;

		[Token(Token = "0x6002241")]
		[Address(RVA = "0x17EA558", Offset = "0x17EA558", VA = "0x17EA558")]
		public ColorCorrectionRamp()
		{
		}

		[Token(Token = "0x6002242")]
		[Address(RVA = "0x17EA568", Offset = "0x17EA568", VA = "0x17EA568")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004C8")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA47E8", Offset = "0xEA47E8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA47E8", Offset = "0xEA47E8")]
	public class ContrastEnhance : PostEffectsBase
	{
		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA4898", Offset = "0xEA4898")]
		public float intensity;

		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA48B0", Offset = "0xEA48B0")]
		public float threshold;

		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Material separableBlurMaterial;

		[Token(Token = "0x40017E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material contrastCompositeMaterial;

		[Token(Token = "0x40017E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA48CC", Offset = "0xEA48CC")]
		public float blurSpread;

		[Token(Token = "0x40017E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader separableBlurShader;

		[Token(Token = "0x40017EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Shader contrastCompositeShader;

		[Token(Token = "0x6002243")]
		[Address(RVA = "0x17EA738", Offset = "0x17EA738", VA = "0x17EA738")]
		public ContrastEnhance()
		{
		}

		[Token(Token = "0x6002244")]
		[Address(RVA = "0x17EA74C", Offset = "0x17EA74C", VA = "0x17EA74C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002245")]
		[Address(RVA = "0x17EA7AC", Offset = "0x17EA7AC", VA = "0x17EA7AC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004C9")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA48E4", Offset = "0xEA48E4")]
	public class ContrastStretch : MonoBehaviour
	{
		[Token(Token = "0x40017EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA492C", Offset = "0xEA492C")]
		public float adaptationSpeed;

		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA4948", Offset = "0xEA4948")]
		public float limitMinimum;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA4960", Offset = "0xEA4960")]
		public float limitMaximum;

		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private RenderTexture[] adaptRenderTex;

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int curAdaptIndex;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader shaderLum;

		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Material m_materialLum;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader shaderReduce;

		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Material m_materialReduce;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader shaderAdapt;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Material m_materialAdapt;

		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader shaderApply;

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Material m_materialApply;

		[Token(Token = "0x17000261")]
		protected Material materialLum
		{
			[Token(Token = "0x6002247")]
			[Address(RVA = "0x17EACB4", Offset = "0x17EACB4", VA = "0x17EACB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000262")]
		protected Material materialReduce
		{
			[Token(Token = "0x6002248")]
			[Address(RVA = "0x17EAD98", Offset = "0x17EAD98", VA = "0x17EAD98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000263")]
		protected Material materialAdapt
		{
			[Token(Token = "0x6002249")]
			[Address(RVA = "0x17EAE7C", Offset = "0x17EAE7C", VA = "0x17EAE7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000264")]
		protected Material materialApply
		{
			[Token(Token = "0x600224A")]
			[Address(RVA = "0x17EAF60", Offset = "0x17EAF60", VA = "0x17EAF60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002246")]
		[Address(RVA = "0x17EAC10", Offset = "0x17EAC10", VA = "0x17EAC10")]
		public ContrastStretch()
		{
		}

		[Token(Token = "0x600224B")]
		[Address(RVA = "0x17EB044", Offset = "0x17EB044", VA = "0x17EB044")]
		private void Start()
		{
		}

		[Token(Token = "0x600224C")]
		[Address(RVA = "0x17EB108", Offset = "0x17EB108", VA = "0x17EB108")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600224D")]
		[Address(RVA = "0x17EB2B4", Offset = "0x17EB2B4", VA = "0x17EB2B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600224E")]
		[Address(RVA = "0x17EB5CC", Offset = "0x17EB5CC", VA = "0x17EB5CC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600224F")]
		[Address(RVA = "0x17EB8C0", Offset = "0x17EB8C0", VA = "0x17EB8C0")]
		private void CalculateAdaptation(Texture curTexture)
		{
		}
	}
	[Token(Token = "0x20004CA")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA4978", Offset = "0xEA4978")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA4978", Offset = "0xEA4978")]
	public class CreaseShading : PostEffectsBase
	{
		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float intensity;

		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int softness;

		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float spread;

		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader blurShader;

		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Material blurMaterial;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader depthFetchShader;

		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Material depthFetchMaterial;

		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader creaseApplyShader;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Material creaseApplyMaterial;

		[Token(Token = "0x6002250")]
		[Address(RVA = "0x17EBBAC", Offset = "0x17EBBAC", VA = "0x17EBBAC")]
		public CreaseShading()
		{
		}

		[Token(Token = "0x6002251")]
		[Address(RVA = "0x17EBBC4", Offset = "0x17EBBC4", VA = "0x17EBBC4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002252")]
		[Address(RVA = "0x17EBC38", Offset = "0x17EBC38", VA = "0x17EBC38")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004CB")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA4A28", Offset = "0xEA4A28")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA4A28", Offset = "0xEA4A28")]
	public class DepthOfField : PostEffectsBase
	{
		[Token(Token = "0x20004CC")]
		public enum BlurType
		{
			[Token(Token = "0x400181B")]
			DiscBlur,
			[Token(Token = "0x400181C")]
			DX11
		}

		[Token(Token = "0x20004CD")]
		public enum BlurSampleCount
		{
			[Token(Token = "0x400181E")]
			Low,
			[Token(Token = "0x400181F")]
			Medium,
			[Token(Token = "0x4001820")]
			High
		}

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool visualizeFocus;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float focalLength;

		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float focalSize;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float aperture;

		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Transform focalTransform;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float maxBlurSize;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool highResolution;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BlurType blurType;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public BlurSampleCount blurSampleCount;

		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool nearBlur;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float foregroundOverlap;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader dofHdrShader;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Material dofHdrMaterial;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader dx11BokehShader;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Material dx11bokehMaterial;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float dx11BokehThreshold;

		[Token(Token = "0x4001811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float dx11SpawnHeuristic;

		[Token(Token = "0x4001812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Texture2D dx11BokehTexture;

		[Token(Token = "0x4001813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float dx11BokehScale;

		[Token(Token = "0x4001814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float dx11BokehIntensity;

		[Token(Token = "0x4001815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float focalDistance01;

		[Token(Token = "0x4001816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ComputeBuffer cbDrawArgs;

		[Token(Token = "0x4001817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private ComputeBuffer cbPoints;

		[Token(Token = "0x4001818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float internalBlurWidth;

		[Token(Token = "0x4001819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Camera cachedCamera;

		[Token(Token = "0x6002253")]
		[Address(RVA = "0x17EC120", Offset = "0x17EC120", VA = "0x17EC120")]
		public DepthOfField()
		{
		}

		[Token(Token = "0x6002254")]
		[Address(RVA = "0x17EC18C", Offset = "0x17EC18C", VA = "0x17EC18C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002255")]
		[Address(RVA = "0x17EC3BC", Offset = "0x17EC3BC", VA = "0x17EC3BC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002256")]
		[Address(RVA = "0x17EC46C", Offset = "0x17EC46C", VA = "0x17EC46C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002257")]
		[Address(RVA = "0x17EC5E0", Offset = "0x17EC5E0", VA = "0x17EC5E0")]
		private void ReleaseComputeResources()
		{
		}

		[Token(Token = "0x6002258")]
		[Address(RVA = "0x17EC20C", Offset = "0x17EC20C", VA = "0x17EC20C")]
		private void CreateComputeResources()
		{
		}

		[Token(Token = "0x6002259")]
		[Address(RVA = "0x17EC624", Offset = "0x17EC624", VA = "0x17EC624")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x600225A")]
		[Address(RVA = "0x17EC81C", Offset = "0x17EC81C", VA = "0x17EC81C")]
		private void WriteCoc(RenderTexture fromTo, bool fgDilate)
		{
		}

		[Token(Token = "0x600225B")]
		[Address(RVA = "0x17ECC34", Offset = "0x17ECC34", VA = "0x17ECC34")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004CE")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA4AD8", Offset = "0xEA4AD8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA4AD8", Offset = "0xEA4AD8")]
	public class DepthOfFieldDeprecated : PostEffectsBase
	{
		[Token(Token = "0x20004CF")]
		public enum Dof34QualitySetting
		{
			[Token(Token = "0x400184D")]
			OnlyBackground = 1,
			[Token(Token = "0x400184E")]
			BackgroundAndForeground
		}

		[Token(Token = "0x20004D0")]
		public enum DofResolution
		{
			[Token(Token = "0x4001850")]
			High = 2,
			[Token(Token = "0x4001851")]
			Medium,
			[Token(Token = "0x4001852")]
			Low
		}

		[Token(Token = "0x20004D1")]
		public enum DofBlurriness
		{
			[Token(Token = "0x4001854")]
			Low = 1,
			[Token(Token = "0x4001855")]
			High = 2,
			[Token(Token = "0x4001856")]
			VeryHigh = 4
		}

		[Token(Token = "0x20004D2")]
		public enum BokehDestination
		{
			[Token(Token = "0x4001858")]
			Background = 1,
			[Token(Token = "0x4001859")]
			Foreground,
			[Token(Token = "0x400185A")]
			BackgroundAndForeground
		}

		[Token(Token = "0x4001821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int SMOOTH_DOWNSAMPLE_PASS;

		[Token(Token = "0x4001822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float BOKEH_EXTRA_BLUR;

		[Token(Token = "0x4001823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Dof34QualitySetting quality;

		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DofResolution resolution;

		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool simpleTweakMode;

		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float focalPoint;

		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float smoothness;

		[Token(Token = "0x4001828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float focalZDistance;

		[Token(Token = "0x4001829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float focalZStartCurve;

		[Token(Token = "0x400182A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float focalZEndCurve;

		[Token(Token = "0x400182B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float focalStartCurve;

		[Token(Token = "0x400182C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float focalEndCurve;

		[Token(Token = "0x400182D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float focalDistance01;

		[Token(Token = "0x400182E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform objectFocus;

		[Token(Token = "0x400182F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float focalSize;

		[Token(Token = "0x4001830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public DofBlurriness bluriness;

		[Token(Token = "0x4001831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float maxBlurSpread;

		[Token(Token = "0x4001832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float foregroundBlurExtrude;

		[Token(Token = "0x4001833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Shader dofBlurShader;

		[Token(Token = "0x4001834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material dofBlurMaterial;

		[Token(Token = "0x4001835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Shader dofShader;

		[Token(Token = "0x4001836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dofMaterial;

		[Token(Token = "0x4001837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool visualize;

		[Token(Token = "0x4001838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BokehDestination bokehDestination;

		[Token(Token = "0x4001839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float widthOverHeight;

		[Token(Token = "0x400183A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float oneOverBaseSize;

		[Token(Token = "0x400183B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool bokeh;

		[Token(Token = "0x400183C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
		public bool bokehSupport;

		[Token(Token = "0x400183D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader bokehShader;

		[Token(Token = "0x400183E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Texture2D bokehTexture;

		[Token(Token = "0x400183F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float bokehScale;

		[Token(Token = "0x4001840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float bokehIntensity;

		[Token(Token = "0x4001841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float bokehThresholdContrast;

		[Token(Token = "0x4001842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float bokehThresholdLuminance;

		[Token(Token = "0x4001843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public int bokehDownsample;

		[Token(Token = "0x4001844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Material bokehMaterial;

		[Token(Token = "0x4001845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Camera _camera;

		[Token(Token = "0x4001846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private RenderTexture foregroundTexture;

		[Token(Token = "0x4001847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RenderTexture mediumRezWorkTexture;

		[Token(Token = "0x4001848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private RenderTexture finalDefocus;

		[Token(Token = "0x4001849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private RenderTexture lowRezWorkTexture;

		[Token(Token = "0x400184A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private RenderTexture bokehSource;

		[Token(Token = "0x400184B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private RenderTexture bokehSource2;

		[Token(Token = "0x600225C")]
		[Address(RVA = "0x17EED98", Offset = "0x17EED98", VA = "0x17EED98")]
		public DepthOfFieldDeprecated()
		{
		}

		[Token(Token = "0x600225D")]
		[Address(RVA = "0x17EEE4C", Offset = "0x17EEE4C", VA = "0x17EEE4C")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x600225E")]
		[Address(RVA = "0x17EEF50", Offset = "0x17EEF50", VA = "0x17EEF50", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600225F")]
		[Address(RVA = "0x17EF080", Offset = "0x17EF080", VA = "0x17EF080")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002260")]
		[Address(RVA = "0x17EF40C", Offset = "0x17EF40C", VA = "0x17EF40C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002261")]
		[Address(RVA = "0x17EF4BC", Offset = "0x17EF4BC", VA = "0x17EF4BC")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x6002262")]
		[Address(RVA = "0x17EF6B4", Offset = "0x17EF6B4", VA = "0x17EF6B4")]
		private int GetDividerBasedOnQuality()
		{
			return default(int);
		}

		[Token(Token = "0x6002263")]
		[Address(RVA = "0x17EF6D4", Offset = "0x17EF6D4", VA = "0x17EF6D4")]
		private int GetLowResolutionDividerBasedOnQuality(int baseDivider)
		{
			return default(int);
		}

		[Token(Token = "0x6002264")]
		[Address(RVA = "0x17EF6FC", Offset = "0x17EF6FC", VA = "0x17EF6FC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6002265")]
		[Address(RVA = "0x17F0B3C", Offset = "0x17F0B3C", VA = "0x17F0B3C")]
		private void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x6002266")]
		[Address(RVA = "0x17F1560", Offset = "0x17F1560", VA = "0x17F1560")]
		private void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x6002267")]
		[Address(RVA = "0x17F1BBC", Offset = "0x17F1BBC", VA = "0x17F1BBC")]
		private void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp)
		{
		}

		[Token(Token = "0x6002268")]
		[Address(RVA = "0x17F0980", Offset = "0x17F0980", VA = "0x17F0980")]
		private void Downsample(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6002269")]
		[Address(RVA = "0x17F0EE0", Offset = "0x17F0EE0", VA = "0x17F0EE0")]
		private void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget)
		{
		}

		[Token(Token = "0x600226A")]
		[Address(RVA = "0x17F1960", Offset = "0x17F1960", VA = "0x17F1960")]
		private void ReleaseTextures()
		{
		}

		[Token(Token = "0x600226B")]
		[Address(RVA = "0x17F047C", Offset = "0x17F047C", VA = "0x17F047C")]
		private void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider)
		{
		}
	}
	[Token(Token = "0x20004D3")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA4B88", Offset = "0xEA4B88")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA4B88", Offset = "0xEA4B88")]
	public class EdgeDetection : PostEffectsBase
	{
		[Token(Token = "0x20004D4")]
		public enum EdgeDetectMode
		{
			[Token(Token = "0x4001867")]
			TriangleDepthNormals,
			[Token(Token = "0x4001868")]
			RobertsCrossDepthNormals,
			[Token(Token = "0x4001869")]
			SobelDepth,
			[Token(Token = "0x400186A")]
			SobelDepthThin,
			[Token(Token = "0x400186B")]
			TriangleLuminance
		}

		[Token(Token = "0x400185B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public EdgeDetectMode mode;

		[Token(Token = "0x400185C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float sensitivityDepth;

		[Token(Token = "0x400185D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float sensitivityNormals;

		[Token(Token = "0x400185E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float lumThreshold;

		[Token(Token = "0x400185F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float edgeExp;

		[Token(Token = "0x4001860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float sampleDist;

		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgesOnly;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color edgesOnlyBgColor;

		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader edgeDetectShader;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Material edgeDetectMaterial;

		[Token(Token = "0x4001865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private EdgeDetectMode oldMode;

		[Token(Token = "0x600226D")]
		[Address(RVA = "0x17F2290", Offset = "0x17F2290", VA = "0x17F2290")]
		public EdgeDetection()
		{
		}

		[Token(Token = "0x600226E")]
		[Address(RVA = "0x17F22F8", Offset = "0x17F22F8", VA = "0x17F22F8", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600226F")]
		[Address(RVA = "0x17F2480", Offset = "0x17F2480", VA = "0x17F2480")]
		private new void Start()
		{
		}

		[Token(Token = "0x6002270")]
		[Address(RVA = "0x17F2364", Offset = "0x17F2364", VA = "0x17F2364")]
		private void SetCameraFlag()
		{
		}

		[Token(Token = "0x6002271")]
		[Address(RVA = "0x17F248C", Offset = "0x17F248C", VA = "0x17F248C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002272")]
		[Address(RVA = "0x17F2490", Offset = "0x17F2490", VA = "0x17F2490")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004D5")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA4C48", Offset = "0xEA4C48")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA4C48", Offset = "0xEA4C48")]
	public class Fisheye : PostEffectsBase
	{
		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA4CF8", Offset = "0xEA4CF8")]
		public float strengthX;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA4D10", Offset = "0xEA4D10")]
		public float strengthY;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Shader fishEyeShader;

		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material fisheyeMaterial;

		[Token(Token = "0x6002273")]
		[Address(RVA = "0x17F276C", Offset = "0x17F276C", VA = "0x17F276C")]
		public Fisheye()
		{
		}

		[Token(Token = "0x6002274")]
		[Address(RVA = "0x17F2780", Offset = "0x17F2780", VA = "0x17F2780", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002275")]
		[Address(RVA = "0x17F27CC", Offset = "0x17F27CC", VA = "0x17F27CC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004D6")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA4D28", Offset = "0xEA4D28")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA4D28", Offset = "0xEA4D28")]
	public class GlobalFog : PostEffectsBase
	{
		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xEA4DD8", Offset = "0xEA4DD8")]
		public bool distanceFog;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xEA4E0C", Offset = "0xEA4E0C")]
		public bool excludeFarPixels;

		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xEA4E40", Offset = "0xEA4E40")]
		public bool useRadialDistance;

		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xEA4E74", Offset = "0xEA4E74")]
		public bool heightFog;

		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xEA4EA8", Offset = "0xEA4EA8")]
		public float height;

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA4EDC", Offset = "0xEA4EDC")]
		public float heightDensity;

		[Token(Token = "0x4001876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xEA4EFC", Offset = "0xEA4EFC")]
		public float startDistance;

		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Shader fogShader;

		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material fogMaterial;

		[Token(Token = "0x6002276")]
		[Address(RVA = "0x17F29BC", Offset = "0x17F29BC", VA = "0x17F29BC")]
		public GlobalFog()
		{
		}

		[Token(Token = "0x6002277")]
		[Address(RVA = "0x17F29E0", Offset = "0x17F29E0", VA = "0x17F29E0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002278")]
		[Address(RVA = "0x17F2AAC", Offset = "0x17F2AAC", VA = "0x17F2AAC")]
		public bool CheckForChipset(string chipset)
		{
			return default(bool);
		}

		[Token(Token = "0x6002279")]
		[Address(RVA = "0x17F2B04", Offset = "0x17F2B04", VA = "0x17F2B04")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600227A")]
		[Address(RVA = "0x17F3924", Offset = "0x17F3924", VA = "0x17F3924")]
		private static void CustomGraphicsBlit(RenderTexture source, RenderTexture dest, Material fxMaterial, int passNr)
		{
		}
	}
	[Token(Token = "0x20004D7")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA4F30", Offset = "0xEA4F30")]
	public class Grayscale : ImageEffectBase
	{
		[Token(Token = "0x4001879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Texture textureRamp;

		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA4F78", Offset = "0xEA4F78")]
		public float rampOffset;

		[Token(Token = "0x600227B")]
		[Address(RVA = "0x17F3B18", Offset = "0x17F3B18", VA = "0x17F3B18")]
		public Grayscale()
		{
		}

		[Token(Token = "0x600227C")]
		[Address(RVA = "0x17F3B20", Offset = "0x17F3B20", VA = "0x17F3B20")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004D8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA4F94", Offset = "0xEA4F94")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA4F94", Offset = "0xEA4F94")]
	public class ImageEffectBase : MonoBehaviour
	{
		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Shader shader;

		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Material m_Material;

		[Token(Token = "0x17000265")]
		protected Material material
		{
			[Token(Token = "0x600227F")]
			[Address(RVA = "0x17EA654", Offset = "0x17EA654", VA = "0x17EA654")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600227D")]
		[Address(RVA = "0x17EA560", Offset = "0x17EA560", VA = "0x17EA560")]
		public ImageEffectBase()
		{
		}

		[Token(Token = "0x600227E")]
		[Address(RVA = "0x17F3C50", Offset = "0x17F3C50", VA = "0x17F3C50", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6002280")]
		[Address(RVA = "0x17F3D2C", Offset = "0x17F3D2C", VA = "0x17F3D2C", Slot = "5")]
		protected virtual void OnDisable()
		{
		}
	}
	[Token(Token = "0x20004D9")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA5034", Offset = "0xEA5034")]
	public class ImageEffects
	{
		[Token(Token = "0x6002281")]
		[Address(RVA = "0x17F3E00", Offset = "0x17F3E00", VA = "0x17F3E00")]
		public ImageEffects()
		{
		}

		[Token(Token = "0x6002282")]
		[Address(RVA = "0x17F3E08", Offset = "0x17F3E08", VA = "0x17F3E08")]
		public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
		{
		}

		[Token(Token = "0x6002283")]
		[Address(RVA = "0x17F41C8", Offset = "0x17F41C8", VA = "0x17F41C8")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA5068", Offset = "0xEA5068")]
		public static void Blit(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6002284")]
		[Address(RVA = "0x17F4258", Offset = "0x17F4258", VA = "0x17F4258")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xEA509C", Offset = "0xEA509C")]
		public static void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest)
		{
		}
	}
	[Token(Token = "0x20004DA")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA50D0", Offset = "0xEA50D0")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA50D0", Offset = "0xEA50D0")]
	public class MotionBlur : ImageEffectBase
	{
		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5180", Offset = "0xEA5180")]
		public float blurAmount;

		[Token(Token = "0x400187E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool extraBlur;

		[Token(Token = "0x400187F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private RenderTexture accumTexture;

		[Token(Token = "0x6002285")]
		[Address(RVA = "0x17F42FC", Offset = "0x17F42FC", VA = "0x17F42FC")]
		public MotionBlur()
		{
		}

		[Token(Token = "0x6002286")]
		[Address(RVA = "0x17F4310", Offset = "0x17F4310", VA = "0x17F4310", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6002287")]
		[Address(RVA = "0x17F4350", Offset = "0x17F4350", VA = "0x17F4350", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6002288")]
		[Address(RVA = "0x17F43E4", Offset = "0x17F43E4", VA = "0x17F43E4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004DB")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA519C", Offset = "0xEA519C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA519C", Offset = "0xEA519C")]
	public class NoiseAndGrain : PostEffectsBase
	{
		[Token(Token = "0x4001880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float intensityMultiplier;

		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float generalIntensity;

		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blackIntensity;

		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float whiteIntensity;

		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float midGrey;

		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool dx11Grain;

		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float softness;

		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool monochrome;

		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 intensities;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 tiling;

		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float monochromeTiling;

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FilterMode filterMode;

		[Token(Token = "0x400188C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Texture2D noiseTexture;

		[Token(Token = "0x400188D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader noiseShader;

		[Token(Token = "0x400188E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Material noiseMaterial;

		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dx11NoiseShader;

		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Material dx11NoiseMaterial;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float TILE_AMOUNT;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Mesh mesh;

		[Token(Token = "0x6002289")]
		[Address(RVA = "0x17F48AC", Offset = "0x17F48AC", VA = "0x17F48AC")]
		public NoiseAndGrain()
		{
		}

		[Token(Token = "0x600228A")]
		[Address(RVA = "0x17F496C", Offset = "0x17F496C", VA = "0x17F496C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600228B")]
		[Address(RVA = "0x17F49DC", Offset = "0x17F49DC", VA = "0x17F49DC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x600228C")]
		[Address(RVA = "0x17F4A50", Offset = "0x17F4A50", VA = "0x17F4A50")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x600228D")]
		[Address(RVA = "0x17F57E4", Offset = "0x17F57E4", VA = "0x17F57E4")]
		private static void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, Mesh mesh, int passNr)
		{
		}

		[Token(Token = "0x600228E")]
		[Address(RVA = "0x17F5C04", Offset = "0x17F5C04", VA = "0x17F5C04")]
		private static void BuildMesh(Mesh mesh, RenderTexture source, Texture2D noise)
		{
		}

		[Token(Token = "0x600228F")]
		[Address(RVA = "0x17F63BC", Offset = "0x17F63BC", VA = "0x17F63BC")]
		private static void BuildMeshUV0(Mesh mesh, int width, int height, float noiseSize, int noiseWidth)
		{
		}
	}
	[Token(Token = "0x20004DC")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA524C", Offset = "0xEA524C")]
	public class PostEffectsBase : MonoBehaviour
	{
		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		protected bool supportHDRTextures;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		protected bool supportDX11;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		protected bool isSupported;

		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Material> createdMaterials;

		[Token(Token = "0x6002291")]
		[Address(RVA = "0x17E0308", Offset = "0x17E0308", VA = "0x17E0308")]
		public PostEffectsBase()
		{
		}

		[Token(Token = "0x6002292")]
		[Address(RVA = "0x17E05D0", Offset = "0x17E05D0", VA = "0x17E05D0")]
		protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x6002293")]
		[Address(RVA = "0x17F7234", Offset = "0x17F7234", VA = "0x17F7234")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x6002294")]
		[Address(RVA = "0x17F74D4", Offset = "0x17F74D4", VA = "0x17F74D4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002295")]
		[Address(RVA = "0x17F74E0", Offset = "0x17F74E0", VA = "0x17F74E0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6002296")]
		[Address(RVA = "0x17F74E4", Offset = "0x17F74E4", VA = "0x17F74E4")]
		private void RemoveCreatedMaterials()
		{
		}

		[Token(Token = "0x6002297")]
		[Address(RVA = "0x17F7600", Offset = "0x17F7600", VA = "0x17F7600")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x6002298")]
		[Address(RVA = "0x17F7608", Offset = "0x17F7608", VA = "0x17F7608", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6002299")]
		[Address(RVA = "0x17E8990", Offset = "0x17E8990", VA = "0x17E8990")]
		protected void Start()
		{
		}

		[Token(Token = "0x600229A")]
		[Address(RVA = "0x17E0464", Offset = "0x17E0464", VA = "0x17E0464")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x600229B")]
		[Address(RVA = "0x17E4B1C", Offset = "0x17E4B1C", VA = "0x17E4B1C")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x600229C")]
		[Address(RVA = "0x17F7718", Offset = "0x17F7718", VA = "0x17F7718")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x600229D")]
		[Address(RVA = "0x17E0B44", Offset = "0x17E0B44", VA = "0x17E0B44")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x600229E")]
		[Address(RVA = "0x17F7720", Offset = "0x17F7720", VA = "0x17F7720")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x600229F")]
		[Address(RVA = "0x17F7210", Offset = "0x17F7210", VA = "0x17F7210")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x60022A0")]
		[Address(RVA = "0x17F7A54", Offset = "0x17F7A54", VA = "0x17F7A54")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}
	}
	[Token(Token = "0x20004DD")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA52D4", Offset = "0xEA52D4")]
	internal class PostEffectsHelper : MonoBehaviour
	{
		[Token(Token = "0x60022A1")]
		[Address(RVA = "0x17F7EBC", Offset = "0x17F7EBC", VA = "0x17F7EBC")]
		public PostEffectsHelper()
		{
		}

		[Token(Token = "0x60022A2")]
		[Address(RVA = "0x17F7EC4", Offset = "0x17F7EC4", VA = "0x17F7EC4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x60022A3")]
		[Address(RVA = "0x17F7F54", Offset = "0x17F7F54", VA = "0x17F7F54")]
		private static void DrawLowLevelPlaneAlignedWithCamera(float dist, RenderTexture source, RenderTexture dest, Material material, Camera cameraForProjectionMatrix)
		{
		}

		[Token(Token = "0x60022A4")]
		[Address(RVA = "0x17F82EC", Offset = "0x17F82EC", VA = "0x17F82EC")]
		private static void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x60022A5")]
		[Address(RVA = "0x17F8754", Offset = "0x17F8754", VA = "0x17F8754")]
		private static void DrawLowLevelQuad(float x1, float x2, float y1, float y2, RenderTexture source, RenderTexture dest, Material material)
		{
		}
	}
	[Token(Token = "0x20004DE")]
	internal class Quads
	{
		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int currentQuads;

		[Token(Token = "0x60022A6")]
		[Address(RVA = "0x17F8968", Offset = "0x17F8968", VA = "0x17F8968")]
		public Quads()
		{
		}

		[Token(Token = "0x60022A7")]
		[Address(RVA = "0x17F8970", Offset = "0x17F8970", VA = "0x17F8970")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x60022A8")]
		[Address(RVA = "0x17EF0F8", Offset = "0x17EF0F8", VA = "0x17EF0F8")]
		public static void Cleanup()
		{
		}

		[Token(Token = "0x60022A9")]
		[Address(RVA = "0x17F1EC4", Offset = "0x17F1EC4", VA = "0x17F1EC4")]
		public static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x60022AA")]
		[Address(RVA = "0x17F8ACC", Offset = "0x17F8ACC", VA = "0x17F8ACC")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}
	}
	[Token(Token = "0x20004DF")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA535C", Offset = "0xEA535C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA535C", Offset = "0xEA535C")]
	public class ScreenOverlay : PostEffectsBase
	{
		[Token(Token = "0x20004E0")]
		public enum OverlayBlendMode
		{
			[Token(Token = "0x400189F")]
			Additive,
			[Token(Token = "0x40018A0")]
			ScreenBlend,
			[Token(Token = "0x40018A1")]
			Multiply,
			[Token(Token = "0x40018A2")]
			Overlay,
			[Token(Token = "0x40018A3")]
			AlphaBlend
		}

		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public OverlayBlendMode blendMode;

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float intensity;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Texture2D texture;

		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader overlayShader;

		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Material overlayMaterial;

		[Token(Token = "0x60022AC")]
		[Address(RVA = "0x17F9280", Offset = "0x17F9280", VA = "0x17F9280")]
		public ScreenOverlay()
		{
		}

		[Token(Token = "0x60022AD")]
		[Address(RVA = "0x17F9294", Offset = "0x17F9294", VA = "0x17F9294", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60022AE")]
		[Address(RVA = "0x17F92E0", Offset = "0x17F92E0", VA = "0x17F92E0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004E1")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA540C", Offset = "0xEA540C")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA540C", Offset = "0xEA540C")]
	internal class ScreenSpaceAmbientObscurance : PostEffectsBase
	{
		[Token(Token = "0x40018A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA54BC", Offset = "0xEA54BC")]
		public float intensity;

		[Token(Token = "0x40018A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA54D8", Offset = "0xEA54D8")]
		public float radius;

		[Token(Token = "0x40018A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA54F8", Offset = "0xEA54F8")]
		public int blurIterations;

		[Token(Token = "0x40018A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5514", Offset = "0xEA5514")]
		public float blurFilterDistance;

		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5530", Offset = "0xEA5530")]
		public int downsample;

		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture2D rand;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Shader aoShader;

		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material aoMaterial;

		[Token(Token = "0x60022AF")]
		[Address(RVA = "0x17F94E4", Offset = "0x17F94E4", VA = "0x17F94E4")]
		public ScreenSpaceAmbientObscurance()
		{
		}

		[Token(Token = "0x60022B0")]
		[Address(RVA = "0x17F9510", Offset = "0x17F9510", VA = "0x17F9510", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60022B1")]
		[Address(RVA = "0x17F955C", Offset = "0x17F955C", VA = "0x17F955C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60022B2")]
		[Address(RVA = "0x17F9638", Offset = "0x17F9638", VA = "0x17F9638")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004E2")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA5558", Offset = "0xEA5558")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA5558", Offset = "0xEA5558")]
	public class ScreenSpaceAmbientOcclusion : MonoBehaviour
	{
		[Token(Token = "0x20004E3")]
		public enum SSAOSamples
		{
			[Token(Token = "0x40018B8")]
			Low,
			[Token(Token = "0x40018B9")]
			Medium,
			[Token(Token = "0x40018BA")]
			High
		}

		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5608", Offset = "0xEA5608")]
		public float m_Radius;

		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SSAOSamples m_SampleCount;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5624", Offset = "0xEA5624")]
		public float m_OcclusionIntensity;

		[Token(Token = "0x40018AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5640", Offset = "0xEA5640")]
		public int m_Blur;

		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA565C", Offset = "0xEA565C")]
		public int m_Downsampling;

		[Token(Token = "0x40018B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5678", Offset = "0xEA5678")]
		public float m_OcclusionAttenuation;

		[Token(Token = "0x40018B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5694", Offset = "0xEA5694")]
		public float m_MinZ;

		[Token(Token = "0x40018B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader m_SSAOShader;

		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Material m_SSAOMaterial;

		[Token(Token = "0x40018B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D m_RandomTexture;

		[Token(Token = "0x40018B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool m_Supported;

		[Token(Token = "0x60022B3")]
		[Address(RVA = "0x17FA264", Offset = "0x17FA264", VA = "0x17FA264")]
		public ScreenSpaceAmbientOcclusion()
		{
		}

		[Token(Token = "0x60022B4")]
		[Address(RVA = "0x17FA2B0", Offset = "0x17FA2B0", VA = "0x17FA2B0")]
		private static Material CreateMaterial(Shader shader)
		{
			return null;
		}

		[Token(Token = "0x60022B5")]
		[Address(RVA = "0x17FA388", Offset = "0x17FA388", VA = "0x17FA388")]
		private static void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x60022B6")]
		[Address(RVA = "0x17FA454", Offset = "0x17FA454", VA = "0x17FA454")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60022B7")]
		[Address(RVA = "0x17FA45C", Offset = "0x17FA45C", VA = "0x17FA45C")]
		private void Start()
		{
		}

		[Token(Token = "0x60022B8")]
		[Address(RVA = "0x17FA674", Offset = "0x17FA674", VA = "0x17FA674")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60022B9")]
		[Address(RVA = "0x17FA578", Offset = "0x17FA578", VA = "0x17FA578")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x60022BA")]
		[Address(RVA = "0x17FA720", Offset = "0x17FA720", VA = "0x17FA720")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004E4")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA56C0", Offset = "0xEA56C0")]
	public class SepiaTone : ImageEffectBase
	{
		[Token(Token = "0x60022BB")]
		[Address(RVA = "0x17FB130", Offset = "0x17FB130", VA = "0x17FB130")]
		public SepiaTone()
		{
		}

		[Token(Token = "0x60022BC")]
		[Address(RVA = "0x17FB138", Offset = "0x17FB138", VA = "0x17FB138")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004E5")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA5708", Offset = "0xEA5708")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA5708", Offset = "0xEA5708")]
	public class SunShafts : PostEffectsBase
	{
		[Token(Token = "0x20004E6")]
		public enum SunShaftsResolution
		{
			[Token(Token = "0x40018CA")]
			Low,
			[Token(Token = "0x40018CB")]
			Normal,
			[Token(Token = "0x40018CC")]
			High
		}

		[Token(Token = "0x20004E7")]
		public enum ShaftsScreenBlendMode
		{
			[Token(Token = "0x40018CE")]
			Screen,
			[Token(Token = "0x40018CF")]
			Add
		}

		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public SunShaftsResolution resolution;

		[Token(Token = "0x40018BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ShaftsScreenBlendMode screenBlendMode;

		[Token(Token = "0x40018BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Transform sunTransform;

		[Token(Token = "0x40018BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int radialBlurIterations;

		[Token(Token = "0x40018BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color sunColor;

		[Token(Token = "0x40018C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color sunThreshold;

		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float sunShaftBlurRadius;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float sunShaftIntensity;

		[Token(Token = "0x40018C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float maxRadius;

		[Token(Token = "0x40018C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool useDepthTexture;

		[Token(Token = "0x40018C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Shader sunShaftsShader;

		[Token(Token = "0x40018C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material sunShaftsMaterial;

		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Shader simpleClearShader;

		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material simpleClearMaterial;

		[Token(Token = "0x60022BD")]
		[Address(RVA = "0x17FB1E8", Offset = "0x17FB1E8", VA = "0x17FB1E8")]
		public SunShafts()
		{
		}

		[Token(Token = "0x60022BE")]
		[Address(RVA = "0x17FB2A0", Offset = "0x17FB2A0", VA = "0x17FB2A0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60022BF")]
		[Address(RVA = "0x17FB300", Offset = "0x17FB300", VA = "0x17FB300")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004E8")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA57B8", Offset = "0xEA57B8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA57B8", Offset = "0xEA57B8")]
	internal class TiltShift : PostEffectsBase
	{
		[Token(Token = "0x20004E9")]
		public enum TiltShiftMode
		{
			[Token(Token = "0x40018D8")]
			TiltShiftMode,
			[Token(Token = "0x40018D9")]
			IrisMode
		}

		[Token(Token = "0x20004EA")]
		public enum TiltShiftQuality
		{
			[Token(Token = "0x40018DB")]
			Preview,
			[Token(Token = "0x40018DC")]
			Normal,
			[Token(Token = "0x40018DD")]
			High
		}

		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TiltShiftMode mode;

		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TiltShiftQuality quality;

		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5858", Offset = "0xEA5858")]
		public float blurArea;

		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5874", Offset = "0xEA5874")]
		public float maxBlurSize;

		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5890", Offset = "0xEA5890")]
		public int downsample;

		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader tiltShiftShader;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Material tiltShiftMaterial;

		[Token(Token = "0x60022C0")]
		[Address(RVA = "0x17FBF10", Offset = "0x17FBF10", VA = "0x17FBF10")]
		public TiltShift()
		{
		}

		[Token(Token = "0x60022C1")]
		[Address(RVA = "0x17FBF2C", Offset = "0x17FBF2C", VA = "0x17FBF2C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60022C2")]
		[Address(RVA = "0x17FBF78", Offset = "0x17FBF78", VA = "0x17FBF78")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004EB")]
	[ImageEffectAllowedInSceneView]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA58A8", Offset = "0xEA58A8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA58A8", Offset = "0xEA58A8")]
	public class Tonemapping : PostEffectsBase
	{
		[Token(Token = "0x20004EC")]
		public enum TonemapperType
		{
			[Token(Token = "0x40018EC")]
			SimpleReinhard,
			[Token(Token = "0x40018ED")]
			UserCurve,
			[Token(Token = "0x40018EE")]
			Hable,
			[Token(Token = "0x40018EF")]
			Photographic,
			[Token(Token = "0x40018F0")]
			OptimizedHejiDawson,
			[Token(Token = "0x40018F1")]
			AdaptiveReinhard,
			[Token(Token = "0x40018F2")]
			AdaptiveReinhardAutoWhite
		}

		[Token(Token = "0x20004ED")]
		public enum AdaptiveTexSize
		{
			[Token(Token = "0x40018F4")]
			Square16 = 0x10,
			[Token(Token = "0x40018F5")]
			Square32 = 0x20,
			[Token(Token = "0x40018F6")]
			Square64 = 0x40,
			[Token(Token = "0x40018F7")]
			Square128 = 0x80,
			[Token(Token = "0x40018F8")]
			Square256 = 0x100,
			[Token(Token = "0x40018F9")]
			Square512 = 0x200,
			[Token(Token = "0x40018FA")]
			Square1024 = 0x400
		}

		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public TonemapperType type;

		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AdaptiveTexSize adaptiveTextureSize;

		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AnimationCurve remapCurve;

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Texture2D curveTex;

		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float exposureAdjustment;

		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float middleGrey;

		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float white;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float adaptionSpeed;

		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Shader tonemapper;

		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool validRenderTextureFormat;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Material tonemapMaterial;

		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RenderTexture rt;

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x60022C3")]
		[Address(RVA = "0x17FC310", Offset = "0x17FC310", VA = "0x17FC310")]
		public Tonemapping()
		{
		}

		[Token(Token = "0x60022C4")]
		[Address(RVA = "0x17FC354", Offset = "0x17FC354", VA = "0x17FC354")]
		public void Awake()
		{
		}

		[Token(Token = "0x60022C5")]
		[Address(RVA = "0x17FC358", Offset = "0x17FC358", VA = "0x17FC358", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60022C6")]
		[Address(RVA = "0x17FC4DC", Offset = "0x17FC4DC", VA = "0x17FC4DC")]
		public float UpdateCurve()
		{
			return default(float);
		}

		[Token(Token = "0x60022C7")]
		[Address(RVA = "0x17FC834", Offset = "0x17FC834", VA = "0x17FC834")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60022C8")]
		[Address(RVA = "0x17FCA30", Offset = "0x17FCA30", VA = "0x17FCA30")]
		private bool CreateInternalRenderTexture()
		{
			return default(bool);
		}

		[Token(Token = "0x60022C9")]
		[Address(RVA = "0x17FCB58", Offset = "0x17FCB58", VA = "0x17FCB58")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004EE")]
	internal class Triangles
	{
		[Token(Token = "0x40018FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x40018FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int currentTris;

		[Token(Token = "0x60022CA")]
		[Address(RVA = "0x17FD6D0", Offset = "0x17FD6D0", VA = "0x17FD6D0")]
		public Triangles()
		{
		}

		[Token(Token = "0x60022CB")]
		[Address(RVA = "0x17FD6D8", Offset = "0x17FD6D8", VA = "0x17FD6D8")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x60022CC")]
		[Address(RVA = "0x17FD8AC", Offset = "0x17FD8AC", VA = "0x17FD8AC")]
		private static void Cleanup()
		{
		}

		[Token(Token = "0x60022CD")]
		[Address(RVA = "0x17FDBC0", Offset = "0x17FDBC0", VA = "0x17FDBC0")]
		private static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x60022CE")]
		[Address(RVA = "0x17FDF14", Offset = "0x17FDF14", VA = "0x17FDF14")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}
	}
	[Token(Token = "0x20004EF")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA5978", Offset = "0xEA5978")]
	public class Twirl : ImageEffectBase
	{
		[Token(Token = "0x40018FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector2 radius;

		[Token(Token = "0x40018FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA59C0", Offset = "0xEA59C0")]
		public float angle;

		[Token(Token = "0x40018FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 center;

		[Token(Token = "0x60022D0")]
		[Address(RVA = "0x17FE54C", Offset = "0x17FE54C", VA = "0x17FE54C")]
		public Twirl()
		{
		}

		[Token(Token = "0x60022D1")]
		[Address(RVA = "0x17FE5D4", Offset = "0x17FE5D4", VA = "0x17FE5D4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004F0")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA59DC", Offset = "0xEA59DC")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA59DC", Offset = "0xEA59DC")]
	public class VignetteAndChromaticAberration : PostEffectsBase
	{
		[Token(Token = "0x20004F1")]
		public enum AberrationMode
		{
			[Token(Token = "0x400190F")]
			Simple,
			[Token(Token = "0x4001910")]
			Advanced
		}

		[Token(Token = "0x4001900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AberrationMode mode;

		[Token(Token = "0x4001901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float intensity;

		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float chromaticAberration;

		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float axialAberration;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float blur;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blurSpread;

		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float luminanceDependency;

		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float blurDistance;

		[Token(Token = "0x4001908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Shader vignetteShader;

		[Token(Token = "0x4001909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader separableBlurShader;

		[Token(Token = "0x400190A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Shader chromAberrationShader;

		[Token(Token = "0x400190B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_VignetteMaterial;

		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Material m_SeparableBlurMaterial;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material m_ChromAberrationMaterial;

		[Token(Token = "0x60022D2")]
		[Address(RVA = "0x17FE62C", Offset = "0x17FE62C", VA = "0x17FE62C")]
		public VignetteAndChromaticAberration()
		{
		}

		[Token(Token = "0x60022D3")]
		[Address(RVA = "0x17FE668", Offset = "0x17FE668", VA = "0x17FE668", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x60022D4")]
		[Address(RVA = "0x17FE6DC", Offset = "0x17FE6DC", VA = "0x17FE6DC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004F2")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA5A8C", Offset = "0xEA5A8C")]
	public class Vortex : ImageEffectBase
	{
		[Token(Token = "0x4001911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public Vector2 radius;

		[Token(Token = "0x4001912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float angle;

		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 center;

		[Token(Token = "0x60022D5")]
		[Address(RVA = "0x17FEF78", Offset = "0x17FEF78", VA = "0x17FEF78")]
		public Vortex()
		{
		}

		[Token(Token = "0x60022D6")]
		[Address(RVA = "0x17FF000", Offset = "0x17FF000", VA = "0x17FF000")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
	[Token(Token = "0x20004F3")]
	[ExecuteInEditMode]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA5AD4", Offset = "0xEA5AD4")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA5AD4", Offset = "0xEA5AD4")]
	public class NoiseAndScratches : MonoBehaviour
	{
		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool monochrome;

		[Token(Token = "0x4001915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		private bool rgbFallback;

		[Token(Token = "0x4001916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5B84", Offset = "0xEA5B84")]
		public float grainIntensityMin;

		[Token(Token = "0x4001917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5BA0", Offset = "0xEA5BA0")]
		public float grainIntensityMax;

		[Token(Token = "0x4001918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5BBC", Offset = "0xEA5BBC")]
		public float grainSize;

		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5BDC", Offset = "0xEA5BDC")]
		public float scratchIntensityMin;

		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5BF8", Offset = "0xEA5BF8")]
		public float scratchIntensityMax;

		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5C14", Offset = "0xEA5C14")]
		public float scratchFPS;

		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xEA5C30", Offset = "0xEA5C30")]
		public float scratchJitter;

		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Texture grainTexture;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture scratchTexture;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Shader shaderRGB;

		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader shaderYUV;

		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Material m_MaterialRGB;

		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_MaterialYUV;

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float scratchTimeLeft;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float scratchX;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float scratchY;

		[Token(Token = "0x17000266")]
		protected Material material
		{
			[Token(Token = "0x60022D9")]
			[Address(RVA = "0x17F6900", Offset = "0x17F6900", VA = "0x17F6900")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60022D7")]
		[Address(RVA = "0x17F6708", Offset = "0x17F6708", VA = "0x17F6708")]
		public NoiseAndScratches()
		{
		}

		[Token(Token = "0x60022D8")]
		[Address(RVA = "0x17F6760", Offset = "0x17F6760", VA = "0x17F6760")]
		protected void Start()
		{
		}

		[Token(Token = "0x60022DA")]
		[Address(RVA = "0x17F6AA0", Offset = "0x17F6AA0", VA = "0x17F6AA0")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x60022DB")]
		[Address(RVA = "0x17F6BFC", Offset = "0x17F6BFC", VA = "0x17F6BFC")]
		private void SanitizeParameters()
		{
		}

		[Token(Token = "0x60022DC")]
		[Address(RVA = "0x17F6D64", Offset = "0x17F6D64", VA = "0x17F6D64")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}
	}
}
[Token(Token = "0x20004F4")]
public class ActivateTrigger : MonoBehaviour
{
	[Token(Token = "0x20004F5")]
	public enum Mode
	{
		[Token(Token = "0x400192C")]
		Trigger,
		[Token(Token = "0x400192D")]
		Replace,
		[Token(Token = "0x400192E")]
		Activate,
		[Token(Token = "0x400192F")]
		Enable,
		[Token(Token = "0x4001930")]
		Animate,
		[Token(Token = "0x4001931")]
		Deactivate
	}

	[Token(Token = "0x4001926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Mode action;

	[Token(Token = "0x4001927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public UnityEngine.Object target;

	[Token(Token = "0x4001928")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public GameObject source;

	[Token(Token = "0x4001929")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int triggerCount;

	[Token(Token = "0x400192A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool repeatTrigger;

	[Token(Token = "0x60022DD")]
	[Address(RVA = "0x1B6BA1C", Offset = "0x1B6BA1C", VA = "0x1B6BA1C")]
	public ActivateTrigger()
	{
	}

	[Token(Token = "0x60022DE")]
	[Address(RVA = "0x1B6BA34", Offset = "0x1B6BA34", VA = "0x1B6BA34")]
	private void DoActivateTrigger()
	{
	}

	[Token(Token = "0x60022DF")]
	[Address(RVA = "0x1B6BE7C", Offset = "0x1B6BE7C", VA = "0x1B6BE7C")]
	private void OnTriggerEnter(Collider other)
	{
	}
}
[Token(Token = "0x20004F6")]
public class MathAux
{
	[Token(Token = "0x60022E0")]
	[Address(RVA = "0x1972420", Offset = "0x1972420", VA = "0x1972420")]
	public MathAux()
	{
	}

	[Token(Token = "0x60022E1")]
	[Address(RVA = "0x1972428", Offset = "0x1972428", VA = "0x1972428")]
	public static float Hermite(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x60022E2")]
	[Address(RVA = "0x19724F8", Offset = "0x19724F8", VA = "0x19724F8")]
	public static float Sinerp(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x60022E3")]
	[Address(RVA = "0x19725C8", Offset = "0x19725C8", VA = "0x19725C8")]
	public static float Coserp(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x60022E4")]
	[Address(RVA = "0x19726A8", Offset = "0x19726A8", VA = "0x19726A8")]
	public static float Berp(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x60022E5")]
	[Address(RVA = "0x19727D8", Offset = "0x19727D8", VA = "0x19727D8")]
	public static float SmoothStep(float x, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x60022E6")]
	[Address(RVA = "0x19728C8", Offset = "0x19728C8", VA = "0x19728C8")]
	public static float Lerp(float x1, float y1, float x2, float y2, float input)
	{
		return default(float);
	}

	[Token(Token = "0x60022E7")]
	[Address(RVA = "0x1972900", Offset = "0x1972900", VA = "0x1972900")]
	public static float StickTo(float value, float stickTo, float within)
	{
		return default(float);
	}

	[Token(Token = "0x60022E8")]
	[Address(RVA = "0x19729E0", Offset = "0x19729E0", VA = "0x19729E0")]
	public static Vector3 NearestPoint(Vector3 lineStart, Vector3 lineEnd, Vector3 point)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60022E9")]
	[Address(RVA = "0x1972B78", Offset = "0x1972B78", VA = "0x1972B78")]
	public static Vector3 NearestPointStrict(Vector3 lineStart, Vector3 lineEnd, Vector3 point)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60022EA")]
	[Address(RVA = "0x1972D90", Offset = "0x1972D90", VA = "0x1972D90")]
	public static float Bounce(float x)
	{
		return default(float);
	}

	[Token(Token = "0x60022EB")]
	[Address(RVA = "0x1972E4C", Offset = "0x1972E4C", VA = "0x1972E4C")]
	public static bool Approx(float val, float about)
	{
		return default(bool);
	}

	[Token(Token = "0x60022EC")]
	[Address(RVA = "0x1972934", Offset = "0x1972934", VA = "0x1972934")]
	public static bool Approx(float val, float about, float range)
	{
		return default(bool);
	}

	[Token(Token = "0x60022ED")]
	[Address(RVA = "0x1972E6C", Offset = "0x1972E6C", VA = "0x1972E6C")]
	public static bool Approx(Vector3 val, Vector3 about, float range)
	{
		return default(bool);
	}

	[Token(Token = "0x60022EE")]
	[Address(RVA = "0x1972F7C", Offset = "0x1972F7C", VA = "0x1972F7C")]
	public static bool Approx(Vector2 val, Vector2 about, float range)
	{
		return default(bool);
	}

	[Token(Token = "0x60022EF")]
	[Address(RVA = "0x1973064", Offset = "0x1973064", VA = "0x1973064")]
	public static bool Compare(Vector3 lhs, Vector3 rhs)
	{
		return default(bool);
	}

	[Token(Token = "0x60022F0")]
	[Address(RVA = "0x1973164", Offset = "0x1973164", VA = "0x1973164")]
	public static float Clerp(float start, float end, float value)
	{
		return default(float);
	}

	[Token(Token = "0x60022F1")]
	[Address(RVA = "0x197325C", Offset = "0x197325C", VA = "0x197325C")]
	public static float ConvertAngleTo180Range(float angle)
	{
		return default(float);
	}

	[Token(Token = "0x60022F2")]
	[Address(RVA = "0x1973374", Offset = "0x1973374", VA = "0x1973374")]
	public static float ConvertAngleToOppositeSign(float angle)
	{
		return default(float);
	}

	[Token(Token = "0x60022F3")]
	[Address(RVA = "0x1973490", Offset = "0x1973490", VA = "0x1973490")]
	public static float GetClosestAngleRepresentation(float moveMe, float closerTo)
	{
		return default(float);
	}

	[Token(Token = "0x60022F4")]
	[Address(RVA = "0x1973628", Offset = "0x1973628", VA = "0x1973628")]
	public static float LowestAbs(float a, float b)
	{
		return default(float);
	}

	[Token(Token = "0x60022F5")]
	[Address(RVA = "0x19736CC", Offset = "0x19736CC", VA = "0x19736CC")]
	public static float HighestAbs(float a, float b)
	{
		return default(float);
	}

	[Token(Token = "0x60022F6")]
	[Address(RVA = "0x1973770", Offset = "0x1973770", VA = "0x1973770")]
	public static float AngleNonSigned(Vector3 d1, Vector3 d2)
	{
		return default(float);
	}

	[Token(Token = "0x60022F7")]
	[Address(RVA = "0x1973890", Offset = "0x1973890", VA = "0x1973890")]
	public static float AngleSigned(Vector3 v1, Vector3 v2, Vector3 n)
	{
		return default(float);
	}

	[Token(Token = "0x60022F8")]
	[Address(RVA = "0x19739E8", Offset = "0x19739E8", VA = "0x19739E8")]
	public static float AngleDir(Vector3 fwd, Vector3 targetDir, Vector3 up)
	{
		return default(float);
	}

	[Token(Token = "0x60022F9")]
	[Address(RVA = "0x1973B08", Offset = "0x1973B08", VA = "0x1973B08")]
	public static float ScreenScale(Camera cam, Transform t, float inches)
	{
		return default(float);
	}

	[Token(Token = "0x60022FA")]
	[Address(RVA = "0x1973D3C", Offset = "0x1973D3C", VA = "0x1973D3C")]
	public static Vector3 SnapVector3(Vector3 v, float snap)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60022FB")]
	[Address(RVA = "0x1973E90", Offset = "0x1973E90", VA = "0x1973E90")]
	public static float AngleSignedInDegrees(Vector3 v1, Vector3 v2, Vector3 n)
	{
		return default(float);
	}

	[Token(Token = "0x60022FC")]
	[Address(RVA = "0x1973FE8", Offset = "0x1973FE8", VA = "0x1973FE8")]
	public static Vector2 CalculateLineLineIntersection(Vector2 pointA1, Vector2 pointA2, Vector2 pointB1, Vector2 pointB2, out bool intersected)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60022FD")]
	[Address(RVA = "0x1974038", Offset = "0x1974038", VA = "0x1974038")]
	public static Vector2 CalculateLineLineIntersection(float pointA1X, float pointA1Y, float pointA2X, float pointA2Y, float pointB1X, float pointB1Y, float pointB2X, float pointB2Y, out bool intersected)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60022FE")]
	[Address(RVA = "0x1974190", Offset = "0x1974190", VA = "0x1974190")]
	public static Vector2 InfiniteLinesIntersectIgnoreY(Vector3 pointA1, Vector3 pointA2, Vector3 pointB1, Vector3 pointB2, out bool intersected)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60022FF")]
	[Address(RVA = "0x19741E4", Offset = "0x19741E4", VA = "0x19741E4")]
	public static bool LinesIntersectIgnoreY(Vector3 pointA1, Vector3 pointA2, Vector3 pointB1, Vector3 pointB2, float errorMargin)
	{
		return default(bool);
	}

	[Token(Token = "0x6002300")]
	[Address(RVA = "0x19743F8", Offset = "0x19743F8", VA = "0x19743F8")]
	public static bool InRange(float val, float limit1, float limit2, float errorMargin)
	{
		return default(bool);
	}

	[Token(Token = "0x6002301")]
	[Address(RVA = "0x197446C", Offset = "0x197446C", VA = "0x197446C")]
	public static Color MaskToColor(int mask)
	{
		return default(Color);
	}

	[Token(Token = "0x6002302")]
	[Address(RVA = "0x19744C4", Offset = "0x19744C4", VA = "0x19744C4")]
	public static int ColorToMask(Color color)
	{
		return default(int);
	}

	[Token(Token = "0x6002303")]
	[Address(RVA = "0x197451C", Offset = "0x197451C", VA = "0x197451C")]
	public static float SqrMagnitudeIgnoreY(Vector3 vector)
	{
		return default(float);
	}

	[Token(Token = "0x6002304")]
	[Address(RVA = "0x1974538", Offset = "0x1974538", VA = "0x1974538")]
	public static float SqrMagnitudeIgnoreY(Vector3 position1, Vector3 position2)
	{
		return default(float);
	}

	[Token(Token = "0x6002305")]
	[Address(RVA = "0x1974564", Offset = "0x1974564", VA = "0x1974564")]
	public static Vector3 DifferenceIgnoreY(Vector3 to, Vector3 from)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6002306")]
	[Address(RVA = "0x19745B4", Offset = "0x19745B4", VA = "0x19745B4")]
	public static Vector3 DirectionIgnoreY(Vector3 to, Vector3 from)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6002307")]
	[Address(RVA = "0x19746A0", Offset = "0x19746A0", VA = "0x19746A0")]
	public static Vector3 RemoveYNormalized(Vector3 source)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6002308")]
	[Address(RVA = "0x1974748", Offset = "0x1974748", VA = "0x1974748")]
	public static Vector2 ToTopDown(Vector3 vector)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6002309")]
	[Address(RVA = "0x1974774", Offset = "0x1974774", VA = "0x1974774")]
	public static bool OnSimilarYPlane(Vector3 position1, Vector3 position2, float maxDifference)
	{
		return default(bool);
	}

	[Token(Token = "0x600230A")]
	[Address(RVA = "0x19747A0", Offset = "0x19747A0", VA = "0x19747A0")]
	public static bool LineIntesectsCircle(Vector3 circleCenter, float circleRadius, Vector3 lineStart, Vector3 lineDir)
	{
		return default(bool);
	}

	[Token(Token = "0x600230B")]
	[Address(RVA = "0x1974900", Offset = "0x1974900", VA = "0x1974900")]
	public static bool VerticallyAlignedCapsulesIntersect(Vector3 c1CenterWorld, float c1Height, float c1Radius, Vector3 c2CenterWorld, float c2Height, float c2Radius)
	{
		return default(bool);
	}

	[Token(Token = "0x600230C")]
	[Address(RVA = "0x1974B44", Offset = "0x1974B44", VA = "0x1974B44")]
	public static bool HaveOppositeSigns(float num1, float num2)
	{
		return default(bool);
	}

	[Token(Token = "0x600230D")]
	[Address(RVA = "0x1974B64", Offset = "0x1974B64", VA = "0x1974B64")]
	public static float Square(float number)
	{
		return default(float);
	}

	[Token(Token = "0x600230E")]
	[Address(RVA = "0x1974B74", Offset = "0x1974B74", VA = "0x1974B74")]
	public static int Mod(int number, int modulus)
	{
		return default(int);
	}

	[Token(Token = "0x600230F")]
	[Address(RVA = "0x1974C20", Offset = "0x1974C20", VA = "0x1974C20")]
	public static decimal GetAspectRatioDecimal(int iWidth, int iHeight)
	{
		return default(decimal);
	}

	[Token(Token = "0x6002310")]
	[Address(RVA = "0x1974D34", Offset = "0x1974D34", VA = "0x1974D34")]
	public static int GreatestCommonDivisor(int a, int b)
	{
		return default(int);
	}
}
[Token(Token = "0x20004F7")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xEA5C48", Offset = "0xEA5C48")]
public class CombineChildren : MonoBehaviour
{
	[Token(Token = "0x4001932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public bool generateTriangleStrips;

	[Token(Token = "0x6002311")]
	[Address(RVA = "0x19E0B1C", Offset = "0x19E0B1C", VA = "0x19E0B1C")]
	public CombineChildren()
	{
	}

	[Token(Token = "0x6002312")]
	[Address(RVA = "0x19E0B2C", Offset = "0x19E0B2C", VA = "0x19E0B2C")]
	private void Start()
	{
	}
}
[Token(Token = "0x20004F8")]
public class DebugUtilsSA
{
	[Token(Token = "0x17000267")]
	public static string TimeStamp
	{
		[Token(Token = "0x6002315")]
		[Address(RVA = "0x1921CD8", Offset = "0x1921CD8", VA = "0x1921CD8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6002313")]
	[Address(RVA = "0x1921CCC", Offset = "0x1921CCC", VA = "0x1921CCC")]
	public DebugUtilsSA()
	{
	}

	[Token(Token = "0x6002314")]
	[Address(RVA = "0x1921CD4", Offset = "0x1921CD4", VA = "0x1921CD4")]
	public static void Assert(bool condition, string messageError)
	{
	}

	[Token(Token = "0x6002316")]
	[Address(RVA = "0x1922068", Offset = "0x1922068", VA = "0x1922068")]
	public static string TypePrefix(object obj)
	{
		return null;
	}

	[Token(Token = "0x6002317")]
	[Address(RVA = "0x1922098", Offset = "0x1922098", VA = "0x1922098")]
	public static string TypePrefix(Type type)
	{
		return null;
	}

	[Token(Token = "0x6002318")]
	[Address(RVA = "0x192214C", Offset = "0x192214C", VA = "0x192214C")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xEA5C7C", Offset = "0xEA5C7C")]
	public static void EditorDebugDrawCircle(Vector3 center, Vector3 axis, float radius, int segments, Color color)
	{
	}

	[Token(Token = "0x6002319")]
	[Address(RVA = "0x1922150", Offset = "0x1922150", VA = "0x1922150")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xEA5CB0", Offset = "0xEA5CB0")]
	public static void EditorDebugDrawCircle(Vector3 center, Vector3 axis, float radius, int segments, Color color, float duration)
	{
	}

	[Token(Token = "0x600231A")]
	[Address(RVA = "0x19225B0", Offset = "0x19225B0", VA = "0x19225B0")]
	[AttributeAttribute(Name = "ConditionalAttribute", RVA = "0xEA5CE4", Offset = "0xEA5CE4")]
	public static void EditorDebugConnectPoints(Vector3[] points, Color color, float duration)
	{
	}
}
[Token(Token = "0x20004F9")]
public class MeshCombineUtility
{
	[Token(Token = "0x20004FA")]
	public struct MeshInstance
	{
		[Token(Token = "0x4001933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Mesh mesh;

		[Token(Token = "0x4001934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int subMeshIndex;

		[Token(Token = "0x4001935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Matrix4x4 transform;
	}

	[Token(Token = "0x600231B")]
	[Address(RVA = "0x1975184", Offset = "0x1975184", VA = "0x1975184")]
	public MeshCombineUtility()
	{
	}

	[Token(Token = "0x600231C")]
	[Address(RVA = "0x197518C", Offset = "0x197518C", VA = "0x197518C")]
	public static Mesh Combine(MeshInstance[] combines, bool generateStrips)
	{
		return null;
	}

	[Token(Token = "0x600231D")]
	[Address(RVA = "0x1976464", Offset = "0x1976464", VA = "0x1976464")]
	private static void Copy(int vertexcount, Vector3[] src, Vector3[] dst, ref int offset, Matrix4x4 transform)
	{
	}

	[Token(Token = "0x600231E")]
	[Address(RVA = "0x19765B8", Offset = "0x19765B8", VA = "0x19765B8")]
	private static void CopyNormal(int vertexcount, Vector3[] src, Vector3[] dst, ref int offset, Matrix4x4 transform)
	{
	}

	[Token(Token = "0x600231F")]
	[Address(RVA = "0x1976934", Offset = "0x1976934", VA = "0x1976934")]
	private static void Copy(int vertexcount, Vector2[] src, Vector2[] dst, ref int offset)
	{
	}

	[Token(Token = "0x6002320")]
	[Address(RVA = "0x19769E8", Offset = "0x19769E8", VA = "0x19769E8")]
	private static void CopyColors(int vertexcount, Color[] src, Color[] dst, ref int offset)
	{
	}

	[Token(Token = "0x6002321")]
	[Address(RVA = "0x1976740", Offset = "0x1976740", VA = "0x1976740")]
	private static void CopyTangents(int vertexcount, Vector4[] src, Vector4[] dst, ref int offset, Matrix4x4 transform)
	{
	}
}
[Token(Token = "0x20004FB")]
[ExecuteInEditMode]
public class Water : MonoBehaviour
{
	[Token(Token = "0x20004FC")]
	public enum WaterMode
	{
		[Token(Token = "0x4001946")]
		Simple,
		[Token(Token = "0x4001947")]
		Reflective,
		[Token(Token = "0x4001948")]
		Refractive
	}

	[Token(Token = "0x4001936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public WaterMode m_WaterMode;

	[Token(Token = "0x4001937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool m_DisablePixelLights;

	[Token(Token = "0x4001938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int m_TextureSize;

	[Token(Token = "0x4001939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float m_ClipPlaneOffset;

	[Token(Token = "0x400193A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public LayerMask m_ReflectLayers;

	[Token(Token = "0x400193B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LayerMask m_RefractLayers;

	[Token(Token = "0x400193C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Dictionary<Camera, Camera> m_ReflectionCameras;

	[Token(Token = "0x400193D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<Camera, Camera> m_RefractionCameras;

	[Token(Token = "0x400193E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private RenderTexture m_ReflectionTexture;

	[Token(Token = "0x400193F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RenderTexture m_RefractionTexture;

	[Token(Token = "0x4001940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private WaterMode m_HardwareWaterSupport;

	[Token(Token = "0x4001941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int m_OldReflectionTextureSize;

	[Token(Token = "0x4001942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int m_OldRefractionTextureSize;

	[Token(Token = "0x4001943")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool s_InsideWater;

	[Token(Token = "0x4001944")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Renderer renderer;

	[Token(Token = "0x6002322")]
	[Address(RVA = "0x21E7C08", Offset = "0x21E7C08", VA = "0x21E7C08")]
	public Water()
	{
	}

	[Token(Token = "0x6002323")]
	[Address(RVA = "0x21E7CFC", Offset = "0x21E7CFC", VA = "0x21E7CFC")]
	private void Start()
	{
	}

	[Token(Token = "0x6002324")]
	[Address(RVA = "0x21E7D64", Offset = "0x21E7D64", VA = "0x21E7D64")]
	public void OnWillRenderObject()
	{
	}

	[Token(Token = "0x6002325")]
	[Address(RVA = "0x21E90D4", Offset = "0x21E90D4", VA = "0x21E90D4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6002326")]
	[Address(RVA = "0x21E9580", Offset = "0x21E9580", VA = "0x21E9580")]
	private void Update()
	{
	}

	[Token(Token = "0x6002327")]
	[Address(RVA = "0x21E8364", Offset = "0x21E8364", VA = "0x21E8364")]
	private void UpdateCameraModes(Camera src, Camera dest)
	{
	}

	[Token(Token = "0x6002328")]
	[Address(RVA = "0x21E8308", Offset = "0x21E8308", VA = "0x21E8308")]
	private void CreateWaterObjects(Camera currentCamera, out Camera reflectionCamera, out Camera refractionCamera)
	{
	}

	[Token(Token = "0x6002329")]
	[Address(RVA = "0x21E8300", Offset = "0x21E8300", VA = "0x21E8300")]
	private WaterMode GetWaterMode()
	{
		return default(WaterMode);
	}

	[Token(Token = "0x600232A")]
	[Address(RVA = "0x21E810C", Offset = "0x21E810C", VA = "0x21E810C")]
	private WaterMode FindHardwareWaterSupport()
	{
		return default(WaterMode);
	}

	[Token(Token = "0x600232B")]
	[Address(RVA = "0x21E9CC4", Offset = "0x21E9CC4", VA = "0x21E9CC4")]
	private static float sgn(float a)
	{
		return default(float);
	}

	[Token(Token = "0x600232C")]
	[Address(RVA = "0x21E8AEC", Offset = "0x21E8AEC", VA = "0x21E8AEC")]
	private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
	{
		return default(Vector4);
	}

	[Token(Token = "0x600232D")]
	[Address(RVA = "0x21E8D34", Offset = "0x21E8D34", VA = "0x21E8D34")]
	private static void CalculateObliqueMatrix(ref Matrix4x4 projection, Vector4 clipPlane)
	{
	}

	[Token(Token = "0x600232E")]
	[Address(RVA = "0x21E8808", Offset = "0x21E8808", VA = "0x21E8808")]
	private static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
	{
	}
}
[Token(Token = "0x20004FD")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA5D28", Offset = "0xEA5D28")]
public class Displace : MonoBehaviour
{
	[Token(Token = "0x6002330")]
	[Address(RVA = "0x1923E24", Offset = "0x1923E24", VA = "0x1923E24")]
	public Displace()
	{
	}

	[Token(Token = "0x6002331")]
	[Address(RVA = "0x1923E2C", Offset = "0x1923E2C", VA = "0x1923E2C")]
	public void Awake()
	{
	}

	[Token(Token = "0x6002332")]
	[Address(RVA = "0x1923E54", Offset = "0x1923E54", VA = "0x1923E54")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6002333")]
	[Address(RVA = "0x1923EB8", Offset = "0x1923EB8", VA = "0x1923EB8")]
	public void OnDisable()
	{
	}
}
[Token(Token = "0x20004FE")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA5DB0", Offset = "0xEA5DB0")]
public class GerstnerDisplace : Displace
{
	[Token(Token = "0x6002334")]
	[Address(RVA = "0x19BB524", Offset = "0x19BB524", VA = "0x19BB524")]
	public GerstnerDisplace()
	{
	}
}
[Token(Token = "0x20004FF")]
public class MeshContainer
{
	[Token(Token = "0x4001949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public Mesh mesh;

	[Token(Token = "0x400194A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3[] vertices;

	[Token(Token = "0x400194B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3[] normals;

	[Token(Token = "0x6002335")]
	[Address(RVA = "0x1976AF8", Offset = "0x1976AF8", VA = "0x1976AF8")]
	public MeshContainer(Mesh m)
	{
	}

	[Token(Token = "0x6002336")]
	[Address(RVA = "0x1976B5C", Offset = "0x1976B5C", VA = "0x1976B5C")]
	public void Update()
	{
	}
}
[Token(Token = "0x2000500")]
[ExecuteInEditMode]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA5E38", Offset = "0xEA5E38")]
public class PlanarReflection : MonoBehaviour
{
	[Token(Token = "0x400194C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public LayerMask reflectionMask;

	[Token(Token = "0x400194D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool reflectSkybox;

	[Token(Token = "0x400194E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Color clearColor;

	[Token(Token = "0x400194F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public string reflectionSampler;

	[Token(Token = "0x4001950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float clipPlaneOffset;

	[Token(Token = "0x4001951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 oldpos;

	[Token(Token = "0x4001952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera reflectionCamera;

	[Token(Token = "0x4001953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Material sharedMaterial;

	[Token(Token = "0x4001954")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<Camera, bool> helperCameras;

	[Token(Token = "0x6002337")]
	[Address(RVA = "0x1B18CC0", Offset = "0x1B18CC0", VA = "0x1B18CC0")]
	public PlanarReflection()
	{
	}

	[Token(Token = "0x6002338")]
	[Address(RVA = "0x1B18DB4", Offset = "0x1B18DB4", VA = "0x1B18DB4")]
	public void Start()
	{
	}

	[Token(Token = "0x6002339")]
	[Address(RVA = "0x1B18F70", Offset = "0x1B18F70", VA = "0x1B18F70")]
	private Camera CreateReflectionCameraFor(Camera cam)
	{
		return null;
	}

	[Token(Token = "0x600233A")]
	[Address(RVA = "0x1B19414", Offset = "0x1B19414", VA = "0x1B19414")]
	private void SetStandardCameraParameter(Camera cam, LayerMask mask)
	{
	}

	[Token(Token = "0x600233B")]
	[Address(RVA = "0x1B19518", Offset = "0x1B19518", VA = "0x1B19518")]
	private RenderTexture CreateTextureFor(Camera cam)
	{
		return null;
	}

	[Token(Token = "0x600233C")]
	[Address(RVA = "0x1B1966C", Offset = "0x1B1966C", VA = "0x1B1966C")]
	public void RenderHelpCameras(Camera currentCam)
	{
	}

	[Token(Token = "0x600233D")]
	[Address(RVA = "0x1B1A88C", Offset = "0x1B1A88C", VA = "0x1B1A88C")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x600233E")]
	[Address(RVA = "0x1B1A8F8", Offset = "0x1B1A8F8", VA = "0x1B1A8F8")]
	public void WaterTileBeingRendered(Transform tr, Camera currentCam)
	{
	}

	[Token(Token = "0x600233F")]
	[Address(RVA = "0x1B1AA30", Offset = "0x1B1AA30", VA = "0x1B1AA30")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x6002340")]
	[Address(RVA = "0x1B1AAB0", Offset = "0x1B1AAB0", VA = "0x1B1AAB0")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6002341")]
	[Address(RVA = "0x1B19834", Offset = "0x1B19834", VA = "0x1B19834")]
	private void RenderReflectionFor(Camera cam, Camera reflectCamera)
	{
	}

	[Token(Token = "0x6002342")]
	[Address(RVA = "0x1B1AB30", Offset = "0x1B1AB30", VA = "0x1B1AB30")]
	private void SaneCameraSettings(Camera helperCam)
	{
	}

	[Token(Token = "0x6002343")]
	[Address(RVA = "0x1B1B190", Offset = "0x1B1B190", VA = "0x1B1B190")]
	private static Matrix4x4 CalculateObliqueMatrix(Matrix4x4 projection, Vector4 clipPlane)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6002344")]
	[Address(RVA = "0x1B1ABE0", Offset = "0x1B1ABE0", VA = "0x1B1ABE0")]
	private static Matrix4x4 CalculateReflectionMatrix(Matrix4x4 reflectionMat, Vector4 plane)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6002345")]
	[Address(RVA = "0x1B1B594", Offset = "0x1B1B594", VA = "0x1B1B594")]
	private static float sgn(float a)
	{
		return default(float);
	}

	[Token(Token = "0x6002346")]
	[Address(RVA = "0x1B1AF48", Offset = "0x1B1AF48", VA = "0x1B1AF48")]
	private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
	{
		return default(Vector4);
	}
}
[Token(Token = "0x2000501")]
[AttributeAttribute(Name = "RequireComponent", RVA = "0xEA5EC0", Offset = "0xEA5EC0")]
[ExecuteInEditMode]
public class SpecularLighting : MonoBehaviour
{
	[Token(Token = "0x4001955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Transform specularLight;

	[Token(Token = "0x4001956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private WaterBase waterBase;

	[Token(Token = "0x6002347")]
	[Address(RVA = "0x6A5FD4", Offset = "0x6A5FD4", VA = "0x6A5FD4")]
	public SpecularLighting()
	{
	}

	[Token(Token = "0x6002348")]
	[Address(RVA = "0x6A5FDC", Offset = "0x6A5FDC", VA = "0x6A5FDC")]
	public void Start()
	{
	}

	[Token(Token = "0x6002349")]
	[Address(RVA = "0x6A6134", Offset = "0x6A6134", VA = "0x6A6134")]
	public void Update()
	{
	}
}
[Token(Token = "0x2000502")]
public enum WaterQuality
{
	[Token(Token = "0x4001958")]
	High = 2,
	[Token(Token = "0x4001959")]
	Medium = 1,
	[Token(Token = "0x400195A")]
	Low = 0
}
[Token(Token = "0x2000503")]
[ExecuteInEditMode]
public class WaterBase : MonoBehaviour
{
	[Token(Token = "0x400195B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Material sharedMaterial;

	[Token(Token = "0x400195C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public WaterQuality waterQuality;

	[Token(Token = "0x400195D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool edgeBlend;

	[Token(Token = "0x600234A")]
	[Address(RVA = "0x21E9CFC", Offset = "0x21E9CFC", VA = "0x21E9CFC")]
	public WaterBase()
	{
	}

	[Token(Token = "0x600234B")]
	[Address(RVA = "0x21E9D14", Offset = "0x21E9D14", VA = "0x21E9D14")]
	public void UpdateShader()
	{
	}

	[Token(Token = "0x600234C")]
	[Address(RVA = "0x21E9EF8", Offset = "0x21E9EF8", VA = "0x21E9EF8")]
	public void WaterTileBeingRendered(Transform tr, Camera currentCam)
	{
	}

	[Token(Token = "0x600234D")]
	[Address(RVA = "0x21E9FE0", Offset = "0x21E9FE0", VA = "0x21E9FE0")]
	public void Update()
	{
	}
}
[Token(Token = "0x2000504")]
[ExecuteInEditMode]
public class WaterTile : MonoBehaviour
{
	[Token(Token = "0x400195E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public PlanarReflection reflection;

	[Token(Token = "0x400195F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public WaterBase waterBase;

	[Token(Token = "0x600234E")]
	[Address(RVA = "0x21EA07C", Offset = "0x21EA07C", VA = "0x21EA07C")]
	public WaterTile()
	{
	}

	[Token(Token = "0x600234F")]
	[Address(RVA = "0x21EA084", Offset = "0x21EA084", VA = "0x21EA084")]
	public void Start()
	{
	}

	[Token(Token = "0x6002350")]
	[Address(RVA = "0x21EA088", Offset = "0x21EA088", VA = "0x21EA088")]
	private void AcquireComponents()
	{
	}

	[Token(Token = "0x6002351")]
	[Address(RVA = "0x21EA314", Offset = "0x21EA314", VA = "0x21EA314")]
	public void OnWillRenderObject()
	{
	}
}
[Token(Token = "0x2000550")]
[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA5F78", Offset = "0xEA5F78")]
internal sealed class <>__AnonType0<<Type>__T, <List>__T>
{
	[Token(Token = "0x4001B0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xEA5F88", Offset = "0xEA5F88")]
	private readonly <Type>__T <Type>;

	[Token(Token = "0x4001B0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xEA5F9C", Offset = "0xEA5F9C")]
	private readonly <List>__T <List>;

	[Token(Token = "0x170002D0")]
	public <Type>__T Type
	{
		[Token(Token = "0x60024D5")]
		get
		{
			return (<Type>__T)null;
		}
	}

	[Token(Token = "0x170002D1")]
	public <List>__T List
	{
		[Token(Token = "0x60024D6")]
		get
		{
			return (<List>__T)null;
		}
	}

	[Token(Token = "0x60024D4")]
	[DebuggerHidden]
	public <>__AnonType0(<Type>__T Type, <List>__T List)
	{
	}

	[Token(Token = "0x60024D7")]
	[DebuggerHidden]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60024D8")]
	[DebuggerHidden]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x60024D9")]
	[DebuggerHidden]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000551")]
[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xEA5FF0", Offset = "0xEA5FF0")]
internal sealed class <>__AnonType1<<Name>__T, <Components>__T>
{
	[Token(Token = "0x4001B0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xEA6000", Offset = "0xEA6000")]
	private readonly <Name>__T <Name>;

	[Token(Token = "0x4001B0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	[AttributeAttribute(Name = "DebuggerBrowsableAttribute", RVA = "0xEA6014", Offset = "0xEA6014")]
	private readonly <Components>__T <Components>;

	[Token(Token = "0x170002D2")]
	public <Name>__T Name
	{
		[Token(Token = "0x60024DB")]
		get
		{
			return (<Name>__T)null;
		}
	}

	[Token(Token = "0x170002D3")]
	public <Components>__T Components
	{
		[Token(Token = "0x60024DC")]
		get
		{
			return (<Components>__T)null;
		}
	}

	[Token(Token = "0x60024DA")]
	[DebuggerHidden]
	public <>__AnonType1(<Name>__T Name, <Components>__T Components)
	{
	}

	[Token(Token = "0x60024DD")]
	[DebuggerHidden]
	public override bool Equals(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x60024DE")]
	[DebuggerHidden]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x60024DF")]
	[DebuggerHidden]
	public override string ToString()
	{
		return null;
	}
}
