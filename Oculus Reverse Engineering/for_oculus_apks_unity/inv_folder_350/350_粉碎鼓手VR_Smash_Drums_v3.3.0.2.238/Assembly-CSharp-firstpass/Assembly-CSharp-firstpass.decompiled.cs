using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using Febucci.Attributes;
using Febucci.UI.Core;
using FluffyUnderware.Curvy.Controllers;
using FluffyUnderware.Curvy.Generator;
using FluffyUnderware.Curvy.Generator.Modules;
using FluffyUnderware.Curvy.ThirdParty.LibTessDotNet;
using FluffyUnderware.DevTools;
using FullSerializer.Internal;
using FullSerializer.Internal.DirectConverters;
using Il2CppDummyDll;
using JetBrains.Annotations;
using MEC;
using RootMotion.FinalIK;
using TMPro;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Events;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.UI;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000004")]
public class AnimationHelper : MonoBehaviour
{
	[Token(Token = "0x6000012")]
	[Address(RVA = "0x11F7EB4", Offset = "0x11F7EB4", VA = "0x11F7EB4")]
	public void Play(Animation animation)
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0x11F7ECC", Offset = "0x11F7ECC", VA = "0x11F7ECC")]
	public void RewindThenPlay(Animation animation)
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0x11F7EF8", Offset = "0x11F7EF8", VA = "0x11F7EF8")]
	public AnimationHelper()
	{
	}
}
[Token(Token = "0x2000005")]
public class MixingAnimator : MonoBehaviour
{
	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ModifierVariableMixShapes VariableMixShapes;

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x11F7F00", Offset = "0x11F7F00", VA = "0x11F7F00")]
	private void Update()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x11F7F90", Offset = "0x11F7F90", VA = "0x11F7F90")]
	public MixingAnimator()
	{
	}
}
[Token(Token = "0x2000006")]
public class SinusoidalMover : MonoBehaviour
{
	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float MovementAmplitude;

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x11F7F98", Offset = "0x11F7F98", VA = "0x11F7F98")]
	private void Update()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x11F8034", Offset = "0x11F8034", VA = "0x11F8034")]
	public SinusoidalMover()
	{
	}
}
[Token(Token = "0x2000007")]
public class ToggleBehaviourByTrigger : MonoBehaviour
{
	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Behaviour UIElement;

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x11F8044", Offset = "0x11F8044", VA = "0x11F8044")]
	private void OnTriggerEnter()
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x11F80DC", Offset = "0x11F80DC", VA = "0x11F80DC")]
	public ToggleBehaviourByTrigger()
	{
	}
}
[Token(Token = "0x2000008")]
public static class MECExtensionMethods2
{
	[Token(Token = "0x2000009")]
	[CompilerGenerated]
	private sealed class <Delay>d__0 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400000D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400000E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400000F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float timeToDelay;

		[Token(Token = "0x4000010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x1700000A")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000032")]
			[Address(RVA = "0x11F8CE0", Offset = "0x11F8CE0", VA = "0x11F8CE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700000B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000034")]
			[Address(RVA = "0x11F8D28", Offset = "0x11F8D28", VA = "0x11F8D28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600002F")]
		[Address(RVA = "0x11F815C", Offset = "0x11F815C", VA = "0x11F815C")]
		[DebuggerHidden]
		public <Delay>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x6000030")]
		[Address(RVA = "0x11F8B38", Offset = "0x11F8B38", VA = "0x11F8B38", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000031")]
		[Address(RVA = "0x11F8B3C", Offset = "0x11F8B3C", VA = "0x11F8B3C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000033")]
		[Address(RVA = "0x11F8CE8", Offset = "0x11F8CE8", VA = "0x11F8CE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200000A")]
	[CompilerGenerated]
	private sealed class <Delay>d__1 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Func<bool> condition;

		[Token(Token = "0x4000014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x1700000C")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000038")]
			[Address(RVA = "0x11F8F04", Offset = "0x11F8F04", VA = "0x11F8F04", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700000D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600003A")]
			[Address(RVA = "0x11F8F4C", Offset = "0x11F8F4C", VA = "0x11F8F4C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000035")]
		[Address(RVA = "0x11F81F8", Offset = "0x11F81F8", VA = "0x11F81F8")]
		[DebuggerHidden]
		public <Delay>d__1(int <>1__state)
		{
		}

		[Token(Token = "0x6000036")]
		[Address(RVA = "0x11F8D84", Offset = "0x11F8D84", VA = "0x11F8D84", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000037")]
		[Address(RVA = "0x11F8D88", Offset = "0x11F8D88", VA = "0x11F8D88", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000039")]
		[Address(RVA = "0x11F8F0C", Offset = "0x11F8F0C", VA = "0x11F8F0C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200000B")]
	[CompilerGenerated]
	private sealed class <Delay>d__2<T> : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>1__state;

		[Token(Token = "0x4000016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float <>2__current;

		[Token(Token = "0x4000017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Func<T, bool> condition;

		[Token(Token = "0x4000018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T data;

		[Token(Token = "0x4000019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x1700000E")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600003E")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700000F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000040")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600003B")]
		[DebuggerHidden]
		public <Delay>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x600003C")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600003D")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600003F")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200000C")]
	[CompilerGenerated]
	private sealed class <DelayFrames>d__3 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400001A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400001B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400001C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int framesToDelay;

		[Token(Token = "0x400001D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x17000010")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000044")]
			[Address(RVA = "0x11F911C", Offset = "0x11F911C", VA = "0x11F911C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000011")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000046")]
			[Address(RVA = "0x11F9164", Offset = "0x11F9164", VA = "0x11F9164", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000041")]
		[Address(RVA = "0x11F8298", Offset = "0x11F8298", VA = "0x11F8298")]
		[DebuggerHidden]
		public <DelayFrames>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x6000042")]
		[Address(RVA = "0x11F8FA8", Offset = "0x11F8FA8", VA = "0x11F8FA8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000043")]
		[Address(RVA = "0x11F8FAC", Offset = "0x11F8FAC", VA = "0x11F8FAC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000045")]
		[Address(RVA = "0x11F9124", Offset = "0x11F9124", VA = "0x11F9124", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200000D")]
	[CompilerGenerated]
	private sealed class <CancelWith>d__4 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400001E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400001F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x4000021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject gameObject;

		[Token(Token = "0x17000012")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600004A")]
			[Address(RVA = "0x11F93C4", Offset = "0x11F93C4", VA = "0x11F93C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000013")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600004C")]
			[Address(RVA = "0x11F940C", Offset = "0x11F940C", VA = "0x11F940C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000047")]
		[Address(RVA = "0x11F8334", Offset = "0x11F8334", VA = "0x11F8334")]
		[DebuggerHidden]
		public <CancelWith>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000048")]
		[Address(RVA = "0x11F91C0", Offset = "0x11F91C0", VA = "0x11F91C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000049")]
		[Address(RVA = "0x11F91C4", Offset = "0x11F91C4", VA = "0x11F91C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600004B")]
		[Address(RVA = "0x11F93CC", Offset = "0x11F93CC", VA = "0x11F93CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200000E")]
	[CompilerGenerated]
	private sealed class <CancelWith>d__5 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x4000025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject gameObject1;

		[Token(Token = "0x4000026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject gameObject2;

		[Token(Token = "0x17000014")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000050")]
			[Address(RVA = "0x11F96A4", Offset = "0x11F96A4", VA = "0x11F96A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000015")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000052")]
			[Address(RVA = "0x11F96EC", Offset = "0x11F96EC", VA = "0x11F96EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600004D")]
		[Address(RVA = "0x11F83D8", Offset = "0x11F83D8", VA = "0x11F83D8")]
		[DebuggerHidden]
		public <CancelWith>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600004E")]
		[Address(RVA = "0x11F9468", Offset = "0x11F9468", VA = "0x11F9468", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600004F")]
		[Address(RVA = "0x11F946C", Offset = "0x11F946C", VA = "0x11F946C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000051")]
		[Address(RVA = "0x11F96AC", Offset = "0x11F96AC", VA = "0x11F96AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200000F")]
	[CompilerGenerated]
	private sealed class <CancelWith>d__6<T> : IEnumerator<float>, IEnumerator, IDisposable where T : MonoBehaviour
	{
		[Token(Token = "0x4000027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>1__state;

		[Token(Token = "0x4000028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float <>2__current;

		[Token(Token = "0x4000029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T script;

		[Token(Token = "0x400002A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x400002B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GameObject <myGO>5__2;

		[Token(Token = "0x17000016")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000056")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000017")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000058")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000053")]
		[DebuggerHidden]
		public <CancelWith>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000054")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000055")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000057")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000010")]
	[CompilerGenerated]
	private sealed class <CancelWith>d__7 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400002C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400002D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400002E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Func<bool> condition;

		[Token(Token = "0x400002F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x17000018")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600005C")]
			[Address(RVA = "0x11F9934", Offset = "0x11F9934", VA = "0x11F9934", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000019")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600005E")]
			[Address(RVA = "0x11F997C", Offset = "0x11F997C", VA = "0x11F997C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000059")]
		[Address(RVA = "0x11F8474", Offset = "0x11F8474", VA = "0x11F8474")]
		[DebuggerHidden]
		public <CancelWith>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600005A")]
		[Address(RVA = "0x11F9748", Offset = "0x11F9748", VA = "0x11F9748", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600005B")]
		[Address(RVA = "0x11F974C", Offset = "0x11F974C", VA = "0x11F974C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600005D")]
		[Address(RVA = "0x11F993C", Offset = "0x11F993C", VA = "0x11F993C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000011")]
	[CompilerGenerated]
	private sealed class <PauseWith>d__8 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject gameObject;

		[Token(Token = "0x4000033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x1700001A")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000062")]
			[Address(RVA = "0x11F9BF0", Offset = "0x11F9BF0", VA = "0x11F9BF0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700001B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000064")]
			[Address(RVA = "0x11F9C38", Offset = "0x11F9C38", VA = "0x11F9C38", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600005F")]
		[Address(RVA = "0x11F8510", Offset = "0x11F8510", VA = "0x11F8510")]
		[DebuggerHidden]
		public <PauseWith>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000060")]
		[Address(RVA = "0x11F99D8", Offset = "0x11F99D8", VA = "0x11F99D8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000061")]
		[Address(RVA = "0x11F99DC", Offset = "0x11F99DC", VA = "0x11F99DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000063")]
		[Address(RVA = "0x11F9BF8", Offset = "0x11F9BF8", VA = "0x11F9BF8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000012")]
	[CompilerGenerated]
	private sealed class <PauseWith>d__9 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject gameObject1;

		[Token(Token = "0x4000037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject gameObject2;

		[Token(Token = "0x4000038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x1700001C")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000068")]
			[Address(RVA = "0x11F9EE4", Offset = "0x11F9EE4", VA = "0x11F9EE4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700001D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600006A")]
			[Address(RVA = "0x11F9F2C", Offset = "0x11F9F2C", VA = "0x11F9F2C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000065")]
		[Address(RVA = "0x11F85B4", Offset = "0x11F85B4", VA = "0x11F85B4")]
		[DebuggerHidden]
		public <PauseWith>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000066")]
		[Address(RVA = "0x11F9C94", Offset = "0x11F9C94", VA = "0x11F9C94", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000067")]
		[Address(RVA = "0x11F9C98", Offset = "0x11F9C98", VA = "0x11F9C98", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000069")]
		[Address(RVA = "0x11F9EEC", Offset = "0x11F9EEC", VA = "0x11F9EEC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000013")]
	[CompilerGenerated]
	private sealed class <PauseWith>d__10<T> : IEnumerator<float>, IEnumerator, IDisposable where T : MonoBehaviour
	{
		[Token(Token = "0x4000039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>1__state;

		[Token(Token = "0x400003A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private float <>2__current;

		[Token(Token = "0x400003B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T script;

		[Token(Token = "0x400003C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x400003D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GameObject <myGO>5__2;

		[Token(Token = "0x1700001E")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600006E")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700001F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000070")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600006B")]
		[DebuggerHidden]
		public <PauseWith>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x600006C")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600006D")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600006F")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000014")]
	[CompilerGenerated]
	private sealed class <PauseWith>d__11 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400003E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400003F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Func<bool> condition;

		[Token(Token = "0x4000041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x17000020")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000074")]
			[Address(RVA = "0x11FA174", Offset = "0x11FA174", VA = "0x11FA174", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000021")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000076")]
			[Address(RVA = "0x11FA1BC", Offset = "0x11FA1BC", VA = "0x11FA1BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000071")]
		[Address(RVA = "0x11F8650", Offset = "0x11F8650", VA = "0x11F8650")]
		[DebuggerHidden]
		public <PauseWith>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000072")]
		[Address(RVA = "0x11F9F88", Offset = "0x11F9F88", VA = "0x11F9F88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000073")]
		[Address(RVA = "0x11F9F8C", Offset = "0x11F9F8C", VA = "0x11F9F8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000075")]
		[Address(RVA = "0x11FA17C", Offset = "0x11FA17C", VA = "0x11FA17C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000015")]
	[CompilerGenerated]
	private sealed class <KillWith>d__12 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x4000045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CoroutineHandle otherCoroutine;

		[Token(Token = "0x17000022")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600007A")]
			[Address(RVA = "0x11FA3C8", Offset = "0x11FA3C8", VA = "0x11FA3C8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000023")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600007C")]
			[Address(RVA = "0x11FA410", Offset = "0x11FA410", VA = "0x11FA410", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000077")]
		[Address(RVA = "0x11F86F0", Offset = "0x11F86F0", VA = "0x11F86F0")]
		[DebuggerHidden]
		public <KillWith>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000078")]
		[Address(RVA = "0x11FA218", Offset = "0x11FA218", VA = "0x11FA218", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000079")]
		[Address(RVA = "0x11FA21C", Offset = "0x11FA21C", VA = "0x11FA21C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600007B")]
		[Address(RVA = "0x11FA3D0", Offset = "0x11FA3D0", VA = "0x11FA3D0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000016")]
	[CompilerGenerated]
	private sealed class <Append>d__13 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x4000049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IEnumerator<float> nextCoroutine;

		[Token(Token = "0x17000024")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000080")]
			[Address(RVA = "0x11FA6AC", Offset = "0x11FA6AC", VA = "0x11FA6AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000025")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000082")]
			[Address(RVA = "0x11FA6F4", Offset = "0x11FA6F4", VA = "0x11FA6F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600007D")]
		[Address(RVA = "0x11F878C", Offset = "0x11F878C", VA = "0x11F878C")]
		[DebuggerHidden]
		public <Append>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x600007E")]
		[Address(RVA = "0x11FA46C", Offset = "0x11FA46C", VA = "0x11FA46C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600007F")]
		[Address(RVA = "0x11FA470", Offset = "0x11FA470", VA = "0x11FA470", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000081")]
		[Address(RVA = "0x11FA6B4", Offset = "0x11FA6B4", VA = "0x11FA6B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000017")]
	[CompilerGenerated]
	private sealed class <Append>d__14 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400004A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400004B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400004C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x400004D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action onDone;

		[Token(Token = "0x17000026")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000086")]
			[Address(RVA = "0x11FA8B0", Offset = "0x11FA8B0", VA = "0x11FA8B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000027")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000088")]
			[Address(RVA = "0x11FA8F8", Offset = "0x11FA8F8", VA = "0x11FA8F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000083")]
		[Address(RVA = "0x11F8828", Offset = "0x11F8828", VA = "0x11F8828")]
		[DebuggerHidden]
		public <Append>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x6000084")]
		[Address(RVA = "0x11FA750", Offset = "0x11FA750", VA = "0x11FA750", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000085")]
		[Address(RVA = "0x11FA754", Offset = "0x11FA754", VA = "0x11FA754", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000087")]
		[Address(RVA = "0x11FA8B8", Offset = "0x11FA8B8", VA = "0x11FA8B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000018")]
	[CompilerGenerated]
	private sealed class <Prepend>d__15 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400004E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400004F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IEnumerator<float> lastCoroutine;

		[Token(Token = "0x4000051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x17000028")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600008C")]
			[Address(RVA = "0x11FABA8", Offset = "0x11FABA8", VA = "0x11FABA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000029")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600008E")]
			[Address(RVA = "0x11FABF0", Offset = "0x11FABF0", VA = "0x11FABF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000089")]
		[Address(RVA = "0x11F88C4", Offset = "0x11F88C4", VA = "0x11F88C4")]
		[DebuggerHidden]
		public <Prepend>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x600008A")]
		[Address(RVA = "0x11FA954", Offset = "0x11FA954", VA = "0x11FA954", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600008B")]
		[Address(RVA = "0x11FA958", Offset = "0x11FA958", VA = "0x11FA958", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600008D")]
		[Address(RVA = "0x11FABB0", Offset = "0x11FABB0", VA = "0x11FABB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000019")]
	[CompilerGenerated]
	private sealed class <Prepend>d__16 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action onStart;

		[Token(Token = "0x4000055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x1700002A")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000092")]
			[Address(RVA = "0x11FADBC", Offset = "0x11FADBC", VA = "0x11FADBC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700002B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000094")]
			[Address(RVA = "0x11FAE04", Offset = "0x11FAE04", VA = "0x11FAE04", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600008F")]
		[Address(RVA = "0x11F8960", Offset = "0x11F8960", VA = "0x11F8960")]
		[DebuggerHidden]
		public <Prepend>d__16(int <>1__state)
		{
		}

		[Token(Token = "0x6000090")]
		[Address(RVA = "0x11FAC4C", Offset = "0x11FAC4C", VA = "0x11FAC4C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000091")]
		[Address(RVA = "0x11FAC50", Offset = "0x11FAC50", VA = "0x11FAC50", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000093")]
		[Address(RVA = "0x11FADC4", Offset = "0x11FADC4", VA = "0x11FADC4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200001A")]
	[CompilerGenerated]
	private sealed class <Superimpose>d__18 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x4000058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IEnumerator<float> coroutineA;

		[Token(Token = "0x4000059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Timing instance;

		[Token(Token = "0x400005A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IEnumerator<float> coroutineB;

		[Token(Token = "0x1700002C")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x6000098")]
			[Address(RVA = "0x11FB48C", Offset = "0x11FB48C", VA = "0x11FB48C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700002D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600009A")]
			[Address(RVA = "0x11FB4D4", Offset = "0x11FB4D4", VA = "0x11FB4D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000095")]
		[Address(RVA = "0x11F8A74", Offset = "0x11F8A74", VA = "0x11F8A74")]
		[DebuggerHidden]
		public <Superimpose>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000096")]
		[Address(RVA = "0x11FAE60", Offset = "0x11FAE60", VA = "0x11FAE60", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000097")]
		[Address(RVA = "0x11FAE64", Offset = "0x11FAE64", VA = "0x11FAE64", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000099")]
		[Address(RVA = "0x11FB494", Offset = "0x11FB494", VA = "0x11FB494", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200001B")]
	[CompilerGenerated]
	private sealed class <Hijack>d__19 : IEnumerator<float>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400005B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400005C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private float <>2__current;

		[Token(Token = "0x400005D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Func<float, float> newReturn;

		[Token(Token = "0x400005E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IEnumerator<float> coroutine;

		[Token(Token = "0x1700002E")]
		private float System.Collections.Generic.IEnumerator<System.Single>.Current
		{
			[Token(Token = "0x600009E")]
			[Address(RVA = "0x11FB6A8", Offset = "0x11FB6A8", VA = "0x11FB6A8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700002F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60000A0")]
			[Address(RVA = "0x11FB6F0", Offset = "0x11FB6F0", VA = "0x11FB6F0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600009B")]
		[Address(RVA = "0x11F8B10", Offset = "0x11F8B10", VA = "0x11F8B10")]
		[DebuggerHidden]
		public <Hijack>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x600009C")]
		[Address(RVA = "0x11FB530", Offset = "0x11FB530", VA = "0x11FB530", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600009D")]
		[Address(RVA = "0x11FB534", Offset = "0x11FB534", VA = "0x11FB534", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600009F")]
		[Address(RVA = "0x11FB6B0", Offset = "0x11FB6B0", VA = "0x11FB6B0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x11F80E4", Offset = "0x11F80E4", VA = "0x11F80E4")]
	[IteratorStateMachine(typeof(<Delay>d__0))]
	public static IEnumerator<float> Delay(this IEnumerator<float> coroutine, float timeToDelay)
	{
		return null;
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x11F8184", Offset = "0x11F8184", VA = "0x11F8184")]
	[IteratorStateMachine(typeof(<Delay>d__1))]
	public static IEnumerator<float> Delay(this IEnumerator<float> coroutine, Func<bool> condition)
	{
		return null;
	}

	[Token(Token = "0x600001D")]
	[IteratorStateMachine(typeof(<Delay>d__2<>))]
	public static IEnumerator<float> Delay<T>(this IEnumerator<float> coroutine, T data, Func<T, bool> condition)
	{
		return null;
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x11F8220", Offset = "0x11F8220", VA = "0x11F8220")]
	[IteratorStateMachine(typeof(<DelayFrames>d__3))]
	public static IEnumerator<float> DelayFrames(this IEnumerator<float> coroutine, int framesToDelay)
	{
		return null;
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x11F82C0", Offset = "0x11F82C0", VA = "0x11F82C0")]
	[IteratorStateMachine(typeof(<CancelWith>d__4))]
	public static IEnumerator<float> CancelWith(this IEnumerator<float> coroutine, GameObject gameObject)
	{
		return null;
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0x11F835C", Offset = "0x11F835C", VA = "0x11F835C")]
	[IteratorStateMachine(typeof(<CancelWith>d__5))]
	public static IEnumerator<float> CancelWith(this IEnumerator<float> coroutine, GameObject gameObject1, GameObject gameObject2)
	{
		return null;
	}

	[Token(Token = "0x6000021")]
	[IteratorStateMachine(typeof(<CancelWith>d__6<>))]
	public static IEnumerator<float> CancelWith<T>(this IEnumerator<float> coroutine, T script) where T : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x11F8400", Offset = "0x11F8400", VA = "0x11F8400")]
	[IteratorStateMachine(typeof(<CancelWith>d__7))]
	public static IEnumerator<float> CancelWith(this IEnumerator<float> coroutine, Func<bool> condition)
	{
		return null;
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x11F849C", Offset = "0x11F849C", VA = "0x11F849C")]
	[IteratorStateMachine(typeof(<PauseWith>d__8))]
	public static IEnumerator<float> PauseWith(this IEnumerator<float> coroutine, GameObject gameObject)
	{
		return null;
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x11F8538", Offset = "0x11F8538", VA = "0x11F8538")]
	[IteratorStateMachine(typeof(<PauseWith>d__9))]
	public static IEnumerator<float> PauseWith(this IEnumerator<float> coroutine, GameObject gameObject1, GameObject gameObject2)
	{
		return null;
	}

	[Token(Token = "0x6000025")]
	[IteratorStateMachine(typeof(<PauseWith>d__10<>))]
	public static IEnumerator<float> PauseWith<T>(this IEnumerator<float> coroutine, T script) where T : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x11F85DC", Offset = "0x11F85DC", VA = "0x11F85DC")]
	[IteratorStateMachine(typeof(<PauseWith>d__11))]
	public static IEnumerator<float> PauseWith(this IEnumerator<float> coroutine, Func<bool> condition)
	{
		return null;
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x11F8678", Offset = "0x11F8678", VA = "0x11F8678")]
	[IteratorStateMachine(typeof(<KillWith>d__12))]
	public static IEnumerator<float> KillWith(this IEnumerator<float> coroutine, CoroutineHandle otherCoroutine)
	{
		return null;
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x11F8718", Offset = "0x11F8718", VA = "0x11F8718")]
	[IteratorStateMachine(typeof(<Append>d__13))]
	public static IEnumerator<float> Append(this IEnumerator<float> coroutine, IEnumerator<float> nextCoroutine)
	{
		return null;
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x11F87B4", Offset = "0x11F87B4", VA = "0x11F87B4")]
	[IteratorStateMachine(typeof(<Append>d__14))]
	public static IEnumerator<float> Append(this IEnumerator<float> coroutine, Action onDone)
	{
		return null;
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x11F8850", Offset = "0x11F8850", VA = "0x11F8850")]
	[IteratorStateMachine(typeof(<Prepend>d__15))]
	public static IEnumerator<float> Prepend(this IEnumerator<float> coroutine, IEnumerator<float> lastCoroutine)
	{
		return null;
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x11F88EC", Offset = "0x11F88EC", VA = "0x11F88EC")]
	[IteratorStateMachine(typeof(<Prepend>d__16))]
	public static IEnumerator<float> Prepend(this IEnumerator<float> coroutine, Action onStart)
	{
		return null;
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0x11F8988", Offset = "0x11F8988", VA = "0x11F8988")]
	public static IEnumerator<float> Superimpose(this IEnumerator<float> coroutineA, IEnumerator<float> coroutineB)
	{
		return null;
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x11F89F8", Offset = "0x11F89F8", VA = "0x11F89F8")]
	[IteratorStateMachine(typeof(<Superimpose>d__18))]
	public static IEnumerator<float> Superimpose(this IEnumerator<float> coroutineA, IEnumerator<float> coroutineB, Timing instance)
	{
		return null;
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x11F8A9C", Offset = "0x11F8A9C", VA = "0x11F8A9C")]
	[IteratorStateMachine(typeof(<Hijack>d__19))]
	public static IEnumerator<float> Hijack(this IEnumerator<float> coroutine, Func<float, float> newReturn)
	{
		return null;
	}
}
namespace MEC
{
	[Token(Token = "0x200001C")]
	public class Timing : MonoBehaviour
	{
		[Token(Token = "0x200001D")]
		private struct ProcessIndex : IEquatable<ProcessIndex>
		{
			[Token(Token = "0x40000C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Segment seg;

			[Token(Token = "0x40000CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int i;

			[Token(Token = "0x60001AB")]
			[Address(RVA = "0x11FB74C", Offset = "0x11FB74C", VA = "0x11FB74C", Slot = "4")]
			public bool Equals(ProcessIndex other)
			{
				return default(bool);
			}

			[Token(Token = "0x60001AC")]
			[Address(RVA = "0x11FB774", Offset = "0x11FB774", VA = "0x11FB774", Slot = "0")]
			public override bool Equals(object other)
			{
				return default(bool);
			}

			[Token(Token = "0x60001AD")]
			[Address(RVA = "0x11FB7FC", Offset = "0x11FB7FC", VA = "0x11FB7FC")]
			public static bool operator ==(ProcessIndex a, ProcessIndex b)
			{
				return default(bool);
			}

			[Token(Token = "0x60001AE")]
			[Address(RVA = "0x11FB81C", Offset = "0x11FB81C", VA = "0x11FB81C")]
			public static bool operator !=(ProcessIndex a, ProcessIndex b)
			{
				return default(bool);
			}

			[Token(Token = "0x60001AF")]
			[Address(RVA = "0x11FB83C", Offset = "0x11FB83C", VA = "0x11FB83C", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}
		}

		[Token(Token = "0x200001E")]
		[CompilerGenerated]
		private sealed class <_EOFPumpWatcher>d__132 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40000CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40000CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Timing <>4__this;

			[Token(Token = "0x17000036")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60001B3")]
				[Address(RVA = "0x11FB914", Offset = "0x11FB914", VA = "0x11FB914", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000037")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60001B5")]
				[Address(RVA = "0x11FB95C", Offset = "0x11FB95C", VA = "0x11FB95C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60001B0")]
			[Address(RVA = "0x11FB85C", Offset = "0x11FB85C", VA = "0x11FB85C")]
			[DebuggerHidden]
			public <_EOFPumpWatcher>d__132(int <>1__state)
			{
			}

			[Token(Token = "0x60001B1")]
			[Address(RVA = "0x11FB884", Offset = "0x11FB884", VA = "0x11FB884", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60001B2")]
			[Address(RVA = "0x11FB888", Offset = "0x11FB888", VA = "0x11FB888", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60001B4")]
			[Address(RVA = "0x11FB91C", Offset = "0x11FB91C", VA = "0x11FB91C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200001F")]
		[CompilerGenerated]
		private sealed class <_EOFPump>d__133 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40000CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40000D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Timing <>4__this;

			[Token(Token = "0x17000038")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60001B9")]
				[Address(RVA = "0x11FC160", Offset = "0x11FC160", VA = "0x11FC160", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000039")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60001BB")]
				[Address(RVA = "0x11FC1A8", Offset = "0x11FC1A8", VA = "0x11FC1A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60001B6")]
			[Address(RVA = "0x11FB9B8", Offset = "0x11FB9B8", VA = "0x11FB9B8")]
			[DebuggerHidden]
			public <_EOFPump>d__133(int <>1__state)
			{
			}

			[Token(Token = "0x60001B7")]
			[Address(RVA = "0x11FB9E0", Offset = "0x11FB9E0", VA = "0x11FB9E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60001B8")]
			[Address(RVA = "0x11FB9E4", Offset = "0x11FB9E4", VA = "0x11FB9E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60001BA")]
			[Address(RVA = "0x11FC168", Offset = "0x11FC168", VA = "0x11FC168", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000020")]
		[CompilerGenerated]
		private sealed class <_StartWhenDone>d__275 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40000D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40000D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Timing <>4__this;

			[Token(Token = "0x40000D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CoroutineHandle handle;

			[Token(Token = "0x40000D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IEnumerator<float> proc;

			[Token(Token = "0x1700003A")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60001C0")]
				[Address(RVA = "0x11FC580", Offset = "0x11FC580", VA = "0x11FC580", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700003B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60001C2")]
				[Address(RVA = "0x11FC5C8", Offset = "0x11FC5C8", VA = "0x11FC5C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60001BC")]
			[Address(RVA = "0x11FC1B0", Offset = "0x11FC1B0", VA = "0x11FC1B0")]
			[DebuggerHidden]
			public <_StartWhenDone>d__275(int <>1__state)
			{
			}

			[Token(Token = "0x60001BD")]
			[Address(RVA = "0x11FC1D8", Offset = "0x11FC1D8", VA = "0x11FC1D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60001BE")]
			[Address(RVA = "0x11FC204", Offset = "0x11FC204", VA = "0x11FC204", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60001BF")]
			[Address(RVA = "0x11FC554", Offset = "0x11FC554", VA = "0x11FC554")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60001C1")]
			[Address(RVA = "0x11FC588", Offset = "0x11FC588", VA = "0x11FC588", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000021")]
		[CompilerGenerated]
		private sealed class <_StartWhenDone>d__280 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40000D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40000D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public UnityEngine.AsyncOperation operation;

			[Token(Token = "0x40000D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IEnumerator<float> pausedProc;

			[Token(Token = "0x1700003C")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60001C6")]
				[Address(RVA = "0x11FC770", Offset = "0x11FC770", VA = "0x11FC770", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700003D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60001C8")]
				[Address(RVA = "0x11FC7B8", Offset = "0x11FC7B8", VA = "0x11FC7B8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60001C3")]
			[Address(RVA = "0x11FC624", Offset = "0x11FC624", VA = "0x11FC624")]
			[DebuggerHidden]
			public <_StartWhenDone>d__280(int <>1__state)
			{
			}

			[Token(Token = "0x60001C4")]
			[Address(RVA = "0x11FC64C", Offset = "0x11FC64C", VA = "0x11FC64C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60001C5")]
			[Address(RVA = "0x11FC650", Offset = "0x11FC650", VA = "0x11FC650", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60001C7")]
			[Address(RVA = "0x11FC778", Offset = "0x11FC778", VA = "0x11FC778", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000022")]
		[CompilerGenerated]
		private sealed class <_StartWhenDone>d__282 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40000DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40000DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public CustomYieldInstruction operation;

			[Token(Token = "0x40000DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public IEnumerator<float> pausedProc;

			[Token(Token = "0x1700003E")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60001CC")]
				[Address(RVA = "0x11FC964", Offset = "0x11FC964", VA = "0x11FC964", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700003F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60001CE")]
				[Address(RVA = "0x11FC9AC", Offset = "0x11FC9AC", VA = "0x11FC9AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60001C9")]
			[Address(RVA = "0x11FC814", Offset = "0x11FC814", VA = "0x11FC814")]
			[DebuggerHidden]
			public <_StartWhenDone>d__282(int <>1__state)
			{
			}

			[Token(Token = "0x60001CA")]
			[Address(RVA = "0x11FC83C", Offset = "0x11FC83C", VA = "0x11FC83C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60001CB")]
			[Address(RVA = "0x11FC840", Offset = "0x11FC840", VA = "0x11FC840", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60001CD")]
			[Address(RVA = "0x11FC96C", Offset = "0x11FC96C", VA = "0x11FC96C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000023")]
		[CompilerGenerated]
		private sealed class <_StartWhenDone>d__287 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40000DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40000E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Func<bool> evaluatorFunc;

			[Token(Token = "0x40000E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool continueOn;

			[Token(Token = "0x40000E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IEnumerator<float> pausedProc;

			[Token(Token = "0x17000040")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60001D2")]
				[Address(RVA = "0x11FCB68", Offset = "0x11FCB68", VA = "0x11FCB68", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000041")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60001D4")]
				[Address(RVA = "0x11FCBB0", Offset = "0x11FCBB0", VA = "0x11FCBB0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60001CF")]
			[Address(RVA = "0x11FCA08", Offset = "0x11FCA08", VA = "0x11FCA08")]
			[DebuggerHidden]
			public <_StartWhenDone>d__287(int <>1__state)
			{
			}

			[Token(Token = "0x60001D0")]
			[Address(RVA = "0x11FCA30", Offset = "0x11FCA30", VA = "0x11FCA30", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60001D1")]
			[Address(RVA = "0x11FCA34", Offset = "0x11FCA34", VA = "0x11FCA34", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60001D3")]
			[Address(RVA = "0x11FCB70", Offset = "0x11FCB70", VA = "0x11FCB70", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000024")]
		[CompilerGenerated]
		private sealed class <_InjectDelay>d__288 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40000E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40000E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Timing <>4__this;

			[Token(Token = "0x40000E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float waitTime;

			[Token(Token = "0x40000E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IEnumerator<float> proc;

			[Token(Token = "0x17000042")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60001D8")]
				[Address(RVA = "0x11FCD60", Offset = "0x11FCD60", VA = "0x11FCD60", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000043")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60001DA")]
				[Address(RVA = "0x11FCDA8", Offset = "0x11FCDA8", VA = "0x11FCDA8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60001D5")]
			[Address(RVA = "0x11FCC0C", Offset = "0x11FCC0C", VA = "0x11FCC0C")]
			[DebuggerHidden]
			public <_InjectDelay>d__288(int <>1__state)
			{
			}

			[Token(Token = "0x60001D6")]
			[Address(RVA = "0x11FCC34", Offset = "0x11FCC34", VA = "0x11FCC34", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60001D7")]
			[Address(RVA = "0x11FCC38", Offset = "0x11FCC38", VA = "0x11FCC38", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60001D9")]
			[Address(RVA = "0x11FCD68", Offset = "0x11FCD68", VA = "0x11FCD68", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000025")]
		[CompilerGenerated]
		private sealed class <_DelayedCall>d__313 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40000E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40000EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Timing <>4__this;

			[Token(Token = "0x40000EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delay;

			[Token(Token = "0x40000EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject cancelWith;

			[Token(Token = "0x40000ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action action;

			[Token(Token = "0x17000044")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60001DE")]
				[Address(RVA = "0x11FCF00", Offset = "0x11FCF00", VA = "0x11FCF00", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000045")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60001E0")]
				[Address(RVA = "0x11FCF48", Offset = "0x11FCF48", VA = "0x11FCF48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60001DB")]
			[Address(RVA = "0x11FCE04", Offset = "0x11FCE04", VA = "0x11FCE04")]
			[DebuggerHidden]
			public <_DelayedCall>d__313(int <>1__state)
			{
			}

			[Token(Token = "0x60001DC")]
			[Address(RVA = "0x11FCE2C", Offset = "0x11FCE2C", VA = "0x11FCE2C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60001DD")]
			[Address(RVA = "0x11FCE30", Offset = "0x11FCE30", VA = "0x11FCE30", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60001DF")]
			[Address(RVA = "0x11FCF08", Offset = "0x11FCF08", VA = "0x11FCF08", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000026")]
		[CompilerGenerated]
		private sealed class <_WatchCall>d__334 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40000EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40000F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Timing <>4__this;

			[Token(Token = "0x40000F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float timeframe;

			[Token(Token = "0x40000F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public CoroutineHandle handle;

			[Token(Token = "0x40000F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Action onDone;

			[Token(Token = "0x40000F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public GameObject gObject;

			[Token(Token = "0x17000046")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60001E4")]
				[Address(RVA = "0x11FD0B8", Offset = "0x11FD0B8", VA = "0x11FD0B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000047")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60001E6")]
				[Address(RVA = "0x11FD100", Offset = "0x11FD100", VA = "0x11FD100", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60001E1")]
			[Address(RVA = "0x11FCFA4", Offset = "0x11FCFA4", VA = "0x11FCFA4")]
			[DebuggerHidden]
			public <_WatchCall>d__334(int <>1__state)
			{
			}

			[Token(Token = "0x60001E2")]
			[Address(RVA = "0x11FCFCC", Offset = "0x11FCFCC", VA = "0x11FCFCC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60001E3")]
			[Address(RVA = "0x11FCFD0", Offset = "0x11FCFD0", VA = "0x11FCFD0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60001E5")]
			[Address(RVA = "0x11FD0C0", Offset = "0x11FD0C0", VA = "0x11FD0C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000027")]
		[CompilerGenerated]
		private sealed class <_CallContinuously>d__335 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40000F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40000F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Timing <>4__this;

			[Token(Token = "0x40000F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float period;

			[Token(Token = "0x40000F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject gObject;

			[Token(Token = "0x40000FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Action action;

			[Token(Token = "0x17000048")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60001EA")]
				[Address(RVA = "0x11FD2A8", Offset = "0x11FD2A8", VA = "0x11FD2A8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000049")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60001EC")]
				[Address(RVA = "0x11FD2F0", Offset = "0x11FD2F0", VA = "0x11FD2F0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60001E7")]
			[Address(RVA = "0x11FD15C", Offset = "0x11FD15C", VA = "0x11FD15C")]
			[DebuggerHidden]
			public <_CallContinuously>d__335(int <>1__state)
			{
			}

			[Token(Token = "0x60001E8")]
			[Address(RVA = "0x11FD184", Offset = "0x11FD184", VA = "0x11FD184", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60001E9")]
			[Address(RVA = "0x11FD188", Offset = "0x11FD188", VA = "0x11FD188", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60001EB")]
			[Address(RVA = "0x11FD2B0", Offset = "0x11FD2B0", VA = "0x11FD2B0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000028")]
		[CompilerGenerated]
		private sealed class <_WatchCall>d__352<T> : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40000FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x40000FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private float <>2__current;

			[Token(Token = "0x40000FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Timing <>4__this;

			[Token(Token = "0x40000FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float timeframe;

			[Token(Token = "0x40000FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public CoroutineHandle handle;

			[Token(Token = "0x4000100")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T> onDone;

			[Token(Token = "0x4000101")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject gObject;

			[Token(Token = "0x4000102")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T reference;

			[Token(Token = "0x1700004A")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60001F0")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700004B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60001F2")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60001ED")]
			[DebuggerHidden]
			public <_WatchCall>d__352(int <>1__state)
			{
			}

			[Token(Token = "0x60001EE")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60001EF")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60001F1")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000029")]
		[CompilerGenerated]
		private sealed class <_CallContinuously>d__353<T> : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000103")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000104")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private float <>2__current;

			[Token(Token = "0x4000105")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Timing <>4__this;

			[Token(Token = "0x4000106")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float period;

			[Token(Token = "0x4000107")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject gObject;

			[Token(Token = "0x4000108")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Action<T> action;

			[Token(Token = "0x4000109")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T reference;

			[Token(Token = "0x1700004C")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60001F6")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700004D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60001F8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60001F3")]
			[DebuggerHidden]
			public <_CallContinuously>d__353(int <>1__state)
			{
			}

			[Token(Token = "0x60001F4")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60001F5")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60001F7")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400005F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("How quickly the SlowUpdate segment ticks.")]
		public float TimeBetweenSlowUpdateCalls;

		[Token(Token = "0x4000060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("How much data should be sent to the profiler window when it's open.")]
		public DebugInfoType ProfilerDebugAmount;

		[Token(Token = "0x4000061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("When using manual timeframe, should it run automatically after the update loop or only when TriggerManualTimframeUpdate is called.")]
		public bool AutoTriggerManualTimeframe;

		[Token(Token = "0x4000062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("A count of the number of Update coroutines that are currently running.")]
		[Space(12f)]
		public int UpdateCoroutines;

		[Token(Token = "0x4000063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("A count of the number of FixedUpdate coroutines that are currently running.")]
		public int FixedUpdateCoroutines;

		[Token(Token = "0x4000064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("A count of the number of LateUpdate coroutines that are currently running.")]
		public int LateUpdateCoroutines;

		[Token(Token = "0x4000065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("A count of the number of SlowUpdate coroutines that are currently running.")]
		public int SlowUpdateCoroutines;

		[Token(Token = "0x4000066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("A count of the number of RealtimeUpdate coroutines that are currently running.")]
		public int RealtimeUpdateCoroutines;

		[Token(Token = "0x4000067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("A count of the number of EditorUpdate coroutines that are currently running.")]
		public int EditorUpdateCoroutines;

		[Token(Token = "0x4000068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("A count of the number of EditorSlowUpdate coroutines that are currently running.")]
		public int EditorSlowUpdateCoroutines;

		[Token(Token = "0x4000069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("A count of the number of EndOfFrame coroutines that are currently running.")]
		public int EndOfFrameCoroutines;

		[Token(Token = "0x400006A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("A count of the number of ManualTimeframe coroutines that are currently running.")]
		public int ManualTimeframeCoroutines;

		[NonSerialized]
		[Token(Token = "0x400006B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float localTime;

		[NonSerialized]
		[Token(Token = "0x400006C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float deltaTime;

		[Token(Token = "0x400006D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Func<float, float> SetManualTimeframeTime;

		[Token(Token = "0x400006E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Func<IEnumerator<float>, CoroutineHandle, IEnumerator<float>> ReplacementFunction;

		[Token(Token = "0x4000070")]
		public const float WaitForOneFrame = float.NegativeInfinity;

		[Token(Token = "0x4000073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static object _tmpRef;

		[Token(Token = "0x4000074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static int _tmpInt;

		[Token(Token = "0x4000075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static bool _tmpBool;

		[Token(Token = "0x4000076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Segment _tmpSegment;

		[Token(Token = "0x4000077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static CoroutineHandle _tmpHandle;

		[Token(Token = "0x4000078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int _currentUpdateFrame;

		[Token(Token = "0x4000079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int _currentLateUpdateFrame;

		[Token(Token = "0x400007A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int _currentSlowUpdateFrame;

		[Token(Token = "0x400007B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int _currentRealtimeUpdateFrame;

		[Token(Token = "0x400007C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int _currentEndOfFrameFrame;

		[Token(Token = "0x400007D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int _nextUpdateProcessSlot;

		[Token(Token = "0x400007E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int _nextLateUpdateProcessSlot;

		[Token(Token = "0x400007F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int _nextFixedUpdateProcessSlot;

		[Token(Token = "0x4000080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int _nextSlowUpdateProcessSlot;

		[Token(Token = "0x4000081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _nextRealtimeUpdateProcessSlot;

		[Token(Token = "0x4000082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int _nextEditorUpdateProcessSlot;

		[Token(Token = "0x4000083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _nextEditorSlowUpdateProcessSlot;

		[Token(Token = "0x4000084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int _nextEndOfFrameProcessSlot;

		[Token(Token = "0x4000085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _nextManualTimeframeProcessSlot;

		[Token(Token = "0x4000086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int _lastUpdateProcessSlot;

		[Token(Token = "0x4000087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int _lastLateUpdateProcessSlot;

		[Token(Token = "0x4000088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int _lastFixedUpdateProcessSlot;

		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int _lastSlowUpdateProcessSlot;

		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private int _lastRealtimeUpdateProcessSlot;

		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int _lastEndOfFrameProcessSlot;

		[Token(Token = "0x400008C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private int _lastManualTimeframeProcessSlot;

		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float _lastUpdateTime;

		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float _lastLateUpdateTime;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float _lastFixedUpdateTime;

		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float _lastSlowUpdateTime;

		[Token(Token = "0x4000091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float _lastRealtimeUpdateTime;

		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float _lastEndOfFrameTime;

		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float _lastManualTimeframeTime;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float _lastSlowUpdateDeltaTime;

		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float _lastEditorUpdateDeltaTime;

		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float _lastEditorSlowUpdateDeltaTime;

		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float _lastManualTimeframeDeltaTime;

		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private ushort _framesSinceUpdate;

		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDE")]
		private ushort _expansions;

		[Token(Token = "0x400009A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[HideInInspector]
		[SerializeField]
		private byte _instanceID;

		[Token(Token = "0x400009B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool _EOFPumpRan;

		[Token(Token = "0x400009C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly Dictionary<CoroutineHandle, HashSet<CoroutineHandle>> Links;

		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly WaitForEndOfFrame EofWaitObject;

		[Token(Token = "0x400009E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private readonly Dictionary<CoroutineHandle, HashSet<CoroutineHandle>> _waitingTriggers;

		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly HashSet<CoroutineHandle> _allWaiting;

		[Token(Token = "0x40000A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private readonly Dictionary<CoroutineHandle, ProcessIndex> _handleToIndex;

		[Token(Token = "0x40000A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private readonly Dictionary<ProcessIndex, CoroutineHandle> _indexToHandle;

		[Token(Token = "0x40000A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private readonly Dictionary<CoroutineHandle, string> _processTags;

		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private readonly Dictionary<string, HashSet<CoroutineHandle>> _taggedProcesses;

		[Token(Token = "0x40000A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private readonly Dictionary<CoroutineHandle, int> _processLayers;

		[Token(Token = "0x40000A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private readonly Dictionary<int, HashSet<CoroutineHandle>> _layeredProcesses;

		[Token(Token = "0x40000A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private IEnumerator<float>[] UpdateProcesses;

		[Token(Token = "0x40000A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private IEnumerator<float>[] LateUpdateProcesses;

		[Token(Token = "0x40000A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private IEnumerator<float>[] FixedUpdateProcesses;

		[Token(Token = "0x40000A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private IEnumerator<float>[] SlowUpdateProcesses;

		[Token(Token = "0x40000AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private IEnumerator<float>[] RealtimeUpdateProcesses;

		[Token(Token = "0x40000AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private IEnumerator<float>[] EditorUpdateProcesses;

		[Token(Token = "0x40000AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private IEnumerator<float>[] EditorSlowUpdateProcesses;

		[Token(Token = "0x40000AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private IEnumerator<float>[] EndOfFrameProcesses;

		[Token(Token = "0x40000AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private IEnumerator<float>[] ManualTimeframeProcesses;

		[Token(Token = "0x40000AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private bool[] UpdatePaused;

		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private bool[] LateUpdatePaused;

		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private bool[] FixedUpdatePaused;

		[Token(Token = "0x40000B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private bool[] SlowUpdatePaused;

		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private bool[] RealtimeUpdatePaused;

		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private bool[] EditorUpdatePaused;

		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private bool[] EditorSlowUpdatePaused;

		[Token(Token = "0x40000B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private bool[] EndOfFramePaused;

		[Token(Token = "0x40000B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private bool[] ManualTimeframePaused;

		[Token(Token = "0x40000B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private bool[] UpdateHeld;

		[Token(Token = "0x40000B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private bool[] LateUpdateHeld;

		[Token(Token = "0x40000BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private bool[] FixedUpdateHeld;

		[Token(Token = "0x40000BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private bool[] SlowUpdateHeld;

		[Token(Token = "0x40000BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private bool[] RealtimeUpdateHeld;

		[Token(Token = "0x40000BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private bool[] EditorUpdateHeld;

		[Token(Token = "0x40000BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private bool[] EditorSlowUpdateHeld;

		[Token(Token = "0x40000BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private bool[] EndOfFrameHeld;

		[Token(Token = "0x40000C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private bool[] ManualTimeframeHeld;

		[Token(Token = "0x40000C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private CoroutineHandle _eofWatcherHandle;

		[Token(Token = "0x40000C2")]
		private const ushort FramesUntilMaintenance = 64;

		[Token(Token = "0x40000C3")]
		private const int ProcessArrayChunkSize = 64;

		[Token(Token = "0x40000C4")]
		private const int InitialBufferSizeLarge = 256;

		[Token(Token = "0x40000C5")]
		private const int InitialBufferSizeMedium = 64;

		[Token(Token = "0x40000C6")]
		private const int InitialBufferSizeSmall = 8;

		[Token(Token = "0x40000C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static Timing[] ActiveInstances;

		[Token(Token = "0x40000C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static Timing _instance;

		[Token(Token = "0x17000030")]
		public static float LocalTime
		{
			[Token(Token = "0x60000A1")]
			[Address(RVA = "0x11DB438", Offset = "0x11DB438", VA = "0x11DB438")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000031")]
		public static float DeltaTime
		{
			[Token(Token = "0x60000A2")]
			[Address(RVA = "0x11DB6BC", Offset = "0x11DB6BC", VA = "0x11DB6BC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000032")]
		public static Thread MainThread
		{
			[Token(Token = "0x60000A5")]
			[Address(RVA = "0x11DB8D0", Offset = "0x11DB8D0", VA = "0x11DB8D0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60000A6")]
			[Address(RVA = "0x11DB928", Offset = "0x11DB928", VA = "0x11DB928")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000033")]
		public static CoroutineHandle CurrentCoroutine
		{
			[Token(Token = "0x60000A7")]
			[Address(RVA = "0x11DB984", Offset = "0x11DB984", VA = "0x11DB984")]
			get
			{
				return default(CoroutineHandle);
			}
		}

		[Token(Token = "0x17000034")]
		public CoroutineHandle currentCoroutine
		{
			[Token(Token = "0x60000A8")]
			[Address(RVA = "0x11DBB0C", Offset = "0x11DBB0C", VA = "0x11DBB0C")]
			[CompilerGenerated]
			get
			{
				return default(CoroutineHandle);
			}
			[Token(Token = "0x60000A9")]
			[Address(RVA = "0x11DBB14", Offset = "0x11DBB14", VA = "0x11DBB14")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000035")]
		public static Timing Instance
		{
			[Token(Token = "0x60000AA")]
			[Address(RVA = "0x11DB494", Offset = "0x11DB494", VA = "0x11DB494")]
			get
			{
				return null;
			}
			[Token(Token = "0x60000AB")]
			[Address(RVA = "0x11DBD4C", Offset = "0x11DBD4C", VA = "0x11DBD4C")]
			set
			{
			}
		}

		[Token(Token = "0x14000001")]
		public static event Action OnPreExecute
		{
			[Token(Token = "0x60000A3")]
			[Address(RVA = "0x11DB718", Offset = "0x11DB718", VA = "0x11DB718")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60000A4")]
			[Address(RVA = "0x11DB7F4", Offset = "0x11DB7F4", VA = "0x11DB7F4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60000AC")]
		[Address(RVA = "0x11DBDA8", Offset = "0x11DBDA8", VA = "0x11DBDA8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60000AD")]
		[Address(RVA = "0x11DBE5C", Offset = "0x11DBE5C", VA = "0x11DBE5C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60000AE")]
		[Address(RVA = "0x11DC278", Offset = "0x11DC278", VA = "0x11DC278")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60000AF")]
		[Address(RVA = "0x11DBB1C", Offset = "0x11DBB1C", VA = "0x11DBB1C")]
		private void InitializeInstanceID()
		{
		}

		[Token(Token = "0x60000B0")]
		[Address(RVA = "0x11DC324", Offset = "0x11DC324", VA = "0x11DC324")]
		private void Update()
		{
		}

		[Token(Token = "0x60000B1")]
		[Address(RVA = "0x11DF958", Offset = "0x11DF958", VA = "0x11DF958")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60000B2")]
		[Address(RVA = "0x11E005C", Offset = "0x11E005C", VA = "0x11E005C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60000B3")]
		[Address(RVA = "0x11DDB44", Offset = "0x11DDB44", VA = "0x11DDB44")]
		public void TriggerManualTimeframeUpdate()
		{
		}

		[Token(Token = "0x60000B4")]
		[Address(RVA = "0x11DBFA0", Offset = "0x11DBFA0", VA = "0x11DBFA0")]
		private bool OnEditorStart()
		{
			return default(bool);
		}

		[Token(Token = "0x60000B5")]
		[Address(RVA = "0x11DBFA8", Offset = "0x11DBFA8", VA = "0x11DBFA8")]
		[IteratorStateMachine(typeof(<_EOFPumpWatcher>d__132))]
		private IEnumerator<float> _EOFPumpWatcher()
		{
			return null;
		}

		[Token(Token = "0x60000B6")]
		[Address(RVA = "0x11E075C", Offset = "0x11E075C", VA = "0x11E075C")]
		[IteratorStateMachine(typeof(<_EOFPump>d__133))]
		private IEnumerator _EOFPump()
		{
			return null;
		}

		[Token(Token = "0x60000B7")]
		[Address(RVA = "0x11DE268", Offset = "0x11DE268", VA = "0x11DE268")]
		private void RemoveUnused()
		{
		}

		[Token(Token = "0x60000B8")]
		[Address(RVA = "0x11E0D18", Offset = "0x11E0D18", VA = "0x11E0D18")]
		private void EditorRemoveUnused()
		{
		}

		[Token(Token = "0x60000B9")]
		[Address(RVA = "0x11E14FC", Offset = "0x11E14FC", VA = "0x11E14FC")]
		public static CoroutineHandle RunCoroutine(IEnumerator<float> coroutine)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000BA")]
		[Address(RVA = "0x11E3D50", Offset = "0x11E3D50", VA = "0x11E3D50")]
		public static CoroutineHandle RunCoroutine(IEnumerator<float> coroutine, GameObject gameObj)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000BB")]
		[Address(RVA = "0x11E3EAC", Offset = "0x11E3EAC", VA = "0x11E3EAC")]
		public static CoroutineHandle RunCoroutine(IEnumerator<float> coroutine, int layer)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000BC")]
		[Address(RVA = "0x11E3F68", Offset = "0x11E3F68", VA = "0x11E3F68")]
		public static CoroutineHandle RunCoroutine(IEnumerator<float> coroutine, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000BD")]
		[Address(RVA = "0x11E4024", Offset = "0x11E4024", VA = "0x11E4024")]
		public static CoroutineHandle RunCoroutine(IEnumerator<float> coroutine, GameObject gameObj, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000BE")]
		[Address(RVA = "0x11E4184", Offset = "0x11E4184", VA = "0x11E4184")]
		public static CoroutineHandle RunCoroutine(IEnumerator<float> coroutine, int layer, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000BF")]
		[Address(RVA = "0x11E424C", Offset = "0x11E424C", VA = "0x11E424C")]
		public static CoroutineHandle RunCoroutine(IEnumerator<float> coroutine, Segment segment)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000C0")]
		[Address(RVA = "0x11E4308", Offset = "0x11E4308", VA = "0x11E4308")]
		public static CoroutineHandle RunCoroutine(IEnumerator<float> coroutine, Segment segment, GameObject gameObj)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000C1")]
		[Address(RVA = "0x11E4468", Offset = "0x11E4468", VA = "0x11E4468")]
		public static CoroutineHandle RunCoroutine(IEnumerator<float> coroutine, Segment segment, int layer)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000C2")]
		[Address(RVA = "0x11E4530", Offset = "0x11E4530", VA = "0x11E4530")]
		public static CoroutineHandle RunCoroutine(IEnumerator<float> coroutine, Segment segment, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000C3")]
		[Address(RVA = "0x11E45F8", Offset = "0x11E45F8", VA = "0x11E45F8")]
		public static CoroutineHandle RunCoroutine(IEnumerator<float> coroutine, Segment segment, GameObject gameObj, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000C4")]
		[Address(RVA = "0x11E4764", Offset = "0x11E4764", VA = "0x11E4764")]
		public static CoroutineHandle RunCoroutine(IEnumerator<float> coroutine, Segment segment, int layer, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000C5")]
		[Address(RVA = "0x11E4830", Offset = "0x11E4830", VA = "0x11E4830")]
		public CoroutineHandle RunCoroutineOnInstance(IEnumerator<float> coroutine)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000C6")]
		[Address(RVA = "0x11E489C", Offset = "0x11E489C", VA = "0x11E489C")]
		public CoroutineHandle RunCoroutineOnInstance(IEnumerator<float> coroutine, GameObject gameObj)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000C7")]
		[Address(RVA = "0x11E49A8", Offset = "0x11E49A8", VA = "0x11E49A8")]
		public CoroutineHandle RunCoroutineOnInstance(IEnumerator<float> coroutine, int layer)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000C8")]
		[Address(RVA = "0x11E4A18", Offset = "0x11E4A18", VA = "0x11E4A18")]
		public CoroutineHandle RunCoroutineOnInstance(IEnumerator<float> coroutine, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000C9")]
		[Address(RVA = "0x11E4A88", Offset = "0x11E4A88", VA = "0x11E4A88")]
		public CoroutineHandle RunCoroutineOnInstance(IEnumerator<float> coroutine, GameObject gameObj, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000CA")]
		[Address(RVA = "0x11E4BA0", Offset = "0x11E4BA0", VA = "0x11E4BA0")]
		public CoroutineHandle RunCoroutineOnInstance(IEnumerator<float> coroutine, int layer, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000CB")]
		[Address(RVA = "0x11E4C1C", Offset = "0x11E4C1C", VA = "0x11E4C1C")]
		public CoroutineHandle RunCoroutineOnInstance(IEnumerator<float> coroutine, Segment segment)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000CC")]
		[Address(RVA = "0x11E4C8C", Offset = "0x11E4C8C", VA = "0x11E4C8C")]
		public CoroutineHandle RunCoroutineOnInstance(IEnumerator<float> coroutine, Segment segment, GameObject gameObj)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000CD")]
		[Address(RVA = "0x11E4DA4", Offset = "0x11E4DA4", VA = "0x11E4DA4")]
		public CoroutineHandle RunCoroutineOnInstance(IEnumerator<float> coroutine, Segment segment, int layer)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000CE")]
		[Address(RVA = "0x11E4E20", Offset = "0x11E4E20", VA = "0x11E4E20")]
		public CoroutineHandle RunCoroutineOnInstance(IEnumerator<float> coroutine, Segment segment, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000CF")]
		[Address(RVA = "0x11E4E9C", Offset = "0x11E4E9C", VA = "0x11E4E9C")]
		public CoroutineHandle RunCoroutineOnInstance(IEnumerator<float> coroutine, Segment segment, GameObject gameObj, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000D0")]
		[Address(RVA = "0x11E4FB8", Offset = "0x11E4FB8", VA = "0x11E4FB8")]
		public CoroutineHandle RunCoroutineOnInstance(IEnumerator<float> coroutine, Segment segment, int layer, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000D1")]
		[Address(RVA = "0x11E5038", Offset = "0x11E5038", VA = "0x11E5038")]
		public static CoroutineHandle RunCoroutineSingleton(IEnumerator<float> coroutine, CoroutineHandle handle, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000D2")]
		[Address(RVA = "0x11E58B0", Offset = "0x11E58B0", VA = "0x11E58B0")]
		public static CoroutineHandle RunCoroutineSingleton(IEnumerator<float> coroutine, GameObject gameObj, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000D3")]
		[Address(RVA = "0x11E5994", Offset = "0x11E5994", VA = "0x11E5994")]
		public static CoroutineHandle RunCoroutineSingleton(IEnumerator<float> coroutine, int layer, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000D4")]
		[Address(RVA = "0x11E66F4", Offset = "0x11E66F4", VA = "0x11E66F4")]
		public static CoroutineHandle RunCoroutineSingleton(IEnumerator<float> coroutine, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000D5")]
		[Address(RVA = "0x11E6A90", Offset = "0x11E6A90", VA = "0x11E6A90")]
		public static CoroutineHandle RunCoroutineSingleton(IEnumerator<float> coroutine, GameObject gameObj, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000D6")]
		[Address(RVA = "0x11E6B8C", Offset = "0x11E6B8C", VA = "0x11E6B8C")]
		public static CoroutineHandle RunCoroutineSingleton(IEnumerator<float> coroutine, int layer, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000D7")]
		[Address(RVA = "0x11E7278", Offset = "0x11E7278", VA = "0x11E7278")]
		public static CoroutineHandle RunCoroutineSingleton(IEnumerator<float> coroutine, CoroutineHandle handle, Segment segment, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000D8")]
		[Address(RVA = "0x11E7428", Offset = "0x11E7428", VA = "0x11E7428")]
		public static CoroutineHandle RunCoroutineSingleton(IEnumerator<float> coroutine, Segment segment, GameObject gameObj, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000D9")]
		[Address(RVA = "0x11E7520", Offset = "0x11E7520", VA = "0x11E7520")]
		public static CoroutineHandle RunCoroutineSingleton(IEnumerator<float> coroutine, Segment segment, int layer, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000DA")]
		[Address(RVA = "0x11E7800", Offset = "0x11E7800", VA = "0x11E7800")]
		public static CoroutineHandle RunCoroutineSingleton(IEnumerator<float> coroutine, Segment segment, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000DB")]
		[Address(RVA = "0x11E7AE0", Offset = "0x11E7AE0", VA = "0x11E7AE0")]
		public static CoroutineHandle RunCoroutineSingleton(IEnumerator<float> coroutine, Segment segment, GameObject gameObj, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000DC")]
		[Address(RVA = "0x11E7BE8", Offset = "0x11E7BE8", VA = "0x11E7BE8")]
		public static CoroutineHandle RunCoroutineSingleton(IEnumerator<float> coroutine, Segment segment, int layer, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000DD")]
		[Address(RVA = "0x11E8118", Offset = "0x11E8118", VA = "0x11E8118")]
		public CoroutineHandle RunCoroutineSingletonOnInstance(IEnumerator<float> coroutine, CoroutineHandle handle, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000DE")]
		[Address(RVA = "0x11E8560", Offset = "0x11E8560", VA = "0x11E8560")]
		public CoroutineHandle RunCoroutineSingletonOnInstance(IEnumerator<float> coroutine, GameObject gameObj, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000DF")]
		[Address(RVA = "0x11E861C", Offset = "0x11E861C", VA = "0x11E861C")]
		public CoroutineHandle RunCoroutineSingletonOnInstance(IEnumerator<float> coroutine, int layer, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000E0")]
		[Address(RVA = "0x11DC010", Offset = "0x11DC010", VA = "0x11DC010")]
		public CoroutineHandle RunCoroutineSingletonOnInstance(IEnumerator<float> coroutine, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000E1")]
		[Address(RVA = "0x11E8F80", Offset = "0x11E8F80", VA = "0x11E8F80")]
		public CoroutineHandle RunCoroutineSingletonOnInstance(IEnumerator<float> coroutine, GameObject gameObj, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000E2")]
		[Address(RVA = "0x11E904C", Offset = "0x11E904C", VA = "0x11E904C")]
		public CoroutineHandle RunCoroutineSingletonOnInstance(IEnumerator<float> coroutine, int layer, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000E3")]
		[Address(RVA = "0x11E9C58", Offset = "0x11E9C58", VA = "0x11E9C58")]
		public CoroutineHandle RunCoroutineSingletonOnInstance(IEnumerator<float> coroutine, Segment segment, GameObject gameObj, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000E4")]
		[Address(RVA = "0x11E9D20", Offset = "0x11E9D20", VA = "0x11E9D20")]
		public CoroutineHandle RunCoroutineSingletonOnInstance(IEnumerator<float> coroutine, Segment segment, int layer, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000E5")]
		[Address(RVA = "0x11E9F8C", Offset = "0x11E9F8C", VA = "0x11E9F8C")]
		public CoroutineHandle RunCoroutineSingletonOnInstance(IEnumerator<float> coroutine, Segment segment, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000E6")]
		[Address(RVA = "0x11EA1F8", Offset = "0x11EA1F8", VA = "0x11EA1F8")]
		public CoroutineHandle RunCoroutineSingletonOnInstance(IEnumerator<float> coroutine, Segment segment, GameObject gameObj, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000E7")]
		[Address(RVA = "0x11EA2D8", Offset = "0x11EA2D8", VA = "0x11EA2D8")]
		public CoroutineHandle RunCoroutineSingletonOnInstance(IEnumerator<float> coroutine, Segment segment, int layer, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000E8")]
		[Address(RVA = "0x11E15B4", Offset = "0x11E15B4", VA = "0x11E15B4")]
		private CoroutineHandle RunCoroutineInternal(IEnumerator<float> coroutine, Segment segment, int layer, bool layerHasValue, string tag, CoroutineHandle handle, bool prewarm)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x60000E9")]
		[Address(RVA = "0x11EA9D4", Offset = "0x11EA9D4", VA = "0x11EA9D4")]
		public static int KillCoroutines()
		{
			return default(int);
		}

		[Token(Token = "0x60000EA")]
		[Address(RVA = "0x11EAA9C", Offset = "0x11EAA9C", VA = "0x11EAA9C")]
		public int KillCoroutinesOnInstance()
		{
			return default(int);
		}

		[Token(Token = "0x60000EB")]
		[Address(RVA = "0x11E51DC", Offset = "0x11E51DC", VA = "0x11E51DC")]
		public static int KillCoroutines(CoroutineHandle handle)
		{
			return default(int);
		}

		[Token(Token = "0x60000EC")]
		[Address(RVA = "0x11EAF2C", Offset = "0x11EAF2C", VA = "0x11EAF2C")]
		public static int KillCoroutines(IEnumerable<CoroutineHandle> handles)
		{
			return default(int);
		}

		[Token(Token = "0x60000ED")]
		[Address(RVA = "0x11DD928", Offset = "0x11DD928", VA = "0x11DD928")]
		public int KillCoroutinesOnInstance(CoroutineHandle handle)
		{
			return default(int);
		}

		[Token(Token = "0x60000EE")]
		[Address(RVA = "0x11EB29C", Offset = "0x11EB29C", VA = "0x11EB29C")]
		public static int KillCoroutines(GameObject gameObj)
		{
			return default(int);
		}

		[Token(Token = "0x60000EF")]
		[Address(RVA = "0x11EB380", Offset = "0x11EB380", VA = "0x11EB380")]
		public int KillCoroutinesOnInstance(GameObject gameObj)
		{
			return default(int);
		}

		[Token(Token = "0x60000F0")]
		[Address(RVA = "0x11E5C60", Offset = "0x11E5C60", VA = "0x11E5C60")]
		public static int KillCoroutines(int layer)
		{
			return default(int);
		}

		[Token(Token = "0x60000F1")]
		[Address(RVA = "0x11E8884", Offset = "0x11E8884", VA = "0x11E8884")]
		public int KillCoroutinesOnInstance(int layer)
		{
			return default(int);
		}

		[Token(Token = "0x60000F2")]
		[Address(RVA = "0x11E69C0", Offset = "0x11E69C0", VA = "0x11E69C0")]
		public static int KillCoroutines(string tag)
		{
			return default(int);
		}

		[Token(Token = "0x60000F3")]
		[Address(RVA = "0x11E8CBC", Offset = "0x11E8CBC", VA = "0x11E8CBC")]
		public int KillCoroutinesOnInstance(string tag)
		{
			return default(int);
		}

		[Token(Token = "0x60000F4")]
		[Address(RVA = "0x11EB4A8", Offset = "0x11EB4A8", VA = "0x11EB4A8")]
		public static int KillCoroutines(GameObject gameObj, string tag)
		{
			return default(int);
		}

		[Token(Token = "0x60000F5")]
		[Address(RVA = "0x11EB5A0", Offset = "0x11EB5A0", VA = "0x11EB5A0")]
		public int KillCoroutinesOnInstance(GameObject gameObj, string tag)
		{
			return default(int);
		}

		[Token(Token = "0x60000F6")]
		[Address(RVA = "0x11E70B0", Offset = "0x11E70B0", VA = "0x11E70B0")]
		public static int KillCoroutines(int layer, string tag)
		{
			return default(int);
		}

		[Token(Token = "0x60000F7")]
		[Address(RVA = "0x11E946C", Offset = "0x11E946C", VA = "0x11E946C")]
		public int KillCoroutinesOnInstance(int layer, string tag)
		{
			return default(int);
		}

		[Token(Token = "0x60000F8")]
		[Address(RVA = "0x11EAE9C", Offset = "0x11EAE9C", VA = "0x11EAE9C")]
		public static Timing GetInstance(byte ID)
		{
			return null;
		}

		[Token(Token = "0x60000F9")]
		[Address(RVA = "0x11EB5DC", Offset = "0x11EB5DC", VA = "0x11EB5DC")]
		public static float WaitForSeconds(float waitTime)
		{
			return default(float);
		}

		[Token(Token = "0x60000FA")]
		[Address(RVA = "0x11EB684", Offset = "0x11EB684", VA = "0x11EB684")]
		public float WaitForSecondsOnInstance(float waitTime)
		{
			return default(float);
		}

		[Token(Token = "0x60000FB")]
		[Address(RVA = "0x11DD648", Offset = "0x11DD648", VA = "0x11DD648")]
		private bool UpdateTimeValues(Segment segment)
		{
			return default(bool);
		}

		[Token(Token = "0x60000FC")]
		[Address(RVA = "0x11EB700", Offset = "0x11EB700", VA = "0x11EB700")]
		private float GetSegmentTime(Segment segment)
		{
			return default(float);
		}

		[Token(Token = "0x60000FD")]
		[Address(RVA = "0x11EB7EC", Offset = "0x11EB7EC", VA = "0x11EB7EC")]
		public static int PauseCoroutines()
		{
			return default(int);
		}

		[Token(Token = "0x60000FE")]
		[Address(RVA = "0x11EB8B4", Offset = "0x11EB8B4", VA = "0x11EB8B4")]
		public int PauseCoroutinesOnInstance()
		{
			return default(int);
		}

		[Token(Token = "0x60000FF")]
		[Address(RVA = "0x11EC9A8", Offset = "0x11EC9A8", VA = "0x11EC9A8")]
		public static int PauseCoroutines(CoroutineHandle handle)
		{
			return default(int);
		}

		[Token(Token = "0x6000100")]
		[Address(RVA = "0x11ECAAC", Offset = "0x11ECAAC", VA = "0x11ECAAC")]
		public int PauseCoroutinesOnInstance(CoroutineHandle handle)
		{
			return default(int);
		}

		[Token(Token = "0x6000101")]
		[Address(RVA = "0x11ED960", Offset = "0x11ED960", VA = "0x11ED960")]
		public static int PauseCoroutines(IEnumerable<CoroutineHandle> handles)
		{
			return default(int);
		}

		[Token(Token = "0x6000102")]
		[Address(RVA = "0x11EDB38", Offset = "0x11EDB38", VA = "0x11EDB38")]
		public static int PauseCoroutines(GameObject gameObj)
		{
			return default(int);
		}

		[Token(Token = "0x6000103")]
		[Address(RVA = "0x11EDC08", Offset = "0x11EDC08", VA = "0x11EDC08")]
		public int PauseCoroutinesOnInstance(GameObject gameObj)
		{
			return default(int);
		}

		[Token(Token = "0x6000104")]
		[Address(RVA = "0x11EDFC4", Offset = "0x11EDFC4", VA = "0x11EDFC4")]
		public static int PauseCoroutines(int layer)
		{
			return default(int);
		}

		[Token(Token = "0x6000105")]
		[Address(RVA = "0x11EDCA8", Offset = "0x11EDCA8", VA = "0x11EDCA8")]
		public int PauseCoroutinesOnInstance(int layer)
		{
			return default(int);
		}

		[Token(Token = "0x6000106")]
		[Address(RVA = "0x11EE094", Offset = "0x11EE094", VA = "0x11EE094")]
		public static int PauseCoroutines(string tag)
		{
			return default(int);
		}

		[Token(Token = "0x6000107")]
		[Address(RVA = "0x11EE164", Offset = "0x11EE164", VA = "0x11EE164")]
		public int PauseCoroutinesOnInstance(string tag)
		{
			return default(int);
		}

		[Token(Token = "0x6000108")]
		[Address(RVA = "0x11EE484", Offset = "0x11EE484", VA = "0x11EE484")]
		public static int PauseCoroutines(GameObject gameObj, string tag)
		{
			return default(int);
		}

		[Token(Token = "0x6000109")]
		[Address(RVA = "0x11EE950", Offset = "0x11EE950", VA = "0x11EE950")]
		public int PauseCoroutinesOnInstance(GameObject gameObj, string tag)
		{
			return default(int);
		}

		[Token(Token = "0x600010A")]
		[Address(RVA = "0x11EE9F8", Offset = "0x11EE9F8", VA = "0x11EE9F8")]
		public static int PauseCoroutines(int layer, string tag)
		{
			return default(int);
		}

		[Token(Token = "0x600010B")]
		[Address(RVA = "0x11EE57C", Offset = "0x11EE57C", VA = "0x11EE57C")]
		public int PauseCoroutinesOnInstance(int layer, string tag)
		{
			return default(int);
		}

		[Token(Token = "0x600010C")]
		[Address(RVA = "0x11EEADC", Offset = "0x11EEADC", VA = "0x11EEADC")]
		public static int ResumeCoroutines()
		{
			return default(int);
		}

		[Token(Token = "0x600010D")]
		[Address(RVA = "0x11EEBA4", Offset = "0x11EEBA4", VA = "0x11EEBA4")]
		public int ResumeCoroutinesOnInstance()
		{
			return default(int);
		}

		[Token(Token = "0x600010E")]
		[Address(RVA = "0x11E5404", Offset = "0x11E5404", VA = "0x11E5404")]
		public static int ResumeCoroutines(CoroutineHandle handle)
		{
			return default(int);
		}

		[Token(Token = "0x600010F")]
		[Address(RVA = "0x11E5D30", Offset = "0x11E5D30", VA = "0x11E5D30")]
		public static int ResumeCoroutines(IEnumerable<CoroutineHandle> handles)
		{
			return default(int);
		}

		[Token(Token = "0x6000110")]
		[Address(RVA = "0x11E82CC", Offset = "0x11E82CC", VA = "0x11E82CC")]
		public int ResumeCoroutinesOnInstance(CoroutineHandle handle)
		{
			return default(int);
		}

		[Token(Token = "0x6000111")]
		[Address(RVA = "0x11E8B18", Offset = "0x11E8B18", VA = "0x11E8B18")]
		public int ResumeCoroutinesOnInstance(IEnumerable<CoroutineHandle> handles)
		{
			return default(int);
		}

		[Token(Token = "0x6000112")]
		[Address(RVA = "0x11EF0F8", Offset = "0x11EF0F8", VA = "0x11EF0F8")]
		public static int ResumeCoroutines(GameObject gameObj)
		{
			return default(int);
		}

		[Token(Token = "0x6000113")]
		[Address(RVA = "0x11EF4F4", Offset = "0x11EF4F4", VA = "0x11EF4F4")]
		public int ResumeCoroutinesOnInstance(GameObject gameObj)
		{
			return default(int);
		}

		[Token(Token = "0x6000114")]
		[Address(RVA = "0x11EF594", Offset = "0x11EF594", VA = "0x11EF594")]
		public static int ResumeCoroutines(int layer)
		{
			return default(int);
		}

		[Token(Token = "0x6000115")]
		[Address(RVA = "0x11EF1DC", Offset = "0x11EF1DC", VA = "0x11EF1DC")]
		public int ResumeCoroutinesOnInstance(int layer)
		{
			return default(int);
		}

		[Token(Token = "0x6000116")]
		[Address(RVA = "0x11EF664", Offset = "0x11EF664", VA = "0x11EF664")]
		public static int ResumeCoroutines(string tag)
		{
			return default(int);
		}

		[Token(Token = "0x6000117")]
		[Address(RVA = "0x11EF734", Offset = "0x11EF734", VA = "0x11EF734")]
		public int ResumeCoroutinesOnInstance(string tag)
		{
			return default(int);
		}

		[Token(Token = "0x6000118")]
		[Address(RVA = "0x11EFA50", Offset = "0x11EFA50", VA = "0x11EFA50")]
		public static int ResumeCoroutines(GameObject gameObj, string tag)
		{
			return default(int);
		}

		[Token(Token = "0x6000119")]
		[Address(RVA = "0x11EFB48", Offset = "0x11EFB48", VA = "0x11EFB48")]
		public int ResumeCoroutinesOnInstance(GameObject gameObj, string tag)
		{
			return default(int);
		}

		[Token(Token = "0x600011A")]
		[Address(RVA = "0x11E7194", Offset = "0x11E7194", VA = "0x11E7194")]
		public static int ResumeCoroutines(int layer, string tag)
		{
			return default(int);
		}

		[Token(Token = "0x600011B")]
		[Address(RVA = "0x11E9894", Offset = "0x11E9894", VA = "0x11E9894")]
		public int ResumeCoroutinesOnInstance(int layer, string tag)
		{
			return default(int);
		}

		[Token(Token = "0x600011C")]
		[Address(RVA = "0x11EFBF0", Offset = "0x11EFBF0", VA = "0x11EFBF0")]
		public static string GetTag(CoroutineHandle handle)
		{
			return null;
		}

		[Token(Token = "0x600011D")]
		[Address(RVA = "0x11EFD34", Offset = "0x11EFD34", VA = "0x11EFD34")]
		public static int? GetLayer(CoroutineHandle handle)
		{
			return null;
		}

		[Token(Token = "0x600011E")]
		[Address(RVA = "0x11EFEA8", Offset = "0x11EFEA8", VA = "0x11EFEA8")]
		public static string GetDebugName(CoroutineHandle handle)
		{
			return null;
		}

		[Token(Token = "0x600011F")]
		[Address(RVA = "0x11F00E8", Offset = "0x11F00E8", VA = "0x11F00E8")]
		public static Segment GetSegment(CoroutineHandle handle)
		{
			return default(Segment);
		}

		[Token(Token = "0x6000120")]
		[Address(RVA = "0x11F01F8", Offset = "0x11F01F8", VA = "0x11F01F8")]
		public static bool SetTag(CoroutineHandle handle, string newTag, bool overwriteExisting = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000121")]
		[Address(RVA = "0x11F050C", Offset = "0x11F050C", VA = "0x11F050C")]
		public static bool SetLayer(CoroutineHandle handle, int newLayer, bool overwriteExisting = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000122")]
		[Address(RVA = "0x11F0820", Offset = "0x11F0820", VA = "0x11F0820")]
		public static bool SetSegment(CoroutineHandle handle, Segment newSegment)
		{
			return default(bool);
		}

		[Token(Token = "0x6000123")]
		[Address(RVA = "0x11F1984", Offset = "0x11F1984", VA = "0x11F1984")]
		public static bool RemoveTag(CoroutineHandle handle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000124")]
		[Address(RVA = "0x11F19E0", Offset = "0x11F19E0", VA = "0x11F19E0")]
		public static bool RemoveLayer(CoroutineHandle handle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000125")]
		[Address(RVA = "0x11E52E0", Offset = "0x11E52E0", VA = "0x11E52E0")]
		public static bool IsRunning(CoroutineHandle handle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000126")]
		[Address(RVA = "0x11F1B10", Offset = "0x11F1B10", VA = "0x11F1B10")]
		public static bool IsAliveAndPaused(CoroutineHandle handle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000127")]
		[Address(RVA = "0x11EA6F4", Offset = "0x11EA6F4", VA = "0x11EA6F4")]
		private void AddTagOnInstance(string tag, CoroutineHandle handle)
		{
		}

		[Token(Token = "0x6000128")]
		[Address(RVA = "0x11EA864", Offset = "0x11EA864", VA = "0x11EA864")]
		private void AddLayerOnInstance(int layer, CoroutineHandle handle)
		{
		}

		[Token(Token = "0x6000129")]
		[Address(RVA = "0x11F0378", Offset = "0x11F0378", VA = "0x11F0378")]
		private void RemoveTagOnInstance(CoroutineHandle handle)
		{
		}

		[Token(Token = "0x600012A")]
		[Address(RVA = "0x11F068C", Offset = "0x11F068C", VA = "0x11F068C")]
		private void RemoveLayerOnInstance(CoroutineHandle handle)
		{
		}

		[Token(Token = "0x600012B")]
		[Address(RVA = "0x11E0A68", Offset = "0x11E0A68", VA = "0x11E0A68")]
		private void RemoveGraffiti(CoroutineHandle handle)
		{
		}

		[Token(Token = "0x600012C")]
		[Address(RVA = "0x11F0B18", Offset = "0x11F0B18", VA = "0x11F0B18")]
		private IEnumerator<float> CoindexExtract(ProcessIndex coindex)
		{
			return null;
		}

		[Token(Token = "0x600012D")]
		[Address(RVA = "0x11E07C4", Offset = "0x11E07C4", VA = "0x11E07C4")]
		private bool CoindexIsNull(ProcessIndex coindex)
		{
			return default(bool);
		}

		[Token(Token = "0x600012E")]
		[Address(RVA = "0x11F002C", Offset = "0x11F002C", VA = "0x11F002C")]
		private IEnumerator<float> CoindexPeek(ProcessIndex coindex)
		{
			return null;
		}

		[Token(Token = "0x600012F")]
		[Address(RVA = "0x11EB238", Offset = "0x11EB238", VA = "0x11EB238")]
		private bool Nullify(CoroutineHandle handle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000130")]
		[Address(RVA = "0x11EB3AC", Offset = "0x11EB3AC", VA = "0x11EB3AC")]
		private bool Nullify(ProcessIndex coindex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000131")]
		[Address(RVA = "0x11ECD44", Offset = "0x11ECD44", VA = "0x11ECD44")]
		private bool SetPause(ProcessIndex coindex, bool newPausedState)
		{
			return default(bool);
		}

		[Token(Token = "0x6000132")]
		[Address(RVA = "0x11F0D68", Offset = "0x11F0D68", VA = "0x11F0D68")]
		private bool SetHeld(ProcessIndex coindex, bool newHeldState)
		{
			return default(bool);
		}

		[Token(Token = "0x6000133")]
		[Address(RVA = "0x11F1C54", Offset = "0x11F1C54", VA = "0x11F1C54")]
		private IEnumerator<float> CreateHold(ProcessIndex coindex, IEnumerator<float> coptr)
		{
			return null;
		}

		[Token(Token = "0x6000134")]
		[Address(RVA = "0x11F0CA0", Offset = "0x11F0CA0", VA = "0x11F0CA0")]
		private bool CoindexIsPaused(ProcessIndex coindex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000135")]
		[Address(RVA = "0x11F0BD8", Offset = "0x11F0BD8", VA = "0x11F0BD8")]
		private bool CoindexIsHeld(ProcessIndex coindex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000136")]
		[Address(RVA = "0x11F2810", Offset = "0x11F2810", VA = "0x11F2810")]
		private void CoindexReplace(ProcessIndex coindex, IEnumerator<float> replacement)
		{
		}

		[Token(Token = "0x6000137")]
		[Address(RVA = "0x11F28F8", Offset = "0x11F28F8", VA = "0x11F28F8")]
		public static float WaitUntilDone(IEnumerator<float> newCoroutine)
		{
			return default(float);
		}

		[Token(Token = "0x6000138")]
		[Address(RVA = "0x11F2CE4", Offset = "0x11F2CE4", VA = "0x11F2CE4")]
		public static float WaitUntilDone(IEnumerator<float> newCoroutine, string tag)
		{
			return default(float);
		}

		[Token(Token = "0x6000139")]
		[Address(RVA = "0x11F2D74", Offset = "0x11F2D74", VA = "0x11F2D74")]
		public static float WaitUntilDone(IEnumerator<float> newCoroutine, int layer)
		{
			return default(float);
		}

		[Token(Token = "0x600013A")]
		[Address(RVA = "0x11F2E04", Offset = "0x11F2E04", VA = "0x11F2E04")]
		public static float WaitUntilDone(IEnumerator<float> newCoroutine, int layer, string tag)
		{
			return default(float);
		}

		[Token(Token = "0x600013B")]
		[Address(RVA = "0x11F2EA4", Offset = "0x11F2EA4", VA = "0x11F2EA4")]
		public static float WaitUntilDone(IEnumerator<float> newCoroutine, Segment segment)
		{
			return default(float);
		}

		[Token(Token = "0x600013C")]
		[Address(RVA = "0x11F2F14", Offset = "0x11F2F14", VA = "0x11F2F14")]
		public static float WaitUntilDone(IEnumerator<float> newCoroutine, Segment segment, string tag)
		{
			return default(float);
		}

		[Token(Token = "0x600013D")]
		[Address(RVA = "0x11F2F8C", Offset = "0x11F2F8C", VA = "0x11F2F8C")]
		public static float WaitUntilDone(IEnumerator<float> newCoroutine, Segment segment, int layer)
		{
			return default(float);
		}

		[Token(Token = "0x600013E")]
		[Address(RVA = "0x11F3004", Offset = "0x11F3004", VA = "0x11F3004")]
		public static float WaitUntilDone(IEnumerator<float> newCoroutine, Segment segment, int layer, string tag)
		{
			return default(float);
		}

		[Token(Token = "0x600013F")]
		[Address(RVA = "0x11F308C", Offset = "0x11F308C", VA = "0x11F308C")]
		public static float WaitUntilDone(CoroutineHandle otherCoroutine)
		{
			return default(float);
		}

		[Token(Token = "0x6000140")]
		[Address(RVA = "0x11F2980", Offset = "0x11F2980", VA = "0x11F2980")]
		public static float WaitUntilDone(CoroutineHandle otherCoroutine, bool warnOnIssue)
		{
			return default(float);
		}

		[Token(Token = "0x6000141")]
		[Address(RVA = "0x11E5508", Offset = "0x11E5508", VA = "0x11E5508")]
		public static void WaitForOtherHandles(CoroutineHandle handle, CoroutineHandle otherHandle, bool warnOnIssue = true)
		{
		}

		[Token(Token = "0x6000142")]
		[Address(RVA = "0x11E5EF8", Offset = "0x11E5EF8", VA = "0x11E5EF8")]
		public static void WaitForOtherHandles(CoroutineHandle handle, IEnumerable<CoroutineHandle> otherHandles, bool warnOnIssue = true)
		{
		}

		[Token(Token = "0x6000143")]
		[Address(RVA = "0x11F3164", Offset = "0x11F3164", VA = "0x11F3164")]
		private void SwapToLast(CoroutineHandle firstHandle, CoroutineHandle lastHandle)
		{
		}

		[Token(Token = "0x6000144")]
		[Address(RVA = "0x11F30E4", Offset = "0x11F30E4", VA = "0x11F30E4")]
		[IteratorStateMachine(typeof(<_StartWhenDone>d__275))]
		private IEnumerator<float> _StartWhenDone(CoroutineHandle handle, IEnumerator<float> proc)
		{
			return null;
		}

		[Token(Token = "0x6000145")]
		[Address(RVA = "0x11E088C", Offset = "0x11E088C", VA = "0x11E088C")]
		private void CloseWaitingProcess(CoroutineHandle handle)
		{
		}

		[Token(Token = "0x6000146")]
		[Address(RVA = "0x11F3578", Offset = "0x11F3578", VA = "0x11F3578")]
		private bool HandleIsInWaitingList(CoroutineHandle handle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000147")]
		[Address(RVA = "0x11F3660", Offset = "0x11F3660", VA = "0x11F3660")]
		private static IEnumerator<float> ReturnTmpRefForRepFunc(IEnumerator<float> coptr, CoroutineHandle handle)
		{
			return null;
		}

		[Token(Token = "0x6000148")]
		[Address(RVA = "0x11F36D0", Offset = "0x11F36D0", VA = "0x11F36D0")]
		public static float WaitUntilDone(UnityEngine.AsyncOperation operation)
		{
			return default(float);
		}

		[Token(Token = "0x6000149")]
		[Address(RVA = "0x11F3870", Offset = "0x11F3870", VA = "0x11F3870")]
		[IteratorStateMachine(typeof(<_StartWhenDone>d__280))]
		private static IEnumerator<float> _StartWhenDone(UnityEngine.AsyncOperation operation, IEnumerator<float> pausedProc)
		{
			return null;
		}

		[Token(Token = "0x600014A")]
		[Address(RVA = "0x11F38E4", Offset = "0x11F38E4", VA = "0x11F38E4")]
		public static float WaitUntilDone(CustomYieldInstruction operation)
		{
			return default(float);
		}

		[Token(Token = "0x600014B")]
		[Address(RVA = "0x11F3A88", Offset = "0x11F3A88", VA = "0x11F3A88")]
		[IteratorStateMachine(typeof(<_StartWhenDone>d__282))]
		private static IEnumerator<float> _StartWhenDone(CustomYieldInstruction operation, IEnumerator<float> pausedProc)
		{
			return null;
		}

		[Token(Token = "0x600014C")]
		[Address(RVA = "0x11F3AFC", Offset = "0x11F3AFC", VA = "0x11F3AFC")]
		public static float WaitUntilTrue(Func<bool> evaluatorFunc)
		{
			return default(float);
		}

		[Token(Token = "0x600014D")]
		[Address(RVA = "0x11F3BD0", Offset = "0x11F3BD0", VA = "0x11F3BD0")]
		private static IEnumerator<float> WaitUntilTrueHelper(IEnumerator<float> coptr, CoroutineHandle handle)
		{
			return null;
		}

		[Token(Token = "0x600014E")]
		[Address(RVA = "0x11F3CD4", Offset = "0x11F3CD4", VA = "0x11F3CD4")]
		public static float WaitUntilFalse(Func<bool> evaluatorFunc)
		{
			return default(float);
		}

		[Token(Token = "0x600014F")]
		[Address(RVA = "0x11F3DA8", Offset = "0x11F3DA8", VA = "0x11F3DA8")]
		private static IEnumerator<float> WaitUntilFalseHelper(IEnumerator<float> coptr, CoroutineHandle handle)
		{
			return null;
		}

		[Token(Token = "0x6000150")]
		[Address(RVA = "0x11F3C50", Offset = "0x11F3C50", VA = "0x11F3C50")]
		[IteratorStateMachine(typeof(<_StartWhenDone>d__287))]
		private static IEnumerator<float> _StartWhenDone(Func<bool> evaluatorFunc, bool continueOn, IEnumerator<float> pausedProc)
		{
			return null;
		}

		[Token(Token = "0x6000151")]
		[Address(RVA = "0x11EC920", Offset = "0x11EC920", VA = "0x11EC920")]
		[IteratorStateMachine(typeof(<_InjectDelay>d__288))]
		private IEnumerator<float> _InjectDelay(IEnumerator<float> proc, float waitTime)
		{
			return null;
		}

		[Token(Token = "0x6000152")]
		[Address(RVA = "0x11F3E28", Offset = "0x11F3E28", VA = "0x11F3E28")]
		public bool LockCoroutine(CoroutineHandle coroutine, CoroutineHandle key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000153")]
		[Address(RVA = "0x11F4034", Offset = "0x11F4034", VA = "0x11F4034")]
		public bool UnlockCoroutine(CoroutineHandle coroutine, CoroutineHandle key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000154")]
		[Address(RVA = "0x11F422C", Offset = "0x11F422C", VA = "0x11F422C")]
		public static int LinkCoroutines(CoroutineHandle master, CoroutineHandle slave)
		{
			return default(int);
		}

		[Token(Token = "0x6000155")]
		[Address(RVA = "0x11F4484", Offset = "0x11F4484", VA = "0x11F4484")]
		public static int UnlinkCoroutines(CoroutineHandle master, CoroutineHandle slave, bool twoWay = false)
		{
			return default(int);
		}

		[Token(Token = "0x6000156")]
		[Address(RVA = "0x11F4780", Offset = "0x11F4780", VA = "0x11F4780")]
		[Obsolete("Use Timing.CurrentCoroutine instead.", false)]
		public static float GetMyHandle(Action<CoroutineHandle> reciever)
		{
			return default(float);
		}

		[Token(Token = "0x6000157")]
		[Address(RVA = "0x11F483C", Offset = "0x11F483C", VA = "0x11F483C")]
		private static IEnumerator<float> GetHandleHelper(IEnumerator<float> input, CoroutineHandle handle)
		{
			return null;
		}

		[Token(Token = "0x6000158")]
		[Address(RVA = "0x11F48E0", Offset = "0x11F48E0", VA = "0x11F48E0")]
		public static float SwitchCoroutine(Segment newSegment)
		{
			return default(float);
		}

		[Token(Token = "0x6000159")]
		[Address(RVA = "0x11F499C", Offset = "0x11F499C", VA = "0x11F499C")]
		private static IEnumerator<float> SwitchCoroutineRepS(IEnumerator<float> coptr, CoroutineHandle handle)
		{
			return null;
		}

		[Token(Token = "0x600015A")]
		[Address(RVA = "0x11F4A48", Offset = "0x11F4A48", VA = "0x11F4A48")]
		public static float SwitchCoroutine(Segment newSegment, string newTag)
		{
			return default(float);
		}

		[Token(Token = "0x600015B")]
		[Address(RVA = "0x11F4B14", Offset = "0x11F4B14", VA = "0x11F4B14")]
		private static IEnumerator<float> SwitchCoroutineRepST(IEnumerator<float> coptr, CoroutineHandle handle)
		{
			return null;
		}

		[Token(Token = "0x600015C")]
		[Address(RVA = "0x11F4C6C", Offset = "0x11F4C6C", VA = "0x11F4C6C")]
		public static float SwitchCoroutine(Segment newSegment, int newLayer)
		{
			return default(float);
		}

		[Token(Token = "0x600015D")]
		[Address(RVA = "0x11F4D38", Offset = "0x11F4D38", VA = "0x11F4D38")]
		private static IEnumerator<float> SwitchCoroutineRepSL(IEnumerator<float> coptr, CoroutineHandle handle)
		{
			return null;
		}

		[Token(Token = "0x600015E")]
		[Address(RVA = "0x11F4E10", Offset = "0x11F4E10", VA = "0x11F4E10")]
		public static float SwitchCoroutine(Segment newSegment, int newLayer, string newTag)
		{
			return default(float);
		}

		[Token(Token = "0x600015F")]
		[Address(RVA = "0x11F4EE4", Offset = "0x11F4EE4", VA = "0x11F4EE4")]
		private static IEnumerator<float> SwitchCoroutineRepSLT(IEnumerator<float> coptr, CoroutineHandle handle)
		{
			return null;
		}

		[Token(Token = "0x6000160")]
		[Address(RVA = "0x11F5060", Offset = "0x11F5060", VA = "0x11F5060")]
		public static float SwitchCoroutine(string newTag)
		{
			return default(float);
		}

		[Token(Token = "0x6000161")]
		[Address(RVA = "0x11F511C", Offset = "0x11F511C", VA = "0x11F511C")]
		private static IEnumerator<float> SwitchCoroutineRepT(IEnumerator<float> coptr, CoroutineHandle handle)
		{
			return null;
		}

		[Token(Token = "0x6000162")]
		[Address(RVA = "0x11F5230", Offset = "0x11F5230", VA = "0x11F5230")]
		public static float SwitchCoroutine(int newLayer)
		{
			return default(float);
		}

		[Token(Token = "0x6000163")]
		[Address(RVA = "0x11F52EC", Offset = "0x11F52EC", VA = "0x11F52EC")]
		private static IEnumerator<float> SwitchCoroutineRepL(IEnumerator<float> coptr, CoroutineHandle handle)
		{
			return null;
		}

		[Token(Token = "0x6000164")]
		[Address(RVA = "0x11F5384", Offset = "0x11F5384", VA = "0x11F5384")]
		public static float SwitchCoroutine(int newLayer, string newTag)
		{
			return default(float);
		}

		[Token(Token = "0x6000165")]
		[Address(RVA = "0x11F5450", Offset = "0x11F5450", VA = "0x11F5450")]
		private static IEnumerator<float> SwitchCoroutineRepLT(IEnumerator<float> coptr, CoroutineHandle handle)
		{
			return null;
		}

		[Token(Token = "0x6000166")]
		[Address(RVA = "0x11F5588", Offset = "0x11F5588", VA = "0x11F5588")]
		public static CoroutineHandle CallDelayed(float delay, Action action)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000167")]
		[Address(RVA = "0x11F56A0", Offset = "0x11F56A0", VA = "0x11F56A0")]
		public CoroutineHandle CallDelayedOnInstance(float delay, Action action)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000168")]
		[Address(RVA = "0x11F56D4", Offset = "0x11F56D4", VA = "0x11F56D4")]
		public static CoroutineHandle CallDelayed(float delay, Action action, GameObject gameObject)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000169")]
		[Address(RVA = "0x11F5768", Offset = "0x11F5768", VA = "0x11F5768")]
		public CoroutineHandle CallDelayedOnInstance(float delay, Action action, GameObject gameObject)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600016A")]
		[Address(RVA = "0x11F5614", Offset = "0x11F5614", VA = "0x11F5614")]
		[IteratorStateMachine(typeof(<_DelayedCall>d__313))]
		private IEnumerator<float> _DelayedCall(float delay, Action action, GameObject cancelWith)
		{
			return null;
		}

		[Token(Token = "0x600016B")]
		[Address(RVA = "0x11F57A8", Offset = "0x11F57A8", VA = "0x11F57A8")]
		public static CoroutineHandle CallDelayed(float delay, Segment segment, Action action)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600016C")]
		[Address(RVA = "0x11F583C", Offset = "0x11F583C", VA = "0x11F583C")]
		public CoroutineHandle CallDelayedOnInstance(float delay, Segment segment, Action action)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600016D")]
		[Address(RVA = "0x11F5884", Offset = "0x11F5884", VA = "0x11F5884")]
		public static CoroutineHandle CallDelayed(float delay, Segment segment, Action action, GameObject gameObject)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600016E")]
		[Address(RVA = "0x11F5928", Offset = "0x11F5928", VA = "0x11F5928")]
		public CoroutineHandle CallDelayedOnInstance(float delay, Segment segment, Action action, GameObject gameObject)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600016F")]
		[Address(RVA = "0x11F5978", Offset = "0x11F5978", VA = "0x11F5978")]
		public static CoroutineHandle CallPeriodically(float timeframe, float period, Action action, [Optional] Action onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000170")]
		[Address(RVA = "0x11F5B70", Offset = "0x11F5B70", VA = "0x11F5B70")]
		public CoroutineHandle CallPeriodicallyOnInstance(float timeframe, float period, Action action, [Optional] Action onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000171")]
		[Address(RVA = "0x11F5BFC", Offset = "0x11F5BFC", VA = "0x11F5BFC")]
		public static CoroutineHandle CallPeriodically(float timeframe, float period, Action action, GameObject gameObject, [Optional] Action onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000172")]
		[Address(RVA = "0x11F5CEC", Offset = "0x11F5CEC", VA = "0x11F5CEC")]
		public CoroutineHandle CallPeriodicallyOnInstance(float timeframe, float period, Action action, GameObject gameObject, [Optional] Action onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000173")]
		[Address(RVA = "0x11F5DDC", Offset = "0x11F5DDC", VA = "0x11F5DDC")]
		public static CoroutineHandle CallPeriodically(float timeframe, float period, Action action, Segment timing, [Optional] Action onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000174")]
		[Address(RVA = "0x11F5EC0", Offset = "0x11F5EC0", VA = "0x11F5EC0")]
		public CoroutineHandle CallPeriodicallyOnInstance(float timeframe, float period, Action action, Segment timing, [Optional] Action onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000175")]
		[Address(RVA = "0x11F5FB0", Offset = "0x11F5FB0", VA = "0x11F5FB0")]
		public static CoroutineHandle CallPeriodically(float timeframe, float period, Action action, Segment timing, GameObject gameObject, [Optional] Action onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000176")]
		[Address(RVA = "0x11F60AC", Offset = "0x11F60AC", VA = "0x11F60AC")]
		public CoroutineHandle CallPeriodicallyOnInstance(float timeframe, float period, Action action, Segment timing, GameObject gameObject, [Optional] Action onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000177")]
		[Address(RVA = "0x11F61B0", Offset = "0x11F61B0", VA = "0x11F61B0")]
		public static CoroutineHandle CallContinuously(float timeframe, Action action, [Optional] Action onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000178")]
		[Address(RVA = "0x11F6288", Offset = "0x11F6288", VA = "0x11F6288")]
		public CoroutineHandle CallContinuouslyOnInstance(float timeframe, Action action, [Optional] Action onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000179")]
		[Address(RVA = "0x11F6368", Offset = "0x11F6368", VA = "0x11F6368")]
		public static CoroutineHandle CallContinuously(float timeframe, Action action, GameObject gameObject, [Optional] Action onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600017A")]
		[Address(RVA = "0x11F6454", Offset = "0x11F6454", VA = "0x11F6454")]
		public CoroutineHandle CallContinuouslyOnInstance(float timeframe, Action action, GameObject gameObject, [Optional] Action onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600017B")]
		[Address(RVA = "0x11F6540", Offset = "0x11F6540", VA = "0x11F6540")]
		public static CoroutineHandle CallContinuously(float timeframe, Action action, Segment timing, [Optional] Action onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600017C")]
		[Address(RVA = "0x11F662C", Offset = "0x11F662C", VA = "0x11F662C")]
		public CoroutineHandle CallContinuouslyOnInstance(float timeframe, Action action, Segment timing, [Optional] Action onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600017D")]
		[Address(RVA = "0x11F6718", Offset = "0x11F6718", VA = "0x11F6718")]
		public static CoroutineHandle CallContinuously(float timeframe, Action action, Segment timing, GameObject gameObject, [Optional] Action onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600017E")]
		[Address(RVA = "0x11F6810", Offset = "0x11F6810", VA = "0x11F6810")]
		public CoroutineHandle CallContinuouslyOnInstance(float timeframe, Action action, Segment timing, GameObject gameObject, [Optional] Action onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600017F")]
		[Address(RVA = "0x11F5AD4", Offset = "0x11F5AD4", VA = "0x11F5AD4")]
		[IteratorStateMachine(typeof(<_WatchCall>d__334))]
		private IEnumerator<float> _WatchCall(float timeframe, CoroutineHandle handle, GameObject gObject, Action onDone)
		{
			return null;
		}

		[Token(Token = "0x6000180")]
		[Address(RVA = "0x11F5A48", Offset = "0x11F5A48", VA = "0x11F5A48")]
		[IteratorStateMachine(typeof(<_CallContinuously>d__335))]
		private IEnumerator<float> _CallContinuously(float period, Action action, GameObject gObject)
		{
			return null;
		}

		[Token(Token = "0x6000181")]
		public static CoroutineHandle CallPeriodically<T>(T reference, float timeframe, float period, Action<T> action, [Optional] Action<T> onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000182")]
		public CoroutineHandle CallPeriodicallyOnInstance<T>(T reference, float timeframe, float period, Action<T> action, [Optional] Action<T> onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000183")]
		public static CoroutineHandle CallPeriodically<T>(T reference, float timeframe, float period, Action<T> action, GameObject gameObject, [Optional] Action<T> onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000184")]
		public CoroutineHandle CallPeriodicallyOnInstance<T>(T reference, float timeframe, float period, Action<T> action, GameObject gameObject, [Optional] Action<T> onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000185")]
		public static CoroutineHandle CallPeriodically<T>(T reference, float timeframe, float period, Action<T> action, Segment timing, [Optional] Action<T> onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000186")]
		public CoroutineHandle CallPeriodicallyOnInstance<T>(T reference, float timeframe, float period, Action<T> action, Segment timing, [Optional] Action<T> onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000187")]
		public static CoroutineHandle CallPeriodically<T>(T reference, float timeframe, float period, Action<T> action, Segment timing, GameObject gameObject, [Optional] Action<T> onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000188")]
		public CoroutineHandle CallPeriodicallyOnInstance<T>(T reference, float timeframe, float period, Action<T> action, Segment timing, GameObject gameObject, [Optional] Action<T> onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000189")]
		public static CoroutineHandle CallContinuously<T>(T reference, float timeframe, Action<T> action, [Optional] Action<T> onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600018A")]
		public CoroutineHandle CallContinuouslyOnInstance<T>(T reference, float timeframe, Action<T> action, [Optional] Action<T> onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600018B")]
		public static CoroutineHandle CallContinuously<T>(T reference, float timeframe, Action<T> action, GameObject gameObject, [Optional] Action<T> onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600018C")]
		public CoroutineHandle CallContinuouslyOnInstance<T>(T reference, float timeframe, Action<T> action, GameObject gameObject, [Optional] Action<T> onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600018D")]
		public static CoroutineHandle CallContinuously<T>(T reference, float timeframe, Action<T> action, Segment timing, [Optional] Action<T> onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600018E")]
		public CoroutineHandle CallContinuouslyOnInstance<T>(T reference, float timeframe, Action<T> action, Segment timing, [Optional] Action<T> onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600018F")]
		public static CoroutineHandle CallContinuously<T>(T reference, float timeframe, Action<T> action, Segment timing, GameObject gameObject, [Optional] Action<T> onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000190")]
		public CoroutineHandle CallContinuouslyOnInstance<T>(T reference, float timeframe, Action<T> action, Segment timing, GameObject gameObject, [Optional] Action<T> onDone)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000191")]
		[IteratorStateMachine(typeof(<_WatchCall>d__352<>))]
		private IEnumerator<float> _WatchCall<T>(T reference, float timeframe, CoroutineHandle handle, GameObject gObject, Action<T> onDone)
		{
			return null;
		}

		[Token(Token = "0x6000192")]
		[IteratorStateMachine(typeof(<_CallContinuously>d__353<>))]
		private IEnumerator<float> _CallContinuously<T>(T reference, float period, Action<T> action, GameObject gObject)
		{
			return null;
		}

		[Token(Token = "0x6000193")]
		[Address(RVA = "0x11F6910", Offset = "0x11F6910", VA = "0x11F6910")]
		[Obsolete("Unity coroutine function, use RunCoroutine instead.", true)]
		public new Coroutine StartCoroutine(IEnumerator routine)
		{
			return null;
		}

		[Token(Token = "0x6000194")]
		[Address(RVA = "0x11F6918", Offset = "0x11F6918", VA = "0x11F6918")]
		[Obsolete("Unity coroutine function, use RunCoroutine instead.", true)]
		public new Coroutine StartCoroutine(string methodName, object value)
		{
			return null;
		}

		[Token(Token = "0x6000195")]
		[Address(RVA = "0x11F6920", Offset = "0x11F6920", VA = "0x11F6920")]
		[Obsolete("Unity coroutine function, use RunCoroutine instead.", true)]
		public new Coroutine StartCoroutine(string methodName)
		{
			return null;
		}

		[Token(Token = "0x6000196")]
		[Address(RVA = "0x11F6928", Offset = "0x11F6928", VA = "0x11F6928")]
		[Obsolete("Unity coroutine function, use RunCoroutine instead.", true)]
		public new Coroutine StartCoroutine_Auto(IEnumerator routine)
		{
			return null;
		}

		[Token(Token = "0x6000197")]
		[Address(RVA = "0x11F6930", Offset = "0x11F6930", VA = "0x11F6930")]
		[Obsolete("Unity coroutine function, use KillCoroutines instead.", true)]
		public new void StopCoroutine(string methodName)
		{
		}

		[Token(Token = "0x6000198")]
		[Address(RVA = "0x11F6934", Offset = "0x11F6934", VA = "0x11F6934")]
		[Obsolete("Unity coroutine function, use KillCoroutines instead.", true)]
		public new void StopCoroutine(IEnumerator routine)
		{
		}

		[Token(Token = "0x6000199")]
		[Address(RVA = "0x11F6938", Offset = "0x11F6938", VA = "0x11F6938")]
		[Obsolete("Unity coroutine function, use KillCoroutines instead.", true)]
		public new void StopCoroutine(Coroutine routine)
		{
		}

		[Token(Token = "0x600019A")]
		[Address(RVA = "0x11F693C", Offset = "0x11F693C", VA = "0x11F693C")]
		[Obsolete("Unity coroutine function, use KillCoroutines instead.", true)]
		public new void StopAllCoroutines()
		{
		}

		[Token(Token = "0x600019B")]
		[Address(RVA = "0x11F6940", Offset = "0x11F6940", VA = "0x11F6940")]
		[Obsolete("Use your own GameObject for this.", true)]
		public new static void Destroy(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x600019C")]
		[Address(RVA = "0x11F6944", Offset = "0x11F6944", VA = "0x11F6944")]
		[Obsolete("Use your own GameObject for this.", true)]
		public new static void Destroy(UnityEngine.Object obj, float f)
		{
		}

		[Token(Token = "0x600019D")]
		[Address(RVA = "0x11F6948", Offset = "0x11F6948", VA = "0x11F6948")]
		[Obsolete("Use your own GameObject for this.", true)]
		public static void DestroyObject(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x600019E")]
		[Address(RVA = "0x11F694C", Offset = "0x11F694C", VA = "0x11F694C")]
		[Obsolete("Use your own GameObject for this.", true)]
		public static void DestroyObject(UnityEngine.Object obj, float f)
		{
		}

		[Token(Token = "0x600019F")]
		[Address(RVA = "0x11F6950", Offset = "0x11F6950", VA = "0x11F6950")]
		[Obsolete("Use your own GameObject for this.", true)]
		public new static void DestroyImmediate(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x60001A0")]
		[Address(RVA = "0x11F6954", Offset = "0x11F6954", VA = "0x11F6954")]
		[Obsolete("Use your own GameObject for this.", true)]
		public new static void DestroyImmediate(UnityEngine.Object obj, bool b)
		{
		}

		[Token(Token = "0x60001A1")]
		[Address(RVA = "0x11F6958", Offset = "0x11F6958", VA = "0x11F6958")]
		[Obsolete("Use your own GameObject for this.", true)]
		public new static void Instantiate(UnityEngine.Object obj)
		{
		}

		[Token(Token = "0x60001A2")]
		[Address(RVA = "0x11F695C", Offset = "0x11F695C", VA = "0x11F695C")]
		[Obsolete("Use your own GameObject for this.", true)]
		public new static void Instantiate(UnityEngine.Object original, Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x60001A3")]
		[Obsolete("Use your own GameObject for this.", true)]
		public new static void Instantiate<T>(T original) where T : UnityEngine.Object
		{
		}

		[Token(Token = "0x60001A4")]
		[Obsolete("Just.. no.", true)]
		public new static T FindObjectOfType<T>() where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60001A5")]
		[Address(RVA = "0x11F6960", Offset = "0x11F6960", VA = "0x11F6960")]
		[Obsolete("Just.. no.", true)]
		public new static UnityEngine.Object FindObjectOfType(Type t)
		{
			return null;
		}

		[Token(Token = "0x60001A6")]
		[Obsolete("Just.. no.", true)]
		public new static T[] FindObjectsOfType<T>() where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x60001A7")]
		[Address(RVA = "0x11F6968", Offset = "0x11F6968", VA = "0x11F6968")]
		[Obsolete("Just.. no.", true)]
		public new static UnityEngine.Object[] FindObjectsOfType(Type t)
		{
			return null;
		}

		[Token(Token = "0x60001A8")]
		[Address(RVA = "0x11F6970", Offset = "0x11F6970", VA = "0x11F6970")]
		[Obsolete("Just.. no.", true)]
		public new static void print(object message)
		{
		}

		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x11F6974", Offset = "0x11F6974", VA = "0x11F6974")]
		public Timing()
		{
		}
	}
	[Token(Token = "0x200002A")]
	public enum Segment
	{
		[Token(Token = "0x400010B")]
		Invalid = -1,
		[Token(Token = "0x400010C")]
		Update,
		[Token(Token = "0x400010D")]
		FixedUpdate,
		[Token(Token = "0x400010E")]
		LateUpdate,
		[Token(Token = "0x400010F")]
		SlowUpdate,
		[Token(Token = "0x4000110")]
		RealtimeUpdate,
		[Token(Token = "0x4000111")]
		EditorUpdate,
		[Token(Token = "0x4000112")]
		EditorSlowUpdate,
		[Token(Token = "0x4000113")]
		EndOfFrame,
		[Token(Token = "0x4000114")]
		ManualTimeframe
	}
	[Token(Token = "0x200002B")]
	public enum DebugInfoType
	{
		[Token(Token = "0x4000116")]
		None,
		[Token(Token = "0x4000117")]
		SeperateCoroutines,
		[Token(Token = "0x4000118")]
		SeperateTags
	}
	[Token(Token = "0x200002C")]
	public enum SingletonBehavior
	{
		[Token(Token = "0x400011A")]
		Abort,
		[Token(Token = "0x400011B")]
		Overwrite,
		[Token(Token = "0x400011C")]
		Wait,
		[Token(Token = "0x400011D")]
		AbortAndUnpause
	}
	[Token(Token = "0x200002D")]
	public struct CoroutineHandle : IEquatable<CoroutineHandle>
	{
		[Token(Token = "0x400011E")]
		private const byte ReservedSpace = 15;

		[Token(Token = "0x400011F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int[] NextIndex;

		[Token(Token = "0x4000120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int _id;

		[Token(Token = "0x1700004E")]
		public byte Key
		{
			[Token(Token = "0x60001F9")]
			[Address(RVA = "0x11FD34C", Offset = "0x11FD34C", VA = "0x11FD34C")]
			get
			{
				return default(byte);
			}
		}

		[Token(Token = "0x1700004F")]
		public string Tag
		{
			[Token(Token = "0x6000202")]
			[Address(RVA = "0x11FD7D0", Offset = "0x11FD7D0", VA = "0x11FD7D0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000203")]
			[Address(RVA = "0x11FD82C", Offset = "0x11FD82C", VA = "0x11FD82C")]
			set
			{
			}
		}

		[Token(Token = "0x17000050")]
		public int? Layer
		{
			[Token(Token = "0x6000204")]
			[Address(RVA = "0x11FD89C", Offset = "0x11FD89C", VA = "0x11FD89C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000205")]
			[Address(RVA = "0x11FD8F8", Offset = "0x11FD8F8", VA = "0x11FD8F8")]
			set
			{
			}
		}

		[Token(Token = "0x17000051")]
		public Segment Segment
		{
			[Token(Token = "0x6000206")]
			[Address(RVA = "0x11FD9D4", Offset = "0x11FD9D4", VA = "0x11FD9D4")]
			get
			{
				return default(Segment);
			}
			[Token(Token = "0x6000207")]
			[Address(RVA = "0x11FDA30", Offset = "0x11FDA30", VA = "0x11FDA30")]
			set
			{
			}
		}

		[Token(Token = "0x17000052")]
		public bool IsRunning
		{
			[Token(Token = "0x6000208")]
			[Address(RVA = "0x11FA36C", Offset = "0x11FA36C", VA = "0x11FA36C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000209")]
			[Address(RVA = "0x11FDA9C", Offset = "0x11FDA9C", VA = "0x11FDA9C")]
			set
			{
			}
		}

		[Token(Token = "0x17000053")]
		public bool IsAliveAndPaused
		{
			[Token(Token = "0x600020A")]
			[Address(RVA = "0x11FDB10", Offset = "0x11FDB10", VA = "0x11FDB10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600020B")]
			[Address(RVA = "0x11FDB6C", Offset = "0x11FDB6C", VA = "0x11FDB6C")]
			set
			{
			}
		}

		[Token(Token = "0x17000054")]
		public bool IsValid
		{
			[Token(Token = "0x600020C")]
			[Address(RVA = "0x11FDBE8", Offset = "0x11FDBE8", VA = "0x11FDBE8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60001FA")]
		[Address(RVA = "0x11FD358", Offset = "0x11FD358", VA = "0x11FD358")]
		public CoroutineHandle(byte ind)
		{
		}

		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x11FD408", Offset = "0x11FD408", VA = "0x11FD408")]
		public CoroutineHandle(CoroutineHandle other)
		{
		}

		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x11FD410", Offset = "0x11FD410", VA = "0x11FD410", Slot = "4")]
		public bool Equals(CoroutineHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x11FD420", Offset = "0x11FD420", VA = "0x11FD420", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x60001FE")]
		[Address(RVA = "0x11FD498", Offset = "0x11FD498", VA = "0x11FD498")]
		public static bool operator ==(CoroutineHandle a, CoroutineHandle b)
		{
			return default(bool);
		}

		[Token(Token = "0x60001FF")]
		[Address(RVA = "0x11FD4A4", Offset = "0x11FD4A4", VA = "0x11FD4A4")]
		public static bool operator !=(CoroutineHandle a, CoroutineHandle b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000200")]
		[Address(RVA = "0x11FD4B0", Offset = "0x11FD4B0", VA = "0x11FD4B0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000201")]
		[Address(RVA = "0x11FD4B8", Offset = "0x11FD4B8", VA = "0x11FD4B8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200002E")]
	public static class MECExtensionMethods1
	{
		[Token(Token = "0x600020E")]
		[Address(RVA = "0x11FDC7C", Offset = "0x11FDC7C", VA = "0x11FDC7C")]
		public static CoroutineHandle RunCoroutine(this IEnumerator<float> coroutine)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600020F")]
		[Address(RVA = "0x11FDCDC", Offset = "0x11FDCDC", VA = "0x11FDCDC")]
		public static CoroutineHandle RunCoroutine(this IEnumerator<float> coroutine, GameObject gameObj)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000210")]
		[Address(RVA = "0x11FDD4C", Offset = "0x11FDD4C", VA = "0x11FDD4C")]
		public static CoroutineHandle RunCoroutine(this IEnumerator<float> coroutine, int layer)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000211")]
		[Address(RVA = "0x11FDDBC", Offset = "0x11FDDBC", VA = "0x11FDDBC")]
		public static CoroutineHandle RunCoroutine(this IEnumerator<float> coroutine, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000212")]
		[Address(RVA = "0x11FDE2C", Offset = "0x11FDE2C", VA = "0x11FDE2C")]
		public static CoroutineHandle RunCoroutine(this IEnumerator<float> coroutine, GameObject gameObj, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000213")]
		[Address(RVA = "0x11FDEA4", Offset = "0x11FDEA4", VA = "0x11FDEA4")]
		public static CoroutineHandle RunCoroutine(this IEnumerator<float> coroutine, int layer, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000214")]
		[Address(RVA = "0x11FDF1C", Offset = "0x11FDF1C", VA = "0x11FDF1C")]
		public static CoroutineHandle RunCoroutine(this IEnumerator<float> coroutine, Segment segment)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000215")]
		[Address(RVA = "0x11FDF8C", Offset = "0x11FDF8C", VA = "0x11FDF8C")]
		public static CoroutineHandle RunCoroutine(this IEnumerator<float> coroutine, Segment segment, GameObject gameObj)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0x11FE004", Offset = "0x11FE004", VA = "0x11FE004")]
		public static CoroutineHandle RunCoroutine(this IEnumerator<float> coroutine, Segment segment, int layer)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000217")]
		[Address(RVA = "0x11FE07C", Offset = "0x11FE07C", VA = "0x11FE07C")]
		public static CoroutineHandle RunCoroutine(this IEnumerator<float> coroutine, Segment segment, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000218")]
		[Address(RVA = "0x11FE0F4", Offset = "0x11FE0F4", VA = "0x11FE0F4")]
		public static CoroutineHandle RunCoroutine(this IEnumerator<float> coroutine, Segment segment, GameObject gameObj, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000219")]
		[Address(RVA = "0x11FE17C", Offset = "0x11FE17C", VA = "0x11FE17C")]
		public static CoroutineHandle RunCoroutine(this IEnumerator<float> coroutine, Segment segment, int layer, string tag)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600021A")]
		[Address(RVA = "0x11FE204", Offset = "0x11FE204", VA = "0x11FE204")]
		public static CoroutineHandle RunCoroutineSingleton(this IEnumerator<float> coroutine, CoroutineHandle handle, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600021B")]
		[Address(RVA = "0x11FE27C", Offset = "0x11FE27C", VA = "0x11FE27C")]
		public static CoroutineHandle RunCoroutineSingleton(this IEnumerator<float> coroutine, GameObject gameObj, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600021C")]
		[Address(RVA = "0x11FE368", Offset = "0x11FE368", VA = "0x11FE368")]
		public static CoroutineHandle RunCoroutineSingleton(this IEnumerator<float> coroutine, int layer, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600021D")]
		[Address(RVA = "0x11FE3E0", Offset = "0x11FE3E0", VA = "0x11FE3E0")]
		public static CoroutineHandle RunCoroutineSingleton(this IEnumerator<float> coroutine, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600021E")]
		[Address(RVA = "0x11FE458", Offset = "0x11FE458", VA = "0x11FE458")]
		public static CoroutineHandle RunCoroutineSingleton(this IEnumerator<float> coroutine, GameObject gameObj, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x600021F")]
		[Address(RVA = "0x11FE55C", Offset = "0x11FE55C", VA = "0x11FE55C")]
		public static CoroutineHandle RunCoroutineSingleton(this IEnumerator<float> coroutine, int layer, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000220")]
		[Address(RVA = "0x11FE5E4", Offset = "0x11FE5E4", VA = "0x11FE5E4")]
		public static CoroutineHandle RunCoroutineSingleton(this IEnumerator<float> coroutine, CoroutineHandle handle, Segment segment, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000221")]
		[Address(RVA = "0x11FE66C", Offset = "0x11FE66C", VA = "0x11FE66C")]
		public static CoroutineHandle RunCoroutineSingleton(this IEnumerator<float> coroutine, Segment segment, GameObject gameObj, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000222")]
		[Address(RVA = "0x11FE76C", Offset = "0x11FE76C", VA = "0x11FE76C")]
		public static CoroutineHandle RunCoroutineSingleton(this IEnumerator<float> coroutine, Segment segment, int layer, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000223")]
		[Address(RVA = "0x11FE7F4", Offset = "0x11FE7F4", VA = "0x11FE7F4")]
		public static CoroutineHandle RunCoroutineSingleton(this IEnumerator<float> coroutine, Segment segment, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000224")]
		[Address(RVA = "0x11FE87C", Offset = "0x11FE87C", VA = "0x11FE87C")]
		public static CoroutineHandle RunCoroutineSingleton(this IEnumerator<float> coroutine, Segment segment, GameObject gameObj, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}

		[Token(Token = "0x6000225")]
		[Address(RVA = "0x11FE98C", Offset = "0x11FE98C", VA = "0x11FE98C")]
		public static CoroutineHandle RunCoroutineSingleton(this IEnumerator<float> coroutine, Segment segment, int layer, string tag, SingletonBehavior behaviorOnCollision)
		{
			return default(CoroutineHandle);
		}
	}
}
namespace RootMotion
{
	[Token(Token = "0x200002F")]
	[AddComponentMenu("Scripts/RootMotion/Baker")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page3.html")]
	public abstract class Baker : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000030")]
		public enum Mode
		{
			[Token(Token = "0x4000130")]
			AnimationClips,
			[Token(Token = "0x4000131")]
			AnimationStates,
			[Token(Token = "0x4000132")]
			PlayableDirector,
			[Token(Token = "0x4000133")]
			Realtime
		}

		[Token(Token = "0x4000121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("In AnimationClips, AnimationStates or PlayableDirector mode - the frame rate at which the animation clip will be sampled. In Realtime mode - the frame rate at which the pose will be sampled. With the latter, the frame rate is not guaranteed if the player is not able to reach it.")]
		[Range(1f, 90f)]
		public int frameRate;

		[Token(Token = "0x4000122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 0.1f)]
		[Tooltip("Maximum allowed error for keyframe reduction.")]
		public float keyReductionError;

		[Token(Token = "0x4000123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("AnimationClips mode can be used to bake a batch of AnimationClips directly without the need of setting up an AnimatorController. AnimationStates mode is useful for when you need to set up a more complex rig with layers and AvatarMasks in Mecanim. PlayableDirector mode bakes a Timeline. Realtime mode is for continuous baking of gameplay, ragdoll phsysics or PuppetMaster dynamics.")]
		public Mode mode;

		[Token(Token = "0x4000124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("AnimationClips to bake.")]
		public AnimationClip[] animationClips;

		[Token(Token = "0x4000125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The name of the AnimationStates to bake (must be on the base layer) in the Animator above (Right-click on this component header and select 'Find Animation States' to have Baker fill those in automatically, required that state names match with the names of the clips used in them).")]
		public string[] animationStates;

		[Token(Token = "0x4000126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Sets the baked animation clip to loop time and matches the last frame keys with the first. Note that when overwriting a previously baked clip, AnimationClipSettings will be copied from the existing clip.")]
		public bool loop;

		[Token(Token = "0x4000127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The folder to save the baked AnimationClips to.")]
		public string saveToFolder;

		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("String that will be added to each clip or animation state name for the saved clip. For example if your animation state/clip names were 'Idle' and 'Walk', then with '_Baked' as Append Name, the Baker will create 'Idle_Baked' and 'Walk_Baked' animation clips.")]
		public string appendName;

		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Name of the created AnimationClip file.")]
		public string saveName;

		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		[SerializeField]
		public Animator animator;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[HideInInspector]
		public PlayableDirector director;

		[Token(Token = "0x17000055")]
		public bool isBaking
		{
			[Token(Token = "0x600022A")]
			[Address(RVA = "0x11FEB2C", Offset = "0x11FEB2C", VA = "0x11FEB2C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600022B")]
			[Address(RVA = "0x11FEB34", Offset = "0x11FEB34", VA = "0x11FEB34")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000056")]
		public float bakingProgress
		{
			[Token(Token = "0x600022C")]
			[Address(RVA = "0x11FEB40", Offset = "0x11FEB40", VA = "0x11FEB40")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600022D")]
			[Address(RVA = "0x11FEB48", Offset = "0x11FEB48", VA = "0x11FEB48")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000057")]
		protected float clipLength
		{
			[Token(Token = "0x6000233")]
			[Address(RVA = "0x11FEB50", Offset = "0x11FEB50", VA = "0x11FEB50")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000234")]
			[Address(RVA = "0x11FEB58", Offset = "0x11FEB58", VA = "0x11FEB58")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000226")]
		[Address(RVA = "0x11FEA1C", Offset = "0x11FEA1C", VA = "0x11FEA1C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000227")]
		[Address(RVA = "0x11FEA60", Offset = "0x11FEA60", VA = "0x11FEA60")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000228")]
		[Address(RVA = "0x11FEAA4", Offset = "0x11FEAA4", VA = "0x11FEAA4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0x11FEAE8", Offset = "0x11FEAE8", VA = "0x11FEAE8")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600022E")]
		protected abstract Transform GetCharacterRoot();

		[Token(Token = "0x600022F")]
		protected abstract void OnStartBaking();

		[Token(Token = "0x6000230")]
		protected abstract void OnSetLoopFrame(float time);

		[Token(Token = "0x6000231")]
		protected abstract void OnSetCurves(ref AnimationClip clip);

		[Token(Token = "0x6000232")]
		protected abstract void OnSetKeyframes(float time, bool lastFrame);

		[Token(Token = "0x6000235")]
		[Address(RVA = "0x11FEB60", Offset = "0x11FEB60", VA = "0x11FEB60")]
		public void BakeClip()
		{
		}

		[Token(Token = "0x6000236")]
		[Address(RVA = "0x11FEB64", Offset = "0x11FEB64", VA = "0x11FEB64")]
		public void StartBaking()
		{
		}

		[Token(Token = "0x6000237")]
		[Address(RVA = "0x11FEB68", Offset = "0x11FEB68", VA = "0x11FEB68")]
		public void StopBaking()
		{
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0x11FEB6C", Offset = "0x11FEB6C", VA = "0x11FEB6C")]
		protected Baker()
		{
		}
	}
	[Token(Token = "0x2000031")]
	public class GenericBaker : Baker
	{
		[Token(Token = "0x4000134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("If true, produced AnimationClips will be marked as Legacy and usable with the Legacy animation system.")]
		public bool markAsLegacy;

		[Token(Token = "0x4000135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Root Transform of the hierarchy to bake.")]
		public Transform root;

		[Token(Token = "0x4000136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Root Node used for root motion.")]
		public Transform rootNode;

		[Token(Token = "0x4000137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("List of Transforms to ignore, rotation curves will not be baked for these Transforms.")]
		public Transform[] ignoreList;

		[Token(Token = "0x4000138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("LocalPosition curves will be baked for these Transforms only. If you are baking a character, the pelvis bone should be added to this array.")]
		public Transform[] bakePositionList;

		[Token(Token = "0x4000139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerTransform[] children;

		[Token(Token = "0x400013A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerTransform rootChild;

		[Token(Token = "0x400013B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int rootChildIndex;

		[Token(Token = "0x6000239")]
		[Address(RVA = "0x11FEC64", Offset = "0x11FEC64", VA = "0x11FEC64")]
		private void Awake()
		{
		}

		[Token(Token = "0x600023A")]
		[Address(RVA = "0x11FF080", Offset = "0x11FF080", VA = "0x11FF080", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x600023B")]
		[Address(RVA = "0x11FF088", Offset = "0x11FF088", VA = "0x11FF088", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0x11FF274", Offset = "0x11FF274", VA = "0x11FF274", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x600023D")]
		[Address(RVA = "0x11FF4D8", Offset = "0x11FF4D8", VA = "0x11FF4D8", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x600023E")]
		[Address(RVA = "0x11FF7F0", Offset = "0x11FF7F0", VA = "0x11FF7F0", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x600023F")]
		[Address(RVA = "0x11FEE7C", Offset = "0x11FEE7C", VA = "0x11FEE7C")]
		private bool IsIgnored(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000240")]
		[Address(RVA = "0x11FEF34", Offset = "0x11FEF34", VA = "0x11FEF34")]
		private bool BakePosition(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000241")]
		[Address(RVA = "0x11FFA50", Offset = "0x11FFA50", VA = "0x11FFA50")]
		public GenericBaker()
		{
		}
	}
	[Token(Token = "0x2000032")]
	public class TQ
	{
		[Token(Token = "0x400013C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 t;

		[Token(Token = "0x400013D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion q;

		[Token(Token = "0x6000242")]
		[Address(RVA = "0x11FFAAC", Offset = "0x11FFAAC", VA = "0x11FFAAC")]
		public TQ(Vector3 translation, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x2000033")]
	public class AvatarUtility
	{
		[Token(Token = "0x6000243")]
		[Address(RVA = "0x11FFB10", Offset = "0x11FFB10", VA = "0x11FFB10")]
		public static Quaternion GetPostRotation(Avatar avatar, AvatarIKGoal avatarIKGoal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000244")]
		[Address(RVA = "0x11FFD60", Offset = "0x11FFD60", VA = "0x11FFD60")]
		public static TQ GetIKGoalTQ(Avatar avatar, float humanScale, AvatarIKGoal avatarIKGoal, TQ bodyPositionRotation, TQ boneTQ)
		{
			return null;
		}

		[Token(Token = "0x6000245")]
		[Address(RVA = "0x11FFD40", Offset = "0x11FFD40", VA = "0x11FFD40")]
		public static HumanBodyBones HumanIDFromAvatarIKGoal(AvatarIKGoal avatarIKGoal)
		{
			return default(HumanBodyBones);
		}

		[Token(Token = "0x6000246")]
		[Address(RVA = "0x12003B8", Offset = "0x12003B8", VA = "0x12003B8")]
		public AvatarUtility()
		{
		}
	}
	[Token(Token = "0x2000034")]
	public static class BakerUtilities
	{
		[Token(Token = "0x6000247")]
		[Address(RVA = "0x12003C0", Offset = "0x12003C0", VA = "0x12003C0")]
		public static void ReduceKeyframes(AnimationCurve curve, float maxError)
		{
		}

		[Token(Token = "0x6000248")]
		[Address(RVA = "0x12003F8", Offset = "0x12003F8", VA = "0x12003F8")]
		public static Keyframe[] GetReducedKeyframes(AnimationCurve curve, float maxError)
		{
			return null;
		}

		[Token(Token = "0x6000249")]
		[Address(RVA = "0x12007BC", Offset = "0x12007BC", VA = "0x12007BC")]
		public static void SetLoopFrame(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x600024A")]
		[Address(RVA = "0x120099C", Offset = "0x120099C", VA = "0x120099C")]
		public static void SetTangentMode(AnimationCurve curve)
		{
		}

		[Token(Token = "0x600024B")]
		[Address(RVA = "0x12009A0", Offset = "0x12009A0", VA = "0x12009A0")]
		public static Quaternion EnsureQuaternionContinuity(Quaternion lastQ, Quaternion q)
		{
			return default(Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x2000035")]
	public class BakerHumanoidQT
	{
		[Token(Token = "0x400013E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform transform;

		[Token(Token = "0x400013F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string Qx;

		[Token(Token = "0x4000140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string Qy;

		[Token(Token = "0x4000141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string Qz;

		[Token(Token = "0x4000142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string Qw;

		[Token(Token = "0x4000143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string Tx;

		[Token(Token = "0x4000144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string Ty;

		[Token(Token = "0x4000145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string Tz;

		[Token(Token = "0x4000146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve rotX;

		[Token(Token = "0x4000147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve rotY;

		[Token(Token = "0x4000148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationCurve rotZ;

		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationCurve rotW;

		[Token(Token = "0x400014A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve posX;

		[Token(Token = "0x400014B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationCurve posY;

		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AnimationCurve posZ;

		[Token(Token = "0x400014D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AvatarIKGoal goal;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Quaternion lastQ;

		[Token(Token = "0x400014F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool lastQSet;

		[Token(Token = "0x600024C")]
		[Address(RVA = "0x1200B34", Offset = "0x1200B34", VA = "0x1200B34")]
		public BakerHumanoidQT(string name)
		{
		}

		[Token(Token = "0x600024D")]
		[Address(RVA = "0x1200DF0", Offset = "0x1200DF0", VA = "0x1200DF0")]
		public BakerHumanoidQT(Transform transform, AvatarIKGoal goal, string name)
		{
		}

		[Token(Token = "0x600024E")]
		[Address(RVA = "0x1200CAC", Offset = "0x1200CAC", VA = "0x1200CAC")]
		public void Reset()
		{
		}

		[Token(Token = "0x600024F")]
		[Address(RVA = "0x1200F78", Offset = "0x1200F78", VA = "0x1200F78")]
		public void SetIKKeyframes(float time, Avatar avatar, float humanScale, Vector3 bodyPosition, Quaternion bodyRotation)
		{
		}

		[Token(Token = "0x6000250")]
		[Address(RVA = "0x12011AC", Offset = "0x12011AC", VA = "0x12011AC")]
		public void SetKeyframes(float time, Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6000251")]
		[Address(RVA = "0x120129C", Offset = "0x120129C", VA = "0x120129C")]
		public void MoveLastKeyframes(float time)
		{
		}

		[Token(Token = "0x6000252")]
		[Address(RVA = "0x1201380", Offset = "0x1201380", VA = "0x1201380")]
		public void SetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000253")]
		[Address(RVA = "0x1201304", Offset = "0x1201304", VA = "0x1201304")]
		private void MoveLastKeyframe(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x6000254")]
		[Address(RVA = "0x12013E8", Offset = "0x12013E8", VA = "0x12013E8")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x6000255")]
		[Address(RVA = "0x1201490", Offset = "0x1201490", VA = "0x1201490")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000036")]
	public class BakerMuscle
	{
		[Token(Token = "0x4000150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve curve;

		[Token(Token = "0x4000151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int muscleIndex;

		[Token(Token = "0x4000152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string propertyName;

		[Token(Token = "0x6000256")]
		[Address(RVA = "0x120177C", Offset = "0x120177C", VA = "0x120177C")]
		public BakerMuscle(int muscleIndex)
		{
		}

		[Token(Token = "0x6000257")]
		[Address(RVA = "0x12017E0", Offset = "0x12017E0", VA = "0x12017E0")]
		private string MuscleNameToPropertyName(string n)
		{
			return null;
		}

		[Token(Token = "0x6000258")]
		[Address(RVA = "0x1202274", Offset = "0x1202274", VA = "0x1202274")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x6000259")]
		[Address(RVA = "0x120231C", Offset = "0x120231C", VA = "0x120231C")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}

		[Token(Token = "0x600025A")]
		[Address(RVA = "0x1202214", Offset = "0x1202214", VA = "0x1202214")]
		public void Reset()
		{
		}

		[Token(Token = "0x600025B")]
		[Address(RVA = "0x1202410", Offset = "0x1202410", VA = "0x1202410")]
		public void SetKeyframe(float time, float[] muscles)
		{
		}

		[Token(Token = "0x600025C")]
		[Address(RVA = "0x120244C", Offset = "0x120244C", VA = "0x120244C")]
		public void SetLoopFrame(float time)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000037")]
	public class BakerTransform
	{
		[Token(Token = "0x4000153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve posX;

		[Token(Token = "0x4000155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve posY;

		[Token(Token = "0x4000156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve posZ;

		[Token(Token = "0x4000157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve rotX;

		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve rotY;

		[Token(Token = "0x4000159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve rotZ;

		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve rotW;

		[Token(Token = "0x400015B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string relativePath;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool recordPosition;

		[Token(Token = "0x400015D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 relativePosition;

		[Token(Token = "0x400015E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isRootNode;

		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Quaternion relativeRotation;

		[Token(Token = "0x600025D")]
		[Address(RVA = "0x11FEFEC", Offset = "0x11FEFEC", VA = "0x11FEFEC")]
		public BakerTransform(Transform transform, Transform root, bool recordPosition, bool isRootNode)
		{
		}

		[Token(Token = "0x600025E")]
		[Address(RVA = "0x11FF260", Offset = "0x11FF260", VA = "0x11FF260")]
		public void SetRelativeSpace(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x600025F")]
		[Address(RVA = "0x11FF53C", Offset = "0x11FF53C", VA = "0x11FF53C")]
		public void SetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x6000260")]
		[Address(RVA = "0x1202454", Offset = "0x1202454", VA = "0x1202454")]
		private void AddRootMotionCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x6000261")]
		[Address(RVA = "0x11FF158", Offset = "0x11FF158", VA = "0x11FF158")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000262")]
		[Address(RVA = "0x12026DC", Offset = "0x12026DC", VA = "0x12026DC")]
		public void ReduceKeyframes(float maxError)
		{
		}

		[Token(Token = "0x6000263")]
		[Address(RVA = "0x11FF85C", Offset = "0x11FF85C", VA = "0x11FF85C")]
		public void SetKeyframes(float time)
		{
		}

		[Token(Token = "0x6000264")]
		[Address(RVA = "0x11FF2E0", Offset = "0x11FF2E0", VA = "0x11FF2E0")]
		public void AddLoopFrame(float time)
		{
		}
	}
	[Token(Token = "0x2000038")]
	public class HumanoidBaker : Baker
	{
		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("Should the hand IK curves be added to the animation? Disable this if the original hand positions are not important when using the clip on another character via Humanoid retargeting.")]
		public bool bakeHandIK;

		[Token(Token = "0x4000161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Range(0f, 0.1f)]
		[Tooltip("Max keyframe reduction error for the Root.Q/T, LeftFoot IK and RightFoot IK channels. Having a larger error value for 'Key Reduction Error' and a smaller one for this enables you to optimize clip data size without the floating feet effect by enabling 'Foot IK' in the Animator.")]
		public float IKKeyReductionError;

		[Token(Token = "0x4000162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Range(1f, 9f)]
		[Tooltip("Frame rate divider for the muscle curves. If you have 'Frame Rate' set to 30, and this value set to 3, the muscle curves will be baked at 10 fps. Only the Root Q/T and Hand and Foot IK curves will be baked at 30. This enables you to optimize clip data size without the floating feet effect by enabling 'Foot IK' in the Animator.")]
		public int muscleFrameRateDiv;

		[Token(Token = "0x4000163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private BakerMuscle[] bakerMuscles;

		[Token(Token = "0x4000164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private BakerHumanoidQT rootQT;

		[Token(Token = "0x4000165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private BakerHumanoidQT leftFootQT;

		[Token(Token = "0x4000166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerHumanoidQT rightFootQT;

		[Token(Token = "0x4000167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerHumanoidQT leftHandQT;

		[Token(Token = "0x4000168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private BakerHumanoidQT rightHandQT;

		[Token(Token = "0x4000169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float[] muscles;

		[Token(Token = "0x400016A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private HumanPose pose;

		[Token(Token = "0x400016B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private HumanPoseHandler handler;

		[Token(Token = "0x400016C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 bodyPosition;

		[Token(Token = "0x400016D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion bodyRotation;

		[Token(Token = "0x400016E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private int mN;

		[Token(Token = "0x400016F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion lastBodyRotation;

		[Token(Token = "0x6000265")]
		[Address(RVA = "0x1202744", Offset = "0x1202744", VA = "0x1202744")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000266")]
		[Address(RVA = "0x1202BFC", Offset = "0x1202BFC", VA = "0x1202BFC", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x6000267")]
		[Address(RVA = "0x1202C18", Offset = "0x1202C18", VA = "0x1202C18", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x6000268")]
		[Address(RVA = "0x1202CF4", Offset = "0x1202CF4", VA = "0x1202CF4", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000269")]
		[Address(RVA = "0x1202DB0", Offset = "0x1202DB0", VA = "0x1202DB0", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x600026A")]
		[Address(RVA = "0x1202F50", Offset = "0x1202F50", VA = "0x1202F50", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x600026B")]
		[Address(RVA = "0x12031F4", Offset = "0x12031F4", VA = "0x12031F4")]
		private void UpdateHumanPose()
		{
		}

		[Token(Token = "0x600026C")]
		[Address(RVA = "0x12032CC", Offset = "0x12032CC", VA = "0x12032CC")]
		public HumanoidBaker()
		{
		}
	}
	[Token(Token = "0x2000039")]
	public class CameraController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200003A")]
		public enum UpdateMode
		{
			[Token(Token = "0x4000196")]
			Update,
			[Token(Token = "0x4000197")]
			FixedUpdate,
			[Token(Token = "0x4000198")]
			LateUpdate,
			[Token(Token = "0x4000199")]
			FixedLateUpdate
		}

		[Token(Token = "0x4000170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rotationSpace;

		[Token(Token = "0x4000172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateMode updateMode;

		[Token(Token = "0x4000173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x4000174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[Header("Position")]
		public bool smoothFollow;

		[Token(Token = "0x4000175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 offset;

		[Token(Token = "0x4000176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float followSpeed;

		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Rotation")]
		public float rotationSensitivity;

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float yMinLimit;

		[Token(Token = "0x4000179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float yMaxLimit;

		[Token(Token = "0x400017A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool rotateAlways;

		[Token(Token = "0x400017B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool rotateOnLeftButton;

		[Token(Token = "0x400017C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		public bool rotateOnRightButton;

		[Token(Token = "0x400017D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		public bool rotateOnMiddleButton;

		[Token(Token = "0x400017E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Distance")]
		public float distance;

		[Token(Token = "0x400017F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float minDistance;

		[Token(Token = "0x4000180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxDistance;

		[Token(Token = "0x4000181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float zoomSpeed;

		[Token(Token = "0x4000182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float zoomSensitivity;

		[Token(Token = "0x4000183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("Blocking")]
		public LayerMask blockingLayers;

		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float blockingRadius;

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float blockingSmoothTime;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Range(0f, 1f)]
		public float blockedOffset;

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 targetDistance;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 position;

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion rotation;

		[Token(Token = "0x400018D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 smoothPosition;

		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Camera cam;

		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool fixedFrame;

		[Token(Token = "0x4000190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float fixedDeltaTime;

		[Token(Token = "0x4000191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion r;

		[Token(Token = "0x4000192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 lastUp;

		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float blockedDistance;

		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float blockedDistanceV;

		[Token(Token = "0x17000058")]
		public float x
		{
			[Token(Token = "0x600026D")]
			[Address(RVA = "0x1203370", Offset = "0x1203370", VA = "0x1203370")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600026E")]
			[Address(RVA = "0x1203378", Offset = "0x1203378", VA = "0x1203378")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000059")]
		public float y
		{
			[Token(Token = "0x600026F")]
			[Address(RVA = "0x1203380", Offset = "0x1203380", VA = "0x1203380")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000270")]
			[Address(RVA = "0x1203388", Offset = "0x1203388", VA = "0x1203388")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700005A")]
		public float distanceTarget
		{
			[Token(Token = "0x6000271")]
			[Address(RVA = "0x1203390", Offset = "0x1203390", VA = "0x1203390")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000272")]
			[Address(RVA = "0x1203398", Offset = "0x1203398", VA = "0x1203398")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		private float zoomAdd
		{
			[Token(Token = "0x600027C")]
			[Address(RVA = "0x1203DA8", Offset = "0x1203DA8", VA = "0x1203DA8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000273")]
		[Address(RVA = "0x12033A0", Offset = "0x12033A0", VA = "0x12033A0")]
		public void SetAngles(Quaternion rotation)
		{
		}

		[Token(Token = "0x6000274")]
		[Address(RVA = "0x12033D8", Offset = "0x12033D8", VA = "0x12033D8")]
		public void SetAngles(float yaw, float pitch)
		{
		}

		[Token(Token = "0x6000275")]
		[Address(RVA = "0x12033E0", Offset = "0x12033E0", VA = "0x12033E0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000276")]
		[Address(RVA = "0x1203508", Offset = "0x1203508", VA = "0x1203508", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000277")]
		[Address(RVA = "0x1203550", Offset = "0x1203550", VA = "0x1203550", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000278")]
		[Address(RVA = "0x12035A8", Offset = "0x12035A8", VA = "0x12035A8", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000279")]
		[Address(RVA = "0x1203600", Offset = "0x1203600", VA = "0x1203600")]
		public void UpdateInput()
		{
		}

		[Token(Token = "0x600027A")]
		[Address(RVA = "0x1203534", Offset = "0x1203534", VA = "0x1203534")]
		public void UpdateTransform()
		{
		}

		[Token(Token = "0x600027B")]
		[Address(RVA = "0x120378C", Offset = "0x120378C", VA = "0x120378C")]
		public void UpdateTransform(float deltaTime)
		{
		}

		[Token(Token = "0x600027D")]
		[Address(RVA = "0x1203D6C", Offset = "0x1203D6C", VA = "0x1203D6C")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x600027E")]
		[Address(RVA = "0x1203E14", Offset = "0x1203E14", VA = "0x1203E14")]
		public CameraController()
		{
		}
	}
	[Token(Token = "0x200003B")]
	public class CameraControllerFPS : MonoBehaviour
	{
		[Token(Token = "0x400019A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotationSensitivity;

		[Token(Token = "0x400019B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float yMinLimit;

		[Token(Token = "0x400019C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float yMaxLimit;

		[Token(Token = "0x400019D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float x;

		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float y;

		[Token(Token = "0x600027F")]
		[Address(RVA = "0x1203ED4", Offset = "0x1203ED4", VA = "0x1203ED4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000280")]
		[Address(RVA = "0x1203F00", Offset = "0x1203F00", VA = "0x1203F00")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6000281")]
		[Address(RVA = "0x1204124", Offset = "0x1204124", VA = "0x1204124")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000282")]
		[Address(RVA = "0x1204160", Offset = "0x1204160", VA = "0x1204160")]
		public CameraControllerFPS()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200003C")]
	public enum Axis
	{
		[Token(Token = "0x40001A0")]
		X,
		[Token(Token = "0x40001A1")]
		Y,
		[Token(Token = "0x40001A2")]
		Z
	}
	[Token(Token = "0x200003D")]
	public class AxisTools
	{
		[Token(Token = "0x6000283")]
		[Address(RVA = "0x120417C", Offset = "0x120417C", VA = "0x120417C")]
		public static Vector3 ToVector3(Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000284")]
		[Address(RVA = "0x120425C", Offset = "0x120425C", VA = "0x120425C")]
		public static Axis ToAxis(Vector3 v)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000285")]
		[Address(RVA = "0x1204294", Offset = "0x1204294", VA = "0x1204294")]
		public static Axis GetAxisToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000286")]
		[Address(RVA = "0x12043DC", Offset = "0x12043DC", VA = "0x12043DC")]
		public static Axis GetAxisToDirection(Transform t, Vector3 direction)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0x1204390", Offset = "0x1204390", VA = "0x1204390")]
		public static Vector3 GetAxisVectorToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000288")]
		[Address(RVA = "0x12044D8", Offset = "0x12044D8", VA = "0x12044D8")]
		public static Vector3 GetAxisVectorToDirection(Transform t, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000289")]
		[Address(RVA = "0x120451C", Offset = "0x120451C", VA = "0x120451C")]
		public static Vector3 GetAxisVectorToDirection(Quaternion r, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600028A")]
		[Address(RVA = "0x12049A8", Offset = "0x12049A8", VA = "0x12049A8")]
		public AxisTools()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200003E")]
	public class BipedLimbOrientations
	{
		[Serializable]
		[Token(Token = "0x200003F")]
		public class LimbOrientation
		{
			[Token(Token = "0x40001A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 upperBoneForwardAxis;

			[Token(Token = "0x40001A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 lowerBoneForwardAxis;

			[Token(Token = "0x40001A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 lastBoneLeftAxis;

			[Token(Token = "0x600028E")]
			[Address(RVA = "0x1204CA4", Offset = "0x1204CA4", VA = "0x1204CA4")]
			public LimbOrientation(Vector3 upperBoneForwardAxis, Vector3 lowerBoneForwardAxis, Vector3 lastBoneLeftAxis)
			{
			}
		}

		[Token(Token = "0x40001A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LimbOrientation leftArm;

		[Token(Token = "0x40001A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbOrientation rightArm;

		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbOrientation leftLeg;

		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LimbOrientation rightLeg;

		[Token(Token = "0x1700005C")]
		public static BipedLimbOrientations UMA
		{
			[Token(Token = "0x600028C")]
			[Address(RVA = "0x12049F0", Offset = "0x12049F0", VA = "0x12049F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005D")]
		public static BipedLimbOrientations MaxBiped
		{
			[Token(Token = "0x600028D")]
			[Address(RVA = "0x1204D18", Offset = "0x1204D18", VA = "0x1204D18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600028B")]
		[Address(RVA = "0x12049B0", Offset = "0x12049B0", VA = "0x12049B0")]
		public BipedLimbOrientations(LimbOrientation leftArm, LimbOrientation rightArm, LimbOrientation leftLeg, LimbOrientation rightLeg)
		{
		}
	}
	[Token(Token = "0x2000040")]
	public static class BipedNaming
	{
		[Serializable]
		[Token(Token = "0x2000041")]
		public enum BoneType
		{
			[Token(Token = "0x40001BD")]
			Unassigned,
			[Token(Token = "0x40001BE")]
			Spine,
			[Token(Token = "0x40001BF")]
			Head,
			[Token(Token = "0x40001C0")]
			Arm,
			[Token(Token = "0x40001C1")]
			Leg,
			[Token(Token = "0x40001C2")]
			Tail,
			[Token(Token = "0x40001C3")]
			Eye
		}

		[Serializable]
		[Token(Token = "0x2000042")]
		public enum BoneSide
		{
			[Token(Token = "0x40001C5")]
			Center,
			[Token(Token = "0x40001C6")]
			Left,
			[Token(Token = "0x40001C7")]
			Right
		}

		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] typeLeft;

		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] typeRight;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string[] typeSpine;

		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string[] typeHead;

		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string[] typeArm;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string[] typeLeg;

		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string[] typeTail;

		[Token(Token = "0x40001B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] typeEye;

		[Token(Token = "0x40001B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string[] typeExclude;

		[Token(Token = "0x40001B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static string[] typeExcludeSpine;

		[Token(Token = "0x40001B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string[] typeExcludeHead;

		[Token(Token = "0x40001B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string[] typeExcludeArm;

		[Token(Token = "0x40001B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string[] typeExcludeLeg;

		[Token(Token = "0x40001B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static string[] typeExcludeTail;

		[Token(Token = "0x40001B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static string[] typeExcludeEye;

		[Token(Token = "0x40001B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static string[] pelvis;

		[Token(Token = "0x40001BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static string[] hand;

		[Token(Token = "0x40001BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static string[] foot;

		[Token(Token = "0x600028F")]
		[Address(RVA = "0x1204FCC", Offset = "0x1204FCC", VA = "0x1204FCC")]
		public static Transform[] GetBonesOfType(BoneType boneType, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000290")]
		[Address(RVA = "0x1205290", Offset = "0x1205290", VA = "0x1205290")]
		public static Transform[] GetBonesOfSide(BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000291")]
		[Address(RVA = "0x12054C4", Offset = "0x12054C4", VA = "0x12054C4")]
		public static Transform[] GetBonesOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000292")]
		[Address(RVA = "0x1205538", Offset = "0x1205538", VA = "0x1205538")]
		public static Transform GetFirstBoneOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000293")]
		[Address(RVA = "0x12055CC", Offset = "0x12055CC", VA = "0x12055CC")]
		public static Transform GetNamingMatch(Transform[] transforms, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0x1205178", Offset = "0x1205178", VA = "0x1205178")]
		public static BoneType GetBoneType(string boneName)
		{
			return default(BoneType);
		}

		[Token(Token = "0x6000295")]
		[Address(RVA = "0x120543C", Offset = "0x120543C", VA = "0x120543C")]
		public static BoneSide GetBoneSide(string boneName)
		{
			return default(BoneSide);
		}

		[Token(Token = "0x6000296")]
		[Address(RVA = "0x1205D04", Offset = "0x1205D04", VA = "0x1205D04")]
		public static Transform GetBone(Transform[] transforms, BoneType boneType, BoneSide boneSide = BoneSide.Center, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x6000297")]
		[Address(RVA = "0x1205B5C", Offset = "0x1205B5C", VA = "0x1205B5C")]
		private static bool isLeft(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000298")]
		[Address(RVA = "0x1205C30", Offset = "0x1205C30", VA = "0x1205C30")]
		private static bool isRight(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000299")]
		[Address(RVA = "0x12057B4", Offset = "0x12057B4", VA = "0x12057B4")]
		private static bool isSpine(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600029A")]
		[Address(RVA = "0x1205850", Offset = "0x1205850", VA = "0x1205850")]
		private static bool isHead(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600029B")]
		[Address(RVA = "0x12058EC", Offset = "0x12058EC", VA = "0x12058EC")]
		private static bool isArm(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600029C")]
		[Address(RVA = "0x1205988", Offset = "0x1205988", VA = "0x1205988")]
		private static bool isLeg(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600029D")]
		[Address(RVA = "0x1205A24", Offset = "0x1205A24", VA = "0x1205A24")]
		private static bool isTail(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600029E")]
		[Address(RVA = "0x1205AC0", Offset = "0x1205AC0", VA = "0x1205AC0")]
		private static bool isEye(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600029F")]
		[Address(RVA = "0x1205EEC", Offset = "0x1205EEC", VA = "0x1205EEC")]
		private static bool isTypeExclude(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0x12056E0", Offset = "0x12056E0", VA = "0x12056E0")]
		private static bool matchesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x60002A1")]
		[Address(RVA = "0x1205E68", Offset = "0x1205E68", VA = "0x1205E68")]
		private static bool excludesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0x1205F4C", Offset = "0x1205F4C", VA = "0x1205F4C")]
		private static bool matchesLastLetter(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x60002A3")]
		[Address(RVA = "0x120600C", Offset = "0x120600C", VA = "0x120600C")]
		private static bool LastLetterIs(string boneName, string letter)
		{
			return default(bool);
		}

		[Token(Token = "0x60002A4")]
		[Address(RVA = "0x1205DF4", Offset = "0x1205DF4", VA = "0x1205DF4")]
		private static string firstLetter(string boneName)
		{
			return null;
		}

		[Token(Token = "0x60002A5")]
		[Address(RVA = "0x1205D84", Offset = "0x1205D84", VA = "0x1205D84")]
		private static string lastLetter(string boneName)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000043")]
	public class BipedReferences
	{
		[Token(Token = "0x2000044")]
		public struct AutoDetectParams
		{
			[Token(Token = "0x40001D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool legsParentInSpine;

			[Token(Token = "0x40001DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool includeEyes;

			[Token(Token = "0x17000060")]
			public static AutoDetectParams Default
			{
				[Token(Token = "0x60002C0")]
				[Address(RVA = "0x120B874", Offset = "0x120B874", VA = "0x120B874")]
				get
				{
					return default(AutoDetectParams);
				}
			}

			[Token(Token = "0x60002BF")]
			[Address(RVA = "0x120B860", Offset = "0x120B860", VA = "0x120B860")]
			public AutoDetectParams(bool legsParentInSpine, bool includeEyes)
			{
			}
		}

		[Token(Token = "0x40001C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform root;

		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform pelvis;

		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftThigh;

		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftCalf;

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftFoot;

		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightThigh;

		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform rightCalf;

		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightFoot;

		[Token(Token = "0x40001D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform leftUpperArm;

		[Token(Token = "0x40001D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftForearm;

		[Token(Token = "0x40001D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform leftHand;

		[Token(Token = "0x40001D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform rightUpperArm;

		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rightForearm;

		[Token(Token = "0x40001D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rightHand;

		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform head;

		[Token(Token = "0x40001D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] spine;

		[Token(Token = "0x40001D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform[] eyes;

		[Token(Token = "0x1700005E")]
		public virtual bool isFilled
		{
			[Token(Token = "0x60002A7")]
			[Address(RVA = "0x1208004", Offset = "0x1208004", VA = "0x1208004", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700005F")]
		public bool isEmpty
		{
			[Token(Token = "0x60002A8")]
			[Address(RVA = "0x1208360", Offset = "0x1208360", VA = "0x1208360")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60002A9")]
		[Address(RVA = "0x1208370", Offset = "0x1208370", VA = "0x1208370", Slot = "5")]
		public virtual bool IsEmpty(bool includeRoot)
		{
			return default(bool);
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0x12086FC", Offset = "0x12086FC", VA = "0x12086FC", Slot = "6")]
		public virtual bool Contains(Transform t, bool ignoreRoot = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0x1208A8C", Offset = "0x1208A8C", VA = "0x1208A8C")]
		public static bool AutoDetectReferences(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0x12090B8", Offset = "0x12090B8", VA = "0x12090B8")]
		public static void DetectReferencesByNaming(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0x1208CF4", Offset = "0x1208CF4", VA = "0x1208CF4")]
		public static void AssignHumanoidReferences(ref BipedReferences references, Animator animator, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0x1209800", Offset = "0x1209800", VA = "0x1209800")]
		public static bool SetupError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002AF")]
		[Address(RVA = "0x12098E0", Offset = "0x12098E0", VA = "0x12098E0")]
		public static bool SetupWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0x120A358", Offset = "0x120A358", VA = "0x120A358")]
		private static bool IsNeckBone(Transform bone, Transform leftUpperArm)
		{
			return default(bool);
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0x120A178", Offset = "0x120A178", VA = "0x120A178")]
		private static bool AddBoneToEyes(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0x1209F18", Offset = "0x1209F18", VA = "0x1209F18")]
		private static bool AddBoneToSpine(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0x120997C", Offset = "0x120997C", VA = "0x120997C")]
		private static void DetectLimb(BipedNaming.BoneType boneType, BipedNaming.BoneSide boneSide, ref Transform firstBone, ref Transform secondBone, ref Transform lastBone, Transform[] transforms)
		{
		}

		[Token(Token = "0x60002B4")]
		[Address(RVA = "0x120A26C", Offset = "0x120A26C", VA = "0x120A26C")]
		private static void AddBoneToHierarchy(ref Transform[] bones, Transform transform)
		{
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0x120A438", Offset = "0x120A438", VA = "0x120A438")]
		private static bool LimbError(Transform bone1, Transform bone2, Transform bone3, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0x120AEF8", Offset = "0x120AEF8", VA = "0x120AEF8")]
		private static bool LimbWarning(Transform bone1, Transform bone2, Transform bone3, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002B7")]
		[Address(RVA = "0x120A9B8", Offset = "0x120A9B8", VA = "0x120A9B8")]
		private static bool SpineError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0x120B1CC", Offset = "0x120B1CC", VA = "0x120B1CC")]
		private static bool SpineWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0x120AD0C", Offset = "0x120AD0C", VA = "0x120AD0C")]
		private static bool EyesError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0x120B1D4", Offset = "0x120B1D4", VA = "0x120B1D4")]
		private static bool EyesWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002BB")]
		[Address(RVA = "0x120B1DC", Offset = "0x120B1DC", VA = "0x120B1DC")]
		private static bool RootHeightWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002BC")]
		[Address(RVA = "0x120B390", Offset = "0x120B390", VA = "0x120B390")]
		private static bool FacingAxisWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60002BD")]
		[Address(RVA = "0x120B7F8", Offset = "0x120B7F8", VA = "0x120B7F8")]
		private static float GetVerticalOffset(Vector3 p1, Vector3 p2, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x60002BE")]
		[Address(RVA = "0x1208C8C", Offset = "0x1208C8C", VA = "0x1208C8C")]
		public BipedReferences()
		{
		}
	}
	[Token(Token = "0x2000045")]
	public class Comments : MonoBehaviour
	{
		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Multiline]
		public string text;

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x120B87C", Offset = "0x120B87C", VA = "0x120B87C")]
		public Comments()
		{
		}
	}
	[Token(Token = "0x2000046")]
	public class DemoGUIMessage : MonoBehaviour
	{
		[Token(Token = "0x40001DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color color;

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0x120B884", Offset = "0x120B884", VA = "0x120B884")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0x120B97C", Offset = "0x120B97C", VA = "0x120B97C")]
		public DemoGUIMessage()
		{
		}
	}
	[Token(Token = "0x2000047")]
	public class Hierarchy
	{
		[Token(Token = "0x60002C4")]
		[Address(RVA = "0x120B774", Offset = "0x120B774", VA = "0x120B774")]
		public static bool HierarchyIsValid(Transform[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x120B668", Offset = "0x120B668", VA = "0x120B668")]
		public static UnityEngine.Object ContainsDuplicate(UnityEngine.Object[] objects)
		{
			return null;
		}

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0x1209A58", Offset = "0x1209A58", VA = "0x1209A58")]
		public static bool IsAncestor(Transform transform, Transform ancestor)
		{
			return default(bool);
		}

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0x120A068", Offset = "0x120A068", VA = "0x120A068")]
		public static bool ContainsChild(Transform transform, Transform child)
		{
			return default(bool);
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0x1209CD8", Offset = "0x1209CD8", VA = "0x1209CD8")]
		public static void AddAncestors(Transform transform, Transform blocker, ref Transform[] array)
		{
		}

		[Token(Token = "0x60002C9")]
		[Address(RVA = "0x120B98C", Offset = "0x120B98C", VA = "0x120B98C")]
		public static Transform GetAncestor(Transform transform, int minChildCount)
		{
			return null;
		}

		[Token(Token = "0x60002CA")]
		[Address(RVA = "0x1209B88", Offset = "0x1209B88", VA = "0x1209B88")]
		public static Transform GetFirstCommonAncestor(Transform t1, Transform t2)
		{
			return null;
		}

		[Token(Token = "0x60002CB")]
		[Address(RVA = "0x120BA80", Offset = "0x120BA80", VA = "0x120BA80")]
		public static Transform GetFirstCommonAncestor(Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x60002CC")]
		[Address(RVA = "0x120BDEC", Offset = "0x120BDEC", VA = "0x120BDEC")]
		public static Transform GetFirstCommonAncestorRecursive(Transform transform, Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0x120BBE4", Offset = "0x120BBE4", VA = "0x120BBE4")]
		public static bool IsCommonAncestor(Transform transform, Transform[] transforms)
		{
			return default(bool);
		}

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0x120BF74", Offset = "0x120BF74", VA = "0x120BF74")]
		public Hierarchy()
		{
		}
	}
	[Token(Token = "0x2000048")]
	public class InspectorComment : PropertyAttribute
	{
		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40001DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string color;

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0x120BF7C", Offset = "0x120BF7C", VA = "0x120BF7C")]
		public InspectorComment(string name)
		{
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0x120BFE4", Offset = "0x120BFE4", VA = "0x120BFE4")]
		public InspectorComment(string name, string color)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000049")]
	public enum InterpolationMode
	{
		[Token(Token = "0x40001E1")]
		None,
		[Token(Token = "0x40001E2")]
		InOutCubic,
		[Token(Token = "0x40001E3")]
		InOutQuintic,
		[Token(Token = "0x40001E4")]
		InOutSine,
		[Token(Token = "0x40001E5")]
		InQuintic,
		[Token(Token = "0x40001E6")]
		InQuartic,
		[Token(Token = "0x40001E7")]
		InCubic,
		[Token(Token = "0x40001E8")]
		InQuadratic,
		[Token(Token = "0x40001E9")]
		InElastic,
		[Token(Token = "0x40001EA")]
		InElasticSmall,
		[Token(Token = "0x40001EB")]
		InElasticBig,
		[Token(Token = "0x40001EC")]
		InSine,
		[Token(Token = "0x40001ED")]
		InBack,
		[Token(Token = "0x40001EE")]
		OutQuintic,
		[Token(Token = "0x40001EF")]
		OutQuartic,
		[Token(Token = "0x40001F0")]
		OutCubic,
		[Token(Token = "0x40001F1")]
		OutInCubic,
		[Token(Token = "0x40001F2")]
		OutInQuartic,
		[Token(Token = "0x40001F3")]
		OutElastic,
		[Token(Token = "0x40001F4")]
		OutElasticSmall,
		[Token(Token = "0x40001F5")]
		OutElasticBig,
		[Token(Token = "0x40001F6")]
		OutSine,
		[Token(Token = "0x40001F7")]
		OutBack,
		[Token(Token = "0x40001F8")]
		OutBackCubic,
		[Token(Token = "0x40001F9")]
		OutBackQuartic,
		[Token(Token = "0x40001FA")]
		BackInCubic,
		[Token(Token = "0x40001FB")]
		BackInQuartic
	}
	[Token(Token = "0x200004A")]
	public class Interp
	{
		[Token(Token = "0x60002D1")]
		[Address(RVA = "0x120C04C", Offset = "0x120C04C", VA = "0x120C04C")]
		public static float Float(float t, InterpolationMode mode)
		{
			return default(float);
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0x120C9D4", Offset = "0x120C9D4", VA = "0x120C9D4")]
		public static Vector3 V3(Vector3 v1, Vector3 v2, float t, InterpolationMode mode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60002D3")]
		[Address(RVA = "0x120CA44", Offset = "0x120CA44", VA = "0x120CA44")]
		public static float LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x120C44C", Offset = "0x120C44C", VA = "0x120C44C")]
		private static float None(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002D5")]
		[Address(RVA = "0x120C458", Offset = "0x120C458", VA = "0x120C458")]
		private static float InOutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002D6")]
		[Address(RVA = "0x120C47C", Offset = "0x120C47C", VA = "0x120C47C")]
		private static float InOutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002D7")]
		[Address(RVA = "0x120C4B8", Offset = "0x120C4B8", VA = "0x120C4B8")]
		private static float InQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002D8")]
		[Address(RVA = "0x120C4D0", Offset = "0x120C4D0", VA = "0x120C4D0")]
		private static float InQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0x120C4E4", Offset = "0x120C4E4", VA = "0x120C4E4")]
		private static float InCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x120C4F8", Offset = "0x120C4F8", VA = "0x120C4F8")]
		private static float InQuadratic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0x120C508", Offset = "0x120C508", VA = "0x120C508")]
		private static float OutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002DC")]
		[Address(RVA = "0x120C550", Offset = "0x120C550", VA = "0x120C550")]
		private static float OutQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0x120C588", Offset = "0x120C588", VA = "0x120C588")]
		private static float OutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002DE")]
		[Address(RVA = "0x120C5B0", Offset = "0x120C5B0", VA = "0x120C5B0")]
		private static float OutInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0x120CAB4", Offset = "0x120CAB4", VA = "0x120CAB4")]
		private static float OutInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x120C5E4", Offset = "0x120C5E4", VA = "0x120C5E4")]
		private static float BackInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x120C60C", Offset = "0x120C60C", VA = "0x120C60C")]
		private static float BackInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x120C63C", Offset = "0x120C63C", VA = "0x120C63C")]
		private static float OutBackCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x120C670", Offset = "0x120C670", VA = "0x120C670")]
		private static float OutBackQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002E4")]
		[Address(RVA = "0x120C6B4", Offset = "0x120C6B4", VA = "0x120C6B4")]
		private static float OutElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0x120C718", Offset = "0x120C718", VA = "0x120C718")]
		private static float OutElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x120C77C", Offset = "0x120C77C", VA = "0x120C77C")]
		private static float InElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002E7")]
		[Address(RVA = "0x120C7D0", Offset = "0x120C7D0", VA = "0x120C7D0")]
		private static float InElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0x120C824", Offset = "0x120C824", VA = "0x120C824")]
		private static float InSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0x120C85C", Offset = "0x120C85C", VA = "0x120C85C")]
		private static float OutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x120C890", Offset = "0x120C890", VA = "0x120C890")]
		private static float InOutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002EB")]
		[Address(RVA = "0x120CAE8", Offset = "0x120CAE8", VA = "0x120CAE8")]
		private static float InElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x120C8D4", Offset = "0x120C8D4", VA = "0x120C8D4")]
		private static float OutElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002ED")]
		[Address(RVA = "0x120C964", Offset = "0x120C964", VA = "0x120C964")]
		private static float InBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x120C994", Offset = "0x120C994", VA = "0x120C994")]
		private static float OutBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x120CB78", Offset = "0x120CB78", VA = "0x120CB78")]
		public Interp()
		{
		}
	}
	[Token(Token = "0x200004B")]
	public class LargeHeader : PropertyAttribute
	{
		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string color;

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x120CB80", Offset = "0x120CB80", VA = "0x120CB80")]
		public LargeHeader(string name)
		{
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x120CBE8", Offset = "0x120CBE8", VA = "0x120CBE8")]
		public LargeHeader(string name, string color)
		{
		}
	}
	[Token(Token = "0x200004C")]
	public static class LayerMaskExtensions
	{
		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x120CC50", Offset = "0x120CC50", VA = "0x120CC50")]
		public static bool Contains(LayerMask mask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x120CC9C", Offset = "0x120CC9C", VA = "0x120CC9C")]
		public static LayerMask Create(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x120CD58", Offset = "0x120CD58", VA = "0x120CD58")]
		public static LayerMask Create(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x120CCB0", Offset = "0x120CCB0", VA = "0x120CCB0")]
		public static LayerMask NamesToMask(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x120CD6C", Offset = "0x120CD6C", VA = "0x120CD6C")]
		public static LayerMask LayerNumbersToMask(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x120CDFC", Offset = "0x120CDFC", VA = "0x120CDFC")]
		public static LayerMask Inverse(this LayerMask original)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x120CE24", Offset = "0x120CE24", VA = "0x120CE24")]
		public static LayerMask AddToMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x120CE70", Offset = "0x120CE70", VA = "0x120CE70")]
		public static LayerMask RemoveFromMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0x120CED8", Offset = "0x120CED8", VA = "0x120CED8")]
		public static string[] MaskToNames(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0x120D02C", Offset = "0x120D02C", VA = "0x120D02C")]
		public static int[] MaskToNumbers(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0x120D164", Offset = "0x120D164", VA = "0x120D164")]
		public static string MaskToString(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0x120D1BC", Offset = "0x120D1BC", VA = "0x120D1BC")]
		public static string MaskToString(this LayerMask original, string delimiter)
		{
			return null;
		}
	}
	[Token(Token = "0x200004D")]
	public static class QuaTools
	{
		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x120D1E0", Offset = "0x120D1E0", VA = "0x120D1E0")]
		public static Quaternion Lerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0x120D22C", Offset = "0x120D22C", VA = "0x120D22C")]
		public static Quaternion Slerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000300")]
		[Address(RVA = "0x120D278", Offset = "0x120D278", VA = "0x120D278")]
		public static Quaternion LinearBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000301")]
		[Address(RVA = "0x120D37C", Offset = "0x120D37C", VA = "0x120D37C")]
		public static Quaternion SphericalBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0x120D480", Offset = "0x120D480", VA = "0x120D480")]
		public static Quaternion FromToAroundAxis(Vector3 fromDirection, Vector3 toDirection, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000303")]
		[Address(RVA = "0x120D594", Offset = "0x120D594", VA = "0x120D594")]
		public static Quaternion RotationToLocalSpace(Quaternion space, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000304")]
		[Address(RVA = "0x120D63C", Offset = "0x120D63C", VA = "0x120D63C")]
		public static Quaternion FromToRotation(Quaternion from, Quaternion to)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0x120D748", Offset = "0x120D748", VA = "0x120D748")]
		public static Vector3 GetAxis(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000306")]
		[Address(RVA = "0x120D8B0", Offset = "0x120D8B0", VA = "0x120D8B0")]
		public static Quaternion ClampRotation(Quaternion rotation, float clampWeight, int clampSmoothing)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000307")]
		[Address(RVA = "0x120DA94", Offset = "0x120DA94", VA = "0x120DA94")]
		public static float ClampAngle(float angle, float clampWeight, int clampSmoothing)
		{
			return default(float);
		}

		[Token(Token = "0x6000308")]
		[Address(RVA = "0x120DB64", Offset = "0x120DB64", VA = "0x120DB64")]
		public static Quaternion MatchRotation(Quaternion targetRotation, Vector3 targetforwardAxis, Vector3 targetUpAxis, Vector3 forwardAxis, Vector3 upAxis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000309")]
		[Address(RVA = "0x120DCE8", Offset = "0x120DCE8", VA = "0x120DCE8")]
		public static Vector3 ToBiPolar(Vector3 euler)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0x120DDF4", Offset = "0x120DDF4", VA = "0x120DDF4")]
		public static float ToBiPolar(float angle)
		{
			return default(float);
		}
	}
	[Token(Token = "0x200004E")]
	public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>
	{
		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x17000061")]
		public static T instance
		{
			[Token(Token = "0x600030B")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600030C")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600030D")]
		protected Singleton()
		{
		}
	}
	[Token(Token = "0x200004F")]
	public class SolverManager : MonoBehaviour
	{
		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true, will fix all the Transforms used by the solver to their initial state in each Update. This prevents potential problems with unanimated bones and animator culling with a small cost of performance. Not recommended for CCD and FABRIK solvers.")]
		public bool fixTransforms;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animation legacy;

		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool updateFrame;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool componentInitiated;

		[Token(Token = "0x4000204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool skipSolverUpdate;

		[Token(Token = "0x17000062")]
		private bool animatePhysics
		{
			[Token(Token = "0x6000314")]
			[Address(RVA = "0x120DF68", Offset = "0x120DF68", VA = "0x120DF68")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000063")]
		private bool isAnimated
		{
			[Token(Token = "0x6000318")]
			[Address(RVA = "0x120E228", Offset = "0x120E228", VA = "0x120E228")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0x120DE4C", Offset = "0x120DE4C", VA = "0x120DE4C")]
		public void Disable()
		{
		}

		[Token(Token = "0x600030F")]
		[Address(RVA = "0x120DEE0", Offset = "0x120DEE0", VA = "0x120DEE0", Slot = "4")]
		protected virtual void InitiateSolver()
		{
		}

		[Token(Token = "0x6000310")]
		[Address(RVA = "0x120DEE4", Offset = "0x120DEE4", VA = "0x120DEE4", Slot = "5")]
		protected virtual void UpdateSolver()
		{
		}

		[Token(Token = "0x6000311")]
		[Address(RVA = "0x120DEE8", Offset = "0x120DEE8", VA = "0x120DEE8", Slot = "6")]
		protected virtual void FixTransforms()
		{
		}

		[Token(Token = "0x6000312")]
		[Address(RVA = "0x120DEEC", Offset = "0x120DEEC", VA = "0x120DEEC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000313")]
		[Address(RVA = "0x120DF64", Offset = "0x120DF64", VA = "0x120DF64")]
		private void Start()
		{
		}

		[Token(Token = "0x6000315")]
		[Address(RVA = "0x120DF14", Offset = "0x120DF14", VA = "0x120DF14")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000316")]
		[Address(RVA = "0x120E1EC", Offset = "0x120E1EC", VA = "0x120E1EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000317")]
		[Address(RVA = "0x120E034", Offset = "0x120E034", VA = "0x120E034")]
		private void FindAnimatorRecursive(Transform t, bool findInChildren)
		{
		}

		[Token(Token = "0x6000319")]
		[Address(RVA = "0x120E2C0", Offset = "0x120E2C0", VA = "0x120E2C0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600031A")]
		[Address(RVA = "0x120E30C", Offset = "0x120E30C", VA = "0x120E30C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600031B")]
		[Address(RVA = "0x120E358", Offset = "0x120E358", VA = "0x120E358")]
		public void UpdateSolverExternal()
		{
		}

		[Token(Token = "0x600031C")]
		[Address(RVA = "0x120E390", Offset = "0x120E390", VA = "0x120E390")]
		public SolverManager()
		{
		}
	}
	[Token(Token = "0x2000050")]
	public class TriggerEventBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x4000205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject target;

		[Token(Token = "0x600031D")]
		[Address(RVA = "0x127E69C", Offset = "0x127E69C", VA = "0x127E69C")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x600031E")]
		[Address(RVA = "0x127E750", Offset = "0x127E750", VA = "0x127E750")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x600031F")]
		[Address(RVA = "0x127E804", Offset = "0x127E804", VA = "0x127E804")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6000320")]
		[Address(RVA = "0x127E8B8", Offset = "0x127E8B8", VA = "0x127E8B8")]
		public TriggerEventBroadcaster()
		{
		}
	}
	[Token(Token = "0x2000051")]
	public static class V3Tools
	{
		[Token(Token = "0x6000321")]
		[Address(RVA = "0x127E8C0", Offset = "0x127E8C0", VA = "0x127E8C0")]
		public static Vector3 Lerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0x127E91C", Offset = "0x127E91C", VA = "0x127E91C")]
		public static Vector3 Slerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000323")]
		[Address(RVA = "0x127E954", Offset = "0x127E954", VA = "0x127E954")]
		public static Vector3 ExtractVertical(Vector3 v, Vector3 verticalAxis, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000324")]
		[Address(RVA = "0x127EAA4", Offset = "0x127EAA4", VA = "0x127EAA4")]
		public static Vector3 ExtractHorizontal(Vector3 v, Vector3 normal, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000325")]
		[Address(RVA = "0x127EC20", Offset = "0x127EC20", VA = "0x127EC20")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000326")]
		[Address(RVA = "0x127EE50", Offset = "0x127EE50", VA = "0x127EE50")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out bool changed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000327")]
		[Address(RVA = "0x127F0A0", Offset = "0x127F0A0", VA = "0x127F0A0")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out float clampValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0x127F2F8", Offset = "0x127F2F8", VA = "0x127F2F8")]
		public static Vector3 LineToPlane(Vector3 origin, Vector3 direction, Vector3 planeNormal, Vector3 planePoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000329")]
		[Address(RVA = "0x127F4A4", Offset = "0x127F4A4", VA = "0x127F4A4")]
		public static Vector3 PointToPlane(Vector3 point, Vector3 planePosition, Vector3 planeNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600032A")]
		[Address(RVA = "0x127F69C", Offset = "0x127F69C", VA = "0x127F69C")]
		public static Vector3 TransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600032B")]
		[Address(RVA = "0x127F718", Offset = "0x127F718", VA = "0x127F718")]
		public static Vector3 InverseTransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000052")]
	public static class Warning
	{
		[Token(Token = "0x2000053")]
		public delegate void Logger(string message);

		[Token(Token = "0x4000206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool logged;

		[Token(Token = "0x600032C")]
		[Address(RVA = "0x127F7A8", Offset = "0x127F7A8", VA = "0x127F7A8")]
		public static void Log(string message, Logger logger, bool logInEditMode = false)
		{
		}

		[Token(Token = "0x600032D")]
		[Address(RVA = "0x127F840", Offset = "0x127F840", VA = "0x127F840")]
		public static void Log(string message, Transform context, bool logInEditMode = false)
		{
		}
	}
}
namespace RootMotion.FinalIK
{
	[Token(Token = "0x2000054")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page4.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Biped IK")]
	public class BipedIK : SolverManager
	{
		[Token(Token = "0x4000207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x4000208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BipedIKSolvers solvers;

		[Token(Token = "0x6000332")]
		[Address(RVA = "0x127FA08", Offset = "0x127FA08", VA = "0x127FA08")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0x127FA4C", Offset = "0x127FA4C", VA = "0x127FA4C")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0x127FA90", Offset = "0x127FA90", VA = "0x127FA90")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000335")]
		[Address(RVA = "0x127FAD4", Offset = "0x127FAD4", VA = "0x127FAD4")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000336")]
		[Address(RVA = "0x127FB18", Offset = "0x127FB18", VA = "0x127FB18")]
		public float GetIKPositionWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0x127FBB0", Offset = "0x127FBB0", VA = "0x127FBB0")]
		public float GetIKRotationWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x6000338")]
		[Address(RVA = "0x127FBCC", Offset = "0x127FBCC", VA = "0x127FBCC")]
		public void SetIKPositionWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x6000339")]
		[Address(RVA = "0x127FBF8", Offset = "0x127FBF8", VA = "0x127FBF8")]
		public void SetIKRotationWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x600033A")]
		[Address(RVA = "0x127FC24", Offset = "0x127FC24", VA = "0x127FC24")]
		public void SetIKPosition(AvatarIKGoal goal, Vector3 IKPosition)
		{
		}

		[Token(Token = "0x600033B")]
		[Address(RVA = "0x127FC60", Offset = "0x127FC60", VA = "0x127FC60")]
		public void SetIKRotation(AvatarIKGoal goal, Quaternion IKRotation)
		{
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0x127FCA0", Offset = "0x127FCA0", VA = "0x127FCA0")]
		public Vector3 GetIKPosition(AvatarIKGoal goal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600033D")]
		[Address(RVA = "0x127FCC0", Offset = "0x127FCC0", VA = "0x127FCC0")]
		public Quaternion GetIKRotation(AvatarIKGoal goal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600033E")]
		[Address(RVA = "0x127FCE0", Offset = "0x127FCE0", VA = "0x127FCE0")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes)
		{
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0x127FD04", Offset = "0x127FD04", VA = "0x127FD04")]
		public void SetLookAtPosition(Vector3 lookAtPosition)
		{
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0x127FD2C", Offset = "0x127FD2C", VA = "0x127FD2C")]
		public void SetSpinePosition(Vector3 spinePosition)
		{
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0x127FD54", Offset = "0x127FD54", VA = "0x127FD54")]
		public void SetSpineWeight(float weight)
		{
		}

		[Token(Token = "0x6000342")]
		[Address(RVA = "0x127FB34", Offset = "0x127FB34", VA = "0x127FB34")]
		public IKSolverLimb GetGoalIK(AvatarIKGoal goal)
		{
			return null;
		}

		[Token(Token = "0x6000343")]
		[Address(RVA = "0x127FD78", Offset = "0x127FD78", VA = "0x127FD78")]
		public void InitiateBipedIK()
		{
		}

		[Token(Token = "0x6000344")]
		[Address(RVA = "0x127FD84", Offset = "0x127FD84", VA = "0x127FD84")]
		public void UpdateBipedIK()
		{
		}

		[Token(Token = "0x6000345")]
		[Address(RVA = "0x127FD90", Offset = "0x127FD90", VA = "0x127FD90")]
		public void SetToDefaults()
		{
		}

		[Token(Token = "0x6000346")]
		[Address(RVA = "0x127FFFC", Offset = "0x127FFFC", VA = "0x127FFFC", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0x1280098", Offset = "0x1280098", VA = "0x1280098", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0x12803BC", Offset = "0x12803BC", VA = "0x12803BC", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0x1280828", Offset = "0x1280828", VA = "0x1280828")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0x128084C", Offset = "0x128084C", VA = "0x128084C")]
		public BipedIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000055")]
	public class BipedIKSolvers
	{
		[Token(Token = "0x4000209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IKSolverLimb leftFoot;

		[Token(Token = "0x400020A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IKSolverLimb rightFoot;

		[Token(Token = "0x400020B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IKSolverLimb leftHand;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IKSolverLimb rightHand;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolverFABRIK spine;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt lookAt;

		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverAim aim;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Constraints pelvis;

		[Token(Token = "0x4000211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb[] _limbs;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IKSolver[] _ikSolvers;

		[Token(Token = "0x17000064")]
		public IKSolverLimb[] limbs
		{
			[Token(Token = "0x600034B")]
			[Address(RVA = "0x127FECC", Offset = "0x127FECC", VA = "0x127FECC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000065")]
		public IKSolver[] ikSolvers
		{
			[Token(Token = "0x600034C")]
			[Address(RVA = "0x1280A6C", Offset = "0x1280A6C", VA = "0x1280A6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0x128024C", Offset = "0x128024C", VA = "0x128024C")]
		public void AssignReferences(BipedReferences references)
		{
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0x12808E0", Offset = "0x12808E0", VA = "0x12808E0")]
		public BipedIKSolvers()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000056")]
	public abstract class Constraint
	{
		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight;

		[Token(Token = "0x17000066")]
		public bool isValid
		{
			[Token(Token = "0x600034F")]
			[Address(RVA = "0x1280C28", Offset = "0x1280C28", VA = "0x1280C28")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000350")]
		public abstract void UpdateConstraint();

		[Token(Token = "0x6000351")]
		[Address(RVA = "0x1280C88", Offset = "0x1280C88", VA = "0x1280C88")]
		protected Constraint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000057")]
	public class ConstraintPosition : Constraint
	{
		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 position;

		[Token(Token = "0x6000352")]
		[Address(RVA = "0x1280C90", Offset = "0x1280C90", VA = "0x1280C90", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000353")]
		[Address(RVA = "0x1280D28", Offset = "0x1280D28", VA = "0x1280D28")]
		public ConstraintPosition()
		{
		}

		[Token(Token = "0x6000354")]
		[Address(RVA = "0x1280D30", Offset = "0x1280D30", VA = "0x1280D30")]
		public ConstraintPosition(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000058")]
	public class ConstraintPositionOffset : Constraint
	{
		[Token(Token = "0x4000216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 offset;

		[Token(Token = "0x4000217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 defaultLocalPosition;

		[Token(Token = "0x4000218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 lastLocalPosition;

		[Token(Token = "0x4000219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initiated;

		[Token(Token = "0x17000067")]
		private bool positionChanged
		{
			[Token(Token = "0x6000358")]
			[Address(RVA = "0x1280E5C", Offset = "0x1280E5C", VA = "0x1280E5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000355")]
		[Address(RVA = "0x1280D58", Offset = "0x1280D58", VA = "0x1280D58", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000356")]
		[Address(RVA = "0x1280EB8", Offset = "0x1280EB8", VA = "0x1280EB8")]
		public ConstraintPositionOffset()
		{
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0x1280EC0", Offset = "0x1280EC0", VA = "0x1280EC0")]
		public ConstraintPositionOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000059")]
	public class ConstraintRotation : Constraint
	{
		[Token(Token = "0x400021A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x6000359")]
		[Address(RVA = "0x1280EE8", Offset = "0x1280EE8", VA = "0x1280EE8", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x600035A")]
		[Address(RVA = "0x1280F64", Offset = "0x1280F64", VA = "0x1280F64")]
		public ConstraintRotation()
		{
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0x1280F6C", Offset = "0x1280F6C", VA = "0x1280F6C")]
		public ConstraintRotation(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005A")]
	public class ConstraintRotationOffset : Constraint
	{
		[Token(Token = "0x400021B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion offset;

		[Token(Token = "0x400021C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x400021E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastLocalRotation;

		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion defaultTargetLocalRotation;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool initiated;

		[Token(Token = "0x17000068")]
		private bool rotationChanged
		{
			[Token(Token = "0x600035F")]
			[Address(RVA = "0x1281098", Offset = "0x1281098", VA = "0x1281098")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600035C")]
		[Address(RVA = "0x1280F94", Offset = "0x1280F94", VA = "0x1280F94", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0x12810F0", Offset = "0x12810F0", VA = "0x12810F0")]
		public ConstraintRotationOffset()
		{
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0x12810F8", Offset = "0x12810F8", VA = "0x12810F8")]
		public ConstraintRotationOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005B")]
	public class Constraints
	{
		[Token(Token = "0x4000221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 positionOffset;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 position;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 rotationOffset;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rotation;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x6000360")]
		[Address(RVA = "0x1281120", Offset = "0x1281120", VA = "0x1281120")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0x128036C", Offset = "0x128036C", VA = "0x128036C")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0x1280530", Offset = "0x1280530", VA = "0x1280530")]
		public void Update()
		{
		}

		[Token(Token = "0x6000363")]
		[Address(RVA = "0x1280C20", Offset = "0x1280C20", VA = "0x1280C20")]
		public Constraints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200005C")]
	public class Finger
	{
		[Serializable]
		[Token(Token = "0x200005D")]
		public enum DOF
		{
			[Token(Token = "0x400023B")]
			One,
			[Token(Token = "0x400023C")]
			Three
		}

		[Token(Token = "0x4000229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Master Weight for the finger.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 1f)]
		[Tooltip("The weight of rotating the finger tip and bending the finger to the target.")]
		public float rotationWeight;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Rotational degrees of freedom. When set to 'One' the fingers will be able to be rotated only around a single axis. When 3, all 3 axes are free to rotate around.")]
		public DOF rotationDOF;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If enabled, keeps bone1 twist angle fixed relative to bone2.")]
		public bool fixBone1Twist;

		[Token(Token = "0x400022D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The first bone of the finger.")]
		public Transform bone1;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The second bone of the finger.")]
		public Transform bone2;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The (optional) third bone of the finger. This can be ignored for thumbs.")]
		public Transform bone3;

		[Token(Token = "0x4000230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The fingertip object. If your character doesn't have tip bones, you can create an empty GameObject and parent it to the last bone in the finger. Place it to the tip of the finger.")]
		public Transform tip;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The IK target (optional, can use IKPosition and IKRotation directly).")]
		public Transform target;

		[Token(Token = "0x4000233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb solver;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion bone3RelativeToTarget;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 bone3DefaultLocalPosition;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion bone3DefaultLocalRotation;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 bone1Axis;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 tipAxis;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 bone1TwistAxis;

		[Token(Token = "0x17000069")]
		public bool initiated
		{
			[Token(Token = "0x6000364")]
			[Address(RVA = "0x1281180", Offset = "0x1281180", VA = "0x1281180")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000365")]
			[Address(RVA = "0x1281188", Offset = "0x1281188", VA = "0x1281188")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700006A")]
		public Vector3 IKPosition
		{
			[Token(Token = "0x6000366")]
			[Address(RVA = "0x1281194", Offset = "0x1281194", VA = "0x1281194")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000367")]
			[Address(RVA = "0x12811B4", Offset = "0x12811B4", VA = "0x12811B4")]
			set
			{
			}
		}

		[Token(Token = "0x1700006B")]
		public Quaternion IKRotation
		{
			[Token(Token = "0x6000368")]
			[Address(RVA = "0x12811D4", Offset = "0x12811D4", VA = "0x12811D4")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000369")]
			[Address(RVA = "0x12811F4", Offset = "0x12811F4", VA = "0x12811F4")]
			set
			{
			}
		}

		[Token(Token = "0x600036A")]
		[Address(RVA = "0x1281214", Offset = "0x1281214", VA = "0x1281214")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600036B")]
		[Address(RVA = "0x1281300", Offset = "0x1281300", VA = "0x1281300")]
		public void Initiate(Transform hand, int index)
		{
		}

		[Token(Token = "0x600036C")]
		[Address(RVA = "0x12817E0", Offset = "0x12817E0", VA = "0x12817E0")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600036D")]
		[Address(RVA = "0x12818AC", Offset = "0x12818AC", VA = "0x12818AC")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0x1281964", Offset = "0x1281964", VA = "0x1281964")]
		public void Update(float masterWeight)
		{
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0x1281FC4", Offset = "0x1281FC4", VA = "0x1281FC4")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x200005E")]
	public class FingerRig : SolverManager
	{
		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		[Tooltip("The master weight for all fingers.")]
		public float weight;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Finger[] fingers;

		[Token(Token = "0x1700006C")]
		public bool initiated
		{
			[Token(Token = "0x6000370")]
			[Address(RVA = "0x1281FD4", Offset = "0x1281FD4", VA = "0x1281FD4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000371")]
			[Address(RVA = "0x1281FDC", Offset = "0x1281FDC", VA = "0x1281FDC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000372")]
		[Address(RVA = "0x1281FE8", Offset = "0x1281FE8", VA = "0x1281FE8")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0x128205C", Offset = "0x128205C", VA = "0x128205C")]
		[ContextMenu("Auto-detect")]
		public void AutoDetect()
		{
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0x1282368", Offset = "0x1282368", VA = "0x1282368")]
		public void AddFinger(Transform bone1, Transform bone2, Transform bone3, Transform tip, [Optional] Transform target)
		{
		}

		[Token(Token = "0x6000375")]
		[Address(RVA = "0x12824D4", Offset = "0x12824D4", VA = "0x12824D4")]
		public void RemoveFinger(int index)
		{
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0x1282280", Offset = "0x1282280", VA = "0x1282280")]
		private void AddChildrenRecursive(Transform parent, ref Transform[] array)
		{
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0x1282634", Offset = "0x1282634", VA = "0x1282634", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0x12826DC", Offset = "0x12826DC", VA = "0x12826DC")]
		public void UpdateFingerSolvers()
		{
		}

		[Token(Token = "0x6000379")]
		[Address(RVA = "0x1282740", Offset = "0x1282740", VA = "0x1282740")]
		public void FixFingerTransforms()
		{
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0x12827A8", Offset = "0x12827A8", VA = "0x12827A8")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600037B")]
		[Address(RVA = "0x1282804", Offset = "0x1282804", VA = "0x1282804", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x600037C")]
		[Address(RVA = "0x1282808", Offset = "0x1282808", VA = "0x1282808", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x600037D")]
		[Address(RVA = "0x128281C", Offset = "0x128281C", VA = "0x128281C")]
		public FingerRig()
		{
		}
	}
	[Token(Token = "0x200005F")]
	public abstract class Grounder : MonoBehaviour
	{
		[Token(Token = "0x2000060")]
		public delegate void GrounderDelegate();

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		[Tooltip("The master weight. Use this to fade in/out the grounding effect.")]
		public float weight;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Grounding solver. Not to confuse with IK solvers.")]
		public Grounding solver;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrounderDelegate OnPreGrounder;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrounderDelegate OnPostGrounder;

		[Token(Token = "0x1700006D")]
		public bool initiated
		{
			[Token(Token = "0x600037F")]
			[Address(RVA = "0x128287C", Offset = "0x128287C", VA = "0x128287C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000380")]
			[Address(RVA = "0x1282884", Offset = "0x1282884", VA = "0x1282884")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x600037E")]
		public abstract void ResetPosition();

		[Token(Token = "0x6000381")]
		[Address(RVA = "0x1282890", Offset = "0x1282890", VA = "0x1282890")]
		protected Vector3 GetSpineOffsetTarget()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000382")]
		[Address(RVA = "0x1282B40", Offset = "0x1282B40", VA = "0x1282B40")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000383")]
		[Address(RVA = "0x1282954", Offset = "0x1282954", VA = "0x1282954")]
		private Vector3 GetLegSpineBendVector(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000384")]
		[Address(RVA = "0x1282B64", Offset = "0x1282B64", VA = "0x1282B64")]
		private Vector3 GetLegSpineTangent(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000385")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x6000386")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x6000387")]
		[Address(RVA = "0x1282CD8", Offset = "0x1282CD8", VA = "0x1282CD8")]
		protected Grounder()
		{
		}
	}
	[Token(Token = "0x2000061")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Biped")]
	public class GrounderBipedIK : Grounder
	{
		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The BipedIK componet.")]
		public BipedIK ik;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The amount of spine bending towards upward slopes.")]
		public float spineBend;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The interpolation speed of spine bending.")]
		public float spineSpeed;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform[] feet;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion[] footRotations;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 spineOffset;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastWeight;

		[Token(Token = "0x600038C")]
		[Address(RVA = "0x1282EE0", Offset = "0x1282EE0", VA = "0x1282EE0", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600038D")]
		[Address(RVA = "0x1282F24", Offset = "0x1282F24", VA = "0x1282F24", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0x1282F68", Offset = "0x1282F68", VA = "0x1282F68", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x600038F")]
		[Address(RVA = "0x1283048", Offset = "0x1283048", VA = "0x1283048")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000390")]
		[Address(RVA = "0x12830E8", Offset = "0x12830E8", VA = "0x12830E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000391")]
		[Address(RVA = "0x128313C", Offset = "0x128313C", VA = "0x128313C")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0x12836AC", Offset = "0x12836AC", VA = "0x12836AC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0x12836EC", Offset = "0x12836EC", VA = "0x12836EC")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0x1283D34", Offset = "0x1283D34", VA = "0x1283D34")]
		private void SetLegIK(IKSolverLimb limb, int index)
		{
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0x1283E5C", Offset = "0x1283E5C", VA = "0x1283E5C")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0x128402C", Offset = "0x128402C", VA = "0x128402C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0x12841D4", Offset = "0x12841D4", VA = "0x12841D4")]
		public GrounderBipedIK()
		{
		}
	}
	[Token(Token = "0x2000062")]
	[HelpURL("https://www.youtube.com/watch?v=9MiZiaJorws&index=6&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Full Body Biped")]
	public class GrounderFBBIK : Grounder
	{
		[Serializable]
		[Token(Token = "0x2000063")]
		public class SpineEffector
		{
			[Token(Token = "0x4000255")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of the effector.")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000256")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The weight of horizontal bend offset towards the slope.")]
			public float horizontalWeight;

			[Token(Token = "0x4000257")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The vertical bend offset weight.")]
			public float verticalWeight;

			[Token(Token = "0x60003A6")]
			[Address(RVA = "0x1284E6C", Offset = "0x1284E6C", VA = "0x1284E6C")]
			public SpineEffector()
			{
			}

			[Token(Token = "0x60003A7")]
			[Address(RVA = "0x1284E7C", Offset = "0x1284E7C", VA = "0x1284E7C")]
			public SpineEffector(FullBodyBipedEffector effectorType, float horizontalWeight, float verticalWeight)
			{
			}
		}

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Reference to the FBBIK componet.")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The amount of spine bending towards upward slopes.")]
		public float spineBend;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The interpolation speed of spine bending.")]
		public float spineSpeed;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SpineEffector[] spine;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] feet;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 spineOffset;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool firstSolve;

		[Token(Token = "0x6000398")]
		[Address(RVA = "0x1284260", Offset = "0x1284260", VA = "0x1284260")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0x12842A4", Offset = "0x12842A4", VA = "0x12842A4", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600039A")]
		[Address(RVA = "0x12842E8", Offset = "0x12842E8", VA = "0x12842E8", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0x128432C", Offset = "0x128432C", VA = "0x128432C", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x600039C")]
		[Address(RVA = "0x1284394", Offset = "0x1284394", VA = "0x1284394")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0x128441C", Offset = "0x128441C", VA = "0x128441C")]
		private void Update()
		{
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0x128468C", Offset = "0x128468C", VA = "0x128468C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0x1284698", Offset = "0x1284698", VA = "0x1284698")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60003A0")]
		[Address(RVA = "0x1284478", Offset = "0x1284478", VA = "0x1284478")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x12846A4", Offset = "0x12846A4", VA = "0x12846A4")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60003A2")]
		[Address(RVA = "0x1284A14", Offset = "0x1284A14", VA = "0x1284A14")]
		private void SetLegIK(IKEffector effector, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0x1284B98", Offset = "0x1284B98", VA = "0x1284B98")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60003A4")]
		[Address(RVA = "0x1284CCC", Offset = "0x1284CCC", VA = "0x1284CCC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60003A5")]
		[Address(RVA = "0x1284DE0", Offset = "0x1284DE0", VA = "0x1284DE0")]
		public GrounderFBBIK()
		{
		}
	}
	[Token(Token = "0x2000064")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder IK")]
	public class GrounderIK : Grounder
	{
		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IK[] legs;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The pelvis transform. Common ancestor of all the legs.")]
		public Transform pelvis;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The root Transform of the character, with the rigidbody and the collider.")]
		public Transform characterRoot;

		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The weight of rotating the character root to the ground normal (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float rootRotationWeight;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The speed of rotating the character root to the ground normal (range: 0 - inf).")]
		public float rootRotationSpeed;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum angle of root rotation (range: 0 - 90).")]
		public float maxRootRotationAngle;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform[] feet;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] footRotations;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int solvedFeet;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool solved;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastWeight;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x60003A8")]
		[Address(RVA = "0x1284EC0", Offset = "0x1284EC0", VA = "0x1284EC0", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003A9")]
		[Address(RVA = "0x1284F04", Offset = "0x1284F04", VA = "0x1284F04", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003AA")]
		[Address(RVA = "0x1284F48", Offset = "0x1284F48", VA = "0x1284F48", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60003AB")]
		[Address(RVA = "0x1284F60", Offset = "0x1284F60", VA = "0x1284F60")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60003AC")]
		[Address(RVA = "0x128517C", Offset = "0x128517C", VA = "0x128517C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60003AD")]
		[Address(RVA = "0x128525C", Offset = "0x128525C", VA = "0x128525C")]
		private void Update()
		{
		}

		[Token(Token = "0x60003AE")]
		[Address(RVA = "0x1285940", Offset = "0x1285940", VA = "0x1285940")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60003AF")]
		[Address(RVA = "0x1285DA0", Offset = "0x1285DA0", VA = "0x1285DA0")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60003B0")]
		[Address(RVA = "0x1285F4C", Offset = "0x1285F4C", VA = "0x1285F4C")]
		private void SetLegIK(int index)
		{
		}

		[Token(Token = "0x60003B1")]
		[Address(RVA = "0x12862D4", Offset = "0x12862D4", VA = "0x12862D4")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60003B2")]
		[Address(RVA = "0x12864AC", Offset = "0x12864AC", VA = "0x12864AC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60003B3")]
		[Address(RVA = "0x12866B0", Offset = "0x12866B0", VA = "0x12866B0")]
		public GrounderIK()
		{
		}
	}
	[Token(Token = "0x2000065")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Quadruped")]
	public class GrounderQuadruped : Grounder
	{
		[Token(Token = "0x2000066")]
		public struct Foot
		{
			[Token(Token = "0x4000283")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IKSolver solver;

			[Token(Token = "0x4000284")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x4000285")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Quaternion rotation;

			[Token(Token = "0x4000286")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grounding.Leg leg;

			[Token(Token = "0x60003C6")]
			[Address(RVA = "0x1287208", Offset = "0x1287208", VA = "0x1287208")]
			public Foot(IKSolver solver, Transform transform)
			{
			}
		}

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The Grounding solver for the forelegs.")]
		public Grounding forelegSolver;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of rotating the character root to the ground angle (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float rootRotationWeight;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The maximum angle of rotating the quadruped downwards (going downhill, range: -90 - 0).")]
		[Range(-90f, 0f)]
		public float minRootRotation;

		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The maximum angle of rotating the quadruped upwards (going uphill, range: 0 - 90).")]
		[Range(0f, 90f)]
		public float maxRootRotation;

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The speed of interpolating the character root rotation (range: 0 - inf).")]
		public float rootRotationSpeed;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum IK offset for the legs (range: 0 - inf).")]
		public float maxLegOffset;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The maximum IK offset for the forelegs (range: 0 - inf).")]
		public float maxForeLegOffset;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The weight of maintaining the head's rotation as it was before solving the Grounding (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float maintainHeadRotationWeight;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The root Transform of the character, with the rigidbody and the collider.")]
		public Transform characterRoot;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The pelvis transform. Common ancestor of both legs and the spine.")]
		public Transform pelvis;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The last bone in the spine that is the common parent for both forelegs.")]
		public Transform lastSpineBone;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The head (optional, if you intend to maintain it's rotation).")]
		public Transform head;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IK[] legs;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IK[] forelegs;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Vector3 gravity;

		[Token(Token = "0x4000275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Foot[] feet;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Quaternion animatedPelvisLocalRotation;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Quaternion animatedHeadLocalRotation;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion solvedPelvisLocalRotation;

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion solvedHeadLocalRotation;

		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int solvedFeet;

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool solved;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float angle;

		[Token(Token = "0x400027F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Transform forefeetRoot;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Quaternion headRotation;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float lastWeight;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x60003B4")]
		[Address(RVA = "0x128673C", Offset = "0x128673C", VA = "0x128673C", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003B5")]
		[Address(RVA = "0x1286780", Offset = "0x1286780", VA = "0x1286780", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003B6")]
		[Address(RVA = "0x12867C4", Offset = "0x12867C4", VA = "0x12867C4", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60003B7")]
		[Address(RVA = "0x12867EC", Offset = "0x12867EC", VA = "0x12867EC")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60003B8")]
		[Address(RVA = "0x12868F0", Offset = "0x12868F0", VA = "0x12868F0")]
		private bool IsReadyToInitiateLegs(IK[] ikComponents)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B9")]
		[Address(RVA = "0x1286AE4", Offset = "0x1286AE4", VA = "0x1286AE4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60003BA")]
		[Address(RVA = "0x1286B48", Offset = "0x1286B48", VA = "0x1286B48")]
		private void Update()
		{
		}

		[Token(Token = "0x60003BB")]
		[Address(RVA = "0x1286BA0", Offset = "0x1286BA0", VA = "0x1286BA0")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60003BC")]
		[Address(RVA = "0x1286EB4", Offset = "0x1286EB4", VA = "0x1286EB4")]
		private Transform[] InitiateFeet(IK[] ikComponents, ref Foot[] f, int indexOffset)
		{
			return null;
		}

		[Token(Token = "0x60003BD")]
		[Address(RVA = "0x128723C", Offset = "0x128723C", VA = "0x128723C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60003BE")]
		[Address(RVA = "0x12872CC", Offset = "0x12872CC", VA = "0x12872CC")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x60003BF")]
		[Address(RVA = "0x128771C", Offset = "0x128771C", VA = "0x128771C")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60003C0")]
		[Address(RVA = "0x1287DDC", Offset = "0x1287DDC", VA = "0x1287DDC")]
		private void UpdateForefeetRoot()
		{
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0x1288094", Offset = "0x1288094", VA = "0x1288094")]
		private void SetFootIK(Foot foot, float maxOffset)
		{
		}

		[Token(Token = "0x60003C2")]
		[Address(RVA = "0x12881C8", Offset = "0x12881C8", VA = "0x12881C8")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60003C3")]
		[Address(RVA = "0x1288490", Offset = "0x1288490", VA = "0x1288490")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60003C4")]
		[Address(RVA = "0x12884C0", Offset = "0x12884C0", VA = "0x12884C0")]
		private void DestroyLegs(IK[] ikComponents)
		{
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x12886BC", Offset = "0x12886BC", VA = "0x12886BC")]
		public GrounderQuadruped()
		{
		}
	}
	[Token(Token = "0x2000067")]
	[HelpURL("https://www.youtube.com/watch?v=9MiZiaJorws&index=6&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder VRIK")]
	public class GrounderVRIK : Grounder
	{
		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Reference to the VRIK componet.")]
		public VRIK ik;

		[Token(Token = "0x4000288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform[] feet;

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x12887EC", Offset = "0x12887EC", VA = "0x12887EC")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x1288830", Offset = "0x1288830", VA = "0x1288830", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x1288874", Offset = "0x1288874", VA = "0x1288874", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60003CA")]
		[Address(RVA = "0x12888B8", Offset = "0x12888B8", VA = "0x12888B8", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x12888D0", Offset = "0x12888D0", VA = "0x12888D0")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x1288958", Offset = "0x1288958", VA = "0x1288958")]
		private void Update()
		{
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x12889AC", Offset = "0x12889AC", VA = "0x12889AC")]
		private void Initiate()
		{
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x1288BE4", Offset = "0x1288BE4", VA = "0x1288BE4")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x1288DD8", Offset = "0x1288DD8", VA = "0x1288DD8")]
		private void SetLegIK(IKSolverVR.PositionOffset positionOffset, Transform bone, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x1288E5C", Offset = "0x1288E5C", VA = "0x1288E5C")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x12890F8", Offset = "0x12890F8", VA = "0x12890F8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x128922C", Offset = "0x128922C", VA = "0x128922C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60003D3")]
		[Address(RVA = "0x12893C4", Offset = "0x12893C4", VA = "0x12893C4")]
		public GrounderVRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000068")]
	public class Grounding
	{
		[Serializable]
		[Token(Token = "0x2000069")]
		public enum Quality
		{
			[Token(Token = "0x40002A2")]
			Fastest,
			[Token(Token = "0x40002A3")]
			Simple,
			[Token(Token = "0x40002A4")]
			Best
		}

		[Token(Token = "0x200006A")]
		public class Leg
		{
			[Token(Token = "0x40002A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Quaternion rotationOffset;

			[Token(Token = "0x40002AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public bool invertFootCenter;

			[Token(Token = "0x40002B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Grounding grounding;

			[Token(Token = "0x40002B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private float lastTime;

			[Token(Token = "0x40002B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private float deltaTime;

			[Token(Token = "0x40002B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private Vector3 lastPosition;

			[Token(Token = "0x40002B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private Quaternion toHitNormal;

			[Token(Token = "0x40002B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private Quaternion r;

			[Token(Token = "0x40002B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 up;

			[Token(Token = "0x40002B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private bool doOverrideFootPosition;

			[Token(Token = "0x40002B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Vector3 overrideFootPosition;

			[Token(Token = "0x40002B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private Vector3 transformPosition;

			[Token(Token = "0x17000076")]
			public bool isGrounded
			{
				[Token(Token = "0x60003EC")]
				[Address(RVA = "0x128A76C", Offset = "0x128A76C", VA = "0x128A76C")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60003ED")]
				[Address(RVA = "0x128A774", Offset = "0x128A774", VA = "0x128A774")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000077")]
			public Vector3 IKPosition
			{
				[Token(Token = "0x60003EE")]
				[Address(RVA = "0x128A780", Offset = "0x128A780", VA = "0x128A780")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60003EF")]
				[Address(RVA = "0x128A78C", Offset = "0x128A78C", VA = "0x128A78C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000078")]
			public bool initiated
			{
				[Token(Token = "0x60003F0")]
				[Address(RVA = "0x128A798", Offset = "0x128A798", VA = "0x128A798")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60003F1")]
				[Address(RVA = "0x128A7A0", Offset = "0x128A7A0", VA = "0x128A7A0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000079")]
			public float heightFromGround
			{
				[Token(Token = "0x60003F2")]
				[Address(RVA = "0x128A7AC", Offset = "0x128A7AC", VA = "0x128A7AC")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60003F3")]
				[Address(RVA = "0x128A7B4", Offset = "0x128A7B4", VA = "0x128A7B4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700007A")]
			public Vector3 velocity
			{
				[Token(Token = "0x60003F4")]
				[Address(RVA = "0x128A7BC", Offset = "0x128A7BC", VA = "0x128A7BC")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60003F5")]
				[Address(RVA = "0x128A7C8", Offset = "0x128A7C8", VA = "0x128A7C8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700007B")]
			public Transform transform
			{
				[Token(Token = "0x60003F6")]
				[Address(RVA = "0x128A7D4", Offset = "0x128A7D4", VA = "0x128A7D4")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x60003F7")]
				[Address(RVA = "0x128A7DC", Offset = "0x128A7DC", VA = "0x128A7DC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700007C")]
			public float IKOffset
			{
				[Token(Token = "0x60003F8")]
				[Address(RVA = "0x128A7E4", Offset = "0x128A7E4", VA = "0x128A7E4")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60003F9")]
				[Address(RVA = "0x128A7EC", Offset = "0x128A7EC", VA = "0x128A7EC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700007D")]
			public RaycastHit heelHit
			{
				[Token(Token = "0x60003FA")]
				[Address(RVA = "0x128A7F4", Offset = "0x128A7F4", VA = "0x128A7F4")]
				[CompilerGenerated]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x60003FB")]
				[Address(RVA = "0x128A80C", Offset = "0x128A80C", VA = "0x128A80C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700007E")]
			public RaycastHit capsuleHit
			{
				[Token(Token = "0x60003FC")]
				[Address(RVA = "0x128A82C", Offset = "0x128A82C", VA = "0x128A82C")]
				[CompilerGenerated]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x60003FD")]
				[Address(RVA = "0x128A844", Offset = "0x128A844", VA = "0x128A844")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700007F")]
			public RaycastHit GetHitPoint
			{
				[Token(Token = "0x60003FE")]
				[Address(RVA = "0x128A864", Offset = "0x128A864", VA = "0x128A864")]
				get
				{
					return default(RaycastHit);
				}
			}

			[Token(Token = "0x17000080")]
			public float stepHeightFromGround
			{
				[Token(Token = "0x6000404")]
				[Address(RVA = "0x128B148", Offset = "0x128B148", VA = "0x128B148")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000081")]
			private float rootYOffset
			{
				[Token(Token = "0x600040D")]
				[Address(RVA = "0x128B298", Offset = "0x128B298", VA = "0x128B298")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x60003FF")]
			[Address(RVA = "0x128A8AC", Offset = "0x128A8AC", VA = "0x128A8AC")]
			public void SetFootPosition(Vector3 position)
			{
			}

			[Token(Token = "0x6000400")]
			[Address(RVA = "0x12898D8", Offset = "0x12898D8", VA = "0x12898D8")]
			public void Initiate(Grounding grounding, Transform transform)
			{
			}

			[Token(Token = "0x6000401")]
			[Address(RVA = "0x128A8C0", Offset = "0x128A8C0", VA = "0x128A8C0")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x6000402")]
			[Address(RVA = "0x128A3DC", Offset = "0x128A3DC", VA = "0x128A3DC")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000403")]
			[Address(RVA = "0x12899C4", Offset = "0x12899C4", VA = "0x12899C4")]
			public void Process()
			{
			}

			[Token(Token = "0x6000405")]
			[Address(RVA = "0x128AD5C", Offset = "0x128AD5C", VA = "0x128AD5C")]
			private RaycastHit GetCapsuleHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x6000406")]
			[Address(RVA = "0x128A900", Offset = "0x128A900", VA = "0x128A900")]
			private RaycastHit GetRaycastHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x6000407")]
			[Address(RVA = "0x128B1DC", Offset = "0x128B1DC", VA = "0x128B1DC")]
			private Vector3 RotateNormal(Vector3 normal)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000408")]
			[Address(RVA = "0x128ABC8", Offset = "0x128ABC8", VA = "0x128ABC8")]
			private void SetFootToPoint(Vector3 normal, Vector3 point)
			{
			}

			[Token(Token = "0x6000409")]
			[Address(RVA = "0x128AC48", Offset = "0x128AC48", VA = "0x128AC48")]
			private void SetFootToPlane(Vector3 planeNormal, Vector3 planePoint, Vector3 heelHitPoint)
			{
			}

			[Token(Token = "0x600040A")]
			[Address(RVA = "0x128B248", Offset = "0x128B248", VA = "0x128B248")]
			private float GetHeightFromGround(Vector3 hitPoint)
			{
				return default(float);
			}

			[Token(Token = "0x600040B")]
			[Address(RVA = "0x128B17C", Offset = "0x128B17C", VA = "0x128B17C")]
			private void RotateFoot()
			{
			}

			[Token(Token = "0x600040C")]
			[Address(RVA = "0x128B324", Offset = "0x128B324", VA = "0x128B324")]
			private Quaternion GetRotationOffsetTarget()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x600040E")]
			[Address(RVA = "0x1289838", Offset = "0x1289838", VA = "0x1289838")]
			public Leg()
			{
			}
		}

		[Token(Token = "0x200006B")]
		public class Pelvis
		{
			[Token(Token = "0x40002BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Grounding grounding;

			[Token(Token = "0x40002BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 lastRootPosition;

			[Token(Token = "0x40002BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float damperF;

			[Token(Token = "0x40002BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool initiated;

			[Token(Token = "0x40002C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float lastTime;

			[Token(Token = "0x17000082")]
			public Vector3 IKOffset
			{
				[Token(Token = "0x600040F")]
				[Address(RVA = "0x128B4D4", Offset = "0x128B4D4", VA = "0x128B4D4")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000410")]
				[Address(RVA = "0x128B4E0", Offset = "0x128B4E0", VA = "0x128B4E0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000083")]
			public float heightOffset
			{
				[Token(Token = "0x6000411")]
				[Address(RVA = "0x128B4EC", Offset = "0x128B4EC", VA = "0x128B4EC")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000412")]
				[Address(RVA = "0x128B4F4", Offset = "0x128B4F4", VA = "0x128B4F4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000413")]
			[Address(RVA = "0x12899A0", Offset = "0x12899A0", VA = "0x12899A0")]
			public void Initiate(Grounding grounding)
			{
			}

			[Token(Token = "0x6000414")]
			[Address(RVA = "0x128A348", Offset = "0x128A348", VA = "0x128A348")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000415")]
			[Address(RVA = "0x128B4FC", Offset = "0x128B4FC", VA = "0x128B4FC")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x6000416")]
			[Address(RVA = "0x128A15C", Offset = "0x128A15C", VA = "0x128A15C")]
			public void Process(float lowestOffset, float highestOffset, bool isGrounded)
			{
			}

			[Token(Token = "0x6000417")]
			[Address(RVA = "0x12898D0", Offset = "0x12898D0", VA = "0x12898D0")]
			public Pelvis()
			{
			}
		}

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Layers to ground the character to. Make sure to exclude the layer of the character controller.")]
		public LayerMask layers;

		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("Max step height. Maximum vertical distance of Grounding from the root of the character.")]
		public float maxStep;

		[Token(Token = "0x400028B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The height offset of the root.")]
		public float heightOffset;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The speed of moving the feet up/down.")]
		public float footSpeed;

		[Token(Token = "0x400028D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("CapsuleCast radius. Should match approximately with the size of the feet.")]
		public float footRadius;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		[Tooltip("Offset of the foot center along character forward axis.")]
		public float footCenterOffset;

		[Token(Token = "0x400028F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Amount of velocity based prediction of the foot positions.")]
		public float prediction;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Weight of rotating the feet to the ground normal offset.")]
		[Range(0f, 1f)]
		public float footRotationWeight;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Speed of slerping the feet to their grounded rotations.")]
		public float footRotationSpeed;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 90f)]
		[Tooltip("Max Foot Rotation Angle. Max angular offset from the foot's rotation.")]
		public float maxFootRotationAngle;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true, solver will rotate with the character root so the character can be grounded for example to spherical planets. For performance reasons leave this off unless needed.")]
		public bool rotateSolver;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The speed of moving the character up/down.")]
		public float pelvisSpeed;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Used for smoothing out vertical pelvis movement (range 0 - 1).")]
		[Range(0f, 1f)]
		public float pelvisDamper;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The weight of lowering the pelvis to the lowest foot.")]
		public float lowerPelvisWeight;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of lifting the pelvis to the highest foot. This is useful when you don't want the feet to go too high relative to the body when crouching.")]
		public float liftPelvisWeight;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The radius of the spherecast from the root that determines whether the character root is grounded.")]
		public float rootSphereCastRadius;

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("If false, keeps the foot that is over a ledge at the root level. If true, lowers the overstepping foot and body by the 'Max Step' value.")]
		public bool overstepFallsDown;

		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The raycasting quality. Fastest is a single raycast per foot, Simple is three raycasts, Best is one raycast and a capsule cast per foot.")]
		public Quality quality;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool initiated;

		[Token(Token = "0x1700006E")]
		public Leg[] legs
		{
			[Token(Token = "0x60003D4")]
			[Address(RVA = "0x1289418", Offset = "0x1289418", VA = "0x1289418")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60003D5")]
			[Address(RVA = "0x1289420", Offset = "0x1289420", VA = "0x1289420")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700006F")]
		public Pelvis pelvis
		{
			[Token(Token = "0x60003D6")]
			[Address(RVA = "0x1289428", Offset = "0x1289428", VA = "0x1289428")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60003D7")]
			[Address(RVA = "0x1289430", Offset = "0x1289430", VA = "0x1289430")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000070")]
		public bool isGrounded
		{
			[Token(Token = "0x60003D8")]
			[Address(RVA = "0x1289438", Offset = "0x1289438", VA = "0x1289438")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60003D9")]
			[Address(RVA = "0x1289440", Offset = "0x1289440", VA = "0x1289440")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000071")]
		public Transform root
		{
			[Token(Token = "0x60003DA")]
			[Address(RVA = "0x128944C", Offset = "0x128944C", VA = "0x128944C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60003DB")]
			[Address(RVA = "0x1289454", Offset = "0x1289454", VA = "0x1289454")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000072")]
		public RaycastHit rootHit
		{
			[Token(Token = "0x60003DC")]
			[Address(RVA = "0x128945C", Offset = "0x128945C", VA = "0x128945C")]
			[CompilerGenerated]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x60003DD")]
			[Address(RVA = "0x1289474", Offset = "0x1289474", VA = "0x1289474")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000073")]
		public bool rootGrounded
		{
			[Token(Token = "0x60003DE")]
			[Address(RVA = "0x1289494", Offset = "0x1289494", VA = "0x1289494")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000074")]
		public Vector3 up
		{
			[Token(Token = "0x60003E6")]
			[Address(RVA = "0x1283DF4", Offset = "0x1283DF4", VA = "0x1283DF4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000075")]
		private bool useRootRotation
		{
			[Token(Token = "0x60003E9")]
			[Address(RVA = "0x128A470", Offset = "0x128A470", VA = "0x128A470")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60003DF")]
		[Address(RVA = "0x12894DC", Offset = "0x12894DC", VA = "0x12894DC")]
		public RaycastHit GetRootHit(float maxDistanceMlp = 10f)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x60003E0")]
		[Address(RVA = "0x128973C", Offset = "0x128973C", VA = "0x128973C")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x128343C", Offset = "0x128343C", VA = "0x128343C")]
		public void Initiate(Transform root, Transform[] feet)
		{
		}

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0x1283B44", Offset = "0x1283B44", VA = "0x1283B44")]
		public void Update()
		{
		}

		[Token(Token = "0x60003E3")]
		[Address(RVA = "0x12857C8", Offset = "0x12857C8", VA = "0x12857C8")]
		public Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0x1282FD0", Offset = "0x1282FD0", VA = "0x1282FD0")]
		public void Reset()
		{
		}

		[Token(Token = "0x60003E5")]
		[Address(RVA = "0x12899B0", Offset = "0x12899B0", VA = "0x12899B0")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x60003E7")]
		[Address(RVA = "0x128A524", Offset = "0x128A524", VA = "0x128A524")]
		public float GetVerticalOffset(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x60003E8")]
		[Address(RVA = "0x128A5A8", Offset = "0x128A5A8", VA = "0x128A5A8")]
		public Vector3 Flatten(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003EA")]
		[Address(RVA = "0x128A6FC", Offset = "0x128A6FC", VA = "0x128A6FC")]
		public Vector3 GetFootCenterOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0x1282D90", Offset = "0x1282D90", VA = "0x1282D90")]
		public Grounding()
		{
		}
	}
	[Token(Token = "0x200006C")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Aim IK")]
	[HelpURL("https://www.youtube.com/watch?v=wT8fViZpLmQ&index=3&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class AimIK : IK
	{
		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverAim solver;

		[Token(Token = "0x6000418")]
		[Address(RVA = "0x128B550", Offset = "0x128B550", VA = "0x128B550", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0x128B594", Offset = "0x128B594", VA = "0x128B594", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0x128B5D8", Offset = "0x128B5D8", VA = "0x128B5D8")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0x128B61C", Offset = "0x128B61C", VA = "0x128B61C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600041C")]
		[Address(RVA = "0x128B660", Offset = "0x128B660", VA = "0x128B660")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600041D")]
		[Address(RVA = "0x128B6A4", Offset = "0x128B6A4", VA = "0x128B6A4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0x128B6AC", Offset = "0x128B6AC", VA = "0x128B6AC")]
		public AimIK()
		{
		}
	}
	[Token(Token = "0x200006D")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Arm IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page2.html")]
	public class ArmIK : IK
	{
		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverArm solver;

		[Token(Token = "0x600041F")]
		[Address(RVA = "0x128B71C", Offset = "0x128B71C", VA = "0x128B71C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000420")]
		[Address(RVA = "0x128B760", Offset = "0x128B760", VA = "0x128B760", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0x128B7A4", Offset = "0x128B7A4", VA = "0x128B7A4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000422")]
		[Address(RVA = "0x128B7E8", Offset = "0x128B7E8", VA = "0x128B7E8")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000423")]
		[Address(RVA = "0x128B82C", Offset = "0x128B82C", VA = "0x128B82C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0x128B834", Offset = "0x128B834", VA = "0x128B834")]
		public ArmIK()
		{
		}
	}
	[Token(Token = "0x200006E")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/CCD IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page5.html")]
	public class CCDIK : IK
	{
		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverCCD solver;

		[Token(Token = "0x6000425")]
		[Address(RVA = "0x128B89C", Offset = "0x128B89C", VA = "0x128B89C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000426")]
		[Address(RVA = "0x128B8E0", Offset = "0x128B8E0", VA = "0x128B8E0", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0x128B924", Offset = "0x128B924", VA = "0x128B924")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000428")]
		[Address(RVA = "0x128B968", Offset = "0x128B968", VA = "0x128B968")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000429")]
		[Address(RVA = "0x128B9AC", Offset = "0x128B9AC", VA = "0x128B9AC", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600042A")]
		[Address(RVA = "0x128B9B4", Offset = "0x128B9B4", VA = "0x128B9B4")]
		public CCDIK()
		{
		}
	}
	[Token(Token = "0x200006F")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page6.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/FABRIK")]
	public class FABRIK : IK
	{
		[Token(Token = "0x40002C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIK solver;

		[Token(Token = "0x600042B")]
		[Address(RVA = "0x128BA1C", Offset = "0x128BA1C", VA = "0x128BA1C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600042C")]
		[Address(RVA = "0x128BA60", Offset = "0x128BA60", VA = "0x128BA60", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0x128BAA4", Offset = "0x128BAA4", VA = "0x128BAA4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600042E")]
		[Address(RVA = "0x128BAE8", Offset = "0x128BAE8", VA = "0x128BAE8")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0x128BB2C", Offset = "0x128BB2C", VA = "0x128BB2C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0x128BB34", Offset = "0x128BB34", VA = "0x128BB34")]
		public FABRIK()
		{
		}
	}
	[Token(Token = "0x2000070")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/FABRIK Root")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page7.html")]
	public class FABRIKRoot : IK
	{
		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIKRoot solver;

		[Token(Token = "0x6000431")]
		[Address(RVA = "0x128BB9C", Offset = "0x128BB9C", VA = "0x128BB9C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0x128BBE0", Offset = "0x128BBE0", VA = "0x128BBE0", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0x128BC24", Offset = "0x128BC24", VA = "0x128BC24")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0x128BC68", Offset = "0x128BC68", VA = "0x128BC68")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0x128BCAC", Offset = "0x128BCAC", VA = "0x128BCAC", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0x128BCB4", Offset = "0x128BCB4", VA = "0x128BCB4")]
		public FABRIKRoot()
		{
		}
	}
	[Token(Token = "0x2000071")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Full Body Biped IK")]
	[HelpURL("https://www.youtube.com/watch?v=7__IafZGwvI&index=1&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class FullBodyBipedIK : IK
	{
		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverFullBodyBiped solver;

		[Token(Token = "0x6000437")]
		[Address(RVA = "0x128BD1C", Offset = "0x128BD1C", VA = "0x128BD1C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0x128BD60", Offset = "0x128BD60", VA = "0x128BD60", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0x128BDA4", Offset = "0x128BDA4", VA = "0x128BDA4")]
		[ContextMenu("TUTORIAL VIDEO (SETUP)")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x600043A")]
		[Address(RVA = "0x128BDE8", Offset = "0x128BDE8", VA = "0x128BDE8")]
		[ContextMenu("TUTORIAL VIDEO (INSPECTOR)")]
		private void OpenInspectorTutorial()
		{
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0x128BE2C", Offset = "0x128BE2C", VA = "0x128BE2C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0x128BE70", Offset = "0x128BE70", VA = "0x128BE70")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0x128BEB4", Offset = "0x128BEB4", VA = "0x128BEB4")]
		public void SetReferences(BipedReferences references, Transform rootNode)
		{
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0x128BED8", Offset = "0x128BED8", VA = "0x128BED8", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600043F")]
		[Address(RVA = "0x128BEE0", Offset = "0x128BEE0", VA = "0x128BEE0")]
		public bool ReferencesError(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0x128C09C", Offset = "0x128C09C", VA = "0x128C09C")]
		public bool ReferencesWarning(ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0x128C54C", Offset = "0x128C54C", VA = "0x128C54C")]
		[ContextMenu("Reinitiate")]
		private void Reinitiate()
		{
		}

		[Token(Token = "0x6000442")]
		[Address(RVA = "0x128C56C", Offset = "0x128C56C", VA = "0x128C56C")]
		[ContextMenu("Auto-detect References")]
		private void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0x128C644", Offset = "0x128C644", VA = "0x128C644")]
		public FullBodyBipedIK()
		{
		}
	}
	[Token(Token = "0x2000072")]
	public abstract class IK : SolverManager
	{
		[Token(Token = "0x6000444")]
		public abstract IKSolver GetIKSolver();

		[Token(Token = "0x6000445")]
		[Address(RVA = "0x128C6DC", Offset = "0x128C6DC", VA = "0x128C6DC", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0x128C754", Offset = "0x128C754", VA = "0x128C754", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0x128C7C4", Offset = "0x128C7C4", VA = "0x128C7C4", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000448")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x6000449")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x600044A")]
		[Address(RVA = "0x128B714", Offset = "0x128B714", VA = "0x128B714")]
		protected IK()
		{
		}
	}
	[Token(Token = "0x2000073")]
	public class IKExecutionOrder : MonoBehaviour
	{
		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The IK components, assign in the order in which you wish to update them.")]
		public IK[] IKComponents;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Optional. Assign it if you are using 'Animate Physics' as the Update Mode.")]
		public Animator animator;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool fixedFrame;

		[Token(Token = "0x17000084")]
		private bool animatePhysics
		{
			[Token(Token = "0x600044B")]
			[Address(RVA = "0x128C814", Offset = "0x128C814", VA = "0x128C814")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600044C")]
		[Address(RVA = "0x128C8A0", Offset = "0x128C8A0", VA = "0x128C8A0")]
		private void Start()
		{
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0x128C904", Offset = "0x128C904", VA = "0x128C904")]
		private void Update()
		{
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0x128C9A4", Offset = "0x128C9A4", VA = "0x128C9A4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0x128C9D0", Offset = "0x128C9D0", VA = "0x128C9D0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0x128C928", Offset = "0x128C928", VA = "0x128C928")]
		private void FixTransforms()
		{
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0x128CA54", Offset = "0x128CA54", VA = "0x128CA54")]
		public IKExecutionOrder()
		{
		}
	}
	[Token(Token = "0x2000074")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page11.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Leg IK")]
	public class LegIK : IK
	{
		[Token(Token = "0x40002CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLeg solver;

		[Token(Token = "0x6000452")]
		[Address(RVA = "0x128CA5C", Offset = "0x128CA5C", VA = "0x128CA5C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0x128CAA0", Offset = "0x128CAA0", VA = "0x128CAA0", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000454")]
		[Address(RVA = "0x128CAE4", Offset = "0x128CAE4", VA = "0x128CAE4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000455")]
		[Address(RVA = "0x128CB28", Offset = "0x128CB28", VA = "0x128CB28")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000456")]
		[Address(RVA = "0x128CB6C", Offset = "0x128CB6C", VA = "0x128CB6C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000457")]
		[Address(RVA = "0x128CB74", Offset = "0x128CB74", VA = "0x128CB74")]
		public LegIK()
		{
		}
	}
	[Token(Token = "0x2000075")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page12.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Limb IK")]
	public class LimbIK : IK
	{
		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLimb solver;

		[Token(Token = "0x6000458")]
		[Address(RVA = "0x128CBDC", Offset = "0x128CBDC", VA = "0x128CBDC", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0x128CC20", Offset = "0x128CC20", VA = "0x128CC20", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600045A")]
		[Address(RVA = "0x128CC64", Offset = "0x128CC64", VA = "0x128CC64")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600045B")]
		[Address(RVA = "0x128CCA8", Offset = "0x128CCA8", VA = "0x128CCA8")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600045C")]
		[Address(RVA = "0x128CCEC", Offset = "0x128CCEC", VA = "0x128CCEC", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0x128CCF4", Offset = "0x128CCF4", VA = "0x128CCF4")]
		public LimbIK()
		{
		}
	}
	[Token(Token = "0x2000076")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Look At IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page13.html")]
	public class LookAtIK : IK
	{
		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt solver;

		[Token(Token = "0x600045E")]
		[Address(RVA = "0x128CD5C", Offset = "0x128CD5C", VA = "0x128CD5C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600045F")]
		[Address(RVA = "0x128CDA0", Offset = "0x128CDA0", VA = "0x128CDA0", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0x128CDE4", Offset = "0x128CDE4", VA = "0x128CDE4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0x128CE28", Offset = "0x128CE28", VA = "0x128CE28")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0x128CE6C", Offset = "0x128CE6C", VA = "0x128CE6C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0x128CE74", Offset = "0x128CE74", VA = "0x128CE74")]
		public LookAtIK()
		{
		}
	}
	[Token(Token = "0x2000077")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Trigonometric IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page15.html")]
	public class TrigonometricIK : IK
	{
		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverTrigonometric solver;

		[Token(Token = "0x6000464")]
		[Address(RVA = "0x128CEDC", Offset = "0x128CEDC", VA = "0x128CEDC", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000465")]
		[Address(RVA = "0x128CF20", Offset = "0x128CF20", VA = "0x128CF20", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000466")]
		[Address(RVA = "0x128CF64", Offset = "0x128CF64", VA = "0x128CF64")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000467")]
		[Address(RVA = "0x128CFA8", Offset = "0x128CFA8", VA = "0x128CFA8")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000468")]
		[Address(RVA = "0x128CFEC", Offset = "0x128CFEC", VA = "0x128CFEC", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000469")]
		[Address(RVA = "0x128CFF4", Offset = "0x128CFF4", VA = "0x128CFF4")]
		public TrigonometricIK()
		{
		}
	}
	[Token(Token = "0x2000078")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/VR IK")]
	public class VRIK : IK
	{
		[Serializable]
		[Token(Token = "0x2000079")]
		public class References
		{
			[Token(Token = "0x40002D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform root;

			[Token(Token = "0x40002D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform pelvis;

			[Token(Token = "0x40002D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spine;

			[Token(Token = "0x40002D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Optional")]
			public Transform chest;

			[Token(Token = "0x40002D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Optional")]
			public Transform neck;

			[Token(Token = "0x40002D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform head;

			[Token(Token = "0x40002D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[Tooltip("Optional")]
			public Transform leftShoulder;

			[Token(Token = "0x40002D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Transform leftUpperArm;

			[Token(Token = "0x40002D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform leftForearm;

			[Token(Token = "0x40002DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Transform leftHand;

			[Token(Token = "0x40002DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Optional")]
			public Transform rightShoulder;

			[Token(Token = "0x40002DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Transform rightUpperArm;

			[Token(Token = "0x40002DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Transform rightForearm;

			[Token(Token = "0x40002DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Transform rightHand;

			[Token(Token = "0x40002DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftThigh;

			[Token(Token = "0x40002E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftCalf;

			[Token(Token = "0x40002E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform leftFoot;

			[Token(Token = "0x40002E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[Tooltip("Optional")]
			public Transform leftToes;

			[Token(Token = "0x40002E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightThigh;

			[Token(Token = "0x40002E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightCalf;

			[Token(Token = "0x40002E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[Tooltip("VRIK also supports legless characters.If you do not wish to use legs, leave all leg references empty.")]
			public Transform rightFoot;

			[Token(Token = "0x40002E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[Tooltip("Optional")]
			public Transform rightToes;

			[Token(Token = "0x17000085")]
			public bool isFilled
			{
				[Token(Token = "0x6000474")]
				[Address(RVA = "0x128D928", Offset = "0x128D928", VA = "0x128D928")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000086")]
			public bool isEmpty
			{
				[Token(Token = "0x6000475")]
				[Address(RVA = "0x128D56C", Offset = "0x128D56C", VA = "0x128D56C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000473")]
			[Address(RVA = "0x128DF14", Offset = "0x128DF14", VA = "0x128DF14")]
			public Transform[] GetTransforms()
			{
				return null;
			}

			[Token(Token = "0x6000476")]
			[Address(RVA = "0x128D144", Offset = "0x128D144", VA = "0x128D144")]
			public static bool AutoDetectReferences(Transform root, out References references)
			{
				return default(bool);
			}

			[Token(Token = "0x6000477")]
			[Address(RVA = "0x128DF0C", Offset = "0x128DF0C", VA = "0x128DF0C")]
			public References()
			{
			}
		}

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Bone mapping. Right-click on the component header and select 'Auto-detect References' of fill in manually if not a Humanoid character. Chest, neck, shoulder and toe bones are optional. VRIK also supports legless characters. If you do not wish to use legs, leave all leg references empty.")]
		[ContextMenuItem("Auto-detect References", "AutoDetectReferences")]
		public References references;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The VRIK solver.")]
		public IKSolverVR solver;

		[Token(Token = "0x600046A")]
		[Address(RVA = "0x128D05C", Offset = "0x128D05C", VA = "0x128D05C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600046B")]
		[Address(RVA = "0x128D0A0", Offset = "0x128D0A0", VA = "0x128D0A0", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0x128D0E4", Offset = "0x128D0E4", VA = "0x128D0E4")]
		[ContextMenu("TUTORIAL VIDEO (STEAMVR SETUP)")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0x128D128", Offset = "0x128D128", VA = "0x128D128")]
		[ContextMenu("Auto-detect References")]
		public void AutoDetectReferences()
		{
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0x128D4D0", Offset = "0x128D4D0", VA = "0x128D4D0")]
		[ContextMenu("Guess Hand Orientations")]
		public void GuessHandOrientations()
		{
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0x128D4F8", Offset = "0x128D4F8", VA = "0x128D4F8", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0x128D500", Offset = "0x128D500", VA = "0x128D500", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000471")]
		[Address(RVA = "0x128DCE4", Offset = "0x128DCE4", VA = "0x128DCE4", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000472")]
		[Address(RVA = "0x128DE74", Offset = "0x128DE74", VA = "0x128DE74")]
		public VRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200007A")]
	public class FABRIKChain
	{
		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FABRIK ik;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float pull;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float pin;

		[Token(Token = "0x40002EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] children;

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x128E350", Offset = "0x128E350", VA = "0x128E350")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000479")]
		[Address(RVA = "0x128E414", Offset = "0x128E414", VA = "0x128E414")]
		public void Initiate()
		{
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x128E434", Offset = "0x128E434", VA = "0x128E434")]
		public void Stage1(FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x128E688", Offset = "0x128E688", VA = "0x128E688")]
		public void Stage2(Vector3 rootPosition, FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0x128E4F4", Offset = "0x128E4F4", VA = "0x128E4F4")]
		private Vector3 GetCentroid(FABRIKChain[] chain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x128E76C", Offset = "0x128E76C", VA = "0x128E76C")]
		public FABRIKChain()
		{
		}
	}
	[Token(Token = "0x200007B")]
	public class FBBIKArmBending : MonoBehaviour
	{
		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 bendDirectionOffsetLeft;

		[Token(Token = "0x40002ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 bendDirectionOffsetRight;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 characterSpaceBendOffsetLeft;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 characterSpaceBendOffsetRight;

		[Token(Token = "0x40002F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandTargetRotation;

		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion rightHandTargetRotation;

		[Token(Token = "0x40002F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool initiated;

		[Token(Token = "0x600047E")]
		[Address(RVA = "0x128E7CC", Offset = "0x128E7CC", VA = "0x128E7CC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0x128EC68", Offset = "0x128EC68", VA = "0x128EC68")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0x128EDFC", Offset = "0x128EDFC", VA = "0x128EDFC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0x128EF08", Offset = "0x128EF08", VA = "0x128EF08")]
		public FBBIKArmBending()
		{
		}
	}
	[Token(Token = "0x200007C")]
	public class FBBIKHeadEffector : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200007D")]
		public class BendBone
		{
			[Token(Token = "0x4000321")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Assign spine and/or neck bones.")]
			public Transform transform;

			[Token(Token = "0x4000322")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(0f, 1f)]
			[Tooltip("The weight of rotating this bone.")]
			public float weight;

			[Token(Token = "0x4000323")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6000490")]
			[Address(RVA = "0x1292FBC", Offset = "0x1292FBC", VA = "0x1292FBC")]
			public BendBone()
			{
			}

			[Token(Token = "0x6000491")]
			[Address(RVA = "0x129301C", Offset = "0x129301C", VA = "0x129301C")]
			public BendBone(Transform transform, float weight)
			{
			}

			[Token(Token = "0x6000492")]
			[Address(RVA = "0x1293098", Offset = "0x1293098", VA = "0x1293098")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6000493")]
			[Address(RVA = "0x12930C4", Offset = "0x12930C4", VA = "0x12930C4")]
			public void FixTransforms()
			{
			}
		}

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the FBBIK component.")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Master weight for positioning the head.")]
		[LargeHeader("Position")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The weight of moving the body along with the head")]
		[Range(0f, 1f)]
		public float bodyWeight;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The weight of moving the thighs along with the head")]
		[Range(0f, 1f)]
		public float thighWeight;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("If false, hands will not pull the head away if they are too far. Disabling this will improve performance significantly.")]
		public bool handsPullBody;

		[Token(Token = "0x40002F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		[LargeHeader("Rotation")]
		[Tooltip("The weight of rotating the head bone after solving")]
		public float rotationWeight;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		[Tooltip("Clamping the rotation of the body")]
		public float bodyClampWeight;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Clamping the rotation of the head")]
		[Range(0f, 1f)]
		public float headClampWeight;

		[Token(Token = "0x40002FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The master weight of bending/twisting the spine to the rotation of the head effector. This is similar to CCD, but uses the rotation of the head effector not the position.")]
		[Range(0f, 1f)]
		public float bendWeight;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The bones to use for bending.")]
		public BendBone[] bendBones;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Optional. The master weight of the CCD (Cyclic Coordinate Descent) IK effect that bends the spine towards the head effector before FBBIK solves.")]
		[Range(0f, 1f)]
		[LargeHeader("CCD")]
		public float CCDWeight;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The weight of rolling the bones in towards the target")]
		[Range(0f, 1f)]
		public float roll;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1000f)]
		[Tooltip("Smoothing the CCD effect.")]
		public float damper;

		[Token(Token = "0x4000300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Bones to use for the CCD pass. Assign spine and/or neck bones.")]
		public Transform[] CCDBones;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		[LargeHeader("Stretching")]
		[Tooltip("Stretching the spine/neck to help reach the target. This is useful for making sure the head stays locked relative to the VR headset. NB! Stretching is done after FBBIK has solved so if you have the hand effectors pinned and spine bones included in the 'Stretch Bones', the hands might become offset from their target positions.")]
		public float postStretchWeight;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Stretch magnitude limit.")]
		public float maxStretch;

		[Token(Token = "0x4000303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("If > 0, dampers the stretching effect.")]
		public float stretchDamper;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("If true, will fix head position to this Transform no matter what. Good for making sure the head will not budge away from the VR headset")]
		public bool fixHead;

		[Token(Token = "0x4000305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Bones to use for stretching. The more bones you add, the less noticable the effect.")]
		public Transform[] stretchBones;

		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[LargeHeader("Chest Direction")]
		public Vector3 chestDirection;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float chestDirectionWeight;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] chestBones;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IKSolver.UpdateDelegate OnPostHeadEffectorFK;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 offset;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 headToBody;

		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 shoulderCenterToHead;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 headToLeftThigh;

		[Token(Token = "0x400030E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 headToRightThigh;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 leftShoulderPos;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 rightShoulderPos;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float shoulderDist;

		[Token(Token = "0x4000312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float leftShoulderDist;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float rightShoulderDist;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion chestRotation;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion headRotationRelativeToRoot;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Quaternion[] ccdDefaultLocalRotations;

		[Token(Token = "0x4000317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 headLocalPosition;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private Quaternion headLocalRotation;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3[] stretchLocalPositions;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Quaternion[] stretchLocalRotations;

		[Token(Token = "0x400031B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3[] chestLocalPositions;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Quaternion[] chestLocalRotations;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int bendBonesCount;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int ccdBonesCount;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int stretchBonesCount;

		[Token(Token = "0x4000320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private int chestBonesCount;

		[Token(Token = "0x6000482")]
		[Address(RVA = "0x128EF10", Offset = "0x128EF10", VA = "0x128EF10")]
		private void Start()
		{
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0x128F2FC", Offset = "0x128F2FC", VA = "0x128F2FC")]
		private void OnStoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0x128F774", Offset = "0x128F774", VA = "0x128F774")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x128FB1C", Offset = "0x128FB1C", VA = "0x128FB1C")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0x1290414", Offset = "0x1290414", VA = "0x1290414")]
		private void SpineBend()
		{
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0x129080C", Offset = "0x129080C", VA = "0x129080C")]
		private void CCDPass()
		{
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0x1290C1C", Offset = "0x1290C1C", VA = "0x1290C1C")]
		private void Iterate(int iteration)
		{
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0x129159C", Offset = "0x129159C", VA = "0x129159C")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0x129015C", Offset = "0x129015C", VA = "0x129015C")]
		private void ChestDirection()
		{
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0x12917D8", Offset = "0x12917D8", VA = "0x12917D8")]
		private void PostStretching()
		{
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0x12914B4", Offset = "0x12914B4", VA = "0x12914B4")]
		private void LerpSolverPosition(IKEffector effector, Vector3 position, float weight, Vector3 offset)
		{
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0x12913B4", Offset = "0x12913B4", VA = "0x12913B4")]
		private void Solve(ref Vector3 pos1, ref Vector3 pos2, float nominalDistance)
		{
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0x1291ADC", Offset = "0x1291ADC", VA = "0x1291ADC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0x1291E14", Offset = "0x1291E14", VA = "0x1291E14")]
		public FBBIKHeadEffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200007E")]
	public class FBIKChain
	{
		[Serializable]
		[Token(Token = "0x200007F")]
		public class ChildConstraint
		{
			[Token(Token = "0x400033B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float pushElasticity;

			[Token(Token = "0x400033C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pullElasticity;

			[Token(Token = "0x400033D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private Transform bone1;

			[Token(Token = "0x400033E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Transform bone2;

			[Token(Token = "0x4000341")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float crossFade;

			[Token(Token = "0x4000342")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float inverseCrossFade;

			[Token(Token = "0x4000343")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int chain1Index;

			[Token(Token = "0x4000344")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int chain2Index;

			[Token(Token = "0x17000087")]
			public float nominalDistance
			{
				[Token(Token = "0x60004A8")]
				[Address(RVA = "0x1296018", Offset = "0x1296018", VA = "0x1296018")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60004A9")]
				[Address(RVA = "0x1296020", Offset = "0x1296020", VA = "0x1296020")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000088")]
			public bool isRigid
			{
				[Token(Token = "0x60004AA")]
				[Address(RVA = "0x1296028", Offset = "0x1296028", VA = "0x1296028")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60004AB")]
				[Address(RVA = "0x1296030", Offset = "0x1296030", VA = "0x1296030")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x60004AC")]
			[Address(RVA = "0x129603C", Offset = "0x129603C", VA = "0x129603C")]
			public ChildConstraint(Transform bone1, Transform bone2, float pushElasticity = 0f, float pullElasticity = 0f)
			{
			}

			[Token(Token = "0x60004AD")]
			[Address(RVA = "0x1293D50", Offset = "0x1293D50", VA = "0x1293D50")]
			public void Initiate(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60004AE")]
			[Address(RVA = "0x12943E8", Offset = "0x12943E8", VA = "0x12943E8")]
			public void OnPreSolve(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60004AF")]
			[Address(RVA = "0x1295DDC", Offset = "0x1295DDC", VA = "0x1295DDC")]
			public void Solve(IKSolverFullBody solver)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000080")]
		public enum Smoothing
		{
			[Token(Token = "0x4000346")]
			None,
			[Token(Token = "0x4000347")]
			Exponential,
			[Token(Token = "0x4000348")]
			Cubic
		}

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		public float pin;

		[Token(Token = "0x4000325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 1f)]
		public float pull;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float push;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(-1f, 1f)]
		public float pushParent;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float reach;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Smoothing reachSmoothing;

		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Smoothing pushSmoothing;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolver.Node[] nodes;

		[Token(Token = "0x400032C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] children;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChildConstraint[] childConstraints;

		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IKConstraintBend bendConstraint;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rootLength;

		[Token(Token = "0x4000330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool initiated;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float length;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float distance;

		[Token(Token = "0x4000333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IKSolver.Point p;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float reachForce;

		[Token(Token = "0x4000335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pullParentSum;

		[Token(Token = "0x4000336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] crossFades;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sqrMag1;

		[Token(Token = "0x4000338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float sqrMag2;

		[Token(Token = "0x4000339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float sqrMagDif;

		[Token(Token = "0x400033A")]
		private const float maxLimbLength = 0.99999f;

		[Token(Token = "0x6000494")]
		[Address(RVA = "0x12930EC", Offset = "0x12930EC", VA = "0x12930EC")]
		public FBIKChain()
		{
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0x1293254", Offset = "0x1293254", VA = "0x1293254")]
		public FBIKChain(float pin, float pull, params Transform[] nodeTransforms)
		{
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0x1293388", Offset = "0x1293388", VA = "0x1293388")]
		public void SetNodes(params Transform[] boneTransforms)
		{
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0x12934C0", Offset = "0x12934C0", VA = "0x12934C0")]
		public int GetNodeIndex(Transform boneTransform)
		{
			return default(int);
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0x129357C", Offset = "0x129357C", VA = "0x129357C")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0x1293688", Offset = "0x1293688", VA = "0x1293688")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0x1294004", Offset = "0x1294004", VA = "0x1294004")]
		public void ReadPose(IKSolverFullBody solver, bool fullBody)
		{
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0x12937F4", Offset = "0x12937F4", VA = "0x12937F4")]
		private void CalculateBoneLengths(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0x12945CC", Offset = "0x12945CC", VA = "0x12945CC")]
		public void Reach(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0x1294860", Offset = "0x1294860", VA = "0x1294860")]
		public Vector3 Push(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0x1294B30", Offset = "0x1294B30", VA = "0x1294B30")]
		public void SolveTrigonometric(IKSolverFullBody solver, bool calculateBendDirection = false)
		{
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0x12954E0", Offset = "0x12954E0", VA = "0x12954E0")]
		public void Stage1(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x12959D8", Offset = "0x12959D8", VA = "0x12959D8")]
		public void Stage2(IKSolverFullBody solver, Vector3 position)
		{
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x1295BD8", Offset = "0x1295BD8", VA = "0x1295BD8")]
		public void SolveConstraintSystems(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x12958C4", Offset = "0x12958C4", VA = "0x12958C4")]
		private Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0x1295380", Offset = "0x1295380", VA = "0x1295380")]
		protected Vector3 GetDirToBendPoint(Vector3 direction, Vector3 bendDirection, float directionMagnitude)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0x1295860", Offset = "0x1295860", VA = "0x1295860")]
		private void SolveChildConstraints(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0x1295CB4", Offset = "0x1295CB4", VA = "0x1295CB4")]
		private void SolveLinearConstraint(IKSolver.Node node1, IKSolver.Node node2, float crossFade, float distance)
		{
		}

		[Token(Token = "0x60004A6")]
		[Address(RVA = "0x129578C", Offset = "0x129578C", VA = "0x129578C")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0x1295ADC", Offset = "0x1295ADC", VA = "0x1295ADC")]
		private void BackwardReach(Vector3 position)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000081")]
	public class IKConstraintBend
	{
		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone1;

		[Token(Token = "0x400034A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone2;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone3;

		[Token(Token = "0x400034C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bendGoal;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 direction;

		[Token(Token = "0x400034E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotationOffset;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 defaultLocalDirection;

		[Token(Token = "0x4000351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 defaultChildDirection;

		[NonSerialized]
		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float clampF;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int chainIndex1;

		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int nodeIndex1;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int chainIndex2;

		[Token(Token = "0x4000356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int nodeIndex2;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int chainIndex3;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int nodeIndex3;

		[Token(Token = "0x400035A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool limbOrientationsSet;

		[Token(Token = "0x17000089")]
		public bool initiated
		{
			[Token(Token = "0x60004B1")]
			[Address(RVA = "0x1296368", Offset = "0x1296368", VA = "0x1296368")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60004B2")]
			[Address(RVA = "0x1296370", Offset = "0x1296370", VA = "0x1296370")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0x1296190", Offset = "0x1296190", VA = "0x1296190")]
		public bool IsValid(IKSolverFullBody solver, Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0x12931E8", Offset = "0x12931E8", VA = "0x12931E8")]
		public IKConstraintBend()
		{
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x129637C", Offset = "0x129637C", VA = "0x129637C")]
		public IKConstraintBend(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x1293D9C", Offset = "0x1293D9C", VA = "0x1293D9C")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x1293DA8", Offset = "0x1293DA8", VA = "0x1293DA8")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x12965B0", Offset = "0x12965B0", VA = "0x12965B0")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower, Vector3 last)
		{
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0x1296904", Offset = "0x1296904", VA = "0x1296904")]
		public void LimitBend(float solverWeight, float positionWeight)
		{
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x1294D68", Offset = "0x1294D68", VA = "0x1294D68")]
		public Vector3 GetDir(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x1296478", Offset = "0x1296478", VA = "0x1296478")]
		private Vector3 OrthoToLimb(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x1296514", Offset = "0x1296514", VA = "0x1296514")]
		private Vector3 OrthoToBone1(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000082")]
	public class IKEffector
	{
		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x400035E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 position;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion rotation;

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 positionOffset;

		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool effectChildNodes;

		[Token(Token = "0x4000364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float maintainRelativePositionWeight;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform[] childBones;

		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform planeBone1;

		[Token(Token = "0x4000367")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform planeBone2;

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform planeBone3;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Quaternion planeRotationOffset;

		[Token(Token = "0x400036A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float posW;

		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float rotW;

		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] localPositions;

		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool usePlaneNodes;

		[Token(Token = "0x400036E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion animatedPlaneRotation;

		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 animatedPosition;

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool firstUpdate;

		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int chainIndex;

		[Token(Token = "0x4000372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int nodeIndex;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int plane1ChainIndex;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int plane1NodeIndex;

		[Token(Token = "0x4000375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int plane2ChainIndex;

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int plane2NodeIndex;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int plane3ChainIndex;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int plane3NodeIndex;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int[] childChainIndexes;

		[Token(Token = "0x400037A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int[] childNodeIndexes;

		[Token(Token = "0x1700008A")]
		public bool isEndEffector
		{
			[Token(Token = "0x60004BD")]
			[Address(RVA = "0x1296D78", Offset = "0x1296D78", VA = "0x1296D78")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60004BE")]
			[Address(RVA = "0x1296D80", Offset = "0x1296D80", VA = "0x1296D80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x1296D1C", Offset = "0x1296D1C", VA = "0x1296D1C")]
		public IKSolver.Node GetNode(IKSolverFullBody solver)
		{
			return null;
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0x1296D8C", Offset = "0x1296D8C", VA = "0x1296D8C")]
		public void PinToBone(float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0x1296E10", Offset = "0x1296E10", VA = "0x1296E10")]
		public IKEffector()
		{
		}

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0x1296FB0", Offset = "0x1296FB0", VA = "0x1296FB0")]
		public IKEffector(Transform bone, Transform[] childBones)
		{
		}

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0x129716C", Offset = "0x129716C", VA = "0x129716C")]
		public bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x1297460", Offset = "0x1297460", VA = "0x1297460")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x12976EC", Offset = "0x12976EC", VA = "0x12976EC")]
		public void ResetOffset(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x1297804", Offset = "0x1297804", VA = "0x1297804")]
		public void SetToTarget()
		{
		}

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0x12978A0", Offset = "0x12978A0", VA = "0x12978A0")]
		public void OnPreSolve(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0x1297F40", Offset = "0x1297F40", VA = "0x1297F40")]
		public void OnPostWrite()
		{
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0x1297F98", Offset = "0x1297F98", VA = "0x1297F98")]
		private Quaternion GetPlaneRotation(IKSolverFullBody solver)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0x1298160", Offset = "0x1298160", VA = "0x1298160")]
		public void Update(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0x12983A8", Offset = "0x12983A8", VA = "0x12983A8")]
		private Vector3 GetPosition(IKSolverFullBody solver, out Quaternion planeRotationOffset)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000083")]
	public class IKMapping
	{
		[Serializable]
		[Token(Token = "0x2000084")]
		public class BoneMap
		{
			[Token(Token = "0x400037B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x400037C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int chainIndex;

			[Token(Token = "0x400037D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int nodeIndex;

			[Token(Token = "0x400037E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x400037F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x4000380")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 localSwingAxis;

			[Token(Token = "0x4000381")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 localTwistAxis;

			[Token(Token = "0x4000382")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 planePosition;

			[Token(Token = "0x4000383")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 ikPosition;

			[Token(Token = "0x4000384")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion defaultLocalTargetRotation;

			[Token(Token = "0x4000385")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			private Quaternion maintainRotation;

			[Token(Token = "0x4000386")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float length;

			[Token(Token = "0x4000387")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Quaternion animatedRotation;

			[Token(Token = "0x4000388")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Transform planeBone1;

			[Token(Token = "0x4000389")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Transform planeBone2;

			[Token(Token = "0x400038A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Transform planeBone3;

			[Token(Token = "0x400038B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int plane1ChainIndex;

			[Token(Token = "0x400038C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private int plane1NodeIndex;

			[Token(Token = "0x400038D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private int plane2ChainIndex;

			[Token(Token = "0x400038E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private int plane2NodeIndex;

			[Token(Token = "0x400038F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private int plane3ChainIndex;

			[Token(Token = "0x4000390")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private int plane3NodeIndex;

			[Token(Token = "0x1700008B")]
			public Vector3 swingDirection
			{
				[Token(Token = "0x60004D1")]
				[Address(RVA = "0x12988E4", Offset = "0x12988E4", VA = "0x12988E4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700008C")]
			public bool isNodeBone
			{
				[Token(Token = "0x60004D4")]
				[Address(RVA = "0x129899C", Offset = "0x129899C", VA = "0x129899C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700008D")]
			private Quaternion lastAnimatedTargetRotation
			{
				[Token(Token = "0x60004E8")]
				[Address(RVA = "0x1298D58", Offset = "0x1298D58", VA = "0x1298D58")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x60004D0")]
			[Address(RVA = "0x12988BC", Offset = "0x12988BC", VA = "0x12988BC")]
			public void Initiate(Transform transform, IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60004D2")]
			[Address(RVA = "0x1298914", Offset = "0x1298914", VA = "0x1298914")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x60004D3")]
			[Address(RVA = "0x1298958", Offset = "0x1298958", VA = "0x1298958")]
			public void FixTransform(bool position)
			{
			}

			[Token(Token = "0x60004D5")]
			[Address(RVA = "0x12989AC", Offset = "0x12989AC", VA = "0x12989AC")]
			public void SetLength(BoneMap nextBone)
			{
			}

			[Token(Token = "0x60004D6")]
			[Address(RVA = "0x1298A80", Offset = "0x1298A80", VA = "0x1298A80")]
			public void SetLocalSwingAxis(BoneMap swingTarget)
			{
			}

			[Token(Token = "0x60004D7")]
			[Address(RVA = "0x1298A88", Offset = "0x1298A88", VA = "0x1298A88")]
			public void SetLocalSwingAxis(BoneMap bone1, BoneMap bone2)
			{
			}

			[Token(Token = "0x60004D8")]
			[Address(RVA = "0x1298B54", Offset = "0x1298B54", VA = "0x1298B54")]
			public void SetLocalTwistAxis(Vector3 twistDirection, Vector3 normalDirection)
			{
			}

			[Token(Token = "0x60004D9")]
			[Address(RVA = "0x1298BC0", Offset = "0x1298BC0", VA = "0x1298BC0")]
			public void SetPlane(IKSolverFullBody solver, Transform planeBone1, Transform planeBone2, Transform planeBone3)
			{
			}

			[Token(Token = "0x60004DA")]
			[Address(RVA = "0x1298C48", Offset = "0x1298C48", VA = "0x1298C48")]
			public void UpdatePlane(bool rotation, bool position)
			{
			}

			[Token(Token = "0x60004DB")]
			[Address(RVA = "0x1298EC0", Offset = "0x1298EC0", VA = "0x1298EC0")]
			public void SetIKPosition()
			{
			}

			[Token(Token = "0x60004DC")]
			[Address(RVA = "0x1298EEC", Offset = "0x1298EEC", VA = "0x1298EEC")]
			public void MaintainRotation()
			{
			}

			[Token(Token = "0x60004DD")]
			[Address(RVA = "0x1298F18", Offset = "0x1298F18", VA = "0x1298F18")]
			public void SetToIKPosition()
			{
			}

			[Token(Token = "0x60004DE")]
			[Address(RVA = "0x1298F40", Offset = "0x1298F40", VA = "0x1298F40")]
			public void FixToNode(IKSolverFullBody solver, float weight, [Optional] IKSolver.Node fixNode)
			{
			}

			[Token(Token = "0x60004DF")]
			[Address(RVA = "0x1299000", Offset = "0x1299000", VA = "0x1299000")]
			public Vector3 GetPlanePosition(IKSolverFullBody solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60004E0")]
			[Address(RVA = "0x1299184", Offset = "0x1299184", VA = "0x1299184")]
			public void PositionToPlane(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60004E1")]
			[Address(RVA = "0x12991A8", Offset = "0x12991A8", VA = "0x12991A8")]
			public void RotateToPlane(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x60004E2")]
			[Address(RVA = "0x12992C8", Offset = "0x12992C8", VA = "0x12992C8")]
			public void Swing(Vector3 swingTarget, float weight)
			{
			}

			[Token(Token = "0x60004E3")]
			[Address(RVA = "0x129932C", Offset = "0x129932C", VA = "0x129932C")]
			public void Swing(Vector3 pos1, Vector3 pos2, float weight)
			{
			}

			[Token(Token = "0x60004E4")]
			[Address(RVA = "0x12994AC", Offset = "0x12994AC", VA = "0x12994AC")]
			public void Twist(Vector3 twistDirection, Vector3 normalDirection, float weight)
			{
			}

			[Token(Token = "0x60004E5")]
			[Address(RVA = "0x129962C", Offset = "0x129962C", VA = "0x129962C")]
			public void RotateToMaintain(float weight)
			{
			}

			[Token(Token = "0x60004E6")]
			[Address(RVA = "0x12996A8", Offset = "0x12996A8", VA = "0x12996A8")]
			public void RotateToEffector(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x60004E7")]
			[Address(RVA = "0x1299074", Offset = "0x1299074", VA = "0x1299074")]
			private Quaternion GetTargetRotation(IKSolverFullBody solver)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60004E9")]
			[Address(RVA = "0x12997C4", Offset = "0x12997C4", VA = "0x12997C4")]
			public BoneMap()
			{
			}
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x1298658", Offset = "0x1298658", VA = "0x1298658", Slot = "4")]
		public virtual bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x1298660", Offset = "0x1298660", VA = "0x1298660", Slot = "5")]
		public virtual void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x1298664", Offset = "0x1298664", VA = "0x1298664")]
		protected bool BoneIsValid(Transform bone, IKSolver solver, ref string message, [Optional] Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x12987A0", Offset = "0x12987A0", VA = "0x12987A0")]
		protected Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0x12988B4", Offset = "0x12988B4", VA = "0x12988B4")]
		public IKMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000085")]
	public class IKMappingBone : IKMapping
	{
		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoneMap boneMap;

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x12997E0", Offset = "0x12997E0", VA = "0x12997E0", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x129987C", Offset = "0x129987C", VA = "0x129987C")]
		public IKMappingBone()
		{
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x1299900", Offset = "0x1299900", VA = "0x1299900")]
		public IKMappingBone(Transform bone)
		{
		}

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0x1299998", Offset = "0x1299998", VA = "0x1299998")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x12999B0", Offset = "0x12999B0", VA = "0x12999B0")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x12999CC", Offset = "0x12999CC", VA = "0x12999CC", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0x1299A58", Offset = "0x1299A58", VA = "0x1299A58")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0x1299A70", Offset = "0x1299A70", VA = "0x1299A70")]
		public void WritePose(float solverWeight)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000086")]
	public class IKMappingLimb : IKMapping
	{
		[Serializable]
		[Token(Token = "0x2000087")]
		public enum BoneMapType
		{
			[Token(Token = "0x40003A0")]
			Parent,
			[Token(Token = "0x40003A1")]
			Bone1,
			[Token(Token = "0x40003A2")]
			Bone2,
			[Token(Token = "0x40003A3")]
			Bone3
		}

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parentBone;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone1;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone2;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bone3;

		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float weight;

		[NonSerialized]
		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool updatePlaneRotations;

		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BoneMap boneMapParent;

		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap boneMap1;

		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap boneMap2;

		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap boneMap3;

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x1299A94", Offset = "0x1299A94", VA = "0x1299A94", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0x1299B08", Offset = "0x1299B08", VA = "0x1299B08")]
		public BoneMap GetBoneMap(BoneMapType boneMap)
		{
			return null;
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0x1299BD0", Offset = "0x1299BD0", VA = "0x1299BD0")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower)
		{
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x1299E88", Offset = "0x1299E88", VA = "0x1299E88")]
		public IKMappingLimb()
		{
		}

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0x1299FA4", Offset = "0x1299FA4", VA = "0x1299FA4")]
		public IKMappingLimb(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0x129A0EC", Offset = "0x129A0EC", VA = "0x129A0EC")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0x129A0F8", Offset = "0x129A0F8", VA = "0x129A0F8")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0x129A190", Offset = "0x129A190", VA = "0x129A190")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x129A238", Offset = "0x129A238", VA = "0x129A238", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x129A494", Offset = "0x129A494", VA = "0x129A494")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0x129A4F4", Offset = "0x129A4F4", VA = "0x129A4F4")]
		public void WritePose(IKSolverFullBody solver, bool fullBody)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000088")]
	public class IKMappingSpine : IKMapping
	{
		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] spineBones;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leftUpperArmBone;

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightUpperArmBone;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftThighBone;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightThighBone;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(1f, 3f)]
		public int iterations;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float twistWeight;

		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int rootNodeIndex;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap[] spine;

		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap leftUpperArm;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap rightUpperArm;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoneMap leftThigh;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BoneMap rightThigh;

		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useFABRIK;

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0x129A638", Offset = "0x129A638", VA = "0x129A638", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x129A958", Offset = "0x129A958", VA = "0x129A958")]
		public IKMappingSpine()
		{
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x129AA94", Offset = "0x129AA94", VA = "0x129AA94")]
		public IKMappingSpine(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0x129AC04", Offset = "0x129AC04", VA = "0x129AC04")]
		public void SetBones(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6000501")]
		[Address(RVA = "0x129AC14", Offset = "0x129AC14", VA = "0x129AC14")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0x129AC70", Offset = "0x129AC70", VA = "0x129AC70")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000503")]
		[Address(RVA = "0x129ACE8", Offset = "0x129ACE8", VA = "0x129ACE8", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0x129B2FC", Offset = "0x129B2FC", VA = "0x129B2FC")]
		private bool UseFABRIK()
		{
			return default(bool);
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0x129B334", Offset = "0x129B334", VA = "0x129B334")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0x129B598", Offset = "0x129B598", VA = "0x129B598")]
		public void WritePose(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000507")]
		[Address(RVA = "0x129B8B8", Offset = "0x129B8B8", VA = "0x129B8B8")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0x129B998", Offset = "0x129B998", VA = "0x129B998")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0x129BA4C", Offset = "0x129BA4C", VA = "0x129BA4C")]
		private void MapToSolverPositions(IKSolverFullBody solver)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000089")]
	public abstract class IKSolver
	{
		[Serializable]
		[Token(Token = "0x200008A")]
		public class Point
		{
			[Token(Token = "0x40003BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x40003BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x40003BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 solverPosition;

			[Token(Token = "0x40003BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Quaternion solverRotation;

			[Token(Token = "0x40003BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x40003C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x6000520")]
			[Address(RVA = "0x129C314", Offset = "0x129C314", VA = "0x129C314")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6000521")]
			[Address(RVA = "0x129C358", Offset = "0x129C358", VA = "0x129C358")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x6000522")]
			[Address(RVA = "0x129C438", Offset = "0x129C438", VA = "0x129C438")]
			public void UpdateSolverPosition()
			{
			}

			[Token(Token = "0x6000523")]
			[Address(RVA = "0x129C464", Offset = "0x129C464", VA = "0x129C464")]
			public void UpdateSolverLocalPosition()
			{
			}

			[Token(Token = "0x6000524")]
			[Address(RVA = "0x129C490", Offset = "0x129C490", VA = "0x129C490")]
			public void UpdateSolverState()
			{
			}

			[Token(Token = "0x6000525")]
			[Address(RVA = "0x129C4D4", Offset = "0x129C4D4", VA = "0x129C4D4")]
			public void UpdateSolverLocalState()
			{
			}

			[Token(Token = "0x6000526")]
			[Address(RVA = "0x129C518", Offset = "0x129C518", VA = "0x129C518")]
			public Point()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200008B")]
		public class Bone : Point
		{
			[Token(Token = "0x40003C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x40003C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float sqrMag;

			[Token(Token = "0x40003C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 axis;

			[Token(Token = "0x40003C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private RotationLimit _rotationLimit;

			[Token(Token = "0x40003C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool isLimited;

			[Token(Token = "0x1700008F")]
			public RotationLimit rotationLimit
			{
				[Token(Token = "0x6000527")]
				[Address(RVA = "0x129C578", Offset = "0x129C578", VA = "0x129C578")]
				get
				{
					return null;
				}
				[Token(Token = "0x6000528")]
				[Address(RVA = "0x129C658", Offset = "0x129C658", VA = "0x129C658")]
				set
				{
				}
			}

			[Token(Token = "0x6000529")]
			[Address(RVA = "0x129C6D0", Offset = "0x129C6D0", VA = "0x129C6D0")]
			public void Swing(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x600052A")]
			[Address(RVA = "0x129C93C", Offset = "0x129C93C", VA = "0x129C93C")]
			public static void SolverSwing(Bone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x600052B")]
			[Address(RVA = "0x129CBF8", Offset = "0x129CBF8", VA = "0x129CBF8")]
			public void Swing2D(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x600052C")]
			[Address(RVA = "0x129CDEC", Offset = "0x129CDEC", VA = "0x129CDEC")]
			public void SetToSolverPosition()
			{
			}

			[Token(Token = "0x600052D")]
			[Address(RVA = "0x129CE14", Offset = "0x129CE14", VA = "0x129CE14")]
			public Bone()
			{
			}

			[Token(Token = "0x600052E")]
			[Address(RVA = "0x129CE80", Offset = "0x129CE80", VA = "0x129CE80")]
			public Bone(Transform transform)
			{
			}

			[Token(Token = "0x600052F")]
			[Address(RVA = "0x129CEF8", Offset = "0x129CEF8", VA = "0x129CEF8")]
			public Bone(Transform transform, float weight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200008C")]
		public class Node : Point
		{
			[Token(Token = "0x40003C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x40003C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float effectorPositionWeight;

			[Token(Token = "0x40003C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float effectorRotationWeight;

			[Token(Token = "0x40003C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 offset;

			[Token(Token = "0x6000530")]
			[Address(RVA = "0x129CF80", Offset = "0x129CF80", VA = "0x129CF80")]
			public Node()
			{
			}

			[Token(Token = "0x6000531")]
			[Address(RVA = "0x129349C", Offset = "0x129349C", VA = "0x129349C")]
			public Node(Transform transform)
			{
			}

			[Token(Token = "0x6000532")]
			[Address(RVA = "0x129CF84", Offset = "0x129CF84", VA = "0x129CF84")]
			public Node(Transform transform, float weight)
			{
			}
		}

		[Token(Token = "0x200008D")]
		public delegate void UpdateDelegate();

		[Token(Token = "0x200008E")]
		public delegate void IterationDelegate(int i);

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public Vector3 IKPosition;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		[Tooltip("The positional or the master weight of the solver.")]
		public float IKPositionWeight;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateDelegate OnPreInitiate;

		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UpdateDelegate OnPostInitiate;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UpdateDelegate OnPreUpdate;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UpdateDelegate OnPostUpdate;

		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool firstInitiation;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		[SerializeField]
		protected Transform root;

		[Token(Token = "0x1700008E")]
		public bool initiated
		{
			[Token(Token = "0x6000513")]
			[Address(RVA = "0x129BF20", Offset = "0x129BF20", VA = "0x129BF20")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000514")]
			[Address(RVA = "0x129BF28", Offset = "0x129BF28", VA = "0x129BF28")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0x129BC88", Offset = "0x129BC88", VA = "0x129BC88")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x600050B")]
		public abstract bool IsValid(ref string message);

		[Token(Token = "0x600050C")]
		[Address(RVA = "0x129BCFC", Offset = "0x129BCFC", VA = "0x129BCFC")]
		public void Initiate(Transform root)
		{
		}

		[Token(Token = "0x600050D")]
		[Address(RVA = "0x129BE6C", Offset = "0x129BE6C", VA = "0x129BE6C")]
		public void Update()
		{
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0x129BEDC", Offset = "0x129BEDC", VA = "0x129BEDC", Slot = "5")]
		public virtual Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0x129BEE8", Offset = "0x129BEE8", VA = "0x129BEE8")]
		public void SetIKPosition(Vector3 position)
		{
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0x129BEF4", Offset = "0x129BEF4", VA = "0x129BEF4")]
		public float GetIKPositionWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x129BEFC", Offset = "0x129BEFC", VA = "0x129BEFC")]
		public void SetIKPositionWeight(float weight)
		{
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0x129BF18", Offset = "0x129BF18", VA = "0x129BF18")]
		public Transform GetRoot()
		{
			return null;
		}

		[Token(Token = "0x6000515")]
		public abstract Point[] GetPoints();

		[Token(Token = "0x6000516")]
		public abstract Point GetPoint(Transform transform);

		[Token(Token = "0x6000517")]
		public abstract void FixTransforms();

		[Token(Token = "0x6000518")]
		public abstract void StoreDefaultLocalState();

		[Token(Token = "0x6000519")]
		protected abstract void OnInitiate();

		[Token(Token = "0x600051A")]
		protected abstract void OnUpdate();

		[Token(Token = "0x600051B")]
		[Address(RVA = "0x129BF34", Offset = "0x129BF34", VA = "0x129BF34")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x600051C")]
		[Address(RVA = "0x129BF4C", Offset = "0x129BF4C", VA = "0x129BF4C")]
		public static Transform ContainsDuplicateBone(Bone[] bones)
		{
			return null;
		}

		[Token(Token = "0x600051D")]
		[Address(RVA = "0x129C070", Offset = "0x129C070", VA = "0x129C070")]
		public static bool HierarchyIsValid(Bone[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x600051E")]
		[Address(RVA = "0x129C108", Offset = "0x129C108", VA = "0x129C108")]
		protected static float PreSolveBones(ref Bone[] bones)
		{
			return default(float);
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0x129C2FC", Offset = "0x129C2FC", VA = "0x129C2FC")]
		protected IKSolver()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008F")]
	public class IKSolverAim : IKSolverHeuristic
	{
		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform transform;

		[Token(Token = "0x40003CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 axis;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Vector3 poleAxis;

		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Vector3 polePosition;

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float poleWeight;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform poleTarget;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Range(0f, 1f)]
		public float clampWeight;

		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float step;

		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 clampedIKPosition;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RotationLimit transformLimit;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform lastTransform;

		[Token(Token = "0x17000090")]
		public Vector3 transformAxis
		{
			[Token(Token = "0x600053C")]
			[Address(RVA = "0x129D354", Offset = "0x129D354", VA = "0x129D354")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000091")]
		public Vector3 transformPoleAxis
		{
			[Token(Token = "0x600053D")]
			[Address(RVA = "0x129D384", Offset = "0x129D384", VA = "0x129D384")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000092")]
		protected override int minBones
		{
			[Token(Token = "0x6000540")]
			[Address(RVA = "0x129DFB8", Offset = "0x129DFB8", VA = "0x129DFB8", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000093")]
		protected override Vector3 localDirection
		{
			[Token(Token = "0x6000544")]
			[Address(RVA = "0x129E4F8", Offset = "0x129E4F8", VA = "0x129E4F8", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0x129D21C", Offset = "0x129D21C", VA = "0x129D21C")]
		public float GetAngle()
		{
			return default(float);
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0x129D3B4", Offset = "0x129D3B4", VA = "0x129D3B4", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0x129D640", Offset = "0x129D640", VA = "0x129D640", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0x129DF10", Offset = "0x129DF10", VA = "0x129DF10")]
		private void Solve()
		{
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0x129DBAC", Offset = "0x129DBAC", VA = "0x129DBAC")]
		private Vector3 GetClampedIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0x129DFC0", Offset = "0x129DFC0", VA = "0x129DFC0")]
		private void RotateToTarget(Vector3 targetPosition, Bone bone, float weight)
		{
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0x129E558", Offset = "0x129E558", VA = "0x129E558")]
		public IKSolverAim()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000090")]
	public class IKSolverArm : IKSolver
	{
		[Token(Token = "0x40003D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point chest;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point shoulder;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point upperArm;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point forearm;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point hand;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool isLeft;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IKSolverVR.Arm arm;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3[] positions;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion[] rotations;

		[Token(Token = "0x6000546")]
		[Address(RVA = "0x129E5FC", Offset = "0x129E5FC", VA = "0x129E5FC", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0x129E958", Offset = "0x129E958", VA = "0x129E958")]
		public bool SetChain(Transform chest, Transform shoulder, Transform upperArm, Transform forearm, Transform hand, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0x129E9B8", Offset = "0x129E9B8", VA = "0x129E9B8", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x129EAFC", Offset = "0x129EAFC", VA = "0x129EAFC", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0x129EC5C", Offset = "0x129EC5C", VA = "0x129EC5C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0x129EC9C", Offset = "0x129EC9C", VA = "0x129EC9C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0x129ECEC", Offset = "0x129ECEC", VA = "0x129ECEC", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0x129F04C", Offset = "0x129F04C", VA = "0x129F04C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0x129F06C", Offset = "0x129F06C", VA = "0x129F06C")]
		private void Solve()
		{
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0x129ED44", Offset = "0x129ED44", VA = "0x129ED44")]
		private void Read()
		{
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0x129F0CC", Offset = "0x129F0CC", VA = "0x129F0CC")]
		private void Write()
		{
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x129F244", Offset = "0x129F244", VA = "0x129F244")]
		public IKSolverArm()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000091")]
	public class IKSolverCCD : IKSolverHeuristic
	{
		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x6000552")]
		[Address(RVA = "0x129F3D8", Offset = "0x129F3D8", VA = "0x129F3D8")]
		public void FadeOutBoneWeights()
		{
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0x129F448", Offset = "0x129F448", VA = "0x129F448", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0x129F4B8", Offset = "0x129F4B8", VA = "0x129F4B8", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0x129F76C", Offset = "0x129F76C", VA = "0x129F76C")]
		protected void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000556")]
		[Address(RVA = "0x129FDFC", Offset = "0x129FDFC", VA = "0x129FDFC")]
		public IKSolverCCD()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000092")]
	public class IKSolverFABRIK : IKSolverHeuristic
	{
		[Token(Token = "0x40003E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool[] limitedBones;

		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] solverLocalPositions;

		[Token(Token = "0x17000094")]
		protected override bool boneLengthCanBeZero
		{
			[Token(Token = "0x600055C")]
			[Address(RVA = "0x12A0DA4", Offset = "0x12A0DA4", VA = "0x12A0DA4", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000557")]
		[Address(RVA = "0x129FE04", Offset = "0x129FE04", VA = "0x129FE04")]
		public void SolveForward(Vector3 position)
		{
		}

		[Token(Token = "0x6000558")]
		[Address(RVA = "0x12A03E4", Offset = "0x12A03E4", VA = "0x12A03E4")]
		public void SolveBackward(Vector3 position)
		{
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0x12A0514", Offset = "0x12A0514", VA = "0x12A0514", Slot = "5")]
		public override Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0x12A059C", Offset = "0x12A059C", VA = "0x12A059C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0x12A0A98", Offset = "0x12A0A98", VA = "0x12A0A98", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0x12A0DAC", Offset = "0x12A0DAC", VA = "0x12A0DAC")]
		private Vector3 SolveJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0x129FEDC", Offset = "0x129FEDC", VA = "0x129FEDC")]
		private void OnPreSolve()
		{
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x12A04CC", Offset = "0x12A04CC", VA = "0x12A04CC")]
		private void OnPostSolve()
		{
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x12A0D5C", Offset = "0x12A0D5C", VA = "0x12A0D5C")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x12A0278", Offset = "0x12A0278", VA = "0x12A0278")]
		private void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x12A1458", Offset = "0x12A1458", VA = "0x12A1458")]
		private void SolverMove(int index, Vector3 offset)
		{
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0x12A14C0", Offset = "0x12A14C0", VA = "0x12A14C0")]
		private void SolverRotate(int index, Quaternion rotation, bool recursive)
		{
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0x12A1590", Offset = "0x12A1590", VA = "0x12A1590")]
		private void SolverRotateChildren(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0x12A1658", Offset = "0x12A1658", VA = "0x12A1658")]
		private void SolverMoveChildrenAroundPoint(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000566")]
		[Address(RVA = "0x12A0810", Offset = "0x12A0810", VA = "0x12A0810")]
		private Quaternion GetParentSolverRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0x12A0954", Offset = "0x12A0954", VA = "0x12A0954")]
		private Vector3 GetParentSolverPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x12A1748", Offset = "0x12A1748", VA = "0x12A1748")]
		private Quaternion GetLimitedRotation(int index, Quaternion q, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x12A1048", Offset = "0x12A1048", VA = "0x12A1048")]
		private void LimitForward(int rotateBone, int limitBone)
		{
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x12A04BC", Offset = "0x12A04BC", VA = "0x12A04BC")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x12A1DB8", Offset = "0x12A1DB8", VA = "0x12A1DB8")]
		private void BackwardReachUnlimited(Vector3 position)
		{
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0x12A1908", Offset = "0x12A1908", VA = "0x12A1908")]
		private void BackwardReachLimited(Vector3 position)
		{
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0x12A0EC8", Offset = "0x12A0EC8", VA = "0x12A0EC8")]
		private void MapToSolverPositions()
		{
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0x12A0F98", Offset = "0x12A0F98", VA = "0x12A0F98")]
		private void MapToSolverPositionsLimited()
		{
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0x12A1E70", Offset = "0x12A1E70", VA = "0x12A1E70")]
		public IKSolverFABRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000093")]
	public class IKSolverFABRIKRoot : IKSolver
	{
		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int iterations;

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float rootPin;

		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FABRIKChain[] chains;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool zeroWeightApplied;

		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] isRoot;

		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 rootDefaultPosition;

		[Token(Token = "0x6000570")]
		[Address(RVA = "0x12A1EF4", Offset = "0x12A1EF4", VA = "0x12A1EF4", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0x12A2548", Offset = "0x12A2548", VA = "0x12A2548", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x12A25D4", Offset = "0x12A25D4", VA = "0x12A25D4", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x12A2668", Offset = "0x12A2668", VA = "0x12A2668", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x12A2750", Offset = "0x12A2750", VA = "0x12A2750")]
		private bool IsRoot(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0x12A27E0", Offset = "0x12A27E0", VA = "0x12A27E0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0x12A2BE0", Offset = "0x12A2BE0", VA = "0x12A2BE0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x12A2DB8", Offset = "0x12A2DB8", VA = "0x12A2DB8", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x12A2C80", Offset = "0x12A2C80", VA = "0x12A2C80")]
		private void AddPointsToArray(ref Point[] array, FABRIKChain chain)
		{
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x12A29B8", Offset = "0x12A29B8", VA = "0x12A29B8")]
		private Vector3 GetCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x12A2E3C", Offset = "0x12A2E3C", VA = "0x12A2E3C")]
		public IKSolverFABRIKRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000094")]
	public class IKSolverFullBody : IKSolver
	{
		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 10f)]
		public int iterations;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FBIKChain[] chain;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IKEffector[] effectors;

		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public IKMappingSpine spineMapping;

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IKMappingBone[] boneMappings;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IKMappingLimb[] limbMappings;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool FABRIKPass;

		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UpdateDelegate OnPreRead;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UpdateDelegate OnPreSolve;

		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public IterationDelegate OnPostIteration;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UpdateDelegate OnPreBend;

		[Token(Token = "0x40003F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UpdateDelegate OnPostSolve;

		[Token(Token = "0x40003F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UpdateDelegate OnStoreDefaultLocalState;

		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UpdateDelegate OnFixTransforms;

		[Token(Token = "0x600057B")]
		[Address(RVA = "0x12A2EAC", Offset = "0x12A2EAC", VA = "0x12A2EAC")]
		public IKEffector GetEffector(Transform t)
		{
			return null;
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0x12A2F88", Offset = "0x12A2F88", VA = "0x12A2F88")]
		public FBIKChain GetChain(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x129607C", Offset = "0x129607C", VA = "0x129607C")]
		public int GetChainIndex(Transform transform)
		{
			return default(int);
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x1296CCC", Offset = "0x1296CCC", VA = "0x1296CCC")]
		public Node GetNode(int chainIndex, int nodeIndex)
		{
			return null;
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x1296408", Offset = "0x1296408", VA = "0x1296408")]
		public void GetChainAndNodeIndexes(Transform transform, out int chainIndex, out int nodeIndex)
		{
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x12A2FD0", Offset = "0x12A2FD0", VA = "0x12A2FD0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0x12A3168", Offset = "0x12A3168", VA = "0x12A3168", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0x12A32C4", Offset = "0x12A32C4", VA = "0x12A32C4", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0x12A34BC", Offset = "0x12A34BC", VA = "0x12A34BC", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0x12A358C", Offset = "0x12A358C", VA = "0x12A358C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0x12A3668", Offset = "0x12A3668", VA = "0x12A3668", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0x12A37C0", Offset = "0x12A37C0", VA = "0x12A37C0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0x12A3958", Offset = "0x12A3958", VA = "0x12A3958", Slot = "12")]
		protected virtual void ReadPose()
		{
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0x12A3B7C", Offset = "0x12A3B7C", VA = "0x12A3B7C", Slot = "13")]
		protected virtual void Solve()
		{
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0x12A3E38", Offset = "0x12A3E38", VA = "0x12A3E38", Slot = "14")]
		protected virtual void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0x12A3E6C", Offset = "0x12A3E6C", VA = "0x12A3E6C", Slot = "15")]
		protected virtual void WritePose()
		{
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0x12A3F44", Offset = "0x12A3F44", VA = "0x12A3F44")]
		public IKSolverFullBody()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000095")]
	public enum FullBodyBipedEffector
	{
		[Token(Token = "0x40003FC")]
		Body,
		[Token(Token = "0x40003FD")]
		LeftShoulder,
		[Token(Token = "0x40003FE")]
		RightShoulder,
		[Token(Token = "0x40003FF")]
		LeftThigh,
		[Token(Token = "0x4000400")]
		RightThigh,
		[Token(Token = "0x4000401")]
		LeftHand,
		[Token(Token = "0x4000402")]
		RightHand,
		[Token(Token = "0x4000403")]
		LeftFoot,
		[Token(Token = "0x4000404")]
		RightFoot
	}
	[Serializable]
	[Token(Token = "0x2000096")]
	public enum FullBodyBipedChain
	{
		[Token(Token = "0x4000406")]
		LeftArm,
		[Token(Token = "0x4000407")]
		RightArm,
		[Token(Token = "0x4000408")]
		LeftLeg,
		[Token(Token = "0x4000409")]
		RightLeg
	}
	[Serializable]
	[Token(Token = "0x2000097")]
	public class IKSolverFullBodyBiped : IKSolverFullBody
	{
		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform rootNode;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Range(0f, 1f)]
		public float spineStiffness;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Range(-1f, 1f)]
		public float pullBodyVertical;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Range(-1f, 1f)]
		public float pullBodyHorizontal;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 offset;

		[Token(Token = "0x17000095")]
		public IKEffector bodyEffector
		{
			[Token(Token = "0x600058C")]
			[Address(RVA = "0x12A405C", Offset = "0x12A405C", VA = "0x12A405C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000096")]
		public IKEffector leftShoulderEffector
		{
			[Token(Token = "0x600058D")]
			[Address(RVA = "0x12A419C", Offset = "0x12A419C", VA = "0x12A419C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000097")]
		public IKEffector rightShoulderEffector
		{
			[Token(Token = "0x600058E")]
			[Address(RVA = "0x12A41A4", Offset = "0x12A41A4", VA = "0x12A41A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000098")]
		public IKEffector leftThighEffector
		{
			[Token(Token = "0x600058F")]
			[Address(RVA = "0x12A41AC", Offset = "0x12A41AC", VA = "0x12A41AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000099")]
		public IKEffector rightThighEffector
		{
			[Token(Token = "0x6000590")]
			[Address(RVA = "0x12A41B4", Offset = "0x12A41B4", VA = "0x12A41B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009A")]
		public IKEffector leftHandEffector
		{
			[Token(Token = "0x6000591")]
			[Address(RVA = "0x12A41BC", Offset = "0x12A41BC", VA = "0x12A41BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009B")]
		public IKEffector rightHandEffector
		{
			[Token(Token = "0x6000592")]
			[Address(RVA = "0x12A41C4", Offset = "0x12A41C4", VA = "0x12A41C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009C")]
		public IKEffector leftFootEffector
		{
			[Token(Token = "0x6000593")]
			[Address(RVA = "0x12A41CC", Offset = "0x12A41CC", VA = "0x12A41CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009D")]
		public IKEffector rightFootEffector
		{
			[Token(Token = "0x6000594")]
			[Address(RVA = "0x12A41D4", Offset = "0x12A41D4", VA = "0x12A41D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009E")]
		public FBIKChain leftArmChain
		{
			[Token(Token = "0x6000595")]
			[Address(RVA = "0x12A41DC", Offset = "0x12A41DC", VA = "0x12A41DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009F")]
		public FBIKChain rightArmChain
		{
			[Token(Token = "0x6000596")]
			[Address(RVA = "0x12A4208", Offset = "0x12A4208", VA = "0x12A4208")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A0")]
		public FBIKChain leftLegChain
		{
			[Token(Token = "0x6000597")]
			[Address(RVA = "0x12A4234", Offset = "0x12A4234", VA = "0x12A4234")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A1")]
		public FBIKChain rightLegChain
		{
			[Token(Token = "0x6000598")]
			[Address(RVA = "0x12A4260", Offset = "0x12A4260", VA = "0x12A4260")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A2")]
		public IKMappingLimb leftArmMapping
		{
			[Token(Token = "0x6000599")]
			[Address(RVA = "0x12A428C", Offset = "0x12A428C", VA = "0x12A428C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A3")]
		public IKMappingLimb rightArmMapping
		{
			[Token(Token = "0x600059A")]
			[Address(RVA = "0x12A42B4", Offset = "0x12A42B4", VA = "0x12A42B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A4")]
		public IKMappingLimb leftLegMapping
		{
			[Token(Token = "0x600059B")]
			[Address(RVA = "0x12A42E0", Offset = "0x12A42E0", VA = "0x12A42E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A5")]
		public IKMappingLimb rightLegMapping
		{
			[Token(Token = "0x600059C")]
			[Address(RVA = "0x12A430C", Offset = "0x12A430C", VA = "0x12A430C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A6")]
		public IKMappingBone headMapping
		{
			[Token(Token = "0x600059D")]
			[Address(RVA = "0x12A4338", Offset = "0x12A4338", VA = "0x12A4338")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A7")]
		public Vector3 pullBodyOffset
		{
			[Token(Token = "0x60005AD")]
			[Address(RVA = "0x12A612C", Offset = "0x12A612C", VA = "0x12A612C")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60005AE")]
			[Address(RVA = "0x12A6138", Offset = "0x12A6138", VA = "0x12A6138")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x12A4360", Offset = "0x12A4360", VA = "0x12A4360")]
		public void SetChainWeights(FullBodyBipedChain c, float pull, float reach = 0f)
		{
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0x12A4460", Offset = "0x12A4460", VA = "0x12A4460")]
		public void SetEffectorWeights(FullBodyBipedEffector effector, float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x12A43B0", Offset = "0x12A43B0", VA = "0x12A43B0")]
		public FBIKChain GetChain(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0x12A44D8", Offset = "0x12A44D8", VA = "0x12A44D8")]
		public FBIKChain GetChain(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0x12A4064", Offset = "0x12A4064", VA = "0x12A4064")]
		public IKEffector GetEffector(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x12A45A0", Offset = "0x12A45A0", VA = "0x12A45A0")]
		public IKEffector GetEndEffector(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x12A4650", Offset = "0x12A4650", VA = "0x12A4650")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x12A46FC", Offset = "0x12A46FC", VA = "0x12A46FC")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x12A47A8", Offset = "0x12A47A8", VA = "0x12A47A8")]
		public IKMappingSpine GetSpineMapping()
		{
			return null;
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x12A47B0", Offset = "0x12A47B0", VA = "0x12A47B0")]
		public IKMappingBone GetHeadMapping()
		{
			return null;
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x12A47D8", Offset = "0x12A47D8", VA = "0x12A47D8")]
		public IKConstraintBend GetBendConstraint(FullBodyBipedChain limb)
		{
			return null;
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x12A4898", Offset = "0x12A4898", VA = "0x12A4898", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x12A4A2C", Offset = "0x12A4A2C", VA = "0x12A4A2C")]
		public void SetToReferences(BipedReferences references, [Optional] Transform rootNode)
		{
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x12A5A24", Offset = "0x12A5A24", VA = "0x12A5A24")]
		public static Transform DetectRootNodeBone(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x12A5FD4", Offset = "0x12A5FD4", VA = "0x12A5FD4")]
		public void SetLimbOrientations(BipedLimbOrientations o)
		{
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x12A6030", Offset = "0x12A6030", VA = "0x12A6030")]
		private void SetLimbOrientation(FullBodyBipedChain chain, BipedLimbOrientations.LimbOrientation limbOrientation)
		{
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x12A5E74", Offset = "0x12A5E74", VA = "0x12A5E74")]
		private static Transform GetLeftClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x12A5F24", Offset = "0x12A5F24", VA = "0x12A5F24")]
		private static Transform GetRightClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x12A6144", Offset = "0x12A6144", VA = "0x12A6144")]
		private static bool Contains(Transform[] array, Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x12A6208", Offset = "0x12A6208", VA = "0x12A6208", Slot = "12")]
		protected override void ReadPose()
		{
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x12A62DC", Offset = "0x12A62DC", VA = "0x12A62DC")]
		private void PullBody()
		{
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x12A63F8", Offset = "0x12A63F8", VA = "0x12A63F8")]
		private Vector3 GetBodyOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x12A6588", Offset = "0x12A6588", VA = "0x12A6588")]
		private Vector3 GetHandBodyPull(IKEffector effector, FBIKChain arm, Vector3 offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x12A6700", Offset = "0x12A6700", VA = "0x12A6700", Slot = "14")]
		protected override void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x12A6964", Offset = "0x12A6964", VA = "0x12A6964", Slot = "15")]
		protected override void WritePose()
		{
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x12A69E0", Offset = "0x12A69E0", VA = "0x12A69E0")]
		public IKSolverFullBodyBiped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000098")]
	public class IKSolverHeuristic : IKSolver
	{
		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float tolerance;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maxIterations;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useRotationLimits;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool XY;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Bone[] bones;

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 lastLocalDirection;

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float chainLength;

		[Token(Token = "0x170000A8")]
		protected virtual int minBones
		{
			[Token(Token = "0x60005C1")]
			[Address(RVA = "0x12A7224", Offset = "0x12A7224", VA = "0x12A7224", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A9")]
		protected virtual bool boneLengthCanBeZero
		{
			[Token(Token = "0x60005C2")]
			[Address(RVA = "0x12A722C", Offset = "0x12A722C", VA = "0x12A722C", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AA")]
		protected virtual bool allowCommonParent
		{
			[Token(Token = "0x60005C3")]
			[Address(RVA = "0x12A7234", Offset = "0x12A7234", VA = "0x12A7234", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AB")]
		protected virtual Vector3 localDirection
		{
			[Token(Token = "0x60005C7")]
			[Address(RVA = "0x12A76D8", Offset = "0x12A76D8", VA = "0x12A76D8", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000AC")]
		protected float positionOffset
		{
			[Token(Token = "0x60005C8")]
			[Address(RVA = "0x12A7794", Offset = "0x12A7794", VA = "0x12A7794")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x12A69F0", Offset = "0x12A69F0", VA = "0x12A69F0")]
		public bool SetChain(Transform[] hierarchy, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x12A6B74", Offset = "0x12A6B74", VA = "0x12A6B74")]
		public void AddBone(Transform bone)
		{
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x12A6CA0", Offset = "0x12A6CA0", VA = "0x12A6CA0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x12A6D00", Offset = "0x12A6D00", VA = "0x12A6D00", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x12A6D74", Offset = "0x12A6D74", VA = "0x12A6D74", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x12A7140", Offset = "0x12A7140", VA = "0x12A7140", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x12A7148", Offset = "0x12A7148", VA = "0x12A7148", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x12A723C", Offset = "0x12A723C", VA = "0x12A723C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x12A7240", Offset = "0x12A7240", VA = "0x12A7240", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x12A7244", Offset = "0x12A7244", VA = "0x12A7244")]
		protected void InitiateBones()
		{
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x12A77DC", Offset = "0x12A77DC", VA = "0x12A77DC")]
		protected Vector3 GetSingularityOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x12A7B94", Offset = "0x12A7B94", VA = "0x12A7B94")]
		private bool SingularityDetected()
		{
			return default(bool);
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x12A7E28", Offset = "0x12A7E28", VA = "0x12A7E28")]
		public IKSolverHeuristic()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000099")]
	public class IKSolverLeg : IKSolver
	{
		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point pelvis;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point thigh;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point calf;

		[Token(Token = "0x400041D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point foot;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point toe;

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IKSolverVR.Leg leg;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 heelOffset;

		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] positions;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion[] rotations;

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x12A7E90", Offset = "0x12A7E90", VA = "0x12A7E90", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x12A81EC", Offset = "0x12A81EC", VA = "0x12A81EC")]
		public bool SetChain(Transform pelvis, Transform thigh, Transform calf, Transform foot, Transform toe, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x12A8250", Offset = "0x12A8250", VA = "0x12A8250", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x12A8394", Offset = "0x12A8394", VA = "0x12A8394", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x12A84F4", Offset = "0x12A84F4", VA = "0x12A84F4", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x12A8544", Offset = "0x12A8544", VA = "0x12A8544", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x12A85A4", Offset = "0x12A85A4", VA = "0x12A85A4", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x12A8900", Offset = "0x12A8900", VA = "0x12A8900", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x12A8920", Offset = "0x12A8920", VA = "0x12A8920")]
		private void Solve()
		{
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x12A85FC", Offset = "0x12A85FC", VA = "0x12A85FC")]
		private void Read()
		{
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x12A89A8", Offset = "0x12A89A8", VA = "0x12A89A8")]
		private void Write()
		{
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x12A8BE0", Offset = "0x12A8BE0", VA = "0x12A8BE0")]
		public IKSolverLeg()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009A")]
	public class IKSolverLimb : IKSolverTrigonometric
	{
		[Serializable]
		[Token(Token = "0x200009B")]
		public enum BendModifier
		{
			[Token(Token = "0x4000434")]
			Animation,
			[Token(Token = "0x4000435")]
			Target,
			[Token(Token = "0x4000436")]
			Parent,
			[Token(Token = "0x4000437")]
			Arm,
			[Token(Token = "0x4000438")]
			Goal
		}

		[Serializable]
		[Token(Token = "0x200009C")]
		public struct AxisDirection
		{
			[Token(Token = "0x4000439")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 direction;

			[Token(Token = "0x400043A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 axis;

			[Token(Token = "0x400043B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float dot;

			[Token(Token = "0x60005E2")]
			[Address(RVA = "0x12AA164", Offset = "0x12AA164", VA = "0x12AA164")]
			public AxisDirection(Vector3 direction, Vector3 axis)
			{
			}
		}

		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AvatarIKGoal goal;

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public BendModifier bendModifier;

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float bendModifierWeight;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform bendGoal;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool maintainBendFor1Frame;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool maintainRotationFor1Frame;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion defaultRootRotation;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion parentDefaultRotation;

		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion bone3RotationBeforeSolve;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion maintainRotation;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Quaternion bone3DefaultRotation;

		[Token(Token = "0x400042F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 _bendNormal;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 animationNormal;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AxisDirection[] axisDirectionsLeft;

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AxisDirection[] axisDirectionsRight;

		[Token(Token = "0x170000AD")]
		private AxisDirection[] axisDirections
		{
			[Token(Token = "0x60005DF")]
			[Address(RVA = "0x12AA148", Offset = "0x12AA148", VA = "0x12AA148")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x12A8D78", Offset = "0x12A8D78", VA = "0x12A8D78")]
		public void MaintainRotation()
		{
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x12A8DBC", Offset = "0x12A8DBC", VA = "0x12A8DBC")]
		public void MaintainBend()
		{
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x12A8E28", Offset = "0x12A8E28", VA = "0x12A8E28", Slot = "12")]
		protected override void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x12A9370", Offset = "0x12A9370", VA = "0x12A9370", Slot = "13")]
		protected override void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x12A9E8C", Offset = "0x12A9E8C", VA = "0x12A9E8C", Slot = "14")]
		protected override void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x12A9F34", Offset = "0x12A9F34", VA = "0x12A9F34")]
		public IKSolverLimb()
		{
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x12AA0C8", Offset = "0x12AA0C8", VA = "0x12AA0C8")]
		public IKSolverLimb(AvatarIKGoal goal)
		{
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x12A9184", Offset = "0x12A9184", VA = "0x12A9184")]
		private void StoreAxisDirections(ref AxisDirection[] axisDirections)
		{
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x12A942C", Offset = "0x12A942C", VA = "0x12A942C")]
		private Vector3 GetModifiedBendNormal()
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x200009D")]
	public class IKSolverLookAt : IKSolver
	{
		[Serializable]
		[Token(Token = "0x200009E")]
		public class LookAtBone : Bone
		{
			[Token(Token = "0x400044C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public Vector3 baseForwardOffsetEuler;

			[Token(Token = "0x170000B4")]
			public Vector3 forward
			{
				[Token(Token = "0x6000601")]
				[Address(RVA = "0x12ABF20", Offset = "0x12ABF20", VA = "0x12ABF20")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x60005FD")]
			[Address(RVA = "0x12AC578", Offset = "0x12AC578", VA = "0x12AC578")]
			public LookAtBone()
			{
			}

			[Token(Token = "0x60005FE")]
			[Address(RVA = "0x12AB080", Offset = "0x12AB080", VA = "0x12AB080")]
			public LookAtBone(Transform transform)
			{
			}

			[Token(Token = "0x60005FF")]
			[Address(RVA = "0x12AB330", Offset = "0x12AB330", VA = "0x12AB330")]
			public void Initiate(Transform root)
			{
			}

			[Token(Token = "0x6000600")]
			[Address(RVA = "0x12AC268", Offset = "0x12AC268", VA = "0x12AC268")]
			public void LookAt(Vector3 direction, float weight)
			{
			}
		}

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LookAtBone[] spine;

		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LookAtBone head;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LookAtBone[] eyes;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Range(0f, 1f)]
		public float bodyWeight;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Range(0f, 1f)]
		public float headWeight;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float eyesWeight;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float clampWeight;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Range(0f, 1f)]
		public float clampWeightHead;

		[Token(Token = "0x4000445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Range(0f, 1f)]
		public float clampWeightEyes;

		[Token(Token = "0x4000446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve spineWeightCurve;

		[Token(Token = "0x4000448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 spineTargetOffset;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Vector3[] spineForwards;

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Vector3[] headForwards;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Vector3[] eyeForward;

		[Token(Token = "0x170000AE")]
		protected bool spineIsValid
		{
			[Token(Token = "0x60005F1")]
			[Address(RVA = "0x12AA884", Offset = "0x12AA884", VA = "0x12AA884")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AF")]
		protected bool spineIsEmpty
		{
			[Token(Token = "0x60005F2")]
			[Address(RVA = "0x12AAA2C", Offset = "0x12AAA2C", VA = "0x12AAA2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B0")]
		protected bool headIsValid
		{
			[Token(Token = "0x60005F4")]
			[Address(RVA = "0x12AA950", Offset = "0x12AA950", VA = "0x12AA950")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B1")]
		protected bool headIsEmpty
		{
			[Token(Token = "0x60005F5")]
			[Address(RVA = "0x12AAA50", Offset = "0x12AAA50", VA = "0x12AAA50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B2")]
		protected bool eyesIsValid
		{
			[Token(Token = "0x60005F7")]
			[Address(RVA = "0x12AA960", Offset = "0x12AA960", VA = "0x12AA960")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B3")]
		protected bool eyesIsEmpty
		{
			[Token(Token = "0x60005F8")]
			[Address(RVA = "0x12AAABC", Offset = "0x12AAABC", VA = "0x12AAABC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x12AA300", Offset = "0x12AA300", VA = "0x12AA300")]
		public void SetLookAtWeight(float weight)
		{
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x12AA31C", Offset = "0x12AA31C", VA = "0x12AA31C")]
		public void SetLookAtWeight(float weight, float bodyWeight)
		{
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x12AA348", Offset = "0x12AA348", VA = "0x12AA348")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
		{
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x12AA380", Offset = "0x12AA380", VA = "0x12AA380")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
		{
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x12AA3C8", Offset = "0x12AA3C8", VA = "0x12AA3C8")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
		{
		}

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x12AA420", Offset = "0x12AA420", VA = "0x12AA420")]
		public void SetLookAtWeight(float weight, float bodyWeight = 0f, float headWeight = 1f, float eyesWeight = 0.5f, float clampWeight = 0.5f, float clampWeightHead = 0.5f, float clampWeightEyes = 0.3f)
		{
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x12AA490", Offset = "0x12AA490", VA = "0x12AA490", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x12AA5A8", Offset = "0x12AA5A8", VA = "0x12AA5A8", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x12AA6D4", Offset = "0x12AA6D4", VA = "0x12AA6D4", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x12AAAE0", Offset = "0x12AAAE0", VA = "0x12AAAE0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x12AAD04", Offset = "0x12AAD04", VA = "0x12AAD04", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x12AAE64", Offset = "0x12AAE64", VA = "0x12AAE64")]
		public bool SetChain(Transform[] spine, Transform head, Transform[] eyes, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x12AB0A8", Offset = "0x12AB0A8", VA = "0x12AB0A8", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x12AB41C", Offset = "0x12AB41C", VA = "0x12AB41C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x12AB4E0", Offset = "0x12AB4E0", VA = "0x12AB4E0")]
		protected void SolveSpine()
		{
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x12AB6FC", Offset = "0x12AB6FC", VA = "0x12AB6FC")]
		protected void SolveHead()
		{
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x12ABA44", Offset = "0x12ABA44", VA = "0x12ABA44")]
		protected void SolveEyes()
		{
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x12ABF50", Offset = "0x12ABF50", VA = "0x12ABF50")]
		protected Vector3[] GetForwards(ref Vector3[] forwards, Vector3 baseForward, Vector3 targetForward, int bones, float clamp)
		{
			return null;
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x12AAF14", Offset = "0x12AAF14", VA = "0x12AAF14")]
		protected void SetBones(Transform[] array, ref LookAtBone[] bones)
		{
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x12AC370", Offset = "0x12AC370", VA = "0x12AC370")]
		public IKSolverLookAt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009F")]
	public class IKSolverTrigonometric : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20000A0")]
		public class TrigonometricBone : Bone
		{
			[Token(Token = "0x4000456")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion targetToLocalSpace;

			[Token(Token = "0x4000457")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 defaultLocalBendNormal;

			[Token(Token = "0x6000619")]
			[Address(RVA = "0x12AD81C", Offset = "0x12AD81C", VA = "0x12AD81C")]
			public void Initiate(Vector3 childPosition, Vector3 bendNormal)
			{
			}

			[Token(Token = "0x600061A")]
			[Address(RVA = "0x12AE0C4", Offset = "0x12AE0C4", VA = "0x12AE0C4")]
			public Quaternion GetRotation(Vector3 direction, Vector3 bendNormal)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x600061B")]
			[Address(RVA = "0x12A8DF8", Offset = "0x12A8DF8", VA = "0x12A8DF8")]
			public Vector3 GetBendNormalFromCurrentRotation()
			{
				return default(Vector3);
			}

			[Token(Token = "0x600061C")]
			[Address(RVA = "0x12AE160", Offset = "0x12AE160", VA = "0x12AE160")]
			public TrigonometricBone()
			{
			}
		}

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 bendNormal;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TrigonometricBone bone1;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TrigonometricBone bone2;

		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TrigonometricBone bone3;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Vector3 weightIKPosition;

		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected bool directHierarchy;

		[Token(Token = "0x6000602")]
		[Address(RVA = "0x12AC580", Offset = "0x12AC580", VA = "0x12AC580")]
		public void SetBendGoalPosition(Vector3 goalPosition, float weight)
		{
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x12AC714", Offset = "0x12AC714", VA = "0x12AC714")]
		public void SetBendPlaneToCurrent()
		{
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0x12AC894", Offset = "0x12AC894", VA = "0x12AC894")]
		public void SetIKRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x12AC8A0", Offset = "0x12AC8A0", VA = "0x12AC8A0")]
		public void SetIKRotationWeight(float weight)
		{
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0x12AC8BC", Offset = "0x12AC8BC", VA = "0x12AC8BC")]
		public Quaternion GetIKRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0x12AC8C8", Offset = "0x12AC8C8", VA = "0x12AC8C8")]
		public float GetIKRotationWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0x12AC8D0", Offset = "0x12AC8D0", VA = "0x12AC8D0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0x12AC9BC", Offset = "0x12AC9BC", VA = "0x12AC9BC", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600060A")]
		[Address(RVA = "0x12ACAB4", Offset = "0x12ACAB4", VA = "0x12ACAB4", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0x12ACAF4", Offset = "0x12ACAF4", VA = "0x12ACAF4", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0x12ACB44", Offset = "0x12ACB44", VA = "0x12ACB44", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0x12ACEE8", Offset = "0x12ACEE8", VA = "0x12ACEE8")]
		public bool SetChain(Transform bone1, Transform bone2, Transform bone3, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0x12ACF34", Offset = "0x12ACF34", VA = "0x12ACF34")]
		public static void Solve(Transform bone1, Transform bone2, Transform bone3, Vector3 targetPosition, Vector3 bendNormal, float weight)
		{
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0x12AD428", Offset = "0x12AD428", VA = "0x12AD428")]
		private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0x12AD580", Offset = "0x12AD580", VA = "0x12AD580", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0x12AD72C", Offset = "0x12AD72C", VA = "0x12AD72C")]
		private bool IsDirectHierarchy()
		{
			return default(bool);
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0x12AD6AC", Offset = "0x12AD6AC", VA = "0x12AD6AC")]
		private void InitiateBones()
		{
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0x12AD90C", Offset = "0x12AD90C", VA = "0x12AD90C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0x12AE154", Offset = "0x12AE154", VA = "0x12AE154", Slot = "12")]
		protected virtual void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0x12AE158", Offset = "0x12AE158", VA = "0x12AE158", Slot = "13")]
		protected virtual void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0x12AE15C", Offset = "0x12AE15C", VA = "0x12AE15C", Slot = "14")]
		protected virtual void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0x12ADF04", Offset = "0x12ADF04", VA = "0x12ADF04")]
		protected Vector3 GetBendDirection(Vector3 IKPosition, Vector3 bendNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0x12A9FA0", Offset = "0x12A9FA0", VA = "0x12A9FA0")]
		public IKSolverTrigonometric()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A1")]
	public class IKSolverVR : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20000A2")]
		public class Arm : BodyPart
		{
			[Serializable]
			[Token(Token = "0x20000A3")]
			public enum ShoulderRotationMode
			{
				[Token(Token = "0x400049A")]
				YawPitch,
				[Token(Token = "0x400049B")]
				FromTo
			}

			[Token(Token = "0x400047C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The hand target. This should not be the hand controller itself, but a child GameObject parented to it so you could adjust it's position/rotation to match the orientation of the hand bone. The best practice for setup would be to move the hand controller to the avatar's hand as it it was held by the avatar, duplicate the avatar's hand bone and parent it to the hand controller. Then assign the duplicate to this slot.")]
			public Transform target;

			[Token(Token = "0x400047D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The elbow will be bent towards this Transform if 'Bend Goal Weight' > 0.")]
			public Transform bendGoal;

			[Token(Token = "0x400047E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Positional weight of the hand target. Note that if you have nulled the target, the hand will still be pulled to the last position of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float positionWeight;

			[Token(Token = "0x400047F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Rotational weight of the hand target. Note that if you have nulled the target, the hand will still be rotated to the last rotation of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float rotationWeight;

			[Token(Token = "0x4000480")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Different techniques for shoulder bone rotation.")]
			public ShoulderRotationMode shoulderRotationMode;

			[Token(Token = "0x4000481")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Range(0f, 1f)]
			[Tooltip("The weight of shoulder rotation")]
			public float shoulderRotationWeight;

			[Token(Token = "0x4000482")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Range(0f, 1f)]
			[Tooltip("The weight of twisting the shoulders backwards when arms are lifted up.")]
			public float shoulderTwistWeight;

			[Token(Token = "0x4000483")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[Range(0f, 1f)]
			[Tooltip("If greater than 0, will bend the elbow towards the 'Bend Goal' Transform.")]
			public float bendGoalWeight;

			[Token(Token = "0x4000484")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("Angular offset of the elbow bending direction.")]
			[Range(-180f, 180f)]
			public float swivelOffset;

			[Token(Token = "0x4000485")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[Tooltip("Local axis of the hand bone that points from the wrist towards the palm. Used for defining hand bone orientation. If you have copied VRIK component from another avatar that has different bone orientations, right-click on VRIK header and select 'Guess Hand Orientations' from the context menu.")]
			public Vector3 wristToPalmAxis;

			[Token(Token = "0x4000486")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("Local axis of the hand bone that points from the palm towards the thumb. Used for defining hand bone orientation. If you have copied VRIK component from another avatar that has different bone orientations, right-click on VRIK header and select 'Guess Hand Orientations' from the context menu.")]
			public Vector3 palmToThumbAxis;

			[Token(Token = "0x4000487")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[Range(0.01f, 2f)]
			[Tooltip("Use this to make the arm shorter/longer. Works by displacement of hand and forearm localPosition.")]
			public float armLengthMlp;

			[Token(Token = "0x4000488")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("Evaluates stretching of the arm by target distance relative to arm length. Value at time 1 represents stretching amount at the point where distance to the target is equal to arm length. Value at time 2 represents stretching amount at the point where distance to the target is double the arm length. Value represents the amount of stretching. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right at the same amount. Smoothing in the curve can help reduce elbow snapping (start stretching the arm slightly before target distance reaches arm length). To get a good optimal value for this curve, please go to the 'VRIK (Basic)' demo scene and copy the stretch curve over from the Pilot character.")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4000489")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x400048A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x400048B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			[HideInInspector]
			public Vector3 bendDirection;

			[NonSerialized]
			[Token(Token = "0x400048C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public Vector3 handPositionOffset;

			[Token(Token = "0x400048F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private bool hasShoulder;

			[Token(Token = "0x4000490")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 chestForwardAxis;

			[Token(Token = "0x4000491")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private Vector3 chestUpAxis;

			[Token(Token = "0x4000492")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			private Quaternion chestRotation;

			[Token(Token = "0x4000493")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private Vector3 chestForward;

			[Token(Token = "0x4000494")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			private Vector3 chestUp;

			[Token(Token = "0x4000495")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			private Quaternion forearmRelToUpperArm;

			[Token(Token = "0x4000496")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
			private Vector3 upperArmBendAxis;

			[Token(Token = "0x4000497")]
			private const float yawOffsetAngle = 45f;

			[Token(Token = "0x4000498")]
			private const float pitchOffsetAngle = -30f;

			[Token(Token = "0x170000B6")]
			public Vector3 position
			{
				[Token(Token = "0x600063B")]
				[Address(RVA = "0x12B3DC0", Offset = "0x12B3DC0", VA = "0x12B3DC0")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600063C")]
				[Address(RVA = "0x12B3DCC", Offset = "0x12B3DCC", VA = "0x12B3DCC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000B7")]
			public Quaternion rotation
			{
				[Token(Token = "0x600063D")]
				[Address(RVA = "0x12B3DD8", Offset = "0x12B3DD8", VA = "0x12B3DD8")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x600063E")]
				[Address(RVA = "0x12B3DE4", Offset = "0x12B3DE4", VA = "0x12B3DE4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000B8")]
			private VirtualBone shoulder
			{
				[Token(Token = "0x600063F")]
				[Address(RVA = "0x12B3DF0", Offset = "0x12B3DF0", VA = "0x12B3DF0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000B9")]
			private VirtualBone upperArm
			{
				[Token(Token = "0x6000640")]
				[Address(RVA = "0x12B3E18", Offset = "0x12B3E18", VA = "0x12B3E18")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000BA")]
			private VirtualBone forearm
			{
				[Token(Token = "0x6000641")]
				[Address(RVA = "0x12B3E4C", Offset = "0x12B3E4C", VA = "0x12B3E4C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000BB")]
			private VirtualBone hand
			{
				[Token(Token = "0x6000642")]
				[Address(RVA = "0x12B3E8C", Offset = "0x12B3E8C", VA = "0x12B3E8C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000643")]
			[Address(RVA = "0x12B3ECC", Offset = "0x12B3ECC", VA = "0x12B3ECC", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000644")]
			[Address(RVA = "0x12B4710", Offset = "0x12B4710", VA = "0x12B4710", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6000645")]
			[Address(RVA = "0x12B49BC", Offset = "0x12B49BC", VA = "0x12B49BC", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6000646")]
			[Address(RVA = "0x12B49E0", Offset = "0x12B49E0", VA = "0x12B49E0")]
			private void Stretching()
			{
			}

			[Token(Token = "0x6000647")]
			[Address(RVA = "0x12B1D20", Offset = "0x12B1D20", VA = "0x12B1D20")]
			public void Solve(bool isLeft)
			{
			}

			[Token(Token = "0x6000648")]
			[Address(RVA = "0x12B5414", Offset = "0x12B5414", VA = "0x12B5414", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000649")]
			[Address(RVA = "0x12B546C", Offset = "0x12B546C", VA = "0x12B546C", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x600064A")]
			[Address(RVA = "0x12B4D30", Offset = "0x12B4D30", VA = "0x12B4D30")]
			private float DamperValue(float value, float min, float max, float weight = 1f)
			{
				return default(float);
			}

			[Token(Token = "0x600064B")]
			[Address(RVA = "0x12B4DB0", Offset = "0x12B4DB0", VA = "0x12B4DB0")]
			private Vector3 GetBendNormal(Vector3 dir)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600064C")]
			[Address(RVA = "0x12B5678", Offset = "0x12B5678", VA = "0x12B5678")]
			private void Visualize(VirtualBone bone1, VirtualBone bone2, VirtualBone bone3, Color color)
			{
			}

			[Token(Token = "0x600064D")]
			[Address(RVA = "0x12B3C34", Offset = "0x12B3C34", VA = "0x12B3C34")]
			public Arm()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000A4")]
		public abstract class BodyPart
		{
			[Token(Token = "0x400049E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public VirtualBone[] bones;

			[Token(Token = "0x400049F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected bool initiated;

			[Token(Token = "0x40004A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			protected Vector3 rootPosition;

			[Token(Token = "0x40004A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			protected Quaternion rootRotation;

			[Token(Token = "0x40004A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			protected int index;

			[Token(Token = "0x40004A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			protected int LOD;

			[Token(Token = "0x170000BC")]
			public float sqrMag
			{
				[Token(Token = "0x6000653")]
				[Address(RVA = "0x12B5828", Offset = "0x12B5828", VA = "0x12B5828")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000654")]
				[Address(RVA = "0x12B5830", Offset = "0x12B5830", VA = "0x12B5830")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000BD")]
			public float mag
			{
				[Token(Token = "0x6000655")]
				[Address(RVA = "0x12B5838", Offset = "0x12B5838", VA = "0x12B5838")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000656")]
				[Address(RVA = "0x12B5840", Offset = "0x12B5840", VA = "0x12B5840")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x600064E")]
			protected abstract void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index);

			[Token(Token = "0x600064F")]
			public abstract void PreSolve();

			[Token(Token = "0x6000650")]
			public abstract void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations);

			[Token(Token = "0x6000651")]
			public abstract void ApplyOffsets();

			[Token(Token = "0x6000652")]
			public abstract void ResetOffsets();

			[Token(Token = "0x6000657")]
			[Address(RVA = "0x12B5848", Offset = "0x12B5848", VA = "0x12B5848")]
			public void SetLOD(int LOD)
			{
			}

			[Token(Token = "0x6000658")]
			[Address(RVA = "0x12A8B20", Offset = "0x12A8B20", VA = "0x12A8B20")]
			public void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000659")]
			[Address(RVA = "0x12B5850", Offset = "0x12B5850", VA = "0x12B5850")]
			public void MovePosition(Vector3 position)
			{
			}

			[Token(Token = "0x600065A")]
			[Address(RVA = "0x12B58D8", Offset = "0x12B58D8", VA = "0x12B58D8")]
			public void MoveRotation(Quaternion rotation)
			{
			}

			[Token(Token = "0x600065B")]
			[Address(RVA = "0x12B5970", Offset = "0x12B5970", VA = "0x12B5970")]
			public void Translate(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x600065C")]
			[Address(RVA = "0x12B1BF8", Offset = "0x12B1BF8", VA = "0x12B1BF8")]
			public void TranslateRoot(Vector3 newRootPos, Quaternion newRootRot)
			{
			}

			[Token(Token = "0x600065D")]
			[Address(RVA = "0x12B52AC", Offset = "0x12B52AC", VA = "0x12B52AC")]
			public void RotateTo(VirtualBone bone, Quaternion rotation, float weight = 1f)
			{
			}

			[Token(Token = "0x600065E")]
			[Address(RVA = "0x12B59B8", Offset = "0x12B59B8", VA = "0x12B59B8")]
			public void Visualize(Color color)
			{
			}

			[Token(Token = "0x600065F")]
			[Address(RVA = "0x12B5ADC", Offset = "0x12B5ADC", VA = "0x12B5ADC")]
			public void Visualize()
			{
			}

			[Token(Token = "0x6000660")]
			[Address(RVA = "0x12B5790", Offset = "0x12B5790", VA = "0x12B5790")]
			protected BodyPart()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000A5")]
		public class Footstep
		{
			[Token(Token = "0x40004A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float stepSpeed;

			[Token(Token = "0x40004A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 characterSpaceOffset;

			[Token(Token = "0x40004A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 position;

			[Token(Token = "0x40004A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion rotation;

			[Token(Token = "0x40004A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Quaternion stepToRootRot;

			[Token(Token = "0x40004A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool isSupportLeg;

			[Token(Token = "0x40004AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 stepFrom;

			[Token(Token = "0x40004AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 stepTo;

			[Token(Token = "0x40004AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion stepFromRot;

			[Token(Token = "0x40004AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public Quaternion stepToRot;

			[Token(Token = "0x40004AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private Quaternion footRelativeToRoot;

			[Token(Token = "0x40004B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float supportLegW;

			[Token(Token = "0x40004B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private float supportLegWV;

			[Token(Token = "0x170000BE")]
			public bool isStepping
			{
				[Token(Token = "0x6000661")]
				[Address(RVA = "0x12B5AF0", Offset = "0x12B5AF0", VA = "0x12B5AF0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000BF")]
			public float stepProgress
			{
				[Token(Token = "0x6000662")]
				[Address(RVA = "0x12B5B04", Offset = "0x12B5B04", VA = "0x12B5B04")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000663")]
				[Address(RVA = "0x12B5B0C", Offset = "0x12B5B0C", VA = "0x12B5B0C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000664")]
			[Address(RVA = "0x12B5B14", Offset = "0x12B5B14", VA = "0x12B5B14")]
			public Footstep(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation, Vector3 characterSpaceOffset)
			{
			}

			[Token(Token = "0x6000665")]
			[Address(RVA = "0x12B5CD8", Offset = "0x12B5CD8", VA = "0x12B5CD8")]
			public void Reset(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation)
			{
			}

			[Token(Token = "0x6000666")]
			[Address(RVA = "0x12B5D20", Offset = "0x12B5D20", VA = "0x12B5D20")]
			public void StepTo(Vector3 p, Quaternion rootRotation, float stepThreshold)
			{
			}

			[Token(Token = "0x6000667")]
			[Address(RVA = "0x12B5F44", Offset = "0x12B5F44", VA = "0x12B5F44")]
			public void UpdateStepping(Vector3 p, Quaternion rootRotation, float speed)
			{
			}

			[Token(Token = "0x6000668")]
			[Address(RVA = "0x12B614C", Offset = "0x12B614C", VA = "0x12B614C")]
			public void UpdateStanding(Quaternion rootRotation, float minAngle, float speed)
			{
			}

			[Token(Token = "0x6000669")]
			[Address(RVA = "0x12B6330", Offset = "0x12B6330", VA = "0x12B6330")]
			public void Update(InterpolationMode interpolation, UnityEvent onStep)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000A6")]
		public class Leg : BodyPart
		{
			[Token(Token = "0x40004B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The foot/toe target. This should not be the foot tracker itself, but a child GameObject parented to it so you could adjust it's position/rotation to match the orientation of the foot/toe bone. If a toe bone is assigned in the References, the solver will match the toe bone to this target. If no toe bone assigned, foot bone will be used instead.")]
			public Transform target;

			[Token(Token = "0x40004B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The knee will be bent towards this Transform if 'Bend Goal Weight' > 0.")]
			public Transform bendGoal;

			[Token(Token = "0x40004B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Positional weight of the toe/foot target. Note that if you have nulled the target, the foot will still be pulled to the last position of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float positionWeight;

			[Token(Token = "0x40004B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Rotational weight of the toe/foot target. Note that if you have nulled the target, the foot will still be rotated to the last rotation of the target until you set this value to 0.")]
			[Range(0f, 1f)]
			public float rotationWeight;

			[Token(Token = "0x40004B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("If greater than 0, will bend the knee towards the 'Bend Goal' Transform.")]
			[Range(0f, 1f)]
			public float bendGoalWeight;

			[Token(Token = "0x40004B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Tooltip("Angular offset of knee bending direction.")]
			[Range(-180f, 180f)]
			public float swivelOffset;

			[Token(Token = "0x40004B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("If 0, the bend plane will be locked to the rotation of the pelvis and rotating the foot will have no effect on the knee direction. If 1, to the target rotation of the leg so that the knee will bend towards the forward axis of the foot. Values in between will be slerped between the two.")]
			[Range(0f, 1f)]
			public float bendToTargetWeight;

			[Token(Token = "0x40004B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[Tooltip("Use this to make the leg shorter/longer. Works by displacement of foot and calf localPosition.")]
			[Range(0.01f, 2f)]
			public float legLengthMlp;

			[Token(Token = "0x40004BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("Evaluates stretching of the leg by target distance relative to leg length. Value at time 1 represents stretching amount at the point where distance to the target is equal to leg length. Value at time 1 represents stretching amount at the point where distance to the target is double the leg length. Value represents the amount of stretching. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right at the same amount. Smoothing in the curve can help reduce knee snapping (start stretching the arm slightly before target distance reaches leg length). To get a good optimal value for this curve, please go to the 'VRIK (Basic)' demo scene and copy the stretch curve over from the Pilot character.")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x40004BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x40004BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x40004BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[HideInInspector]
			public Vector3 footPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40004BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 heelPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40004BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion footRotationOffset;

			[NonSerialized]
			[Token(Token = "0x40004C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public float currentMag;

			[Token(Token = "0x40004C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public bool useAnimatedBendNormal;

			[Token(Token = "0x40004C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private Vector3 footPosition;

			[Token(Token = "0x40004C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Quaternion footRotation;

			[Token(Token = "0x40004C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
			private Vector3 bendNormal;

			[Token(Token = "0x40004C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private Quaternion calfRelToThigh;

			[Token(Token = "0x40004CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			private Quaternion thighRelToFoot;

			[Token(Token = "0x40004CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			private Vector3 bendNormalRelToPelvis;

			[Token(Token = "0x40004CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			private Vector3 bendNormalRelToTarget;

			[Token(Token = "0x170000C0")]
			public Vector3 position
			{
				[Token(Token = "0x600066A")]
				[Address(RVA = "0x12B64A4", Offset = "0x12B64A4", VA = "0x12B64A4")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600066B")]
				[Address(RVA = "0x12B64B0", Offset = "0x12B64B0", VA = "0x12B64B0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000C1")]
			public Quaternion rotation
			{
				[Token(Token = "0x600066C")]
				[Address(RVA = "0x12B64BC", Offset = "0x12B64BC", VA = "0x12B64BC")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x600066D")]
				[Address(RVA = "0x12B64C8", Offset = "0x12B64C8", VA = "0x12B64C8")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000C2")]
			public bool hasToes
			{
				[Token(Token = "0x600066E")]
				[Address(RVA = "0x12B64D4", Offset = "0x12B64D4", VA = "0x12B64D4")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600066F")]
				[Address(RVA = "0x12B64DC", Offset = "0x12B64DC", VA = "0x12B64DC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000C3")]
			public VirtualBone thigh
			{
				[Token(Token = "0x6000670")]
				[Address(RVA = "0x12B64E8", Offset = "0x12B64E8", VA = "0x12B64E8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C4")]
			private VirtualBone calf
			{
				[Token(Token = "0x6000671")]
				[Address(RVA = "0x12B6510", Offset = "0x12B6510", VA = "0x12B6510")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C5")]
			private VirtualBone foot
			{
				[Token(Token = "0x6000672")]
				[Address(RVA = "0x12B653C", Offset = "0x12B653C", VA = "0x12B653C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C6")]
			private VirtualBone toes
			{
				[Token(Token = "0x6000673")]
				[Address(RVA = "0x12B6568", Offset = "0x12B6568", VA = "0x12B6568")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C7")]
			public VirtualBone lastBone
			{
				[Token(Token = "0x6000674")]
				[Address(RVA = "0x12B6594", Offset = "0x12B6594", VA = "0x12B6594")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C8")]
			public Vector3 thighRelativeToPelvis
			{
				[Token(Token = "0x6000675")]
				[Address(RVA = "0x12B65C8", Offset = "0x12B65C8", VA = "0x12B65C8")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000676")]
				[Address(RVA = "0x12B65D4", Offset = "0x12B65D4", VA = "0x12B65D4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000677")]
			[Address(RVA = "0x12B65E0", Offset = "0x12B65E0", VA = "0x12B65E0", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000678")]
			[Address(RVA = "0x12B6B98", Offset = "0x12B6B98", VA = "0x12B6B98", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6000679")]
			[Address(RVA = "0x12B7308", Offset = "0x12B7308", VA = "0x12B7308", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x600067A")]
			[Address(RVA = "0x12B72B8", Offset = "0x12B72B8", VA = "0x12B72B8")]
			private void ApplyPositionOffset(Vector3 offset, float weight)
			{
			}

			[Token(Token = "0x600067B")]
			[Address(RVA = "0x12B706C", Offset = "0x12B706C", VA = "0x12B706C")]
			private void ApplyRotationOffset(Quaternion offset, float weight)
			{
			}

			[Token(Token = "0x600067C")]
			[Address(RVA = "0x12B77E4", Offset = "0x12B77E4", VA = "0x12B77E4")]
			public void Solve(bool stretch)
			{
			}

			[Token(Token = "0x600067D")]
			[Address(RVA = "0x12B8148", Offset = "0x12B8148", VA = "0x12B8148")]
			private void FixTwistRotations()
			{
			}

			[Token(Token = "0x600067E")]
			[Address(RVA = "0x12B7988", Offset = "0x12B7988", VA = "0x12B7988")]
			private void Stretching()
			{
			}

			[Token(Token = "0x600067F")]
			[Address(RVA = "0x12B85A0", Offset = "0x12B85A0", VA = "0x12B85A0", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000680")]
			[Address(RVA = "0x12B87A8", Offset = "0x12B87A8", VA = "0x12B87A8", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000681")]
			[Address(RVA = "0x12B8888", Offset = "0x12B8888", VA = "0x12B8888")]
			public Leg()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000A7")]
		public class Locomotion
		{
			[Token(Token = "0x40004CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Used for blending in/out of procedural locomotion.")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x40004CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Tries to maintain this distance between the legs.")]
			public float footDistance;

			[Token(Token = "0x40004CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Makes a step only if step target position is at least this far from the current footstep or the foot does not reach the current footstep anymore or footstep angle is past the 'Angle Threshold'.")]
			public float stepThreshold;

			[Token(Token = "0x40004D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Makes a step only if step target position is at least 'Step Threshold' far from the current footstep or the foot does not reach the current footstep anymore or footstep angle is past this value.")]
			public float angleThreshold;

			[Token(Token = "0x40004D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Multiplies angle of the center of mass - center of pressure vector. Larger value makes the character step sooner if losing balance.")]
			public float comAngleMlp;

			[Token(Token = "0x40004D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Maximum magnitude of head/hand target velocity used in prediction.")]
			public float maxVelocity;

			[Token(Token = "0x40004D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The amount of head/hand target velocity prediction.")]
			public float velocityFactor;

			[Token(Token = "0x40004D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Range(0.9f, 1f)]
			[Tooltip("How much can a leg be extended before it is forced to step to another position? 1 means fully stretched.")]
			public float maxLegStretch;

			[Token(Token = "0x40004D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The speed of lerping the root of the character towards the horizontal mid-point of the footsteps.")]
			public float rootSpeed;

			[Token(Token = "0x40004D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Tooltip("The speed of moving a foot to the next position.")]
			public float stepSpeed;

			[Token(Token = "0x40004D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("The height of the foot by normalized step progress (0 - 1).")]
			public AnimationCurve stepHeight;

			[Token(Token = "0x40004D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[Tooltip("The height offset of the heel by normalized step progress (0 - 1).")]
			public AnimationCurve heelHeight;

			[Token(Token = "0x40004D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("Rotates the foot while the leg is not stepping to relax the twist rotation of the leg if ideal rotation is past this angle.")]
			[Range(0f, 180f)]
			public float relaxLegTwistMinAngle;

			[Token(Token = "0x40004DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[Tooltip("The speed of rotating the foot while the leg is not stepping to relax the twist rotation of the leg.")]
			public float relaxLegTwistSpeed;

			[Token(Token = "0x40004DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Interpolation mode of the step.")]
			public InterpolationMode stepInterpolation;

			[Token(Token = "0x40004DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Tooltip("Offset for the approximated center of mass.")]
			public Vector3 offset;

			[Token(Token = "0x40004DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[HideInInspector]
			public bool blockingEnabled;

			[Token(Token = "0x40004DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[HideInInspector]
			public LayerMask blockingLayers;

			[Token(Token = "0x40004DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[HideInInspector]
			public float raycastRadius;

			[Token(Token = "0x40004E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[HideInInspector]
			public float raycastHeight;

			[Token(Token = "0x40004E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("Called when the left foot has finished a step.")]
			public UnityEvent onLeftFootstep;

			[Token(Token = "0x40004E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("Called when the right foot has finished a step")]
			public UnityEvent onRightFootstep;

			[Token(Token = "0x40004E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Footstep[] footsteps;

			[Token(Token = "0x40004E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private Vector3 lastComPosition;

			[Token(Token = "0x40004E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private Vector3 comVelocity;

			[Token(Token = "0x40004E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private int leftFootIndex;

			[Token(Token = "0x40004E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			private int rightFootIndex;

			[Token(Token = "0x170000C9")]
			public Vector3 centerOfMass
			{
				[Token(Token = "0x6000682")]
				[Address(RVA = "0x12B8968", Offset = "0x12B8968", VA = "0x12B8968")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000683")]
				[Address(RVA = "0x12B8974", Offset = "0x12B8974", VA = "0x12B8974")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000CA")]
			public Vector3 leftFootstepPosition
			{
				[Token(Token = "0x6000689")]
				[Address(RVA = "0x12BAAB8", Offset = "0x12BAAB8", VA = "0x12BAAB8")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000CB")]
			public Vector3 rightFootstepPosition
			{
				[Token(Token = "0x600068A")]
				[Address(RVA = "0x12BAAEC", Offset = "0x12BAAEC", VA = "0x12BAAEC")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000CC")]
			public Quaternion leftFootstepRotation
			{
				[Token(Token = "0x600068B")]
				[Address(RVA = "0x12BAB24", Offset = "0x12BAB24", VA = "0x12BAB24")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x170000CD")]
			public Quaternion rightFootstepRotation
			{
				[Token(Token = "0x600068C")]
				[Address(RVA = "0x12BAB58", Offset = "0x12BAB58", VA = "0x12BAB58")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6000684")]
			[Address(RVA = "0x12B8980", Offset = "0x12B8980", VA = "0x12B8980")]
			public void Initiate(Vector3[] positions, Quaternion[] rotations, bool hasToes)
			{
			}

			[Token(Token = "0x6000685")]
			[Address(RVA = "0x12B8C74", Offset = "0x12B8C74", VA = "0x12B8C74")]
			public void Reset(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x6000686")]
			[Address(RVA = "0x12B8E58", Offset = "0x12B8E58", VA = "0x12B8E58")]
			public void AddDeltaRotation(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x6000687")]
			[Address(RVA = "0x12B9220", Offset = "0x12B9220", VA = "0x12B9220")]
			public void AddDeltaPosition(Vector3 delta)
			{
			}

			[Token(Token = "0x6000688")]
			[Address(RVA = "0x12B92D8", Offset = "0x12B92D8", VA = "0x12B92D8")]
			public void Solve(VirtualBone rootBone, Spine spine, Leg leftLeg, Leg rightLeg, Arm leftArm, Arm rightArm, int supportLegIndex, out Vector3 leftFootPosition, out Vector3 rightFootPosition, out Quaternion leftFootRotation, out Quaternion rightFootRotation, out float leftFootOffset, out float rightFootOffset, out float leftHeelOffset, out float rightHeelOffset)
			{
			}

			[Token(Token = "0x600068D")]
			[Address(RVA = "0x12BA6E8", Offset = "0x12BA6E8", VA = "0x12BA6E8")]
			private bool StepBlocked(Vector3 fromPosition, Vector3 toPosition, Vector3 rootPosition)
			{
				return default(bool);
			}

			[Token(Token = "0x600068E")]
			[Address(RVA = "0x12BA89C", Offset = "0x12BA89C", VA = "0x12BA89C")]
			private bool CanStep()
			{
				return default(bool);
			}

			[Token(Token = "0x600068F")]
			[Address(RVA = "0x12BA908", Offset = "0x12BA908", VA = "0x12BA908")]
			private static bool GetLineSphereCollision(Vector3 lineStart, Vector3 lineEnd, Vector3 sphereCenter, float sphereRadius)
			{
				return default(bool);
			}

			[Token(Token = "0x6000690")]
			[Address(RVA = "0x12BAB90", Offset = "0x12BAB90", VA = "0x12BAB90")]
			public Locomotion()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000A8")]
		public class Spine : BodyPart
		{
			[Token(Token = "0x40004E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The head target. This should not be the camera Transform itself, but a child GameObject parented to it so you could adjust it's position/rotation  to match the orientation of the head bone. The best practice for setup would be to move the camera to the avatar's eyes, duplicate the avatar's head bone and parent it to the camera. Then assign the duplicate to this slot.")]
			public Transform headTarget;

			[Token(Token = "0x40004EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The pelvis target (optional), useful for seated rigs or if you had an additional tracker on the backpack or belt are. The best practice for setup would be to duplicate the avatar's pelvis bone and parenting it to the pelvis tracker. Then assign the duplicate to this slot.")]
			public Transform pelvisTarget;

			[Token(Token = "0x40004EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Positional weight of the head target. Note that if you have nulled the headTarget, the head will still be pulled to the last position of the headTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float positionWeight;

			[Token(Token = "0x40004EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Rotational weight of the head target. Note that if you have nulled the headTarget, the head will still be rotated to the last rotation of the headTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float rotationWeight;

			[Token(Token = "0x40004ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Positional weight of the pelvis target. Note that if you have nulled the pelvisTarget, the pelvis will still be pulled to the last position of the pelvisTarget until you set this value to 0.")]
			[Range(0f, 1f)]
			public float pelvisPositionWeight;

			[Token(Token = "0x40004EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Range(0f, 1f)]
			[Tooltip("Rotational weight of the pelvis target. Note that if you have nulled the pelvisTarget, the pelvis will still be rotated to the last rotation of the pelvisTarget until you set this value to 0.")]
			public float pelvisRotationWeight;

			[Token(Token = "0x40004EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("If 'Chest Goal Weight' is greater than 0, the chest will be turned towards this Transform.")]
			public Transform chestGoal;

			[Token(Token = "0x40004F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("Weight of turning the chest towards the 'Chest Goal'.")]
			[Range(0f, 1f)]
			public float chestGoalWeight;

			[Token(Token = "0x40004F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[Tooltip("Minimum height of the head from the root of the character.")]
			public float minHeadHeight;

			[Token(Token = "0x40004F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("Determines how much the body will follow the position of the head.")]
			[Range(0f, 1f)]
			public float bodyPosStiffness;

			[Token(Token = "0x40004F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[Tooltip("Determines how much the body will follow the rotation of the head.")]
			[Range(0f, 1f)]
			public float bodyRotStiffness;

			[Token(Token = "0x40004F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Range(0f, 1f)]
			[Tooltip("Determines how much the chest will rotate to the rotation of the head.")]
			[FormerlySerializedAs("chestRotationWeight")]
			public float neckStiffness;

			[Token(Token = "0x40004F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[Range(0f, 1f)]
			[Tooltip("The amount of rotation applied to the chest based on hand positions.")]
			public float rotateChestByHands;

			[Token(Token = "0x40004F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[Tooltip("Clamps chest rotation. Value of 0.5 allows 90 degrees of rotation for the chest relative to the head. Value of 0 allows 180 degrees and value of 1 means the chest will be locked relative to the head.")]
			[Range(0f, 1f)]
			public float chestClampWeight;

			[Token(Token = "0x40004F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[Tooltip("Clamps head rotation. Value of 0.5 allows 90 degrees of rotation for the head relative to the headTarget. Value of 0 allows 180 degrees and value of 1 means head rotation will be locked to the target.")]
			[Range(0f, 1f)]
			public float headClampWeight;

			[Token(Token = "0x40004F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("Moves the body horizontally along -character.forward axis by that value when the player is crouching.")]
			public float moveBodyBackWhenCrouching;

			[Token(Token = "0x40004F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[Tooltip("How much will the pelvis maintain it's animated position?")]
			[Range(0f, 1f)]
			public float maintainPelvisPosition;

			[Token(Token = "0x40004FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[Tooltip("Will automatically rotate the root of the character if the head target has turned past this angle.")]
			[Range(0f, 180f)]
			public float maxRootAngle;

			[Token(Token = "0x40004FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[Tooltip("Angular offset for root heading. Adjust this value to turn the root relative to the HMD around the vertical axis. Usefulf for fighting or shooting games where you would sometimes want the avatar to stand at an angled stance.")]
			[Range(-180f, 180f)]
			public float rootHeadingOffset;

			[NonSerialized]
			[Token(Token = "0x40004FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 IKPositionHead;

			[NonSerialized]
			[Token(Token = "0x40004FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion IKRotationHead;

			[NonSerialized]
			[Token(Token = "0x40004FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public Vector3 IKPositionPelvis;

			[NonSerialized]
			[Token(Token = "0x40004FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			[HideInInspector]
			public Quaternion IKRotationPelvis;

			[NonSerialized]
			[Token(Token = "0x4000500")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[HideInInspector]
			public Vector3 goalPositionChest;

			[NonSerialized]
			[Token(Token = "0x4000501")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[HideInInspector]
			public Vector3 pelvisPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000502")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			[HideInInspector]
			public Vector3 chestPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000503")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			[HideInInspector]
			public Vector3 headPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000504")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[HideInInspector]
			public Quaternion pelvisRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000505")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			[HideInInspector]
			public Quaternion chestRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000506")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			[HideInInspector]
			public Quaternion headRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000507")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			[HideInInspector]
			public Vector3 faceDirection;

			[NonSerialized]
			[Token(Token = "0x4000508")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			[HideInInspector]
			public Vector3 locomotionHeadPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000509")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
			[HideInInspector]
			public Vector3 headPosition;

			[Token(Token = "0x400050C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
			private Quaternion headRotation;

			[Token(Token = "0x400050D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
			private Quaternion pelvisRotation;

			[Token(Token = "0x400050E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
			private Quaternion anchorRelativeToPelvis;

			[Token(Token = "0x400050F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
			private Quaternion pelvisRelativeRotation;

			[Token(Token = "0x4000510")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
			private Quaternion chestRelativeRotation;

			[Token(Token = "0x4000511")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
			private Vector3 headDeltaPosition;

			[Token(Token = "0x4000512")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
			private Quaternion pelvisDeltaRotation;

			[Token(Token = "0x4000513")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
			private Quaternion chestTargetRotation;

			[Token(Token = "0x4000514")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
			private int pelvisIndex;

			[Token(Token = "0x4000515")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
			private int spineIndex;

			[Token(Token = "0x4000516")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
			private int chestIndex;

			[Token(Token = "0x4000517")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
			private int neckIndex;

			[Token(Token = "0x4000518")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
			private int headIndex;

			[Token(Token = "0x4000519")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
			private float length;

			[Token(Token = "0x400051A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
			private bool hasChest;

			[Token(Token = "0x400051B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x211")]
			private bool hasNeck;

			[Token(Token = "0x400051C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x212")]
			private bool hasLegs;

			[Token(Token = "0x400051D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
			private float headHeight;

			[Token(Token = "0x400051E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
			private float sizeMlp;

			[Token(Token = "0x400051F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
			private Vector3 chestForward;

			[Token(Token = "0x170000CE")]
			public VirtualBone pelvis
			{
				[Token(Token = "0x6000691")]
				[Address(RVA = "0x12BA680", Offset = "0x12BA680", VA = "0x12BA680")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000CF")]
			public VirtualBone firstSpineBone
			{
				[Token(Token = "0x6000692")]
				[Address(RVA = "0x12BAC7C", Offset = "0x12BAC7C", VA = "0x12BAC7C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D0")]
			public VirtualBone chest
			{
				[Token(Token = "0x6000693")]
				[Address(RVA = "0x12BACB0", Offset = "0x12BACB0", VA = "0x12BACB0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D1")]
			private VirtualBone neck
			{
				[Token(Token = "0x6000694")]
				[Address(RVA = "0x12BACF8", Offset = "0x12BACF8", VA = "0x12BACF8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D2")]
			public VirtualBone head
			{
				[Token(Token = "0x6000695")]
				[Address(RVA = "0x12BA6B4", Offset = "0x12BA6B4", VA = "0x12BA6B4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D3")]
			public Quaternion anchorRotation
			{
				[Token(Token = "0x6000696")]
				[Address(RVA = "0x12BAD2C", Offset = "0x12BAD2C", VA = "0x12BAD2C")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000697")]
				[Address(RVA = "0x12BAD40", Offset = "0x12BAD40", VA = "0x12BAD40")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000D4")]
			public Quaternion anchorRelativeToHead
			{
				[Token(Token = "0x6000698")]
				[Address(RVA = "0x12BAD54", Offset = "0x12BAD54", VA = "0x12BAD54")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000699")]
				[Address(RVA = "0x12BAD68", Offset = "0x12BAD68", VA = "0x12BAD68")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x600069A")]
			[Address(RVA = "0x12BAD7C", Offset = "0x12BAD7C", VA = "0x12BAD7C", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x600069B")]
			[Address(RVA = "0x12BB9DC", Offset = "0x12BB9DC", VA = "0x12BB9DC", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x600069C")]
			[Address(RVA = "0x12BBBC4", Offset = "0x12BBBC4", VA = "0x12BBBC4", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x600069D")]
			[Address(RVA = "0x12BC358", Offset = "0x12BC358", VA = "0x12BC358")]
			private void CalculateChestTargetRotation(VirtualBone rootBone, Arm[] arms)
			{
			}

			[Token(Token = "0x600069E")]
			[Address(RVA = "0x12BC994", Offset = "0x12BC994", VA = "0x12BC994")]
			public void Solve(VirtualBone rootBone, Leg[] legs, Arm[] arms)
			{
			}

			[Token(Token = "0x600069F")]
			[Address(RVA = "0x12BD2E0", Offset = "0x12BD2E0", VA = "0x12BD2E0")]
			private void FABRIKPass(Vector3 animatedPelvisPos, Vector3 rootUp, float weight)
			{
			}

			[Token(Token = "0x60006A0")]
			[Address(RVA = "0x12BDA88", Offset = "0x12BDA88", VA = "0x12BDA88")]
			private void SolvePelvis()
			{
			}

			[Token(Token = "0x60006A1")]
			[Address(RVA = "0x12BE0E4", Offset = "0x12BE0E4", VA = "0x12BE0E4", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x60006A2")]
			[Address(RVA = "0x12BE2B4", Offset = "0x12BE2B4", VA = "0x12BE2B4", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x60006A3")]
			[Address(RVA = "0x12BC59C", Offset = "0x12BC59C", VA = "0x12BC59C")]
			private void AdjustChestByHands(ref Quaternion chestTargetRotation, Arm[] arms)
			{
			}

			[Token(Token = "0x60006A4")]
			[Address(RVA = "0x12BD7B0", Offset = "0x12BD7B0", VA = "0x12BD7B0")]
			public void InverseTranslateToHead(Leg[] legs, bool limited, bool useCurrentLegMag, Vector3 offset, float w)
			{
			}

			[Token(Token = "0x60006A5")]
			[Address(RVA = "0x12BCED0", Offset = "0x12BCED0", VA = "0x12BCED0")]
			private void TranslatePelvis(Leg[] legs, Vector3 deltaPosition, Quaternion deltaRotation)
			{
			}

			[Token(Token = "0x60006A6")]
			[Address(RVA = "0x12BE388", Offset = "0x12BE388", VA = "0x12BE388")]
			private Vector3 LimitPelvisPosition(Leg[] legs, Vector3 pelvisPosition, bool useCurrentLegMag, int it = 2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60006A7")]
			[Address(RVA = "0x12BD88C", Offset = "0x12BD88C", VA = "0x12BD88C")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x60006A8")]
			[Address(RVA = "0x12BD540", Offset = "0x12BD540", VA = "0x12BD540")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x60006A9")]
			[Address(RVA = "0x12BE794", Offset = "0x12BE794", VA = "0x12BE794")]
			public Spine()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000A9")]
		public enum PositionOffset
		{
			[Token(Token = "0x4000521")]
			Pelvis,
			[Token(Token = "0x4000522")]
			Chest,
			[Token(Token = "0x4000523")]
			Head,
			[Token(Token = "0x4000524")]
			LeftHand,
			[Token(Token = "0x4000525")]
			RightHand,
			[Token(Token = "0x4000526")]
			LeftFoot,
			[Token(Token = "0x4000527")]
			RightFoot,
			[Token(Token = "0x4000528")]
			LeftHeel,
			[Token(Token = "0x4000529")]
			RightHeel
		}

		[Serializable]
		[Token(Token = "0x20000AA")]
		public enum RotationOffset
		{
			[Token(Token = "0x400052B")]
			Pelvis,
			[Token(Token = "0x400052C")]
			Chest,
			[Token(Token = "0x400052D")]
			Head
		}

		[Serializable]
		[Token(Token = "0x20000AB")]
		public class VirtualBone
		{
			[Token(Token = "0x400052E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 readPosition;

			[Token(Token = "0x400052F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion readRotation;

			[Token(Token = "0x4000530")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4000531")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion solverRotation;

			[Token(Token = "0x4000532")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float length;

			[Token(Token = "0x4000533")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float sqrMag;

			[Token(Token = "0x4000534")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3 axis;

			[Token(Token = "0x60006AA")]
			[Address(RVA = "0x12B6B08", Offset = "0x12B6B08", VA = "0x12B6B08")]
			public VirtualBone(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006AB")]
			[Address(RVA = "0x12B6B78", Offset = "0x12B6B78", VA = "0x12B6B78")]
			public void Read(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006AC")]
			[Address(RVA = "0x12BE8B0", Offset = "0x12BE8B0", VA = "0x12BE8B0")]
			public static void SwingRotation(VirtualBone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60006AD")]
			[Address(RVA = "0x12BEAB0", Offset = "0x12BEAB0", VA = "0x12BEAB0")]
			public static float PreSolve(ref VirtualBone[] bones)
			{
				return default(float);
			}

			[Token(Token = "0x60006AE")]
			[Address(RVA = "0x12BE624", Offset = "0x12BE624", VA = "0x12BE624")]
			public static void RotateAroundPoint(VirtualBone[] bones, int index, Vector3 point, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006AF")]
			[Address(RVA = "0x12BEC10", Offset = "0x12BEC10", VA = "0x12BEC10")]
			public static void RotateBy(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006B0")]
			[Address(RVA = "0x12BEDB8", Offset = "0x12BEDB8", VA = "0x12BEDB8")]
			public static void RotateBy(VirtualBone[] bones, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006B1")]
			[Address(RVA = "0x12BEF40", Offset = "0x12BEF40", VA = "0x12BEF40")]
			public static void RotateTo(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x60006B2")]
			[Address(RVA = "0x12B7D64", Offset = "0x12B7D64", VA = "0x12B7D64")]
			public static void SolveTrigonometric(VirtualBone[] bones, int first, int second, int third, Vector3 targetPosition, Vector3 bendNormal, float weight)
			{
			}

			[Token(Token = "0x60006B3")]
			[Address(RVA = "0x12BEFE4", Offset = "0x12BEFE4", VA = "0x12BEFE4")]
			private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60006B4")]
			[Address(RVA = "0x12BDD18", Offset = "0x12BDD18", VA = "0x12BDD18")]
			public static void SolveFABRIK(VirtualBone[] bones, Vector3 startPosition, Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length, Vector3 startOffset)
			{
			}

			[Token(Token = "0x60006B5")]
			[Address(RVA = "0x12BF13C", Offset = "0x12BF13C", VA = "0x12BF13C")]
			private static Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60006B6")]
			[Address(RVA = "0x12BF250", Offset = "0x12BF250", VA = "0x12BF250")]
			public static void SolveCCD(VirtualBone[] bones, Vector3 targetPosition, float weight, int iterations)
			{
			}
		}

		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] solverTransforms;

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool hasChest;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool hasNeck;

		[Token(Token = "0x400045B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool hasShoulders;

		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool hasToes;

		[Token(Token = "0x400045D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool hasLegs;

		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] readPositions;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] readRotations;

		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] solvedPositions;

		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion[] solvedRotations;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 rootV;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 rootVelocity;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 bodyOffset;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int supportLegIndex;

		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int lastLOD;

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(0f, 2f)]
		[Tooltip("LOD 0: Full quality solving. LOD 1: Shoulder solving, stretching plant feet disabled, spine solving quality reduced. This provides about 30% of performance gain. LOD 2: Culled, but updating root position and rotation if locomotion is enabled.")]
		public int LOD;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("If true, will keep the toes planted even if head target is out of reach, so this can cause the camera to exit the head if it is too high for the model to reach. Enabling this increases the cost of the solver as the legs will have to be solved multiple times.")]
		public bool plantFeet;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("The spine solver.")]
		public Spine spine;

		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The left arm solver.")]
		public Arm leftArm;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("The right arm solver.")]
		public Arm rightArm;

		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("The left leg solver.")]
		public Leg leftLeg;

		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("The right leg solver.")]
		public Leg rightLeg;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Procedural leg shuffling for stationary VR games. Not designed for roomscale and thumbstick locomotion. For those it would be better to use a strafing locomotion blend tree to make the character follow the horizontal direction towards the HMD by root motion or script.")]
		public Locomotion locomotion;

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Leg[] legs;

		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Arm[] arms;

		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 headPosition;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 headDeltaPosition;

		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 raycastOriginPelvis;

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private Vector3 lastOffset;

		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector3 debugPos1;

		[Token(Token = "0x4000479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private Vector3 debugPos2;

		[Token(Token = "0x400047A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Vector3 debugPos3;

		[Token(Token = "0x400047B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private Vector3 debugPos4;

		[Token(Token = "0x170000B5")]
		[HideInInspector]
		public VirtualBone rootBone
		{
			[Token(Token = "0x6000636")]
			[Address(RVA = "0x12B39F0", Offset = "0x12B39F0", VA = "0x12B39F0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000637")]
			[Address(RVA = "0x12B39F8", Offset = "0x12B39F8", VA = "0x12B39F8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600061D")]
		[Address(RVA = "0x12AE168", Offset = "0x12AE168", VA = "0x12AE168")]
		public void SetToReferences(VRIK.References references)
		{
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0x12AE588", Offset = "0x12AE588", VA = "0x12AE588")]
		public void GuessHandOrientations(VRIK.References references, bool onlyIfZero)
		{
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0x12AE43C", Offset = "0x12AE43C", VA = "0x12AE43C")]
		public void DefaultAnimationCurves()
		{
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0x12AEDB8", Offset = "0x12AEDB8", VA = "0x12AEDB8")]
		public void AddPositionOffset(PositionOffset positionOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6000621")]
		[Address(RVA = "0x12AEEFC", Offset = "0x12AEEFC", VA = "0x12AEEFC")]
		public void AddRotationOffset(RotationOffset rotationOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0x12AEF3C", Offset = "0x12AEF3C", VA = "0x12AEF3C")]
		public void AddRotationOffset(RotationOffset rotationOffset, Quaternion value)
		{
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0x12AF060", Offset = "0x12AF060", VA = "0x12AF060")]
		public void AddPlatformMotion(Vector3 deltaPosition, Quaternion deltaRotation, Vector3 platformPivot)
		{
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0x12AF13C", Offset = "0x12AF13C", VA = "0x12AF13C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0x12AF8B0", Offset = "0x12AF8B0", VA = "0x12AF8B0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0x12AFA04", Offset = "0x12AFA04", VA = "0x12AFA04", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0x12AFBF0", Offset = "0x12AFBF0", VA = "0x12AFBF0", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0x12AFC60", Offset = "0x12AFC60", VA = "0x12AFC60", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0x12AFCD0", Offset = "0x12AFCD0", VA = "0x12AFCD0", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0x12AFECC", Offset = "0x12AFECC", VA = "0x12AFECC")]
		private Vector3 GetNormal(Transform[] transforms)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0x12AE878", Offset = "0x12AE878", VA = "0x12AE878")]
		private Vector3 GuessWristToPalmAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0x12AE95C", Offset = "0x12AE95C", VA = "0x12AE95C")]
		private Vector3 GuessPalmToThumbAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0x12AECA4", Offset = "0x12AECA4", VA = "0x12AECA4")]
		private static Keyframe[] GetSineKeyframes(float mag)
		{
			return null;
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0x12AF250", Offset = "0x12AF250", VA = "0x12AF250")]
		private void UpdateSolverTransforms()
		{
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0x12B013C", Offset = "0x12B013C", VA = "0x12B013C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0x12B0178", Offset = "0x12B0178", VA = "0x12B0178", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0x12B1730", Offset = "0x12B1730", VA = "0x12B1730")]
		private void WriteTransforms()
		{
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0x12AF3A0", Offset = "0x12AF3A0", VA = "0x12AF3A0")]
		private void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs)
		{
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0x12B0584", Offset = "0x12B0584", VA = "0x12B0584")]
		private void Solve()
		{
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0x12B1B84", Offset = "0x12B1B84", VA = "0x12B1B84")]
		private Vector3 GetPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0x12B1BC0", Offset = "0x12B1BC0", VA = "0x12B1BC0")]
		private Quaternion GetRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0x12B15F4", Offset = "0x12B15F4", VA = "0x12B15F4")]
		private void Write()
		{
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0x12B3304", Offset = "0x12B3304", VA = "0x12B3304")]
		private Vector3 GetPelvisOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0x12B3A00", Offset = "0x12B3A00", VA = "0x12B3A00")]
		public IKSolverVR()
		{
		}
	}
	[Token(Token = "0x20000AC")]
	public class TwistRelaxer : MonoBehaviour
	{
		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IK ik;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If this is the forearm roll bone, the parent should be the forearm bone. If null, will be found automatically.")]
		public Transform parent;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If this is the forearm roll bone, the child should be the hand bone. If null, will attempt to find automatically. Assign the hand manually if the hand bone is not a child of the roll bone.")]
		public Transform child;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The weight of relaxing the twist of this Transform")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("If 0.5, this Transform will be twisted half way from parent to child. If 1, the twist angle will be locked to the child and will rotate with along with it.")]
		[Range(0f, 1f)]
		public float parentChildCrossfade;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Rotation offset around the twist axis.")]
		[Range(-180f, 180f)]
		public float twistAngleOffset;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 twistAxis;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 axis;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 axisRelativeToParentDefault;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 axisRelativeToChildDefault;

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x12BF404", Offset = "0x12BF404", VA = "0x12BF404")]
		public void Relax()
		{
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x12BF848", Offset = "0x12BF848", VA = "0x12BF848")]
		private void Start()
		{
		}

		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x12BFBE8", Offset = "0x12BFBE8", VA = "0x12BFBE8")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x12BFC60", Offset = "0x12BFC60", VA = "0x12BFC60")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x12BFCD8", Offset = "0x12BFCD8", VA = "0x12BFCD8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x12BFDF0", Offset = "0x12BFDF0", VA = "0x12BFDF0")]
		public TwistRelaxer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000AD")]
	public class InteractionEffector
	{
		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Poser poser;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IKEffector effector;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timer;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float length;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float weight;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fadeInSpeed;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float defaultPositionWeight;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float defaultRotationWeight;

		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float defaultPull;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float defaultReach;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float defaultPush;

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float defaultPushParent;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float defaultBendGoalWeight;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float resetTimer;

		[Token(Token = "0x4000550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool positionWeightUsed;

		[Token(Token = "0x4000551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool rotationWeightUsed;

		[Token(Token = "0x4000552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool pullUsed;

		[Token(Token = "0x4000553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool reachUsed;

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool pushUsed;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool pushParentUsed;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		private bool bendGoalWeightUsed;

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		private bool pickedUp;

		[Token(Token = "0x4000558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool defaults;

		[Token(Token = "0x4000559")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool pickUpOnPostFBBIK;

		[Token(Token = "0x400055A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 pausePositionRelative;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion pauseRotationRelative;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private InteractionTarget interactionTarget;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform target;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<bool> triggered;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool started;

		[Token(Token = "0x170000D5")]
		public FullBodyBipedEffector effectorType
		{
			[Token(Token = "0x60006BD")]
			[Address(RVA = "0x12BFE90", Offset = "0x12BFE90", VA = "0x12BFE90")]
			[CompilerGenerated]
			get
			{
				return default(FullBodyBipedEffector);
			}
			[Token(Token = "0x60006BE")]
			[Address(RVA = "0x12BFE98", Offset = "0x12BFE98", VA = "0x12BFE98")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000D6")]
		public bool isPaused
		{
			[Token(Token = "0x60006BF")]
			[Address(RVA = "0x12BFEA0", Offset = "0x12BFEA0", VA = "0x12BFEA0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60006C0")]
			[Address(RVA = "0x12BFEA8", Offset = "0x12BFEA8", VA = "0x12BFEA8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000D7")]
		public InteractionObject interactionObject
		{
			[Token(Token = "0x60006C1")]
			[Address(RVA = "0x12BFEB4", Offset = "0x12BFEB4", VA = "0x12BFEB4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006C2")]
			[Address(RVA = "0x12BFEBC", Offset = "0x12BFEBC", VA = "0x12BFEBC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		public bool inInteraction
		{
			[Token(Token = "0x60006C3")]
			[Address(RVA = "0x12BFEC4", Offset = "0x12BFEC4", VA = "0x12BFEC4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D9")]
		public float progress
		{
			[Token(Token = "0x60006CC")]
			[Address(RVA = "0x12C23E0", Offset = "0x12C23E0", VA = "0x12C23E0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x12BFF24", Offset = "0x12BFF24", VA = "0x12BFF24")]
		public InteractionEffector(FullBodyBipedEffector effectorType)
		{
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x12BFFB4", Offset = "0x12BFFB4", VA = "0x12BFFB4")]
		public void Initiate(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x12C0048", Offset = "0x12C0048", VA = "0x12C0048")]
		private void StoreDefaults()
		{
		}

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x12C01B4", Offset = "0x12C01B4", VA = "0x12C01B4")]
		public bool ResetToDefaults(float speed)
		{
			return default(bool);
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x12C0590", Offset = "0x12C0590", VA = "0x12C0590")]
		public bool Pause()
		{
			return default(bool);
		}

		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x12C06B0", Offset = "0x12C06B0", VA = "0x12C06B0")]
		public bool Resume()
		{
			return default(bool);
		}

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x12C0704", Offset = "0x12C0704", VA = "0x12C0704")]
		public bool Start(InteractionObject interactionObject, string tag, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x12C120C", Offset = "0x12C120C", VA = "0x12C120C")]
		public void Update(Transform root, float speed)
		{
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x12C1C54", Offset = "0x12C1C54", VA = "0x12C1C54")]
		private void TriggerUntriggeredEvents(bool checkTime, out bool pickUp, out bool pause)
		{
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x12C1E74", Offset = "0x12C1E74", VA = "0x12C1E74")]
		private void PickUp(Transform root)
		{
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x12C2298", Offset = "0x12C2298", VA = "0x12C2298")]
		public bool Stop()
		{
			return default(bool);
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x12C25E0", Offset = "0x12C25E0", VA = "0x12C25E0")]
		public void OnPostFBBIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000AE")]
	public class InteractionLookAt
	{
		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("(Optional) reference to the LookAtIK component that will be used to make the character look at the objects that it is interacting with.")]
		public LookAtIK ik;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Interpolation speed of the LookAtIK target.")]
		public float lerpSpeed;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Interpolation speed of the LookAtIK weight.")]
		public float weightSpeed;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool isPaused;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform lookAtTarget;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float stopLookTime;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float weight;

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstFBBIKSolve;

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x12C281C", Offset = "0x12C281C", VA = "0x12C281C")]
		public void Look(Transform target, float time)
		{
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x12C292C", Offset = "0x12C292C", VA = "0x12C292C")]
		public void OnFixTransforms()
		{
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x12C29C4", Offset = "0x12C29C4", VA = "0x12C29C4")]
		public void Update()
		{
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x12C2BB4", Offset = "0x12C2BB4", VA = "0x12C2BB4")]
		public void SolveSpine()
		{
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x12C2C5C", Offset = "0x12C2C5C", VA = "0x12C2C5C")]
		public void SolveHead()
		{
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x12C2D08", Offset = "0x12C2D08", VA = "0x12C2D08")]
		public InteractionLookAt()
		{
		}
	}
	[Token(Token = "0x20000AF")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Object")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	public class InteractionObject : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000B0")]
		public class InteractionEvent
		{
			[Token(Token = "0x4000574")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The time of the event since interaction start.")]
			public float time;

			[Token(Token = "0x4000575")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("If true, the interaction will be paused on this event. The interaction can be resumed by InteractionSystem.ResumeInteraction() or InteractionSystem.ResumeAll;")]
			public bool pause;

			[Token(Token = "0x4000576")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			[Tooltip("If true, the object will be parented to the effector bone on this event. Note that picking up like this can be done by only a single effector at a time. If you wish to pick up an object with both hands, see the Interaction PickUp2Handed demo scene.")]
			public bool pickUp;

			[Token(Token = "0x4000577")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The animations called on this event.")]
			public AnimatorEvent[] animations;

			[Token(Token = "0x4000578")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The messages sent on this event using GameObject.SendMessage().")]
			public Message[] messages;

			[Token(Token = "0x4000579")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The UnityEvent to invoke on this event.")]
			public UnityEvent unityEvent;

			[Token(Token = "0x60006F3")]
			[Address(RVA = "0x12C2410", Offset = "0x12C2410", VA = "0x12C2410")]
			public void Activate(Transform t)
			{
			}

			[Token(Token = "0x60006F4")]
			[Address(RVA = "0x12C3C98", Offset = "0x12C3C98", VA = "0x12C3C98")]
			public InteractionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000B1")]
		public class Message
		{
			[Token(Token = "0x400057A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The name of the function called.")]
			public string function;

			[Token(Token = "0x400057B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The recipient game object.")]
			public GameObject recipient;

			[Token(Token = "0x400057C")]
			private const string empty = "";

			[Token(Token = "0x60006F5")]
			[Address(RVA = "0x12C3BA0", Offset = "0x12C3BA0", VA = "0x12C3BA0")]
			public void Send(Transform t)
			{
			}

			[Token(Token = "0x60006F6")]
			[Address(RVA = "0x12C3CA0", Offset = "0x12C3CA0", VA = "0x12C3CA0")]
			public Message()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000B2")]
		public class AnimatorEvent
		{
			[Token(Token = "0x400057D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Animator component that will receive the AnimatorEvents.")]
			public Animator animator;

			[Token(Token = "0x400057E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The Animation component that will receive the AnimatorEvents (Legacy).")]
			public Animation animation;

			[Token(Token = "0x400057F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The name of the animation state.")]
			public string animationState;

			[Token(Token = "0x4000580")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The crossfading time.")]
			public float crossfadeTime;

			[Token(Token = "0x4000581")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("The layer of the animation state (if using Legacy, the animation state will be forced to this layer).")]
			public int layer;

			[Token(Token = "0x4000582")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Should the animation always start from 0 normalized time?")]
			public bool resetNormalizedTime;

			[Token(Token = "0x4000583")]
			private const string empty = "";

			[Token(Token = "0x60006F7")]
			[Address(RVA = "0x12C3AC4", Offset = "0x12C3AC4", VA = "0x12C3AC4")]
			public void Activate(bool pickUp)
			{
			}

			[Token(Token = "0x60006F8")]
			[Address(RVA = "0x12C3CA8", Offset = "0x12C3CA8", VA = "0x12C3CA8")]
			private void Activate(Animator animator)
			{
			}

			[Token(Token = "0x60006F9")]
			[Address(RVA = "0x12C3D58", Offset = "0x12C3D58", VA = "0x12C3D58")]
			private void Activate(Animation animation)
			{
			}

			[Token(Token = "0x60006FA")]
			[Address(RVA = "0x12C3E30", Offset = "0x12C3E30", VA = "0x12C3E30")]
			public AnimatorEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000B3")]
		public class WeightCurve
		{
			[Serializable]
			[Token(Token = "0x20000B4")]
			public enum Type
			{
				[Token(Token = "0x4000587")]
				PositionWeight,
				[Token(Token = "0x4000588")]
				RotationWeight,
				[Token(Token = "0x4000589")]
				PositionOffsetX,
				[Token(Token = "0x400058A")]
				PositionOffsetY,
				[Token(Token = "0x400058B")]
				PositionOffsetZ,
				[Token(Token = "0x400058C")]
				Pull,
				[Token(Token = "0x400058D")]
				Reach,
				[Token(Token = "0x400058E")]
				RotateBoneWeight,
				[Token(Token = "0x400058F")]
				Push,
				[Token(Token = "0x4000590")]
				PushParent,
				[Token(Token = "0x4000591")]
				PoserWeight,
				[Token(Token = "0x4000592")]
				BendGoalWeight
			}

			[Token(Token = "0x4000584")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of the curve (InteractionObject.WeightCurve.Type).")]
			public Type type;

			[Token(Token = "0x4000585")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The weight curve.")]
			public AnimationCurve curve;

			[Token(Token = "0x60006FB")]
			[Address(RVA = "0x12C33D4", Offset = "0x12C33D4", VA = "0x12C33D4")]
			public float GetValue(float timer)
			{
				return default(float);
			}

			[Token(Token = "0x60006FC")]
			[Address(RVA = "0x12C3E44", Offset = "0x12C3E44", VA = "0x12C3E44")]
			public WeightCurve()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000B5")]
		public class Multiplier
		{
			[Token(Token = "0x4000593")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The curve type to multiply.")]
			public WeightCurve.Type curve;

			[Token(Token = "0x4000594")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The multiplier of the curve's value.")]
			public float multiplier;

			[Token(Token = "0x4000595")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The resulting value will be applied to this channel.")]
			public WeightCurve.Type result;

			[Token(Token = "0x60006FD")]
			[Address(RVA = "0x12C39DC", Offset = "0x12C39DC", VA = "0x12C39DC")]
			public float GetValue(WeightCurve weightCurve, float timer)
			{
				return default(float);
			}

			[Token(Token = "0x60006FE")]
			[Address(RVA = "0x12C3E4C", Offset = "0x12C3E4C", VA = "0x12C3E4C")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If the Interaction System has a 'Look At' LookAtIK component assigned, will use it to make the character look at the specified Transform. If unassigned, will look at this GameObject.")]
		public Transform otherLookAtTarget;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The root Transform of the InteractionTargets. If null, will use this GameObject. GetComponentsInChildren<InteractionTarget>() will be used at initiation to find all InteractionTargets associated with this InteractionObject.")]
		public Transform otherTargetsRoot;

		[Token(Token = "0x400056D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If assigned, all PositionOffset channels will be applied in the rotation space of this Transform. If not, they will be in the rotation space of the character.")]
		public Transform positionOffsetSpace;

		[Token(Token = "0x400056E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WeightCurve[] weightCurves;

		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Multiplier[] multipliers;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionEvent[] events;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private InteractionTarget[] targets;

		[Token(Token = "0x170000DA")]
		public float length
		{
			[Token(Token = "0x60006DF")]
			[Address(RVA = "0x12C2F3C", Offset = "0x12C2F3C", VA = "0x12C2F3C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60006E0")]
			[Address(RVA = "0x12C2F44", Offset = "0x12C2F44", VA = "0x12C2F44")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000DB")]
		public InteractionSystem lastUsedInteractionSystem
		{
			[Token(Token = "0x60006E1")]
			[Address(RVA = "0x12C2F4C", Offset = "0x12C2F4C", VA = "0x12C2F4C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60006E2")]
			[Address(RVA = "0x12C2F54", Offset = "0x12C2F54", VA = "0x12C2F54")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000DC")]
		public Transform lookAtTarget
		{
			[Token(Token = "0x60006E4")]
			[Address(RVA = "0x12C310C", Offset = "0x12C310C", VA = "0x12C310C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DD")]
		public Transform targetsRoot
		{
			[Token(Token = "0x60006EC")]
			[Address(RVA = "0x12C24D4", Offset = "0x12C24D4", VA = "0x12C24D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x12C2D1C", Offset = "0x12C2D1C", VA = "0x12C2D1C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x12C2D60", Offset = "0x12C2D60", VA = "0x12C2D60")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x12C2DA4", Offset = "0x12C2DA4", VA = "0x12C2DA4")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x12C2DE8", Offset = "0x12C2DE8", VA = "0x12C2DE8")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x12C2E2C", Offset = "0x12C2E2C", VA = "0x12C2E2C")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x12C2E70", Offset = "0x12C2E70", VA = "0x12C2E70")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x12C2EB4", Offset = "0x12C2EB4", VA = "0x12C2EB4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x12C2EF8", Offset = "0x12C2EF8", VA = "0x12C2EF8")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x12C2F5C", Offset = "0x12C2F5C", VA = "0x12C2F5C")]
		public void Initiate()
		{
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x12C318C", Offset = "0x12C318C", VA = "0x12C318C")]
		public InteractionTarget GetTarget(FullBodyBipedEffector effectorType, InteractionSystem interactionSystem)
		{
			return null;
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x12C0CD4", Offset = "0x12C0CD4", VA = "0x12C0CD4")]
		public bool CurveUsed(WeightCurve.Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x12C3304", Offset = "0x12C3304", VA = "0x12C3304")]
		public InteractionTarget[] GetTargets()
		{
			return null;
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x12C0B90", Offset = "0x12C0B90", VA = "0x12C0B90")]
		public Transform GetTarget(FullBodyBipedEffector effectorType, string tag)
		{
			return null;
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x12C0CCC", Offset = "0x12C0CCC", VA = "0x12C0CCC")]
		public void OnStartInteraction(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x12C184C", Offset = "0x12C184C", VA = "0x12C184C")]
		public void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, InteractionTarget target, float timer, float weight)
		{
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x12C208C", Offset = "0x12C208C", VA = "0x12C208C")]
		public float GetValue(WeightCurve.Type weightCurveType, InteractionTarget target, float timer)
		{
			return default(float);
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x12C3A0C", Offset = "0x12C3A0C", VA = "0x12C3A0C")]
		private void Start()
		{
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x12C33F0", Offset = "0x12C33F0", VA = "0x12C33F0")]
		private void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, WeightCurve.Type type, float value, float weight)
		{
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x12C330C", Offset = "0x12C330C", VA = "0x12C330C")]
		private Transform GetTarget(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x12C3980", Offset = "0x12C3980", VA = "0x12C3980")]
		private int GetWeightCurveIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x12C3A10", Offset = "0x12C3A10", VA = "0x12C3A10")]
		private int GetMultiplierIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x12C3A6C", Offset = "0x12C3A6C", VA = "0x12C3A6C")]
		public InteractionObject()
		{
		}
	}
	[Token(Token = "0x20000B6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction System")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	public class InteractionSystem : MonoBehaviour
	{
		[Token(Token = "0x20000B7")]
		public delegate void InteractionDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject);

		[Token(Token = "0x20000B8")]
		public delegate void InteractionEventDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionObject.InteractionEvent interactionEvent);

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If not empty, only the targets with the specified tag will be used by this Interaction System.")]
		public string targetTag;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The fade in time of the interaction.")]
		public float fadeInTime;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The master speed for all interactions.")]
		public float speed;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If > 0, lerps all the FBBIK channels used by the Interaction System back to their default or initial values when not in interaction.")]
		public float resetToDefaultsSpeed;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Triggering")]
		[Tooltip("The collider that registers OnTriggerEnter and OnTriggerExit events with InteractionTriggers.")]
		[FormerlySerializedAs("collider")]
		public Collider characterCollider;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Will be used by Interaction Triggers that need the camera's position. Assign the first person view character camera.")]
		[FormerlySerializedAs("camera")]
		public Transform FPSCamera;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The layers that will be raycasted from the camera (along camera.forward). All InteractionTrigger look at target colliders should be included.")]
		public LayerMask camRaycastLayers;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Max distance of raycasting from the camera.")]
		public float camRaycastDistance;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<InteractionTrigger> inContact;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> bestRangeIndexes;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public InteractionDelegate OnInteractionStart;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractionDelegate OnInteractionPause;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InteractionDelegate OnInteractionPickUp;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InteractionDelegate OnInteractionResume;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InteractionDelegate OnInteractionStop;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InteractionEventDelegate OnInteractionEvent;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RaycastHit raycastHit;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Space(10f)]
		[SerializeField]
		[Tooltip("Reference to the FBBIK component.")]
		private FullBodyBipedIK fullBody;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Handles looking at the interactions.")]
		public InteractionLookAt lookAt;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InteractionEffector[] interactionEffectors;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool initiated;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider lastCollider;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Collider c;

		[Token(Token = "0x170000DE")]
		public bool inInteraction
		{
			[Token(Token = "0x6000707")]
			[Address(RVA = "0x12C407C", Offset = "0x12C407C", VA = "0x12C407C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DF")]
		public FullBodyBipedIK ik
		{
			[Token(Token = "0x6000721")]
			[Address(RVA = "0x12C5ADC", Offset = "0x12C5ADC", VA = "0x12C5ADC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000722")]
			[Address(RVA = "0x12C5AE4", Offset = "0x12C5AE4", VA = "0x12C5AE4")]
			set
			{
			}
		}

		[Token(Token = "0x170000E0")]
		public List<InteractionTrigger> triggersInRange
		{
			[Token(Token = "0x6000723")]
			[Address(RVA = "0x12C5AEC", Offset = "0x12C5AEC", VA = "0x12C5AEC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000724")]
			[Address(RVA = "0x12C5AF4", Offset = "0x12C5AF4", VA = "0x12C5AF4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x12C3E5C", Offset = "0x12C3E5C", VA = "0x12C3E5C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0x12C3EA0", Offset = "0x12C3EA0", VA = "0x12C3EA0")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0x12C3EE4", Offset = "0x12C3EE4", VA = "0x12C3EE4")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0x12C3F28", Offset = "0x12C3F28", VA = "0x12C3F28")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0x12C3F6C", Offset = "0x12C3F6C", VA = "0x12C3F6C")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0x12C3FB0", Offset = "0x12C3FB0", VA = "0x12C3FB0")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0x12C3FF4", Offset = "0x12C3FF4", VA = "0x12C3FF4")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000706")]
		[Address(RVA = "0x12C4038", Offset = "0x12C4038", VA = "0x12C4038")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0x12C41F4", Offset = "0x12C41F4", VA = "0x12C41F4")]
		public bool IsInInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0x12C42AC", Offset = "0x12C42AC", VA = "0x12C42AC")]
		public bool IsPaused(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0x12C4364", Offset = "0x12C4364", VA = "0x12C4364")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0x12C43FC", Offset = "0x12C43FC", VA = "0x12C43FC")]
		public bool IsInSync()
		{
			return default(bool);
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0x12C44E0", Offset = "0x12C44E0", VA = "0x12C44E0")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0x12C45D8", Offset = "0x12C45D8", VA = "0x12C45D8")]
		public bool PauseInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0x12C465C", Offset = "0x12C465C", VA = "0x12C465C")]
		public bool ResumeInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0x12C46E0", Offset = "0x12C46E0", VA = "0x12C46E0")]
		public bool StopInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000710")]
		[Address(RVA = "0x12C4764", Offset = "0x12C4764", VA = "0x12C4764")]
		public void PauseAll()
		{
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0x12C47CC", Offset = "0x12C47CC", VA = "0x12C47CC")]
		public void ResumeAll()
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0x12C4834", Offset = "0x12C4834", VA = "0x12C4834")]
		public void StopAll()
		{
		}

		[Token(Token = "0x6000713")]
		[Address(RVA = "0x12C4890", Offset = "0x12C4890", VA = "0x12C4890")]
		public InteractionObject GetInteractionObject(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0x12C4910", Offset = "0x12C4910", VA = "0x12C4910")]
		public float GetProgress(FullBodyBipedEffector effectorType)
		{
			return default(float);
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0x12C49B8", Offset = "0x12C49B8", VA = "0x12C49B8")]
		public float GetMinActiveProgress()
		{
			return default(float);
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0x12C4A88", Offset = "0x12C4A88", VA = "0x12C4A88")]
		public bool TriggerInteraction(int index, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0x12C4D18", Offset = "0x12C4D18", VA = "0x12C4D18")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionObject interactionObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0x12C4ED4", Offset = "0x12C4ED4", VA = "0x12C4ED4")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionTarget interactionTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0x12C513C", Offset = "0x12C513C", VA = "0x12C513C")]
		public InteractionTrigger.Range GetClosestInteractionRange()
		{
			return null;
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0x12C53C8", Offset = "0x12C53C8", VA = "0x12C53C8")]
		public InteractionObject GetClosestInteractionObjectInRange()
		{
			return null;
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0x12C5400", Offset = "0x12C5400", VA = "0x12C5400")]
		public InteractionTarget GetClosestInteractionTargetInRange()
		{
			return null;
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0x12C5460", Offset = "0x12C5460", VA = "0x12C5460")]
		public InteractionObject[] GetClosestInteractionObjectsInRange()
		{
			return null;
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0x12C5568", Offset = "0x12C5568", VA = "0x12C5568")]
		public InteractionTarget[] GetClosestInteractionTargetsInRange()
		{
			return null;
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0x12C5748", Offset = "0x12C5748", VA = "0x12C5748")]
		public bool TriggerEffectorsReady(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x600071F")]
		[Address(RVA = "0x12C59BC", Offset = "0x12C59BC", VA = "0x12C59BC")]
		public InteractionTrigger.Range GetTriggerRange(int index)
		{
			return null;
		}

		[Token(Token = "0x6000720")]
		[Address(RVA = "0x12C5224", Offset = "0x12C5224", VA = "0x12C5224")]
		public int GetClosestTriggerIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000725")]
		[Address(RVA = "0x12C5AFC", Offset = "0x12C5AFC", VA = "0x12C5AFC")]
		public void Start()
		{
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0x12C6348", Offset = "0x12C6348", VA = "0x12C6348")]
		private void InteractionPause(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0x12C6368", Offset = "0x12C6368", VA = "0x12C6368")]
		private void InteractionResume(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0x12C6384", Offset = "0x12C6384", VA = "0x12C6384")]
		private void InteractionStop(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0x12C63A0", Offset = "0x12C63A0", VA = "0x12C63A0")]
		private void LookAtInteraction(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0x12C63F4", Offset = "0x12C63F4", VA = "0x12C63F4")]
		public void OnTriggerEnter(Collider c)
		{
		}

		[Token(Token = "0x600072B")]
		[Address(RVA = "0x12C6560", Offset = "0x12C6560", VA = "0x12C6560")]
		public void OnTriggerExit(Collider c)
		{
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0x12C665C", Offset = "0x12C665C", VA = "0x12C665C")]
		private bool ContactIsInRange(int index, out int bestRangeIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0x12C6808", Offset = "0x12C6808", VA = "0x12C6808")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0x12C68EC", Offset = "0x12C68EC", VA = "0x12C68EC")]
		public void Update()
		{
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0x12C6BD0", Offset = "0x12C6BD0", VA = "0x12C6BD0")]
		private void Raycasting()
		{
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0x12C6100", Offset = "0x12C6100", VA = "0x12C6100")]
		private void UpdateTriggerEventBroadcasting()
		{
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0x12C6D00", Offset = "0x12C6D00", VA = "0x12C6D00")]
		private void UpdateEffectors()
		{
		}

		[Token(Token = "0x6000732")]
		[Address(RVA = "0x12C6E0C", Offset = "0x12C6E0C", VA = "0x12C6E0C")]
		private void OnPreFBBIK()
		{
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0x12C6E94", Offset = "0x12C6E94", VA = "0x12C6E94")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0x12C6F54", Offset = "0x12C6F54", VA = "0x12C6F54")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0x12C6F6C", Offset = "0x12C6F6C", VA = "0x12C6F6C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0x12C4114", Offset = "0x12C4114", VA = "0x12C4114")]
		private bool IsValid(bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0x12C4C04", Offset = "0x12C4C04", VA = "0x12C4C04")]
		private bool TriggerIndexIsValid(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000738")]
		[Address(RVA = "0x12C7354", Offset = "0x12C7354", VA = "0x12C7354")]
		public InteractionSystem()
		{
		}
	}
	[Token(Token = "0x20000B9")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Target")]
	public class InteractionTarget : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000BA")]
		public class Multiplier
		{
			[Token(Token = "0x40005B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The curve type (InteractionObject.WeightCurve.Type).")]
			public InteractionObject.WeightCurve.Type curve;

			[Token(Token = "0x40005B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Multiplier of the curve's value.")]
			public float multiplier;

			[Token(Token = "0x600074D")]
			[Address(RVA = "0x12C7BB4", Offset = "0x12C7BB4", VA = "0x12C7BB4")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The type of the FBBIK effector.")]
		public FullBodyBipedEffector effectorType;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("InteractionObject weight curve multipliers for this effector target.")]
		public Multiplier[] multipliers;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The interaction speed multiplier for this effector. This can be used to make interactions faster/slower for specific effectors.")]
		public float interactionSpeedMlp;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The pivot to twist/swing this interaction target about. For symmetric objects that can be interacted with from a certain angular range.")]
		public Transform pivot;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The axis of twisting the interaction target (blue line).")]
		public Vector3 twistAxis;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The weight of twisting the interaction target towards the effector bone in the start of the interaction.")]
		public float twistWeight;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of swinging the interaction target towards the effector bone in the start of the interaction. Swing is defined as a 3-DOF rotation around any axis, while twist is only around the twist axis.")]
		public float swingWeight;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If true, will twist/swing around the pivot only once at the start of the interaction. If false, will continue rotating throuout the whole interaction.")]
		public bool rotateOnce;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform lastPivot;

		[Token(Token = "0x6000741")]
		[Address(RVA = "0x12C7924", Offset = "0x12C7924", VA = "0x12C7924")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0x12C7968", Offset = "0x12C7968", VA = "0x12C7968")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0x12C79AC", Offset = "0x12C79AC", VA = "0x12C79AC")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0x12C79F0", Offset = "0x12C79F0", VA = "0x12C79F0")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0x12C7A34", Offset = "0x12C7A34", VA = "0x12C7A34")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0x12C7A78", Offset = "0x12C7A78", VA = "0x12C7A78")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0x12C7ABC", Offset = "0x12C7ABC", VA = "0x12C7ABC")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0x12C7B00", Offset = "0x12C7B00", VA = "0x12C7B00")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0x12C3370", Offset = "0x12C3370", VA = "0x12C3370")]
		public float GetValue(InteractionObject.WeightCurve.Type curveType)
		{
			return default(float);
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0x12C2554", Offset = "0x12C2554", VA = "0x12C2554")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0x12C0D68", Offset = "0x12C0D68", VA = "0x12C0D68")]
		public void RotateTo(Vector3 position)
		{
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0x12C7B44", Offset = "0x12C7B44", VA = "0x12C7B44")]
		public InteractionTarget()
		{
		}
	}
	[Token(Token = "0x20000BB")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Trigger")]
	[HelpURL("https://www.youtube.com/watch?v=-TDZpNjt2mk&index=15&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class InteractionTrigger : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000BC")]
		public class CharacterPosition
		{
			[Token(Token = "0x40005BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("If false, will not care where the character stands, as long as it is in contact with the trigger collider.")]
			public bool use;

			[Token(Token = "0x40005BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The offset of the character's position relative to the trigger in XZ plane. Y position of the character is unlimited as long as it is contact with the collider.")]
			public Vector2 offset;

			[Token(Token = "0x40005BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Angle offset from the default forward direction.")]
			[Range(-180f, 180f)]
			public float angleOffset;

			[Token(Token = "0x40005BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Max angular offset of the character's forward from the direction of this trigger.")]
			[Range(0f, 180f)]
			public float maxAngle;

			[Token(Token = "0x40005BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Max offset of the character's position from this range's center.")]
			public float radius;

			[Token(Token = "0x40005C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("If true, will rotate the trigger around it's Y axis relative to the position of the character, so the object can be interacted with from all sides.")]
			public bool orbit;

			[Token(Token = "0x40005C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			[Tooltip("Fixes the Y axis of the trigger to Vector3.up. This makes the trigger symmetrical relative to the object. For example a gun will be able to be picked up from the same direction relative to the barrel no matter which side the gun is resting on.")]
			public bool fixYAxis;

			[Token(Token = "0x170000E1")]
			public Vector3 offset3D
			{
				[Token(Token = "0x6000756")]
				[Address(RVA = "0x12C7FD0", Offset = "0x12C7FD0", VA = "0x12C7FD0")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000E2")]
			public Vector3 direction3D
			{
				[Token(Token = "0x6000757")]
				[Address(RVA = "0x12C7FDC", Offset = "0x12C7FDC", VA = "0x12C7FDC")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6000758")]
			[Address(RVA = "0x12C809C", Offset = "0x12C809C", VA = "0x12C809C")]
			public bool IsInRange(Transform character, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6000759")]
			[Address(RVA = "0x12C8800", Offset = "0x12C8800", VA = "0x12C8800")]
			public CharacterPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000BD")]
		public class CameraPosition
		{
			[Token(Token = "0x40005C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("What the camera should be looking at to trigger the interaction? If null, this camera position will not be used.")]
			public Collider lookAtTarget;

			[Token(Token = "0x40005C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The direction from the lookAtTarget towards the camera (in lookAtTarget's space).")]
			public Vector3 direction;

			[Token(Token = "0x40005C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Max distance from the lookAtTarget to the camera.")]
			public float maxDistance;

			[Token(Token = "0x40005C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Max angle between the direction and the direction towards the camera.")]
			[Range(0f, 180f)]
			public float maxAngle;

			[Token(Token = "0x40005C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Fixes the Y axis of the trigger to Vector3.up. This makes the trigger symmetrical relative to the object.")]
			public bool fixYAxis;

			[Token(Token = "0x600075A")]
			[Address(RVA = "0x12C8814", Offset = "0x12C8814", VA = "0x12C8814")]
			public Quaternion GetRotation()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x600075B")]
			[Address(RVA = "0x12C898C", Offset = "0x12C898C", VA = "0x12C898C")]
			public bool IsInRange(Transform raycastFrom, RaycastHit hit, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x600075C")]
			[Address(RVA = "0x12C8C94", Offset = "0x12C8C94", VA = "0x12C8C94")]
			public CameraPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000BE")]
		public class Range
		{
			[Serializable]
			[Token(Token = "0x20000BF")]
			public class Interaction
			{
				[Token(Token = "0x40005CC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The InteractionObject to interact with.")]
				public InteractionObject interactionObject;

				[Token(Token = "0x40005CD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[Tooltip("The effectors to interact with.")]
				public FullBodyBipedEffector[] effectors;

				[Token(Token = "0x600075F")]
				[Address(RVA = "0x12C8D18", Offset = "0x12C8D18", VA = "0x12C8D18")]
				public Interaction()
				{
				}
			}

			[Token(Token = "0x40005C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			[SerializeField]
			public string name;

			[Token(Token = "0x40005C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			[SerializeField]
			public bool show;

			[Token(Token = "0x40005C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The range for the character's position and rotation.")]
			public CharacterPosition characterPosition;

			[Token(Token = "0x40005CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The range for the character camera's position and rotation.")]
			public CameraPosition cameraPosition;

			[Token(Token = "0x40005CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Definitions of the interactions associated with this range.")]
			public Interaction[] interactions;

			[Token(Token = "0x600075D")]
			[Address(RVA = "0x12C7EC8", Offset = "0x12C7EC8", VA = "0x12C7EC8")]
			public bool IsInRange(Transform character, Transform raycastFrom, RaycastHit raycastHit, Transform trigger, out float maxError)
			{
				return default(bool);
			}

			[Token(Token = "0x600075E")]
			[Address(RVA = "0x12C8D08", Offset = "0x12C8D08", VA = "0x12C8D08")]
			public Range()
			{
			}
		}

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The valid ranges of the character's and/or it's camera's position for triggering interaction when the character is in contact with the collider of this trigger.")]
		public Range[] ranges;

		[Token(Token = "0x600074E")]
		[Address(RVA = "0x12C7BBC", Offset = "0x12C7BBC", VA = "0x12C7BBC")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0x12C7C00", Offset = "0x12C7C00", VA = "0x12C7C00")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0x12C7C44", Offset = "0x12C7C44", VA = "0x12C7C44")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0x12C7C88", Offset = "0x12C7C88", VA = "0x12C7C88")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0x12C7CCC", Offset = "0x12C7CCC", VA = "0x12C7CCC")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0x12C7D10", Offset = "0x12C7D10", VA = "0x12C7D10")]
		private void Start()
		{
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0x12C7D14", Offset = "0x12C7D14", VA = "0x12C7D14")]
		public int GetBestRangeIndex(Transform character, Transform raycastFrom, RaycastHit raycastHit)
		{
			return default(int);
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0x12C7F78", Offset = "0x12C7F78", VA = "0x12C7F78")]
		public InteractionTrigger()
		{
		}
	}
	[Token(Token = "0x20000C0")]
	public class GenericPoser : Poser
	{
		[Serializable]
		[Token(Token = "0x20000C1")]
		public class Map
		{
			[Token(Token = "0x40005CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform bone;

			[Token(Token = "0x40005D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform target;

			[Token(Token = "0x40005D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector3 defaultLocalPosition;

			[Token(Token = "0x40005D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6000767")]
			[Address(RVA = "0x12C900C", Offset = "0x12C900C", VA = "0x12C900C")]
			public Map(Transform bone, Transform target)
			{
			}

			[Token(Token = "0x6000768")]
			[Address(RVA = "0x12C9348", Offset = "0x12C9348", VA = "0x12C9348")]
			public void StoreDefaultState()
			{
			}

			[Token(Token = "0x6000769")]
			[Address(RVA = "0x12C9308", Offset = "0x12C9308", VA = "0x12C9308")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x600076A")]
			[Address(RVA = "0x12C918C", Offset = "0x12C918C", VA = "0x12C918C")]
			public void Update(float localRotationWeight, float localPositionWeight)
			{
			}
		}

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Map[] maps;

		[Token(Token = "0x6000760")]
		[Address(RVA = "0x12C8D20", Offset = "0x12C8D20", VA = "0x12C8D20", Slot = "7")]
		[ContextMenu("Auto-Mapping")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0x12C9098", Offset = "0x12C9098", VA = "0x12C9098", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0x12C909C", Offset = "0x12C909C", VA = "0x12C909C", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0x12C92AC", Offset = "0x12C92AC", VA = "0x12C92AC", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0x12C903C", Offset = "0x12C903C", VA = "0x12C903C")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0x12C8F78", Offset = "0x12C8F78", VA = "0x12C8F78")]
		private Transform GetTargetNamed(string tName, Transform[] array)
		{
			return null;
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0x12C938C", Offset = "0x12C938C", VA = "0x12C938C")]
		public GenericPoser()
		{
		}
	}
	[Token(Token = "0x20000C2")]
	public class HandPoser : Poser
	{
		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform[] children;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _poseRoot;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] poseChildren;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x600076B")]
		[Address(RVA = "0x12C93AC", Offset = "0x12C93AC", VA = "0x12C93AC", Slot = "7")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0x12C9468", Offset = "0x12C9468", VA = "0x12C9468", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0x12C960C", Offset = "0x12C960C", VA = "0x12C960C", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0x12C96F4", Offset = "0x12C96F4", VA = "0x12C96F4", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0x12C94BC", Offset = "0x12C94BC", VA = "0x12C94BC")]
		protected void StoreDefaultState()
		{
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0x12C9A24", Offset = "0x12C9A24", VA = "0x12C9A24")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x20000C3")]
	public abstract class Poser : SolverManager
	{
		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform poseRoot;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float localRotationWeight;

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float localPositionWeight;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool initiated;

		[Token(Token = "0x6000771")]
		public abstract void AutoMapping();

		[Token(Token = "0x6000772")]
		[Address(RVA = "0x12C9A34", Offset = "0x12C9A34", VA = "0x12C9A34")]
		public void UpdateManual()
		{
		}

		[Token(Token = "0x6000773")]
		protected abstract void InitiatePoser();

		[Token(Token = "0x6000774")]
		protected abstract void UpdatePoser();

		[Token(Token = "0x6000775")]
		protected abstract void FixPoserTransforms();

		[Token(Token = "0x6000776")]
		[Address(RVA = "0x12C9A40", Offset = "0x12C9A40", VA = "0x12C9A40", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0x12C9A84", Offset = "0x12C9A84", VA = "0x12C9A84", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0x12C9AB0", Offset = "0x12C9AB0", VA = "0x12C9AB0", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0x12C939C", Offset = "0x12C939C", VA = "0x12C939C")]
		protected Poser()
		{
		}
	}
	[Token(Token = "0x20000C4")]
	[RequireComponent(typeof(Animator))]
	public class RagdollUtility : MonoBehaviour
	{
		[Token(Token = "0x20000C5")]
		public class Rigidbone
		{
			[Token(Token = "0x40005ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody r;

			[Token(Token = "0x40005EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform t;

			[Token(Token = "0x40005EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Collider collider;

			[Token(Token = "0x40005F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Joint joint;

			[Token(Token = "0x40005F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Rigidbody c;

			[Token(Token = "0x40005F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool updateAnchor;

			[Token(Token = "0x40005F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 deltaPosition;

			[Token(Token = "0x40005F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion deltaRotation;

			[Token(Token = "0x40005F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float deltaTime;

			[Token(Token = "0x40005F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 lastPosition;

			[Token(Token = "0x40005F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Quaternion lastRotation;

			[Token(Token = "0x600078C")]
			[Address(RVA = "0x12CA070", Offset = "0x12CA070", VA = "0x12CA070")]
			public Rigidbone(Rigidbody r)
			{
			}

			[Token(Token = "0x600078D")]
			[Address(RVA = "0x12CABB8", Offset = "0x12CABB8", VA = "0x12CABB8")]
			public void RecordVelocity()
			{
			}

			[Token(Token = "0x600078E")]
			[Address(RVA = "0x12CA978", Offset = "0x12CA978", VA = "0x12CA978")]
			public void WakeUp(float velocityWeight, float angularVelocityWeight)
			{
			}
		}

		[Token(Token = "0x20000C6")]
		public class Child
		{
			[Token(Token = "0x40005F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x40005F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 localPosition;

			[Token(Token = "0x40005FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion localRotation;

			[Token(Token = "0x600078F")]
			[Address(RVA = "0x12CA1C4", Offset = "0x12CA1C4", VA = "0x12CA1C4")]
			public Child(Transform transform)
			{
			}

			[Token(Token = "0x6000790")]
			[Address(RVA = "0x12CACD0", Offset = "0x12CACD0", VA = "0x12CACD0")]
			public void FixTransform(float weight)
			{
			}

			[Token(Token = "0x6000791")]
			[Address(RVA = "0x12CAC8C", Offset = "0x12CAC8C", VA = "0x12CAC8C")]
			public void StoreLocalState()
			{
			}
		}

		[Token(Token = "0x20000C7")]
		[CompilerGenerated]
		private sealed class <DisableRagdollSmooth>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40005FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40005FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40005FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RagdollUtility <>4__this;

			[Token(Token = "0x170000E5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000795")]
				[Address(RVA = "0x12CB1D4", Offset = "0x12CB1D4", VA = "0x12CB1D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000797")]
				[Address(RVA = "0x12CB21C", Offset = "0x12CB21C", VA = "0x12CB21C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000792")]
			[Address(RVA = "0x12CA220", Offset = "0x12CA220", VA = "0x12CA220")]
			[DebuggerHidden]
			public <DisableRagdollSmooth>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000793")]
			[Address(RVA = "0x12CAFF0", Offset = "0x12CAFF0", VA = "0x12CAFF0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000794")]
			[Address(RVA = "0x12CAFF4", Offset = "0x12CAFF4", VA = "0x12CAFF4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000796")]
			[Address(RVA = "0x12CB1DC", Offset = "0x12CB1DC", VA = "0x12CB1DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If you have multiple IK components, then this should be the one that solves last each frame.")]
		public IK ik;

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How long does it take to blend from ragdoll to animation?")]
		public float ragdollToAnimationTime;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true, IK can be used on top of physical ragdoll simulation.")]
		public bool applyIkOnRagdoll;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How much velocity transfer from animation to ragdoll?")]
		public float applyVelocity;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How much angular velocity to transfer from animation to ragdoll?")]
		public float applyAngularVelocity;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator animator;

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbone[] rigidbones;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Child[] children;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool enableRagdollFlag;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorUpdateMode animatorUpdateMode;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IK[] allIKComponents;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] fixTransforms;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float ragdollWeight;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float ragdollWeightV;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool fixedFrame;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] disabledIKComponents;

		[Token(Token = "0x170000E3")]
		private bool isRagdoll
		{
			[Token(Token = "0x6000785")]
			[Address(RVA = "0x12C9AF4", Offset = "0x12C9AF4", VA = "0x12C9AF4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E4")]
		private bool ikUsed
		{
			[Token(Token = "0x6000787")]
			[Address(RVA = "0x12CA5AC", Offset = "0x12CA5AC", VA = "0x12CA5AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0x12C9AC8", Offset = "0x12C9AC8", VA = "0x12C9AC8")]
		public void EnableRagdoll()
		{
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0x12C9B58", Offset = "0x12C9B58", VA = "0x12C9B58")]
		public void DisableRagdoll()
		{
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0x12C9C64", Offset = "0x12C9C64", VA = "0x12C9C64")]
		public void Start()
		{
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0x12C9BFC", Offset = "0x12C9BFC", VA = "0x12C9BFC")]
		[IteratorStateMachine(typeof(<DisableRagdollSmooth>d__21))]
		private IEnumerator DisableRagdollSmooth()
		{
			return null;
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0x12CA248", Offset = "0x12CA248", VA = "0x12CA248")]
		private void Update()
		{
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0x12CA470", Offset = "0x12CA470", VA = "0x12CA470")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0x12CA510", Offset = "0x12CA510", VA = "0x12CA510")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000781")]
		[Address(RVA = "0x12CA700", Offset = "0x12CA700", VA = "0x12CA700")]
		private void AfterLastIK()
		{
		}

		[Token(Token = "0x6000782")]
		[Address(RVA = "0x12CA580", Offset = "0x12CA580", VA = "0x12CA580")]
		private void AfterAnimation()
		{
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0x12CA6CC", Offset = "0x12CA6CC", VA = "0x12CA6CC")]
		private void OnFinalPose()
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0x12CA780", Offset = "0x12CA780", VA = "0x12CA780")]
		private void RagdollEnabler()
		{
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0x12CA724", Offset = "0x12CA724", VA = "0x12CA724")]
		private void RecordVelocities()
		{
		}

		[Token(Token = "0x6000788")]
		[Address(RVA = "0x12C9BA0", Offset = "0x12C9BA0", VA = "0x12C9BA0")]
		private void StoreLocalState()
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0x12CA4A4", Offset = "0x12CA4A4", VA = "0x12CA4A4")]
		private void FixTransforms(float weight)
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0x12CADE0", Offset = "0x12CADE0", VA = "0x12CADE0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0x12CAEF8", Offset = "0x12CAEF8", VA = "0x12CAEF8")]
		public RagdollUtility()
		{
		}
	}
	[Token(Token = "0x20000C8")]
	public abstract class RotationLimit : MonoBehaviour
	{
		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public Quaternion defaultLocalRotation;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool initiated;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		private bool applicationQuit;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		private bool defaultLocalRotationSet;

		[Token(Token = "0x170000E7")]
		public Vector3 secondaryAxis
		{
			[Token(Token = "0x600079D")]
			[Address(RVA = "0x12CB688", Offset = "0x12CB688", VA = "0x12CB688")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000E8")]
		public Vector3 crossAxis
		{
			[Token(Token = "0x600079E")]
			[Address(RVA = "0x12CB694", Offset = "0x12CB694", VA = "0x12CB694")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000E9")]
		public bool defaultLocalRotationOverride
		{
			[Token(Token = "0x600079F")]
			[Address(RVA = "0x12CB6C4", Offset = "0x12CB6C4", VA = "0x12CB6C4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007A0")]
			[Address(RVA = "0x12CB6CC", Offset = "0x12CB6CC", VA = "0x12CB6CC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0x12CB224", Offset = "0x12CB224", VA = "0x12CB224")]
		public void SetDefaultLocalRotation()
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0x12CB260", Offset = "0x12CB260", VA = "0x12CB260")]
		public void SetDefaultLocalRotation(Quaternion localRotation)
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0x12CB278", Offset = "0x12CB278", VA = "0x12CB278")]
		public Quaternion GetLimitedLocalRotation(Quaternion localRotation, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0x12CB5F8", Offset = "0x12CB5F8", VA = "0x12CB5F8")]
		public bool Apply()
		{
			return default(bool);
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0x12CB65C", Offset = "0x12CB65C", VA = "0x12CB65C")]
		public void Disable()
		{
		}

		[Token(Token = "0x60007A1")]
		protected abstract Quaternion LimitRotation(Quaternion rotation);

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x12CB4FC", Offset = "0x12CB4FC", VA = "0x12CB4FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x12CB6D8", Offset = "0x12CB6D8", VA = "0x12CB6D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x12CB6DC", Offset = "0x12CB6DC", VA = "0x12CB6DC")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x12CB704", Offset = "0x12CB704", VA = "0x12CB704")]
		protected static Quaternion Limit1DOF(Quaternion rotation, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x12CB7D8", Offset = "0x12CB7D8", VA = "0x12CB7D8")]
		protected static Quaternion LimitTwist(Quaternion rotation, Vector3 axis, Vector3 orthoAxis, float twistLimit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x12CBA30", Offset = "0x12CBA30", VA = "0x12CBA30")]
		protected static float GetOrthogonalAngle(Vector3 v1, Vector3 v2, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x12CBB84", Offset = "0x12CBB84", VA = "0x12CBB84")]
		protected RotationLimit()
		{
		}
	}
	[Token(Token = "0x20000C9")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Angle")]
	public class RotationLimitAngle : RotationLimit
	{
		[Token(Token = "0x4000604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float limit;

		[Token(Token = "0x4000605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x12CBBE4", Offset = "0x12CBBE4", VA = "0x12CBBE4")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x12CBC28", Offset = "0x12CBC28", VA = "0x12CBC28")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x12CBC6C", Offset = "0x12CBC6C", VA = "0x12CBC6C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x12CBCB0", Offset = "0x12CBCB0", VA = "0x12CBCB0")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x12CBCF4", Offset = "0x12CBCF4", VA = "0x12CBCF4", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x12CBD2C", Offset = "0x12CBD2C", VA = "0x12CBD2C")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x12CC050", Offset = "0x12CC050", VA = "0x12CC050")]
		public RotationLimitAngle()
		{
		}
	}
	[Token(Token = "0x20000CA")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Hinge")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	public class RotationLimitHinge : RotationLimit
	{
		[Token(Token = "0x4000606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useLimits;

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float min;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float max;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public float zeroAxisDisplayOffset;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion lastRotation;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float lastAngle;

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x12CC060", Offset = "0x12CC060", VA = "0x12CC060")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x12CC0A4", Offset = "0x12CC0A4", VA = "0x12CC0A4")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x12CC0E8", Offset = "0x12CC0E8", VA = "0x12CC0E8")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x12CC12C", Offset = "0x12CC12C", VA = "0x12CC12C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x12CC170", Offset = "0x12CC170", VA = "0x12CC170", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x12CC18C", Offset = "0x12CC18C", VA = "0x12CC18C")]
		private Quaternion LimitHinge(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x12CC3D4", Offset = "0x12CC3D4", VA = "0x12CC3D4")]
		public RotationLimitHinge()
		{
		}
	}
	[Token(Token = "0x20000CB")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Polygonal")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	public class RotationLimitPolygonal : RotationLimit
	{
		[Serializable]
		[Token(Token = "0x20000CC")]
		public class ReachCone
		{
			[Token(Token = "0x4000611")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] tetrahedron;

			[Token(Token = "0x4000612")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volume;

			[Token(Token = "0x4000613")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 S;

			[Token(Token = "0x4000614")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 B;

			[Token(Token = "0x170000EA")]
			public Vector3 o
			{
				[Token(Token = "0x60007C7")]
				[Address(RVA = "0x12CE168", Offset = "0x12CE168", VA = "0x12CE168")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000EB")]
			public Vector3 a
			{
				[Token(Token = "0x60007C8")]
				[Address(RVA = "0x12CE194", Offset = "0x12CE194", VA = "0x12CE194")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000EC")]
			public Vector3 b
			{
				[Token(Token = "0x60007C9")]
				[Address(RVA = "0x12CE1C4", Offset = "0x12CE1C4", VA = "0x12CE1C4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000ED")]
			public Vector3 c
			{
				[Token(Token = "0x60007CA")]
				[Address(RVA = "0x12CE1F4", Offset = "0x12CE1F4", VA = "0x12CE1F4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000EE")]
			public bool isValid
			{
				[Token(Token = "0x60007CC")]
				[Address(RVA = "0x12CD6B0", Offset = "0x12CD6B0", VA = "0x12CD6B0")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60007CB")]
			[Address(RVA = "0x12CDB54", Offset = "0x12CDB54", VA = "0x12CDB54")]
			public ReachCone(Vector3 _o, Vector3 _a, Vector3 _b, Vector3 _c)
			{
			}

			[Token(Token = "0x60007CD")]
			[Address(RVA = "0x12CDCB8", Offset = "0x12CDCB8", VA = "0x12CDCB8")]
			public void Calculate()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000CD")]
		public class LimitPoint
		{
			[Token(Token = "0x4000615")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 point;

			[Token(Token = "0x4000616")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float tangentWeight;

			[Token(Token = "0x60007CE")]
			[Address(RVA = "0x12CD6C0", Offset = "0x12CD6C0", VA = "0x12CD6C0")]
			public LimitPoint()
			{
			}
		}

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x400060D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 3f)]
		public int smoothIterations;

		[Token(Token = "0x400060E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		[SerializeField]
		public LimitPoint[] points;

		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		[SerializeField]
		public Vector3[] P;

		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		[SerializeField]
		public ReachCone[] reachCones;

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x12CC438", Offset = "0x12CC438", VA = "0x12CC438")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x12CC47C", Offset = "0x12CC47C", VA = "0x12CC47C")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x12CC4C0", Offset = "0x12CC4C0", VA = "0x12CC4C0")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x12CC504", Offset = "0x12CC504", VA = "0x12CC504")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x12CC548", Offset = "0x12CC548", VA = "0x12CC548")]
		public void SetLimitPoints(LimitPoint[] points)
		{
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x12CCB80", Offset = "0x12CCB80", VA = "0x12CCB80", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x12CCC08", Offset = "0x12CCC08", VA = "0x12CCC08")]
		private void Start()
		{
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x12CD1E8", Offset = "0x12CD1E8", VA = "0x12CD1E8")]
		public void ResetToDefault()
		{
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x12CC5D4", Offset = "0x12CC5D4", VA = "0x12CC5D4")]
		public void BuildReachCones()
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x12CD724", Offset = "0x12CD724", VA = "0x12CD724")]
		private Vector3[] SmoothPoints()
		{
			return null;
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x12CDF2C", Offset = "0x12CDF2C", VA = "0x12CDF2C")]
		private float GetScalar(int k)
		{
			return default(float);
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x12CDF74", Offset = "0x12CDF74", VA = "0x12CDF74")]
		private Vector3 PointToTangentPlane(Vector3 p, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x12CDFD4", Offset = "0x12CDFD4", VA = "0x12CDFD4")]
		private Vector3 TangentPointToSphere(Vector3 q, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x12CCF44", Offset = "0x12CCF44", VA = "0x12CCF44")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x12CE040", Offset = "0x12CE040", VA = "0x12CE040")]
		private int GetReachCone(Vector3 L)
		{
			return default(int);
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x12CE10C", Offset = "0x12CE10C", VA = "0x12CE10C")]
		public RotationLimitPolygonal()
		{
		}
	}
	[Token(Token = "0x20000CE")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page14.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Spline")]
	public class RotationLimitSpline : RotationLimit
	{
		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		[SerializeField]
		public AnimationCurve spline;

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x12CE224", Offset = "0x12CE224", VA = "0x12CE224")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x12CE268", Offset = "0x12CE268", VA = "0x12CE268")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x12CE2AC", Offset = "0x12CE2AC", VA = "0x12CE2AC")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x12CE2F0", Offset = "0x12CE2F0", VA = "0x12CE2F0")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x12CE334", Offset = "0x12CE334", VA = "0x12CE334")]
		public void SetSpline(Keyframe[] keyframes)
		{
		}

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x12CE350", Offset = "0x12CE350", VA = "0x12CE350", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x12CE388", Offset = "0x12CE388", VA = "0x12CE388")]
		public Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x12CE734", Offset = "0x12CE734", VA = "0x12CE734")]
		public RotationLimitSpline()
		{
		}
	}
	[Token(Token = "0x20000CF")]
	public class AimController : MonoBehaviour
	{
		[Token(Token = "0x20000D0")]
		[CompilerGenerated]
		private sealed class <TurnToTarget>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000634")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000635")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000636")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AimController <>4__this;

			[Token(Token = "0x170000F0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60007E1")]
				[Address(RVA = "0x12CF3F0", Offset = "0x12CF3F0", VA = "0x12CF3F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60007E3")]
				[Address(RVA = "0x12CF438", Offset = "0x12CF438", VA = "0x12CF438", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60007DE")]
			[Address(RVA = "0x12CF1FC", Offset = "0x12CF1FC", VA = "0x12CF1FC")]
			[DebuggerHidden]
			public <TurnToTarget>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x60007DF")]
			[Address(RVA = "0x12CF308", Offset = "0x12CF308", VA = "0x12CF308", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60007E0")]
			[Address(RVA = "0x12CF30C", Offset = "0x12CF30C", VA = "0x12CF30C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60007E2")]
			[Address(RVA = "0x12CF3F8", Offset = "0x12CF3F8", VA = "0x12CF3F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the AimIK component.")]
		public AimIK ik;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[Tooltip("Master weight of the IK solver.")]
		public float weight;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The target to aim at. Do not use the Target transform that is assigned to AimIK. Set to null if you wish to stop aiming.")]
		[Header("Target Smoothing")]
		public Transform target;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The time it takes to switch targets.")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The time it takes to blend in/out of AimIK weight.")]
		public float weightSmoothTime;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Turning Towards The Target")]
		[Tooltip("Enables smooth turning towards the target according to the parameters under this header.")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Speed of turning towards the target using Vector3.RotateTowards.")]
		public float maxRadiansDelta;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Speed of moving towards the target using Vector3.RotateTowards.")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Speed of slerping towards the target.")]
		public float slerpSpeed;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The position of the pivot that the aim target is rotated around relative to the root of the character.")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Minimum distance of aiming from the first bone. Keeps the solver from failing if the target is too close.")]
		public float minDistance;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Offset applied to the target in world space. Convenient for scripting aiming inaccuracy.")]
		public Vector3 offset;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("RootRotation")]
		[Range(0f, 180f)]
		[Tooltip("Character root will be rotate around the Y axis to keep root forward within this angle from the aiming direction.")]
		public float maxRootAngle;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("If enabled, aligns the root forward to target direction after 'Max Root Angle' has been exceeded.")]
		public bool turnToTarget;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("The time of turning towards the target direction if 'Max Root Angle has been exceeded and 'Turn To Target' is enabled.")]
		public float turnToTargetTime;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If true, AimIK will consider whatever the current direction of the weapon to be the forward aiming direction and work additively on top of that. This enables you to use recoil and reloading animations seamlessly with AimIK. Adjust the Vector3 value below if the weapon is not aiming perfectly forward in the aiming animation clip.")]
		[Header("Mode")]
		public bool useAnimatedAimDirection;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("The direction of the animated weapon aiming in character space. Tweak this value to adjust the aiming. 'Use Animated Aim Direction' must be enabled for this property to work.")]
		public Vector3 animatedAimDirection;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform lastTarget;

		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float switchWeight;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float switchWeightV;

		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float weightV;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 lastPosition;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 dir;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool turningToTarget;

		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float turnToTargetMlp;

		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float turnToTargetMlpV;

		[Token(Token = "0x170000EF")]
		private Vector3 pivot
		{
			[Token(Token = "0x60007D9")]
			[Address(RVA = "0x12CE7BC", Offset = "0x12CE7BC", VA = "0x12CE7BC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x12CE740", Offset = "0x12CE740", VA = "0x12CE740")]
		private void Start()
		{
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x12CE840", Offset = "0x12CE840", VA = "0x12CE840")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x12CED6C", Offset = "0x12CED6C", VA = "0x12CED6C")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x12CEEF0", Offset = "0x12CEEF0", VA = "0x12CEEF0")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x12CF194", Offset = "0x12CF194", VA = "0x12CF194")]
		[IteratorStateMachine(typeof(<TurnToTarget>d__33))]
		private IEnumerator TurnToTarget()
		{
			return null;
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x12CF224", Offset = "0x12CF224", VA = "0x12CF224")]
		public AimController()
		{
		}
	}
	[Token(Token = "0x20000D1")]
	public class AimPoser : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000D2")]
		public class Pose
		{
			[Token(Token = "0x4000639")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool visualize;

			[Token(Token = "0x400063A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x400063B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 direction;

			[Token(Token = "0x400063C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float yaw;

			[Token(Token = "0x400063D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float pitch;

			[Token(Token = "0x400063E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float angleBuffer;

			[Token(Token = "0x60007E7")]
			[Address(RVA = "0x12CF510", Offset = "0x12CF510", VA = "0x12CF510")]
			public bool IsInDirection(Vector3 d)
			{
				return default(bool);
			}

			[Token(Token = "0x60007E8")]
			[Address(RVA = "0x12CFA80", Offset = "0x12CFA80", VA = "0x12CFA80")]
			public void SetAngleBuffer(float value)
			{
			}

			[Token(Token = "0x60007E9")]
			[Address(RVA = "0x12CFA88", Offset = "0x12CFA88", VA = "0x12CFA88")]
			public Pose()
			{
			}
		}

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float angleBuffer;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pose[] poses;

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x12CF440", Offset = "0x12CF440", VA = "0x12CF440")]
		public Pose GetPose(Vector3 localDirection)
		{
			return null;
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x12CF9C0", Offset = "0x12CF9C0", VA = "0x12CF9C0")]
		public void SetPoseActive(Pose pose)
		{
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x12CFA20", Offset = "0x12CFA20", VA = "0x12CFA20")]
		public AimPoser()
		{
		}
	}
	[Token(Token = "0x20000D3")]
	public class Amplifier : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20000D4")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x20000D5")]
			public class EffectorLink
			{
				[Token(Token = "0x4000649")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x400064A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x60007EF")]
				[Address(RVA = "0x12CFF4C", Offset = "0x12CFF4C", VA = "0x12CFF4C")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000640")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Transform that's motion we are reading.")]
			public Transform transform;

			[Token(Token = "0x4000641")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Amplify the 'transform's' position relative to this Transform.")]
			public Transform relativeTo;

			[Token(Token = "0x4000642")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Linking the body to effectors. One Body can be used to offset more than one effector.")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000643")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Amplification magnitude along the up axis of the character.")]
			public float verticalWeight;

			[Token(Token = "0x4000644")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Amplification magnitude along the horizontal axes of the character.")]
			public float horizontalWeight;

			[Token(Token = "0x4000645")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Speed of the amplifier. 0 means instant.")]
			public float speed;

			[Token(Token = "0x4000646")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 lastRelativePos;

			[Token(Token = "0x4000647")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 smoothDelta;

			[Token(Token = "0x4000648")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private bool firstUpdate;

			[Token(Token = "0x60007EC")]
			[Address(RVA = "0x12CFBF4", Offset = "0x12CFBF4", VA = "0x12CFBF4")]
			public void Update(IKSolverFullBodyBiped solver, float w, float deltaTime)
			{
			}

			[Token(Token = "0x60007ED")]
			[Address(RVA = "0x12CFF24", Offset = "0x12CFF24", VA = "0x12CFF24")]
			private static Vector3 Multiply(Vector3 v1, Vector3 v2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60007EE")]
			[Address(RVA = "0x12CFF34", Offset = "0x12CFF34", VA = "0x12CFF34")]
			public Body()
			{
			}
		}

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The amplified bodies.")]
		public Body[] bodies;

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x12CFAA4", Offset = "0x12CFAA4", VA = "0x12CFAA4", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x12CFF04", Offset = "0x12CFF04", VA = "0x12CFF04")]
		public Amplifier()
		{
		}
	}
	[Token(Token = "0x20000D6")]
	public class BodyTilt : OffsetModifier
	{
		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Speed of tilting")]
		public float tiltSpeed;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Sensitivity of tilting")]
		public float tiltSensitivity;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The OffsetPose components")]
		public OffsetPose poseLeft;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The OffsetPose components")]
		public OffsetPose poseRight;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float tiltAngle;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 lastForward;

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x12CFF54", Offset = "0x12CFF54", VA = "0x12CFF54", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x12CFFBC", Offset = "0x12CFFBC", VA = "0x12CFFBC", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x12D025C", Offset = "0x12D025C", VA = "0x12D025C")]
		public BodyTilt()
		{
		}
	}
	[Token(Token = "0x20000D7")]
	[ExecuteInEditMode]
	public class EditorIK : MonoBehaviour
	{
		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IK ik;

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x12D0278", Offset = "0x12D0278", VA = "0x12D0278")]
		private void Start()
		{
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x12D0304", Offset = "0x12D0304", VA = "0x12D0304")]
		private void Update()
		{
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x12D03C4", Offset = "0x12D03C4", VA = "0x12D03C4")]
		public EditorIK()
		{
		}
	}
	[Token(Token = "0x20000D8")]
	public class HitReaction : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20000D9")]
		public abstract class HitPoint
		{
			[Token(Token = "0x4000654")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Just for visual clarity, not used at all")]
			public string name;

			[Token(Token = "0x4000655")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking this hit point to a collider")]
			public Collider collider;

			[Token(Token = "0x4000656")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[Tooltip("Only used if this hit point gets hit when already processing another hit")]
			private float crossFadeTime;

			[Token(Token = "0x400065B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x400065C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x400065D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x170000F3")]
			public bool inProgress
			{
				[Token(Token = "0x60007FA")]
				[Address(RVA = "0x12D0468", Offset = "0x12D0468", VA = "0x12D0468")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000F4")]
			protected float crossFader
			{
				[Token(Token = "0x60007FB")]
				[Address(RVA = "0x12D0968", Offset = "0x12D0968", VA = "0x12D0968")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60007FC")]
				[Address(RVA = "0x12D0970", Offset = "0x12D0970", VA = "0x12D0970")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000F5")]
			protected float timer
			{
				[Token(Token = "0x60007FD")]
				[Address(RVA = "0x12D0978", Offset = "0x12D0978", VA = "0x12D0978")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60007FE")]
				[Address(RVA = "0x12D0980", Offset = "0x12D0980", VA = "0x12D0980")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000F6")]
			protected Vector3 force
			{
				[Token(Token = "0x60007FF")]
				[Address(RVA = "0x12D0988", Offset = "0x12D0988", VA = "0x12D0988")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000800")]
				[Address(RVA = "0x12D0994", Offset = "0x12D0994", VA = "0x12D0994")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000F7")]
			protected Vector3 point
			{
				[Token(Token = "0x6000801")]
				[Address(RVA = "0x12D09A0", Offset = "0x12D09A0", VA = "0x12D09A0")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000802")]
				[Address(RVA = "0x12D09AC", Offset = "0x12D09AC", VA = "0x12D09AC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000803")]
			[Address(RVA = "0x12D0830", Offset = "0x12D0830", VA = "0x12D0830")]
			public void Hit(Vector3 force, Vector3 point)
			{
			}

			[Token(Token = "0x6000804")]
			[Address(RVA = "0x12D053C", Offset = "0x12D053C", VA = "0x12D053C")]
			public void Apply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000805")]
			protected abstract float GetLength();

			[Token(Token = "0x6000806")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6000807")]
			protected abstract void OnApply(IKSolverFullBodyBiped solver, float weight);

			[Token(Token = "0x6000808")]
			[Address(RVA = "0x12D09B8", Offset = "0x12D09B8", VA = "0x12D09B8")]
			protected HitPoint()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000DA")]
		public class HitPointEffector : HitPoint
		{
			[Serializable]
			[Token(Token = "0x20000DB")]
			public class EffectorLink
			{
				[Token(Token = "0x4000661")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The FBBIK effector type")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000662")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("The weight of this effector (could also be negative)")]
				public float weight;

				[Token(Token = "0x4000663")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4000664")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x600080D")]
				[Address(RVA = "0x12D0CEC", Offset = "0x12D0CEC", VA = "0x12D0CEC")]
				public void Apply(IKSolverFullBodyBiped solver, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x600080E")]
				[Address(RVA = "0x12D0B48", Offset = "0x12D0B48", VA = "0x12D0B48")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x600080F")]
				[Address(RVA = "0x12D0D9C", Offset = "0x12D0D9C", VA = "0x12D0D9C")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x400065E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Offset magnitude in the direction of the hit force")]
			public AnimationCurve offsetInForceDirection;

			[Token(Token = "0x400065F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Offset magnitude in the direction of character.up")]
			public AnimationCurve offsetInUpDirection;

			[Token(Token = "0x4000660")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Linking this offset to the FBBIK effectors")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x6000809")]
			[Address(RVA = "0x12D09CC", Offset = "0x12D09CC", VA = "0x12D09CC", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x600080A")]
			[Address(RVA = "0x12D0AE8", Offset = "0x12D0AE8", VA = "0x12D0AE8", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x600080B")]
			[Address(RVA = "0x12D0B5C", Offset = "0x12D0B5C", VA = "0x12D0B5C", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x600080C")]
			[Address(RVA = "0x12D0D88", Offset = "0x12D0D88", VA = "0x12D0D88")]
			public HitPointEffector()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000DC")]
		public class HitPointBone : HitPoint
		{
			[Serializable]
			[Token(Token = "0x20000DD")]
			public class BoneLink
			{
				[Token(Token = "0x4000668")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Reference to the bone that this hit point rotates")]
				public Transform bone;

				[Token(Token = "0x4000669")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[Range(0f, 1f)]
				[Tooltip("Weight of rotating the bone")]
				public float weight;

				[Token(Token = "0x400066A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				private Quaternion lastValue;

				[Token(Token = "0x400066B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
				private Quaternion current;

				[Token(Token = "0x6000814")]
				[Address(RVA = "0x12D105C", Offset = "0x12D105C", VA = "0x12D105C")]
				public void Apply(IKSolverFullBodyBiped solver, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6000815")]
				[Address(RVA = "0x12D0E88", Offset = "0x12D0E88", VA = "0x12D0E88")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000816")]
				[Address(RVA = "0x12D11FC", Offset = "0x12D11FC", VA = "0x12D11FC")]
				public BoneLink()
				{
				}
			}

			[Token(Token = "0x4000665")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The angle to rotate the bone around it's rigidbody's world center of mass")]
			public AnimationCurve aroundCenterOfMass;

			[Token(Token = "0x4000666")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this hit point to bone(s)")]
			public BoneLink[] boneLinks;

			[Token(Token = "0x4000667")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x6000810")]
			[Address(RVA = "0x12D0DA4", Offset = "0x12D0DA4", VA = "0x12D0DA4", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6000811")]
			[Address(RVA = "0x12D0E30", Offset = "0x12D0E30", VA = "0x12D0E30", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000812")]
			[Address(RVA = "0x12D0E94", Offset = "0x12D0E94", VA = "0x12D0E94", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000813")]
			[Address(RVA = "0x12D11E8", Offset = "0x12D11E8", VA = "0x12D11E8")]
			public HitPointBone()
			{
			}
		}

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Hit points for the FBBIK effectors")]
		public HitPointEffector[] effectorHitPoints;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip(" Hit points for bones without an effector, such as the head")]
		public HitPointBone[] boneHitPoints;

		[Token(Token = "0x170000F2")]
		public bool inProgress
		{
			[Token(Token = "0x60007F6")]
			[Address(RVA = "0x12D03CC", Offset = "0x12D03CC", VA = "0x12D03CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x12D047C", Offset = "0x12D047C", VA = "0x12D047C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x12D0614", Offset = "0x12D0614", VA = "0x12D0614")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x12D0958", Offset = "0x12D0958", VA = "0x12D0958")]
		public HitReaction()
		{
		}
	}
	[Token(Token = "0x20000DE")]
	public class HitReactionVRIK : OffsetModifierVRIK
	{
		[Serializable]
		[Token(Token = "0x20000DF")]
		public abstract class Offset
		{
			[Token(Token = "0x400066F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Just for visual clarity, not used at all")]
			public string name;

			[Token(Token = "0x4000670")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking this hit point to a collider")]
			public Collider collider;

			[Token(Token = "0x4000671")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[Tooltip("Only used if this hit point gets hit when already processing another hit")]
			private float crossFadeTime;

			[Token(Token = "0x4000676")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4000677")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4000678")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x170000F8")]
			protected float crossFader
			{
				[Token(Token = "0x600081A")]
				[Address(RVA = "0x12D176C", Offset = "0x12D176C", VA = "0x12D176C")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600081B")]
				[Address(RVA = "0x12D1774", Offset = "0x12D1774", VA = "0x12D1774")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000F9")]
			protected float timer
			{
				[Token(Token = "0x600081C")]
				[Address(RVA = "0x12D177C", Offset = "0x12D177C", VA = "0x12D177C")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600081D")]
				[Address(RVA = "0x12D1784", Offset = "0x12D1784", VA = "0x12D1784")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000FA")]
			protected Vector3 force
			{
				[Token(Token = "0x600081E")]
				[Address(RVA = "0x12D178C", Offset = "0x12D178C", VA = "0x12D178C")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600081F")]
				[Address(RVA = "0x12D1798", Offset = "0x12D1798", VA = "0x12D1798")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000FB")]
			protected Vector3 point
			{
				[Token(Token = "0x6000820")]
				[Address(RVA = "0x12D17A4", Offset = "0x12D17A4", VA = "0x12D17A4")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000821")]
				[Address(RVA = "0x12D17B0", Offset = "0x12D17B0", VA = "0x12D17B0")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000822")]
			[Address(RVA = "0x12D161C", Offset = "0x12D161C", VA = "0x12D161C")]
			public void Hit(Vector3 force, AnimationCurve[] curves, Vector3 point)
			{
			}

			[Token(Token = "0x6000823")]
			[Address(RVA = "0x12D1318", Offset = "0x12D1318", VA = "0x12D1318")]
			public void Apply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000824")]
			protected abstract float GetLength(AnimationCurve[] curves);

			[Token(Token = "0x6000825")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6000826")]
			protected abstract void OnApply(VRIK ik, AnimationCurve[] curves, float weight);

			[Token(Token = "0x6000827")]
			[Address(RVA = "0x12D17BC", Offset = "0x12D17BC", VA = "0x12D17BC")]
			protected Offset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000E0")]
		public class PositionOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x20000E1")]
			public class PositionOffsetLink
			{
				[Token(Token = "0x400067C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The FBBIK effector type")]
				public IKSolverVR.PositionOffset positionOffset;

				[Token(Token = "0x400067D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("The weight of this effector (could also be negative)")]
				public float weight;

				[Token(Token = "0x400067E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x400067F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x600082C")]
				[Address(RVA = "0x12D1BA0", Offset = "0x12D1BA0", VA = "0x12D1BA0")]
				public void Apply(VRIK ik, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x600082D")]
				[Address(RVA = "0x12D19C4", Offset = "0x12D19C4", VA = "0x12D19C4")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x600082E")]
				[Address(RVA = "0x12D1C34", Offset = "0x12D1C34", VA = "0x12D1C34")]
				public PositionOffsetLink()
				{
				}
			}

			[Token(Token = "0x4000679")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Offset magnitude in the direction of the hit force")]
			public int forceDirCurveIndex;

			[Token(Token = "0x400067A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Tooltip("Offset magnitude in the direction of character.up")]
			public int upDirCurveIndex;

			[Token(Token = "0x400067B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this offset to the VRIK position offsets")]
			public PositionOffsetLink[] offsetLinks;

			[Token(Token = "0x6000828")]
			[Address(RVA = "0x12D17D0", Offset = "0x12D17D0", VA = "0x12D17D0", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6000829")]
			[Address(RVA = "0x12D1964", Offset = "0x12D1964", VA = "0x12D1964", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x600082A")]
			[Address(RVA = "0x12D19D8", Offset = "0x12D19D8", VA = "0x12D19D8", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x600082B")]
			[Address(RVA = "0x12D1C18", Offset = "0x12D1C18", VA = "0x12D1C18")]
			public PositionOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000E2")]
		public class RotationOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x20000E3")]
			public class RotationOffsetLink
			{
				[Token(Token = "0x4000683")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Reference to the bone that this hit point rotates")]
				public IKSolverVR.RotationOffset rotationOffset;

				[Token(Token = "0x4000684")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Range(0f, 1f)]
				[Tooltip("Weight of rotating the bone")]
				public float weight;

				[Token(Token = "0x4000685")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Quaternion lastValue;

				[Token(Token = "0x4000686")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private Quaternion current;

				[Token(Token = "0x6000833")]
				[Address(RVA = "0x12D1FF4", Offset = "0x12D1FF4", VA = "0x12D1FF4")]
				public void Apply(VRIK ik, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6000834")]
				[Address(RVA = "0x12D1D6C", Offset = "0x12D1D6C", VA = "0x12D1D6C")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000835")]
				[Address(RVA = "0x12D2110", Offset = "0x12D2110", VA = "0x12D2110")]
				public RotationOffsetLink()
				{
				}
			}

			[Token(Token = "0x4000680")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The angle to rotate the bone around it's rigidbody's world center of mass")]
			public int curveIndex;

			[Token(Token = "0x4000681")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this hit point to bone(s)")]
			public RotationOffsetLink[] offsetLinks;

			[Token(Token = "0x4000682")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x600082F")]
			[Address(RVA = "0x12D1C3C", Offset = "0x12D1C3C", VA = "0x12D1C3C", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6000830")]
			[Address(RVA = "0x12D1D14", Offset = "0x12D1D14", VA = "0x12D1D14", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000831")]
			[Address(RVA = "0x12D1D78", Offset = "0x12D1D78", VA = "0x12D1D78", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000832")]
			[Address(RVA = "0x12D20FC", Offset = "0x12D20FC", VA = "0x12D20FC")]
			public RotationOffset()
			{
			}
		}

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve[] offsetCurves;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Hit points for the FBBIK effectors")]
		public PositionOffset[] positionOffsets;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip(" Hit points for bones without an effector, such as the head")]
		public RotationOffset[] rotationOffsets;

		[Token(Token = "0x6000817")]
		[Address(RVA = "0x12D1260", Offset = "0x12D1260", VA = "0x12D1260", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0x12D13F8", Offset = "0x12D13F8", VA = "0x12D13F8")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0x12D174C", Offset = "0x12D174C", VA = "0x12D174C")]
		public HitReactionVRIK()
		{
		}
	}
	[Token(Token = "0x20000E4")]
	public class Inertia : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20000E5")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x20000E6")]
			public class EffectorLink
			{
				[Token(Token = "0x4000694")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000695")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x600083C")]
				[Address(RVA = "0x12D26D8", Offset = "0x12D26D8", VA = "0x12D26D8")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000689")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Transform to follow, can be any bone of the character")]
			public Transform transform;

			[Token(Token = "0x400068A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking the body to effectors. One Body can be used to offset more than one effector")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x400068B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The speed to follow the Transform")]
			public float speed;

			[Token(Token = "0x400068C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("The acceleration, smaller values means lazyer following")]
			public float acceleration;

			[Token(Token = "0x400068D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Matching target velocity")]
			[Range(0f, 1f)]
			public float matchVelocity;

			[Token(Token = "0x400068E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("gravity applied to the Body")]
			public float gravity;

			[Token(Token = "0x400068F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 delta;

			[Token(Token = "0x4000690")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lazyPoint;

			[Token(Token = "0x4000691")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 direction;

			[Token(Token = "0x4000692")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 lastPosition;

			[Token(Token = "0x4000693")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private bool firstUpdate;

			[Token(Token = "0x6000839")]
			[Address(RVA = "0x12D21E0", Offset = "0x12D21E0", VA = "0x12D21E0")]
			public void Reset()
			{
			}

			[Token(Token = "0x600083A")]
			[Address(RVA = "0x12D2360", Offset = "0x12D2360", VA = "0x12D2360")]
			public void Update(IKSolverFullBodyBiped solver, float weight, float deltaTime)
			{
			}

			[Token(Token = "0x600083B")]
			[Address(RVA = "0x12D26BC", Offset = "0x12D26BC", VA = "0x12D26BC")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The array of Bodies")]
		public Body[] bodies;

		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The array of OffsetLimits")]
		public OffsetLimits[] limits;

		[Token(Token = "0x6000836")]
		[Address(RVA = "0x12D2174", Offset = "0x12D2174", VA = "0x12D2174")]
		public void ResetBodies()
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0x12D22BC", Offset = "0x12D22BC", VA = "0x12D22BC", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0x12D26AC", Offset = "0x12D26AC", VA = "0x12D26AC")]
		public Inertia()
		{
		}
	}
	[Token(Token = "0x20000E7")]
	public class LookAtController : MonoBehaviour
	{
		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LookAtIK ik;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The target to look at. Do not use the Target transform that is assigned to LookAtIK. Set to null if you wish to stop looking.")]
		[Header("Target Smoothing")]
		public Transform target;

		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 offset;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The time it takes to switch targets.")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The time it takes to blend in/out of LookAtIK weight.")]
		public float weightSmoothTime;

		[Token(Token = "0x400069C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Enables smooth turning towards the target according to the parameters under this header.")]
		[Header("Turning Towards The Target")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x400069D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Speed of turning towards the target using Vector3.RotateTowards.")]
		public float maxRadiansDelta;

		[Token(Token = "0x400069E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Speed of moving towards the target using Vector3.RotateTowards.")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x400069F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Speed of slerping towards the target.")]
		public float slerpSpeed;

		[Token(Token = "0x40006A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The position of the pivot that the look at target is rotated around relative to the root of the character.")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x40006A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Minimum distance of looking from the first bone. Keeps the solver from failing if the target is too close.")]
		public float minDistance;

		[Token(Token = "0x40006A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("RootRotation")]
		[Tooltip("Character root will be rotate around the Y axis to keep root forward within this angle from the look direction.")]
		[Range(0f, 180f)]
		public float maxRootAngle;

		[Token(Token = "0x40006A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lastTarget;

		[Token(Token = "0x40006A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float switchWeight;

		[Token(Token = "0x40006A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float switchWeightV;

		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float weightV;

		[Token(Token = "0x40006A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 lastPosition;

		[Token(Token = "0x40006A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 dir;

		[Token(Token = "0x40006A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x170000FC")]
		private Vector3 pivot
		{
			[Token(Token = "0x600083F")]
			[Address(RVA = "0x12D2748", Offset = "0x12D2748", VA = "0x12D2748")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0x12D26E0", Offset = "0x12D26E0", VA = "0x12D26E0")]
		private void Start()
		{
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0x12D27CC", Offset = "0x12D27CC", VA = "0x12D27CC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0x12D2CB4", Offset = "0x12D2CB4", VA = "0x12D2CB4")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0x12D2E38", Offset = "0x12D2E38", VA = "0x12D2E38")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x12D3084", Offset = "0x12D3084", VA = "0x12D3084")]
		public LookAtController()
		{
		}
	}
	[Token(Token = "0x20000E8")]
	public abstract class OffsetModifier : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000E9")]
		public class OffsetLimits
		{
			[Token(Token = "0x40006AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The effector type (this is just an enum)")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x40006AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Spring force, if zero then this is a hard limit, if not, offset can exceed the limit.")]
			public float spring;

			[Token(Token = "0x40006AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool x;

			[Token(Token = "0x40006B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool y;

			[Token(Token = "0x40006B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool z;

			[Token(Token = "0x40006B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("The limits")]
			public float minX;

			[Token(Token = "0x40006B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The limits")]
			public float maxX;

			[Token(Token = "0x40006B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("The limits")]
			public float minY;

			[Token(Token = "0x40006B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The limits")]
			public float maxY;

			[Token(Token = "0x40006B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("The limits")]
			public float minZ;

			[Token(Token = "0x40006B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The limits")]
			public float maxZ;

			[Token(Token = "0x600084B")]
			[Address(RVA = "0x12D3280", Offset = "0x12D3280", VA = "0x12D3280")]
			public void Apply(IKEffector e, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x600084C")]
			[Address(RVA = "0x12D34F0", Offset = "0x12D34F0", VA = "0x12D34F0")]
			private float SpringAxis(float value, float min, float max)
			{
				return default(float);
			}

			[Token(Token = "0x600084D")]
			[Address(RVA = "0x12D3560", Offset = "0x12D3560", VA = "0x12D3560")]
			private float Spring(float value, float limit, bool negative)
			{
				return default(float);
			}

			[Token(Token = "0x600084E")]
			[Address(RVA = "0x12D35A8", Offset = "0x12D35A8", VA = "0x12D35A8")]
			public OffsetLimits()
			{
			}
		}

		[Token(Token = "0x20000EA")]
		[CompilerGenerated]
		private sealed class <Initiate>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40006BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifier <>4__this;

			[Token(Token = "0x170000FE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000852")]
				[Address(RVA = "0x12D3704", Offset = "0x12D3704", VA = "0x12D3704", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000FF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000854")]
				[Address(RVA = "0x12D374C", Offset = "0x12D374C", VA = "0x12D374C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600084F")]
			[Address(RVA = "0x12D3184", Offset = "0x12D3184", VA = "0x12D3184")]
			[DebuggerHidden]
			public <Initiate>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000850")]
			[Address(RVA = "0x12D35B0", Offset = "0x12D35B0", VA = "0x12D35B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000851")]
			[Address(RVA = "0x12D35B4", Offset = "0x12D35B4", VA = "0x12D35B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000853")]
			[Address(RVA = "0x12D370C", Offset = "0x12D370C", VA = "0x12D370C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x40006AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the FBBIK component")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float lastTime;

		[Token(Token = "0x170000FD")]
		protected float deltaTime
		{
			[Token(Token = "0x6000843")]
			[Address(RVA = "0x12CFBD4", Offset = "0x12CFBD4", VA = "0x12CFBD4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000844")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6000845")]
		[Address(RVA = "0x12CFF9C", Offset = "0x12CFF9C", VA = "0x12CFF9C", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0x12D311C", Offset = "0x12D311C", VA = "0x12D311C")]
		[IteratorStateMachine(typeof(<Initiate>d__8))]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0x12D31AC", Offset = "0x12D31AC", VA = "0x12D31AC")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6000848")]
		[Address(RVA = "0x12D2604", Offset = "0x12D2604", VA = "0x12D2604")]
		protected void ApplyLimits(OffsetLimits[] limits)
		{
		}

		[Token(Token = "0x6000849")]
		[Address(RVA = "0x12D33E4", Offset = "0x12D33E4", VA = "0x12D33E4", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0x12CFF14", Offset = "0x12CFF14", VA = "0x12CFF14")]
		protected OffsetModifier()
		{
		}
	}
	[Token(Token = "0x20000EB")]
	public abstract class OffsetModifierVRIK : MonoBehaviour
	{
		[Token(Token = "0x20000EC")]
		[CompilerGenerated]
		private sealed class <Initiate>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40006C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifierVRIK <>4__this;

			[Token(Token = "0x17000101")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600085F")]
				[Address(RVA = "0x12D3B58", Offset = "0x12D3B58", VA = "0x12D3B58", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000102")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000861")]
				[Address(RVA = "0x12D3BA0", Offset = "0x12D3BA0", VA = "0x12D3BA0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600085C")]
			[Address(RVA = "0x12D37FC", Offset = "0x12D37FC", VA = "0x12D37FC")]
			[DebuggerHidden]
			public <Initiate>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x600085D")]
			[Address(RVA = "0x12D3A04", Offset = "0x12D3A04", VA = "0x12D3A04", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600085E")]
			[Address(RVA = "0x12D3A08", Offset = "0x12D3A08", VA = "0x12D3A08", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000860")]
			[Address(RVA = "0x12D3B60", Offset = "0x12D3B60", VA = "0x12D3B60", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the VRIK component")]
		public VRIK ik;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastTime;

		[Token(Token = "0x17000100")]
		protected float deltaTime
		{
			[Token(Token = "0x6000855")]
			[Address(RVA = "0x12D3754", Offset = "0x12D3754", VA = "0x12D3754")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000856")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6000857")]
		[Address(RVA = "0x12D3774", Offset = "0x12D3774", VA = "0x12D3774", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0x12D3794", Offset = "0x12D3794", VA = "0x12D3794")]
		[IteratorStateMachine(typeof(<Initiate>d__7))]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0x12D3824", Offset = "0x12D3824", VA = "0x12D3824")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0x12D38F8", Offset = "0x12D38F8", VA = "0x12D38F8", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0x12D175C", Offset = "0x12D175C", VA = "0x12D175C")]
		protected OffsetModifierVRIK()
		{
		}
	}
	[Token(Token = "0x20000ED")]
	public class OffsetPose : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000EE")]
		public class EffectorLink
		{
			[Token(Token = "0x40006C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x40006C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 offset;

			[Token(Token = "0x40006C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 pin;

			[Token(Token = "0x40006C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 pinWeight;

			[Token(Token = "0x6000865")]
			[Address(RVA = "0x12D3BA8", Offset = "0x12D3BA8", VA = "0x12D3BA8")]
			public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000866")]
			[Address(RVA = "0x12D3EF4", Offset = "0x12D3EF4", VA = "0x12D3EF4")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000862")]
		[Address(RVA = "0x12D01A8", Offset = "0x12D01A8", VA = "0x12D01A8")]
		public void Apply(IKSolverFullBodyBiped solver, float weight)
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0x12D3DF8", Offset = "0x12D3DF8", VA = "0x12D3DF8")]
		public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0x12D3E9C", Offset = "0x12D3E9C", VA = "0x12D3E9C")]
		public OffsetPose()
		{
		}
	}
	[Token(Token = "0x20000EF")]
	public class PenetrationAvoidance : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20000F0")]
		public class Avoider
		{
			[Serializable]
			[Token(Token = "0x20000F1")]
			public class EffectorLink
			{
				[Token(Token = "0x40006D1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Effector to apply the offset to.")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x40006D2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Multiplier of the offset value, can be negative.")]
				public float weight;

				[Token(Token = "0x600086D")]
				[Address(RVA = "0x12D4548", Offset = "0x12D4548", VA = "0x12D4548")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x40006C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Bones to start the raycast from. Multiple raycasts can be used by assigning more than 1 bone.")]
			public Transform[] raycastFrom;

			[Token(Token = "0x40006C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The Transform to raycast towards. Usually the body part that you want to keep from penetrating.")]
			public Transform raycastTo;

			[Token(Token = "0x40006C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("If 0, will use simple raycasting, if > 0, will use sphere casting (better, but slower).")]
			[Range(0f, 1f)]
			public float raycastRadius;

			[Token(Token = "0x40006CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Linking this to FBBIK effectors.")]
			public EffectorLink[] effectors;

			[Token(Token = "0x40006CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The time of smooth interpolation of the offset value to avoid penetration.")]
			public float smoothTimeIn;

			[Token(Token = "0x40006CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Tooltip("The time of smooth interpolation of the offset value blending out of penetration avoidance.")]
			public float smoothTimeOut;

			[Token(Token = "0x40006CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("Layers to keep penetrating from.")]
			public LayerMask layers;

			[Token(Token = "0x40006CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 offset;

			[Token(Token = "0x40006CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 offsetTarget;

			[Token(Token = "0x40006D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 offsetV;

			[Token(Token = "0x6000869")]
			[Address(RVA = "0x12D3F6C", Offset = "0x12D3F6C", VA = "0x12D3F6C")]
			public void Solve(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x600086A")]
			[Address(RVA = "0x12D410C", Offset = "0x12D410C", VA = "0x12D410C")]
			private Vector3 GetOffsetTarget(IKSolverFullBodyBiped solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600086B")]
			[Address(RVA = "0x12D4214", Offset = "0x12D4214", VA = "0x12D4214")]
			private Vector3 Raycast(Vector3 from, Vector3 to)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600086C")]
			[Address(RVA = "0x12D4534", Offset = "0x12D4534", VA = "0x12D4534")]
			public Avoider()
			{
			}
		}

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Definitions of penetration avoidances.")]
		public Avoider[] avoiders;

		[Token(Token = "0x6000867")]
		[Address(RVA = "0x12D3EFC", Offset = "0x12D3EFC", VA = "0x12D3EFC", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000868")]
		[Address(RVA = "0x12D40FC", Offset = "0x12D40FC", VA = "0x12D40FC")]
		public PenetrationAvoidance()
		{
		}
	}
	[Token(Token = "0x20000F2")]
	public class Recoil : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20000F3")]
		public class RecoilOffset
		{
			[Serializable]
			[Token(Token = "0x20000F4")]
			public class EffectorLink
			{
				[Token(Token = "0x40006F0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x40006F1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x600087D")]
				[Address(RVA = "0x12D589C", Offset = "0x12D589C", VA = "0x12D589C")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x40006EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Offset vector for the associated effector when doing recoil.")]
			public Vector3 offset;

			[Token(Token = "0x40006EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Range(0f, 1f)]
			[Tooltip("When firing before the last recoil has faded, how much of the current recoil offset will be maintained?")]
			public float additivity;

			[Token(Token = "0x40006EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Max additive recoil for automatic fire.")]
			public float maxAdditiveOffsetMag;

			[Token(Token = "0x40006ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Linking this recoil offset to FBBIK effectors.")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x40006EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 additiveOffset;

			[Token(Token = "0x40006EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lastOffset;

			[Token(Token = "0x600087A")]
			[Address(RVA = "0x12D46EC", Offset = "0x12D46EC", VA = "0x12D46EC")]
			public void Start()
			{
			}

			[Token(Token = "0x600087B")]
			[Address(RVA = "0x12D5248", Offset = "0x12D5248", VA = "0x12D5248")]
			public void Apply(IKSolverFullBodyBiped solver, Quaternion rotation, float masterWeight, float length, float timeLeft)
			{
			}

			[Token(Token = "0x600087C")]
			[Address(RVA = "0x12D5888", Offset = "0x12D5888", VA = "0x12D5888")]
			public RecoilOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000F5")]
		public enum Handedness
		{
			[Token(Token = "0x40006F3")]
			Right,
			[Token(Token = "0x40006F4")]
			Left
		}

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the AimIK component. Optional, only used to getting the aiming direction.")]
		public AimIK aimIK;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Set this true if you are using IKExecutionOrder.cs or a custom script to force AimIK solve after FBBIK.")]
		public bool aimIKSolvedLast;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Which hand is holding the weapon?")]
		public Handedness handedness;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Check for 2-handed weapons.")]
		public bool twoHanded;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Weight curve for the recoil offsets. Recoil procedure is as long as this curve.")]
		public AnimationCurve recoilWeight;

		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How much is the magnitude randomized each time Recoil is called?")]
		public float magnitudeRandom;

		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("How much is the rotation randomized each time Recoil is called?")]
		public Vector3 rotationRandom;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Rotating the primary hand bone for the recoil (in local space).")]
		public Vector3 handRotationOffset;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Time of blending in another recoil when doing automatic fire.")]
		public float blendTime;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("FBBIK effector position offsets for the recoil (in aiming direction space).")]
		[Space(10f)]
		public RecoilOffset[] offsets;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Quaternion rotationOffset;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float magnitudeMlp;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float endTime;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion handRotation;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Quaternion secondaryHandRelativeRotation;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion randomRotation;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float length;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool initiated;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float blendWeight;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float w;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion primaryHandRotation;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool handRotationsSet;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 aimIKAxis;

		[Token(Token = "0x17000103")]
		public bool isFinished
		{
			[Token(Token = "0x600086E")]
			[Address(RVA = "0x12D4550", Offset = "0x12D4550", VA = "0x12D4550")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000104")]
		private IKEffector primaryHandEffector
		{
			[Token(Token = "0x6000874")]
			[Address(RVA = "0x12D544C", Offset = "0x12D544C", VA = "0x12D544C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000105")]
		private IKEffector secondaryHandEffector
		{
			[Token(Token = "0x6000875")]
			[Address(RVA = "0x12D5488", Offset = "0x12D5488", VA = "0x12D5488")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000106")]
		private Transform primaryHand
		{
			[Token(Token = "0x6000876")]
			[Address(RVA = "0x12D5414", Offset = "0x12D5414", VA = "0x12D5414")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000107")]
		private Transform secondaryHand
		{
			[Token(Token = "0x6000877")]
			[Address(RVA = "0x12D5430", Offset = "0x12D5430", VA = "0x12D5430")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0x12D4574", Offset = "0x12D4574", VA = "0x12D4574")]
		public void SetHandRotations(Quaternion leftHandRotation, Quaternion rightHandRotation)
		{
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0x12D45A0", Offset = "0x12D45A0", VA = "0x12D45A0")]
		public void Fire(float magnitude)
		{
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0x12D47C0", Offset = "0x12D47C0", VA = "0x12D47C0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0x12D54C4", Offset = "0x12D54C4", VA = "0x12D54C4")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0x12D55DC", Offset = "0x12D55DC", VA = "0x12D55DC")]
		private void AfterAimIK()
		{
		}

		[Token(Token = "0x6000878")]
		[Address(RVA = "0x12D562C", Offset = "0x12D562C", VA = "0x12D562C", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000879")]
		[Address(RVA = "0x12D57FC", Offset = "0x12D57FC", VA = "0x12D57FC")]
		public Recoil()
		{
		}
	}
	[Token(Token = "0x20000F6")]
	public class ShoulderRotator : MonoBehaviour
	{
		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Weight of shoulder rotation")]
		public float weight;

		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The greater the offset, the sooner the shoulder will start rotating")]
		public float offset;

		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool skip;

		[Token(Token = "0x600087E")]
		[Address(RVA = "0x12D58A4", Offset = "0x12D58A4", VA = "0x12D58A4")]
		private void Start()
		{
		}

		[Token(Token = "0x600087F")]
		[Address(RVA = "0x12D5994", Offset = "0x12D5994", VA = "0x12D5994")]
		private void RotateShoulders()
		{
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0x12D5A70", Offset = "0x12D5A70", VA = "0x12D5A70")]
		private void RotateShoulder(FullBodyBipedChain chain, float weight, float offset)
		{
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0x12D5E74", Offset = "0x12D5E74", VA = "0x12D5E74")]
		private IKMapping.BoneMap GetParentBoneMap(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0x12D5EA8", Offset = "0x12D5EA8", VA = "0x12D5EA8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0x12D5FB4", Offset = "0x12D5FB4", VA = "0x12D5FB4")]
		public ShoulderRotator()
		{
		}
	}
	[Token(Token = "0x20000F7")]
	public static class VRIKCalibrator
	{
		[Serializable]
		[Token(Token = "0x20000F8")]
		public class Settings
		{
			[Token(Token = "0x40006F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Multiplies character scale")]
			public float scaleMlp;

			[Token(Token = "0x40006FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Local axis of the HMD facing forward.")]
			public Vector3 headTrackerForward;

			[Token(Token = "0x40006FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Local axis of the HMD facing up.")]
			public Vector3 headTrackerUp;

			[Token(Token = "0x40006FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Local axis of the body tracker towards the player's forward direction.")]
			public Vector3 bodyTrackerForward;

			[Token(Token = "0x40006FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("Local axis of the body tracker towards the up direction.")]
			public Vector3 bodyTrackerUp;

			[Token(Token = "0x40006FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[Tooltip("Local axis of the hand trackers pointing from the wrist towards the palm.")]
			public Vector3 handTrackerForward;

			[Token(Token = "0x40006FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Local axis of the hand trackers pointing in the direction of the surface normal of the back of the hand.")]
			public Vector3 handTrackerUp;

			[Token(Token = "0x4000700")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Local axis of the foot trackers towards the player's forward direction.")]
			public Vector3 footTrackerForward;

			[Token(Token = "0x4000701")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("Local axis of the foot tracker towards the up direction.")]
			public Vector3 footTrackerUp;

			[Token(Token = "0x4000702")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[Space(10f)]
			[Tooltip("Offset of the head bone from the HMD in (headTrackerForward, headTrackerUp) space relative to the head tracker.")]
			public Vector3 headOffset;

			[Token(Token = "0x4000703")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[Tooltip("Offset of the hand bones from the hand trackers in (handTrackerForward, handTrackerUp) space relative to the hand trackers.")]
			public Vector3 handOffset;

			[Token(Token = "0x4000704")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[Tooltip("Forward offset of the foot bones from the foot trackers.")]
			public float footForwardOffset;

			[Token(Token = "0x4000705")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("Inward offset of the foot bones from the foot trackers.")]
			public float footInwardOffset;

			[Token(Token = "0x4000706")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[Tooltip("Used for adjusting foot heading relative to the foot trackers.")]
			[Range(-180f, 180f)]
			public float footHeadingOffset;

			[Token(Token = "0x4000707")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[Range(0f, 1f)]
			public float pelvisPositionWeight;

			[Token(Token = "0x4000708")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[Range(0f, 1f)]
			public float pelvisRotationWeight;

			[Token(Token = "0x6000889")]
			[Address(RVA = "0x12D8920", Offset = "0x12D8920", VA = "0x12D8920")]
			public Settings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20000F9")]
		public class CalibrationData
		{
			[Serializable]
			[Token(Token = "0x20000FA")]
			public class Target
			{
				[Token(Token = "0x4000715")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public bool used;

				[Token(Token = "0x4000716")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				public Vector3 localPosition;

				[Token(Token = "0x4000717")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public Quaternion localRotation;

				[Token(Token = "0x600088B")]
				[Address(RVA = "0x12D7B78", Offset = "0x12D7B78", VA = "0x12D7B78")]
				public Target(Transform t)
				{
				}

				[Token(Token = "0x600088C")]
				[Address(RVA = "0x12D8520", Offset = "0x12D8520", VA = "0x12D8520")]
				public void SetTo(Transform t)
				{
				}
			}

			[Token(Token = "0x4000709")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float scale;

			[Token(Token = "0x400070A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Target head;

			[Token(Token = "0x400070B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Target leftHand;

			[Token(Token = "0x400070C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Target rightHand;

			[Token(Token = "0x400070D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Target pelvis;

			[Token(Token = "0x400070E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Target leftFoot;

			[Token(Token = "0x400070F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Target rightFoot;

			[Token(Token = "0x4000710")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Target leftLegGoal;

			[Token(Token = "0x4000711")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Target rightLegGoal;

			[Token(Token = "0x4000712")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Vector3 pelvisTargetRight;

			[Token(Token = "0x4000713")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4000714")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public float pelvisRotationWeight;

			[Token(Token = "0x600088A")]
			[Address(RVA = "0x12D72F8", Offset = "0x12D72F8", VA = "0x12D72F8")]
			public CalibrationData()
			{
			}
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0x12D5FC8", Offset = "0x12D5FC8", VA = "0x12D5FC8")]
		public static void RecalibrateScale(VRIK ik, Settings settings)
		{
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0x12D60BC", Offset = "0x12D60BC", VA = "0x12D60BC")]
		public static CalibrationData Calibrate(VRIK ik, Settings settings, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
			return null;
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0x12D7300", Offset = "0x12D7300", VA = "0x12D7300")]
		private static void CalibrateLeg(Settings settings, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}

		[Token(Token = "0x6000887")]
		[Address(RVA = "0x12D7C2C", Offset = "0x12D7C2C", VA = "0x12D7C2C")]
		public static void Calibrate(VRIK ik, CalibrationData data, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0x12D857C", Offset = "0x12D857C", VA = "0x12D857C")]
		private static void CalibrateLeg(CalibrationData data, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}
	}
	[Token(Token = "0x20000FB")]
	public class VRIKLODController : MonoBehaviour
	{
		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer LODRenderer;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LODDistance;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool allowCulled;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRIK ik;

		[Token(Token = "0x600088D")]
		[Address(RVA = "0x12D8B24", Offset = "0x12D8B24", VA = "0x12D8B24")]
		private void Start()
		{
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0x12D8B74", Offset = "0x12D8B74", VA = "0x12D8B74")]
		private void Update()
		{
		}

		[Token(Token = "0x600088F")]
		[Address(RVA = "0x12D8B9C", Offset = "0x12D8B9C", VA = "0x12D8B9C")]
		private int GetLODLevel()
		{
			return default(int);
		}

		[Token(Token = "0x6000890")]
		[Address(RVA = "0x12D8CBC", Offset = "0x12D8CBC", VA = "0x12D8CBC")]
		public VRIKLODController()
		{
		}
	}
	[Token(Token = "0x20000FC")]
	public class VRIKRootController : MonoBehaviour
	{
		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform pelvisTarget;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform leftFootTarget;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform rightFootTarget;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VRIK ik;

		[Token(Token = "0x17000108")]
		public Vector3 pelvisTargetRight
		{
			[Token(Token = "0x6000891")]
			[Address(RVA = "0x12D8CD4", Offset = "0x12D8CD4", VA = "0x12D8CD4")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000892")]
			[Address(RVA = "0x12D8CE0", Offset = "0x12D8CE0", VA = "0x12D8CE0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000893")]
		[Address(RVA = "0x12D8CEC", Offset = "0x12D8CEC", VA = "0x12D8CEC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000894")]
		[Address(RVA = "0x12D79B8", Offset = "0x12D79B8", VA = "0x12D79B8")]
		public void Calibrate()
		{
		}

		[Token(Token = "0x6000895")]
		[Address(RVA = "0x12D87C8", Offset = "0x12D87C8", VA = "0x12D87C8")]
		public void Calibrate(VRIKCalibrator.CalibrationData data)
		{
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0x12D8DE0", Offset = "0x12D8DE0", VA = "0x12D8DE0")]
		private void OnPreUpdate()
		{
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0x12D91A8", Offset = "0x12D91A8", VA = "0x12D91A8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000898")]
		[Address(RVA = "0x12D92B4", Offset = "0x12D92B4", VA = "0x12D92B4")]
		public VRIKRootController()
		{
		}
	}
}
namespace RootMotion.Demos
{
	[Token(Token = "0x20000FD")]
	public class FKOffset : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20000FE")]
		public class Offset
		{
			[Token(Token = "0x4000723")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			[SerializeField]
			public string name;

			[Token(Token = "0x4000724")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HumanBodyBones bone;

			[Token(Token = "0x4000725")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 rotationOffset;

			[Token(Token = "0x4000726")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Transform t;

			[Token(Token = "0x600089D")]
			[Address(RVA = "0x12D9370", Offset = "0x12D9370", VA = "0x12D9370")]
			public void Apply(Animator animator)
			{
			}

			[Token(Token = "0x600089E")]
			[Address(RVA = "0x12D95D8", Offset = "0x12D95D8", VA = "0x12D95D8")]
			public Offset()
			{
			}
		}

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Offset[] offsets;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x6000899")]
		[Address(RVA = "0x12D92BC", Offset = "0x12D92BC", VA = "0x12D92BC")]
		private void Start()
		{
		}

		[Token(Token = "0x600089A")]
		[Address(RVA = "0x12D930C", Offset = "0x12D930C", VA = "0x12D930C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600089B")]
		[Address(RVA = "0x12D9518", Offset = "0x12D9518", VA = "0x12D9518")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600089C")]
		[Address(RVA = "0x12D95D0", Offset = "0x12D95D0", VA = "0x12D95D0")]
		public FKOffset()
		{
		}
	}
	[Token(Token = "0x20000FF")]
	public class AimBoxing : MonoBehaviour
	{
		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform pin;

		[Token(Token = "0x600089F")]
		[Address(RVA = "0x12D95E0", Offset = "0x12D95E0", VA = "0x12D95E0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x12D9660", Offset = "0x12D9660", VA = "0x12D9660")]
		public AimBoxing()
		{
		}
	}
	[Token(Token = "0x2000100")]
	public class AimSwing : MonoBehaviour
	{
		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK ik;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The direction of the animated weapon swing in character space. Tweak this value to adjust the aiming.")]
		public Vector3 animatedSwingDirection;

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x12D9668", Offset = "0x12D9668", VA = "0x12D9668")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x12D96D4", Offset = "0x12D96D4", VA = "0x12D96D4")]
		public AimSwing()
		{
		}
	}
	[Token(Token = "0x2000101")]
	public class SecondHandOnGun : MonoBehaviour
	{
		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aim;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbIK leftArmIK;

		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftHand;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightHand;

		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 leftHandPositionOffset;

		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 leftHandRotationOffset;

		[Token(Token = "0x4000731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 leftHandPosRelToRight;

		[Token(Token = "0x4000732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion leftHandRotRelToRight;

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x12D9734", Offset = "0x12D9734", VA = "0x12D9734")]
		private void Start()
		{
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x12D976C", Offset = "0x12D976C", VA = "0x12D976C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x12D9A28", Offset = "0x12D9A28", VA = "0x12D9A28")]
		public SecondHandOnGun()
		{
		}
	}
	[Token(Token = "0x2000102")]
	public class SimpleAimingSystem : MonoBehaviour
	{
		[Token(Token = "0x4000733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("AimPoser is a tool that returns an animation name based on direction.")]
		public AimPoser aimPoser;

		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the AimIK component.")]
		public AimIK aim;

		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Reference to the LookAt component (only used for the head in this instance).")]
		public LookAtIK lookAt;

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the Animator component.")]
		public Animator animator;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Time of cross-fading from pose to pose.")]
		public float crossfadeTime;

		[Token(Token = "0x4000738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Will keep the aim target at a distance.")]
		public float minAimDistance;

		[Token(Token = "0x4000739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AimPoser.Pose aimPose;

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AimPoser.Pose lastPose;

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x12D9A30", Offset = "0x12D9A30", VA = "0x12D9A30")]
		private void Start()
		{
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x12D9A68", Offset = "0x12D9A68", VA = "0x12D9A68")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x12D9BB4", Offset = "0x12D9BB4", VA = "0x12D9BB4")]
		private void Pose()
		{
		}

		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x12D9D24", Offset = "0x12D9D24", VA = "0x12D9D24")]
		private void LimitAimTarget()
		{
		}

		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x12D9F08", Offset = "0x12D9F08", VA = "0x12D9F08")]
		private void DirectCrossFade(string state, float target)
		{
		}

		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x12D9F98", Offset = "0x12D9F98", VA = "0x12D9F98")]
		public SimpleAimingSystem()
		{
		}
	}
	[Token(Token = "0x2000103")]
	public class TerrainOffset : MonoBehaviour
	{
		[Token(Token = "0x400073B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x400073C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 raycastOffset;

		[Token(Token = "0x400073D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask raycastLayers;

		[Token(Token = "0x400073E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float min;

		[Token(Token = "0x400073F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float max;

		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float lerpSpeed;

		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private RaycastHit hit;

		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 offset;

		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x12D9FAC", Offset = "0x12D9FAC", VA = "0x12D9FAC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x12DA118", Offset = "0x12DA118", VA = "0x12DA118")]
		private Vector3 GetGroundHeightOffset(Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x12DA314", Offset = "0x12DA314", VA = "0x12DA314")]
		public TerrainOffset()
		{
		}
	}
	[Token(Token = "0x2000104")]
	public class BipedIKvsAnimatorIK : MonoBehaviour
	{
		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[LargeHeader("References")]
		public Animator animator;

		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BipedIK bipedIK;

		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[LargeHeader("Look At")]
		public Transform lookAtTargetBiped;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform lookAtTargetAnimator;

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float lookAtWeight;

		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float lookAtBodyWeight;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float lookAtHeadWeight;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float lookAtEyesWeight;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float lookAtClampWeight;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float lookAtClampWeightHead;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1f)]
		public float lookAtClampWeightEyes;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[LargeHeader("Foot")]
		public Transform footTargetBiped;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform footTargetAnimator;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 1f)]
		public float footPositionWeight;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Range(0f, 1f)]
		public float footRotationWeight;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[LargeHeader("Hand")]
		public Transform handTargetBiped;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform handTargetAnimator;

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float handPositionWeight;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float handRotationWeight;

		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x12DA344", Offset = "0x12DA344", VA = "0x12DA344")]
		private void OnAnimatorIK(int layer)
		{
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x12DA770", Offset = "0x12DA770", VA = "0x12DA770")]
		public BipedIKvsAnimatorIK()
		{
		}
	}
	[Token(Token = "0x2000105")]
	public class MechSpider : MonoBehaviour
	{
		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask raycastLayers;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float scale;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform body;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MechSpiderLeg[] legs;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float legRotationWeight;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rootPositionSpeed;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rootRotationSpeed;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float breatheSpeed;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float breatheMagnitude;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float height;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float minHeight;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float raycastHeight;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float raycastDistance;

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 defaultBodyLocalPosition;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float sine;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RaycastHit rootHit;

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x12DA790", Offset = "0x12DA790", VA = "0x12DA790")]
		private void Update()
		{
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x12DB0AC", Offset = "0x12DB0AC", VA = "0x12DB0AC")]
		private Vector3 GetLegCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x12DAE28", Offset = "0x12DAE28", VA = "0x12DAE28")]
		private Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x12DB1BC", Offset = "0x12DB1BC", VA = "0x12DB1BC")]
		public MechSpider()
		{
		}
	}
	[Token(Token = "0x2000106")]
	public class MechSpiderController : MonoBehaviour
	{
		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform cameraTransform;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speed;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float turnSpeed;

		[Token(Token = "0x17000109")]
		public Vector3 inputVector
		{
			[Token(Token = "0x60008B5")]
			[Address(RVA = "0x12DB1E8", Offset = "0x12DB1E8", VA = "0x12DB1E8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x12DB268", Offset = "0x12DB268", VA = "0x12DB268")]
		private void Update()
		{
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x12DB5AC", Offset = "0x12DB5AC", VA = "0x12DB5AC")]
		public MechSpiderController()
		{
		}
	}
	[Token(Token = "0x2000107")]
	public class MechSpiderLeg : MonoBehaviour
	{
		[Token(Token = "0x2000108")]
		[CompilerGenerated]
		private sealed class <Step>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000781")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000782")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000783")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MechSpiderLeg <>4__this;

			[Token(Token = "0x4000784")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 stepStartPosition;

			[Token(Token = "0x4000785")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 targetPosition;

			[Token(Token = "0x1700010C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008C6")]
				[Address(RVA = "0x12DC5E4", Offset = "0x12DC5E4", VA = "0x12DC5E4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008C8")]
				[Address(RVA = "0x12DC62C", Offset = "0x12DC62C", VA = "0x12DC62C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008C3")]
			[Address(RVA = "0x12DC288", Offset = "0x12DC288", VA = "0x12DC288")]
			[DebuggerHidden]
			public <Step>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x60008C4")]
			[Address(RVA = "0x12DC340", Offset = "0x12DC340", VA = "0x12DC340", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008C5")]
			[Address(RVA = "0x12DC344", Offset = "0x12DC344", VA = "0x12DC344", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008C7")]
			[Address(RVA = "0x12DC5EC", Offset = "0x12DC5EC", VA = "0x12DC5EC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MechSpiderLeg unSync;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 offset;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minDelay;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxOffset;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float stepSpeed;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float footHeight;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float velocityPrediction;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float raycastFocus;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve yOffset;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform foot;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 footUpAxis;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float footRotationSpeed;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ParticleSystem sand;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private IK ik;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float stepProgress;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastStepTime;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 defaultPosition;

		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private RaycastHit hit;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Quaternion lastFootLocalRotation;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 smoothHitNormal;

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 lastStepPosition;

		[Token(Token = "0x1700010A")]
		public bool isStepping
		{
			[Token(Token = "0x60008B8")]
			[Address(RVA = "0x12DB5C0", Offset = "0x12DB5C0", VA = "0x12DB5C0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010B")]
		public Vector3 position
		{
			[Token(Token = "0x60008B9")]
			[Address(RVA = "0x12DB18C", Offset = "0x12DB18C", VA = "0x12DB18C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60008BA")]
			[Address(RVA = "0x12DB5D4", Offset = "0x12DB5D4", VA = "0x12DB5D4")]
			set
			{
			}
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x12DB620", Offset = "0x12DB620", VA = "0x12DB620")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x12DB868", Offset = "0x12DB868", VA = "0x12DB868")]
		private void AfterIK()
		{
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x12DBA40", Offset = "0x12DBA40", VA = "0x12DBA40")]
		private void Start()
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x12DBC58", Offset = "0x12DBC58", VA = "0x12DBC58")]
		private Vector3 GetStepTarget(out bool stepFound, float focus, float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x12DBEE8", Offset = "0x12DBEE8", VA = "0x12DBEE8")]
		private void UpdatePosition(float distance)
		{
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x12DC050", Offset = "0x12DC050", VA = "0x12DC050")]
		private void Update()
		{
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x12DBBB4", Offset = "0x12DBBB4", VA = "0x12DBBB4")]
		[IteratorStateMachine(typeof(<Step>d__33))]
		private IEnumerator Step(Vector3 stepStartPosition, Vector3 targetPosition)
		{
			return null;
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x12DC2B0", Offset = "0x12DC2B0", VA = "0x12DC2B0")]
		public MechSpiderLeg()
		{
		}
	}
	[Token(Token = "0x2000109")]
	public class MechSpiderParticles : MonoBehaviour
	{
		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpiderController mechSpiderController;

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem particles;

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x12DC634", Offset = "0x12DC634", VA = "0x12DC634")]
		private void Start()
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x12DC700", Offset = "0x12DC700", VA = "0x12DC700")]
		private void Update()
		{
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x12DC974", Offset = "0x12DC974", VA = "0x12DC974")]
		public MechSpiderParticles()
		{
		}
	}
	[Token(Token = "0x200010A")]
	public class AnimationWarping : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200010B")]
		public struct Warp
		{
			[Token(Token = "0x400078C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Layer of the 'Animation State' in the Animator.")]
			public int animationLayer;

			[Token(Token = "0x400078D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Name of the state in the Animator to warp.")]
			public string animationState;

			[Token(Token = "0x400078E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Warping weight by normalized time of the animation state.")]
			public AnimationCurve weightCurve;

			[Token(Token = "0x400078F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Animated point to warp from. This should be in character space so keep this Transform parented to the root of the character.")]
			public Transform warpFrom;

			[Token(Token = "0x4000790")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("World space point to warp to.")]
			public Transform warpTo;

			[Token(Token = "0x4000791")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Which FBBIK effector to use?")]
			public FullBodyBipedEffector effector;
		}

		[Serializable]
		[Token(Token = "0x200010C")]
		public enum EffectorMode
		{
			[Token(Token = "0x4000793")]
			PositionOffset,
			[Token(Token = "0x4000794")]
			Position
		}

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the Animator component to use")]
		public Animator animator;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Using effector.positionOffset or effector.position with effector.positionWeight? The former will enable you to use effector.position for other things, the latter will weigh in the effectors, hence using Reach and Pull in the process.")]
		public EffectorMode effectorMode;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The array of warps, can have multiple simultaneous warps.")]
		[Space(10f)]
		public Warp[] warps;

		[Token(Token = "0x400078B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private EffectorMode lastMode;

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x12DC97C", Offset = "0x12DC97C", VA = "0x12DC97C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x12DC99C", Offset = "0x12DC99C", VA = "0x12DC99C")]
		public float GetWarpWeight(int warpIndex)
		{
			return default(float);
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x12DCBB4", Offset = "0x12DCBB4", VA = "0x12DCBB4", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x12DCE6C", Offset = "0x12DCE6C", VA = "0x12DCE6C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x12DCF00", Offset = "0x12DCF00", VA = "0x12DCF00")]
		public AnimationWarping()
		{
		}
	}
	[Token(Token = "0x200010D")]
	[RequireComponent(typeof(Animator))]
	public class AnimatorController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotateSpeed;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blendSpeed;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxAngle;

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float moveSpeed;

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rootMotionWeight;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Animator animator;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 moveBlend;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Vector3 moveInput;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Vector3 velocity;

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x12DCF08", Offset = "0x12DCF08", VA = "0x12DCF08", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x12DCF58", Offset = "0x12DCF58", VA = "0x12DCF58")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x12DD160", Offset = "0x12DD160", VA = "0x12DD160", Slot = "5")]
		public virtual void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x12DD388", Offset = "0x12DD388", VA = "0x12DD388")]
		public AnimatorController3rdPerson()
		{
		}
	}
	[Token(Token = "0x200010E")]
	[RequireComponent(typeof(AimIK))]
	[RequireComponent(typeof(FullBodyBipedIK))]
	public class AnimatorController3rdPersonIK : AnimatorController3rdPerson
	{
		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float headLookWeight;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 gunHoldOffset;

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Recoil recoil;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AimIK aim;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 headLookAxis;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 leftHandPosRelToRightHand;

		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion leftHandRotRelToRightHand;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 aimTarget;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x12DD39C", Offset = "0x12DD39C", VA = "0x12DD39C", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x12DD530", Offset = "0x12DD530", VA = "0x12DD530", Slot = "5")]
		public override void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x12DD5A0", Offset = "0x12DD5A0", VA = "0x12DD5A0")]
		private void Read()
		{
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x12DD6D8", Offset = "0x12DD6D8", VA = "0x12DD6D8")]
		private void AimIK()
		{
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x12DD734", Offset = "0x12DD734", VA = "0x12DD734")]
		private void FBBIK()
		{
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x12DDD7C", Offset = "0x12DDD7C", VA = "0x12DDD7C")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x12DDB90", Offset = "0x12DDB90", VA = "0x12DDB90")]
		private void HeadLookAt(Vector3 lookAtTarget)
		{
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x12DE020", Offset = "0x12DE020", VA = "0x12DE020")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x12DE12C", Offset = "0x12DE12C", VA = "0x12DE12C")]
		public AnimatorController3rdPersonIK()
		{
		}
	}
	[Token(Token = "0x200010F")]
	[RequireComponent(typeof(FullBodyBipedIK))]
	public class CharacterAnimationThirdPersonIK : CharacterAnimationThirdPerson
	{
		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x12DE148", Offset = "0x12DE148", VA = "0x12DE148", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x12DE21C", Offset = "0x12DE21C", VA = "0x12DE21C", Slot = "7")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x12DE570", Offset = "0x12DE570", VA = "0x12DE570")]
		private void RotateEffector(IKEffector effector, Quaternion rotation, float mlp)
		{
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x12DE660", Offset = "0x12DE660", VA = "0x12DE660")]
		public CharacterAnimationThirdPersonIK()
		{
		}
	}
	[Token(Token = "0x2000110")]
	[RequireComponent(typeof(AnimatorController3rdPerson))]
	public class CharacterController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CameraController cam;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AnimatorController3rdPerson animatorController;

		[Token(Token = "0x1700010E")]
		private static Vector3 inputVector
		{
			[Token(Token = "0x60008E4")]
			[Address(RVA = "0x12DE900", Offset = "0x12DE900", VA = "0x12DE900")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700010F")]
		private static Vector3 inputVectorRaw
		{
			[Token(Token = "0x60008E5")]
			[Address(RVA = "0x12DE980", Offset = "0x12DE980", VA = "0x12DE980")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x12DE6A8", Offset = "0x12DE6A8", VA = "0x12DE6A8")]
		private void Start()
		{
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x12DE710", Offset = "0x12DE710", VA = "0x12DE710")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x12DEA00", Offset = "0x12DEA00", VA = "0x12DEA00")]
		public CharacterController3rdPerson()
		{
		}
	}
	[Token(Token = "0x2000111")]
	public class EffectorOffset : OffsetModifier
	{
		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public float handsMaintainRelativePositionWeight;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 bodyOffset;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 leftShoulderOffset;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rightShoulderOffset;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 leftThighOffset;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 rightThighOffset;

		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector3 rightHandOffset;

		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector3 leftFootOffset;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 rightFootOffset;

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x12DEA08", Offset = "0x12DEA08", VA = "0x12DEA08", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x12DEE64", Offset = "0x12DEE64", VA = "0x12DEE64")]
		public EffectorOffset()
		{
		}
	}
	[Token(Token = "0x2000112")]
	public class ExplosionDemo : MonoBehaviour
	{
		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SimpleLocomotion character;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float forceMlp;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float upForce;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weightFalloffSpeed;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve weightFalloff;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve explosionForceByDistance;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve scale;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float weight;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 defaultScale;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody r;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x12DEE6C", Offset = "0x12DEE6C", VA = "0x12DEE6C")]
		private void Start()
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x12DEF10", Offset = "0x12DEF10", VA = "0x12DEF10")]
		private void Update()
		{
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x12DF36C", Offset = "0x12DF36C", VA = "0x12DF36C")]
		private void SetEffectorWeights(float w)
		{
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x12DF40C", Offset = "0x12DF40C", VA = "0x12DF40C")]
		public ExplosionDemo()
		{
		}
	}
	[Token(Token = "0x2000113")]
	public class FBBIKSettings : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000114")]
		public class Limb
		{
			[Token(Token = "0x40007C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FBIKChain.Smoothing reachSmoothing;

			[Token(Token = "0x40007CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float maintainRelativePositionWeight;

			[Token(Token = "0x40007CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float mappingWeight;

			[Token(Token = "0x60008F1")]
			[Address(RVA = "0x12DF5A0", Offset = "0x12DF5A0", VA = "0x12DF5A0")]
			public void Apply(FullBodyBipedChain chain, IKSolverFullBodyBiped solver)
			{
			}

			[Token(Token = "0x60008F2")]
			[Address(RVA = "0x12DF6C4", Offset = "0x12DF6C4", VA = "0x12DF6C4")]
			public Limb()
			{
			}
		}

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool disableAfterStart;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Limb leftArm;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Limb rightArm;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Limb leftLeg;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Limb rightLeg;

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rootPin;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bodyEffectChildNodes;

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x12DF47C", Offset = "0x12DF47C", VA = "0x12DF47C")]
		public void UpdateSettings()
		{
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x12DF618", Offset = "0x12DF618", VA = "0x12DF618")]
		private void Start()
		{
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x12DF6B0", Offset = "0x12DF6B0", VA = "0x12DF6B0")]
		private void Update()
		{
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x12DF6B4", Offset = "0x12DF6B4", VA = "0x12DF6B4")]
		public FBBIKSettings()
		{
		}
	}
	[Token(Token = "0x2000115")]
	public class FBIKBendGoal : MonoBehaviour
	{
		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedChain chain;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float weight;

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x12DF6D4", Offset = "0x12DF6D4", VA = "0x12DF6D4")]
		private void Start()
		{
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x12DF73C", Offset = "0x12DF73C", VA = "0x12DF73C")]
		private void Update()
		{
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x12DF804", Offset = "0x12DF804", VA = "0x12DF804")]
		public FBIKBendGoal()
		{
		}
	}
	[Token(Token = "0x2000116")]
	public class FBIKBoxing : MonoBehaviour
	{
		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The target we want to hit")]
		public Transform target;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The pin Transform is used to reference the exact hit point in the animation (used by AimIK to aim the upper body to follow the target).In Legacy and Generic modes you can just create and position a reference point in your animating software and include it in the FBX. Then in Unity if you added a GameObject with the exact same name under the character's root, it would be animated to the required position.In Humanoid mode however, Mecanim loses track of any Transform that does not belong to the avatar, so in this case the pin point has to be manually set inside the Unity Editor.")]
		public Transform pin;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The Full Body Biped IK component")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The Aim IK component. Aim IK is ust used for following the target slightly with the body.")]
		public AimIK aim;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The effector type of the punching hand")]
		public FullBodyBipedEffector effector;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Weight of aiming the body to follow the target")]
		public AnimationCurve aimWeight;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator animator;

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x12DF80C", Offset = "0x12DF80C", VA = "0x12DF80C")]
		private void Start()
		{
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x12DF85C", Offset = "0x12DF85C", VA = "0x12DF85C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x12DF9F4", Offset = "0x12DF9F4", VA = "0x12DF9F4")]
		public FBIKBoxing()
		{
		}
	}
	[Token(Token = "0x2000117")]
	public class FBIKHandsOnProp : MonoBehaviour
	{
		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool leftHanded;

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x12DF9FC", Offset = "0x12DF9FC", VA = "0x12DF9FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x12DFACC", Offset = "0x12DFACC", VA = "0x12DFACC")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x12DFB58", Offset = "0x12DFB58", VA = "0x12DFB58")]
		private void HandsOnProp(IKEffector mainHand, IKEffector otherHand)
		{
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x12E002C", Offset = "0x12E002C", VA = "0x12E002C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x12E0138", Offset = "0x12E0138", VA = "0x12E0138")]
		public FBIKHandsOnProp()
		{
		}
	}
	[Token(Token = "0x2000118")]
	public class FPSAiming : MonoBehaviour
	{
		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float aimWeight;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float sightWeight;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 180f)]
		public float maxAngle;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 aimOffset;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool animatePhysics;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform gun;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform gunTarget;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AimIK gunAim;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public CameraControllerFPS cam;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Recoil recoil;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 1f)]
		public float cameraRecoilWeight;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 gunTargetDefaultLocalPosition;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector3 gunTargetDefaultLocalRotation;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 camDefaultLocalPosition;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 camRelativeToGunTarget;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool updateFrame;

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x12E0140", Offset = "0x12E0140", VA = "0x12E0140")]
		private void Start()
		{
		}

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x12E02A0", Offset = "0x12E02A0", VA = "0x12E02A0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0x12E02AC", Offset = "0x12E02AC", VA = "0x12E02AC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0x12E056C", Offset = "0x12E056C", VA = "0x12E056C")]
		private void Aiming()
		{
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0x12E06F8", Offset = "0x12E06F8", VA = "0x12E06F8")]
		private void LookDownTheSight()
		{
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0x12E0370", Offset = "0x12E0370", VA = "0x12E0370")]
		private void RotateCharacter()
		{
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0x12E13B0", Offset = "0x12E13B0", VA = "0x12E13B0")]
		public FPSAiming()
		{
		}
	}
	[Token(Token = "0x2000119")]
	[RequireComponent(typeof(FPSAiming))]
	[RequireComponent(typeof(Animator))]
	public class FPSCharacter : MonoBehaviour
	{
		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float walkSpeed;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float sVel;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPSAiming FPSAiming;

		[Token(Token = "0x6000905")]
		[Address(RVA = "0x12E13D0", Offset = "0x12E13D0", VA = "0x12E13D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0x12E144C", Offset = "0x12E144C", VA = "0x12E144C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0x12E1548", Offset = "0x12E1548", VA = "0x12E1548")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0x12E15F4", Offset = "0x12E15F4", VA = "0x12E15F4")]
		public FPSCharacter()
		{
		}
	}
	[Token(Token = "0x200011A")]
	public class HitReactionTrigger : MonoBehaviour
	{
		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitReaction hitReaction;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float hitForce;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x6000909")]
		[Address(RVA = "0x12E1604", Offset = "0x12E1604", VA = "0x12E1604")]
		private void Update()
		{
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0x12E1748", Offset = "0x12E1748", VA = "0x12E1748")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600090B")]
		[Address(RVA = "0x12E18AC", Offset = "0x12E18AC", VA = "0x12E18AC")]
		public HitReactionTrigger()
		{
		}
	}
	[Token(Token = "0x200011B")]
	public class HoldingHands : MonoBehaviour
	{
		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK rightHandChar;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedIK leftHandChar;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform rightHandTarget;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftHandTarget;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float crossFade;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float speed;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandRotation;

		[Token(Token = "0x600090C")]
		[Address(RVA = "0x12E18BC", Offset = "0x12E18BC", VA = "0x12E18BC")]
		private void Start()
		{
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0x12E1A88", Offset = "0x12E1A88", VA = "0x12E1A88")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0x12E1E98", Offset = "0x12E1E98", VA = "0x12E1E98")]
		public HoldingHands()
		{
		}
	}
	[Token(Token = "0x200011C")]
	public class InteractionC2CDemo : MonoBehaviour
	{
		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem character1;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem character2;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject handShake;

		[Token(Token = "0x600090F")]
		[Address(RVA = "0x12E1EA8", Offset = "0x12E1EA8", VA = "0x12E1EA8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0x12E1F90", Offset = "0x12E1F90", VA = "0x12E1F90")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0x12E207C", Offset = "0x12E207C", VA = "0x12E207C")]
		public InteractionC2CDemo()
		{
		}
	}
	[Token(Token = "0x200011D")]
	public class InteractionDemo : MonoBehaviour
	{
		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool interrupt;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject ball;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractionObject benchMain;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractionObject benchHands;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionObject button;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractionObject cigarette;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionObject door;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isSitting;

		[Token(Token = "0x6000912")]
		[Address(RVA = "0x12E2084", Offset = "0x12E2084", VA = "0x12E2084")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0x12E2584", Offset = "0x12E2584", VA = "0x12E2584")]
		public InteractionDemo()
		{
		}
	}
	[Token(Token = "0x200011E")]
	[RequireComponent(typeof(InteractionSystem))]
	public class InteractionSystemTestGUI : MonoBehaviour
	{
		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The object to interact to")]
		public InteractionObject interactionObject;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The effectors to interact with")]
		public FullBodyBipedEffector[] effectors;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x6000914")]
		[Address(RVA = "0x12E258C", Offset = "0x12E258C", VA = "0x12E258C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0x12E25DC", Offset = "0x12E25DC", VA = "0x12E25DC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0x12E2888", Offset = "0x12E2888", VA = "0x12E2888")]
		public InteractionSystemTestGUI()
		{
		}
	}
	[Token(Token = "0x200011F")]
	public class KissingRig : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000120")]
		public class Partner
		{
			[Token(Token = "0x400080C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedIK ik;

			[Token(Token = "0x400080D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform mouth;

			[Token(Token = "0x400080E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform mouthTarget;

			[Token(Token = "0x400080F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform touchTargetLeftHand;

			[Token(Token = "0x4000810")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform touchTargetRightHand;

			[Token(Token = "0x4000811")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float bodyWeightHorizontal;

			[Token(Token = "0x4000812")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float bodyWeightVertical;

			[Token(Token = "0x4000813")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float neckRotationWeight;

			[Token(Token = "0x4000814")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float headTiltAngle;

			[Token(Token = "0x4000815")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 headTiltAxis;

			[Token(Token = "0x4000816")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Quaternion neckRotation;

			[Token(Token = "0x17000110")]
			private Transform neck
			{
				[Token(Token = "0x600091C")]
				[Address(RVA = "0x12E3094", Offset = "0x12E3094", VA = "0x12E3094")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600091A")]
			[Address(RVA = "0x12E28B8", Offset = "0x12E28B8", VA = "0x12E28B8")]
			public void Initiate()
			{
			}

			[Token(Token = "0x600091B")]
			[Address(RVA = "0x12E2934", Offset = "0x12E2934", VA = "0x12E2934")]
			public void Update(float weight)
			{
			}

			[Token(Token = "0x600091D")]
			[Address(RVA = "0x12E2F2C", Offset = "0x12E2F2C", VA = "0x12E2F2C")]
			private void InverseTransformEffector(FullBodyBipedEffector effector, Transform target, Vector3 targetPosition, float weight)
			{
			}

			[Token(Token = "0x600091E")]
			[Address(RVA = "0x12E30E0", Offset = "0x12E30E0", VA = "0x12E30E0")]
			public Partner()
			{
			}
		}

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Partner partner1;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Partner partner2;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weight;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int iterations;

		[Token(Token = "0x6000917")]
		[Address(RVA = "0x12E2890", Offset = "0x12E2890", VA = "0x12E2890")]
		private void Start()
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0x12E28D8", Offset = "0x12E28D8", VA = "0x12E28D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0x12E2F1C", Offset = "0x12E2F1C", VA = "0x12E2F1C")]
		public KissingRig()
		{
		}
	}
	[Token(Token = "0x2000121")]
	public class MotionAbsorb : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000122")]
		public enum Mode
		{
			[Token(Token = "0x400081F")]
			Position,
			[Token(Token = "0x4000820")]
			PositionOffset
		}

		[Serializable]
		[Token(Token = "0x2000123")]
		public class Absorber
		{
			[Token(Token = "0x4000821")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of effector (hand, foot, shoulder...) - this is just an enum")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000822")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("How much should motion be absorbed on this effector")]
			public float weight;

			[Token(Token = "0x4000823")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Vector3 position;

			[Token(Token = "0x4000824")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private Quaternion rotation;

			[Token(Token = "0x4000825")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IKEffector e;

			[Token(Token = "0x6000925")]
			[Address(RVA = "0x12E3258", Offset = "0x12E3258", VA = "0x12E3258")]
			public void SetToBone(IKSolverFullBodyBiped solver, Mode mode)
			{
			}

			[Token(Token = "0x6000926")]
			[Address(RVA = "0x12E342C", Offset = "0x12E342C", VA = "0x12E342C")]
			public void UpdateEffectorWeights(float w)
			{
			}

			[Token(Token = "0x6000927")]
			[Address(RVA = "0x12E3450", Offset = "0x12E3450", VA = "0x12E3450")]
			public void SetPosition(float w)
			{
			}

			[Token(Token = "0x6000928")]
			[Address(RVA = "0x12E3560", Offset = "0x12E3560", VA = "0x12E3560")]
			public void SetRotation(float w)
			{
			}

			[Token(Token = "0x6000929")]
			[Address(RVA = "0x12E36F8", Offset = "0x12E36F8", VA = "0x12E36F8")]
			public Absorber()
			{
			}
		}

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Use either effector position, position weight, rotation, rotationWeight or positionOffset and rotating the bone directly.")]
		public Mode mode;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Array containing the absorbers")]
		public Absorber[] absorbers;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Weight falloff curve (how fast will the effect reduce after impact)")]
		public AnimationCurve falloff;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("How fast will the impact fade away. (if 1, effect lasts for 1 second)")]
		public float falloffSpeed;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float timer;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float w;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Mode initialMode;

		[Token(Token = "0x600091F")]
		[Address(RVA = "0x12E30F4", Offset = "0x12E30F4", VA = "0x12E30F4", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0x12E31D8", Offset = "0x12E31D8", VA = "0x12E31D8")]
		private void OnCollisionEnter(Collision c)
		{
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0x12E3320", Offset = "0x12E3320", VA = "0x12E3320", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0x12E34E4", Offset = "0x12E34E4", VA = "0x12E34E4")]
		private void AfterIK()
		{
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0x12E35D0", Offset = "0x12E35D0", VA = "0x12E35D0", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0x12E36E8", Offset = "0x12E36E8", VA = "0x12E36E8")]
		public MotionAbsorb()
		{
		}
	}
	[Token(Token = "0x2000124")]
	public class MotionAbsorbCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MotionAbsorb motionAbsorb;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform cube;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float cubeRandomPosition;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve motionAbsorbWeight;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 cubeDefaultPosition;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorStateInfo info;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigidbody;

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x12E3758", Offset = "0x12E3758", VA = "0x12E3758")]
		private void Start()
		{
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x12E37C8", Offset = "0x12E37C8", VA = "0x12E37C8")]
		private void Update()
		{
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x12E3898", Offset = "0x12E3898", VA = "0x12E3898")]
		private void SwingStart()
		{
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x12E39E0", Offset = "0x12E39E0", VA = "0x12E39E0")]
		public MotionAbsorbCharacter()
		{
		}
	}
	[Token(Token = "0x2000125")]
	public class OffsetEffector : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000126")]
		public class EffectorLink
		{
			[Token(Token = "0x400082F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000830")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float weightMultiplier;

			[Token(Token = "0x4000831")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public Vector3 localPosition;

			[Token(Token = "0x6000931")]
			[Address(RVA = "0x12E3C60", Offset = "0x12E3C60", VA = "0x12E3C60")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x12E39F4", Offset = "0x12E39F4", VA = "0x12E39F4", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0x12E3AE0", Offset = "0x12E3AE0", VA = "0x12E3AE0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x12E3C58", Offset = "0x12E3C58", VA = "0x12E3C58")]
		public OffsetEffector()
		{
		}
	}
	[Token(Token = "0x2000127")]
	[RequireComponent(typeof(FullBodyBipedIK))]
	public class PendulumExample : MonoBehaviour
	{
		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		[Tooltip("The master weight of this script.")]
		public float weight;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Multiplier for the distance of the root to the target.")]
		public float hangingDistanceMlp;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Where does the root of the character land when weight is blended out?")]
		[HideInInspector]
		public Vector3 rootTargetPosition;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How is the root of the character rotated when weight is blended out?")]
		[HideInInspector]
		public Quaternion rootTargetRotation;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform target;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform rightHandTarget;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftFootTarget;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform rightFootTarget;

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform pelvisTarget;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform bodyTarget;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform headTarget;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Vector3 pelvisDownAxis;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion rootRelativeToPelvis;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 pelvisToRoot;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float lastWeight;

		[Token(Token = "0x6000932")]
		[Address(RVA = "0x12E3C70", Offset = "0x12E3C70", VA = "0x12E3C70")]
		private void Start()
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0x12E3F70", Offset = "0x12E3F70", VA = "0x12E3F70")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0x12E476C", Offset = "0x12E476C", VA = "0x12E476C")]
		public PendulumExample()
		{
		}
	}
	[Token(Token = "0x2000128")]
	public abstract class PickUp2Handed : MonoBehaviour
	{
		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int GUIspace;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject obj;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform pivot;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform holdPoint;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pickUpTime;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float holdWeight;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float holdWeightVel;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x17000111")]
		private bool holding
		{
			[Token(Token = "0x600093C")]
			[Address(RVA = "0x12E49EC", Offset = "0x12E49EC", VA = "0x12E49EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0x12E47D8", Offset = "0x12E47D8", VA = "0x12E47D8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000936")]
		protected abstract void RotatePivot();

		[Token(Token = "0x6000937")]
		[Address(RVA = "0x12E4A0C", Offset = "0x12E4A0C", VA = "0x12E4A0C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0x12E4BCC", Offset = "0x12E4BCC", VA = "0x12E4BCC")]
		private void OnPause(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0x12E4D3C", Offset = "0x12E4D3C", VA = "0x12E4D3C")]
		private void OnStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x12E4E0C", Offset = "0x12E4E0C", VA = "0x12E4E0C")]
		private void OnDrop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x12E4F2C", Offset = "0x12E4F2C", VA = "0x12E4F2C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x12E50A0", Offset = "0x12E50A0", VA = "0x12E50A0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x12E529C", Offset = "0x12E529C", VA = "0x12E529C")]
		protected PickUp2Handed()
		{
		}
	}
	[Token(Token = "0x2000129")]
	public class PickUpBox : PickUp2Handed
	{
		[Token(Token = "0x600093F")]
		[Address(RVA = "0x12E52B0", Offset = "0x12E52B0", VA = "0x12E52B0", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0x12E5490", Offset = "0x12E5490", VA = "0x12E5490")]
		public PickUpBox()
		{
		}
	}
	[Token(Token = "0x200012A")]
	public class PickUpSphere : PickUp2Handed
	{
		[Token(Token = "0x6000941")]
		[Address(RVA = "0x12E54A4", Offset = "0x12E54A4", VA = "0x12E54A4", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0x12E55B8", Offset = "0x12E55B8", VA = "0x12E55B8")]
		public PickUpSphere()
		{
		}
	}
	[Token(Token = "0x200012B")]
	public class RagdollUtilityDemo : MonoBehaviour
	{
		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RagdollUtility ragdollUtility;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform root;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody pelvis;

		[Token(Token = "0x6000943")]
		[Address(RVA = "0x12E55CC", Offset = "0x12E55CC", VA = "0x12E55CC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x12E5664", Offset = "0x12E5664", VA = "0x12E5664")]
		private void Update()
		{
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x12E577C", Offset = "0x12E577C", VA = "0x12E577C")]
		public RagdollUtilityDemo()
		{
		}
	}
	[Token(Token = "0x200012C")]
	[RequireComponent(typeof(Recoil))]
	public class RecoilTest : MonoBehaviour
	{
		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float magnitude;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Recoil recoil;

		[Token(Token = "0x6000946")]
		[Address(RVA = "0x12E5784", Offset = "0x12E5784", VA = "0x12E5784")]
		private void Start()
		{
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0x12E57D4", Offset = "0x12E57D4", VA = "0x12E57D4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0x12E5820", Offset = "0x12E5820", VA = "0x12E5820")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0x12E58B8", Offset = "0x12E58B8", VA = "0x12E58B8")]
		public RecoilTest()
		{
		}
	}
	[Token(Token = "0x200012D")]
	public class ResetInteractionObject : MonoBehaviour
	{
		[Token(Token = "0x200012E")]
		[CompilerGenerated]
		private sealed class <ResetObject>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000857")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000858")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000859")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float resetTime;

			[Token(Token = "0x400085A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ResetInteractionObject <>4__this;

			[Token(Token = "0x17000112")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000951")]
				[Address(RVA = "0x12E5BF8", Offset = "0x12E5BF8", VA = "0x12E5BF8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000113")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000953")]
				[Address(RVA = "0x12E5C40", Offset = "0x12E5C40", VA = "0x12E5C40", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600094E")]
			[Address(RVA = "0x12E5A2C", Offset = "0x12E5A2C", VA = "0x12E5A2C")]
			[DebuggerHidden]
			public <ResetObject>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x600094F")]
			[Address(RVA = "0x12E5A64", Offset = "0x12E5A64", VA = "0x12E5A64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000950")]
			[Address(RVA = "0x12E5A68", Offset = "0x12E5A68", VA = "0x12E5A68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000952")]
			[Address(RVA = "0x12E5C00", Offset = "0x12E5C00", VA = "0x12E5C00", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float resetDelay;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform defaultParent;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody r;

		[Token(Token = "0x600094A")]
		[Address(RVA = "0x12E58C8", Offset = "0x12E58C8", VA = "0x12E58C8")]
		private void Start()
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0x12E5978", Offset = "0x12E5978", VA = "0x12E5978")]
		private void OnPickUp(Transform t)
		{
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0x12E59B4", Offset = "0x12E59B4", VA = "0x12E59B4")]
		[IteratorStateMachine(typeof(<ResetObject>d__7))]
		private IEnumerator ResetObject(float resetTime)
		{
			return null;
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0x12E5A54", Offset = "0x12E5A54", VA = "0x12E5A54")]
		public ResetInteractionObject()
		{
		}
	}
	[Token(Token = "0x200012F")]
	[RequireComponent(typeof(Animator))]
	public class SoccerDemo : MonoBehaviour
	{
		[Token(Token = "0x2000130")]
		[CompilerGenerated]
		private sealed class <ResetDelayed>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400085E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400085F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000860")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoccerDemo <>4__this;

			[Token(Token = "0x17000114")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600095A")]
				[Address(RVA = "0x12E5EB4", Offset = "0x12E5EB4", VA = "0x12E5EB4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000115")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600095C")]
				[Address(RVA = "0x12E5EFC", Offset = "0x12E5EFC", VA = "0x12E5EFC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000957")]
			[Address(RVA = "0x12E5D58", Offset = "0x12E5D58", VA = "0x12E5D58")]
			[DebuggerHidden]
			public <ResetDelayed>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000958")]
			[Address(RVA = "0x12E5D88", Offset = "0x12E5D88", VA = "0x12E5D88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000959")]
			[Address(RVA = "0x12E5D8C", Offset = "0x12E5D8C", VA = "0x12E5D8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600095B")]
			[Address(RVA = "0x12E5EBC", Offset = "0x12E5EBC", VA = "0x12E5EBC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator animator;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 defaultPosition;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x6000954")]
		[Address(RVA = "0x12E5C48", Offset = "0x12E5C48", VA = "0x12E5C48")]
		private void Start()
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0x12E5CF0", Offset = "0x12E5CF0", VA = "0x12E5CF0")]
		[IteratorStateMachine(typeof(<ResetDelayed>d__4))]
		private IEnumerator ResetDelayed()
		{
			return null;
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0x12E5D80", Offset = "0x12E5D80", VA = "0x12E5D80")]
		public SoccerDemo()
		{
		}
	}
	[Token(Token = "0x2000131")]
	public class TouchWalls : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000132")]
		public class EffectorLink
		{
			[Token(Token = "0x4000863")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x4000864")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000865")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InteractionObject interactionObject;

			[Token(Token = "0x4000866")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spherecastFrom;

			[Token(Token = "0x4000867")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float spherecastRadius;

			[Token(Token = "0x4000868")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float minDistance;

			[Token(Token = "0x4000869")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public LayerMask touchLayers;

			[Token(Token = "0x400086A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float lerpSpeed;

			[Token(Token = "0x400086B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float minSwitchTime;

			[Token(Token = "0x400086C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float releaseDistance;

			[Token(Token = "0x400086D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool sliding;

			[Token(Token = "0x400086E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private Vector3 raycastDirectionLocal;

			[Token(Token = "0x400086F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float raycastDistance;

			[Token(Token = "0x4000870")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private bool inTouch;

			[Token(Token = "0x4000871")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private RaycastHit hit;

			[Token(Token = "0x4000872")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 targetPosition;

			[Token(Token = "0x4000873")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Quaternion targetRotation;

			[Token(Token = "0x4000874")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private bool initiated;

			[Token(Token = "0x4000875")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private float nextSwitchTime;

			[Token(Token = "0x4000876")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private float speedF;

			[Token(Token = "0x6000961")]
			[Address(RVA = "0x12E5F68", Offset = "0x12E5F68", VA = "0x12E5F68")]
			public void Initiate(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000962")]
			[Address(RVA = "0x12E6AA4", Offset = "0x12E6AA4", VA = "0x12E6AA4")]
			private bool FindWalls(Vector3 direction)
			{
				return default(bool);
			}

			[Token(Token = "0x6000963")]
			[Address(RVA = "0x12E632C", Offset = "0x12E632C", VA = "0x12E632C")]
			public void Update(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000964")]
			[Address(RVA = "0x12E6B80", Offset = "0x12E6B80", VA = "0x12E6B80")]
			private void StopTouch(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000965")]
			[Address(RVA = "0x12E6C64", Offset = "0x12E6C64", VA = "0x12E6C64")]
			private void OnInteractionStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000966")]
			[Address(RVA = "0x12E6CF0", Offset = "0x12E6CF0", VA = "0x12E6CF0")]
			private void OnInteractionResume(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000967")]
			[Address(RVA = "0x12E6D78", Offset = "0x12E6D78", VA = "0x12E6D78")]
			private void OnInteractionStop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000968")]
			[Address(RVA = "0x12E68E4", Offset = "0x12E68E4", VA = "0x12E68E4")]
			public void Destroy(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000969")]
			[Address(RVA = "0x12E6E00", Offset = "0x12E6E00", VA = "0x12E6E00")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x600095D")]
		[Address(RVA = "0x12E5F04", Offset = "0x12E5F04", VA = "0x12E5F04")]
		private void Start()
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0x12E62CC", Offset = "0x12E62CC", VA = "0x12E62CC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0x12E6834", Offset = "0x12E6834", VA = "0x12E6834")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x12E6A9C", Offset = "0x12E6A9C", VA = "0x12E6A9C")]
		public TouchWalls()
		{
		}
	}
	[Token(Token = "0x2000133")]
	public class TransferMotion : MonoBehaviour
	{
		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Transform to transfer motion to.")]
		public Transform to;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The amount of motion to transfer.")]
		[Range(0f, 1f)]
		public float transferMotion;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x12E6E34", Offset = "0x12E6E34", VA = "0x12E6E34")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x12E6E64", Offset = "0x12E6E64", VA = "0x12E6E64")]
		private void Update()
		{
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x12E6F14", Offset = "0x12E6F14", VA = "0x12E6F14")]
		public TransferMotion()
		{
		}
	}
	[Token(Token = "0x2000134")]
	public class TwoHandedProp : MonoBehaviour
	{
		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The left hand target parented to the right hand.")]
		public Transform leftHandTarget;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 targetPosRelativeToRight;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion targetRotRelativeToRight;

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x12E6F28", Offset = "0x12E6F28", VA = "0x12E6F28")]
		private void Start()
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x12E710C", Offset = "0x12E710C", VA = "0x12E710C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x12E73A8", Offset = "0x12E73A8", VA = "0x12E73A8")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x12E7470", Offset = "0x12E7470", VA = "0x12E7470")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x12E757C", Offset = "0x12E757C", VA = "0x12E757C")]
		public TwoHandedProp()
		{
		}
	}
	[Token(Token = "0x2000135")]
	public class UserControlInteractions : UserControlThirdPerson
	{
		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CharacterThirdPerson character;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool disableInputInInteraction;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float enableInputAtProgress;

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x12E7584", Offset = "0x12E7584", VA = "0x12E7584", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x12E769C", Offset = "0x12E769C", VA = "0x12E769C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0x12E7864", Offset = "0x12E7864", VA = "0x12E7864")]
		public UserControlInteractions()
		{
		}
	}
	[Token(Token = "0x2000136")]
	public class GrounderDemo : MonoBehaviour
	{
		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] characters;

		[Token(Token = "0x6000975")]
		[Address(RVA = "0x12E7880", Offset = "0x12E7880", VA = "0x12E7880")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x12E7A88", Offset = "0x12E7A88", VA = "0x12E7A88")]
		public void Activate(int index)
		{
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x12E7AF4", Offset = "0x12E7AF4", VA = "0x12E7AF4")]
		public GrounderDemo()
		{
		}
	}
	[Token(Token = "0x2000137")]
	public class PlatformRotator : MonoBehaviour
	{
		[Token(Token = "0x2000138")]
		[CompilerGenerated]
		private sealed class <SwitchRotation>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400088F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000890")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000891")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlatformRotator <>4__this;

			[Token(Token = "0x17000116")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000981")]
				[Address(RVA = "0x12E8240", Offset = "0x12E8240", VA = "0x12E8240", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000117")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000983")]
				[Address(RVA = "0x12E8288", Offset = "0x12E8288", VA = "0x12E8288", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600097E")]
			[Address(RVA = "0x12E7ED4", Offset = "0x12E7ED4", VA = "0x12E7ED4")]
			[DebuggerHidden]
			public <SwitchRotation>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x600097F")]
			[Address(RVA = "0x12E80C4", Offset = "0x12E80C4", VA = "0x12E80C4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000980")]
			[Address(RVA = "0x12E80C8", Offset = "0x12E80C8", VA = "0x12E80C8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000982")]
			[Address(RVA = "0x12E8248", Offset = "0x12E8248", VA = "0x12E8248", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxAngle;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float switchRotationTime;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float random;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotationSpeed;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 movePosition;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float moveSpeed;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int characterLayer;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion targetRotation;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 targetPosition;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 velocity;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody r;

		[Token(Token = "0x6000978")]
		[Address(RVA = "0x12E7AFC", Offset = "0x12E7AFC", VA = "0x12E7AFC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0x12E7C20", Offset = "0x12E7C20", VA = "0x12E7C20")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0x12E7BB8", Offset = "0x12E7BB8", VA = "0x12E7BB8")]
		[IteratorStateMachine(typeof(<SwitchRotation>d__14))]
		private IEnumerator SwitchRotation()
		{
			return null;
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0x12E7EFC", Offset = "0x12E7EFC", VA = "0x12E7EFC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0x12E7FD4", Offset = "0x12E7FD4", VA = "0x12E7FD4")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x12E80A8", Offset = "0x12E80A8", VA = "0x12E80A8")]
		public PlatformRotator()
		{
		}
	}
	[Token(Token = "0x2000139")]
	public class BendGoal : MonoBehaviour
	{
		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbIK limbIK;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x12E8290", Offset = "0x12E8290", VA = "0x12E8290")]
		private void Start()
		{
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0x12E82F8", Offset = "0x12E82F8", VA = "0x12E82F8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x12E83A4", Offset = "0x12E83A4", VA = "0x12E83A4")]
		public BendGoal()
		{
		}
	}
	[Token(Token = "0x200013A")]
	public class Turret : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200013B")]
		public class Part
		{
			[Token(Token = "0x4000896")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000897")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private RotationLimit rotationLimit;

			[Token(Token = "0x6000989")]
			[Address(RVA = "0x12E8418", Offset = "0x12E8418", VA = "0x12E8418")]
			public void AimAt(Transform target)
			{
			}

			[Token(Token = "0x600098A")]
			[Address(RVA = "0x12E8538", Offset = "0x12E8538", VA = "0x12E8538")]
			public Part()
			{
			}
		}

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Part[] parts;

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x12E83B4", Offset = "0x12E83B4", VA = "0x12E83B4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x12E8530", Offset = "0x12E8530", VA = "0x12E8530")]
		public Turret()
		{
		}
	}
	[Token(Token = "0x200013C")]
	public class VRIKAvatarScaleCalibrationOculus : MonoBehaviour
	{
		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float scaleMlp;

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x12E8540", Offset = "0x12E8540", VA = "0x12E8540")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x12E86AC", Offset = "0x12E86AC", VA = "0x12E86AC")]
		public VRIKAvatarScaleCalibrationOculus()
		{
		}
	}
	[Token(Token = "0x200013D")]
	public class HitReactionVRIKTrigger : MonoBehaviour
	{
		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitReactionVRIK hitReaction;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float hitForce;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x12E86BC", Offset = "0x12E86BC", VA = "0x12E86BC")]
		private void Update()
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x12E8800", Offset = "0x12E8800", VA = "0x12E8800")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0x12E8964", Offset = "0x12E8964", VA = "0x12E8964")]
		public HitReactionVRIKTrigger()
		{
		}
	}
	[Token(Token = "0x200013E")]
	public class VRIKCalibrationController : MonoBehaviour
	{
		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the VRIK component on the avatar.")]
		public VRIK ik;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The settings for VRIK calibration.")]
		public VRIKCalibrator.Settings settings;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The HMD.")]
		public Transform headTracker;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) A tracker placed anywhere on the body of the player, preferrably close to the pelvis, on the belt area.")]
		public Transform bodyTracker;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("(Optional) A tracker or hand controller device placed anywhere on or in the player's left hand.")]
		public Transform leftHandTracker;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("(Optional) A tracker or hand controller device placed anywhere on or in the player's right hand.")]
		public Transform rightHandTracker;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("(Optional) A tracker placed anywhere on the ankle or toes of the player's left leg.")]
		public Transform leftFootTracker;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("(Optional) A tracker placed anywhere on the ankle or toes of the player's right leg.")]
		public Transform rightFootTracker;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Data stored by Calibration")]
		public VRIKCalibrator.CalibrationData data;

		[Token(Token = "0x6000990")]
		[Address(RVA = "0x12E8974", Offset = "0x12E8974", VA = "0x12E8974")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0x12E8AC8", Offset = "0x12E8AC8", VA = "0x12E8AC8")]
		public VRIKCalibrationController()
		{
		}
	}
	[Token(Token = "0x200013F")]
	public class VRIKPlatform : MonoBehaviour
	{
		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPosition;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion lastRotation;

		[Token(Token = "0x6000992")]
		[Address(RVA = "0x12E8B30", Offset = "0x12E8B30", VA = "0x12E8B30")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0x12E8B80", Offset = "0x12E8B80", VA = "0x12E8B80")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x12E8D58", Offset = "0x12E8D58", VA = "0x12E8D58")]
		public VRIKPlatform()
		{
		}
	}
	[Token(Token = "0x2000140")]
	public class VRIKPlatformController : MonoBehaviour
	{
		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trackingSpace;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform platform;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool moveToPlatform;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform lastPlatform;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 lastPosition;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x12E8DB0", Offset = "0x12E8DB0", VA = "0x12E8DB0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x12E92D0", Offset = "0x12E92D0", VA = "0x12E92D0")]
		public VRIKPlatformController()
		{
		}
	}
	[Token(Token = "0x2000141")]
	public abstract class CharacterAnimationBase : MonoBehaviour
	{
		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool smoothFollow;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float smoothFollowSpeed;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected bool animatePhysics;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 localPosition;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion localRotation;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x17000118")]
		public virtual bool animationGrounded
		{
			[Token(Token = "0x6000998")]
			[Address(RVA = "0x12E934C", Offset = "0x12E934C", VA = "0x12E934C", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x12E932C", Offset = "0x12E932C", VA = "0x12E932C", Slot = "4")]
		public virtual Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x12E9354", Offset = "0x12E9354", VA = "0x12E9354")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0x12E93B4", Offset = "0x12E93B4", VA = "0x12E93B4", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0x12DE560", Offset = "0x12DE560", VA = "0x12DE560", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0x12E97A4", Offset = "0x12E97A4", VA = "0x12E97A4", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0x12E9538", Offset = "0x12E9538", VA = "0x12E9538")]
		private void SmoothFollow()
		{
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0x12E97B4", Offset = "0x12E97B4", VA = "0x12E97B4")]
		protected CharacterAnimationBase()
		{
		}
	}
	[Token(Token = "0x2000142")]
	[RequireComponent(typeof(Animator))]
	public class CharacterAnimationSimple : CharacterAnimationBase
	{
		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float pivotOffset;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve moveSpeed;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator animator;

		[Token(Token = "0x600099F")]
		[Address(RVA = "0x12E97CC", Offset = "0x12E97CC", VA = "0x12E97CC", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x12E9824", Offset = "0x12E9824", VA = "0x12E9824", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x12E98B4", Offset = "0x12E98B4", VA = "0x12E98B4")]
		private void Update()
		{
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x12E99D8", Offset = "0x12E99D8", VA = "0x12E99D8")]
		public CharacterAnimationSimple()
		{
		}
	}
	[Token(Token = "0x2000143")]
	[RequireComponent(typeof(Animator))]
	public class CharacterAnimationThirdPerson : CharacterAnimationBase
	{
		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float turnSensitivity;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float turnSpeed;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private float runCycleLegOffset;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		[Range(0.1f, 3f)]
		private float animSpeedMultiplier;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Animator animator;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 lastForward;

		[Token(Token = "0x40008C2")]
		private const string groundedDirectional = "Grounded Directional";

		[Token(Token = "0x40008C3")]
		private const string groundedStrafe = "Grounded Strafe";

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float deltaAngle;

		[Token(Token = "0x17000119")]
		public override bool animationGrounded
		{
			[Token(Token = "0x60009A5")]
			[Address(RVA = "0x12E9A0C", Offset = "0x12E9A0C", VA = "0x12E9A0C", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x12DE1A0", Offset = "0x12DE1A0", VA = "0x12DE1A0", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x12E99F0", Offset = "0x12E99F0", VA = "0x12E99F0", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x12E9B00", Offset = "0x12E9B00", VA = "0x12E9B00", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x12E9ED4", Offset = "0x12E9ED4", VA = "0x12E9ED4")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x12DE684", Offset = "0x12DE684", VA = "0x12DE684")]
		public CharacterAnimationThirdPerson()
		{
		}
	}
	[Token(Token = "0x2000144")]
	[RequireComponent(typeof(CapsuleCollider))]
	[RequireComponent(typeof(Rigidbody))]
	public abstract class CharacterBase : MonoBehaviour
	{
		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If specified, will use the direction from the character to this Transform as the gravity vector instead of Physics.gravity. Physics.gravity.magnitude will be used as the magnitude of the gravity vector.")]
		[Header("Base Parameters")]
		public Transform gravityTarget;

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Multiplies gravity applied to the character even if 'Individual Gravity' is unchecked.")]
		public float gravityMultiplier;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float airborneThreshold;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float slopeStartAngle;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float slopeEndAngle;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float spherecastRadius;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LayerMask groundLayers;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PhysicMaterial zeroFrictionMaterial;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PhysicMaterial highFrictionMaterial;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody r;

		[Token(Token = "0x40008CF")]
		protected const float half = 0.5f;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float originalHeight;

		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected Vector3 originalCenter;

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected CapsuleCollider capsule;

		[Token(Token = "0x60009A9")]
		public abstract void Move(Vector3 deltaPosition, Quaternion deltaRotation);

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0x12E9FFC", Offset = "0x12E9FFC", VA = "0x12E9FFC")]
		protected Vector3 GetGravity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x12EA1E8", Offset = "0x12EA1E8", VA = "0x12EA1E8", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x12EA398", Offset = "0x12EA398", VA = "0x12EA398", Slot = "6")]
		protected virtual RaycastHit GetSpherecastHit()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x12EA538", Offset = "0x12EA538", VA = "0x12EA538")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x12EA598", Offset = "0x12EA598", VA = "0x12EA598")]
		protected void RigidbodyRotateAround(Vector3 point, Vector3 axis, float angle)
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x12EA6FC", Offset = "0x12EA6FC", VA = "0x12EA6FC")]
		protected void ScaleCapsule(float mlp)
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x12EA900", Offset = "0x12EA900", VA = "0x12EA900")]
		protected void HighFriction()
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x12EA924", Offset = "0x12EA924", VA = "0x12EA924")]
		protected void ZeroFriction()
		{
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0x12EA948", Offset = "0x12EA948", VA = "0x12EA948")]
		protected float GetSlopeDamper(Vector3 velocity, Vector3 groundNormal)
		{
			return default(float);
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x12EAA94", Offset = "0x12EAA94", VA = "0x12EAA94")]
		protected CharacterBase()
		{
		}
	}
	[Token(Token = "0x2000145")]
	public class CharacterThirdPerson : CharacterBase
	{
		[Serializable]
		[Token(Token = "0x2000146")]
		public enum MoveMode
		{
			[Token(Token = "0x400090C")]
			Directional,
			[Token(Token = "0x400090D")]
			Strafe
		}

		[Token(Token = "0x2000147")]
		public struct AnimState
		{
			[Token(Token = "0x400090E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 moveDirection;

			[Token(Token = "0x400090F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool jump;

			[Token(Token = "0x4000910")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool crouch;

			[Token(Token = "0x4000911")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			public bool onGround;

			[Token(Token = "0x4000912")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			public bool isStrafing;

			[Token(Token = "0x4000913")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float yVelocity;

			[Token(Token = "0x4000914")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool doubleJump;
		}

		[Token(Token = "0x2000148")]
		[CompilerGenerated]
		private sealed class <JumpSmooth>d__74 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000915")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000916")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000917")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CharacterThirdPerson <>4__this;

			[Token(Token = "0x4000918")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 jumpVelocity;

			[Token(Token = "0x4000919")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <steps>5__2;

			[Token(Token = "0x400091A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <stepsToTake>5__3;

			[Token(Token = "0x1700011B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60009C9")]
				[Address(RVA = "0x12ED460", Offset = "0x12ED460", VA = "0x12ED460", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700011C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60009CB")]
				[Address(RVA = "0x12ED4A8", Offset = "0x12ED4A8", VA = "0x12ED4A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60009C6")]
			[Address(RVA = "0x12ED240", Offset = "0x12ED240", VA = "0x12ED240")]
			[DebuggerHidden]
			public <JumpSmooth>d__74(int <>1__state)
			{
			}

			[Token(Token = "0x60009C7")]
			[Address(RVA = "0x12ED368", Offset = "0x12ED368", VA = "0x12ED368", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60009C8")]
			[Address(RVA = "0x12ED36C", Offset = "0x12ED36C", VA = "0x12ED36C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60009CA")]
			[Address(RVA = "0x12ED468", Offset = "0x12ED468", VA = "0x12ED468", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("References")]
		public CharacterAnimationBase characterAnimation;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UserControlThirdPerson userControl;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public CameraController cam;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Movement")]
		public MoveMode moveMode;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool smoothPhysics;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float smoothAccelerationTime;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float linearAccelerationSpeed;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float platformFriction;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float groundStickyEffect;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float maxVerticalVelocityOnGround;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float velocityToGroundTangentWeight;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Rotation")]
		public bool lookInCameraDirection;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float turnSpeed;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float stationaryTurnSpeedMlp;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Header("Jumping and Falling")]
		public bool smoothJump;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float airSpeed;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float airControl;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float jumpPower;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float jumpRepeatDelayTime;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool doubleJumpEnabled;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float doubleJumpPowerMlp;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Wall Running")]
		public LayerMask wallRunLayers;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float wallRunMaxLength;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float wallRunMinMoveMag;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float wallRunMinVelocityY;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float wallRunRotationSpeed;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float wallRunMaxRotationAngle;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float wallRunWeightSpeed;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Header("Crouching")]
		public float crouchCapsuleScaleMlp;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public AnimState animState;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		protected Vector3 moveDirection;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Animator animator;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 normal;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 platformVelocity;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 platformAngularVelocity;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private RaycastHit hit;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float jumpLeg;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float jumpEndTime;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float forwardMlp;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float groundDistance;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float lastAirTime;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float stickyForce;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Vector3 wallNormal;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private Vector3 moveDirectionVelocity;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private float wallRunWeight;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private float lastWallRunWeight;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private Vector3 fixedDeltaPosition;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private Quaternion fixedDeltaRotation;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private bool fixedFrame;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private float wallRunEndTime;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private Vector3 gravity;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private Vector3 verticalVelocity;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private float velocityY;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private bool doubleJumped;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E1")]
		private bool jumpReleased;

		[Token(Token = "0x1700011A")]
		public bool onGround
		{
			[Token(Token = "0x60009B4")]
			[Address(RVA = "0x12EAAB4", Offset = "0x12EAAB4", VA = "0x12EAAB4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009B5")]
			[Address(RVA = "0x12EAABC", Offset = "0x12EAABC", VA = "0x12EAABC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x12EAAC8", Offset = "0x12EAAC8", VA = "0x12EAAC8", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x12EACA0", Offset = "0x12EACA0", VA = "0x12EACA0")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x12EAD24", Offset = "0x12EAD24", VA = "0x12EAD24", Slot = "4")]
		public override void Move(Vector3 deltaPosition, Quaternion deltaRotation)
		{
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x12EADD4", Offset = "0x12EADD4", VA = "0x12EADD4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x12EBDD0", Offset = "0x12EBDD0", VA = "0x12EBDD0", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x12EC260", Offset = "0x12EC260", VA = "0x12EC260", Slot = "8")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0x12EB494", Offset = "0x12EB494", VA = "0x12EB494")]
		private void MoveFixed(Vector3 deltaPosition)
		{
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0x12EC338", Offset = "0x12EC338", VA = "0x12EC338")]
		private void WallRun()
		{
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x12EC9C4", Offset = "0x12EC9C4", VA = "0x12EC9C4")]
		private bool CanWallRun()
		{
			return default(bool);
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x12EBE5C", Offset = "0x12EBE5C", VA = "0x12EBE5C")]
		private Vector3 GetMoveDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x12ECAB4", Offset = "0x12ECAB4", VA = "0x12ECAB4", Slot = "9")]
		protected virtual void Rotate()
		{
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x12ECF38", Offset = "0x12ECF38", VA = "0x12ECF38")]
		private Vector3 GetForwardDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x12ED060", Offset = "0x12ED060", VA = "0x12ED060", Slot = "10")]
		protected virtual bool Jump()
		{
			return default(bool);
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x12ED1B4", Offset = "0x12ED1B4", VA = "0x12ED1B4")]
		[IteratorStateMachine(typeof(<JumpSmooth>d__74))]
		private IEnumerator JumpSmooth(Vector3 jumpVelocity)
		{
			return null;
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x12EB870", Offset = "0x12EB870", VA = "0x12EB870")]
		private void GroundCheck()
		{
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x12ED268", Offset = "0x12ED268", VA = "0x12ED268")]
		public CharacterThirdPerson()
		{
		}
	}
	[Token(Token = "0x2000149")]
	[RequireComponent(typeof(Animator))]
	public class SimpleLocomotion : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200014A")]
		public enum RotationMode
		{
			[Token(Token = "0x4000929")]
			Smooth,
			[Token(Token = "0x400092A")]
			Linear
		}

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The component that updates the camera.")]
		public CameraController cameraController;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Acceleration of movement.")]
		public float accelerationTime;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Turning speed.")]
		public float turnTime;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If true, will run on left shift, if not will walk on left shift.")]
		public bool walkByDefault;

		[Token(Token = "0x400091F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Smooth or linear rotation.")]
		public RotationMode rotationMode;

		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Procedural motion speed (if not using root motion).")]
		public float moveSpeed;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator animator;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float speed;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float angleVel;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float speedVel;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 linearTargetDirection;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CharacterController characterController;

		[Token(Token = "0x1700011D")]
		public bool isGrounded
		{
			[Token(Token = "0x60009CC")]
			[Address(RVA = "0x12ED4B0", Offset = "0x12ED4B0", VA = "0x12ED4B0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009CD")]
			[Address(RVA = "0x12ED4B8", Offset = "0x12ED4B8", VA = "0x12ED4B8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x12ED4C4", Offset = "0x12ED4C4", VA = "0x12ED4C4")]
		private void Start()
		{
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x12ED558", Offset = "0x12ED558", VA = "0x12ED558")]
		private void Update()
		{
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x12EDB70", Offset = "0x12EDB70", VA = "0x12EDB70")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x12ED5A0", Offset = "0x12ED5A0", VA = "0x12ED5A0")]
		private void Rotate()
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x12ED908", Offset = "0x12ED908", VA = "0x12ED908")]
		private void Move()
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x12EDBA0", Offset = "0x12EDBA0", VA = "0x12EDBA0")]
		private Vector3 GetInputVector()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x12EDC38", Offset = "0x12EDC38", VA = "0x12EDC38")]
		private Vector3 GetInputVectorRaw()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x12EDCB8", Offset = "0x12EDCB8", VA = "0x12EDCB8")]
		public SimpleLocomotion()
		{
		}
	}
	[Token(Token = "0x200014B")]
	public class UserControlAI : UserControlThirdPerson
	{
		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform moveTarget;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float stoppingDistance;

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float stoppingThreshold;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Navigator navigator;

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x12EDCE0", Offset = "0x12EDCE0", VA = "0x12EDCE0", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x12EDDFC", Offset = "0x12EDDFC", VA = "0x12EDDFC", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x12EE460", Offset = "0x12EE460", VA = "0x12EE460")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x12EE64C", Offset = "0x12EE64C", VA = "0x12EE64C")]
		public UserControlAI()
		{
		}
	}
	[Token(Token = "0x200014C")]
	public class UserControlThirdPerson : MonoBehaviour
	{
		[Token(Token = "0x200014D")]
		public struct State
		{
			[Token(Token = "0x4000934")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 move;

			[Token(Token = "0x4000935")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 lookPos;

			[Token(Token = "0x4000936")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool crouch;

			[Token(Token = "0x4000937")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			public bool jump;

			[Token(Token = "0x4000938")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int actionIndex;
		}

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool walkByDefault;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool canCrouch;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool canJump;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public State state;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform cam;

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x12EDD1C", Offset = "0x12EDD1C", VA = "0x12EDD1C", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x12EE678", Offset = "0x12EE678", VA = "0x12EE678", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x12EE668", Offset = "0x12EE668", VA = "0x12EE668")]
		public UserControlThirdPerson()
		{
		}
	}
	[Token(Token = "0x200014E")]
	public class ApplicationQuit : MonoBehaviour
	{
		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x12EE9BC", Offset = "0x12EE9BC", VA = "0x12EE9BC")]
		private void Update()
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x12EE9F4", Offset = "0x12EE9F4", VA = "0x12EE9F4")]
		public ApplicationQuit()
		{
		}
	}
	[Token(Token = "0x200014F")]
	public class SlowMo : MonoBehaviour
	{
		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyCode[] keyCodes;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool mouse0;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool mouse1;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float slowMoTimeScale;

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x12EE9FC", Offset = "0x12EE9FC", VA = "0x12EE9FC")]
		private void Update()
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0x12EEA24", Offset = "0x12EEA24", VA = "0x12EEA24")]
		private bool IsSlowMotion()
		{
			return default(bool);
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0x12EEAC8", Offset = "0x12EEAC8", VA = "0x12EEAC8")]
		public SlowMo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000150")]
	public class Navigator
	{
		[Token(Token = "0x2000151")]
		public enum State
		{
			[Token(Token = "0x400094C")]
			Idle,
			[Token(Token = "0x400094D")]
			Seeking,
			[Token(Token = "0x400094E")]
			OnPath
		}

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Should this Navigator be actively seeking a path.")]
		public bool activeTargetSeeking;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("Increase this value if the character starts running in a circle, not able to reach the corner because of a too large turning radius.")]
		public float cornerRadius;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Recalculate path if target position has moved by this distance from the position it was at when the path was originally calculated")]
		public float recalculateOnPathDistance;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Sample within this distance from sourcePosition.")]
		public float maxSampleDistance;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Interval of updating the path")]
		public float nextPathInterval;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform transform;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int cornerIndex;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] corners;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private NavMeshPath path;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 lastTargetPosition;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool initiated;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float nextPathTime;

		[Token(Token = "0x1700011E")]
		public Vector3 normalizedDeltaPosition
		{
			[Token(Token = "0x60009E2")]
			[Address(RVA = "0x12EEADC", Offset = "0x12EEADC", VA = "0x12EEADC")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60009E3")]
			[Address(RVA = "0x12EEAE8", Offset = "0x12EEAE8", VA = "0x12EEAE8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700011F")]
		public State state
		{
			[Token(Token = "0x60009E4")]
			[Address(RVA = "0x12EEAF4", Offset = "0x12EEAF4", VA = "0x12EEAF4")]
			[CompilerGenerated]
			get
			{
				return default(State);
			}
			[Token(Token = "0x60009E5")]
			[Address(RVA = "0x12EEAFC", Offset = "0x12EEAFC", VA = "0x12EEAFC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x12EDD48", Offset = "0x12EDD48", VA = "0x12EDD48")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x12EE01C", Offset = "0x12EE01C", VA = "0x12EE01C")]
		public void Update(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x12EEBDC", Offset = "0x12EEBDC", VA = "0x12EEBDC")]
		private void CalculatePath(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x12EEC40", Offset = "0x12EEC40", VA = "0x12EEC40")]
		private bool Find(Vector3 targetPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x12EEB04", Offset = "0x12EEB04", VA = "0x12EEB04")]
		private void Stop()
		{
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x12EEB60", Offset = "0x12EEB60", VA = "0x12EEB60")]
		private float HorDistance(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x12EE488", Offset = "0x12EE488", VA = "0x12EE488")]
		public void Visualize()
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x12EED74", Offset = "0x12EED74", VA = "0x12EED74")]
		public Navigator()
		{
		}
	}
}
namespace FullSerializer
{
	[Token(Token = "0x2000152")]
	public class fsAotCompilationManager
	{
		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<Type> AotCandidateTypes;

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x12EEDD8", Offset = "0x12EEDD8", VA = "0x12EEDD8")]
		private static bool HasMember(fsAotVersionInfo versionInfo, fsAotVersionInfo.Member member)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x12EEEE8", Offset = "0x12EEEE8", VA = "0x12EEEE8")]
		public static bool IsAotModelUpToDate(fsMetaType currentModel, fsIAotConverter aotModel)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0x12EF254", Offset = "0x12EF254", VA = "0x12EF254")]
		public static string RunAotCompilationForType(fsConfig config, Type type)
		{
			return null;
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0x12F0674", Offset = "0x12F0674", VA = "0x12F0674")]
		private static string EmitVersionInfo(string prefix, Type type, fsMetaProperty[] members, bool isConstructorPublic)
		{
			return null;
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x12F1060", Offset = "0x12F1060", VA = "0x12F1060")]
		private static string GetConverterString(fsMetaProperty member)
		{
			return null;
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x12F1124", Offset = "0x12F1124", VA = "0x12F1124")]
		public static string GetQualifiedConverterNameForType(Type type)
		{
			return null;
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x12EF804", Offset = "0x12EF804", VA = "0x12EF804")]
		private static string GenerateDirectConverterForTypeInCSharp(Type type, fsMetaProperty[] members, bool isConstructorPublic)
		{
			return null;
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x12F1218", Offset = "0x12F1218", VA = "0x12F1218")]
		public fsAotCompilationManager()
		{
		}
	}
	[Token(Token = "0x2000153")]
	[CreateAssetMenu(menuName = "Full Serializer AOT Configuration")]
	public class fsAotConfiguration : ScriptableObject
	{
		[Token(Token = "0x2000154")]
		public enum AotState
		{
			[Token(Token = "0x4000953")]
			Default,
			[Token(Token = "0x4000954")]
			Enabled,
			[Token(Token = "0x4000955")]
			Disabled
		}

		[Serializable]
		[Token(Token = "0x2000155")]
		public struct Entry
		{
			[Token(Token = "0x4000956")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public AotState State;

			[Token(Token = "0x4000957")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string FullTypeName;

			[Token(Token = "0x60009FA")]
			[Address(RVA = "0x12F1638", Offset = "0x12F1638", VA = "0x12F1638")]
			public Entry(Type type)
			{
			}

			[Token(Token = "0x60009FB")]
			[Address(RVA = "0x12F1670", Offset = "0x12F1670", VA = "0x12F1670")]
			public Entry(Type type, AotState state)
			{
			}
		}

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Entry> aotTypes;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string outputDirectory;

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x12F12AC", Offset = "0x12F12AC", VA = "0x12F12AC")]
		public bool TryFindEntry(Type type, out Entry result)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x12F1444", Offset = "0x12F1444", VA = "0x12F1444")]
		public void UpdateOrAddEntry(Entry entry)
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x12F15A4", Offset = "0x12F15A4", VA = "0x12F15A4")]
		public fsAotConfiguration()
		{
		}
	}
	[Token(Token = "0x2000156")]
	public struct fsAotVersionInfo
	{
		[Token(Token = "0x2000157")]
		public struct Member
		{
			[Token(Token = "0x400095A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string MemberName;

			[Token(Token = "0x400095B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string JsonName;

			[Token(Token = "0x400095C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string StorageType;

			[Token(Token = "0x400095D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string OverrideConverterType;

			[Token(Token = "0x60009FC")]
			[Address(RVA = "0x12EF1B4", Offset = "0x12EF1B4", VA = "0x12EF1B4")]
			public Member(fsMetaProperty property)
			{
			}

			[Token(Token = "0x60009FD")]
			[Address(RVA = "0x12F16BC", Offset = "0x12F16BC", VA = "0x12F16BC", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x60009FE")]
			[Address(RVA = "0x12F174C", Offset = "0x12F174C", VA = "0x12F174C", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x60009FF")]
			[Address(RVA = "0x12EEE74", Offset = "0x12EEE74", VA = "0x12EEE74")]
			public static bool operator ==(Member a, Member b)
			{
				return default(bool);
			}

			[Token(Token = "0x6000A00")]
			[Address(RVA = "0x12F1804", Offset = "0x12F1804", VA = "0x12F1804")]
			public static bool operator !=(Member a, Member b)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool IsConstructorPublic;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Member[] Members;
	}
	[Token(Token = "0x2000158")]
	public interface fsIAotConverter
	{
		[Token(Token = "0x17000120")]
		Type ModelType
		{
			[Token(Token = "0x6000A01")]
			get;
		}

		[Token(Token = "0x17000121")]
		fsAotVersionInfo VersionInfo
		{
			[Token(Token = "0x6000A02")]
			get;
		}
	}
	[Token(Token = "0x2000159")]
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface)]
	public sealed class fsForwardAttribute : Attribute
	{
		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string MemberName;

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x12F183C", Offset = "0x12F183C", VA = "0x12F183C")]
		public fsForwardAttribute(string memberName)
		{
		}
	}
	[Token(Token = "0x200015A")]
	public class fsConverterRegistrar
	{
		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static AnimationCurve_DirectConverter Register_AnimationCurve_DirectConverter;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Bounds_DirectConverter Register_Bounds_DirectConverter;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static Gradient_DirectConverter Register_Gradient_DirectConverter;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static GUIStyleState_DirectConverter Register_GUIStyleState_DirectConverter;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static GUIStyle_DirectConverter Register_GUIStyle_DirectConverter;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static Keyframe_DirectConverter Register_Keyframe_DirectConverter;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static LayerMask_DirectConverter Register_LayerMask_DirectConverter;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static RectOffset_DirectConverter Register_RectOffset_DirectConverter;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static Rect_DirectConverter Register_Rect_DirectConverter;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static List<Type> Converters;

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x12F1864", Offset = "0x12F1864", VA = "0x12F1864")]
		static fsConverterRegistrar()
		{
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x12F21AC", Offset = "0x12F21AC", VA = "0x12F21AC")]
		public fsConverterRegistrar()
		{
		}
	}
	[Token(Token = "0x200015B")]
	public abstract class fsBaseConverter
	{
		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public fsSerializer Serializer;

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x12F21B4", Offset = "0x12F21B4", VA = "0x12F21B4", Slot = "4")]
		public virtual object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x12F23B4", Offset = "0x12F23B4", VA = "0x12F23B4", Slot = "5")]
		public virtual bool RequestCycleSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x12F24C8", Offset = "0x12F24C8", VA = "0x12F24C8", Slot = "6")]
		public virtual bool RequestInheritanceSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A09")]
		public abstract fsResult TrySerialize(object instance, out fsData serialized, Type storageType);

		[Token(Token = "0x6000A0A")]
		public abstract fsResult TryDeserialize(fsData data, ref object instance, Type storageType);

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x12F253C", Offset = "0x12F253C", VA = "0x12F253C")]
		protected fsResult FailExpectedType(fsData data, params fsDataType[] types)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x12F2B70", Offset = "0x12F2B70", VA = "0x12F2B70")]
		protected fsResult CheckType(fsData data, fsDataType type)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x12F2E58", Offset = "0x12F2E58", VA = "0x12F2E58")]
		protected fsResult CheckKey(fsData data, string key, out fsData subitem)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x12F2EE0", Offset = "0x12F2EE0", VA = "0x12F2EE0")]
		protected fsResult CheckKey(Dictionary<string, fsData> data, string key, out fsData subitem)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A0F")]
		protected fsResult SerializeMember<T>(Dictionary<string, fsData> data, Type overrideConverterType, string name, T value)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A10")]
		protected fsResult DeserializeMember<T>(Dictionary<string, fsData> data, Type overrideConverterType, string name, out T value)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x12F311C", Offset = "0x12F311C", VA = "0x12F311C")]
		protected fsBaseConverter()
		{
		}
	}
	[Token(Token = "0x200015D")]
	public static class fsGlobalConfig
	{
		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool IsCaseSensitive;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public static bool AllowInternalExceptions;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string InternalFieldPrefix;
	}
	[Token(Token = "0x200015E")]
	public class fsConfig
	{
		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type[] SerializeAttributes;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type[] IgnoreSerializeAttributes;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Type[] IgnoreSerializeTypeAttributes;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public fsMemberSerialization DefaultMemberSerialization;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Func<string, MemberInfo, string> GetJsonNameFromMemberName;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool EnablePropertySerialization;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool SerializeNonAutoProperties;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public bool SerializeNonPublicSetProperties;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string CustomDateTimeFormatString;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool Serialize64BitIntegerAsString;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool CoerceStringsToNumbers;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool SerializeEnumsAsInteger;

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x12F1EB8", Offset = "0x12F1EB8", VA = "0x12F1EB8")]
		public fsConfig()
		{
		}
	}
	[Token(Token = "0x2000160")]
	public sealed class fsContext
	{
		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Dictionary<Type, object> _contextObjects;

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x12F32D0", Offset = "0x12F32D0", VA = "0x12F32D0")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000A1B")]
		public void Set<T>(T obj)
		{
		}

		[Token(Token = "0x6000A1C")]
		public bool Has<T>()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1D")]
		public T Get<T>()
		{
			return (T)null;
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0x12F3320", Offset = "0x12F3320", VA = "0x12F3320")]
		public fsContext()
		{
		}
	}
	[Token(Token = "0x2000161")]
	public abstract class fsConverter : fsBaseConverter
	{
		[Token(Token = "0x6000A1F")]
		public abstract bool CanProcess(Type type);

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0x12F339C", Offset = "0x12F339C", VA = "0x12F339C")]
		protected fsConverter()
		{
		}
	}
	[Token(Token = "0x2000162")]
	public enum fsDataType
	{
		[Token(Token = "0x400097F")]
		Array,
		[Token(Token = "0x4000980")]
		Object,
		[Token(Token = "0x4000981")]
		Double,
		[Token(Token = "0x4000982")]
		Int64,
		[Token(Token = "0x4000983")]
		Boolean,
		[Token(Token = "0x4000984")]
		String,
		[Token(Token = "0x4000985")]
		Null
	}
	[Token(Token = "0x2000163")]
	public sealed class fsData
	{
		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private object _value;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly fsData True;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly fsData False;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly fsData Null;

		[Token(Token = "0x17000122")]
		public fsDataType Type
		{
			[Token(Token = "0x6000A2D")]
			[Address(RVA = "0x12F28E0", Offset = "0x12F28E0", VA = "0x12F28E0")]
			get
			{
				return default(fsDataType);
			}
		}

		[Token(Token = "0x17000123")]
		public bool IsNull
		{
			[Token(Token = "0x6000A2E")]
			[Address(RVA = "0x12F3920", Offset = "0x12F3920", VA = "0x12F3920")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000124")]
		public bool IsDouble
		{
			[Token(Token = "0x6000A2F")]
			[Address(RVA = "0x12F3930", Offset = "0x12F3930", VA = "0x12F3930")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000125")]
		public bool IsInt64
		{
			[Token(Token = "0x6000A30")]
			[Address(RVA = "0x12F3990", Offset = "0x12F3990", VA = "0x12F3990")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000126")]
		public bool IsBool
		{
			[Token(Token = "0x6000A31")]
			[Address(RVA = "0x12F39F0", Offset = "0x12F39F0", VA = "0x12F39F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000127")]
		public bool IsString
		{
			[Token(Token = "0x6000A32")]
			[Address(RVA = "0x12F3A50", Offset = "0x12F3A50", VA = "0x12F3A50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000128")]
		public bool IsDictionary
		{
			[Token(Token = "0x6000A33")]
			[Address(RVA = "0x12F3AB0", Offset = "0x12F3AB0", VA = "0x12F3AB0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000129")]
		public bool IsList
		{
			[Token(Token = "0x6000A34")]
			[Address(RVA = "0x12F3B2C", Offset = "0x12F3B2C", VA = "0x12F3B2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700012A")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public double AsDouble
		{
			[Token(Token = "0x6000A35")]
			[Address(RVA = "0x12F3BA8", Offset = "0x12F3BA8", VA = "0x12F3BA8")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700012B")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public long AsInt64
		{
			[Token(Token = "0x6000A36")]
			[Address(RVA = "0x12F3BF0", Offset = "0x12F3BF0", VA = "0x12F3BF0")]
			get
			{
				return default(long);
			}
		}

		[Token(Token = "0x1700012C")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public bool AsBool
		{
			[Token(Token = "0x6000A37")]
			[Address(RVA = "0x12F3C38", Offset = "0x12F3C38", VA = "0x12F3C38")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700012D")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public string AsString
		{
			[Token(Token = "0x6000A38")]
			[Address(RVA = "0x12F3C80", Offset = "0x12F3C80", VA = "0x12F3C80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012E")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public Dictionary<string, fsData> AsDictionary
		{
			[Token(Token = "0x6000A39")]
			[Address(RVA = "0x12F2E98", Offset = "0x12F2E98", VA = "0x12F2E98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012F")]
		[DebuggerBrowsable(DebuggerBrowsableState.Never)]
		public List<fsData> AsList
		{
			[Token(Token = "0x6000A3A")]
			[Address(RVA = "0x12F3CC8", Offset = "0x12F3CC8", VA = "0x12F3CC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0x12F33A4", Offset = "0x12F33A4", VA = "0x12F33A4")]
		public fsData()
		{
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0x12F33C0", Offset = "0x12F33C0", VA = "0x12F33C0")]
		public fsData(bool boolean)
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x12F342C", Offset = "0x12F342C", VA = "0x12F342C")]
		public fsData(double f)
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x12F3498", Offset = "0x12F3498", VA = "0x12F3498")]
		public fsData(long i)
		{
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x12F3504", Offset = "0x12F3504", VA = "0x12F3504")]
		public fsData(string str)
		{
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x12F352C", Offset = "0x12F352C", VA = "0x12F352C")]
		public fsData(Dictionary<string, fsData> dict)
		{
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x12F3554", Offset = "0x12F3554", VA = "0x12F3554")]
		public fsData(List<fsData> list)
		{
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x12F357C", Offset = "0x12F357C", VA = "0x12F357C")]
		public static fsData CreateDictionary()
		{
			return null;
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x12F36F8", Offset = "0x12F36F8", VA = "0x12F36F8")]
		public static fsData CreateList()
		{
			return null;
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0x12F3798", Offset = "0x12F3798", VA = "0x12F3798")]
		public static fsData CreateList(int capacity)
		{
			return null;
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x12F3840", Offset = "0x12F3840", VA = "0x12F3840")]
		internal void BecomeDictionary()
		{
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x12F38B4", Offset = "0x12F38B4", VA = "0x12F38B4")]
		internal fsData Clone()
		{
			return null;
		}

		[Token(Token = "0x6000A3B")]
		private T Cast<T>()
		{
			return (T)null;
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0x12F3D10", Offset = "0x12F3D10", VA = "0x12F3D10", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0x12F3EEC", Offset = "0x12F3EEC", VA = "0x12F3EEC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x12F3F50", Offset = "0x12F3F50", VA = "0x12F3F50")]
		public bool Equals(fsData other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x12F4438", Offset = "0x12F4438", VA = "0x12F4438")]
		public static bool operator ==(fsData a, fsData b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x12F4548", Offset = "0x12F4548", VA = "0x12F4548")]
		public static bool operator !=(fsData a, fsData b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0x12F45B8", Offset = "0x12F45B8", VA = "0x12F45B8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000164")]
	public abstract class fsDirectConverter : fsBaseConverter
	{
		[Token(Token = "0x17000130")]
		public abstract Type ModelType
		{
			[Token(Token = "0x6000A43")]
			get;
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x12F4684", Offset = "0x12F4684", VA = "0x12F4684")]
		protected fsDirectConverter()
		{
		}
	}
	[Token(Token = "0x2000165")]
	public abstract class fsDirectConverter<TModel> : fsDirectConverter
	{
		[Token(Token = "0x17000131")]
		public override Type ModelType
		{
			[Token(Token = "0x6000A45")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A46")]
		public sealed override fsResult TrySerialize(object instance, out fsData serialized, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A47")]
		public sealed override fsResult TryDeserialize(fsData data, ref object instance, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A48")]
		protected abstract fsResult DoSerialize(TModel model, Dictionary<string, fsData> serialized);

		[Token(Token = "0x6000A49")]
		protected abstract fsResult DoDeserialize(Dictionary<string, fsData> data, ref TModel model);

		[Token(Token = "0x6000A4A")]
		protected fsDirectConverter()
		{
		}
	}
	[Token(Token = "0x2000166")]
	public sealed class fsMissingVersionConstructorException : Exception
	{
		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x12F468C", Offset = "0x12F468C", VA = "0x12F468C")]
		public fsMissingVersionConstructorException(Type versionedType, Type constructorType)
		{
		}
	}
	[Token(Token = "0x2000167")]
	public sealed class fsDuplicateVersionNameException : Exception
	{
		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x12F4760", Offset = "0x12F4760", VA = "0x12F4760")]
		public fsDuplicateVersionNameException(Type typeA, Type typeB, string version)
		{
		}
	}
	[Token(Token = "0x2000168")]
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Property | AttributeTargets.Field)]
	public sealed class fsIgnoreAttribute : Attribute
	{
		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x12F498C", Offset = "0x12F498C", VA = "0x12F498C")]
		public fsIgnoreAttribute()
		{
		}
	}
	[Token(Token = "0x2000169")]
	public interface fsISerializationCallbacks
	{
		[Token(Token = "0x6000A4E")]
		void OnBeforeSerialize(Type storageType);

		[Token(Token = "0x6000A4F")]
		void OnAfterSerialize(Type storageType, ref fsData data);

		[Token(Token = "0x6000A50")]
		void OnBeforeDeserialize(Type storageType, ref fsData data);

		[Token(Token = "0x6000A51")]
		void OnAfterDeserialize(Type storageType);
	}
	[Token(Token = "0x200016A")]
	public class fsJsonParser
	{
		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _start;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string _input;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly StringBuilder _cachedStringBuilder;

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x12F4994", Offset = "0x12F4994", VA = "0x12F4994")]
		private fsResult MakeFailure(string message)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x12F4BD4", Offset = "0x12F4BD4", VA = "0x12F4BD4")]
		private bool TryMoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x12F4C10", Offset = "0x12F4C10", VA = "0x12F4C10")]
		private bool HasValue()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x12F4C44", Offset = "0x12F4C44", VA = "0x12F4C44")]
		private bool HasValue(int offset)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x12F4C7C", Offset = "0x12F4C7C", VA = "0x12F4C7C")]
		private char Character()
		{
			return default(char);
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x12F4C84", Offset = "0x12F4C84", VA = "0x12F4C84")]
		private char Character(int offset)
		{
			return default(char);
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x12F4CAC", Offset = "0x12F4CAC", VA = "0x12F4CAC")]
		private void SkipSpace()
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x12F4F54", Offset = "0x12F4F54", VA = "0x12F4F54")]
		private bool IsHex(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x12F4F90", Offset = "0x12F4F90", VA = "0x12F4F90")]
		private uint ParseSingleChar(char c1, uint multipliyer)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x12F4FE8", Offset = "0x12F4FE8", VA = "0x12F4FE8")]
		private uint ParseUnicode(char c1, char c2, char c3, char c4)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0x12F5158", Offset = "0x12F5158", VA = "0x12F5158")]
		private fsResult TryUnescapeChar(out char escaped)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0x12F57D4", Offset = "0x12F57D4", VA = "0x12F57D4")]
		private fsResult TryParseExact(string content)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0x12F5930", Offset = "0x12F5930", VA = "0x12F5930")]
		private fsResult TryParseTrue(out fsData data)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x12F59FC", Offset = "0x12F59FC", VA = "0x12F59FC")]
		private fsResult TryParseFalse(out fsData data)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x12F5AC8", Offset = "0x12F5AC8", VA = "0x12F5AC8")]
		private fsResult TryParseNull(out fsData data)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x12F5B98", Offset = "0x12F5B98", VA = "0x12F5B98")]
		private bool IsSeparator(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0x12F5C1C", Offset = "0x12F5C1C", VA = "0x12F5C1C")]
		private fsResult TryParseNumber(out fsData data)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x12F5F4C", Offset = "0x12F5F4C", VA = "0x12F5F4C")]
		private fsResult TryParseString(out string str)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0x12F61EC", Offset = "0x12F61EC", VA = "0x12F61EC")]
		private fsResult TryParseArray(out fsData arr)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x12F6770", Offset = "0x12F6770", VA = "0x12F6770")]
		private fsResult TryParseObject(out fsData obj)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x12F64F8", Offset = "0x12F64F8", VA = "0x12F64F8")]
		private fsResult RunParse(out fsData data)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x12F6BF0", Offset = "0x12F6BF0", VA = "0x12F6BF0")]
		public static fsResult Parse(string input, out fsData data)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x12F6D38", Offset = "0x12F6D38", VA = "0x12F6D38")]
		public static fsData Parse(string input)
		{
			return null;
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x12F6CB4", Offset = "0x12F6CB4", VA = "0x12F6CB4")]
		private fsJsonParser(string input)
		{
		}
	}
	[Token(Token = "0x200016B")]
	public static class fsJsonPrinter
	{
		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x12F6D9C", Offset = "0x12F6D9C", VA = "0x12F6D9C")]
		private static void InsertSpacing(TextWriter stream, int count)
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x12F6E10", Offset = "0x12F6E10", VA = "0x12F6E10")]
		private static string EscapeString(string str)
		{
			return null;
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x12F715C", Offset = "0x12F715C", VA = "0x12F715C")]
		private static void BuildCompressedString(fsData data, TextWriter stream)
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x12F77FC", Offset = "0x12F77FC", VA = "0x12F77FC")]
		private static void BuildPrettyString(fsData data, TextWriter stream, int depth)
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x12F7DD8", Offset = "0x12F7DD8", VA = "0x12F7DD8")]
		public static void PrettyJson(fsData data, TextWriter outputStream)
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x12F7DE0", Offset = "0x12F7DE0", VA = "0x12F7DE0")]
		public static string PrettyJson(fsData data)
		{
			return null;
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x12F7FBC", Offset = "0x12F7FBC", VA = "0x12F7FBC")]
		public static void CompressedJson(fsData data, StreamWriter outputStream)
		{
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0x12F3D14", Offset = "0x12F3D14", VA = "0x12F3D14")]
		public static string CompressedJson(fsData data)
		{
			return null;
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x12F7618", Offset = "0x12F7618", VA = "0x12F7618")]
		private static string ConvertDoubleToString(double d)
		{
			return null;
		}
	}
	[Token(Token = "0x200016C")]
	public enum fsMemberSerialization
	{
		[Token(Token = "0x400098E")]
		OptIn,
		[Token(Token = "0x400098F")]
		OptOut,
		[Token(Token = "0x4000990")]
		Default
	}
	[Token(Token = "0x200016D")]
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct)]
	public sealed class fsObjectAttribute : Attribute
	{
		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type[] PreviousModels;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string VersionString;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public fsMemberSerialization MemberSerialization;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Type Converter;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Type Processor;

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0x12F7FC0", Offset = "0x12F7FC0", VA = "0x12F7FC0")]
		public fsObjectAttribute()
		{
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0x12F7FD0", Offset = "0x12F7FD0", VA = "0x12F7FD0")]
		public fsObjectAttribute(string versionString, params Type[] previousModels)
		{
		}
	}
	[Token(Token = "0x200016E")]
	public abstract class fsObjectProcessor
	{
		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x12F8004", Offset = "0x12F8004", VA = "0x12F8004", Slot = "4")]
		public virtual bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x12F8044", Offset = "0x12F8044", VA = "0x12F8044", Slot = "5")]
		public virtual void OnBeforeSerialize(Type storageType, object instance)
		{
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0x12F8048", Offset = "0x12F8048", VA = "0x12F8048", Slot = "6")]
		public virtual void OnAfterSerialize(Type storageType, object instance, ref fsData data)
		{
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0x12F804C", Offset = "0x12F804C", VA = "0x12F804C", Slot = "7")]
		public virtual void OnBeforeDeserialize(Type storageType, ref fsData data)
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x12F8050", Offset = "0x12F8050", VA = "0x12F8050", Slot = "8")]
		public virtual void OnBeforeDeserializeAfterInstanceCreation(Type storageType, object instance, ref fsData data)
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x12F8054", Offset = "0x12F8054", VA = "0x12F8054", Slot = "9")]
		public virtual void OnAfterDeserialize(Type storageType, object instance)
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x12F8058", Offset = "0x12F8058", VA = "0x12F8058")]
		protected fsObjectProcessor()
		{
		}
	}
	[Token(Token = "0x200016F")]
	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]
	public sealed class fsPropertyAttribute : Attribute
	{
		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Type Converter;

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0x12F8060", Offset = "0x12F8060", VA = "0x12F8060")]
		public fsPropertyAttribute()
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x12F80BC", Offset = "0x12F80BC", VA = "0x12F80BC")]
		public fsPropertyAttribute(string name)
		{
		}
	}
	[Token(Token = "0x2000170")]
	public struct fsResult
	{
		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string[] EmptyStringArray;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _success;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private List<string> _messages;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static fsResult Success;

		[Token(Token = "0x17000132")]
		public bool Failed
		{
			[Token(Token = "0x6000A84")]
			[Address(RVA = "0x12F61DC", Offset = "0x12F61DC", VA = "0x12F61DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000133")]
		public bool Succeeded
		{
			[Token(Token = "0x6000A85")]
			[Address(RVA = "0x12F8460", Offset = "0x12F8460", VA = "0x12F8460")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000134")]
		public bool HasWarnings
		{
			[Token(Token = "0x6000A86")]
			[Address(RVA = "0x12F8468", Offset = "0x12F8468", VA = "0x12F8468")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000135")]
		public Exception AsException
		{
			[Token(Token = "0x6000A89")]
			[Address(RVA = "0x12F84C0", Offset = "0x12F84C0", VA = "0x12F84C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000136")]
		public IEnumerable<string> RawMessages
		{
			[Token(Token = "0x6000A8A")]
			[Address(RVA = "0x12F8634", Offset = "0x12F8634", VA = "0x12F8634")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000137")]
		public string FormattedMessages
		{
			[Token(Token = "0x6000A8B")]
			[Address(RVA = "0x12F8698", Offset = "0x12F8698", VA = "0x12F8698")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0x12F80E4", Offset = "0x12F80E4", VA = "0x12F80E4")]
		public void AddMessage(string message)
		{
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x12F81D4", Offset = "0x12F81D4", VA = "0x12F81D4")]
		public void AddMessages(fsResult result)
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x12F8284", Offset = "0x12F8284", VA = "0x12F8284")]
		public fsResult Merge(fsResult other)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x12F8354", Offset = "0x12F8354", VA = "0x12F8354")]
		public static fsResult Warn(string warning)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x12F2A8C", Offset = "0x12F2A8C", VA = "0x12F2A8C")]
		public static fsResult Fail(string warning)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x12F8438", Offset = "0x12F8438", VA = "0x12F8438")]
		public static fsResult operator +(fsResult a, fsResult b)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0x12F6D60", Offset = "0x12F6D60", VA = "0x12F6D60")]
		public fsResult AssertSuccess()
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x12F85B0", Offset = "0x12F85B0", VA = "0x12F85B0")]
		public fsResult AssertSuccessWithoutWarnings()
		{
			return default(fsResult);
		}
	}
	[Token(Token = "0x2000171")]
	public class fsSerializer
	{
		[Token(Token = "0x2000172")]
		internal class fsLazyCycleDefinitionWriter
		{
			[Token(Token = "0x40009AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Dictionary<int, fsData> _pendingDefinitions;

			[Token(Token = "0x40009AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private HashSet<int> _references;

			[Token(Token = "0x6000AB3")]
			[Address(RVA = "0x12FBB8C", Offset = "0x12FBB8C", VA = "0x12FBB8C")]
			public void WriteDefinition(int id, fsData data)
			{
			}

			[Token(Token = "0x6000AB4")]
			[Address(RVA = "0x12FB964", Offset = "0x12FB964", VA = "0x12FB964")]
			public void WriteReference(int id, Dictionary<string, fsData> dict)
			{
			}

			[Token(Token = "0x6000AB5")]
			[Address(RVA = "0x12FCE10", Offset = "0x12FCE10", VA = "0x12FCE10")]
			public void Clear()
			{
			}

			[Token(Token = "0x6000AB6")]
			[Address(RVA = "0x12FA634", Offset = "0x12FA634", VA = "0x12FA634")]
			public fsLazyCycleDefinitionWriter()
			{
			}
		}

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static HashSet<string> _reservedKeywords;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly string Key_ObjectReference;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly string Key_ObjectDefinition;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly string Key_InstanceType;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly string Key_Version;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly string Key_Content;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<Type, fsBaseConverter> _cachedConverterTypeInstances;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<Type, fsBaseConverter> _cachedConverters;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<Type, List<fsObjectProcessor>> _cachedProcessors;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly List<fsConverter> _availableConverters;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Dictionary<Type, fsDirectConverter> _availableDirectConverters;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly List<fsObjectProcessor> _processors;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly fsCyclicReferenceManager _references;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly fsLazyCycleDefinitionWriter _lazyReferenceWriter;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Dictionary<Type, Type> _abstractTypeRemap;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public fsContext Context;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public fsConfig Config;

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0x12F8794", Offset = "0x12F8794", VA = "0x12F8794")]
		static fsSerializer()
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0x12F8A00", Offset = "0x12F8A00", VA = "0x12F8A00")]
		public static bool IsReservedKeyword(string key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0x12F8A80", Offset = "0x12F8A80", VA = "0x12F8A80")]
		private static bool IsObjectReference(fsData data)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x12F8B30", Offset = "0x12F8B30", VA = "0x12F8B30")]
		private static bool IsObjectDefinition(fsData data)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0x12F8BE0", Offset = "0x12F8BE0", VA = "0x12F8BE0")]
		private static bool IsVersioned(fsData data)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x12F8C90", Offset = "0x12F8C90", VA = "0x12F8C90")]
		private static bool IsTypeSpecified(fsData data)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x12F8D40", Offset = "0x12F8D40", VA = "0x12F8D40")]
		private static bool IsWrappedData(fsData data)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x12F8DF0", Offset = "0x12F8DF0", VA = "0x12F8DF0")]
		public static void StripDeserializationMetadata(ref fsData data)
		{
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0x12F8FB0", Offset = "0x12F8FB0", VA = "0x12F8FB0")]
		private static void ConvertLegacyData(ref fsData data)
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x12F93D4", Offset = "0x12F93D4", VA = "0x12F93D4")]
		private static void Invoke_OnBeforeSerialize(List<fsObjectProcessor> processors, Type storageType, object instance)
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x12F9480", Offset = "0x12F9480", VA = "0x12F9480")]
		private static void Invoke_OnAfterSerialize(List<fsObjectProcessor> processors, Type storageType, object instance, ref fsData data)
		{
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x12F9530", Offset = "0x12F9530", VA = "0x12F9530")]
		private static void Invoke_OnBeforeDeserialize(List<fsObjectProcessor> processors, Type storageType, ref fsData data)
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x12F95DC", Offset = "0x12F95DC", VA = "0x12F95DC")]
		private static void Invoke_OnBeforeDeserializeAfterInstanceCreation(List<fsObjectProcessor> processors, Type storageType, object instance, ref fsData data)
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x12F9698", Offset = "0x12F9698", VA = "0x12F9698")]
		private static void Invoke_OnAfterDeserialize(List<fsObjectProcessor> processors, Type storageType, object instance)
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x12F9310", Offset = "0x12F9310", VA = "0x12F9310")]
		private static void EnsureDictionary(fsData data)
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x12F9738", Offset = "0x12F9738", VA = "0x12F9738")]
		private void RemapAbstractStorageTypeToDefaultType(ref Type storageType)
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x12F98B8", Offset = "0x12F98B8", VA = "0x12F98B8")]
		public fsSerializer()
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x12FAA44", Offset = "0x12FAA44", VA = "0x12FAA44")]
		public void AddProcessor(fsObjectProcessor processor)
		{
		}

		[Token(Token = "0x6000A9F")]
		public void RemoveProcessor<TProcessor>()
		{
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x12FA72C", Offset = "0x12FA72C", VA = "0x12FA72C")]
		public void SetDefaultStorageType(Type abstractType, Type defaultStorageType)
		{
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x12FAB2C", Offset = "0x12FAB2C", VA = "0x12FAB2C")]
		private List<fsObjectProcessor> GetProcessors(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x12FA804", Offset = "0x12FA804", VA = "0x12FA804")]
		public void AddConverter(fsBaseConverter converter)
		{
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0x12FAE54", Offset = "0x12FAE54", VA = "0x12FAE54")]
		private fsBaseConverter GetConverter(Type type, Type overrideConverterType)
		{
			return null;
		}

		[Token(Token = "0x6000AA4")]
		public fsResult TrySerialize<T>(T instance, out fsData data)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AA5")]
		public fsResult TryDeserialize<T>(fsData data, ref T instance)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x12FB2F0", Offset = "0x12FB2F0", VA = "0x12FB2F0")]
		public fsResult TrySerialize(Type storageType, object instance, out fsData data)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x12FB300", Offset = "0x12FB300", VA = "0x12FB300")]
		public fsResult TrySerialize(Type storageType, Type overrideConverterType, object instance, out fsData data)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x12FB48C", Offset = "0x12FB48C", VA = "0x12FB48C")]
		private fsResult InternalSerialize_1_ProcessCycles(Type storageType, Type overrideConverterType, object instance, out fsData data)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x12FB798", Offset = "0x12FB798", VA = "0x12FB798")]
		private fsResult InternalSerialize_2_Inheritance(Type storageType, Type overrideConverterType, object instance, out fsData data)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x12FBCEC", Offset = "0x12FBCEC", VA = "0x12FBCEC")]
		private fsResult InternalSerialize_3_ProcessVersioning(Type overrideConverterType, object instance, out fsData data)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x12FBED0", Offset = "0x12FBED0", VA = "0x12FBED0")]
		private fsResult InternalSerialize_4_Converter(Type overrideConverterType, object instance, out fsData data)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x12FBF3C", Offset = "0x12FBF3C", VA = "0x12FBF3C")]
		public fsResult TryDeserialize(fsData data, Type storageType, ref object result)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x12FBF48", Offset = "0x12FBF48", VA = "0x12FBF48")]
		public fsResult TryDeserialize(fsData data, Type storageType, Type overrideConverterType, ref object result)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x12FC14C", Offset = "0x12FC14C", VA = "0x12FC14C")]
		private fsResult InternalDeserialize_1_CycleReference(Type overrideConverterType, fsData data, Type storageType, ref object result, out List<fsObjectProcessor> processors)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x12FC2C4", Offset = "0x12FC2C4", VA = "0x12FC2C4")]
		private fsResult InternalDeserialize_2_Version(Type overrideConverterType, fsData data, Type storageType, ref object result, out List<fsObjectProcessor> processors)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x12FC6F8", Offset = "0x12FC6F8", VA = "0x12FC6F8")]
		private fsResult InternalDeserialize_3_Inheritance(Type overrideConverterType, fsData data, Type storageType, ref object result, out List<fsObjectProcessor> processors)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x12FCBFC", Offset = "0x12FCBFC", VA = "0x12FCBFC")]
		private fsResult InternalDeserialize_4_Cycles(Type overrideConverterType, fsData data, Type resultType, ref object result)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x12FCD10", Offset = "0x12FCD10", VA = "0x12FCD10")]
		private fsResult InternalDeserialize_5_Converter(Type overrideConverterType, fsData data, Type resultType, ref object result)
		{
			return default(fsResult);
		}
	}
	[Token(Token = "0x2000173")]
	public static class fsTypeExtensions
	{
		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x12F16B4", Offset = "0x12F16B4", VA = "0x12F16B4")]
		public static string CSharpName(this Type type)
		{
			return null;
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x12F11A4", Offset = "0x12F11A4", VA = "0x12F11A4")]
		public static string CSharpName(this Type type, bool includeNamespace, bool ensureSafeDeclarationName)
		{
			return null;
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x12F0A40", Offset = "0x12F0A40", VA = "0x12F0A40")]
		public static string CSharpName(this Type type, bool includeNamespace)
		{
			return null;
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x12F9870", Offset = "0x12F9870", VA = "0x12F9870")]
		public static bool IsInterface(this Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x12F9884", Offset = "0x12F9884", VA = "0x12F9884")]
		public static bool IsAbstract(this Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x12F9898", Offset = "0x12F9898", VA = "0x12F9898")]
		public static bool IsGenericType(this Type type)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000175")]
	public class fsMetaType
	{
		[Token(Token = "0x2000176")]
		public class AotFailureException : Exception
		{
			[Token(Token = "0x6000ACD")]
			[Address(RVA = "0x12FDD70", Offset = "0x12FDD70", VA = "0x12FDD70")]
			public AotFailureException(string reason)
			{
			}
		}

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<fsConfig, Dictionary<Type, fsMetaType>> _configMetaTypes;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type ReflectedType;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool? _hasDefaultConstructorCache;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		private bool? _isDefaultConstructorPublicCache;

		[Token(Token = "0x17000138")]
		public fsMetaProperty[] Properties
		{
			[Token(Token = "0x6000AC7")]
			[Address(RVA = "0x12FE018", Offset = "0x12FE018", VA = "0x12FE018")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AC8")]
			[Address(RVA = "0x12FE020", Offset = "0x12FE020", VA = "0x12FE020")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000139")]
		public bool HasDefaultConstructor
		{
			[Token(Token = "0x6000AC9")]
			[Address(RVA = "0x12FDDD8", Offset = "0x12FDDD8", VA = "0x12FDDD8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013A")]
		public bool IsDefaultConstructorPublic
		{
			[Token(Token = "0x6000ACA")]
			[Address(RVA = "0x12EF14C", Offset = "0x12EF14C", VA = "0x12EF14C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x12EF314", Offset = "0x12EF314", VA = "0x12EF314")]
		public static fsMetaType Get(fsConfig config, Type type)
		{
			return null;
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x12FCF8C", Offset = "0x12FCF8C", VA = "0x12FCF8C")]
		public static void ClearCache()
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0x12FCE9C", Offset = "0x12FCE9C", VA = "0x12FCE9C")]
		private fsMetaType(fsConfig config, Type reflectedType)
		{
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x12FD114", Offset = "0x12FD114", VA = "0x12FD114")]
		private static void CollectProperties(fsConfig config, List<fsMetaProperty> properties, Type reflectedType)
		{
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0x12FDC48", Offset = "0x12FDC48", VA = "0x12FDC48")]
		private static bool IsAutoProperty(PropertyInfo property, MemberInfo[] members)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x12FD6AC", Offset = "0x12FD6AC", VA = "0x12FD6AC")]
		private static bool CanSerializeProperty(fsConfig config, PropertyInfo property, MemberInfo[] members, bool annotationFreeValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x12FD9E8", Offset = "0x12FD9E8", VA = "0x12FD9E8")]
		private static bool CanSerializeField(fsConfig config, FieldInfo field, bool annotationFreeValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0x12EF5EC", Offset = "0x12EF5EC", VA = "0x12EF5EC")]
		public void EmitAotData(bool throwException)
		{
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x12FE028", Offset = "0x12FE028", VA = "0x12FE028")]
		public object CreateInstance()
		{
			return null;
		}
	}
}
namespace FullSerializer.Internal
{
	[Token(Token = "0x200017A")]
	public class fsArrayConverter : fsConverter
	{
		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0x12FE8B8", Offset = "0x12FE8B8", VA = "0x12FE8B8", Slot = "9")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0x12FE904", Offset = "0x12FE904", VA = "0x12FE904", Slot = "5")]
		public override bool RequestCycleSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x12FE90C", Offset = "0x12FE90C", VA = "0x12FE90C", Slot = "6")]
		public override bool RequestInheritanceSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x12FE914", Offset = "0x12FE914", VA = "0x12FE914", Slot = "7")]
		public override fsResult TrySerialize(object instance, out fsData serialized, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x12FEC60", Offset = "0x12FEC60", VA = "0x12FEC60", Slot = "8")]
		public override fsResult TryDeserialize(fsData data, ref object instance, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x12FEED4", Offset = "0x12FEED4", VA = "0x12FEED4", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x12FA70C", Offset = "0x12FA70C", VA = "0x12FA70C")]
		public fsArrayConverter()
		{
		}
	}
	[Token(Token = "0x200017B")]
	public class fs2DArrayConverter : fsConverter
	{
		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x12FEF48", Offset = "0x12FEF48", VA = "0x12FEF48", Slot = "9")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x12FEF94", Offset = "0x12FEF94", VA = "0x12FEF94", Slot = "5")]
		public override bool RequestCycleSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x12FEF9C", Offset = "0x12FEF9C", VA = "0x12FEF9C", Slot = "6")]
		public override bool RequestInheritanceSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x12FEFA4", Offset = "0x12FEFA4", VA = "0x12FEFA4", Slot = "7")]
		public override fsResult TrySerialize(object instance, out fsData serialized, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x12FF398", Offset = "0x12FF398", VA = "0x12FF398", Slot = "8")]
		public override fsResult TryDeserialize(fsData data, ref object instance, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x12FF798", Offset = "0x12FF798", VA = "0x12FF798", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x12FA714", Offset = "0x12FA714", VA = "0x12FA714")]
		public fs2DArrayConverter()
		{
		}
	}
	[Token(Token = "0x200017C")]
	public class fsDateConverter : fsConverter
	{
		[Token(Token = "0x40009B8")]
		private const string DefaultDateTimeFormatString = "o";

		[Token(Token = "0x40009B9")]
		private const string DateTimeOffsetFormatString = "o";

		[Token(Token = "0x1700013B")]
		private string DateTimeFormatString
		{
			[Token(Token = "0x6000AE6")]
			[Address(RVA = "0x12FF80C", Offset = "0x12FF80C", VA = "0x12FF80C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x12FF870", Offset = "0x12FF870", VA = "0x12FF870", Slot = "9")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x12FF99C", Offset = "0x12FF99C", VA = "0x12FF99C", Slot = "7")]
		public override fsResult TrySerialize(object instance, out fsData serialized, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x12FFB90", Offset = "0x12FFB90", VA = "0x12FFB90", Slot = "8")]
		public override fsResult TryDeserialize(fsData data, ref object instance, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x12FA6FC", Offset = "0x12FA6FC", VA = "0x12FA6FC")]
		public fsDateConverter()
		{
		}
	}
	[Token(Token = "0x200017D")]
	public class fsDictionaryConverter : fsConverter
	{
		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x130015C", Offset = "0x130015C", VA = "0x130015C", Slot = "9")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x13001F0", Offset = "0x13001F0", VA = "0x13001F0", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x1300264", Offset = "0x1300264", VA = "0x1300264", Slot = "8")]
		public override fsResult TryDeserialize(fsData data, ref object instance_, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x1300D64", Offset = "0x1300D64", VA = "0x1300D64", Slot = "7")]
		public override fsResult TrySerialize(object instance_, out fsData serialized, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x1300A18", Offset = "0x1300A18", VA = "0x1300A18")]
		private fsResult AddItemToDictionary(IDictionary dictionary, object key, object value)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0x13008DC", Offset = "0x13008DC", VA = "0x13008DC")]
		private static void GetKeyValueTypes(Type dictionaryType, out Type keyStorageType, out Type valueStorageType)
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x12FA71C", Offset = "0x12FA71C", VA = "0x12FA71C")]
		public fsDictionaryConverter()
		{
		}
	}
	[Token(Token = "0x200017E")]
	public class fsEnumConverter : fsConverter
	{
		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x13015E4", Offset = "0x13015E4", VA = "0x13015E4", Slot = "9")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x1301654", Offset = "0x1301654", VA = "0x1301654", Slot = "5")]
		public override bool RequestCycleSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x130165C", Offset = "0x130165C", VA = "0x130165C", Slot = "6")]
		public override bool RequestInheritanceSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x1301664", Offset = "0x1301664", VA = "0x1301664", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x13016F8", Offset = "0x13016F8", VA = "0x13016F8", Slot = "7")]
		public override fsResult TrySerialize(object instance, out fsData serialized, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x1301BF0", Offset = "0x1301BF0", VA = "0x1301BF0", Slot = "8")]
		public override fsResult TryDeserialize(fsData data, ref object instance, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AF8")]
		private static bool ArrayContains<T>(T[] values, T value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0x12FA704", Offset = "0x12FA704", VA = "0x12FA704")]
		public fsEnumConverter()
		{
		}
	}
	[Token(Token = "0x200017F")]
	public class fsForwardConverter : fsConverter
	{
		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string _memberName;

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x12FB2BC", Offset = "0x12FB2BC", VA = "0x12FB2BC")]
		public fsForwardConverter(fsForwardAttribute attribute)
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x1302060", Offset = "0x1302060", VA = "0x1302060", Slot = "9")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x13020B0", Offset = "0x13020B0", VA = "0x13020B0")]
		private fsResult GetProperty(object instance, out fsMetaProperty property)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x130226C", Offset = "0x130226C", VA = "0x130226C", Slot = "7")]
		public override fsResult TrySerialize(object instance, out fsData serialized, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x1302388", Offset = "0x1302388", VA = "0x1302388", Slot = "8")]
		public override fsResult TryDeserialize(fsData data, ref object instance, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x13024C8", Offset = "0x13024C8", VA = "0x13024C8", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}
	}
	[Token(Token = "0x2000180")]
	public class fsGuidConverter : fsConverter
	{
		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x130253C", Offset = "0x130253C", VA = "0x130253C", Slot = "9")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x13025C4", Offset = "0x13025C4", VA = "0x13025C4", Slot = "5")]
		public override bool RequestCycleSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x13025CC", Offset = "0x13025CC", VA = "0x13025CC", Slot = "6")]
		public override bool RequestInheritanceSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x13025D4", Offset = "0x13025D4", VA = "0x13025D4", Slot = "7")]
		public override fsResult TrySerialize(object instance, out fsData serialized, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x13026DC", Offset = "0x13026DC", VA = "0x13026DC", Slot = "8")]
		public override fsResult TryDeserialize(fsData data, ref object instance, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x130280C", Offset = "0x130280C", VA = "0x130280C", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x12FA6F4", Offset = "0x12FA6F4", VA = "0x12FA6F4")]
		public fsGuidConverter()
		{
		}
	}
	[Token(Token = "0x2000181")]
	public class fsIEnumerableConverter : fsConverter
	{
		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x1302860", Offset = "0x1302860", VA = "0x1302860", Slot = "9")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x1302AC4", Offset = "0x1302AC4", VA = "0x1302AC4", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x1302B38", Offset = "0x1302B38", VA = "0x1302B38", Slot = "7")]
		public override fsResult TrySerialize(object instance_, out fsData serialized, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x1303224", Offset = "0x1303224", VA = "0x1303224")]
		private bool IsStack(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x1303338", Offset = "0x1303338", VA = "0x1303338", Slot = "8")]
		public override fsResult TryDeserialize(fsData data, ref object instance_, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x1303124", Offset = "0x1303124", VA = "0x1303124")]
		private static int HintSize(IEnumerable collection)
		{
			return default(int);
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x1302FF0", Offset = "0x1302FF0", VA = "0x1302FF0")]
		private static Type GetElementType(Type objectType)
		{
			return null;
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x1303780", Offset = "0x1303780", VA = "0x1303780")]
		private static void TryClear(Type type, object instance)
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x130383C", Offset = "0x130383C", VA = "0x130383C")]
		private static int TryGetExistingSize(Type type, object instance)
		{
			return default(int);
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x1302920", Offset = "0x1302920", VA = "0x1302920")]
		private static MethodInfo GetAddMethod(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x12FA724", Offset = "0x12FA724", VA = "0x12FA724")]
		public fsIEnumerableConverter()
		{
		}
	}
	[Token(Token = "0x2000182")]
	public class fsKeyValuePairConverter : fsConverter
	{
		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x130493C", Offset = "0x130493C", VA = "0x130493C", Slot = "9")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x1304A30", Offset = "0x1304A30", VA = "0x1304A30", Slot = "5")]
		public override bool RequestCycleSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x1304A38", Offset = "0x1304A38", VA = "0x1304A38", Slot = "6")]
		public override bool RequestInheritanceSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x1304A40", Offset = "0x1304A40", VA = "0x1304A40", Slot = "8")]
		public override fsResult TryDeserialize(fsData data, ref object instance, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x1304D14", Offset = "0x1304D14", VA = "0x1304D14", Slot = "7")]
		public override fsResult TrySerialize(object instance, out fsData serialized, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x13050B0", Offset = "0x13050B0", VA = "0x13050B0")]
		public fsKeyValuePairConverter()
		{
		}
	}
	[Token(Token = "0x2000183")]
	public class fsNullableConverter : fsConverter
	{
		[Token(Token = "0x6000B18")]
		[Address(RVA = "0x13050B8", Offset = "0x13050B8", VA = "0x13050B8", Slot = "9")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x13051A8", Offset = "0x13051A8", VA = "0x13051A8", Slot = "7")]
		public override fsResult TrySerialize(object instance, out fsData serialized, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x13051F0", Offset = "0x13051F0", VA = "0x13051F0", Slot = "8")]
		public override fsResult TryDeserialize(fsData data, ref object instance, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x1305238", Offset = "0x1305238", VA = "0x1305238", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x1305240", Offset = "0x1305240", VA = "0x1305240")]
		public fsNullableConverter()
		{
		}
	}
	[Token(Token = "0x2000184")]
	public class fsPrimitiveConverter : fsConverter
	{
		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x1305248", Offset = "0x1305248", VA = "0x1305248", Slot = "9")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x130535C", Offset = "0x130535C", VA = "0x130535C", Slot = "5")]
		public override bool RequestCycleSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x1305364", Offset = "0x1305364", VA = "0x1305364", Slot = "6")]
		public override bool RequestInheritanceSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x130536C", Offset = "0x130536C", VA = "0x130536C")]
		private static bool UseBool(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x13053F4", Offset = "0x13053F4", VA = "0x13053F4")]
		private static bool UseInt64(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x1305688", Offset = "0x1305688", VA = "0x1305688")]
		private static bool UseDouble(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x13057B4", Offset = "0x13057B4", VA = "0x13057B4")]
		private static bool UseString(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x1305898", Offset = "0x1305898", VA = "0x1305898", Slot = "7")]
		public override fsResult TrySerialize(object instance, out fsData serialized, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0x1305F6C", Offset = "0x1305F6C", VA = "0x1305F6C", Slot = "8")]
		public override fsResult TryDeserialize(fsData storage, ref object instance, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0x1306550", Offset = "0x1306550", VA = "0x1306550")]
		public fsPrimitiveConverter()
		{
		}
	}
	[Token(Token = "0x2000185")]
	public class fsReflectedConverter : fsConverter
	{
		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x1306558", Offset = "0x1306558", VA = "0x1306558", Slot = "9")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x1306630", Offset = "0x1306630", VA = "0x1306630", Slot = "7")]
		public override fsResult TrySerialize(object instance, out fsData serialized, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x13069AC", Offset = "0x13069AC", VA = "0x13069AC", Slot = "8")]
		public override fsResult TryDeserialize(fsData data, ref object instance, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x1306DC8", Offset = "0x1306DC8", VA = "0x1306DC8", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x1306E44", Offset = "0x1306E44", VA = "0x1306E44")]
		public fsReflectedConverter()
		{
		}
	}
	[Token(Token = "0x2000186")]
	public class fsTypeConverter : fsConverter
	{
		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x1306E4C", Offset = "0x1306E4C", VA = "0x1306E4C", Slot = "9")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x1306EE0", Offset = "0x1306EE0", VA = "0x1306EE0", Slot = "5")]
		public override bool RequestCycleSupport(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x1306EE8", Offset = "0x1306EE8", VA = "0x1306EE8", Slot = "6")]
		public override bool RequestInheritanceSupport(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x1306EF0", Offset = "0x1306EF0", VA = "0x1306EF0", Slot = "7")]
		public override fsResult TrySerialize(object instance, out fsData serialized, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x1306FF4", Offset = "0x1306FF4", VA = "0x1306FF4", Slot = "8")]
		public override fsResult TryDeserialize(fsData data, ref object instance, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x130719C", Offset = "0x130719C", VA = "0x130719C", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x13071A4", Offset = "0x13071A4", VA = "0x13071A4")]
		public fsTypeConverter()
		{
		}
	}
	[Token(Token = "0x2000187")]
	public class fsWeakReferenceConverter : fsConverter
	{
		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x13071AC", Offset = "0x13071AC", VA = "0x13071AC", Slot = "9")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x1307234", Offset = "0x1307234", VA = "0x1307234", Slot = "5")]
		public override bool RequestCycleSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x130723C", Offset = "0x130723C", VA = "0x130723C", Slot = "6")]
		public override bool RequestInheritanceSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x1307244", Offset = "0x1307244", VA = "0x1307244", Slot = "7")]
		public override fsResult TrySerialize(object instance, out fsData serialized, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x13074B8", Offset = "0x13074B8", VA = "0x13074B8", Slot = "8")]
		public override fsResult TryDeserialize(fsData data, ref object instance, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0x13077AC", Offset = "0x13077AC", VA = "0x13077AC", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0x130780C", Offset = "0x130780C", VA = "0x130780C")]
		public fsWeakReferenceConverter()
		{
		}
	}
	[Token(Token = "0x2000188")]
	public class fsSerializationCallbackProcessor : fsObjectProcessor
	{
		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x1307814", Offset = "0x1307814", VA = "0x1307814", Slot = "4")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x13078A8", Offset = "0x13078A8", VA = "0x13078A8", Slot = "5")]
		public override void OnBeforeSerialize(Type storageType, object instance)
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x13079A4", Offset = "0x13079A4", VA = "0x13079A4", Slot = "6")]
		public override void OnAfterSerialize(Type storageType, object instance, ref fsData data)
		{
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x1307AAC", Offset = "0x1307AAC", VA = "0x1307AAC", Slot = "8")]
		public override void OnBeforeDeserializeAfterInstanceCreation(Type storageType, object instance, ref fsData data)
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x1307CA4", Offset = "0x1307CA4", VA = "0x1307CA4", Slot = "9")]
		public override void OnAfterDeserialize(Type storageType, object instance)
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x1307DA4", Offset = "0x1307DA4", VA = "0x1307DA4")]
		public fsSerializationCallbackProcessor()
		{
		}
	}
	[Token(Token = "0x2000189")]
	public class fsSerializationCallbackReceiverProcessor : fsObjectProcessor
	{
		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x1307DAC", Offset = "0x1307DAC", VA = "0x1307DAC", Slot = "4")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x1307E40", Offset = "0x1307E40", VA = "0x1307E40", Slot = "5")]
		public override void OnBeforeSerialize(Type storageType, object instance)
		{
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x1307F28", Offset = "0x1307F28", VA = "0x1307F28", Slot = "9")]
		public override void OnAfterDeserialize(Type storageType, object instance)
		{
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x1308014", Offset = "0x1308014", VA = "0x1308014")]
		public fsSerializationCallbackReceiverProcessor()
		{
		}
	}
	[Token(Token = "0x200018A")]
	public class fsCyclicReferenceManager
	{
		[Token(Token = "0x200018B")]
		private class ObjectReferenceEqualityComparator : IEqualityComparer<object>
		{
			[Token(Token = "0x40009BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly IEqualityComparer<object> Instance;

			[Token(Token = "0x6000B4C")]
			[Address(RVA = "0x130865C", Offset = "0x130865C", VA = "0x130865C", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Object>.Equals(object x, object y)
			{
				return default(bool);
			}

			[Token(Token = "0x6000B4D")]
			[Address(RVA = "0x1308668", Offset = "0x1308668", VA = "0x1308668", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Object>.GetHashCode(object obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000B4E")]
			[Address(RVA = "0x1308674", Offset = "0x1308674", VA = "0x1308674")]
			public ObjectReferenceEqualityComparator()
			{
			}
		}

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<object, int> _objectIds;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int _nextId;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<int, object> _marked;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int _depth;

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x130801C", Offset = "0x130801C", VA = "0x130801C")]
		public void Enter()
		{
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x130802C", Offset = "0x130802C", VA = "0x130802C")]
		public bool Exit()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x1308194", Offset = "0x1308194", VA = "0x1308194")]
		public object GetReferenceObject(int id)
		{
			return null;
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x13082A8", Offset = "0x13082A8", VA = "0x13082A8")]
		public void AddReferenceWithId(int id, object reference)
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x1308310", Offset = "0x1308310", VA = "0x1308310")]
		public int GetReferenceId(object item)
		{
			return default(int);
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x13083BC", Offset = "0x13083BC", VA = "0x13083BC")]
		public bool IsReference(object item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x1308424", Offset = "0x1308424", VA = "0x1308424")]
		public void MarkSerialized(object item)
		{
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x1308560", Offset = "0x1308560", VA = "0x1308560")]
		public fsCyclicReferenceManager()
		{
		}
	}
	[Token(Token = "0x200018C")]
	public struct fsOption<T>
	{
		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _hasValue;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T _value;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static fsOption<T> Empty;

		[Token(Token = "0x1700013C")]
		public bool HasValue
		{
			[Token(Token = "0x6000B50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013D")]
		public bool IsEmpty
		{
			[Token(Token = "0x6000B51")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700013E")]
		public T Value
		{
			[Token(Token = "0x6000B52")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x6000B53")]
		public fsOption(T value)
		{
		}
	}
	[Token(Token = "0x200018D")]
	public static class fsOption
	{
		[Token(Token = "0x6000B54")]
		public static fsOption<T> Just<T>(T value)
		{
			return default(fsOption<T>);
		}
	}
	[Token(Token = "0x200018E")]
	public static class fsPortableReflection
	{
		[Token(Token = "0x200018F")]
		private struct AttributeQuery
		{
			[Token(Token = "0x40009C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public MemberInfo MemberInfo;

			[Token(Token = "0x40009C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Type AttributeType;
		}

		[Token(Token = "0x2000190")]
		private class AttributeQueryComparator : IEqualityComparer<AttributeQuery>
		{
			[Token(Token = "0x6000B6E")]
			[Address(RVA = "0x13096A8", Offset = "0x13096A8", VA = "0x13096A8", Slot = "4")]
			public bool Equals(AttributeQuery x, AttributeQuery y)
			{
				return default(bool);
			}

			[Token(Token = "0x6000B6F")]
			[Address(RVA = "0x1309740", Offset = "0x1309740", VA = "0x1309740", Slot = "5")]
			public int GetHashCode(AttributeQuery obj)
			{
				return default(int);
			}

			[Token(Token = "0x6000B70")]
			[Address(RVA = "0x13096A0", Offset = "0x13096A0", VA = "0x13096A0")]
			public AttributeQueryComparator()
			{
			}
		}

		[Token(Token = "0x2000191")]
		[CompilerGenerated]
		private sealed class <GetFlattenedMethods>d__18 : IEnumerable<MethodInfo>, IEnumerable, IEnumerator<MethodInfo>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private MethodInfo <>2__current;

			[Token(Token = "0x40009CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x40009CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Type type;

			[Token(Token = "0x40009CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Type <>3__type;

			[Token(Token = "0x40009CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private string methodName;

			[Token(Token = "0x40009CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string <>3__methodName;

			[Token(Token = "0x40009CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private MethodInfo[] <methods>5__2;

			[Token(Token = "0x40009D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private int <i>5__3;

			[Token(Token = "0x1700013F")]
			private MethodInfo System.Collections.Generic.IEnumerator<System.Reflection.MethodInfo>.Current
			{
				[Token(Token = "0x6000B74")]
				[Address(RVA = "0x1309928", Offset = "0x1309928", VA = "0x1309928", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000140")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000B76")]
				[Address(RVA = "0x1309970", Offset = "0x1309970", VA = "0x1309970", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000B71")]
			[Address(RVA = "0x13091E0", Offset = "0x13091E0", VA = "0x13091E0")]
			[DebuggerHidden]
			public <GetFlattenedMethods>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6000B72")]
			[Address(RVA = "0x1309790", Offset = "0x1309790", VA = "0x1309790", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000B73")]
			[Address(RVA = "0x1309794", Offset = "0x1309794", VA = "0x1309794", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B75")]
			[Address(RVA = "0x1309930", Offset = "0x1309930", VA = "0x1309930", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6000B77")]
			[Address(RVA = "0x1309978", Offset = "0x1309978", VA = "0x1309978", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<MethodInfo> System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6000B78")]
			[Address(RVA = "0x1309A24", Offset = "0x1309A24", VA = "0x1309A24", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Type[] EmptyTypes;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static IDictionary<AttributeQuery, Attribute> _cachedAttributeQueries;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static BindingFlags DeclaredFlags;

		[Token(Token = "0x6000B55")]
		public static bool HasAttribute<TAttribute>(MemberInfo element)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B56")]
		public static bool HasAttribute<TAttribute>(MemberInfo element, bool shouldCache)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x13086E0", Offset = "0x13086E0", VA = "0x13086E0")]
		public static bool HasAttribute(MemberInfo element, Type attributeType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x1308758", Offset = "0x1308758", VA = "0x1308758")]
		public static bool HasAttribute(MemberInfo element, Type attributeType, bool shouldCache)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x1308778", Offset = "0x1308778", VA = "0x1308778")]
		public static Attribute GetAttribute(MemberInfo element, Type attributeType, bool shouldCache)
		{
			return null;
		}

		[Token(Token = "0x6000B5A")]
		public static TAttribute GetAttribute<TAttribute>(MemberInfo element, bool shouldCache) where TAttribute : Attribute
		{
			return null;
		}

		[Token(Token = "0x6000B5B")]
		public static TAttribute GetAttribute<TAttribute>(MemberInfo element) where TAttribute : Attribute
		{
			return null;
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x1304FD4", Offset = "0x1304FD4", VA = "0x1304FD4")]
		public static PropertyInfo GetDeclaredProperty(this Type type, string propertyName)
		{
			return null;
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x1308A30", Offset = "0x1308A30", VA = "0x1308A30")]
		public static MethodInfo GetDeclaredMethod(this Type type, string methodName)
		{
			return null;
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x1308B80", Offset = "0x1308B80", VA = "0x1308B80")]
		public static ConstructorInfo GetDeclaredConstructor(this Type type, Type[] parameters)
		{
			return null;
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x1308D0C", Offset = "0x1308D0C", VA = "0x1308D0C")]
		public static ConstructorInfo[] GetDeclaredConstructors(this Type type)
		{
			return null;
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x1308D80", Offset = "0x1308D80", VA = "0x1308D80")]
		public static MemberInfo[] GetFlattenedMember(this Type type, string memberName)
		{
			return null;
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x130900C", Offset = "0x130900C", VA = "0x130900C")]
		public static MethodInfo GetFlattenedMethod(this Type type, string methodName)
		{
			return null;
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x1309158", Offset = "0x1309158", VA = "0x1309158")]
		[IteratorStateMachine(typeof(<GetFlattenedMethods>d__18))]
		public static IEnumerable<MethodInfo> GetFlattenedMethods(this Type type, string methodName)
		{
			return null;
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x1309214", Offset = "0x1309214", VA = "0x1309214")]
		public static PropertyInfo GetFlattenedProperty(this Type type, string propertyName)
		{
			return null;
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x1309360", Offset = "0x1309360", VA = "0x1309360")]
		public static MemberInfo GetDeclaredMember(this Type type, string memberName)
		{
			return null;
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x1308B0C", Offset = "0x1308B0C", VA = "0x1308B0C")]
		public static MethodInfo[] GetDeclaredMethods(this Type type)
		{
			return null;
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x13089BC", Offset = "0x13089BC", VA = "0x13089BC")]
		public static PropertyInfo[] GetDeclaredProperties(this Type type)
		{
			return null;
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x130943C", Offset = "0x130943C", VA = "0x130943C")]
		public static FieldInfo[] GetDeclaredFields(this Type type)
		{
			return null;
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x1308F98", Offset = "0x1308F98", VA = "0x1308F98")]
		public static MemberInfo[] GetDeclaredMembers(this Type type)
		{
			return null;
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x13094B0", Offset = "0x13094B0", VA = "0x13094B0")]
		public static MemberInfo AsMemberInfo(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x13094B4", Offset = "0x13094B4", VA = "0x13094B4")]
		public static bool IsType(MemberInfo member)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0x130952C", Offset = "0x130952C", VA = "0x130952C")]
		public static Type AsType(MemberInfo member)
		{
			return null;
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0x1304A2C", Offset = "0x1304A2C", VA = "0x1304A2C")]
		public static Type Resolve(this Type type)
		{
			return null;
		}
	}
	[Token(Token = "0x2000192")]
	public struct fsVersionedType
	{
		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public fsVersionedType[] Ancestors;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string VersionString;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Type ModelType;

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x1309A28", Offset = "0x1309A28", VA = "0x1309A28")]
		public object Migrate(object ancestorInstance)
		{
			return null;
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x1309AD0", Offset = "0x1309AD0", VA = "0x1309AD0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x1309D08", Offset = "0x1309D08", VA = "0x1309D08")]
		public static bool operator ==(fsVersionedType a, fsVersionedType b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x1309D78", Offset = "0x1309D78", VA = "0x1309D78")]
		public static bool operator !=(fsVersionedType a, fsVersionedType b)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x1309DE8", Offset = "0x1309DE8", VA = "0x1309DE8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x1309E94", Offset = "0x1309E94", VA = "0x1309E94", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000193")]
	public static class fsVersionManager
	{
		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<Type, fsOption<fsVersionedType>> _cache;

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x1309EB4", Offset = "0x1309EB4", VA = "0x1309EB4")]
		public static fsResult GetVersionImportPath(string currentVersion, fsVersionedType targetVersion, out List<fsVersionedType> path)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x130A1F8", Offset = "0x130A1F8", VA = "0x130A1F8")]
		private static bool GetVersionImportPathRecursive(List<fsVersionedType> path, string currentVersion, fsVersionedType current)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x130A380", Offset = "0x130A380", VA = "0x130A380")]
		public static fsOption<fsVersionedType> GetVersionedType(Type type)
		{
			return default(fsOption<fsVersionedType>);
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x130AA68", Offset = "0x130AA68", VA = "0x130AA68")]
		private static void VerifyConstructors(fsVersionedType type)
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x130A77C", Offset = "0x130A77C", VA = "0x130A77C")]
		private static void VerifyUniqueVersionStrings(fsVersionedType type)
		{
		}
	}
	[Token(Token = "0x2000194")]
	public class fsMetaProperty
	{
		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private MemberInfo _memberInfo;

		[Token(Token = "0x17000141")]
		public Type StorageType
		{
			[Token(Token = "0x6000B88")]
			[Address(RVA = "0x130AF38", Offset = "0x130AF38", VA = "0x130AF38")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B89")]
			[Address(RVA = "0x130AF40", Offset = "0x130AF40", VA = "0x130AF40")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000142")]
		public Type OverrideConverterType
		{
			[Token(Token = "0x6000B8A")]
			[Address(RVA = "0x130AF48", Offset = "0x130AF48", VA = "0x130AF48")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B8B")]
			[Address(RVA = "0x130AF50", Offset = "0x130AF50", VA = "0x130AF50")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000143")]
		public bool CanRead
		{
			[Token(Token = "0x6000B8C")]
			[Address(RVA = "0x130AF58", Offset = "0x130AF58", VA = "0x130AF58")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B8D")]
			[Address(RVA = "0x130AF60", Offset = "0x130AF60", VA = "0x130AF60")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000144")]
		public bool CanWrite
		{
			[Token(Token = "0x6000B8E")]
			[Address(RVA = "0x130AF6C", Offset = "0x130AF6C", VA = "0x130AF6C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B8F")]
			[Address(RVA = "0x130AF74", Offset = "0x130AF74", VA = "0x130AF74")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000145")]
		public string JsonName
		{
			[Token(Token = "0x6000B90")]
			[Address(RVA = "0x130AF80", Offset = "0x130AF80", VA = "0x130AF80")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B91")]
			[Address(RVA = "0x130AF88", Offset = "0x130AF88", VA = "0x130AF88")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000146")]
		public string MemberName
		{
			[Token(Token = "0x6000B92")]
			[Address(RVA = "0x130AF90", Offset = "0x130AF90", VA = "0x130AF90")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B93")]
			[Address(RVA = "0x130AF98", Offset = "0x130AF98", VA = "0x130AF98")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000147")]
		public bool IsPublic
		{
			[Token(Token = "0x6000B94")]
			[Address(RVA = "0x130AFA0", Offset = "0x130AFA0", VA = "0x130AFA0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B95")]
			[Address(RVA = "0x130AFA8", Offset = "0x130AFA8", VA = "0x130AFA8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000148")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000B96")]
			[Address(RVA = "0x130AFB4", Offset = "0x130AFB4", VA = "0x130AFB4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B97")]
			[Address(RVA = "0x130AFBC", Offset = "0x130AFBC", VA = "0x130AFBC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x130ACA8", Offset = "0x130ACA8", VA = "0x130ACA8")]
		internal fsMetaProperty(fsConfig config, FieldInfo field)
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x130AE18", Offset = "0x130AE18", VA = "0x130AE18")]
		internal fsMetaProperty(fsConfig config, PropertyInfo property)
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x130AD40", Offset = "0x130AD40", VA = "0x130AD40")]
		private void CommonInitialize(fsConfig config)
		{
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x1306BE8", Offset = "0x1306BE8", VA = "0x1306BE8")]
		public void Write(object context, object value)
		{
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0x130684C", Offset = "0x130684C", VA = "0x130684C")]
		public object Read(object context)
		{
			return null;
		}
	}
	[Token(Token = "0x2000195")]
	public static class fsReflectionUtility
	{
		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x130AFC8", Offset = "0x130AFC8", VA = "0x130AFC8")]
		public static Type GetInterface(Type type, Type interfaceType)
		{
			return null;
		}
	}
	[Token(Token = "0x2000196")]
	public static class fsTypeCache
	{
		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, Type> _cachedTypes;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<string, Assembly> _assembliesByName;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<Assembly> _assembliesByIndex;

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x130B210", Offset = "0x130B210", VA = "0x130B210")]
		static fsTypeCache()
		{
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x130B648", Offset = "0x130B648", VA = "0x130B648")]
		private static void OnAssemblyLoaded(object sender, AssemblyLoadEventArgs args)
		{
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x130B8C8", Offset = "0x130B8C8", VA = "0x130B8C8")]
		private static bool TryDirectTypeLookup(string assemblyName, string typeName, out Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x130B9D8", Offset = "0x130B9D8", VA = "0x130B9D8")]
		private static bool TryIndirectTypeLookup(string typeName, out Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x130BC18", Offset = "0x130BC18", VA = "0x130BC18")]
		public static void Reset()
		{
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x1307144", Offset = "0x1307144", VA = "0x1307144")]
		public static Type GetType(string name)
		{
			return null;
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x130BCB4", Offset = "0x130BCB4", VA = "0x130BCB4")]
		public static Type GetType(string name, string assemblyHint)
		{
			return null;
		}
	}
}
namespace FullSerializer.Internal.Converters
{
	[Token(Token = "0x2000197")]
	public class UnityEvent_Converter : fsConverter
	{
		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x130BEFC", Offset = "0x130BEFC", VA = "0x130BEFC", Slot = "9")]
		public override bool CanProcess(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x130BFE4", Offset = "0x130BFE4", VA = "0x130BFE4", Slot = "5")]
		public override bool RequestCycleSupport(Type storageType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x130BFEC", Offset = "0x130BFEC", VA = "0x130BFEC", Slot = "8")]
		public override fsResult TryDeserialize(fsData data, ref object instance, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x130C0C8", Offset = "0x130C0C8", VA = "0x130C0C8", Slot = "7")]
		public override fsResult TrySerialize(object instance, out fsData serialized, Type storageType)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x130C150", Offset = "0x130C150", VA = "0x130C150")]
		public UnityEvent_Converter()
		{
		}
	}
}
namespace FullSerializer.Internal.DirectConverters
{
	[Token(Token = "0x2000198")]
	public class AnimationCurve_DirectConverter : fsDirectConverter<AnimationCurve>
	{
		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x130C158", Offset = "0x130C158", VA = "0x130C158", Slot = "10")]
		protected override fsResult DoSerialize(AnimationCurve model, Dictionary<string, fsData> serialized)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x130C314", Offset = "0x130C314", VA = "0x130C314", Slot = "11")]
		protected override fsResult DoDeserialize(Dictionary<string, fsData> data, ref AnimationCurve model)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x130C534", Offset = "0x130C534", VA = "0x130C534", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x130C590", Offset = "0x130C590", VA = "0x130C590")]
		public AnimationCurve_DirectConverter()
		{
		}
	}
	[Token(Token = "0x2000199")]
	public class Bounds_DirectConverter : fsDirectConverter<Bounds>
	{
		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x130C5D8", Offset = "0x130C5D8", VA = "0x130C5D8", Slot = "10")]
		protected override fsResult DoSerialize(Bounds model, Dictionary<string, fsData> serialized)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x130C70C", Offset = "0x130C70C", VA = "0x130C70C", Slot = "11")]
		protected override fsResult DoDeserialize(Dictionary<string, fsData> data, ref Bounds model)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x130C8AC", Offset = "0x130C8AC", VA = "0x130C8AC", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x130C904", Offset = "0x130C904", VA = "0x130C904")]
		public Bounds_DirectConverter()
		{
		}
	}
	[Token(Token = "0x200019A")]
	public class Gradient_DirectConverter : fsDirectConverter<Gradient>
	{
		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x130C94C", Offset = "0x130C94C", VA = "0x130C94C", Slot = "10")]
		protected override fsResult DoSerialize(Gradient model, Dictionary<string, fsData> serialized)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x130CAA4", Offset = "0x130CAA4", VA = "0x130CAA4", Slot = "11")]
		protected override fsResult DoDeserialize(Dictionary<string, fsData> data, ref Gradient model)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x130CC4C", Offset = "0x130CC4C", VA = "0x130CC4C", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x130CCA8", Offset = "0x130CCA8", VA = "0x130CCA8")]
		public Gradient_DirectConverter()
		{
		}
	}
	[Token(Token = "0x200019B")]
	public class GUIStyleState_DirectConverter : fsDirectConverter<GUIStyleState>
	{
		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x130CCF0", Offset = "0x130CCF0", VA = "0x130CCF0", Slot = "10")]
		protected override fsResult DoSerialize(GUIStyleState model, Dictionary<string, fsData> serialized)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x130CE44", Offset = "0x130CE44", VA = "0x130CE44", Slot = "11")]
		protected override fsResult DoDeserialize(Dictionary<string, fsData> data, ref GUIStyleState model)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x130CFF8", Offset = "0x130CFF8", VA = "0x130CFF8", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x130D054", Offset = "0x130D054", VA = "0x130D054")]
		public GUIStyleState_DirectConverter()
		{
		}
	}
	[Token(Token = "0x200019C")]
	public class GUIStyle_DirectConverter : fsDirectConverter<GUIStyle>
	{
		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x130D09C", Offset = "0x130D09C", VA = "0x130D09C", Slot = "10")]
		protected override fsResult DoSerialize(GUIStyle model, Dictionary<string, fsData> serialized)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x130DB58", Offset = "0x130DB58", VA = "0x130DB58", Slot = "11")]
		protected override fsResult DoDeserialize(Dictionary<string, fsData> data, ref GUIStyle model)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x130E968", Offset = "0x130E968", VA = "0x130E968", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x130E9C4", Offset = "0x130E9C4", VA = "0x130E9C4")]
		public GUIStyle_DirectConverter()
		{
		}
	}
	[Token(Token = "0x200019D")]
	public class Keyframe_DirectConverter : fsDirectConverter<Keyframe>
	{
		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x130EA0C", Offset = "0x130EA0C", VA = "0x130EA0C", Slot = "10")]
		protected override fsResult DoSerialize(Keyframe model, Dictionary<string, fsData> serialized)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x130EC68", Offset = "0x130EC68", VA = "0x130EC68", Slot = "11")]
		protected override fsResult DoDeserialize(Dictionary<string, fsData> data, ref Keyframe model)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x130EF64", Offset = "0x130EF64", VA = "0x130EF64", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x130EFC0", Offset = "0x130EFC0", VA = "0x130EFC0")]
		public Keyframe_DirectConverter()
		{
		}
	}
	[Token(Token = "0x200019E")]
	public class LayerMask_DirectConverter : fsDirectConverter<LayerMask>
	{
		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0x130F008", Offset = "0x130F008", VA = "0x130F008", Slot = "10")]
		protected override fsResult DoSerialize(LayerMask model, Dictionary<string, fsData> serialized)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0x130F0E4", Offset = "0x130F0E4", VA = "0x130F0E4", Slot = "11")]
		protected override fsResult DoDeserialize(Dictionary<string, fsData> data, ref LayerMask model)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x130F1F4", Offset = "0x130F1F4", VA = "0x130F1F4", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0x130F240", Offset = "0x130F240", VA = "0x130F240")]
		public LayerMask_DirectConverter()
		{
		}
	}
	[Token(Token = "0x200019F")]
	public class RectOffset_DirectConverter : fsDirectConverter<RectOffset>
	{
		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0x130F288", Offset = "0x130F288", VA = "0x130F288", Slot = "10")]
		protected override fsResult DoSerialize(RectOffset model, Dictionary<string, fsData> serialized)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x130F48C", Offset = "0x130F48C", VA = "0x130F48C", Slot = "11")]
		protected override fsResult DoDeserialize(Dictionary<string, fsData> data, ref RectOffset model)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0x130F714", Offset = "0x130F714", VA = "0x130F714", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0x130F770", Offset = "0x130F770", VA = "0x130F770")]
		public RectOffset_DirectConverter()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	public class Rect_DirectConverter : fsDirectConverter<Rect>
	{
		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0x130F7B8", Offset = "0x130F7B8", VA = "0x130F7B8", Slot = "10")]
		protected override fsResult DoSerialize(Rect model, Dictionary<string, fsData> serialized)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0x130F9AC", Offset = "0x130F9AC", VA = "0x130F9AC", Slot = "11")]
		protected override fsResult DoDeserialize(Dictionary<string, fsData> data, ref Rect model)
		{
			return default(fsResult);
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0x130FC1C", Offset = "0x130FC1C", VA = "0x130FC1C", Slot = "4")]
		public override object CreateInstance(fsData data, Type storageType)
		{
			return null;
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0x130FC70", Offset = "0x130FC70", VA = "0x130FC70")]
		public Rect_DirectConverter()
		{
		}
	}
}
namespace Febucci.Attributes
{
	[Token(Token = "0x20001A1")]
	public class CharsDisplayTimeAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x130FCB8", Offset = "0x130FCB8", VA = "0x130FCB8")]
		public CharsDisplayTimeAttribute()
		{
		}
	}
	[Token(Token = "0x20001A2")]
	public class MinValueAttribute : PropertyAttribute
	{
		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float min;

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0x130FCC0", Offset = "0x130FCC0", VA = "0x130FCC0")]
		public MinValueAttribute(float min)
		{
		}
	}
	[Token(Token = "0x20001A3")]
	public class NotZeroAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x130FCE8", Offset = "0x130FCE8", VA = "0x130FCE8")]
		public NotZeroAttribute()
		{
		}
	}
	[Token(Token = "0x20001A4")]
	public class PositiveValueAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0x130FCF0", Offset = "0x130FCF0", VA = "0x130FCF0")]
		public PositiveValueAttribute()
		{
		}
	}
}
namespace Febucci.UI
{
	[Token(Token = "0x20001A5")]
	public static class TAnimTags
	{
		[Token(Token = "0x40009E2")]
		public const string bh_Shake = "shake";

		[Token(Token = "0x40009E3")]
		public const string bh_Rot = "rot";

		[Token(Token = "0x40009E4")]
		public const string bh_Wiggle = "wiggle";

		[Token(Token = "0x40009E5")]
		public const string bh_Wave = "wave";

		[Token(Token = "0x40009E6")]
		public const string bh_Swing = "swing";

		[Token(Token = "0x40009E7")]
		public const string bh_Incr = "incr";

		[Token(Token = "0x40009E8")]
		public const string bh_Slide = "slide";

		[Token(Token = "0x40009E9")]
		public const string bh_Bounce = "bounce";

		[Token(Token = "0x40009EA")]
		public const string bh_Fade = "fade";

		[Token(Token = "0x40009EB")]
		public const string bh_Rainb = "rainb";

		[Token(Token = "0x40009EC")]
		public const string ap_Size = "size";

		[Token(Token = "0x40009ED")]
		public const string ap_Fade = "fade";

		[Token(Token = "0x40009EE")]
		public const string ap_Offset = "offset";

		[Token(Token = "0x40009EF")]
		public const string ap_VertExp = "vertexp";

		[Token(Token = "0x40009F0")]
		public const string ap_HoriExp = "horiexp";

		[Token(Token = "0x40009F1")]
		public const string ap_DiagExp = "diagexp";

		[Token(Token = "0x40009F2")]
		public const string ap_Rot = "rot";

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly string[] defaultBehaviors;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly string[] defaultAppearances;
	}
	[Token(Token = "0x20001A6")]
	public struct TypewriterAction
	{
		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string actionID;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public List<string> parameters;
	}
	[Token(Token = "0x20001A7")]
	[RequireComponent(typeof(TMP_Text))]
	[AddComponentMenu("Febucci/TextAnimator/TextAnimator")]
	[HelpURL("https://www.textanimator.febucci.com/docs/how-to-add-effects-to-your-texts/")]
	[DisallowMultipleComponent]
	public class TextAnimator : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001A8")]
		private class AppearancesContainer
		{
			[Token(Token = "0x4000A1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			public string[] tags;

			[Token(Token = "0x4000A1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public AppearanceDefaultValues values;

			[Token(Token = "0x6000BFD")]
			[Address(RVA = "0x1314DB4", Offset = "0x1314DB4", VA = "0x1314DB4")]
			public AppearancesContainer()
			{
			}
		}

		[Token(Token = "0x20001A9")]
		internal struct InternalAction
		{
			[Token(Token = "0x4000A1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TypewriterAction action;

			[Token(Token = "0x4000A20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int charIndex;

			[Token(Token = "0x4000A21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool triggered;

			[Token(Token = "0x4000A22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int internalOrder;
		}

		[Token(Token = "0x20001AA")]
		private enum ShowTextMode : byte
		{
			[Token(Token = "0x4000A24")]
			Hidden,
			[Token(Token = "0x4000A25")]
			Shown,
			[Token(Token = "0x4000A26")]
			UserTyping
		}

		[Token(Token = "0x20001AB")]
		public enum TimeScale
		{
			[Token(Token = "0x4000A28")]
			Scaled,
			[Token(Token = "0x4000A29")]
			Unscaled
		}

		[Token(Token = "0x20001AC")]
		public delegate void MessageEvent(string message);

		[Token(Token = "0x40009F7")]
		public const int verticesPerChar = 4;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TAnimPlayerBase _tAnimPlayer;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If true, the typewriter is triggered automatically once the TMPro text changes (requires a TextAnimatorPlayer component). Otherwise, it shows the entire text instantly.")]
		[SerializeField]
		private bool triggerAnimPlayerOnChange;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float effectIntensityMultiplier;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[FormerlySerializedAs("defaultAppearance")]
		[SerializeField]
		[Header("Text Appearance")]
		private AppearancesContainer appearancesContainer;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private BehaviorDefaultValues behaviorValues;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Tooltip("True if you want effects to have the same intensities even if text is larger/smaller than default (example: when TMPro's AutoSize changes the size based on screen size)")]
		private bool useDynamicScaling;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[Tooltip("Used for scaling, represents the text's size where/when effects intensity behave like intended.")]
		private float referenceFontSize;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TMP_Text _tmproText;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TimeScale timeScale;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string latestText;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private float timePassed;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private bool forceMeshRefresh;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DD")]
		private bool skipAppearanceEffects;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DE")]
		private bool hasParentCanvas;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private Canvas parentCanvas;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private bool autoSize;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private Rect sourceRect;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		private Color sourceColor;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		private int visibleCharacters;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private bool hasText;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private int latestTriggeredEvent;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private int latestTriggeredAction;

		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private TMP_TextInfo textInfo;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Character[] characters;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private InternalAction[] typewriterActions;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private BehaviorBase[] effects;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private AppearanceBase[] appearingEffects;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private EventMarker[] eventMarkers;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool enabled_globalAppearances;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static bool enabled_globalBehaviors;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private bool databaseBuilt;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private Dictionary<string, Type> localBehaviors;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private Dictionary<string, Type> localAppearances;

		[Token(Token = "0x17000149")]
		private TAnimPlayerBase tAnimPlayer
		{
			[Token(Token = "0x6000BD2")]
			[Address(RVA = "0x1310700", Offset = "0x1310700", VA = "0x1310700")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014A")]
		public TMP_Text tmproText
		{
			[Token(Token = "0x6000BD3")]
			[Address(RVA = "0x13105E0", Offset = "0x13105E0", VA = "0x13105E0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BD4")]
			[Address(RVA = "0x131081C", Offset = "0x131081C", VA = "0x131081C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700014B")]
		public float deltaTime
		{
			[Token(Token = "0x6000BD5")]
			[Address(RVA = "0x1310824", Offset = "0x1310824", VA = "0x1310824")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BD6")]
			[Address(RVA = "0x131082C", Offset = "0x131082C", VA = "0x131082C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700014C")]
		public string text
		{
			[Token(Token = "0x6000BD9")]
			[Address(RVA = "0x131096C", Offset = "0x131096C", VA = "0x131096C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BDA")]
			[Address(RVA = "0x1310974", Offset = "0x1310974", VA = "0x1310974")]
			private set
			{
			}
		}

		[Token(Token = "0x1700014D")]
		public bool allLettersShown
		{
			[Token(Token = "0x6000BDB")]
			[Address(RVA = "0x131097C", Offset = "0x131097C", VA = "0x131097C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014E")]
		public TMP_CharacterInfo latestCharacterShown
		{
			[Token(Token = "0x6000BDC")]
			[Address(RVA = "0x13109AC", Offset = "0x13109AC", VA = "0x13109AC")]
			[CompilerGenerated]
			get
			{
				return default(TMP_CharacterInfo);
			}
			[Token(Token = "0x6000BDD")]
			[Address(RVA = "0x13109BC", Offset = "0x13109BC", VA = "0x13109BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700014F")]
		internal bool hasActions
		{
			[Token(Token = "0x6000BDE")]
			[Address(RVA = "0x13109D4", Offset = "0x13109D4", VA = "0x13109D4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BDF")]
			[Address(RVA = "0x13109DC", Offset = "0x13109DC", VA = "0x13109DC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000150")]
		public static bool effectsBehaviorsEnabled
		{
			[Token(Token = "0x6000BE6")]
			[Address(RVA = "0x13122BC", Offset = "0x13122BC", VA = "0x13122BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000151")]
		public static bool effectsAppearancesEnabled
		{
			[Token(Token = "0x6000BE7")]
			[Address(RVA = "0x1312314", Offset = "0x1312314", VA = "0x1312314")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000002")]
		public event MessageEvent onEvent
		{
			[Token(Token = "0x6000BD7")]
			[Address(RVA = "0x1310834", Offset = "0x1310834", VA = "0x1310834")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000BD8")]
			[Address(RVA = "0x13108D0", Offset = "0x13108D0", VA = "0x13108D0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x13101B4", Offset = "0x13101B4", VA = "0x13101B4")]
		public static bool IsTagLongEnough(string tag)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x13101D4", Offset = "0x13101D4", VA = "0x13101D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0x13109E8", Offset = "0x13109E8", VA = "0x13109E8")]
		public bool TryGetNextCharacter(out TMP_CharacterInfo result)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0x1310A5C", Offset = "0x1310A5C", VA = "0x1310A5C")]
		public char IncreaseVisibleChars()
		{
			return default(char);
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x1310C88", Offset = "0x1310C88", VA = "0x1310C88")]
		public void ShowAllCharacters(bool skipAppearanceEffects)
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x1310CB0", Offset = "0x1310CB0", VA = "0x1310CB0")]
		public void TriggerRemainingEvents()
		{
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x1310D70", Offset = "0x1310D70", VA = "0x1310D70")]
		public void SyncText(string text, bool hideText)
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x13122B0", Offset = "0x13122B0", VA = "0x13122B0")]
		public void ForceMeshRefresh()
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x131236C", Offset = "0x131236C", VA = "0x131236C")]
		public static void EnableAllEffects(bool enabled)
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x1312434", Offset = "0x1312434", VA = "0x1312434")]
		public static void EnableAppearances(bool enabled)
		{
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x1312490", Offset = "0x1312490", VA = "0x1312490")]
		public static void EnableBehaviors(bool enabled)
		{
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0x13124EC", Offset = "0x13124EC", VA = "0x13124EC")]
		private void BuildTagsDatabase()
		{
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x13137FC", Offset = "0x13137FC", VA = "0x13137FC")]
		private bool GetBehaviorClassFromTag(string tag, out BehaviorBase effectBase)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x1313944", Offset = "0x1313944", VA = "0x1313944")]
		private bool GetAppearingClassFromTag(string tag, out AppearanceBase effectBase)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0x1310D88", Offset = "0x1310D88", VA = "0x1310D88")]
		private void _SyncText(string text, ShowTextMode showTextMode)
		{
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x1310B88", Offset = "0x1310B88", VA = "0x1310B88")]
		private void TryTriggeringEvent(int maxInternalOrder)
		{
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x1313EA0", Offset = "0x1313EA0", VA = "0x1313EA0")]
		internal bool TryGetAction(out TypewriterAction action)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x13106C4", Offset = "0x13106C4", VA = "0x13106C4")]
		private void UpdateDeltaTime()
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x1313D04", Offset = "0x1313D04", VA = "0x1313D04")]
		private void SetupEffectsIntensity()
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x1313F9C", Offset = "0x1313F9C", VA = "0x1313F9C")]
		private void CopyMeshSources()
		{
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x1314284", Offset = "0x1314284", VA = "0x1314284")]
		private void UpdateMesh()
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x1314470", Offset = "0x1314470", VA = "0x1314470")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x1314C88", Offset = "0x1314C88", VA = "0x1314C88")]
		public TextAnimator()
		{
		}
	}
	[Token(Token = "0x20001B1")]
	[HelpURL("https://www.textanimator.febucci.com/docs/text-animator-players/")]
	[AddComponentMenu("Febucci/TextAnimator/TextAnimatorPlayer")]
	public class TextAnimatorPlayer : TAnimPlayerBase
	{
		[Token(Token = "0x20001B2")]
		[CompilerGenerated]
		private sealed class <WaitInput>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000152")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C08")]
				[Address(RVA = "0x13156BC", Offset = "0x13156BC", VA = "0x13156BC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000153")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C0A")]
				[Address(RVA = "0x1315704", Offset = "0x1315704", VA = "0x1315704", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C05")]
			[Address(RVA = "0x13155BC", Offset = "0x13155BC", VA = "0x13155BC")]
			[DebuggerHidden]
			public <WaitInput>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6000C06")]
			[Address(RVA = "0x1315674", Offset = "0x1315674", VA = "0x1315674", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C07")]
			[Address(RVA = "0x1315678", Offset = "0x1315678", VA = "0x1315678", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C09")]
			[Address(RVA = "0x13156C4", Offset = "0x13156C4", VA = "0x13156C4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Wait time for normal letters")]
		[CharsDisplayTime]
		[SerializeField]
		private float waitForNormalChars;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[SerializeField]
		[CharsDisplayTime]
		[Tooltip("Wait time for ! ? .")]
		private float waitLong;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[CharsDisplayTime]
		[Tooltip("Wait time for ; : ) - ,")]
		private float waitMiddle;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		[Tooltip("-True: only the last punctuaction on a sequence waits for its category time.\n-False: each punctuaction will wait, regardless if it's in a sequence or not")]
		private bool avoidMultiplePunctuactionWait;

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x1315308", Offset = "0x1315308", VA = "0x1315308", Slot = "5")]
		protected override float WaitTimeOf(char character)
		{
			return default(float);
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x131555C", Offset = "0x131555C", VA = "0x131555C", Slot = "4")]
		[IteratorStateMachine(typeof(<WaitInput>d__5))]
		protected override IEnumerator WaitInput()
		{
			return null;
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x13155E4", Offset = "0x13155E4", VA = "0x13155E4")]
		public TextAnimatorPlayer()
		{
		}
	}
}
namespace Febucci.UI.Core
{
	[Token(Token = "0x20001B3")]
	internal struct Character
	{
		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int[] indexBehaviorEffects;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int[] indexAppearanceEffects;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CharacterSourceData sources;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CharacterData data;

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x1314C10", Offset = "0x1314C10", VA = "0x1314C10")]
		public void ResetVertices()
		{
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x1314BA8", Offset = "0x1314BA8", VA = "0x1314BA8")]
		public void ResetColors()
		{
		}
	}
	[Token(Token = "0x20001B4")]
	internal struct CharacterSourceData
	{
		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Color32[] colors;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Vector3[] vertices;
	}
	[Token(Token = "0x20001B5")]
	public struct CharacterData
	{
		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float passedTime;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Color32[] colors;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] vertices;
	}
	[Token(Token = "0x20001B6")]
	public abstract class EffectsBase
	{
		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected float effectIntensity;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal string effectTag;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal bool closed;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal int charStartIndex;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal int charEndIndex;

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x131570C", Offset = "0x131570C", VA = "0x131570C")]
		public bool IsCharInsideRegion(int charIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x1315730", Offset = "0x1315730", VA = "0x1315730", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C0F")]
		public abstract void ApplyEffect(ref CharacterData data, int charIndex);

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x1315800", Offset = "0x1315800", VA = "0x1315800")]
		protected void ApplyModifierTo(ref float value, string modifierValue)
		{
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x13158B4", Offset = "0x13158B4", VA = "0x13158B4")]
		internal void SetEffectIntensity(float value)
		{
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x13158BC", Offset = "0x13158BC", VA = "0x13158BC", Slot = "5")]
		public virtual void Initialize(int charactersCount)
		{
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x13158C0", Offset = "0x13158C0", VA = "0x13158C0", Slot = "6")]
		public virtual void Calculate()
		{
		}

		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x13158C4", Offset = "0x13158C4", VA = "0x13158C4")]
		protected EffectsBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B7")]
	public class AppearanceDefaultValues
	{
		[Serializable]
		[Token(Token = "0x20001B8")]
		internal class Defaults
		{
			[Token(Token = "0x4000A4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[PositiveValue]
			public float sizeDuration;

			[Token(Token = "0x4000A4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[MinValue(0f)]
			public float sizeAmplitude;

			[Token(Token = "0x4000A4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[PositiveValue]
			public float fadeDuration;

			[Token(Token = "0x4000A4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[PositiveValue]
			public float verticalExpandDuration;

			[Token(Token = "0x4000A50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool verticalFromBottom;

			[Token(Token = "0x4000A51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[PositiveValue]
			public float horizontalExpandDuration;

			[Token(Token = "0x4000A52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public HorizontalExpandAppearance.ExpType horizontalExpandStart;

			[Token(Token = "0x4000A53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[PositiveValue]
			public float diagonalExpandDuration;

			[Token(Token = "0x4000A54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool diagonalFromBttmLeft;

			[Token(Token = "0x4000A55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[NotZero]
			public Vector2 offsetDir;

			[Token(Token = "0x4000A56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[PositiveValue]
			public float offsetDuration;

			[Token(Token = "0x4000A57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[NotZero]
			public float offsetAmplitude;

			[Token(Token = "0x4000A58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[PositiveValue]
			public float rotationDuration;

			[Token(Token = "0x4000A59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float rotationStartAngle;

			[Token(Token = "0x6000C16")]
			[Address(RVA = "0x13158D4", Offset = "0x13158D4", VA = "0x13158D4")]
			public Defaults()
			{
			}
		}

		[Token(Token = "0x4000A48")]
		private const float defDuration = 0.3f;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[Header("Default Appearances")]
		internal Defaults defaults;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("Preset Effects")]
		internal PresetAppearanceValues[] presets;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("Showing here the values for ALL your custom effects, if any.")]
		public CustomEffects.CustomAppearanceDefValues customs;

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x1315134", Offset = "0x1315134", VA = "0x1315134")]
		public AppearanceDefaultValues()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B9")]
	public class BehaviorDefaultValues
	{
		[Serializable]
		[Token(Token = "0x20001BA")]
		public class Defaults
		{
			[Token(Token = "0x4000A5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[NotZero]
			public float wiggleAmplitude;

			[Token(Token = "0x4000A5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[NotZero]
			public float wiggleFrequency;

			[Token(Token = "0x4000A5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[NotZero]
			public float waveFrequency;

			[Token(Token = "0x4000A60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[NotZero]
			public float waveAmplitude;

			[Token(Token = "0x4000A61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float waveWaveSize;

			[Token(Token = "0x4000A62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[NotZero]
			public float angleSpeed;

			[Token(Token = "0x4000A63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float angleDiffBetweenChars;

			[Token(Token = "0x4000A64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[NotZero]
			public float swingAmplitude;

			[Token(Token = "0x4000A65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[NotZero]
			public float swingFrequency;

			[Token(Token = "0x4000A66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float swingWaveSize;

			[Token(Token = "0x4000A67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[NotZero]
			public float shakeStrength;

			[Token(Token = "0x4000A68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[PositiveValue]
			public float shakeDelay;

			[Token(Token = "0x4000A69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float sizeAmplitude;

			[Token(Token = "0x4000A6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[NotZero]
			public float sizeFrequency;

			[Token(Token = "0x4000A6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float sizeWaveSize;

			[Token(Token = "0x4000A6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[NotZero]
			public float slideAmplitude;

			[Token(Token = "0x4000A6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[NotZero]
			public float slideFrequency;

			[Token(Token = "0x4000A6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float slideWaveSize;

			[Token(Token = "0x4000A6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[NotZero]
			public float bounceAmplitude;

			[Token(Token = "0x4000A70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[NotZero]
			public float bounceFrequency;

			[Token(Token = "0x4000A71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public float bounceWaveSize;

			[Token(Token = "0x4000A72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[NotZero]
			public float hueShiftSpeed;

			[Token(Token = "0x4000A73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public float hueShiftWaveSize;

			[Token(Token = "0x4000A74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[PositiveValue]
			public float fadeDelay;

			[Token(Token = "0x6000C18")]
			[Address(RVA = "0x1315954", Offset = "0x1315954", VA = "0x1315954")]
			public Defaults()
			{
			}
		}

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[Header("Default Behaviors")]
		public Defaults defaults;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("Preset Effects")]
		internal PresetBehaviorValues[] presets;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Showing here the values for ALL your custom effects, if any.")]
		[SerializeField]
		public CustomEffects.CustomBehaviorDefValues customs;

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x1314E90", Offset = "0x1314E90", VA = "0x1314E90")]
		public BehaviorDefaultValues()
		{
		}
	}
	[Token(Token = "0x20001BB")]
	internal struct EventMarker
	{
		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int charIndex;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string eventMessage;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool triggered;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int internalOrder;
	}
	[Token(Token = "0x20001BC")]
	internal static class TAnimBuilder
	{
		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static TAnimGlobalDataScriptable _data;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Dictionary<string, Type> behaviorsData;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Dictionary<string, Type> appearancesData;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static HashSet<string> globalDefaultActions;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static HashSet<string> globalCustomActions;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static bool globalDatabaseInitialized;

		[Token(Token = "0x17000154")]
		public static bool hasData
		{
			[Token(Token = "0x6000C19")]
			[Address(RVA = "0x13159BC", Offset = "0x13159BC", VA = "0x13159BC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C1A")]
			[Address(RVA = "0x1315A14", Offset = "0x1315A14", VA = "0x1315A14")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000155")]
		internal static TAnimGlobalDataScriptable data
		{
			[Token(Token = "0x6000C1B")]
			[Address(RVA = "0x1315A70", Offset = "0x1315A70", VA = "0x1315A70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0x13126D8", Offset = "0x13126D8", VA = "0x13126D8")]
		internal static void InitializeGlobalDatabase()
		{
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x1315AC8", Offset = "0x1315AC8", VA = "0x1315AC8")]
		internal static bool TryGetGlobalPresetBehavior(string tag, out PresetBehaviorValues result)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x1315BF0", Offset = "0x1315BF0", VA = "0x1315BF0")]
		internal static bool TryGetGlobalPresetAppearance(string tag, out PresetAppearanceValues result)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1F")]
		internal static bool GetPresetFromArray<T>(string tag, T[] presets, out T result) where T : PresetBaseValues
		{
			return default(bool);
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x1314F9C", Offset = "0x1314F9C", VA = "0x1314F9C")]
		internal static bool IsDefaultAction(string tag)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x1315068", Offset = "0x1315068", VA = "0x1315068")]
		internal static bool IsCustomAction(string tag)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x13138BC", Offset = "0x13138BC", VA = "0x13138BC")]
		internal static bool TryGetGlobalBehaviorFromTag(string tag, out BehaviorBase effectClass)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x1313A04", Offset = "0x1313A04", VA = "0x1313A04")]
		internal static bool TryGetGlobalAppearanceFromTag(string tag, out AppearanceBase effectClass)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C24")]
		internal static bool TryGetEffectClassFromTag<T>(Dictionary<string, Type> dictionary, string tag, out T effectClass) where T : class
		{
			return default(bool);
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x131368C", Offset = "0x131368C", VA = "0x131368C")]
		internal static void TryAddingPresetToDictionary(ref Dictionary<string, Type> database, string tag, Type type)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BD")]
	[CreateAssetMenu(fileName = "TextAnimator GlobalData", menuName = "TextAnimator/Create Global Text Animator Data")]
	public class TAnimGlobalDataScriptable : ScriptableObject
	{
		[Token(Token = "0x4000A80")]
		public const string resourcesPath = "TextAnimator GlobalData";

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PresetBehaviorValues[] globalBehaviorPresets;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PresetAppearanceValues[] globalAppearancePresets;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string[] customActions;

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x1315E40", Offset = "0x1315E40", VA = "0x1315E40")]
		public TAnimGlobalDataScriptable()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BE")]
	public class CharacterEvent : UnityEvent<char>
	{
		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x1315EE8", Offset = "0x1315EE8", VA = "0x1315EE8")]
		public CharacterEvent()
		{
		}
	}
	[Token(Token = "0x20001BF")]
	[DisallowMultipleComponent]
	[RequireComponent(typeof(TextAnimator))]
	public abstract class TAnimPlayerBase : MonoBehaviour
	{
		[Token(Token = "0x20001C0")]
		[Flags]
		private enum StartTypewriterMode
		{
			[Token(Token = "0x4000A92")]
			FromScriptOnly = 0,
			[Token(Token = "0x4000A93")]
			OnEnable = 1,
			[Token(Token = "0x4000A94")]
			OnShowText = 2,
			[Token(Token = "0x4000A95")]
			AutomaticallyFromAllEvents = 3
		}

		[StructLayout(3)]
		[Token(Token = "0x20001C1")]
		[CompilerGenerated]
		private struct <>c__DisplayClass18_0
		{
			[Token(Token = "0x4000A96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float deltaTime;

			[Token(Token = "0x4000A97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float typewriterTagsSpeed;
		}

		[Token(Token = "0x20001C2")]
		[CompilerGenerated]
		private sealed class <ShowRemainingCharacters>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TAnimPlayerBase <>4__this;

			[Token(Token = "0x4000A9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private <>c__DisplayClass18_0 <>8__1;

			[Token(Token = "0x4000A9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <timeToWait>5__2;

			[Token(Token = "0x4000A9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <timePassed>5__3;

			[Token(Token = "0x17000158")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C3F")]
				[Address(RVA = "0x13167E8", Offset = "0x13167E8", VA = "0x13167E8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000159")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C41")]
				[Address(RVA = "0x1316830", Offset = "0x1316830", VA = "0x1316830", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C3C")]
			[Address(RVA = "0x1315FA0", Offset = "0x1315FA0", VA = "0x1315FA0")]
			[DebuggerHidden]
			public <ShowRemainingCharacters>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0x13162D8", Offset = "0x13162D8", VA = "0x13162D8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C3E")]
			[Address(RVA = "0x13162DC", Offset = "0x13162DC", VA = "0x13162DC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C40")]
			[Address(RVA = "0x13167F0", Offset = "0x13167F0", VA = "0x13167F0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string textToShow;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private TextAnimator _textAnimator;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool isInsideRoutine;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		protected bool wantsToSkip;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[Tooltip("True if you want to shows the text dynamically")]
		[SerializeField]
		public bool useTypeWriter;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[Tooltip("Controls from which method(s) the typewriter will automatically start/resume. Default is 'Automatic'")]
		private StartTypewriterMode startTypewriterMode;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool canSkipTypewriter;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		[SerializeField]
		private bool hideAppearancesOnSkip;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		[Tooltip("True = plays all remaining events once the typewriter has been skipped")]
		[SerializeField]
		private bool triggerEventsOnSkip;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected float typewriterPlayerSpeed;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent onTextShowed;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onTypewriterStart;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CharacterEvent onCharacterVisible;

		[Token(Token = "0x17000156")]
		public TextAnimator textAnimator
		{
			[Token(Token = "0x6000C2A")]
			[Address(RVA = "0x1315440", Offset = "0x1315440", VA = "0x1315440")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000157")]
		protected bool isBaseInsideRoutine
		{
			[Token(Token = "0x6000C2B")]
			[Address(RVA = "0x1315F30", Offset = "0x1315F30", VA = "0x1315F30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0x1315F38", Offset = "0x1315F38", VA = "0x1315F38")]
		[IteratorStateMachine(typeof(<ShowRemainingCharacters>d__18))]
		private IEnumerator ShowRemainingCharacters()
		{
			return null;
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0x1314AB0", Offset = "0x1314AB0", VA = "0x1314AB0")]
		public void ShowText(string text)
		{
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x1316030", Offset = "0x1316030", VA = "0x1316030")]
		[ContextMenu("Start Showing Text")]
		public void StartShowingText()
		{
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x131611C", Offset = "0x131611C", VA = "0x131611C")]
		[ContextMenu("Skip Typewriter")]
		public void SkipTypewriter()
		{
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x1315FC8", Offset = "0x1315FC8", VA = "0x1315FC8")]
		[ContextMenu("Stop Showing Text")]
		public void StopShowingText()
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x1316128", Offset = "0x1316128", VA = "0x1316128")]
		public void SetTypewriterSpeed(float value)
		{
		}

		[Token(Token = "0x6000C32")]
		protected abstract IEnumerator WaitInput();

		[Token(Token = "0x6000C33")]
		protected abstract float WaitTimeOf(char character);

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x131613C", Offset = "0x131613C", VA = "0x131613C", Slot = "6")]
		protected virtual IEnumerator DoCustomAction(TypewriterAction action)
		{
			return null;
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0x13161BC", Offset = "0x13161BC", VA = "0x13161BC", Slot = "7")]
		protected virtual void UpdateTypeWriterInput()
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x13161C0", Offset = "0x13161C0", VA = "0x13161C0", Slot = "8")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0x13161C8", Offset = "0x13161C8", VA = "0x13161C8", Slot = "9")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x1315600", Offset = "0x1315600", VA = "0x1315600")]
		protected TAnimPlayerBase()
		{
		}
	}
	[Token(Token = "0x20001C4")]
	public static class FormatUtils
	{
		[Token(Token = "0x6000C48")]
		[Address(RVA = "0x1316740", Offset = "0x1316740", VA = "0x1316740")]
		public static bool TryGetFloat(List<string> attributes, int index, float defValue, out float result)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0x131583C", Offset = "0x131583C", VA = "0x131583C")]
		public static bool ParseFloat(string value, out float result)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001C5")]
	internal static class TAnimExtensions
	{
		[Token(Token = "0x6000C4A")]
		internal static int GetIndexOfEffect<T>(this List<T> effects, string tag) where T : EffectsBase
		{
			return default(int);
		}

		[Token(Token = "0x6000C4B")]
		internal static bool CloseElement<T>(this List<T> effects, int listIndex, int realTextIndex) where T : EffectsBase
		{
			return default(bool);
		}

		[Token(Token = "0x6000C4C")]
		internal static bool CloseRegionNamed<T>(this List<T> effects, string endTag, int realTextIndex) where T : EffectsBase
		{
			return default(bool);
		}

		[Token(Token = "0x6000C4D")]
		internal static bool TryAddingNewRegion<T>(this List<T> effects, T region) where T : EffectsBase
		{
			return default(bool);
		}

		[Token(Token = "0x6000C4E")]
		internal static bool IsAnyRegionOpenWithTag<T>(this List<T> effects, string tag) where T : EffectsBase
		{
			return default(bool);
		}

		[Token(Token = "0x6000C4F")]
		internal static bool CloseSingleOrAllEffects<T>(this List<T> effects, string closureTag, int realTextIndex) where T : EffectsBase
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001C6")]
	public static class TextUtilities
	{
		[Token(Token = "0x4000AA3")]
		internal const int fakeRandomsCount = 25;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static Vector3[] fakeRandoms;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool initialized;

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0x13102D4", Offset = "0x13102D4", VA = "0x13102D4")]
		public static void Initialize()
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x1316920", Offset = "0x1316920", VA = "0x1316920")]
		public static Vector3 RotateAround(this Vector3 vec, Vector2 center, float rot)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0x13169A4", Offset = "0x13169A4", VA = "0x13169A4")]
		public static void MoveChar(this Vector3[] vec, Vector3 dir)
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x1316A0C", Offset = "0x1316A0C", VA = "0x1316A0C")]
		public static void SetChar(this Vector3[] vec, Vector3 pos)
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x1316A60", Offset = "0x1316A60", VA = "0x1316A60")]
		public static void LerpUnclamped(this Vector3[] vec, Vector3 target, float pct)
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x1316ADC", Offset = "0x1316ADC", VA = "0x1316ADC")]
		public static Vector3 GetMiddlePos(this Vector3[] vec)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x1316B30", Offset = "0x1316B30", VA = "0x1316B30")]
		public static void RotateChar(this Vector3[] vec, float angle)
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x1316BEC", Offset = "0x1316BEC", VA = "0x1316BEC")]
		public static void SetColor(this Color32[] col, Color32 target)
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x1316C34", Offset = "0x1316C34", VA = "0x1316C34")]
		public static void LerpUnclamped(this Color32[] col, Color32 target, float pct)
		{
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x1316D40", Offset = "0x1316D40", VA = "0x1316D40")]
		public static float GetDuration(this AnimationCurve curve)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001C7")]
	public static class Tween
	{
		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0x1316DC8", Offset = "0x1316DC8", VA = "0x1316DC8")]
		public static float EaseIn(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x1316DD0", Offset = "0x1316DD0", VA = "0x1316DD0")]
		public static float Flip(float x)
		{
			return default(float);
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x1316DDC", Offset = "0x1316DDC", VA = "0x1316DDC")]
		public static float Square(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x1316DE4", Offset = "0x1316DE4", VA = "0x1316DE4")]
		public static float EaseOut(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x1316DF8", Offset = "0x1316DF8", VA = "0x1316DF8")]
		public static float EaseInOut(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x1316E2C", Offset = "0x1316E2C", VA = "0x1316E2C")]
		public static float BounceOut(float t)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001C8")]
	public abstract class AppearanceBase : EffectsBase
	{
		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected float showDuration;

		[Token(Token = "0x6000C60")]
		public abstract void SetDefaultValues(AppearanceDefaultValues data);

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x1316EE4", Offset = "0x1316EE4", VA = "0x1316EE4", Slot = "8")]
		public virtual bool CanShowAppearanceOn(float timePassed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x1316EF4", Offset = "0x1316EF4", VA = "0x1316EF4")]
		protected AppearanceBase()
		{
		}
	}
	[Token(Token = "0x20001C9")]
	internal class DiagonalExpandAppearance : AppearanceBase
	{
		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int targetA;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int targetB;

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x1316F10", Offset = "0x1316F10", VA = "0x1316F10", Slot = "7")]
		public override void SetDefaultValues(AppearanceDefaultValues data)
		{
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x1316F4C", Offset = "0x1316F4C", VA = "0x1316F4C", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x1317050", Offset = "0x1317050", VA = "0x1317050")]
		public DiagonalExpandAppearance()
		{
		}
	}
	[Token(Token = "0x20001CA")]
	internal class FadeAppearance : AppearanceBase
	{
		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x131706C", Offset = "0x131706C", VA = "0x131706C", Slot = "7")]
		public override void SetDefaultValues(AppearanceDefaultValues data)
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x1317090", Offset = "0x1317090", VA = "0x1317090", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x1317224", Offset = "0x1317224", VA = "0x1317224")]
		public FadeAppearance()
		{
		}
	}
	[Token(Token = "0x20001CB")]
	internal class HorizontalExpandAppearance : AppearanceBase
	{
		[Token(Token = "0x20001CC")]
		public enum ExpType
		{
			[Token(Token = "0x4000AAB")]
			Left,
			[Token(Token = "0x4000AAC")]
			Middle,
			[Token(Token = "0x4000AAD")]
			Right
		}

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ExpType type;

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x1317240", Offset = "0x1317240", VA = "0x1317240", Slot = "7")]
		public override void SetDefaultValues(AppearanceDefaultValues data)
		{
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x1317264", Offset = "0x1317264", VA = "0x1317264", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x13174F8", Offset = "0x13174F8", VA = "0x13174F8")]
		public HorizontalExpandAppearance()
		{
		}
	}
	[Token(Token = "0x20001CD")]
	internal class OffsetAppearance : AppearanceBase
	{
		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float amount;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector2 direction;

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x1317514", Offset = "0x1317514", VA = "0x1317514", Slot = "7")]
		public override void SetDefaultValues(AppearanceDefaultValues data)
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x1317558", Offset = "0x1317558", VA = "0x1317558", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x1317594", Offset = "0x1317594", VA = "0x1317594")]
		public OffsetAppearance()
		{
		}
	}
	[Token(Token = "0x20001CE")]
	internal class RotatingAppearance : AppearanceBase
	{
		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float targetAngle;

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x13175B0", Offset = "0x13175B0", VA = "0x13175B0", Slot = "7")]
		public override void SetDefaultValues(AppearanceDefaultValues data)
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x13175D4", Offset = "0x13175D4", VA = "0x13175D4", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x1317634", Offset = "0x1317634", VA = "0x1317634")]
		public RotatingAppearance()
		{
		}
	}
	[Token(Token = "0x20001CF")]
	internal class SizeAppearance : AppearanceBase
	{
		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float amplitude;

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x1317650", Offset = "0x1317650", VA = "0x1317650", Slot = "7")]
		public override void SetDefaultValues(AppearanceDefaultValues data)
		{
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x1317684", Offset = "0x1317684", VA = "0x1317684", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x13176CC", Offset = "0x13176CC", VA = "0x13176CC")]
		public SizeAppearance()
		{
		}
	}
	[Token(Token = "0x20001D0")]
	internal class VerticalExpandAppearance : AppearanceBase
	{
		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int startA;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int targetA;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int startB;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int targetB;

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x13176E8", Offset = "0x13176E8", VA = "0x13176E8", Slot = "7")]
		public override void SetDefaultValues(AppearanceDefaultValues data)
		{
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x131772C", Offset = "0x131772C", VA = "0x131772C", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0x1317848", Offset = "0x1317848", VA = "0x1317848")]
		public VerticalExpandAppearance()
		{
		}
	}
	[Token(Token = "0x20001D1")]
	internal class PresetAppearance : AppearanceBase
	{
		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool enabled;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Matrix4x4 matrix;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 movementVec;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 scaleVec;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 offset;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 rotationEuler;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Quaternion rotationQua;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool hasTransformEffects;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		private bool setMovement;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private EffectEvaluator movementX;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private EffectEvaluator movementY;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private EffectEvaluator movementZ;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool setScale;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float scaleXDuration;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float scaleYDuration;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private EffectEvaluator scaleX;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private EffectEvaluator scaleY;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool setRotation;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private EffectEvaluator rotX;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private EffectEvaluator rotY;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private EffectEvaluator rotZ;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private bool setColor;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Color32 color;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private ColorCurve colorCurve;

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x1317864", Offset = "0x1317864", VA = "0x1317864", Slot = "7")]
		public override void SetDefaultValues(AppearanceDefaultValues data)
		{
		}

		[Token(Token = "0x6000C79")]
		public static bool SetPreset<T>(bool isAppearance, T values, ref EffectEvaluator movementX, ref EffectEvaluator movementY, ref EffectEvaluator movementZ, ref bool setMovement, ref float showDuration, ref Vector3 scaleVec, ref bool setScale, ref EffectEvaluator scaleX, ref EffectEvaluator scaleY, ref float scaleXDuration, ref float scaleYDuration, ref bool setRotation, ref Quaternion rotationQua, ref EffectEvaluator rotX, ref EffectEvaluator rotY, ref EffectEvaluator rotZ, ref bool hasTransformEffects, ref bool setColor, ref ColorCurve colorCurve) where T : PresetBaseValues
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x13179B4", Offset = "0x13179B4", VA = "0x13179B4", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x1318014", Offset = "0x1318014", VA = "0x1318014")]
		public PresetAppearance()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D3")]
	public class PresetAppearanceValues : PresetBaseValues
	{
		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x1318104", Offset = "0x1318104", VA = "0x1318104")]
		public PresetAppearanceValues()
		{
		}
	}
	[Token(Token = "0x20001D4")]
	public abstract class BehaviorBase : EffectsBase
	{
		[Token(Token = "0x1700015C")]
		protected float animatorTime
		{
			[Token(Token = "0x6000C81")]
			[Address(RVA = "0x131810C", Offset = "0x131810C", VA = "0x131810C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C82")]
			[Address(RVA = "0x1318114", Offset = "0x1318114", VA = "0x1318114")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700015D")]
		protected float animatorDeltaTime
		{
			[Token(Token = "0x6000C83")]
			[Address(RVA = "0x131811C", Offset = "0x131811C", VA = "0x131811C")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C84")]
			[Address(RVA = "0x1318124", Offset = "0x1318124", VA = "0x1318124")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000C7F")]
		public abstract void SetDefaultValues(BehaviorDefaultValues data);

		[Token(Token = "0x6000C80")]
		public abstract void SetModifier(string modifierName, string modifierValue);

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x1314BA0", Offset = "0x1314BA0", VA = "0x1314BA0")]
		public void SetTimeValues(float time, float deltaTime)
		{
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x131812C", Offset = "0x131812C", VA = "0x131812C")]
		protected BehaviorBase()
		{
		}
	}
	[Token(Token = "0x20001D5")]
	public abstract class BehaviorSine : BehaviorBase
	{
		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected float amplitude;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected float frequency;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float waveSize;

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0x131813C", Offset = "0x131813C", VA = "0x131813C", Slot = "8")]
		public override void SetModifier(string modifierName, string modifierValue)
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x131826C", Offset = "0x131826C", VA = "0x131826C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x13184AC", Offset = "0x13184AC", VA = "0x13184AC")]
		protected BehaviorSine()
		{
		}
	}
	[Token(Token = "0x20001D6")]
	internal class BounceBehavior : BehaviorSine
	{
		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x13184D0", Offset = "0x13184D0", VA = "0x13184D0", Slot = "7")]
		public override void SetDefaultValues(BehaviorDefaultValues data)
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x13184FC", Offset = "0x13184FC", VA = "0x13184FC", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x1318648", Offset = "0x1318648", VA = "0x1318648")]
		public BounceBehavior()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	internal class FadeBehavior : BehaviorBase
	{
		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float delay;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float[] charPCTs;

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x131866C", Offset = "0x131866C", VA = "0x131866C", Slot = "7")]
		public override void SetDefaultValues(BehaviorDefaultValues data)
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x1318690", Offset = "0x1318690", VA = "0x1318690", Slot = "5")]
		public override void Initialize(int charactersCount)
		{
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x13186EC", Offset = "0x13186EC", VA = "0x13186EC", Slot = "8")]
		public override void SetModifier(string modifierName, string modifierValue)
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x131877C", Offset = "0x131877C", VA = "0x131877C", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x1318AC0", Offset = "0x1318AC0", VA = "0x1318AC0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x1318B80", Offset = "0x1318B80", VA = "0x1318B80")]
		public FadeBehavior()
		{
		}
	}
	[Token(Token = "0x20001D8")]
	internal class RainbowBehavior : BehaviorBase
	{
		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float hueShiftSpeed;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float hueShiftWaveSize;

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x1318B9C", Offset = "0x1318B9C", VA = "0x1318B9C", Slot = "7")]
		public override void SetDefaultValues(BehaviorDefaultValues data)
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x1318BC0", Offset = "0x1318BC0", VA = "0x1318BC0", Slot = "8")]
		public override void SetModifier(string modifierName, string modifierValue)
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x1318CA0", Offset = "0x1318CA0", VA = "0x1318CA0", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x1319018", Offset = "0x1319018", VA = "0x1319018", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x131911C", Offset = "0x131911C", VA = "0x131911C")]
		public RainbowBehavior()
		{
		}
	}
	[Token(Token = "0x20001D9")]
	internal class RotationBehavior : BehaviorBase
	{
		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float angleSpeed;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float angleDiffBetweenChars;

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x1319138", Offset = "0x1319138", VA = "0x1319138", Slot = "7")]
		public override void SetDefaultValues(BehaviorDefaultValues data)
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0x131915C", Offset = "0x131915C", VA = "0x131915C", Slot = "8")]
		public override void SetModifier(string modifierName, string modifierValue)
		{
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0x131923C", Offset = "0x131923C", VA = "0x131923C", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x131925C", Offset = "0x131925C", VA = "0x131925C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x1319360", Offset = "0x1319360", VA = "0x1319360")]
		public RotationBehavior()
		{
		}
	}
	[Token(Token = "0x20001DA")]
	internal class ShakeBehavior : BehaviorBase
	{
		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float shakeStrength;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float shakeDelay;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float timePassed;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int randIndex;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int lastRandomIndex;

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x131937C", Offset = "0x131937C", VA = "0x131937C", Slot = "7")]
		public override void SetDefaultValues(BehaviorDefaultValues data)
		{
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0x13193C4", Offset = "0x13193C4", VA = "0x13193C4")]
		private void ClampValues()
		{
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x13193EC", Offset = "0x13193EC", VA = "0x13193EC", Slot = "5")]
		public override void Initialize(int charactersCount)
		{
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x1319410", Offset = "0x1319410", VA = "0x1319410", Slot = "8")]
		public override void SetModifier(string modifierName, string modifierValue)
		{
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0x1319514", Offset = "0x1319514", VA = "0x1319514", Slot = "6")]
		public override void Calculate()
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0x1319574", Offset = "0x1319574", VA = "0x1319574", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0x1319710", Offset = "0x1319710", VA = "0x1319710", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x1319814", Offset = "0x1319814", VA = "0x1319814")]
		public ShakeBehavior()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	internal class SizeBehavior : BehaviorSine
	{
		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 middle;

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0x1319824", Offset = "0x1319824", VA = "0x1319824", Slot = "7")]
		public override void SetDefaultValues(BehaviorDefaultValues data)
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x1319858", Offset = "0x1319858", VA = "0x1319858", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0x13198F0", Offset = "0x13198F0", VA = "0x13198F0")]
		public SizeBehavior()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	internal class SlideBehavior : BehaviorSine
	{
		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x1319914", Offset = "0x1319914", VA = "0x1319914", Slot = "7")]
		public override void SetDefaultValues(BehaviorDefaultValues data)
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0x1319940", Offset = "0x1319940", VA = "0x1319940", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x1319AE8", Offset = "0x1319AE8", VA = "0x1319AE8")]
		public SlideBehavior()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	internal class SwingBehavior : BehaviorSine
	{
		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0x1319B0C", Offset = "0x1319B0C", VA = "0x1319B0C", Slot = "7")]
		public override void SetDefaultValues(BehaviorDefaultValues data)
		{
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0x1319B38", Offset = "0x1319B38", VA = "0x1319B38", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x1319B7C", Offset = "0x1319B7C", VA = "0x1319B7C")]
		public SwingBehavior()
		{
		}
	}
	[Token(Token = "0x20001DE")]
	internal class WaveBehavior : BehaviorSine
	{
		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x1319BA0", Offset = "0x1319BA0", VA = "0x1319BA0", Slot = "7")]
		public override void SetDefaultValues(BehaviorDefaultValues data)
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x1319BD0", Offset = "0x1319BD0", VA = "0x1319BD0", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x1319C7C", Offset = "0x1319C7C", VA = "0x1319C7C")]
		public WaveBehavior()
		{
		}
	}
	[Token(Token = "0x20001DF")]
	internal class WiggleBehavior : BehaviorBase
	{
		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float amplitude;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float frequency;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3[] directions;

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x1319CA0", Offset = "0x1319CA0", VA = "0x1319CA0", Slot = "7")]
		public override void SetDefaultValues(BehaviorDefaultValues data)
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x1319CC4", Offset = "0x1319CC4", VA = "0x1319CC4", Slot = "5")]
		public override void Initialize(int charactersCount)
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x1319E24", Offset = "0x1319E24", VA = "0x1319E24", Slot = "8")]
		public override void SetModifier(string modifierName, string modifierValue)
		{
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x1319F04", Offset = "0x1319F04", VA = "0x1319F04", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x1319F98", Offset = "0x1319F98", VA = "0x1319F98", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x131A09C", Offset = "0x131A09C", VA = "0x131A09C")]
		public WiggleBehavior()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	internal class PresetBehavior : BehaviorBase
	{
		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool enabled;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float timeSpeed;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float weightMult;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Matrix4x4 matrix;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 movementVec;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 scaleVec;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 offset;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 rotationEuler;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion rotationQua;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float uniformEffectTime;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool hasTransformEffects;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
		private bool isOnOneCharacter;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float weight;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private EmissionControl emissionControl;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private bool setMovement;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private EffectEvaluator movementX;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private EffectEvaluator movementY;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private EffectEvaluator movementZ;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private bool setScale;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private EffectEvaluator scaleX;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private EffectEvaluator scaleY;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private bool setRotation;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private EffectEvaluator rotX;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private EffectEvaluator rotY;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private EffectEvaluator rotZ;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private bool setColor;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private Color32 color;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private ColorCurve colorCurve;

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x131A0B8", Offset = "0x131A0B8", VA = "0x131A0B8", Slot = "7")]
		public override void SetDefaultValues(BehaviorDefaultValues data)
		{
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x131A228", Offset = "0x131A228", VA = "0x131A228", Slot = "8")]
		public override void SetModifier(string modifierName, string modifierValue)
		{
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x131A308", Offset = "0x131A308", VA = "0x131A308", Slot = "6")]
		public override void Calculate()
		{
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x131A33C", Offset = "0x131A33C", VA = "0x131A33C", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x131AA58", Offset = "0x131AA58", VA = "0x131AA58")]
		public PresetBehavior()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001E2")]
	public class PresetBehaviorValues : PresetBaseValues
	{
		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		public EmissionControl emission;

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x120F3A0", Offset = "0x120F3A0", VA = "0x120F3A0", Slot = "4")]
		public override void Initialize(bool isAppearance)
		{
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0x120F88C", Offset = "0x120F88C", VA = "0x120F88C")]
		public PresetBehaviorValues()
		{
		}
	}
	[Token(Token = "0x20001E3")]
	public static class CustomEffects
	{
		[Token(Token = "0x20001E4")]
		public struct TagInfo
		{
			[Token(Token = "0x4000B08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly string key;

			[Token(Token = "0x4000B09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly Type type;

			[Token(Token = "0x6000CC2")]
			[Address(RVA = "0x120F91C", Offset = "0x120F91C", VA = "0x120F91C")]
			public TagInfo(string key, Type type)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001E5")]
		public class CustomBehaviorDefValues
		{
			[Token(Token = "0x6000CC3")]
			[Address(RVA = "0x120F950", Offset = "0x120F950", VA = "0x120F950")]
			public CustomBehaviorDefValues()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001E6")]
		public class CustomAppearanceDefValues
		{
			[Token(Token = "0x6000CC4")]
			[Address(RVA = "0x120F958", Offset = "0x120F958", VA = "0x120F958")]
			public CustomAppearanceDefValues()
			{
			}
		}

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly TagInfo[] customBehaviors;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly TagInfo[] customAppearances;
	}
	[Serializable]
	[Token(Token = "0x20001E7")]
	public class ColorCurve
	{
		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public bool enabled;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Gradient gradient;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[MinValue(0.1f)]
		protected float duration;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[Range(0f, 100f)]
		protected float charsTimeOffset;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool isAppearance;

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x120F960", Offset = "0x120F960", VA = "0x120F960")]
		public float GetDuration()
		{
			return default(float);
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x120F968", Offset = "0x120F968", VA = "0x120F968")]
		public void Initialize(bool isAppearance)
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x120F994", Offset = "0x120F994", VA = "0x120F994")]
		public Color32 GetColor(float time, int characterIndex)
		{
			return default(Color32);
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x120FF30", Offset = "0x120FF30", VA = "0x120FF30")]
		public ColorCurve()
		{
		}
	}
	[Token(Token = "0x20001E8")]
	internal interface EffectEvaluator
	{
		[Token(Token = "0x1700015E")]
		bool isEnabled
		{
			[Token(Token = "0x6000CCA")]
			get;
		}

		[Token(Token = "0x6000CC9")]
		void Initialize(int type);

		[Token(Token = "0x6000CCB")]
		float Evaluate(float time, int characterIndex);

		[Token(Token = "0x6000CCC")]
		float GetDuration();
	}
	[Serializable]
	[Token(Token = "0x20001E9")]
	public struct EmissionControl
	{
		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[MinValue(0f)]
		[SerializeField]
		private int cycles;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		[SerializeField]
		private AnimationCurve attackCurve;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		[MinValue(0f)]
		private float overrideDuration;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		private bool continueForever;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AnimationCurve decayCurve;

		[NonSerialized]
		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float maxDuration;

		[NonSerialized]
		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AnimationCurve intensityOverDuration;

		[NonSerialized]
		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float passedTime;

		[NonSerialized]
		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float cycleDuration;

		[NonSerialized]
		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float effectWeigth;

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x120F5E4", Offset = "0x120F5E4", VA = "0x120F5E4")]
		public void Initialize(float effectsMaxDuration)
		{
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x120FF38", Offset = "0x120FF38", VA = "0x120FF38")]
		public float IncreaseEffectTime(float deltaTime)
		{
			return default(float);
		}
	}
	[Serializable]
	[Token(Token = "0x20001EA")]
	public class FloatCurve : EffectEvaluator
	{
		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool enabled;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[SerializeField]
		protected float amplitude;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected AnimationCurve curve;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[SerializeField]
		protected float defaultReturn;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[Range(0f, 100f)]
		protected float charsTimeOffset;

		[NonSerialized]
		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float calculatedDuration;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool isAppearance;

		[Token(Token = "0x1700015F")]
		public bool isEnabled
		{
			[Token(Token = "0x6000CCF")]
			[Address(RVA = "0x120FFCC", Offset = "0x120FFCC", VA = "0x120FFCC", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x120FFD4", Offset = "0x120FFD4", VA = "0x120FFD4", Slot = "7")]
		public float GetDuration()
		{
			return default(float);
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x120FFDC", Offset = "0x120FFDC", VA = "0x120FFDC", Slot = "4")]
		public void Initialize(int type)
		{
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x1210034", Offset = "0x1210034", VA = "0x1210034", Slot = "6")]
		public float Evaluate(float time, int characterIndex)
		{
			return default(float);
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x1210104", Offset = "0x1210104", VA = "0x1210104")]
		public FloatCurve()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001EB")]
	public class PresetBaseValues
	{
		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string effectTag;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public FloatCurve movementX;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public FloatCurve movementY;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public FloatCurve movementZ;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public FloatCurve scaleX;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public FloatCurve scaleY;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public FloatCurve rotX;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		public FloatCurve rotY;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		public FloatCurve rotZ;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		public ColorCurve color;

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x120F4BC", Offset = "0x120F4BC", VA = "0x120F4BC")]
		public float GetMaxDuration()
		{
			return default(float);
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x120F3D0", Offset = "0x120F3D0", VA = "0x120F3D0", Slot = "4")]
		public virtual void Initialize(bool isAppearance)
		{
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0x120F894", Offset = "0x120F894", VA = "0x120F894")]
		public PresetBaseValues()
		{
		}
	}
}
namespace Febucci.UI.Core.Examples
{
	[Token(Token = "0x20001EC")]
	public class AppearanceTemplate : AppearanceBase
	{
		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 vert;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float pct;

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x121021C", Offset = "0x121021C", VA = "0x121021C", Slot = "7")]
		public override void SetDefaultValues(AppearanceDefaultValues data)
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x1210220", Offset = "0x1210220", VA = "0x1210220", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x1210224", Offset = "0x1210224", VA = "0x1210224")]
		public AppearanceTemplate()
		{
		}
	}
	[Token(Token = "0x20001ED")]
	public class BehaviorTemplate : BehaviorBase
	{
		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x121022C", Offset = "0x121022C", VA = "0x121022C", Slot = "7")]
		public override void SetDefaultValues(BehaviorDefaultValues data)
		{
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x1210230", Offset = "0x1210230", VA = "0x1210230", Slot = "8")]
		public override void SetModifier(string modifierName, string modifierValue)
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x1210234", Offset = "0x1210234", VA = "0x1210234", Slot = "4")]
		public override void ApplyEffect(ref CharacterData data, int charIndex)
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x1210238", Offset = "0x1210238", VA = "0x1210238")]
		public BehaviorTemplate()
		{
		}
	}
}
namespace FluffyUnderware.DevTools
{
	[Token(Token = "0x20001EE")]
	public interface IDTGroupParsingAttribute
	{
		[Token(Token = "0x17000160")]
		string Path
		{
			[Token(Token = "0x6000CDF")]
			get;
		}
	}
	[Token(Token = "0x20001EF")]
	public interface IDTFieldParsingAttribute
	{
	}
	[Token(Token = "0x20001F0")]
	public interface IDTGroupRenderAttribute
	{
	}
	[Token(Token = "0x20001F1")]
	public interface IDTFieldRenderAttribute
	{
	}
	[Token(Token = "0x20001F2")]
	[AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]
	public class DTVersionAttribute : Attribute
	{
		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Version;

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x1210240", Offset = "0x1210240", VA = "0x1210240")]
		public DTVersionAttribute(string version)
		{
		}
	}
	[Token(Token = "0x20001F3")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = true)]
	public class DTAttribute : Attribute, IComparable
	{
		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int Sort;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowBelowProperty;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int Space;

		[Token(Token = "0x17000161")]
		public int TypeSort
		{
			[Token(Token = "0x6000CE1")]
			[Address(RVA = "0x1210268", Offset = "0x1210268", VA = "0x1210268")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CE2")]
			[Address(RVA = "0x1210270", Offset = "0x1210270", VA = "0x1210270")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x1210278", Offset = "0x1210278", VA = "0x1210278", Slot = "8")]
		public virtual int CompareTo(object obj)
		{
			return default(int);
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x1210344", Offset = "0x1210344", VA = "0x1210344")]
		public DTAttribute(int sortOrder, bool showBelow = false)
		{
		}
	}
	[Token(Token = "0x20001F4")]
	public class GroupAttribute : DTAttribute, IDTGroupParsingAttribute, IDTGroupRenderAttribute
	{
		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool Expanded;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool Invisible;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Label;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Tooltip;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string HelpURL;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string mPath;

		[Token(Token = "0x17000162")]
		public string Path
		{
			[Token(Token = "0x6000CE5")]
			[Address(RVA = "0x121037C", Offset = "0x121037C", VA = "0x121037C", Slot = "9")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000CE6")]
			[Address(RVA = "0x1210384", Offset = "0x1210384", VA = "0x1210384")]
			protected set
			{
			}
		}

		[Token(Token = "0x17000163")]
		public bool PathIsAbsolute
		{
			[Token(Token = "0x6000CE7")]
			[Address(RVA = "0x121043C", Offset = "0x121043C", VA = "0x121043C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000CE8")]
			[Address(RVA = "0x1210444", Offset = "0x1210444", VA = "0x1210444")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x1210450", Offset = "0x1210450", VA = "0x1210450")]
		public GroupAttribute(string pathAndName)
		{
		}
	}
	[Token(Token = "0x20001F5")]
	public class ActionAttribute : DTAttribute
	{
		[Token(Token = "0x20001F6")]
		public enum ActionEnum
		{
			[Token(Token = "0x4000B3D")]
			Show,
			[Token(Token = "0x4000B3E")]
			Hide,
			[Token(Token = "0x4000B3F")]
			Enable,
			[Token(Token = "0x4000B40")]
			Disable,
			[Token(Token = "0x4000B41")]
			ShowInfo,
			[Token(Token = "0x4000B42")]
			ShowWarning,
			[Token(Token = "0x4000B43")]
			ShowError,
			[Token(Token = "0x4000B44")]
			Callback
		}

		[Token(Token = "0x20001F7")]
		public enum ActionPositionEnum
		{
			[Token(Token = "0x4000B46")]
			Above,
			[Token(Token = "0x4000B47")]
			Below
		}

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ActionEnum Action;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ActionPositionEnum Position;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public object ActionData;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MethodInfo mCallback;

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x1210498", Offset = "0x1210498", VA = "0x1210498")]
		protected ActionAttribute(string actionData, ActionEnum action = ActionEnum.Callback)
		{
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0x12104E8", Offset = "0x12104E8", VA = "0x12104E8")]
		public void Callback(object classInstance)
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public class ConditionalAttribute : ActionAttribute
	{
		[Token(Token = "0x20001F9")]
		public enum OperatorEnum
		{
			[Token(Token = "0x4000B4A")]
			AND,
			[Token(Token = "0x4000B4B")]
			OR
		}

		[Token(Token = "0x20001FA")]
		public class Condition
		{
			[Token(Token = "0x4000B4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string FieldName;

			[Token(Token = "0x4000B4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public FieldInfo FieldInfo;

			[Token(Token = "0x4000B4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PropertyInfo PropertyInfo;

			[Token(Token = "0x4000B4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public object CompareTo;

			[Token(Token = "0x4000B50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool CompareFalse;

			[Token(Token = "0x4000B51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public OperatorEnum Operator;

			[Token(Token = "0x4000B52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public MethodInfo MethodInfo;

			[Token(Token = "0x4000B53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public string MethodName;

			[Token(Token = "0x6000CF2")]
			[Address(RVA = "0x1210810", Offset = "0x1210810", VA = "0x1210810")]
			public Condition()
			{
			}
		}

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Condition[] Conditions;

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x12106F4", Offset = "0x12106F4", VA = "0x12106F4")]
		protected ConditionalAttribute(string fieldOrProperty, object compareTo, bool compareFalse = false)
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x1210818", Offset = "0x1210818", VA = "0x1210818")]
		protected ConditionalAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2)
		{
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x12109A4", Offset = "0x12109A4", VA = "0x12109A4")]
		protected ConditionalAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2, string fieldOrProperty3, object compareTo3, bool compareFalse3)
		{
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x1210B88", Offset = "0x1210B88", VA = "0x1210B88")]
		protected ConditionalAttribute(string methodToQuery)
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x1210C8C", Offset = "0x1210C8C", VA = "0x1210C8C", Slot = "9")]
		public virtual bool ConditionMet(object classInstance)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x1210D44", Offset = "0x1210D44", VA = "0x1210D44")]
		private bool evaluate(Condition cond, object classInstance)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001FB")]
	public class SortOrderAttribute : DTAttribute, IDTFieldParsingAttribute
	{
		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x12110C0", Offset = "0x12110C0", VA = "0x12110C0")]
		public SortOrderAttribute(int sort = 100)
		{
		}
	}
	[Token(Token = "0x20001FC")]
	public class AsGroupAttribute : GroupAttribute, IDTFieldParsingAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x12110F4", Offset = "0x12110F4", VA = "0x12110F4")]
		public AsGroupAttribute([Optional] string pathAndName)
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public class TabAttribute : GroupAttribute
	{
		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly string TabName;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly string TabBarName;

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0x1211148", Offset = "0x1211148", VA = "0x1211148")]
		public TabAttribute(string pathAndName)
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x12111F4", Offset = "0x12111F4", VA = "0x12111F4")]
		private static bool split(string pathAndName, out string path, out string tabBar, out string tabname)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001FE")]
	public class SectionAttribute : GroupAttribute
	{
		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool Fixed;

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x1211328", Offset = "0x1211328", VA = "0x1211328")]
		public SectionAttribute(string name, bool expanded = true, bool fix = false, int sort = 100)
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class NoSectionAttribute : SectionAttribute
	{
		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x1211398", Offset = "0x1211398", VA = "0x1211398")]
		public NoSectionAttribute()
		{
		}
	}
	[Token(Token = "0x2000200")]
	public class Hide : DTAttribute, IDTFieldParsingAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x1211424", Offset = "0x1211424", VA = "0x1211424")]
		public Hide()
		{
		}
	}
	[Token(Token = "0x2000201")]
	public class Inline : DTAttribute, IDTFieldParsingAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x1211450", Offset = "0x1211450", VA = "0x1211450")]
		public Inline()
		{
		}
	}
	[Token(Token = "0x2000202")]
	public class ArrayExAttribute : DTAttribute, IDTFieldParsingAttribute
	{
		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool Draggable;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool ShowHeader;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool ShowAdd;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public bool ShowDelete;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool DropTarget;

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x121147C", Offset = "0x121147C", VA = "0x121147C")]
		public ArrayExAttribute()
		{
		}
	}
	[Token(Token = "0x2000203")]
	public class FieldActionAttribute : ActionAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x12114B4", Offset = "0x12114B4", VA = "0x12114B4")]
		public FieldActionAttribute(string actionData, ActionEnum action = ActionEnum.Callback)
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class GroupActionAttribute : ActionAttribute, IDTGroupRenderAttribute
	{
		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x1211504", Offset = "0x1211504", VA = "0x1211504")]
		public GroupActionAttribute(string actionData, ActionEnum action = ActionEnum.Callback)
		{
		}
	}
	[Token(Token = "0x2000205")]
	public class FieldConditionAttribute : ConditionalAttribute, IDTFieldRenderAttribute
	{
		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x1211554", Offset = "0x1211554", VA = "0x1211554")]
		public FieldConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse = false, ActionEnum action = ActionEnum.Show, [Optional] object actionData, ActionPositionEnum position = ActionPositionEnum.Below)
		{
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x1211590", Offset = "0x1211590", VA = "0x1211590")]
		public FieldConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2)
		{
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0x121159C", Offset = "0x121159C", VA = "0x121159C")]
		public FieldConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2, string fieldOrProperty3, object compareTo3, bool compareFalse3)
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x12115BC", Offset = "0x12115BC", VA = "0x12115BC")]
		public FieldConditionAttribute(string methodToQuery)
		{
		}
	}
	[Token(Token = "0x2000206")]
	public class GroupConditionAttribute : ConditionalAttribute, IDTGroupRenderAttribute
	{
		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x12115C0", Offset = "0x12115C0", VA = "0x12115C0")]
		public GroupConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse = false)
		{
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x12115C8", Offset = "0x12115C8", VA = "0x12115C8")]
		public GroupConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2)
		{
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x12115D4", Offset = "0x12115D4", VA = "0x12115D4")]
		public GroupConditionAttribute(string fieldOrProperty, object compareTo, bool compareFalse, OperatorEnum op, string fieldOrProperty2, object compareTo2, bool compareFalse2, string fieldOrProperty3, object compareTo3, bool compareFalse3)
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x12115F4", Offset = "0x12115F4", VA = "0x12115F4")]
		public GroupConditionAttribute(string methodToQuery)
		{
		}
	}
	[Token(Token = "0x2000207")]
	public class Couple<T1, T2>
	{
		[Token(Token = "0x17000164")]
		public T1 First
		{
			[Token(Token = "0x6000D06")]
			[CompilerGenerated]
			get
			{
				return (T1)null;
			}
			[Token(Token = "0x6000D07")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000165")]
		public T2 Second
		{
			[Token(Token = "0x6000D08")]
			[CompilerGenerated]
			get
			{
				return (T2)null;
			}
			[Token(Token = "0x6000D09")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000D0A")]
		public Couple(T1 first, T2 second)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000208")]
	public struct FloatRegion : IEquatable<FloatRegion>
	{
		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float From;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float To;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool SimpleValue;

		[Token(Token = "0x17000166")]
		public static FloatRegion ZeroOne
		{
			[Token(Token = "0x6000D0D")]
			[Address(RVA = "0x1211614", Offset = "0x1211614", VA = "0x1211614")]
			get
			{
				return default(FloatRegion);
			}
		}

		[Token(Token = "0x17000167")]
		public bool Positive
		{
			[Token(Token = "0x6000D10")]
			[Address(RVA = "0x12116D0", Offset = "0x12116D0", VA = "0x12116D0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000168")]
		public float Low
		{
			[Token(Token = "0x6000D11")]
			[Address(RVA = "0x1211688", Offset = "0x1211688", VA = "0x1211688")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D12")]
			[Address(RVA = "0x1211698", Offset = "0x1211698", VA = "0x1211698")]
			set
			{
			}
		}

		[Token(Token = "0x17000169")]
		public float High
		{
			[Token(Token = "0x6000D13")]
			[Address(RVA = "0x12116AC", Offset = "0x12116AC", VA = "0x12116AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D14")]
			[Address(RVA = "0x12116BC", Offset = "0x12116BC", VA = "0x12116BC")]
			set
			{
			}
		}

		[Token(Token = "0x1700016A")]
		public float Random
		{
			[Token(Token = "0x6000D15")]
			[Address(RVA = "0x12116E0", Offset = "0x12116E0", VA = "0x12116E0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700016B")]
		public float Next
		{
			[Token(Token = "0x6000D16")]
			[Address(RVA = "0x12116EC", Offset = "0x12116EC", VA = "0x12116EC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700016C")]
		public float Length
		{
			[Token(Token = "0x6000D17")]
			[Address(RVA = "0x1211708", Offset = "0x1211708", VA = "0x1211708")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700016D")]
		public float LengthPositive
		{
			[Token(Token = "0x6000D18")]
			[Address(RVA = "0x1211714", Offset = "0x1211714", VA = "0x1211714")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x12115F8", Offset = "0x12115F8", VA = "0x12115F8")]
		public FloatRegion(float value)
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x1211608", Offset = "0x1211608", VA = "0x1211608")]
		public FloatRegion(float A, float B)
		{
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x1211620", Offset = "0x1211620", VA = "0x1211620")]
		public void MakePositive()
		{
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x1211634", Offset = "0x1211634", VA = "0x1211634")]
		public void Clamp(float low, float high)
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x121172C", Offset = "0x121172C", VA = "0x121172C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x12117CC", Offset = "0x12117CC", VA = "0x12117CC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x1211800", Offset = "0x1211800", VA = "0x1211800", Slot = "4")]
		public bool Equals(FloatRegion other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x121184C", Offset = "0x121184C", VA = "0x121184C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x12118E8", Offset = "0x12118E8", VA = "0x12118E8")]
		public static FloatRegion operator +(FloatRegion a, FloatRegion b)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x121191C", Offset = "0x121191C", VA = "0x121191C")]
		public static FloatRegion operator -(FloatRegion a, FloatRegion b)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0x1211950", Offset = "0x1211950", VA = "0x1211950")]
		public static FloatRegion operator -(FloatRegion a)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x1211968", Offset = "0x1211968", VA = "0x1211968")]
		public static FloatRegion operator *(FloatRegion a, float v)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x1211990", Offset = "0x1211990", VA = "0x1211990")]
		public static FloatRegion operator *(float v, FloatRegion a)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x12119B8", Offset = "0x12119B8", VA = "0x12119B8")]
		public static FloatRegion operator /(FloatRegion a, float v)
		{
			return default(FloatRegion);
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x12119E0", Offset = "0x12119E0", VA = "0x12119E0")]
		public static bool operator ==(FloatRegion lhs, FloatRegion rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0x1211AC0", Offset = "0x1211AC0", VA = "0x1211AC0")]
		public static bool operator !=(FloatRegion lhs, FloatRegion rhs)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x2000209")]
	public struct IntRegion : IEquatable<IntRegion>
	{
		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int From;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int To;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool SimpleValue;

		[Token(Token = "0x1700016E")]
		public static IntRegion ZeroOne
		{
			[Token(Token = "0x6000D27")]
			[Address(RVA = "0x1211BBC", Offset = "0x1211BBC", VA = "0x1211BBC")]
			get
			{
				return default(IntRegion);
			}
		}

		[Token(Token = "0x1700016F")]
		public bool Positive
		{
			[Token(Token = "0x6000D2A")]
			[Address(RVA = "0x1211C78", Offset = "0x1211C78", VA = "0x1211C78")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000170")]
		public int Low
		{
			[Token(Token = "0x6000D2B")]
			[Address(RVA = "0x1211C30", Offset = "0x1211C30", VA = "0x1211C30")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D2C")]
			[Address(RVA = "0x1211C40", Offset = "0x1211C40", VA = "0x1211C40")]
			set
			{
			}
		}

		[Token(Token = "0x17000171")]
		public int High
		{
			[Token(Token = "0x6000D2D")]
			[Address(RVA = "0x1211C54", Offset = "0x1211C54", VA = "0x1211C54")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D2E")]
			[Address(RVA = "0x1211C64", Offset = "0x1211C64", VA = "0x1211C64")]
			set
			{
			}
		}

		[Token(Token = "0x17000172")]
		public int Random
		{
			[Token(Token = "0x6000D2F")]
			[Address(RVA = "0x1211C88", Offset = "0x1211C88", VA = "0x1211C88")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000173")]
		public int Length
		{
			[Token(Token = "0x6000D30")]
			[Address(RVA = "0x1211C98", Offset = "0x1211C98", VA = "0x1211C98")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000174")]
		public int LengthPositive
		{
			[Token(Token = "0x6000D31")]
			[Address(RVA = "0x1211CA4", Offset = "0x1211CA4", VA = "0x1211CA4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x1211BA0", Offset = "0x1211BA0", VA = "0x1211BA0")]
		public IntRegion(int value)
		{
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0x1211BB0", Offset = "0x1211BB0", VA = "0x1211BB0")]
		public IntRegion(int A, int B)
		{
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0x1211BC8", Offset = "0x1211BC8", VA = "0x1211BC8")]
		public void MakePositive()
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x1211BDC", Offset = "0x1211BDC", VA = "0x1211BDC")]
		public void Clamp(int low, int high)
		{
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x1211CB8", Offset = "0x1211CB8", VA = "0x1211CB8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x1211D58", Offset = "0x1211D58", VA = "0x1211D58", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x1211D8C", Offset = "0x1211D8C", VA = "0x1211D8C", Slot = "4")]
		public bool Equals(IntRegion other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0x1211DD0", Offset = "0x1211DD0", VA = "0x1211DD0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x1211E60", Offset = "0x1211E60", VA = "0x1211E60")]
		public static IntRegion operator +(IntRegion a, IntRegion b)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x1211E7C", Offset = "0x1211E7C", VA = "0x1211E7C")]
		public static IntRegion operator -(IntRegion a, IntRegion b)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x1211E98", Offset = "0x1211E98", VA = "0x1211E98")]
		public static IntRegion operator -(IntRegion a)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x1211EAC", Offset = "0x1211EAC", VA = "0x1211EAC")]
		public static IntRegion operator *(IntRegion a, int v)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0x1211EC4", Offset = "0x1211EC4", VA = "0x1211EC4")]
		public static IntRegion operator *(int v, IntRegion a)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x1211EE0", Offset = "0x1211EE0", VA = "0x1211EE0")]
		public static IntRegion operator /(IntRegion a, int v)
		{
			return default(IntRegion);
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x1211EF8", Offset = "0x1211EF8", VA = "0x1211EF8")]
		public static bool operator ==(IntRegion lhs, IntRegion rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x1211F24", Offset = "0x1211F24", VA = "0x1211F24")]
		public static bool operator !=(IntRegion lhs, IntRegion rhs)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200020A")]
	public class WeightedRandom<T>
	{
		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> mData;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int mCurrentPosition;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T mCurrentItem;

		[Token(Token = "0x17000175")]
		public int Seed
		{
			[Token(Token = "0x6000D3E")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D3F")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000176")]
		public bool RandomizeSeed
		{
			[Token(Token = "0x6000D40")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D41")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000177")]
		private int Capacity
		{
			[Token(Token = "0x6000D42")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000178")]
		public int Size
		{
			[Token(Token = "0x6000D43")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D44")]
		public WeightedRandom(int initCapacity = 0)
		{
		}

		[Token(Token = "0x6000D45")]
		public void Add(T item, int amount)
		{
		}

		[Token(Token = "0x6000D46")]
		public T Next()
		{
			return (T)null;
		}

		[Token(Token = "0x6000D47")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000D48")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x200020B")]
	public class Ring<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> mList;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int mIndex;

		[Token(Token = "0x17000179")]
		public int Size
		{
			[Token(Token = "0x6000D49")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D4A")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700017A")]
		public T this[int index]
		{
			[Token(Token = "0x6000D51")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6000D52")]
			set
			{
			}
		}

		[Token(Token = "0x1700017B")]
		public int Count
		{
			[Token(Token = "0x6000D56")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700017C")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000D57")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D4B")]
		public Ring(int size)
		{
		}

		[Token(Token = "0x6000D4C")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x6000D4D")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000D4E")]
		public int IndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000D4F")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x6000D50")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000D53")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000D54")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D55")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000D58")]
		public bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D59")]
		private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x200020C")]
	public class Pool<T> : IPool
	{
		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private List<T> mObjects;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private double mLastTime;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private double mDeltaTime;

		[Token(Token = "0x1700017D")]
		public string Identifier
		{
			[Token(Token = "0x6000D5A")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D5B")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700017E")]
		public PoolSettings Settings
		{
			[Token(Token = "0x6000D5C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D5D")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x1700017F")]
		public Type Type
		{
			[Token(Token = "0x6000D5E")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000180")]
		public int Count
		{
			[Token(Token = "0x6000D63")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000D5F")]
		public Pool([Optional] PoolSettings settings)
		{
		}

		[Token(Token = "0x6000D60")]
		public void Update()
		{
		}

		[Token(Token = "0x6000D61")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000D62")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000D64")]
		public virtual T Pop([Optional] Transform parent)
		{
			return (T)null;
		}

		[Token(Token = "0x6000D65")]
		public virtual void Push(T item)
		{
		}

		[Token(Token = "0x6000D66")]
		protected virtual void sendBeforePush(T item)
		{
		}

		[Token(Token = "0x6000D67")]
		protected virtual void sendAfterPop(T item)
		{
		}

		[Token(Token = "0x6000D68")]
		protected virtual void setParent(T item, Transform parent)
		{
		}

		[Token(Token = "0x6000D69")]
		protected virtual T create()
		{
			return (T)null;
		}

		[Token(Token = "0x6000D6A")]
		protected virtual void destroy(T item)
		{
		}

		[Token(Token = "0x6000D6B")]
		private void log(string msg)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200020D")]
	public class PoolSettings
	{
		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private bool m_Prewarm;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		[SerializeField]
		private bool m_AutoCreate;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		[SerializeField]
		private bool m_AutoEnableDisable;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Positive]
		[SerializeField]
		private int m_MinItems;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Positive]
		[SerializeField]
		private int m_Threshold;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Positive]
		[SerializeField]
		private float m_Speed;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool Debug;

		[Token(Token = "0x17000181")]
		public bool Prewarm
		{
			[Token(Token = "0x6000D6E")]
			[Address(RVA = "0x12120A4", Offset = "0x12120A4", VA = "0x12120A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D6F")]
			[Address(RVA = "0x1212024", Offset = "0x1212024", VA = "0x1212024")]
			set
			{
			}
		}

		[Token(Token = "0x17000182")]
		public bool AutoCreate
		{
			[Token(Token = "0x6000D70")]
			[Address(RVA = "0x12120AC", Offset = "0x12120AC", VA = "0x12120AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D71")]
			[Address(RVA = "0x121203C", Offset = "0x121203C", VA = "0x121203C")]
			set
			{
			}
		}

		[Token(Token = "0x17000183")]
		public bool AutoEnableDisable
		{
			[Token(Token = "0x6000D72")]
			[Address(RVA = "0x12120B4", Offset = "0x12120B4", VA = "0x12120B4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D73")]
			[Address(RVA = "0x12120BC", Offset = "0x12120BC", VA = "0x12120BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000184")]
		public int MinItems
		{
			[Token(Token = "0x6000D74")]
			[Address(RVA = "0x12120D4", Offset = "0x12120D4", VA = "0x12120D4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0x1212054", Offset = "0x1212054", VA = "0x1212054")]
			set
			{
			}
		}

		[Token(Token = "0x17000185")]
		public int Threshold
		{
			[Token(Token = "0x6000D76")]
			[Address(RVA = "0x12120DC", Offset = "0x12120DC", VA = "0x12120DC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000D77")]
			[Address(RVA = "0x121206C", Offset = "0x121206C", VA = "0x121206C")]
			set
			{
			}
		}

		[Token(Token = "0x17000186")]
		public float Speed
		{
			[Token(Token = "0x6000D78")]
			[Address(RVA = "0x12120E4", Offset = "0x12120E4", VA = "0x12120E4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D79")]
			[Address(RVA = "0x1212088", Offset = "0x1212088", VA = "0x1212088")]
			set
			{
			}
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0x1211F50", Offset = "0x1211F50", VA = "0x1211F50")]
		public PoolSettings()
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x1211F68", Offset = "0x1211F68", VA = "0x1211F68")]
		public PoolSettings(PoolSettings src)
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0x12120EC", Offset = "0x12120EC", VA = "0x12120EC")]
		public void OnValidate()
		{
		}
	}
	[Token(Token = "0x200020E")]
	public interface IPool
	{
		[Token(Token = "0x17000187")]
		string Identifier
		{
			[Token(Token = "0x6000D7B")]
			get;
			[Token(Token = "0x6000D7C")]
			set;
		}

		[Token(Token = "0x17000188")]
		PoolSettings Settings
		{
			[Token(Token = "0x6000D7D")]
			get;
		}

		[Token(Token = "0x17000189")]
		int Count
		{
			[Token(Token = "0x6000D81")]
			get;
		}

		[Token(Token = "0x6000D7E")]
		void Clear();

		[Token(Token = "0x6000D7F")]
		void Reset();

		[Token(Token = "0x6000D80")]
		void Update();
	}
	[Token(Token = "0x200020F")]
	public interface IPoolable
	{
		[Token(Token = "0x6000D82")]
		void OnBeforePush();

		[Token(Token = "0x6000D83")]
		void OnAfterPop();
	}
	[Token(Token = "0x2000210")]
	public static class DTTween
	{
		[Token(Token = "0x2000211")]
		public enum EasingMethod
		{
			[Token(Token = "0x4000B79")]
			Linear,
			[Token(Token = "0x4000B7A")]
			ExponentialIn,
			[Token(Token = "0x4000B7B")]
			ExponentialOut,
			[Token(Token = "0x4000B7C")]
			ExponentialInOut,
			[Token(Token = "0x4000B7D")]
			ExponentialOutIn,
			[Token(Token = "0x4000B7E")]
			CircularIn,
			[Token(Token = "0x4000B7F")]
			CircularOut,
			[Token(Token = "0x4000B80")]
			CircularInOut,
			[Token(Token = "0x4000B81")]
			CircularOutIn,
			[Token(Token = "0x4000B82")]
			QuadraticIn,
			[Token(Token = "0x4000B83")]
			QuadraticOut,
			[Token(Token = "0x4000B84")]
			QuadraticInOut,
			[Token(Token = "0x4000B85")]
			QuadraticOutIn,
			[Token(Token = "0x4000B86")]
			SinusIn,
			[Token(Token = "0x4000B87")]
			SinusOut,
			[Token(Token = "0x4000B88")]
			SinusInOut,
			[Token(Token = "0x4000B89")]
			SinusOutIn,
			[Token(Token = "0x4000B8A")]
			CubicIn,
			[Token(Token = "0x4000B8B")]
			CubicOut,
			[Token(Token = "0x4000B8C")]
			CubicInOut,
			[Token(Token = "0x4000B8D")]
			CubicOutIn,
			[Token(Token = "0x4000B8E")]
			QuarticIn,
			[Token(Token = "0x4000B8F")]
			QuarticOut,
			[Token(Token = "0x4000B90")]
			QuarticInOut,
			[Token(Token = "0x4000B91")]
			QuarticOutIn,
			[Token(Token = "0x4000B92")]
			QuinticIn,
			[Token(Token = "0x4000B93")]
			QuinticOut,
			[Token(Token = "0x4000B94")]
			QuinticInOut,
			[Token(Token = "0x4000B95")]
			QuinticOutIn
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0x1212128", Offset = "0x1212128", VA = "0x1212128")]
		public static float Ease(EasingMethod method, float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0x1212FC0", Offset = "0x1212FC0", VA = "0x1212FC0")]
		public static float Ease(EasingMethod method, float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x1212FA0", Offset = "0x1212FA0", VA = "0x1212FA0")]
		public static float Linear(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x1213CD0", Offset = "0x1213CD0", VA = "0x1213CD0")]
		public static float Linear(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x121257C", Offset = "0x121257C", VA = "0x121257C")]
		public static float ExpoOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x12134E0", Offset = "0x12134E0", VA = "0x12134E0")]
		public static float ExpoOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x1212528", Offset = "0x1212528", VA = "0x1212528")]
		public static float ExpoIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x1213498", Offset = "0x1213498", VA = "0x1213498")]
		public static float ExpoIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0x12125DC", Offset = "0x12125DC", VA = "0x12125DC")]
		public static float ExpoInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0x1213524", Offset = "0x1213524", VA = "0x1213524")]
		public static float ExpoInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0x1212674", Offset = "0x1212674", VA = "0x1212674")]
		public static float ExpoOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0x12135B8", Offset = "0x12135B8", VA = "0x12135B8")]
		public static float ExpoOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0x1212778", Offset = "0x1212778", VA = "0x1212778")]
		public static float CircOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x1213674", Offset = "0x1213674", VA = "0x1213674")]
		public static float CircOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0x1212744", Offset = "0x1212744", VA = "0x1212744")]
		public static float CircIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0x121364C", Offset = "0x121364C", VA = "0x121364C")]
		public static float CircIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0x12127A8", Offset = "0x12127A8", VA = "0x12127A8")]
		public static float CircInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0x121369C", Offset = "0x121369C", VA = "0x121369C")]
		public static float CircInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0x1212808", Offset = "0x1212808", VA = "0x1212808")]
		public static float CircOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0x12136F0", Offset = "0x12136F0", VA = "0x12136F0")]
		public static float CircOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x12128BC", Offset = "0x12128BC", VA = "0x12128BC")]
		public static float QuadOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x1213778", Offset = "0x1213778", VA = "0x1213778")]
		public static float QuadOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x1212898", Offset = "0x1212898", VA = "0x1212898")]
		public static float QuadIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x1213764", Offset = "0x1213764", VA = "0x1213764")]
		public static float QuadIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x12128E8", Offset = "0x12128E8", VA = "0x12128E8")]
		public static float QuadInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x1213794", Offset = "0x1213794", VA = "0x1213794")]
		public static float QuadInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x1212948", Offset = "0x1212948", VA = "0x1212948")]
		public static float QuadOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x12137E8", Offset = "0x12137E8", VA = "0x12137E8")]
		public static float QuadOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x1212A14", Offset = "0x1212A14", VA = "0x1212A14")]
		public static float SineOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x1213878", Offset = "0x1213878", VA = "0x1213878")]
		public static float SineOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0x12129C8", Offset = "0x12129C8", VA = "0x12129C8")]
		public static float SineIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x121383C", Offset = "0x121383C", VA = "0x121383C")]
		public static float SineIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x1212A5C", Offset = "0x1212A5C", VA = "0x1212A5C")]
		public static float SineInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x12138B0", Offset = "0x12138B0", VA = "0x12138B0")]
		public static float SineInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0x1212AF0", Offset = "0x1212AF0", VA = "0x1212AF0")]
		public static float SineOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x1213934", Offset = "0x1213934", VA = "0x1213934")]
		public static float SineOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x1212BC0", Offset = "0x1212BC0", VA = "0x1212BC0")]
		public static float CubicOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x12139C8", Offset = "0x12139C8", VA = "0x12139C8")]
		public static float CubicOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0x1212B98", Offset = "0x1212B98", VA = "0x1212B98")]
		public static float CubicIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0x12139B0", Offset = "0x12139B0", VA = "0x12139B0")]
		public static float CubicIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x1212BF0", Offset = "0x1212BF0", VA = "0x1212BF0")]
		public static float CubicInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x12139F0", Offset = "0x12139F0", VA = "0x12139F0")]
		public static float CubicInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0x1212C54", Offset = "0x1212C54", VA = "0x1212C54")]
		public static float CubicOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0x1213A44", Offset = "0x1213A44", VA = "0x1213A44")]
		public static float CubicOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0x1212D04", Offset = "0x1212D04", VA = "0x1212D04")]
		public static float QuartOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0x1213AC0", Offset = "0x1213AC0", VA = "0x1213AC0")]
		public static float QuartOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x1212CD8", Offset = "0x1212CD8", VA = "0x1212CD8")]
		public static float QuartIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x1213AA4", Offset = "0x1213AA4", VA = "0x1213AA4")]
		public static float QuartIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x1212D38", Offset = "0x1212D38", VA = "0x1212D38")]
		public static float QuartInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x1213AE8", Offset = "0x1213AE8", VA = "0x1213AE8")]
		public static float QuartInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x1212DA0", Offset = "0x1212DA0", VA = "0x1212DA0")]
		public static float QuartOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x1213B44", Offset = "0x1213B44", VA = "0x1213B44")]
		public static float QuartOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x1212E60", Offset = "0x1212E60", VA = "0x1212E60")]
		public static float QuintOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x1213BCC", Offset = "0x1213BCC", VA = "0x1213BCC")]
		public static float QuintOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x1212E30", Offset = "0x1212E30", VA = "0x1212E30")]
		public static float QuintIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x1213BAC", Offset = "0x1213BAC", VA = "0x1213BAC")]
		public static float QuintIn(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x1212E98", Offset = "0x1212E98", VA = "0x1212E98")]
		public static float QuintInOut(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x1213BFC", Offset = "0x1213BFC", VA = "0x1213BFC")]
		public static float QuintInOut(float t, float b, float c, float d)
		{
			return default(float);
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x1212F0C", Offset = "0x1212F0C", VA = "0x1212F0C")]
		public static float QuintOutIn(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0x1213C60", Offset = "0x1213C60", VA = "0x1213C60")]
		public static float QuintOutIn(float t, float b, float c, float d)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000212")]
	public class DTObjectDump
	{
		[Token(Token = "0x4000B96")]
		private const int INDENTSPACES = 5;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string mIndent;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private StringBuilder mSB;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private object mObject;

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0x1213CE0", Offset = "0x1213CE0", VA = "0x1213CE0")]
		public DTObjectDump(object o, int indent = 0)
		{
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0x1214DD8", Offset = "0x1214DD8", VA = "0x1214DD8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0x1214028", Offset = "0x1214028", VA = "0x1214028")]
		private void AppendHeader(string name)
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0x12140B4", Offset = "0x12140B4", VA = "0x12140B4")]
		private void AppendMember(MemberInfo info)
		{
		}
	}
	[Token(Token = "0x2000213")]
	public static class DTUtility
	{
		[Token(Token = "0x1700018A")]
		public static bool IsEditorStateChange
		{
			[Token(Token = "0x6000DC5")]
			[Address(RVA = "0x1214EA8", Offset = "0x1214EA8", VA = "0x1214EA8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0x1214EA0", Offset = "0x1214EA0", VA = "0x1214EA0")]
		public static Material GetDefaultMaterial()
		{
			return null;
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x1214EB0", Offset = "0x1214EB0", VA = "0x1214EB0")]
		public static float GetHandleSize(Vector3 position)
		{
			return default(float);
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x1215018", Offset = "0x1215018", VA = "0x1215018")]
		public static float GetHandleSize(Vector3 position, Camera camera, Vector3 cameraPosition, Vector3 cameraZDirection, Transform cameraTransform)
		{
			return default(float);
		}

		[Token(Token = "0x6000DC8")]
		public static void SetPlayerPrefs<T>(string key, T value)
		{
		}

		[Token(Token = "0x6000DC9")]
		public static T GetPlayerPrefs<T>(string key, T defaultValue)
		{
			return (T)null;
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x12151D0", Offset = "0x12151D0", VA = "0x12151D0")]
		public static float RandomSign()
		{
			return default(float);
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x12151F8", Offset = "0x12151F8", VA = "0x12151F8")]
		public static string GetHelpUrl(object forClass)
		{
			return null;
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x1215260", Offset = "0x1215260", VA = "0x1215260")]
		public static string GetHelpUrl(Type classType)
		{
			return null;
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x12153A4", Offset = "0x12153A4", VA = "0x12153A4")]
		public static Vector3 GetCenterPosition(Vector3 fallback, params Vector3[] vectors)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DCE")]
		public static T CreateGameObject<T>(Transform parent, string name) where T : MonoBehaviour
		{
			return null;
		}
	}
	[Token(Token = "0x2000214")]
	public static class DTTime
	{
		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float _EditorDeltaTime;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float _EditorLastTime;

		[Token(Token = "0x1700018B")]
		public static double TimeSinceStartup
		{
			[Token(Token = "0x6000DCF")]
			[Address(RVA = "0x1215410", Offset = "0x1215410", VA = "0x1215410")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700018C")]
		public static float deltaTime
		{
			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0x1215428", Offset = "0x1215428", VA = "0x1215428")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0x1215480", Offset = "0x1215480", VA = "0x1215480")]
		public static void InitializeEditorTime()
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0x12154D4", Offset = "0x12154D4", VA = "0x12154D4")]
		public static void UpdateEditorTime()
		{
		}
	}
	[Token(Token = "0x2000215")]
	public class TimeMeasure : Ring<long>
	{
		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Stopwatch mWatch;

		[Token(Token = "0x1700018D")]
		public double LastTicks
		{
			[Token(Token = "0x6000DD7")]
			[Address(RVA = "0x1215674", Offset = "0x1215674", VA = "0x1215674")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700018E")]
		public double LastMS
		{
			[Token(Token = "0x6000DD8")]
			[Address(RVA = "0x12156F0", Offset = "0x12156F0", VA = "0x12156F0")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x1700018F")]
		public double AverageMS
		{
			[Token(Token = "0x6000DD9")]
			[Address(RVA = "0x121570C", Offset = "0x121570C", VA = "0x121570C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000190")]
		public double MinimumMS
		{
			[Token(Token = "0x6000DDA")]
			[Address(RVA = "0x121584C", Offset = "0x121584C", VA = "0x121584C")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000191")]
		public double MaximumMS
		{
			[Token(Token = "0x6000DDB")]
			[Address(RVA = "0x1215950", Offset = "0x1215950", VA = "0x1215950")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000192")]
		public double AverageTicks
		{
			[Token(Token = "0x6000DDC")]
			[Address(RVA = "0x1215A54", Offset = "0x1215A54", VA = "0x1215A54")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000193")]
		public double MinimumTicks
		{
			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0x1215B20", Offset = "0x1215B20", VA = "0x1215B20")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000194")]
		public double MaximumTicks
		{
			[Token(Token = "0x6000DDE")]
			[Address(RVA = "0x1215C18", Offset = "0x1215C18", VA = "0x1215C18")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x1215530", Offset = "0x1215530", VA = "0x1215530")]
		public TimeMeasure(int size)
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x12155BC", Offset = "0x12155BC", VA = "0x12155BC")]
		public void Start()
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x12155D8", Offset = "0x12155D8", VA = "0x12155D8")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x1215658", Offset = "0x1215658", VA = "0x1215658")]
		public void Pause()
		{
		}
	}
	[Token(Token = "0x2000216")]
	public static class DTMath
	{
		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0x1215D0C", Offset = "0x1215D0C", VA = "0x1215D0C")]
		public static Vector3 ParallelTransportFrame(Vector3 up, Vector3 tan0, Vector3 tan1)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0x1215EB8", Offset = "0x1215EB8", VA = "0x1215EB8")]
		public static Vector3 LeftTan(ref Vector3 tan, ref Vector3 up)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0x1215EF0", Offset = "0x1215EF0", VA = "0x1215EF0")]
		public static Vector3 RightTan(ref Vector3 tan, ref Vector3 up)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0x1215F28", Offset = "0x1215F28", VA = "0x1215F28")]
		public static float Repeat(float t, float length)
		{
			return default(float);
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x12157E4", Offset = "0x12157E4", VA = "0x12157E4")]
		public static double FixNaN(double v)
		{
			return default(double);
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x1215F44", Offset = "0x1215F44", VA = "0x1215F44")]
		public static float FixNaN(float v)
		{
			return default(float);
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x1215FAC", Offset = "0x1215FAC", VA = "0x1215FAC")]
		public static Vector2 FixNaN(Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x1216084", Offset = "0x1216084", VA = "0x1216084")]
		public static Vector3 FixNaN(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x12161CC", Offset = "0x12161CC", VA = "0x12161CC")]
		public static float MapValue(float min, float max, float value, float vMin = -1f, float vMax = 1f)
		{
			return default(float);
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x12161E8", Offset = "0x12161E8", VA = "0x12161E8")]
		public static float SnapPrecision(float value, int decimals)
		{
			return default(float);
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x1216298", Offset = "0x1216298", VA = "0x1216298")]
		public static Vector2 SnapPrecision(Vector2 value, int decimals)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x12162E0", Offset = "0x12162E0", VA = "0x12162E0")]
		public static Vector3 SnapPrecision(Vector3 value, int decimals)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x1216348", Offset = "0x1216348", VA = "0x1216348")]
		public static float LinePointDistanceSqr(Vector3 l1, Vector3 l2, Vector3 p, out float frag)
		{
			return default(float);
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x1216414", Offset = "0x1216414", VA = "0x1216414")]
		public static bool RayLineSegmentIntersection(Vector2 r0, Vector2 dir, Vector2 l1, Vector2 l2, out Vector2 hit, out float frag)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x12164E0", Offset = "0x12164E0", VA = "0x12164E0")]
		public static bool ShortestIntersectionLine(Vector3 line1A, Vector3 line1B, Vector3 line2A, Vector3 line2B, out Vector3 resultSegmentA, out Vector3 resultSegmentB)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x12167F4", Offset = "0x12167F4", VA = "0x12167F4")]
		public static bool LineLineIntersection(Vector3 line1A, Vector3 line1B, Vector3 line2A, Vector3 line2B, out Vector3 hitPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x1216914", Offset = "0x1216914", VA = "0x1216914")]
		public static bool LineLineIntersect(Vector2 line1A, Vector2 line1B, Vector2 line2A, Vector2 line2B, out Vector2 hitPoint, bool segmentOnly = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x1216A64", Offset = "0x1216A64", VA = "0x1216A64")]
		public static bool PointInsideTriangle(Vector3 A, Vector3 B, Vector3 C, Vector3 p, out float ac, out float ab, bool edgesAllowed)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000217")]
	public class UnityEventEx<T0> : UnityEvent<T0>
	{
		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private object mCallerList;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private MethodInfo mCallsCount;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int mCount;

		[Token(Token = "0x6000DF1")]
		public void AddListenerOnce(UnityAction<T0> call)
		{
		}

		[Token(Token = "0x6000DF2")]
		public bool HasListeners()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF3")]
		public void CheckForListeners()
		{
		}

		[Token(Token = "0x6000DF4")]
		public UnityEventEx()
		{
		}
	}
	[Token(Token = "0x2000218")]
	public static class DTLog
	{
		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x1216B78", Offset = "0x1216B78", VA = "0x1216B78")]
		public static void Log(object message)
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x1216BD0", Offset = "0x1216BD0", VA = "0x1216BD0")]
		public static void Log(object message, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x1216C38", Offset = "0x1216C38", VA = "0x1216C38")]
		public static void LogError(object message)
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x1216C90", Offset = "0x1216C90", VA = "0x1216C90")]
		public static void LogError(object message, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x1216CF8", Offset = "0x1216CF8", VA = "0x1216CF8")]
		public static void LogErrorFormat(string format, params object[] args)
		{
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x1216D60", Offset = "0x1216D60", VA = "0x1216D60")]
		public static void LogErrorFormat(UnityEngine.Object context, string format, params object[] args)
		{
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x1216DD0", Offset = "0x1216DD0", VA = "0x1216DD0")]
		public static void LogException(Exception exception)
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x1216E28", Offset = "0x1216E28", VA = "0x1216E28")]
		public static void LogException(Exception exception, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x1216E90", Offset = "0x1216E90", VA = "0x1216E90")]
		public static void LogFormat(string format, params object[] args)
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x1216EF8", Offset = "0x1216EF8", VA = "0x1216EF8")]
		public static void LogFormat(UnityEngine.Object context, string format, params object[] args)
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x1216F68", Offset = "0x1216F68", VA = "0x1216F68")]
		public static void LogWarning(object message)
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x1216FC0", Offset = "0x1216FC0", VA = "0x1216FC0")]
		public static void LogWarning(object message, UnityEngine.Object context)
		{
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x1217028", Offset = "0x1217028", VA = "0x1217028")]
		public static void LogWarningFormat(string format, params object[] args)
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x1217090", Offset = "0x1217090", VA = "0x1217090")]
		public static void LogWarningFormat(UnityEngine.Object context, string format, params object[] args)
		{
		}
	}
	[Token(Token = "0x2000219")]
	public enum DTMessageType
	{
		[Token(Token = "0x4000BA1")]
		None,
		[Token(Token = "0x4000BA2")]
		Info,
		[Token(Token = "0x4000BA3")]
		Warning,
		[Token(Token = "0x4000BA4")]
		Error
	}
	[Token(Token = "0x200021A")]
	public enum AttributeOptionsFlags
	{
		[Token(Token = "0x4000BA6")]
		None = 0,
		[Token(Token = "0x4000BA7")]
		Compact = 1,
		[Token(Token = "0x4000BA8")]
		Clipboard = 128,
		[Token(Token = "0x4000BA9")]
		Zero = 256,
		[Token(Token = "0x4000BAA")]
		One = 512,
		[Token(Token = "0x4000BAB")]
		Negate = 1024,
		[Token(Token = "0x4000BAC")]
		Full = 1920,
		[Token(Token = "0x4000BAD")]
		FullCompact = 1921
	}
	[Token(Token = "0x200021B")]
	public class DTPropertyAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Label;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Tooltip;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Color;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AttributeOptionsFlags Options;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int Precision;

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0x1217100", Offset = "0x1217100", VA = "0x1217100")]
		public DTPropertyAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x200021C")]
	public class LabelAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000E04")]
		[Address(RVA = "0x1217134", Offset = "0x1217134", VA = "0x1217134")]
		public LabelAttribute()
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0x1217190", Offset = "0x1217190", VA = "0x1217190")]
		public LabelAttribute(string label, string tooltip = "")
		{
		}
	}
	[Token(Token = "0x200021D")]
	public class ToggleButtonAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000E06")]
		[Address(RVA = "0x12171C4", Offset = "0x12171C4", VA = "0x12171C4")]
		public ToggleButtonAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x200021E")]
	public class LayerAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000E07")]
		[Address(RVA = "0x12171F8", Offset = "0x12171F8", VA = "0x12171F8")]
		public LayerAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x200021F")]
	public class TagAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000E08")]
		[Address(RVA = "0x121722C", Offset = "0x121722C", VA = "0x121722C")]
		public TagAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x2000220")]
	public class VectorExAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x1217260", Offset = "0x1217260", VA = "0x1217260")]
		public VectorExAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x2000221")]
	public class AnimationCurveExAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x121729C", Offset = "0x121729C", VA = "0x121729C")]
		public AnimationCurveExAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x2000222")]
	public class MinAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MinValue;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string MinFieldOrPropertyName;

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x12172D8", Offset = "0x12172D8", VA = "0x12172D8")]
		public MinAttribute(float value, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x121731C", Offset = "0x121731C", VA = "0x121731C")]
		public MinAttribute(string fieldOrProperty, string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x2000223")]
	public class PositiveAttribute : MinAttribute
	{
		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0x1217360", Offset = "0x1217360", VA = "0x1217360")]
		public PositiveAttribute()
		{
		}
	}
	[Token(Token = "0x2000224")]
	public class MaxAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MaxValue;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string MaxFieldOrPropertyName;

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x12173C0", Offset = "0x12173C0", VA = "0x12173C0")]
		public MaxAttribute(float value, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0x1217404", Offset = "0x1217404", VA = "0x1217404")]
		public MaxAttribute(string fieldOrProperty, string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x2000225")]
	public class RangeExAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MinValue;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string MinFieldOrPropertyName;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MaxValue;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string MaxFieldOrPropertyName;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool Slider;

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0x1217448", Offset = "0x1217448", VA = "0x1217448")]
		public RangeExAttribute(float minValue, float maxValue, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0x121749C", Offset = "0x121749C", VA = "0x121749C")]
		public RangeExAttribute(string minFieldOrProperty, float maxValue, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0x12174F8", Offset = "0x12174F8", VA = "0x12174F8")]
		public RangeExAttribute(float minValue, string maxFieldOrProperty, string label = "", string tooltip = "")
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0x1217554", Offset = "0x1217554", VA = "0x1217554")]
		public RangeExAttribute(string minFieldOrProperty, string maxFieldOrProperty, string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x2000226")]
	public class MinMaxAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string MaxValueField;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float Min;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string MinBoundFieldOrPropertyName;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float Max;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string MaxBoundFieldOrPropertyName;

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0x12175A8", Offset = "0x12175A8", VA = "0x12175A8")]
		public MinMaxAttribute(string maxValueField, string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x2000227")]
	public class EnumFlagAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000E15")]
		[Address(RVA = "0x12175F8", Offset = "0x12175F8", VA = "0x12175F8")]
		public EnumFlagAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x2000228")]
	public class ObjectSelectorAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000E16")]
		[Address(RVA = "0x121762C", Offset = "0x121762C", VA = "0x121762C")]
		public ObjectSelectorAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x2000229")]
	public class PathSelectorAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x200022A")]
		public enum DialogMode
		{
			[Token(Token = "0x4000BC7")]
			OpenFile,
			[Token(Token = "0x4000BC8")]
			OpenFolder,
			[Token(Token = "0x4000BC9")]
			CreateFile
		}

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly DialogMode Mode;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string Title;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string Directory;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string Extension;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string DefaultName;

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0x1217660", Offset = "0x1217660", VA = "0x1217660")]
		public PathSelectorAttribute(DialogMode mode = DialogMode.OpenFile)
		{
		}
	}
	[Token(Token = "0x200022B")]
	public class EnumSelectionGridAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x12176D8", Offset = "0x12176D8", VA = "0x12176D8")]
		public EnumSelectionGridAttribute(string label = "", string tooltip = "")
		{
		}
	}
	[Token(Token = "0x200022C")]
	public class DTRegionAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool RegionIsOptional;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string RegionOptionsPropertyName;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool UseSlider;

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0x121770C", Offset = "0x121770C", VA = "0x121770C")]
		public DTRegionAttribute()
		{
		}
	}
	[Token(Token = "0x200022D")]
	public class FloatRegionAttribute : DTRegionAttribute
	{
		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0x1217770", Offset = "0x1217770", VA = "0x1217770")]
		public FloatRegionAttribute()
		{
		}
	}
	[Token(Token = "0x200022E")]
	public class IntRegionAttribute : DTRegionAttribute
	{
		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x1217774", Offset = "0x1217774", VA = "0x1217774")]
		public IntRegionAttribute()
		{
		}
	}
	[Token(Token = "0x200022F")]
	public struct RegionOptions<T>
	{
		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string LabelFrom;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string LabelTo;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string OptionalTooltip;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DTValueClamping ClampFrom;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public DTValueClamping ClampTo;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T FromMin;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T FromMax;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T ToMin;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T ToMax;

		[Token(Token = "0x17000195")]
		public static RegionOptions<T> Default
		{
			[Token(Token = "0x6000E1C")]
			get
			{
				return default(RegionOptions<T>);
			}
		}

		[Token(Token = "0x6000E1D")]
		public static RegionOptions<T> MinMax(T min, T max)
		{
			return default(RegionOptions<T>);
		}
	}
	[Token(Token = "0x2000230")]
	public enum DTValueClamping
	{
		[Token(Token = "0x4000BD7")]
		None,
		[Token(Token = "0x4000BD8")]
		Min,
		[Token(Token = "0x4000BD9")]
		Max,
		[Token(Token = "0x4000BDA")]
		Range
	}
	[Token(Token = "0x2000231")]
	public class ThreadPoolWorker<T> : IDisposable
	{
		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly SimplePool<QueuedCallback> queuedCallbackPool;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly SimplePool<LoopState<T>> loopStatePool;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _remainingWorkItems;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ManualResetEvent _done;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private WaitCallback handleWorkItemCallBack;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private WaitCallback handleLoopCallBack;

		[Token(Token = "0x6000E1E")]
		public ThreadPoolWorker()
		{
		}

		[Token(Token = "0x6000E1F")]
		public void ParralelFor(Action<T> action, List<T> list)
		{
		}

		[Token(Token = "0x6000E20")]
		private bool WaitAll(int millisecondsTimeout, bool exitContext)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E21")]
		private void ThrowIfDisposed()
		{
		}

		[Token(Token = "0x6000E22")]
		private void DoneWorkItem()
		{
		}

		[Token(Token = "0x6000E23")]
		public void Dispose()
		{
		}
	}
	[Token(Token = "0x2000232")]
	internal class SimplePool<T> where T : new()
	{
		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<T> freeItemsBackfield;

		[Token(Token = "0x6000E26")]
		public SimplePool(int preCreatedElementsCount)
		{
		}

		[Token(Token = "0x6000E27")]
		public T GetItem()
		{
			return (T)null;
		}

		[Token(Token = "0x6000E28")]
		public void ReleaseItem(T item)
		{
		}
	}
	[Token(Token = "0x2000233")]
	internal class QueuedCallback
	{
		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public WaitCallback Callback;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public object State;

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x1217778", Offset = "0x1217778", VA = "0x1217778")]
		public QueuedCallback()
		{
		}
	}
	[Token(Token = "0x2000234")]
	internal class LoopState<T>
	{
		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short StartIndex;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short EndIndex;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<T> Items;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Action<T> Action;

		[Token(Token = "0x6000E2A")]
		public LoopState()
		{
		}
	}
	[Token(Token = "0x2000235")]
	public class ThreadPoolWorker : IDisposable
	{
		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int _remainingWorkItems;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ManualResetEvent _done;

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x1217780", Offset = "0x1217780", VA = "0x1217780")]
		public void QueueWorkItem(WaitCallback callback)
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x1217800", Offset = "0x1217800", VA = "0x1217800")]
		public void QueueWorkItem(Action act)
		{
		}

		[Token(Token = "0x6000E2D")]
		public void ParralelFor<T>(Action<T> action, List<T> list)
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x12178F8", Offset = "0x12178F8", VA = "0x12178F8")]
		private void QueueWorkItem(QueuedCallback callback)
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x1217788", Offset = "0x1217788", VA = "0x1217788")]
		public void QueueWorkItem(WaitCallback callback, object state)
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x1217808", Offset = "0x1217808", VA = "0x1217808")]
		public void QueueWorkItem(Action act, object state)
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x1217AC4", Offset = "0x1217AC4", VA = "0x1217AC4")]
		public bool WaitAll()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0x1217C00", Offset = "0x1217C00", VA = "0x1217C00")]
		public bool WaitAll(TimeSpan timeout, bool exitContext)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x1217AD0", Offset = "0x1217AD0", VA = "0x1217AD0")]
		public bool WaitAll(int millisecondsTimeout, bool exitContext)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x1217D3C", Offset = "0x1217D3C", VA = "0x1217D3C")]
		private void HandleWorkItem(object state)
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x1217C54", Offset = "0x1217C54", VA = "0x1217C54")]
		private void DoneWorkItem()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x1217A3C", Offset = "0x1217A3C", VA = "0x1217A3C")]
		private void ThrowIfDisposed()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x1217E4C", Offset = "0x1217E4C", VA = "0x1217E4C", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x1217EF0", Offset = "0x1217EF0", VA = "0x1217EF0")]
		public ThreadPoolWorker()
		{
		}
	}
	[Token(Token = "0x2000238")]
	public class ComponentPool : MonoBehaviour, IPool, ISerializationCallbackReceiver
	{
		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private string m_Identifier;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Inline]
		[SerializeField]
		private PoolSettings m_Settings;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PoolManager mManager;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UnityEngine.Component> mObjects;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private double mLastTime;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private double mDeltaTime;

		[Token(Token = "0x17000196")]
		public PoolSettings Settings
		{
			[Token(Token = "0x6000E3E")]
			[Address(RVA = "0x1217F88", Offset = "0x1217F88", VA = "0x1217F88", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E3F")]
			[Address(RVA = "0x1217F90", Offset = "0x1217F90", VA = "0x1217F90")]
			set
			{
			}
		}

		[Token(Token = "0x17000197")]
		public PoolManager Manager
		{
			[Token(Token = "0x6000E40")]
			[Address(RVA = "0x1217FEC", Offset = "0x1217FEC", VA = "0x1217FEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000198")]
		public string Identifier
		{
			[Token(Token = "0x6000E41")]
			[Address(RVA = "0x1218080", Offset = "0x1218080", VA = "0x1218080", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E42")]
			[Address(RVA = "0x1218088", Offset = "0x1218088", VA = "0x1218088", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000199")]
		public Type Type
		{
			[Token(Token = "0x6000E43")]
			[Address(RVA = "0x12180D8", Offset = "0x12180D8", VA = "0x12180D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700019A")]
		public int Count
		{
			[Token(Token = "0x6000E44")]
			[Address(RVA = "0x12181AC", Offset = "0x12181AC", VA = "0x12181AC", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x12181F4", Offset = "0x12181F4", VA = "0x12181F4")]
		public void Initialize(Type type, PoolSettings settings)
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x1218438", Offset = "0x1218438", VA = "0x1218438")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x1218460", Offset = "0x1218460", VA = "0x1218460")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0x1218504", Offset = "0x1218504", VA = "0x1218504")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x1218508", Offset = "0x1218508", VA = "0x1218508", Slot = "9")]
		public void Update()
		{
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0x1218290", Offset = "0x1218290", VA = "0x1218290", Slot = "8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0x12189F0", Offset = "0x12189F0", VA = "0x12189F0")]
		public void OnSceneLoaded(Scene scn, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x1218AE8", Offset = "0x1218AE8", VA = "0x1218AE8", Slot = "7")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x1218BDC", Offset = "0x1218BDC", VA = "0x1218BDC")]
		public void Push(UnityEngine.Component item)
		{
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x1218F1C", Offset = "0x1218F1C", VA = "0x1218F1C")]
		public UnityEngine.Component Pop([Optional] Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6000E4F")]
		public T Pop<T>(Transform parent) where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x1218918", Offset = "0x1218918", VA = "0x1218918")]
		private UnityEngine.Component create()
		{
			return null;
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x1218874", Offset = "0x1218874", VA = "0x1218874")]
		private void destroy(UnityEngine.Component item)
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x12192C0", Offset = "0x12192C0", VA = "0x12192C0")]
		private void setParent(UnityEngine.Component item, Transform parent)
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x1219114", Offset = "0x1219114", VA = "0x1219114")]
		private void sendAfterPop(UnityEngine.Component item)
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x1218D74", Offset = "0x1218D74", VA = "0x1218D74")]
		private void sendBeforePush(UnityEngine.Component item)
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0x1218798", Offset = "0x1218798", VA = "0x1218798")]
		private void log(string msg)
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0x1219360", Offset = "0x1219360", VA = "0x1219360", Slot = "11")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x1219364", Offset = "0x1219364", VA = "0x1219364", Slot = "12")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0x12196AC", Offset = "0x12196AC", VA = "0x12196AC")]
		public ComponentPool()
		{
		}
	}
	[Token(Token = "0x200023A")]
	public class DTSingleton<T> : MonoBehaviour, IDTSingleton where T : MonoBehaviour, IDTSingleton
	{
		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T _instance;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static object _lock;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool applicationIsQuitting;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool isDuplicateInstance;

		[Token(Token = "0x1700019B")]
		public static bool HasInstance
		{
			[Token(Token = "0x6000E5B")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700019C")]
		public static T Instance
		{
			[Token(Token = "0x6000E5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E5D")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6000E5E")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000E5F")]
		public virtual void MergeDoubleLoaded(IDTSingleton newInstance)
		{
		}

		[Token(Token = "0x6000E60")]
		private void DestroySelf()
		{
		}

		[Token(Token = "0x6000E61")]
		public DTSingleton()
		{
		}
	}
	[Token(Token = "0x200023C")]
	public interface IDTSingleton
	{
		[Token(Token = "0x6000E66")]
		void MergeDoubleLoaded(IDTSingleton newInstance);
	}
	[Token(Token = "0x200023D")]
	public class DTVersionedMonoBehaviour : MonoBehaviour
	{
		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[HideInInspector]
		private string m_Version;

		[Token(Token = "0x1700019D")]
		public string Version
		{
			[Token(Token = "0x6000E67")]
			[Address(RVA = "0x1219760", Offset = "0x1219760", VA = "0x1219760")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E68")]
			[Address(RVA = "0x1219768", Offset = "0x1219768", VA = "0x1219768")]
			protected set
			{
			}
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x1219770", Offset = "0x1219770", VA = "0x1219770")]
		[Obsolete("This upgrading mechanism is tied to the Editor. Meaning it does not work when in Play mode. A better way to handle upgrading would be to use Unity's ISerializationCallbackReceiver")]
		protected void CheckForVersionUpgrade()
		{
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x1219774", Offset = "0x1219774", VA = "0x1219774", Slot = "4")]
		[Obsolete("This upgrading mechanism is tied to the Editor. Meaning it does not work when in Play mode. A better way to handle upgrading would be to use Unity's ISerializationCallbackReceiver")]
		protected virtual bool UpgradeVersion(string oldVersion, string newVersion)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x1219A00", Offset = "0x1219A00", VA = "0x1219A00")]
		public void Destroy()
		{
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x1219A88", Offset = "0x1219A88", VA = "0x1219A88")]
		public DTVersionedMonoBehaviour()
		{
		}
	}
	[Token(Token = "0x200023E")]
	[ExecuteInEditMode]
	public class DuplicateEditorMesh : MonoBehaviour
	{
		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MeshFilter mFilter;

		[Token(Token = "0x1700019E")]
		public MeshFilter Filter
		{
			[Token(Token = "0x6000E6D")]
			[Address(RVA = "0x1219A90", Offset = "0x1219A90", VA = "0x1219A90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0x1219B24", Offset = "0x1219B24", VA = "0x1219B24", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x1219D74", Offset = "0x1219D74", VA = "0x1219D74")]
		public DuplicateEditorMesh()
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class InspectorNote : MonoBehaviour
	{
		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[TextArea(5, 20)]
		[SerializeField]
		private string m_Note;

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x1219D7C", Offset = "0x1219D7C", VA = "0x1219D7C")]
		public InspectorNote()
		{
		}
	}
	[Token(Token = "0x2000240")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	public class PoolManager : MonoBehaviour
	{
		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Section("General", true, false, 100)]
		[SerializeField]
		private bool m_AutoCreatePools;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[AsGroup(null, Expanded = false)]
		private PoolSettings m_DefaultSettings;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<string, IPool> Pools;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Dictionary<Type, IPool> TypePools;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private IPool[] mPools;

		[Token(Token = "0x1700019F")]
		public bool AutoCreatePools
		{
			[Token(Token = "0x6000E71")]
			[Address(RVA = "0x1219D84", Offset = "0x1219D84", VA = "0x1219D84")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E72")]
			[Address(RVA = "0x1219D8C", Offset = "0x1219D8C", VA = "0x1219D8C")]
			set
			{
			}
		}

		[Token(Token = "0x170001A0")]
		public PoolSettings DefaultSettings
		{
			[Token(Token = "0x6000E73")]
			[Address(RVA = "0x1219DA4", Offset = "0x1219DA4", VA = "0x1219DA4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E74")]
			[Address(RVA = "0x1219DAC", Offset = "0x1219DAC", VA = "0x1219DAC")]
			set
			{
			}
		}

		[Token(Token = "0x170001A1")]
		public bool IsInitialized
		{
			[Token(Token = "0x6000E75")]
			[Address(RVA = "0x1219E08", Offset = "0x1219E08", VA = "0x1219E08")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000E76")]
			[Address(RVA = "0x1219E10", Offset = "0x1219E10", VA = "0x1219E10")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170001A2")]
		public int Count
		{
			[Token(Token = "0x6000E77")]
			[Address(RVA = "0x1219E1C", Offset = "0x1219E1C", VA = "0x1219E1C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x1219EA0", Offset = "0x1219EA0", VA = "0x1219EA0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0x1219EA8", Offset = "0x1219EA8", VA = "0x1219EA8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0x121A054", Offset = "0x121A054", VA = "0x121A054")]
		private void Initialize()
		{
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0x121A498", Offset = "0x121A498", VA = "0x121A498")]
		public string GetUniqueIdentifier(string ident)
		{
			return null;
		}

		[Token(Token = "0x6000E7C")]
		public Pool<T> GetTypePool<T>()
		{
			return null;
		}

		[Token(Token = "0x6000E7D")]
		public ComponentPool GetComponentPool<T>() where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0x121A548", Offset = "0x121A548", VA = "0x121A548")]
		public PrefabPool GetPrefabPool(string identifier, params GameObject[] prefabs)
		{
			return null;
		}

		[Token(Token = "0x6000E7F")]
		public Pool<T> CreateTypePool<T>([Optional] PoolSettings settings)
		{
			return null;
		}

		[Token(Token = "0x6000E80")]
		public ComponentPool CreateComponentPool<T>([Optional] PoolSettings settings) where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x121A640", Offset = "0x121A640", VA = "0x121A640")]
		public PrefabPool CreatePrefabPool(string name, [Optional] PoolSettings settings, params GameObject[] prefabs)
		{
			return null;
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x121A8E8", Offset = "0x121A8E8", VA = "0x121A8E8")]
		public List<IPool> FindPools(string identifierStartsWith)
		{
			return null;
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x121AB30", Offset = "0x121AB30", VA = "0x121AB30")]
		public void DeletePools(string startsWith)
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x121ABD4", Offset = "0x121ABD4", VA = "0x121ABD4")]
		public void DeletePool(IPool pool)
		{
		}

		[Token(Token = "0x6000E85")]
		public void DeletePool<T>()
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x121AD9C", Offset = "0x121AD9C", VA = "0x121AD9C")]
		public PoolManager()
		{
		}
	}
	[Token(Token = "0x2000241")]
	[RequireComponent(typeof(PoolManager))]
	public class PrefabPool : MonoBehaviour, IPool
	{
		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[FieldCondition("m_Identifier", "", false, ActionAttribute.ActionEnum.ShowWarning, "Please enter an identifier! (Select a prefab to set automatically)", ActionAttribute.ActionPositionEnum.Below)]
		private string m_Identifier;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<GameObject> m_Prefabs;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Inline]
		[SerializeField]
		private PoolSettings m_Settings;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PoolManager mManager;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<GameObject> mObjects;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private double mLastTime;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private double mDeltaTime;

		[Token(Token = "0x170001A3")]
		public string Identifier
		{
			[Token(Token = "0x6000E87")]
			[Address(RVA = "0x121AEC8", Offset = "0x121AEC8", VA = "0x121AEC8", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E88")]
			[Address(RVA = "0x121AED0", Offset = "0x121AED0", VA = "0x121AED0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x170001A4")]
		public List<GameObject> Prefabs
		{
			[Token(Token = "0x6000E89")]
			[Address(RVA = "0x121AFBC", Offset = "0x121AFBC", VA = "0x121AFBC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E8A")]
			[Address(RVA = "0x121AFC4", Offset = "0x121AFC4", VA = "0x121AFC4")]
			set
			{
			}
		}

		[Token(Token = "0x170001A5")]
		public PoolSettings Settings
		{
			[Token(Token = "0x6000E8B")]
			[Address(RVA = "0x121AFD8", Offset = "0x121AFD8", VA = "0x121AFD8", Slot = "6")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E8C")]
			[Address(RVA = "0x121AFE0", Offset = "0x121AFE0", VA = "0x121AFE0")]
			set
			{
			}
		}

		[Token(Token = "0x170001A6")]
		public PoolManager Manager
		{
			[Token(Token = "0x6000E8D")]
			[Address(RVA = "0x121AF28", Offset = "0x121AF28", VA = "0x121AF28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A7")]
		public int Count
		{
			[Token(Token = "0x6000E94")]
			[Address(RVA = "0x121B4A0", Offset = "0x121B4A0", VA = "0x121B4A0", Slot = "10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x121B03C", Offset = "0x121B03C", VA = "0x121B03C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x121B040", Offset = "0x121B040", VA = "0x121B040")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x121A7D4", Offset = "0x121A7D4", VA = "0x121A7D4")]
		public void Initialize(string ident, PoolSettings settings, params GameObject[] prefabs)
		{
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x121B210", Offset = "0x121B210", VA = "0x121B210", Slot = "9")]
		public void Update()
		{
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x121B068", Offset = "0x121B068", VA = "0x121B068", Slot = "8")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x121B7F0", Offset = "0x121B7F0", VA = "0x121B7F0", Slot = "7")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x121B8E4", Offset = "0x121B8E4", VA = "0x121B8E4")]
		public GameObject Pop([Optional] Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x121BB28", Offset = "0x121BB28", VA = "0x121BB28", Slot = "11")]
		public virtual void Push(GameObject item)
		{
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x121B61C", Offset = "0x121B61C", VA = "0x121B61C")]
		private GameObject create()
		{
			return null;
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x121B5C4", Offset = "0x121B5C4", VA = "0x121B5C4")]
		private void destroy(GameObject go)
		{
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x121B4E8", Offset = "0x121B4E8", VA = "0x121B4E8")]
		private void log(string msg)
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x121BD64", Offset = "0x121BD64", VA = "0x121BD64")]
		private void setParent(Transform item, Transform parent)
		{
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x121BAD0", Offset = "0x121BAD0", VA = "0x121BAD0")]
		private void sendAfterPop(GameObject item)
		{
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x121BD0C", Offset = "0x121BD0C", VA = "0x121BD0C")]
		private void sendBeforePush(GameObject item)
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x121BDF8", Offset = "0x121BDF8", VA = "0x121BDF8")]
		public PrefabPool()
		{
		}
	}
}
namespace FluffyUnderware.DevTools.Extensions
{
	[Token(Token = "0x2000242")]
	[Obsolete("Will get removed since it is not used by Curvy")]
	public static class TransformExt
	{
		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x121BE98", Offset = "0x121BE98", VA = "0x121BE98")]
		public static void CopyFrom(this Transform t, Transform other)
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x121BF04", Offset = "0x121BF04", VA = "0x121BF04")]
		public static void SetChildrenHideFlags(this Transform t, HideFlags flags)
		{
		}
	}
	[Token(Token = "0x2000243")]
	public static class ObjectExt
	{
		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x121BFC4", Offset = "0x121BFC4", VA = "0x121BFC4")]
		public static void Destroy(this UnityEngine.Object c)
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x121C01C", Offset = "0x121C01C", VA = "0x121C01C")]
		public static string ToDumpString(this object o)
		{
			return null;
		}
	}
	[Token(Token = "0x2000244")]
	public static class Vector2Ext
	{
		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x121C088", Offset = "0x121C088", VA = "0x121C088")]
		public static Vector2 Snap(this Vector2 v, float snapX, float snapY = -1f)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x121C0DC", Offset = "0x121C0DC", VA = "0x121C0DC")]
		public static float AngleSigned(this Vector2 a, Vector2 b)
		{
			return default(float);
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x121C1EC", Offset = "0x121C1EC", VA = "0x121C1EC")]
		public static Vector2 LeftNormal(this Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x121C200", Offset = "0x121C200", VA = "0x121C200")]
		public static Vector2 RightNormal(this Vector2 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x121C210", Offset = "0x121C210", VA = "0x121C210")]
		public static Vector2 Rotate(this Vector2 v, float degree)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x121C260", Offset = "0x121C260", VA = "0x121C260")]
		public static Vector2 ToVector3(this Vector2 v)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x2000245")]
	public static class Vector3Ext
	{
		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x121C264", Offset = "0x121C264", VA = "0x121C264")]
		public static float AngleSigned(this Vector3 a, Vector3 b, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x121C2D4", Offset = "0x121C2D4", VA = "0x121C2D4")]
		public static Vector3 RotateAround(this Vector3 point, Vector3 origin, Quaternion rotation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x121C330", Offset = "0x121C330", VA = "0x121C330")]
		public static Vector2 ToVector2(this Vector3 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x121C334", Offset = "0x121C334", VA = "0x121C334")]
		public static bool Approximately(this Vector3 v1, Vector3 v2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x121C36C", Offset = "0x121C36C", VA = "0x121C36C")]
		public static bool NotApproximately(this Vector3 v1, Vector3 v2)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000246")]
	public static class QuaternionExt
	{
		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x121C3A4", Offset = "0x121C3A4", VA = "0x121C3A4")]
		public static bool SameOrientation(this Quaternion q1, Quaternion q2)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x121C464", Offset = "0x121C464", VA = "0x121C464")]
		public static bool DifferentOrientation(this Quaternion q1, Quaternion q2)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000247")]
	public static class CameraExt
	{
		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Plane[] camPlanes;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Vector3 camPos;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static Vector3 camForward;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static float fov;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static float screenW;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static float screenH;

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0x121C524", Offset = "0x121C524", VA = "0x121C524")]
		public static bool BoundsInView(this Camera c, Bounds bounds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0x121C7E8", Offset = "0x121C7E8", VA = "0x121C7E8")]
		public static bool BoundsPartiallyInView(this Camera c, Bounds bounds)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000248")]
	public static class GameObjectExt
	{
		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0x121CBA8", Offset = "0x121CBA8", VA = "0x121CBA8")]
		public static GameObject DuplicateGameObject(this GameObject source, Transform newParent, bool keepPrefabReference = false)
		{
			return null;
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0x121CC98", Offset = "0x121CC98", VA = "0x121CC98")]
		public static void StripComponents(this GameObject go, params Type[] toKeep)
		{
		}
	}
	[Token(Token = "0x2000249")]
	public static class ComponentExt
	{
		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0x121CF3C", Offset = "0x121CF3C", VA = "0x121CF3C")]
		public static void StripComponents(this UnityEngine.Component c, params Type[] toKeep)
		{
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0x121D00C", Offset = "0x121D00C", VA = "0x121D00C")]
		public static GameObject AddChildGameObject(this UnityEngine.Component c, string name)
		{
			return null;
		}

		[Token(Token = "0x6000EB6")]
		public static T AddChildGameObject<T>(this UnityEngine.Component c, string name) where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x6000EB7")]
		public static T DuplicateGameObject<T>(this UnityEngine.Component source, Transform newParent, bool keepPrefabConnection = false) where T : UnityEngine.Component
		{
			return null;
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0x121D0B0", Offset = "0x121D0B0", VA = "0x121D0B0")]
		public static UnityEngine.Component DuplicateGameObject(this UnityEngine.Component source, Transform newParent, bool keepPrefabConnection = false)
		{
			return null;
		}
	}
	[Token(Token = "0x200024A")]
	public static class ColorExt
	{
		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0x121D2E8", Offset = "0x121D2E8", VA = "0x121D2E8")]
		public static string ToHtml(this Color c)
		{
			return null;
		}
	}
	[Token(Token = "0x200024B")]
	public static class EnumExt
	{
		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0x121D728", Offset = "0x121D728", VA = "0x121D728")]
		public static bool HasFlag(this Enum variable, params Enum[] flags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBB")]
		public static bool HasFlag<T>(this T value, T flag) where T : struct
		{
			return default(bool);
		}

		[Token(Token = "0x6000EBC")]
		public static T Set<T>(this Enum value, T append)
		{
			return (T)null;
		}

		[Token(Token = "0x6000EBD")]
		public static T Set<T>(this Enum value, T append, bool OnOff)
		{
			return (T)null;
		}

		[Token(Token = "0x6000EBE")]
		[Obsolete("Will get removed since it is not used by Curvy")]
		public static T Toggle<T>(this Enum value, T toggleValue)
		{
			return (T)null;
		}

		[Token(Token = "0x6000EBF")]
		[Obsolete("Will get removed since it is not used by Curvy")]
		public static T SetAll<T>(this Enum value)
		{
			return (T)null;
		}
	}
	[Token(Token = "0x200024C")]
	public static class RectExt
	{
		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0x121D93C", Offset = "0x121D93C", VA = "0x121D93C")]
		public static Rect Set(this Rect rect, Vector2 pos, Vector2 size)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0x121D994", Offset = "0x121D994", VA = "0x121D994")]
		public static Rect SetBetween(this Rect rect, Vector2 pos, Vector2 pos2)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0x121D9EC", Offset = "0x121D9EC", VA = "0x121D9EC")]
		public static Rect SetPosition(this Rect rect, Vector2 pos)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x121DA54", Offset = "0x121DA54", VA = "0x121DA54")]
		public static Rect SetPosition(this Rect rect, float x, float y)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x121DABC", Offset = "0x121DABC", VA = "0x121DABC")]
		public static Vector2 GetSize(this Rect rect)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0x121DB04", Offset = "0x121DB04", VA = "0x121DB04")]
		public static Rect SetSize(this Rect rect, Vector2 size)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0x121DB6C", Offset = "0x121DB6C", VA = "0x121DB6C")]
		public static Rect ScaleBy(this Rect rect, int pixel)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x121DB74", Offset = "0x121DB74", VA = "0x121DB74")]
		public static Rect ScaleBy(this Rect rect, int x, int y)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x121DC48", Offset = "0x121DC48", VA = "0x121DC48")]
		public static Rect ShiftBy(this Rect rect, int x, int y)
		{
			return default(Rect);
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x121DCD4", Offset = "0x121DCD4", VA = "0x121DCD4")]
		public static Rect Include(this Rect rect, Rect other)
		{
			return default(Rect);
		}
	}
	[Token(Token = "0x200024D")]
	public static class StringExt
	{
		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x121DDCC", Offset = "0x121DDCC", VA = "0x121DDCC")]
		public static Color ColorFromHtml(this string hexString)
		{
			return default(Color);
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0x121E070", Offset = "0x121E070", VA = "0x121E070")]
		public static string TrimStart(this string s, string trim, StringComparison compare = StringComparison.CurrentCultureIgnoreCase)
		{
			return null;
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0x121E0C0", Offset = "0x121E0C0", VA = "0x121E0C0")]
		public static string TrimEnd(this string s, string trim, StringComparison compare = StringComparison.CurrentCultureIgnoreCase)
		{
			return null;
		}
	}
	[Token(Token = "0x200024E")]
	public static class IEnumerableExt
	{
		[Token(Token = "0x6000ECD")]
		public static void ForEach<T>(this IEnumerable<T> ie, Action<T> action)
		{
		}
	}
	[Token(Token = "0x200024F")]
	public static class ArrayExt
	{
		[Token(Token = "0x6000ECE")]
		public static T[] SubArray<T>(this T[] data, int index, int length)
		{
			return null;
		}

		[Token(Token = "0x6000ECF")]
		public static T[] RemoveAt<T>(this T[] source, int index)
		{
			return null;
		}

		[Token(Token = "0x6000ED0")]
		public static T[] InsertAt<T>(this T[] source, int index)
		{
			return null;
		}

		[Token(Token = "0x6000ED1")]
		public static T[] Swap<T>(this T[] source, int index, int with)
		{
			return null;
		}

		[Token(Token = "0x6000ED2")]
		public static T[] Add<T>(this T[] source, T item)
		{
			return null;
		}

		[Token(Token = "0x6000ED3")]
		public static T[] AddRange<T>(this T[] source, T[] items)
		{
			return null;
		}

		[Token(Token = "0x6000ED4")]
		public static T[] RemoveDuplicates<T>(this T[] source)
		{
			return null;
		}

		[Token(Token = "0x6000ED5")]
		public static int IndexOf<T>(this T[] source, T item)
		{
			return default(int);
		}

		[Token(Token = "0x6000ED6")]
		public static T[] Remove<T>(this T[] source, T item)
		{
			return null;
		}
	}
	[Token(Token = "0x2000250")]
	public static class MeshFilterExt
	{
		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x121E11C", Offset = "0x121E11C", VA = "0x121E11C")]
		public static Mesh PrepareNewShared(this MeshFilter m, string name = "Mesh")
		{
			return null;
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x121E294", Offset = "0x121E294", VA = "0x121E294")]
		public static void CalculateTangents(this MeshFilter m)
		{
		}
	}
	[Token(Token = "0x2000251")]
	public static class TypeExt
	{
		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x121E780", Offset = "0x121E780", VA = "0x121E780")]
		[Obsolete("Use GetLoadedTypes() instead")]
		public static Type[] GetAllTypes(this Type typeFromAssembly)
		{
			return null;
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x121958C", Offset = "0x121958C", VA = "0x121958C")]
		public static Type[] GetLoadedTypes()
		{
			return null;
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x121E7B4", Offset = "0x121E7B4", VA = "0x121E7B4")]
		public static IEnumerable<Assembly> GetLoadedAssemblies()
		{
			return null;
		}

		[Token(Token = "0x6000EDC")]
		public static Dictionary<U, Type> GetAllTypesWithAttribute<U>(this Type type)
		{
			return null;
		}

		[Token(Token = "0x6000EDD")]
		public static List<FieldInfo> GetFieldsWithAttribute<T>(this Type type, bool includeInherited = false, bool includePrivate = false) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x6000EDE")]
		public static T GetCustomAttribute<T>(this Type type) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x12106C4", Offset = "0x12106C4", VA = "0x12106C4")]
		public static MethodInfo MethodByName(this Type type, string name, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0x1211050", Offset = "0x1211050", VA = "0x1211050")]
		public static FieldInfo FieldByName(this Type type, string name, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0x1211090", Offset = "0x1211090", VA = "0x1211090")]
		public static PropertyInfo PropertyByName(this Type type, string name, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0x1213E80", Offset = "0x1213E80", VA = "0x1213E80")]
		public static FieldInfo[] GetAllFields(this Type type, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x1214C30", Offset = "0x1214C30", VA = "0x1214C30")]
		public static PropertyInfo[] GetAllProperties(this Type type, bool includeInherited = false, bool includePrivate = false)
		{
			return null;
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x121EC1C", Offset = "0x121EC1C", VA = "0x121EC1C")]
		public static bool IsFrameworkType(this Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x121ED1C", Offset = "0x121ED1C", VA = "0x121ED1C")]
		public static bool IsArrayOrList(this Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x1214DF8", Offset = "0x1214DF8", VA = "0x1214DF8")]
		public static Type GetEnumerableType(this Type t)
		{
			return null;
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x121EE00", Offset = "0x121EE00", VA = "0x121EE00")]
		private static Type FindIEnumerable(Type seqType)
		{
			return null;
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x121E7D4", Offset = "0x121E7D4", VA = "0x121E7D4")]
		private static MethodInfo GetMethodIncludingBaseClasses(this Type type, string name, BindingFlags bindingFlags)
		{
			return null;
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x121E93C", Offset = "0x121E93C", VA = "0x121E93C")]
		private static FieldInfo GetFieldIncludingBaseClasses(this Type type, string name, BindingFlags bindingFlags)
		{
			return null;
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x121EAB4", Offset = "0x121EAB4", VA = "0x121EAB4")]
		private static PropertyInfo GetPropertyIncludingBaseClasses(this Type type, string name, BindingFlags bindingFlags)
		{
			return null;
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x121F208", Offset = "0x121F208", VA = "0x121F208")]
		public static bool Matches(this Type type, params Type[] types)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000253")]
	public static class FieldInfoExt
	{
		[Token(Token = "0x6000EEF")]
		public static T GetCustomAttribute<T>(this FieldInfo field) where T : Attribute
		{
			return null;
		}
	}
}
namespace FluffyUnderware.Curvy
{
	[Token(Token = "0x2000254")]
	[HelpURL("https://curvyeditor.com/doclink/metacgoptions")]
	public class MetaCGOptions : CurvyMetadataBase
	{
		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Positive]
		private int m_MaterialID;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private bool m_HardEdge;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Positive(Tooltip = "Max step distance when using optimization")]
		[SerializeField]
		private float m_MaxStepDistance;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[Section("Extended UV", true, false, 100, HelpURL = "https://curvyeditor.com/doclink/metacgoptions_extendeduv")]
		[FieldCondition("showUVEdge", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		private bool m_UVEdge;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[FieldCondition("showExplicitU", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		[SerializeField]
		[Positive]
		private bool m_ExplicitU;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[FieldCondition("showFirstU", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		[SerializeField]
		[Positive]
		[FieldAction("CBSetFirstU", ActionAttribute.ActionEnum.Callback)]
		private float m_FirstU;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[FieldCondition("showSecondU", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		[SerializeField]
		[Positive]
		private float m_SecondU;

		[Token(Token = "0x170001A8")]
		public int MaterialID
		{
			[Token(Token = "0x6000EF0")]
			[Address(RVA = "0x121F37C", Offset = "0x121F37C", VA = "0x121F37C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000EF1")]
			[Address(RVA = "0x121F384", Offset = "0x121F384", VA = "0x121F384")]
			set
			{
			}
		}

		[Token(Token = "0x170001A9")]
		public bool HardEdge
		{
			[Token(Token = "0x6000EF2")]
			[Address(RVA = "0x121F3A4", Offset = "0x121F3A4", VA = "0x121F3A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EF3")]
			[Address(RVA = "0x121F3AC", Offset = "0x121F3AC", VA = "0x121F3AC")]
			set
			{
			}
		}

		[Token(Token = "0x170001AA")]
		public bool UVEdge
		{
			[Token(Token = "0x6000EF4")]
			[Address(RVA = "0x121F3CC", Offset = "0x121F3CC", VA = "0x121F3CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EF5")]
			[Address(RVA = "0x121F3D4", Offset = "0x121F3D4", VA = "0x121F3D4")]
			set
			{
			}
		}

		[Token(Token = "0x170001AB")]
		public bool ExplicitU
		{
			[Token(Token = "0x6000EF6")]
			[Address(RVA = "0x121F3F4", Offset = "0x121F3F4", VA = "0x121F3F4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EF7")]
			[Address(RVA = "0x121F3FC", Offset = "0x121F3FC", VA = "0x121F3FC")]
			set
			{
			}
		}

		[Token(Token = "0x170001AC")]
		public float FirstU
		{
			[Token(Token = "0x6000EF8")]
			[Address(RVA = "0x121F41C", Offset = "0x121F41C", VA = "0x121F41C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EF9")]
			[Address(RVA = "0x121F424", Offset = "0x121F424", VA = "0x121F424")]
			set
			{
			}
		}

		[Token(Token = "0x170001AD")]
		public float SecondU
		{
			[Token(Token = "0x6000EFA")]
			[Address(RVA = "0x121F440", Offset = "0x121F440", VA = "0x121F440")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EFB")]
			[Address(RVA = "0x121F448", Offset = "0x121F448", VA = "0x121F448")]
			set
			{
			}
		}

		[Token(Token = "0x170001AE")]
		public float MaxStepDistance
		{
			[Token(Token = "0x6000EFC")]
			[Address(RVA = "0x121F464", Offset = "0x121F464", VA = "0x121F464")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EFD")]
			[Address(RVA = "0x121F46C", Offset = "0x121F46C", VA = "0x121F46C")]
			set
			{
			}
		}

		[Token(Token = "0x170001AF")]
		public bool HasDifferentMaterial
		{
			[Token(Token = "0x6000EFE")]
			[Address(RVA = "0x121F490", Offset = "0x121F490", VA = "0x121F490")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B0")]
		private bool showUVEdge
		{
			[Token(Token = "0x6000EFF")]
			[Address(RVA = "0x121F54C", Offset = "0x121F54C", VA = "0x121F54C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B1")]
		private bool showExplicitU
		{
			[Token(Token = "0x6000F00")]
			[Address(RVA = "0x121F67C", Offset = "0x121F67C", VA = "0x121F67C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B2")]
		private bool showFirstU
		{
			[Token(Token = "0x6000F01")]
			[Address(RVA = "0x121F700", Offset = "0x121F700", VA = "0x121F700")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B3")]
		private bool showSecondU
		{
			[Token(Token = "0x6000F02")]
			[Address(RVA = "0x121F790", Offset = "0x121F790", VA = "0x121F790")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x121F7A4", Offset = "0x121F7A4", VA = "0x121F7A4")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x121F86C", Offset = "0x121F86C", VA = "0x121F86C")]
		public float GetDefinedFirstU(float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x121F8AC", Offset = "0x121F8AC", VA = "0x121F8AC")]
		public float GetDefinedSecondU(float defaultValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x121F908", Offset = "0x121F908", VA = "0x121F908")]
		public MetaCGOptions()
		{
		}
	}
	[Token(Token = "0x2000255")]
	[Obsolete("Use CurvyMetadataBase class instead")]
	public interface ICurvyMetadata
	{
	}
	[Token(Token = "0x2000256")]
	[Obsolete("Use CurvyInterpolatableMetadataBase class instead")]
	public interface ICurvyInterpolatableMetadata : ICurvyMetadata
	{
		[Token(Token = "0x170001B4")]
		object Value
		{
			[Token(Token = "0x6000F07")]
			get;
		}

		[Token(Token = "0x6000F08")]
		object InterpolateObject(ICurvyMetadata b, float f);
	}
	[Token(Token = "0x2000257")]
	[Obsolete("Use CurvyInterpolatableMetadataBase<U> class instead")]
	public interface ICurvyInterpolatableMetadata<U> : ICurvyInterpolatableMetadata, ICurvyMetadata
	{
		[Token(Token = "0x6000F09")]
		U Interpolate(ICurvyMetadata b, float f);
	}
	[Token(Token = "0x2000258")]
	public enum OrientationModeEnum
	{
		[Token(Token = "0x4000C1A")]
		None,
		[Token(Token = "0x4000C1B")]
		Orientation,
		[Token(Token = "0x4000C1C")]
		Tangent
	}
	[Token(Token = "0x2000259")]
	public enum OrientationAxisEnum
	{
		[Token(Token = "0x4000C1E")]
		Up,
		[Token(Token = "0x4000C1F")]
		Down,
		[Token(Token = "0x4000C20")]
		Forward,
		[Token(Token = "0x4000C21")]
		Backward,
		[Token(Token = "0x4000C22")]
		Left,
		[Token(Token = "0x4000C23")]
		Right
	}
	[Token(Token = "0x200025A")]
	public enum ConnectionHeadingEnum
	{
		[Token(Token = "0x4000C25")]
		Minus = -1,
		[Token(Token = "0x4000C26")]
		Sharp,
		[Token(Token = "0x4000C27")]
		Plus,
		[Token(Token = "0x4000C28")]
		Auto
	}
	[Token(Token = "0x200025B")]
	public static class ConnectionHeadingEnumMethods
	{
		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x121F910", Offset = "0x121F910", VA = "0x121F910")]
		public static ConnectionHeadingEnum ResolveAuto(this ConnectionHeadingEnum heading, CurvySplineSegment followUp)
		{
			return default(ConnectionHeadingEnum);
		}
	}
	[Token(Token = "0x200025C")]
	public enum CurvyUpdateMethod
	{
		[Token(Token = "0x4000C2A")]
		Update,
		[Token(Token = "0x4000C2B")]
		LateUpdate,
		[Token(Token = "0x4000C2C")]
		FixedUpdate
	}
	[Token(Token = "0x200025D")]
	public enum CurvyRepeatingOrderEnum
	{
		[Token(Token = "0x4000C2E")]
		Random,
		[Token(Token = "0x4000C2F")]
		Row
	}
	[Token(Token = "0x200025E")]
	public enum CurvyPlane
	{
		[Token(Token = "0x4000C31")]
		XY,
		[Token(Token = "0x4000C32")]
		XZ,
		[Token(Token = "0x4000C33")]
		YZ
	}
	[Token(Token = "0x200025F")]
	public enum CurvyPositionMode
	{
		[Token(Token = "0x4000C35")]
		Relative,
		[Token(Token = "0x4000C36")]
		WorldUnits
	}
	[Token(Token = "0x2000260")]
	[Flags]
	public enum CurvyBezierModeEnum
	{
		[Token(Token = "0x4000C38")]
		None = 0,
		[Token(Token = "0x4000C39")]
		Direction = 1,
		[Token(Token = "0x4000C3A")]
		Length = 2,
		[Token(Token = "0x4000C3B")]
		Connections = 4,
		[Token(Token = "0x4000C3C")]
		Combine = 8
	}
	[Token(Token = "0x2000261")]
	public enum CurvyAdvBezierModeEnum
	{
		[Token(Token = "0x4000C3E")]
		None = 0,
		[Token(Token = "0x4000C3F")]
		Direction = 1,
		[Token(Token = "0x4000C40")]
		Length = 2,
		[Token(Token = "0x4000C41")]
		Combine = 8
	}
	[Token(Token = "0x2000262")]
	public enum CurvyInterpolation
	{
		[Token(Token = "0x4000C43")]
		Linear,
		[Token(Token = "0x4000C44")]
		CatmullRom,
		[Token(Token = "0x4000C45")]
		TCB,
		[Token(Token = "0x4000C46")]
		Bezier
	}
	[Token(Token = "0x2000263")]
	public enum CurvyClamping
	{
		[Token(Token = "0x4000C48")]
		Clamp,
		[Token(Token = "0x4000C49")]
		Loop,
		[Token(Token = "0x4000C4A")]
		PingPong
	}
	[Token(Token = "0x2000264")]
	public enum CurvyOrientation
	{
		[Token(Token = "0x4000C4C")]
		None,
		[Token(Token = "0x4000C4D")]
		Dynamic,
		[Token(Token = "0x4000C4E")]
		Static
	}
	[Token(Token = "0x2000265")]
	public enum CurvyOrientationSwirl
	{
		[Token(Token = "0x4000C50")]
		None,
		[Token(Token = "0x4000C51")]
		Segment,
		[Token(Token = "0x4000C52")]
		AnchorGroup,
		[Token(Token = "0x4000C53")]
		AnchorGroupAbs
	}
	[Token(Token = "0x2000266")]
	public enum CurvySplineGizmos
	{
		[Token(Token = "0x4000C55")]
		None = 0,
		[Token(Token = "0x4000C56")]
		Curve = 2,
		[Token(Token = "0x4000C57")]
		Approximation = 4,
		[Token(Token = "0x4000C58")]
		Tangents = 8,
		[Token(Token = "0x4000C59")]
		Orientation = 16,
		[Token(Token = "0x4000C5A")]
		Labels = 32,
		[Token(Token = "0x4000C5B")]
		Metadata = 64,
		[Token(Token = "0x4000C5C")]
		Bounds = 128,
		[Token(Token = "0x4000C5D")]
		All = 65535
	}
	[Token(Token = "0x2000267")]
	[ExecuteInEditMode]
	[HelpURL("https://curvyeditor.com/doclink/curvyconnection")]
	public class CurvyConnection : MonoBehaviour, ISerializationCallbackReceiver
	{
		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Hide]
		private List<CurvySplineSegment> m_ControlPoints;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ReadOnlyCollection<CurvySplineSegment> readOnlyControlPoints;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Couple<Vector3, Quaternion> processedConnectionCoordinates;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<CurvySplineSegment, Couple<Vector3, Quaternion>> processedControlPointsCoordinates;

		[Token(Token = "0x170001B5")]
		public ReadOnlyCollection<CurvySplineSegment> ControlPointsList
		{
			[Token(Token = "0x6000F0B")]
			[Address(RVA = "0x121F9E8", Offset = "0x121F9E8", VA = "0x121F9E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B6")]
		public int Count
		{
			[Token(Token = "0x6000F0C")]
			[Address(RVA = "0x121FA48", Offset = "0x121FA48", VA = "0x121FA48")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001B7")]
		public CurvySplineSegment this[int idx]
		{
			[Token(Token = "0x6000F0D")]
			[Address(RVA = "0x121FA90", Offset = "0x121FA90", VA = "0x121FA90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0x121FAE8", Offset = "0x121FAE8", VA = "0x121FAE8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0x121FDC8", Offset = "0x121FDC8", VA = "0x121FDC8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0x121FE6C", Offset = "0x121FE6C", VA = "0x121FE6C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x1220394", Offset = "0x1220394", VA = "0x1220394")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x12203BC", Offset = "0x12203BC", VA = "0x12203BC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0x12203E4", Offset = "0x12203E4", VA = "0x12203E4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x1220594", Offset = "0x1220594", VA = "0x1220594")]
		public static CurvyConnection Create(params CurvySplineSegment[] controlPoints)
		{
			return null;
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0x1220738", Offset = "0x1220738", VA = "0x1220738")]
		public void AddControlPoints(params CurvySplineSegment[] controlPoints)
		{
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0x122097C", Offset = "0x122097C", VA = "0x122097C")]
		public void AutoSetFollowUp()
		{
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0x1220BB8", Offset = "0x1220BB8", VA = "0x1220BB8")]
		public void RemoveControlPoint(CurvySplineSegment controlPoint, bool destroySelfIfEmpty = true)
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0x1220C90", Offset = "0x1220C90", VA = "0x1220C90")]
		public void Delete()
		{
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0x1220D14", Offset = "0x1220D14", VA = "0x1220D14")]
		public List<CurvySplineSegment> OtherControlPoints(CurvySplineSegment source)
		{
			return null;
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x1220DC0", Offset = "0x1220DC0", VA = "0x1220DC0")]
		public void SetSynchronisationPositionAndRotation(Vector3 referencePosition, Quaternion referenceRotation)
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x121FE94", Offset = "0x121FE94", VA = "0x121FE94")]
		private void DoUpdate()
		{
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0x12210CC", Offset = "0x12210CC", VA = "0x12210CC")]
		private void OnSceneLoaded(Scene arg0, LoadSceneMode arg1)
		{
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x121FB94", Offset = "0x121FB94", VA = "0x121FB94")]
		private void ResetProcessedCoordinates()
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x1221268", Offset = "0x1221268", VA = "0x1221268", Slot = "4")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x1221368", Offset = "0x1221368", VA = "0x1221368", Slot = "5")]
		public void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x1221468", Offset = "0x1221468", VA = "0x1221468")]
		public CurvyConnection()
		{
		}
	}
	[Token(Token = "0x2000269")]
	public class CurvyEventArgs : EventArgs
	{
		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MonoBehaviour Sender;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly object Data;

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x1221608", Offset = "0x1221608", VA = "0x1221608")]
		public CurvyEventArgs(MonoBehaviour sender, object data)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200026A")]
	public class CurvySplineEvent : UnityEventEx<CurvySplineEventArgs>
	{
		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x1221678", Offset = "0x1221678", VA = "0x1221678")]
		public CurvySplineEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200026B")]
	public class CurvyControlPointEvent : UnityEventEx<CurvyControlPointEventArgs>
	{
		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x12216C0", Offset = "0x12216C0", VA = "0x12216C0")]
		public CurvyControlPointEvent()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class CurvyControlPointEventArgs : CurvySplineEventArgs
	{
		[Token(Token = "0x200026D")]
		public enum ModeEnum
		{
			[Token(Token = "0x4000C6B")]
			None,
			[Token(Token = "0x4000C6C")]
			AddBefore,
			[Token(Token = "0x4000C6D")]
			AddAfter,
			[Token(Token = "0x4000C6E")]
			Delete
		}

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ModeEnum Mode;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly CurvySplineSegment ControlPoint;

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0x1221708", Offset = "0x1221708", VA = "0x1221708")]
		public CurvyControlPointEventArgs(MonoBehaviour sender, CurvySpline spline, CurvySplineSegment cp, ModeEnum mode = ModeEnum.None, [Optional] object data)
		{
		}
	}
	[Token(Token = "0x200026E")]
	public class CurvySplineEventArgs : CurvyEventArgs
	{
		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly CurvySpline Spline;

		[Token(Token = "0x6000F2A")]
		[Address(RVA = "0x1221748", Offset = "0x1221748", VA = "0x1221748")]
		public CurvySplineEventArgs(MonoBehaviour sender, CurvySpline spline, [Optional] object data)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200026F")]
	public class CurvyCGEvent : UnityEventEx<CurvyCGEventArgs>
	{
		[Token(Token = "0x6000F2B")]
		[Address(RVA = "0x1221770", Offset = "0x1221770", VA = "0x1221770")]
		public CurvyCGEvent()
		{
		}
	}
	[Token(Token = "0x2000270")]
	public class CurvyCGEventArgs : EventArgs
	{
		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly MonoBehaviour Sender;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly CurvyGenerator Generator;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly CGModule Module;

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x12217B8", Offset = "0x12217B8", VA = "0x12217B8")]
		public CurvyCGEventArgs(CGModule module)
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0x1221834", Offset = "0x1221834", VA = "0x1221834")]
		public CurvyCGEventArgs(CurvyGenerator generator, CGModule module)
		{
		}
	}
	[Token(Token = "0x2000271")]
	public static class CurvyGizmoHelper
	{
		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Matrix4x4 Matrix;

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0x12218A8", Offset = "0x12218A8", VA = "0x12218A8")]
		public static void SegmentCurveGizmo(CurvySplineSegment seg, Color col, float stepSize = 0.05f)
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0x1221ADC", Offset = "0x1221ADC", VA = "0x1221ADC")]
		public static void SegmentApproximationGizmo(CurvySplineSegment seg, Color col)
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0x1221DB8", Offset = "0x1221DB8", VA = "0x1221DB8")]
		public static void SegmentOrientationAnchorGizmo(CurvySplineSegment seg, Color col)
		{
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x1221FE4", Offset = "0x1221FE4", VA = "0x1221FE4")]
		public static void SegmentOrientationGizmo(CurvySplineSegment seg, Color col)
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x1222278", Offset = "0x1222278", VA = "0x1222278")]
		public static void SegmentTangentGizmo(CurvySplineSegment seg, Color col)
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x12224D8", Offset = "0x12224D8", VA = "0x12224D8")]
		public static void ControlPointGizmo(CurvySplineSegment cp, bool selected, Color col)
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x1222878", Offset = "0x1222878", VA = "0x1222878")]
		public static void BoundsGizmo(CurvySplineSegment cp, Color col)
		{
		}
	}
	[Token(Token = "0x2000272")]
	[RequireComponent(typeof(PoolManager))]
	[ExecuteInEditMode]
	public class CurvyGlobalManager : DTSingleton<CurvyGlobalManager>
	{
		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool HideManager;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static float SceneViewResolution;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static Color DefaultGizmoColor;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static Color DefaultGizmoSelectionColor;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static CurvyInterpolation DefaultInterpolation;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static float GizmoControlPointSize;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static float GizmoOrientationLength;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static Color GizmoOrientationColor;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static int SplineLayer;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static CurvySplineGizmos Gizmos;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private PoolManager mPoolManager;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ComponentPool mControlPointPool;

		[Token(Token = "0x170001B8")]
		public static bool ShowCurveGizmo
		{
			[Token(Token = "0x6000F36")]
			[Address(RVA = "0x1222AA4", Offset = "0x1222AA4", VA = "0x1222AA4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F37")]
			[Address(RVA = "0x1222B00", Offset = "0x1222B00", VA = "0x1222B00")]
			set
			{
			}
		}

		[Token(Token = "0x170001B9")]
		public static bool ShowApproximationGizmo
		{
			[Token(Token = "0x6000F38")]
			[Address(RVA = "0x1222B70", Offset = "0x1222B70", VA = "0x1222B70")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F39")]
			[Address(RVA = "0x1222BCC", Offset = "0x1222BCC", VA = "0x1222BCC")]
			set
			{
			}
		}

		[Token(Token = "0x170001BA")]
		public static bool ShowTangentsGizmo
		{
			[Token(Token = "0x6000F3A")]
			[Address(RVA = "0x1222C3C", Offset = "0x1222C3C", VA = "0x1222C3C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F3B")]
			[Address(RVA = "0x1222C98", Offset = "0x1222C98", VA = "0x1222C98")]
			set
			{
			}
		}

		[Token(Token = "0x170001BB")]
		public static bool ShowOrientationGizmo
		{
			[Token(Token = "0x6000F3C")]
			[Address(RVA = "0x1222D08", Offset = "0x1222D08", VA = "0x1222D08")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F3D")]
			[Address(RVA = "0x1222D64", Offset = "0x1222D64", VA = "0x1222D64")]
			set
			{
			}
		}

		[Token(Token = "0x170001BC")]
		public static bool ShowLabelsGizmo
		{
			[Token(Token = "0x6000F3E")]
			[Address(RVA = "0x1222DD4", Offset = "0x1222DD4", VA = "0x1222DD4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F3F")]
			[Address(RVA = "0x1222E30", Offset = "0x1222E30", VA = "0x1222E30")]
			set
			{
			}
		}

		[Token(Token = "0x170001BD")]
		public static bool ShowMetadataGizmo
		{
			[Token(Token = "0x6000F40")]
			[Address(RVA = "0x1222EA0", Offset = "0x1222EA0", VA = "0x1222EA0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F41")]
			[Address(RVA = "0x1222EFC", Offset = "0x1222EFC", VA = "0x1222EFC")]
			set
			{
			}
		}

		[Token(Token = "0x170001BE")]
		public static bool ShowBoundsGizmo
		{
			[Token(Token = "0x6000F42")]
			[Address(RVA = "0x1222F6C", Offset = "0x1222F6C", VA = "0x1222F6C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F43")]
			[Address(RVA = "0x1222FC8", Offset = "0x1222FC8", VA = "0x1222FC8")]
			set
			{
			}
		}

		[Token(Token = "0x170001BF")]
		public PoolManager PoolManager
		{
			[Token(Token = "0x6000F44")]
			[Address(RVA = "0x1223038", Offset = "0x1223038", VA = "0x1223038")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C0")]
		public ComponentPool ControlPointPool
		{
			[Token(Token = "0x6000F45")]
			[Address(RVA = "0x12230CC", Offset = "0x12230CC", VA = "0x12230CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C1")]
		public CurvyConnection[] Connections
		{
			[Token(Token = "0x6000F46")]
			[Address(RVA = "0x12230D4", Offset = "0x12230D4", VA = "0x12230D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x122311C", Offset = "0x122311C", VA = "0x122311C")]
		public CurvyConnection[] GetContainingConnections(params CurvySpline[] splines)
		{
			return null;
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0x1223998", Offset = "0x1223998", VA = "0x1223998", Slot = "5")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x1223B50", Offset = "0x1223B50", VA = "0x1223B50")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x1223BC8", Offset = "0x1223BC8", VA = "0x1223BC8")]
		[RuntimeInitializeOnLoadMethod]
		private static void LoadRuntimeSettings()
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x1223EF4", Offset = "0x1223EF4", VA = "0x1223EF4")]
		public static void SaveRuntimeSettings()
		{
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0x12241A0", Offset = "0x12241A0", VA = "0x12241A0", Slot = "7")]
		public override void MergeDoubleLoaded(IDTSingleton newInstance)
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0x12242B8", Offset = "0x12242B8", VA = "0x12242B8")]
		public CurvyGlobalManager()
		{
		}
	}
	[Token(Token = "0x2000273")]
	[Obsolete("Use CurvyInterpolatableMetadataBase<T> class instead")]
	[ExecuteInEditMode]
	public abstract class CurvyInterpolatableMetadataBase : CurvyMetadataBase, ICurvyInterpolatableMetadata, ICurvyMetadata
	{
		[Token(Token = "0x170001C2")]
		[Obsolete("Use CurvyInterpolatableMetadataBase<T>.MetaDataValue instead")]
		public abstract object Value
		{
			[Token(Token = "0x6000F4F")]
			get;
		}

		[Token(Token = "0x6000F50")]
		[Obsolete("Use CurvyInterpolatableMetadataBase<T>.Interpolate instead")]
		public abstract object InterpolateObject(ICurvyMetadata b, float f);

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0x12253C8", Offset = "0x12253C8", VA = "0x12253C8")]
		protected CurvyInterpolatableMetadataBase()
		{
		}
	}
	[Token(Token = "0x2000274")]
	[ExecuteInEditMode]
	public abstract class CurvyInterpolatableMetadataBase<T> : CurvyInterpolatableMetadataBase, ICurvyInterpolatableMetadata<T>, ICurvyInterpolatableMetadata, ICurvyMetadata
	{
		[Token(Token = "0x170001C3")]
		public abstract T MetaDataValue
		{
			[Token(Token = "0x6000F52")]
			get;
		}

		[Token(Token = "0x170001C4")]
		[Obsolete("Use MetaDataValue instead")]
		public override object Value
		{
			[Token(Token = "0x6000F54")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F53")]
		public abstract T Interpolate(CurvyInterpolatableMetadataBase<T> nextMetadata, float interpolationTime);

		[Token(Token = "0x6000F55")]
		[Obsolete("Use Interpolate(CurvyInterpolatableMetadataBase<T>, float) instead")]
		public override object InterpolateObject(ICurvyMetadata b, float f)
		{
			return null;
		}

		[Token(Token = "0x6000F56")]
		[Obsolete("Use Interpolate(CurvyInterpolatableMetadataBase<T>, float) instead")]
		public T Interpolate(ICurvyMetadata b, float f)
		{
			return (T)null;
		}

		[Token(Token = "0x6000F57")]
		protected CurvyInterpolatableMetadataBase()
		{
		}
	}
	[Token(Token = "0x2000275")]
	[ExecuteInEditMode]
	public class CurvyMetadataBase : MonoBehaviour, ICurvyMetadata
	{
		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CurvySplineSegment mCP;

		[Token(Token = "0x170001C5")]
		public CurvySplineSegment ControlPoint
		{
			[Token(Token = "0x6000F58")]
			[Address(RVA = "0x12253D8", Offset = "0x12253D8", VA = "0x12253D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C6")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6000F59")]
			[Address(RVA = "0x12253E0", Offset = "0x12253E0", VA = "0x12253E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0x122545C", Offset = "0x122545C", VA = "0x122545C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0x1225518", Offset = "0x1225518", VA = "0x1225518")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F5C")]
		public T GetPreviousData<T>(bool autoCreate = true, bool segmentsOnly = true, bool useFollowUp = false) where T : MonoBehaviour, ICurvyMetadata
		{
			return null;
		}

		[Token(Token = "0x6000F5D")]
		public T GetNextData<T>(bool autoCreate = true, bool segmentsOnly = true, bool useFollowUp = false) where T : MonoBehaviour, ICurvyMetadata
		{
			return null;
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0x122558C", Offset = "0x122558C", VA = "0x122558C")]
		protected void NotifyModification()
		{
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0x12253D0", Offset = "0x12253D0", VA = "0x12253D0")]
		public CurvyMetadataBase()
		{
		}
	}
	[Token(Token = "0x2000276")]
	[AttributeUsage(AttributeTargets.Field, Inherited = true, AllowMultiple = false)]
	public class CGResourceManagerAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly string ResourceName;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool ReadOnly;

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0x1225620", Offset = "0x1225620", VA = "0x1225620")]
		public CGResourceManagerAttribute(string resourceName)
		{
		}
	}
	[Token(Token = "0x2000277")]
	[AttributeUsage(AttributeTargets.Field, Inherited = true, AllowMultiple = false)]
	public sealed class CGResourceCollectionManagerAttribute : CGResourceManagerAttribute
	{
		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool ShowCount;

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0x1225684", Offset = "0x1225684", VA = "0x1225684")]
		public CGResourceCollectionManagerAttribute(string resourceName)
		{
		}
	}
	[Token(Token = "0x2000278")]
	[AttributeUsage(AttributeTargets.Field, Inherited = true, AllowMultiple = false)]
	public sealed class CGDataReferenceSelectorAttribute : DTPropertyAttribute
	{
		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly Type DataType;

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0x12256A0", Offset = "0x12256A0", VA = "0x12256A0")]
		public CGDataReferenceSelectorAttribute(Type dataType)
		{
		}
	}
	[Token(Token = "0x2000279")]
	[HelpURL("https://curvyeditor.com/doclink/curvyshape")]
	[RequireComponent(typeof(CurvySpline))]
	[ExecuteInEditMode]
	public class CurvyShape : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Label("Plane", "")]
		[SerializeField]
		private CurvyPlane m_Plane;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[HideInInspector]
		private bool m_Persistent;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<CurvyShapeInfo, Type> mShapeDefs;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CurvySpline mSpline;

		[NonSerialized]
		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool Dirty;

		[Token(Token = "0x170001C7")]
		public CurvyPlane Plane
		{
			[Token(Token = "0x6000F63")]
			[Address(RVA = "0x1225704", Offset = "0x1225704", VA = "0x1225704")]
			get
			{
				return default(CurvyPlane);
			}
			[Token(Token = "0x6000F64")]
			[Address(RVA = "0x122570C", Offset = "0x122570C", VA = "0x122570C")]
			set
			{
			}
		}

		[Token(Token = "0x170001C8")]
		public bool Persistent
		{
			[Token(Token = "0x6000F65")]
			[Address(RVA = "0x1225728", Offset = "0x1225728", VA = "0x1225728")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F66")]
			[Address(RVA = "0x1225730", Offset = "0x1225730", VA = "0x1225730")]
			set
			{
			}
		}

		[Token(Token = "0x170001C9")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6000F67")]
			[Address(RVA = "0x122575C", Offset = "0x122575C", VA = "0x122575C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CA")]
		public static Dictionary<CurvyShapeInfo, Type> ShapeDefinitions
		{
			[Token(Token = "0x6000F77")]
			[Address(RVA = "0x1227684", Offset = "0x1227684", VA = "0x1227684")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0x12257EC", Offset = "0x12257EC", VA = "0x12257EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0x1225904", Offset = "0x1225904", VA = "0x1225904", Slot = "5")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0x122591C", Offset = "0x122591C", VA = "0x122591C")]
		public void Delete()
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x1225820", Offset = "0x1225820", VA = "0x1225820")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x12259F0", Offset = "0x12259F0", VA = "0x12259F0")]
		public CurvyShape Replace(string menuName)
		{
			return null;
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0x1225D54", Offset = "0x1225D54", VA = "0x1225D54")]
		protected void PrepareSpline(CurvyInterpolation interpolation, CurvyOrientation orientation = CurvyOrientation.Dynamic, int cachedensity = 50, bool closed = true)
		{
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0x1225FB4", Offset = "0x1225FB4", VA = "0x1225FB4")]
		protected void SetPosition(int no, Vector3 position)
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0x1226268", Offset = "0x1226268", VA = "0x1226268")]
		protected void SetRotation(int no, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0x12264D4", Offset = "0x12264D4", VA = "0x12264D4")]
		protected void SetBezierHandles(int no, float distanceFrag)
		{
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0x12264DC", Offset = "0x12264DC", VA = "0x12264DC")]
		protected void SetBezierHandles(int no, float inDistanceFrag, float outDistanceFrag)
		{
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0x1226808", Offset = "0x1226808", VA = "0x1226808")]
		protected void SetBezierHandles(int no, Vector3 i, Vector3 o, Space space = Space.World)
		{
		}

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x122677C", Offset = "0x122677C", VA = "0x122677C")]
		public static void SetBezierHandles(float distanceFrag, bool setIn, bool setOut, params CurvySplineSegment[] controlPoints)
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0x1226DC0", Offset = "0x1226DC0", VA = "0x1226DC0")]
		protected void SetCGHardEdges(params int[] controlPoints)
		{
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0x1226F14", Offset = "0x1226F14", VA = "0x1226F14", Slot = "6")]
		protected virtual void ApplyShape()
		{
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0x1226F18", Offset = "0x1226F18", VA = "0x1226F18")]
		protected void PrepareControlPoints(int count)
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0x12277A8", Offset = "0x12277A8", VA = "0x12277A8")]
		public static List<string> GetShapesMenuNames(bool only2D = false)
		{
			return null;
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0x1227A1C", Offset = "0x1227A1C", VA = "0x1227A1C")]
		public static List<string> GetShapesMenuNames(Type currentShapeType, out int currentIndex, bool only2D = false)
		{
			return null;
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0x1227D38", Offset = "0x1227D38", VA = "0x1227D38")]
		public static string GetShapeName(Type shapeType)
		{
			return null;
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0x1225B3C", Offset = "0x1225B3C", VA = "0x1225B3C")]
		public static Type GetShapeType(string menuName)
		{
			return null;
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0x1225974", Offset = "0x1225974", VA = "0x1225974")]
		private void applyPlane()
		{
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0x1227F18", Offset = "0x1227F18", VA = "0x1227F18")]
		private void applyRotation(Quaternion q)
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0x12281F4", Offset = "0x12281F4", VA = "0x12281F4")]
		public CurvyShape()
		{
		}
	}
	[Token(Token = "0x200027A")]
	[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = true)]
	public sealed class CurvyShapeInfo : Attribute
	{
		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Name;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly bool Is2D;

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0x1228290", Offset = "0x1228290", VA = "0x1228290")]
		public CurvyShapeInfo(string name, bool is2D = true)
		{
		}
	}
	[Token(Token = "0x200027B")]
	public class CurvyShape2D : CurvyShape
	{
		[Token(Token = "0x6000F81")]
		[Address(RVA = "0x12282C0", Offset = "0x12282C0", VA = "0x12282C0")]
		public CurvyShape2D()
		{
		}
	}
	[Token(Token = "0x200027C")]
	[ExecuteInEditMode]
	[AddComponentMenu("Curvy/Curvy Spline", 1)]
	[HelpURL("https://curvyeditor.com/doclink/curvyspline")]
	public class CurvySpline : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x4000C8C")]
		public const string VERSION = "6.2.0";

		[Token(Token = "0x4000C8D")]
		public const string APIVERSION = "620";

		[Token(Token = "0x4000C8E")]
		public const string WEBROOT = "https://curvyeditor.com/";

		[Token(Token = "0x4000C8F")]
		public const string DOCLINK = "https://curvyeditor.com/doclink/";

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[SerializeField]
		private List<CurvySplineSegment> ControlPoints;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public bool ShowGizmos;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[FormerlySerializedAs("Interpolation")]
		[Tooltip("Interpolation Method")]
		[Section("General", true, false, 100, HelpURL = "https://curvyeditor.com/doclink/curvyspline_general")]
		[SerializeField]
		private CurvyInterpolation m_Interpolation;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[FieldAction("CBCheck2DPlanar", ActionAttribute.ActionEnum.Callback)]
		[Tooltip("Restrict Control Points to local X/Y axis")]
		[SerializeField]
		private bool m_RestrictTo2D;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[SerializeField]
		[FormerlySerializedAs("Closed")]
		private bool m_Closed;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		[Tooltip("Handle End Control Points automatically?")]
		[FieldCondition("canHaveManualEndCP", Action = ActionAttribute.ActionEnum.Enable)]
		[SerializeField]
		[FormerlySerializedAs("AutoEndTangents")]
		private bool m_AutoEndTangents;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[FormerlySerializedAs("Orientation")]
		[Tooltip("Orientation Flow")]
		private CurvyOrientation m_Orientation;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Section("Global Bezier Options", true, false, 100, HelpURL = "https://curvyeditor.com/doclink/curvyspline_bezier")]
		[GroupCondition("m_Interpolation", CurvyInterpolation.Bezier, false)]
		[RangeEx(0f, 1f, "Default Distance %", "Handle length by distance to neighbours")]
		[SerializeField]
		private float m_AutoHandleDistance;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[FormerlySerializedAs("Tension")]
		[SerializeField]
		[GroupCondition("m_Interpolation", CurvyInterpolation.TCB, false)]
		[GroupAction("TCBOptionsGUI", ActionAttribute.ActionEnum.Callback, Position = ActionAttribute.ActionPositionEnum.Below)]
		[Section("Global TCB Options", true, false, 100, HelpURL = "https://curvyeditor.com/doclink/curvyspline_tcb")]
		private float m_Tension;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[FormerlySerializedAs("Continuity")]
		private float m_Continuity;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[FormerlySerializedAs("Bias")]
		private float m_Bias;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Section("Advanced Settings", true, false, 100, HelpURL = "https://curvyeditor.com/doclink/curvyspline_advanced")]
		[SerializeField]
		[Label("Color", "Gizmo color")]
		[FieldAction("ShowGizmoGUI", ActionAttribute.ActionEnum.Callback, Position = ActionAttribute.ActionPositionEnum.Above)]
		private Color m_GizmoColor;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		[Label("Active Color", "Selected Gizmo color")]
		private Color m_GizmoSelectionColor;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		[Tooltip("Defines how densely the cached points are. When the value is 100, the number of cached points per world distance unit is equal to the spline's MaxPointsPerUnit")]
		[FormerlySerializedAs("Granularity")]
		[RangeEx(1f, 100f, "", "")]
		private int m_CacheDensity;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[Tooltip("The maximum number of sampling points per world distance unit. Sampling is used in caching or shape extrusion for example")]
		private float m_MaxPointsPerUnit;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		[Tooltip("Use a GameObject pool at runtime")]
		private bool m_UsePooling;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		[Tooltip("Use threading where applicable. Threading is is currently not supported when targetting WebGL and Universal Windows Platform")]
		[SerializeField]
		private bool m_UseThreading;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
		[SerializeField]
		[FormerlySerializedAs("AutoRefresh")]
		[Tooltip("Refresh when Control Point position change?")]
		private bool m_CheckTransform;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private CurvyUpdateMethod m_UpdateIn;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		[SortOrder(0)]
		[Group("Events", Expanded = false, Sort = 1000, HelpURL = "https://curvyeditor.com/doclink/curvyspline_events")]
		protected CurvySplineEvent m_OnRefresh;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SortOrder(1)]
		[SerializeField]
		[Group("Events", Sort = 1000)]
		protected CurvySplineEvent m_OnAfterControlPointChanges;

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Group("Events", Sort = 1000)]
		[SortOrder(2)]
		[SerializeField]
		protected CurvyControlPointEvent m_OnBeforeControlPointAdd;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Group("Events", Sort = 1000)]
		[SortOrder(3)]
		[SerializeField]
		protected CurvyControlPointEvent m_OnAfterControlPointAdd;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[Group("Events", Sort = 1000)]
		[SortOrder(4)]
		protected CurvyControlPointEvent m_OnBeforeControlPointDelete;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool mIsInitialized;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		private bool isStarted;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
		private bool sendOnRefreshEventNextUpdate;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private readonly object controlPointsRelationshipCacheLock;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private List<CurvySplineSegment> mSegments;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private ReadOnlyCollection<CurvySplineSegment> readOnlyControlPoints;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float length;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int mCacheSize;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Bounds? mBounds;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private bool mDirtyCurve;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
		private bool mDirtyOrientation;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private HashSet<CurvySplineSegment> dirtyControlPointsMinimalSet;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private List<CurvySplineSegment> dirtyCpsExtendedList;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private bool allControlPointsAreDirty;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private ThreadPoolWorker<CurvySplineSegment> mThreadWorker;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private readonly CurvySplineEventArgs defaultSplineEventArgs;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private readonly CurvyControlPointEventArgs defaultAddAfterEventArgs;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private readonly CurvyControlPointEventArgs defaultDeleteEventArgs;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private CurvySplineSegment _lastDistToSeg;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private readonly Action<CurvySplineSegment> refreshCurveAction;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3 lastProcessedPosition;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private Quaternion lastProcessedRotation;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private Vector3 lastProcessedScale;

		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private bool globalCoordinatesChangedThisFrame;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x169")]
		private bool isCpsRelationshipCacheValid;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private CurvySplineSegment firstSegment;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private CurvySplineSegment lastSegment;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private CurvySplineSegment firstVisibleControlPoint;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private CurvySplineSegment lastVisibleControlPoint;

		[Token(Token = "0x170001CB")]
		public CurvyInterpolation Interpolation
		{
			[Token(Token = "0x6000F83")]
			[Address(RVA = "0x12286D4", Offset = "0x12286D4", VA = "0x12286D4")]
			get
			{
				return default(CurvyInterpolation);
			}
			[Token(Token = "0x6000F84")]
			[Address(RVA = "0x1225EB4", Offset = "0x1225EB4", VA = "0x1225EB4")]
			set
			{
			}
		}

		[Token(Token = "0x170001CC")]
		public bool RestrictTo2D
		{
			[Token(Token = "0x6000F85")]
			[Address(RVA = "0x1228A64", Offset = "0x1228A64", VA = "0x1228A64")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F86")]
			[Address(RVA = "0x1225F90", Offset = "0x1225F90", VA = "0x1225F90")]
			set
			{
			}
		}

		[Token(Token = "0x170001CD")]
		public float AutoHandleDistance
		{
			[Token(Token = "0x6000F87")]
			[Address(RVA = "0x1228A6C", Offset = "0x1228A6C", VA = "0x1228A6C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F88")]
			[Address(RVA = "0x1228A74", Offset = "0x1228A74", VA = "0x1228A74")]
			set
			{
			}
		}

		[Token(Token = "0x170001CE")]
		public bool Closed
		{
			[Token(Token = "0x6000F89")]
			[Address(RVA = "0x1228AA8", Offset = "0x1228AA8", VA = "0x1228AA8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F8A")]
			[Address(RVA = "0x1225F4C", Offset = "0x1225F4C", VA = "0x1225F4C")]
			set
			{
			}
		}

		[Token(Token = "0x170001CF")]
		public bool AutoEndTangents
		{
			[Token(Token = "0x6000F8B")]
			[Address(RVA = "0x1228AB0", Offset = "0x1228AB0", VA = "0x1228AB0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F8C")]
			[Address(RVA = "0x1228A00", Offset = "0x1228A00", VA = "0x1228A00")]
			set
			{
			}
		}

		[Token(Token = "0x170001D0")]
		public CurvyOrientation Orientation
		{
			[Token(Token = "0x6000F8D")]
			[Address(RVA = "0x1228ADC", Offset = "0x1228ADC", VA = "0x1228ADC")]
			get
			{
				return default(CurvyOrientation);
			}
			[Token(Token = "0x6000F8E")]
			[Address(RVA = "0x1225EF4", Offset = "0x1225EF4", VA = "0x1225EF4")]
			set
			{
			}
		}

		[Token(Token = "0x170001D1")]
		public CurvyUpdateMethod UpdateIn
		{
			[Token(Token = "0x6000F8F")]
			[Address(RVA = "0x1228AE4", Offset = "0x1228AE4", VA = "0x1228AE4")]
			get
			{
				return default(CurvyUpdateMethod);
			}
			[Token(Token = "0x6000F90")]
			[Address(RVA = "0x1228AEC", Offset = "0x1228AEC", VA = "0x1228AEC")]
			set
			{
			}
		}

		[Token(Token = "0x170001D2")]
		public Color GizmoColor
		{
			[Token(Token = "0x6000F91")]
			[Address(RVA = "0x1228B00", Offset = "0x1228B00", VA = "0x1228B00")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000F92")]
			[Address(RVA = "0x1228B0C", Offset = "0x1228B0C", VA = "0x1228B0C")]
			set
			{
			}
		}

		[Token(Token = "0x170001D3")]
		public Color GizmoSelectionColor
		{
			[Token(Token = "0x6000F93")]
			[Address(RVA = "0x1228B5C", Offset = "0x1228B5C", VA = "0x1228B5C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000F94")]
			[Address(RVA = "0x1228B68", Offset = "0x1228B68", VA = "0x1228B68")]
			set
			{
			}
		}

		[Token(Token = "0x170001D4")]
		public int CacheDensity
		{
			[Token(Token = "0x6000F95")]
			[Address(RVA = "0x1228BB8", Offset = "0x1228BB8", VA = "0x1228BB8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000F96")]
			[Address(RVA = "0x1225F18", Offset = "0x1225F18", VA = "0x1225F18")]
			set
			{
			}
		}

		[Token(Token = "0x170001D5")]
		public float MaxPointsPerUnit
		{
			[Token(Token = "0x6000F97")]
			[Address(RVA = "0x1228BC0", Offset = "0x1228BC0", VA = "0x1228BC0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000F98")]
			[Address(RVA = "0x1228BC8", Offset = "0x1228BC8", VA = "0x1228BC8")]
			set
			{
			}
		}

		[Token(Token = "0x170001D6")]
		public bool UsePooling
		{
			[Token(Token = "0x6000F99")]
			[Address(RVA = "0x1228C04", Offset = "0x1228C04", VA = "0x1228C04")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F9A")]
			[Address(RVA = "0x1228C0C", Offset = "0x1228C0C", VA = "0x1228C0C")]
			set
			{
			}
		}

		[Token(Token = "0x170001D7")]
		public bool UseThreading
		{
			[Token(Token = "0x6000F9B")]
			[Address(RVA = "0x1228C24", Offset = "0x1228C24", VA = "0x1228C24")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F9C")]
			[Address(RVA = "0x1228C2C", Offset = "0x1228C2C", VA = "0x1228C2C")]
			set
			{
			}
		}

		[Token(Token = "0x170001D8")]
		public bool CheckTransform
		{
			[Token(Token = "0x6000F9D")]
			[Address(RVA = "0x1228C44", Offset = "0x1228C44", VA = "0x1228C44")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F9E")]
			[Address(RVA = "0x1228C4C", Offset = "0x1228C4C", VA = "0x1228C4C")]
			set
			{
			}
		}

		[Token(Token = "0x170001D9")]
		public float Tension
		{
			[Token(Token = "0x6000F9F")]
			[Address(RVA = "0x1228C70", Offset = "0x1228C70", VA = "0x1228C70")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FA0")]
			[Address(RVA = "0x1228C78", Offset = "0x1228C78", VA = "0x1228C78")]
			set
			{
			}
		}

		[Token(Token = "0x170001DA")]
		public float Continuity
		{
			[Token(Token = "0x6000FA1")]
			[Address(RVA = "0x1228C98", Offset = "0x1228C98", VA = "0x1228C98")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FA2")]
			[Address(RVA = "0x1228CA0", Offset = "0x1228CA0", VA = "0x1228CA0")]
			set
			{
			}
		}

		[Token(Token = "0x170001DB")]
		public float Bias
		{
			[Token(Token = "0x6000FA3")]
			[Address(RVA = "0x1228CC0", Offset = "0x1228CC0", VA = "0x1228CC0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FA4")]
			[Address(RVA = "0x1228CC8", Offset = "0x1228CC8", VA = "0x1228CC8")]
			set
			{
			}
		}

		[Token(Token = "0x170001DC")]
		public bool IsInitialized
		{
			[Token(Token = "0x6000FA5")]
			[Address(RVA = "0x1228CE8", Offset = "0x1228CE8", VA = "0x1228CE8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001DD")]
		public Bounds Bounds
		{
			[Token(Token = "0x6000FA6")]
			[Address(RVA = "0x1228CF0", Offset = "0x1228CF0", VA = "0x1228CF0")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x170001DE")]
		public int Count
		{
			[Token(Token = "0x6000FA7")]
			[Address(RVA = "0x1228F14", Offset = "0x1228F14", VA = "0x1228F14")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001DF")]
		public int ControlPointCount
		{
			[Token(Token = "0x6000FA8")]
			[Address(RVA = "0x12266A8", Offset = "0x12266A8", VA = "0x12266A8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E0")]
		public int CacheSize
		{
			[Token(Token = "0x6000FA9")]
			[Address(RVA = "0x1229318", Offset = "0x1229318", VA = "0x1229318")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E1")]
		public float Length
		{
			[Token(Token = "0x6000FAA")]
			[Address(RVA = "0x12293F0", Offset = "0x12293F0", VA = "0x12293F0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001E2")]
		public bool Dirty
		{
			[Token(Token = "0x6000FAB")]
			[Address(RVA = "0x1229290", Offset = "0x1229290", VA = "0x1229290")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001E3")]
		public CurvySplineSegment this[int idx]
		{
			[Token(Token = "0x6000FAC")]
			[Address(RVA = "0x1228F70", Offset = "0x1228F70", VA = "0x1228F70")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E4")]
		public ReadOnlyCollection<CurvySplineSegment> ControlPointsList
		{
			[Token(Token = "0x6000FAD")]
			[Address(RVA = "0x1226048", Offset = "0x1226048", VA = "0x1226048")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E5")]
		[CanBeNull]
		public CurvySplineSegment FirstVisibleControlPoint
		{
			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0x12294E8", Offset = "0x12294E8", VA = "0x12294E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E6")]
		[CanBeNull]
		public CurvySplineSegment LastVisibleControlPoint
		{
			[Token(Token = "0x6000FAF")]
			[Address(RVA = "0x1227308", Offset = "0x1227308", VA = "0x1227308")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E7")]
		public CurvySplineSegment FirstSegment
		{
			[Token(Token = "0x6000FB0")]
			[Address(RVA = "0x1229AA0", Offset = "0x1229AA0", VA = "0x1229AA0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E8")]
		public CurvySplineSegment LastSegment
		{
			[Token(Token = "0x6000FB1")]
			[Address(RVA = "0x1229AC8", Offset = "0x1229AC8", VA = "0x1229AC8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E9")]
		public CurvySpline NextSpline
		{
			[Token(Token = "0x6000FB2")]
			[Address(RVA = "0x1229AF0", Offset = "0x1229AF0", VA = "0x1229AF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EA")]
		public CurvySpline PreviousSpline
		{
			[Token(Token = "0x6000FB3")]
			[Address(RVA = "0x1229BB0", Offset = "0x1229BB0", VA = "0x1229BB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EB")]
		public bool GlobalCoordinatesChangedThisFrame
		{
			[Token(Token = "0x6000FB4")]
			[Address(RVA = "0x1229C70", Offset = "0x1229C70", VA = "0x1229C70")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001EC")]
		public Action<CurvySpline> OnGlobalCoordinatesChanged
		{
			[Token(Token = "0x6000FB5")]
			[Address(RVA = "0x1229C78", Offset = "0x1229C78", VA = "0x1229C78")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FB6")]
			[Address(RVA = "0x1229C80", Offset = "0x1229C80", VA = "0x1229C80")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170001ED")]
		public CurvySplineEvent OnRefresh
		{
			[Token(Token = "0x6000FB7")]
			[Address(RVA = "0x1229C88", Offset = "0x1229C88", VA = "0x1229C88")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FB8")]
			[Address(RVA = "0x1229C90", Offset = "0x1229C90", VA = "0x1229C90")]
			set
			{
			}
		}

		[Token(Token = "0x170001EE")]
		public CurvySplineEvent OnAfterControlPointChanges
		{
			[Token(Token = "0x6000FB9")]
			[Address(RVA = "0x1229CA4", Offset = "0x1229CA4", VA = "0x1229CA4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FBA")]
			[Address(RVA = "0x1229CAC", Offset = "0x1229CAC", VA = "0x1229CAC")]
			set
			{
			}
		}

		[Token(Token = "0x170001EF")]
		public CurvyControlPointEvent OnBeforeControlPointAdd
		{
			[Token(Token = "0x6000FBB")]
			[Address(RVA = "0x1229CC0", Offset = "0x1229CC0", VA = "0x1229CC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FBC")]
			[Address(RVA = "0x1229CC8", Offset = "0x1229CC8", VA = "0x1229CC8")]
			set
			{
			}
		}

		[Token(Token = "0x170001F0")]
		public CurvyControlPointEvent OnAfterControlPointAdd
		{
			[Token(Token = "0x6000FBD")]
			[Address(RVA = "0x1229CDC", Offset = "0x1229CDC", VA = "0x1229CDC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FBE")]
			[Address(RVA = "0x1229CE4", Offset = "0x1229CE4", VA = "0x1229CE4")]
			set
			{
			}
		}

		[Token(Token = "0x170001F1")]
		public CurvyControlPointEvent OnBeforeControlPointDelete
		{
			[Token(Token = "0x6000FBF")]
			[Address(RVA = "0x1229CF8", Offset = "0x1229CF8", VA = "0x1229CF8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FC0")]
			[Address(RVA = "0x1229D00", Offset = "0x1229D00", VA = "0x1229D00")]
			set
			{
			}
		}

		[Token(Token = "0x170001F2")]
		private List<CurvySplineSegment> controlPoints
		{
			[Token(Token = "0x600102C")]
			[Address(RVA = "0x1233430", Offset = "0x1233430", VA = "0x1233430")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F3")]
		private List<CurvySplineSegment> Segments
		{
			[Token(Token = "0x6001036")]
			[Address(RVA = "0x12292F0", Offset = "0x12292F0", VA = "0x12292F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0x1228320", Offset = "0x1228320", VA = "0x1228320")]
		public CurvySpline()
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x1229D14", Offset = "0x1229D14", VA = "0x1229D14")]
		public static CurvySpline Create()
		{
			return null;
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x1229EF8", Offset = "0x1229EF8", VA = "0x1229EF8")]
		public static CurvySpline Create(CurvySpline takeOptionsFrom)
		{
			return null;
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0x122A09C", Offset = "0x122A09C", VA = "0x122A09C")]
		public static int CalculateCacheSize(int density, float splineLength, float maxPointsPerUnit)
		{
			return default(int);
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0x122A118", Offset = "0x122A118", VA = "0x122A118")]
		public static float CalculateSamplingPointsPerUnit(int density, float maxPointsPerUnit)
		{
			return default(float);
		}

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x122A1DC", Offset = "0x122A1DC", VA = "0x122A1DC")]
		public static Vector3 Bezier(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0x122A2CC", Offset = "0x122A2CC", VA = "0x122A2CC")]
		[Obsolete("This methods is not used and will be removed in an upcoming version")]
		public static float BezierTangent(float T0, float P0, float P1, float T1, float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0x122A31C", Offset = "0x122A31C", VA = "0x122A31C")]
		public static Vector3 BezierTangent(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x122A408", Offset = "0x122A408", VA = "0x122A408")]
		public static Vector3 CatmullRom(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x122A544", Offset = "0x122A544", VA = "0x122A544")]
		public static Vector3 TCB(Vector3 T0, Vector3 P0, Vector3 P1, Vector3 T1, float f, float FT0, float FC0, float FB0, float FT1, float FC1, float FB1)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x122A770", Offset = "0x122A770", VA = "0x122A770")]
		public Vector3 Interpolate(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x122A778", Offset = "0x122A778", VA = "0x122A778")]
		public Vector3 Interpolate(float tf, CurvyInterpolation interpolation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x122ABC0", Offset = "0x122ABC0", VA = "0x122ABC0")]
		public Vector3 InterpolateFast(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FCD")]
		public T GetMetadata<T>(float tf) where T : UnityEngine.Component, ICurvyMetadata
		{
			return null;
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x122ACB4", Offset = "0x122ACB4", VA = "0x122ACB4")]
		[Obsolete("Use GetMetaData<T> instead")]
		public UnityEngine.Component GetMetadata(Type type, float tf)
		{
			return null;
		}

		[Token(Token = "0x6000FCF")]
		public U GetInterpolatedMetadata<T, U>(float tf) where T : CurvyInterpolatableMetadataBase<U>
		{
			return (U)null;
		}

		[Token(Token = "0x6000FD0")]
		[Obsolete("Use GetInterpolatedMetadata<T, U> instead")]
		public U InterpolateMetadata<T, U>(float tf) where T : UnityEngine.Component, ICurvyInterpolatableMetadata<U>
		{
			return (U)null;
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x122AFEC", Offset = "0x122AFEC", VA = "0x122AFEC")]
		[Obsolete("Use GetInterpolatedMetadata<T, U> instead")]
		public object InterpolateMetadata(Type type, float tf)
		{
			return null;
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x122B188", Offset = "0x122B188", VA = "0x122B188")]
		public Vector3 InterpolateScale(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x122B30C", Offset = "0x122B30C", VA = "0x122B30C")]
		public Vector3 GetOrientationUpFast(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0x122B400", Offset = "0x122B400", VA = "0x122B400")]
		public Quaternion GetOrientationFast(float tf, bool inverse = false)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0x122B594", Offset = "0x122B594", VA = "0x122B594")]
		public Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0x122B654", Offset = "0x122B654", VA = "0x122B654")]
		public Vector3 GetTangent(float tf, Vector3 localPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0x122B864", Offset = "0x122B864", VA = "0x122B864")]
		public Vector3 GetTangentFast(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x122B958", Offset = "0x122B958", VA = "0x122B958")]
		public void InterpolateAndGetTangent(float tf, out Vector3 localPosition, out Vector3 localTangent)
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x122BA84", Offset = "0x122BA84", VA = "0x122BA84")]
		public void InterpolateAndGetTangentFast(float tf, out Vector3 localPosition, out Vector3 localTangent)
		{
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x122BC34", Offset = "0x122BC34", VA = "0x122BC34")]
		public Vector3 GetTangentByDistance(float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x122BCE4", Offset = "0x122BCE4", VA = "0x122BCE4")]
		public Vector3 GetTangentByDistanceFast(float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0x122BD00", Offset = "0x122BD00", VA = "0x122BD00")]
		public Vector3 InterpolateByDistance(float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0x122BD20", Offset = "0x122BD20", VA = "0x122BD20")]
		public Vector3 InterpolateByDistanceFast(float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0x122BD3C", Offset = "0x122BD3C", VA = "0x122BD3C")]
		public float ExtrapolateDistanceToTF(float tf, float distance, float stepSize)
		{
			return default(float);
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0x122BE5C", Offset = "0x122BE5C", VA = "0x122BE5C")]
		public float ExtrapolateDistanceToTFFast(float tf, float distance, float stepSize)
		{
			return default(float);
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0x122BF74", Offset = "0x122BF74", VA = "0x122BF74")]
		public float TFToDistance(float tf, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return default(float);
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0x122BFF8", Offset = "0x122BFF8", VA = "0x122BFF8")]
		public CurvySplineSegment TFToSegment(float tf, out float localF, CurvyClamping clamping)
		{
			return null;
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0x122C29C", Offset = "0x122C29C", VA = "0x122C29C")]
		public CurvySplineSegment TFToSegment(float tf, CurvyClamping clamping)
		{
			return null;
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0x122C2B8", Offset = "0x122C2B8", VA = "0x122C2B8")]
		public CurvySplineSegment TFToSegment(float tf)
		{
			return null;
		}

		[Token(Token = "0x6000FE4")]
		[Address(RVA = "0x122A7EC", Offset = "0x122A7EC", VA = "0x122A7EC")]
		public CurvySplineSegment TFToSegment(float tf, out float localF)
		{
			return null;
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0x122C2D4", Offset = "0x122C2D4", VA = "0x122C2D4")]
		public float SegmentToTF(CurvySplineSegment segment)
		{
			return default(float);
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0x122C2DC", Offset = "0x122C2DC", VA = "0x122C2DC")]
		public float SegmentToTF(CurvySplineSegment segment, float localF)
		{
			return default(float);
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0x122BC50", Offset = "0x122BC50", VA = "0x122BC50")]
		public float DistanceToTF(float distance, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return default(float);
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0x122C84C", Offset = "0x122C84C", VA = "0x122C84C")]
		public CurvySplineSegment DistanceToSegment(float distance, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return null;
		}

		[Token(Token = "0x6000FE9")]
		[Address(RVA = "0x122C488", Offset = "0x122C488", VA = "0x122C488")]
		public CurvySplineSegment DistanceToSegment(float distance, out float localDistance, CurvyClamping clamping = CurvyClamping.Clamp)
		{
			return null;
		}

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0x122C8F0", Offset = "0x122C8F0", VA = "0x122C8F0")]
		[Obsolete("This method is not used anymore, and will be deleted in a future update. Please copy its content to your project if you still need it.")]
		public Vector3 Move(ref float tf, ref int direction, float fDistance, CurvyClamping clamping)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FEB")]
		[Address(RVA = "0x122C93C", Offset = "0x122C93C", VA = "0x122C93C")]
		[Obsolete("This method is not used anymore, and will be deleted in a future update. Please copy its content to your project if you still need it.")]
		public Vector3 MoveFast(ref float tf, ref int direction, float fDistance, CurvyClamping clamping)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0x122C984", Offset = "0x122C984", VA = "0x122C984")]
		[Obsolete("This method is not used anymore, and will be deleted in a future update. Please copy its content to your project if you still need it.")]
		public Vector3 MoveBy(ref float tf, ref int direction, float distance, CurvyClamping clamping, float stepSize = 0.002f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0x122C9D0", Offset = "0x122C9D0", VA = "0x122C9D0")]
		[Obsolete("This method is not used anymore, and will be deleted in a future update. Please copy its content to your project if you still need it.")]
		public Vector3 MoveByFast(ref float tf, ref int direction, float distance, CurvyClamping clamping, float stepSize = 0.002f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0x122CA38", Offset = "0x122CA38", VA = "0x122CA38")]
		[Obsolete("This method is not used anymore, and will be deleted in a future update. Please copy its content to your project if you still need it.")]
		public Vector3 MoveByLengthFast(ref float tf, ref int direction, float distance, CurvyClamping clamping)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0x122CB00", Offset = "0x122CB00", VA = "0x122CB00")]
		[Obsolete("This method is not used anymore, and will be deleted in a future update. Please copy its content to your project if you still need it.")]
		public Vector3 MoveByAngle(ref float tf, ref int direction, float angle, CurvyClamping clamping, float stepSize = 0.002f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0x122CE50", Offset = "0x122CE50", VA = "0x122CE50")]
		[Obsolete("This method is not used anymore, and will be deleted in a future update. Please copy its content to your project if you still need it.")]
		public Vector3 MoveByAngleFast(ref float tf, ref int direction, float angle, CurvyClamping clamping, float stepSize)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x122D190", Offset = "0x122D190", VA = "0x122D190")]
		public float ClampDistance(float distance, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0x122D1C0", Offset = "0x122D1C0", VA = "0x122D1C0")]
		public float ClampDistance(float distance, CurvyClamping clamping, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0x122CAC0", Offset = "0x122CAC0", VA = "0x122CAC0")]
		public float ClampDistance(float distance, ref int dir, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0x122D208", Offset = "0x122D208", VA = "0x122D208")]
		public float ClampDistance(float distance, ref int dir, CurvyClamping clamping, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0x122D260", Offset = "0x122D260", VA = "0x122D260")]
		public CurvySplineSegment Add()
		{
			return null;
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0x122D26C", Offset = "0x122D26C", VA = "0x122D26C")]
		public CurvySplineSegment[] Add(params Vector3[] controlPointsLocalPositions)
		{
			return null;
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0x122D5EC", Offset = "0x122D5EC", VA = "0x122D5EC")]
		public CurvySplineSegment InsertBefore(CurvySplineSegment controlPoint, bool skipRefreshingAndEvents = false)
		{
			return null;
		}

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0x122D88C", Offset = "0x122D88C", VA = "0x122D88C")]
		public CurvySplineSegment InsertBefore(CurvySplineSegment controlPoint, Vector3 globalPosition, bool skipRefreshingAndEvents = false)
		{
			return null;
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0x1227138", Offset = "0x1227138", VA = "0x1227138")]
		public CurvySplineSegment InsertAfter(CurvySplineSegment controlPoint, bool skipRefreshingAndEvents = false)
		{
			return null;
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0x122D454", Offset = "0x122D454", VA = "0x122D454")]
		public CurvySplineSegment InsertAfter(CurvySplineSegment controlPoint, Vector3 globalPosition, bool skipRefreshingAndEvents = false)
		{
			return null;
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x122DF20", Offset = "0x122DF20", VA = "0x122DF20")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0x1227330", Offset = "0x1227330", VA = "0x1227330")]
		public void Delete(CurvySplineSegment controlPoint, bool skipRefreshingAndEvents = false)
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x122E470", Offset = "0x122E470", VA = "0x122E470")]
		public Vector3[] GetApproximation(Space space = Space.Self)
		{
			return null;
		}

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0x122E604", Offset = "0x122E604", VA = "0x122E604")]
		public Vector3[] GetApproximationT()
		{
			return null;
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0x122E6EC", Offset = "0x122E6EC", VA = "0x122E6EC")]
		public Vector3[] GetApproximationUpVectors()
		{
			return null;
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0x122E7D4", Offset = "0x122E7D4", VA = "0x122E7D4")]
		public float GetNearestPointTF(Vector3 localPosition)
		{
			return default(float);
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0x122E834", Offset = "0x122E834", VA = "0x122E834")]
		public float GetNearestPointTF(Vector3 localPosition, out Vector3 nearest)
		{
			return default(float);
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0x122E860", Offset = "0x122E860", VA = "0x122E860")]
		public float GetNearestPointTF(Vector3 localPosition, int startSegmentIndex = 0, int stopSegmentIndex = -1)
		{
			return default(float);
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0x122E808", Offset = "0x122E808", VA = "0x122E808")]
		public float GetNearestPointTF(Vector3 localPosition, out Vector3 nearest, int startSegmentIndex = 0, int stopSegmentIndex = -1)
		{
			return default(float);
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0x122E894", Offset = "0x122E894", VA = "0x122E894")]
		public float GetNearestPointTF(Vector3 localPosition, out Vector3 nearestPoint, [CanBeNull] out CurvySplineSegment nearestSegment, out float nearestSegmentF, int startSegmentIndex = 0, int stopSegmentIndex = -1)
		{
			return default(float);
		}

		[Token(Token = "0x6001005")]
		[Address(RVA = "0x12259D4", Offset = "0x12259D4", VA = "0x12259D4")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0x12259C8", Offset = "0x12259C8", VA = "0x12259C8")]
		public void SetDirtyAll()
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0x12287A8", Offset = "0x12287A8", VA = "0x12287A8")]
		public void SetDirtyAll(SplineDirtyingType dirtyingType, bool dirtyConnectedControlPoints)
		{
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0x122F8C8", Offset = "0x122F8C8", VA = "0x122F8C8")]
		public void SetDirty(CurvySplineSegment dirtyControlPoint, SplineDirtyingType dirtyingType)
		{
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0x122FD14", Offset = "0x122FD14", VA = "0x122FD14")]
		public void SetDirtyPartial(CurvySplineSegment dirtyControlPoint, SplineDirtyingType dirtyingType)
		{
		}

		[Token(Token = "0x600100A")]
		[Address(RVA = "0x122FD68", Offset = "0x122FD68", VA = "0x122FD68")]
		public Vector3 ToWorldPosition(Vector3 localPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0x122FDB0", Offset = "0x122FDB0", VA = "0x122FDB0")]
		public void SyncSplineFromHierarchy()
		{
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0x1230034", Offset = "0x1230034", VA = "0x1230034")]
		public Vector3[] GetApproximationPoints(float fromTF, float toTF, bool includeEndPoint = true)
		{
			return null;
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0x12303F0", Offset = "0x12303F0", VA = "0x12303F0")]
		public bool IsPlanar(out int ignoreAxis)
		{
			return default(bool);
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0x1230460", Offset = "0x1230460", VA = "0x1230460")]
		public bool IsPlanar(out bool xplanar, out bool yplanar, out bool zplanar)
		{
			return default(bool);
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0x1230738", Offset = "0x1230738", VA = "0x1230738")]
		public bool IsPlanar(CurvyPlane plane)
		{
			return default(bool);
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0x12308BC", Offset = "0x12308BC", VA = "0x12308BC")]
		public void MakePlanar(CurvyPlane plane)
		{
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0x1230C24", Offset = "0x1230C24", VA = "0x1230C24")]
		public void Subdivide([Optional] CurvySplineSegment fromCP, [Optional] CurvySplineSegment toCP)
		{
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0x1231248", Offset = "0x1231248", VA = "0x1231248")]
		public void Simplify([Optional] CurvySplineSegment fromCP, [Optional] CurvySplineSegment toCP)
		{
		}

		[Token(Token = "0x6001013")]
		[Address(RVA = "0x12314F8", Offset = "0x12314F8", VA = "0x12314F8")]
		public void Equalize([Optional] CurvySplineSegment fromCP, [Optional] CurvySplineSegment toCP)
		{
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0x1231820", Offset = "0x1231820", VA = "0x1231820")]
		public void Normalize()
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0x12319F8", Offset = "0x12319F8", VA = "0x12319F8")]
		public void MakePlanar(int axis)
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0x1231B64", Offset = "0x1231B64", VA = "0x1231B64")]
		public Vector3 SetPivot(float xRel = 0f, float yRel = 0f, float zRel = 0f, bool preview = false)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0x1231DB8", Offset = "0x1231DB8", VA = "0x1231DB8")]
		public void Flip()
		{
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0x1232280", Offset = "0x1232280", VA = "0x1232280")]
		public void MoveControlPoints(int startIndex, int count, CurvySplineSegment destCP)
		{
		}

		[Token(Token = "0x6001019")]
		[Address(RVA = "0x12325C8", Offset = "0x12325C8", VA = "0x12325C8")]
		public void JoinWith(CurvySplineSegment destCP)
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0x123269C", Offset = "0x123269C", VA = "0x123269C")]
		public CurvySpline Split(CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0x1232950", Offset = "0x1232950", VA = "0x1232950")]
		public void SetFirstControlPoint(CurvySplineSegment controlPoint)
		{
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0x1232AB4", Offset = "0x1232AB4", VA = "0x1232AB4")]
		public bool IsControlPointAnOrientationAnchor(CurvySplineSegment controlPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0x1232BD8", Offset = "0x1232BD8", VA = "0x1232BD8")]
		public bool CanControlPointHaveFollowUp(CurvySplineSegment controlPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0x122C45C", Offset = "0x122C45C", VA = "0x122C45C")]
		public short GetControlPointIndex(CurvySplineSegment controlPoint)
		{
			return default(short);
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x122C430", Offset = "0x122C430", VA = "0x122C430")]
		public short GetSegmentIndex(CurvySplineSegment segment)
		{
			return default(short);
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0x122DE98", Offset = "0x122DE98", VA = "0x122DE98")]
		[CanBeNull]
		public CurvySplineSegment GetNextControlPoint(CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0x1232C0C", Offset = "0x1232C0C", VA = "0x1232C0C")]
		[CanBeNull]
		public short GetNextControlPointIndex(CurvySplineSegment controlPoint)
		{
			return default(short);
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0x1232C38", Offset = "0x1232C38", VA = "0x1232C38")]
		[CanBeNull]
		public CurvySplineSegment GetNextControlPointUsingFollowUp(CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0x122D7B8", Offset = "0x122D7B8", VA = "0x122D7B8")]
		[CanBeNull]
		public CurvySplineSegment GetPreviousControlPoint(CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0x1232D8C", Offset = "0x1232D8C", VA = "0x1232D8C")]
		[CanBeNull]
		public short GetPreviousControlPointIndex(CurvySplineSegment controlPoint)
		{
			return default(short);
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x1232DB8", Offset = "0x1232DB8", VA = "0x1232DB8")]
		[CanBeNull]
		public CurvySplineSegment GetPreviousControlPointUsingFollowUp(CurvySplineSegment controlPoint)
		{
			return null;
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0x122C868", Offset = "0x122C868", VA = "0x122C868")]
		[CanBeNull]
		public CurvySplineSegment GetNextSegment(CurvySplineSegment segment)
		{
			return null;
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0x1232E64", Offset = "0x1232E64", VA = "0x1232E64")]
		[CanBeNull]
		public CurvySplineSegment GetPreviousSegment(CurvySplineSegment segment)
		{
			return null;
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0x122D840", Offset = "0x122D840", VA = "0x122D840")]
		public bool IsControlPointASegment(CurvySplineSegment controlPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0x1232BAC", Offset = "0x1232BAC", VA = "0x1232BAC")]
		public bool IsControlPointVisible(CurvySplineSegment controlPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0x1232EEC", Offset = "0x1232EEC", VA = "0x1232EEC")]
		public short GetControlPointOrientationAnchorIndex(CurvySplineSegment controlPoint)
		{
			return default(short);
		}

		[Token(Token = "0x600102B")]
		[Address(RVA = "0x1232F18", Offset = "0x1232F18", VA = "0x1232F18")]
		public void SetFromString(string fieldAndValue)
		{
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0x1233438", Offset = "0x1233438", VA = "0x1233438")]
		private void Awake()
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x12334B4", Offset = "0x12334B4", VA = "0x12334B4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0x1229EC0", Offset = "0x1229EC0", VA = "0x1229EC0")]
		public void Start()
		{
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0x1233518", Offset = "0x1233518", VA = "0x1233518")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0x1233520", Offset = "0x1233520", VA = "0x1233520")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0x123368C", Offset = "0x123368C", VA = "0x123368C", Slot = "5")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0x123387C", Offset = "0x123387C", VA = "0x123387C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0x1233B68", Offset = "0x1233B68", VA = "0x1233B68")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0x1233B9C", Offset = "0x1233B9C", VA = "0x1233B9C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0x12334DC", Offset = "0x12334DC", VA = "0x12334DC")]
		private void Initialize()
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0x12338AC", Offset = "0x12338AC", VA = "0x12338AC")]
		private void doUpdate()
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0x1228AB8", Offset = "0x1228AB8", VA = "0x1228AB8")]
		private bool canHaveManualEndCP()
		{
			return default(bool);
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0x122F91C", Offset = "0x122F91C", VA = "0x122F91C")]
		private void SetDirty(CurvySplineSegment controlPoint, SplineDirtyingType dirtyingType, CurvySplineSegment previousControlPoint, CurvySplineSegment nextControlPoint, bool ignoreConnectionOfInputControlPoint)
		{
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0x122F878", Offset = "0x122F878", VA = "0x122F878")]
		private void SetDirtyingFlags(SplineDirtyingType dirtyingType)
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0x1232218", Offset = "0x1232218", VA = "0x1232218")]
		private void ReverseControlPoints()
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0x1233D98", Offset = "0x1233D98", VA = "0x1233D98")]
		private static short GetNextControlPointIndex(short controlPointIndex, bool isSplineClosed, int controlPointsCount)
		{
			return default(short);
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0x1233DB4", Offset = "0x1233DB4", VA = "0x1233DB4")]
		private static short GetPreviousControlPointIndex(short controlPointIndex, bool isSplineClosed, int controlPointsCount)
		{
			return default(short);
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0x1233DD8", Offset = "0x1233DD8", VA = "0x1233DD8")]
		private static bool IsControlPointASegment(int controlPointIndex, int controlPointCount, bool isClosed, bool notAutoEndTangentsAndIsCatmullRomOrTCB)
		{
			return default(bool);
		}

		[Token(Token = "0x6001040")]
		[Address(RVA = "0x1232CE4", Offset = "0x1232CE4", VA = "0x1232CE4")]
		[NotNull]
		private static CurvySplineSegment GetFollowUpNextControlPoint(CurvySplineSegment followUp, ConnectionHeadingEnum headToDirection)
		{
			return null;
		}

		[Token(Token = "0x6001041")]
		[Address(RVA = "0x122FEAC", Offset = "0x122FEAC", VA = "0x122FEAC")]
		private void AddControlPoint(CurvySplineSegment item)
		{
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0x1232488", Offset = "0x1232488", VA = "0x1232488")]
		private void InsertControlPoint(int index, CurvySplineSegment item)
		{
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0x122E2B8", Offset = "0x122E2B8", VA = "0x122E2B8")]
		private void RemoveControlPoint(CurvySplineSegment item)
		{
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0x122E154", Offset = "0x122E154", VA = "0x122E154")]
		private void ClearControlPoints()
		{
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0x12286DC", Offset = "0x12286DC", VA = "0x12286DC")]
		internal void InvalidateControlPointsRelationshipCacheINTERNAL()
		{
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0x1229510", Offset = "0x1229510", VA = "0x1229510")]
		private void RebuildControlPointsRelationshipCache(bool fixNonCoherentControlPoints)
		{
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0x122ECEC", Offset = "0x122ECEC", VA = "0x122ECEC")]
		private void ProcessDirtyControlPoints()
		{
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0x123413C", Offset = "0x123413C", VA = "0x123413C")]
		private void PrepareTTransforms()
		{
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0x1233E28", Offset = "0x1233E28", VA = "0x1233E28")]
		private void FillDirtyCpsExtendedList()
		{
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0x1225614", Offset = "0x1225614", VA = "0x1225614")]
		internal void NotifyMetaDataModification()
		{
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0x1234F38", Offset = "0x1234F38", VA = "0x1234F38")]
		private void SyncHierarchyFromSpline(bool renameControlPoints = true)
		{
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0x1233BD0", Offset = "0x1233BD0", VA = "0x1233BD0")]
		private void UpdatedLastProcessedGlobalCoordinates()
		{
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0x122D95C", Offset = "0x122D95C", VA = "0x122D95C")]
		private CurvySplineSegment InsertAt(CurvySplineSegment controlPoint, Vector3 globalPosition, int insertionIndex, CurvyControlPointEventArgs.ModeEnum insertionMode, bool skipRefreshingAndEvents)
		{
			return null;
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0x122F81C", Offset = "0x122F81C", VA = "0x122F81C")]
		private CurvySplineEventArgs OnRefreshEvent(CurvySplineEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0x122D3F8", Offset = "0x122D3F8", VA = "0x122D3F8")]
		private CurvyControlPointEventArgs OnBeforeControlPointAddEvent(CurvyControlPointEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0x122D534", Offset = "0x122D534", VA = "0x122D534")]
		private CurvyControlPointEventArgs OnAfterControlPointAddEvent(CurvyControlPointEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0x122E0F8", Offset = "0x122E0F8", VA = "0x122E0F8")]
		private CurvyControlPointEventArgs OnBeforeControlPointDeleteEvent(CurvyControlPointEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x122D590", Offset = "0x122D590", VA = "0x122D590")]
		private CurvySplineEventArgs OnAfterControlPointChangesEvent(CurvySplineEventArgs e)
		{
			return null;
		}
	}
	[Token(Token = "0x200027E")]
	public enum SplineDirtyingType
	{
		[Token(Token = "0x4000CC9")]
		OrientationOnly,
		[Token(Token = "0x4000CCA")]
		Everything
	}
	[Token(Token = "0x200027F")]
	[ExecuteInEditMode]
	[HelpURL("https://curvyeditor.com/doclink/curvysplinesegment")]
	public class CurvySplineSegment : MonoBehaviour, IPoolable
	{
		[Token(Token = "0x2000280")]
		internal readonly struct ControlPointExtrinsicProperties : IEquatable<ControlPointExtrinsicProperties>
		{
			[Token(Token = "0x4000CF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly bool isVisible;

			[Token(Token = "0x4000CF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
			private readonly short segmentIndex;

			[Token(Token = "0x4000CF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private readonly short controlPointIndex;

			[Token(Token = "0x4000CF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
			private readonly short nextControlPointIndex;

			[Token(Token = "0x4000CF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private readonly short previousControlPointIndex;

			[Token(Token = "0x4000CF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
			private readonly bool previousControlPointIsSegment;

			[Token(Token = "0x4000CF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB")]
			private readonly bool nextControlPointIsSegment;

			[Token(Token = "0x4000CFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private readonly bool canHaveFollowUp;

			[Token(Token = "0x4000CFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			private readonly short orientationAnchorIndex;

			[Token(Token = "0x1700021E")]
			internal bool IsVisible
			{
				[Token(Token = "0x60010E7")]
				[Address(RVA = "0x1238984", Offset = "0x1238984", VA = "0x1238984")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700021F")]
			internal short SegmentIndex
			{
				[Token(Token = "0x60010E8")]
				[Address(RVA = "0x123898C", Offset = "0x123898C", VA = "0x123898C")]
				get
				{
					return default(short);
				}
			}

			[Token(Token = "0x17000220")]
			internal short ControlPointIndex
			{
				[Token(Token = "0x60010E9")]
				[Address(RVA = "0x1238994", Offset = "0x1238994", VA = "0x1238994")]
				get
				{
					return default(short);
				}
			}

			[Token(Token = "0x17000221")]
			internal short NextControlPointIndex
			{
				[Token(Token = "0x60010EA")]
				[Address(RVA = "0x123899C", Offset = "0x123899C", VA = "0x123899C")]
				get
				{
					return default(short);
				}
			}

			[Token(Token = "0x17000222")]
			internal short PreviousControlPointIndex
			{
				[Token(Token = "0x60010EB")]
				[Address(RVA = "0x12389A4", Offset = "0x12389A4", VA = "0x12389A4")]
				get
				{
					return default(short);
				}
			}

			[Token(Token = "0x17000223")]
			internal bool PreviousControlPointIsSegment
			{
				[Token(Token = "0x60010EC")]
				[Address(RVA = "0x12389AC", Offset = "0x12389AC", VA = "0x12389AC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000224")]
			internal bool NextControlPointIsSegment
			{
				[Token(Token = "0x60010ED")]
				[Address(RVA = "0x12389B4", Offset = "0x12389B4", VA = "0x12389B4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000225")]
			internal bool CanHaveFollowUp
			{
				[Token(Token = "0x60010EE")]
				[Address(RVA = "0x12389BC", Offset = "0x12389BC", VA = "0x12389BC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000226")]
			internal bool IsSegment
			{
				[Token(Token = "0x60010EF")]
				[Address(RVA = "0x12389C4", Offset = "0x12389C4", VA = "0x12389C4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000227")]
			internal short OrientationAnchorIndex
			{
				[Token(Token = "0x60010F0")]
				[Address(RVA = "0x12389D4", Offset = "0x12389D4", VA = "0x12389D4")]
				get
				{
					return default(short);
				}
			}

			[Token(Token = "0x60010F1")]
			[Address(RVA = "0x12389DC", Offset = "0x12389DC", VA = "0x12389DC")]
			internal ControlPointExtrinsicProperties(bool isVisible, short segmentIndex, short controlPointIndex, short previousControlPointIndex, short nextControlPointIndex, bool previousControlPointIsSegment, bool nextControlPointIsSegment, bool canHaveFollowUp, short orientationAnchorIndex)
			{
			}

			[Token(Token = "0x60010F2")]
			[Address(RVA = "0x1238A1C", Offset = "0x1238A1C", VA = "0x1238A1C", Slot = "4")]
			public bool Equals(ControlPointExtrinsicProperties other)
			{
				return default(bool);
			}

			[Token(Token = "0x60010F3")]
			[Address(RVA = "0x1238AE0", Offset = "0x1238AE0", VA = "0x1238AE0", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x60010F4")]
			[Address(RVA = "0x1238B58", Offset = "0x1238B58", VA = "0x1238B58", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x60010F5")]
			[Address(RVA = "0x1238CA8", Offset = "0x1238CA8", VA = "0x1238CA8")]
			public static bool operator ==(ControlPointExtrinsicProperties left, ControlPointExtrinsicProperties right)
			{
				return default(bool);
			}

			[Token(Token = "0x60010F6")]
			[Address(RVA = "0x1238CD4", Offset = "0x1238CD4", VA = "0x1238CD4")]
			public static bool operator !=(ControlPointExtrinsicProperties left, ControlPointExtrinsicProperties right)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color GizmoTangentColor;

		[NonSerialized]
		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] Approximation;

		[NonSerialized]
		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float[] ApproximationDistances;

		[NonSerialized]
		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3[] ApproximationUp;

		[NonSerialized]
		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3[] ApproximationT;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[FieldAction("CBBakeOrientation", ActionAttribute.ActionEnum.Callback, Position = ActionAttribute.ActionPositionEnum.Below)]
		[Label("Bake Orientation", "Automatically apply orientation to CP transforms?")]
		[Group("General")]
		private bool m_AutoBakeOrientation;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[Group("General")]
		[Tooltip("Check to use this transform's rotation")]
		[FieldCondition("IsOrientationAnchorEditable", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		[SerializeField]
		private bool m_OrientationAnchor;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[Label("Swirl", "Add Swirl to orientation?")]
		[Group("General")]
		[FieldCondition("canHaveSwirl", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		private CurvyOrientationSwirl m_Swirl;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[FieldCondition("canHaveSwirl", true, false, FluffyUnderware.DevTools.ConditionalAttribute.OperatorEnum.AND, "m_Swirl", CurvyOrientationSwirl.None, true)]
		[Group("General")]
		[SerializeField]
		[Label("Turns", "Number of swirl turns")]
		private float m_SwirlTurns;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Section("Bezier Options", true, false, 100, Sort = 1, HelpURL = "https://curvyeditor.com/doclink/curvysplinesegment_bezier")]
		[GroupCondition("interpolation", CurvyInterpolation.Bezier, false)]
		[SerializeField]
		private bool m_AutoHandles;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[RangeEx(0f, 1f, "Distance %", "Handle length by distance to neighbours")]
		[FieldCondition("m_AutoHandles", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		[SerializeField]
		private float m_AutoHandleDistance;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[FormerlySerializedAs("HandleIn")]
		[VectorEx("", "", Precision = 3, Options = (AttributeOptionsFlags)1152, Color = "#FFFF00")]
		[SerializeField]
		private Vector3 m_HandleIn;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[FormerlySerializedAs("HandleOut")]
		[VectorEx("", "", Precision = 3, Options = (AttributeOptionsFlags)1152, Color = "#00FF00")]
		[SerializeField]
		private Vector3 m_HandleOut;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[FormerlySerializedAs("OverrideGlobalTension")]
		[Section("TCB Options", true, false, 100, Sort = 1, HelpURL = "https://curvyeditor.com/doclink/curvysplinesegment_tcb")]
		[GroupCondition("interpolation", CurvyInterpolation.TCB, false)]
		[GroupAction("TCBOptionsGUI", ActionAttribute.ActionEnum.Callback, Position = ActionAttribute.ActionPositionEnum.Below)]
		[Label("Local Tension", "Override Spline Tension?")]
		[SerializeField]
		private bool m_OverrideGlobalTension;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		[SerializeField]
		[FormerlySerializedAs("OverrideGlobalContinuity")]
		[Label("Local Continuity", "Override Spline Continuity?")]
		private bool m_OverrideGlobalContinuity;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		[FormerlySerializedAs("OverrideGlobalBias")]
		[SerializeField]
		[Label("Local Bias", "Override Spline Bias?")]
		private bool m_OverrideGlobalBias;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		[Tooltip("Synchronize Start and End Values")]
		[SerializeField]
		[FormerlySerializedAs("SynchronizeTCB")]
		private bool m_SynchronizeTCB;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Label("Tension", "")]
		[FieldCondition("m_OverrideGlobalTension", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		[SerializeField]
		[FormerlySerializedAs("StartTension")]
		private float m_StartTension;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[FormerlySerializedAs("EndTension")]
		[SerializeField]
		[Label("Tension (End)", "")]
		[FieldCondition("m_OverrideGlobalTension", true, false, FluffyUnderware.DevTools.ConditionalAttribute.OperatorEnum.AND, "m_SynchronizeTCB", false, false)]
		private float m_EndTension;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Label("Continuity", "")]
		[FieldCondition("m_OverrideGlobalContinuity", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		[SerializeField]
		[FormerlySerializedAs("StartContinuity")]
		private float m_StartContinuity;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[FormerlySerializedAs("EndContinuity")]
		[Label("Continuity (End)", "")]
		[FieldCondition("m_OverrideGlobalContinuity", true, false, FluffyUnderware.DevTools.ConditionalAttribute.OperatorEnum.AND, "m_SynchronizeTCB", false, false)]
		[SerializeField]
		private float m_EndContinuity;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[FormerlySerializedAs("StartBias")]
		[Label("Bias", "")]
		[SerializeField]
		[FieldCondition("m_OverrideGlobalBias", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		private float m_StartBias;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Label("Bias (End)", "")]
		[FieldCondition("m_OverrideGlobalBias", true, false, FluffyUnderware.DevTools.ConditionalAttribute.OperatorEnum.AND, "m_SynchronizeTCB", false, false)]
		[SerializeField]
		[FormerlySerializedAs("EndBias")]
		private float m_EndBias;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		[HideInInspector]
		private CurvySplineSegment m_FollowUp;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		[HideInInspector]
		private ConnectionHeadingEnum m_FollowUpHeading;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		[HideInInspector]
		private bool m_ConnectionSyncPosition;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		[HideInInspector]
		[SerializeField]
		private bool m_ConnectionSyncRotation;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		[HideInInspector]
		private CurvyConnection m_Connection;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int cacheSize;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 threadSafeLocalPosition;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion threadSafeLocalRotation;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CurvySpline mSpline;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float mStepSize;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Bounds? mBounds;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private readonly HashSet<UnityEngine.Component> mMetaData;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 lastProcessedLocalPosition;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private Quaternion lastProcessedLocalRotation;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private ControlPointExtrinsicProperties extrinsicPropertiesINTERNAL;

		[Token(Token = "0x170001F4")]
		public bool AutoBakeOrientation
		{
			[Token(Token = "0x6001057")]
			[Address(RVA = "0x1234FF8", Offset = "0x1234FF8", VA = "0x1234FF8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001058")]
			[Address(RVA = "0x1235000", Offset = "0x1235000", VA = "0x1235000")]
			set
			{
			}
		}

		[Token(Token = "0x170001F5")]
		public bool SerializedOrientationAnchor
		{
			[Token(Token = "0x6001059")]
			[Address(RVA = "0x1235018", Offset = "0x1235018", VA = "0x1235018")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600105A")]
			[Address(RVA = "0x1235020", Offset = "0x1235020", VA = "0x1235020")]
			set
			{
			}
		}

		[Token(Token = "0x170001F6")]
		public CurvyOrientationSwirl Swirl
		{
			[Token(Token = "0x600105B")]
			[Address(RVA = "0x123506C", Offset = "0x123506C", VA = "0x123506C")]
			get
			{
				return default(CurvyOrientationSwirl);
			}
			[Token(Token = "0x600105C")]
			[Address(RVA = "0x1235074", Offset = "0x1235074", VA = "0x1235074")]
			set
			{
			}
		}

		[Token(Token = "0x170001F7")]
		public float SwirlTurns
		{
			[Token(Token = "0x600105D")]
			[Address(RVA = "0x12350B0", Offset = "0x12350B0", VA = "0x12350B0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600105E")]
			[Address(RVA = "0x12350B8", Offset = "0x12350B8", VA = "0x12350B8")]
			set
			{
			}
		}

		[Token(Token = "0x170001F8")]
		public Vector3 HandleIn
		{
			[Token(Token = "0x600105F")]
			[Address(RVA = "0x12350F0", Offset = "0x12350F0", VA = "0x12350F0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001060")]
			[Address(RVA = "0x1226A54", Offset = "0x1226A54", VA = "0x1226A54")]
			set
			{
			}
		}

		[Token(Token = "0x170001F9")]
		public Vector3 HandleOut
		{
			[Token(Token = "0x6001061")]
			[Address(RVA = "0x12350FC", Offset = "0x12350FC", VA = "0x12350FC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001062")]
			[Address(RVA = "0x1226ABC", Offset = "0x1226ABC", VA = "0x1226ABC")]
			set
			{
			}
		}

		[Token(Token = "0x170001FA")]
		public Vector3 HandleInPosition
		{
			[Token(Token = "0x6001063")]
			[Address(RVA = "0x12311CC", Offset = "0x12311CC", VA = "0x12311CC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001064")]
			[Address(RVA = "0x122694C", Offset = "0x122694C", VA = "0x122694C")]
			set
			{
			}
		}

		[Token(Token = "0x170001FB")]
		public Vector3 HandleOutPosition
		{
			[Token(Token = "0x6001065")]
			[Address(RVA = "0x1231150", Offset = "0x1231150", VA = "0x1231150")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001066")]
			[Address(RVA = "0x12269D0", Offset = "0x12269D0", VA = "0x12269D0")]
			set
			{
			}
		}

		[Token(Token = "0x170001FC")]
		public bool AutoHandles
		{
			[Token(Token = "0x6001067")]
			[Address(RVA = "0x1235108", Offset = "0x1235108", VA = "0x1235108")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001068")]
			[Address(RVA = "0x12266F0", Offset = "0x12266F0", VA = "0x12266F0")]
			set
			{
			}
		}

		[Token(Token = "0x170001FD")]
		public float AutoHandleDistance
		{
			[Token(Token = "0x6001069")]
			[Address(RVA = "0x1235254", Offset = "0x1235254", VA = "0x1235254")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600106A")]
			[Address(RVA = "0x1226728", Offset = "0x1226728", VA = "0x1226728")]
			set
			{
			}
		}

		[Token(Token = "0x170001FE")]
		public bool SynchronizeTCB
		{
			[Token(Token = "0x600106B")]
			[Address(RVA = "0x123525C", Offset = "0x123525C", VA = "0x123525C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600106C")]
			[Address(RVA = "0x12321D8", Offset = "0x12321D8", VA = "0x12321D8")]
			set
			{
			}
		}

		[Token(Token = "0x170001FF")]
		public bool OverrideGlobalTension
		{
			[Token(Token = "0x600106D")]
			[Address(RVA = "0x1235264", Offset = "0x1235264", VA = "0x1235264")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600106E")]
			[Address(RVA = "0x1232198", Offset = "0x1232198", VA = "0x1232198")]
			set
			{
			}
		}

		[Token(Token = "0x17000200")]
		public bool OverrideGlobalContinuity
		{
			[Token(Token = "0x600106F")]
			[Address(RVA = "0x123526C", Offset = "0x123526C", VA = "0x123526C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001070")]
			[Address(RVA = "0x1232158", Offset = "0x1232158", VA = "0x1232158")]
			set
			{
			}
		}

		[Token(Token = "0x17000201")]
		public bool OverrideGlobalBias
		{
			[Token(Token = "0x6001071")]
			[Address(RVA = "0x1235274", Offset = "0x1235274", VA = "0x1235274")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001072")]
			[Address(RVA = "0x1232118", Offset = "0x1232118", VA = "0x1232118")]
			set
			{
			}
		}

		[Token(Token = "0x17000202")]
		public float StartTension
		{
			[Token(Token = "0x6001073")]
			[Address(RVA = "0x123527C", Offset = "0x123527C", VA = "0x123527C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001074")]
			[Address(RVA = "0x12320E0", Offset = "0x12320E0", VA = "0x12320E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000203")]
		public float StartContinuity
		{
			[Token(Token = "0x6001075")]
			[Address(RVA = "0x1235284", Offset = "0x1235284", VA = "0x1235284")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001076")]
			[Address(RVA = "0x12320A8", Offset = "0x12320A8", VA = "0x12320A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000204")]
		public float StartBias
		{
			[Token(Token = "0x6001077")]
			[Address(RVA = "0x123528C", Offset = "0x123528C", VA = "0x123528C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001078")]
			[Address(RVA = "0x1232070", Offset = "0x1232070", VA = "0x1232070")]
			set
			{
			}
		}

		[Token(Token = "0x17000205")]
		public float EndTension
		{
			[Token(Token = "0x6001079")]
			[Address(RVA = "0x1235294", Offset = "0x1235294", VA = "0x1235294")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600107A")]
			[Address(RVA = "0x1232038", Offset = "0x1232038", VA = "0x1232038")]
			set
			{
			}
		}

		[Token(Token = "0x17000206")]
		public float EndContinuity
		{
			[Token(Token = "0x600107B")]
			[Address(RVA = "0x123529C", Offset = "0x123529C", VA = "0x123529C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600107C")]
			[Address(RVA = "0x1232000", Offset = "0x1232000", VA = "0x1232000")]
			set
			{
			}
		}

		[Token(Token = "0x17000207")]
		public float EndBias
		{
			[Token(Token = "0x600107D")]
			[Address(RVA = "0x12352A4", Offset = "0x12352A4", VA = "0x12352A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600107E")]
			[Address(RVA = "0x1231FC8", Offset = "0x1231FC8", VA = "0x1231FC8")]
			set
			{
			}
		}

		[Token(Token = "0x17000208")]
		public CurvySplineSegment FollowUp
		{
			[Token(Token = "0x600107F")]
			[Address(RVA = "0x12352AC", Offset = "0x12352AC", VA = "0x12352AC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001080")]
			[Address(RVA = "0x12352B4", Offset = "0x12352B4", VA = "0x12352B4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000209")]
		public ConnectionHeadingEnum FollowUpHeading
		{
			[Token(Token = "0x6001081")]
			[Address(RVA = "0x1235378", Offset = "0x1235378", VA = "0x1235378")]
			get
			{
				return default(ConnectionHeadingEnum);
			}
			[Token(Token = "0x6001082")]
			[Address(RVA = "0x1235380", Offset = "0x1235380", VA = "0x1235380")]
			set
			{
			}
		}

		[Token(Token = "0x1700020A")]
		public bool ConnectionSyncPosition
		{
			[Token(Token = "0x6001083")]
			[Address(RVA = "0x123541C", Offset = "0x123541C", VA = "0x123541C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001084")]
			[Address(RVA = "0x1235424", Offset = "0x1235424", VA = "0x1235424")]
			set
			{
			}
		}

		[Token(Token = "0x1700020B")]
		public bool ConnectionSyncRotation
		{
			[Token(Token = "0x6001085")]
			[Address(RVA = "0x123543C", Offset = "0x123543C", VA = "0x123543C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001086")]
			[Address(RVA = "0x1235444", Offset = "0x1235444", VA = "0x1235444")]
			set
			{
			}
		}

		[Token(Token = "0x1700020C")]
		public CurvyConnection Connection
		{
			[Token(Token = "0x6001087")]
			[Address(RVA = "0x123545C", Offset = "0x123545C", VA = "0x123545C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001088")]
			[Address(RVA = "0x1235464", Offset = "0x1235464", VA = "0x1235464")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700020D")]
		public int CacheSize
		{
			[Token(Token = "0x6001089")]
			[Address(RVA = "0x12355E0", Offset = "0x12355E0", VA = "0x12355E0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600108A")]
			[Address(RVA = "0x12355E8", Offset = "0x12355E8", VA = "0x12355E8")]
			private set
			{
			}
		}

		[Token(Token = "0x1700020E")]
		public Bounds Bounds
		{
			[Token(Token = "0x600108B")]
			[Address(RVA = "0x1228FDC", Offset = "0x1228FDC", VA = "0x1228FDC")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x1700020F")]
		public float Length
		{
			[Token(Token = "0x600108C")]
			[Address(RVA = "0x12355F0", Offset = "0x12355F0", VA = "0x12355F0")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600108D")]
			[Address(RVA = "0x12355F8", Offset = "0x12355F8", VA = "0x12355F8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000210")]
		public float Distance
		{
			[Token(Token = "0x600108E")]
			[Address(RVA = "0x1235600", Offset = "0x1235600", VA = "0x1235600")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600108F")]
			[Address(RVA = "0x1235608", Offset = "0x1235608", VA = "0x1235608")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x17000211")]
		public float TF
		{
			[Token(Token = "0x6001090")]
			[Address(RVA = "0x1235610", Offset = "0x1235610", VA = "0x1235610")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000212")]
		public bool IsFirstControlPoint
		{
			[Token(Token = "0x6001091")]
			[Address(RVA = "0x1235618", Offset = "0x1235618", VA = "0x1235618")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000213")]
		public bool IsLastControlPoint
		{
			[Token(Token = "0x6001092")]
			[Address(RVA = "0x1235640", Offset = "0x1235640", VA = "0x1235640")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000214")]
		[Obsolete("Use MetaDataSet instead")]
		public List<UnityEngine.Component> MetaData
		{
			[Token(Token = "0x6001093")]
			[Address(RVA = "0x1235684", Offset = "0x1235684", VA = "0x1235684")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000215")]
		public HashSet<UnityEngine.Component> MetaDataSet
		{
			[Token(Token = "0x6001094")]
			[Address(RVA = "0x12356CC", Offset = "0x12356CC", VA = "0x12356CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000216")]
		public CurvySpline Spline
		{
			[Token(Token = "0x6001095")]
			[Address(RVA = "0x12356D4", Offset = "0x12356D4", VA = "0x12356D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000217")]
		public bool HasUnprocessedLocalPosition
		{
			[Token(Token = "0x6001096")]
			[Address(RVA = "0x1233C64", Offset = "0x1233C64", VA = "0x1233C64")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000218")]
		public bool HasUnprocessedLocalOrientation
		{
			[Token(Token = "0x6001097")]
			[Address(RVA = "0x1233CC4", Offset = "0x1233CC4", VA = "0x1233CC4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000219")]
		public bool OrientatinInfluencesSpline
		{
			[Token(Token = "0x6001098")]
			[Address(RVA = "0x1233CFC", Offset = "0x1233CFC", VA = "0x1233CFC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700021A")]
		private CurvyInterpolation interpolation
		{
			[Token(Token = "0x60010CC")]
			[Address(RVA = "0x1237490", Offset = "0x1237490", VA = "0x1237490")]
			get
			{
				return default(CurvyInterpolation);
			}
		}

		[Token(Token = "0x1700021B")]
		private bool isDynamicOrientation
		{
			[Token(Token = "0x60010CD")]
			[Address(RVA = "0x123750C", Offset = "0x123750C", VA = "0x123750C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700021C")]
		private bool IsOrientationAnchorEditable
		{
			[Token(Token = "0x60010CE")]
			[Address(RVA = "0x1237590", Offset = "0x1237590", VA = "0x1237590")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700021D")]
		private bool canHaveSwirl
		{
			[Token(Token = "0x60010CF")]
			[Address(RVA = "0x1237684", Offset = "0x1237684", VA = "0x1237684")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0x12356DC", Offset = "0x12356DC", VA = "0x12356DC")]
		public void SetBezierHandleIn(Vector3 position, Space space = Space.Self, CurvyBezierModeEnum mode = CurvyBezierModeEnum.None)
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0x1235E94", Offset = "0x1235E94", VA = "0x1235E94")]
		public void SetBezierHandleOut(Vector3 position, Space space = Space.Self, CurvyBezierModeEnum mode = CurvyBezierModeEnum.None)
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0x1226B24", Offset = "0x1226B24", VA = "0x1226B24")]
		public void SetBezierHandles(float distanceFrag = -1f, bool setIn = true, bool setOut = true, bool noDirtying = false)
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0x1236634", Offset = "0x1236634", VA = "0x1236634")]
		public void SetBezierHandles(float distanceFrag, Vector3 p, Vector3 n, bool setIn = true, bool setOut = true, bool noDirtying = false)
		{
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0x12368F0", Offset = "0x12368F0", VA = "0x12368F0")]
		public void SetFollowUp(CurvySplineSegment target, ConnectionHeadingEnum heading = ConnectionHeadingEnum.Auto)
		{
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0x1227600", Offset = "0x1227600", VA = "0x1227600")]
		public void Disconnect()
		{
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0x12369BC", Offset = "0x12369BC", VA = "0x12369BC")]
		public void ResetConnectionRelatedData()
		{
		}

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0x122D870", Offset = "0x122D870", VA = "0x122D870")]
		public Vector3 Interpolate(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0x122A7F4", Offset = "0x122A7F4", VA = "0x122A7F4")]
		public Vector3 Interpolate(float localF, CurvyInterpolation interpolation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0x122AC2C", Offset = "0x122AC2C", VA = "0x122AC2C")]
		public Vector3 InterpolateFast(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x1236A04", Offset = "0x1236A04", VA = "0x1236A04")]
		public void ReloadMetaData()
		{
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0x12254B8", Offset = "0x12254B8", VA = "0x12254B8")]
		public void RegisterMetaData(CurvyMetadataBase metaData)
		{
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0x1225534", Offset = "0x1225534", VA = "0x1225534")]
		public void UnregisterMetaData(CurvyMetadataBase metaData)
		{
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0x122ACEC", Offset = "0x122ACEC", VA = "0x122ACEC")]
		[Obsolete("Use GetMetadata<T> instead")]
		public UnityEngine.Component GetMetaData(Type type, bool autoCreate = false)
		{
			return null;
		}

		[Token(Token = "0x60010A7")]
		public T GetMetadata<T>(bool autoCreate = false) where T : UnityEngine.Component, ICurvyMetadata
		{
			return null;
		}

		[Token(Token = "0x60010A8")]
		public U GetInterpolatedMetadata<T, U>(float f) where T : CurvyInterpolatableMetadataBase<U>
		{
			return (U)null;
		}

		[Token(Token = "0x60010A9")]
		[Obsolete("Use GetInterpolatedMetadata<T, U> instead")]
		public U InterpolateMetadata<T, U>(float f) where T : UnityEngine.Component, ICurvyInterpolatableMetadata<U>
		{
			return (U)null;
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0x122B024", Offset = "0x122B024", VA = "0x122B024")]
		[Obsolete("Use GetInterpolatedMetadata<T, U> instead")]
		public object InterpolateMetadata(Type type, float f)
		{
			return null;
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x1236D88", Offset = "0x1236D88", VA = "0x1236D88")]
		public void DeleteMetadata()
		{
		}

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x122B1F4", Offset = "0x122B1F4", VA = "0x122B1F4")]
		public Vector3 InterpolateScale(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x122B600", Offset = "0x122B600", VA = "0x122B600")]
		public Vector3 GetTangent(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x122B6E0", Offset = "0x122B6E0", VA = "0x122B6E0")]
		public Vector3 GetTangent(float localF, Vector3 position)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x122B8D0", Offset = "0x122B8D0", VA = "0x122B8D0")]
		public Vector3 GetTangentFast(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x122B9FC", Offset = "0x122B9FC", VA = "0x122B9FC")]
		public void InterpolateAndGetTangent(float localF, out Vector3 localPosition, out Vector3 localTangent)
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x122BB28", Offset = "0x122BB28", VA = "0x122BB28")]
		public void InterpolateAndGetTangentFast(float localF, out Vector3 localPosition, out Vector3 localTangent)
		{
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x1236E30", Offset = "0x1236E30", VA = "0x1236E30")]
		public Quaternion GetOrientationFast(float localF)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x122B474", Offset = "0x122B474", VA = "0x122B474")]
		public Quaternion GetOrientationFast(float localF, bool inverse)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0x122B378", Offset = "0x122B378", VA = "0x122B378")]
		public Vector3 GetOrientationUpFast(float localF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x122EAC8", Offset = "0x122EAC8", VA = "0x122EAC8")]
		public float GetNearestPointF(Vector3 p)
		{
			return default(float);
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0x122C710", Offset = "0x122C710", VA = "0x122C710")]
		public float DistanceToLocalF(float localDistance)
		{
			return default(float);
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0x122C188", Offset = "0x122C188", VA = "0x122C188")]
		public float LocalFToDistance(float localF)
		{
			return default(float);
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0x122ECD0", Offset = "0x122ECD0", VA = "0x122ECD0")]
		public float LocalFToTF(float localF)
		{
			return default(float);
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0x1236E48", Offset = "0x1236E48", VA = "0x1236E48", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0x1236F0C", Offset = "0x1236F0C", VA = "0x1236F0C")]
		public void BakeOrientationToTransform()
		{
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x1230378", Offset = "0x1230378", VA = "0x1230378")]
		public int getApproximationIndexINTERNAL(float localF, out float frag)
		{
			return default(int);
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x1236FA4", Offset = "0x1236FA4", VA = "0x1236FA4")]
		public void LinkToSpline(CurvySpline spline)
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0x1233E10", Offset = "0x1233E10", VA = "0x1233E10")]
		public void UnlinkFromSpline()
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0x12260A8", Offset = "0x12260A8", VA = "0x12260A8")]
		public void SetLocalPosition(Vector3 newPosition)
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0x1236FAC", Offset = "0x1236FAC", VA = "0x1236FAC")]
		public void SetPosition(Vector3 value)
		{
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0x1226304", Offset = "0x1226304", VA = "0x1226304")]
		public void SetLocalRotation(Quaternion value)
		{
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0x123716C", Offset = "0x123716C", VA = "0x123716C")]
		public void SetRotation(Quaternion value)
		{
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0x123733C", Offset = "0x123733C", VA = "0x123733C", Slot = "4")]
		public void OnBeforePush()
		{
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0x12373D4", Offset = "0x12373D4", VA = "0x12373D4", Slot = "5")]
		public void OnAfterPop()
		{
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0x12373D8", Offset = "0x12373D8", VA = "0x12373D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0x12373DC", Offset = "0x12373DC", VA = "0x12373DC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0x12373E0", Offset = "0x12373E0", VA = "0x12373E0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0x12373E4", Offset = "0x12373E4", VA = "0x12373E4")]
		private void Update()
		{
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0x123743C", Offset = "0x123743C", VA = "0x123743C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0x1237464", Offset = "0x1237464", VA = "0x1237464")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0x123748C", Offset = "0x123748C", VA = "0x123748C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0x1227540", Offset = "0x1227540", VA = "0x1227540")]
		public void Reset()
		{
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0x1237760", Offset = "0x1237760", VA = "0x1237760")]
		internal void SetExtrinsicPropertiesINTERNAL(ControlPointExtrinsicProperties value)
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0x1232C04", Offset = "0x1232C04", VA = "0x1232C04")]
		internal unsafe ref ControlPointExtrinsicProperties GetExtrinsicPropertiesINTERNAL()
		{
			return ref *(ControlPointExtrinsicProperties*)null;
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0x1236B20", Offset = "0x1236B20", VA = "0x1236B20")]
		private void CheckAgainstMetaDataDuplication()
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0x123740C", Offset = "0x123740C", VA = "0x123740C")]
		private void DoUpdate()
		{
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0x1235500", Offset = "0x1235500", VA = "0x1235500")]
		private bool SetConnection(CurvyConnection newConnection)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0x1235110", Offset = "0x1235110", VA = "0x1235110")]
		private bool SetAutoHandles(bool newValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0x1236E38", Offset = "0x1236E38", VA = "0x1236E38")]
		private float getApproximationLocalF(int idx)
		{
			return default(float);
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0x12342A8", Offset = "0x12342A8", VA = "0x12342A8")]
		internal void refreshCurveINTERNAL(CurvyInterpolation splineInterpolation, bool isControlPointASegment, CurvySpline spline)
		{
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0x123776C", Offset = "0x123776C", VA = "0x123776C")]
		private float InterpolateBezierSegment(CurvySpline spline, int newCacheSize)
		{
			return default(float);
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0x1237CF0", Offset = "0x1237CF0", VA = "0x1237CF0")]
		private float InterpolateTCBSegment(CurvySpline spline, CurvySplineSegment nextControlPoint, int newCacheSize)
		{
			return default(float);
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0x12379BC", Offset = "0x12379BC", VA = "0x12379BC")]
		private float InterpolateCatmullSegment(CurvySpline spline, CurvySplineSegment nextControlPoint, int newCacheSize)
		{
			return default(float);
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0x123817C", Offset = "0x123817C", VA = "0x123817C")]
		private float InterpolateLinearSegment(CurvySpline spline, int newCacheSize)
		{
			return default(float);
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0x1234ABC", Offset = "0x1234ABC", VA = "0x1234ABC")]
		internal void refreshOrientationNoneINTERNAL()
		{
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0x1234AF0", Offset = "0x1234AF0", VA = "0x1234AF0")]
		internal void refreshOrientationStaticINTERNAL()
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0x1234CF8", Offset = "0x1234CF8", VA = "0x1234CF8")]
		internal void refreshOrientationDynamicINTERNAL(Vector3 initialUp)
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0x1233C50", Offset = "0x1233C50", VA = "0x1233C50")]
		internal void ClearBoundsINTERNAL()
		{
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0x1234C30", Offset = "0x1234C30", VA = "0x1234C30")]
		internal Vector3 getOrthoUp0INTERNAL()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0x123835C", Offset = "0x123835C", VA = "0x123835C")]
		private Vector3 getOrthoUp1INTERNAL()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0x1233E18", Offset = "0x1233E18", VA = "0x1233E18")]
		internal void UnsetFollowUpWithoutDirtyingINTERNAL()
		{
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0x12384A0", Offset = "0x12384A0", VA = "0x12384A0")]
		private bool SnapToFitSplineLength(float newSplineLength, float stepSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0x1234EE8", Offset = "0x1234EE8", VA = "0x1234EE8")]
		internal void PrepareThreadSafeTransfromINTERNAL()
		{
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0x12387D0", Offset = "0x12387D0", VA = "0x12387D0")]
		public CurvySplineSegment()
		{
		}
	}
	[Token(Token = "0x2000281")]
	public static class CurvySplineSegmentDefaultValues
	{
		[Token(Token = "0x4000CFC")]
		public const CurvyOrientationSwirl Swirl = CurvyOrientationSwirl.None;

		[Token(Token = "0x4000CFD")]
		public const bool AutoHandles = true;

		[Token(Token = "0x4000CFE")]
		public const float AutoHandleDistance = 0.39f;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector3 HandleIn;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly Vector3 HandleOut;
	}
	[Token(Token = "0x2000282")]
	public static class CurvySplineDefaultValues
	{
		[Token(Token = "0x4000D01")]
		public const bool AutoEndTangents = true;

		[Token(Token = "0x4000D02")]
		public const CurvyOrientation Orientation = CurvyOrientation.Dynamic;

		[Token(Token = "0x4000D03")]
		public const float AutoHandleDistance = 0.39f;

		[Token(Token = "0x4000D04")]
		public const int CacheDensity = 50;

		[Token(Token = "0x4000D05")]
		public const float MaxPointsPerUnit = 8f;

		[Token(Token = "0x4000D06")]
		public const bool UsePooling = true;

		[Token(Token = "0x4000D07")]
		public const CurvyUpdateMethod UpdateIn = CurvyUpdateMethod.Update;

		[Token(Token = "0x4000D08")]
		public const bool CheckTransform = true;
	}
	[Token(Token = "0x2000283")]
	[RequireComponent(typeof(RectTransform))]
	[AddComponentMenu("Curvy/Curvy UI Spline", 2)]
	[HelpURL("https://curvyeditor.com/doclink/curvyuispline")]
	public class CurvyUISpline : CurvySpline
	{
		[Token(Token = "0x60010F8")]
		[Address(RVA = "0x1238D70", Offset = "0x1238D70", VA = "0x1238D70")]
		public static CurvyUISpline CreateUISpline(string gameObjectName = "Curvy UI Spline")
		{
			return null;
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x1238EF0", Offset = "0x1238EF0", VA = "0x1238EF0", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x1238EB8", Offset = "0x1238EB8", VA = "0x1238EB8")]
		private void SetupUISpline()
		{
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x1238F0C", Offset = "0x1238F0C", VA = "0x1238F0C")]
		public CurvyUISpline()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.ThirdParty.LibTessDotNet
{
	[Token(Token = "0x2000284")]
	internal class Dict<TValue> where TValue : class
	{
		[Token(Token = "0x2000285")]
		public class Node
		{
			[Token(Token = "0x4000D0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal TValue _key;

			[Token(Token = "0x4000D0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal Node _prev;

			[Token(Token = "0x4000D0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal Node _next;

			[Token(Token = "0x17000228")]
			public TValue Key
			{
				[Token(Token = "0x6001102")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000229")]
			public Node Prev
			{
				[Token(Token = "0x6001103")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700022A")]
			public Node Next
			{
				[Token(Token = "0x6001104")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001105")]
			public Node()
			{
			}
		}

		[Token(Token = "0x2000286")]
		public delegate bool LessOrEqual(TValue lhs, TValue rhs);

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private LessOrEqual _leq;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Node _head;

		[Token(Token = "0x60010FC")]
		public Dict(LessOrEqual leq)
		{
		}

		[Token(Token = "0x60010FD")]
		public Node Insert(TValue key)
		{
			return null;
		}

		[Token(Token = "0x60010FE")]
		public Node InsertBefore(Node node, TValue key)
		{
			return null;
		}

		[Token(Token = "0x60010FF")]
		public Node Find(TValue key)
		{
			return null;
		}

		[Token(Token = "0x6001100")]
		public Node Min()
		{
			return null;
		}

		[Token(Token = "0x6001101")]
		public void Remove(Node node)
		{
		}
	}
	[Token(Token = "0x2000287")]
	internal static class Geom
	{
		[Token(Token = "0x600110A")]
		[Address(RVA = "0x1238F14", Offset = "0x1238F14", VA = "0x1238F14")]
		public static bool IsWindingInside(WindingRule rule, int n)
		{
			return default(bool);
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0x1238FC0", Offset = "0x1238FC0", VA = "0x1238FC0")]
		public static bool VertCCW(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(bool);
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0x1239010", Offset = "0x1239010", VA = "0x1239010")]
		public static bool VertEq(MeshUtils.Vertex lhs, MeshUtils.Vertex rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0x1239050", Offset = "0x1239050", VA = "0x1239050")]
		public static bool VertLeq(MeshUtils.Vertex lhs, MeshUtils.Vertex rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0x123909C", Offset = "0x123909C", VA = "0x123909C")]
		public static float EdgeEval(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(float);
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0x123910C", Offset = "0x123910C", VA = "0x123910C")]
		public static float EdgeSign(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(float);
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0x123916C", Offset = "0x123916C", VA = "0x123916C")]
		public static bool TransLeq(MeshUtils.Vertex lhs, MeshUtils.Vertex rhs)
		{
			return default(bool);
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0x12391B8", Offset = "0x12391B8", VA = "0x12391B8")]
		public static float TransEval(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(float);
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0x1239228", Offset = "0x1239228", VA = "0x1239228")]
		public static float TransSign(MeshUtils.Vertex u, MeshUtils.Vertex v, MeshUtils.Vertex w)
		{
			return default(float);
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0x1239288", Offset = "0x1239288", VA = "0x1239288")]
		public static bool EdgeGoesLeft(MeshUtils.Edge e)
		{
			return default(bool);
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0x12392CC", Offset = "0x12392CC", VA = "0x12392CC")]
		public static bool EdgeGoesRight(MeshUtils.Edge e)
		{
			return default(bool);
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0x12392F0", Offset = "0x12392F0", VA = "0x12392F0")]
		public static float VertL1dist(MeshUtils.Vertex u, MeshUtils.Vertex v)
		{
			return default(float);
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0x1239374", Offset = "0x1239374", VA = "0x1239374")]
		public static void AddWinding(MeshUtils.Edge eDst, MeshUtils.Edge eSrc)
		{
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0x12393BC", Offset = "0x12393BC", VA = "0x12393BC")]
		public static float Interpolate(float a, float x, float b, float y)
		{
			return default(float);
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0x1239418", Offset = "0x1239418", VA = "0x1239418")]
		private static void Swap(ref MeshUtils.Vertex a, ref MeshUtils.Vertex b)
		{
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0x123942C", Offset = "0x123942C", VA = "0x123942C")]
		public static void EdgeIntersect(MeshUtils.Vertex o1, MeshUtils.Vertex d1, MeshUtils.Vertex o2, MeshUtils.Vertex d2, MeshUtils.Vertex v)
		{
		}
	}
	[Token(Token = "0x2000288")]
	internal class LTMesh : MeshUtils.Pooled<LTMesh>
	{
		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal MeshUtils.Vertex _vHead;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal MeshUtils.Face _fHead;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal MeshUtils.Edge _eHead;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal MeshUtils.Edge _eHeadSym;

		[Token(Token = "0x600111A")]
		[Address(RVA = "0x1239780", Offset = "0x1239780", VA = "0x1239780")]
		public LTMesh()
		{
		}

		[Token(Token = "0x600111B")]
		[Address(RVA = "0x12398D4", Offset = "0x12398D4", VA = "0x12398D4", Slot = "4")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600111C")]
		[Address(RVA = "0x12398E0", Offset = "0x12398E0", VA = "0x12398E0", Slot = "5")]
		public override void OnFree()
		{
		}

		[Token(Token = "0x600111D")]
		[Address(RVA = "0x12399E8", Offset = "0x12399E8", VA = "0x12399E8")]
		public MeshUtils.Edge MakeEdge()
		{
			return null;
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0x1239BEC", Offset = "0x1239BEC", VA = "0x1239BEC")]
		public void Splice(MeshUtils.Edge eOrg, MeshUtils.Edge eDst)
		{
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0x1239E00", Offset = "0x1239E00", VA = "0x1239E00")]
		public void Delete(MeshUtils.Edge eDel)
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0x1239FC4", Offset = "0x1239FC4", VA = "0x1239FC4")]
		public MeshUtils.Edge AddEdgeVertex(MeshUtils.Edge eOrg)
		{
			return null;
		}

		[Token(Token = "0x6001121")]
		[Address(RVA = "0x123A02C", Offset = "0x123A02C", VA = "0x123A02C")]
		public MeshUtils.Edge SplitEdge(MeshUtils.Edge eOrg)
		{
			return null;
		}

		[Token(Token = "0x6001122")]
		[Address(RVA = "0x123A0FC", Offset = "0x123A0FC", VA = "0x123A0FC")]
		public MeshUtils.Edge Connect(MeshUtils.Edge eOrg, MeshUtils.Edge eDst)
		{
			return null;
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0x123A1BC", Offset = "0x123A1BC", VA = "0x123A1BC")]
		public void ZapFace(MeshUtils.Face fZap)
		{
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0x123A2D8", Offset = "0x123A2D8", VA = "0x123A2D8")]
		public void MergeConvexFaces(int maxVertsPerFace)
		{
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0x123A49C", Offset = "0x123A49C", VA = "0x123A49C")]
		[System.Diagnostics.Conditional("DEBUG")]
		public void Check()
		{
		}
	}
	[Token(Token = "0x2000289")]
	public struct Vec3
	{
		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vec3 Zero;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float X;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Y;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float Z;

		[Token(Token = "0x1700022B")]
		public float this[int index]
		{
			[Token(Token = "0x6001126")]
			[Address(RVA = "0x123A534", Offset = "0x123A534", VA = "0x123A534")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001127")]
			[Address(RVA = "0x123A5A0", Offset = "0x123A5A0", VA = "0x123A5A0")]
			set
			{
			}
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0x123A60C", Offset = "0x123A60C", VA = "0x123A60C")]
		public static void Sub(ref Vec3 lhs, ref Vec3 rhs, out Vec3 result)
		{
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0x123A630", Offset = "0x123A630", VA = "0x123A630")]
		public static void Neg(ref Vec3 v)
		{
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0x123A64C", Offset = "0x123A64C", VA = "0x123A64C")]
		public static void Dot(ref Vec3 u, ref Vec3 v, out float dot)
		{
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0x123A678", Offset = "0x123A678", VA = "0x123A678")]
		public static void Normalize(ref Vec3 v)
		{
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0x123A714", Offset = "0x123A714", VA = "0x123A714")]
		public static int LongAxis(ref Vec3 v)
		{
			return default(int);
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0x123A7D4", Offset = "0x123A7D4", VA = "0x123A7D4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200028A")]
	internal static class MeshUtils
	{
		[Token(Token = "0x200028B")]
		public abstract class Pooled<T> where T : Pooled<T>, new()
		{
			[Token(Token = "0x4000D17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static Stack<T> _stack;

			[Token(Token = "0x6001137")]
			public abstract void Reset();

			[Token(Token = "0x6001138")]
			public virtual void OnFree()
			{
			}

			[Token(Token = "0x6001139")]
			public static T Create()
			{
				return null;
			}

			[Token(Token = "0x600113A")]
			public void Free()
			{
			}

			[Token(Token = "0x600113B")]
			protected Pooled()
			{
			}
		}

		[Token(Token = "0x200028C")]
		public class Vertex : Pooled<Vertex>
		{
			[Token(Token = "0x4000D18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Vertex _prev;

			[Token(Token = "0x4000D19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Vertex _next;

			[Token(Token = "0x4000D1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Edge _anEdge;

			[Token(Token = "0x4000D1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Vec3 _coords;

			[Token(Token = "0x4000D1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal float _s;

			[Token(Token = "0x4000D1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal float _t;

			[Token(Token = "0x4000D1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			internal PQHandle _pqHandle;

			[Token(Token = "0x4000D1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal int _n;

			[Token(Token = "0x4000D20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal object _data;

			[Token(Token = "0x600113C")]
			[Address(RVA = "0x123A928", Offset = "0x123A928", VA = "0x123A928", Slot = "4")]
			public override void Reset()
			{
			}

			[Token(Token = "0x600113D")]
			[Address(RVA = "0x123A9A4", Offset = "0x123A9A4", VA = "0x123A9A4")]
			public Vertex()
			{
			}
		}

		[Token(Token = "0x200028D")]
		public class Face : Pooled<Face>
		{
			[Token(Token = "0x4000D21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal Face _prev;

			[Token(Token = "0x4000D22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Face _next;

			[Token(Token = "0x4000D23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Edge _anEdge;

			[Token(Token = "0x4000D24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Face _trail;

			[Token(Token = "0x4000D25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal int _n;

			[Token(Token = "0x4000D26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			internal bool _marked;

			[Token(Token = "0x4000D27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
			internal bool _inside;

			[Token(Token = "0x1700022C")]
			internal int VertsCount
			{
				[Token(Token = "0x600113E")]
				[Address(RVA = "0x123A44C", Offset = "0x123A44C", VA = "0x123A44C")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x600113F")]
			[Address(RVA = "0x123A9EC", Offset = "0x123A9EC", VA = "0x123A9EC", Slot = "4")]
			public override void Reset()
			{
			}

			[Token(Token = "0x6001140")]
			[Address(RVA = "0x123A9FC", Offset = "0x123A9FC", VA = "0x123A9FC")]
			public Face()
			{
			}
		}

		[Token(Token = "0x200028E")]
		public struct EdgePair
		{
			[Token(Token = "0x4000D28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal Edge _e;

			[Token(Token = "0x4000D29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal Edge _eSym;

			[Token(Token = "0x6001141")]
			[Address(RVA = "0x1239868", Offset = "0x1239868", VA = "0x1239868")]
			public static EdgePair Create()
			{
				return default(EdgePair);
			}

			[Token(Token = "0x6001142")]
			[Address(RVA = "0x123AA44", Offset = "0x123AA44", VA = "0x123AA44")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x200028F")]
		public class Edge : Pooled<Edge>
		{
			[Token(Token = "0x4000D2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal EdgePair _pair;

			[Token(Token = "0x4000D2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal Edge _next;

			[Token(Token = "0x4000D2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal Edge _Sym;

			[Token(Token = "0x4000D2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal Edge _Onext;

			[Token(Token = "0x4000D2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal Edge _Lnext;

			[Token(Token = "0x4000D2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal Vertex _Org;

			[Token(Token = "0x4000D30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal Face _Lface;

			[Token(Token = "0x4000D31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal Tess.ActiveRegion _activeRegion;

			[Token(Token = "0x4000D32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal int _winding;

			[Token(Token = "0x1700022D")]
			internal Face _Rface
			{
				[Token(Token = "0x6001143")]
				[Address(RVA = "0x1239EF8", Offset = "0x1239EF8", VA = "0x1239EF8")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001144")]
				[Address(RVA = "0x123A0E0", Offset = "0x123A0E0", VA = "0x123A0E0")]
				set
				{
				}
			}

			[Token(Token = "0x1700022E")]
			internal Vertex _Dst
			{
				[Token(Token = "0x6001145")]
				[Address(RVA = "0x12392B0", Offset = "0x12392B0", VA = "0x12392B0")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001146")]
				[Address(RVA = "0x123A0C4", Offset = "0x123A0C4", VA = "0x123A0C4")]
				set
				{
				}
			}

			[Token(Token = "0x1700022F")]
			internal Edge _Oprev
			{
				[Token(Token = "0x6001147")]
				[Address(RVA = "0x1239F14", Offset = "0x1239F14", VA = "0x1239F14")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001148")]
				[Address(RVA = "0x123AA4C", Offset = "0x123AA4C", VA = "0x123AA4C")]
				set
				{
				}
			}

			[Token(Token = "0x17000230")]
			internal Edge _Lprev
			{
				[Token(Token = "0x6001149")]
				[Address(RVA = "0x123A480", Offset = "0x123A480", VA = "0x123A480")]
				get
				{
					return null;
				}
				[Token(Token = "0x600114A")]
				[Address(RVA = "0x123AA68", Offset = "0x123AA68", VA = "0x123AA68")]
				set
				{
				}
			}

			[Token(Token = "0x17000231")]
			internal Edge _Dprev
			{
				[Token(Token = "0x600114B")]
				[Address(RVA = "0x123AA84", Offset = "0x123AA84", VA = "0x123AA84")]
				get
				{
					return null;
				}
				[Token(Token = "0x600114C")]
				[Address(RVA = "0x123AAA0", Offset = "0x123AAA0", VA = "0x123AAA0")]
				set
				{
				}
			}

			[Token(Token = "0x17000232")]
			internal Edge _Rprev
			{
				[Token(Token = "0x600114D")]
				[Address(RVA = "0x123AABC", Offset = "0x123AABC", VA = "0x123AABC")]
				get
				{
					return null;
				}
				[Token(Token = "0x600114E")]
				[Address(RVA = "0x123AAD8", Offset = "0x123AAD8", VA = "0x123AAD8")]
				set
				{
				}
			}

			[Token(Token = "0x17000233")]
			internal Edge _Dnext
			{
				[Token(Token = "0x600114F")]
				[Address(RVA = "0x123AAF4", Offset = "0x123AAF4", VA = "0x123AAF4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001150")]
				[Address(RVA = "0x123AB18", Offset = "0x123AB18", VA = "0x123AB18")]
				set
				{
				}
			}

			[Token(Token = "0x17000234")]
			internal Edge _Rnext
			{
				[Token(Token = "0x6001151")]
				[Address(RVA = "0x123AB3C", Offset = "0x123AB3C", VA = "0x123AB3C")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001152")]
				[Address(RVA = "0x123AB60", Offset = "0x123AB60", VA = "0x123AB60")]
				set
				{
				}
			}

			[Token(Token = "0x6001153")]
			[Address(RVA = "0x123A89C", Offset = "0x123A89C", VA = "0x123A89C")]
			internal static void EnsureFirst(ref Edge e)
			{
			}

			[Token(Token = "0x6001154")]
			[Address(RVA = "0x123AB84", Offset = "0x123AB84", VA = "0x123AB84", Slot = "4")]
			public override void Reset()
			{
			}

			[Token(Token = "0x6001155")]
			[Address(RVA = "0x123AB98", Offset = "0x123AB98", VA = "0x123AB98")]
			public Edge()
			{
			}
		}

		[Token(Token = "0x4000D16")]
		public const int Undef = -1;

		[Token(Token = "0x600112F")]
		[Address(RVA = "0x1239A38", Offset = "0x1239A38", VA = "0x1239A38")]
		public static Edge MakeEdge(Edge eNext)
		{
			return null;
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0x1239DB8", Offset = "0x1239DB8", VA = "0x1239DB8")]
		public static void Splice(Edge a, Edge b)
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0x1239AB8", Offset = "0x1239AB8", VA = "0x1239AB8")]
		public static void MakeVertex(Edge eOrig, Vertex vNext)
		{
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0x1239B4C", Offset = "0x1239B4C", VA = "0x1239B4C")]
		public static void MakeFace(Edge eOrig, Face fNext)
		{
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0x1239F30", Offset = "0x1239F30", VA = "0x1239F30")]
		public static void KillEdge(Edge eDel)
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0x1239CA8", Offset = "0x1239CA8", VA = "0x1239CA8")]
		public static void KillVertex(Vertex vDel, Vertex newOrg)
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0x1239D30", Offset = "0x1239D30", VA = "0x1239D30")]
		public static void KillFace(Face fDel, Face newLFace)
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0x123A8C8", Offset = "0x123A8C8", VA = "0x123A8C8")]
		public static float FaceArea(Face f)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000290")]
	internal struct PQHandle
	{
		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int Invalid;

		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal int _handle;
	}
	[Token(Token = "0x2000291")]
	internal class PriorityHeap<TValue> where TValue : class
	{
		[Token(Token = "0x2000292")]
		public delegate bool LessOrEqual(TValue lhs, TValue rhs);

		[Token(Token = "0x2000293")]
		protected class HandleElem
		{
			[Token(Token = "0x4000D3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal TValue _key;

			[Token(Token = "0x4000D3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int _node;

			[Token(Token = "0x6001164")]
			public HandleElem()
			{
			}
		}

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private LessOrEqual _leq;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int[] _nodes;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private HandleElem[] _handles;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _size;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _max;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _freeList;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _initialized;

		[Token(Token = "0x17000235")]
		public bool Empty
		{
			[Token(Token = "0x6001157")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001158")]
		public PriorityHeap(int initialSize, LessOrEqual leq)
		{
		}

		[Token(Token = "0x6001159")]
		private void FloatDown(int curr)
		{
		}

		[Token(Token = "0x600115A")]
		private void FloatUp(int curr)
		{
		}

		[Token(Token = "0x600115B")]
		public void Init()
		{
		}

		[Token(Token = "0x600115C")]
		public PQHandle Insert(TValue value)
		{
			return default(PQHandle);
		}

		[Token(Token = "0x600115D")]
		public TValue ExtractMin()
		{
			return null;
		}

		[Token(Token = "0x600115E")]
		public TValue Minimum()
		{
			return null;
		}

		[Token(Token = "0x600115F")]
		public void Remove(PQHandle handle)
		{
		}
	}
	[Token(Token = "0x2000294")]
	internal class PriorityQueue<TValue> where TValue : class
	{
		[Token(Token = "0x2000295")]
		private class StackItem
		{
			[Token(Token = "0x4000D45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int p;

			[Token(Token = "0x4000D46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal int r;

			[Token(Token = "0x600116D")]
			public StackItem()
			{
			}
		}

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private PriorityHeap<TValue>.LessOrEqual _leq;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private PriorityHeap<TValue> _heap;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private TValue[] _keys;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int[] _order;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _size;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _max;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _initialized;

		[Token(Token = "0x17000236")]
		public bool Empty
		{
			[Token(Token = "0x6001165")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001166")]
		public PriorityQueue(int initialSize, PriorityHeap<TValue>.LessOrEqual leq)
		{
		}

		[Token(Token = "0x6001167")]
		private static void Swap(ref int a, ref int b)
		{
		}

		[Token(Token = "0x6001168")]
		public void Init()
		{
		}

		[Token(Token = "0x6001169")]
		public PQHandle Insert(TValue value)
		{
			return default(PQHandle);
		}

		[Token(Token = "0x600116A")]
		public TValue ExtractMin()
		{
			return null;
		}

		[Token(Token = "0x600116B")]
		public TValue Minimum()
		{
			return null;
		}

		[Token(Token = "0x600116C")]
		public void Remove(PQHandle handle)
		{
		}
	}
	[Token(Token = "0x2000296")]
	public class Tess
	{
		[Token(Token = "0x2000297")]
		internal class ActiveRegion
		{
			[Token(Token = "0x4000D5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal MeshUtils.Edge _eUp;

			[Token(Token = "0x4000D5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal Dict<ActiveRegion>.Node _nodeUp;

			[Token(Token = "0x4000D5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal int _windingNumber;

			[Token(Token = "0x4000D60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			internal bool _inside;

			[Token(Token = "0x4000D61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
			internal bool _sentinel;

			[Token(Token = "0x4000D62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
			internal bool _dirty;

			[Token(Token = "0x4000D63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
			internal bool _fixUpperEdge;

			[Token(Token = "0x60011A3")]
			[Address(RVA = "0x123AFE0", Offset = "0x123AFE0", VA = "0x123AFE0")]
			public ActiveRegion()
			{
			}
		}

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private LTMesh _mesh;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Vec3 _normal;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vec3 _sUnit;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vec3 _tUnit;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _bminX;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _bminY;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float _bmaxX;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float _bmaxY;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private WindingRule _windingRule;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dict<ActiveRegion> _dict;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PriorityQueue<MeshUtils.Vertex> _pq;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MeshUtils.Vertex _event;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CombineCallback _combineCallback;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ContourVertex[] _vertices;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int _vertexCount;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int[] _elements;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _elementCount;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float SUnitX;

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float SUnitY;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float SentinelCoord;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool NoEmptyPolygons;

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool UsePooling;

		[Token(Token = "0x17000237")]
		public Vec3 Normal
		{
			[Token(Token = "0x600118D")]
			[Address(RVA = "0x123CE98", Offset = "0x123CE98", VA = "0x123CE98")]
			get
			{
				return default(Vec3);
			}
			[Token(Token = "0x600118E")]
			[Address(RVA = "0x123CEA4", Offset = "0x123CEA4", VA = "0x123CEA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000238")]
		public ContourVertex[] Vertices
		{
			[Token(Token = "0x600118F")]
			[Address(RVA = "0x123CEB0", Offset = "0x123CEB0", VA = "0x123CEB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000239")]
		public int VertexCount
		{
			[Token(Token = "0x6001190")]
			[Address(RVA = "0x123CEB8", Offset = "0x123CEB8", VA = "0x123CEB8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700023A")]
		public int[] Elements
		{
			[Token(Token = "0x6001191")]
			[Address(RVA = "0x123CEC0", Offset = "0x123CEC0", VA = "0x123CEC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700023B")]
		public int ElementCount
		{
			[Token(Token = "0x6001192")]
			[Address(RVA = "0x123CEC8", Offset = "0x123CEC8", VA = "0x123CEC8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0x123AC2C", Offset = "0x123AC2C", VA = "0x123AC2C")]
		private ActiveRegion RegionBelow(ActiveRegion reg)
		{
			return null;
		}

		[Token(Token = "0x600116F")]
		[Address(RVA = "0x123AC54", Offset = "0x123AC54", VA = "0x123AC54")]
		private ActiveRegion RegionAbove(ActiveRegion reg)
		{
			return null;
		}

		[Token(Token = "0x6001170")]
		[Address(RVA = "0x123AC7C", Offset = "0x123AC7C", VA = "0x123AC7C")]
		private bool EdgeLeq(ActiveRegion reg1, ActiveRegion reg2)
		{
			return default(bool);
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0x123AD78", Offset = "0x123AD78", VA = "0x123AD78")]
		private void DeleteRegion(ActiveRegion reg)
		{
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0x123ADE0", Offset = "0x123ADE0", VA = "0x123ADE0")]
		private void FixUpperEdge(ActiveRegion reg, MeshUtils.Edge newEdge)
		{
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0x123AE24", Offset = "0x123AE24", VA = "0x123AE24")]
		private ActiveRegion TopLeftRegion(ActiveRegion reg)
		{
			return null;
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0x123AED4", Offset = "0x123AED4", VA = "0x123AED4")]
		private ActiveRegion TopRightRegion(ActiveRegion reg)
		{
			return null;
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0x123AF28", Offset = "0x123AF28", VA = "0x123AF28")]
		private ActiveRegion AddRegionBelow(ActiveRegion regAbove, MeshUtils.Edge eNewUp)
		{
			return null;
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0x123AFE8", Offset = "0x123AFE8", VA = "0x123AFE8")]
		private void ComputeWinding(ActiveRegion reg)
		{
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0x123B03C", Offset = "0x123B03C", VA = "0x123B03C")]
		private void FinishRegion(ActiveRegion reg)
		{
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0x123B06C", Offset = "0x123B06C", VA = "0x123B06C")]
		private MeshUtils.Edge FinishLeftRegions(ActiveRegion regFirst, ActiveRegion regLast)
		{
			return null;
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0x123B188", Offset = "0x123B188", VA = "0x123B188")]
		private void AddRightEdges(ActiveRegion regUp, MeshUtils.Edge eFirst, MeshUtils.Edge eLast, MeshUtils.Edge eTopLeft, bool cleanUp)
		{
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x123B700", Offset = "0x123B700", VA = "0x123B700")]
		private void SpliceMergeVertices(MeshUtils.Edge e1, MeshUtils.Edge e2)
		{
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0x123B718", Offset = "0x123B718", VA = "0x123B718")]
		private void VertexWeights(MeshUtils.Vertex isect, MeshUtils.Vertex org, MeshUtils.Vertex dst, out float w0, out float w1)
		{
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0x123B808", Offset = "0x123B808", VA = "0x123B808")]
		private void GetIntersectData(MeshUtils.Vertex isect, MeshUtils.Vertex orgUp, MeshUtils.Vertex dstUp, MeshUtils.Vertex orgLo, MeshUtils.Vertex dstLo)
		{
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0x123B344", Offset = "0x123B344", VA = "0x123B344")]
		private bool CheckForRightSplice(ActiveRegion regUp)
		{
			return default(bool);
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0x123BA94", Offset = "0x123BA94", VA = "0x123BA94")]
		private bool CheckForLeftSplice(ActiveRegion regUp)
		{
			return default(bool);
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0x123BBF8", Offset = "0x123BBF8", VA = "0x123BBF8")]
		private bool CheckForIntersect(ActiveRegion regUp)
		{
			return default(bool);
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0x123B4D0", Offset = "0x123B4D0", VA = "0x123B4D0")]
		private void WalkDirtyRegions(ActiveRegion regUp)
		{
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x123C194", Offset = "0x123C194", VA = "0x123C194")]
		private void ConnectRightVertex(ActiveRegion regUp, MeshUtils.Edge eBottomLeft)
		{
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0x123C390", Offset = "0x123C390", VA = "0x123C390")]
		private void ConnectLeftDegenerate(ActiveRegion regUp, MeshUtils.Vertex vEvent)
		{
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0x123C54C", Offset = "0x123C54C", VA = "0x123C54C")]
		private void ConnectLeftVertex(MeshUtils.Vertex vEvent)
		{
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0x123C488", Offset = "0x123C488", VA = "0x123C488")]
		private void SweepEvent(MeshUtils.Vertex vEvent)
		{
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0x123C768", Offset = "0x123C768", VA = "0x123C768")]
		private void AddSentinel(float smin, float smax, float t)
		{
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0x123C85C", Offset = "0x123C85C", VA = "0x123C85C")]
		private void InitEdgeDict()
		{
		}

		[Token(Token = "0x6001187")]
		[Address(RVA = "0x123C940", Offset = "0x123C940", VA = "0x123C940")]
		private void DoneEdgeDict()
		{
		}

		[Token(Token = "0x6001188")]
		[Address(RVA = "0x123C9C0", Offset = "0x123C9C0", VA = "0x123C9C0")]
		private void RemoveDegenerateEdges()
		{
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0x123CAF8", Offset = "0x123CAF8", VA = "0x123CAF8")]
		private void InitPriorityQ()
		{
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0x123CCFC", Offset = "0x123CCFC", VA = "0x123CCFC")]
		private void DonePriorityQ()
		{
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0x123CD04", Offset = "0x123CD04", VA = "0x123CD04")]
		private void RemoveDegenerateFaces()
		{
		}

		[Token(Token = "0x600118C")]
		[Address(RVA = "0x123CD90", Offset = "0x123CD90", VA = "0x123CD90")]
		protected void ComputeInterior()
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0x123CED0", Offset = "0x123CED0", VA = "0x123CED0")]
		public Tess()
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0x123CF74", Offset = "0x123CF74", VA = "0x123CF74")]
		private void ComputeNormal(ref Vec3 norm)
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0x123D58C", Offset = "0x123D58C", VA = "0x123D58C")]
		private void CheckOrientation()
		{
		}

		[Token(Token = "0x6001196")]
		[Address(RVA = "0x123D688", Offset = "0x123D688", VA = "0x123D688")]
		private void ProjectPolygon()
		{
		}

		[Token(Token = "0x6001197")]
		[Address(RVA = "0x123D960", Offset = "0x123D960", VA = "0x123D960")]
		private void TessellateMonoRegion(MeshUtils.Face face)
		{
		}

		[Token(Token = "0x6001198")]
		[Address(RVA = "0x123DB40", Offset = "0x123DB40", VA = "0x123DB40")]
		private void TessellateInterior()
		{
		}

		[Token(Token = "0x6001199")]
		[Address(RVA = "0x123DBA0", Offset = "0x123DBA0", VA = "0x123DBA0")]
		private void DiscardExterior()
		{
		}

		[Token(Token = "0x600119A")]
		[Address(RVA = "0x123DBFC", Offset = "0x123DBFC", VA = "0x123DBFC")]
		private void SetWindingNumber(int value, bool keepOnlyBoundary)
		{
		}

		[Token(Token = "0x600119B")]
		[Address(RVA = "0x123DCA8", Offset = "0x123DCA8", VA = "0x123DCA8")]
		private int GetNeighbourFace(MeshUtils.Edge edge)
		{
			return default(int);
		}

		[Token(Token = "0x600119C")]
		[Address(RVA = "0x123DCE0", Offset = "0x123DCE0", VA = "0x123DCE0")]
		private void OutputPolymesh(ElementType elementType, int polySize)
		{
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0x123E0F8", Offset = "0x123E0F8", VA = "0x123E0F8")]
		private void OutputContours()
		{
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0x123E308", Offset = "0x123E308", VA = "0x123E308")]
		private float SignedArea(ContourVertex[] vertices)
		{
			return default(float);
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0x123E39C", Offset = "0x123E39C", VA = "0x123E39C")]
		public void AddContour(ContourVertex[] vertices)
		{
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0x123E3A4", Offset = "0x123E3A4", VA = "0x123E3A4")]
		public void AddContour(ContourVertex[] vertices, ContourOrientation forceOrientation)
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0x123E57C", Offset = "0x123E57C", VA = "0x123E57C")]
		public void Tessellate(WindingRule windingRule, ElementType elementType, int polySize)
		{
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0x123E584", Offset = "0x123E584", VA = "0x123E584")]
		public void Tessellate(WindingRule windingRule, ElementType elementType, int polySize, CombineCallback combineCallback)
		{
		}
	}
	[Token(Token = "0x2000298")]
	public enum WindingRule
	{
		[Token(Token = "0x4000D65")]
		EvenOdd,
		[Token(Token = "0x4000D66")]
		NonZero,
		[Token(Token = "0x4000D67")]
		Positive,
		[Token(Token = "0x4000D68")]
		Negative,
		[Token(Token = "0x4000D69")]
		AbsGeqTwo
	}
	[Token(Token = "0x2000299")]
	public enum ElementType
	{
		[Token(Token = "0x4000D6B")]
		Polygons,
		[Token(Token = "0x4000D6C")]
		ConnectedPolygons,
		[Token(Token = "0x4000D6D")]
		BoundaryContours
	}
	[Token(Token = "0x200029A")]
	public enum ContourOrientation
	{
		[Token(Token = "0x4000D6F")]
		Original,
		[Token(Token = "0x4000D70")]
		Clockwise,
		[Token(Token = "0x4000D71")]
		CounterClockwise
	}
	[Token(Token = "0x200029B")]
	public struct ContourVertex
	{
		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vec3 Position;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public object Data;

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0x123E6A0", Offset = "0x123E6A0", VA = "0x123E6A0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200029C")]
	public delegate object CombineCallback(Vec3 position, object[] data, float[] weights);
	[Token(Token = "0x200029D")]
	public static class LibTessVector3Extension
	{
		[Token(Token = "0x60011A9")]
		[Address(RVA = "0x123E8B8", Offset = "0x123E8B8", VA = "0x123E8B8")]
		public static Vec3 Vec3(this Vector3 v)
		{
			return default(Vec3);
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0x123E8BC", Offset = "0x123E8BC", VA = "0x123E8BC")]
		public static ContourVertex ContourVertex(this Vector3 v)
		{
			return default(ContourVertex);
		}
	}
	[Token(Token = "0x200029E")]
	public static class LibTessV3Extension
	{
		[Token(Token = "0x60011AB")]
		[Address(RVA = "0x123E8D0", Offset = "0x123E8D0", VA = "0x123E8D0")]
		public static Vector3 Vector3(this Vec3 v)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200029F")]
	public static class UnityLibTessUtility
	{
		[Token(Token = "0x60011AC")]
		[Address(RVA = "0x123E8D4", Offset = "0x123E8D4", VA = "0x123E8D4")]
		public static ContourVertex[] ToContourVertex(Vector3[] v, bool zeroZ = false)
		{
			return null;
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0x123E990", Offset = "0x123E990", VA = "0x123E990")]
		public static Vector3[] FromContourVertex(ContourVertex[] v)
		{
			return null;
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0x123EA00", Offset = "0x123EA00", VA = "0x123EA00")]
		public static void SetFromContourVertex(ref Vector3[] v3Array, ref ContourVertex[] cvArray)
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0x123EAC4", Offset = "0x123EAC4", VA = "0x123EAC4")]
		public static void SetToContourVertex(ref ContourVertex[] cvArray, ref Vector3[] v3Array)
		{
		}
	}
}
namespace FluffyUnderware.Curvy.ImportExport
{
	[Token(Token = "0x20002A0")]
	public enum CurvySerializationSpace
	{
		[Token(Token = "0x4000D75")]
		Global,
		[Token(Token = "0x4000D76")]
		Local
	}
	[Serializable]
	[Token(Token = "0x20002A1")]
	public class SerializedCurvySpline
	{
		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 Position;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 Rotation;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CurvyInterpolation Interpolation;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool RestrictTo2D;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool Closed;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public bool AutoEndTangents;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public CurvyOrientation Orientation;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float AutoHandleDistance;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int CacheDensity;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MaxPointsPerUnit;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool UsePooling;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool UseThreading;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool CheckTransform;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public CurvyUpdateMethod UpdateIn;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SerializedCurvySplineSegment[] ControlPoints;

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0x123EB90", Offset = "0x123EB90", VA = "0x123EB90")]
		public SerializedCurvySpline()
		{
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0x123EC4C", Offset = "0x123EC4C", VA = "0x123EC4C")]
		public SerializedCurvySpline([NotNull] CurvySpline spline, CurvySerializationSpace space)
		{
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x123EF9C", Offset = "0x123EF9C", VA = "0x123EF9C")]
		public void WriteIntoSpline([NotNull] CurvySpline deserializedSpline, CurvySerializationSpace space)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002A2")]
	public class SerializedCurvySplineSegment
	{
		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 Rotation;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool AutoBakeOrientation;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool OrientationAnchor;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public CurvyOrientationSwirl Swirl;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float SwirlTurns;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool AutoHandles;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float AutoHandleDistance;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 HandleOut;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 HandleIn;

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0x123F334", Offset = "0x123F334", VA = "0x123F334")]
		public SerializedCurvySplineSegment()
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0x123EEA0", Offset = "0x123EEA0", VA = "0x123EEA0")]
		public SerializedCurvySplineSegment([NotNull] CurvySplineSegment segment, CurvySerializationSpace space)
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0x123F1C4", Offset = "0x123F1C4", VA = "0x123F1C4")]
		public void WriteIntoControlPoint([NotNull] CurvySplineSegment controlPoint, CurvySerializationSpace space)
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Controllers
{
	[Token(Token = "0x20002A3")]
	public abstract class ConnectedControlPointsSelector : MonoBehaviour
	{
		[Token(Token = "0x60011B6")]
		public abstract CurvySplineSegment SelectConnectedControlPoint(SplineController caller, CurvyConnection connection, CurvySplineSegment currentControlPoint);

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0x123F3D4", Offset = "0x123F3D4", VA = "0x123F3D4")]
		protected ConnectedControlPointsSelector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002A4")]
	public class ControllerEvent : UnityEventEx<CurvyController>
	{
		[Token(Token = "0x60011B8")]
		[Address(RVA = "0x123F3DC", Offset = "0x123F3DC", VA = "0x123F3DC")]
		public ControllerEvent()
		{
		}
	}
	[Token(Token = "0x20002A5")]
	public class CurvyControllerEventArgs : CurvyEventArgs
	{
		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly CurvyController Controller;

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0x123F424", Offset = "0x123F424", VA = "0x123F424")]
		public CurvyControllerEventArgs(MonoBehaviour sender, CurvyController controller)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002A6")]
	public class CurvySplineMoveEvent : UnityEventEx<CurvySplineMoveEventArgs>
	{
		[Token(Token = "0x60011BA")]
		[Address(RVA = "0x123F450", Offset = "0x123F450", VA = "0x123F450")]
		public CurvySplineMoveEvent()
		{
		}
	}
	[Token(Token = "0x20002A7")]
	public class CurvySplineMoveEventArgs : CancelEventArgs
	{
		[Token(Token = "0x1700023C")]
		public SplineController Sender
		{
			[Token(Token = "0x60011BB")]
			[Address(RVA = "0x123F498", Offset = "0x123F498", VA = "0x123F498")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60011BC")]
			[Address(RVA = "0x123F4A0", Offset = "0x123F4A0", VA = "0x123F4A0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700023D")]
		public CurvySpline Spline
		{
			[Token(Token = "0x60011BD")]
			[Address(RVA = "0x123F4A8", Offset = "0x123F4A8", VA = "0x123F4A8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60011BE")]
			[Address(RVA = "0x123F4B0", Offset = "0x123F4B0", VA = "0x123F4B0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700023E")]
		public CurvySplineSegment ControlPoint
		{
			[Token(Token = "0x60011BF")]
			[Address(RVA = "0x123F4B8", Offset = "0x123F4B8", VA = "0x123F4B8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60011C0")]
			[Address(RVA = "0x123F4C0", Offset = "0x123F4C0", VA = "0x123F4C0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700023F")]
		public bool WorldUnits
		{
			[Token(Token = "0x60011C1")]
			[Address(RVA = "0x123F4C8", Offset = "0x123F4C8", VA = "0x123F4C8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011C2")]
			[Address(RVA = "0x123F4D0", Offset = "0x123F4D0", VA = "0x123F4D0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000240")]
		public MovementDirection MovementDirection
		{
			[Token(Token = "0x60011C3")]
			[Address(RVA = "0x123F4DC", Offset = "0x123F4DC", VA = "0x123F4DC")]
			[CompilerGenerated]
			get
			{
				return default(MovementDirection);
			}
			[Token(Token = "0x60011C4")]
			[Address(RVA = "0x123F4E4", Offset = "0x123F4E4", VA = "0x123F4E4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000241")]
		public float Delta
		{
			[Token(Token = "0x60011C5")]
			[Address(RVA = "0x123F4EC", Offset = "0x123F4EC", VA = "0x123F4EC")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011C6")]
			[Address(RVA = "0x123F4F4", Offset = "0x123F4F4", VA = "0x123F4F4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000242")]
		public float Position
		{
			[Token(Token = "0x60011C7")]
			[Address(RVA = "0x123F4FC", Offset = "0x123F4FC", VA = "0x123F4FC")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011C8")]
			[Address(RVA = "0x123F504", Offset = "0x123F504", VA = "0x123F504")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x123F50C", Offset = "0x123F50C", VA = "0x123F50C")]
		public CurvySplineMoveEventArgs(SplineController sender, CurvySpline spline, CurvySplineSegment controlPoint, float position, bool usingWorldUnits, float delta, MovementDirection direction)
		{
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x123F57C", Offset = "0x123F57C", VA = "0x123F57C")]
		internal void Set_INTERNAL(SplineController sender, CurvySpline spline, CurvySplineSegment controlPoint, float position, float delta, MovementDirection direction, bool usingWorldUnits)
		{
		}
	}
	[Token(Token = "0x20002A8")]
	[ExecuteInEditMode]
	public abstract class CurvyController : DTVersionedMonoBehaviour, ISerializationCallbackReceiver
	{
		[Token(Token = "0x20002A9")]
		public enum MoveModeEnum
		{
			[Token(Token = "0x4000DB4")]
			Relative,
			[Token(Token = "0x4000DB5")]
			AbsolutePrecise
		}

		[Token(Token = "0x20002AA")]
		public enum CurvyControllerState
		{
			[Token(Token = "0x4000DB7")]
			Stopped,
			[Token(Token = "0x4000DB8")]
			Playing,
			[Token(Token = "0x4000DB9")]
			Paused
		}

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Label(Tooltip = "Determines when to update")]
		[Section("General", true, false, 100, Sort = 0, HelpURL = "https://curvyeditor.com/doclink/curvycontroller_general")]
		public CurvyUpdateMethod UpdateIn;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Section("Position", true, false, 100, Sort = 100, HelpURL = "https://curvyeditor.com/doclink/curvycontroller_position")]
		[SerializeField]
		private CurvyPositionMode m_PositionMode;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[RangeEx(0f, "maxPosition", "", "")]
		[SerializeField]
		[FormerlySerializedAs("m_InitialPosition")]
		protected float m_Position;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Section("Move", true, false, 100, Sort = 200, HelpURL = "https://curvyeditor.com/doclink/curvycontroller_move")]
		[SerializeField]
		private MoveModeEnum m_MoveMode;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Positive]
		private float m_Speed;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private MovementDirection m_Direction;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private CurvyClamping m_Clamping;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Start playing automatically when entering play mode")]
		[SerializeField]
		private bool m_PlayAutomatically;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[FieldCondition("ShowOrientationSection", false, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Hide)]
		[Label("Source", "Source Vector")]
		[SerializeField]
		[Section("Orientation", true, false, 100, Sort = 300, HelpURL = "https://curvyeditor.com/doclink/curvycontroller_orientation")]
		private OrientationModeEnum m_OrientationMode;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[Label("Lock Rotation", "When set, the controller will enforce the rotation to not change")]
		private bool m_LockRotation;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[FieldCondition("m_OrientationMode", OrientationModeEnum.None, false, FluffyUnderware.DevTools.ConditionalAttribute.OperatorEnum.OR, "ShowOrientationSection", false, false, Action = ActionAttribute.ActionEnum.Hide)]
		[Label("Target", "Target Vector3")]
		[SerializeField]
		private OrientationAxisEnum m_OrientationAxis;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Should the orientation ignore the movement direction?")]
		[FieldCondition("m_OrientationMode", OrientationModeEnum.None, false, FluffyUnderware.DevTools.ConditionalAttribute.OperatorEnum.OR, "ShowOrientationSection", false, false, Action = ActionAttribute.ActionEnum.Hide)]
		[SerializeField]
		private bool m_IgnoreDirection;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[FieldCondition("ShowOrientationSection", false, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Hide)]
		[SerializeField]
		[FluffyUnderware.DevTools.Min(0f, "Direction Damping Time", "If non zero, the direction vector will not be updated instantly, but using a damping effect that will last the specified amount of time.")]
		private float m_DampingDirection;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[FieldCondition("ShowOrientationSection", false, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Hide)]
		[SerializeField]
		[FluffyUnderware.DevTools.Min(0f, "Up Damping Time", "If non zero, the up vector will not be updated instantly, but using a damping effect that will last the specified amount of time.")]
		private float m_DampingUp;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Section("Offset", true, false, 100, Sort = 400, HelpURL = "https://curvyeditor.com/doclink/curvycontroller_orientation")]
		[RangeEx(-180f, 180f, "", "")]
		[SerializeField]
		[FieldCondition("ShowOffsetSection", false, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Hide)]
		private float m_OffsetAngle;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[FieldCondition("ShowOffsetSection", false, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Hide)]
		[SerializeField]
		private float m_OffsetRadius;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[FieldCondition("ShowOffsetSection", false, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Hide)]
		[Label("Compensate Offset", "")]
		[SerializeField]
		private bool m_OffsetCompensation;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Section("Events", true, false, 100, Sort = 500)]
		[SerializeField]
		protected ControllerEvent onInitialized;

		[Token(Token = "0x4000DAB")]
		protected const string ControllerNotReadyMessage = "The controller is not yet ready";

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected CurvyControllerState State;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected Vector3 DirectionDampingVelocity;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected Vector3 UpDampingVelocity;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected float PrePlayPosition;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected MovementDirection PrePlayDirection;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected Quaternion LockedRotation;

		[Token(Token = "0x17000243")]
		public ControllerEvent OnInitialized
		{
			[Token(Token = "0x60011CB")]
			[Address(RVA = "0x123F59C", Offset = "0x123F59C", VA = "0x123F59C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000244")]
		public CurvyPositionMode PositionMode
		{
			[Token(Token = "0x60011CC")]
			[Address(RVA = "0x123F5A4", Offset = "0x123F5A4", VA = "0x123F5A4")]
			get
			{
				return default(CurvyPositionMode);
			}
			[Token(Token = "0x60011CD")]
			[Address(RVA = "0x123F5AC", Offset = "0x123F5AC", VA = "0x123F5AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000245")]
		public MoveModeEnum MoveMode
		{
			[Token(Token = "0x60011CE")]
			[Address(RVA = "0x123F5B4", Offset = "0x123F5B4", VA = "0x123F5B4")]
			get
			{
				return default(MoveModeEnum);
			}
			[Token(Token = "0x60011CF")]
			[Address(RVA = "0x123F5BC", Offset = "0x123F5BC", VA = "0x123F5BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000246")]
		public bool PlayAutomatically
		{
			[Token(Token = "0x60011D0")]
			[Address(RVA = "0x123F5D0", Offset = "0x123F5D0", VA = "0x123F5D0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011D1")]
			[Address(RVA = "0x123F5D8", Offset = "0x123F5D8", VA = "0x123F5D8")]
			set
			{
			}
		}

		[Token(Token = "0x17000247")]
		public CurvyClamping Clamping
		{
			[Token(Token = "0x60011D2")]
			[Address(RVA = "0x123F5F0", Offset = "0x123F5F0", VA = "0x123F5F0")]
			get
			{
				return default(CurvyClamping);
			}
			[Token(Token = "0x60011D3")]
			[Address(RVA = "0x123F5F8", Offset = "0x123F5F8", VA = "0x123F5F8")]
			set
			{
			}
		}

		[Token(Token = "0x17000248")]
		public OrientationModeEnum OrientationMode
		{
			[Token(Token = "0x60011D4")]
			[Address(RVA = "0x123F60C", Offset = "0x123F60C", VA = "0x123F60C")]
			get
			{
				return default(OrientationModeEnum);
			}
			[Token(Token = "0x60011D5")]
			[Address(RVA = "0x123F614", Offset = "0x123F614", VA = "0x123F614")]
			set
			{
			}
		}

		[Token(Token = "0x17000249")]
		public bool LockRotation
		{
			[Token(Token = "0x60011D6")]
			[Address(RVA = "0x123F628", Offset = "0x123F628", VA = "0x123F628")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011D7")]
			[Address(RVA = "0x123F630", Offset = "0x123F630", VA = "0x123F630")]
			set
			{
			}
		}

		[Token(Token = "0x1700024A")]
		public OrientationAxisEnum OrientationAxis
		{
			[Token(Token = "0x60011D8")]
			[Address(RVA = "0x123F688", Offset = "0x123F688", VA = "0x123F688")]
			get
			{
				return default(OrientationAxisEnum);
			}
			[Token(Token = "0x60011D9")]
			[Address(RVA = "0x123F690", Offset = "0x123F690", VA = "0x123F690")]
			set
			{
			}
		}

		[Token(Token = "0x1700024B")]
		public float DirectionDampingTime
		{
			[Token(Token = "0x60011DA")]
			[Address(RVA = "0x123F6A4", Offset = "0x123F6A4", VA = "0x123F6A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011DB")]
			[Address(RVA = "0x123F6AC", Offset = "0x123F6AC", VA = "0x123F6AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700024C")]
		public float UpDampingTime
		{
			[Token(Token = "0x60011DC")]
			[Address(RVA = "0x123F6C8", Offset = "0x123F6C8", VA = "0x123F6C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011DD")]
			[Address(RVA = "0x123F6D0", Offset = "0x123F6D0", VA = "0x123F6D0")]
			set
			{
			}
		}

		[Token(Token = "0x1700024D")]
		public bool IgnoreDirection
		{
			[Token(Token = "0x60011DE")]
			[Address(RVA = "0x123F6EC", Offset = "0x123F6EC", VA = "0x123F6EC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011DF")]
			[Address(RVA = "0x123F6F4", Offset = "0x123F6F4", VA = "0x123F6F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700024E")]
		public float OffsetAngle
		{
			[Token(Token = "0x60011E0")]
			[Address(RVA = "0x123F70C", Offset = "0x123F70C", VA = "0x123F70C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011E1")]
			[Address(RVA = "0x123F714", Offset = "0x123F714", VA = "0x123F714")]
			set
			{
			}
		}

		[Token(Token = "0x1700024F")]
		public float OffsetRadius
		{
			[Token(Token = "0x60011E2")]
			[Address(RVA = "0x123F728", Offset = "0x123F728", VA = "0x123F728")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011E3")]
			[Address(RVA = "0x123F730", Offset = "0x123F730", VA = "0x123F730")]
			set
			{
			}
		}

		[Token(Token = "0x17000250")]
		public bool OffsetCompensation
		{
			[Token(Token = "0x60011E4")]
			[Address(RVA = "0x123F744", Offset = "0x123F744", VA = "0x123F744")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011E5")]
			[Address(RVA = "0x123F74C", Offset = "0x123F74C", VA = "0x123F74C")]
			set
			{
			}
		}

		[Token(Token = "0x17000251")]
		public float Speed
		{
			[Token(Token = "0x60011E6")]
			[Address(RVA = "0x123F758", Offset = "0x123F758", VA = "0x123F758")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011E7")]
			[Address(RVA = "0x123F760", Offset = "0x123F760", VA = "0x123F760")]
			set
			{
			}
		}

		[Token(Token = "0x17000252")]
		public float RelativePosition
		{
			[Token(Token = "0x60011E8")]
			[Address(RVA = "0x123F774", Offset = "0x123F774", VA = "0x123F774")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011E9")]
			[Address(RVA = "0x123F8BC", Offset = "0x123F8BC", VA = "0x123F8BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000253")]
		public float AbsolutePosition
		{
			[Token(Token = "0x60011EA")]
			[Address(RVA = "0x123F968", Offset = "0x123F968", VA = "0x123F968")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011EB")]
			[Address(RVA = "0x123FA4C", Offset = "0x123FA4C", VA = "0x123FA4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000254")]
		public float Position
		{
			[Token(Token = "0x60011EC")]
			[Address(RVA = "0x123FAFC", Offset = "0x123FAFC", VA = "0x123FAFC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011ED")]
			[Address(RVA = "0x123FB5C", Offset = "0x123FB5C", VA = "0x123FB5C")]
			set
			{
			}
		}

		[Token(Token = "0x17000255")]
		public MovementDirection MovementDirection
		{
			[Token(Token = "0x60011EE")]
			[Address(RVA = "0x123FBBC", Offset = "0x123FBBC", VA = "0x123FBBC")]
			get
			{
				return default(MovementDirection);
			}
			[Token(Token = "0x60011EF")]
			[Address(RVA = "0x123FBC4", Offset = "0x123FBC4", VA = "0x123FBC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000256")]
		public CurvyControllerState PlayState
		{
			[Token(Token = "0x60011F0")]
			[Address(RVA = "0x123FBCC", Offset = "0x123FBCC", VA = "0x123FBCC")]
			get
			{
				return default(CurvyControllerState);
			}
		}

		[Token(Token = "0x17000257")]
		public abstract bool IsReady
		{
			[Token(Token = "0x60011F1")]
			get;
		}

		[Token(Token = "0x17000258")]
		public virtual Transform Transform
		{
			[Token(Token = "0x60011F9")]
			[Address(RVA = "0x123FEF0", Offset = "0x123FEF0", VA = "0x123FEF0", Slot = "15")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000259")]
		protected virtual bool ShowOrientationSection
		{
			[Token(Token = "0x6001204")]
			[Address(RVA = "0x1240C74", Offset = "0x1240C74", VA = "0x1240C74", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700025A")]
		protected virtual bool ShowOffsetSection
		{
			[Token(Token = "0x6001205")]
			[Address(RVA = "0x1240C7C", Offset = "0x1240C7C", VA = "0x1240C7C", Slot = "27")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700025B")]
		public abstract float Length
		{
			[Token(Token = "0x6001206")]
			get;
		}

		[Token(Token = "0x1700025C")]
		protected bool isInitialized
		{
			[Token(Token = "0x6001217")]
			[Address(RVA = "0x12412D0", Offset = "0x12412D0", VA = "0x12412D0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001218")]
			[Address(RVA = "0x12412D8", Offset = "0x12412D8", VA = "0x12412D8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700025D")]
		protected float TimeSinceLastUpdate
		{
			[Token(Token = "0x6001219")]
			[Address(RVA = "0x123FD38", Offset = "0x123FD38", VA = "0x123FD38")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700025E")]
		protected bool UseOffset
		{
			[Token(Token = "0x600121A")]
			[Address(RVA = "0x12401F8", Offset = "0x12401F8", VA = "0x12401F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700025F")]
		private float maxPosition
		{
			[Token(Token = "0x600121D")]
			[Address(RVA = "0x12412E4", Offset = "0x12412E4", VA = "0x12412E4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0x123FBD4", Offset = "0x123FBD4", VA = "0x123FBD4", Slot = "8")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0x123FC2C", Offset = "0x123FC2C", VA = "0x123FC2C", Slot = "9")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60011F4")]
		[Address(RVA = "0x123FCF0", Offset = "0x123FCF0", VA = "0x123FCF0", Slot = "10")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60011F5")]
		[Address(RVA = "0x123FD0C", Offset = "0x123FD0C", VA = "0x123FD0C", Slot = "11")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0x123FDE0", Offset = "0x123FDE0", VA = "0x123FDE0", Slot = "12")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0x123FE28", Offset = "0x123FE28", VA = "0x123FE28", Slot = "13")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0x123FE58", Offset = "0x123FE58", VA = "0x123FE58", Slot = "14")]
		protected virtual void Reset()
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0x123FEF8", Offset = "0x123FEF8", VA = "0x123FEF8", Slot = "16")]
		protected virtual void InitializedApplyDeltaTime(float deltaTime)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x12404D4", Offset = "0x12404D4", VA = "0x12404D4", Slot = "17")]
		protected virtual void ComputeTargetPositionAndRotation(out Vector3 targetPosition, out Vector3 targetUp, out Vector3 targetForward)
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x1240B30", Offset = "0x1240B30", VA = "0x1240B30", Slot = "18")]
		protected virtual void Initialize()
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x1240C20", Offset = "0x1240C20", VA = "0x1240C20", Slot = "19")]
		protected virtual void Deinitialize()
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0x1240C44", Offset = "0x1240C44", VA = "0x1240C44", Slot = "20")]
		protected virtual void BindEvents()
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x1240C48", Offset = "0x1240C48", VA = "0x1240C48", Slot = "21")]
		protected virtual void UnbindEvents()
		{
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0x1240C4C", Offset = "0x1240C4C", VA = "0x1240C4C", Slot = "22")]
		protected virtual void SavePrePlayState()
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0x1240C5C", Offset = "0x1240C5C", VA = "0x1240C5C", Slot = "23")]
		protected virtual void RestorePrePlayState()
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0x1240C6C", Offset = "0x1240C6C", VA = "0x1240C6C", Slot = "24")]
		protected virtual void UserAfterInit()
		{
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0x1240C70", Offset = "0x1240C70", VA = "0x1240C70", Slot = "25")]
		protected virtual void UserAfterUpdate()
		{
		}

		[Token(Token = "0x6001207")]
		protected abstract void Advance(float speed, float deltaTime);

		[Token(Token = "0x6001208")]
		protected abstract void SimulateAdvance(ref float tf, ref MovementDirection curyDirection, float speed, float deltaTime);

		[Token(Token = "0x6001209")]
		protected abstract float AbsoluteToRelative(float worldUnitDistance);

		[Token(Token = "0x600120A")]
		protected abstract float RelativeToAbsolute(float relativeDistance);

		[Token(Token = "0x600120B")]
		protected abstract Vector3 GetInterpolatedSourcePosition(float tf);

		[Token(Token = "0x600120C")]
		protected abstract void GetInterpolatedSourcePosition(float tf, out Vector3 interpolatedPosition, out Vector3 tangent, out Vector3 up);

		[Token(Token = "0x600120D")]
		protected abstract Vector3 GetOrientation(float tf);

		[Token(Token = "0x600120E")]
		protected abstract Vector3 GetTangent(float tf);

		[Token(Token = "0x600120F")]
		[Address(RVA = "0x123FCBC", Offset = "0x123FCBC", VA = "0x123FCBC")]
		public void Play()
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0x1240C8C", Offset = "0x1240C8C", VA = "0x1240C8C")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0x1240CBC", Offset = "0x1240CBC", VA = "0x1240CBC")]
		public void Pause()
		{
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0x1240CD4", Offset = "0x1240CD4", VA = "0x1240CD4")]
		public void Refresh()
		{
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0x123FD40", Offset = "0x123FD40", VA = "0x123FD40")]
		public void ApplyDeltaTime(float deltaTime)
		{
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0x1240CDC", Offset = "0x1240CDC", VA = "0x1240CDC")]
		public void TeleportTo(float newPosition)
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0x1240D58", Offset = "0x1240D58", VA = "0x1240D58")]
		public void TeleportBy(float distance, MovementDirection direction)
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0x1240DB8", Offset = "0x1240DB8", VA = "0x1240DB8")]
		public void SetFromString(string fieldAndValue)
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0x1240A94", Offset = "0x1240A94", VA = "0x1240A94")]
		protected static Vector3 ApplyOffset(Vector3 position, Vector3 tangent, Vector3 up, float offsetAngle, float offsetRadius)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0x123F858", Offset = "0x123F858", VA = "0x123F858")]
		protected static float GetClampedPosition(float position, CurvyPositionMode positionMode, CurvyClamping clampingMode, float length)
		{
			return default(float);
		}

		[Token(Token = "0x600121E")]
		[Address(RVA = "0x1240208", Offset = "0x1240208", VA = "0x1240208")]
		protected float ComputeOffsetCompensatedSpeed(float deltaTime)
		{
			return default(float);
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0x124094C", Offset = "0x124094C", VA = "0x124094C")]
		private void GetOrientationNoneUpAndForward(out Vector3 targetUp, out Vector3 targetForward)
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0x1241370", Offset = "0x1241370", VA = "0x1241370", Slot = "37")]
		public virtual void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0x12413B0", Offset = "0x12413B0", VA = "0x12413B0", Slot = "5")]
		public void OnBeforeSerialize()
		{
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0x12413B4", Offset = "0x12413B4", VA = "0x12413B4")]
		protected CurvyController()
		{
		}
	}
	[Token(Token = "0x20002AB")]
	public enum MovementDirection
	{
		[Token(Token = "0x4000DBB")]
		Forward,
		[Token(Token = "0x4000DBC")]
		Backward
	}
	[Token(Token = "0x20002AC")]
	public static class MovementDirectionMethods
	{
		[Token(Token = "0x6001223")]
		[Address(RVA = "0x12413D8", Offset = "0x12413D8", VA = "0x12413D8")]
		public static MovementDirection FromInt(int value)
		{
			return default(MovementDirection);
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0x12413E0", Offset = "0x12413E0", VA = "0x12413E0")]
		public static MovementDirection GetOpposite(this MovementDirection value)
		{
			return default(MovementDirection);
		}

		[Token(Token = "0x6001225")]
		[Address(RVA = "0x124143C", Offset = "0x124143C", VA = "0x124143C")]
		public static int ToInt(this MovementDirection direction)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002AD")]
	[AddComponentMenu("Curvy/Controller/CG Path Controller", 7)]
	[HelpURL("https://curvyeditor.com/doclink/pathcontroller")]
	public class PathController : CurvyController
	{
		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Section("General", true, false, 100, Sort = 0)]
		[SerializeField]
		[CGDataReferenceSelector(typeof(CGPath), Label = "Path/Slot")]
		private CGDataReference m_Path;

		[Token(Token = "0x17000260")]
		public CGDataReference Path
		{
			[Token(Token = "0x6001226")]
			[Address(RVA = "0x1241498", Offset = "0x1241498", VA = "0x1241498")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001227")]
			[Address(RVA = "0x12414A0", Offset = "0x12414A0", VA = "0x12414A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000261")]
		public CGPath PathData
		{
			[Token(Token = "0x6001228")]
			[Address(RVA = "0x12414A8", Offset = "0x12414A8", VA = "0x12414A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000262")]
		public override float Length
		{
			[Token(Token = "0x6001229")]
			[Address(RVA = "0x124151C", Offset = "0x124151C", VA = "0x124151C", Slot = "28")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000263")]
		public override bool IsReady
		{
			[Token(Token = "0x600122A")]
			[Address(RVA = "0x1241550", Offset = "0x1241550", VA = "0x1241550", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0x1241590", Offset = "0x1241590", VA = "0x1241590", Slot = "32")]
		protected override float RelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x600122C")]
		[Address(RVA = "0x12415DC", Offset = "0x12415DC", VA = "0x12415DC", Slot = "31")]
		protected override float AbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0x1241628", Offset = "0x1241628", VA = "0x1241628", Slot = "33")]
		protected override Vector3 GetInterpolatedSourcePosition(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0x1241698", Offset = "0x1241698", VA = "0x1241698", Slot = "34")]
		protected override void GetInterpolatedSourcePosition(float tf, out Vector3 interpolatedPosition, out Vector3 tangent, out Vector3 up)
		{
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0x124176C", Offset = "0x124176C", VA = "0x124176C", Slot = "36")]
		protected override Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0x12417DC", Offset = "0x12417DC", VA = "0x12417DC", Slot = "35")]
		protected override Vector3 GetOrientation(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0x124184C", Offset = "0x124184C", VA = "0x124184C", Slot = "29")]
		protected override void Advance(float speed, float deltaTime)
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0x12418BC", Offset = "0x12418BC", VA = "0x12418BC", Slot = "30")]
		protected override void SimulateAdvance(ref float tf, ref MovementDirection curyDirection, float speed, float deltaTime)
		{
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0x12419AC", Offset = "0x12419AC", VA = "0x12419AC")]
		public PathController()
		{
		}
	}
	[Token(Token = "0x20002AE")]
	public enum SplineControllerConnectionBehavior
	{
		[Token(Token = "0x4000DBF")]
		CurrentSpline,
		[Token(Token = "0x4000DC0")]
		FollowUpSpline,
		[Token(Token = "0x4000DC1")]
		RandomSpline,
		[Token(Token = "0x4000DC2")]
		FollowUpOtherwiseRandom,
		[Token(Token = "0x4000DC3")]
		Custom
	}
	[Token(Token = "0x20002AF")]
	[AddComponentMenu("Curvy/Controller/Spline Controller", 5)]
	[HelpURL("https://curvyeditor.com/doclink/splinecontroller")]
	public class SplineController : CurvyController
	{
		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[FieldCondition("m_Spline", null, false, ActionAttribute.ActionEnum.ShowError, "Missing source Spline", ActionAttribute.ActionPositionEnum.Below)]
		[Section("General", true, false, 100, Sort = 0)]
		protected CurvySpline m_Spline;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[Tooltip("Whether spline's cache data should be used. Set this to true to gain performance if precision is not required.")]
		private bool m_UseCache;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Section("Connections handling", true, false, 100, Sort = 250, HelpURL = "https://curvyeditor.com/doclink/curvycontroller_move")]
		[Label("At connection, use", "What spline should the controller use when reaching a Connection")]
		[SerializeField]
		private SplineControllerConnectionBehavior connectionBehavior;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[Label("Allow direction change", "When true, the controller will modify its direction to best fit the connected spline")]
		private bool allowDirectionChange;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		[SerializeField]
		[Label("Reject current spline", "Whether the current spline should be excluded from the randomly selected splines")]
		[FieldCondition("ShowRandomConnectionOptions", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		private bool rejectCurrentSpline;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
		[SerializeField]
		[Label("Reject divergent splines", "Whether splines that diverge from the current spline with more than a specific angle should be excluded from the randomly selected splines")]
		[FieldCondition("ShowRandomConnectionOptions", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		private bool rejectTooDivergentSplines;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		[Label("Max allowed angle", "Maximum allowed divergence angle in degrees")]
		[Range(0f, 180f)]
		private float maxAllowedDivergenceAngle;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Label("Custom Selector", "A custom logic to select which connected spline to follow. Select a Script inheriting from SplineControllerConnectionBehavior")]
		[FieldCondition("connectionBehavior", SplineControllerConnectionBehavior.Custom, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		[FieldCondition("connectionCustomSelector", null, false, ActionAttribute.ActionEnum.ShowWarning, "Missing custom selector", ActionAttribute.ActionPositionEnum.Below)]
		[SerializeField]
		private ConnectedControlPointsSelector connectionCustomSelector;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Section("Events", false, false, 1000, HelpURL = "https://curvyeditor.com/doclink/splinecontroller_events")]
		[SerializeField]
		protected CurvySplineMoveEvent m_OnControlPointReached;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		protected CurvySplineMoveEvent m_OnEndReached;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		protected CurvySplineMoveEvent m_OnSwitch;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private CurvySpline prePlaySpline;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private readonly CurvySplineMoveEventArgs preAllocatedEventArgs;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected float SwitchStartTime;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		protected float SwitchDuration;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected CurvySpline SwitchTarget;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected float TfOnSwitchTarget;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		protected MovementDirection DirectionOnSwitchTarget;

		[Token(Token = "0x17000264")]
		public virtual CurvySpline Spline
		{
			[Token(Token = "0x6001235")]
			[Address(RVA = "0x1241B04", Offset = "0x1241B04", VA = "0x1241B04", Slot = "38")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001236")]
			[Address(RVA = "0x1241B0C", Offset = "0x1241B0C", VA = "0x1241B0C", Slot = "39")]
			set
			{
			}
		}

		[Token(Token = "0x17000265")]
		public bool UseCache
		{
			[Token(Token = "0x6001237")]
			[Address(RVA = "0x1241B14", Offset = "0x1241B14", VA = "0x1241B14")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001238")]
			[Address(RVA = "0x1241B1C", Offset = "0x1241B1C", VA = "0x1241B1C")]
			set
			{
			}
		}

		[Token(Token = "0x17000266")]
		public SplineControllerConnectionBehavior ConnectionBehavior
		{
			[Token(Token = "0x6001239")]
			[Address(RVA = "0x1241B34", Offset = "0x1241B34", VA = "0x1241B34")]
			get
			{
				return default(SplineControllerConnectionBehavior);
			}
			[Token(Token = "0x600123A")]
			[Address(RVA = "0x1241B3C", Offset = "0x1241B3C", VA = "0x1241B3C")]
			set
			{
			}
		}

		[Token(Token = "0x17000267")]
		public ConnectedControlPointsSelector ConnectionCustomSelector
		{
			[Token(Token = "0x600123B")]
			[Address(RVA = "0x1241B44", Offset = "0x1241B44", VA = "0x1241B44")]
			get
			{
				return null;
			}
			[Token(Token = "0x600123C")]
			[Address(RVA = "0x1241B4C", Offset = "0x1241B4C", VA = "0x1241B4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000268")]
		public bool AllowDirectionChange
		{
			[Token(Token = "0x600123D")]
			[Address(RVA = "0x1241B54", Offset = "0x1241B54", VA = "0x1241B54")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600123E")]
			[Address(RVA = "0x1241B5C", Offset = "0x1241B5C", VA = "0x1241B5C")]
			set
			{
			}
		}

		[Token(Token = "0x17000269")]
		public bool RejectCurrentSpline
		{
			[Token(Token = "0x600123F")]
			[Address(RVA = "0x1241B68", Offset = "0x1241B68", VA = "0x1241B68")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001240")]
			[Address(RVA = "0x1241B70", Offset = "0x1241B70", VA = "0x1241B70")]
			set
			{
			}
		}

		[Token(Token = "0x1700026A")]
		public bool RejectTooDivergentSplines
		{
			[Token(Token = "0x6001241")]
			[Address(RVA = "0x1241B7C", Offset = "0x1241B7C", VA = "0x1241B7C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001242")]
			[Address(RVA = "0x1241B84", Offset = "0x1241B84", VA = "0x1241B84")]
			set
			{
			}
		}

		[Token(Token = "0x1700026B")]
		public float MaxAllowedDivergenceAngle
		{
			[Token(Token = "0x6001243")]
			[Address(RVA = "0x1241B90", Offset = "0x1241B90", VA = "0x1241B90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001244")]
			[Address(RVA = "0x1241B98", Offset = "0x1241B98", VA = "0x1241B98")]
			set
			{
			}
		}

		[Token(Token = "0x1700026C")]
		public CurvySplineMoveEvent OnControlPointReached
		{
			[Token(Token = "0x6001245")]
			[Address(RVA = "0x1241BA0", Offset = "0x1241BA0", VA = "0x1241BA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001246")]
			[Address(RVA = "0x1241BA8", Offset = "0x1241BA8", VA = "0x1241BA8")]
			set
			{
			}
		}

		[Token(Token = "0x1700026D")]
		public CurvySplineMoveEvent OnEndReached
		{
			[Token(Token = "0x6001247")]
			[Address(RVA = "0x1241BB0", Offset = "0x1241BB0", VA = "0x1241BB0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001248")]
			[Address(RVA = "0x1241BB8", Offset = "0x1241BB8", VA = "0x1241BB8")]
			set
			{
			}
		}

		[Token(Token = "0x1700026E")]
		public CurvySplineMoveEvent OnSwitch
		{
			[Token(Token = "0x6001249")]
			[Address(RVA = "0x1241BC0", Offset = "0x1241BC0", VA = "0x1241BC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600124A")]
			[Address(RVA = "0x1241BC8", Offset = "0x1241BC8", VA = "0x1241BC8")]
			set
			{
			}
		}

		[Token(Token = "0x1700026F")]
		public bool IsSwitching
		{
			[Token(Token = "0x600124B")]
			[Address(RVA = "0x1241BD0", Offset = "0x1241BD0", VA = "0x1241BD0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600124C")]
			[Address(RVA = "0x1241BD8", Offset = "0x1241BD8", VA = "0x1241BD8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000270")]
		public float SwitchProgress
		{
			[Token(Token = "0x600124D")]
			[Address(RVA = "0x1241BE4", Offset = "0x1241BE4", VA = "0x1241BE4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000271")]
		public override float Length
		{
			[Token(Token = "0x600124E")]
			[Address(RVA = "0x1241C30", Offset = "0x1241C30", VA = "0x1241C30", Slot = "28")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000272")]
		public override bool IsReady
		{
			[Token(Token = "0x6001253")]
			[Address(RVA = "0x1241F38", Offset = "0x1241F38", VA = "0x1241F38", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000273")]
		private bool ShowRandomConnectionOptions
		{
			[Token(Token = "0x600126B")]
			[Address(RVA = "0x1243DA8", Offset = "0x1243DA8", VA = "0x1243DA8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0x1241A30", Offset = "0x1241A30", VA = "0x1241A30")]
		public SplineController()
		{
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0x1241C80", Offset = "0x1241C80", VA = "0x1241C80", Slot = "40")]
		public virtual void SwitchTo(CurvySpline destinationSpline, float destinationTf, float duration)
		{
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0x1241D18", Offset = "0x1241D18", VA = "0x1241D18")]
		public void FinishCurrentSwitch()
		{
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0x1241D58", Offset = "0x1241D58", VA = "0x1241D58")]
		public void CancelCurrentSwitch()
		{
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0x1241D68", Offset = "0x1241D68", VA = "0x1241D68")]
		public static float GetAngleBetweenConnectedSplines(CurvySplineSegment before, MovementDirection movementMode, CurvySplineSegment after, bool allowMovementModeChange)
		{
			return default(float);
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0x1241F84", Offset = "0x1241F84", VA = "0x1241F84", Slot = "22")]
		protected override void SavePrePlayState()
		{
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0x1241FB4", Offset = "0x1241FB4", VA = "0x1241FB4", Slot = "23")]
		protected override void RestorePrePlayState()
		{
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0x1241FE4", Offset = "0x1241FE4", VA = "0x1241FE4", Slot = "32")]
		protected override float RelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6001257")]
		[Address(RVA = "0x1242024", Offset = "0x1242024", VA = "0x1242024", Slot = "31")]
		protected override float AbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0x1242064", Offset = "0x1242064", VA = "0x1242064", Slot = "33")]
		protected override Vector3 GetInterpolatedSourcePosition(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0x1242104", Offset = "0x1242104", VA = "0x1242104", Slot = "34")]
		protected override void GetInterpolatedSourcePosition(float tf, out Vector3 interpolatedPosition, out Vector3 tangent, out Vector3 up)
		{
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0x12422A0", Offset = "0x12422A0", VA = "0x12422A0", Slot = "36")]
		protected override Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0x1242340", Offset = "0x1242340", VA = "0x1242340", Slot = "35")]
		protected override Vector3 GetOrientation(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0x12423B8", Offset = "0x12423B8", VA = "0x12423B8", Slot = "29")]
		protected override void Advance(float speed, float deltaTime)
		{
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0x1242F48", Offset = "0x1242F48", VA = "0x1242F48", Slot = "30")]
		protected override void SimulateAdvance(ref float tf, ref MovementDirection curyDirection, float speed, float deltaTime)
		{
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0x1242E1C", Offset = "0x1242E1C", VA = "0x1242E1C")]
		private void SimulateAdvanceOnSpline(ref float tf, ref MovementDirection curyDirection, CurvySpline spline, float distance)
		{
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0x1242FA0", Offset = "0x1242FA0", VA = "0x1242FA0", Slot = "16")]
		protected override void InitializedApplyDeltaTime(float deltaTime)
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0x1243038", Offset = "0x1243038", VA = "0x1243038", Slot = "17")]
		protected override void ComputeTargetPositionAndRotation(out Vector3 targetPosition, out Vector3 targetUp, out Vector3 targetForward)
		{
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0x12432CC", Offset = "0x12432CC", VA = "0x12432CC")]
		private static float MovementCompatibleGetPosition(SplineController controller, CurvyPositionMode positionMode, out CurvySplineSegment controlPoint, out bool isOnControlPoint)
		{
			return default(float);
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0x124355C", Offset = "0x124355C", VA = "0x124355C")]
		private static void MovementCompatibleSetPosition(SplineController controller, CurvyPositionMode positionMode, float position)
		{
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0x12424E8", Offset = "0x12424E8", VA = "0x12424E8")]
		private void EventAwareMove(float distance)
		{
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0x12436C0", Offset = "0x12436C0", VA = "0x12436C0")]
		private CurvySplineSegment GetCurrentControlPoint(out bool isOnControlPoint, out float position, CurvyPositionMode positionMode)
		{
			return null;
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0x12437D8", Offset = "0x12437D8", VA = "0x12437D8")]
		private void HandleReachingNewControlPoint(CurvySplineSegment newControlPoint, CurvyPositionMode positionMode, float currentDelta, ref bool cancelMovement)
		{
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0x1243AC4", Offset = "0x1243AC4", VA = "0x1243AC4")]
		private CurvySplineSegment HandleRandomConnectionBehavior(CurvySplineSegment currentControlPoint, MovementDirection currentDirection, out MovementDirection newDirection, ReadOnlyCollection<CurvySplineSegment> connectedControlPoints)
		{
			return null;
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0x1241EF4", Offset = "0x1241EF4", VA = "0x1241EF4")]
		private static MovementDirection GetPostConnectionDirection(CurvySplineSegment connectedControlPoint, MovementDirection currentDirection, bool directionChangeAllowed)
		{
			return default(MovementDirection);
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0x12439EC", Offset = "0x12439EC", VA = "0x12439EC")]
		private CurvySplineSegment HandleFollowUpConnectionBehavior(CurvySplineSegment currentControlPoint, MovementDirection currentDirection, out MovementDirection newDirection)
		{
			return null;
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0x1243D30", Offset = "0x1243D30", VA = "0x1243D30")]
		private static MovementDirection HeadingToDirection(ConnectionHeadingEnum heading, CurvySplineSegment controlPoint, MovementDirection currentDirection)
		{
			return default(MovementDirection);
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0x12436F8", Offset = "0x12436F8", VA = "0x12436F8")]
		private static float GetControlPointPosition(CurvySplineSegment controlPoint, CurvyPositionMode positionMode, MovementDirection movementDirection)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20002B0")]
	[HelpURL("https://curvyeditor.com/doclink/uitextsplinecontroller")]
	[RequireComponent(typeof(Text))]
	[AddComponentMenu("Curvy/Controller/UI Text Spline Controller")]
	public class UITextSplineController : SplineController, IMeshModifier
	{
		[Token(Token = "0x20002B1")]
		protected interface IGlyph
		{
			[Token(Token = "0x1700027B")]
			Vector3 Center
			{
				[Token(Token = "0x6001281")]
				get;
			}

			[Token(Token = "0x6001282")]
			void Transpose(Vector3 v);

			[Token(Token = "0x6001283")]
			void Rotate(Quaternion rotation);
		}

		[Token(Token = "0x20002B2")]
		protected class GlyphQuad : IGlyph
		{
			[Token(Token = "0x4000DDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public UIVertex[] V;

			[Token(Token = "0x4000DDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rect Rect;

			[Token(Token = "0x1700027C")]
			public Vector3 Center
			{
				[Token(Token = "0x6001284")]
				[Address(RVA = "0x124526C", Offset = "0x124526C", VA = "0x124526C", Slot = "4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6001285")]
			[Address(RVA = "0x1245288", Offset = "0x1245288", VA = "0x1245288")]
			public void Load(List<UIVertex> verts, int index)
			{
			}

			[Token(Token = "0x6001286")]
			[Address(RVA = "0x1244ABC", Offset = "0x1244ABC", VA = "0x1244ABC")]
			public void LoadTris(List<UIVertex> verts, int index)
			{
			}

			[Token(Token = "0x6001287")]
			[Address(RVA = "0x1245458", Offset = "0x1245458", VA = "0x1245458")]
			public void calcRect()
			{
			}

			[Token(Token = "0x6001288")]
			[Address(RVA = "0x12454B8", Offset = "0x12454B8", VA = "0x12454B8")]
			public void Save(List<UIVertex> verts, int index)
			{
			}

			[Token(Token = "0x6001289")]
			[Address(RVA = "0x1244C8C", Offset = "0x1244C8C", VA = "0x1244C8C")]
			public void Save(VertexHelper vh)
			{
			}

			[Token(Token = "0x600128A")]
			[Address(RVA = "0x124565C", Offset = "0x124565C", VA = "0x124565C", Slot = "5")]
			public void Transpose(Vector3 v)
			{
			}

			[Token(Token = "0x600128B")]
			[Address(RVA = "0x12456BC", Offset = "0x12456BC", VA = "0x12456BC", Slot = "6")]
			public void Rotate(Quaternion rotation)
			{
			}

			[Token(Token = "0x600128C")]
			[Address(RVA = "0x1244A64", Offset = "0x1244A64", VA = "0x1244A64")]
			public GlyphQuad()
			{
			}
		}

		[Token(Token = "0x20002B3")]
		protected class GlyphPlain : IGlyph
		{
			[Token(Token = "0x4000DDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] V;

			[Token(Token = "0x4000DDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rect Rect;

			[Token(Token = "0x1700027D")]
			public Vector3 Center
			{
				[Token(Token = "0x600128D")]
				[Address(RVA = "0x12457A8", Offset = "0x12457A8", VA = "0x12457A8", Slot = "4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x600128E")]
			[Address(RVA = "0x1244174", Offset = "0x1244174", VA = "0x1244174")]
			public void Load(ref Vector3[] verts, int index)
			{
			}

			[Token(Token = "0x600128F")]
			[Address(RVA = "0x12457C4", Offset = "0x12457C4", VA = "0x12457C4")]
			public void calcRect()
			{
			}

			[Token(Token = "0x6001290")]
			[Address(RVA = "0x12447C0", Offset = "0x12447C0", VA = "0x12447C0")]
			public void Save(ref Vector3[] verts, int index)
			{
			}

			[Token(Token = "0x6001291")]
			[Address(RVA = "0x1245824", Offset = "0x1245824", VA = "0x1245824", Slot = "5")]
			public void Transpose(Vector3 v)
			{
			}

			[Token(Token = "0x6001292")]
			[Address(RVA = "0x1245884", Offset = "0x1245884", VA = "0x1245884", Slot = "6")]
			public void Rotate(Quaternion rotation)
			{
			}

			[Token(Token = "0x6001293")]
			[Address(RVA = "0x124411C", Offset = "0x124411C", VA = "0x124411C")]
			public GlyphPlain()
			{
			}
		}

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Section("Orientation", true, false, 100)]
		[Tooltip("If true, the text characters will keep the same orientation regardless of the spline they follow")]
		[SerializeField]
		private bool staticOrientation;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Graphic m_Graphic;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private RectTransform mRect;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Text mText;

		[Token(Token = "0x17000274")]
		public bool StaticOrientation
		{
			[Token(Token = "0x600126C")]
			[Address(RVA = "0x1243DBC", Offset = "0x1243DBC", VA = "0x1243DBC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600126D")]
			[Address(RVA = "0x1243DC4", Offset = "0x1243DC4", VA = "0x1243DC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000275")]
		protected override bool ShowOrientationSection
		{
			[Token(Token = "0x600126E")]
			[Address(RVA = "0x1243DD0", Offset = "0x1243DD0", VA = "0x1243DD0", Slot = "26")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000276")]
		protected override bool ShowOffsetSection
		{
			[Token(Token = "0x600126F")]
			[Address(RVA = "0x1243DD8", Offset = "0x1243DD8", VA = "0x1243DD8", Slot = "27")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000277")]
		protected Text Text
		{
			[Token(Token = "0x6001270")]
			[Address(RVA = "0x1243DE0", Offset = "0x1243DE0", VA = "0x1243DE0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000278")]
		protected RectTransform Rect
		{
			[Token(Token = "0x6001271")]
			[Address(RVA = "0x1243E74", Offset = "0x1243E74", VA = "0x1243E74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000279")]
		protected Graphic graphic
		{
			[Token(Token = "0x6001272")]
			[Address(RVA = "0x1243F08", Offset = "0x1243F08", VA = "0x1243F08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700027A")]
		public override CurvySpline Spline
		{
			[Token(Token = "0x6001279")]
			[Address(RVA = "0x1244E0C", Offset = "0x1244E0C", VA = "0x1244E0C", Slot = "38")]
			get
			{
				return null;
			}
			[Token(Token = "0x600127A")]
			[Address(RVA = "0x1244E14", Offset = "0x1244E14", VA = "0x1244E14", Slot = "39")]
			set
			{
			}
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0x1243F9C", Offset = "0x1243F9C", VA = "0x1243F9C", Slot = "16")]
		protected override void InitializedApplyDeltaTime(float deltaTime)
		{
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0x1243FCC", Offset = "0x1243FCC", VA = "0x1243FCC", Slot = "41")]
		public void ModifyMesh(Mesh verts)
		{
		}

		[Token(Token = "0x6001275")]
		[Address(RVA = "0x12448EC", Offset = "0x12448EC", VA = "0x12448EC", Slot = "42")]
		public void ModifyMesh(VertexHelper vertexHelper)
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0x12442A0", Offset = "0x12442A0", VA = "0x12442A0")]
		private void UpdateGlyph(IGlyph glyph)
		{
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0x1244CB0", Offset = "0x1244CB0", VA = "0x1244CB0", Slot = "8")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0x1244D54", Offset = "0x1244D54", VA = "0x1244D54", Slot = "10")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0x12450EC", Offset = "0x12450EC", VA = "0x12450EC", Slot = "20")]
		protected override void BindEvents()
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0x12450F0", Offset = "0x12450F0", VA = "0x12450F0", Slot = "21")]
		protected override void UnbindEvents()
		{
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0x1244FD0", Offset = "0x1244FD0", VA = "0x1244FD0")]
		private void BindSplineRelatedEvents()
		{
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0x1244EBC", Offset = "0x1244EBC", VA = "0x1244EBC")]
		private void UnbindSplineRelatedEvents()
		{
		}

		[Token(Token = "0x600127F")]
		[Address(RVA = "0x12450F4", Offset = "0x12450F4", VA = "0x12450F4")]
		private void OnSplineRefreshed(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0x1245268", Offset = "0x1245268", VA = "0x1245268")]
		public UITextSplineController()
		{
		}
	}
	[Token(Token = "0x20002B4")]
	[AddComponentMenu("Curvy/Controller/CG Volume Controller", 8)]
	[HelpURL("https://curvyeditor.com/doclink/volumecontroller")]
	public class VolumeController : CurvyController
	{
		[Token(Token = "0x4000DDF")]
		private const float CrossPositionRangeMin = -0.5f;

		[Token(Token = "0x4000DE0")]
		private const float CrossPositionRangeMax = 0.5f;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Section("General", true, false, 100)]
		[CGDataReferenceSelector(typeof(CGVolume), Label = "Volume/Slot")]
		[SerializeField]
		private CGDataReference m_Volume;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Section("Cross Position", true, false, 100, Sort = 1, HelpURL = "https://curvyeditor.com/doclink/volumecontroller_crossposition")]
		[SerializeField]
		[FloatRegion(UseSlider = true, Precision = 4, RegionOptionsPropertyName = "CrossRangeOptions", Options = AttributeOptionsFlags.Full)]
		private FloatRegion m_CrossRange;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[RangeEx("MinCrossRelativePosition", "MaxCrossRelativePosition", "", "")]
		[SerializeField]
		private float crossRelativePosition;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private CurvyClamping m_CrossClamping;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Obsolete("Use crossRelativePosition instead. This field is kept for retro compatibility reasons")]
		[SerializeField]
		[HideInInspector]
		private float m_CrossInitialPosition;

		[Token(Token = "0x1700027E")]
		public CGDataReference Volume
		{
			[Token(Token = "0x6001294")]
			[Address(RVA = "0x1245970", Offset = "0x1245970", VA = "0x1245970")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001295")]
			[Address(RVA = "0x1245978", Offset = "0x1245978", VA = "0x1245978")]
			set
			{
			}
		}

		[Token(Token = "0x1700027F")]
		public CGVolume VolumeData
		{
			[Token(Token = "0x6001296")]
			[Address(RVA = "0x1245980", Offset = "0x1245980", VA = "0x1245980")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000280")]
		public float CrossFrom
		{
			[Token(Token = "0x6001297")]
			[Address(RVA = "0x12459F4", Offset = "0x12459F4", VA = "0x12459F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001298")]
			[Address(RVA = "0x12459FC", Offset = "0x12459FC", VA = "0x12459FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000281")]
		public float CrossTo
		{
			[Token(Token = "0x6001299")]
			[Address(RVA = "0x1245A18", Offset = "0x1245A18", VA = "0x1245A18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600129A")]
			[Address(RVA = "0x1245A20", Offset = "0x1245A20", VA = "0x1245A20")]
			set
			{
			}
		}

		[Token(Token = "0x17000282")]
		public float CrossLength
		{
			[Token(Token = "0x600129B")]
			[Address(RVA = "0x1245A3C", Offset = "0x1245A3C", VA = "0x1245A3C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000283")]
		public CurvyClamping CrossClamping
		{
			[Token(Token = "0x600129C")]
			[Address(RVA = "0x1245A48", Offset = "0x1245A48", VA = "0x1245A48")]
			get
			{
				return default(CurvyClamping);
			}
			[Token(Token = "0x600129D")]
			[Address(RVA = "0x1245A50", Offset = "0x1245A50", VA = "0x1245A50")]
			set
			{
			}
		}

		[Token(Token = "0x17000284")]
		public float CrossRelativePosition
		{
			[Token(Token = "0x600129E")]
			[Address(RVA = "0x1245A58", Offset = "0x1245A58", VA = "0x1245A58")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600129F")]
			[Address(RVA = "0x1245A84", Offset = "0x1245A84", VA = "0x1245A84")]
			set
			{
			}
		}

		[Token(Token = "0x17000285")]
		public override float Length
		{
			[Token(Token = "0x60012A0")]
			[Address(RVA = "0x1245AA8", Offset = "0x1245AA8", VA = "0x1245AA8", Slot = "28")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000286")]
		public override bool IsReady
		{
			[Token(Token = "0x60012A3")]
			[Address(RVA = "0x1245BB4", Offset = "0x1245BB4", VA = "0x1245BB4", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000287")]
		private RegionOptions<float> CrossRangeOptions
		{
			[Token(Token = "0x60012AC")]
			[Address(RVA = "0x12460A0", Offset = "0x12460A0", VA = "0x12460A0")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x17000288")]
		private float MinCrossRelativePosition
		{
			[Token(Token = "0x60012AD")]
			[Address(RVA = "0x124610C", Offset = "0x124610C", VA = "0x124610C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000289")]
		private float MaxCrossRelativePosition
		{
			[Token(Token = "0x60012AE")]
			[Address(RVA = "0x1246114", Offset = "0x1246114", VA = "0x1246114")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0x1245ADC", Offset = "0x1245ADC", VA = "0x1245ADC")]
		public float CrossRelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0x1245B48", Offset = "0x1245B48", VA = "0x1245B48")]
		public float CrossAbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0x1245BF4", Offset = "0x1245BF4", VA = "0x1245BF4", Slot = "32")]
		protected override float RelativeToAbsolute(float relativeDistance)
		{
			return default(float);
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0x1245C40", Offset = "0x1245C40", VA = "0x1245C40", Slot = "31")]
		protected override float AbsoluteToRelative(float worldUnitDistance)
		{
			return default(float);
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0x1245C8C", Offset = "0x1245C8C", VA = "0x1245C8C", Slot = "33")]
		protected override Vector3 GetInterpolatedSourcePosition(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0x1245D20", Offset = "0x1245D20", VA = "0x1245D20", Slot = "34")]
		protected override void GetInterpolatedSourcePosition(float tf, out Vector3 interpolatedPosition, out Vector3 tangent, out Vector3 up)
		{
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0x1245E18", Offset = "0x1245E18", VA = "0x1245E18", Slot = "36")]
		protected override Vector3 GetTangent(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012A9")]
		[Address(RVA = "0x1245EAC", Offset = "0x1245EAC", VA = "0x1245EAC", Slot = "35")]
		protected override Vector3 GetOrientation(float tf)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0x1245F40", Offset = "0x1245F40", VA = "0x1245F40", Slot = "29")]
		protected override void Advance(float speed, float deltaTime)
		{
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0x1245FB0", Offset = "0x1245FB0", VA = "0x1245FB0", Slot = "30")]
		protected override void SimulateAdvance(ref float tf, ref MovementDirection curyDirection, float speed, float deltaTime)
		{
		}

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0x1245A70", Offset = "0x1245A70", VA = "0x1245A70")]
		private float GetClampedCrossPosition(float position)
		{
			return default(float);
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0x124611C", Offset = "0x124611C", VA = "0x124611C", Slot = "37")]
		public override void OnAfterDeserialize()
		{
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0x12461E0", Offset = "0x12461E0", VA = "0x12461E0")]
		public VolumeController()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Components
{
	[Token(Token = "0x20002B5")]
	[HelpURL("https://curvyeditor.com/doclink/curvyglrenderer")]
	[AddComponentMenu("Curvy/Misc/Curvy GL Renderer")]
	public class CurvyGLRenderer : MonoBehaviour
	{
		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[ArrayEx(ShowAdd = false, Draggable = false)]
		public List<GLSlotData> Splines;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material lineMaterial;

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0x124629C", Offset = "0x124629C", VA = "0x124629C")]
		private void CreateLineMaterial()
		{
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0x1246398", Offset = "0x1246398", VA = "0x1246398")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0x1246530", Offset = "0x1246530", VA = "0x1246530")]
		private void sanitize()
		{
		}

		[Token(Token = "0x60012B5")]
		[Address(RVA = "0x12469EC", Offset = "0x12469EC", VA = "0x12469EC")]
		private void OnSplineRefresh(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0x1246B74", Offset = "0x1246B74", VA = "0x1246B74")]
		private GLSlotData getSlot(CurvySpline spline)
		{
			return null;
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0x1246D44", Offset = "0x1246D44", VA = "0x1246D44")]
		public void Add(CurvySpline spline)
		{
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0x1246F10", Offset = "0x1246F10", VA = "0x1246F10")]
		public void Remove(CurvySpline spline)
		{
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0x1247010", Offset = "0x1247010", VA = "0x1247010")]
		public CurvyGLRenderer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002B6")]
	public class GLSlotData
	{
		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public CurvySpline Spline;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color LineColor;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Vector3[]> VertexData;

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0x1246644", Offset = "0x1246644", VA = "0x1246644")]
		public void GetVertexData()
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0x1246858", Offset = "0x1246858", VA = "0x1246858")]
		public void Render(Material mat)
		{
		}

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0x1246E60", Offset = "0x1246E60", VA = "0x1246E60")]
		public GLSlotData()
		{
		}
	}
	[Token(Token = "0x20002B7")]
	[AddComponentMenu("Curvy/Misc/Curvy Line Renderer")]
	[RequireComponent(typeof(LineRenderer))]
	[ExecuteInEditMode]
	[HelpURL("https://curvyeditor.com/doclink/curvylinerenderer")]
	public class CurvyLineRenderer : MonoBehaviour
	{
		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline m_Spline;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer mRenderer;

		[Token(Token = "0x1700028A")]
		public CurvySpline Spline
		{
			[Token(Token = "0x60012BD")]
			[Address(RVA = "0x124708C", Offset = "0x124708C", VA = "0x124708C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012BE")]
			[Address(RVA = "0x1247094", Offset = "0x1247094", VA = "0x1247094")]
			set
			{
			}
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0x1247538", Offset = "0x1247538", VA = "0x1247538")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0x12475F0", Offset = "0x12475F0", VA = "0x12475F0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0x1247644", Offset = "0x1247644", VA = "0x1247644")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0x1247648", Offset = "0x1247648", VA = "0x1247648")]
		private void Start()
		{
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0x124764C", Offset = "0x124764C", VA = "0x124764C")]
		private void Update()
		{
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0x1247650", Offset = "0x1247650", VA = "0x1247650")]
		private void EnforceWorldSpaceUsage()
		{
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0x1247420", Offset = "0x1247420", VA = "0x1247420")]
		public void Refresh()
		{
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0x1247690", Offset = "0x1247690", VA = "0x1247690")]
		private void OnSplineRefresh(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0x1247694", Offset = "0x1247694", VA = "0x1247694")]
		private void OnSplineCoordinatesChanged(CurvySpline spline)
		{
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0x12472A8", Offset = "0x12472A8", VA = "0x12472A8")]
		private void BindEvents()
		{
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0x1247130", Offset = "0x1247130", VA = "0x1247130")]
		private void UnbindEvents()
		{
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0x1247698", Offset = "0x1247698", VA = "0x1247698")]
		public CurvyLineRenderer()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Shapes
{
	[Token(Token = "0x20002B8")]
	[RequireComponent(typeof(CurvySpline))]
	[CurvyShapeInfo("2D/Circle", true)]
	[AddComponentMenu("Curvy/Shape/Circle")]
	public class CSCircle : CurvyShape2D
	{
		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[Positive(Tooltip = "Number of Control Points")]
		private int m_Count;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float m_Radius;

		[Token(Token = "0x1700028B")]
		public int Count
		{
			[Token(Token = "0x60012CB")]
			[Address(RVA = "0x12476A0", Offset = "0x12476A0", VA = "0x12476A0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012CC")]
			[Address(RVA = "0x12476A8", Offset = "0x12476A8", VA = "0x12476A8")]
			set
			{
			}
		}

		[Token(Token = "0x1700028C")]
		public float Radius
		{
			[Token(Token = "0x60012CD")]
			[Address(RVA = "0x12476D0", Offset = "0x12476D0", VA = "0x12476D0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60012CE")]
			[Address(RVA = "0x12476D8", Offset = "0x12476D8", VA = "0x12476D8")]
			set
			{
			}
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0x12476FC", Offset = "0x12476FC", VA = "0x12476FC", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0x1247750", Offset = "0x1247750", VA = "0x1247750", Slot = "6")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0x1247870", Offset = "0x1247870", VA = "0x1247870")]
		public CSCircle()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	[AddComponentMenu("Curvy/Shape/Pie")]
	[RequireComponent(typeof(CurvySpline))]
	[CurvyShapeInfo("2D/Pie", true)]
	public class CSPie : CSCircle
	{
		[Token(Token = "0x20002BA")]
		public enum EatModeEnum
		{
			[Token(Token = "0x4000DF3")]
			Left,
			[Token(Token = "0x4000DF4")]
			Right,
			[Token(Token = "0x4000DF5")]
			Center
		}

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		[SerializeField]
		private float m_Roundness;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[RangeEx(0f, "maxEmpty", "Empty", "Number of empty slices")]
		[SerializeField]
		private int m_Empty;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[SerializeField]
		[Label(Tooltip = "Eat Mode")]
		private EatModeEnum m_Eat;

		[Token(Token = "0x1700028D")]
		public float Roundness
		{
			[Token(Token = "0x60012D2")]
			[Address(RVA = "0x1247884", Offset = "0x1247884", VA = "0x1247884")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60012D3")]
			[Address(RVA = "0x124788C", Offset = "0x124788C", VA = "0x124788C")]
			set
			{
			}
		}

		[Token(Token = "0x1700028E")]
		public int Empty
		{
			[Token(Token = "0x60012D4")]
			[Address(RVA = "0x12478BC", Offset = "0x12478BC", VA = "0x12478BC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012D5")]
			[Address(RVA = "0x12478C4", Offset = "0x12478C4", VA = "0x12478C4")]
			set
			{
			}
		}

		[Token(Token = "0x1700028F")]
		private int maxEmpty
		{
			[Token(Token = "0x60012D6")]
			[Address(RVA = "0x12478F4", Offset = "0x12478F4", VA = "0x12478F4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000290")]
		public EatModeEnum Eat
		{
			[Token(Token = "0x60012D7")]
			[Address(RVA = "0x12478FC", Offset = "0x12478FC", VA = "0x12478FC")]
			get
			{
				return default(EatModeEnum);
			}
			[Token(Token = "0x60012D8")]
			[Address(RVA = "0x1247904", Offset = "0x1247904", VA = "0x1247904")]
			set
			{
			}
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0x1247920", Offset = "0x1247920", VA = "0x1247920", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0x1247990", Offset = "0x1247990", VA = "0x1247990")]
		private Vector3 cpPosition(int i, int empty, float d)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0x1247A28", Offset = "0x1247A28", VA = "0x1247A28", Slot = "6")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0x1248140", Offset = "0x1248140", VA = "0x1248140")]
		public CSPie()
		{
		}
	}
	[Token(Token = "0x20002BB")]
	[CurvyShapeInfo("2D/Rectangle", true)]
	[RequireComponent(typeof(CurvySpline))]
	[AddComponentMenu("Curvy/Shape/Rectangle")]
	public class CSRectangle : CurvyShape2D
	{
		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Positive]
		[SerializeField]
		private float m_Width;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Positive]
		[SerializeField]
		private float m_Height;

		[Token(Token = "0x17000291")]
		public float Width
		{
			[Token(Token = "0x60012DD")]
			[Address(RVA = "0x124815C", Offset = "0x124815C", VA = "0x124815C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60012DE")]
			[Address(RVA = "0x1248164", Offset = "0x1248164", VA = "0x1248164")]
			set
			{
			}
		}

		[Token(Token = "0x17000292")]
		public float Height
		{
			[Token(Token = "0x60012DF")]
			[Address(RVA = "0x1248188", Offset = "0x1248188", VA = "0x1248188")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60012E0")]
			[Address(RVA = "0x1248190", Offset = "0x1248190", VA = "0x1248190")]
			set
			{
			}
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0x12481B4", Offset = "0x12481B4", VA = "0x12481B4", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0x1248208", Offset = "0x1248208", VA = "0x1248208", Slot = "6")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0x1248360", Offset = "0x1248360", VA = "0x1248360")]
		public CSRectangle()
		{
		}
	}
	[Token(Token = "0x20002BC")]
	[CurvyShapeInfo("2D/Rounded Rectangle", true)]
	[RequireComponent(typeof(CurvySpline))]
	[AddComponentMenu("Curvy/Shape/Rounded Rectangle")]
	public class CSRoundedRectangle : CurvyShape2D
	{
		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[Positive]
		private float m_Width;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Positive]
		[SerializeField]
		private float m_Height;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[Range(0f, 1f)]
		private float m_Roundness;

		[Token(Token = "0x17000293")]
		public float Width
		{
			[Token(Token = "0x60012E4")]
			[Address(RVA = "0x1248370", Offset = "0x1248370", VA = "0x1248370")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60012E5")]
			[Address(RVA = "0x1248378", Offset = "0x1248378", VA = "0x1248378")]
			set
			{
			}
		}

		[Token(Token = "0x17000294")]
		public float Height
		{
			[Token(Token = "0x60012E6")]
			[Address(RVA = "0x124839C", Offset = "0x124839C", VA = "0x124839C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60012E7")]
			[Address(RVA = "0x12483A4", Offset = "0x12483A4", VA = "0x12483A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000295")]
		public float Roundness
		{
			[Token(Token = "0x60012E8")]
			[Address(RVA = "0x12483C8", Offset = "0x12483C8", VA = "0x12483C8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60012E9")]
			[Address(RVA = "0x12483D0", Offset = "0x12483D0", VA = "0x12483D0")]
			set
			{
			}
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0x1248400", Offset = "0x1248400", VA = "0x1248400", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0x1248474", Offset = "0x1248474", VA = "0x1248474", Slot = "6")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0x1248BDC", Offset = "0x1248BDC", VA = "0x1248BDC")]
		public CSRoundedRectangle()
		{
		}
	}
	[Token(Token = "0x20002BD")]
	[CurvyShapeInfo("3D/Spiral", false)]
	[RequireComponent(typeof(CurvySpline))]
	[AddComponentMenu("Curvy/Shape/Spiral")]
	public class CSSpiral : CurvyShape2D
	{
		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		[Positive(Tooltip = "Number of Control Points per full Circle")]
		private int m_Count;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Positive(Tooltip = "Number of Full Circles")]
		private float m_Circles;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Positive(Tooltip = "Base Radius")]
		[SerializeField]
		private float m_Radius;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Label(Tooltip = "Radius Multiplicator")]
		private AnimationCurve m_RadiusFactor;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private AnimationCurve m_Z;

		[Token(Token = "0x17000296")]
		public int Count
		{
			[Token(Token = "0x60012ED")]
			[Address(RVA = "0x1248BF4", Offset = "0x1248BF4", VA = "0x1248BF4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012EE")]
			[Address(RVA = "0x1248BFC", Offset = "0x1248BFC", VA = "0x1248BFC")]
			set
			{
			}
		}

		[Token(Token = "0x17000297")]
		public float Circles
		{
			[Token(Token = "0x60012EF")]
			[Address(RVA = "0x1248C1C", Offset = "0x1248C1C", VA = "0x1248C1C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60012F0")]
			[Address(RVA = "0x1248C24", Offset = "0x1248C24", VA = "0x1248C24")]
			set
			{
			}
		}

		[Token(Token = "0x17000298")]
		public float Radius
		{
			[Token(Token = "0x60012F1")]
			[Address(RVA = "0x1248C48", Offset = "0x1248C48", VA = "0x1248C48")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60012F2")]
			[Address(RVA = "0x1248C50", Offset = "0x1248C50", VA = "0x1248C50")]
			set
			{
			}
		}

		[Token(Token = "0x17000299")]
		public AnimationCurve RadiusFactor
		{
			[Token(Token = "0x60012F3")]
			[Address(RVA = "0x1248C74", Offset = "0x1248C74", VA = "0x1248C74")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012F4")]
			[Address(RVA = "0x1248C7C", Offset = "0x1248C7C", VA = "0x1248C7C")]
			set
			{
			}
		}

		[Token(Token = "0x1700029A")]
		public AnimationCurve Z
		{
			[Token(Token = "0x60012F5")]
			[Address(RVA = "0x1248C98", Offset = "0x1248C98", VA = "0x1248C98")]
			get
			{
				return null;
			}
			[Token(Token = "0x60012F6")]
			[Address(RVA = "0x1248CA0", Offset = "0x1248CA0", VA = "0x1248CA0")]
			set
			{
			}
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0x1248CBC", Offset = "0x1248CBC", VA = "0x1248CBC", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0x1248D90", Offset = "0x1248D90", VA = "0x1248D90", Slot = "6")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0x1248F10", Offset = "0x1248F10", VA = "0x1248F10")]
		public CSSpiral()
		{
		}
	}
	[Token(Token = "0x20002BE")]
	[AddComponentMenu("Curvy/Shape/Star")]
	[RequireComponent(typeof(CurvySpline))]
	[CurvyShapeInfo("2D/Star", true)]
	public class CSStar : CurvyShape2D
	{
		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Positive(Tooltip = "Number of Sides", MinValue = 2f)]
		[SerializeField]
		private int m_Sides;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Positive]
		private float m_OuterRadius;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[RangeEx(0f, 1f, "", "")]
		private float m_OuterRoundness;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Positive]
		[SerializeField]
		private float m_InnerRadius;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[RangeEx(0f, 1f, "", "")]
		[SerializeField]
		private float m_InnerRoundness;

		[Token(Token = "0x1700029B")]
		public int Sides
		{
			[Token(Token = "0x60012FA")]
			[Address(RVA = "0x1248F80", Offset = "0x1248F80", VA = "0x1248F80")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60012FB")]
			[Address(RVA = "0x1248F88", Offset = "0x1248F88", VA = "0x1248F88")]
			set
			{
			}
		}

		[Token(Token = "0x1700029C")]
		public float OuterRadius
		{
			[Token(Token = "0x60012FC")]
			[Address(RVA = "0x1248FA8", Offset = "0x1248FA8", VA = "0x1248FA8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60012FD")]
			[Address(RVA = "0x1248FB0", Offset = "0x1248FB0", VA = "0x1248FB0")]
			set
			{
			}
		}

		[Token(Token = "0x1700029D")]
		public float OuterRoundness
		{
			[Token(Token = "0x60012FE")]
			[Address(RVA = "0x1248FD8", Offset = "0x1248FD8", VA = "0x1248FD8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60012FF")]
			[Address(RVA = "0x1248FE0", Offset = "0x1248FE0", VA = "0x1248FE0")]
			set
			{
			}
		}

		[Token(Token = "0x1700029E")]
		public float InnerRadius
		{
			[Token(Token = "0x6001300")]
			[Address(RVA = "0x1249004", Offset = "0x1249004", VA = "0x1249004")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001301")]
			[Address(RVA = "0x124900C", Offset = "0x124900C", VA = "0x124900C")]
			set
			{
			}
		}

		[Token(Token = "0x1700029F")]
		public float InnerRoundness
		{
			[Token(Token = "0x6001302")]
			[Address(RVA = "0x1249030", Offset = "0x1249030", VA = "0x1249030")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001303")]
			[Address(RVA = "0x1249038", Offset = "0x1249038", VA = "0x1249038")]
			set
			{
			}
		}

		[Token(Token = "0x6001304")]
		[Address(RVA = "0x124905C", Offset = "0x124905C", VA = "0x124905C", Slot = "5")]
		protected override void Reset()
		{
		}

		[Token(Token = "0x6001305")]
		[Address(RVA = "0x1249100", Offset = "0x1249100", VA = "0x1249100", Slot = "6")]
		protected override void ApplyShape()
		{
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0x12492D8", Offset = "0x12492D8", VA = "0x12492D8")]
		public CSStar()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Utils
{
	[Token(Token = "0x20002BF")]
	public static class OptimizedOperators
	{
		[Token(Token = "0x6001307")]
		[Address(RVA = "0x12492F4", Offset = "0x12492F4", VA = "0x12492F4")]
		public static Vector3 Addition(this Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0x1249304", Offset = "0x1249304", VA = "0x1249304")]
		public static Vector3 UnaryNegation(this Vector3 a)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0x1249314", Offset = "0x1249314", VA = "0x1249314")]
		public static Vector3 Subtraction(this Vector3 a, Vector3 b)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0x1249324", Offset = "0x1249324", VA = "0x1249324")]
		public static Vector3 Multiply(this Vector3 a, float d)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600130B")]
		[Address(RVA = "0x1249334", Offset = "0x1249334", VA = "0x1249334")]
		public static Vector3 Multiply(this float d, Vector3 a)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0x1249348", Offset = "0x1249348", VA = "0x1249348")]
		public static Vector3 Division(this Vector3 a, float d)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0x1249360", Offset = "0x1249360", VA = "0x1249360")]
		public static Vector3 Normalize(this Vector3 value)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0x1249424", Offset = "0x1249424", VA = "0x1249424")]
		public static Vector3 LerpUnclamped(this Vector3 a, Vector3 b, float t)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20002C0")]
	public static class CurvyUtility
	{
		[Token(Token = "0x600130F")]
		[Address(RVA = "0x124944C", Offset = "0x124944C", VA = "0x124944C")]
		public static float ClampTF(float tf, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0x1249518", Offset = "0x1249518", VA = "0x1249518")]
		public static float ClampValue(float tf, CurvyClamping clamping, float minTF, float maxTF)
		{
			return default(float);
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0x1249650", Offset = "0x1249650", VA = "0x1249650")]
		public static float ClampTF(float tf, ref int dir, CurvyClamping clamping)
		{
			return default(float);
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0x1249754", Offset = "0x1249754", VA = "0x1249754")]
		public static float ClampTF(float tf, ref int dir, CurvyClamping clamping, float minTF, float maxTF)
		{
			return default(float);
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0x1249890", Offset = "0x1249890", VA = "0x1249890")]
		public static float ClampDistance(float distance, CurvyClamping clamping, float length)
		{
			return default(float);
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0x1249924", Offset = "0x1249924", VA = "0x1249924")]
		public static float ClampDistance(float distance, CurvyClamping clamping, float length, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0x12499E4", Offset = "0x12499E4", VA = "0x12499E4")]
		public static float ClampDistance(float distance, ref int dir, CurvyClamping clamping, float length)
		{
			return default(float);
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0x1249B04", Offset = "0x1249B04", VA = "0x1249B04")]
		public static float ClampDistance(float distance, ref int dir, CurvyClamping clamping, float length, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0x1249C50", Offset = "0x1249C50", VA = "0x1249C50")]
		public static Material GetDefaultMaterial()
		{
			return null;
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0x1249D68", Offset = "0x1249D68", VA = "0x1249D68")]
		public static bool Approximately(this float x, float y)
		{
			return default(bool);
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0x1249E8C", Offset = "0x1249E8C", VA = "0x1249E8C")]
		public static int InterpolationSearch(float[] array, float x)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002C1")]
	public class Spline2Mesh
	{
		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<SplinePolyLine> Lines;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WindingRule Winding;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 UVTiling;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector2 UVOffset;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool SuppressUVMapping;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool UV2;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string MeshName;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool VertexLineOnly;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Tess mTess;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Mesh mMesh;

		[Token(Token = "0x170002A0")]
		public string Error
		{
			[Token(Token = "0x600131A")]
			[Address(RVA = "0x124A054", Offset = "0x124A054", VA = "0x124A054")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600131B")]
			[Address(RVA = "0x124A05C", Offset = "0x124A05C", VA = "0x124A05C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0x124A064", Offset = "0x124A064", VA = "0x124A064")]
		public bool Apply(out Mesh result)
		{
			return default(bool);
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0x124A548", Offset = "0x124A548", VA = "0x124A548")]
		private bool triangulate()
		{
			return default(bool);
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0x124A9A4", Offset = "0x124A9A4", VA = "0x124A9A4")]
		private static bool polyLineIsValid(SplinePolyLine pl)
		{
			return default(bool);
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0x124AA30", Offset = "0x124AA30", VA = "0x124AA30")]
		public Spline2Mesh()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002C2")]
	public class SplinePolyLine
	{
		[Token(Token = "0x20002C3")]
		public enum VertexCalculation
		{
			[Token(Token = "0x4000E17")]
			ByApproximation,
			[Token(Token = "0x4000E18")]
			ByAngle
		}

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ContourOrientation Orientation;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline Spline;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VertexCalculation VertexMode;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Angle;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Distance;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Space Space;

		[Token(Token = "0x170002A1")]
		public bool IsClosed
		{
			[Token(Token = "0x6001323")]
			[Address(RVA = "0x124AC04", Offset = "0x124AC04", VA = "0x124AC04")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0x124AB3C", Offset = "0x124AB3C", VA = "0x124AB3C")]
		public SplinePolyLine(CurvySpline spline)
		{
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0x124ABBC", Offset = "0x124ABBC", VA = "0x124ABBC")]
		public SplinePolyLine(CurvySpline spline, float angle, float distance)
		{
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0x124AB68", Offset = "0x124AB68", VA = "0x124AB68")]
		private SplinePolyLine(CurvySpline spline, VertexCalculation vertexMode, float angle, float distance, Space space = Space.World)
		{
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0x124A874", Offset = "0x124A874", VA = "0x124A874")]
		public Vector3[] GetVertices()
		{
			return null;
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0x124AC88", Offset = "0x124AC88", VA = "0x124AC88")]
		private static Vector3[] GetPolygon(CurvySpline spline, float fromTF, float toTF, float maxAngle, float minDistance, float maxDistance, out List<float> vertexTF, out List<Vector3> vertexTangents, bool includeEndPoint = true, float stepSize = 0.01f)
		{
			return null;
		}
	}
}
namespace FluffyUnderware.Curvy.Generator
{
	[Token(Token = "0x20002C5")]
	public abstract class SplineInputModuleBase : CGModule
	{
		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		[SerializeField]
		[Tab("General")]
		[Tooltip("Makes this module use the cached approximations of the spline's positions and tangents")]
		private bool m_UseCache;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
		[SerializeField]
		[Tooltip("Whether to use local or global coordinates of the input's control points.\r\nUsing the global space when the input's transform is updating every frame will lead to the generator refreshing too frequently")]
		private bool m_UseGlobalSpace;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[Tab("Range")]
		protected CurvySplineSegment m_StartCP;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		[FieldCondition("m_StartCP", null, true, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		protected CurvySplineSegment m_EndCP;

		[Token(Token = "0x170002A2")]
		public bool UseCache
		{
			[Token(Token = "0x6001328")]
			[Address(RVA = "0x124B5A4", Offset = "0x124B5A4", VA = "0x124B5A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001329")]
			[Address(RVA = "0x124B5AC", Offset = "0x124B5AC", VA = "0x124B5AC")]
			set
			{
			}
		}

		[Token(Token = "0x170002A3")]
		public CurvySplineSegment StartCP
		{
			[Token(Token = "0x600132A")]
			[Address(RVA = "0x124B5CC", Offset = "0x124B5CC", VA = "0x124B5CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600132B")]
			[Address(RVA = "0x124B5D4", Offset = "0x124B5D4", VA = "0x124B5D4")]
			set
			{
			}
		}

		[Token(Token = "0x170002A4")]
		public CurvySplineSegment EndCP
		{
			[Token(Token = "0x600132C")]
			[Address(RVA = "0x124B8A0", Offset = "0x124B8A0", VA = "0x124B8A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x600132D")]
			[Address(RVA = "0x124B8A8", Offset = "0x124B8A8", VA = "0x124B8A8")]
			set
			{
			}
		}

		[Token(Token = "0x170002A5")]
		public bool UseGlobalSpace
		{
			[Token(Token = "0x600132E")]
			[Address(RVA = "0x124B934", Offset = "0x124B934", VA = "0x124B934")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600132F")]
			[Address(RVA = "0x124B93C", Offset = "0x124B93C", VA = "0x124B93C")]
			set
			{
			}
		}

		[Token(Token = "0x170002A6")]
		public override bool IsConfigured
		{
			[Token(Token = "0x6001330")]
			[Address(RVA = "0x124B950", Offset = "0x124B950", VA = "0x124B950", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002A7")]
		public override bool IsInitialized
		{
			[Token(Token = "0x6001331")]
			[Address(RVA = "0x124B9E8", Offset = "0x124B9E8", VA = "0x124B9E8", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002A8")]
		[Obsolete("IOnRequestPath.PathLength and CGDataRequestRasterization.SplineAbsoluteLength are no more needed. SplineInputModuleBase.getPathLength is used instead")]
		public float PathLength
		{
			[Token(Token = "0x6001332")]
			[Address(RVA = "0x124BAA8", Offset = "0x124BAA8", VA = "0x124BAA8", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002A9")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6001333")]
			[Address(RVA = "0x124BBE4", Offset = "0x124BBE4", VA = "0x124BBE4", Slot = "16")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002AA")]
		protected abstract CurvySpline InputSpline
		{
			[Token(Token = "0x6001343")]
			get;
			[Token(Token = "0x6001344")]
			set;
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0x124BCDC", Offset = "0x124BCDC", VA = "0x124BCDC", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0x124BD18", Offset = "0x124BD18", VA = "0x124BD18", Slot = "7")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0x124BED8", Offset = "0x124BED8", VA = "0x124BED8", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0x124BF4C", Offset = "0x124BF4C", VA = "0x124BF4C")]
		private void OnSplineRefreshed(CurvySplineEventArgs e)
		{
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0x124C0BC", Offset = "0x124C0BC", VA = "0x124C0BC")]
		private void OnInputSplineCoordinatesChanged(CurvySpline sender)
		{
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0x124C0B0", Offset = "0x124C0B0", VA = "0x124C0B0")]
		private void ForceRefresh()
		{
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0x124BAF0", Offset = "0x124BAF0", VA = "0x124BAF0")]
		private float getPathLength(CurvySpline spline)
		{
			return default(float);
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0x124BC2C", Offset = "0x124BC2C", VA = "0x124BC2C")]
		private bool getPathClosed(CurvySpline spline)
		{
			return default(bool);
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0x124C23C", Offset = "0x124C23C", VA = "0x124C23C")]
		protected CGData GetSplineData(CurvySpline spline, bool fullPath, CGDataRequestRasterization raster, CGDataRequestMetaCGOptions options)
		{
			return null;
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0x124E324", Offset = "0x124E324", VA = "0x124E324")]
		private static void FillData(CGShape dataToFill, SamplePointsMaterialGroup materialGroup, List<float> sourceFs, List<float> relativeFs, bool isFullPath, List<Vector3> positions, List<Vector3> tangents, List<Vector3> normals, bool considerSplineTransform, Transform splineTransform, Transform generatorTransform)
		{
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0x124DFE4", Offset = "0x124DFE4", VA = "0x124DFE4")]
		private static void AddPoint(float sourceF, float relativeF, bool isFullPath, Vector3 position, Vector3 tangent, Vector3 up, List<float> sourceFList, List<float> relativeFList, List<Vector3> positionList, List<Vector3> tangentList, List<Vector3> upList)
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0x124E668", Offset = "0x124E668", VA = "0x124E668")]
		private static bool MoveByAngleExt(CurvySpline spline, bool useCache, ref float tf, float maxDistance, float maxAngle, out Vector3 pos, out Vector3 tan, float stopTF, bool loop, float stepDist)
		{
			return default(bool);
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0x124EF98", Offset = "0x124EF98", VA = "0x124EF98")]
		private static void CalculateExtendedUV(CurvySpline spline, float startTF, float endTF, List<SamplePointUData> ext, CGShape data)
		{
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0x124F720", Offset = "0x124F720", VA = "0x124F720")]
		private static MetaCGOptions findPreviousReferenceCPOptions(CurvySpline spline, float tf, out CurvySplineSegment cp)
		{
			return null;
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0x124F868", Offset = "0x124F868", VA = "0x124F868")]
		private static MetaCGOptions findNextReferenceCPOptions(CurvySpline spline, float tf, out CurvySplineSegment cp)
		{
			return null;
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0x124F9E8", Offset = "0x124F9E8", VA = "0x124F9E8", Slot = "19")]
		protected virtual void OnSplineAssigned()
		{
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0x124B660", Offset = "0x124B660", VA = "0x124B660")]
		protected void ValidateStartAndEndCps()
		{
		}

		[Token(Token = "0x6001347")]
		[Address(RVA = "0x124FB9C", Offset = "0x124FB9C", VA = "0x124FB9C")]
		protected SplineInputModuleBase()
		{
		}
	}
	[Token(Token = "0x20002C6")]
	public class TRSModuleBase : CGModule
	{
		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[VectorEx("", "")]
		private Vector3 m_Transpose;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[SerializeField]
		[VectorEx("", "")]
		private Vector3 m_Rotation;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[VectorEx("", "")]
		[SerializeField]
		private Vector3 m_Scale;

		[Token(Token = "0x170002AB")]
		public Vector3 Transpose
		{
			[Token(Token = "0x6001348")]
			[Address(RVA = "0x124FBA4", Offset = "0x124FBA4", VA = "0x124FBA4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001349")]
			[Address(RVA = "0x124FBB0", Offset = "0x124FBB0", VA = "0x124FBB0")]
			set
			{
			}
		}

		[Token(Token = "0x170002AC")]
		public Vector3 Rotation
		{
			[Token(Token = "0x600134A")]
			[Address(RVA = "0x124FBFC", Offset = "0x124FBFC", VA = "0x124FBFC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600134B")]
			[Address(RVA = "0x124FC08", Offset = "0x124FC08", VA = "0x124FC08")]
			set
			{
			}
		}

		[Token(Token = "0x170002AD")]
		public Vector3 Scale
		{
			[Token(Token = "0x600134C")]
			[Address(RVA = "0x124FC54", Offset = "0x124FC54", VA = "0x124FC54")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600134D")]
			[Address(RVA = "0x124FC60", Offset = "0x124FC60", VA = "0x124FC60")]
			set
			{
			}
		}

		[Token(Token = "0x170002AE")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x600134E")]
			[Address(RVA = "0x124FCAC", Offset = "0x124FCAC", VA = "0x124FCAC")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0x124FD60", Offset = "0x124FD60", VA = "0x124FD60", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0x124FD90", Offset = "0x124FD90", VA = "0x124FD90", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0x124FE58", Offset = "0x124FE58", VA = "0x124FE58")]
		public TRSModuleBase()
		{
		}
	}
	[Token(Token = "0x20002C7")]
	public enum CGYesNoAuto
	{
		[Token(Token = "0x4000E29")]
		Yes,
		[Token(Token = "0x4000E2A")]
		No,
		[Token(Token = "0x4000E2B")]
		Auto
	}
	[Token(Token = "0x20002C8")]
	public enum CGReferenceMode
	{
		[Token(Token = "0x4000E2D")]
		Source,
		[Token(Token = "0x4000E2E")]
		Self
	}
	[Token(Token = "0x20002C9")]
	public enum CGKeepAspectMode
	{
		[Token(Token = "0x4000E30")]
		Off,
		[Token(Token = "0x4000E31")]
		ScaleU,
		[Token(Token = "0x4000E32")]
		ScaleV
	}
	[Token(Token = "0x20002CA")]
	public enum CGUVEnum
	{
		[Token(Token = "0x4000E34")]
		U,
		[Token(Token = "0x4000E35")]
		V
	}
	[Token(Token = "0x20002CB")]
	public enum CGColliderEnum
	{
		[Token(Token = "0x4000E37")]
		None,
		[Token(Token = "0x4000E38")]
		Mesh,
		[Token(Token = "0x4000E39")]
		Box,
		[Token(Token = "0x4000E3A")]
		Sphere
	}
	[Serializable]
	[Token(Token = "0x20002CC")]
	public struct CGSpot : IEquatable<CGSpot>
	{
		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[Label("Idx", "")]
		[SerializeField]
		private int m_Index;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		[VectorEx("Pos", "", Options = AttributeOptionsFlags.Compact, Precision = 4)]
		[SerializeField]
		private Vector3 m_Position;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[VectorEx("Rot", "", Options = AttributeOptionsFlags.Compact, Precision = 4)]
		[SerializeField]
		private Quaternion m_Rotation;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[VectorEx("Scl", "", Options = AttributeOptionsFlags.Compact, Precision = 4)]
		[SerializeField]
		private Vector3 m_Scale;

		[Token(Token = "0x170002AF")]
		public int Index
		{
			[Token(Token = "0x6001352")]
			[Address(RVA = "0x124FEB8", Offset = "0x124FEB8", VA = "0x124FEB8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002B0")]
		public Vector3 Position
		{
			[Token(Token = "0x6001353")]
			[Address(RVA = "0x124FEC0", Offset = "0x124FEC0", VA = "0x124FEC0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001354")]
			[Address(RVA = "0x124FECC", Offset = "0x124FECC", VA = "0x124FECC")]
			set
			{
			}
		}

		[Token(Token = "0x170002B1")]
		public Quaternion Rotation
		{
			[Token(Token = "0x6001355")]
			[Address(RVA = "0x124FF10", Offset = "0x124FF10", VA = "0x124FF10")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6001356")]
			[Address(RVA = "0x124FF1C", Offset = "0x124FF1C", VA = "0x124FF1C")]
			set
			{
			}
		}

		[Token(Token = "0x170002B2")]
		public Vector3 Scale
		{
			[Token(Token = "0x6001357")]
			[Address(RVA = "0x124FF5C", Offset = "0x124FF5C", VA = "0x124FF5C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001358")]
			[Address(RVA = "0x124FF68", Offset = "0x124FF68", VA = "0x124FF68")]
			set
			{
			}
		}

		[Token(Token = "0x170002B3")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6001359")]
			[Address(RVA = "0x124FFAC", Offset = "0x124FFAC", VA = "0x124FFAC")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0x1250000", Offset = "0x1250000", VA = "0x1250000")]
		public CGSpot(int index)
		{
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0x12500EC", Offset = "0x12500EC", VA = "0x12500EC")]
		public CGSpot(int index, Vector3 position, Quaternion rotation, Vector3 scale)
		{
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0x1250114", Offset = "0x1250114", VA = "0x1250114")]
		public void ToTransform(Transform transform)
		{
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0x1250170", Offset = "0x1250170", VA = "0x1250170", Slot = "4")]
		public bool Equals(CGSpot other)
		{
			return default(bool);
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0x1250268", Offset = "0x1250268", VA = "0x1250268", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0x12502F8", Offset = "0x12502F8", VA = "0x12502F8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0x1250404", Offset = "0x1250404", VA = "0x1250404")]
		public static bool operator ==(CGSpot left, CGSpot right)
		{
			return default(bool);
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0x1250434", Offset = "0x1250434", VA = "0x1250434")]
		public static bool operator !=(CGSpot left, CGSpot right)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20002CD")]
	public class CGMaterialSettings
	{
		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool SwapUV;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public CGKeepAspectMode KeepAspect;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float UVRotation;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 UVOffset;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector2 UVScale;

		[Token(Token = "0x6001362")]
		[Address(RVA = "0x1250468", Offset = "0x1250468", VA = "0x1250468")]
		public CGMaterialSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002CE")]
	public class CGMaterialSettingsEx : CGMaterialSettings
	{
		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int MaterialID;

		[Token(Token = "0x6001363")]
		[Address(RVA = "0x12504EC", Offset = "0x12504EC", VA = "0x12504EC")]
		public CGMaterialSettingsEx()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002CF")]
	public class CGMeshProperties
	{
		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private Mesh m_Mesh;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Material[] m_Material;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[VectorEx("", "")]
		private Vector3 m_Translation;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[VectorEx("", "")]
		private Vector3 m_Rotation;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[VectorEx("", "")]
		private Vector3 m_Scale;

		[Token(Token = "0x170002B4")]
		public Mesh Mesh
		{
			[Token(Token = "0x6001364")]
			[Address(RVA = "0x12504F0", Offset = "0x12504F0", VA = "0x12504F0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001365")]
			[Address(RVA = "0x12504F8", Offset = "0x12504F8", VA = "0x12504F8")]
			set
			{
			}
		}

		[Token(Token = "0x170002B5")]
		public Material[] Material
		{
			[Token(Token = "0x6001366")]
			[Address(RVA = "0x1250604", Offset = "0x1250604", VA = "0x1250604")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001367")]
			[Address(RVA = "0x125060C", Offset = "0x125060C", VA = "0x125060C")]
			set
			{
			}
		}

		[Token(Token = "0x170002B6")]
		public Vector3 Translation
		{
			[Token(Token = "0x6001368")]
			[Address(RVA = "0x1250620", Offset = "0x1250620", VA = "0x1250620")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001369")]
			[Address(RVA = "0x125062C", Offset = "0x125062C", VA = "0x125062C")]
			set
			{
			}
		}

		[Token(Token = "0x170002B7")]
		public Vector3 Rotation
		{
			[Token(Token = "0x600136A")]
			[Address(RVA = "0x1250670", Offset = "0x1250670", VA = "0x1250670")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600136B")]
			[Address(RVA = "0x125067C", Offset = "0x125067C", VA = "0x125067C")]
			set
			{
			}
		}

		[Token(Token = "0x170002B8")]
		public Vector3 Scale
		{
			[Token(Token = "0x600136C")]
			[Address(RVA = "0x12506C0", Offset = "0x12506C0", VA = "0x12506C0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600136D")]
			[Address(RVA = "0x12506CC", Offset = "0x12506CC", VA = "0x12506CC")]
			set
			{
			}
		}

		[Token(Token = "0x170002B9")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x600136E")]
			[Address(RVA = "0x1250710", Offset = "0x1250710", VA = "0x1250710")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0x12507C4", Offset = "0x12507C4", VA = "0x12507C4")]
		public CGMeshProperties()
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0x125085C", Offset = "0x125085C", VA = "0x125085C")]
		public CGMeshProperties(Mesh mesh)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002D0")]
	public class CGGameObjectProperties
	{
		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private GameObject m_Object;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[VectorEx("", "")]
		[SerializeField]
		private Vector3 m_Translation;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[VectorEx("", "")]
		private Vector3 m_Rotation;

		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[VectorEx("", "")]
		[SerializeField]
		private Vector3 m_Scale;

		[Token(Token = "0x170002BA")]
		public GameObject Object
		{
			[Token(Token = "0x6001371")]
			[Address(RVA = "0x1250980", Offset = "0x1250980", VA = "0x1250980")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001372")]
			[Address(RVA = "0x1250988", Offset = "0x1250988", VA = "0x1250988")]
			set
			{
			}
		}

		[Token(Token = "0x170002BB")]
		public Vector3 Translation
		{
			[Token(Token = "0x6001373")]
			[Address(RVA = "0x1250A00", Offset = "0x1250A00", VA = "0x1250A00")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001374")]
			[Address(RVA = "0x1250A0C", Offset = "0x1250A0C", VA = "0x1250A0C")]
			set
			{
			}
		}

		[Token(Token = "0x170002BC")]
		public Vector3 Rotation
		{
			[Token(Token = "0x6001375")]
			[Address(RVA = "0x1250A50", Offset = "0x1250A50", VA = "0x1250A50")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001376")]
			[Address(RVA = "0x1250A5C", Offset = "0x1250A5C", VA = "0x1250A5C")]
			set
			{
			}
		}

		[Token(Token = "0x170002BD")]
		public Vector3 Scale
		{
			[Token(Token = "0x6001377")]
			[Address(RVA = "0x1250AA0", Offset = "0x1250AA0", VA = "0x1250AA0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001378")]
			[Address(RVA = "0x1250AAC", Offset = "0x1250AAC", VA = "0x1250AAC")]
			set
			{
			}
		}

		[Token(Token = "0x170002BE")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6001379")]
			[Address(RVA = "0x1250AF0", Offset = "0x1250AF0", VA = "0x1250AF0")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0x1250BA4", Offset = "0x1250BA4", VA = "0x1250BA4")]
		public CGGameObjectProperties()
		{
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0x1250C04", Offset = "0x1250C04", VA = "0x1250C04")]
		public CGGameObjectProperties(GameObject gameObject)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002D1")]
	public class CGWeightedItem
	{
		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[RangeEx(0f, 1f, "", "", Slider = true, Precision = 1)]
		[SerializeField]
		private float m_Weight;

		[Token(Token = "0x170002BF")]
		public float Weight
		{
			[Token(Token = "0x600137C")]
			[Address(RVA = "0x1250C74", Offset = "0x1250C74", VA = "0x1250C74")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600137D")]
			[Address(RVA = "0x1250C7C", Offset = "0x1250C7C", VA = "0x1250C7C")]
			set
			{
			}
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0x1250CA4", Offset = "0x1250CA4", VA = "0x1250CA4")]
		public CGWeightedItem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002D2")]
	public class CGBoundsGroup : CGWeightedItem
	{
		[Token(Token = "0x20002D3")]
		public enum DistributionModeEnum
		{
			[Token(Token = "0x4000E5E")]
			Parent,
			[Token(Token = "0x4000E5F")]
			Self
		}

		[Token(Token = "0x20002D4")]
		public enum RotationModeEnum
		{
			[Token(Token = "0x4000E61")]
			Full,
			[Token(Token = "0x4000E62")]
			Direction,
			[Token(Token = "0x4000E63")]
			Horizontal,
			[Token(Token = "0x4000E64")]
			Independent
		}

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string m_Name;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool m_KeepTogether;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[FloatRegion(RegionIsOptional = true, Options = AttributeOptionsFlags.Compact)]
		private FloatRegion m_SpaceBefore;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[FloatRegion(RegionIsOptional = true, Options = AttributeOptionsFlags.Compact)]
		private FloatRegion m_SpaceAfter;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private CurvyRepeatingOrderEnum m_RepeatingOrder;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[IntRegion(UseSlider = false, RegionOptionsPropertyName = "RepeatingGroupsOptions", Options = AttributeOptionsFlags.Compact)]
		private IntRegion m_RepeatingItems;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[Header("Lateral Placement")]
		private DistributionModeEnum m_DistributionMode;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[FloatRegion(RegionIsOptional = true, RegionOptionsPropertyName = "PositionRangeOptions", UseSlider = true, Precision = 3)]
		private FloatRegion m_PositionOffset;

		[Token(Token = "0x4000E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		[FloatRegion(RegionIsOptional = true, Options = AttributeOptionsFlags.Compact)]
		private FloatRegion m_Height;

		[Token(Token = "0x4000E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Rotation")]
		[Label("Mode", "")]
		[SerializeField]
		private RotationModeEnum m_RotationMode;

		[Token(Token = "0x4000E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[VectorEx("", "")]
		[SerializeField]
		private Vector3 m_RotationOffset;

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[VectorEx("", "")]
		[SerializeField]
		private Vector3 m_RotationScatter;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private List<CGBoundsGroupItem> m_Items;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private WeightedRandom<int> mItemBag;

		[Token(Token = "0x170002C0")]
		public string Name
		{
			[Token(Token = "0x600137F")]
			[Address(RVA = "0x1250CB4", Offset = "0x1250CB4", VA = "0x1250CB4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001380")]
			[Address(RVA = "0x1250CBC", Offset = "0x1250CBC", VA = "0x1250CBC")]
			set
			{
			}
		}

		[Token(Token = "0x170002C1")]
		public bool KeepTogether
		{
			[Token(Token = "0x6001381")]
			[Address(RVA = "0x1250CEC", Offset = "0x1250CEC", VA = "0x1250CEC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001382")]
			[Address(RVA = "0x1250CF4", Offset = "0x1250CF4", VA = "0x1250CF4")]
			set
			{
			}
		}

		[Token(Token = "0x170002C2")]
		public FloatRegion SpaceBefore
		{
			[Token(Token = "0x6001383")]
			[Address(RVA = "0x1250D0C", Offset = "0x1250D0C", VA = "0x1250D0C")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6001384")]
			[Address(RVA = "0x1250D1C", Offset = "0x1250D1C", VA = "0x1250D1C")]
			set
			{
			}
		}

		[Token(Token = "0x170002C3")]
		public FloatRegion SpaceAfter
		{
			[Token(Token = "0x6001385")]
			[Address(RVA = "0x1250D60", Offset = "0x1250D60", VA = "0x1250D60")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6001386")]
			[Address(RVA = "0x1250D70", Offset = "0x1250D70", VA = "0x1250D70")]
			set
			{
			}
		}

		[Token(Token = "0x170002C4")]
		public CurvyRepeatingOrderEnum RepeatingOrder
		{
			[Token(Token = "0x6001387")]
			[Address(RVA = "0x1250DB4", Offset = "0x1250DB4", VA = "0x1250DB4")]
			get
			{
				return default(CurvyRepeatingOrderEnum);
			}
			[Token(Token = "0x6001388")]
			[Address(RVA = "0x1250DBC", Offset = "0x1250DBC", VA = "0x1250DBC")]
			set
			{
			}
		}

		[Token(Token = "0x170002C5")]
		public IntRegion RepeatingItems
		{
			[Token(Token = "0x6001389")]
			[Address(RVA = "0x1250DD0", Offset = "0x1250DD0", VA = "0x1250DD0")]
			get
			{
				return default(IntRegion);
			}
			[Token(Token = "0x600138A")]
			[Address(RVA = "0x1250DE0", Offset = "0x1250DE0", VA = "0x1250DE0")]
			set
			{
			}
		}

		[Token(Token = "0x170002C6")]
		public DistributionModeEnum DistributionMode
		{
			[Token(Token = "0x600138B")]
			[Address(RVA = "0x1250E24", Offset = "0x1250E24", VA = "0x1250E24")]
			get
			{
				return default(DistributionModeEnum);
			}
			[Token(Token = "0x600138C")]
			[Address(RVA = "0x1250E2C", Offset = "0x1250E2C", VA = "0x1250E2C")]
			set
			{
			}
		}

		[Token(Token = "0x170002C7")]
		public FloatRegion PositionOffset
		{
			[Token(Token = "0x600138D")]
			[Address(RVA = "0x1250E40", Offset = "0x1250E40", VA = "0x1250E40")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x600138E")]
			[Address(RVA = "0x1250E50", Offset = "0x1250E50", VA = "0x1250E50")]
			set
			{
			}
		}

		[Token(Token = "0x170002C8")]
		public FloatRegion Height
		{
			[Token(Token = "0x600138F")]
			[Address(RVA = "0x1250E94", Offset = "0x1250E94", VA = "0x1250E94")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x6001390")]
			[Address(RVA = "0x1250EA4", Offset = "0x1250EA4", VA = "0x1250EA4")]
			set
			{
			}
		}

		[Token(Token = "0x170002C9")]
		public RotationModeEnum RotationMode
		{
			[Token(Token = "0x6001391")]
			[Address(RVA = "0x1250EE8", Offset = "0x1250EE8", VA = "0x1250EE8")]
			get
			{
				return default(RotationModeEnum);
			}
			[Token(Token = "0x6001392")]
			[Address(RVA = "0x1250EF0", Offset = "0x1250EF0", VA = "0x1250EF0")]
			set
			{
			}
		}

		[Token(Token = "0x170002CA")]
		public Vector3 RotationOffset
		{
			[Token(Token = "0x6001393")]
			[Address(RVA = "0x1250F04", Offset = "0x1250F04", VA = "0x1250F04")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001394")]
			[Address(RVA = "0x1250F10", Offset = "0x1250F10", VA = "0x1250F10")]
			set
			{
			}
		}

		[Token(Token = "0x170002CB")]
		public Vector3 RotationScatter
		{
			[Token(Token = "0x6001395")]
			[Address(RVA = "0x1250F54", Offset = "0x1250F54", VA = "0x1250F54")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001396")]
			[Address(RVA = "0x1250F60", Offset = "0x1250F60", VA = "0x1250F60")]
			set
			{
			}
		}

		[Token(Token = "0x170002CC")]
		public List<CGBoundsGroupItem> Items
		{
			[Token(Token = "0x6001397")]
			[Address(RVA = "0x1250FA4", Offset = "0x1250FA4", VA = "0x1250FA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CD")]
		public int FirstRepeating
		{
			[Token(Token = "0x6001398")]
			[Address(RVA = "0x1250FAC", Offset = "0x1250FAC", VA = "0x1250FAC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001399")]
			[Address(RVA = "0x1250FB4", Offset = "0x1250FB4", VA = "0x1250FB4")]
			set
			{
			}
		}

		[Token(Token = "0x170002CE")]
		public int LastRepeating
		{
			[Token(Token = "0x600139A")]
			[Address(RVA = "0x1251044", Offset = "0x1251044", VA = "0x1251044")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600139B")]
			[Address(RVA = "0x125104C", Offset = "0x125104C", VA = "0x125104C")]
			set
			{
			}
		}

		[Token(Token = "0x170002CF")]
		public int ItemCount
		{
			[Token(Token = "0x600139C")]
			[Address(RVA = "0x1250FFC", Offset = "0x1250FFC", VA = "0x1250FFC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002D0")]
		private RegionOptions<int> RepeatingGroupsOptions
		{
			[Token(Token = "0x600139E")]
			[Address(RVA = "0x12511C4", Offset = "0x12511C4", VA = "0x12511C4")]
			get
			{
				return default(RegionOptions<int>);
			}
		}

		[Token(Token = "0x170002D1")]
		private RegionOptions<float> PositionRangeOptions
		{
			[Token(Token = "0x600139F")]
			[Address(RVA = "0x1251248", Offset = "0x1251248", VA = "0x1251248")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x170002D2")]
		private int lastItemIndex
		{
			[Token(Token = "0x60013A0")]
			[Address(RVA = "0x12512B4", Offset = "0x12512B4", VA = "0x12512B4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0x1251098", Offset = "0x1251098", VA = "0x1251098")]
		public CGBoundsGroup(string name)
		{
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0x12512CC", Offset = "0x12512CC", VA = "0x12512CC")]
		internal void PrepareINTERNAL()
		{
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0x1251410", Offset = "0x1251410", VA = "0x1251410")]
		public static void FillItemBag(WeightedRandom<int> bag, IEnumerable<CGWeightedItem> itemsWeights, int firstItem, int lastItem)
		{
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0x1251550", Offset = "0x1251550", VA = "0x1251550")]
		internal int getRandomItemINTERNAL()
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20002D5")]
	public class CGBoundsGroupItem : CGWeightedItem
	{
		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int Index;

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0x12515A0", Offset = "0x12515A0", VA = "0x12515A0")]
		public CGBoundsGroupItem()
		{
		}
	}
	[Token(Token = "0x20002D6")]
	public struct ControlPointOption : IEquatable<ControlPointOption>
	{
		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float TF;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float Distance;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool Include;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int MaterialID;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool HardEdge;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float MaxStepDistance;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool UVEdge;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool UVShift;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float FirstU;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float SecondU;

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0x12515B0", Offset = "0x12515B0", VA = "0x12515B0")]
		public ControlPointOption(float tf, float dist, bool includeAnyways, int materialID, bool hardEdge, float maxStepDistance, bool uvEdge, bool uvShift, float firstU, float secondU)
		{
		}

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0x12515F4", Offset = "0x12515F4", VA = "0x12515F4", Slot = "4")]
		public bool Equals(ControlPointOption other)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0x12516D8", Offset = "0x12516D8", VA = "0x12516D8", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0x1251768", Offset = "0x1251768", VA = "0x1251768", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0x1251878", Offset = "0x1251878", VA = "0x1251878")]
		public static bool operator ==(ControlPointOption left, ControlPointOption right)
		{
			return default(bool);
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0x12518A8", Offset = "0x12518A8", VA = "0x12518A8")]
		public static bool operator !=(ControlPointOption left, ControlPointOption right)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002D7")]
	public struct SamplePointsPatch : IEquatable<SamplePointsPatch>
	{
		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Start;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int Count;

		[Token(Token = "0x170002D3")]
		public int End
		{
			[Token(Token = "0x60013AB")]
			[Address(RVA = "0x12518DC", Offset = "0x12518DC", VA = "0x12518DC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60013AC")]
			[Address(RVA = "0x124E310", Offset = "0x124E310", VA = "0x124E310")]
			set
			{
			}
		}

		[Token(Token = "0x170002D4")]
		public int TriangleCount
		{
			[Token(Token = "0x60013AD")]
			[Address(RVA = "0x12518E8", Offset = "0x12518E8", VA = "0x12518E8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0x124DFDC", Offset = "0x124DFDC", VA = "0x124DFDC")]
		public SamplePointsPatch(int start)
		{
		}

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0x12518F4", Offset = "0x12518F4", VA = "0x12518F4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0x1251AE0", Offset = "0x1251AE0", VA = "0x1251AE0", Slot = "4")]
		public bool Equals(SamplePointsPatch other)
		{
			return default(bool);
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0x1251B08", Offset = "0x1251B08", VA = "0x1251B08", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0x1251B90", Offset = "0x1251B90", VA = "0x1251B90", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0x1251BA4", Offset = "0x1251BA4", VA = "0x1251BA4")]
		public static bool operator ==(SamplePointsPatch left, SamplePointsPatch right)
		{
			return default(bool);
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0x1251BC4", Offset = "0x1251BC4", VA = "0x1251BC4")]
		public static bool operator !=(SamplePointsPatch left, SamplePointsPatch right)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002D8")]
	public class SamplePointsMaterialGroup
	{
		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int MaterialID;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<SamplePointsPatch> Patches;

		[Token(Token = "0x170002D5")]
		public int TriangleCount
		{
			[Token(Token = "0x60013B5")]
			[Address(RVA = "0x1251BE4", Offset = "0x1251BE4", VA = "0x1251BE4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002D6")]
		public int StartVertex
		{
			[Token(Token = "0x60013B6")]
			[Address(RVA = "0x1251C84", Offset = "0x1251C84", VA = "0x1251C84")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002D7")]
		public int EndVertex
		{
			[Token(Token = "0x60013B7")]
			[Address(RVA = "0x1251CDC", Offset = "0x1251CDC", VA = "0x1251CDC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002D8")]
		public int VertexCount
		{
			[Token(Token = "0x60013B8")]
			[Address(RVA = "0x1251D4C", Offset = "0x1251D4C", VA = "0x1251D4C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0x124DF4C", Offset = "0x124DF4C", VA = "0x124DF4C")]
		public SamplePointsMaterialGroup(int materialID)
		{
		}

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0x1251D7C", Offset = "0x1251D7C", VA = "0x1251D7C")]
		public void GetLengths(CGVolume volume, out float worldLength, out float uLength)
		{
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0x1251F14", Offset = "0x1251F14", VA = "0x1251F14")]
		public SamplePointsMaterialGroup Clone()
		{
			return null;
		}
	}
	[Token(Token = "0x20002D9")]
	public struct SamplePointUData : IEquatable<SamplePointUData>
	{
		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int Vertex;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool UVEdge;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float FirstU;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float SecondU;

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0x124E2FC", Offset = "0x124E2FC", VA = "0x124E2FC")]
		public SamplePointUData(int vt, bool uvEdge, float uv0, float uv1)
		{
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0x1251FCC", Offset = "0x1251FCC", VA = "0x1251FCC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0x12521D8", Offset = "0x12521D8", VA = "0x12521D8", Slot = "4")]
		public bool Equals(SamplePointUData other)
		{
			return default(bool);
		}

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0x1252244", Offset = "0x1252244", VA = "0x1252244", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0x12522BC", Offset = "0x12522BC", VA = "0x12522BC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0x125232C", Offset = "0x125232C", VA = "0x125232C")]
		public static bool operator ==(SamplePointUData left, SamplePointUData right)
		{
			return default(bool);
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0x1252358", Offset = "0x1252358", VA = "0x1252358")]
		public static bool operator !=(SamplePointUData left, SamplePointUData right)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002DA")]
	public class SamplePointsMaterialGroupCollection : List<SamplePointsMaterialGroup>
	{
		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int MaterialID;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float AspectCorrection;

		[Token(Token = "0x170002D9")]
		public int TriangleCount
		{
			[Token(Token = "0x60013C3")]
			[Address(RVA = "0x1252388", Offset = "0x1252388", VA = "0x1252388")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0x125242C", Offset = "0x125242C", VA = "0x125242C")]
		public SamplePointsMaterialGroupCollection()
		{
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0x12524A0", Offset = "0x12524A0", VA = "0x12524A0")]
		public SamplePointsMaterialGroupCollection(int capacity)
		{
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0x1252524", Offset = "0x1252524", VA = "0x1252524")]
		public SamplePointsMaterialGroupCollection(IEnumerable<SamplePointsMaterialGroup> collection)
		{
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0x12525A8", Offset = "0x12525A8", VA = "0x12525A8")]
		public void CalculateAspectCorrection(CGVolume volume, CGMaterialSettingsEx matSettings)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002DB")]
	public class CGDataReference
	{
		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private CGModule m_Module;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string m_SlotName;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CGModuleOutputSlot mSlot;

		[Token(Token = "0x170002DA")]
		public CGData[] Data
		{
			[Token(Token = "0x60013C8")]
			[Address(RVA = "0x12526A0", Offset = "0x12526A0", VA = "0x12526A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DB")]
		public CGModuleOutputSlot Slot
		{
			[Token(Token = "0x60013C9")]
			[Address(RVA = "0x1252714", Offset = "0x1252714", VA = "0x1252714")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DC")]
		public bool HasValue
		{
			[Token(Token = "0x60013CA")]
			[Address(RVA = "0x1252854", Offset = "0x1252854", VA = "0x1252854")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002DD")]
		public bool IsEmpty
		{
			[Token(Token = "0x60013CB")]
			[Address(RVA = "0x1252880", Offset = "0x1252880", VA = "0x1252880")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002DE")]
		public CGModule Module
		{
			[Token(Token = "0x60013CC")]
			[Address(RVA = "0x125288C", Offset = "0x125288C", VA = "0x125288C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DF")]
		public string SlotName
		{
			[Token(Token = "0x60013CD")]
			[Address(RVA = "0x1252894", Offset = "0x1252894", VA = "0x1252894")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0x125289C", Offset = "0x125289C", VA = "0x125289C")]
		public CGDataReference()
		{
		}

		[Token(Token = "0x60013CF")]
		[Address(RVA = "0x12528A4", Offset = "0x12528A4", VA = "0x12528A4")]
		public CGDataReference(CGModule module, string slotName)
		{
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0x12528E0", Offset = "0x12528E0", VA = "0x12528E0")]
		public CGDataReference(CurvyGenerator generator, string moduleName, string slotName)
		{
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0x1252964", Offset = "0x1252964", VA = "0x1252964")]
		public void Clear()
		{
		}

		[Token(Token = "0x60013D2")]
		public T GetData<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x60013D3")]
		public T[] GetAllData<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0x12528D4", Offset = "0x12528D4", VA = "0x12528D4")]
		public void setINTERNAL(CGModule module, string slotName)
		{
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0x1252924", Offset = "0x1252924", VA = "0x1252924")]
		public void setINTERNAL(CurvyGenerator generator, string moduleName, string slotName)
		{
		}
	}
	[Token(Token = "0x20002DC")]
	[AttributeUsage(AttributeTargets.Class)]
	public sealed class CGDataInfoAttribute : Attribute
	{
		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Color Color;

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0x12529B8", Offset = "0x12529B8", VA = "0x12529B8")]
		public CGDataInfoAttribute(Color color)
		{
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0x12529F8", Offset = "0x12529F8", VA = "0x12529F8")]
		public CGDataInfoAttribute(float r, float g, float b, float a = 1f)
		{
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0x1252A38", Offset = "0x1252A38", VA = "0x1252A38")]
		public CGDataInfoAttribute(string htmlColor)
		{
		}
	}
	[Token(Token = "0x20002DD")]
	public class CGData
	{
		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x170002E0")]
		public virtual int Count
		{
			[Token(Token = "0x60013D9")]
			[Address(RVA = "0x1252A70", Offset = "0x1252A70", VA = "0x1252A70", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0x1252A78", Offset = "0x1252A78", VA = "0x1252A78")]
		public static implicit operator bool(CGData a)
		{
			return default(bool);
		}

		[Token(Token = "0x60013DB")]
		public virtual T Clone<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0x1252A84", Offset = "0x1252A84", VA = "0x1252A84")]
		protected int getGenericFIndex(ref float[] FMapArray, float fValue, out float frag)
		{
			return default(int);
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0x1252B50", Offset = "0x1252B50", VA = "0x1252B50")]
		public CGData()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	[CGDataInfo(0.73f, 0.87f, 0.98f, 1f)]
	public class CGShape : CGData
	{
		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] SourceF;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float[] F;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3[] Position;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3[] Normal;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float[] Map;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<SamplePointsMaterialGroup> MaterialGroups;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool SourceIsManaged;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool Closed;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool Seamless;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float Length;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float mCacheLastF;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int mCacheLastIndex;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float mCacheLastFrag;

		[Token(Token = "0x170002E1")]
		public override int Count
		{
			[Token(Token = "0x60013DE")]
			[Address(RVA = "0x1252B58", Offset = "0x1252B58", VA = "0x1252B58", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0x124DDF4", Offset = "0x124DDF4", VA = "0x124DDF4")]
		public CGShape()
		{
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0x1252B74", Offset = "0x1252B74", VA = "0x1252B74")]
		public CGShape(CGShape source)
		{
		}

		[Token(Token = "0x60013E1")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0x1252F04", Offset = "0x1252F04", VA = "0x1252F04")]
		public static void Copy(CGShape dest, CGShape source)
		{
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0x125316C", Offset = "0x125316C", VA = "0x125316C")]
		public void Copy(CGShape source)
		{
		}

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0x1253170", Offset = "0x1253170", VA = "0x1253170")]
		public float DistanceToF(float distance)
		{
			return default(float);
		}

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0x1253190", Offset = "0x1253190", VA = "0x1253190")]
		public float FToDistance(float f)
		{
			return default(float);
		}

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0x12531B0", Offset = "0x12531B0", VA = "0x12531B0")]
		public int GetFIndex(float f, out float frag)
		{
			return default(int);
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0x12531FC", Offset = "0x12531FC", VA = "0x12531FC")]
		public Vector3 InterpolatePosition(float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0x12532A4", Offset = "0x12532A4", VA = "0x12532A4")]
		public Vector3 InterpolateUp(float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0x1253334", Offset = "0x1253334", VA = "0x1253334")]
		public void Interpolate(float f, out Vector3 position, out Vector3 up)
		{
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0x125343C", Offset = "0x125343C", VA = "0x125343C")]
		public void Move(ref float f, ref int direction, float speed, CurvyClamping clamping)
		{
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0x1253464", Offset = "0x1253464", VA = "0x1253464")]
		public void MoveBy(ref float f, ref int direction, float speedDist, CurvyClamping clamping)
		{
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0x12534E0", Offset = "0x12534E0", VA = "0x12534E0", Slot = "6")]
		public virtual void Recalculate()
		{
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0x124EA10", Offset = "0x124EA10", VA = "0x124EA10")]
		public void RecalculateNormals(List<int> softEdges)
		{
		}
	}
	[Token(Token = "0x20002E0")]
	[CGDataInfo(0.13f, 0.59f, 0.95f, 1f)]
	public class CGPath : CGShape
	{
		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3[] Direction;

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0x124DEF8", Offset = "0x124DEF8", VA = "0x124DEF8")]
		public CGPath()
		{
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0x125385C", Offset = "0x125385C", VA = "0x125385C")]
		public CGPath(CGPath source)
		{
		}

		[Token(Token = "0x60013F4")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0x1253928", Offset = "0x1253928", VA = "0x1253928")]
		public static void Copy(CGPath dest, CGPath source)
		{
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0x12539B4", Offset = "0x12539B4", VA = "0x12539B4")]
		public void Interpolate(float f, out Vector3 position, out Vector3 direction, out Vector3 up)
		{
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0x1253B30", Offset = "0x1253B30", VA = "0x1253B30")]
		public void Interpolate(float f, float angleF, out Vector3 pos, out Vector3 dir, out Vector3 up)
		{
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0x1253B98", Offset = "0x1253B98", VA = "0x1253B98")]
		public Vector3 InterpolateDirection(float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0x1253C28", Offset = "0x1253C28", VA = "0x1253C28", Slot = "6")]
		public override void Recalculate()
		{
		}
	}
	[Token(Token = "0x20002E1")]
	[CGDataInfo(0.08f, 0.4f, 0.75f, 1f)]
	public class CGVolume : CGPath
	{
		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector3[] Vertex;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector3[] VertexNormal;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float[] CrossF;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float[] CrossMap;

		[Token(Token = "0x4000E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float[] SegmentLength;

		[Token(Token = "0x4000E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool CrossClosed;

		[Token(Token = "0x4000E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool CrossSeamless;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float CrossFShift;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public SamplePointsMaterialGroupCollection CrossMaterialGroups;

		[Token(Token = "0x170002E2")]
		public int CrossSize
		{
			[Token(Token = "0x60013FA")]
			[Address(RVA = "0x1253DCC", Offset = "0x1253DCC", VA = "0x1253DCC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002E3")]
		public int VertexCount
		{
			[Token(Token = "0x60013FB")]
			[Address(RVA = "0x1253DE8", Offset = "0x1253DE8", VA = "0x1253DE8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0x1253E04", Offset = "0x1253E04", VA = "0x1253E04")]
		public CGVolume()
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0x1253EA4", Offset = "0x1253EA4", VA = "0x1253EA4")]
		public CGVolume(int samplePoints, CGShape crossShape)
		{
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0x1254094", Offset = "0x1254094", VA = "0x1254094")]
		public CGVolume(CGPath path, CGShape crossShape)
		{
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0x125429C", Offset = "0x125429C", VA = "0x125429C")]
		public CGVolume(CGVolume source)
		{
		}

		[Token(Token = "0x6001400")]
		[Address(RVA = "0x12544F0", Offset = "0x12544F0", VA = "0x12544F0")]
		public static CGVolume Get(CGVolume data, CGPath path, CGShape crossShape)
		{
			return null;
		}

		[Token(Token = "0x6001401")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0x12546E0", Offset = "0x12546E0", VA = "0x12546E0")]
		public void InterpolateVolume(float f, float crossF, out Vector3 pos, out Vector3 dir, out Vector3 up)
		{
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0x12549A4", Offset = "0x12549A4", VA = "0x12549A4")]
		public Vector3 InterpolateVolumePosition(float f, float crossF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0x1254B0C", Offset = "0x1254B0C", VA = "0x1254B0C")]
		public Vector3 InterpolateVolumeDirection(float f, float crossF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001405")]
		[Address(RVA = "0x1254CC0", Offset = "0x1254CC0", VA = "0x1254CC0")]
		public Vector3 InterpolateVolumeUp(float f, float crossF)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0x1254E1C", Offset = "0x1254E1C", VA = "0x1254E1C")]
		public float GetCrossLength(float pathF)
		{
			return default(float);
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0x12550D8", Offset = "0x12550D8", VA = "0x12550D8")]
		public float CrossFToDistance(float f, float crossF, CurvyClamping crossClamping = CurvyClamping.Clamp)
		{
			return default(float);
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0x125510C", Offset = "0x125510C", VA = "0x125510C")]
		public float CrossDistanceToF(float f, float distance, CurvyClamping crossClamping = CurvyClamping.Clamp)
		{
			return default(float);
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0x1254F28", Offset = "0x1254F28", VA = "0x1254F28")]
		public void GetSegmentIndices(float pathF, out int s0Index, out int s1Index, out float frag)
		{
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0x1255144", Offset = "0x1255144", VA = "0x1255144")]
		public int GetSegmentIndex(int segment)
		{
			return default(int);
		}

		[Token(Token = "0x600140B")]
		[Address(RVA = "0x1255164", Offset = "0x1255164", VA = "0x1255164")]
		public int GetCrossFIndex(float crossF, out float frag)
		{
			return default(int);
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0x12551A4", Offset = "0x12551A4", VA = "0x12551A4")]
		public int GetVertexIndex(float pathF, out float pathFrag)
		{
			return default(int);
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0x1254960", Offset = "0x1254960", VA = "0x1254960")]
		public int GetVertexIndex(float pathF, float crossF, out float pathFrag, out float crossFrag)
		{
			return default(int);
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0x1255204", Offset = "0x1255204", VA = "0x1255204")]
		public Vector3[] GetSegmentVertices(params int[] segmentIndices)
		{
			return null;
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0x1254FAC", Offset = "0x1254FAC", VA = "0x1254FAC")]
		private float calcSegmentLength(int segmentIndex)
		{
			return default(float);
		}
	}
	[Token(Token = "0x20002E2")]
	[CGDataInfo(1f, 0.8f, 0.5f, 1f)]
	public class CGBounds : CGData
	{
		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Bounds? mBounds;

		[Token(Token = "0x170002E4")]
		public Bounds Bounds
		{
			[Token(Token = "0x6001410")]
			[Address(RVA = "0x12552D8", Offset = "0x12552D8", VA = "0x12552D8")]
			get
			{
				return default(Bounds);
			}
			[Token(Token = "0x6001411")]
			[Address(RVA = "0x1255370", Offset = "0x1255370", VA = "0x1255370")]
			set
			{
			}
		}

		[Token(Token = "0x170002E5")]
		public float Depth
		{
			[Token(Token = "0x6001412")]
			[Address(RVA = "0x12554B0", Offset = "0x12554B0", VA = "0x12554B0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0x12554E0", Offset = "0x12554E0", VA = "0x12554E0")]
		public CGBounds()
		{
		}

		[Token(Token = "0x6001414")]
		[Address(RVA = "0x12554E8", Offset = "0x12554E8", VA = "0x12554E8")]
		public CGBounds(Bounds bounds)
		{
		}

		[Token(Token = "0x6001415")]
		[Address(RVA = "0x1255530", Offset = "0x1255530", VA = "0x1255530")]
		public CGBounds(CGBounds source)
		{
		}

		[Token(Token = "0x6001416")]
		[Address(RVA = "0x12555B0", Offset = "0x12555B0", VA = "0x12555B0", Slot = "6")]
		public virtual void RecalculateBounds()
		{
		}

		[Token(Token = "0x6001417")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6001418")]
		[Address(RVA = "0x12555D0", Offset = "0x12555D0", VA = "0x12555D0")]
		public static void Copy(CGBounds dest, CGBounds source)
		{
		}
	}
	[Token(Token = "0x20002E3")]
	public class CGVSubMesh : CGData
	{
		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] Triangles;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material Material;

		[Token(Token = "0x170002E6")]
		public override int Count
		{
			[Token(Token = "0x6001419")]
			[Address(RVA = "0x1255650", Offset = "0x1255650", VA = "0x1255650", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0x125566C", Offset = "0x125566C", VA = "0x125566C")]
		public CGVSubMesh([Optional] Material material)
		{
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0x12556D8", Offset = "0x12556D8", VA = "0x12556D8")]
		public CGVSubMesh(int[] triangles, [Optional] Material material)
		{
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0x1255704", Offset = "0x1255704", VA = "0x1255704")]
		public CGVSubMesh(int triangleCount, [Optional] Material material)
		{
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0x1255774", Offset = "0x1255774", VA = "0x1255774")]
		public CGVSubMesh(CGVSubMesh source)
		{
		}

		[Token(Token = "0x600141E")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0x1255838", Offset = "0x1255838", VA = "0x1255838")]
		public static CGVSubMesh Get(CGVSubMesh data, int triangleCount, [Optional] Material material)
		{
			return null;
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0x12558DC", Offset = "0x12558DC", VA = "0x12558DC")]
		public void ShiftIndices(int offset, int startIndex = 0)
		{
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0x1255930", Offset = "0x1255930", VA = "0x1255930")]
		public void Add(CGVSubMesh other, int shiftIndexOffset = 0)
		{
		}
	}
	[Token(Token = "0x20002E4")]
	[CGDataInfo(0.98f, 0.5f, 0f, 1f)]
	public class CGVMesh : CGBounds
	{
		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3[] Vertex;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2[] UV;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2[] UV2;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3[] Normal;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector4[] Tangents;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CGVSubMesh[] SubMeshes;

		[Token(Token = "0x170002E7")]
		public override int Count
		{
			[Token(Token = "0x6001422")]
			[Address(RVA = "0x1255A10", Offset = "0x1255A10", VA = "0x1255A10", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002E8")]
		public bool HasUV
		{
			[Token(Token = "0x6001423")]
			[Address(RVA = "0x1255A2C", Offset = "0x1255A2C", VA = "0x1255A2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002E9")]
		public bool HasUV2
		{
			[Token(Token = "0x6001424")]
			[Address(RVA = "0x1255A50", Offset = "0x1255A50", VA = "0x1255A50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002EA")]
		public bool HasNormals
		{
			[Token(Token = "0x6001425")]
			[Address(RVA = "0x1255A74", Offset = "0x1255A74", VA = "0x1255A74")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002EB")]
		public bool HasTangents
		{
			[Token(Token = "0x6001426")]
			[Address(RVA = "0x1255A98", Offset = "0x1255A98", VA = "0x1255A98")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002EC")]
		public int TriangleCount
		{
			[Token(Token = "0x6001427")]
			[Address(RVA = "0x1255ABC", Offset = "0x1255ABC", VA = "0x1255ABC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0x1255B3C", Offset = "0x1255B3C", VA = "0x1255B3C")]
		public CGVMesh()
		{
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0x1255B54", Offset = "0x1255B54", VA = "0x1255B54")]
		public CGVMesh(int vertexCount, bool addUV = false, bool addUV2 = false, bool addNormals = false, bool addTangents = false)
		{
		}

		[Token(Token = "0x600142A")]
		[Address(RVA = "0x1255C80", Offset = "0x1255C80", VA = "0x1255C80")]
		public CGVMesh(CGVolume volume)
		{
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0x1255CD8", Offset = "0x1255CD8", VA = "0x1255CD8")]
		public CGVMesh(CGVolume volume, IntRegion subset)
		{
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0x1255DA4", Offset = "0x1255DA4", VA = "0x1255DA4")]
		public CGVMesh(CGVMesh source)
		{
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0x1256074", Offset = "0x1256074", VA = "0x1256074")]
		public CGVMesh(CGMeshProperties meshProperties)
		{
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0x12560C0", Offset = "0x12560C0", VA = "0x12560C0")]
		public CGVMesh(Mesh source, Material[] materials, Matrix4x4 trsMatrix)
		{
		}

		[Token(Token = "0x600142F")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0x125661C", Offset = "0x125661C", VA = "0x125661C")]
		public static CGVMesh Get(CGVMesh data, CGVolume source, bool addUV, bool reverseNormals)
		{
			return null;
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0x12566A0", Offset = "0x12566A0", VA = "0x12566A0")]
		public static CGVMesh Get(CGVMesh data, CGVolume source, IntRegion subset, bool addUV, bool reverseNormals)
		{
			return null;
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0x125691C", Offset = "0x125691C", VA = "0x125691C")]
		public void SetSubMeshCount(int count)
		{
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0x1256974", Offset = "0x1256974", VA = "0x1256974")]
		public void AddSubMesh([Optional] CGVSubMesh submesh)
		{
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0x12569D4", Offset = "0x12569D4", VA = "0x12569D4")]
		public void MergeVMesh(CGVMesh source)
		{
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0x1256EC4", Offset = "0x1256EC4", VA = "0x1256EC4")]
		public void MergeVMesh(CGVMesh source, Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0x12570A8", Offset = "0x12570A8", VA = "0x12570A8")]
		public void MergeVMeshes(List<CGVMesh> vMeshes, int startIndex, int endIndex)
		{
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0x1256B04", Offset = "0x1256B04", VA = "0x1256B04")]
		private void MergeUVsNormalsAndTangents(CGVMesh source, int preMergeVertexCount)
		{
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0x1256D98", Offset = "0x1256D98", VA = "0x1256D98")]
		public CGVSubMesh GetMaterialSubMesh(Material mat, bool createIfMissing = true)
		{
			return null;
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0x125795C", Offset = "0x125795C", VA = "0x125795C")]
		public Mesh AsMesh()
		{
			return null;
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0x12579D8", Offset = "0x12579D8", VA = "0x12579D8")]
		public void ToMesh(ref Mesh msh)
		{
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0x1257B00", Offset = "0x1257B00", VA = "0x1257B00")]
		public Material[] GetMaterials()
		{
			return null;
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0x1257C3C", Offset = "0x1257C3C", VA = "0x1257C3C", Slot = "6")]
		public override void RecalculateBounds()
		{
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0x1257E24", Offset = "0x1257E24", VA = "0x1257E24")]
		public void RecalculateUV2()
		{
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0x1256480", Offset = "0x1256480", VA = "0x1256480")]
		public void TRS(Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x600143F")]
		private void copyData<T>(ref T[] src, ref T[] dst, int currentSize, int extraSize)
		{
		}
	}
	[Token(Token = "0x20002E5")]
	[CGDataInfo("#FFF59D")]
	public class CGGameObject : CGBounds
	{
		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject Object;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 Translate;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 Rotate;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector3 Scale;

		[Token(Token = "0x170002ED")]
		public Matrix4x4 Matrix
		{
			[Token(Token = "0x6001440")]
			[Address(RVA = "0x1257E44", Offset = "0x1257E44", VA = "0x1257E44")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0x1257EF8", Offset = "0x1257EF8", VA = "0x1257EF8")]
		public CGGameObject()
		{
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0x1257F58", Offset = "0x1257F58", VA = "0x1257F58")]
		public CGGameObject(CGGameObjectProperties properties)
		{
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0x12580C8", Offset = "0x12580C8", VA = "0x12580C8")]
		public CGGameObject(GameObject obj)
		{
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0x1257F9C", Offset = "0x1257F9C", VA = "0x1257F9C")]
		public CGGameObject(GameObject obj, Vector3 translate, Vector3 rotate, Vector3 scale)
		{
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0x1258194", Offset = "0x1258194", VA = "0x1258194")]
		public CGGameObject(CGGameObject source)
		{
		}

		[Token(Token = "0x6001446")]
		public override T Clone<T>()
		{
			return null;
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0x125823C", Offset = "0x125823C", VA = "0x125823C")]
		public static CGGameObject Get(CGGameObject data, GameObject obj, Vector3 translate, Vector3 rotate, Vector3 scale)
		{
			return null;
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0x125834C", Offset = "0x125834C", VA = "0x125834C", Slot = "6")]
		public override void RecalculateBounds()
		{
		}
	}
	[Token(Token = "0x20002E6")]
	[CGDataInfo(0.96f, 0.96f, 0.96f, 1f)]
	public class CGSpots : CGData
	{
		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CGSpot[] Points;

		[Token(Token = "0x170002EE")]
		public override int Count
		{
			[Token(Token = "0x6001449")]
			[Address(RVA = "0x12586E4", Offset = "0x12586E4", VA = "0x12586E4", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0x1258700", Offset = "0x1258700", VA = "0x1258700")]
		public CGSpots()
		{
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0x125875C", Offset = "0x125875C", VA = "0x125875C")]
		public CGSpots(params CGSpot[] points)
		{
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0x1258784", Offset = "0x1258784", VA = "0x1258784")]
		public CGSpots(params List<CGSpot>[] lists)
		{
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0x12588B8", Offset = "0x12588B8", VA = "0x12588B8")]
		public CGSpots(CGSpots source)
		{
		}

		[Token(Token = "0x600144E")]
		public override T Clone<T>()
		{
			return null;
		}
	}
	[Token(Token = "0x20002E7")]
	public class CGDataRequestParameter
	{
		[Token(Token = "0x600144F")]
		[Address(RVA = "0x12588EC", Offset = "0x12588EC", VA = "0x12588EC")]
		public static implicit operator bool(CGDataRequestParameter a)
		{
			return default(bool);
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0x12588F8", Offset = "0x12588F8", VA = "0x12588F8")]
		public CGDataRequestParameter()
		{
		}
	}
	[Token(Token = "0x20002E8")]
	public class CGDataRequestMetaCGOptions : CGDataRequestParameter
	{
		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool CheckHardEdges;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool CheckMaterialID;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool IncludeControlPoints;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool CheckExtendedUV;

		[Token(Token = "0x6001451")]
		[Address(RVA = "0x1258900", Offset = "0x1258900", VA = "0x1258900")]
		public CGDataRequestMetaCGOptions(bool checkEdges, bool checkMaterials, bool includeCP, bool extendedUV)
		{
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0x1258948", Offset = "0x1258948", VA = "0x1258948", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0x1258A10", Offset = "0x1258A10", VA = "0x1258A10", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002E9")]
	public class CGDataRequestShapeRasterization : CGDataRequestRasterization
	{
		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float[] PathF;

		[Token(Token = "0x6001454")]
		[Address(RVA = "0x1258ACC", Offset = "0x1258ACC", VA = "0x1258ACC")]
		public CGDataRequestShapeRasterization(float[] pathF, float start, float rasterizedRelativeLength, int resolution, float angle, ModeEnum mode = ModeEnum.Even)
		{
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0x1258BD4", Offset = "0x1258BD4", VA = "0x1258BD4", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0x1258D84", Offset = "0x1258D84", VA = "0x1258D84", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002EA")]
	public class CGDataRequestRasterization : CGDataRequestParameter
	{
		[Token(Token = "0x20002EB")]
		public enum ModeEnum
		{
			[Token(Token = "0x4000EB3")]
			Even,
			[Token(Token = "0x4000EB4")]
			Optimized
		}

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float Start;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float RasterizedRelativeLength;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Resolution;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Obsolete("IOnRequestPath.PathLength and CGDataRequestRasterization.SplineAbsoluteLength are no more needed. SplineInputModuleBase.getPathLength is used instead")]
		public float SplineAbsoluteLength;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float AngleThreshold;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ModeEnum Mode;

		[Token(Token = "0x6001457")]
		[Address(RVA = "0x1258E74", Offset = "0x1258E74", VA = "0x1258E74")]
		[Obsolete("Use another constructor")]
		public CGDataRequestRasterization(float start, float rasterizedRelativeLength, int resolution, float splineAbsoluteLength, float angle, ModeEnum mode = ModeEnum.Even)
		{
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0x1258B58", Offset = "0x1258B58", VA = "0x1258B58")]
		public CGDataRequestRasterization(float start, float rasterizedRelativeLength, int resolution, float angle, ModeEnum mode = ModeEnum.Even)
		{
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0x1258EF4", Offset = "0x1258EF4", VA = "0x1258EF4")]
		public CGDataRequestRasterization(CGDataRequestRasterization source)
		{
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0x1258CAC", Offset = "0x1258CAC", VA = "0x1258CAC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0x1258DBC", Offset = "0x1258DBC", VA = "0x1258DBC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002EC")]
	public interface INoProcessing
	{
	}
	[Token(Token = "0x20002ED")]
	public interface IExternalInput
	{
		[Token(Token = "0x170002EF")]
		bool SupportsIPE
		{
			[Token(Token = "0x600145C")]
			get;
		}
	}
	[Token(Token = "0x20002EE")]
	public interface IOnRequestProcessing
	{
		[Token(Token = "0x600145D")]
		CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests);
	}
	[Token(Token = "0x20002EF")]
	public interface IPathProvider
	{
		[Token(Token = "0x170002F0")]
		bool PathIsClosed
		{
			[Token(Token = "0x600145E")]
			get;
		}
	}
	[Token(Token = "0x20002F0")]
	public interface IOnRequestPath : IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x170002F1")]
		[Obsolete("IOnRequestPath.PathLength and CGDataRequestRasterization.SplineAbsoluteLength are no more needed. SplineInputModuleBase.getPathLength is used instead")]
		float PathLength
		{
			[Token(Token = "0x600145F")]
			get;
		}
	}
	[Token(Token = "0x20002F1")]
	public interface ICGResourceLoader
	{
		[Token(Token = "0x6001460")]
		UnityEngine.Component Create(CGModule cgModule, string context);

		[Token(Token = "0x6001461")]
		void Destroy(CGModule cgModule, UnityEngine.Component obj, string context, bool kill);
	}
	[Token(Token = "0x20002F2")]
	public interface ICGResourceCollection
	{
		[Token(Token = "0x170002F2")]
		int Count
		{
			[Token(Token = "0x6001462")]
			get;
		}

		[Token(Token = "0x170002F3")]
		UnityEngine.Component[] ItemsArray
		{
			[Token(Token = "0x6001463")]
			get;
		}
	}
	[Token(Token = "0x20002F3")]
	[RequireComponent(typeof(MeshRenderer))]
	[RequireComponent(typeof(MeshFilter))]
	public class CGMeshResource : DuplicateEditorMesh, IPoolable
	{
		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MeshRenderer mRenderer;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider mCollider;

		[Token(Token = "0x170002F4")]
		public MeshRenderer Renderer
		{
			[Token(Token = "0x6001464")]
			[Address(RVA = "0x1258F64", Offset = "0x1258F64", VA = "0x1258F64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002F5")]
		public Collider Collider
		{
			[Token(Token = "0x6001465")]
			[Address(RVA = "0x1258FF8", Offset = "0x1258FF8", VA = "0x1258FF8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0x125908C", Offset = "0x125908C", VA = "0x125908C")]
		public Mesh Prepare()
		{
			return null;
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0x12590E0", Offset = "0x12590E0", VA = "0x12590E0")]
		public bool ColliderMatches(CGColliderEnum type)
		{
			return default(bool);
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0x1259270", Offset = "0x1259270", VA = "0x1259270")]
		public void RemoveCollider()
		{
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0x1259320", Offset = "0x1259320", VA = "0x1259320")]
		public bool UpdateCollider(CGColliderEnum mode, bool convex, PhysicMaterial material, MeshColliderCookingOptions meshCookingOptions = MeshColliderCookingOptions.CookForFasterSimulation | MeshColliderCookingOptions.EnableMeshCleaning | MeshColliderCookingOptions.WeldColocatedVertices)
		{
			return default(bool);
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0x1259928", Offset = "0x1259928", VA = "0x1259928", Slot = "5")]
		public void OnBeforePush()
		{
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0x125992C", Offset = "0x125992C", VA = "0x125992C", Slot = "6")]
		public void OnAfterPop()
		{
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0x1259930", Offset = "0x1259930", VA = "0x1259930")]
		public CGMeshResource()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002F4")]
	public class CGMeshResourceCollection : ICGResourceCollection
	{
		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<CGMeshResource> Items;

		[Token(Token = "0x170002F6")]
		public int Count
		{
			[Token(Token = "0x600146D")]
			[Address(RVA = "0x1259938", Offset = "0x1259938", VA = "0x1259938", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002F7")]
		public UnityEngine.Component[] ItemsArray
		{
			[Token(Token = "0x600146E")]
			[Address(RVA = "0x1259980", Offset = "0x1259980", VA = "0x1259980", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0x12599D0", Offset = "0x12599D0", VA = "0x12599D0")]
		public CGMeshResourceCollection()
		{
		}
	}
	[Token(Token = "0x20002F5")]
	[ExecuteInEditMode]
	public class CGModule : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Group("Events", Expanded = false, Sort = 1000)]
		[SerializeField]
		protected CurvyCGEvent m_OnBeforeRefresh;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Group("Events")]
		protected CurvyCGEvent m_OnRefresh;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		[SerializeField]
		private string m_ModuleName;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[HideInInspector]
		private bool m_Active;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[SerializeField]
		[FieldAction("CBSeedOptions", ActionAttribute.ActionEnum.Callback, ShowBelowProperty = true)]
		[GroupCondition("usesRandom")]
		[Group("Seed Options", Expanded = false, Sort = 1001)]
		private bool m_RandomizeSeed;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[HideInInspector]
		private int m_Seed;

		[NonSerialized]
		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<string> UIMessages;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CurvyGenerator mGenerator;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		private int m_UniqueID;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal int SortAncestors;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public CGModuleProperties Properties;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public List<CGModuleLink> InputLinks;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public List<CGModuleLink> OutputLinks;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private ModuleInfoAttribute mInfo;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool mDirty;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		private bool mInitialized;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		private bool mIsConfiguredInternal;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA3")]
		private bool mStateChangeDirty;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool mLastIsConfiguredState;

		[Token(Token = "0x170002F8")]
		public CurvyCGEvent OnBeforeRefresh
		{
			[Token(Token = "0x6001470")]
			[Address(RVA = "0x1259A4C", Offset = "0x1259A4C", VA = "0x1259A4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001471")]
			[Address(RVA = "0x1259A54", Offset = "0x1259A54", VA = "0x1259A54")]
			set
			{
			}
		}

		[Token(Token = "0x170002F9")]
		public CurvyCGEvent OnRefresh
		{
			[Token(Token = "0x6001472")]
			[Address(RVA = "0x1259A68", Offset = "0x1259A68", VA = "0x1259A68")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001473")]
			[Address(RVA = "0x1259A70", Offset = "0x1259A70", VA = "0x1259A70")]
			set
			{
			}
		}

		[Token(Token = "0x170002FA")]
		public string ModuleName
		{
			[Token(Token = "0x6001476")]
			[Address(RVA = "0x1259B3C", Offset = "0x1259B3C", VA = "0x1259B3C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001477")]
			[Address(RVA = "0x1259B44", Offset = "0x1259B44", VA = "0x1259B44")]
			set
			{
			}
		}

		[Token(Token = "0x170002FB")]
		public bool Active
		{
			[Token(Token = "0x6001478")]
			[Address(RVA = "0x1259D74", Offset = "0x1259D74", VA = "0x1259D74")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001479")]
			[Address(RVA = "0x1259D7C", Offset = "0x1259D7C", VA = "0x1259D7C")]
			set
			{
			}
		}

		[Token(Token = "0x170002FC")]
		public int Seed
		{
			[Token(Token = "0x600147A")]
			[Address(RVA = "0x1259EC8", Offset = "0x1259EC8", VA = "0x1259EC8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600147B")]
			[Address(RVA = "0x1259ED0", Offset = "0x1259ED0", VA = "0x1259ED0")]
			set
			{
			}
		}

		[Token(Token = "0x170002FD")]
		public bool RandomizeSeed
		{
			[Token(Token = "0x600147C")]
			[Address(RVA = "0x1259EE8", Offset = "0x1259EE8", VA = "0x1259EE8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600147D")]
			[Address(RVA = "0x1259EF0", Offset = "0x1259EF0", VA = "0x1259EF0")]
			set
			{
			}
		}

		[Token(Token = "0x170002FE")]
		public CurvyGenerator Generator
		{
			[Token(Token = "0x600147E")]
			[Address(RVA = "0x1259F08", Offset = "0x1259F08", VA = "0x1259F08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002FF")]
		public int UniqueID
		{
			[Token(Token = "0x600147F")]
			[Address(RVA = "0x1259F10", Offset = "0x1259F10", VA = "0x1259F10")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000300")]
		public bool CircularReferenceError
		{
			[Token(Token = "0x6001480")]
			[Address(RVA = "0x1259F18", Offset = "0x1259F18", VA = "0x1259F18")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001481")]
			[Address(RVA = "0x1259F20", Offset = "0x1259F20", VA = "0x1259F20")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000301")]
		public Dictionary<string, CGModuleInputSlot> InputByName
		{
			[Token(Token = "0x6001482")]
			[Address(RVA = "0x1259F2C", Offset = "0x1259F2C", VA = "0x1259F2C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001483")]
			[Address(RVA = "0x1259F34", Offset = "0x1259F34", VA = "0x1259F34")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000302")]
		public Dictionary<string, CGModuleOutputSlot> OutputByName
		{
			[Token(Token = "0x6001484")]
			[Address(RVA = "0x1259F3C", Offset = "0x1259F3C", VA = "0x1259F3C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001485")]
			[Address(RVA = "0x1259F44", Offset = "0x1259F44", VA = "0x1259F44")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000303")]
		public List<CGModuleInputSlot> Input
		{
			[Token(Token = "0x6001486")]
			[Address(RVA = "0x1259F4C", Offset = "0x1259F4C", VA = "0x1259F4C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001487")]
			[Address(RVA = "0x1259F54", Offset = "0x1259F54", VA = "0x1259F54")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000304")]
		public List<CGModuleOutputSlot> Output
		{
			[Token(Token = "0x6001488")]
			[Address(RVA = "0x1259F5C", Offset = "0x1259F5C", VA = "0x1259F5C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001489")]
			[Address(RVA = "0x1259F64", Offset = "0x1259F64", VA = "0x1259F64")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000305")]
		public ModuleInfoAttribute Info
		{
			[Token(Token = "0x600148A")]
			[Address(RVA = "0x1259F6C", Offset = "0x1259F6C", VA = "0x1259F6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000306")]
		public bool Dirty
		{
			[Token(Token = "0x600148B")]
			[Address(RVA = "0x125A08C", Offset = "0x125A08C", VA = "0x125A08C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600148C")]
			[Address(RVA = "0x1259DC4", Offset = "0x1259DC4", VA = "0x1259DC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000307")]
		public virtual bool IsConfigured
		{
			[Token(Token = "0x6001493")]
			[Address(RVA = "0x125BF20", Offset = "0x125BF20", VA = "0x125BF20", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000308")]
		public virtual bool IsInitialized
		{
			[Token(Token = "0x6001494")]
			[Address(RVA = "0x125C2F4", Offset = "0x125C2F4", VA = "0x125C2F4", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0x1259A84", Offset = "0x1259A84", VA = "0x1259A84")]
		protected CurvyCGEventArgs OnBeforeRefreshEvent(CurvyCGEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0x1259AE0", Offset = "0x1259AE0", VA = "0x1259AE0")]
		protected CurvyCGEventArgs OnRefreshEvent(CurvyCGEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0x125A250", Offset = "0x125A250", VA = "0x125A250", Slot = "5")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600148E")]
		[Address(RVA = "0x125A334", Offset = "0x125A334", VA = "0x125A334", Slot = "6")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600148F")]
		[Address(RVA = "0x125A3B4", Offset = "0x125A3B4", VA = "0x125A3B4")]
		public void Initialize()
		{
		}

		[Token(Token = "0x6001490")]
		[Address(RVA = "0x125AC20", Offset = "0x125AC20", VA = "0x125AC20", Slot = "7")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001491")]
		[Address(RVA = "0x125AC24", Offset = "0x125AC24", VA = "0x125AC24", Slot = "8")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001492")]
		[Address(RVA = "0x125BF18", Offset = "0x125BF18", VA = "0x125BF18")]
		private void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x6001495")]
		[Address(RVA = "0x125C2FC", Offset = "0x125C2FC", VA = "0x125C2FC", Slot = "11")]
		public virtual void Refresh()
		{
		}

		[Token(Token = "0x6001496")]
		[Address(RVA = "0x125C36C", Offset = "0x125C36C", VA = "0x125C36C", Slot = "12")]
		public virtual void Reset()
		{
		}

		[Token(Token = "0x6001497")]
		[Address(RVA = "0x125C490", Offset = "0x125C490", VA = "0x125C490")]
		public void ReInitializeLinkedSlots()
		{
		}

		[Token(Token = "0x6001498")]
		[Address(RVA = "0x125C5A8", Offset = "0x125C5A8", VA = "0x125C5A8", Slot = "13")]
		public virtual void OnStateChange()
		{
		}

		[Token(Token = "0x6001499")]
		[Address(RVA = "0x125C68C", Offset = "0x125C68C", VA = "0x125C68C", Slot = "14")]
		public virtual void OnTemplateCreated()
		{
		}

		[Token(Token = "0x600149A")]
		protected static T GetRequestParameter<T>(ref CGDataRequestParameter[] requests) where T : CGDataRequestParameter
		{
			return null;
		}

		[Token(Token = "0x600149B")]
		[Address(RVA = "0x125C690", Offset = "0x125C690", VA = "0x125C690")]
		protected static void RemoveRequestParameter(ref CGDataRequestParameter[] requests, CGDataRequestParameter request)
		{
		}

		[Token(Token = "0x600149C")]
		[Address(RVA = "0x125C728", Offset = "0x125C728", VA = "0x125C728")]
		public CGModuleLink GetOutputLink(CGModuleOutputSlot outSlot, CGModuleInputSlot inSlot)
		{
			return null;
		}

		[Token(Token = "0x600149D")]
		[Address(RVA = "0x125C7F8", Offset = "0x125C7F8", VA = "0x125C7F8")]
		public List<CGModuleLink> GetOutputLinks(CGModuleOutputSlot outSlot)
		{
			return null;
		}

		[Token(Token = "0x600149E")]
		[Address(RVA = "0x125C968", Offset = "0x125C968", VA = "0x125C968")]
		public CGModuleLink GetInputLink(CGModuleInputSlot inSlot, CGModuleOutputSlot outSlot)
		{
			return null;
		}

		[Token(Token = "0x600149F")]
		[Address(RVA = "0x125C970", Offset = "0x125C970", VA = "0x125C970")]
		public List<CGModuleLink> GetInputLinks(CGModuleInputSlot inSlot)
		{
			return null;
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0x125C730", Offset = "0x125C730", VA = "0x125C730")]
		private static CGModuleLink GetLink(List<CGModuleLink> lst, CGModuleSlot source, CGModuleSlot target)
		{
			return null;
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0x125C800", Offset = "0x125C800", VA = "0x125C800")]
		private static List<CGModuleLink> GetLinks(List<CGModuleLink> lst, CGModuleSlot source)
		{
			return null;
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0x125CB24", Offset = "0x125CB24", VA = "0x125CB24")]
		public CGModule CopyTo(CurvyGenerator targetGenerator)
		{
			return null;
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0x125CC2C", Offset = "0x125CC2C", VA = "0x125CC2C")]
		public UnityEngine.Component AddManagedResource(string resourceName, string context = "", int index = -1)
		{
			return null;
		}

		[Token(Token = "0x60014A4")]
		[Address(RVA = "0x125B7D0", Offset = "0x125B7D0", VA = "0x125B7D0")]
		public void DeleteManagedResource(string resourceName, UnityEngine.Component res, string context = "", bool dontUsePool = false)
		{
		}

		[Token(Token = "0x60014A5")]
		[Address(RVA = "0x125D588", Offset = "0x125D588", VA = "0x125D588")]
		public bool IsManagedResource(UnityEngine.Component res)
		{
			return default(bool);
		}

		[Token(Token = "0x60014A6")]
		[Address(RVA = "0x125CFD0", Offset = "0x125CFD0", VA = "0x125CFD0")]
		protected void RenameResource(string resourceName, UnityEngine.Component resource, int index = -1)
		{
		}

		[Token(Token = "0x60014A7")]
		[Address(RVA = "0x125D65C", Offset = "0x125D65C", VA = "0x125D65C")]
		protected PrefabPool GetPrefabPool(GameObject prefab)
		{
			return null;
		}

		[Token(Token = "0x60014A8")]
		[Address(RVA = "0x125D844", Offset = "0x125D844", VA = "0x125D844")]
		public List<IPool> GetAllPrefabPools()
		{
			return null;
		}

		[Token(Token = "0x60014A9")]
		[Address(RVA = "0x125D90C", Offset = "0x125D90C", VA = "0x125D90C")]
		public void DeleteAllPrefabPools()
		{
		}

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0x125D9D4", Offset = "0x125D9D4", VA = "0x125D9D4")]
		public void Delete()
		{
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0x125DA6C", Offset = "0x125DA6C", VA = "0x125DA6C")]
		public CGModuleInputSlot GetInputSlot(string name)
		{
			return null;
		}

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0x125B89C", Offset = "0x125B89C", VA = "0x125B89C")]
		public List<CGModuleInputSlot> GetInputSlots([Optional] Type filterType)
		{
			return null;
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0x125DB00", Offset = "0x125DB00", VA = "0x125DB00")]
		public CGModuleOutputSlot GetOutputSlot(string name)
		{
			return null;
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0x125BB18", Offset = "0x125BB18", VA = "0x125BB18")]
		public List<CGModuleOutputSlot> GetOutputSlots([Optional] Type filterType)
		{
			return null;
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0x125B1CC", Offset = "0x125B1CC", VA = "0x125B1CC")]
		public bool GetManagedResources(out List<UnityEngine.Component> components, out List<string> componentNames)
		{
			return default(bool);
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0x125CC00", Offset = "0x125CC00", VA = "0x125CC00")]
		public int SetUniqueIdINTERNAL()
		{
			return default(int);
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0x125DB94", Offset = "0x125DB94", VA = "0x125DB94")]
		internal void initializeSort()
		{
		}

		[Token(Token = "0x60014B2")]
		[Address(RVA = "0x125DD00", Offset = "0x125DD00", VA = "0x125DD00")]
		internal List<CGModule> decrementChilds()
		{
			return null;
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0x125DF04", Offset = "0x125DF04", VA = "0x125DF04")]
		internal void doRefresh()
		{
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0x125E03C", Offset = "0x125E03C", VA = "0x125E03C")]
		private static void setSeed(int seed)
		{
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0x1259F90", Offset = "0x1259F90", VA = "0x1259F90")]
		internal ModuleInfoAttribute getInfo()
		{
			return null;
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0x125E044", Offset = "0x125E044", VA = "0x125E044")]
		private bool usesRandom()
		{
			return default(bool);
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0x125A790", Offset = "0x125A790", VA = "0x125A790")]
		private void loadSlots()
		{
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0x125E078", Offset = "0x125E078", VA = "0x125E078")]
		private SlotInfo getSlotInfo(FieldInfo f)
		{
			return null;
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0x125B038", Offset = "0x125B038", VA = "0x125B038")]
		private void setTreeDirtyStateChange()
		{
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0x125A094", Offset = "0x125A094", VA = "0x125A094")]
		private void setTreeDirtyState()
		{
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0x125A268", Offset = "0x125A268", VA = "0x125A268")]
		private CurvyGenerator RetrieveGenerator()
		{
			return null;
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0x125E5B4", Offset = "0x125E5B4", VA = "0x125E5B4")]
		public void checkOnStateChangedINTERNAL()
		{
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0x1259B98", Offset = "0x1259B98", VA = "0x1259B98")]
		public void renameManagedResourcesINTERNAL()
		{
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0x125E5E4", Offset = "0x125E5E4", VA = "0x125E5E4")]
		public CGModule()
		{
		}
	}
	[Token(Token = "0x20002F6")]
	[AttributeUsage(AttributeTargets.Class)]
	public sealed class ModuleInfoAttribute : Attribute, IComparable
	{
		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string MenuName;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string ModuleName;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string Description;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UsesRandom;

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0x125E7CC", Offset = "0x125E7CC", VA = "0x125E7CC")]
		public ModuleInfoAttribute(string name)
		{
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0x125E7F4", Offset = "0x125E7F4", VA = "0x125E7F4", Slot = "7")]
		public int CompareTo(object obj)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20002F7")]
	public class CGModuleProperties
	{
		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Rect Dimensions;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MinWidth;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float LabelWidth;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color BackgroundColor;

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0x125E7B0", Offset = "0x125E7B0", VA = "0x125E7B0")]
		public CGModuleProperties()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002F8")]
	public class CGModuleLink
	{
		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private int m_ModuleID;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string m_SlotName;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int m_TargetModuleID;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string m_TargetSlotName;

		[Token(Token = "0x17000309")]
		public int ModuleID
		{
			[Token(Token = "0x60014C2")]
			[Address(RVA = "0x125E868", Offset = "0x125E868", VA = "0x125E868")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700030A")]
		public string SlotName
		{
			[Token(Token = "0x60014C3")]
			[Address(RVA = "0x125E870", Offset = "0x125E870", VA = "0x125E870")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030B")]
		public int TargetModuleID
		{
			[Token(Token = "0x60014C4")]
			[Address(RVA = "0x125E878", Offset = "0x125E878", VA = "0x125E878")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700030C")]
		public string TargetSlotName
		{
			[Token(Token = "0x60014C5")]
			[Address(RVA = "0x125E880", Offset = "0x125E880", VA = "0x125E880")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014C6")]
		[Address(RVA = "0x125E888", Offset = "0x125E888", VA = "0x125E888")]
		public CGModuleLink(int sourceID, string sourceSlotName, int targetID, string targetSlotName)
		{
		}

		[Token(Token = "0x60014C7")]
		[Address(RVA = "0x125E8D0", Offset = "0x125E8D0", VA = "0x125E8D0")]
		public CGModuleLink(CGModuleSlot source, CGModuleSlot target)
		{
		}

		[Token(Token = "0x60014C8")]
		[Address(RVA = "0x125E9E4", Offset = "0x125E9E4", VA = "0x125E9E4")]
		public bool IsSame(CGModuleLink o)
		{
			return default(bool);
		}

		[Token(Token = "0x60014C9")]
		[Address(RVA = "0x125C978", Offset = "0x125C978", VA = "0x125C978")]
		public bool IsSame(CGModuleSlot source, CGModuleSlot target)
		{
			return default(bool);
		}

		[Token(Token = "0x60014CA")]
		[Address(RVA = "0x125EA58", Offset = "0x125EA58", VA = "0x125EA58")]
		public bool IsTo(CGModuleSlot s)
		{
			return default(bool);
		}

		[Token(Token = "0x60014CB")]
		[Address(RVA = "0x125CA88", Offset = "0x125CA88", VA = "0x125CA88")]
		public bool IsFrom(CGModuleSlot s)
		{
			return default(bool);
		}

		[Token(Token = "0x60014CC")]
		[Address(RVA = "0x125EAF4", Offset = "0x125EAF4", VA = "0x125EAF4")]
		public bool IsUsing(CGModule module)
		{
			return default(bool);
		}

		[Token(Token = "0x60014CD")]
		[Address(RVA = "0x125EB2C", Offset = "0x125EB2C", VA = "0x125EB2C")]
		public bool IsBetween(CGModuleSlot one, CGModuleSlot another)
		{
			return default(bool);
		}

		[Token(Token = "0x60014CE")]
		[Address(RVA = "0x125EB94", Offset = "0x125EB94", VA = "0x125EB94")]
		public void SetModuleIDIINTERNAL(int moduleID, int targetModuleID)
		{
		}

		[Token(Token = "0x60014CF")]
		[Address(RVA = "0x125EBA0", Offset = "0x125EBA0", VA = "0x125EBA0")]
		public static implicit operator bool(CGModuleLink a)
		{
			return default(bool);
		}

		[Token(Token = "0x60014D0")]
		[Address(RVA = "0x125EBAC", Offset = "0x125EBAC", VA = "0x125EBAC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20002F9")]
	public class CGModuleSlot
	{
		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<CGModuleSlot> mLinkedSlots;

		[Token(Token = "0x1700030D")]
		public CGModule Module
		{
			[Token(Token = "0x60014D1")]
			[Address(RVA = "0x125ED68", Offset = "0x125ED68", VA = "0x125ED68")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014D2")]
			[Address(RVA = "0x125ED70", Offset = "0x125ED70", VA = "0x125ED70")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x1700030E")]
		public SlotInfo Info
		{
			[Token(Token = "0x60014D3")]
			[Address(RVA = "0x125ED78", Offset = "0x125ED78", VA = "0x125ED78")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60014D4")]
			[Address(RVA = "0x125ED80", Offset = "0x125ED80", VA = "0x125ED80")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x1700030F")]
		public Vector2 Origin
		{
			[Token(Token = "0x60014D5")]
			[Address(RVA = "0x125ED88", Offset = "0x125ED88", VA = "0x125ED88")]
			[CompilerGenerated]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x60014D6")]
			[Address(RVA = "0x125ED90", Offset = "0x125ED90", VA = "0x125ED90")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000310")]
		public Rect DropZone
		{
			[Token(Token = "0x60014D7")]
			[Address(RVA = "0x125ED98", Offset = "0x125ED98", VA = "0x125ED98")]
			[CompilerGenerated]
			get
			{
				return default(Rect);
			}
			[Token(Token = "0x60014D8")]
			[Address(RVA = "0x125EDA4", Offset = "0x125EDA4", VA = "0x125EDA4")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000311")]
		public bool IsLinked
		{
			[Token(Token = "0x60014D9")]
			[Address(RVA = "0x125C184", Offset = "0x125C184", VA = "0x125C184")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000312")]
		public bool IsLinkedAndConfigured
		{
			[Token(Token = "0x60014DA")]
			[Address(RVA = "0x125EDB0", Offset = "0x125EDB0", VA = "0x125EDB0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000313")]
		public IOnRequestProcessing OnRequestModule
		{
			[Token(Token = "0x60014DB")]
			[Address(RVA = "0x125EE78", Offset = "0x125EE78", VA = "0x125EE78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000314")]
		public IOnRequestPath OnRequestPathModule
		{
			[Token(Token = "0x60014DC")]
			[Address(RVA = "0x125EEC0", Offset = "0x125EEC0", VA = "0x125EEC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000315")]
		public IPathProvider PathProvider
		{
			[Token(Token = "0x60014DD")]
			[Address(RVA = "0x125EF08", Offset = "0x125EF08", VA = "0x125EF08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000316")]
		public IExternalInput ExternalInput
		{
			[Token(Token = "0x60014DE")]
			[Address(RVA = "0x125EF50", Offset = "0x125EF50", VA = "0x125EF50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000317")]
		public List<CGModuleSlot> LinkedSlots
		{
			[Token(Token = "0x60014DF")]
			[Address(RVA = "0x125DC6C", Offset = "0x125DC6C", VA = "0x125DC6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000318")]
		public int Count
		{
			[Token(Token = "0x60014E0")]
			[Address(RVA = "0x125C2A8", Offset = "0x125C2A8", VA = "0x125C2A8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000319")]
		public string Name
		{
			[Token(Token = "0x60014E1")]
			[Address(RVA = "0x125E990", Offset = "0x125E990", VA = "0x125E990")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014E2")]
		[Address(RVA = "0x125EF98", Offset = "0x125EF98", VA = "0x125EF98")]
		public CGModuleSlot()
		{
		}

		[Token(Token = "0x60014E3")]
		[Address(RVA = "0x125EFA0", Offset = "0x125EFA0", VA = "0x125EFA0")]
		public bool HasLinkTo(CGModuleSlot other)
		{
			return default(bool);
		}

		[Token(Token = "0x60014E4")]
		[Address(RVA = "0x125E464", Offset = "0x125E464", VA = "0x125E464")]
		public List<CGModule> GetLinkedModules()
		{
			return null;
		}

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0x125F054", Offset = "0x125F054", VA = "0x125F054", Slot = "4")]
		public virtual void LinkTo(CGModuleSlot other)
		{
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0x125F12C", Offset = "0x125F12C", VA = "0x125F12C", Slot = "5")]
		public virtual void UnlinkFrom(CGModuleSlot other)
		{
		}

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0x125F204", Offset = "0x125F204", VA = "0x125F204", Slot = "6")]
		public virtual void UnlinkAll()
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0x125C5A0", Offset = "0x125C5A0", VA = "0x125C5A0")]
		public void ReInitializeLinkedSlots()
		{
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0x125BD80", Offset = "0x125BD80", VA = "0x125BD80")]
		public void ReInitializeLinkedTargetModules()
		{
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0x125F208", Offset = "0x125F208", VA = "0x125F208", Slot = "7")]
		protected virtual void LoadLinkedSlots()
		{
		}

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0x125F20C", Offset = "0x125F20C", VA = "0x125F20C")]
		public static implicit operator bool(CGModuleSlot a)
		{
			return default(bool);
		}

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0x125F218", Offset = "0x125F218", VA = "0x125F218", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002FA")]
	public class CGModuleInputSlot : CGModuleSlot
	{
		[Token(Token = "0x1700031A")]
		public InputSlotInfo InputInfo
		{
			[Token(Token = "0x60014ED")]
			[Address(RVA = "0x125C124", Offset = "0x125C124", VA = "0x125C124")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0x125F324", Offset = "0x125F324", VA = "0x125F324")]
		public CGModuleInputSlot()
		{
		}

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0x125F32C", Offset = "0x125F32C", VA = "0x125F32C", Slot = "7")]
		protected override void LoadLinkedSlots()
		{
		}

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0x125F868", Offset = "0x125F868", VA = "0x125F868", Slot = "6")]
		public override void UnlinkAll()
		{
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0x125FA00", Offset = "0x125FA00", VA = "0x125FA00", Slot = "4")]
		public override void LinkTo(CGModuleSlot outputSlot)
		{
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0x125FCC8", Offset = "0x125FCC8", VA = "0x125FCC8", Slot = "5")]
		public override void UnlinkFrom(CGModuleSlot outputSlot)
		{
		}

		[Token(Token = "0x60014F3")]
		[Address(RVA = "0x125C1E4", Offset = "0x125C1E4", VA = "0x125C1E4")]
		public CGModuleOutputSlot SourceSlot(int index = 0)
		{
			return null;
		}

		[Token(Token = "0x60014F4")]
		[Address(RVA = "0x125FE30", Offset = "0x125FE30", VA = "0x125FE30")]
		public bool CanLinkTo(CGModuleOutputSlot source)
		{
			return default(bool);
		}

		[Token(Token = "0x60014F5")]
		[Address(RVA = "0x125FFC0", Offset = "0x125FFC0", VA = "0x125FFC0")]
		public static bool AreInputAndOutputSlotsCompatible(InputSlotInfo inputSlotInfo, bool inputSlotModuleIsOnRequest, OutputSlotInfo outputSlotInfo, bool outputSlotModuleIsOnRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60014F6")]
		[Address(RVA = "0x126014C", Offset = "0x126014C", VA = "0x126014C")]
		private CGModule SourceModule(int index)
		{
			return null;
		}

		[Token(Token = "0x60014F7")]
		public T GetData<T>(params CGDataRequestParameter[] requests) where T : CGData
		{
			return null;
		}

		[Token(Token = "0x60014F8")]
		public List<T> GetAllData<T>(params CGDataRequestParameter[] requests) where T : CGData
		{
			return null;
		}

		[Token(Token = "0x60014F9")]
		private CGData[] GetData<T>(int slotIndex, params CGDataRequestParameter[] requests) where T : CGData
		{
			return null;
		}

		[Token(Token = "0x60014FA")]
		private static CGData[] cloneData<T>(ref CGData[] source) where T : CGData
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20002FB")]
	public class CGModuleOutputSlot : CGModuleSlot
	{
		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CGData[] Data;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CGDataRequestParameter[] LastRequestParameters;

		[Token(Token = "0x1700031B")]
		public OutputSlotInfo OutputInfo
		{
			[Token(Token = "0x60014FB")]
			[Address(RVA = "0x125FF44", Offset = "0x125FF44", VA = "0x125FF44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700031C")]
		public bool HasData
		{
			[Token(Token = "0x6001500")]
			[Address(RVA = "0x1260B20", Offset = "0x1260B20", VA = "0x1260B20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0x12601D0", Offset = "0x12601D0", VA = "0x12601D0")]
		public CGModuleOutputSlot()
		{
		}

		[Token(Token = "0x60014FD")]
		[Address(RVA = "0x1260228", Offset = "0x1260228", VA = "0x1260228", Slot = "7")]
		protected override void LoadLinkedSlots()
		{
		}

		[Token(Token = "0x60014FE")]
		[Address(RVA = "0x12606BC", Offset = "0x12606BC", VA = "0x12606BC", Slot = "4")]
		public override void LinkTo(CGModuleSlot inputSlot)
		{
		}

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0x12609B8", Offset = "0x12609B8", VA = "0x12609B8", Slot = "5")]
		public override void UnlinkFrom(CGModuleSlot inputSlot)
		{
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0x125C63C", Offset = "0x125C63C", VA = "0x125C63C")]
		public void ClearData()
		{
		}

		[Token(Token = "0x6001502")]
		public void SetData<T>(List<T> data) where T : CGData
		{
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0x1260B58", Offset = "0x1260B58", VA = "0x1260B58")]
		public void SetData(params CGData[] data)
		{
		}

		[Token(Token = "0x6001504")]
		public T GetData<T>() where T : CGData
		{
			return null;
		}

		[Token(Token = "0x6001505")]
		public T[] GetAllData<T>() where T : CGData
		{
			return null;
		}
	}
	[Token(Token = "0x20002FC")]
	[AttributeUsage(AttributeTargets.Field)]
	public class SlotInfo : Attribute, IComparable
	{
		[Token(Token = "0x20002FD")]
		public enum SlotArrayType
		{
			[Token(Token = "0x4000EEA")]
			Unknown,
			[Token(Token = "0x4000EEB")]
			Normal,
			[Token(Token = "0x4000EEC")]
			Hidden
		}

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Type[] DataTypes;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Name;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string displayName;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Tooltip;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool Array;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public SlotArrayType ArrayType;

		[Token(Token = "0x1700031D")]
		public string DisplayName
		{
			[Token(Token = "0x6001506")]
			[Address(RVA = "0x1260BC4", Offset = "0x1260BC4", VA = "0x1260BC4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001507")]
			[Address(RVA = "0x1260BDC", Offset = "0x1260BDC", VA = "0x1260BDC")]
			set
			{
			}
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0x1260BE4", Offset = "0x1260BE4", VA = "0x1260BE4")]
		protected SlotInfo(string name, params Type[] type)
		{
		}

		[Token(Token = "0x6001509")]
		[Address(RVA = "0x1260C18", Offset = "0x1260C18", VA = "0x1260C18")]
		protected SlotInfo(params Type[] type)
		{
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0x1260C48", Offset = "0x1260C48", VA = "0x1260C48", Slot = "7")]
		public int CompareTo(object obj)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002FE")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false)]
	public sealed class InputSlotInfo : SlotInfo
	{
		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool RequestDataOnly;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool Optional;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		public bool ModifiesData;

		[Token(Token = "0x600150B")]
		[Address(RVA = "0x1260CD8", Offset = "0x1260CD8", VA = "0x1260CD8")]
		public InputSlotInfo(string name, params Type[] type)
		{
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0x1260D0C", Offset = "0x1260D0C", VA = "0x1260D0C")]
		public InputSlotInfo(params Type[] type)
		{
		}

		[Token(Token = "0x600150D")]
		[Address(RVA = "0x1260058", Offset = "0x1260058", VA = "0x1260058")]
		public bool IsValidFrom(Type outType)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20002FF")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false)]
	public class OutputSlotInfo : SlotInfo
	{
		[Token(Token = "0x1700031E")]
		public Type DataType
		{
			[Token(Token = "0x600150E")]
			[Address(RVA = "0x1260030", Offset = "0x1260030", VA = "0x1260030")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0x1260D3C", Offset = "0x1260D3C", VA = "0x1260D3C")]
		public OutputSlotInfo(Type type)
		{
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0x1260D48", Offset = "0x1260D48", VA = "0x1260D48")]
		public OutputSlotInfo(string name, Type type)
		{
		}
	}
	[Token(Token = "0x2000300")]
	[AttributeUsage(AttributeTargets.Field, AllowMultiple = false)]
	public class ShapeOutputSlotInfo : OutputSlotInfo
	{
		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool OutputsVariableShape;

		[Token(Token = "0x6001511")]
		[Address(RVA = "0x1260DFC", Offset = "0x1260DFC", VA = "0x1260DFC")]
		public ShapeOutputSlotInfo()
		{
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0x1260E04", Offset = "0x1260E04", VA = "0x1260E04")]
		public ShapeOutputSlotInfo(string name)
		{
		}
	}
	[Token(Token = "0x2000301")]
	[AttributeUsage(AttributeTargets.Class)]
	public sealed class ResourceLoaderAttribute : Attribute
	{
		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string ResourceName;

		[Token(Token = "0x6001513")]
		[Address(RVA = "0x1260E90", Offset = "0x1260E90", VA = "0x1260E90")]
		public ResourceLoaderAttribute(string resName)
		{
		}
	}
	[Token(Token = "0x2000302")]
	public static class CGResourceHandler
	{
		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, ICGResourceLoader> Loader;

		[Token(Token = "0x6001514")]
		[Address(RVA = "0x125CDA4", Offset = "0x125CDA4", VA = "0x125CDA4")]
		public static UnityEngine.Component CreateResource(CGModule module, string resName, string context)
		{
			return null;
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0x125D238", Offset = "0x125D238", VA = "0x125D238")]
		public static void DestroyResource(CGModule module, string resName, UnityEngine.Component obj, string context, bool kill)
		{
		}

		[Token(Token = "0x6001516")]
		[Address(RVA = "0x1260EB8", Offset = "0x1260EB8", VA = "0x1260EB8")]
		private static void getLoaders()
		{
		}
	}
	[Token(Token = "0x2000303")]
	[ResourceLoader("Spline")]
	public class CGSplineResourceLoader : ICGResourceLoader
	{
		[Token(Token = "0x6001518")]
		[Address(RVA = "0x12611F4", Offset = "0x12611F4", VA = "0x12611F4", Slot = "4")]
		public UnityEngine.Component Create(CGModule cgModule, string context)
		{
			return null;
		}

		[Token(Token = "0x6001519")]
		[Address(RVA = "0x1261314", Offset = "0x1261314", VA = "0x1261314", Slot = "5")]
		public void Destroy(CGModule cgModule, UnityEngine.Component obj, string context, bool kill)
		{
		}

		[Token(Token = "0x600151A")]
		[Address(RVA = "0x126139C", Offset = "0x126139C", VA = "0x126139C")]
		public CGSplineResourceLoader()
		{
		}
	}
	[Token(Token = "0x2000304")]
	[ResourceLoader("Shape")]
	public class CGShapeResourceLoader : ICGResourceLoader
	{
		[Token(Token = "0x600151B")]
		[Address(RVA = "0x12613A4", Offset = "0x12613A4", VA = "0x12613A4", Slot = "4")]
		public UnityEngine.Component Create(CGModule cgModule, string context)
		{
			return null;
		}

		[Token(Token = "0x600151C")]
		[Address(RVA = "0x12614A0", Offset = "0x12614A0", VA = "0x12614A0", Slot = "5")]
		public void Destroy(CGModule cgModule, UnityEngine.Component obj, string context, bool kill)
		{
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0x1261528", Offset = "0x1261528", VA = "0x1261528")]
		public CGShapeResourceLoader()
		{
		}
	}
	[Token(Token = "0x2000305")]
	[ResourceLoader("Mesh")]
	public class CGMeshResourceLoader : ICGResourceLoader
	{
		[Token(Token = "0x600151E")]
		[Address(RVA = "0x1261530", Offset = "0x1261530", VA = "0x1261530", Slot = "4")]
		public UnityEngine.Component Create(CGModule cgModule, string context)
		{
			return null;
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0x126159C", Offset = "0x126159C", VA = "0x126159C", Slot = "5")]
		public void Destroy(CGModule cgModule, UnityEngine.Component obj, string context, bool kill)
		{
		}

		[Token(Token = "0x6001520")]
		[Address(RVA = "0x1261818", Offset = "0x1261818", VA = "0x1261818")]
		public CGMeshResourceLoader()
		{
		}
	}
	[Token(Token = "0x2000306")]
	[ResourceLoader("GameObject")]
	public class CGGameObjectResourceLoader : ICGResourceLoader
	{
		[Token(Token = "0x6001521")]
		[Address(RVA = "0x1261820", Offset = "0x1261820", VA = "0x1261820", Slot = "4")]
		public UnityEngine.Component Create(CGModule cgModule, string context)
		{
			return null;
		}

		[Token(Token = "0x6001522")]
		[Address(RVA = "0x1261944", Offset = "0x1261944", VA = "0x1261944", Slot = "5")]
		public void Destroy(CGModule cgModule, UnityEngine.Component obj, string context, bool kill)
		{
		}

		[Token(Token = "0x6001523")]
		[Address(RVA = "0x1261AF8", Offset = "0x1261AF8", VA = "0x1261AF8")]
		public CGGameObjectResourceLoader()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000307")]
	public class CGGameObjectResourceCollection : ICGResourceCollection
	{
		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Transform> Items;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<string> PoolNames;

		[Token(Token = "0x1700031F")]
		public int Count
		{
			[Token(Token = "0x6001524")]
			[Address(RVA = "0x1261B00", Offset = "0x1261B00", VA = "0x1261B00", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000320")]
		public UnityEngine.Component[] ItemsArray
		{
			[Token(Token = "0x6001525")]
			[Address(RVA = "0x1261B48", Offset = "0x1261B48", VA = "0x1261B48", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001526")]
		[Address(RVA = "0x1261B98", Offset = "0x1261B98", VA = "0x1261B98")]
		public CGGameObjectResourceCollection()
		{
		}
	}
	[Token(Token = "0x2000308")]
	public static class CGUtility
	{
		[Token(Token = "0x6001527")]
		[Address(RVA = "0x1261C58", Offset = "0x1261C58", VA = "0x1261C58")]
		public static Vector2[] CalculateUV2(Vector2[] uv)
		{
			return null;
		}

		[Token(Token = "0x6001528")]
		[Address(RVA = "0x1261D38", Offset = "0x1261D38", VA = "0x1261D38")]
		public static List<ControlPointOption> GetControlPointsWithOptions(CGDataRequestMetaCGOptions options, CurvySpline shape, float startDist, float endDist, bool optimize, out int initialMaterialID, out float initialMaxStep)
		{
			return null;
		}
	}
	[Token(Token = "0x2000309")]
	[HelpURL("https://curvyeditor.com/doclink/generator")]
	[AddComponentMenu("Curvy/Generator", 3)]
	[ExecuteInEditMode]
	[RequireComponent(typeof(PoolManager))]
	public class CurvyGenerator : DTVersionedMonoBehaviour
	{
		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("Show Debug Output?")]
		private bool m_ShowDebug;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("Whether to automatically refresh the generator's output when necessary")]
		[SerializeField]
		private bool m_AutoRefresh;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[FieldCondition("m_AutoRefresh", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		[Positive(Tooltip = "The minimum delay between two automatic generator's refreshing while in Play mode, in milliseconds")]
		[SerializeField]
		private int m_RefreshDelay;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[FieldCondition("m_AutoRefresh", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		[Positive(Tooltip = "The minimum delay between two automatic generator's refreshing while in Edit mode, in milliseconds")]
		[SerializeField]
		private int m_RefreshDelayEditor;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Section("Events", false, false, 1000, HelpURL = "https://curvyeditor.com/doclink/generator_events")]
		[SerializeField]
		protected CurvyCGEvent m_OnRefresh;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public List<CGModule> Modules;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		internal int m_LastModuleID;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Dictionary<int, CGModule> ModulesByID;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool mInitialized;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool mInitializedPhaseOne;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		private bool mNeedSort;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private double mLastUpdateTime;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PoolManager mPoolManager;

		[Token(Token = "0x4000F03")]
		private const int ModulesReorderingDeltaX = 50;

		[Token(Token = "0x4000F04")]
		private const int ModulesReorderingDeltaY = 20;

		[Token(Token = "0x17000321")]
		public bool ShowDebug
		{
			[Token(Token = "0x6001529")]
			[Address(RVA = "0x126243C", Offset = "0x126243C", VA = "0x126243C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600152A")]
			[Address(RVA = "0x1262444", Offset = "0x1262444", VA = "0x1262444")]
			set
			{
			}
		}

		[Token(Token = "0x17000322")]
		public bool AutoRefresh
		{
			[Token(Token = "0x600152B")]
			[Address(RVA = "0x126245C", Offset = "0x126245C", VA = "0x126245C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600152C")]
			[Address(RVA = "0x1262464", Offset = "0x1262464", VA = "0x1262464")]
			set
			{
			}
		}

		[Token(Token = "0x17000323")]
		public int RefreshDelay
		{
			[Token(Token = "0x600152D")]
			[Address(RVA = "0x126247C", Offset = "0x126247C", VA = "0x126247C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600152E")]
			[Address(RVA = "0x1262484", Offset = "0x1262484", VA = "0x1262484")]
			set
			{
			}
		}

		[Token(Token = "0x17000324")]
		public int RefreshDelayEditor
		{
			[Token(Token = "0x600152F")]
			[Address(RVA = "0x126249C", Offset = "0x126249C", VA = "0x126249C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001530")]
			[Address(RVA = "0x12624A4", Offset = "0x12624A4", VA = "0x12624A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000325")]
		public PoolManager PoolManager
		{
			[Token(Token = "0x6001531")]
			[Address(RVA = "0x125D7B0", Offset = "0x125D7B0", VA = "0x125D7B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000326")]
		public CurvyCGEvent OnRefresh
		{
			[Token(Token = "0x6001532")]
			[Address(RVA = "0x12624BC", Offset = "0x12624BC", VA = "0x12624BC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001533")]
			[Address(RVA = "0x12624C4", Offset = "0x12624C4", VA = "0x12624C4")]
			set
			{
			}
		}

		[Token(Token = "0x17000327")]
		public bool IsInitialized
		{
			[Token(Token = "0x6001534")]
			[Address(RVA = "0x12624D8", Offset = "0x12624D8", VA = "0x12624D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000328")]
		public bool Destroying
		{
			[Token(Token = "0x6001535")]
			[Address(RVA = "0x12624E0", Offset = "0x12624E0", VA = "0x12624E0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001536")]
			[Address(RVA = "0x12624E8", Offset = "0x12624E8", VA = "0x12624E8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001537")]
		[Address(RVA = "0x12624F4", Offset = "0x12624F4", VA = "0x12624F4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001538")]
		[Address(RVA = "0x1262514", Offset = "0x1262514", VA = "0x1262514")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0x1262524", Offset = "0x1262524", VA = "0x1262524")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600153A")]
		[Address(RVA = "0x1262530", Offset = "0x1262530", VA = "0x1262530")]
		private void Update()
		{
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0x12629C8", Offset = "0x12629C8", VA = "0x12629C8")]
		public static CurvyGenerator Create()
		{
			return null;
		}

		[Token(Token = "0x600153C")]
		public T AddModule<T>() where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x600153D")]
		[Address(RVA = "0x1262B0C", Offset = "0x1262B0C", VA = "0x1262B0C")]
		public CGModule AddModule(Type type)
		{
			return null;
		}

		[Token(Token = "0x600153E")]
		[Address(RVA = "0x1262CD8", Offset = "0x1262CD8", VA = "0x1262CD8")]
		public void ArrangeModules()
		{
		}

		[Token(Token = "0x600153F")]
		[Address(RVA = "0x1262FA8", Offset = "0x1262FA8", VA = "0x1262FA8")]
		public void ReorderModules()
		{
		}

		[Token(Token = "0x6001540")]
		[Address(RVA = "0x1263DA8", Offset = "0x1263DA8", VA = "0x1263DA8")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001541")]
		[Address(RVA = "0x1263EE4", Offset = "0x1263EE4", VA = "0x1263EE4")]
		public void DeleteModule(CGModule module)
		{
		}

		[Token(Token = "0x6001542")]
		public List<T> FindModules<T>(bool includeOnRequestProcessing = false) where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6001543")]
		[Address(RVA = "0x1263F5C", Offset = "0x1263F5C", VA = "0x1263F5C")]
		public List<CGModule> GetModules(bool includeOnRequestProcessing = false)
		{
			return null;
		}

		[Token(Token = "0x6001544")]
		[Address(RVA = "0x125F7C0", Offset = "0x125F7C0", VA = "0x125F7C0")]
		public CGModule GetModule(int moduleID, bool includeOnRequestProcessing = false)
		{
			return null;
		}

		[Token(Token = "0x6001545")]
		public T GetModule<T>(int moduleID, bool includeOnRequestProcessing = false) where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6001546")]
		[Address(RVA = "0x1264110", Offset = "0x1264110", VA = "0x1264110")]
		public CGModule GetModule(string moduleName, bool includeOnRequestProcessing = false)
		{
			return null;
		}

		[Token(Token = "0x6001547")]
		public T GetModule<T>(string moduleName, bool includeOnRequestProcessing = false) where T : CGModule
		{
			return null;
		}

		[Token(Token = "0x6001548")]
		[Address(RVA = "0x1264230", Offset = "0x1264230", VA = "0x1264230")]
		public CGModuleOutputSlot GetModuleOutputSlot(int moduleId, string slotName)
		{
			return null;
		}

		[Token(Token = "0x6001549")]
		[Address(RVA = "0x12642DC", Offset = "0x12642DC", VA = "0x12642DC")]
		public CGModuleOutputSlot GetModuleOutputSlot(string moduleName, string slotName)
		{
			return null;
		}

		[Token(Token = "0x600154A")]
		[Address(RVA = "0x1262544", Offset = "0x1262544", VA = "0x1262544")]
		public void Initialize(bool force = false)
		{
		}

		[Token(Token = "0x600154B")]
		[Address(RVA = "0x1264388", Offset = "0x1264388", VA = "0x1264388")]
		public void Refresh(bool forceUpdate = false)
		{
		}

		[Token(Token = "0x600154C")]
		[Address(RVA = "0x1262958", Offset = "0x1262958", VA = "0x1262958")]
		public void TryAutoRefresh()
		{
		}

		[Token(Token = "0x600154D")]
		[Address(RVA = "0x1264E18", Offset = "0x1264E18", VA = "0x1264E18")]
		protected CurvyCGEventArgs OnRefreshEvent(CurvyCGEventArgs e)
		{
			return null;
		}

		[Token(Token = "0x600154E")]
		[Address(RVA = "0x1263DAC", Offset = "0x1263DAC", VA = "0x1263DAC")]
		private void clearModules()
		{
		}

		[Token(Token = "0x600154F")]
		[Address(RVA = "0x125A578", Offset = "0x125A578", VA = "0x125A578")]
		public string getUniqueModuleNameINTERNAL(string name)
		{
			return null;
		}

		[Token(Token = "0x6001550")]
		[Address(RVA = "0x1259EBC", Offset = "0x1259EBC", VA = "0x1259EBC")]
		internal void sortModulesINTERNAL()
		{
		}

		[Token(Token = "0x6001551")]
		[Address(RVA = "0x12649A4", Offset = "0x12649A4", VA = "0x12649A4")]
		private bool doSortModules()
		{
			return default(bool);
		}

		[Token(Token = "0x6001552")]
		[Address(RVA = "0x1263878", Offset = "0x1263878", VA = "0x1263878")]
		private static void ReorderEndpointRecursiveInputs(CGModule endPoint, HashSet<int> reordredModuleIds, Dictionary<CGModule, HashSet<CGModule>> modulesRecursiveInputs)
		{
		}

		[Token(Token = "0x6001553")]
		[Address(RVA = "0x126358C", Offset = "0x126358C", VA = "0x126358C")]
		private static HashSet<CGModule> UpdateModulesRecursiveInputs(Dictionary<CGModule, HashSet<CGModule>> modulesRecursiveInputs, CGModule moduleToAdd)
		{
			return null;
		}

		[Token(Token = "0x6001554")]
		[Address(RVA = "0x1264E7C", Offset = "0x1264E7C", VA = "0x1264E7C")]
		public CurvyGenerator()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Generator.Modules
{
	[Token(Token = "0x200030C")]
	[ModuleInfo("Build/Rasterize Path", ModuleName = "Rasterize Path", Description = "Rasterizes a virtual path")]
	[HelpURL("https://curvyeditor.com/doclink/cgbuildrasterizedpath")]
	public class BuildRasterizedPath : CGModule, IPathProvider
	{
		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGPath) }, Name = "Path", RequestDataOnly = true)]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[OutputSlotInfo(typeof(CGPath), Name = "Path", DisplayName = "Rasterized Path")]
		[HideInInspector]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[FloatRegion(UseSlider = true, RegionOptionsPropertyName = "RangeOptions", Precision = 4)]
		private FloatRegion m_Range;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[RangeEx(1f, 100f, "Resolution", "Defines how densely the path spline's sampling points are. When the value is 100, the number of sampling points per world distance unit is equal to the spline's Max Points Per Unit")]
		[SerializeField]
		private int m_Resolution;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private bool m_Optimize;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[RangeEx(0.1f, 120f, "", "")]
		[SerializeField]
		[FieldCondition("m_Optimize", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		private float m_AngleTreshold;

		[Token(Token = "0x17000329")]
		public float From
		{
			[Token(Token = "0x600155F")]
			[Address(RVA = "0x126515C", Offset = "0x126515C", VA = "0x126515C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001560")]
			[Address(RVA = "0x1265164", Offset = "0x1265164", VA = "0x1265164")]
			set
			{
			}
		}

		[Token(Token = "0x1700032A")]
		public float To
		{
			[Token(Token = "0x6001561")]
			[Address(RVA = "0x1265198", Offset = "0x1265198", VA = "0x1265198")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001562")]
			[Address(RVA = "0x12651A0", Offset = "0x12651A0", VA = "0x12651A0")]
			set
			{
			}
		}

		[Token(Token = "0x1700032B")]
		public float Length
		{
			[Token(Token = "0x6001563")]
			[Address(RVA = "0x12652E0", Offset = "0x12652E0", VA = "0x12652E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001564")]
			[Address(RVA = "0x1265304", Offset = "0x1265304", VA = "0x1265304")]
			set
			{
			}
		}

		[Token(Token = "0x1700032C")]
		public int Resolution
		{
			[Token(Token = "0x6001565")]
			[Address(RVA = "0x1265348", Offset = "0x1265348", VA = "0x1265348")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001566")]
			[Address(RVA = "0x1265350", Offset = "0x1265350", VA = "0x1265350")]
			set
			{
			}
		}

		[Token(Token = "0x1700032D")]
		public bool Optimize
		{
			[Token(Token = "0x6001567")]
			[Address(RVA = "0x126537C", Offset = "0x126537C", VA = "0x126537C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001568")]
			[Address(RVA = "0x1265384", Offset = "0x1265384", VA = "0x1265384")]
			set
			{
			}
		}

		[Token(Token = "0x1700032E")]
		public float AngleThreshold
		{
			[Token(Token = "0x6001569")]
			[Address(RVA = "0x12653A0", Offset = "0x12653A0", VA = "0x12653A0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600156A")]
			[Address(RVA = "0x12653A8", Offset = "0x12653A8", VA = "0x12653A8")]
			set
			{
			}
		}

		[Token(Token = "0x1700032F")]
		public CGPath Path
		{
			[Token(Token = "0x600156B")]
			[Address(RVA = "0x12653DC", Offset = "0x12653DC", VA = "0x12653DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000330")]
		public bool PathIsClosed
		{
			[Token(Token = "0x600156C")]
			[Address(RVA = "0x1265204", Offset = "0x1265204", VA = "0x1265204", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000331")]
		private RegionOptions<float> RangeOptions
		{
			[Token(Token = "0x600156D")]
			[Address(RVA = "0x126542C", Offset = "0x126542C", VA = "0x126542C")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x600156E")]
		[Address(RVA = "0x12654FC", Offset = "0x12654FC", VA = "0x12654FC", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600156F")]
		[Address(RVA = "0x1265528", Offset = "0x1265528", VA = "0x1265528", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001570")]
		[Address(RVA = "0x12655B4", Offset = "0x12655B4", VA = "0x12655B4", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6001571")]
		[Address(RVA = "0x126583C", Offset = "0x126583C", VA = "0x126583C")]
		public BuildRasterizedPath()
		{
		}
	}
	[Token(Token = "0x200030D")]
	[ModuleInfo("Build/Shape Extrusion", ModuleName = "Shape Extrusion", Description = "Simple Shape Extrusion")]
	[HelpURL("https://curvyeditor.com/doclink/cgbuildshapeextrusion")]
	public class BuildShapeExtrusion : CGModule, IPathProvider
	{
		[Token(Token = "0x200030E")]
		public enum ScaleModeEnum
		{
			[Token(Token = "0x4000F35")]
			Simple,
			[Token(Token = "0x4000F36")]
			Advanced
		}

		[Token(Token = "0x200030F")]
		public enum CrossShiftModeEnum
		{
			[Token(Token = "0x4000F38")]
			None,
			[Token(Token = "0x4000F39")]
			ByOrientation,
			[Token(Token = "0x4000F3A")]
			Custom
		}

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGPath) }, RequestDataOnly = true)]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGShape) }, Array = true, ArrayType = SlotInfo.SlotArrayType.Hidden, RequestDataOnly = true)]
		public CGModuleInputSlot InCross;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[OutputSlotInfo(typeof(CGVolume))]
		[HideInInspector]
		public CGModuleOutputSlot OutVolume;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[HideInInspector]
		[OutputSlotInfo(typeof(CGVolume))]
		public CGModuleOutputSlot OutVolumeHollow;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tab("Path")]
		[FloatRegion(UseSlider = true, RegionOptionsPropertyName = "RangeOptions", Precision = 4)]
		[SerializeField]
		private FloatRegion m_Range;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[SerializeField]
		[RangeEx(1f, 100f, "Resolution", "Defines how densely the path spline's sampling points are. When the value is 100, the number of sampling points per world distance unit is equal to the spline's Max Points Per Unit")]
		private int m_Resolution;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private bool m_Optimize;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[FieldCondition("m_Optimize", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		[SerializeField]
		[RangeEx(0.1f, 120f, "", "", Tooltip = "Max angle")]
		private float m_AngleThreshold;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		[FloatRegion(UseSlider = true, RegionOptionsPropertyName = "CrossRangeOptions", Precision = 4)]
		[FieldAction("CBEditCrossButton", ActionAttribute.ActionEnum.Callback, Position = ActionAttribute.ActionPositionEnum.Above)]
		[Tab("Cross")]
		private FloatRegion m_CrossRange;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		[RangeEx(1f, 100f, "Resolution", "", Tooltip = "Defines how densely the cross spline's sampling points are. When the value is 100, the number of sampling points per world distance unit is equal to the spline's Max Points Per Unit")]
		private int m_CrossResolution;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Label("Optimize", "")]
		[SerializeField]
		private bool m_CrossOptimize;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		[RangeEx(0.1f, 120f, "Angle Threshold", "", Tooltip = "Max angle")]
		[FieldCondition("m_CrossOptimize", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		private float m_CrossAngleThreshold;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[Label("Include CP", "")]
		private bool m_CrossIncludeControlpoints;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		[Label("Hard Edges", "")]
		[SerializeField]
		private bool m_CrossHardEdges;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFA")]
		[SerializeField]
		[Label("Materials", "")]
		private bool m_CrossMaterials;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFB")]
		[Label("Extended UV", "")]
		[SerializeField]
		private bool m_CrossExtendedUV;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Label("Shift", "", Tooltip = "Defines a shift to be applied on the output volume's cross.\r\nThis shift is used when interpolating values (position, normal, ...) along the volume's surface.")]
		[SerializeField]
		private CrossShiftModeEnum m_CrossShiftMode;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[RangeEx(0f, 1f, "Value", "Shift By", Slider = true)]
		[SerializeField]
		[FieldCondition("m_CrossShiftMode", CrossShiftModeEnum.Custom, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		private float m_CrossShiftValue;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[Label("Reverse Normal", "Reverse Vertex Normals?")]
		[SerializeField]
		private bool m_CrossReverseNormals;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tab("Scale")]
		[SerializeField]
		[Label("Mode", "")]
		private ScaleModeEnum m_ScaleMode;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[SerializeField]
		[Label("Reference", "")]
		[FieldCondition("m_ScaleMode", ScaleModeEnum.Advanced, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		private CGReferenceMode m_ScaleReference;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		[Label("Offset", "")]
		[FieldCondition("m_ScaleMode", ScaleModeEnum.Advanced, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		private float m_ScaleOffset;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[SerializeField]
		[Label("Uniform", "", Tooltip = "Use a single curve")]
		private bool m_ScaleUniform;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private float m_ScaleX;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		[FieldCondition("m_ScaleUniform", false, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		private float m_ScaleY;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[FieldCondition("m_ScaleMode", ScaleModeEnum.Advanced, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		[AnimationCurveEx("Multiplier X", "")]
		[Tooltip("Defines scale multiplier depending on the TF, the relative position of a point on the path")]
		private AnimationCurve m_ScaleCurveX;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Tooltip("Defines scale multiplier depending on the TF, the relative position of a point on the path")]
		[SerializeField]
		[AnimationCurveEx("Multiplier Y", "")]
		[FieldCondition("m_ScaleUniform", false, false, FluffyUnderware.DevTools.ConditionalAttribute.OperatorEnum.AND, "m_ScaleMode", ScaleModeEnum.Advanced, false)]
		private AnimationCurve m_ScaleCurveY;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Tab("Hollow")]
		[RangeEx(0f, 1f, "", "", Slider = true, Label = "Inset")]
		[SerializeField]
		private float m_HollowInset;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[Label("Reverse Normal", "Reverse Vertex Normals?")]
		[SerializeField]
		private bool m_HollowReverseNormals;

		[Token(Token = "0x17000332")]
		public float From
		{
			[Token(Token = "0x6001572")]
			[Address(RVA = "0x12658E8", Offset = "0x12658E8", VA = "0x12658E8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001573")]
			[Address(RVA = "0x12658F0", Offset = "0x12658F0", VA = "0x12658F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000333")]
		public float To
		{
			[Token(Token = "0x6001574")]
			[Address(RVA = "0x1265924", Offset = "0x1265924", VA = "0x1265924")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001575")]
			[Address(RVA = "0x126592C", Offset = "0x126592C", VA = "0x126592C")]
			set
			{
			}
		}

		[Token(Token = "0x17000334")]
		public float Length
		{
			[Token(Token = "0x6001576")]
			[Address(RVA = "0x1265A64", Offset = "0x1265A64", VA = "0x1265A64")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001577")]
			[Address(RVA = "0x1265A88", Offset = "0x1265A88", VA = "0x1265A88")]
			set
			{
			}
		}

		[Token(Token = "0x17000335")]
		public int Resolution
		{
			[Token(Token = "0x6001578")]
			[Address(RVA = "0x1265ACC", Offset = "0x1265ACC", VA = "0x1265ACC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001579")]
			[Address(RVA = "0x1265AD4", Offset = "0x1265AD4", VA = "0x1265AD4")]
			set
			{
			}
		}

		[Token(Token = "0x17000336")]
		public bool Optimize
		{
			[Token(Token = "0x600157A")]
			[Address(RVA = "0x1265B00", Offset = "0x1265B00", VA = "0x1265B00")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600157B")]
			[Address(RVA = "0x1265B08", Offset = "0x1265B08", VA = "0x1265B08")]
			set
			{
			}
		}

		[Token(Token = "0x17000337")]
		public float AngleThreshold
		{
			[Token(Token = "0x600157C")]
			[Address(RVA = "0x1265B24", Offset = "0x1265B24", VA = "0x1265B24")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600157D")]
			[Address(RVA = "0x1265B2C", Offset = "0x1265B2C", VA = "0x1265B2C")]
			set
			{
			}
		}

		[Token(Token = "0x17000338")]
		public float CrossFrom
		{
			[Token(Token = "0x600157E")]
			[Address(RVA = "0x1265B60", Offset = "0x1265B60", VA = "0x1265B60")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600157F")]
			[Address(RVA = "0x1265B68", Offset = "0x1265B68", VA = "0x1265B68")]
			set
			{
			}
		}

		[Token(Token = "0x17000339")]
		public float CrossTo
		{
			[Token(Token = "0x6001580")]
			[Address(RVA = "0x1265B9C", Offset = "0x1265B9C", VA = "0x1265B9C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001581")]
			[Address(RVA = "0x1265BA4", Offset = "0x1265BA4", VA = "0x1265BA4")]
			set
			{
			}
		}

		[Token(Token = "0x1700033A")]
		public float CrossLength
		{
			[Token(Token = "0x6001582")]
			[Address(RVA = "0x1265CDC", Offset = "0x1265CDC", VA = "0x1265CDC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001583")]
			[Address(RVA = "0x1265D00", Offset = "0x1265D00", VA = "0x1265D00")]
			set
			{
			}
		}

		[Token(Token = "0x1700033B")]
		public int CrossResolution
		{
			[Token(Token = "0x6001584")]
			[Address(RVA = "0x1265D44", Offset = "0x1265D44", VA = "0x1265D44")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001585")]
			[Address(RVA = "0x1265D4C", Offset = "0x1265D4C", VA = "0x1265D4C")]
			set
			{
			}
		}

		[Token(Token = "0x1700033C")]
		public bool CrossOptimize
		{
			[Token(Token = "0x6001586")]
			[Address(RVA = "0x1265D78", Offset = "0x1265D78", VA = "0x1265D78")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001587")]
			[Address(RVA = "0x1265D80", Offset = "0x1265D80", VA = "0x1265D80")]
			set
			{
			}
		}

		[Token(Token = "0x1700033D")]
		public float CrossAngleThreshold
		{
			[Token(Token = "0x6001588")]
			[Address(RVA = "0x1265D9C", Offset = "0x1265D9C", VA = "0x1265D9C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001589")]
			[Address(RVA = "0x1265DA4", Offset = "0x1265DA4", VA = "0x1265DA4")]
			set
			{
			}
		}

		[Token(Token = "0x1700033E")]
		public bool CrossIncludeControlPoints
		{
			[Token(Token = "0x600158A")]
			[Address(RVA = "0x1265DD8", Offset = "0x1265DD8", VA = "0x1265DD8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600158B")]
			[Address(RVA = "0x1265DE0", Offset = "0x1265DE0", VA = "0x1265DE0")]
			set
			{
			}
		}

		[Token(Token = "0x1700033F")]
		public bool CrossHardEdges
		{
			[Token(Token = "0x600158C")]
			[Address(RVA = "0x1265DFC", Offset = "0x1265DFC", VA = "0x1265DFC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600158D")]
			[Address(RVA = "0x1265E04", Offset = "0x1265E04", VA = "0x1265E04")]
			set
			{
			}
		}

		[Token(Token = "0x17000340")]
		public bool CrossMaterials
		{
			[Token(Token = "0x600158E")]
			[Address(RVA = "0x1265E20", Offset = "0x1265E20", VA = "0x1265E20")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600158F")]
			[Address(RVA = "0x1265E28", Offset = "0x1265E28", VA = "0x1265E28")]
			set
			{
			}
		}

		[Token(Token = "0x17000341")]
		public bool CrossExtendedUV
		{
			[Token(Token = "0x6001590")]
			[Address(RVA = "0x1265E44", Offset = "0x1265E44", VA = "0x1265E44")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001591")]
			[Address(RVA = "0x1265E4C", Offset = "0x1265E4C", VA = "0x1265E4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000342")]
		public CrossShiftModeEnum CrossShiftMode
		{
			[Token(Token = "0x6001592")]
			[Address(RVA = "0x1265E68", Offset = "0x1265E68", VA = "0x1265E68")]
			get
			{
				return default(CrossShiftModeEnum);
			}
			[Token(Token = "0x6001593")]
			[Address(RVA = "0x1265E70", Offset = "0x1265E70", VA = "0x1265E70")]
			set
			{
			}
		}

		[Token(Token = "0x17000343")]
		public float CrossShiftValue
		{
			[Token(Token = "0x6001594")]
			[Address(RVA = "0x1265E88", Offset = "0x1265E88", VA = "0x1265E88")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001595")]
			[Address(RVA = "0x1265E90", Offset = "0x1265E90", VA = "0x1265E90")]
			set
			{
			}
		}

		[Token(Token = "0x17000344")]
		public bool CrossReverseNormals
		{
			[Token(Token = "0x6001596")]
			[Address(RVA = "0x1265EC4", Offset = "0x1265EC4", VA = "0x1265EC4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001597")]
			[Address(RVA = "0x1265ECC", Offset = "0x1265ECC", VA = "0x1265ECC")]
			set
			{
			}
		}

		[Token(Token = "0x17000345")]
		public ScaleModeEnum ScaleMode
		{
			[Token(Token = "0x6001598")]
			[Address(RVA = "0x1265EE8", Offset = "0x1265EE8", VA = "0x1265EE8")]
			get
			{
				return default(ScaleModeEnum);
			}
			[Token(Token = "0x6001599")]
			[Address(RVA = "0x1265EF0", Offset = "0x1265EF0", VA = "0x1265EF0")]
			set
			{
			}
		}

		[Token(Token = "0x17000346")]
		public CGReferenceMode ScaleReference
		{
			[Token(Token = "0x600159A")]
			[Address(RVA = "0x1265F08", Offset = "0x1265F08", VA = "0x1265F08")]
			get
			{
				return default(CGReferenceMode);
			}
			[Token(Token = "0x600159B")]
			[Address(RVA = "0x1265F10", Offset = "0x1265F10", VA = "0x1265F10")]
			set
			{
			}
		}

		[Token(Token = "0x17000347")]
		public bool ScaleUniform
		{
			[Token(Token = "0x600159C")]
			[Address(RVA = "0x1265F28", Offset = "0x1265F28", VA = "0x1265F28")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600159D")]
			[Address(RVA = "0x1265F30", Offset = "0x1265F30", VA = "0x1265F30")]
			set
			{
			}
		}

		[Token(Token = "0x17000348")]
		public float ScaleOffset
		{
			[Token(Token = "0x600159E")]
			[Address(RVA = "0x1265F4C", Offset = "0x1265F4C", VA = "0x1265F4C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600159F")]
			[Address(RVA = "0x1265F54", Offset = "0x1265F54", VA = "0x1265F54")]
			set
			{
			}
		}

		[Token(Token = "0x17000349")]
		public float ScaleX
		{
			[Token(Token = "0x60015A0")]
			[Address(RVA = "0x1265F6C", Offset = "0x1265F6C", VA = "0x1265F6C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015A1")]
			[Address(RVA = "0x1265F74", Offset = "0x1265F74", VA = "0x1265F74")]
			set
			{
			}
		}

		[Token(Token = "0x1700034A")]
		public float ScaleY
		{
			[Token(Token = "0x60015A2")]
			[Address(RVA = "0x1265F8C", Offset = "0x1265F8C", VA = "0x1265F8C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015A3")]
			[Address(RVA = "0x1265F94", Offset = "0x1265F94", VA = "0x1265F94")]
			set
			{
			}
		}

		[Token(Token = "0x1700034B")]
		public AnimationCurve ScaleMultiplierX
		{
			[Token(Token = "0x60015A4")]
			[Address(RVA = "0x1265FAC", Offset = "0x1265FAC", VA = "0x1265FAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015A5")]
			[Address(RVA = "0x1265FB4", Offset = "0x1265FB4", VA = "0x1265FB4")]
			set
			{
			}
		}

		[Token(Token = "0x1700034C")]
		public AnimationCurve ScaleMultiplierY
		{
			[Token(Token = "0x60015A6")]
			[Address(RVA = "0x1265FCC", Offset = "0x1265FCC", VA = "0x1265FCC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015A7")]
			[Address(RVA = "0x1265FD4", Offset = "0x1265FD4", VA = "0x1265FD4")]
			set
			{
			}
		}

		[Token(Token = "0x1700034D")]
		public float HollowInset
		{
			[Token(Token = "0x60015A8")]
			[Address(RVA = "0x1265FEC", Offset = "0x1265FEC", VA = "0x1265FEC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015A9")]
			[Address(RVA = "0x1265FF4", Offset = "0x1265FF4", VA = "0x1265FF4")]
			set
			{
			}
		}

		[Token(Token = "0x1700034E")]
		public bool HollowReverseNormals
		{
			[Token(Token = "0x60015AA")]
			[Address(RVA = "0x1266020", Offset = "0x1266020", VA = "0x1266020")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015AB")]
			[Address(RVA = "0x1266028", Offset = "0x1266028", VA = "0x1266028")]
			set
			{
			}
		}

		[Token(Token = "0x1700034F")]
		public int PathSamples
		{
			[Token(Token = "0x60015AC")]
			[Address(RVA = "0x1266044", Offset = "0x1266044", VA = "0x1266044")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60015AD")]
			[Address(RVA = "0x126604C", Offset = "0x126604C", VA = "0x126604C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000350")]
		public int CrossSamples
		{
			[Token(Token = "0x60015AE")]
			[Address(RVA = "0x1266054", Offset = "0x1266054", VA = "0x1266054")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60015AF")]
			[Address(RVA = "0x126605C", Offset = "0x126605C", VA = "0x126605C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000351")]
		public int CrossGroups
		{
			[Token(Token = "0x60015B0")]
			[Address(RVA = "0x1266064", Offset = "0x1266064", VA = "0x1266064")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60015B1")]
			[Address(RVA = "0x126606C", Offset = "0x126606C", VA = "0x126606C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000352")]
		public IExternalInput Cross
		{
			[Token(Token = "0x60015B2")]
			[Address(RVA = "0x1266074", Offset = "0x1266074", VA = "0x1266074")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000353")]
		public Vector3 CrossPosition
		{
			[Token(Token = "0x60015B3")]
			[Address(RVA = "0x12660B8", Offset = "0x12660B8", VA = "0x12660B8")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60015B4")]
			[Address(RVA = "0x12660C8", Offset = "0x12660C8", VA = "0x12660C8")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000354")]
		public Quaternion CrossRotation
		{
			[Token(Token = "0x60015B5")]
			[Address(RVA = "0x12660D8", Offset = "0x12660D8", VA = "0x12660D8")]
			[CompilerGenerated]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x60015B6")]
			[Address(RVA = "0x12660EC", Offset = "0x12660EC", VA = "0x12660EC")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000355")]
		public bool PathIsClosed
		{
			[Token(Token = "0x60015B7")]
			[Address(RVA = "0x1266100", Offset = "0x1266100", VA = "0x1266100", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000356")]
		private bool ClampPath
		{
			[Token(Token = "0x60015B8")]
			[Address(RVA = "0x1265988", Offset = "0x1265988", VA = "0x1265988")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000357")]
		private bool ClampCross
		{
			[Token(Token = "0x60015B9")]
			[Address(RVA = "0x1265C00", Offset = "0x1265C00", VA = "0x1265C00")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000358")]
		private RegionOptions<float> RangeOptions
		{
			[Token(Token = "0x60015BA")]
			[Address(RVA = "0x12661B8", Offset = "0x12661B8", VA = "0x12661B8")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x17000359")]
		private RegionOptions<float> CrossRangeOptions
		{
			[Token(Token = "0x60015BB")]
			[Address(RVA = "0x1266288", Offset = "0x1266288", VA = "0x1266288")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0x1266358", Offset = "0x1266358", VA = "0x1266358", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0x1266384", Offset = "0x1266384", VA = "0x1266384", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0x12666A4", Offset = "0x12666A4", VA = "0x12666A4", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0x12678DC", Offset = "0x12678DC", VA = "0x12678DC")]
		public Vector3 GetScale(float f)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0x1267830", Offset = "0x1267830", VA = "0x1267830")]
		private void getScaleInternal(float f, Vector3 baseScale, ref Vector3 scale)
		{
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0x1267990", Offset = "0x1267990", VA = "0x1267990")]
		public BuildShapeExtrusion()
		{
		}
	}
	[Token(Token = "0x2000311")]
	[HelpURL("https://curvyeditor.com/doclink/cgbuildvolumecaps")]
	[ModuleInfo("Build/Volume Caps", ModuleName = "Volume Caps", Description = "Build volume caps")]
	public class BuildVolumeCaps : CGModule
	{
		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[InputSlotInfo(new Type[] { typeof(CGVolume) })]
		[HideInInspector]
		public CGModuleInputSlot InVolume;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGVolume) }, Optional = true, Array = true)]
		public CGModuleInputSlot InVolumeHoles;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[OutputSlotInfo(typeof(CGVMesh), Array = true)]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[Tab("General")]
		private CGYesNoAuto m_StartCap;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private CGYesNoAuto m_EndCap;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[FormerlySerializedAs("m_ReverseNormals")]
		private bool m_ReverseTriOrder;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		[SerializeField]
		private bool m_GenerateUV;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[Tab("Start Cap")]
		[Inline]
		private CGMaterialSettings m_StartMaterialSettings;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Label("Material", "")]
		[SerializeField]
		private Material m_StartMaterial;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tab("End Cap")]
		[SerializeField]
		private bool m_CloneStartCap;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AsGroup(null, Invisible = true)]
		[GroupCondition("m_CloneStartCap", false, false)]
		[SerializeField]
		private CGMaterialSettings m_EndMaterialSettings;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[FieldCondition("m_CloneStartCap", false, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		[SerializeField]
		[Label("Material", "")]
		[Group("Default/End Cap")]
		private Material m_EndMaterial;

		[Token(Token = "0x1700035A")]
		public bool GenerateUV
		{
			[Token(Token = "0x60015C5")]
			[Address(RVA = "0x1267B7C", Offset = "0x1267B7C", VA = "0x1267B7C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015C6")]
			[Address(RVA = "0x1267B84", Offset = "0x1267B84", VA = "0x1267B84")]
			set
			{
			}
		}

		[Token(Token = "0x1700035B")]
		public bool ReverseTriOrder
		{
			[Token(Token = "0x60015C7")]
			[Address(RVA = "0x1267BA0", Offset = "0x1267BA0", VA = "0x1267BA0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015C8")]
			[Address(RVA = "0x1267BA8", Offset = "0x1267BA8", VA = "0x1267BA8")]
			set
			{
			}
		}

		[Token(Token = "0x1700035C")]
		public CGYesNoAuto StartCap
		{
			[Token(Token = "0x60015C9")]
			[Address(RVA = "0x1267BC4", Offset = "0x1267BC4", VA = "0x1267BC4")]
			get
			{
				return default(CGYesNoAuto);
			}
			[Token(Token = "0x60015CA")]
			[Address(RVA = "0x1267BCC", Offset = "0x1267BCC", VA = "0x1267BCC")]
			set
			{
			}
		}

		[Token(Token = "0x1700035D")]
		public Material StartMaterial
		{
			[Token(Token = "0x60015CB")]
			[Address(RVA = "0x1267BE4", Offset = "0x1267BE4", VA = "0x1267BE4")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015CC")]
			[Address(RVA = "0x1267BEC", Offset = "0x1267BEC", VA = "0x1267BEC")]
			set
			{
			}
		}

		[Token(Token = "0x1700035E")]
		public CGMaterialSettings StartMaterialSettings
		{
			[Token(Token = "0x60015CD")]
			[Address(RVA = "0x1267C6C", Offset = "0x1267C6C", VA = "0x1267C6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700035F")]
		public CGYesNoAuto EndCap
		{
			[Token(Token = "0x60015CE")]
			[Address(RVA = "0x1267C74", Offset = "0x1267C74", VA = "0x1267C74")]
			get
			{
				return default(CGYesNoAuto);
			}
			[Token(Token = "0x60015CF")]
			[Address(RVA = "0x1267C7C", Offset = "0x1267C7C", VA = "0x1267C7C")]
			set
			{
			}
		}

		[Token(Token = "0x17000360")]
		public bool CloneStartCap
		{
			[Token(Token = "0x60015D0")]
			[Address(RVA = "0x1267C94", Offset = "0x1267C94", VA = "0x1267C94")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015D1")]
			[Address(RVA = "0x1267C9C", Offset = "0x1267C9C", VA = "0x1267C9C")]
			set
			{
			}
		}

		[Token(Token = "0x17000361")]
		public CGMaterialSettings EndMaterialSettings
		{
			[Token(Token = "0x60015D2")]
			[Address(RVA = "0x1267CB8", Offset = "0x1267CB8", VA = "0x1267CB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000362")]
		public Material EndMaterial
		{
			[Token(Token = "0x60015D3")]
			[Address(RVA = "0x1267CC0", Offset = "0x1267CC0", VA = "0x1267CC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60015D4")]
			[Address(RVA = "0x1267CC8", Offset = "0x1267CC8", VA = "0x1267CC8")]
			set
			{
			}
		}

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0x1267D48", Offset = "0x1267D48", VA = "0x1267D48", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0x1267E14", Offset = "0x1267E14", VA = "0x1267E14", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0x1267F54", Offset = "0x1267F54", VA = "0x1267F54", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0x1268AE0", Offset = "0x1268AE0", VA = "0x1268AE0")]
		private static Matrix4x4 getMatrix(CGVolume vol, int index, bool inverse)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0x1268EA0", Offset = "0x1268EA0", VA = "0x1268EA0")]
		private static void flipTris(ref int[] indices, int start, int end)
		{
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0x1268D10", Offset = "0x1268D10", VA = "0x1268D10")]
		private static Vector3[] applyMatrix(Vector3[] vt, Matrix4x4 matrix, out Bounds bounds)
		{
			return null;
		}

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0x1268964", Offset = "0x1268964", VA = "0x1268964")]
		private static ContourVertex[] make2DSegment(CGVolume vol, int segmentIndex)
		{
			return null;
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0x1268F00", Offset = "0x1268F00", VA = "0x1268F00")]
		private static void applyUV(Vector3[] vts, ref Vector2[] uvArray, int index, int count, CGMaterialSettings mat, Bounds bounds)
		{
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0x1269170", Offset = "0x1269170", VA = "0x1269170")]
		public BuildVolumeCaps()
		{
		}
	}
	[Token(Token = "0x2000312")]
	[HelpURL("https://curvyeditor.com/doclink/cgbuildvolumemesh")]
	[ModuleInfo("Build/Volume Mesh", ModuleName = "Volume Mesh", Description = "Build a volume mesh")]
	public class BuildVolumeMesh : CGModule
	{
		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[InputSlotInfo(new Type[] { typeof(CGVolume) })]
		[HideInInspector]
		public CGModuleInputSlot InVolume;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[OutputSlotInfo(typeof(CGVMesh), Array = true)]
		[HideInInspector]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[Tab("General")]
		private bool m_GenerateUV;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		[SerializeField]
		private bool m_Split;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[SerializeField]
		[Positive(MinValue = 1f)]
		[FieldCondition("m_Split", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		private float m_SplitLength;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[FormerlySerializedAs("m_ReverseNormals")]
		[FieldAction("CBAddMaterial", ActionAttribute.ActionEnum.Callback)]
		private bool m_ReverseTriOrder;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		[SerializeField]
		private List<CGMaterialSettingsEx> m_MaterialSettings;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		[HideInInspector]
		private Material[] m_Material;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<SamplePointsMaterialGroupCollection> groupsByMatID;

		[Token(Token = "0x17000363")]
		public bool GenerateUV
		{
			[Token(Token = "0x60015DE")]
			[Address(RVA = "0x1269284", Offset = "0x1269284", VA = "0x1269284")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015DF")]
			[Address(RVA = "0x126928C", Offset = "0x126928C", VA = "0x126928C")]
			set
			{
			}
		}

		[Token(Token = "0x17000364")]
		public bool ReverseTriOrder
		{
			[Token(Token = "0x60015E0")]
			[Address(RVA = "0x12692A8", Offset = "0x12692A8", VA = "0x12692A8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015E1")]
			[Address(RVA = "0x12692B0", Offset = "0x12692B0", VA = "0x12692B0")]
			set
			{
			}
		}

		[Token(Token = "0x17000365")]
		public bool Split
		{
			[Token(Token = "0x60015E2")]
			[Address(RVA = "0x12692CC", Offset = "0x12692CC", VA = "0x12692CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015E3")]
			[Address(RVA = "0x12692D4", Offset = "0x12692D4", VA = "0x12692D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000366")]
		public float SplitLength
		{
			[Token(Token = "0x60015E4")]
			[Address(RVA = "0x12692F0", Offset = "0x12692F0", VA = "0x12692F0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015E5")]
			[Address(RVA = "0x12692F8", Offset = "0x12692F8", VA = "0x12692F8")]
			set
			{
			}
		}

		[Token(Token = "0x17000367")]
		public List<CGMaterialSettingsEx> MaterialSetttings
		{
			[Token(Token = "0x60015E6")]
			[Address(RVA = "0x1269318", Offset = "0x1269318", VA = "0x1269318")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000368")]
		public int MaterialCount
		{
			[Token(Token = "0x60015E7")]
			[Address(RVA = "0x1269320", Offset = "0x1269320", VA = "0x1269320")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0x1269368", Offset = "0x1269368", VA = "0x1269368", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0x12694B4", Offset = "0x12694B4", VA = "0x12694B4", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60015EA")]
		[Address(RVA = "0x1269694", Offset = "0x1269694", VA = "0x1269694", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x60015EB")]
		[Address(RVA = "0x1269398", Offset = "0x1269398", VA = "0x1269398")]
		public int AddMaterial()
		{
			return default(int);
		}

		[Token(Token = "0x60015EC")]
		[Address(RVA = "0x1269F8C", Offset = "0x1269F8C", VA = "0x1269F8C")]
		public void RemoveMaterial(int index)
		{
		}

		[Token(Token = "0x60015ED")]
		[Address(RVA = "0x126A0DC", Offset = "0x126A0DC", VA = "0x126A0DC")]
		public void SetMaterial(int index, Material mat)
		{
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0x126A22C", Offset = "0x126A22C", VA = "0x126A22C")]
		public Material GetMaterial(int index)
		{
			return null;
		}

		[Token(Token = "0x60015EF")]
		[Address(RVA = "0x1269B9C", Offset = "0x1269B9C", VA = "0x1269B9C")]
		private void prepare(CGVolume vol)
		{
		}

		[Token(Token = "0x60015F0")]
		[Address(RVA = "0x1269BB4", Offset = "0x1269BB4", VA = "0x1269BB4")]
		private void build(CGVMesh vmesh, CGVolume vol, IntRegion subset)
		{
		}

		[Token(Token = "0x60015F1")]
		[Address(RVA = "0x126A6D0", Offset = "0x126A6D0", VA = "0x126A6D0")]
		private static void prepareSubMeshes(CGVMesh vmesh, List<SamplePointsMaterialGroupCollection> groupsBySubMeshes, int extrusions, ref Material[] materials)
		{
		}

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0x126A85C", Offset = "0x126A85C", VA = "0x126A85C")]
		private void createMaterialGroupUV(CGVMesh vmesh, CGVolume vol, SamplePointsMaterialGroup grp, int matIndex, float grpAspectCorrection, int sample, int baseVertex)
		{
		}

		[Token(Token = "0x60015F3")]
		[Address(RVA = "0x126A9CC", Offset = "0x126A9CC", VA = "0x126A9CC")]
		private static int createPatchTriangles(ref int[] triangles, ref int triIdx, int curVTIndex, int patchSize, int crossSize, bool reverse)
		{
			return default(int);
		}

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0x126A27C", Offset = "0x126A27C", VA = "0x126A27C")]
		private List<SamplePointsMaterialGroupCollection> getMaterialIDGroups(CGVolume volume)
		{
			return null;
		}

		[Token(Token = "0x60015F5")]
		[Address(RVA = "0x126A034", Offset = "0x126A034", VA = "0x126A034")]
		private bool validateMaterialIndex(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0x126AAD8", Offset = "0x126AAD8", VA = "0x126AAD8")]
		public BuildVolumeMesh()
		{
		}
	}
	[Token(Token = "0x2000313")]
	[HelpURL("https://curvyeditor.com/doclink/cgvolumespots")]
	[ModuleInfo("Build/Volume Spots", ModuleName = "Volume Spots", Description = "Generate spots along a path/volume", UsesRandom = true)]
	public class BuildVolumeSpots : CGModule
	{
		[Token(Token = "0x2000314")]
		private class GroupSet
		{
			[Token(Token = "0x4000F64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CGBoundsGroup Group;

			[Token(Token = "0x4000F65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float Length;

			[Token(Token = "0x4000F66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public List<int> Items;

			[Token(Token = "0x4000F67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public List<float> Distances;

			[Token(Token = "0x6001627")]
			[Address(RVA = "0x126DD00", Offset = "0x126DD00", VA = "0x126DD00")]
			public GroupSet()
			{
			}
		}

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGPath) }, Name = "Path/Volume", DisplayName = "Volume/Rasterized Path")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGBounds) }, Array = true)]
		public CGModuleInputSlot InBounds;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[OutputSlotInfo(typeof(CGSpots))]
		[HideInInspector]
		public CGModuleOutputSlot OutSpots;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tab("General")]
		[FloatRegion(RegionOptionsPropertyName = "RangeOptions", Precision = 4)]
		[SerializeField]
		private FloatRegion m_Range;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("When the source is a Volume, you can choose if you want to use it's path or the volume")]
		[FieldCondition("Volume", null, true, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		[SerializeField]
		private bool m_UseVolume;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[Tooltip("Dry run without actually creating spots?")]
		[SerializeField]
		private bool m_Simulate;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Section("Default/General/Cross", true, false, 100)]
		[SerializeField]
		[RangeEx(-1f, 1f, "", "")]
		private float m_CrossBase;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private AnimationCurve m_CrossCurve;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tab("Groups")]
		[ArrayEx(Space = 10)]
		[SerializeField]
		private List<CGBoundsGroup> m_Groups;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[IntRegion(UseSlider = false, RegionOptionsPropertyName = "RepeatingGroupsOptions", Options = AttributeOptionsFlags.Compact)]
		[SerializeField]
		private IntRegion m_RepeatingGroups;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		private CurvyRepeatingOrderEnum m_RepeatingOrder;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private bool m_FitEnd;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public CGSpots SimulatedSpots;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private WeightedRandom<int> mGroupBag;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private List<CGBounds> mBounds;

		[Token(Token = "0x17000369")]
		public FloatRegion Range
		{
			[Token(Token = "0x60015F7")]
			[Address(RVA = "0x126ABE0", Offset = "0x126ABE0", VA = "0x126ABE0")]
			get
			{
				return default(FloatRegion);
			}
			[Token(Token = "0x60015F8")]
			[Address(RVA = "0x126ABF0", Offset = "0x126ABF0", VA = "0x126ABF0")]
			set
			{
			}
		}

		[Token(Token = "0x1700036A")]
		public bool UseVolume
		{
			[Token(Token = "0x60015F9")]
			[Address(RVA = "0x126AC3C", Offset = "0x126AC3C", VA = "0x126AC3C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015FA")]
			[Address(RVA = "0x126AC44", Offset = "0x126AC44", VA = "0x126AC44")]
			set
			{
			}
		}

		[Token(Token = "0x1700036B")]
		public bool Simulate
		{
			[Token(Token = "0x60015FB")]
			[Address(RVA = "0x126AC60", Offset = "0x126AC60", VA = "0x126AC60")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60015FC")]
			[Address(RVA = "0x126AC68", Offset = "0x126AC68", VA = "0x126AC68")]
			set
			{
			}
		}

		[Token(Token = "0x1700036C")]
		public float CrossBase
		{
			[Token(Token = "0x60015FD")]
			[Address(RVA = "0x126AC84", Offset = "0x126AC84", VA = "0x126AC84")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60015FE")]
			[Address(RVA = "0x126AC8C", Offset = "0x126AC8C", VA = "0x126AC8C")]
			set
			{
			}
		}

		[Token(Token = "0x1700036D")]
		public AnimationCurve CrossCurve
		{
			[Token(Token = "0x60015FF")]
			[Address(RVA = "0x126ACC0", Offset = "0x126ACC0", VA = "0x126ACC0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001600")]
			[Address(RVA = "0x126ACC8", Offset = "0x126ACC8", VA = "0x126ACC8")]
			set
			{
			}
		}

		[Token(Token = "0x1700036E")]
		public List<CGBoundsGroup> Groups
		{
			[Token(Token = "0x6001601")]
			[Address(RVA = "0x126ACE0", Offset = "0x126ACE0", VA = "0x126ACE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001602")]
			[Address(RVA = "0x126ACE8", Offset = "0x126ACE8", VA = "0x126ACE8")]
			set
			{
			}
		}

		[Token(Token = "0x1700036F")]
		public CurvyRepeatingOrderEnum RepeatingOrder
		{
			[Token(Token = "0x6001603")]
			[Address(RVA = "0x126ACFC", Offset = "0x126ACFC", VA = "0x126ACFC")]
			get
			{
				return default(CurvyRepeatingOrderEnum);
			}
			[Token(Token = "0x6001604")]
			[Address(RVA = "0x126AD04", Offset = "0x126AD04", VA = "0x126AD04")]
			set
			{
			}
		}

		[Token(Token = "0x17000370")]
		public int FirstRepeating
		{
			[Token(Token = "0x6001605")]
			[Address(RVA = "0x126AD1C", Offset = "0x126AD1C", VA = "0x126AD1C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001606")]
			[Address(RVA = "0x126AD24", Offset = "0x126AD24", VA = "0x126AD24")]
			set
			{
			}
		}

		[Token(Token = "0x17000371")]
		public int LastRepeating
		{
			[Token(Token = "0x6001607")]
			[Address(RVA = "0x126ADBC", Offset = "0x126ADBC", VA = "0x126ADBC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001608")]
			[Address(RVA = "0x126ADC4", Offset = "0x126ADC4", VA = "0x126ADC4")]
			set
			{
			}
		}

		[Token(Token = "0x17000372")]
		public bool FitEnd
		{
			[Token(Token = "0x6001609")]
			[Address(RVA = "0x126AE18", Offset = "0x126AE18", VA = "0x126AE18")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600160A")]
			[Address(RVA = "0x126AE20", Offset = "0x126AE20", VA = "0x126AE20")]
			set
			{
			}
		}

		[Token(Token = "0x17000373")]
		public int GroupCount
		{
			[Token(Token = "0x600160B")]
			[Address(RVA = "0x126AD74", Offset = "0x126AD74", VA = "0x126AD74")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000374")]
		public GUIContent[] BoundsNames
		{
			[Token(Token = "0x600160C")]
			[Address(RVA = "0x126AE3C", Offset = "0x126AE3C", VA = "0x126AE3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000375")]
		public int[] BoundsIndices
		{
			[Token(Token = "0x600160D")]
			[Address(RVA = "0x126B028", Offset = "0x126B028", VA = "0x126B028")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000376")]
		public int Count
		{
			[Token(Token = "0x600160E")]
			[Address(RVA = "0x126B0E4", Offset = "0x126B0E4", VA = "0x126B0E4")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600160F")]
			[Address(RVA = "0x126B0EC", Offset = "0x126B0EC", VA = "0x126B0EC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000377")]
		private int lastGroupIndex
		{
			[Token(Token = "0x6001610")]
			[Address(RVA = "0x126B0F4", Offset = "0x126B0F4", VA = "0x126B0F4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000378")]
		private RegionOptions<float> RangeOptions
		{
			[Token(Token = "0x6001611")]
			[Address(RVA = "0x126B10C", Offset = "0x126B10C", VA = "0x126B10C")]
			get
			{
				return default(RegionOptions<float>);
			}
		}

		[Token(Token = "0x17000379")]
		private RegionOptions<int> RepeatingGroupsOptions
		{
			[Token(Token = "0x6001612")]
			[Address(RVA = "0x126B178", Offset = "0x126B178", VA = "0x126B178")]
			get
			{
				return default(RegionOptions<int>);
			}
		}

		[Token(Token = "0x1700037A")]
		private CGPath Path
		{
			[Token(Token = "0x6001613")]
			[Address(RVA = "0x126B1FC", Offset = "0x126B1FC", VA = "0x126B1FC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001614")]
			[Address(RVA = "0x126B204", Offset = "0x126B204", VA = "0x126B204")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700037B")]
		private CGVolume Volume
		{
			[Token(Token = "0x6001615")]
			[Address(RVA = "0x126B20C", Offset = "0x126B20C", VA = "0x126B20C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037C")]
		private float Length
		{
			[Token(Token = "0x6001616")]
			[Address(RVA = "0x126B288", Offset = "0x126B288", VA = "0x126B288")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700037D")]
		private float StartDistance
		{
			[Token(Token = "0x6001617")]
			[Address(RVA = "0x126B2C0", Offset = "0x126B2C0", VA = "0x126B2C0")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001618")]
			[Address(RVA = "0x126B2C8", Offset = "0x126B2C8", VA = "0x126B2C8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0x126B2D0", Offset = "0x126B2D0", VA = "0x126B2D0", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x600161A")]
		[Address(RVA = "0x126B2F8", Offset = "0x126B2F8", VA = "0x126B2F8", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0x126B5F0", Offset = "0x126B5F0", VA = "0x126B5F0", Slot = "13")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0x126B624", Offset = "0x126B624", VA = "0x126B624")]
		public void Clear()
		{
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0x126B6F4", Offset = "0x126B6F4", VA = "0x126B6F4", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0x126B464", Offset = "0x126B464", VA = "0x126B464")]
		public CGBoundsGroup AddGroup(string name)
		{
			return null;
		}

		[Token(Token = "0x600161F")]
		[Address(RVA = "0x126D568", Offset = "0x126D568", VA = "0x126D568")]
		public void RemoveGroup(CGBoundsGroup group)
		{
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0x126C80C", Offset = "0x126C80C", VA = "0x126C80C")]
		private GroupSet addGroupItems(CGBoundsGroup group, ref List<CGSpot> spots, ref float remainingLength, ref float currentDistance, bool calcLengthOnly = false)
		{
			return null;
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0x126D2B8", Offset = "0x126D2B8", VA = "0x126D2B8")]
		private void rebase(ref List<CGSpot> spots, ref List<GroupSet> sets, float currentDistance)
		{
		}

		[Token(Token = "0x6001622")]
		[Address(RVA = "0x126D650", Offset = "0x126D650", VA = "0x126D650")]
		private CGSpot getSpot(int itemID, ref CGBoundsGroup group, ref CGBounds bounds, float startDist)
		{
			return default(CGSpot);
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0x126C688", Offset = "0x126C688", VA = "0x126C688")]
		private void prepare()
		{
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0x126D5CC", Offset = "0x126D5CC", VA = "0x126D5CC")]
		private CGBounds getItemBounds(int itemIndex)
		{
			return null;
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0x126DB14", Offset = "0x126DB14", VA = "0x126DB14")]
		private float getCrossValue(float globalF, CGBoundsGroup group)
		{
			return default(float);
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0x126DBDC", Offset = "0x126DBDC", VA = "0x126DBDC")]
		public BuildVolumeSpots()
		{
		}
	}
	[Token(Token = "0x2000315")]
	[HelpURL("https://curvyeditor.com/doclink/cgconformpath")]
	[ModuleInfo("Modifier/Conform Path", ModuleName = "Conform Path", Description = "Projects a path")]
	public class ConformPath : CGModule, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGPath) }, Name = "Path", ModifiesData = true)]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[OutputSlotInfo(typeof(CGPath))]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[VectorEx("", "")]
		[Tooltip("The direction to raycast in ")]
		private Vector3 m_Direction;

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		[Tooltip("The maximum raycast distance")]
		private float m_MaxDistance;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Defines an offset shift along the raycast direction")]
		[SerializeField]
		private float m_Offset;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("If enabled, the entire path is moved to the nearest possible distance. If disabled, each path point is moved individually")]
		[SerializeField]
		private bool m_Warp;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("The layers to raycast against")]
		[SerializeField]
		private LayerMask m_LayerMask;

		[Token(Token = "0x1700037E")]
		public Vector3 Direction
		{
			[Token(Token = "0x6001628")]
			[Address(RVA = "0x126DDC0", Offset = "0x126DDC0", VA = "0x126DDC0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001629")]
			[Address(RVA = "0x126DDCC", Offset = "0x126DDCC", VA = "0x126DDCC")]
			set
			{
			}
		}

		[Token(Token = "0x1700037F")]
		public float MaxDistance
		{
			[Token(Token = "0x600162A")]
			[Address(RVA = "0x126DE18", Offset = "0x126DE18", VA = "0x126DE18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600162B")]
			[Address(RVA = "0x126DE20", Offset = "0x126DE20", VA = "0x126DE20")]
			set
			{
			}
		}

		[Token(Token = "0x17000380")]
		public float Offset
		{
			[Token(Token = "0x600162C")]
			[Address(RVA = "0x126DE3C", Offset = "0x126DE3C", VA = "0x126DE3C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600162D")]
			[Address(RVA = "0x126DE44", Offset = "0x126DE44", VA = "0x126DE44")]
			set
			{
			}
		}

		[Token(Token = "0x17000381")]
		public bool Warp
		{
			[Token(Token = "0x600162E")]
			[Address(RVA = "0x126DE60", Offset = "0x126DE60", VA = "0x126DE60")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600162F")]
			[Address(RVA = "0x126DE68", Offset = "0x126DE68", VA = "0x126DE68")]
			set
			{
			}
		}

		[Token(Token = "0x17000382")]
		public LayerMask LayerMask
		{
			[Token(Token = "0x6001630")]
			[Address(RVA = "0x126DE88", Offset = "0x126DE88", VA = "0x126DE88")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6001631")]
			[Address(RVA = "0x126DE90", Offset = "0x126DE90", VA = "0x126DE90")]
			set
			{
			}
		}

		[Token(Token = "0x17000383")]
		[Obsolete("IOnRequestPath.PathLength and CGDataRequestRasterization.SplineAbsoluteLength are no more needed. SplineInputModuleBase.getPathLength is used instead")]
		public float PathLength
		{
			[Token(Token = "0x6001634")]
			[Address(RVA = "0x126DFB0", Offset = "0x126DFB0", VA = "0x126DFB0", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000384")]
		public bool PathIsClosed
		{
			[Token(Token = "0x6001635")]
			[Address(RVA = "0x126E0D8", Offset = "0x126E0D8", VA = "0x126E0D8", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0x126DEE0", Offset = "0x126DEE0", VA = "0x126DEE0", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0x126DF0C", Offset = "0x126DF0C", VA = "0x126DF0C", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001636")]
		[Address(RVA = "0x126E1BC", Offset = "0x126E1BC", VA = "0x126E1BC", Slot = "16")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0x126E380", Offset = "0x126E380", VA = "0x126E380")]
		public static CGPath Conform(Transform pathTransform, CGPath path, LayerMask layers, Vector3 projectionDirection, float offset, float rayLength, bool warp)
		{
			return null;
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0x126E6E0", Offset = "0x126E6E0", VA = "0x126E6E0")]
		public ConformPath()
		{
		}
	}
	[Token(Token = "0x2000316")]
	[ModuleInfo("Create/GameObject", ModuleName = "Create GameObject")]
	[HelpURL("https://curvyeditor.com/doclink/cgcreategameobject")]
	public class CreateGameObject : CGModule
	{
		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[InputSlotInfo(new Type[] { typeof(CGGameObject) }, Array = true, Name = "GameObject")]
		[HideInInspector]
		public CGModuleInputSlot InGameObjectArray;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[InputSlotInfo(new Type[] { typeof(CGSpots) }, Name = "Spots")]
		[HideInInspector]
		public CGModuleInputSlot InSpots;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[CGResourceCollectionManager("GameObject", ShowCount = true)]
		[SerializeField]
		private CGGameObjectResourceCollection m_Resources;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[Tab("General")]
		private bool m_MakeStatic;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Layer("", "")]
		[SerializeField]
		private int m_Layer;

		[Token(Token = "0x17000385")]
		public int Layer
		{
			[Token(Token = "0x6001639")]
			[Address(RVA = "0x126E784", Offset = "0x126E784", VA = "0x126E784")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600163A")]
			[Address(RVA = "0x126E78C", Offset = "0x126E78C", VA = "0x126E78C")]
			set
			{
			}
		}

		[Token(Token = "0x17000386")]
		public bool MakeStatic
		{
			[Token(Token = "0x600163B")]
			[Address(RVA = "0x126E7B8", Offset = "0x126E7B8", VA = "0x126E7B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600163C")]
			[Address(RVA = "0x126E7C0", Offset = "0x126E7C0", VA = "0x126E7C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000387")]
		public CGGameObjectResourceCollection GameObjects
		{
			[Token(Token = "0x600163D")]
			[Address(RVA = "0x126E7E0", Offset = "0x126E7E0", VA = "0x126E7E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000388")]
		public int GameObjectCount
		{
			[Token(Token = "0x600163E")]
			[Address(RVA = "0x126E7E8", Offset = "0x126E7E8", VA = "0x126E7E8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600163F")]
		[Address(RVA = "0x126E804", Offset = "0x126E804", VA = "0x126E804", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001640")]
		[Address(RVA = "0x126E9DC", Offset = "0x126E9DC", VA = "0x126E9DC", Slot = "8")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6001641")]
		[Address(RVA = "0x126EA14", Offset = "0x126EA14", VA = "0x126EA14", Slot = "14")]
		public override void OnTemplateCreated()
		{
		}

		[Token(Token = "0x6001642")]
		[Address(RVA = "0x126E858", Offset = "0x126E858", VA = "0x126E858")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001643")]
		[Address(RVA = "0x126EA18", Offset = "0x126EA18", VA = "0x126EA18", Slot = "13")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x6001644")]
		[Address(RVA = "0x126EA50", Offset = "0x126EA50", VA = "0x126EA50", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6001645")]
		[Address(RVA = "0x126F310", Offset = "0x126F310", VA = "0x126F310")]
		public CreateGameObject()
		{
		}
	}
	[Token(Token = "0x2000317")]
	[ModuleInfo("Create/Mesh", ModuleName = "Create Mesh")]
	[HelpURL("https://curvyeditor.com/doclink/cgcreatemesh")]
	public class CreateMesh : CGModule
	{
		[Token(Token = "0x4000F74")]
		private const string DefaultTag = "Untagged";

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGVMesh) }, Array = true, Name = "VMesh")]
		public CGModuleInputSlot InVMeshArray;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[InputSlotInfo(new Type[] { typeof(CGSpots) }, Array = true, Name = "Spots", Optional = true)]
		[HideInInspector]
		public CGModuleInputSlot InSpots;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[CGResourceCollectionManager("Mesh", ShowCount = true)]
		[SerializeField]
		private CGMeshResourceCollection m_MeshResources;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tab("General")]
		[SerializeField]
		[FieldCondition("canUpdate", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		[Tooltip("Merge meshes")]
		private bool m_Combine;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		[SerializeField]
		[Tooltip("Merge meshes sharing the same Index")]
		private bool m_GroupMeshes;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[FieldCondition("canUpdate", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		[SerializeField]
		private CGYesNoAuto m_AddNormals;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[FieldCondition("canUpdate", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		private CGYesNoAuto m_AddTangents;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[FieldCondition("canUpdate", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		[SerializeField]
		private bool m_AddUV2;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[FieldCondition("canModifyStaticFlag", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		[SerializeField]
		[Tooltip("If enabled, meshes will have the Static flag set, and will not be updated in Play Mode")]
		private bool m_MakeStatic;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Layer("", "")]
		[FieldCondition("canUpdate", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		[Tooltip("The Layer of the created game object")]
		[SerializeField]
		private int m_Layer;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[FluffyUnderware.DevTools.Tag("", "")]
		[Tooltip("The Tag of the created game object")]
		[SerializeField]
		[FieldCondition("canUpdate", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		private string m_Tag;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[FieldCondition("canUpdate", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		[SerializeField]
		[Tab("Renderer")]
		private bool m_RendererEnabled;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		[FieldCondition("canUpdate", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		private ShadowCastingMode m_CastShadows;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[FieldCondition("canUpdate", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		private bool m_ReceiveShadows;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[FieldCondition("canUpdate", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		[SerializeField]
		private LightProbeUsage m_LightProbeUsage;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[FieldCondition("canUpdate", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		[SerializeField]
		[HideInInspector]
		private bool m_UseLightProbes;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[FieldCondition("canUpdate", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		[SerializeField]
		private ReflectionProbeUsage m_ReflectionProbes;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[FieldCondition("canUpdate", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		[SerializeField]
		private Transform m_AnchorOverride;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[FieldCondition("canUpdate", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		[Tab("Collider")]
		[SerializeField]
		private CGColliderEnum m_Collider;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		[FieldCondition("m_Collider", CGColliderEnum.Mesh, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		[FieldCondition("canUpdate", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		private bool m_Convex;

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[FieldCondition("canUpdate", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below, Action = ActionAttribute.ActionEnum.Enable)]
		[Tooltip("Options used to enable or disable certain features in Collider mesh cooking. See Unity's MeshCollider.cookingOptions for more details")]
		[FieldCondition("m_Collider", CGColliderEnum.Mesh, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		[SerializeField]
		[EnumFlag("", "")]
		private MeshColliderCookingOptions m_CookingOptions;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[Label("Auto Update", "")]
		[SerializeField]
		private bool m_AutoUpdateColliders;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private PhysicMaterial m_Material;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private int mCurrentMeshCount;

		[Token(Token = "0x17000389")]
		public bool Combine
		{
			[Token(Token = "0x6001646")]
			[Address(RVA = "0x126F3C4", Offset = "0x126F3C4", VA = "0x126F3C4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001647")]
			[Address(RVA = "0x126F3CC", Offset = "0x126F3CC", VA = "0x126F3CC")]
			set
			{
			}
		}

		[Token(Token = "0x1700038A")]
		public bool GroupMeshes
		{
			[Token(Token = "0x6001648")]
			[Address(RVA = "0x126F3EC", Offset = "0x126F3EC", VA = "0x126F3EC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001649")]
			[Address(RVA = "0x126F3F4", Offset = "0x126F3F4", VA = "0x126F3F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700038B")]
		public CGYesNoAuto AddNormals
		{
			[Token(Token = "0x600164A")]
			[Address(RVA = "0x126F414", Offset = "0x126F414", VA = "0x126F414")]
			get
			{
				return default(CGYesNoAuto);
			}
			[Token(Token = "0x600164B")]
			[Address(RVA = "0x126F41C", Offset = "0x126F41C", VA = "0x126F41C")]
			set
			{
			}
		}

		[Token(Token = "0x1700038C")]
		public CGYesNoAuto AddTangents
		{
			[Token(Token = "0x600164C")]
			[Address(RVA = "0x126F438", Offset = "0x126F438", VA = "0x126F438")]
			get
			{
				return default(CGYesNoAuto);
			}
			[Token(Token = "0x600164D")]
			[Address(RVA = "0x126F440", Offset = "0x126F440", VA = "0x126F440")]
			set
			{
			}
		}

		[Token(Token = "0x1700038D")]
		public bool AddUV2
		{
			[Token(Token = "0x600164E")]
			[Address(RVA = "0x126F45C", Offset = "0x126F45C", VA = "0x126F45C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600164F")]
			[Address(RVA = "0x126F464", Offset = "0x126F464", VA = "0x126F464")]
			set
			{
			}
		}

		[Token(Token = "0x1700038E")]
		public int Layer
		{
			[Token(Token = "0x6001650")]
			[Address(RVA = "0x126F484", Offset = "0x126F484", VA = "0x126F484")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001651")]
			[Address(RVA = "0x126F48C", Offset = "0x126F48C", VA = "0x126F48C")]
			set
			{
			}
		}

		[Token(Token = "0x1700038F")]
		public string Tag
		{
			[Token(Token = "0x6001652")]
			[Address(RVA = "0x126F4B8", Offset = "0x126F4B8", VA = "0x126F4B8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001653")]
			[Address(RVA = "0x126F4C0", Offset = "0x126F4C0", VA = "0x126F4C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000390")]
		public bool MakeStatic
		{
			[Token(Token = "0x6001654")]
			[Address(RVA = "0x126F4FC", Offset = "0x126F4FC", VA = "0x126F4FC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001655")]
			[Address(RVA = "0x126F504", Offset = "0x126F504", VA = "0x126F504")]
			set
			{
			}
		}

		[Token(Token = "0x17000391")]
		public bool RendererEnabled
		{
			[Token(Token = "0x6001656")]
			[Address(RVA = "0x126F524", Offset = "0x126F524", VA = "0x126F524")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001657")]
			[Address(RVA = "0x126F52C", Offset = "0x126F52C", VA = "0x126F52C")]
			set
			{
			}
		}

		[Token(Token = "0x17000392")]
		public ShadowCastingMode CastShadows
		{
			[Token(Token = "0x6001658")]
			[Address(RVA = "0x126F54C", Offset = "0x126F54C", VA = "0x126F54C")]
			get
			{
				return default(ShadowCastingMode);
			}
			[Token(Token = "0x6001659")]
			[Address(RVA = "0x126F554", Offset = "0x126F554", VA = "0x126F554")]
			set
			{
			}
		}

		[Token(Token = "0x17000393")]
		public bool ReceiveShadows
		{
			[Token(Token = "0x600165A")]
			[Address(RVA = "0x126F570", Offset = "0x126F570", VA = "0x126F570")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600165B")]
			[Address(RVA = "0x126F578", Offset = "0x126F578", VA = "0x126F578")]
			set
			{
			}
		}

		[Token(Token = "0x17000394")]
		public bool UseLightProbes
		{
			[Token(Token = "0x600165C")]
			[Address(RVA = "0x126F598", Offset = "0x126F598", VA = "0x126F598")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600165D")]
			[Address(RVA = "0x126F5A0", Offset = "0x126F5A0", VA = "0x126F5A0")]
			set
			{
			}
		}

		[Token(Token = "0x17000395")]
		public LightProbeUsage LightProbeUsage
		{
			[Token(Token = "0x600165E")]
			[Address(RVA = "0x126F5C0", Offset = "0x126F5C0", VA = "0x126F5C0")]
			get
			{
				return default(LightProbeUsage);
			}
			[Token(Token = "0x600165F")]
			[Address(RVA = "0x126F5C8", Offset = "0x126F5C8", VA = "0x126F5C8")]
			set
			{
			}
		}

		[Token(Token = "0x17000396")]
		public ReflectionProbeUsage ReflectionProbes
		{
			[Token(Token = "0x6001660")]
			[Address(RVA = "0x126F5E4", Offset = "0x126F5E4", VA = "0x126F5E4")]
			get
			{
				return default(ReflectionProbeUsage);
			}
			[Token(Token = "0x6001661")]
			[Address(RVA = "0x126F5EC", Offset = "0x126F5EC", VA = "0x126F5EC")]
			set
			{
			}
		}

		[Token(Token = "0x17000397")]
		public Transform AnchorOverride
		{
			[Token(Token = "0x6001662")]
			[Address(RVA = "0x126F608", Offset = "0x126F608", VA = "0x126F608")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001663")]
			[Address(RVA = "0x126F610", Offset = "0x126F610", VA = "0x126F610")]
			set
			{
			}
		}

		[Token(Token = "0x17000398")]
		public CGColliderEnum Collider
		{
			[Token(Token = "0x6001664")]
			[Address(RVA = "0x126F694", Offset = "0x126F694", VA = "0x126F694")]
			get
			{
				return default(CGColliderEnum);
			}
			[Token(Token = "0x6001665")]
			[Address(RVA = "0x126F69C", Offset = "0x126F69C", VA = "0x126F69C")]
			set
			{
			}
		}

		[Token(Token = "0x17000399")]
		public bool AutoUpdateColliders
		{
			[Token(Token = "0x6001666")]
			[Address(RVA = "0x126F6B8", Offset = "0x126F6B8", VA = "0x126F6B8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001667")]
			[Address(RVA = "0x126F6C0", Offset = "0x126F6C0", VA = "0x126F6C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700039A")]
		public bool Convex
		{
			[Token(Token = "0x6001668")]
			[Address(RVA = "0x126F6E0", Offset = "0x126F6E0", VA = "0x126F6E0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001669")]
			[Address(RVA = "0x126F6E8", Offset = "0x126F6E8", VA = "0x126F6E8")]
			set
			{
			}
		}

		[Token(Token = "0x1700039B")]
		public MeshColliderCookingOptions CookingOptions
		{
			[Token(Token = "0x600166A")]
			[Address(RVA = "0x126F708", Offset = "0x126F708", VA = "0x126F708")]
			get
			{
				return default(MeshColliderCookingOptions);
			}
			[Token(Token = "0x600166B")]
			[Address(RVA = "0x126F710", Offset = "0x126F710", VA = "0x126F710")]
			set
			{
			}
		}

		[Token(Token = "0x1700039C")]
		public PhysicMaterial Material
		{
			[Token(Token = "0x600166C")]
			[Address(RVA = "0x126F72C", Offset = "0x126F72C", VA = "0x126F72C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600166D")]
			[Address(RVA = "0x126F734", Offset = "0x126F734", VA = "0x126F734")]
			set
			{
			}
		}

		[Token(Token = "0x1700039D")]
		public CGMeshResourceCollection Meshes
		{
			[Token(Token = "0x600166E")]
			[Address(RVA = "0x126F7B8", Offset = "0x126F7B8", VA = "0x126F7B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700039E")]
		public int MeshCount
		{
			[Token(Token = "0x600166F")]
			[Address(RVA = "0x126F7C0", Offset = "0x126F7C0", VA = "0x126F7C0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700039F")]
		public int VertexCount
		{
			[Token(Token = "0x6001670")]
			[Address(RVA = "0x126F7DC", Offset = "0x126F7DC", VA = "0x126F7DC")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001671")]
			[Address(RVA = "0x126F7E4", Offset = "0x126F7E4", VA = "0x126F7E4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170003A0")]
		private bool canGroupMeshes
		{
			[Token(Token = "0x6001672")]
			[Address(RVA = "0x126F7EC", Offset = "0x126F7EC", VA = "0x126F7EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003A1")]
		private bool canModifyStaticFlag
		{
			[Token(Token = "0x6001673")]
			[Address(RVA = "0x126F828", Offset = "0x126F828", VA = "0x126F828")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003A2")]
		private bool canUpdate
		{
			[Token(Token = "0x6001674")]
			[Address(RVA = "0x126F830", Offset = "0x126F830", VA = "0x126F830")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0x126F860", Offset = "0x126F860", VA = "0x126F860", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0x126FB58", Offset = "0x126FB58", VA = "0x126FB58", Slot = "14")]
		public override void OnTemplateCreated()
		{
		}

		[Token(Token = "0x6001677")]
		[Address(RVA = "0x126FB40", Offset = "0x126FB40", VA = "0x126FB40")]
		public void Clear()
		{
		}

		[Token(Token = "0x6001678")]
		[Address(RVA = "0x126FC90", Offset = "0x126FC90", VA = "0x126FC90", Slot = "13")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x6001679")]
		[Address(RVA = "0x126FCD4", Offset = "0x126FCD4", VA = "0x126FCD4", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x600167A")]
		[Address(RVA = "0x12710C4", Offset = "0x12710C4", VA = "0x12710C4")]
		public GameObject SaveToScene([Optional] Transform parent)
		{
			return null;
		}

		[Token(Token = "0x600167B")]
		[Address(RVA = "0x1270F08", Offset = "0x1270F08", VA = "0x1270F08")]
		public void UpdateColliders()
		{
		}

		[Token(Token = "0x600167C")]
		[Address(RVA = "0x1270AA4", Offset = "0x1270AA4", VA = "0x1270AA4")]
		private void createMeshes(ref List<CGVMesh> vMeshes, bool combine)
		{
		}

		[Token(Token = "0x600167D")]
		[Address(RVA = "0x127014C", Offset = "0x127014C", VA = "0x127014C")]
		private void createSpotMeshes(ref List<CGVMesh> vMeshes, CGSpot[] spots, bool combine)
		{
		}

		[Token(Token = "0x600167E")]
		[Address(RVA = "0x12714E0", Offset = "0x12714E0", VA = "0x12714E0")]
		private CGMeshResource writeVMeshToMesh(ref CGVMesh vmesh)
		{
			return null;
		}

		[Token(Token = "0x600167F")]
		[Address(RVA = "0x126FB70", Offset = "0x126FB70", VA = "0x126FB70")]
		private void removeUnusedResource()
		{
		}

		[Token(Token = "0x6001680")]
		[Address(RVA = "0x12717A0", Offset = "0x12717A0", VA = "0x12717A0")]
		private CGMeshResource getNewMesh()
		{
			return null;
		}

		[Token(Token = "0x6001681")]
		[Address(RVA = "0x1271AD4", Offset = "0x1271AD4", VA = "0x1271AD4")]
		public CreateMesh()
		{
		}
	}
	[Token(Token = "0x2000319")]
	[HelpURL("https://curvyeditor.com/doclink/cgcreatepathlinerenderer")]
	[ModuleInfo("Create/Path Line Renderer", ModuleName = "Create Path Line Renderer", Description = "Feeds a Line Renderer with a Path")]
	public class CreatePathLineRenderer : CGModule
	{
		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGPath) }, DisplayName = "Rasterized Path")]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private LineRenderer mLineRenderer;

		[Token(Token = "0x170003A3")]
		public LineRenderer LineRenderer
		{
			[Token(Token = "0x6001687")]
			[Address(RVA = "0x1271C98", Offset = "0x1271C98", VA = "0x1271C98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001688")]
		[Address(RVA = "0x1271D2C", Offset = "0x1271D2C", VA = "0x1271D2C", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001689")]
		[Address(RVA = "0x1271E3C", Offset = "0x1271E3C", VA = "0x1271E3C", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x600168A")]
		[Address(RVA = "0x1271D48", Offset = "0x1271D48", VA = "0x1271D48")]
		private void createLR()
		{
		}

		[Token(Token = "0x600168B")]
		[Address(RVA = "0x1271F48", Offset = "0x1271F48", VA = "0x1271F48")]
		public CreatePathLineRenderer()
		{
		}
	}
	[Token(Token = "0x200031A")]
	[HelpURL("https://curvyeditor.com/doclink/cgdebugrasterizedpath")]
	[ModuleInfo("Debug/Rasterized Path", ModuleName = "Debug Rasterized Path", Description = "Shows the tangents and orientation of a rasterized path")]
	public class DebugRasterizedPath : CGModule
	{
		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[InputSlotInfo(new Type[] { typeof(CGPath) }, DisplayName = "Rasterized Path")]
		[HideInInspector]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Display the normal at each one of the path's points")]
		public bool ShowNormals;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		[Tooltip("Display the orientation at each one of the path's points")]
		public bool ShowOrientation;

		[Token(Token = "0x600168C")]
		[Address(RVA = "0x1271FB0", Offset = "0x1271FB0", VA = "0x1271FB0", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600168D")]
		[Address(RVA = "0x1271FD0", Offset = "0x1271FD0", VA = "0x1271FD0")]
		public DebugRasterizedPath()
		{
		}
	}
	[Token(Token = "0x200031B")]
	[HelpURL("https://curvyeditor.com/doclink/cgdebugvmesh")]
	[ModuleInfo("Debug/VMesh", ModuleName = "Debug VMesh")]
	public class DebugVMesh : CGModule
	{
		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGVMesh) }, Name = "VMesh")]
		public CGModuleInputSlot InData;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tab("General")]
		public bool ShowVertices;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool ShowVertexID;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
		public bool ShowUV;

		[Token(Token = "0x600168E")]
		[Address(RVA = "0x1272040", Offset = "0x1272040", VA = "0x1272040", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600168F")]
		[Address(RVA = "0x1272060", Offset = "0x1272060", VA = "0x1272060")]
		public DebugVMesh()
		{
		}
	}
	[Token(Token = "0x200031C")]
	[ModuleInfo("Debug/Volume", ModuleName = "Debug Volume")]
	[HelpURL("https://curvyeditor.com/doclink/cgdebugvolume")]
	public class DebugVolume : CGModule
	{
		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGVolume) }, Name = "Volume")]
		public CGModuleInputSlot InData;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tab("General")]
		public bool ShowPathSamples;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool ShowCrossSamples;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[IntRegion(RegionIsOptional = true)]
		[FieldCondition("ShowCrossSamples", true, false, ActionAttribute.ActionEnum.Show, null, ActionAttribute.ActionPositionEnum.Below)]
		public IntRegion LimitCross;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool ShowNormals;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		public bool ShowIndex;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC2")]
		public bool ShowMap;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public Color PathColor;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public Color VolumeColor;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public Color NormalColor;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Tab("Interpolate")]
		public bool Interpolate;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[RangeEx(-1f, 1f, "Path", "")]
		public float InterpolatePathF;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[RangeEx(-1f, 1f, "Cross", "")]
		public float InterpolateCrossF;

		[Token(Token = "0x6001690")]
		[Address(RVA = "0x12720C8", Offset = "0x12720C8", VA = "0x12720C8")]
		public DebugVolume()
		{
		}
	}
	[Token(Token = "0x200031D")]
	[HelpURL("https://curvyeditor.com/doclink/cginputgameobject")]
	[ModuleInfo("Input/Game Objects", ModuleName = "Input GameObjects", Description = "")]
	public class InputGameObject : CGModule
	{
		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[OutputSlotInfo(typeof(CGGameObject), Array = true)]
		public CGModuleOutputSlot OutGameObject;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[ArrayEx]
		[SerializeField]
		private List<CGGameObjectProperties> m_GameObjects;

		[Token(Token = "0x170003A4")]
		public List<CGGameObjectProperties> GameObjects
		{
			[Token(Token = "0x6001691")]
			[Address(RVA = "0x1272190", Offset = "0x1272190", VA = "0x1272190")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003A5")]
		public bool SupportsIPE
		{
			[Token(Token = "0x6001692")]
			[Address(RVA = "0x1272198", Offset = "0x1272198", VA = "0x1272198")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0x12721A0", Offset = "0x12721A0", VA = "0x12721A0", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0x1272220", Offset = "0x1272220", VA = "0x1272220", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0x12723E0", Offset = "0x12723E0", VA = "0x12723E0", Slot = "14")]
		public override void OnTemplateCreated()
		{
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0x127245C", Offset = "0x127245C", VA = "0x127245C")]
		public InputGameObject()
		{
		}
	}
	[Token(Token = "0x200031E")]
	[ModuleInfo("Input/Meshes", ModuleName = "Input Meshes", Description = "Create VMeshes")]
	[HelpURL("https://curvyeditor.com/doclink/cginputmesh")]
	public class InputMesh : CGModule, IExternalInput
	{
		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[OutputSlotInfo(typeof(CGVMesh), Array = true)]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[ArrayEx]
		[SerializeField]
		private List<CGMeshProperties> m_Meshes;

		[Token(Token = "0x170003A6")]
		public List<CGMeshProperties> Meshes
		{
			[Token(Token = "0x6001697")]
			[Address(RVA = "0x1272508", Offset = "0x1272508", VA = "0x1272508")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003A7")]
		public bool SupportsIPE
		{
			[Token(Token = "0x6001698")]
			[Address(RVA = "0x1272510", Offset = "0x1272510", VA = "0x1272510", Slot = "15")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001699")]
		[Address(RVA = "0x1272518", Offset = "0x1272518", VA = "0x1272518", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x600169A")]
		[Address(RVA = "0x1272598", Offset = "0x1272598", VA = "0x1272598", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0x1272794", Offset = "0x1272794", VA = "0x1272794", Slot = "14")]
		public override void OnTemplateCreated()
		{
		}

		[Token(Token = "0x600169C")]
		[Address(RVA = "0x1272810", Offset = "0x1272810", VA = "0x1272810")]
		public InputMesh()
		{
		}
	}
	[Token(Token = "0x200031F")]
	[HelpURL("https://curvyeditor.com/doclink/cginputsplinepath")]
	[ModuleInfo("Input/Spline Path", ModuleName = "Input Spline Path", Description = "Spline Path")]
	public class InputSplinePath : SplineInputModuleBase, IExternalInput, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[OutputSlotInfo(typeof(CGPath))]
		[HideInInspector]
		public CGModuleOutputSlot Path;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[FieldCondition("m_Spline", null, false, ActionAttribute.ActionEnum.ShowWarning, "Create or assign spline", ActionAttribute.ActionPositionEnum.Below)]
		[CGResourceManager("Spline")]
		[SerializeField]
		[Tab("General", Sort = 0)]
		private CurvySpline m_Spline;

		[Token(Token = "0x170003A8")]
		public CurvySpline Spline
		{
			[Token(Token = "0x600169D")]
			[Address(RVA = "0x1272950", Offset = "0x1272950", VA = "0x1272950")]
			get
			{
				return null;
			}
			[Token(Token = "0x600169E")]
			[Address(RVA = "0x1272958", Offset = "0x1272958", VA = "0x1272958")]
			set
			{
			}
		}

		[Token(Token = "0x170003A9")]
		public bool SupportsIPE
		{
			[Token(Token = "0x600169F")]
			[Address(RVA = "0x12729FC", Offset = "0x12729FC", VA = "0x12729FC", Slot = "20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003AA")]
		protected override CurvySpline InputSpline
		{
			[Token(Token = "0x60016A2")]
			[Address(RVA = "0x1272CEC", Offset = "0x1272CEC", VA = "0x1272CEC", Slot = "17")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016A3")]
			[Address(RVA = "0x1272CF4", Offset = "0x1272CF4", VA = "0x1272CF4", Slot = "18")]
			set
			{
			}
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0x1272A04", Offset = "0x1272A04", VA = "0x1272A04", Slot = "22")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0x1272C54", Offset = "0x1272C54", VA = "0x1272C54", Slot = "14")]
		public override void OnTemplateCreated()
		{
		}

		[Token(Token = "0x60016A4")]
		[Address(RVA = "0x1272CF8", Offset = "0x1272CF8", VA = "0x1272CF8")]
		public InputSplinePath()
		{
		}
	}
	[Token(Token = "0x2000320")]
	[ModuleInfo("Input/Spline Shape", ModuleName = "Input Spline Shape", Description = "Spline Shape")]
	[HelpURL("https://curvyeditor.com/doclink/cginputsplineshape")]
	public class InputSplineShape : SplineInputModuleBase, IExternalInput, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[OutputSlotInfo(typeof(CGShape))]
		[HideInInspector]
		public CGModuleOutputSlot OutShape;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tab("General", Sort = 0)]
		[SerializeField]
		[CGResourceManager("Shape")]
		private CurvySpline m_Shape;

		[Token(Token = "0x170003AB")]
		public CurvySpline Shape
		{
			[Token(Token = "0x60016A5")]
			[Address(RVA = "0x1272D60", Offset = "0x1272D60", VA = "0x1272D60")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016A6")]
			[Address(RVA = "0x1272D68", Offset = "0x1272D68", VA = "0x1272D68")]
			set
			{
			}
		}

		[Token(Token = "0x170003AC")]
		public bool SupportsIPE
		{
			[Token(Token = "0x60016A7")]
			[Address(RVA = "0x1272E0C", Offset = "0x1272E0C", VA = "0x1272E0C", Slot = "20")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003AD")]
		public bool FreeForm
		{
			[Token(Token = "0x60016A8")]
			[Address(RVA = "0x1272E10", Offset = "0x1272E10", VA = "0x1272E10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016A9")]
			[Address(RVA = "0x1272ED4", Offset = "0x1272ED4", VA = "0x1272ED4")]
			set
			{
			}
		}

		[Token(Token = "0x170003AE")]
		protected override CurvySpline InputSpline
		{
			[Token(Token = "0x60016AD")]
			[Address(RVA = "0x12731FC", Offset = "0x12731FC", VA = "0x12731FC", Slot = "17")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016AE")]
			[Address(RVA = "0x1273204", Offset = "0x1273204", VA = "0x1273204", Slot = "18")]
			set
			{
			}
		}

		[Token(Token = "0x60016AA")]
		[Address(RVA = "0x1273018", Offset = "0x1273018", VA = "0x1273018", Slot = "22")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x60016AB")]
		public T SetManagedShape<T>() where T : CurvyShape2D
		{
			return null;
		}

		[Token(Token = "0x60016AC")]
		[Address(RVA = "0x127314C", Offset = "0x127314C", VA = "0x127314C")]
		public void RemoveManagedShape()
		{
		}

		[Token(Token = "0x60016AF")]
		[Address(RVA = "0x1273208", Offset = "0x1273208", VA = "0x1273208", Slot = "19")]
		protected override void OnSplineAssigned()
		{
		}

		[Token(Token = "0x60016B0")]
		[Address(RVA = "0x1273298", Offset = "0x1273298", VA = "0x1273298")]
		public InputSplineShape()
		{
		}
	}
	[Token(Token = "0x2000321")]
	[ModuleInfo("Input/Spots", ModuleName = "Input Spots", Description = "Defines an array of placement spots")]
	[HelpURL("https://curvyeditor.com/doclink/cginputspots")]
	public class InputSpots : CGModule
	{
		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[OutputSlotInfo(typeof(CGSpots))]
		public CGModuleOutputSlot OutSpots;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[ArrayEx]
		[SerializeField]
		private List<CGSpot> m_Spots;

		[Token(Token = "0x170003AF")]
		public List<CGSpot> Spots
		{
			[Token(Token = "0x60016B1")]
			[Address(RVA = "0x1273300", Offset = "0x1273300", VA = "0x1273300")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016B2")]
			[Address(RVA = "0x1273308", Offset = "0x1273308", VA = "0x1273308")]
			set
			{
			}
		}

		[Token(Token = "0x60016B3")]
		[Address(RVA = "0x1273324", Offset = "0x1273324", VA = "0x1273324", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60016B4")]
		[Address(RVA = "0x1273350", Offset = "0x1273350", VA = "0x1273350", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016B5")]
		[Address(RVA = "0x12733B8", Offset = "0x12733B8", VA = "0x12733B8", Slot = "13")]
		public override void OnStateChange()
		{
		}

		[Token(Token = "0x60016B6")]
		[Address(RVA = "0x12733C0", Offset = "0x12733C0", VA = "0x12733C0", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x60016B7")]
		[Address(RVA = "0x12734E8", Offset = "0x12734E8", VA = "0x12734E8")]
		public InputSpots()
		{
		}
	}
	[Token(Token = "0x2000322")]
	[ModuleInfo("Modifier/Mix Paths", ModuleName = "Mix Paths", Description = "Interpolates between two paths")]
	[HelpURL("https://curvyeditor.com/doclink/cgmixpaths")]
	public class ModifierMixPaths : CGModule, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGPath) }, Name = "Path A")]
		public CGModuleInputSlot InPathA;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGPath) }, Name = "Path B")]
		public CGModuleInputSlot InPathB;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[OutputSlotInfo(typeof(CGPath))]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[RangeEx(-1f, 1f, "", "", Tooltip = "Mix between the paths. Values between -1 for Path A and 1 for Path B")]
		private float m_Mix;

		[Token(Token = "0x170003B0")]
		public float Mix
		{
			[Token(Token = "0x60016B8")]
			[Address(RVA = "0x1273594", Offset = "0x1273594", VA = "0x1273594")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016B9")]
			[Address(RVA = "0x127359C", Offset = "0x127359C", VA = "0x127359C")]
			set
			{
			}
		}

		[Token(Token = "0x170003B1")]
		[Obsolete("IOnRequestPath.PathLength and CGDataRequestRasterization.SplineAbsoluteLength are no more needed. SplineInputModuleBase.getPathLength is used instead")]
		public float PathLength
		{
			[Token(Token = "0x60016BA")]
			[Address(RVA = "0x12735B8", Offset = "0x12735B8", VA = "0x12735B8", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003B2")]
		public bool PathIsClosed
		{
			[Token(Token = "0x60016BB")]
			[Address(RVA = "0x1273728", Offset = "0x1273728", VA = "0x1273728", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0x1273890", Offset = "0x1273890", VA = "0x1273890", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60016BD")]
		[Address(RVA = "0x12738C0", Offset = "0x12738C0", VA = "0x12738C0", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0x12738F4", Offset = "0x12738F4", VA = "0x12738F4", Slot = "16")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0x1273A24", Offset = "0x1273A24", VA = "0x1273A24")]
		public static CGPath MixPath(CGPath pathA, CGPath pathB, float mix, [NotNull] List<string> warningsContainer)
		{
			return null;
		}

		[Token(Token = "0x60016C0")]
		[Address(RVA = "0x127456C", Offset = "0x127456C", VA = "0x127456C")]
		public ModifierMixPaths()
		{
		}
	}
	[Token(Token = "0x2000323")]
	[ModuleInfo("Modifier/Mix Shapes", ModuleName = "Mix Shapes", Description = "Interpolates between two shapes")]
	[HelpURL("https://curvyeditor.com/doclink/cgmixshapes")]
	public class ModifierMixShapes : CGModule, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGShape) }, Name = "Shape A")]
		public CGModuleInputSlot InShapeA;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGShape) }, Name = "Shape B")]
		public CGModuleInputSlot InShapeB;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[HideInInspector]
		[OutputSlotInfo(typeof(CGShape))]
		public CGModuleOutputSlot OutShape;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		[RangeEx(-1f, 1f, "", "", Tooltip = "Mix between the shapes. Values between -1 for Shape A and 1 for Shape B")]
		private float m_Mix;

		[Token(Token = "0x170003B3")]
		public float Mix
		{
			[Token(Token = "0x60016C1")]
			[Address(RVA = "0x1274620", Offset = "0x1274620", VA = "0x1274620")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016C2")]
			[Address(RVA = "0x1274628", Offset = "0x1274628", VA = "0x1274628")]
			set
			{
			}
		}

		[Token(Token = "0x170003B4")]
		[Obsolete("IOnRequestPath.PathLength and CGDataRequestRasterization.SplineAbsoluteLength are no more needed. SplineInputModuleBase.getPathLength is used instead")]
		public float PathLength
		{
			[Token(Token = "0x60016C3")]
			[Address(RVA = "0x1274644", Offset = "0x1274644", VA = "0x1274644", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003B5")]
		public bool PathIsClosed
		{
			[Token(Token = "0x60016C4")]
			[Address(RVA = "0x12747B4", Offset = "0x12747B4", VA = "0x12747B4", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0x127491C", Offset = "0x127491C", VA = "0x127491C", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0x127494C", Offset = "0x127494C", VA = "0x127494C", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0x1274980", Offset = "0x1274980", VA = "0x1274980", Slot = "16")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0x1274AB0", Offset = "0x1274AB0", VA = "0x1274AB0")]
		public static CGShape MixShapes(CGShape shapeA, CGShape shapeB, float mix, [NotNull] List<string> warningsContainer, bool ignoreWarnings = false)
		{
			return null;
		}

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0x1273D64", Offset = "0x1273D64", VA = "0x1273D64")]
		public static void InterpolateShape([NotNull] CGShape resultShape, CGShape shapeA, CGShape shapeB, float mix, [NotNull] List<string> warningsContainer, bool ignoreWarnings = false)
		{
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0x1274B60", Offset = "0x1274B60", VA = "0x1274B60")]
		public ModifierMixShapes()
		{
		}
	}
	[Token(Token = "0x2000325")]
	[HelpURL("https://curvyeditor.com/doclink/cgpathrelativetranslation")]
	[ModuleInfo("Modifier/Path Relative Translation", ModuleName = "Path Relative Translation", Description = "Translates a path relatively to it's direction, instead of relatively to the world as does the TRS Path module.")]
	public class ModifierPathRelativeTranslation : CGModule, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[InputSlotInfo(new Type[] { typeof(CGPath) }, Name = "Path A", ModifiesData = true)]
		[HideInInspector]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[HideInInspector]
		[OutputSlotInfo(typeof(CGPath))]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[Tooltip("The translation amount")]
		private float lateralTranslation;

		[Token(Token = "0x170003B6")]
		public float LateralTranslation
		{
			[Token(Token = "0x60016CE")]
			[Address(RVA = "0x1274C98", Offset = "0x1274C98", VA = "0x1274C98")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60016CF")]
			[Address(RVA = "0x1274CA0", Offset = "0x1274CA0", VA = "0x1274CA0")]
			set
			{
			}
		}

		[Token(Token = "0x170003B7")]
		[Obsolete("IOnRequestPath.PathLength and CGDataRequestRasterization.SplineAbsoluteLength are no more needed. SplineInputModuleBase.getPathLength is used instead")]
		public float PathLength
		{
			[Token(Token = "0x60016D0")]
			[Address(RVA = "0x1274CC0", Offset = "0x1274CC0", VA = "0x1274CC0", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003B8")]
		public bool PathIsClosed
		{
			[Token(Token = "0x60016D1")]
			[Address(RVA = "0x1274DA4", Offset = "0x1274DA4", VA = "0x1274DA4", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60016D2")]
		[Address(RVA = "0x1274E88", Offset = "0x1274E88", VA = "0x1274E88", Slot = "16")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x60016D3")]
		[Address(RVA = "0x127506C", Offset = "0x127506C", VA = "0x127506C", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0x127509C", Offset = "0x127509C", VA = "0x127509C", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0x12750D8", Offset = "0x12750D8", VA = "0x12750D8")]
		public ModifierPathRelativeTranslation()
		{
		}
	}
	[Token(Token = "0x2000326")]
	[ModuleInfo("Modifier/TRS Mesh", ModuleName = "TRS Mesh", Description = "Transform,Rotate,Scale a VMesh")]
	[HelpURL("https://curvyeditor.com/doclink/cgtrsmesh")]
	public class ModifierTRSMesh : TRSModuleBase
	{
		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGVMesh) }, Array = true, ModifiesData = true)]
		public CGModuleInputSlot InVMesh;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		[OutputSlotInfo(typeof(CGVMesh), Array = true)]
		public CGModuleOutputSlot OutVMesh;

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0x1275170", Offset = "0x1275170", VA = "0x1275170", Slot = "11")]
		public override void Refresh()
		{
		}

		[Token(Token = "0x60016D7")]
		[Address(RVA = "0x1275340", Offset = "0x1275340", VA = "0x1275340")]
		public ModifierTRSMesh()
		{
		}
	}
	[Token(Token = "0x2000327")]
	[HelpURL("https://curvyeditor.com/doclink/cgtrspath")]
	[ModuleInfo("Modifier/TRS Path", ModuleName = "TRS Path", Description = "Transform,Rotate,Scale a Path")]
	public class ModifierTRSPath : TRSModuleBase, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGPath) }, Name = "Path A", ModifiesData = true)]
		public CGModuleInputSlot InPath;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		[OutputSlotInfo(typeof(CGPath))]
		public CGModuleOutputSlot OutPath;

		[Token(Token = "0x170003B9")]
		[Obsolete("IOnRequestPath.PathLength and CGDataRequestRasterization.SplineAbsoluteLength are no more needed. SplineInputModuleBase.getPathLength is used instead")]
		public float PathLength
		{
			[Token(Token = "0x60016D8")]
			[Address(RVA = "0x12753D8", Offset = "0x12753D8", VA = "0x12753D8", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003BA")]
		public bool PathIsClosed
		{
			[Token(Token = "0x60016D9")]
			[Address(RVA = "0x12754BC", Offset = "0x12754BC", VA = "0x12754BC", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60016DA")]
		[Address(RVA = "0x12755A0", Offset = "0x12755A0", VA = "0x12755A0", Slot = "16")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0x1275880", Offset = "0x1275880", VA = "0x1275880")]
		public ModifierTRSPath()
		{
		}
	}
	[Token(Token = "0x2000328")]
	[HelpURL("https://curvyeditor.com/doclink/cgtrsshape")]
	[ModuleInfo("Modifier/TRS Shape", ModuleName = "TRS Shape", Description = "Transform,Rotate,Scale a Shape")]
	public class ModifierTRSShape : TRSModuleBase, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[InputSlotInfo(new Type[] { typeof(CGShape) }, Name = "Shape A", ModifiesData = true)]
		[HideInInspector]
		public CGModuleInputSlot InShape;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		[OutputSlotInfo(typeof(CGShape))]
		public CGModuleOutputSlot OutShape;

		[Token(Token = "0x170003BB")]
		[Obsolete("IOnRequestPath.PathLength and CGDataRequestRasterization.SplineAbsoluteLength are no more needed. SplineInputModuleBase.getPathLength is used instead")]
		public float PathLength
		{
			[Token(Token = "0x60016DC")]
			[Address(RVA = "0x1275918", Offset = "0x1275918", VA = "0x1275918", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003BC")]
		public bool PathIsClosed
		{
			[Token(Token = "0x60016DD")]
			[Address(RVA = "0x12759FC", Offset = "0x12759FC", VA = "0x12759FC", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0x1275AE0", Offset = "0x1275AE0", VA = "0x1275AE0", Slot = "16")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0x1275DC0", Offset = "0x1275DC0", VA = "0x1275DC0")]
		public ModifierTRSShape()
		{
		}
	}
	[Token(Token = "0x2000329")]
	[HelpURL("https://curvyeditor.com/doclink/cgvariablemixshapes")]
	[ModuleInfo("Modifier/Variable Mix Shapes", ModuleName = "Variable Mix Shapes", Description = "Interpolates between two shapes in a way that varies along the shape extrusion")]
	public class ModifierVariableMixShapes : CGModule, IOnRequestPath, IOnRequestProcessing, IPathProvider
	{
		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[HideInInspector]
		[InputSlotInfo(new Type[] { typeof(CGShape) }, Name = "Shape A")]
		public CGModuleInputSlot InShapeA;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[InputSlotInfo(new Type[] { typeof(CGShape) }, Name = "Shape B")]
		[HideInInspector]
		public CGModuleInputSlot InShapeB;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[ShapeOutputSlotInfo(OutputsVariableShape = true, Array = true, ArrayType = SlotInfo.SlotArrayType.Hidden)]
		[HideInInspector]
		public CGModuleOutputSlot OutShape;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Label("Mix Curve", "Mix between the shapes. Values (Y axis) between -1 for Shape A and 1 for Shape B. Times (X axis) between 0 for extrusion start and 1 for extrusion end")]
		[SerializeField]
		private AnimationCurve m_MixCurve;

		[Token(Token = "0x170003BD")]
		[Obsolete("IOnRequestPath.PathLength and CGDataRequestRasterization.SplineAbsoluteLength are no more needed. SplineInputModuleBase.getPathLength is used instead")]
		public float PathLength
		{
			[Token(Token = "0x60016E0")]
			[Address(RVA = "0x1275E58", Offset = "0x1275E58", VA = "0x1275E58", Slot = "15")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170003BE")]
		public bool PathIsClosed
		{
			[Token(Token = "0x60016E1")]
			[Address(RVA = "0x1275FC8", Offset = "0x1275FC8", VA = "0x1275FC8", Slot = "17")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003BF")]
		public AnimationCurve MixCurve
		{
			[Token(Token = "0x60016E2")]
			[Address(RVA = "0x1276130", Offset = "0x1276130", VA = "0x1276130")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016E3")]
			[Address(RVA = "0x1276138", Offset = "0x1276138", VA = "0x1276138")]
			set
			{
			}
		}

		[Token(Token = "0x60016E4")]
		[Address(RVA = "0x127614C", Offset = "0x127614C", VA = "0x127614C", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016E5")]
		[Address(RVA = "0x1276180", Offset = "0x1276180", VA = "0x1276180", Slot = "16")]
		public CGData[] OnSlotDataRequest(CGModuleInputSlot requestedBy, CGModuleOutputSlot requestedSlot, params CGDataRequestParameter[] requests)
		{
			return null;
		}

		[Token(Token = "0x60016E6")]
		[Address(RVA = "0x1276338", Offset = "0x1276338", VA = "0x1276338")]
		public ModifierVariableMixShapes()
		{
		}
	}
	[Token(Token = "0x200032A")]
	[HelpURL("https://curvyeditor.com/doclink/cgnote")]
	[ModuleInfo("Note", ModuleName = "Note", Description = "Creates a note")]
	public class Note : CGModule, INoProcessing
	{
		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[TextArea(3, 10)]
		private string m_Note;

		[Token(Token = "0x170003C0")]
		public string NoteText
		{
			[Token(Token = "0x60016E7")]
			[Address(RVA = "0x1276408", Offset = "0x1276408", VA = "0x1276408")]
			get
			{
				return null;
			}
			[Token(Token = "0x60016E8")]
			[Address(RVA = "0x1276410", Offset = "0x1276410", VA = "0x1276410")]
			set
			{
			}
		}

		[Token(Token = "0x60016E9")]
		[Address(RVA = "0x1276440", Offset = "0x1276440", VA = "0x1276440", Slot = "6")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60016EA")]
		[Address(RVA = "0x1276470", Offset = "0x1276470", VA = "0x1276470", Slot = "12")]
		public override void Reset()
		{
		}

		[Token(Token = "0x60016EB")]
		[Address(RVA = "0x127648C", Offset = "0x127648C", VA = "0x127648C")]
		public Note()
		{
		}
	}
}
namespace FluffyUnderware.Curvy.Examples
{
	[Token(Token = "0x200032B")]
	public class CameraLook : MonoBehaviour
	{
		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 10f)]
		[SerializeField]
		private float m_TurnSpeed;

		[Token(Token = "0x60016EC")]
		[Address(RVA = "0x1276494", Offset = "0x1276494", VA = "0x1276494")]
		protected void Update()
		{
		}

		[Token(Token = "0x60016ED")]
		[Address(RVA = "0x1276590", Offset = "0x1276590", VA = "0x1276590")]
		public CameraLook()
		{
		}
	}
	[Token(Token = "0x200032C")]
	[ExecuteInEditMode]
	public class ChaseCam : MonoBehaviour
	{
		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform MoveTo;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform RollTo;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Positive]
		public float ChaseTime;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 mVelocity;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 mRollVelocity;

		[Token(Token = "0x60016EE")]
		[Address(RVA = "0x12765A0", Offset = "0x12765A0", VA = "0x12765A0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60016EF")]
		[Address(RVA = "0x1276828", Offset = "0x1276828", VA = "0x1276828")]
		public ChaseCam()
		{
		}
	}
	[Token(Token = "0x200032D")]
	public class CurvyCamController : SplineController
	{
		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Section("Curvy Cam", true, false, 100)]
		public float MinSpeed;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float MaxSpeed;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public float Mass;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		public float Down;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float Up;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public float Fric;

		[Token(Token = "0x60016F0")]
		[Address(RVA = "0x1276838", Offset = "0x1276838", VA = "0x1276838", Slot = "8")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x60016F1")]
		[Address(RVA = "0x127685C", Offset = "0x127685C", VA = "0x127685C", Slot = "29")]
		protected override void Advance(float speed, float deltaTime)
		{
		}

		[Token(Token = "0x60016F2")]
		[Address(RVA = "0x1276934", Offset = "0x1276934", VA = "0x1276934")]
		public CurvyCamController()
		{
		}
	}
	[Token(Token = "0x200032E")]
	public class HeightMetadata : CurvyInterpolatableMetadataBase<float>
	{
		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[RangeEx(0f, 1f, "", "", Slider = true)]
		private float m_Height;

		[Token(Token = "0x170003C1")]
		public override float MetaDataValue
		{
			[Token(Token = "0x60016F3")]
			[Address(RVA = "0x1276948", Offset = "0x1276948", VA = "0x1276948", Slot = "10")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60016F4")]
		[Address(RVA = "0x1276950", Offset = "0x1276950", VA = "0x1276950", Slot = "11")]
		public override float Interpolate(CurvyInterpolatableMetadataBase<float> nextMetadata, float interpolationTime)
		{
			return default(float);
		}

		[Token(Token = "0x60016F5")]
		[Address(RVA = "0x1276A20", Offset = "0x1276A20", VA = "0x1276A20")]
		public HeightMetadata()
		{
		}
	}
	[Token(Token = "0x200032F")]
	public class InfiniteTrack : MonoBehaviour
	{
		[Token(Token = "0x2000330")]
		[CompilerGenerated]
		private sealed class <setup>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000FEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000FED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000FEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InfiniteTrack <>4__this;

			[Token(Token = "0x4000FEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x170003C2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001704")]
				[Address(RVA = "0x1277B18", Offset = "0x1277B18", VA = "0x1277B18", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001706")]
				[Address(RVA = "0x1277B60", Offset = "0x1277B60", VA = "0x1277B60", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001701")]
			[Address(RVA = "0x1276CFC", Offset = "0x1276CFC", VA = "0x1276CFC")]
			[DebuggerHidden]
			public <setup>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6001702")]
			[Address(RVA = "0x1277794", Offset = "0x1277794", VA = "0x1277794", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001703")]
			[Address(RVA = "0x1277798", Offset = "0x1277798", VA = "0x1277798", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001705")]
			[Address(RVA = "0x1277B20", Offset = "0x1277B20", VA = "0x1277B20", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline TrackSpline;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CurvyController Controller;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material RoadMaterial;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text TxtStats;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Positive]
		public float CurvationX;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Positive]
		public float CurvationY;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Positive]
		public float CPStepSize;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Positive]
		public int HeadCP;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Positive]
		public int TailCP;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[FluffyUnderware.DevTools.Min(3f, "", "")]
		public int Sections;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[FluffyUnderware.DevTools.Min(1f, "", "")]
		public int SectionCPCount;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int mInitState;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool mUpdateSpline;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int mUpdateIn;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CurvyGenerator[] mGenerators;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int mCurrentGen;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float lastSectionEndV;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 mDir;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private TimeMeasure timeSpline;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private TimeMeasure timeCG;

		[Token(Token = "0x60016F6")]
		[Address(RVA = "0x1276A68", Offset = "0x1276A68", VA = "0x1276A68")]
		private void Start()
		{
		}

		[Token(Token = "0x60016F7")]
		[Address(RVA = "0x1276ABC", Offset = "0x1276ABC", VA = "0x1276ABC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60016F8")]
		[Address(RVA = "0x1276C94", Offset = "0x1276C94", VA = "0x1276C94")]
		[IteratorStateMachine(typeof(<setup>d__22))]
		private IEnumerator setup()
		{
			return null;
		}

		[Token(Token = "0x60016F9")]
		[Address(RVA = "0x1276D24", Offset = "0x1276D24", VA = "0x1276D24")]
		private CurvyGenerator buildGenerator()
		{
			return null;
		}

		[Token(Token = "0x60016FA")]
		[Address(RVA = "0x1276B38", Offset = "0x1276B38", VA = "0x1276B38")]
		private void advanceTrack()
		{
		}

		[Token(Token = "0x60016FB")]
		[Address(RVA = "0x1277314", Offset = "0x1277314", VA = "0x1277314")]
		private void advanceSections()
		{
		}

		[Token(Token = "0x60016FC")]
		[Address(RVA = "0x12775DC", Offset = "0x12775DC", VA = "0x12775DC")]
		private void updateStats()
		{
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0x12773A0", Offset = "0x12773A0", VA = "0x12773A0")]
		private void updateSectionGenerator(CurvyGenerator gen, int startCP, int endCP)
		{
		}

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0x12776C4", Offset = "0x12776C4", VA = "0x12776C4")]
		public void Track_OnControlPointReached(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0x12770F0", Offset = "0x12770F0", VA = "0x12770F0")]
		private void addTrackCP()
		{
		}

		[Token(Token = "0x6001700")]
		[Address(RVA = "0x12776EC", Offset = "0x12776EC", VA = "0x12776EC")]
		public InfiniteTrack()
		{
		}
	}
	[Token(Token = "0x2000331")]
	public class MDJunctionControl : CurvyMetadataBase
	{
		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool UseJunction;

		[Token(Token = "0x6001707")]
		[Address(RVA = "0x1277B68", Offset = "0x1277B68", VA = "0x1277B68")]
		public void Toggle()
		{
		}

		[Token(Token = "0x6001708")]
		[Address(RVA = "0x1277B78", Offset = "0x1277B78", VA = "0x1277B78")]
		public MDJunctionControl()
		{
		}
	}
	[Token(Token = "0x2000332")]
	public class MetaDataController : SplineController
	{
		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		[RangeEx(0f, 30f, "", "")]
		[Section("MetaController", true, false, 100, Sort = 0)]
		private float m_MaxHeight;

		[Token(Token = "0x170003C4")]
		public float MaxHeight
		{
			[Token(Token = "0x6001709")]
			[Address(RVA = "0x1277B80", Offset = "0x1277B80", VA = "0x1277B80")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600170A")]
			[Address(RVA = "0x1277B88", Offset = "0x1277B88", VA = "0x1277B88")]
			set
			{
			}
		}

		[Token(Token = "0x600170B")]
		[Address(RVA = "0x1277B9C", Offset = "0x1277B9C", VA = "0x1277B9C", Slot = "24")]
		protected override void UserAfterInit()
		{
		}

		[Token(Token = "0x600170C")]
		[Address(RVA = "0x1277C90", Offset = "0x1277C90", VA = "0x1277C90", Slot = "25")]
		protected override void UserAfterUpdate()
		{
		}

		[Token(Token = "0x600170D")]
		[Address(RVA = "0x1277BA0", Offset = "0x1277BA0", VA = "0x1277BA0")]
		private void setHeight()
		{
		}

		[Token(Token = "0x600170E")]
		[Address(RVA = "0x1277C94", Offset = "0x1277C94", VA = "0x1277C94")]
		public MetaDataController()
		{
		}
	}
	[Token(Token = "0x2000333")]
	public class MotorController : SplineController
	{
		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Section("Motor", true, false, 100)]
		public float MaxSpeed;

		[Token(Token = "0x600170F")]
		[Address(RVA = "0x1277CA4", Offset = "0x1277CA4", VA = "0x1277CA4", Slot = "11")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0x1277D3C", Offset = "0x1277D3C", VA = "0x1277D3C")]
		public MotorController()
		{
		}
	}
	[Token(Token = "0x2000334")]
	[ExecuteInEditMode]
	public class MoveToNearestPoint : MonoBehaviour
	{
		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Lookup;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CurvySpline Spline;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text StatisticsText;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Slider Density;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TimeMeasure Timer;

		[Token(Token = "0x6001711")]
		[Address(RVA = "0x1277D4C", Offset = "0x1277D4C", VA = "0x1277D4C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001712")]
		[Address(RVA = "0x1277FC0", Offset = "0x1277FC0", VA = "0x1277FC0")]
		public void OnSliderChange()
		{
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0x1278014", Offset = "0x1278014", VA = "0x1278014")]
		public MoveToNearestPoint()
		{
		}
	}
	[Token(Token = "0x2000335")]
	public class PaintSpline : MonoBehaviour
	{
		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float StepDistance;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SplineController Controller;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text InfoText;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CurvySpline mSpline;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector2 mLastControlPointPos;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool mResetSpline;

		[Token(Token = "0x6001714")]
		[Address(RVA = "0x1278080", Offset = "0x1278080", VA = "0x1278080")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0x12780D0", Offset = "0x12780D0", VA = "0x12780D0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0x12782F4", Offset = "0x12782F4", VA = "0x12782F4")]
		private CurvySplineSegment addCP(Vector3 mousePos)
		{
			return null;
		}

		[Token(Token = "0x6001717")]
		[Address(RVA = "0x1278400", Offset = "0x1278400", VA = "0x1278400")]
		public PaintSpline()
		{
		}
	}
	[Token(Token = "0x2000336")]
	public class PerformanceAPI : MonoBehaviour
	{
		[Token(Token = "0x4000FFE")]
		private const int LOOPS = 20;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<string> mTests;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<string> mTestResults;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CurvyInterpolation mInterpolation;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private CurvyOrientation mOrientation;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int mCacheSize;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int mControlPointCount;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int mTotalSplineLength;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool mUseCache;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool mUseMultiThreads;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int mCurrentTest;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool mExecuting;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TimeMeasure Timer;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MethodInfo mGUIMethod;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MethodInfo mRunMethod;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool mInterpolate_UseDistance;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int mRefresh_Mode;

		[Token(Token = "0x6001718")]
		[Address(RVA = "0x1278418", Offset = "0x1278418", VA = "0x1278418")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001719")]
		[Address(RVA = "0x1278540", Offset = "0x1278540", VA = "0x1278540")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600171A")]
		[Address(RVA = "0x127996C", Offset = "0x127996C", VA = "0x127996C")]
		private void GUI_Interpolate()
		{
		}

		[Token(Token = "0x600171B")]
		[Address(RVA = "0x1279A80", Offset = "0x1279A80", VA = "0x1279A80")]
		private void Test_Interpolate()
		{
		}

		[Token(Token = "0x600171C")]
		[Address(RVA = "0x127A038", Offset = "0x127A038", VA = "0x127A038")]
		private void GUI_Refresh()
		{
		}

		[Token(Token = "0x600171D")]
		[Address(RVA = "0x127A2A0", Offset = "0x127A2A0", VA = "0x127A2A0")]
		private void Work()
		{
		}

		[Token(Token = "0x600171E")]
		[Address(RVA = "0x127A2FC", Offset = "0x127A2FC", VA = "0x127A2FC")]
		private void work()
		{
		}

		[Token(Token = "0x600171F")]
		[Address(RVA = "0x127A358", Offset = "0x127A358", VA = "0x127A358")]
		private void Test_Refresh()
		{
		}

		[Token(Token = "0x6001720")]
		[Address(RVA = "0x1279DB8", Offset = "0x1279DB8", VA = "0x1279DB8")]
		private CurvySpline getSpline()
		{
			return null;
		}

		[Token(Token = "0x6001721")]
		[Address(RVA = "0x1279E30", Offset = "0x1279E30", VA = "0x1279E30")]
		private void addRandomCP(ref CurvySpline spline, int count, int totalLength)
		{
		}

		[Token(Token = "0x6001722")]
		[Address(RVA = "0x127A634", Offset = "0x127A634", VA = "0x127A634")]
		private void runTest()
		{
		}

		[Token(Token = "0x6001723")]
		[Address(RVA = "0x127A664", Offset = "0x127A664", VA = "0x127A664")]
		public PerformanceAPI()
		{
		}
	}
	[Token(Token = "0x2000337")]
	public class PerformanceDynamicSpline : MonoBehaviour
	{
		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CurvySpline mSpline;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CurvyGenerator Generator;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Positive]
		public int UpdateInterval;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[RangeEx(2f, 2000f, "", "")]
		public int CPCount;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Positive]
		public float Radius;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool AlwaysClear;

		[Token(Token = "0x4001015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool UpdateCG;

		[Token(Token = "0x4001016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float mAngleStep;

		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float mCurrentAngle;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float mLastUpdateTime;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TimeMeasure ExecTimes;

		[Token(Token = "0x6001724")]
		[Address(RVA = "0x127A75C", Offset = "0x127A75C", VA = "0x127A75C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001725")]
		[Address(RVA = "0x127A7AC", Offset = "0x127A7AC", VA = "0x127A7AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001726")]
		[Address(RVA = "0x127A910", Offset = "0x127A910", VA = "0x127A910")]
		private void Update()
		{
		}

		[Token(Token = "0x6001727")]
		[Address(RVA = "0x127A818", Offset = "0x127A818", VA = "0x127A818")]
		private void addCP()
		{
		}

		[Token(Token = "0x6001728")]
		[Address(RVA = "0x127AA6C", Offset = "0x127AA6C", VA = "0x127AA6C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001729")]
		[Address(RVA = "0x127B274", Offset = "0x127B274", VA = "0x127B274")]
		public PerformanceDynamicSpline()
		{
		}
	}
	[Token(Token = "0x2000338")]
	public class PoolTestRunner : MonoBehaviour
	{
		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline Spline;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text PoolCountInfo;

		[Token(Token = "0x600172A")]
		[Address(RVA = "0x127B2F4", Offset = "0x127B2F4", VA = "0x127B2F4")]
		private void Start()
		{
		}

		[Token(Token = "0x600172B")]
		[Address(RVA = "0x127B3BC", Offset = "0x127B3BC", VA = "0x127B3BC")]
		private void Update()
		{
		}

		[Token(Token = "0x600172C")]
		[Address(RVA = "0x127B2F8", Offset = "0x127B2F8", VA = "0x127B2F8")]
		private void checkForSpline()
		{
		}

		[Token(Token = "0x600172D")]
		[Address(RVA = "0x127B4B8", Offset = "0x127B4B8", VA = "0x127B4B8")]
		public void AddCP()
		{
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0x127B568", Offset = "0x127B568", VA = "0x127B568")]
		public void DeleteCP()
		{
		}

		[Token(Token = "0x600172F")]
		[Address(RVA = "0x127B660", Offset = "0x127B660", VA = "0x127B660")]
		public void ClearSpline()
		{
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0x127B6E0", Offset = "0x127B6E0", VA = "0x127B6E0")]
		public void DeleteSpline()
		{
		}

		[Token(Token = "0x6001731")]
		[Address(RVA = "0x127B760", Offset = "0x127B760", VA = "0x127B760")]
		public PoolTestRunner()
		{
		}
	}
	[Token(Token = "0x2000339")]
	[RequireComponent(typeof(Rigidbody))]
	public class RigidBodySplineController : MonoBehaviour
	{
		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline Spline;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SplineController CameraController;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float VSpeed;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float HSpeed;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float CenterDrag;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float JumpForce;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody mRigidBody;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float mTF;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float velocity;

		[Token(Token = "0x6001732")]
		[Address(RVA = "0x127B768", Offset = "0x127B768", VA = "0x127B768")]
		private void Start()
		{
		}

		[Token(Token = "0x6001733")]
		[Address(RVA = "0x127B7B8", Offset = "0x127B7B8", VA = "0x127B7B8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001734")]
		[Address(RVA = "0x127B8A8", Offset = "0x127B8A8", VA = "0x127B8A8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0x127BBD0", Offset = "0x127BBD0", VA = "0x127BBD0")]
		public RigidBodySplineController()
		{
		}
	}
	[Token(Token = "0x200033A")]
	public class RunnerController : SplineController
	{
		[Token(Token = "0x200033B")]
		private enum GuideMode
		{
			[Token(Token = "0x400102F")]
			Guided,
			[Token(Token = "0x4001030")]
			Jumping,
			[Token(Token = "0x4001031")]
			FreeFall
		}

		[Token(Token = "0x200033C")]
		[CompilerGenerated]
		private sealed class <Jump>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001032")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001033")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001034")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RunnerController <>4__this;

			[Token(Token = "0x4001035")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <start>5__2;

			[Token(Token = "0x4001036")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <f>5__3;

			[Token(Token = "0x170003C5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001740")]
				[Address(RVA = "0x127C4A4", Offset = "0x127C4A4", VA = "0x127C4A4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001742")]
				[Address(RVA = "0x127C4EC", Offset = "0x127C4EC", VA = "0x127C4EC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600173D")]
			[Address(RVA = "0x127C17C", Offset = "0x127C17C", VA = "0x127C17C")]
			[DebuggerHidden]
			public <Jump>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x600173E")]
			[Address(RVA = "0x127C374", Offset = "0x127C374", VA = "0x127C374", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600173F")]
			[Address(RVA = "0x127C378", Offset = "0x127C378", VA = "0x127C378", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001741")]
			[Address(RVA = "0x127C4AC", Offset = "0x127C4AC", VA = "0x127C4AC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Section("Jump", true, false, 100)]
		public float JumpHeight;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public float JumpSpeed;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public AnimationCurve JumpCurve;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public float Gravity;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private GuideMode mMode;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private float jumpHeight;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private float fallingSpeed;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private SplineRefMetadata mPossibleSwitchTarget;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private int mSwitchInProgress;

		[Token(Token = "0x6001736")]
		[Address(RVA = "0x127BBE4", Offset = "0x127BBE4", VA = "0x127BBE4", Slot = "10")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6001737")]
		[Address(RVA = "0x127BC04", Offset = "0x127BC04", VA = "0x127BC04", Slot = "16")]
		protected override void InitializedApplyDeltaTime(float deltaTime)
		{
		}

		[Token(Token = "0x6001738")]
		[Address(RVA = "0x127BF30", Offset = "0x127BF30", VA = "0x127BF30")]
		private void Switch(int dir)
		{
		}

		[Token(Token = "0x6001739")]
		[Address(RVA = "0x127BEC8", Offset = "0x127BEC8", VA = "0x127BEC8")]
		[IteratorStateMachine(typeof(<Jump>d__13))]
		private IEnumerator Jump()
		{
			return null;
		}

		[Token(Token = "0x600173A")]
		[Address(RVA = "0x127C0B0", Offset = "0x127C0B0", VA = "0x127C0B0")]
		public void OnCPReached(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x600173B")]
		[Address(RVA = "0x127C1A4", Offset = "0x127C1A4", VA = "0x127C1A4")]
		public void UseFollowUpOrFall(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x600173C")]
		[Address(RVA = "0x127C32C", Offset = "0x127C32C", VA = "0x127C32C")]
		public RunnerController()
		{
		}
	}
	[Token(Token = "0x200033D")]
	public class SceneSwitcher : MonoBehaviour
	{
		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text Text;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dropdown DropDown;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Dictionary<string, string> scenesAlternativeNames;

		[Token(Token = "0x170003C7")]
		private int CurrentLevel
		{
			[Token(Token = "0x6001744")]
			[Address(RVA = "0x127C880", Offset = "0x127C880", VA = "0x127C880")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001745")]
			[Address(RVA = "0x127C8E8", Offset = "0x127C8E8", VA = "0x127C8E8")]
			set
			{
			}
		}

		[Token(Token = "0x6001743")]
		[Address(RVA = "0x127C4F4", Offset = "0x127C4F4", VA = "0x127C4F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001746")]
		[Address(RVA = "0x127C66C", Offset = "0x127C66C", VA = "0x127C66C")]
		private List<string> getScenes()
		{
			return null;
		}

		[Token(Token = "0x6001747")]
		[Address(RVA = "0x127C95C", Offset = "0x127C95C", VA = "0x127C95C")]
		private void OnValueChanged(int value)
		{
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0x127C978", Offset = "0x127C978", VA = "0x127C978")]
		public SceneSwitcher()
		{
		}
	}
	[Token(Token = "0x200033E")]
	public class SmoothFollow : MonoBehaviour
	{
		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform target;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float distance;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float height;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float rotationDamping;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float heightDamping;

		[Token(Token = "0x6001749")]
		[Address(RVA = "0x127CEE0", Offset = "0x127CEE0", VA = "0x127CEE0")]
		private void Start()
		{
		}

		[Token(Token = "0x600174A")]
		[Address(RVA = "0x127CEE4", Offset = "0x127CEE4", VA = "0x127CEE4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0x127D218", Offset = "0x127D218", VA = "0x127D218")]
		public SmoothFollow()
		{
		}
	}
	[Token(Token = "0x200033F")]
	public class SplineControllerInputRail : MonoBehaviour
	{
		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float acceleration;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float limit;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SplineController splineController;

		[Token(Token = "0x600174C")]
		[Address(RVA = "0x127D22C", Offset = "0x127D22C", VA = "0x127D22C")]
		private void Update()
		{
		}

		[Token(Token = "0x600174D")]
		[Address(RVA = "0x127D2E8", Offset = "0x127D2E8", VA = "0x127D2E8")]
		public SplineControllerInputRail()
		{
		}
	}
	[Token(Token = "0x2000340")]
	public class SplineRefMetadata : CurvyMetadataBase
	{
		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public new CurvySpline Spline;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CurvySplineSegment CP;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Options;

		[Token(Token = "0x600174E")]
		[Address(RVA = "0x127D2FC", Offset = "0x127D2FC", VA = "0x127D2FC")]
		public SplineRefMetadata()
		{
		}
	}
	[Token(Token = "0x2000341")]
	[ExecuteInEditMode]
	public class TrainCarDrifter : MonoBehaviour
	{
		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float wheelSpacing;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 bodyOffset;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SplineController controllerWheelLeading;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SplineController controllerWheelTrailing;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform trainCar;

		[Token(Token = "0x600174F")]
		[Address(RVA = "0x127D304", Offset = "0x127D304", VA = "0x127D304")]
		private void Start()
		{
		}

		[Token(Token = "0x6001750")]
		[Address(RVA = "0x127D328", Offset = "0x127D328", VA = "0x127D328")]
		private void Update()
		{
		}

		[Token(Token = "0x6001751")]
		[Address(RVA = "0x127D790", Offset = "0x127D790", VA = "0x127D790")]
		public TrainCarDrifter()
		{
		}
	}
	[Token(Token = "0x2000342")]
	[ExecuteInEditMode]
	public class TrainCarManager : MonoBehaviour
	{
		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SplineController Waggon;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SplineController FrontAxis;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SplineController BackAxis;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TrainManager mTrain;

		[Token(Token = "0x170003C8")]
		public float Position
		{
			[Token(Token = "0x6001752")]
			[Address(RVA = "0x127D7A8", Offset = "0x127D7A8", VA = "0x127D7A8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001753")]
			[Address(RVA = "0x127D7C4", Offset = "0x127D7C4", VA = "0x127D7C4")]
			set
			{
			}
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0x127D868", Offset = "0x127D868", VA = "0x127D868")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0x127DA78", Offset = "0x127DA78", VA = "0x127DA78")]
		public void setup()
		{
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0x127DB68", Offset = "0x127DB68", VA = "0x127DB68")]
		private void setController(SplineController c, CurvySpline spline, float speed)
		{
		}

		[Token(Token = "0x6001757")]
		[Address(RVA = "0x127DC50", Offset = "0x127DC50", VA = "0x127DC50")]
		public void OnCPReached(CurvySplineMoveEventArgs e)
		{
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0x127DD0C", Offset = "0x127DD0C", VA = "0x127DD0C")]
		public TrainCarManager()
		{
		}
	}
	[Token(Token = "0x2000343")]
	[ExecuteInEditMode]
	public class TrainManager : MonoBehaviour
	{
		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CurvySpline Spline;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Speed;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Position;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float CarSize;

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float AxisDistance;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float CarGap;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Limit;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool isSetup;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TrainCarManager[] Cars;

		[Token(Token = "0x6001759")]
		[Address(RVA = "0x127DD14", Offset = "0x127DD14", VA = "0x127DD14")]
		private void Start()
		{
		}

		[Token(Token = "0x600175A")]
		[Address(RVA = "0x127DEFC", Offset = "0x127DEFC", VA = "0x127DEFC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600175B")]
		[Address(RVA = "0x127DF04", Offset = "0x127DF04", VA = "0x127DF04")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600175C")]
		[Address(RVA = "0x127DD18", Offset = "0x127DD18", VA = "0x127DD18")]
		private void setup()
		{
		}

		[Token(Token = "0x600175D")]
		[Address(RVA = "0x127E100", Offset = "0x127E100", VA = "0x127E100")]
		public TrainManager()
		{
		}
	}
	[Token(Token = "0x2000344")]
	public class VolumeControllerInput : MonoBehaviour
	{
		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float AngularVelocity;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticleSystem explosionEmitter;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VolumeController volumeController;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rotatedTransform;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxSpeed;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float accelerationForward;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float accelerationBackward;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool mGameOver;

		[Token(Token = "0x600175E")]
		[Address(RVA = "0x127E114", Offset = "0x127E114", VA = "0x127E114")]
		private void Awake()
		{
		}

		[Token(Token = "0x600175F")]
		[Address(RVA = "0x127E19C", Offset = "0x127E19C", VA = "0x127E19C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001760")]
		[Address(RVA = "0x127E26C", Offset = "0x127E26C", VA = "0x127E26C")]
		private void ResetController()
		{
		}

		[Token(Token = "0x6001761")]
		[Address(RVA = "0x127E2B8", Offset = "0x127E2B8", VA = "0x127E2B8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001762")]
		[Address(RVA = "0x127E5C0", Offset = "0x127E5C0", VA = "0x127E5C0")]
		public void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0x127E5C4", Offset = "0x127E5C4", VA = "0x127E5C4")]
		public void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001764")]
		[Address(RVA = "0x127E658", Offset = "0x127E658", VA = "0x127E658")]
		private void StartOver()
		{
		}

		[Token(Token = "0x6001765")]
		[Address(RVA = "0x127E670", Offset = "0x127E670", VA = "0x127E670")]
		public VolumeControllerInput()
		{
		}
	}
}
